[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let normalized_value = \"custom_value\";",
          "    let result = canonical_gencat(normalized_value);",
          "}"
        ],
        "oracle": [
          "    let normalized_value = \"custom_value\";",
          "    let result = canonical_gencat(normalized_value);",
          "    assert!(result.is_ok());",
          "    let gencats = property_values(\"General_Category\").unwrap();",
          "    let expected = canonical_value(gencats, normalized_value);",
          "    assert_eq!(result.unwrap(), expected);"
        ],
        "code": [
          "{",
          "    let normalized_value = \"custom_value\";",
          "    let result = canonical_gencat(normalized_value);",
          "    let normalized_value = \"custom_value\";",
          "    let result = canonical_gencat(normalized_value);",
          "    assert!(result.is_ok());",
          "    let gencats = property_values(\"General_Category\").unwrap();",
          "    let expected = canonical_value(gencats, normalized_value);",
          "    assert_eq!(result.unwrap(), expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let normalized_value = \"another_value\";",
          "    let result = canonical_gencat(normalized_value);",
          "}"
        ],
        "oracle": [
          "    let normalized_value = \"another_value\";",
          "    let result = canonical_gencat(normalized_value);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), canonical_value(property_values(\"General_Category\")?.unwrap(), normalized_value));"
        ],
        "code": [
          "{",
          "    let normalized_value = \"another_value\";",
          "    let result = canonical_gencat(normalized_value);",
          "    let normalized_value = \"another_value\";",
          "    let result = canonical_gencat(normalized_value);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), canonical_value(property_values(\"General_Category\")?.unwrap(), normalized_value));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let normalized_value = \"non_matching_value\";",
          "    let result = canonical_gencat(normalized_value);",
          "}"
        ],
        "oracle": [
          "    let normalized_value = \"non_matching_value\";",
          "    let result = canonical_gencat(normalized_value);",
          "    assert!(result.is_ok());",
          "    assert!(result.unwrap().is_none());",
          "    assert_eq!(result.unwrap(), canonical_value(property_values(\"General_Category\").unwrap().unwrap(), normalized_value));"
        ],
        "code": [
          "{",
          "    let normalized_value = \"non_matching_value\";",
          "    let result = canonical_gencat(normalized_value);",
          "    let normalized_value = \"non_matching_value\";",
          "    let result = canonical_gencat(normalized_value);",
          "    assert!(result.is_ok());",
          "    assert!(result.unwrap().is_none());",
          "    assert_eq!(result.unwrap(), canonical_value(property_values(\"General_Category\").unwrap().unwrap(), normalized_value));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]