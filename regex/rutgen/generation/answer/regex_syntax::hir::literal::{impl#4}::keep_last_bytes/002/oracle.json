[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq = Seq::new(vec![",
          "        Literal::exact(\"hello\"),",
          "        Literal::exact(\"world\"),",
          "        Literal::exact(\"rust\"),",
          "    ]);",
          "    seq.keep_last_bytes(2);",
          "}"
        ],
        "oracle": [
          "    let mut seq = Seq::new(vec![Literal::exact(\"hello\"), Literal::exact(\"world\"), Literal::exact(\"rust\")]);",
          "    seq.keep_last_bytes(2);",
          "    assert_eq!(seq.literals(), Some(&[Literal::inexact(\"lo\"), Literal::inexact(\"ld\"), Literal::inexact(\"st\")]));"
        ],
        "code": [
          "{",
          "    let mut seq = Seq::new(vec![",
          "        Literal::exact(\"hello\"),",
          "        Literal::exact(\"world\"),",
          "        Literal::exact(\"rust\"),",
          "    ]);",
          "    seq.keep_last_bytes(2);",
          "    let mut seq = Seq::new(vec![Literal::exact(\"hello\"), Literal::exact(\"world\"), Literal::exact(\"rust\")]);",
          "    seq.keep_last_bytes(2);",
          "    assert_eq!(seq.literals(), Some(&[Literal::inexact(\"lo\"), Literal::inexact(\"ld\"), Literal::inexact(\"st\")]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq = Seq::new(vec![",
          "        Literal::exact(\"example\"),",
          "        Literal::exact(\"testing\"),",
          "        Literal::exact(\"strings\"),",
          "    ]);",
          "    seq.keep_last_bytes(4);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq.literals().unwrap().len(), 3);",
          "    assert_eq!(seq.literals().unwrap()[0].as_bytes(), b\"mple\");",
          "    assert_eq!(seq.literals().unwrap()[1].as_bytes(), b\"ting\");",
          "    assert_eq!(seq.literals().unwrap()[2].as_bytes(), b\"ings\");",
          "    assert!(!seq.literals().unwrap()[0].is_exact());",
          "    assert!(!seq.literals().unwrap()[1].is_exact());",
          "    assert!(seq.literals().unwrap()[2].is_exact());"
        ],
        "code": [
          "{",
          "    let mut seq = Seq::new(vec![",
          "        Literal::exact(\"example\"),",
          "        Literal::exact(\"testing\"),",
          "        Literal::exact(\"strings\"),",
          "    ]);",
          "    seq.keep_last_bytes(4);",
          "    assert_eq!(seq.literals().unwrap().len(), 3);",
          "    assert_eq!(seq.literals().unwrap()[0].as_bytes(), b\"mple\");",
          "    assert_eq!(seq.literals().unwrap()[1].as_bytes(), b\"ting\");",
          "    assert_eq!(seq.literals().unwrap()[2].as_bytes(), b\"ings\");",
          "    assert!(!seq.literals().unwrap()[0].is_exact());",
          "    assert!(!seq.literals().unwrap()[1].is_exact());",
          "    assert!(seq.literals().unwrap()[2].is_exact());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq = Seq::new(vec![",
          "        Literal::exact(\"trimmed\"),",
          "        Literal::exact(\"to\"),",
          "        Literal::exact(\"zero\"),",
          "    ]);",
          "    seq.keep_last_bytes(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq.literals(), Some(&[Literal::exact(\"trimmed\"), Literal::exact(\"to\"), Literal::exact(\"zero\")]));",
          "    seq.keep_last_bytes(1);",
          "    assert_eq!(seq.literals(), Some(&[Literal::inexact(\"d\"), Literal::inexact(\"o\"), Literal::inexact(\"0\")]));",
          "    seq.keep_last_bytes(5);",
          "    assert_eq!(seq.literals(), Some(&[Literal::inexact(\"trimmed\"), Literal::inexact(\"to\"), Literal::inexact(\"zero\")]));",
          "    seq.keep_last_bytes(10);",
          "    assert_eq!(seq.literals(), Some(&[Literal::exact(\"trimmed\"), Literal::exact(\"to\"), Literal::exact(\"zero\")]));"
        ],
        "code": [
          "{",
          "    let mut seq = Seq::new(vec![",
          "        Literal::exact(\"trimmed\"),",
          "        Literal::exact(\"to\"),",
          "        Literal::exact(\"zero\"),",
          "    ]);",
          "    seq.keep_last_bytes(0);",
          "    assert_eq!(seq.literals(), Some(&[Literal::exact(\"trimmed\"), Literal::exact(\"to\"), Literal::exact(\"zero\")]));",
          "    seq.keep_last_bytes(1);",
          "    assert_eq!(seq.literals(), Some(&[Literal::inexact(\"d\"), Literal::inexact(\"o\"), Literal::inexact(\"0\")]));",
          "    seq.keep_last_bytes(5);",
          "    assert_eq!(seq.literals(), Some(&[Literal::inexact(\"trimmed\"), Literal::inexact(\"to\"), Literal::inexact(\"zero\")]));",
          "    seq.keep_last_bytes(10);",
          "    assert_eq!(seq.literals(), Some(&[Literal::exact(\"trimmed\"), Literal::exact(\"to\"), Literal::exact(\"zero\")]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq = Seq::new(vec![",
          "        Literal::exact(\"short\"),",
          "        Literal::exact(\"longer_than\"),",
          "        Literal::exact(\"maximum\"),",
          "    ]);",
          "    seq.keep_last_bytes(15);",
          "}"
        ],
        "oracle": [
          "    let mut seq = Seq::new(vec![",
          "    Literal::exact(\"short\"),",
          "    Literal::exact(\"longer_than\"),",
          "    Literal::exact(\"maximum\"),",
          "    ]);",
          "    seq.keep_last_bytes(15);",
          "    ",
          "    let expected = Seq::new(vec![",
          "    Literal::exact(\"short\"),",
          "    Literal::exact(\"longer_than\"),",
          "    Literal::exact(\"maximum\"),",
          "    ]);",
          "    assert_eq!(expected.literals(), seq.literals());",
          "    ",
          "    seq.keep_last_bytes(5);",
          "    let expected_after_trim = Seq::new(vec![",
          "    Literal::exact(\"short\"),",
          "    Literal::inexact(\"than\"),",
          "    Literal::inexact(\"imum\"),",
          "    ]);",
          "    assert_eq!(expected_after_trim.literals(), seq.literals());",
          "    ",
          "    seq.keep_last_bytes(0);",
          "    let expected_empty_trim = Seq::new(vec![",
          "    Literal::inexact(\"\"),",
          "    Literal::inexact(\"\"),",
          "    Literal::inexact(\"\"),",
          "    ]);",
          "    assert_eq!(expected_empty_trim.literals(), seq.literals());",
          "    ",
          "    seq.keep_last_bytes(4);",
          "    let expected_partial_trim = Seq::new(vec![",
          "    Literal::inexact(\"\"),",
          "    Literal::inexact(\"than\"),",
          "    Literal::inexact(\"imum\"),",
          "    ]);",
          "    assert_eq!(expected_partial_trim.literals(), seq.literals());"
        ],
        "code": [
          "{",
          "    let mut seq = Seq::new(vec![",
          "        Literal::exact(\"short\"),",
          "        Literal::exact(\"longer_than\"),",
          "        Literal::exact(\"maximum\"),",
          "    ]);",
          "    seq.keep_last_bytes(15);",
          "    let mut seq = Seq::new(vec![",
          "    Literal::exact(\"short\"),",
          "    Literal::exact(\"longer_than\"),",
          "    Literal::exact(\"maximum\"),",
          "    ]);",
          "    seq.keep_last_bytes(15);",
          "    ",
          "    let expected = Seq::new(vec![",
          "    Literal::exact(\"short\"),",
          "    Literal::exact(\"longer_than\"),",
          "    Literal::exact(\"maximum\"),",
          "    ]);",
          "    assert_eq!(expected.literals(), seq.literals());",
          "    ",
          "    seq.keep_last_bytes(5);",
          "    let expected_after_trim = Seq::new(vec![",
          "    Literal::exact(\"short\"),",
          "    Literal::inexact(\"than\"),",
          "    Literal::inexact(\"imum\"),",
          "    ]);",
          "    assert_eq!(expected_after_trim.literals(), seq.literals());",
          "    ",
          "    seq.keep_last_bytes(0);",
          "    let expected_empty_trim = Seq::new(vec![",
          "    Literal::inexact(\"\"),",
          "    Literal::inexact(\"\"),",
          "    Literal::inexact(\"\"),",
          "    ]);",
          "    assert_eq!(expected_empty_trim.literals(), seq.literals());",
          "    ",
          "    seq.keep_last_bytes(4);",
          "    let expected_partial_trim = Seq::new(vec![",
          "    Literal::inexact(\"\"),",
          "    Literal::inexact(\"than\"),",
          "    Literal::inexact(\"imum\"),",
          "    ]);",
          "    assert_eq!(expected_partial_trim.literals(), seq.literals());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq = Seq::new(vec![",
          "        Literal::exact(\"abc\"),",
          "        Literal::exact(\"def\"),",
          "        Literal::exact(\"ghi\"),",
          "    ]);",
          "    seq.keep_last_bytes(3);",
          "}"
        ],
        "oracle": [
          "    seq.keep_last_bytes(3);",
          "    assert!(seq.literals().is_some());",
          "    assert_eq!(seq.literals().unwrap().len(), 3);",
          "    assert_eq!(seq.literals().unwrap()[0].as_bytes(), b\"abc\");",
          "    assert_eq!(seq.literals().unwrap()[1].as_bytes(), b\"def\");",
          "    assert_eq!(seq.literals().unwrap()[2].as_bytes(), b\"ghi\");",
          "    ",
          "    seq.keep_last_bytes(2);",
          "    assert_eq!(seq.literals().unwrap()[0].as_bytes(), b\"bc\");",
          "    assert!(seq.literals().unwrap()[1].is_exact());",
          "    assert_eq!(seq.literals().unwrap()[1].as_bytes(), b\"ef\");",
          "    assert!(seq.literals().unwrap()[2].is_inexact());",
          "    assert_eq!(seq.literals().unwrap()[2].as_bytes(), b\"hi\");"
        ],
        "code": [
          "{",
          "    let mut seq = Seq::new(vec![",
          "        Literal::exact(\"abc\"),",
          "        Literal::exact(\"def\"),",
          "        Literal::exact(\"ghi\"),",
          "    ]);",
          "    seq.keep_last_bytes(3);",
          "    seq.keep_last_bytes(3);",
          "    assert!(seq.literals().is_some());",
          "    assert_eq!(seq.literals().unwrap().len(), 3);",
          "    assert_eq!(seq.literals().unwrap()[0].as_bytes(), b\"abc\");",
          "    assert_eq!(seq.literals().unwrap()[1].as_bytes(), b\"def\");",
          "    assert_eq!(seq.literals().unwrap()[2].as_bytes(), b\"ghi\");",
          "    ",
          "    seq.keep_last_bytes(2);",
          "    assert_eq!(seq.literals().unwrap()[0].as_bytes(), b\"bc\");",
          "    assert!(seq.literals().unwrap()[1].is_exact());",
          "    assert_eq!(seq.literals().unwrap()[1].as_bytes(), b\"ef\");",
          "    assert!(seq.literals().unwrap()[2].is_inexact());",
          "    assert_eq!(seq.literals().unwrap()[2].as_bytes(), b\"hi\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq = Seq::new(vec![",
          "        Literal::exact(\"short\"),",
          "        Literal::exact(\"a bit longer\"),",
          "        Literal::exact(\"tiny\"),",
          "    ]);",
          "    seq.keep_last_bytes(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq.literals().unwrap()[0].as_bytes(), b\"t\");",
          "    assert_eq!(seq.literals().unwrap()[1].as_bytes(), b\"r\");",
          "    assert_eq!(seq.literals().unwrap()[2].as_bytes(), b\"y\");",
          "    assert!(seq.literals().unwrap()[0].is_exact());",
          "    assert!(seq.literals().unwrap()[1].is_inexact());",
          "    assert!(seq.literals().unwrap()[2].is_exact());"
        ],
        "code": [
          "{",
          "    let mut seq = Seq::new(vec![",
          "        Literal::exact(\"short\"),",
          "        Literal::exact(\"a bit longer\"),",
          "        Literal::exact(\"tiny\"),",
          "    ]);",
          "    seq.keep_last_bytes(1);",
          "    assert_eq!(seq.literals().unwrap()[0].as_bytes(), b\"t\");",
          "    assert_eq!(seq.literals().unwrap()[1].as_bytes(), b\"r\");",
          "    assert_eq!(seq.literals().unwrap()[2].as_bytes(), b\"y\");",
          "    assert!(seq.literals().unwrap()[0].is_exact());",
          "    assert!(seq.literals().unwrap()[1].is_inexact());",
          "    assert!(seq.literals().unwrap()[2].is_exact());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]