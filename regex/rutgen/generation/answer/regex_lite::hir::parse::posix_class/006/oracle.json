[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = \"digit\";",
          "    let result = posix_class(kind);",
          "    let expected_ranges = vec![",
          "        hir::ClassRange { start: '0', end: '9' },",
          "    ];",
          "    let _ = result.unwrap().collect::<Vec<_>>();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(posix_class(\"digit\").unwrap().collect::<Vec<_>>(), vec![hir::ClassRange { start: '0', end: '9' }]);",
          "    assert!(posix_class(\"alnum\").is_err());",
          "    assert!(posix_class(\"alpha\").is_err());",
          "    assert!(posix_class(\"ascii\").is_err());",
          "    assert!(posix_class(\"blank\").is_err());",
          "    assert!(posix_class(\"cntrl\").is_err());",
          "    assert!(posix_class(\"graph\").is_err());",
          "    assert!(posix_class(\"lower\").is_err());",
          "    assert!(posix_class(\"print\").is_err());",
          "    assert!(posix_class(\"punct\").is_err());",
          "    assert!(posix_class(\"space\").is_err());",
          "    assert!(posix_class(\"upper\").is_err());",
          "    assert!(posix_class(\"word\").is_err());",
          "    assert!(posix_class(\"xdigit\").is_err());",
          "    assert!(posix_class(\"nonexistent\").is_err());",
          "    assert_eq!(posix_class(\"digit\").unwrap(), expected_ranges.into_iter());"
        ],
        "code": [
          "{",
          "    let kind = \"digit\";",
          "    let result = posix_class(kind);",
          "    let expected_ranges = vec![",
          "        hir::ClassRange { start: '0', end: '9' },",
          "    ];",
          "    let _ = result.unwrap().collect::<Vec<_>>();",
          "    assert_eq!(posix_class(\"digit\").unwrap().collect::<Vec<_>>(), vec![hir::ClassRange { start: '0', end: '9' }]);",
          "    assert!(posix_class(\"alnum\").is_err());",
          "    assert!(posix_class(\"alpha\").is_err());",
          "    assert!(posix_class(\"ascii\").is_err());",
          "    assert!(posix_class(\"blank\").is_err());",
          "    assert!(posix_class(\"cntrl\").is_err());",
          "    assert!(posix_class(\"graph\").is_err());",
          "    assert!(posix_class(\"lower\").is_err());",
          "    assert!(posix_class(\"print\").is_err());",
          "    assert!(posix_class(\"punct\").is_err());",
          "    assert!(posix_class(\"space\").is_err());",
          "    assert!(posix_class(\"upper\").is_err());",
          "    assert!(posix_class(\"word\").is_err());",
          "    assert!(posix_class(\"xdigit\").is_err());",
          "    assert!(posix_class(\"nonexistent\").is_err());",
          "    assert_eq!(posix_class(\"digit\").unwrap(), expected_ranges.into_iter());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = \"nonexistent\";",
          "    let result = posix_class(kind);",
          "    let _ = result.unwrap_err();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(posix_class(\"nonexistent\").is_err(), true);",
          "    assert_eq!(posix_class(\"digit\").unwrap(), vec![hir::ClassRange { start: '0', end: '9' }].into_iter());",
          "    assert_eq!(posix_class(\"nonexistent\").unwrap_err().msg, ERR_POSIX_CLASS_UNRECOGNIZED);"
        ],
        "code": [
          "{",
          "    let kind = \"nonexistent\";",
          "    let result = posix_class(kind);",
          "    let _ = result.unwrap_err();",
          "    assert_eq!(posix_class(\"nonexistent\").is_err(), true);",
          "    assert_eq!(posix_class(\"digit\").unwrap(), vec![hir::ClassRange { start: '0', end: '9' }].into_iter());",
          "    assert_eq!(posix_class(\"nonexistent\").unwrap_err().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]