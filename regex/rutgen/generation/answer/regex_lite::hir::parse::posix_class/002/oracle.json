[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = \"alpha\";",
          "    let result = posix_class(kind);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let class_ranges = result.unwrap();",
          "    let expected_ranges: Vec<hir::ClassRange> = vec![",
          "    hir::ClassRange { start: 'A', end: 'Z' },",
          "    hir::ClassRange { start: 'a', end: 'z' },",
          "    ];",
          "    assert_eq!(class_ranges.collect::<Vec<_>>(), expected_ranges);"
        ],
        "code": [
          "{",
          "    let kind = \"alpha\";",
          "    let result = posix_class(kind);",
          "    assert!(result.is_ok());",
          "    let class_ranges = result.unwrap();",
          "    let expected_ranges: Vec<hir::ClassRange> = vec![",
          "    hir::ClassRange { start: 'A', end: 'Z' },",
          "    hir::ClassRange { start: 'a', end: 'z' },",
          "    ];",
          "    assert_eq!(class_ranges.collect::<Vec<_>>(), expected_ranges);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let kind = \"alnum\"; // should not match, as per precondition",
          "    let result = posix_class(kind);",
          "}"
        ],
        "oracle": [
          "    let kind = \"alnum\";",
          "    let result = posix_class(kind);",
          "    assert!(result.is_err());",
          "    let err = result.unwrap_err();",
          "    assert_eq!(err.msg, ERR_POSIX_CLASS_UNRECOGNIZED);"
        ],
        "code": [
          "{",
          "    let kind = \"alnum\"; // should not match, as per precondition",
          "    let result = posix_class(kind);",
          "    let kind = \"alnum\";",
          "    let result = posix_class(kind);",
          "    assert!(result.is_err());",
          "    let err = result.unwrap_err();",
          "    assert_eq!(err.msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]