[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = \"xdigit\";",
          "    let result = posix_class(kind);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let ranges: Vec<hir::ClassRange> = result.unwrap().collect();",
          "    assert_eq!(ranges.len(), 3);",
          "    assert_eq!(ranges[0].start, '0');",
          "    assert_eq!(ranges[0].end, '9');",
          "    assert_eq!(ranges[1].start, 'A');",
          "    assert_eq!(ranges[1].end, 'F');",
          "    assert_eq!(ranges[2].start, 'a');",
          "    assert_eq!(ranges[2].end, 'f');"
        ],
        "code": [
          "{",
          "    let kind = \"xdigit\";",
          "    let result = posix_class(kind);",
          "    assert!(result.is_ok());",
          "    let ranges: Vec<hir::ClassRange> = result.unwrap().collect();",
          "    assert_eq!(ranges.len(), 3);",
          "    assert_eq!(ranges[0].start, '0');",
          "    assert_eq!(ranges[0].end, '9');",
          "    assert_eq!(ranges[1].start, 'A');",
          "    assert_eq!(ranges[1].end, 'F');",
          "    assert_eq!(ranges[2].start, 'a');",
          "    assert_eq!(ranges[2].end, 'f');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = \"invalid_class\";",
          "    let result = posix_class(kind);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err().msg, ERR_POSIX_CLASS_UNRECOGNIZED);"
        ],
        "code": [
          "{",
          "    let kind = \"invalid_class\";",
          "    let result = posix_class(kind);",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = \"\";",
          "    let result = posix_class(kind);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(Error::new(ERR_POSIX_CLASS_UNRECOGNIZED)));",
          "    let kind = \"xdigit\";",
          "    let result = posix_class(kind);",
          "    assert!(result.is_ok());",
          "    let class_ranges: Vec<hir::ClassRange> = result.unwrap().collect();",
          "    assert_eq!(class_ranges, vec![hir::ClassRange { start: '0', end: '9' }, hir::ClassRange { start: 'A', end: 'F' }, hir::ClassRange { start: 'a', end: 'f' }]);"
        ],
        "code": [
          "{",
          "    let kind = \"\";",
          "    let result = posix_class(kind);",
          "    assert_eq!(result, Err(Error::new(ERR_POSIX_CLASS_UNRECOGNIZED)));",
          "    let kind = \"xdigit\";",
          "    let result = posix_class(kind);",
          "    assert!(result.is_ok());",
          "    let class_ranges: Vec<hir::ClassRange> = result.unwrap().collect();",
          "    assert_eq!(class_ranges, vec![hir::ClassRange { start: '0', end: '9' }, hir::ClassRange { start: 'A', end: 'F' }, hir::ClassRange { start: 'a', end: 'f' }]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = \"12345\";",
          "    let result = posix_class(kind);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let ranges: Vec<hir::ClassRange> = result.unwrap().collect();",
          "    assert_eq!(ranges, vec![]); // since \"12345\" is not a valid posix class, it should not return any ranges",
          "    ",
          "    let kind_invalid = \"invalid_class\";",
          "    let result_invalid = posix_class(kind_invalid);",
          "    assert!(result_invalid.is_err());",
          "    assert_eq!(result_invalid.err().unwrap().msg, ERR_POSIX_CLASS_UNRECOGNIZED);"
        ],
        "code": [
          "{",
          "    let kind = \"12345\";",
          "    let result = posix_class(kind);",
          "    assert!(result.is_ok());",
          "    let ranges: Vec<hir::ClassRange> = result.unwrap().collect();",
          "    assert_eq!(ranges, vec![]); // since \"12345\" is not a valid posix class, it should not return any ranges",
          "    ",
          "    let kind_invalid = \"invalid_class\";",
          "    let result_invalid = posix_class(kind_invalid);",
          "    assert!(result_invalid.is_err());",
          "    assert_eq!(result_invalid.err().unwrap().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = \"!@#$%^&*()\";",
          "    let result = posix_class(kind);",
          "}"
        ],
        "oracle": [
          "    let kind = \"!@#$%^&*()\";",
          "    let result = posix_class(kind);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_POSIX_CLASS_UNRECOGNIZED);"
        ],
        "code": [
          "{",
          "    let kind = \"!@#$%^&*()\";",
          "    let result = posix_class(kind);",
          "    let kind = \"!@#$%^&*()\";",
          "    let result = posix_class(kind);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]