[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = posix_class(\"word\");",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let ranges: Vec<hir::ClassRange> = result.unwrap().collect();",
          "    assert_eq!(ranges, vec![",
          "    hir::ClassRange { start: '0', end: '9' },",
          "    hir::ClassRange { start: 'A', end: 'Z' },",
          "    hir::ClassRange { start: '_', end: '_' },",
          "    hir::ClassRange { start: 'a', end: 'z' },",
          "    ]);"
        ],
        "code": [
          "{",
          "    let result = posix_class(\"word\");",
          "    assert!(result.is_ok());",
          "    let ranges: Vec<hir::ClassRange> = result.unwrap().collect();",
          "    assert_eq!(ranges, vec![",
          "    hir::ClassRange { start: '0', end: '9' },",
          "    hir::ClassRange { start: 'A', end: 'Z' },",
          "    hir::ClassRange { start: '_', end: '_' },",
          "    hir::ClassRange { start: 'a', end: 'z' },",
          "    ]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result_invalid_alnum = posix_class(\"alnum\");",
          "    let result_invalid_alpha = posix_class(\"alpha\");",
          "    let result_invalid_ascii = posix_class(\"ascii\");",
          "    let result_invalid_blank = posix_class(\"blank\");",
          "    let result_invalid_cntrl = posix_class(\"cntrl\");",
          "    let result_invalid_digit = posix_class(\"digit\");",
          "    let result_invalid_graph = posix_class(\"graph\");",
          "    let result_invalid_lower = posix_class(\"lower\");",
          "    let result_invalid_print = posix_class(\"print\");",
          "    let result_invalid_punct = posix_class(\"punct\");",
          "    let result_invalid_space = posix_class(\"space\");",
          "    let result_invalid_upper = posix_class(\"upper\");",
          "}"
        ],
        "oracle": [
          "    assert!(result_invalid_alnum.is_err() && result_invalid_alnum.unwrap_err().msg == ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    assert!(result_invalid_alpha.is_err() && result_invalid_alpha.unwrap_err().msg == ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    assert!(result_invalid_ascii.is_err() && result_invalid_ascii.unwrap_err().msg == ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    assert!(result_invalid_blank.is_err() && result_invalid_blank.unwrap_err().msg == ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    assert!(result_invalid_cntrl.is_err() && result_invalid_cntrl.unwrap_err().msg == ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    assert!(result_invalid_digit.is_err() && result_invalid_digit.unwrap_err().msg == ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    assert!(result_invalid_graph.is_err() && result_invalid_graph.unwrap_err().msg == ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    assert!(result_invalid_lower.is_err() && result_invalid_lower.unwrap_err().msg == ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    assert!(result_invalid_print.is_err() && result_invalid_print.unwrap_err().msg == ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    assert!(result_invalid_punct.is_err() && result_invalid_punct.unwrap_err().msg == ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    assert!(result_invalid_space.is_err() && result_invalid_space.unwrap_err().msg == ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    assert!(result_invalid_upper.is_err() && result_invalid_upper.unwrap_err().msg == ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    let result_valid_word = posix_class(\"word\").unwrap();",
          "    assert!(result_valid_word.clone().count() == 8);"
        ],
        "code": [
          "{",
          "    let result_invalid_alnum = posix_class(\"alnum\");",
          "    let result_invalid_alpha = posix_class(\"alpha\");",
          "    let result_invalid_ascii = posix_class(\"ascii\");",
          "    let result_invalid_blank = posix_class(\"blank\");",
          "    let result_invalid_cntrl = posix_class(\"cntrl\");",
          "    let result_invalid_digit = posix_class(\"digit\");",
          "    let result_invalid_graph = posix_class(\"graph\");",
          "    let result_invalid_lower = posix_class(\"lower\");",
          "    let result_invalid_print = posix_class(\"print\");",
          "    let result_invalid_punct = posix_class(\"punct\");",
          "    let result_invalid_space = posix_class(\"space\");",
          "    let result_invalid_upper = posix_class(\"upper\");",
          "    assert!(result_invalid_alnum.is_err() && result_invalid_alnum.unwrap_err().msg == ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    assert!(result_invalid_alpha.is_err() && result_invalid_alpha.unwrap_err().msg == ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    assert!(result_invalid_ascii.is_err() && result_invalid_ascii.unwrap_err().msg == ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    assert!(result_invalid_blank.is_err() && result_invalid_blank.unwrap_err().msg == ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    assert!(result_invalid_cntrl.is_err() && result_invalid_cntrl.unwrap_err().msg == ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    assert!(result_invalid_digit.is_err() && result_invalid_digit.unwrap_err().msg == ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    assert!(result_invalid_graph.is_err() && result_invalid_graph.unwrap_err().msg == ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    assert!(result_invalid_lower.is_err() && result_invalid_lower.unwrap_err().msg == ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    assert!(result_invalid_print.is_err() && result_invalid_print.unwrap_err().msg == ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    assert!(result_invalid_punct.is_err() && result_invalid_punct.unwrap_err().msg == ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    assert!(result_invalid_space.is_err() && result_invalid_space.unwrap_err().msg == ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    assert!(result_invalid_upper.is_err() && result_invalid_upper.unwrap_err().msg == ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    let result_valid_word = posix_class(\"word\").unwrap();",
          "    assert!(result_valid_word.clone().count() == 8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]