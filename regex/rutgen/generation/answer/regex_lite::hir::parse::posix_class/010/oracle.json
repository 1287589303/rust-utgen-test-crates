[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = posix_class(\"alnum_invalid\");",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    ",
          "    let result = posix_class(\"alpha_invalid\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    ",
          "    let result = posix_class(\"ascii_invalid\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    ",
          "    let result = posix_class(\"blank_invalid\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    ",
          "    let result = posix_class(\"cntrl_invalid\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    ",
          "    let result = posix_class(\"digit_invalid\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    ",
          "    let result = posix_class(\"graph_invalid\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    ",
          "    let result = posix_class(\"lower_invalid\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    ",
          "    let result = posix_class(\"print_invalid\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    ",
          "    let result = posix_class(\"punct\");",
          "    assert!(result.is_ok());",
          "    let ranges: Vec<_> = result.unwrap().collect();",
          "    assert_eq!(ranges.len(), 4);",
          "    assert_eq!(ranges[0].start, '!');",
          "    assert_eq!(ranges[0].end, '/');",
          "    assert_eq!(ranges[1].start, ':');",
          "    assert_eq!(ranges[1].end, '@');",
          "    assert_eq!(ranges[2].start, '[');",
          "    assert_eq!(ranges[2].end, '`');",
          "    assert_eq!(ranges[3].start, '{');",
          "    assert_eq!(ranges[3].end, '~');"
        ],
        "code": [
          "{",
          "    let result = posix_class(\"alnum_invalid\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    ",
          "    let result = posix_class(\"alpha_invalid\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    ",
          "    let result = posix_class(\"ascii_invalid\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    ",
          "    let result = posix_class(\"blank_invalid\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    ",
          "    let result = posix_class(\"cntrl_invalid\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    ",
          "    let result = posix_class(\"digit_invalid\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    ",
          "    let result = posix_class(\"graph_invalid\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    ",
          "    let result = posix_class(\"lower_invalid\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    ",
          "    let result = posix_class(\"print_invalid\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    ",
          "    let result = posix_class(\"punct\");",
          "    assert!(result.is_ok());",
          "    let ranges: Vec<_> = result.unwrap().collect();",
          "    assert_eq!(ranges.len(), 4);",
          "    assert_eq!(ranges[0].start, '!');",
          "    assert_eq!(ranges[0].end, '/');",
          "    assert_eq!(ranges[1].start, ':');",
          "    assert_eq!(ranges[1].end, '@');",
          "    assert_eq!(ranges[2].start, '[');",
          "    assert_eq!(ranges[2].end, '`');",
          "    assert_eq!(ranges[3].start, '{');",
          "    assert_eq!(ranges[3].end, '~');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = posix_class(\"alpha_invalid\");",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    result = posix_class(\"punct\");",
          "    assert!(result.is_ok());",
          "    let ranges: Vec<hir::ClassRange> = result.unwrap().collect();",
          "    assert_eq!(ranges, vec![hir::ClassRange { start: '!', end: '/' },",
          "    hir::ClassRange { start: ':', end: '@' },",
          "    hir::ClassRange { start: '[', end: '`' },",
          "    hir::ClassRange { start: '{', end: '~' }]);"
        ],
        "code": [
          "{",
          "    let result = posix_class(\"alpha_invalid\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    result = posix_class(\"punct\");",
          "    assert!(result.is_ok());",
          "    let ranges: Vec<hir::ClassRange> = result.unwrap().collect();",
          "    assert_eq!(ranges, vec![hir::ClassRange { start: '!', end: '/' },",
          "    hir::ClassRange { start: ':', end: '@' },",
          "    hir::ClassRange { start: '[', end: '`' },",
          "    hir::ClassRange { start: '{', end: '~' }]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = posix_class(\"ascii_invalid\");",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok() == false);",
          "    assert_eq!(result.err().unwrap().msg, ERR_POSIX_CLASS_UNRECOGNIZED);"
        ],
        "code": [
          "{",
          "    let result = posix_class(\"ascii_invalid\");",
          "    assert!(result.is_ok() == false);",
          "    assert_eq!(result.err().unwrap().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = posix_class(\"blank_invalid\");",
          "}"
        ],
        "oracle": [
          "    let result = posix_class(\"blank_invalid\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, ERR_POSIX_CLASS_UNRECOGNIZED);"
        ],
        "code": [
          "{",
          "    let result = posix_class(\"blank_invalid\");",
          "    let result = posix_class(\"blank_invalid\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = posix_class(\"cntrl_invalid\");",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, ERR_POSIX_CLASS_UNRECOGNIZED);"
        ],
        "code": [
          "{",
          "    let result = posix_class(\"cntrl_invalid\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = posix_class(\"digit_invalid\");",
          "}"
        ],
        "oracle": [
          "    let result = posix_class(\"digit_invalid\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    let result = posix_class(\"punct\");",
          "    assert!(result.is_ok());",
          "    let ranges: Vec<hir::ClassRange> = result.unwrap().collect();",
          "    assert_eq!(ranges, vec![hir::ClassRange { start: '!', end: '/' },",
          "    hir::ClassRange { start: ':', end: '@' },",
          "    hir::ClassRange { start: '[', end: '`' },",
          "    hir::ClassRange { start: '{', end: '~' }]);"
        ],
        "code": [
          "{",
          "    let result = posix_class(\"digit_invalid\");",
          "    let result = posix_class(\"digit_invalid\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    let result = posix_class(\"punct\");",
          "    assert!(result.is_ok());",
          "    let ranges: Vec<hir::ClassRange> = result.unwrap().collect();",
          "    assert_eq!(ranges, vec![hir::ClassRange { start: '!', end: '/' },",
          "    hir::ClassRange { start: ':', end: '@' },",
          "    hir::ClassRange { start: '[', end: '`' },",
          "    hir::ClassRange { start: '{', end: '~' }]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = posix_class(\"graph_invalid\");",
          "}"
        ],
        "oracle": [
          "    let result = posix_class(\"graph_invalid\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, ERR_POSIX_CLASS_UNRECOGNIZED);"
        ],
        "code": [
          "{",
          "    let result = posix_class(\"graph_invalid\");",
          "    let result = posix_class(\"graph_invalid\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = posix_class(\"lower_invalid\");",
          "}"
        ],
        "oracle": [
          "    let result = posix_class(\"lower_invalid\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_POSIX_CLASS_UNRECOGNIZED);"
        ],
        "code": [
          "{",
          "    let result = posix_class(\"lower_invalid\");",
          "    let result = posix_class(\"lower_invalid\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = posix_class(\"print_invalid\");",
          "}"
        ],
        "oracle": [
          "    let result = posix_class(\"print_invalid\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    let result = posix_class(\"punct\");",
          "    assert!(result.is_ok());",
          "    let ranges: Vec<_> = result.unwrap().collect();",
          "    assert_eq!(ranges, vec![hir::ClassRange { start: '!', end: '/' }, hir::ClassRange { start: ':', end: '@' }, hir::ClassRange { start: '[', end: '`' }, hir::ClassRange { start: '{', end: '~' }]);"
        ],
        "code": [
          "{",
          "    let result = posix_class(\"print_invalid\");",
          "    let result = posix_class(\"print_invalid\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    let result = posix_class(\"punct\");",
          "    assert!(result.is_ok());",
          "    let ranges: Vec<_> = result.unwrap().collect();",
          "    assert_eq!(ranges, vec![hir::ClassRange { start: '!', end: '/' }, hir::ClassRange { start: ':', end: '@' }, hir::ClassRange { start: '[', end: '`' }, hir::ClassRange { start: '{', end: '~' }]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = posix_class(\"punct\");",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let ranges: Vec<hir::ClassRange> = result.unwrap().collect();",
          "    assert_eq!(ranges.len(), 4);",
          "    assert_eq!(ranges[0], hir::ClassRange { start: '!', end: '/' });",
          "    assert_eq!(ranges[1], hir::ClassRange { start: ':', end: '@' });",
          "    assert_eq!(ranges[2], hir::ClassRange { start: '[', end: '`' });",
          "    assert_eq!(ranges[3], hir::ClassRange { start: '{', end: '~' });"
        ],
        "code": [
          "{",
          "    let result = posix_class(\"punct\");",
          "    assert!(result.is_ok());",
          "    let ranges: Vec<hir::ClassRange> = result.unwrap().collect();",
          "    assert_eq!(ranges.len(), 4);",
          "    assert_eq!(ranges[0], hir::ClassRange { start: '!', end: '/' });",
          "    assert_eq!(ranges[1], hir::ClassRange { start: ':', end: '@' });",
          "    assert_eq!(ranges[2], hir::ClassRange { start: '[', end: '`' });",
          "    assert_eq!(ranges[3], hir::ClassRange { start: '{', end: '~' });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]