[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = posix_class(\"lower\");",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let class_ranges = result.unwrap();",
          "    let expected_ranges = vec![hir::ClassRange { start: 'a', end: 'z' }];",
          "    let actual_ranges: Vec<_> = class_ranges.collect();",
          "    assert_eq!(actual_ranges, expected_ranges);"
        ],
        "code": [
          "{",
          "    let result = posix_class(\"lower\");",
          "    assert!(result.is_ok());",
          "    let class_ranges = result.unwrap();",
          "    let expected_ranges = vec![hir::ClassRange { start: 'a', end: 'z' }];",
          "    let actual_ranges: Vec<_> = class_ranges.collect();",
          "    assert_eq!(actual_ranges, expected_ranges);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result_alnum = posix_class(\"alnum\");",
          "    let result_alpha = posix_class(\"alpha\");",
          "    let result_ascii = posix_class(\"ascii\");",
          "    let result_blank = posix_class(\"blank\");",
          "    let result_cntrl = posix_class(\"cntrl\");",
          "    let result_digit = posix_class(\"digit\");",
          "    let result_graph = posix_class(\"graph\");",
          "}"
        ],
        "oracle": [
          "    let result_lower = posix_class(\"lower\");",
          "    assert!(result_lower.is_ok());",
          "    let class_ranges = result_lower.unwrap();",
          "    assert_eq!(class_ranges.count(), 1); // Should return one range for \"lower\"",
          "    assert_eq!(class_ranges.collect::<Vec<_>>(), vec![hir::ClassRange { start: 'a', end: 'z' }]);"
        ],
        "code": [
          "{",
          "    let result_alnum = posix_class(\"alnum\");",
          "    let result_alpha = posix_class(\"alpha\");",
          "    let result_ascii = posix_class(\"ascii\");",
          "    let result_blank = posix_class(\"blank\");",
          "    let result_cntrl = posix_class(\"cntrl\");",
          "    let result_digit = posix_class(\"digit\");",
          "    let result_graph = posix_class(\"graph\");",
          "    let result_lower = posix_class(\"lower\");",
          "    assert!(result_lower.is_ok());",
          "    let class_ranges = result_lower.unwrap();",
          "    assert_eq!(class_ranges.count(), 1); // Should return one range for \"lower\"",
          "    assert_eq!(class_ranges.collect::<Vec<_>>(), vec![hir::ClassRange { start: 'a', end: 'z' }]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]