[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = \"blank\";",
          "    let result = posix_class(kind);",
          "    // Function call only, without assertions.",
          "}"
        ],
        "oracle": [
          "    let kind = \"blank\";",
          "    let result = posix_class(kind);",
          "    assert!(result.is_ok());",
          "    let ranges: Vec<_> = result.unwrap().collect();",
          "    assert_eq!(ranges.len(), 2);",
          "    assert_eq!(ranges[0].start, '\\t');",
          "    assert_eq!(ranges[0].end, '\\t');",
          "    assert_eq!(ranges[1].start, ' ');",
          "    assert_eq!(ranges[1].end, ' ');"
        ],
        "code": [
          "{",
          "    let kind = \"blank\";",
          "    let result = posix_class(kind);",
          "    // Function call only, without assertions.",
          "    let kind = \"blank\";",
          "    let result = posix_class(kind);",
          "    assert!(result.is_ok());",
          "    let ranges: Vec<_> = result.unwrap().collect();",
          "    assert_eq!(ranges.len(), 2);",
          "    assert_eq!(ranges[0].start, '\\t');",
          "    assert_eq!(ranges[0].end, '\\t');",
          "    assert_eq!(ranges[1].start, ' ');",
          "    assert_eq!(ranges[1].end, ' ');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = \"not_a_class\";",
          "    let result = posix_class(kind);",
          "    // Function call only, without assertions.",
          "}"
        ],
        "oracle": [
          "    let kind = \"alnum\";",
          "    let result = posix_class(kind);",
          "    assert!(result.is_err());",
          "    let kind = \"alpha\";",
          "    let result = posix_class(kind);",
          "    assert!(result.is_err());",
          "    let kind = \"ascii\";",
          "    let result = posix_class(kind);",
          "    assert!(result.is_err());",
          "    let kind = \"blank\";",
          "    let result = posix_class(kind);",
          "    assert!(result.is_ok());",
          "    let ranges: Vec<_> = result.unwrap().collect();",
          "    assert_eq!(ranges.len(), 2);",
          "    assert_eq!(ranges[0].start, '\\t');",
          "    assert_eq!(ranges[0].end, '\\t');",
          "    assert_eq!(ranges[1].start, ' ');",
          "    assert_eq!(ranges[1].end, ' ');",
          "    let kind = \"not_a_class\";",
          "    let result = posix_class(kind);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let kind = \"not_a_class\";",
          "    let result = posix_class(kind);",
          "    // Function call only, without assertions.",
          "    let kind = \"alnum\";",
          "    let result = posix_class(kind);",
          "    assert!(result.is_err());",
          "    let kind = \"alpha\";",
          "    let result = posix_class(kind);",
          "    assert!(result.is_err());",
          "    let kind = \"ascii\";",
          "    let result = posix_class(kind);",
          "    assert!(result.is_err());",
          "    let kind = \"blank\";",
          "    let result = posix_class(kind);",
          "    assert!(result.is_ok());",
          "    let ranges: Vec<_> = result.unwrap().collect();",
          "    assert_eq!(ranges.len(), 2);",
          "    assert_eq!(ranges[0].start, '\\t');",
          "    assert_eq!(ranges[0].end, '\\t');",
          "    assert_eq!(ranges[1].start, ' ');",
          "    assert_eq!(ranges[1].end, ' ');",
          "    let kind = \"not_a_class\";",
          "    let result = posix_class(kind);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]