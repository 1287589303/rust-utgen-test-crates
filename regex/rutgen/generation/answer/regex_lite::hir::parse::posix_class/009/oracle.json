[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = posix_class(\"print\");",
          "    let _ = result.unwrap(); // Ensures Ok result is returned",
          "}"
        ],
        "oracle": [
          "    let result = posix_class(\"print\");",
          "    assert!(result.is_ok());",
          "    let ranges = result.unwrap();",
          "    let expected_ranges: Vec<hir::ClassRange> = vec![",
          "    hir::ClassRange { start: ' ', end: '~' }",
          "    ];",
          "    assert_eq!(ranges.collect::<Vec<_>>(), expected_ranges);",
          "    let result_invalid = posix_class(\"invalid_class\");",
          "    assert!(result_invalid.is_err());",
          "    assert_eq!(result_invalid.unwrap_err().msg, ERR_POSIX_CLASS_UNRECOGNIZED);"
        ],
        "code": [
          "{",
          "    let result = posix_class(\"print\");",
          "    let _ = result.unwrap(); // Ensures Ok result is returned",
          "    let result = posix_class(\"print\");",
          "    assert!(result.is_ok());",
          "    let ranges = result.unwrap();",
          "    let expected_ranges: Vec<hir::ClassRange> = vec![",
          "    hir::ClassRange { start: ' ', end: '~' }",
          "    ];",
          "    assert_eq!(ranges.collect::<Vec<_>>(), expected_ranges);",
          "    let result_invalid = posix_class(\"invalid_class\");",
          "    assert!(result_invalid.is_err());",
          "    assert_eq!(result_invalid.unwrap_err().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let result = posix_class(\"alnum\");",
          "    let _ = result.unwrap_err(); // Should panic for expected error",
          "}"
        ],
        "oracle": [
          "    let result = posix_class(\"print\");",
          "    assert!(result.is_ok());",
          "    let class_ranges: Vec<hir::ClassRange> = result.unwrap().collect();",
          "    assert_eq!(class_ranges, vec![hir::ClassRange { start: ' ', end: '~' }]);",
          "    assert_eq!(class_ranges.len(), 1);"
        ],
        "code": [
          "{",
          "    let result = posix_class(\"alnum\");",
          "    let _ = result.unwrap_err(); // Should panic for expected error",
          "    let result = posix_class(\"print\");",
          "    assert!(result.is_ok());",
          "    let class_ranges: Vec<hir::ClassRange> = result.unwrap().collect();",
          "    assert_eq!(class_ranges, vec![hir::ClassRange { start: ' ', end: '~' }]);",
          "    assert_eq!(class_ranges.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let result = posix_class(\"alpha\");",
          "    let _ = result.unwrap_err(); // Should panic for expected error",
          "}"
        ],
        "oracle": [
          "    result = posix_class(\"print\");",
          "    assert!(result.is_ok());",
          "    let class_ranges: Vec<hir::ClassRange> = result.unwrap().collect();",
          "    assert_eq!(class_ranges, vec![hir::ClassRange { start: ' ', end: '~' }]);",
          "    ",
          "    result = posix_class(\"invalid\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, ERR_POSIX_CLASS_UNRECOGNIZED);"
        ],
        "code": [
          "{",
          "    let result = posix_class(\"alpha\");",
          "    let _ = result.unwrap_err(); // Should panic for expected error",
          "    result = posix_class(\"print\");",
          "    assert!(result.is_ok());",
          "    let class_ranges: Vec<hir::ClassRange> = result.unwrap().collect();",
          "    assert_eq!(class_ranges, vec![hir::ClassRange { start: ' ', end: '~' }]);",
          "    ",
          "    result = posix_class(\"invalid\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let result = posix_class(\"ascii\");",
          "    let _ = result.unwrap_err(); // Should panic for expected error",
          "}"
        ],
        "oracle": [
          "    let result = posix_class(\"unexpected_class\");",
          "    assert!(result.is_err());",
          "    let error = result.unwrap_err();",
          "    assert_eq!(error.msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    ",
          "    let result = posix_class(\"print\");",
          "    assert!(result.is_ok());",
          "    let class_ranges: Vec<_> = result.unwrap().collect();",
          "    assert_eq!(class_ranges.len(), 1);",
          "    assert_eq!(class_ranges[0].start, ' ');",
          "    assert_eq!(class_ranges[0].end, '~');"
        ],
        "code": [
          "{",
          "    let result = posix_class(\"ascii\");",
          "    let _ = result.unwrap_err(); // Should panic for expected error",
          "    let result = posix_class(\"unexpected_class\");",
          "    assert!(result.is_err());",
          "    let error = result.unwrap_err();",
          "    assert_eq!(error.msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    ",
          "    let result = posix_class(\"print\");",
          "    assert!(result.is_ok());",
          "    let class_ranges: Vec<_> = result.unwrap().collect();",
          "    assert_eq!(class_ranges.len(), 1);",
          "    assert_eq!(class_ranges[0].start, ' ');",
          "    assert_eq!(class_ranges[0].end, '~');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let result = posix_class(\"blank\");",
          "    let _ = result.unwrap_err(); // Should panic for expected error",
          "}"
        ],
        "oracle": [
          "    assert!(posix_class(\"alnum\").is_err());",
          "    assert!(posix_class(\"alpha\").is_err());",
          "    assert!(posix_class(\"ascii\").is_err());",
          "    assert!(posix_class(\"blank\").is_err());",
          "    assert!(posix_class(\"cntrl\").is_err());",
          "    assert!(posix_class(\"digit\").is_err());",
          "    assert!(posix_class(\"graph\").is_err());",
          "    assert!(posix_class(\"lower\").is_err());",
          "    assert!(posix_class(\"print\").is_ok());"
        ],
        "code": [
          "{",
          "    let result = posix_class(\"blank\");",
          "    let _ = result.unwrap_err(); // Should panic for expected error",
          "    assert!(posix_class(\"alnum\").is_err());",
          "    assert!(posix_class(\"alpha\").is_err());",
          "    assert!(posix_class(\"ascii\").is_err());",
          "    assert!(posix_class(\"blank\").is_err());",
          "    assert!(posix_class(\"cntrl\").is_err());",
          "    assert!(posix_class(\"digit\").is_err());",
          "    assert!(posix_class(\"graph\").is_err());",
          "    assert!(posix_class(\"lower\").is_err());",
          "    assert!(posix_class(\"print\").is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let result = posix_class(\"cntrl\");",
          "    let _ = result.unwrap_err(); // Should panic for expected error",
          "}"
        ],
        "oracle": [
          "    let result = posix_class(\"cntrl\"); assert!(result.is_err() && result.unwrap_err().msg == ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    let result = posix_class(\"print\"); assert!(result.is_ok());",
          "    let ranges: Vec<_> = result.unwrap().collect(); assert_eq!(ranges.len(), 95);",
          "    assert!(ranges.contains(&hir::ClassRange { start: ' ', end: '~' }));",
          "    assert!(ranges.contains(&hir::ClassRange { start: '\\n', end: '\\n' }));"
        ],
        "code": [
          "{",
          "    let result = posix_class(\"cntrl\");",
          "    let _ = result.unwrap_err(); // Should panic for expected error",
          "    let result = posix_class(\"cntrl\"); assert!(result.is_err() && result.unwrap_err().msg == ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    let result = posix_class(\"print\"); assert!(result.is_ok());",
          "    let ranges: Vec<_> = result.unwrap().collect(); assert_eq!(ranges.len(), 95);",
          "    assert!(ranges.contains(&hir::ClassRange { start: ' ', end: '~' }));",
          "    assert!(ranges.contains(&hir::ClassRange { start: '\\n', end: '\\n' }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let result = posix_class(\"digit\");",
          "    let _ = result.unwrap_err(); // Should panic for expected error",
          "}"
        ],
        "oracle": [
          "    let result = posix_class(\"print\"); assert!(result.is_ok());",
          "    let ranges: Vec<hir::ClassRange> = result.unwrap().collect();",
          "    assert_eq!(ranges, vec![hir::ClassRange { start: ' ', end: '~' }]);",
          "    let result = posix_class(\"abc\"); assert!(result.is_err());",
          "    let err = result.unwrap_err(); assert_eq!(err.msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    let result = posix_class(\"\"); assert!(result.is_err());",
          "    let err = result.unwrap_err(); assert_eq!(err.msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    let result = posix_class(\"lower\"); assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let result = posix_class(\"digit\");",
          "    let _ = result.unwrap_err(); // Should panic for expected error",
          "    let result = posix_class(\"print\"); assert!(result.is_ok());",
          "    let ranges: Vec<hir::ClassRange> = result.unwrap().collect();",
          "    assert_eq!(ranges, vec![hir::ClassRange { start: ' ', end: '~' }]);",
          "    let result = posix_class(\"abc\"); assert!(result.is_err());",
          "    let err = result.unwrap_err(); assert_eq!(err.msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    let result = posix_class(\"\"); assert!(result.is_err());",
          "    let err = result.unwrap_err(); assert_eq!(err.msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    let result = posix_class(\"lower\"); assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let result = posix_class(\"graph\");",
          "    let _ = result.unwrap_err(); // Should panic for expected error",
          "}"
        ],
        "oracle": [
          "    let result = posix_class(\"graph\");",
          "    let _ = result.unwrap_err(); // Should panic for expected error",
          "    let result = posix_class(\"print\");",
          "    assert!(result.is_ok()); // Expected to succeed for \"print\"",
          "    let ranges: Vec<hir::ClassRange> = result.unwrap().collect();",
          "    assert_eq!(ranges, vec![hir::ClassRange { start: ' ', end: '~' }]); // Check correct character ranges for \"print\"",
          "    let result = posix_class(\"unknown\");",
          "    let _ = result.unwrap_err(); // Should return unrecognized POSIX class error",
          "    assert_eq!(result.unwrap_err().msg, ERR_POSIX_CLASS_UNRECOGNIZED); // Confirm error message for unknown class"
        ],
        "code": [
          "{",
          "    let result = posix_class(\"graph\");",
          "    let _ = result.unwrap_err(); // Should panic for expected error",
          "    let result = posix_class(\"graph\");",
          "    let _ = result.unwrap_err(); // Should panic for expected error",
          "    let result = posix_class(\"print\");",
          "    assert!(result.is_ok()); // Expected to succeed for \"print\"",
          "    let ranges: Vec<hir::ClassRange> = result.unwrap().collect();",
          "    assert_eq!(ranges, vec![hir::ClassRange { start: ' ', end: '~' }]); // Check correct character ranges for \"print\"",
          "    let result = posix_class(\"unknown\");",
          "    let _ = result.unwrap_err(); // Should return unrecognized POSIX class error",
          "    assert_eq!(result.unwrap_err().msg, ERR_POSIX_CLASS_UNRECOGNIZED); // Confirm error message for unknown class",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let result = posix_class(\"lower\");",
          "    let _ = result.unwrap_err(); // Should panic for expected error",
          "}"
        ],
        "oracle": [
          "    let result = posix_class(\"print\");",
          "    assert!(result.is_ok());",
          "    let ranges: Vec<hir::ClassRange> = result.unwrap().collect();",
          "    assert_eq!(ranges, vec![hir::ClassRange { start: ' ', end: '~' }]);",
          "    let result = posix_class(\"nonexistent\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    let result = posix_class(\"blank\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    let result = posix_class(\"upper\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, ERR_POSIX_CLASS_UNRECOGNIZED);"
        ],
        "code": [
          "{",
          "    let result = posix_class(\"lower\");",
          "    let _ = result.unwrap_err(); // Should panic for expected error",
          "    let result = posix_class(\"print\");",
          "    assert!(result.is_ok());",
          "    let ranges: Vec<hir::ClassRange> = result.unwrap().collect();",
          "    assert_eq!(ranges, vec![hir::ClassRange { start: ' ', end: '~' }]);",
          "    let result = posix_class(\"nonexistent\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    let result = posix_class(\"blank\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    let result = posix_class(\"upper\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let result = posix_class(\"upper\");",
          "    let _ = result.unwrap_err(); // Should panic for expected error",
          "}"
        ],
        "oracle": [
          "    let result = posix_class(\"upper\");",
          "    assert_eq!(result.unwrap_err().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    ",
          "    let result = posix_class(\"print\");",
          "    assert!(result.is_ok());",
          "    let class_ranges: Vec<hir::ClassRange> = result.unwrap().collect();",
          "    assert_eq!(class_ranges, vec![hir::ClassRange { start: ' ', end: '~' }]);",
          "    ",
          "    let result = posix_class(\"nonexistent\");",
          "    assert_eq!(result.unwrap_err().msg, ERR_POSIX_CLASS_UNRECOGNIZED);"
        ],
        "code": [
          "{",
          "    let result = posix_class(\"upper\");",
          "    let _ = result.unwrap_err(); // Should panic for expected error",
          "    let result = posix_class(\"upper\");",
          "    assert_eq!(result.unwrap_err().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "    ",
          "    let result = posix_class(\"print\");",
          "    assert!(result.is_ok());",
          "    let class_ranges: Vec<hir::ClassRange> = result.unwrap().collect();",
          "    assert_eq!(class_ranges, vec![hir::ClassRange { start: ' ', end: '~' }]);",
          "    ",
          "    let result = posix_class(\"nonexistent\");",
          "    assert_eq!(result.unwrap_err().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let result = posix_class(\"word\");",
          "    let _ = result.unwrap_err(); // Should panic for expected error",
          "}"
        ],
        "oracle": [
          "    assert!(posix_class(\"alnum\").is_err());",
          "    assert!(posix_class(\"alpha\").is_err());",
          "    assert!(posix_class(\"ascii\").is_err());",
          "    assert!(posix_class(\"blank\").is_err());",
          "    assert!(posix_class(\"cntrl\").is_err());",
          "    assert!(posix_class(\"digit\").is_err());",
          "    assert!(posix_class(\"graph\").is_err());",
          "    assert!(posix_class(\"lower\").is_err());",
          "    assert_eq!(posix_class(\"print\"), Ok(vec![(char::from(b' '), char::from(b'~'))].into_iter()));",
          "    assert!(posix_class(\"upper\").is_err());",
          "    assert!(posix_class(\"word\").is_err());",
          "    assert!(posix_class(\"xdigit\").is_err());",
          "    assert!(posix_class(\"unknown\").is_err());"
        ],
        "code": [
          "{",
          "    let result = posix_class(\"word\");",
          "    let _ = result.unwrap_err(); // Should panic for expected error",
          "    assert!(posix_class(\"alnum\").is_err());",
          "    assert!(posix_class(\"alpha\").is_err());",
          "    assert!(posix_class(\"ascii\").is_err());",
          "    assert!(posix_class(\"blank\").is_err());",
          "    assert!(posix_class(\"cntrl\").is_err());",
          "    assert!(posix_class(\"digit\").is_err());",
          "    assert!(posix_class(\"graph\").is_err());",
          "    assert!(posix_class(\"lower\").is_err());",
          "    assert_eq!(posix_class(\"print\"), Ok(vec![(char::from(b' '), char::from(b'~'))].into_iter()));",
          "    assert!(posix_class(\"upper\").is_err());",
          "    assert!(posix_class(\"word\").is_err());",
          "    assert!(posix_class(\"xdigit\").is_err());",
          "    assert!(posix_class(\"unknown\").is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let result = posix_class(\"xdigit\");",
          "    let _ = result.unwrap_err(); // Should panic for expected error",
          "}"
        ],
        "oracle": [
          "    let result = posix_class(\"print\");",
          "    assert!(result.is_ok());",
          "    let class_ranges: Vec<hir::ClassRange> = result.unwrap().collect();",
          "    assert_eq!(class_ranges.len(), 2);",
          "    assert_eq!(class_ranges[0].start, ' ');",
          "    assert_eq!(class_ranges[0].end, '~');",
          "    assert_eq!(class_ranges[1].start, ' ');",
          "    assert_eq!(class_ranges[1].end, '~');"
        ],
        "code": [
          "{",
          "    let result = posix_class(\"xdigit\");",
          "    let _ = result.unwrap_err(); // Should panic for expected error",
          "    let result = posix_class(\"print\");",
          "    assert!(result.is_ok());",
          "    let class_ranges: Vec<hir::ClassRange> = result.unwrap().collect();",
          "    assert_eq!(class_ranges.len(), 2);",
          "    assert_eq!(class_ranges[0].start, ' ');",
          "    assert_eq!(class_ranges[0].end, '~');",
          "    assert_eq!(class_ranges[1].start, ' ');",
          "    assert_eq!(class_ranges[1].end, '~');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let result = posix_class(\"undefined\");",
          "    let _ = result.unwrap_err(); // Should panic for expected error",
          "}"
        ],
        "oracle": [
          "    let result = posix_class(\"print\");",
          "    assert!(result.is_ok());",
          "    let ranges: Vec<hir::ClassRange> = result.unwrap().collect();",
          "    assert_eq!(ranges, vec![hir::ClassRange { start: ' ', end: '~' }]);"
        ],
        "code": [
          "{",
          "    let result = posix_class(\"undefined\");",
          "    let _ = result.unwrap_err(); // Should panic for expected error",
          "    let result = posix_class(\"print\");",
          "    assert!(result.is_ok());",
          "    let ranges: Vec<hir::ClassRange> = result.unwrap().collect();",
          "    assert_eq!(ranges, vec![hir::ClassRange { start: ' ', end: '~' }]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]