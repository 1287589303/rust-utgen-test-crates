[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = \"graph\";",
          "    let result = posix_class(kind);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let ranges: Vec<hir::ClassRange> = result.unwrap().collect();",
          "    assert_eq!(ranges.len(), 1);",
          "    assert_eq!(ranges[0].start, '!');",
          "    assert_eq!(ranges[0].end, '~');"
        ],
        "code": [
          "{",
          "    let kind = \"graph\";",
          "    let result = posix_class(kind);",
          "    assert!(result.is_ok());",
          "    let ranges: Vec<hir::ClassRange> = result.unwrap().collect();",
          "    assert_eq!(ranges.len(), 1);",
          "    assert_eq!(ranges[0].start, '!');",
          "    assert_eq!(ranges[0].end, '~');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = \"invalid\";",
          "    let result = posix_class(kind);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err().msg, ERR_POSIX_CLASS_UNRECOGNIZED);"
        ],
        "code": [
          "{",
          "    let kind = \"invalid\";",
          "    let result = posix_class(kind);",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err().msg, ERR_POSIX_CLASS_UNRECOGNIZED);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]