[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let o = Utf8Range { start: 5, end: 10 };",
          "    let n = Utf8Range { start: 11, end: 15 };",
          "    let _result = Split::new(o, n);",
          "}"
        ],
        "oracle": [
          "    let o = Utf8Range { start: 5, end: 10 };",
          "    let n = Utf8Range { start: 11, end: 15 };",
          "    assert_eq!(_result, None);",
          "    ",
          "    let o = Utf8Range { start: 5, end: 10 };",
          "    let n = Utf8Range { start: 10, end: 20 };",
          "    assert_eq!(_result, Some(Split::parts1(SplitRange::Both(5..=10))));",
          "    ",
          "    let o = Utf8Range { start: 10, end: 15 };",
          "    let n = Utf8Range { start: 10, end: 15 };",
          "    assert_eq!(_result, Some(Split::parts1(SplitRange::Both(10..=15))));",
          "    ",
          "    let o = Utf8Range { start: 5, end: 10 };",
          "    let n = Utf8Range { start: 12, end: 20 };",
          "    assert_eq!(_result, Some(Split::parts2(SplitRange::Both(5..=10), SplitRange::New(11..=20))));",
          "    ",
          "    let o = Utf8Range { start: 10, end: 15 };",
          "    let n = Utf8Range { start: 5, end: 10 };",
          "    assert_eq!(_result, Some(Split::parts2(SplitRange::New(5..=9), SplitRange::Both(10..=15))));",
          "    ",
          "    let o = Utf8Range { start: 12, end: 16 };",
          "    let n = Utf8Range { start: 5, end: 15 };",
          "    assert_eq!(_result, Some(Split::parts2(SplitRange::Old(5..=11), SplitRange::Both(12..=16))));",
          "    ",
          "    let o = Utf8Range { start: 5, end: 20 };",
          "    let n = Utf8Range { start: 10, end: 15 };",
          "    assert_eq!(_result, Some(Split::parts3(SplitRange::Old(5..=9), SplitRange::Both(10..=15), SplitRange::New(16..=20))));",
          "    ",
          "    let o = Utf8Range { start: 5, end: 15 };",
          "    let n = Utf8Range { start: 10, end: 10 };",
          "    assert_eq!(_result, Some(Split::parts3(SplitRange::Old(5..=9), SplitRange::Both(10..=10), SplitRange::New(11..=15))));",
          "    ",
          "    let o = Utf8Range { start: 11, end: 15 };",
          "    let n = Utf8Range { start: 5, end: 11 };",
          "    assert_eq!(_result, Some(Split::parts3(SplitRange::New(5..=10), SplitRange::Both(11..=11), SplitRange::Old(12..=15))));"
        ],
        "code": [
          "{",
          "    let o = Utf8Range { start: 5, end: 10 };",
          "    let n = Utf8Range { start: 11, end: 15 };",
          "    let _result = Split::new(o, n);",
          "    let o = Utf8Range { start: 5, end: 10 };",
          "    let n = Utf8Range { start: 11, end: 15 };",
          "    assert_eq!(_result, None);",
          "    ",
          "    let o = Utf8Range { start: 5, end: 10 };",
          "    let n = Utf8Range { start: 10, end: 20 };",
          "    assert_eq!(_result, Some(Split::parts1(SplitRange::Both(5..=10))));",
          "    ",
          "    let o = Utf8Range { start: 10, end: 15 };",
          "    let n = Utf8Range { start: 10, end: 15 };",
          "    assert_eq!(_result, Some(Split::parts1(SplitRange::Both(10..=15))));",
          "    ",
          "    let o = Utf8Range { start: 5, end: 10 };",
          "    let n = Utf8Range { start: 12, end: 20 };",
          "    assert_eq!(_result, Some(Split::parts2(SplitRange::Both(5..=10), SplitRange::New(11..=20))));",
          "    ",
          "    let o = Utf8Range { start: 10, end: 15 };",
          "    let n = Utf8Range { start: 5, end: 10 };",
          "    assert_eq!(_result, Some(Split::parts2(SplitRange::New(5..=9), SplitRange::Both(10..=15))));",
          "    ",
          "    let o = Utf8Range { start: 12, end: 16 };",
          "    let n = Utf8Range { start: 5, end: 15 };",
          "    assert_eq!(_result, Some(Split::parts2(SplitRange::Old(5..=11), SplitRange::Both(12..=16))));",
          "    ",
          "    let o = Utf8Range { start: 5, end: 20 };",
          "    let n = Utf8Range { start: 10, end: 15 };",
          "    assert_eq!(_result, Some(Split::parts3(SplitRange::Old(5..=9), SplitRange::Both(10..=15), SplitRange::New(16..=20))));",
          "    ",
          "    let o = Utf8Range { start: 5, end: 15 };",
          "    let n = Utf8Range { start: 10, end: 10 };",
          "    assert_eq!(_result, Some(Split::parts3(SplitRange::Old(5..=9), SplitRange::Both(10..=10), SplitRange::New(11..=15))));",
          "    ",
          "    let o = Utf8Range { start: 11, end: 15 };",
          "    let n = Utf8Range { start: 5, end: 11 };",
          "    assert_eq!(_result, Some(Split::parts3(SplitRange::New(5..=10), SplitRange::Both(11..=11), SplitRange::Old(12..=15))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let o = Utf8Range { start: 10, end: 15 };",
          "    let n = Utf8Range { start: 15, end: 20 };",
          "    let _result = Split::new(o, n);",
          "}"
        ],
        "oracle": [
          "    let o = Utf8Range { start: 10, end: 15 };",
          "    let n = Utf8Range { start: 15, end: 20 };",
          "    let expected = Some(Split::parts3(SplitRange::New(10..=14), SplitRange::Both(15..=15), SplitRange::Old(16..=20)));",
          "    assert_eq!(Split::new(o, n), expected);"
        ],
        "code": [
          "{",
          "    let o = Utf8Range { start: 10, end: 15 };",
          "    let n = Utf8Range { start: 15, end: 20 };",
          "    let _result = Split::new(o, n);",
          "    let o = Utf8Range { start: 10, end: 15 };",
          "    let n = Utf8Range { start: 15, end: 20 };",
          "    let expected = Some(Split::parts3(SplitRange::New(10..=14), SplitRange::Both(15..=15), SplitRange::Old(16..=20)));",
          "    assert_eq!(Split::new(o, n), expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let o = Utf8Range { start: 1, end: 5 };",
          "    let n = Utf8Range { start: 6, end: 10 };",
          "    let _result = Split::new(o, n);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(Split::parts3(new(6..=5), both(1..=10), old(10..=10)));"
        ],
        "code": [
          "{",
          "    let o = Utf8Range { start: 1, end: 5 };",
          "    let n = Utf8Range { start: 6, end: 10 };",
          "    let _result = Split::new(o, n);",
          "    assert_eq!(_result, Some(Split::parts3(new(6..=5), both(1..=10), old(10..=10)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]