[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let o = Utf8Range { start: 5, end: 7 };",
          "    let n = Utf8Range { start: 7, end: 7 };",
          "    let result = Split::new(o, n);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), Split::parts2(SplitRange::New(5..=6), SplitRange::Both(7..=7)));"
        ],
        "code": [
          "{",
          "    let o = Utf8Range { start: 5, end: 7 };",
          "    let n = Utf8Range { start: 7, end: 7 };",
          "    let result = Split::new(o, n);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), Split::parts2(SplitRange::New(5..=6), SplitRange::Both(7..=7)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let o = Utf8Range { start: 6, end: 8 };",
          "    let n = Utf8Range { start: 8, end: 8 };",
          "    let result = Split::new(o, n);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Split::parts2(SplitRange::New(UTF8Range { start: 6, end: 7 }), SplitRange::Both(UTF8Range { start: 8, end: 8 })));"
        ],
        "code": [
          "{",
          "    let o = Utf8Range { start: 6, end: 8 };",
          "    let n = Utf8Range { start: 8, end: 8 };",
          "    let result = Split::new(o, n);",
          "    assert_eq!(result, Some(Split::parts2(SplitRange::New(UTF8Range { start: 6, end: 7 }), SplitRange::Both(UTF8Range { start: 8, end: 8 })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let o = Utf8Range { start: 4, end: 6 };",
          "    let n = Utf8Range { start: 6, end: 6 };",
          "    let result = Split::new(o, n);",
          "}"
        ],
        "oracle": [
          "    let o = Utf8Range { start: 4, end: 6 };",
          "    let n = Utf8Range { start: 6, end: 6 };",
          "    let expected = Some(Split::parts2(SplitRange::New(4..=5), SplitRange::Both(6..=6)));",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let o = Utf8Range { start: 4, end: 6 };",
          "    let n = Utf8Range { start: 6, end: 6 };",
          "    let result = Split::new(o, n);",
          "    let o = Utf8Range { start: 4, end: 6 };",
          "    let n = Utf8Range { start: 6, end: 6 };",
          "    let expected = Some(Split::parts2(SplitRange::New(4..=5), SplitRange::Both(6..=6)));",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]