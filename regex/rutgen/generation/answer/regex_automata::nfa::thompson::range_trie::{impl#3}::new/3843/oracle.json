[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let o = Utf8Range { start: 2, end: 5 };",
          "    let n = Utf8Range { start: 6, end: 6 };",
          "    Split::new(o, n);",
          "}"
        ],
        "oracle": [
          "    let o = Utf8Range { start: 2, end: 5 };",
          "    let n = Utf8Range { start: 6, end: 6 };",
          "    let result = Split::new(o, n);",
          "    assert_eq!(result, Some(Split::parts2(SplitRange::Old(2..=5), SplitRange::Both(6..=6)));"
        ],
        "code": [
          "{",
          "    let o = Utf8Range { start: 2, end: 5 };",
          "    let n = Utf8Range { start: 6, end: 6 };",
          "    Split::new(o, n);",
          "    let o = Utf8Range { start: 2, end: 5 };",
          "    let n = Utf8Range { start: 6, end: 6 };",
          "    let result = Split::new(o, n);",
          "    assert_eq!(result, Some(Split::parts2(SplitRange::Old(2..=5), SplitRange::Both(6..=6)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let o = Utf8Range { start: 3, end: 5 };",
          "    let n = Utf8Range { start: 5, end: 6 };",
          "    Split::new(o, n);",
          "}"
        ],
        "oracle": [
          "    Split::new(Utf8Range { start: 3, end: 5 }, Utf8Range { start: 5, end: 6 }).unwrap() == Some(Split::parts2(SplitRange::Old(3..=4), SplitRange::Both(5..=5)))"
        ],
        "code": [
          "{",
          "    let o = Utf8Range { start: 3, end: 5 };",
          "    let n = Utf8Range { start: 5, end: 6 };",
          "    Split::new(o, n);",
          "    Split::new(Utf8Range { start: 3, end: 5 }, Utf8Range { start: 5, end: 6 }).unwrap() == Some(Split::parts2(SplitRange::Old(3..=4), SplitRange::Both(5..=5)))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]