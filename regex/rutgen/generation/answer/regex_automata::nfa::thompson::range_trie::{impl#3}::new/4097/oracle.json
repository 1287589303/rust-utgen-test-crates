[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let o = Utf8Range { start: 0, end: 0 };",
          "    let n = Utf8Range { start: 0, end: 0 };",
          "    let result = Split::new(o, n);",
          "}"
        ],
        "oracle": [
          "    let o = Utf8Range { start: 0, end: 0 }; let n = Utf8Range { start: 0, end: 0 }; assert_eq!(result, Some(Split::parts1(SplitRange::Both(0..=0))));",
          "    let o = Utf8Range { start: 1, end: 2 }; let n = Utf8Range { start: 3, end: 4 }; assert_eq!(result, None);",
          "    let o = Utf8Range { start: 5, end: 5 }; let n = Utf8Range { start: 5, end: 5 }; assert_eq!(result, Some(Split::parts1(SplitRange::Both(5..=5))));",
          "    let o = Utf8Range { start: 1, end: 2 }; let n = Utf8Range { start: 2, end: 3 }; assert_eq!(result, Some(Split::parts2(SplitRange::Both(1..=2), SplitRange::New(3..=3))));",
          "    let o = Utf8Range { start: 1, end: 3 }; let n = Utf8Range { start: 2, end: 2 }; assert_eq!(result, Some(Split::parts2(SplitRange::New(1..=1), SplitRange::Both(2..=3))));",
          "    let o = Utf8Range { start: 0, end: 4 }; let n = Utf8Range { start: 1, end: 3 }; assert_eq!(result, Some(Split::parts3(SplitRange::New(0..=0), SplitRange::Both(1..=3), SplitRange::New(4..=4))));",
          "    let o = Utf8Range { start: 1, end: 3 }; let n = Utf8Range { start: 0, end: 2 }; assert_eq!(result, Some(Split::parts3(SplitRange::Old(0..=0), SplitRange::Both(1..=2), SplitRange::Old(3..=3))));",
          "    let o = Utf8Range { start: 2, end: 5 }; let n = Utf8Range { start: 5, end: 6 }; assert_eq!(result, Some(Split::parts2(SplitRange::Both(2..=5), SplitRange::New(6..=6))));",
          "    let o = Utf8Range { start: 2, end: 5 }; let n = Utf8Range { start: 4, end: 4 }; assert_eq!(result, Some(Split::parts2(SplitRange::New(2..=3), SplitRange::Both(4..=5))));",
          "    let o = Utf8Range { start: 2, end: 5 }; let n = Utf8Range { start: 3, end: 4 }; assert_eq!(result, Some(Split::parts3(SplitRange::New(2..=2), SplitRange::Both(3..=4), SplitRange::New(5..=5))));",
          "    let o = Utf8Range { start: 2, end: 3 }; let n = Utf8Range { start: 3, end: 5 }; assert_eq!(result, Some(Split::parts2(SplitRange::Both(2..=3), SplitRange::New(4..=5))));",
          "    let o = Utf8Range { start: 5, end: 5 }; let n = Utf8Range { start: 4, end: 4 }; assert_eq!(result, None);",
          "    let o = Utf8Range { start: 1, end: 1 }; let n = Utf8Range { start: 0, end: 2 }; assert_eq!(result, Some(Split::parts2(SplitRange::New(1..=1), SplitRange::Both(0..=2))));",
          "    let o = Utf8Range { start: 0, end: 1 }; let n = Utf8Range { start: 0, end: 2 }; assert_eq!(result, Some(Split::parts2(SplitRange::Both(0..=1), SplitRange::New(2..=2))));"
        ],
        "code": [
          "{",
          "    let o = Utf8Range { start: 0, end: 0 };",
          "    let n = Utf8Range { start: 0, end: 0 };",
          "    let result = Split::new(o, n);",
          "    let o = Utf8Range { start: 0, end: 0 }; let n = Utf8Range { start: 0, end: 0 }; assert_eq!(result, Some(Split::parts1(SplitRange::Both(0..=0))));",
          "    let o = Utf8Range { start: 1, end: 2 }; let n = Utf8Range { start: 3, end: 4 }; assert_eq!(result, None);",
          "    let o = Utf8Range { start: 5, end: 5 }; let n = Utf8Range { start: 5, end: 5 }; assert_eq!(result, Some(Split::parts1(SplitRange::Both(5..=5))));",
          "    let o = Utf8Range { start: 1, end: 2 }; let n = Utf8Range { start: 2, end: 3 }; assert_eq!(result, Some(Split::parts2(SplitRange::Both(1..=2), SplitRange::New(3..=3))));",
          "    let o = Utf8Range { start: 1, end: 3 }; let n = Utf8Range { start: 2, end: 2 }; assert_eq!(result, Some(Split::parts2(SplitRange::New(1..=1), SplitRange::Both(2..=3))));",
          "    let o = Utf8Range { start: 0, end: 4 }; let n = Utf8Range { start: 1, end: 3 }; assert_eq!(result, Some(Split::parts3(SplitRange::New(0..=0), SplitRange::Both(1..=3), SplitRange::New(4..=4))));",
          "    let o = Utf8Range { start: 1, end: 3 }; let n = Utf8Range { start: 0, end: 2 }; assert_eq!(result, Some(Split::parts3(SplitRange::Old(0..=0), SplitRange::Both(1..=2), SplitRange::Old(3..=3))));",
          "    let o = Utf8Range { start: 2, end: 5 }; let n = Utf8Range { start: 5, end: 6 }; assert_eq!(result, Some(Split::parts2(SplitRange::Both(2..=5), SplitRange::New(6..=6))));",
          "    let o = Utf8Range { start: 2, end: 5 }; let n = Utf8Range { start: 4, end: 4 }; assert_eq!(result, Some(Split::parts2(SplitRange::New(2..=3), SplitRange::Both(4..=5))));",
          "    let o = Utf8Range { start: 2, end: 5 }; let n = Utf8Range { start: 3, end: 4 }; assert_eq!(result, Some(Split::parts3(SplitRange::New(2..=2), SplitRange::Both(3..=4), SplitRange::New(5..=5))));",
          "    let o = Utf8Range { start: 2, end: 3 }; let n = Utf8Range { start: 3, end: 5 }; assert_eq!(result, Some(Split::parts2(SplitRange::Both(2..=3), SplitRange::New(4..=5))));",
          "    let o = Utf8Range { start: 5, end: 5 }; let n = Utf8Range { start: 4, end: 4 }; assert_eq!(result, None);",
          "    let o = Utf8Range { start: 1, end: 1 }; let n = Utf8Range { start: 0, end: 2 }; assert_eq!(result, Some(Split::parts2(SplitRange::New(1..=1), SplitRange::Both(0..=2))));",
          "    let o = Utf8Range { start: 0, end: 1 }; let n = Utf8Range { start: 0, end: 2 }; assert_eq!(result, Some(Split::parts2(SplitRange::Both(0..=1), SplitRange::New(2..=2))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let o = Utf8Range { start: 0, end: 1 };",
          "    let n = Utf8Range { start: 1, end: 1 };",
          "    let result = Split::new(o, n);",
          "}"
        ],
        "oracle": [
          "    let o = Utf8Range { start: 0, end: 1 };",
          "    let n = Utf8Range { start: 1, end: 1 };",
          "    assert_eq!(result, None);",
          "    ",
          "    let o = Utf8Range { start: 0, end: 0 };",
          "    let n = Utf8Range { start: 0, end: 0 };",
          "    assert_eq!(result, Some(Split::parts1(SplitRange::Both(0..=0))));",
          "    ",
          "    let o = Utf8Range { start: 0, end: 0 };",
          "    let n = Utf8Range { start: 0, end: 1 };",
          "    assert_eq!(result, Some(Split::parts2(SplitRange::Both(0..=0), SplitRange::New(1..=1))));",
          "    ",
          "    let o = Utf8Range { start: 1, end: 1 };",
          "    let n = Utf8Range { start: 0, end: 1 };",
          "    assert_eq!(result, Some(Split::parts2(SplitRange::New(0..=0), SplitRange::Both(1..=1))));",
          "    ",
          "    let o = Utf8Range { start: 0, end: 2 };",
          "    let n = Utf8Range { start: 1, end: 2 };",
          "    assert_eq!(result, Some(Split::parts2(SplitRange::Both(0..=0), SplitRange::New(2..=2))));",
          "    ",
          "    let o = Utf8Range { start: 0, end: 2 };",
          "    let n = Utf8Range { start: 0, end: 2 };",
          "    assert_eq!(result, Some(Split::parts1(SplitRange::Both(0..=2))));",
          "    ",
          "    let o = Utf8Range { start: 0, end: 2 };",
          "    let n = Utf8Range { start: 2, end: 3 };",
          "    assert_eq!(result, Some(Split::parts2(SplitRange::Both(0..=2), SplitRange::New(3..=3))));",
          "    ",
          "    let o = Utf8Range { start: 3, end: 4 };",
          "    let n = Utf8Range { start: 0, end: 3 };",
          "    assert_eq!(result, Some(Split::parts2(SplitRange::New(0..=2), SplitRange::Both(3..=4))));",
          "    ",
          "    let o = Utf8Range { start: 2, end: 5 };",
          "    let n = Utf8Range { start: 1, end: 3 };",
          "    assert_eq!(result, Some(Split::parts3(SplitRange::New(1..=1), SplitRange::Both(2..=3), SplitRange::New(4..=5))));",
          "    ",
          "    let o = Utf8Range { start: 0, end: 5 };",
          "    let n = Utf8Range { start: 1, end: 4 };",
          "    assert_eq!(result, Some(Split::parts3(SplitRange::Both(1..=1), SplitRange::Both(2..=4), SplitRange::New(5..=5))));",
          "    ",
          "    let o = Utf8Range { start: 1, end: 4 };",
          "    let n = Utf8Range { start: 2, end: 2 };",
          "    assert_eq!(result, Some(Split::parts3(SplitRange::New(1..=1), SplitRange::Both(2..=2), SplitRange::New(3..=4))));",
          "    ",
          "    let o = Utf8Range { start: 2, end: 4 };",
          "    let n = Utf8Range { start: 0, end: 1 };",
          "    assert_eq!(result, Some(Split::parts2(SplitRange::New(0..=1), SplitRange::Both(2..=4))));",
          "    ",
          "    let o = Utf8Range { start: 0, end: 0 };",
          "    let n = Utf8Range { start: 1, end: 4 };",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let o = Utf8Range { start: 0, end: 1 };",
          "    let n = Utf8Range { start: 1, end: 1 };",
          "    let result = Split::new(o, n);",
          "    let o = Utf8Range { start: 0, end: 1 };",
          "    let n = Utf8Range { start: 1, end: 1 };",
          "    assert_eq!(result, None);",
          "    ",
          "    let o = Utf8Range { start: 0, end: 0 };",
          "    let n = Utf8Range { start: 0, end: 0 };",
          "    assert_eq!(result, Some(Split::parts1(SplitRange::Both(0..=0))));",
          "    ",
          "    let o = Utf8Range { start: 0, end: 0 };",
          "    let n = Utf8Range { start: 0, end: 1 };",
          "    assert_eq!(result, Some(Split::parts2(SplitRange::Both(0..=0), SplitRange::New(1..=1))));",
          "    ",
          "    let o = Utf8Range { start: 1, end: 1 };",
          "    let n = Utf8Range { start: 0, end: 1 };",
          "    assert_eq!(result, Some(Split::parts2(SplitRange::New(0..=0), SplitRange::Both(1..=1))));",
          "    ",
          "    let o = Utf8Range { start: 0, end: 2 };",
          "    let n = Utf8Range { start: 1, end: 2 };",
          "    assert_eq!(result, Some(Split::parts2(SplitRange::Both(0..=0), SplitRange::New(2..=2))));",
          "    ",
          "    let o = Utf8Range { start: 0, end: 2 };",
          "    let n = Utf8Range { start: 0, end: 2 };",
          "    assert_eq!(result, Some(Split::parts1(SplitRange::Both(0..=2))));",
          "    ",
          "    let o = Utf8Range { start: 0, end: 2 };",
          "    let n = Utf8Range { start: 2, end: 3 };",
          "    assert_eq!(result, Some(Split::parts2(SplitRange::Both(0..=2), SplitRange::New(3..=3))));",
          "    ",
          "    let o = Utf8Range { start: 3, end: 4 };",
          "    let n = Utf8Range { start: 0, end: 3 };",
          "    assert_eq!(result, Some(Split::parts2(SplitRange::New(0..=2), SplitRange::Both(3..=4))));",
          "    ",
          "    let o = Utf8Range { start: 2, end: 5 };",
          "    let n = Utf8Range { start: 1, end: 3 };",
          "    assert_eq!(result, Some(Split::parts3(SplitRange::New(1..=1), SplitRange::Both(2..=3), SplitRange::New(4..=5))));",
          "    ",
          "    let o = Utf8Range { start: 0, end: 5 };",
          "    let n = Utf8Range { start: 1, end: 4 };",
          "    assert_eq!(result, Some(Split::parts3(SplitRange::Both(1..=1), SplitRange::Both(2..=4), SplitRange::New(5..=5))));",
          "    ",
          "    let o = Utf8Range { start: 1, end: 4 };",
          "    let n = Utf8Range { start: 2, end: 2 };",
          "    assert_eq!(result, Some(Split::parts3(SplitRange::New(1..=1), SplitRange::Both(2..=2), SplitRange::New(3..=4))));",
          "    ",
          "    let o = Utf8Range { start: 2, end: 4 };",
          "    let n = Utf8Range { start: 0, end: 1 };",
          "    assert_eq!(result, Some(Split::parts2(SplitRange::New(0..=1), SplitRange::Both(2..=4))));",
          "    ",
          "    let o = Utf8Range { start: 0, end: 0 };",
          "    let n = Utf8Range { start: 1, end: 4 };",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let o = Utf8Range { start: 1, end: 1 };",
          "    let n = Utf8Range { start: 0, end: 1 };",
          "    let result = Split::new(o, n);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Split::parts2(SplitRange::Both(1..=1), SplitRange::New(2..=1)));"
        ],
        "code": [
          "{",
          "    let o = Utf8Range { start: 1, end: 1 };",
          "    let n = Utf8Range { start: 0, end: 1 };",
          "    let result = Split::new(o, n);",
          "    assert_eq!(result, Some(Split::parts2(SplitRange::Both(1..=1), SplitRange::New(2..=1)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let o = Utf8Range { start: 0, end: 1 };",
          "    let n = Utf8Range { start: 0, end: 0 };",
          "    let result = Split::new(o, n);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Split::parts2(SplitRange::Both(0..=1), SplitRange::New(2..=0))));"
        ],
        "code": [
          "{",
          "    let o = Utf8Range { start: 0, end: 1 };",
          "    let n = Utf8Range { start: 0, end: 0 };",
          "    let result = Split::new(o, n);",
          "    assert_eq!(result, Some(Split::parts2(SplitRange::Both(0..=1), SplitRange::New(2..=0))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let o = Utf8Range { start: 1, end: 1 };",
          "    let n = Utf8Range { start: 1, end: 1 };",
          "    let result = Split::new(o, n);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Split::parts1(SplitRange::Both(1..=1))));"
        ],
        "code": [
          "{",
          "    let o = Utf8Range { start: 1, end: 1 };",
          "    let n = Utf8Range { start: 1, end: 1 };",
          "    let result = Split::new(o, n);",
          "    assert_eq!(result, Some(Split::parts1(SplitRange::Both(1..=1))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let o = Utf8Range { start: 1, end: 2 };",
          "    let n = Utf8Range { start: 0, end: 1 };",
          "    let result = Split::new(o, n);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let o = Utf8Range { start: 1, end: 2 };",
          "    let n = Utf8Range { start: 0, end: 1 };",
          "    let result = Split::new(o, n);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let o = Utf8Range { start: 0, end: 1 };",
          "    let n = Utf8Range { start: 1, end: 2 };",
          "    let result = Split::new(o, n);",
          "}"
        ],
        "oracle": [
          "    Split::new(Utf8Range { start: 0, end: 1 }, Utf8Range { start: 1, end: 2 }) == None",
          "    Split::new(Utf8Range { start: 0, end: 1 }, Utf8Range { start: 0, end: 1 }) == Some(Split::parts1(SplitRange::Both(0..=1)))",
          "    Split::new(Utf8Range { start: 0, end: 1 }, Utf8Range { start: 0, end: 2 }) == Some(Split::parts2(SplitRange::Both(0..=1), SplitRange::New(2..=2)))",
          "    Split::new(Utf8Range { start: 0, end: 1 }, Utf8Range { start: 1, end: 1 }) == Some(Split::parts2(SplitRange::Both(0..=1), SplitRange::Old(1..=1)))",
          "    Split::new(Utf8Range { start: 0, end: 1 }, Utf8Range { start: 2, end: 2 }) == Some(Split::parts2(SplitRange::Both(0..=1), SplitRange::New(2..=2)))",
          "    Split::new(Utf8Range { start: 0, end: 1 }, Utf8Range { start: 0, end: 0 }) == Some(Split::parts2(SplitRange::Both(0..=0), SplitRange::Old(1..=1)))",
          "    Split::new(Utf8Range { start: 0, end: 2 }, Utf8Range { start: 1, end: 1 }) == Some(Split::parts2(SplitRange::New(0..=0), SplitRange::Both(1..=1)))",
          "    Split::new(Utf8Range { start: 1, end: 1 }, Utf8Range { start: 2, end: 2 }) == Some(Split::parts2(SplitRange::Old(1..=1), SplitRange::New(2..=2)))"
        ],
        "code": [
          "{",
          "    let o = Utf8Range { start: 0, end: 1 };",
          "    let n = Utf8Range { start: 1, end: 2 };",
          "    let result = Split::new(o, n);",
          "    Split::new(Utf8Range { start: 0, end: 1 }, Utf8Range { start: 1, end: 2 }) == None",
          "    Split::new(Utf8Range { start: 0, end: 1 }, Utf8Range { start: 0, end: 1 }) == Some(Split::parts1(SplitRange::Both(0..=1)))",
          "    Split::new(Utf8Range { start: 0, end: 1 }, Utf8Range { start: 0, end: 2 }) == Some(Split::parts2(SplitRange::Both(0..=1), SplitRange::New(2..=2)))",
          "    Split::new(Utf8Range { start: 0, end: 1 }, Utf8Range { start: 1, end: 1 }) == Some(Split::parts2(SplitRange::Both(0..=1), SplitRange::Old(1..=1)))",
          "    Split::new(Utf8Range { start: 0, end: 1 }, Utf8Range { start: 2, end: 2 }) == Some(Split::parts2(SplitRange::Both(0..=1), SplitRange::New(2..=2)))",
          "    Split::new(Utf8Range { start: 0, end: 1 }, Utf8Range { start: 0, end: 0 }) == Some(Split::parts2(SplitRange::Both(0..=0), SplitRange::Old(1..=1)))",
          "    Split::new(Utf8Range { start: 0, end: 2 }, Utf8Range { start: 1, end: 1 }) == Some(Split::parts2(SplitRange::New(0..=0), SplitRange::Both(1..=1)))",
          "    Split::new(Utf8Range { start: 1, end: 1 }, Utf8Range { start: 2, end: 2 }) == Some(Split::parts2(SplitRange::Old(1..=1), SplitRange::New(2..=2)))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let o = Utf8Range { start: 0, end: 1 };",
          "    let n = Utf8Range { start: 1, end: 1 };",
          "    let result = Split::new(o, n);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let o = Utf8Range { start: 0, end: 1 };",
          "    let n = Utf8Range { start: 1, end: 1 };",
          "    let result = Split::new(o, n);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let o = Utf8Range { start: 1, end: 2 };",
          "    let n = Utf8Range { start: 2, end: 3 };",
          "    let result = Split::new(o, n);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Split::parts2(SplitRange::Both(1..=2), SplitRange::New(3..=3)));  // case 4: b < y",
          "    assert_eq!(result, Some(Split::parts2(SplitRange::Both(2..=2), SplitRange::New(3..=3)));  // case 10: b == y",
          "    assert_eq!(result, None);  // case 1: b < x or y < a",
          "    assert_eq!(result, Some(Split::parts1(SplitRange::Both(1..=2)));  // case 3: a == x and b == y",
          "    assert_eq!(result, Some(Split::parts3(SplitRange::New(2..=2), SplitRange::Both(3..=3), SplitRange::Old(2..=2)));  // case 13: y > a",
          "    assert_eq!(result, Some(Split::parts2(SplitRange::Old(1..=1), SplitRange::Both(2..=3)));  // case 6: x == a and y < b",
          "    assert_eq!(result, Some(Split::parts3(SplitRange::Old(1..=1), SplitRange::Both(2..=3), SplitRange::Old(2..=3)));  // case 12: b > x && b < y",
          "    assert_eq!(result, Some(Split::parts3(SplitRange::Old(1..=1), SplitRange::Both(2..=2), SplitRange::Old(2..=3)));  // case 11: y == a and x < b",
          "    assert_eq!(result, None);  // case 1: b < x or y < a"
        ],
        "code": [
          "{",
          "    let o = Utf8Range { start: 1, end: 2 };",
          "    let n = Utf8Range { start: 2, end: 3 };",
          "    let result = Split::new(o, n);",
          "    assert_eq!(result, Some(Split::parts2(SplitRange::Both(1..=2), SplitRange::New(3..=3)));  // case 4: b < y",
          "    assert_eq!(result, Some(Split::parts2(SplitRange::Both(2..=2), SplitRange::New(3..=3)));  // case 10: b == y",
          "    assert_eq!(result, None);  // case 1: b < x or y < a",
          "    assert_eq!(result, Some(Split::parts1(SplitRange::Both(1..=2)));  // case 3: a == x and b == y",
          "    assert_eq!(result, Some(Split::parts3(SplitRange::New(2..=2), SplitRange::Both(3..=3), SplitRange::Old(2..=2)));  // case 13: y > a",
          "    assert_eq!(result, Some(Split::parts2(SplitRange::Old(1..=1), SplitRange::Both(2..=3)));  // case 6: x == a and y < b",
          "    assert_eq!(result, Some(Split::parts3(SplitRange::Old(1..=1), SplitRange::Both(2..=3), SplitRange::Old(2..=3)));  // case 12: b > x && b < y",
          "    assert_eq!(result, Some(Split::parts3(SplitRange::Old(1..=1), SplitRange::Both(2..=2), SplitRange::Old(2..=3)));  // case 11: y == a and x < b",
          "    assert_eq!(result, None);  // case 1: b < x or y < a",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let o = Utf8Range { start: 0, end: 1 };",
          "    let n = Utf8Range { start: 2, end: 3 };",
          "    let result = Split::new(o, n);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let o = Utf8Range { start: 0, end: 1 };",
          "    let n = Utf8Range { start: 2, end: 3 };",
          "    let result = Split::new(o, n);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let o = Utf8Range { start: 2, end: 3 };",
          "    let n = Utf8Range { start: 1, end: 2 };",
          "    let result = Split::new(o, n);",
          "}"
        ],
        "oracle": [
          "    let o = Utf8Range { start: 2, end: 3 };",
          "    let n = Utf8Range { start: 1, end: 2 };",
          "    let result = Split::new(o, n);",
          "    assert_eq!(result, Some(Split::parts2(SplitRange::Old(Utf8Range { start: 1, end: 1 }), SplitRange::Both(Utf8Range { start: 2, end: 3 }))))"
        ],
        "code": [
          "{",
          "    let o = Utf8Range { start: 2, end: 3 };",
          "    let n = Utf8Range { start: 1, end: 2 };",
          "    let result = Split::new(o, n);",
          "    let o = Utf8Range { start: 2, end: 3 };",
          "    let n = Utf8Range { start: 1, end: 2 };",
          "    let result = Split::new(o, n);",
          "    assert_eq!(result, Some(Split::parts2(SplitRange::Old(Utf8Range { start: 1, end: 1 }), SplitRange::Both(Utf8Range { start: 2, end: 3 }))))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]