[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let o = Utf8Range { start: 1, end: 3 };",
          "    let n = Utf8Range { start: 3, end: 5 };",
          "    let result = Split::new(o, n);",
          "}"
        ],
        "oracle": [
          "    let o = Utf8Range { start: 1, end: 3 };",
          "    let n = Utf8Range { start: 3, end: 5 };",
          "    let expected = Some(Split::parts2(SplitRange::Both(Utf8Range { start: 1, end: 3 }), SplitRange::Old(Utf8Range { start: 4, end: 5 })));",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let o = Utf8Range { start: 1, end: 3 };",
          "    let n = Utf8Range { start: 3, end: 5 };",
          "    let result = Split::new(o, n);",
          "    let o = Utf8Range { start: 1, end: 3 };",
          "    let n = Utf8Range { start: 3, end: 5 };",
          "    let expected = Some(Split::parts2(SplitRange::Both(Utf8Range { start: 1, end: 3 }), SplitRange::Old(Utf8Range { start: 4, end: 5 })));",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let o = Utf8Range { start: 2, end: 4 };",
          "    let n = Utf8Range { start: 3, end: 5 };",
          "    let result = Split::new(o, n);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Split::parts2(SplitRange::Both(3..=4), SplitRange::Old(5..=5)));"
        ],
        "code": [
          "{",
          "    let o = Utf8Range { start: 2, end: 4 };",
          "    let n = Utf8Range { start: 3, end: 5 };",
          "    let result = Split::new(o, n);",
          "    assert_eq!(result, Some(Split::parts2(SplitRange::Both(3..=4), SplitRange::Old(5..=5)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let o = Utf8Range { start: 1, end: 5 };",
          "    let n = Utf8Range { start: 5, end: 5 };",
          "    let result = Split::new(o, n);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Split::parts2(SplitRange::Both(1..=5), SplitRange::Old(6..=5)));"
        ],
        "code": [
          "{",
          "    let o = Utf8Range { start: 1, end: 5 };",
          "    let n = Utf8Range { start: 5, end: 5 };",
          "    let result = Split::new(o, n);",
          "    assert_eq!(result, Some(Split::parts2(SplitRange::Both(1..=5), SplitRange::Old(6..=5)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let o = Utf8Range { start: 2, end: 6 };",
          "    let n = Utf8Range { start: 4, end: 5 };",
          "    let result = Split::new(o, n);",
          "}"
        ],
        "oracle": [
          "    let expected_result = Some(Split::parts2(SplitRange::Both(4..=5), SplitRange::Old(6..=6)));",
          "    assert_eq!(result, expected_result);"
        ],
        "code": [
          "{",
          "    let o = Utf8Range { start: 2, end: 6 };",
          "    let n = Utf8Range { start: 4, end: 5 };",
          "    let result = Split::new(o, n);",
          "    let expected_result = Some(Split::parts2(SplitRange::Both(4..=5), SplitRange::Old(6..=6)));",
          "    assert_eq!(result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let o = Utf8Range { start: 2, end: 3 };",
          "    let n = Utf8Range { start: 3, end: 6 };",
          "    let result = Split::new(o, n);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Split::parts2(SplitRange::Both(2..=3), SplitRange::Old(4..=6)));"
        ],
        "code": [
          "{",
          "    let o = Utf8Range { start: 2, end: 3 };",
          "    let n = Utf8Range { start: 3, end: 6 };",
          "    let result = Split::new(o, n);",
          "    assert_eq!(result, Some(Split::parts2(SplitRange::Both(2..=3), SplitRange::Old(4..=6)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]