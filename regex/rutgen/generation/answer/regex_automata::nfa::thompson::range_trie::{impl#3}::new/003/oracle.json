[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let o = Utf8Range { start: 1, end: 1 };",
          "    let n = Utf8Range { start: 1, end: 1 };",
          "    Split::new(o, n);",
          "}"
        ],
        "oracle": [
          "    Split::new(Utf8Range { start: 1, end: 1 }, Utf8Range { start: 1, end: 1 }).unwrap() == Some(Split::parts1(SplitRange::Both(1..=1)))"
        ],
        "code": [
          "{",
          "    let o = Utf8Range { start: 1, end: 1 };",
          "    let n = Utf8Range { start: 1, end: 1 };",
          "    Split::new(o, n);",
          "    Split::new(Utf8Range { start: 1, end: 1 }, Utf8Range { start: 1, end: 1 }).unwrap() == Some(Split::parts1(SplitRange::Both(1..=1)))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let o = Utf8Range { start: 0, end: 0 };",
          "    let n = Utf8Range { start: 0, end: 0 };",
          "    Split::new(o, n);",
          "}"
        ],
        "oracle": [
          "    let o = Utf8Range { start: 0, end: 0 };",
          "    let n = Utf8Range { start: 0, end: 0 };",
          "    assert_eq!(Split::new(o, n), Some(Split::parts1(SplitRange::Both(0..=0))));"
        ],
        "code": [
          "{",
          "    let o = Utf8Range { start: 0, end: 0 };",
          "    let n = Utf8Range { start: 0, end: 0 };",
          "    Split::new(o, n);",
          "    let o = Utf8Range { start: 0, end: 0 };",
          "    let n = Utf8Range { start: 0, end: 0 };",
          "    assert_eq!(Split::new(o, n), Some(Split::parts1(SplitRange::Both(0..=0))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let o = Utf8Range { start: 1, end: 1 };",
          "    let n = Utf8Range { start: 1, end: 1 };",
          "    Split::new(o, n);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Split::new(Utf8Range { start: 1, end: 1 }, Utf8Range { start: 1, end: 1 }), Some(Split::parts1(SplitRange::Both(1..=1))));"
        ],
        "code": [
          "{",
          "    let o = Utf8Range { start: 1, end: 1 };",
          "    let n = Utf8Range { start: 1, end: 1 };",
          "    Split::new(o, n);",
          "    assert_eq!(Split::new(Utf8Range { start: 1, end: 1 }, Utf8Range { start: 1, end: 1 }), Some(Split::parts1(SplitRange::Both(1..=1))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]