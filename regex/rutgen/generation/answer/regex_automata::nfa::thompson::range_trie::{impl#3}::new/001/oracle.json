[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let o = Utf8Range { start: 0, end: 0 };",
          "    let n = Utf8Range { start: 1, end: 1 };",
          "    let result = Split::new(o, n);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let o = Utf8Range { start: 0, end: 0 };",
          "    let n = Utf8Range { start: 1, end: 1 };",
          "    let result = Split::new(o, n);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let o = Utf8Range { start: 0, end: 0 };",
          "    let n = Utf8Range { start: 2, end: 2 };",
          "    let result = Split::new(o, n);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let o = Utf8Range { start: 0, end: 0 };",
          "    let n = Utf8Range { start: 2, end: 2 };",
          "    let result = Split::new(o, n);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let o = Utf8Range { start: 0, end: 0 };",
          "    let n = Utf8Range { start: 3, end: 5 };",
          "    let result = Split::new(o, n);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let o = Utf8Range { start: 0, end: 0 };",
          "    let n = Utf8Range { start: 3, end: 5 };",
          "    let result = Split::new(o, n);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let o = Utf8Range { start: 0, end: 0 };",
          "    let n = Utf8Range { start: 4, end: 6 };",
          "    let result = Split::new(o, n);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let o = Utf8Range { start: 0, end: 0 };",
          "    let n = Utf8Range { start: 4, end: 6 };",
          "    let result = Split::new(o, n);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let o = Utf8Range { start: 0, end: 0 };",
          "    let n = Utf8Range { start: 5, end: 10 };",
          "    let result = Split::new(o, n);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let o = Utf8Range { start: 0, end: 0 };",
          "    let n = Utf8Range { start: 5, end: 10 };",
          "    let result = Split::new(o, n);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]