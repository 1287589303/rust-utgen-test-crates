[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        flags: Flags {",
          "            ignore_whitespace: true,",
          "            ..Default::default()",
          "        },",
          "        nest_limit: 5,",
          "    };",
          "    let pattern = \"   # comment line\\n   # another comment\\n\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.bump_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.pos(), 0);",
          "    assert_eq!(parser.is_done(), true);",
          "    assert_eq!(parser.char.get(), None);",
          "    assert!(parser.flags().ignore_whitespace);"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        flags: Flags {",
          "            ignore_whitespace: true,",
          "            ..Default::default()",
          "        },",
          "        nest_limit: 5,",
          "    };",
          "    let pattern = \"   # comment line\\n   # another comment\\n\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.bump_space();",
          "    assert_eq!(parser.pos(), 0);",
          "    assert_eq!(parser.is_done(), true);",
          "    assert_eq!(parser.char.get(), None);",
          "    assert!(parser.flags().ignore_whitespace);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        flags: Flags {",
          "            ignore_whitespace: true,",
          "            ..Default::default()",
          "        },",
          "        nest_limit: 5,",
          "    };",
          "    let pattern = \"   \\n\\t\\t\\r\\n   \";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.bump_space();",
          "}"
        ],
        "oracle": [
          "    assert!(parser.is_done());",
          "    assert_eq!(parser.pos(), 0);",
          "    assert_eq!(parser.char.get(), None);",
          "    assert_eq!(parser.capture_index.get(), 0);"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        flags: Flags {",
          "            ignore_whitespace: true,",
          "            ..Default::default()",
          "        },",
          "        nest_limit: 5,",
          "    };",
          "    let pattern = \"   \\n\\t\\t\\r\\n   \";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.bump_space();",
          "    assert!(parser.is_done());",
          "    assert_eq!(parser.pos(), 0);",
          "    assert_eq!(parser.char.get(), None);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        flags: Flags {",
          "            ignore_whitespace: true,",
          "            ..Default::default()",
          "        },",
          "        nest_limit: 5,",
          "    };",
          "    let pattern = \"   # This is a comment\\n   # Another comment\\n\\t \\n\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.bump_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.pos(), 0);",
          "    assert!(parser.is_done());",
          "    assert_eq!(parser.char.get(), None);"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        flags: Flags {",
          "            ignore_whitespace: true,",
          "            ..Default::default()",
          "        },",
          "        nest_limit: 5,",
          "    };",
          "    let pattern = \"   # This is a comment\\n   # Another comment\\n\\t \\n\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.bump_space();",
          "    assert_eq!(parser.pos(), 0);",
          "    assert!(parser.is_done());",
          "    assert_eq!(parser.char.get(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        flags: Flags {",
          "            ignore_whitespace: true,",
          "            ..Default::default()",
          "        },",
          "        nest_limit: 5,",
          "    };",
          "    let pattern = \" # Single line comment ending\\n\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.bump_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.pos(), 0);",
          "    assert_eq!(parser.char(), None);",
          "    assert!(parser.is_done());"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        flags: Flags {",
          "            ignore_whitespace: true,",
          "            ..Default::default()",
          "        },",
          "        nest_limit: 5,",
          "    };",
          "    let pattern = \" # Single line comment ending\\n\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.bump_space();",
          "    assert_eq!(parser.pos(), 0);",
          "    assert_eq!(parser.char(), None);",
          "    assert!(parser.is_done());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]