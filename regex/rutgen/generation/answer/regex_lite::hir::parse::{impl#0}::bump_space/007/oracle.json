[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { ",
          "        nest_limit: 10, ",
          "        flags: Flags { ignore_whitespace: false, ..Default::default() } ",
          "    };",
          "    let parser = Parser::new(config, \"   a   b   # comment \\n   c  d\");",
          "    parser.bump_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.pos(), 0);",
          "    assert_eq!(parser.char.get(), Some(' '));",
          "    assert_eq!(parser.is_done(), false);"
        ],
        "code": [
          "{",
          "    let config = Config { ",
          "        nest_limit: 10, ",
          "        flags: Flags { ignore_whitespace: false, ..Default::default() } ",
          "    };",
          "    let parser = Parser::new(config, \"   a   b   # comment \\n   c  d\");",
          "    parser.bump_space();",
          "    assert_eq!(parser.pos(), 0);",
          "    assert_eq!(parser.char.get(), Some(' '));",
          "    assert_eq!(parser.is_done(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { ",
          "        nest_limit: 10, ",
          "        flags: Flags { ignore_whitespace: false, ..Default::default() } ",
          "    };",
          "    let parser = Parser::new(config, \"       \");",
          "    parser.bump_space();",
          "}"
        ],
        "oracle": [
          "    assert!(parser.is_done());",
          "    assert_eq!(parser.pos(), 0);",
          "    assert_eq!(parser.char.get(), None);"
        ],
        "code": [
          "{",
          "    let config = Config { ",
          "        nest_limit: 10, ",
          "        flags: Flags { ignore_whitespace: false, ..Default::default() } ",
          "    };",
          "    let parser = Parser::new(config, \"       \");",
          "    parser.bump_space();",
          "    assert!(parser.is_done());",
          "    assert_eq!(parser.pos(), 0);",
          "    assert_eq!(parser.char.get(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { ",
          "        nest_limit: 10, ",
          "        flags: Flags { ignore_whitespace: false, ..Default::default() } ",
          "    };",
          "    let parser = Parser::new(config, \"# this is a comment\\n# another comment\");",
          "    parser.bump_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.pos(), 0);",
          "    assert_eq!(parser.char.get(), Some('#'));",
          "    assert!(parser.is_done() == false);",
          "    assert_eq!(parser.flags().ignore_whitespace, false);"
        ],
        "code": [
          "{",
          "    let config = Config { ",
          "        nest_limit: 10, ",
          "        flags: Flags { ignore_whitespace: false, ..Default::default() } ",
          "    };",
          "    let parser = Parser::new(config, \"# this is a comment\\n# another comment\");",
          "    parser.bump_space();",
          "    assert_eq!(parser.pos(), 0);",
          "    assert_eq!(parser.char.get(), Some('#'));",
          "    assert!(parser.is_done() == false);",
          "    assert_eq!(parser.flags().ignore_whitespace, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { ",
          "        nest_limit: 10, ",
          "        flags: Flags { ignore_whitespace: false, ..Default::default() } ",
          "    };",
          "    let parser = Parser::new(config, \"   # comment\\na# comment\\nb   c\");",
          "    parser.bump_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.pos(), 0);",
          "    assert_eq!(parser.char.get(), Some(' '));",
          "    assert!(parser.is_done() == false);",
          "    assert_eq!(parser.flags().ignore_whitespace, false);",
          "    assert_eq!(parser.pattern(), \"   # comment\\na# comment\\nb   c\");",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.char(), ' ');",
          "    assert!(parser.bump() == false);",
          "    assert!(parser.bump_if(\" \") == false);"
        ],
        "code": [
          "{",
          "    let config = Config { ",
          "        nest_limit: 10, ",
          "        flags: Flags { ignore_whitespace: false, ..Default::default() } ",
          "    };",
          "    let parser = Parser::new(config, \"   # comment\\na# comment\\nb   c\");",
          "    parser.bump_space();",
          "    assert_eq!(parser.pos(), 0);",
          "    assert_eq!(parser.char.get(), Some(' '));",
          "    assert!(parser.is_done() == false);",
          "    assert_eq!(parser.flags().ignore_whitespace, false);",
          "    assert_eq!(parser.pattern(), \"   # comment\\na# comment\\nb   c\");",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.char(), ' ');",
          "    assert!(parser.bump() == false);",
          "    assert!(parser.bump_if(\" \") == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { ",
          "        nest_limit: 10, ",
          "        flags: Flags { ignore_whitespace: false, ..Default::default() } ",
          "    };",
          "    let parser = Parser::new(config, \"\");",
          "    parser.bump_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.pos(), 0);",
          "    assert_eq!(parser.char.get(), None);",
          "    assert!(!parser.is_done());",
          "    assert_eq!(parser.flags().ignore_whitespace, false);",
          "    assert!(parser.depth.get() == 0);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(parser.flags().case_insensitive == false);",
          "    assert!(parser.flags().multi_line == false);",
          "    assert!(parser.flags().dot_matches_new_line == false);",
          "    assert!(parser.flags().swap_greed == false);",
          "    assert!(parser.flags().crlf == false);",
          "    assert!(parser.flags().ignore_whitespace == false);"
        ],
        "code": [
          "{",
          "    let config = Config { ",
          "        nest_limit: 10, ",
          "        flags: Flags { ignore_whitespace: false, ..Default::default() } ",
          "    };",
          "    let parser = Parser::new(config, \"\");",
          "    parser.bump_space();",
          "    assert_eq!(parser.pos(), 0);",
          "    assert_eq!(parser.char.get(), None);",
          "    assert!(!parser.is_done());",
          "    assert_eq!(parser.flags().ignore_whitespace, false);",
          "    assert!(parser.depth.get() == 0);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(parser.flags().case_insensitive == false);",
          "    assert!(parser.flags().multi_line == false);",
          "    assert!(parser.flags().dot_matches_new_line == false);",
          "    assert!(parser.flags().swap_greed == false);",
          "    assert!(parser.flags().crlf == false);",
          "    assert!(parser.flags().ignore_whitespace == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]