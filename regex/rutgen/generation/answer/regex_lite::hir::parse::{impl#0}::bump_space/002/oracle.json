[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        flags: Flags {",
          "            ignore_whitespace: true,",
          "            ..Default::default()",
          "        },",
          "        nest_limit: 10,",
          "    };",
          "    let pattern = \"   # comment\\n  a\";",
          "    let mut parser = Parser::new(config, pattern);",
          "    parser.bump_space();",
          "}"
        ],
        "oracle": [
          "    parser.flags().ignore_whitespace == true",
          "    parser.is_done() == false",
          "    parser.char().is_whitespace() == true",
          "    parser.pos() == 4",
          "    parser.char() == 'a'"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        flags: Flags {",
          "            ignore_whitespace: true,",
          "            ..Default::default()",
          "        },",
          "        nest_limit: 10,",
          "    };",
          "    let pattern = \"   # comment\\n  a\";",
          "    let mut parser = Parser::new(config, pattern);",
          "    parser.bump_space();",
          "    parser.flags().ignore_whitespace == true",
          "    parser.is_done() == false",
          "    parser.char().is_whitespace() == true",
          "    parser.pos() == 4",
          "    parser.char() == 'a'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        flags: Flags {",
          "            ignore_whitespace: true,",
          "            ..Default::default()",
          "        },",
          "        nest_limit: 10,",
          "    };",
          "    let pattern = \"   # this is a comment\\n   # another comment\\nb\";",
          "    let mut parser = Parser::new(config, pattern);",
          "    parser.bump_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.pos(), 41);",
          "    assert_eq!(parser.char(), Some('b'));",
          "    assert!(parser.is_done() == false);",
          "    assert!(parser.flags().ignore_whitespace == true);",
          "    assert!(parser.char().is_whitespace() == false);",
          "    assert!(parser.peek_space().is_none());"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        flags: Flags {",
          "            ignore_whitespace: true,",
          "            ..Default::default()",
          "        },",
          "        nest_limit: 10,",
          "    };",
          "    let pattern = \"   # this is a comment\\n   # another comment\\nb\";",
          "    let mut parser = Parser::new(config, pattern);",
          "    parser.bump_space();",
          "    assert_eq!(parser.pos(), 41);",
          "    assert_eq!(parser.char(), Some('b'));",
          "    assert!(parser.is_done() == false);",
          "    assert!(parser.flags().ignore_whitespace == true);",
          "    assert!(parser.char().is_whitespace() == false);",
          "    assert!(parser.peek_space().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        flags: Flags {",
          "            ignore_whitespace: true,",
          "            ..Default::default()",
          "        },",
          "        nest_limit: 10,",
          "    };",
          "    let pattern = \"    # leading whitespace and comment\\nc\";",
          "    let mut parser = Parser::new(config, pattern);",
          "    parser.bump_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.pos(), 5);",
          "    assert_eq!(parser.char(), Some('c'));",
          "    assert!(!parser.is_done());"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        flags: Flags {",
          "            ignore_whitespace: true,",
          "            ..Default::default()",
          "        },",
          "        nest_limit: 10,",
          "    };",
          "    let pattern = \"    # leading whitespace and comment\\nc\";",
          "    let mut parser = Parser::new(config, pattern);",
          "    parser.bump_space();",
          "    assert_eq!(parser.pos(), 5);",
          "    assert_eq!(parser.char(), Some('c'));",
          "    assert!(!parser.is_done());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        flags: Flags {",
          "            ignore_whitespace: true,",
          "            ..Default::default()",
          "        },",
          "        nest_limit: 10,",
          "    };",
          "    let pattern = \"# a comment line\\n    d\";",
          "    let mut parser = Parser::new(config, pattern);",
          "    parser.bump_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.pos(), 4);",
          "    assert_eq!(parser.char(), Some('d'));",
          "    assert!(!parser.is_done());"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        flags: Flags {",
          "            ignore_whitespace: true,",
          "            ..Default::default()",
          "        },",
          "        nest_limit: 10,",
          "    };",
          "    let pattern = \"# a comment line\\n    d\";",
          "    let mut parser = Parser::new(config, pattern);",
          "    parser.bump_space();",
          "    assert_eq!(parser.pos(), 4);",
          "    assert_eq!(parser.char(), Some('d'));",
          "    assert!(!parser.is_done());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]