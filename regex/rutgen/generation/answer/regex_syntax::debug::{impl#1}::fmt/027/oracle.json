[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Bytes(&[0x0b, 0x0c, 0x00, 0x7f, 0x09, 0x0a, 0x0d]);",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", input));",
          "}"
        ],
        "oracle": [
          "    write!(f, \"\\\"\").unwrap();",
          "    let Some(result) = utf8_decode(bytes);",
          "    let result = Ok(ch);",
          "    let ch = '\\0';",
          "    let ch = '\\x7f';",
          "    let ch = '\\x0b';",
          "    let ch = '\\t';",
          "    let ch = '\\n';",
          "    let ch = '\\r';",
          "    let ch = '\\x0c';",
          "    let ch = '\\x01';",
          "    let ch = '\\x0e';",
          "    write!(f, \"{}\", ch.escape_debug()).unwrap();",
          "    write!(f, \"\\\"\").unwrap();",
          "    Ok(());"
        ],
        "code": [
          "{",
          "    let input = Bytes(&[0x0b, 0x0c, 0x00, 0x7f, 0x09, 0x0a, 0x0d]);",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", input));",
          "    write!(f, \"\\\"\").unwrap();",
          "    let Some(result) = utf8_decode(bytes);",
          "    let result = Ok(ch);",
          "    let ch = '\\0';",
          "    let ch = '\\x7f';",
          "    let ch = '\\x0b';",
          "    let ch = '\\t';",
          "    let ch = '\\n';",
          "    let ch = '\\r';",
          "    let ch = '\\x0c';",
          "    let ch = '\\x01';",
          "    let ch = '\\x0e';",
          "    write!(f, \"{}\", ch.escape_debug()).unwrap();",
          "    write!(f, \"\\\"\").unwrap();",
          "    Ok(());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Bytes(&[0x0b, 0x0c, 0x00, 0x7f]);",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", input));",
          "}"
        ],
        "oracle": [
          "    write!(f, \"\\\"\").is_ok()",
          "    utf8_decode(bytes).is_some()",
          "    utf8_decode(bytes) matches Ok(ch)",
          "    ch == '\\0'",
          "    ch == '\\x7f'",
          "    ch == '\\x0b'",
          "    ch == '\\t'",
          "    ch == '\\n'",
          "    ch == '\\r'",
          "    ch == '\\x0c'",
          "    write!(f, \"{}\", ch.escape_debug()).is_ok()",
          "    write!(f, \"\\\"\").is_ok()",
          "    Ok(())"
        ],
        "code": [
          "{",
          "    let input = Bytes(&[0x0b, 0x0c, 0x00, 0x7f]);",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", input));",
          "    write!(f, \"\\\"\").is_ok()",
          "    utf8_decode(bytes).is_some()",
          "    utf8_decode(bytes) matches Ok(ch)",
          "    ch == '\\0'",
          "    ch == '\\x7f'",
          "    ch == '\\x0b'",
          "    ch == '\\t'",
          "    ch == '\\n'",
          "    ch == '\\r'",
          "    ch == '\\x0c'",
          "    write!(f, \"{}\", ch.escape_debug()).is_ok()",
          "    write!(f, \"\\\"\").is_ok()",
          "    Ok(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Bytes(b\"hello\\x0b\\x0c\\x00\\x7f\\t\\n\\r\");",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", input));",
          "}"
        ],
        "oracle": [
          "    write!(f, \"\\\"\").is_ok();",
          "    utf8_decode(bytes).is_some();",
          "    match utf8_decode(bytes).unwrap() { Ok(ch) => { assert!(true); } };",
          "    ch == '\\0';",
          "    ch == '\\x7f';",
          "    ch == '\\x0b';",
          "    ch == '\\t';",
          "    ch == '\\n';",
          "    ch == '\\r';",
          "    ch == '\\x0c';",
          "    ch < '\\x01' || ch > '\\x08';",
          "    ch < '\\x0e' || ch > '\\x19';",
          "    write!(f, \"{}\", ch.escape_debug()).is_ok();",
          "    utf8_decode(bytes).is_some();",
          "    write!(f, \"\\\"\").is_ok();",
          "    Ok(()) == core::fmt::Result::Ok(());"
        ],
        "code": [
          "{",
          "    let input = Bytes(b\"hello\\x0b\\x0c\\x00\\x7f\\t\\n\\r\");",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", input));",
          "    write!(f, \"\\\"\").is_ok();",
          "    utf8_decode(bytes).is_some();",
          "    match utf8_decode(bytes).unwrap() { Ok(ch) => { assert!(true); } };",
          "    ch == '\\0';",
          "    ch == '\\x7f';",
          "    ch == '\\x0b';",
          "    ch == '\\t';",
          "    ch == '\\n';",
          "    ch == '\\r';",
          "    ch == '\\x0c';",
          "    ch < '\\x01' || ch > '\\x08';",
          "    ch < '\\x0e' || ch > '\\x19';",
          "    write!(f, \"{}\", ch.escape_debug()).is_ok();",
          "    utf8_decode(bytes).is_some();",
          "    write!(f, \"\\\"\").is_ok();",
          "    Ok(()) == core::fmt::Result::Ok(());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Bytes(&[0x0b, 0x0c]);",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", input));",
          "}"
        ],
        "oracle": [
          "    write!(f, \"\\\"\").is_ok();",
          "    utf8_decode(bytes).is_some();",
          "    matches!(result, Ok(ch));",
          "    matches!(ch, '\\0');",
          "    matches!(ch, '\\x7f');",
          "    matches!(ch, '\\x0b');",
          "    matches!(ch, '\\t');",
          "    matches!(ch, '\\n');",
          "    matches!(ch, '\\r');",
          "    matches!(ch, '\\x0c');",
          "    !matches!(ch, '\\x01'..='\\x08');",
          "    !matches!(ch, '\\x0e'..='\\x19');",
          "    write!(f, \"{}\", ch.escape_debug()).is_ok();",
          "    utf8_decode(bytes).is_some();",
          "    write!(f, \"\\\"\").is_ok();",
          "    Ok(());"
        ],
        "code": [
          "{",
          "    let input = Bytes(&[0x0b, 0x0c]);",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", input));",
          "    write!(f, \"\\\"\").is_ok();",
          "    utf8_decode(bytes).is_some();",
          "    matches!(result, Ok(ch));",
          "    matches!(ch, '\\0');",
          "    matches!(ch, '\\x7f');",
          "    matches!(ch, '\\x0b');",
          "    matches!(ch, '\\t');",
          "    matches!(ch, '\\n');",
          "    matches!(ch, '\\r');",
          "    matches!(ch, '\\x0c');",
          "    !matches!(ch, '\\x01'..='\\x08');",
          "    !matches!(ch, '\\x0e'..='\\x19');",
          "    write!(f, \"{}\", ch.escape_debug()).is_ok();",
          "    utf8_decode(bytes).is_some();",
          "    write!(f, \"\\\"\").is_ok();",
          "    Ok(());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Bytes(&[0x00]);",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", input));",
          "}"
        ],
        "oracle": [
          "    write!(f, \"\\\"\").is_ok();",
          "    let result = utf8_decode(bytes).is_some();",
          "    let result_ok = matches!(result, Some(Ok(_)));",
          "    let ch_null = matches!(result, Some(Ok(ch)) if ch == '\\0');",
          "    let ch_ascii_control = matches!(result, Some(Ok(ch)) if ch == '\\x7f' || ch == '\\x0b' || ch == '\\x0c' || ch == '\\t' || ch == '\\n' || ch == '\\r');",
          "    let ch_non_ascii_control = !matches!(result, Some(Ok(ch)) if ch >= '\\x01' && ch <= '\\x08' || ch >= '\\x0e' && ch <= '\\x19');",
          "    write!(f, \"{}\", ch.escape_debug()).is_ok();",
          "    write!(f, \"\\\"\").is_ok();",
          "    assert_eq!(core::fmt::format(format_args!(\"{:?}\", input)), \"\\\"\\\\0\\\"\");"
        ],
        "code": [
          "{",
          "    let input = Bytes(&[0x00]);",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", input));",
          "    write!(f, \"\\\"\").is_ok();",
          "    let result = utf8_decode(bytes).is_some();",
          "    let result_ok = matches!(result, Some(Ok(_)));",
          "    let ch_null = matches!(result, Some(Ok(ch)) if ch == '\\0');",
          "    let ch_ascii_control = matches!(result, Some(Ok(ch)) if ch == '\\x7f' || ch == '\\x0b' || ch == '\\x0c' || ch == '\\t' || ch == '\\n' || ch == '\\r');",
          "    let ch_non_ascii_control = !matches!(result, Some(Ok(ch)) if ch >= '\\x01' && ch <= '\\x08' || ch >= '\\x0e' && ch <= '\\x19');",
          "    write!(f, \"{}\", ch.escape_debug()).is_ok();",
          "    write!(f, \"\\\"\").is_ok();",
          "    assert_eq!(core::fmt::format(format_args!(\"{:?}\", input)), \"\\\"\\\\0\\\"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Bytes(&[0x01, 0x08, 0x7f, 0x0b, 0x0c, 0x0e, 0x10]);",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", input));",
          "}"
        ],
        "oracle": [
          "    write!(f, \"\\\"\").unwrap();",
          "    let result = utf8_decode(&[0x01, 0x08, 0x7f, 0x0b, 0x0c, 0x0e, 0x10]);",
          "    assert!(result.is_some());",
          "    let ch = result.unwrap().unwrap();",
          "    assert!(ch == '\\x01' || ch == '\\x08' || ch == '\\x7f' || ch == '\\x0b' || ch == '\\x0c' || ch == '\\x0e');",
          "    write!(f, \"\\\\x{:02x}\", u32::from(ch)).unwrap();",
          "    write!(f, \"{}\", ch.escape_debug()).unwrap();",
          "    write!(f, \"\\\"\").unwrap();",
          "    assert_eq!(Ok(()), core::fmt::format(format_args!(\"{:?}\", input)));"
        ],
        "code": [
          "{",
          "    let input = Bytes(&[0x01, 0x08, 0x7f, 0x0b, 0x0c, 0x0e, 0x10]);",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", input));",
          "    write!(f, \"\\\"\").unwrap();",
          "    let result = utf8_decode(&[0x01, 0x08, 0x7f, 0x0b, 0x0c, 0x0e, 0x10]);",
          "    assert!(result.is_some());",
          "    let ch = result.unwrap().unwrap();",
          "    assert!(ch == '\\x01' || ch == '\\x08' || ch == '\\x7f' || ch == '\\x0b' || ch == '\\x0c' || ch == '\\x0e');",
          "    write!(f, \"\\\\x{:02x}\", u32::from(ch)).unwrap();",
          "    write!(f, \"{}\", ch.escape_debug()).unwrap();",
          "    write!(f, \"\\\"\").unwrap();",
          "    assert_eq!(Ok(()), core::fmt::format(format_args!(\"{:?}\", input)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]