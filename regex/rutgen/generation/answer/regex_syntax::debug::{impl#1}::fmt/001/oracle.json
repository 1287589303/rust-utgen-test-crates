[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = Bytes(&[]);",
          "    let _ = core::fmt::write(&mut core::fmt::Formatter, |f| bytes.fmt(f));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(core::fmt::write(&mut core::fmt::Formatter, |f| bytes.fmt(f)), Err(core::fmt::Error));",
          "    assert_eq!(core::fmt::write(&mut core::fmt::Formatter, |f| Bytes(&[0]).fmt(f)), Err(core::fmt::Error));",
          "    assert_eq!(core::fmt::write(&mut core::fmt::Formatter, |f| Bytes(&[0xFF]).fmt(f)), Err(core::fmt::Error));",
          "    assert_eq!(core::fmt::write(&mut core::fmt::Formatter, |f| Bytes(&[0x80]).fmt(f)), Err(core::fmt::Error));",
          "    assert_eq!(core::fmt::write(&mut core::fmt::Formatter, |f| Bytes(&[0xC0, 0x80]).fmt(f)), Err(core::fmt::Error));",
          "    assert_eq!(core::fmt::write(&mut core::fmt::Formatter, |f| Bytes(&[0xE0, 0xA0, 0x80]).fmt(f)), Err(core::fmt::Error));",
          "    assert_eq!(core::fmt::write(&mut core::fmt::Formatter, |f| Bytes(&[0xF0, 0x90, 0x80, 0x80]).fmt(f)), Err(core::fmt::Error));"
        ],
        "code": [
          "{",
          "    let bytes = Bytes(&[]);",
          "    let _ = core::fmt::write(&mut core::fmt::Formatter, |f| bytes.fmt(f));",
          "    assert_eq!(core::fmt::write(&mut core::fmt::Formatter, |f| bytes.fmt(f)), Err(core::fmt::Error));",
          "    assert_eq!(core::fmt::write(&mut core::fmt::Formatter, |f| Bytes(&[0]).fmt(f)), Err(core::fmt::Error));",
          "    assert_eq!(core::fmt::write(&mut core::fmt::Formatter, |f| Bytes(&[0xFF]).fmt(f)), Err(core::fmt::Error));",
          "    assert_eq!(core::fmt::write(&mut core::fmt::Formatter, |f| Bytes(&[0x80]).fmt(f)), Err(core::fmt::Error));",
          "    assert_eq!(core::fmt::write(&mut core::fmt::Formatter, |f| Bytes(&[0xC0, 0x80]).fmt(f)), Err(core::fmt::Error));",
          "    assert_eq!(core::fmt::write(&mut core::fmt::Formatter, |f| Bytes(&[0xE0, 0xA0, 0x80]).fmt(f)), Err(core::fmt::Error));",
          "    assert_eq!(core::fmt::write(&mut core::fmt::Formatter, |f| Bytes(&[0xF0, 0x90, 0x80, 0x80]).fmt(f)), Err(core::fmt::Error));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = Bytes(&[0x80]);",
          "    let _ = core::fmt::write(&mut core::fmt::Formatter, |f| bytes.fmt(f));",
          "}"
        ],
        "oracle": [
          "    write!(f, \"\\\"\").is_err();",
          "    let bytes = Bytes(&[0x80]);",
          "    core::fmt::write(&mut core::fmt::Formatter, |f| bytes.fmt(f)).is_err();",
          "    assert_eq!(core::fmt::write(&mut core::fmt::Formatter, |f| bytes.fmt(f)).is_err(), true);",
          "    assert!(matches!(utf8_decode(&[0x80]), Some(Err(0x80))));"
        ],
        "code": [
          "{",
          "    let bytes = Bytes(&[0x80]);",
          "    let _ = core::fmt::write(&mut core::fmt::Formatter, |f| bytes.fmt(f));",
          "    write!(f, \"\\\"\").is_err();",
          "    let bytes = Bytes(&[0x80]);",
          "    core::fmt::write(&mut core::fmt::Formatter, |f| bytes.fmt(f)).is_err();",
          "    assert_eq!(core::fmt::write(&mut core::fmt::Formatter, |f| bytes.fmt(f)).is_err(), true);",
          "    assert!(matches!(utf8_decode(&[0x80]), Some(Err(0x80))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = Bytes(&[0x80, 0x81]);",
          "    let _ = core::fmt::write(&mut core::fmt::Formatter, |f| bytes.fmt(f));",
          "}"
        ],
        "oracle": [
          "    write!(f, \"\\\"\").is_err();",
          "    write!(f, \"\\\"\").is_none();",
          "    let result = utf8_decode(&bytes.0);",
          "    result.is_some();",
          "    result == Some(Err(0x80));",
          "    result == Some(Err(0x81));",
          "    let ch = match result {",
          "    Some(Ok(ch)) => ch,",
          "    Some(Err(byte)) => byte,",
          "    };",
          "    write!(f, r\"\\x{:02x}\", ch).is_ok();",
          "    bytes.0.len() == 2;",
          "    bytes.0[0] == 0x80;",
          "    bytes.0[1] == 0x81;"
        ],
        "code": [
          "{",
          "    let bytes = Bytes(&[0x80, 0x81]);",
          "    let _ = core::fmt::write(&mut core::fmt::Formatter, |f| bytes.fmt(f));",
          "    write!(f, \"\\\"\").is_err();",
          "    write!(f, \"\\\"\").is_none();",
          "    let result = utf8_decode(&bytes.0);",
          "    result.is_some();",
          "    result == Some(Err(0x80));",
          "    result == Some(Err(0x81));",
          "    let ch = match result {",
          "    Some(Ok(ch)) => ch,",
          "    Some(Err(byte)) => byte,",
          "    };",
          "    write!(f, r\"\\x{:02x}\", ch).is_ok();",
          "    bytes.0.len() == 2;",
          "    bytes.0[0] == 0x80;",
          "    bytes.0[1] == 0x81;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = Bytes(&[0xED, 0xA0, 0x80]); // invalid UTF-8",
          "    let _ = core::fmt::write(&mut core::fmt::Formatter, |f| bytes.fmt(f));",
          "}"
        ],
        "oracle": [
          "    write!(f, \"\\\"\").is_err()",
          "    write!(f, \"\\\"\").is_none()",
          "    let bytes = Bytes(&[0xED, 0xA0, 0x80]);",
          "    core::fmt::write(&mut core::fmt::Formatter, |f| bytes.fmt(f)).is_err()",
          "    core::fmt::write(&mut core::fmt::Formatter, |f| bytes.fmt(f)).is_none()"
        ],
        "code": [
          "{",
          "    let bytes = Bytes(&[0xED, 0xA0, 0x80]); // invalid UTF-8",
          "    let _ = core::fmt::write(&mut core::fmt::Formatter, |f| bytes.fmt(f));",
          "    write!(f, \"\\\"\").is_err()",
          "    write!(f, \"\\\"\").is_none()",
          "    let bytes = Bytes(&[0xED, 0xA0, 0x80]);",
          "    core::fmt::write(&mut core::fmt::Formatter, |f| bytes.fmt(f)).is_err()",
          "    core::fmt::write(&mut core::fmt::Formatter, |f| bytes.fmt(f)).is_none()",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = Bytes(&[0xF8, 0x88, 0x80, 0x80]); // invalid UTF-8",
          "    let _ = core::fmt::write(&mut core::fmt::Formatter, |f| bytes.fmt(f));",
          "}"
        ],
        "oracle": [
          "    write!(f, \"\\\"\").is_err();",
          "    write!(f, \"\\\"\").is_none();",
          "    let result = core::fmt::write(&mut core::fmt::Formatter, |f| bytes.fmt(f));",
          "    result.is_err();",
          "    result.is_none();",
          "    assert_eq!(core::fmt::write(&mut core::fmt::Formatter, |f| bytes.fmt(f)).unwrap_err().to_string(), \"\");"
        ],
        "code": [
          "{",
          "    let bytes = Bytes(&[0xF8, 0x88, 0x80, 0x80]); // invalid UTF-8",
          "    let _ = core::fmt::write(&mut core::fmt::Formatter, |f| bytes.fmt(f));",
          "    write!(f, \"\\\"\").is_err();",
          "    write!(f, \"\\\"\").is_none();",
          "    let result = core::fmt::write(&mut core::fmt::Formatter, |f| bytes.fmt(f));",
          "    result.is_err();",
          "    result.is_none();",
          "    assert_eq!(core::fmt::write(&mut core::fmt::Formatter, |f| bytes.fmt(f)).unwrap_err().to_string(), \"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = Bytes(&[0x01, 0x00]);",
          "    let _ = core::fmt::write(&mut core::fmt::Formatter, |f| bytes.fmt(f));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(core::fmt::write(&mut core::fmt::Formatter, |f| bytes.fmt(f)), Err(core::fmt::Error));",
          "    assert_eq!(core::fmt::write(&mut core::fmt::Formatter, |f| bytes.fmt(f)), None);"
        ],
        "code": [
          "{",
          "    let bytes = Bytes(&[0x01, 0x00]);",
          "    let _ = core::fmt::write(&mut core::fmt::Formatter, |f| bytes.fmt(f));",
          "    assert_eq!(core::fmt::write(&mut core::fmt::Formatter, |f| bytes.fmt(f)), Err(core::fmt::Error));",
          "    assert_eq!(core::fmt::write(&mut core::fmt::Formatter, |f| bytes.fmt(f)), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]