[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = TranslatorBuilder::new();",
          "    let result = builder.swap_greed(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.flags.swap_greed, None);",
          "    assert_eq!(result.flags.swap_greed.is_some(), false);",
          "    assert!(result.flags.swap_greed == None);",
          "    assert!(result as *const _ == &builder as *const _);",
          "    assert!(result == &builder);"
        ],
        "code": [
          "{",
          "    let mut builder = TranslatorBuilder::new();",
          "    let result = builder.swap_greed(false);",
          "    assert_eq!(result.flags.swap_greed, None);",
          "    assert_eq!(result.flags.swap_greed.is_some(), false);",
          "    assert!(result.flags.swap_greed == None);",
          "    assert!(result as *const _ == &builder as *const _);",
          "    assert!(result == &builder);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = TranslatorBuilder::new()",
          "        .utf8(true)",
          "        .line_terminator(b'\\n')",
          "        .case_insensitive(true);",
          "    let result = builder.swap_greed(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.flags.swap_greed, None);",
          "    assert_eq!(result.utf8, true);",
          "    assert_eq!(result.line_terminator, b'\\n');",
          "    assert_eq!(result.flags.case_insensitive, Some(true));"
        ],
        "code": [
          "{",
          "    let mut builder = TranslatorBuilder::new()",
          "        .utf8(true)",
          "        .line_terminator(b'\\n')",
          "        .case_insensitive(true);",
          "    let result = builder.swap_greed(false);",
          "    assert_eq!(result.flags.swap_greed, None);",
          "    assert_eq!(result.utf8, true);",
          "    assert_eq!(result.line_terminator, b'\\n');",
          "    assert_eq!(result.flags.case_insensitive, Some(true));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = TranslatorBuilder::new()",
          "        .multi_line(true)",
          "        .dot_matches_new_line(false)",
          "        .unicode(true);",
          "    let result = builder.swap_greed(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.flags.swap_greed, None);"
        ],
        "code": [
          "{",
          "    let mut builder = TranslatorBuilder::new()",
          "        .multi_line(true)",
          "        .dot_matches_new_line(false)",
          "        .unicode(true);",
          "    let result = builder.swap_greed(false);",
          "    assert_eq!(result.flags.swap_greed, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]