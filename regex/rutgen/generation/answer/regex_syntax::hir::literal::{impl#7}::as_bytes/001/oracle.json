[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal = Literal::exact(Vec::<u8>::new());",
          "    let bytes = literal.as_bytes();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes, &Vec::<u8>::new());",
          "    assert_eq!(bytes.len(), 0);",
          "    assert!(bytes.is_empty());",
          "    assert!(literal.is_exact());"
        ],
        "code": [
          "{",
          "    let literal = Literal::exact(Vec::<u8>::new());",
          "    let bytes = literal.as_bytes();",
          "    assert_eq!(bytes, &Vec::<u8>::new());",
          "    assert_eq!(bytes.len(), 0);",
          "    assert!(bytes.is_empty());",
          "    assert!(literal.is_exact());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal = Literal::exact(vec![42]);",
          "    let bytes = literal.as_bytes();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes, vec![42].as_slice());",
          "    assert!(bytes.len() == 1);",
          "    assert!(!literal.is_empty());",
          "    assert!(literal.is_exact());",
          "    assert_eq!(bytes, literal.bytes.as_slice());"
        ],
        "code": [
          "{",
          "    let literal = Literal::exact(vec![42]);",
          "    let bytes = literal.as_bytes();",
          "    assert_eq!(bytes, vec![42].as_slice());",
          "    assert!(bytes.len() == 1);",
          "    assert!(!literal.is_empty());",
          "    assert!(literal.is_exact());",
          "    assert_eq!(bytes, literal.bytes.as_slice());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal = Literal::exact(vec![1, 2, 3, 4, 5]);",
          "    let bytes = literal.as_bytes();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes, vec![1, 2, 3, 4, 5].as_slice());"
        ],
        "code": [
          "{",
          "    let literal = Literal::exact(vec![1, 2, 3, 4, 5]);",
          "    let bytes = literal.as_bytes();",
          "    assert_eq!(bytes, vec![1, 2, 3, 4, 5].as_slice());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal_zeros = Literal::exact(vec![0]);",
          "    let bytes_zeros = literal_zeros.as_bytes();",
          "    ",
          "    let literal_255s = Literal::exact(vec![255]);",
          "    let bytes_255s = literal_255s.as_bytes();",
          "    ",
          "    let literal_boundaries = Literal::exact(vec![0, 127, 255]);",
          "    let bytes_boundaries = literal_boundaries.as_bytes();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_zeros, &vec![0][..]);",
          "    assert_eq!(bytes_255s, &vec![255][..]);",
          "    assert_eq!(bytes_boundaries, &vec![0, 127, 255][..]);"
        ],
        "code": [
          "{",
          "    let literal_zeros = Literal::exact(vec![0]);",
          "    let bytes_zeros = literal_zeros.as_bytes();",
          "    ",
          "    let literal_255s = Literal::exact(vec![255]);",
          "    let bytes_255s = literal_255s.as_bytes();",
          "    ",
          "    let literal_boundaries = Literal::exact(vec![0, 127, 255]);",
          "    let bytes_boundaries = literal_boundaries.as_bytes();",
          "    assert_eq!(bytes_zeros, &vec![0][..]);",
          "    assert_eq!(bytes_255s, &vec![255][..]);",
          "    assert_eq!(bytes_boundaries, &vec![0, 127, 255][..]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]