[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[];",
          "    let what: &'static str = \"test\";",
          "    let result = try_read_u32(slice, what);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().0, \"buffer too small for test\");"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[];",
          "    let what: &'static str = \"test\";",
          "    let result = try_read_u32(slice, what);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().0, \"buffer too small for test\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[0];",
          "    let what: &'static str = \"test\";",
          "    let result = try_read_u32(slice, what);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_err(), true);",
          "    assert!(result.err().unwrap().0 == \"buffer_too_small\");",
          "    assert_eq!(result.err().unwrap().1, what);"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[0];",
          "    let what: &'static str = \"test\";",
          "    let result = try_read_u32(slice, what);",
          "    assert_eq!(result.is_err(), true);",
          "    assert!(result.err().unwrap().0 == \"buffer_too_small\");",
          "    assert_eq!(result.err().unwrap().1, what);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[0, 1];",
          "    let what: &'static str = \"test\";",
          "    let result = try_read_u32(slice, what);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().0, \"buffer too small for test\");"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[0, 1];",
          "    let what: &'static str = \"test\";",
          "    let result = try_read_u32(slice, what);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().0, \"buffer too small for test\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[0, 1, 2];",
          "    let what: &'static str = \"test\";",
          "    let result = try_read_u32(slice, what);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().0, DeserializeErrorKind::BufferTooSmall(\"test\"));"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[0, 1, 2];",
          "    let what: &'static str = \"test\";",
          "    let result = try_read_u32(slice, what);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().0, DeserializeErrorKind::BufferTooSmall(\"test\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]