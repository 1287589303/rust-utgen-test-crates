[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = PikeVM::never_match().unwrap();",
          "    let _ = re.pattern_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(re.pattern_len(), 0);",
          "    let re = PikeVM::always_match().unwrap();",
          "    assert_eq!(re.pattern_len(), 1);",
          "    let re = PikeVM::new_many(&[\"[0-9]+\", \"[a-z]+\", \"[A-Z]+\"]).unwrap();",
          "    assert_eq!(re.pattern_len(), 3);"
        ],
        "code": [
          "{",
          "    let re = PikeVM::never_match().unwrap();",
          "    let _ = re.pattern_len();",
          "    assert_eq!(re.pattern_len(), 0);",
          "    let re = PikeVM::always_match().unwrap();",
          "    assert_eq!(re.pattern_len(), 1);",
          "    let re = PikeVM::new_many(&[\"[0-9]+\", \"[a-z]+\", \"[A-Z]+\"]).unwrap();",
          "    assert_eq!(re.pattern_len(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = PikeVM::always_match().unwrap();",
          "    let _ = re.pattern_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(re.pattern_len(), 1);",
          "    let re = PikeVM::never_match().unwrap();",
          "    assert_eq!(re.pattern_len(), 0);",
          "    let re = PikeVM::new_many(&[\"[0-9]+\", \"[a-z]+\", \"[A-Z]+\"]).unwrap();",
          "    assert_eq!(re.pattern_len(), 3);"
        ],
        "code": [
          "{",
          "    let re = PikeVM::always_match().unwrap();",
          "    let _ = re.pattern_len();",
          "    assert_eq!(re.pattern_len(), 1);",
          "    let re = PikeVM::never_match().unwrap();",
          "    assert_eq!(re.pattern_len(), 0);",
          "    let re = PikeVM::new_many(&[\"[0-9]+\", \"[a-z]+\", \"[A-Z]+\"]).unwrap();",
          "    assert_eq!(re.pattern_len(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = PikeVM::new_many(&[\"[0-9]+\", \"[a-z]+\", \"[A-Z]+\"]).unwrap();",
          "    let _ = re.pattern_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(re.pattern_len(), 3);",
          "    let re = PikeVM::never_match().unwrap();",
          "    assert_eq!(re.pattern_len(), 0);",
          "    let re = PikeVM::always_match().unwrap();",
          "    assert_eq!(re.pattern_len(), 1);"
        ],
        "code": [
          "{",
          "    let re = PikeVM::new_many(&[\"[0-9]+\", \"[a-z]+\", \"[A-Z]+\"]).unwrap();",
          "    let _ = re.pattern_len();",
          "    assert_eq!(re.pattern_len(), 3);",
          "    let re = PikeVM::never_match().unwrap();",
          "    assert_eq!(re.pattern_len(), 0);",
          "    let re = PikeVM::always_match().unwrap();",
          "    assert_eq!(re.pattern_len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]