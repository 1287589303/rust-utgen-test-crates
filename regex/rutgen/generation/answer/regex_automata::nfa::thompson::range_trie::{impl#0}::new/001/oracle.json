[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let trie: RangeTrie = RangeTrie::new();",
          "}"
        ],
        "oracle": [
          "    let trie: RangeTrie = RangeTrie::new();",
          "    assert!(!trie.states.is_empty());",
          "    assert!(trie.free.is_empty());",
          "    assert!(trie.iter_stack.borrow().is_empty());",
          "    assert!(trie.iter_ranges.borrow().is_empty());",
          "    assert!(trie.dupe_stack.is_empty());",
          "    assert!(trie.insert_stack.is_empty());",
          "    assert_eq!(trie.state(FINAL).id, FINAL);",
          "    assert_eq!(trie.state(ROOT).id, ROOT);"
        ],
        "code": [
          "{",
          "    let trie: RangeTrie = RangeTrie::new();",
          "    let trie: RangeTrie = RangeTrie::new();",
          "    assert!(!trie.states.is_empty());",
          "    assert!(trie.free.is_empty());",
          "    assert!(trie.iter_stack.borrow().is_empty());",
          "    assert!(trie.iter_ranges.borrow().is_empty());",
          "    assert!(trie.dupe_stack.is_empty());",
          "    assert!(trie.insert_stack.is_empty());",
          "    assert_eq!(trie.state(FINAL).id, FINAL);",
          "    assert_eq!(trie.state(ROOT).id, ROOT);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let trie: RangeTrie = RangeTrie::new();",
          "    assert!(trie.states.is_empty());",
          "    assert!(trie.free.is_empty());",
          "    assert!(trie.iter_stack.borrow().is_empty());",
          "    assert!(trie.iter_ranges.borrow().is_empty());",
          "    assert!(trie.dupe_stack.is_empty());",
          "    assert!(trie.insert_stack.is_empty());",
          "}"
        ],
        "oracle": [
          "    let trie: RangeTrie = RangeTrie::new();",
          "    assert!(trie.states.is_empty());",
          "    assert!(trie.free.is_empty());",
          "    assert!(trie.iter_stack.borrow().is_empty());",
          "    assert!(trie.iter_ranges.borrow().is_empty());",
          "    assert!(trie.dupe_stack.is_empty());",
          "    assert!(trie.insert_stack.is_empty());"
        ],
        "code": [
          "{",
          "    let trie: RangeTrie = RangeTrie::new();",
          "    assert!(trie.states.is_empty());",
          "    assert!(trie.free.is_empty());",
          "    assert!(trie.iter_stack.borrow().is_empty());",
          "    assert!(trie.iter_ranges.borrow().is_empty());",
          "    assert!(trie.dupe_stack.is_empty());",
          "    assert!(trie.insert_stack.is_empty());",
          "    let trie: RangeTrie = RangeTrie::new();",
          "    assert!(trie.states.is_empty());",
          "    assert!(trie.free.is_empty());",
          "    assert!(trie.iter_stack.borrow().is_empty());",
          "    assert!(trie.iter_ranges.borrow().is_empty());",
          "    assert!(trie.dupe_stack.is_empty());",
          "    assert!(trie.insert_stack.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]