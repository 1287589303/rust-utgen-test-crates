[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut matches = StateBuilderMatches(vec![1, 2, 3]);",
          "    let repr_vec = matches.repr_vec();",
          "}"
        ],
        "oracle": [
          "    let mut matches = StateBuilderMatches(vec![1, 2, 3]);",
          "    let repr_vec = matches.repr_vec();",
          "    assert_eq!(std::ptr::addr_of!(repr_vec.0), std::ptr::addr_of!(matches.0));",
          "    assert_eq!(repr_vec.0.len(), 3);",
          "    assert_eq!(repr_vec.0[0], 1);",
          "    assert_eq!(repr_vec.0[1], 2);",
          "    assert_eq!(repr_vec.0[2], 3);"
        ],
        "code": [
          "{",
          "    let mut matches = StateBuilderMatches(vec![1, 2, 3]);",
          "    let repr_vec = matches.repr_vec();",
          "    let mut matches = StateBuilderMatches(vec![1, 2, 3]);",
          "    let repr_vec = matches.repr_vec();",
          "    assert_eq!(std::ptr::addr_of!(repr_vec.0), std::ptr::addr_of!(matches.0));",
          "    assert_eq!(repr_vec.0.len(), 3);",
          "    assert_eq!(repr_vec.0[0], 1);",
          "    assert_eq!(repr_vec.0[1], 2);",
          "    assert_eq!(repr_vec.0[2], 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut matches = StateBuilderMatches(vec![5]);",
          "    let repr_vec = matches.repr_vec();",
          "}"
        ],
        "oracle": [
          "    assert!(matches.0.len() == 1);",
          "    assert_eq!(matches.0[0], 5);",
          "    assert!(std::mem::size_of::<ReprVec>() == std::mem::size_of::<&mut Vec<u8>>());",
          "    assert!(std::ptr::eq(repr_vec.0, &mut matches.0));"
        ],
        "code": [
          "{",
          "    let mut matches = StateBuilderMatches(vec![5]);",
          "    let repr_vec = matches.repr_vec();",
          "    assert!(matches.0.len() == 1);",
          "    assert_eq!(matches.0[0], 5);",
          "    assert!(std::mem::size_of::<ReprVec>() == std::mem::size_of::<&mut Vec<u8>>());",
          "    assert!(std::ptr::eq(repr_vec.0, &mut matches.0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut matches = StateBuilderMatches(vec![0; 1024]);",
          "    let repr_vec = matches.repr_vec();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(matches.0.len(), 1024);",
          "    assert!(matches.repr_vec().0.is_empty() == false);",
          "    assert!(matches.repr_vec().0 as *const Vec<u8> == &mut matches.0 as *const Vec<u8>);",
          "    assert!(mem::size_of_val(&matches.repr_vec().0) == mem::size_of::<Vec<u8>>());"
        ],
        "code": [
          "{",
          "    let mut matches = StateBuilderMatches(vec![0; 1024]);",
          "    let repr_vec = matches.repr_vec();",
          "    assert_eq!(matches.0.len(), 1024);",
          "    assert!(matches.repr_vec().0.is_empty() == false);",
          "    assert!(matches.repr_vec().0 as *const Vec<u8> == &mut matches.0 as *const Vec<u8>);",
          "    assert!(mem::size_of_val(&matches.repr_vec().0) == mem::size_of::<Vec<u8>>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut matches = StateBuilderMatches(vec![10, 20, 30, 40, 50]);",
          "    let repr_vec = matches.repr_vec();",
          "}"
        ],
        "oracle": [
          "    let mut matches = StateBuilderMatches(vec![10, 20, 30, 40, 50]);",
          "    let repr_vec = matches.repr_vec();",
          "    assert_eq!(repr_vec.0.len(), 5);",
          "    assert_eq!(repr_vec.0[0], 10);",
          "    assert_eq!(repr_vec.0[1], 20);",
          "    assert_eq!(repr_vec.0[2], 30);",
          "    assert_eq!(repr_vec.0[3], 40);",
          "    assert_eq!(repr_vec.0[4], 50);"
        ],
        "code": [
          "{",
          "    let mut matches = StateBuilderMatches(vec![10, 20, 30, 40, 50]);",
          "    let repr_vec = matches.repr_vec();",
          "    let mut matches = StateBuilderMatches(vec![10, 20, 30, 40, 50]);",
          "    let repr_vec = matches.repr_vec();",
          "    assert_eq!(repr_vec.0.len(), 5);",
          "    assert_eq!(repr_vec.0[0], 10);",
          "    assert_eq!(repr_vec.0[1], 20);",
          "    assert_eq!(repr_vec.0[2], 30);",
          "    assert_eq!(repr_vec.0[3], 40);",
          "    assert_eq!(repr_vec.0[4], 50);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]