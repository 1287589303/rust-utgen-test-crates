[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = [0u8; 0];",
          "    let result: Result<usize, SerializeError> = write_endianness_check::<NE>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    let mut dst = [0u8; 0];",
          "    let result: Result<usize, SerializeError> = write_endianness_check::<NE>(&mut dst);",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"endianness check\")));"
        ],
        "code": [
          "{",
          "    let mut dst = [0u8; 0];",
          "    let result: Result<usize, SerializeError> = write_endianness_check::<NE>(&mut dst);",
          "    let mut dst = [0u8; 0];",
          "    let result: Result<usize, SerializeError> = write_endianness_check::<NE>(&mut dst);",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"endianness check\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = [0u8; 1];",
          "    let result: Result<usize, SerializeError> = write_endianness_check::<NE>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    let expected = Err(SerializeError::buffer_too_small(\"endianness check\"));",
          "    assert_eq!(result, expected);",
          "    assert!(match result { Err(SerializeError { what, .. }) if what == \"endianness check\" => true, _ => false });",
          "    assert!(result.is_err());",
          "    assert!(result.as_ref().err().unwrap().what == \"endianness check\");"
        ],
        "code": [
          "{",
          "    let mut dst = [0u8; 1];",
          "    let result: Result<usize, SerializeError> = write_endianness_check::<NE>(&mut dst);",
          "    let expected = Err(SerializeError::buffer_too_small(\"endianness check\"));",
          "    assert_eq!(result, expected);",
          "    assert!(match result { Err(SerializeError { what, .. }) if what == \"endianness check\" => true, _ => false });",
          "    assert!(result.is_err());",
          "    assert!(result.as_ref().err().unwrap().what == \"endianness check\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = [0u8; 2];",
          "    let result: Result<usize, SerializeError> = write_endianness_check::<NE>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"endianness check\")));"
        ],
        "code": [
          "{",
          "    let mut dst = [0u8; 2];",
          "    let result: Result<usize, SerializeError> = write_endianness_check::<NE>(&mut dst);",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"endianness check\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = [0u8; 3];",
          "    let result: Result<usize, SerializeError> = write_endianness_check::<NE>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), SerializeError::buffer_too_small(\"endianness check\"));"
        ],
        "code": [
          "{",
          "    let mut dst = [0u8; 3];",
          "    let result: Result<usize, SerializeError> = write_endianness_check::<NE>(&mut dst);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), SerializeError::buffer_too_small(\"endianness check\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]