[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut state: usize = 12;",
          "    let mut cp: u32 = 0;",
          "    let b: u8 = 0;",
          "    decode_step(&mut state, &mut cp, b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state, 12);",
          "    assert_eq!(cp, 0);"
        ],
        "code": [
          "{",
          "    let mut state: usize = 12;",
          "    let mut cp: u32 = 0;",
          "    let b: u8 = 0;",
          "    decode_step(&mut state, &mut cp, b);",
          "    assert_eq!(state, 12);",
          "    assert_eq!(cp, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut state: usize = 12;",
          "    let mut cp: u32 = 0;",
          "    let b: u8 = 128;",
          "    decode_step(&mut state, &mut cp, b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state, 0);",
          "    assert_eq!(cp, 1 << 6);"
        ],
        "code": [
          "{",
          "    let mut state: usize = 12;",
          "    let mut cp: u32 = 0;",
          "    let b: u8 = 128;",
          "    decode_step(&mut state, &mut cp, b);",
          "    assert_eq!(state, 0);",
          "    assert_eq!(cp, 1 << 6);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut state: usize = 12;",
          "    let mut cp: u32 = 0;",
          "    let b: u8 = 255;",
          "    decode_step(&mut state, &mut cp, b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state, 0);",
          "    assert_eq!(cp, 0);"
        ],
        "code": [
          "{",
          "    let mut state: usize = 12;",
          "    let mut cp: u32 = 0;",
          "    let b: u8 = 255;",
          "    decode_step(&mut state, &mut cp, b);",
          "    assert_eq!(state, 0);",
          "    assert_eq!(cp, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]