[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.add(0);",
          "    byte_set.remove(0);",
          "}"
        ],
        "oracle": [
          "    assert!(byte_set.is_empty());",
          "    assert!(!byte_set.contains(0));",
          "    assert_eq!(byte_set.bits.0[0], 0);",
          "    ",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.add(0);",
          "    byte_set.add(1);",
          "    byte_set.remove(1);",
          "    assert!(byte_set.contains(0));",
          "    assert!(!byte_set.contains(1));",
          "    ",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.remove(10); // No-op",
          "    assert!(byte_set.is_empty());"
        ],
        "code": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.add(0);",
          "    byte_set.remove(0);",
          "    assert!(byte_set.is_empty());",
          "    assert!(!byte_set.contains(0));",
          "    assert_eq!(byte_set.bits.0[0], 0);",
          "    ",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.add(0);",
          "    byte_set.add(1);",
          "    byte_set.remove(1);",
          "    assert!(byte_set.contains(0));",
          "    assert!(!byte_set.contains(1));",
          "    ",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.remove(10); // No-op",
          "    assert!(byte_set.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.add(127);",
          "    byte_set.remove(127);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_set.contains(127), false);",
          "    assert_eq!(byte_set.is_empty(), true);",
          "    assert_eq!(byte_set.bits.0[0], 0);",
          "    assert_eq!(byte_set.bits.0[1], 0);"
        ],
        "code": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.add(127);",
          "    byte_set.remove(127);",
          "    assert_eq!(byte_set.contains(127), false);",
          "    assert_eq!(byte_set.is_empty(), true);",
          "    assert_eq!(byte_set.bits.0[0], 0);",
          "    assert_eq!(byte_set.bits.0[1], 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.add(128);",
          "    byte_set.remove(128);",
          "}"
        ],
        "oracle": [
          "    byte_set.contains(128) == false",
          "    byte_set.is_empty() == false",
          "    byte_set.remove(64) // no-op",
          "    byte_set.contains(64) == false",
          "    byte_set.remove(0)",
          "    byte_set.contains(0) == false",
          "    byte_set.remove(255) // no-op",
          "    byte_set.contains(255) == false",
          "    byte_set.remove(127)",
          "    byte_set.contains(127) == false",
          "    byte_set.remove(128); // ensure remove is a no-op when the byte was already removed",
          "    byte_set.is_empty() == false"
        ],
        "code": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.add(128);",
          "    byte_set.remove(128);",
          "    byte_set.contains(128) == false",
          "    byte_set.is_empty() == false",
          "    byte_set.remove(64) // no-op",
          "    byte_set.contains(64) == false",
          "    byte_set.remove(0)",
          "    byte_set.contains(0) == false",
          "    byte_set.remove(255) // no-op",
          "    byte_set.contains(255) == false",
          "    byte_set.remove(127)",
          "    byte_set.contains(127) == false",
          "    byte_set.remove(128); // ensure remove is a no-op when the byte was already removed",
          "    byte_set.is_empty() == false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.add(255);",
          "    byte_set.remove(255);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_set.contains(255), false);",
          "    assert!(byte_set.is_empty());",
          "    assert_eq!(byte_set.bits.0[1], 0);",
          "    assert_eq!(byte_set.bits.0[0], 0);"
        ],
        "code": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.add(255);",
          "    byte_set.remove(255);",
          "    assert_eq!(byte_set.contains(255), false);",
          "    assert!(byte_set.is_empty());",
          "    assert_eq!(byte_set.bits.0[1], 0);",
          "    assert_eq!(byte_set.bits.0[0], 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.remove(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_set.is_empty(), true);",
          "    byte_set.add(0);",
          "    assert_eq!(byte_set.is_empty(), false);",
          "    byte_set.remove(256);",
          "    assert_eq!(byte_set.contains(0), true);",
          "    byte_set.remove(0);",
          "    assert_eq!(byte_set.contains(0), false);"
        ],
        "code": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.remove(0);",
          "    assert_eq!(byte_set.is_empty(), true);",
          "    byte_set.add(0);",
          "    assert_eq!(byte_set.is_empty(), false);",
          "    byte_set.remove(256);",
          "    assert_eq!(byte_set.contains(0), true);",
          "    byte_set.remove(0);",
          "    assert_eq!(byte_set.contains(0), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.remove(127);",
          "}"
        ],
        "oracle": [
          "    byte_set.is_empty() == true",
          "    byte_set.contains(127) == false",
          "    byte_set.contains_range(0, 127) == false",
          "    byte_set.contains_range(128, 255) == false"
        ],
        "code": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.remove(127);",
          "    byte_set.is_empty() == true",
          "    byte_set.contains(127) == false",
          "    byte_set.contains_range(0, 127) == false",
          "    byte_set.contains_range(128, 255) == false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.remove(128);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_set.bits.0[1], 0);",
          "    assert_eq!(byte_set.bits.0[0], 0);",
          "    assert!(byte_set.is_empty());",
          "    byte_set.add(128);",
          "    assert!(!byte_set.is_empty());",
          "    byte_set.remove(128);",
          "    assert!(byte_set.is_empty());",
          "    assert!(byte_set.contains(128) == false);",
          "    assert!(byte_set.contains_range(128, 128) == false);"
        ],
        "code": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.remove(128);",
          "    assert_eq!(byte_set.bits.0[1], 0);",
          "    assert_eq!(byte_set.bits.0[0], 0);",
          "    assert!(byte_set.is_empty());",
          "    byte_set.add(128);",
          "    assert!(!byte_set.is_empty());",
          "    byte_set.remove(128);",
          "    assert!(byte_set.is_empty());",
          "    assert!(byte_set.contains(128) == false);",
          "    assert!(byte_set.contains_range(128, 128) == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.remove(255);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_set.is_empty(), true);",
          "    assert_eq!(byte_set.contains(255), false);",
          "    assert_eq!(byte_set.contains_range(0, 255), false);"
        ],
        "code": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.remove(255);",
          "    assert_eq!(byte_set.is_empty(), true);",
          "    assert_eq!(byte_set.contains(255), false);",
          "    assert_eq!(byte_set.contains_range(0, 255), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]