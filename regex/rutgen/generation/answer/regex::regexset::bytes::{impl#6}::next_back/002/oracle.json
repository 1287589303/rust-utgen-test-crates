[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let patset = PatternSet::new(vec![0.into()]).unwrap();",
          "    let it = (0..1);",
          "    let mut iter = SetMatchesIntoIter { patset, it };",
          "    let result = iter.next_back();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(0));"
        ],
        "code": [
          "{",
          "    let patset = PatternSet::new(vec![0.into()]).unwrap();",
          "    let it = (0..1);",
          "    let mut iter = SetMatchesIntoIter { patset, it };",
          "    let result = iter.next_back();",
          "    assert_eq!(result, Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let patset = PatternSet::new(vec![1.into(), 2.into(), 3.into()]).unwrap();",
          "    let it = (0..4);",
          "    let mut iter = SetMatchesIntoIter { patset, it };",
          "    let result = iter.next_back();",
          "}"
        ],
        "oracle": [
          "    let patset = PatternSet::new(vec![1.into(), 2.into(), 3.into()]).unwrap();",
          "    let it = (0..4);",
          "    let mut iter = SetMatchesIntoIter { patset, it };",
          "    let result = iter.next_back();",
          "    assert_eq!(result, Some(3));"
        ],
        "code": [
          "{",
          "    let patset = PatternSet::new(vec![1.into(), 2.into(), 3.into()]).unwrap();",
          "    let it = (0..4);",
          "    let mut iter = SetMatchesIntoIter { patset, it };",
          "    let result = iter.next_back();",
          "    let patset = PatternSet::new(vec![1.into(), 2.into(), 3.into()]).unwrap();",
          "    let it = (0..4);",
          "    let mut iter = SetMatchesIntoIter { patset, it };",
          "    let result = iter.next_back();",
          "    assert_eq!(result, Some(3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let patset = PatternSet::new(vec![0.into(), 4.into()]).unwrap();",
          "    let it = (0..5);",
          "    let mut iter = SetMatchesIntoIter { patset, it };",
          "    let result = iter.next_back();",
          "}"
        ],
        "oracle": [
          "    let patset = PatternSet::new(vec![0.into(), 4.into()]).unwrap();",
          "    let it = (0..5);",
          "    let mut iter = SetMatchesIntoIter { patset, it };",
          "    let result = iter.next_back();",
          "    assert_eq!(result, Some(4));",
          "    assert_eq!(iter.it.start, 0);",
          "    assert_eq!(iter.it.end, 5);",
          "    assert!(iter.patset.contains(PatternID::new_unchecked(4)));"
        ],
        "code": [
          "{",
          "    let patset = PatternSet::new(vec![0.into(), 4.into()]).unwrap();",
          "    let it = (0..5);",
          "    let mut iter = SetMatchesIntoIter { patset, it };",
          "    let result = iter.next_back();",
          "    let patset = PatternSet::new(vec![0.into(), 4.into()]).unwrap();",
          "    let it = (0..5);",
          "    let mut iter = SetMatchesIntoIter { patset, it };",
          "    let result = iter.next_back();",
          "    assert_eq!(result, Some(4));",
          "    assert_eq!(iter.it.start, 0);",
          "    assert_eq!(iter.it.end, 5);",
          "    assert!(iter.patset.contains(PatternID::new_unchecked(4)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let patset = PatternSet::new(vec![2.into(), 4.into(), 6.into()]).unwrap();",
          "    let it = (0..7);",
          "    let mut iter = SetMatchesIntoIter { patset, it };",
          "    let result = iter.next_back();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(6));",
          "    assert_eq!(iter.it, 0..6);"
        ],
        "code": [
          "{",
          "    let patset = PatternSet::new(vec![2.into(), 4.into(), 6.into()]).unwrap();",
          "    let it = (0..7);",
          "    let mut iter = SetMatchesIntoIter { patset, it };",
          "    let result = iter.next_back();",
          "    assert_eq!(result, Some(6));",
          "    assert_eq!(iter.it, 0..6);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]