[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_set = PatternSet::build().add(PatternID::new_unchecked(0)).finish();",
          "    let range = 5..10; // Valid range to include Some values",
          "    let mut iter = SetMatchesIntoIter { patset: pattern_set, it: range };",
          "",
          "    let _ = iter.next_back(); // This should return Some(9)",
          "    let _ = iter.next_back(); // This should return Some(8)",
          "    let _ = iter.next_back(); // This should return Some(7)",
          "}"
        ],
        "oracle": [
          "    let pattern_set = PatternSet::build().add(PatternID::new_unchecked(0)).finish();",
          "    let range_invalid = 5..5; // Invalid range that should yield None",
          "    let mut iter_invalid = SetMatchesIntoIter { patset: pattern_set, it: range_invalid };",
          "    assert_eq!(iter_invalid.next_back(), None);",
          "    ",
          "    let pattern_set_false = PatternSet::build().add(PatternID::new_unchecked(1)).finish();",
          "    let range_false = 5..10; // Valid range to include values but no patterns match",
          "    let mut iter_false = SetMatchesIntoIter { patset: pattern_set_false, it: range_false };",
          "    assert_eq!(iter_false.next_back(), Some(9));",
          "    assert_eq!(iter_false.next_back(), Some(8));",
          "    assert_eq!(iter_false.next_back(), Some(7));",
          "    assert_eq!(iter_false.next_back(), None);"
        ],
        "code": [
          "{",
          "    let pattern_set = PatternSet::build().add(PatternID::new_unchecked(0)).finish();",
          "    let range = 5..10; // Valid range to include Some values",
          "    let mut iter = SetMatchesIntoIter { patset: pattern_set, it: range };",
          "",
          "    let _ = iter.next_back(); // This should return Some(9)",
          "    let _ = iter.next_back(); // This should return Some(8)",
          "    let _ = iter.next_back(); // This should return Some(7)",
          "    let pattern_set = PatternSet::build().add(PatternID::new_unchecked(0)).finish();",
          "    let range_invalid = 5..5; // Invalid range that should yield None",
          "    let mut iter_invalid = SetMatchesIntoIter { patset: pattern_set, it: range_invalid };",
          "    assert_eq!(iter_invalid.next_back(), None);",
          "    ",
          "    let pattern_set_false = PatternSet::build().add(PatternID::new_unchecked(1)).finish();",
          "    let range_false = 5..10; // Valid range to include values but no patterns match",
          "    let mut iter_false = SetMatchesIntoIter { patset: pattern_set_false, it: range_false };",
          "    assert_eq!(iter_false.next_back(), Some(9));",
          "    assert_eq!(iter_false.next_back(), Some(8));",
          "    assert_eq!(iter_false.next_back(), Some(7));",
          "    assert_eq!(iter_false.next_back(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_set = PatternSet::build().add(PatternID::new_unchecked(0)).finish();",
          "    let range = 5..=5; // Valid range with only one element",
          "    let mut iter = SetMatchesIntoIter { patset: pattern_set, it: range };",
          "",
          "    let _ = iter.next_back(); // This should return Some(5)",
          "    let _ = iter.next_back(); // This should return None",
          "}"
        ],
        "oracle": [
          "    iter.next_back(); // Expected: Some(5)",
          "    iter.next_back(); // Expected: None"
        ],
        "code": [
          "{",
          "    let pattern_set = PatternSet::build().add(PatternID::new_unchecked(0)).finish();",
          "    let range = 5..=5; // Valid range with only one element",
          "    let mut iter = SetMatchesIntoIter { patset: pattern_set, it: range };",
          "",
          "    let _ = iter.next_back(); // This should return Some(5)",
          "    let _ = iter.next_back(); // This should return None",
          "    iter.next_back(); // Expected: Some(5)",
          "    iter.next_back(); // Expected: None",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_set = PatternSet::build().finish(); // No patterns in the set",
          "    let range = 0..0; // Empty range",
          "    let mut iter = SetMatchesIntoIter { patset: pattern_set, it: range };",
          "",
          "    let result = iter.next_back(); // This should return None",
          "}"
        ],
        "oracle": [
          "    iter.it.next_back().is_none();",
          "    iter.patset.contains(PatternID::new_unchecked(0)).is_false();",
          "    result.is_none();",
          "    iter.it.next_back().is_some();",
          "    iter.patset.contains(PatternID::new_unchecked(1)).is_false();"
        ],
        "code": [
          "{",
          "    let pattern_set = PatternSet::build().finish(); // No patterns in the set",
          "    let range = 0..0; // Empty range",
          "    let mut iter = SetMatchesIntoIter { patset: pattern_set, it: range };",
          "",
          "    let result = iter.next_back(); // This should return None",
          "    iter.it.next_back().is_none();",
          "    iter.patset.contains(PatternID::new_unchecked(0)).is_false();",
          "    result.is_none();",
          "    iter.it.next_back().is_some();",
          "    iter.patset.contains(PatternID::new_unchecked(1)).is_false();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]