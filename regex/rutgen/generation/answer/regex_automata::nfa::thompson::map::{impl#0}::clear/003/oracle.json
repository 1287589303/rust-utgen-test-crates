[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Utf8BoundedMap {",
          "        version: 0,",
          "        capacity: 5,",
          "        map: vec![Utf8BoundedEntry {",
          "            version: 0,",
          "            key: vec![],",
          "            val: StateID::default(),",
          "        }],",
          "    };",
          "    map.clear();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.version, 1);",
          "    assert!(map.map.iter().all(|entry| entry.version == 0));",
          "    assert!(map.map.iter().all(|entry| entry.key.is_empty()));",
          "    assert!(map.map.iter().all(|entry| entry.val == StateID::default()));"
        ],
        "code": [
          "{",
          "    let mut map = Utf8BoundedMap {",
          "        version: 0,",
          "        capacity: 5,",
          "        map: vec![Utf8BoundedEntry {",
          "            version: 0,",
          "            key: vec![],",
          "            val: StateID::default(),",
          "        }],",
          "    };",
          "    map.clear();",
          "    assert_eq!(map.version, 1);",
          "    assert!(map.map.iter().all(|entry| entry.version == 0));",
          "    assert!(map.map.iter().all(|entry| entry.key.is_empty()));",
          "    assert!(map.map.iter().all(|entry| entry.val == StateID::default()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Utf8BoundedMap {",
          "        version: 0,",
          "        capacity: 10,",
          "        map: vec![",
          "            Utf8BoundedEntry {",
          "                version: 0,",
          "                key: vec![],",
          "                val: StateID::default(),",
          "            },",
          "            Utf8BoundedEntry {",
          "                version: 0,",
          "                key: vec![],",
          "                val: StateID::default(),",
          "            },",
          "        ],",
          "    };",
          "    map.clear();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.version, 1);",
          "    assert_eq!(map.map.len(), 10);",
          "    assert!(map.map.iter().all(|entry| entry.version == 0));",
          "    assert!(map.map.iter().all(|entry| entry.key.is_empty()));",
          "    assert!(map.map.iter().all(|entry| entry.val == StateID::default()));"
        ],
        "code": [
          "{",
          "    let mut map = Utf8BoundedMap {",
          "        version: 0,",
          "        capacity: 10,",
          "        map: vec![",
          "            Utf8BoundedEntry {",
          "                version: 0,",
          "                key: vec![],",
          "                val: StateID::default(),",
          "            },",
          "            Utf8BoundedEntry {",
          "                version: 0,",
          "                key: vec![],",
          "                val: StateID::default(),",
          "            },",
          "        ],",
          "    };",
          "    map.clear();",
          "    assert_eq!(map.version, 1);",
          "    assert_eq!(map.map.len(), 10);",
          "    assert!(map.map.iter().all(|entry| entry.version == 0));",
          "    assert!(map.map.iter().all(|entry| entry.key.is_empty()));",
          "    assert!(map.map.iter().all(|entry| entry.val == StateID::default()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Utf8BoundedMap {",
          "        version: 0,",
          "        capacity: 100,",
          "        map: vec![Utf8BoundedEntry {",
          "            version: 0,",
          "            key: vec![],",
          "            val: StateID::default(),",
          "        }; 100],",
          "    };",
          "    map.clear();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.version, 1);",
          "    assert!(map.map.iter().all(|entry| entry.version == 0));",
          "    assert!(map.map.iter().all(|entry| entry.key.is_empty()));",
          "    assert!(map.map.iter().all(|entry| entry.val == StateID::default()));"
        ],
        "code": [
          "{",
          "    let mut map = Utf8BoundedMap {",
          "        version: 0,",
          "        capacity: 100,",
          "        map: vec![Utf8BoundedEntry {",
          "            version: 0,",
          "            key: vec![],",
          "            val: StateID::default(),",
          "        }; 100],",
          "    };",
          "    map.clear();",
          "    assert_eq!(map.version, 1);",
          "    assert!(map.map.iter().all(|entry| entry.version == 0));",
          "    assert!(map.map.iter().all(|entry| entry.key.is_empty()));",
          "    assert!(map.map.iter().all(|entry| entry.val == StateID::default()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]