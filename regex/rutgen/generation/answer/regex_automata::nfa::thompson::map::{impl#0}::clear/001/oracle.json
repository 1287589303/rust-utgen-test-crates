[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let capacity = 10;",
          "    let mut map = Utf8BoundedMap::new(capacity);",
          "    map.clear();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.version, 1);",
          "    assert_eq!(map.map.len(), capacity);",
          "    assert!(map.map.iter().all(|entry| entry == &Utf8BoundedEntry::default()));",
          "    assert!(map.map.is_empty() == false);",
          "    assert!(map.map[0].version == 0);",
          "    assert!(map.map[0].key.is_empty());",
          "    assert!(map.map[0].val == StateID::default());",
          "    assert_eq!(map.capacity, capacity);"
        ],
        "code": [
          "{",
          "    let capacity = 10;",
          "    let mut map = Utf8BoundedMap::new(capacity);",
          "    map.clear();",
          "    assert_eq!(map.version, 1);",
          "    assert_eq!(map.map.len(), capacity);",
          "    assert!(map.map.iter().all(|entry| entry == &Utf8BoundedEntry::default()));",
          "    assert!(map.map.is_empty() == false);",
          "    assert!(map.map[0].version == 0);",
          "    assert!(map.map[0].key.is_empty());",
          "    assert!(map.map[0].val == StateID::default());",
          "    assert_eq!(map.capacity, capacity);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let capacity = 1;",
          "    let mut map = Utf8BoundedMap::new(capacity);",
          "    map.clear();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.version, 1);",
          "    assert_eq!(map.map.len(), capacity);",
          "    assert!(map.map.iter().all(|entry| entry.version == 0));"
        ],
        "code": [
          "{",
          "    let capacity = 1;",
          "    let mut map = Utf8BoundedMap::new(capacity);",
          "    map.clear();",
          "    assert_eq!(map.version, 1);",
          "    assert_eq!(map.map.len(), capacity);",
          "    assert!(map.map.iter().all(|entry| entry.version == 0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let capacity = 1000;",
          "    let mut map = Utf8BoundedMap::new(capacity);",
          "    map.clear();",
          "}"
        ],
        "oracle": [
          "    map.version == 0",
          "    map.map.len() == capacity",
          "    map.map.iter().all(|entry| entry == &Utf8BoundedEntry::default())"
        ],
        "code": [
          "{",
          "    let capacity = 1000;",
          "    let mut map = Utf8BoundedMap::new(capacity);",
          "    map.clear();",
          "    map.version == 0",
          "    map.map.len() == capacity",
          "    map.map.iter().all(|entry| entry == &Utf8BoundedEntry::default())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]