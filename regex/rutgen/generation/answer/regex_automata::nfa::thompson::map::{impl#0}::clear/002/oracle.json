[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Utf8BoundedMap {",
          "        version: 1,",
          "        capacity: 1,",
          "        map: vec![Utf8BoundedEntry {",
          "            version: 1,",
          "            key: vec![],",
          "            val: StateID(0),",
          "        }],",
          "    };",
          "    map.clear();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.version, 2);",
          "    assert_eq!(map.map.len(), 1);",
          "    assert_eq!(map.map[0].version, 1);",
          "    assert_eq!(map.map[0].key.len(), 0);",
          "    assert_eq!(map.map[0].val, StateID(0));"
        ],
        "code": [
          "{",
          "    let mut map = Utf8BoundedMap {",
          "        version: 1,",
          "        capacity: 1,",
          "        map: vec![Utf8BoundedEntry {",
          "            version: 1,",
          "            key: vec![],",
          "            val: StateID(0),",
          "        }],",
          "    };",
          "    map.clear();",
          "    assert_eq!(map.version, 2);",
          "    assert_eq!(map.map.len(), 1);",
          "    assert_eq!(map.map[0].version, 1);",
          "    assert_eq!(map.map[0].key.len(), 0);",
          "    assert_eq!(map.map[0].val, StateID(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Utf8BoundedMap {",
          "        version: 65535,",
          "        capacity: 2,",
          "        map: vec![",
          "            Utf8BoundedEntry {",
          "                version: 65535,",
          "                key: vec![],",
          "                val: StateID(1),",
          "            },",
          "            Utf8BoundedEntry {",
          "                version: 65535,",
          "                key: vec![],",
          "                val: StateID(2),",
          "            },",
          "        ],",
          "    };",
          "    map.clear();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.version, 0);",
          "    assert_eq!(map.map.len(), 2);",
          "    assert_eq!(map.map[0].version, 0);",
          "    assert_eq!(map.map[1].version, 0);",
          "    assert!(map.map[0].key.is_empty());",
          "    assert!(map.map[1].key.is_empty());",
          "    assert_eq!(map.map[0].val, StateID(1));",
          "    assert_eq!(map.map[1].val, StateID(2));"
        ],
        "code": [
          "{",
          "    let mut map = Utf8BoundedMap {",
          "        version: 65535,",
          "        capacity: 2,",
          "        map: vec![",
          "            Utf8BoundedEntry {",
          "                version: 65535,",
          "                key: vec![],",
          "                val: StateID(1),",
          "            },",
          "            Utf8BoundedEntry {",
          "                version: 65535,",
          "                key: vec![],",
          "                val: StateID(2),",
          "            },",
          "        ],",
          "    };",
          "    map.clear();",
          "    assert_eq!(map.version, 0);",
          "    assert_eq!(map.map.len(), 2);",
          "    assert_eq!(map.map[0].version, 0);",
          "    assert_eq!(map.map[1].version, 0);",
          "    assert!(map.map[0].key.is_empty());",
          "    assert!(map.map[1].key.is_empty());",
          "    assert_eq!(map.map[0].val, StateID(1));",
          "    assert_eq!(map.map[1].val, StateID(2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Utf8BoundedMap {",
          "        version: 100,",
          "        capacity: 3,",
          "        map: vec![",
          "            Utf8BoundedEntry {",
          "                version: 100,",
          "                key: vec![],",
          "                val: StateID(3),",
          "            },",
          "            Utf8BoundedEntry {",
          "                version: 100,",
          "                key: vec![],",
          "                val: StateID(4),",
          "            },",
          "            Utf8BoundedEntry {",
          "                version: 100,",
          "                key: vec![],",
          "                val: StateID(5),",
          "            },",
          "        ],",
          "    };",
          "    map.clear();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.version, 101);",
          "    assert_eq!(map.map[0].version, 100);",
          "    assert_eq!(map.map[1].version, 100);",
          "    assert_eq!(map.map[2].version, 100);",
          "    assert!(map.map.iter().all(|entry| entry.key.is_empty()));",
          "    assert_eq!(map.map.len(), map.capacity);",
          "    assert!(map.map.iter().all(|entry| entry.val == StateID(3) || entry.val == StateID(4) || entry.val == StateID(5)));"
        ],
        "code": [
          "{",
          "    let mut map = Utf8BoundedMap {",
          "        version: 100,",
          "        capacity: 3,",
          "        map: vec![",
          "            Utf8BoundedEntry {",
          "                version: 100,",
          "                key: vec![],",
          "                val: StateID(3),",
          "            },",
          "            Utf8BoundedEntry {",
          "                version: 100,",
          "                key: vec![],",
          "                val: StateID(4),",
          "            },",
          "            Utf8BoundedEntry {",
          "                version: 100,",
          "                key: vec![],",
          "                val: StateID(5),",
          "            },",
          "        ],",
          "    };",
          "    map.clear();",
          "    assert_eq!(map.version, 101);",
          "    assert_eq!(map.map[0].version, 100);",
          "    assert_eq!(map.map[1].version, 100);",
          "    assert_eq!(map.map[2].version, 100);",
          "    assert!(map.map.iter().all(|entry| entry.key.is_empty()));",
          "    assert_eq!(map.map.len(), map.capacity);",
          "    assert!(map.map.iter().all(|entry| entry.val == StateID(3) || entry.val == StateID(4) || entry.val == StateID(5)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]