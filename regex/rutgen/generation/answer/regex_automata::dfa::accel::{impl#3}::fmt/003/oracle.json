[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let accels = Accels { accels: vec![] };",
          "    let mut buf = Vec::new();",
          "    let formatter = &mut core::fmt::Formatter::for_vec(&mut buf);",
          "    accels.fmt(formatter).unwrap();",
          "}"
        ],
        "oracle": [
          "    write!(f, \"Accels(\")? == Ok",
          "    self.iter().next().is_some()",
          "    self.iter().next().is_none()",
          "    list.finish()? == Ok"
        ],
        "code": [
          "{",
          "    let accels = Accels { accels: vec![] };",
          "    let mut buf = Vec::new();",
          "    let formatter = &mut core::fmt::Formatter::for_vec(&mut buf);",
          "    accels.fmt(formatter).unwrap();",
          "    write!(f, \"Accels(\")? == Ok",
          "    self.iter().next().is_some()",
          "    self.iter().next().is_none()",
          "    list.finish()? == Ok",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let accels = Accels { accels: vec![1u32] };",
          "    let mut buf = Vec::new();",
          "    let formatter = &mut core::fmt::Formatter::for_vec(&mut buf);",
          "    accels.fmt(formatter).unwrap();",
          "}"
        ],
        "oracle": [
          "    write!(f, \"Accels(\")?.is_ok()",
          "    self.iter().next().is_some()",
          "    self.iter().next().is_none()",
          "    list.finish().is_ok()"
        ],
        "code": [
          "{",
          "    let accels = Accels { accels: vec![1u32] };",
          "    let mut buf = Vec::new();",
          "    let formatter = &mut core::fmt::Formatter::for_vec(&mut buf);",
          "    accels.fmt(formatter).unwrap();",
          "    write!(f, \"Accels(\")?.is_ok()",
          "    self.iter().next().is_some()",
          "    self.iter().next().is_none()",
          "    list.finish().is_ok()",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let accels = Accels { accels: vec![1u32, 2u32, 3u32, 4u32, 5u32, 6u32, 7u32, 8u32] };",
          "    let mut buf = Vec::new();",
          "    let formatter = &mut core::fmt::Formatter::for_vec(&mut buf);",
          "    accels.fmt(formatter).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(write!(formatter, \"Accels(\").is_ok());",
          "    assert!(self.iter().next().is_some());",
          "    assert!(self.iter().next().is_none());",
          "    assert!(list.finish().is_ok());"
        ],
        "code": [
          "{",
          "    let accels = Accels { accels: vec![1u32, 2u32, 3u32, 4u32, 5u32, 6u32, 7u32, 8u32] };",
          "    let mut buf = Vec::new();",
          "    let formatter = &mut core::fmt::Formatter::for_vec(&mut buf);",
          "    accels.fmt(formatter).unwrap();",
          "    assert!(write!(formatter, \"Accels(\").is_ok());",
          "    assert!(self.iter().next().is_some());",
          "    assert!(self.iter().next().is_none());",
          "    assert!(list.finish().is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let accels = Accels { accels: vec![1u32; 9] };",
          "    let mut buf = Vec::new();",
          "    let formatter = &mut core::fmt::Formatter::for_vec(&mut buf);",
          "    accels.fmt(formatter).unwrap();",
          "}"
        ],
        "oracle": [
          "    write!(f, \"Accels(\")? == Ok",
          "    self.iter().next().is_some()",
          "    self.iter().next().is_none()",
          "    list.finish()? == Ok"
        ],
        "code": [
          "{",
          "    let accels = Accels { accels: vec![1u32; 9] };",
          "    let mut buf = Vec::new();",
          "    let formatter = &mut core::fmt::Formatter::for_vec(&mut buf);",
          "    accels.fmt(formatter).unwrap();",
          "    write!(f, \"Accels(\")? == Ok",
          "    self.iter().next().is_some()",
          "    self.iter().next().is_none()",
          "    list.finish()? == Ok",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]