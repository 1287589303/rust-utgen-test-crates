[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_id_value = PatternEpsilons::PATTERN_ID_LIMIT - 1; // valid pattern ID",
          "    let mut pattern_epsilons = PatternEpsilons(pattern_id_value << PatternEpsilons::PATTERN_ID_SHIFT);",
          "    ",
          "    // Set non-empty epsilons",
          "    let epsilons_value = 0x00000001_FFFFFFFF; // non-empty value",
          "    let epsilons = Epsilons(epsilons_value);",
          "    pattern_epsilons = pattern_epsilons.set_epsilons(epsilons);",
          "    ",
          "    // Create a formatter",
          "    let mut buffer = alloc::string::String::new();",
          "    let result = pattern_epsilons.fmt(&mut core::fmt::Formatter::new(&mut buffer));",
          "}"
        ],
        "oracle": [
          "    let pattern_id_value = PatternEpsilons::PATTERN_ID_LIMIT - 1; // valid pattern ID",
          "    let pattern_epsilons = PatternEpsilons(pattern_id_value << PatternEpsilons::PATTERN_ID_SHIFT);",
          "    let epsilons_value = 0x00000001_FFFFFFFF; // non-empty value",
          "    let epsilons = Epsilons(epsilons_value);",
          "    let pattern_epsilons = pattern_epsilons.set_epsilons(epsilons);",
          "    let mut buffer = alloc::string::String::new();",
          "    let result = pattern_epsilons.fmt(&mut core::fmt::Formatter::new(&mut buffer));",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let pattern_id_value = PatternEpsilons::PATTERN_ID_LIMIT - 1; // valid pattern ID",
          "    let mut pattern_epsilons = PatternEpsilons(pattern_id_value << PatternEpsilons::PATTERN_ID_SHIFT);",
          "    ",
          "    // Set non-empty epsilons",
          "    let epsilons_value = 0x00000001_FFFFFFFF; // non-empty value",
          "    let epsilons = Epsilons(epsilons_value);",
          "    pattern_epsilons = pattern_epsilons.set_epsilons(epsilons);",
          "    ",
          "    // Create a formatter",
          "    let mut buffer = alloc::string::String::new();",
          "    let result = pattern_epsilons.fmt(&mut core::fmt::Formatter::new(&mut buffer));",
          "    let pattern_id_value = PatternEpsilons::PATTERN_ID_LIMIT - 1; // valid pattern ID",
          "    let pattern_epsilons = PatternEpsilons(pattern_id_value << PatternEpsilons::PATTERN_ID_SHIFT);",
          "    let epsilons_value = 0x00000001_FFFFFFFF; // non-empty value",
          "    let epsilons = Epsilons(epsilons_value);",
          "    let pattern_epsilons = pattern_epsilons.set_epsilons(epsilons);",
          "    let mut buffer = alloc::string::String::new();",
          "    let result = pattern_epsilons.fmt(&mut core::fmt::Formatter::new(&mut buffer));",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]