[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_class_bytes = Class::Bytes(ClassBytes::empty());",
          "    let _ = empty_class_bytes.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(empty_class_bytes.is_empty(), true);"
        ],
        "code": [
          "{",
          "    let empty_class_bytes = Class::Bytes(ClassBytes::empty());",
          "    let _ = empty_class_bytes.is_empty();",
          "    assert_eq!(empty_class_bytes.is_empty(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let single_element_range = ClassBytes::new(vec![ClassBytesRange { start: 42, end: 42 }]);",
          "    let class_bytes = Class::Bytes(single_element_range);",
          "    let _ = class_bytes.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_bytes.is_empty(), false);"
        ],
        "code": [
          "{",
          "    let single_element_range = ClassBytes::new(vec![ClassBytesRange { start: 42, end: 42 }]);",
          "    let class_bytes = Class::Bytes(single_element_range);",
          "    let _ = class_bytes.is_empty();",
          "    assert_eq!(class_bytes.is_empty(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let overlapping_ranges = ClassBytes::new(vec![",
          "        ClassBytesRange { start: 5, end: 10 },",
          "        ClassBytesRange { start: 8, end: 15 },",
          "    ]);",
          "    let class_bytes = Class::Bytes(overlapping_ranges);",
          "    let _ = class_bytes.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_bytes.is_empty(), false);"
        ],
        "code": [
          "{",
          "    let overlapping_ranges = ClassBytes::new(vec![",
          "        ClassBytesRange { start: 5, end: 10 },",
          "        ClassBytesRange { start: 8, end: 15 },",
          "    ]);",
          "    let class_bytes = Class::Bytes(overlapping_ranges);",
          "    let _ = class_bytes.is_empty();",
          "    assert_eq!(class_bytes.is_empty(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let non_overlapping_ranges = ClassBytes::new(vec![",
          "        ClassBytesRange { start: 0, end: 10 },",
          "        ClassBytesRange { start: 20, end: 30 },",
          "    ]);",
          "    let class_bytes = Class::Bytes(non_overlapping_ranges);",
          "    let _ = class_bytes.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_bytes.is_empty(), false);"
        ],
        "code": [
          "{",
          "    let non_overlapping_ranges = ClassBytes::new(vec![",
          "        ClassBytesRange { start: 0, end: 10 },",
          "        ClassBytesRange { start: 20, end: 30 },",
          "    ]);",
          "    let class_bytes = Class::Bytes(non_overlapping_ranges);",
          "    let _ = class_bytes.is_empty();",
          "    assert_eq!(class_bytes.is_empty(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]