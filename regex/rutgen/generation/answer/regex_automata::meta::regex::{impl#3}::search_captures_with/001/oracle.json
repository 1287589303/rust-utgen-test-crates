[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new_many(&[\"[a-z0-9]{6}\"]).unwrap();",
          "    let mut cache = re.create_cache();",
          "    let mut caps = re.create_captures();",
          "    let haystack = \"abc123\";",
          "",
          "    let input = Input::new(haystack);",
          "    re.search_captures_with(&mut cache, &input, &mut caps);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(caps.get_match(), Some(Match::must(0, 0..6)));",
          "    caps.clear();",
          "    let input = Input::new(\"foo123\");",
          "    re.search_captures_with(&mut cache, &input, &mut caps);",
          "    assert_eq!(caps.get_match(), Some(Match::must(0, 0..6)));",
          "    caps.clear();",
          "    let input = Input::new(\"foobar\");",
          "    re.search_captures_with(&mut cache, &input, &mut caps);",
          "    assert_eq!(caps.get_match(), None);",
          "    caps.clear();",
          "    let input = Input::new(\"123abc\");",
          "    re.search_captures_with(&mut cache, &input, &mut caps);",
          "    assert_eq!(caps.get_match(), Some(Match::must(0, 0..6)));"
        ],
        "code": [
          "{",
          "    let re = Regex::new_many(&[\"[a-z0-9]{6}\"]).unwrap();",
          "    let mut cache = re.create_cache();",
          "    let mut caps = re.create_captures();",
          "    let haystack = \"abc123\";",
          "",
          "    let input = Input::new(haystack);",
          "    re.search_captures_with(&mut cache, &input, &mut caps);",
          "    assert_eq!(caps.get_match(), Some(Match::must(0, 0..6)));",
          "    caps.clear();",
          "    let input = Input::new(\"foo123\");",
          "    re.search_captures_with(&mut cache, &input, &mut caps);",
          "    assert_eq!(caps.get_match(), Some(Match::must(0, 0..6)));",
          "    caps.clear();",
          "    let input = Input::new(\"foobar\");",
          "    re.search_captures_with(&mut cache, &input, &mut caps);",
          "    assert_eq!(caps.get_match(), None);",
          "    caps.clear();",
          "    let input = Input::new(\"123abc\");",
          "    re.search_captures_with(&mut cache, &input, &mut caps);",
          "    assert_eq!(caps.get_match(), Some(Match::must(0, 0..6)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\d{3}\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let mut caps = re.create_captures();",
          "    let haystack = \"foo\";",
          "",
          "    let input = Input::new(haystack);",
          "    re.search_captures_with(&mut cache, &input, &mut caps);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(caps.get_match(), None);",
          "    assert_eq!(caps.slots(), &vec![None, None]);",
          "    assert_eq!(caps.pid, None);",
          "    assert_eq!(caps.slots().len(), 0);",
          "    ",
          "    let input_valid = Input::new(\"foo123\");",
          "    re.search_captures_with(&mut cache, &input_valid, &mut caps);",
          "    assert_ne!(caps.get_match(), None);",
          "    assert!(caps.slots().iter().all(|&slot| slot.is_some()));",
          "    ",
          "    let input_invalid = Input::new(\"bar\");",
          "    re.search_captures_with(&mut cache, &input_invalid, &mut caps);",
          "    assert_eq!(caps.get_match(), None);",
          "    assert!(caps.slots().iter().all(|&slot| slot.is_none()));"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\d{3}\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let mut caps = re.create_captures();",
          "    let haystack = \"foo\";",
          "",
          "    let input = Input::new(haystack);",
          "    re.search_captures_with(&mut cache, &input, &mut caps);",
          "    assert_eq!(caps.get_match(), None);",
          "    assert_eq!(caps.slots(), &vec![None, None]);",
          "    assert_eq!(caps.pid, None);",
          "    assert_eq!(caps.slots().len(), 0);",
          "    ",
          "    let input_valid = Input::new(\"foo123\");",
          "    re.search_captures_with(&mut cache, &input_valid, &mut caps);",
          "    assert_ne!(caps.get_match(), None);",
          "    assert!(caps.slots().iter().all(|&slot| slot.is_some()));",
          "    ",
          "    let input_invalid = Input::new(\"bar\");",
          "    re.search_captures_with(&mut cache, &input_invalid, &mut caps);",
          "    assert_eq!(caps.get_match(), None);",
          "    assert!(caps.slots().iter().all(|&slot| slot.is_none()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\w+\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let mut caps = re.create_captures();",
          "    let haystack = \"\";",
          "",
          "    let input = Input::new(haystack);",
          "    re.search_captures_with(&mut cache, &input, &mut caps);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(caps.get_match(), None);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\w+\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let mut caps = re.create_captures();",
          "    let haystack = \"\";",
          "",
          "    let input = Input::new(haystack);",
          "    re.search_captures_with(&mut cache, &input, &mut caps);",
          "    assert_eq!(caps.get_match(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"[a-z]{5,10}\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let mut caps = re.create_captures();",
          "    let haystack = \"abcdefghij\"; // 10 characters",
          "",
          "    let input = Input::new(haystack);",
          "    re.search_captures_with(&mut cache, &input, &mut caps);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(caps.get_match(), Some(Match::must(0, 0..10)));",
          "    caps.clear();",
          "    let input_short = Input::new(\"abc\");",
          "    re.search_captures_with(&mut cache, &input_short, &mut caps);",
          "    assert_eq!(caps.get_match(), None);",
          "    caps.clear();",
          "    let input_empty = Input::new(\"\");",
          "    re.search_captures_with(&mut cache, &input_empty, &mut caps);",
          "    assert_eq!(caps.get_match(), None);",
          "    let input_overlap = Input::new(\"abcdefghijklmno\");",
          "    re.search_captures_with(&mut cache, &input_overlap, &mut caps);",
          "    assert_eq!(caps.get_match(), Some(Match::must(0, 0..10)));"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"[a-z]{5,10}\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let mut caps = re.create_captures();",
          "    let haystack = \"abcdefghij\"; // 10 characters",
          "",
          "    let input = Input::new(haystack);",
          "    re.search_captures_with(&mut cache, &input, &mut caps);",
          "    assert_eq!(caps.get_match(), Some(Match::must(0, 0..10)));",
          "    caps.clear();",
          "    let input_short = Input::new(\"abc\");",
          "    re.search_captures_with(&mut cache, &input_short, &mut caps);",
          "    assert_eq!(caps.get_match(), None);",
          "    caps.clear();",
          "    let input_empty = Input::new(\"\");",
          "    re.search_captures_with(&mut cache, &input_empty, &mut caps);",
          "    assert_eq!(caps.get_match(), None);",
          "    let input_overlap = Input::new(\"abcdefghijklmno\");",
          "    re.search_captures_with(&mut cache, &input_overlap, &mut caps);",
          "    assert_eq!(caps.get_match(), Some(Match::must(0, 0..10)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"^foo\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let mut caps = re.create_captures();",
          "    let haystack = \"foobar\";",
          "",
          "    let input = Input::new(haystack).anchored(Anchored::Pattern(PatternID::must(0)));",
          "    re.search_captures_with(&mut cache, &input, &mut caps);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(caps.get_match(), Some(Match::must(0, 0..3)));",
          "    caps.clear();",
          "    assert_eq!(caps.pid, None);",
          "    let input = Input::new(\"bar\").anchored(Anchored::Pattern(PatternID::must(0)));",
          "    re.search_captures_with(&mut cache, &input, &mut caps);",
          "    assert_eq!(caps.get_match(), None);",
          "    caps.clear();",
          "    let input = Input::new(\"foobarbaz\").anchored(Anchored::Pattern(PatternID::must(1)));",
          "    re.search_captures_with(&mut cache, &input, &mut caps);",
          "    assert_eq!(caps.get_match(), Some(Match::must(1, 0..3)));"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"^foo\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let mut caps = re.create_captures();",
          "    let haystack = \"foobar\";",
          "",
          "    let input = Input::new(haystack).anchored(Anchored::Pattern(PatternID::must(0)));",
          "    re.search_captures_with(&mut cache, &input, &mut caps);",
          "    assert_eq!(caps.get_match(), Some(Match::must(0, 0..3)));",
          "    caps.clear();",
          "    assert_eq!(caps.pid, None);",
          "    let input = Input::new(\"bar\").anchored(Anchored::Pattern(PatternID::must(0)));",
          "    re.search_captures_with(&mut cache, &input, &mut caps);",
          "    assert_eq!(caps.get_match(), None);",
          "    caps.clear();",
          "    let input = Input::new(\"foobarbaz\").anchored(Anchored::Pattern(PatternID::must(1)));",
          "    re.search_captures_with(&mut cache, &input, &mut caps);",
          "    assert_eq!(caps.get_match(), Some(Match::must(1, 0..3)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"^bar\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let mut caps = re.create_captures();",
          "    let haystack = \"foobar\";",
          "",
          "    let input = Input::new(haystack).anchored(Anchored::Pattern(PatternID::must(0)));",
          "    re.search_captures_with(&mut cache, &input, &mut caps);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(caps.get_match(), Some(Match::must(0, 0..3)));",
          "    assert_eq!(caps.slots().len(), 2);",
          "    assert!(caps.slots()[0].is_some());",
          "    assert!(caps.slots()[1].is_none());",
          "    assert_eq!(caps.pid, Some(PatternID::must(0)));",
          "    assert!(caps.slots()[0].unwrap() > NonMaxUsize(0));"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"^bar\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let mut caps = re.create_captures();",
          "    let haystack = \"foobar\";",
          "",
          "    let input = Input::new(haystack).anchored(Anchored::Pattern(PatternID::must(0)));",
          "    re.search_captures_with(&mut cache, &input, &mut caps);",
          "    assert_eq!(caps.get_match(), Some(Match::must(0, 0..3)));",
          "    assert_eq!(caps.slots().len(), 2);",
          "    assert!(caps.slots()[0].is_some());",
          "    assert!(caps.slots()[1].is_none());",
          "    assert_eq!(caps.pid, Some(PatternID::must(0)));",
          "    assert!(caps.slots()[0].unwrap() > NonMaxUsize(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]