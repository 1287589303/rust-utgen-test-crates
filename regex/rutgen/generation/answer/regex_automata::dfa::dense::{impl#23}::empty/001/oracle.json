[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    const LIMIT: usize = PatternID::LIMIT as usize;",
          "    let result = MatchStates::empty(LIMIT);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.slices, vec![]);",
          "    assert_eq!(result.pattern_ids, vec![]);",
          "    assert_eq!(result.pattern_len, LIMIT);"
        ],
        "code": [
          "{",
          "    const LIMIT: usize = PatternID::LIMIT as usize;",
          "    let result = MatchStates::empty(LIMIT);",
          "    assert_eq!(result.slices, vec![]);",
          "    assert_eq!(result.pattern_ids, vec![]);",
          "    assert_eq!(result.pattern_len, LIMIT);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = MatchStates::empty(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.slices, vec![]);",
          "    assert_eq!(result.pattern_ids, vec![]);",
          "    assert_eq!(result.pattern_len, 0);"
        ],
        "code": [
          "{",
          "    let result = MatchStates::empty(0);",
          "    assert_eq!(result.slices, vec![]);",
          "    assert_eq!(result.pattern_ids, vec![]);",
          "    assert_eq!(result.pattern_len, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = MatchStates::empty(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.slices, vec![]);",
          "    assert_eq!(result.pattern_ids, vec![]);",
          "    assert_eq!(result.pattern_len, 1);",
          "    ",
          "    let result_limit = MatchStates::empty(PatternID::LIMIT);",
          "    assert_eq!(result_limit.slices, vec![]);",
          "    assert_eq!(result_limit.pattern_ids, vec![]);",
          "    assert_eq!(result_limit.pattern_len, PatternID::LIMIT);"
        ],
        "code": [
          "{",
          "    let result = MatchStates::empty(1);",
          "    assert_eq!(result.slices, vec![]);",
          "    assert_eq!(result.pattern_ids, vec![]);",
          "    assert_eq!(result.pattern_len, 1);",
          "    ",
          "    let result_limit = MatchStates::empty(PatternID::LIMIT);",
          "    assert_eq!(result_limit.slices, vec![]);",
          "    assert_eq!(result_limit.pattern_ids, vec![]);",
          "    assert_eq!(result_limit.pattern_len, PatternID::LIMIT);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = MatchStates::empty(PatternID::LIMIT - 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.slices.len(), 0);",
          "    assert_eq!(result.pattern_ids.len(), 0);",
          "    assert_eq!(result.pattern_len, PatternID::LIMIT - 1);"
        ],
        "code": [
          "{",
          "    let result = MatchStates::empty(PatternID::LIMIT - 1);",
          "    assert_eq!(result.slices.len(), 0);",
          "    assert_eq!(result.pattern_ids.len(), 0);",
          "    assert_eq!(result.pattern_len, PatternID::LIMIT - 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]