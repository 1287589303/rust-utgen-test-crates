[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set = SparseSet::new(0);",
          "    let length = set.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(length, 0);"
        ],
        "code": [
          "{",
          "    let set = SparseSet::new(0);",
          "    let length = set.len();",
          "    assert_eq!(length, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = SparseSet::new(5);",
          "    set.insert(StateID::from(1));",
          "    set.insert(StateID::from(2));",
          "    let length = set.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(length, 2);",
          "    set.insert(StateID::from(3));",
          "    let length_after_insert = set.len();",
          "    assert_eq!(length_after_insert, 3);",
          "    set.clear();",
          "    let length_after_clear = set.len();",
          "    assert_eq!(length_after_clear, 0);",
          "    assert!(set.is_empty());"
        ],
        "code": [
          "{",
          "    let mut set = SparseSet::new(5);",
          "    set.insert(StateID::from(1));",
          "    set.insert(StateID::from(2));",
          "    let length = set.len();",
          "    assert_eq!(length, 2);",
          "    set.insert(StateID::from(3));",
          "    let length_after_insert = set.len();",
          "    assert_eq!(length_after_insert, 3);",
          "    set.clear();",
          "    let length_after_clear = set.len();",
          "    assert_eq!(length_after_clear, 0);",
          "    assert!(set.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = SparseSet::new(10);",
          "    for id in 0..5 {",
          "        let _ = set.insert(StateID::from(id));",
          "    }",
          "    let length = set.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(length, 5);",
          "    assert!(set.len() > 0);",
          "    assert!(!set.is_empty());",
          "    set.clear();",
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.is_empty());"
        ],
        "code": [
          "{",
          "    let mut set = SparseSet::new(10);",
          "    for id in 0..5 {",
          "        let _ = set.insert(StateID::from(id));",
          "    }",
          "    let length = set.len();",
          "    assert_eq!(length, 5);",
          "    assert!(set.len() > 0);",
          "    assert!(!set.is_empty());",
          "    set.clear();",
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = SparseSet::new(5);",
          "    set.insert(StateID::from(1));",
          "    set.insert(StateID::from(2));",
          "    set.clear();",
          "    let length = set.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(length, 0);",
          "    set.insert(StateID::from(1));",
          "    set.insert(StateID::from(2));",
          "    let length_after_inserts = set.len();",
          "    assert_eq!(length_after_inserts, 2);",
          "    set.clear();",
          "    assert!(set.is_empty());",
          "    assert_eq!(set.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut set = SparseSet::new(5);",
          "    set.insert(StateID::from(1));",
          "    set.insert(StateID::from(2));",
          "    set.clear();",
          "    let length = set.len();",
          "    assert_eq!(length, 0);",
          "    set.insert(StateID::from(1));",
          "    set.insert(StateID::from(2));",
          "    let length_after_inserts = set.len();",
          "    assert_eq!(length_after_inserts, 2);",
          "    set.clear();",
          "    assert!(set.is_empty());",
          "    assert_eq!(set.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = SparseSet::new(3);",
          "    set.insert(StateID::from(0));",
          "    set.insert(StateID::from(1));",
          "    set.resize(10);",
          "    let length = set.len(); ",
          "}"
        ],
        "oracle": [
          "    assert_eq!(length, 2);"
        ],
        "code": [
          "{",
          "    let mut set = SparseSet::new(3);",
          "    set.insert(StateID::from(0));",
          "    set.insert(StateID::from(1));",
          "    set.resize(10);",
          "    let length = set.len(); ",
          "    assert_eq!(length, 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]