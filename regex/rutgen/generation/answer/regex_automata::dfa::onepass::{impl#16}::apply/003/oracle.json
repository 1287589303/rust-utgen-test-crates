[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut caller_explicit_slots = vec![None; 5];",
          "",
          "    let slots = Slots(0b00000000000000000000000000000011); // Non-empty, with slots 0 and 1 set",
          "    let at = 1; // Valid usize within the range",
          "",
          "    slots.apply(at, &mut caller_explicit_slots);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(caller_explicit_slots[0], NonMaxUsize::new(1));",
          "    assert_eq!(caller_explicit_slots[1], NonMaxUsize::new(1));",
          "    assert_eq!(caller_explicit_slots[2], None);",
          "    assert_eq!(caller_explicit_slots[3], None);",
          "    assert_eq!(caller_explicit_slots[4], None);"
        ],
        "code": [
          "{",
          "    let mut caller_explicit_slots = vec![None; 5];",
          "",
          "    let slots = Slots(0b00000000000000000000000000000011); // Non-empty, with slots 0 and 1 set",
          "    let at = 1; // Valid usize within the range",
          "",
          "    slots.apply(at, &mut caller_explicit_slots);",
          "    assert_eq!(caller_explicit_slots[0], NonMaxUsize::new(1));",
          "    assert_eq!(caller_explicit_slots[1], NonMaxUsize::new(1));",
          "    assert_eq!(caller_explicit_slots[2], None);",
          "    assert_eq!(caller_explicit_slots[3], None);",
          "    assert_eq!(caller_explicit_slots[4], None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut caller_explicit_slots = vec![None; 10];",
          "",
          "    let slots = Slots(0b00000000000000000000000000001001); // Non-empty, with slots 0 and 3 set",
          "    let at = 5; // Valid usize within the range",
          "",
          "    slots.apply(at, &mut caller_explicit_slots);",
          "}"
        ],
        "oracle": [
          "    caller_explicit_slots[0] == Some(NonMaxUsize::new(5))",
          "    caller_explicit_slots[3] == Some(NonMaxUsize::new(5))",
          "    caller_explicit_slots[1] == None",
          "    caller_explicit_slots[2] == None",
          "    caller_explicit_slots[4] == None",
          "    caller_explicit_slots[5] == None",
          "    caller_explicit_slots[6] == None",
          "    caller_explicit_slots[7] == None",
          "    caller_explicit_slots[8] == None",
          "    caller_explicit_slots[9] == None"
        ],
        "code": [
          "{",
          "    let mut caller_explicit_slots = vec![None; 10];",
          "",
          "    let slots = Slots(0b00000000000000000000000000001001); // Non-empty, with slots 0 and 3 set",
          "    let at = 5; // Valid usize within the range",
          "",
          "    slots.apply(at, &mut caller_explicit_slots);",
          "    caller_explicit_slots[0] == Some(NonMaxUsize::new(5))",
          "    caller_explicit_slots[3] == Some(NonMaxUsize::new(5))",
          "    caller_explicit_slots[1] == None",
          "    caller_explicit_slots[2] == None",
          "    caller_explicit_slots[4] == None",
          "    caller_explicit_slots[5] == None",
          "    caller_explicit_slots[6] == None",
          "    caller_explicit_slots[7] == None",
          "    caller_explicit_slots[8] == None",
          "    caller_explicit_slots[9] == None",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut caller_explicit_slots = vec![None; 32]; // Length is greater than highest slot",
          "",
          "    let slots = Slots(0b00000000000000000000000000001111); // Non-empty, with slots 0, 1, 2, and 3 set",
          "    let at = 15; // Valid usize within the range",
          "",
          "    slots.apply(at, &mut caller_explicit_slots);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(caller_explicit_slots[0], NonMaxUsize::new(15));",
          "    assert_eq!(caller_explicit_slots[1], NonMaxUsize::new(15));",
          "    assert_eq!(caller_explicit_slots[2], NonMaxUsize::new(15));",
          "    assert_eq!(caller_explicit_slots[3], NonMaxUsize::new(15));",
          "    assert_eq!(caller_explicit_slots[4], None);",
          "    assert_eq!(caller_explicit_slots[5], None);",
          "    assert_eq!(caller_explicit_slots[6], None);",
          "    assert_eq!(caller_explicit_slots[7], None);",
          "    assert_eq!(caller_explicit_slots[8], None);",
          "    assert_eq!(caller_explicit_slots[9], None);",
          "    assert_eq!(caller_explicit_slots[10], None);",
          "    assert_eq!(caller_explicit_slots[11], None);",
          "    assert_eq!(caller_explicit_slots[12], None);",
          "    assert_eq!(caller_explicit_slots[13], None);",
          "    assert_eq!(caller_explicit_slots[14], None);",
          "    assert_eq!(caller_explicit_slots[15], None);",
          "    assert_eq!(caller_explicit_slots[16], None);",
          "    assert_eq!(caller_explicit_slots[17], None);",
          "    assert_eq!(caller_explicit_slots[18], None);",
          "    assert_eq!(caller_explicit_slots[19], None);",
          "    assert_eq!(caller_explicit_slots[20], None);",
          "    assert_eq!(caller_explicit_slots[21], None);",
          "    assert_eq!(caller_explicit_slots[22], None);",
          "    assert_eq!(caller_explicit_slots[23], None);",
          "    assert_eq!(caller_explicit_slots[24], None);",
          "    assert_eq!(caller_explicit_slots[25], None);",
          "    assert_eq!(caller_explicit_slots[26], None);",
          "    assert_eq!(caller_explicit_slots[27], None);",
          "    assert_eq!(caller_explicit_slots[28], None);",
          "    assert_eq!(caller_explicit_slots[29], None);",
          "    assert_eq!(caller_explicit_slots[30], None);",
          "    assert_eq!(caller_explicit_slots[31], None);"
        ],
        "code": [
          "{",
          "    let mut caller_explicit_slots = vec![None; 32]; // Length is greater than highest slot",
          "",
          "    let slots = Slots(0b00000000000000000000000000001111); // Non-empty, with slots 0, 1, 2, and 3 set",
          "    let at = 15; // Valid usize within the range",
          "",
          "    slots.apply(at, &mut caller_explicit_slots);",
          "    assert_eq!(caller_explicit_slots[0], NonMaxUsize::new(15));",
          "    assert_eq!(caller_explicit_slots[1], NonMaxUsize::new(15));",
          "    assert_eq!(caller_explicit_slots[2], NonMaxUsize::new(15));",
          "    assert_eq!(caller_explicit_slots[3], NonMaxUsize::new(15));",
          "    assert_eq!(caller_explicit_slots[4], None);",
          "    assert_eq!(caller_explicit_slots[5], None);",
          "    assert_eq!(caller_explicit_slots[6], None);",
          "    assert_eq!(caller_explicit_slots[7], None);",
          "    assert_eq!(caller_explicit_slots[8], None);",
          "    assert_eq!(caller_explicit_slots[9], None);",
          "    assert_eq!(caller_explicit_slots[10], None);",
          "    assert_eq!(caller_explicit_slots[11], None);",
          "    assert_eq!(caller_explicit_slots[12], None);",
          "    assert_eq!(caller_explicit_slots[13], None);",
          "    assert_eq!(caller_explicit_slots[14], None);",
          "    assert_eq!(caller_explicit_slots[15], None);",
          "    assert_eq!(caller_explicit_slots[16], None);",
          "    assert_eq!(caller_explicit_slots[17], None);",
          "    assert_eq!(caller_explicit_slots[18], None);",
          "    assert_eq!(caller_explicit_slots[19], None);",
          "    assert_eq!(caller_explicit_slots[20], None);",
          "    assert_eq!(caller_explicit_slots[21], None);",
          "    assert_eq!(caller_explicit_slots[22], None);",
          "    assert_eq!(caller_explicit_slots[23], None);",
          "    assert_eq!(caller_explicit_slots[24], None);",
          "    assert_eq!(caller_explicit_slots[25], None);",
          "    assert_eq!(caller_explicit_slots[26], None);",
          "    assert_eq!(caller_explicit_slots[27], None);",
          "    assert_eq!(caller_explicit_slots[28], None);",
          "    assert_eq!(caller_explicit_slots[29], None);",
          "    assert_eq!(caller_explicit_slots[30], None);",
          "    assert_eq!(caller_explicit_slots[31], None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut caller_explicit_slots = vec![None; 33]; // Length is greater than highest slot",
          "",
          "    let slots = Slots(0b00000000000000000000000000011111); // Non-empty, with slots 0 to 4 set",
          "    let at = 31; // Valid usize on the upper boundary",
          "",
          "    slots.apply(at, &mut caller_explicit_slots);",
          "}"
        ],
        "oracle": [
          "    caller_explicit_slots[0] = NonMaxUsize::new(31);",
          "    caller_explicit_slots[1] = NonMaxUsize::new(31);",
          "    caller_explicit_slots[2] = NonMaxUsize::new(31);",
          "    caller_explicit_slots[3] = NonMaxUsize::new(31);",
          "    caller_explicit_slots[4] = NonMaxUsize::new(31);",
          "    assert_eq!(caller_explicit_slots[0], NonMaxUsize::new(31));",
          "    assert_eq!(caller_explicit_slots[1], NonMaxUsize::new(31));",
          "    assert_eq!(caller_explicit_slots[2], NonMaxUsize::new(31));",
          "    assert_eq!(caller_explicit_slots[3], NonMaxUsize::new(31));",
          "    assert_eq!(caller_explicit_slots[4], NonMaxUsize::new(31));",
          "    assert!(caller_explicit_slots[5].is_none());",
          "    assert!(caller_explicit_slots[6].is_none());",
          "    assert!(caller_explicit_slots[7].is_none());",
          "    assert!(caller_explicit_slots[8].is_none());",
          "    assert!(caller_explicit_slots[9].is_none());",
          "    assert!(caller_explicit_slots[10].is_none());",
          "    assert!(caller_explicit_slots[11].is_none());",
          "    assert!(caller_explicit_slots[12].is_none());",
          "    assert!(caller_explicit_slots[13].is_none());",
          "    assert!(caller_explicit_slots[14].is_none());",
          "    assert!(caller_explicit_slots[15].is_none());",
          "    assert!(caller_explicit_slots[16].is_none());",
          "    assert!(caller_explicit_slots[17].is_none());",
          "    assert!(caller_explicit_slots[18].is_none());",
          "    assert!(caller_explicit_slots[19].is_none());",
          "    assert!(caller_explicit_slots[20].is_none());",
          "    assert!(caller_explicit_slots[21].is_none());",
          "    assert!(caller_explicit_slots[22].is_none());",
          "    assert!(caller_explicit_slots[23].is_none());",
          "    assert!(caller_explicit_slots[24].is_none());",
          "    assert!(caller_explicit_slots[25].is_none());",
          "    assert!(caller_explicit_slots[26].is_none());",
          "    assert!(caller_explicit_slots[27].is_none());",
          "    assert!(caller_explicit_slots[28].is_none());",
          "    assert!(caller_explicit_slots[29].is_none());",
          "    assert!(caller_explicit_slots[30].is_none());",
          "    assert!(caller_explicit_slots[31].is_none());",
          "    assert!(caller_explicit_slots[32].is_none());"
        ],
        "code": [
          "{",
          "    let mut caller_explicit_slots = vec![None; 33]; // Length is greater than highest slot",
          "",
          "    let slots = Slots(0b00000000000000000000000000011111); // Non-empty, with slots 0 to 4 set",
          "    let at = 31; // Valid usize on the upper boundary",
          "",
          "    slots.apply(at, &mut caller_explicit_slots);",
          "    caller_explicit_slots[0] = NonMaxUsize::new(31);",
          "    caller_explicit_slots[1] = NonMaxUsize::new(31);",
          "    caller_explicit_slots[2] = NonMaxUsize::new(31);",
          "    caller_explicit_slots[3] = NonMaxUsize::new(31);",
          "    caller_explicit_slots[4] = NonMaxUsize::new(31);",
          "    assert_eq!(caller_explicit_slots[0], NonMaxUsize::new(31));",
          "    assert_eq!(caller_explicit_slots[1], NonMaxUsize::new(31));",
          "    assert_eq!(caller_explicit_slots[2], NonMaxUsize::new(31));",
          "    assert_eq!(caller_explicit_slots[3], NonMaxUsize::new(31));",
          "    assert_eq!(caller_explicit_slots[4], NonMaxUsize::new(31));",
          "    assert!(caller_explicit_slots[5].is_none());",
          "    assert!(caller_explicit_slots[6].is_none());",
          "    assert!(caller_explicit_slots[7].is_none());",
          "    assert!(caller_explicit_slots[8].is_none());",
          "    assert!(caller_explicit_slots[9].is_none());",
          "    assert!(caller_explicit_slots[10].is_none());",
          "    assert!(caller_explicit_slots[11].is_none());",
          "    assert!(caller_explicit_slots[12].is_none());",
          "    assert!(caller_explicit_slots[13].is_none());",
          "    assert!(caller_explicit_slots[14].is_none());",
          "    assert!(caller_explicit_slots[15].is_none());",
          "    assert!(caller_explicit_slots[16].is_none());",
          "    assert!(caller_explicit_slots[17].is_none());",
          "    assert!(caller_explicit_slots[18].is_none());",
          "    assert!(caller_explicit_slots[19].is_none());",
          "    assert!(caller_explicit_slots[20].is_none());",
          "    assert!(caller_explicit_slots[21].is_none());",
          "    assert!(caller_explicit_slots[22].is_none());",
          "    assert!(caller_explicit_slots[23].is_none());",
          "    assert!(caller_explicit_slots[24].is_none());",
          "    assert!(caller_explicit_slots[25].is_none());",
          "    assert!(caller_explicit_slots[26].is_none());",
          "    assert!(caller_explicit_slots[27].is_none());",
          "    assert!(caller_explicit_slots[28].is_none());",
          "    assert!(caller_explicit_slots[29].is_none());",
          "    assert!(caller_explicit_slots[30].is_none());",
          "    assert!(caller_explicit_slots[31].is_none());",
          "    assert!(caller_explicit_slots[32].is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]