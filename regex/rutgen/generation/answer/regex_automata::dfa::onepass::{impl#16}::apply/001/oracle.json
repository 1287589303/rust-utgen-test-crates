[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slots = Slots(0); // self.is_empty() is true",
          "    let at = 5; // any valid usize",
          "    let mut caller_explicit_slots: Vec<Option<NonMaxUsize>> = vec![None; 10]; // slice of length 10",
          "    slots.apply(at, &mut caller_explicit_slots);",
          "}"
        ],
        "oracle": [
          "    assert!(caller_explicit_slots.iter().all(|&slot| slot.is_none()));"
        ],
        "code": [
          "{",
          "    let slots = Slots(0); // self.is_empty() is true",
          "    let at = 5; // any valid usize",
          "    let mut caller_explicit_slots: Vec<Option<NonMaxUsize>> = vec![None; 10]; // slice of length 10",
          "    slots.apply(at, &mut caller_explicit_slots);",
          "    assert!(caller_explicit_slots.iter().all(|&slot| slot.is_none()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slots = Slots(0); // self.is_empty() is true",
          "    let at = 1; // any valid usize",
          "    let mut caller_explicit_slots: Vec<Option<NonMaxUsize>> = vec![]; // zero length slice",
          "    slots.apply(at, &mut caller_explicit_slots);",
          "}"
        ],
        "oracle": [
          "    assert!(caller_explicit_slots.is_empty());"
        ],
        "code": [
          "{",
          "    let slots = Slots(0); // self.is_empty() is true",
          "    let at = 1; // any valid usize",
          "    let mut caller_explicit_slots: Vec<Option<NonMaxUsize>> = vec![]; // zero length slice",
          "    slots.apply(at, &mut caller_explicit_slots);",
          "    assert!(caller_explicit_slots.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]