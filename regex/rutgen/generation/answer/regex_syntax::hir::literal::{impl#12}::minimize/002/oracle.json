[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut literals = vec![",
          "        Literal::exact(vec![b'a']), ",
          "        Literal::exact(vec![b'b']),",
          "        Literal::exact(vec![b'c']),",
          "    ];",
          "    let keep_exact = false;",
          "    PreferenceTrie::minimize(&mut literals, keep_exact);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(literals.len(), 3);",
          "    assert!(literals[0].is_exact());",
          "    assert!(literals[1].is_exact());",
          "    assert!(literals[2].is_exact());",
          "    assert!(literals[0].as_bytes() == b\"a\");",
          "    assert!(literals[1].as_bytes() == b\"b\");",
          "    assert!(literals[2].as_bytes() == b\"c\");"
        ],
        "code": [
          "{",
          "    let mut literals = vec![",
          "        Literal::exact(vec![b'a']), ",
          "        Literal::exact(vec![b'b']),",
          "        Literal::exact(vec![b'c']),",
          "    ];",
          "    let keep_exact = false;",
          "    PreferenceTrie::minimize(&mut literals, keep_exact);",
          "    assert_eq!(literals.len(), 3);",
          "    assert!(literals[0].is_exact());",
          "    assert!(literals[1].is_exact());",
          "    assert!(literals[2].is_exact());",
          "    assert!(literals[0].as_bytes() == b\"a\");",
          "    assert!(literals[1].as_bytes() == b\"b\");",
          "    assert!(literals[2].as_bytes() == b\"c\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut literals = vec![",
          "        Literal::exact(vec![b'x']),",
          "    ];",
          "    let keep_exact = false;",
          "    PreferenceTrie::minimize(&mut literals, keep_exact);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(literals.len(), 0);",
          "    assert_eq!(literals.is_empty(), true);"
        ],
        "code": [
          "{",
          "    let mut literals = vec![",
          "        Literal::exact(vec![b'x']),",
          "    ];",
          "    let keep_exact = false;",
          "    PreferenceTrie::minimize(&mut literals, keep_exact);",
          "    assert_eq!(literals.len(), 0);",
          "    assert_eq!(literals.is_empty(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut literals = vec![",
          "        Literal::exact(vec![b'a']),",
          "        Literal::exact(vec![b'a', b'b']),",
          "        Literal::exact(vec![b'b', b'a']),",
          "    ];",
          "    let keep_exact = false;",
          "    PreferenceTrie::minimize(&mut literals, keep_exact);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(literals.len(), 2);",
          "    assert!(literals[0].is_exact());",
          "    assert_eq!(literals[0].as_bytes(), b\"a\");",
          "    assert!(literals[1].is_exact());",
          "    assert_eq!(literals[1].as_bytes(), b\"a\");",
          "    assert!(!literals.contains(&Literal::exact(vec![b'b', b'a'])));"
        ],
        "code": [
          "{",
          "    let mut literals = vec![",
          "        Literal::exact(vec![b'a']),",
          "        Literal::exact(vec![b'a', b'b']),",
          "        Literal::exact(vec![b'b', b'a']),",
          "    ];",
          "    let keep_exact = false;",
          "    PreferenceTrie::minimize(&mut literals, keep_exact);",
          "    assert_eq!(literals.len(), 2);",
          "    assert!(literals[0].is_exact());",
          "    assert_eq!(literals[0].as_bytes(), b\"a\");",
          "    assert!(literals[1].is_exact());",
          "    assert_eq!(literals[1].as_bytes(), b\"a\");",
          "    assert!(!literals.contains(&Literal::exact(vec![b'b', b'a'])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut literals = vec![",
          "        Literal::exact(vec![b'1']),",
          "        Literal::exact(vec![b'2']),",
          "        Literal::exact(vec![b'3']),",
          "        Literal::exact(vec![b'4']),",
          "    ];",
          "    let keep_exact = false;",
          "    PreferenceTrie::minimize(&mut literals, keep_exact);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(literals.len(), 4);",
          "    assert!(literals[0].is_exact());",
          "    assert!(literals[1].is_exact());",
          "    assert!(literals[2].is_exact());",
          "    assert!(literals[3].is_exact());",
          "    assert!(literals.iter().all(|lit| lit.is_empty() == false));"
        ],
        "code": [
          "{",
          "    let mut literals = vec![",
          "        Literal::exact(vec![b'1']),",
          "        Literal::exact(vec![b'2']),",
          "        Literal::exact(vec![b'3']),",
          "        Literal::exact(vec![b'4']),",
          "    ];",
          "    let keep_exact = false;",
          "    PreferenceTrie::minimize(&mut literals, keep_exact);",
          "    assert_eq!(literals.len(), 4);",
          "    assert!(literals[0].is_exact());",
          "    assert!(literals[1].is_exact());",
          "    assert!(literals[2].is_exact());",
          "    assert!(literals[3].is_exact());",
          "    assert!(literals.iter().all(|lit| lit.is_empty() == false));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]