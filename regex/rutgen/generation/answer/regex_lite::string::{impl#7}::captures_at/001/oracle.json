[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = \"eschew\";",
          "    let start = 0;",
          "    let _ = re.captures_at(hay, start);",
          "}"
        ],
        "oracle": [
          "    assert!(re.captures_at(hay, start).is_some());",
          "    assert_eq!(re.captures_at(hay, start).unwrap()[0], \"chew\");"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = \"eschew\";",
          "    let start = 0;",
          "    let _ = re.captures_at(hay, start);",
          "    assert!(re.captures_at(hay, start).is_some());",
          "    assert_eq!(re.captures_at(hay, start).unwrap()[0], \"chew\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = \"eschew\";",
          "    let start = 1;",
          "    let _ = re.captures_at(hay, start);",
          "}"
        ],
        "oracle": [
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = \"eschew\";",
          "    let start = 1;",
          "    assert_eq!(re.captures_at(hay, start).is_some(), true);",
          "    assert_eq!(re.captures_at(hay, start).unwrap().haystack, hay);",
          "    assert_eq!(re.captures_at(hay, start).unwrap().slots.0.len(), expected_slots_length);",
          "    assert_eq!(re.captures_at(hay, start).unwrap()[0], \"chew\");"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = \"eschew\";",
          "    let start = 1;",
          "    let _ = re.captures_at(hay, start);",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = \"eschew\";",
          "    let start = 1;",
          "    assert_eq!(re.captures_at(hay, start).is_some(), true);",
          "    assert_eq!(re.captures_at(hay, start).unwrap().haystack, hay);",
          "    assert_eq!(re.captures_at(hay, start).unwrap().slots.0.len(), expected_slots_length);",
          "    assert_eq!(re.captures_at(hay, start).unwrap()[0], \"chew\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = \"eschew\";",
          "    let start = 2;",
          "    let _ = re.captures_at(hay, start);",
          "}"
        ],
        "oracle": [
          "    assert!(re.captures_at(hay, start).is_some());",
          "    let captures = re.captures_at(hay, start).unwrap();",
          "    assert_eq!(&captures.haystack[start..], \"chew\");"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = \"eschew\";",
          "    let start = 2;",
          "    let _ = re.captures_at(hay, start);",
          "    assert!(re.captures_at(hay, start).is_some());",
          "    let captures = re.captures_at(hay, start).unwrap();",
          "    assert_eq!(&captures.haystack[start..], \"chew\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = \"eschew\";",
          "    let start = hay.len() - 1;",
          "    let _ = re.captures_at(hay, start);",
          "}"
        ],
        "oracle": [
          "    assert!(re.captures_at(hay, start).is_some());",
          "    assert_eq!(re.captures_at(hay, start).unwrap()[0], \"chew\");",
          "    assert_eq!(re.captures_at(hay, hay.len()).is_none(), true);",
          "    assert_eq!(re.captures_at(hay, hay.len() - 2).unwrap()[0], \"chew\");",
          "    assert_eq!(re.captures_at(hay, 0).unwrap()[0], \"chew\");"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = \"eschew\";",
          "    let start = hay.len() - 1;",
          "    let _ = re.captures_at(hay, start);",
          "    assert!(re.captures_at(hay, start).is_some());",
          "    assert_eq!(re.captures_at(hay, start).unwrap()[0], \"chew\");",
          "    assert_eq!(re.captures_at(hay, hay.len()).is_none(), true);",
          "    assert_eq!(re.captures_at(hay, hay.len() - 2).unwrap()[0], \"chew\");",
          "    assert_eq!(re.captures_at(hay, 0).unwrap()[0], \"chew\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = \"eschew\";",
          "    let start = hay.len(); // This should panic",
          "    let _ = re.captures_at(hay, start);",
          "}"
        ],
        "oracle": [
          "    assert!(re.captures_at(hay, start).is_none());",
          "    assert!(re.captures_at(\"eschew\", 0).is_some());",
          "    assert!(re.captures_at(\"eschew\", 2).is_none());",
          "    assert_eq!(re.captures_at(\"eschew\", 3).unwrap()[0], \"chew\");",
          "    assert!(re.captures_at(hay, start - 1).is_some());",
          "    assert!(re.captures_at(hay, hay.len() - 1).is_none());",
          "    assert!(re.captures_at(hay, 1).is_some());",
          "    assert!(re.captures_at(hay, hay.len() + 1).is_none());"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = \"eschew\";",
          "    let start = hay.len(); // This should panic",
          "    let _ = re.captures_at(hay, start);",
          "    assert!(re.captures_at(hay, start).is_none());",
          "    assert!(re.captures_at(\"eschew\", 0).is_some());",
          "    assert!(re.captures_at(\"eschew\", 2).is_none());",
          "    assert_eq!(re.captures_at(\"eschew\", 3).unwrap()[0], \"chew\");",
          "    assert!(re.captures_at(hay, start - 1).is_some());",
          "    assert!(re.captures_at(hay, hay.len() - 1).is_none());",
          "    assert!(re.captures_at(hay, 1).is_some());",
          "    assert!(re.captures_at(hay, hay.len() + 1).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]