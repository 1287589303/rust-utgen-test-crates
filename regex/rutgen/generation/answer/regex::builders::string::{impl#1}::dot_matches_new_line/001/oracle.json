[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = RegexSetBuilder::new([\"foo.bar\"])",
          "        .dot_matches_new_line(true)",
          "        .build()",
          "        .unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(re.is_match(\"foo\\nbar\"), true);",
          "    assert_eq!(re.is_match(\"foobar\"), false);",
          "    assert_eq!(re.is_match(\"foo\\nbaz\"), false);",
          "    assert_eq!(re.is_match(\"foo.bar\"), false);",
          "    assert_eq!(re.is_match(\"foo\\r\\nbar\"), false);"
        ],
        "code": [
          "{",
          "    let re = RegexSetBuilder::new([\"foo.bar\"])",
          "        .dot_matches_new_line(true)",
          "        .build()",
          "        .unwrap();",
          "    assert_eq!(re.is_match(\"foo\\nbar\"), true);",
          "    assert_eq!(re.is_match(\"foobar\"), false);",
          "    assert_eq!(re.is_match(\"foo\\nbaz\"), false);",
          "    assert_eq!(re.is_match(\"foo.bar\"), false);",
          "    assert_eq!(re.is_match(\"foo\\r\\nbar\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = RegexSetBuilder::new([\"foo.bar\"])",
          "        .dot_matches_new_line(false)",
          "        .build()",
          "        .unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(re.is_match(\"foo\\nbar\"), false);"
        ],
        "code": [
          "{",
          "    let re = RegexSetBuilder::new([\"foo.bar\"])",
          "        .dot_matches_new_line(false)",
          "        .build()",
          "        .unwrap();",
          "    assert_eq!(re.is_match(\"foo\\nbar\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = RegexSetBuilder::new([])",
          "        .dot_matches_new_line(false)",
          "        .build()",
          "        .unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(re.is_match(\"foo\\nbar\"), false);"
        ],
        "code": [
          "{",
          "    let re = RegexSetBuilder::new([])",
          "        .dot_matches_new_line(false)",
          "        .build()",
          "        .unwrap();",
          "    assert_eq!(re.is_match(\"foo\\nbar\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = RegexSetBuilder::new([\"foo.*bar\"])",
          "        .dot_matches_new_line(true)",
          "        .build()",
          "        .unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(re.is_match(\"foo\\nbar\"));",
          "    assert!(!re.is_match(\"foobar\"));",
          "    let re2 = RegexSetBuilder::new([\"foo.*bar\"])",
          "    .dot_matches_new_line(false)",
          "    .build()",
          "    .unwrap();",
          "    assert!(re2.is_match(\"foobar\"));",
          "    assert!(!re2.is_match(\"foo\\nbar\"));",
          "    let re3 = RegexSetBuilder::new([\"foo.bar\"])",
          "    .dot_matches_new_line(true)",
          "    .build()",
          "    .unwrap();",
          "    assert!(re3.is_match(\"foo\\nbar\"));",
          "    assert!(!re3.is_match(\"foo.bar\"));",
          "    let re4 = RegexSetBuilder::new([\"foo.bar\"])",
          "    .dot_matches_new_line(false)",
          "    .build()",
          "    .unwrap();",
          "    assert!(!re4.is_match(\"foo\\nbar\"));",
          "    assert!(re4.is_match(\"foo.bar\"));"
        ],
        "code": [
          "{",
          "    let re = RegexSetBuilder::new([\"foo.*bar\"])",
          "        .dot_matches_new_line(true)",
          "        .build()",
          "        .unwrap();",
          "    assert!(re.is_match(\"foo\\nbar\"));",
          "    assert!(!re.is_match(\"foobar\"));",
          "    let re2 = RegexSetBuilder::new([\"foo.*bar\"])",
          "    .dot_matches_new_line(false)",
          "    .build()",
          "    .unwrap();",
          "    assert!(re2.is_match(\"foobar\"));",
          "    assert!(!re2.is_match(\"foo\\nbar\"));",
          "    let re3 = RegexSetBuilder::new([\"foo.bar\"])",
          "    .dot_matches_new_line(true)",
          "    .build()",
          "    .unwrap();",
          "    assert!(re3.is_match(\"foo\\nbar\"));",
          "    assert!(!re3.is_match(\"foo.bar\"));",
          "    let re4 = RegexSetBuilder::new([\"foo.bar\"])",
          "    .dot_matches_new_line(false)",
          "    .build()",
          "    .unwrap();",
          "    assert!(!re4.is_match(\"foo\\nbar\"));",
          "    assert!(re4.is_match(\"foo.bar\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = RegexSetBuilder::new([\"foo.*bar\", \"baz.*qux\"])",
          "        .dot_matches_new_line(false)",
          "        .build()",
          "        .unwrap();",
          "}"
        ],
        "oracle": [
          "    let re = RegexSetBuilder::new([\"foo.*bar\", \"baz.*qux\"])",
          "    .dot_matches_new_line(false)",
          "    .build()",
          "    .unwrap();",
          "    assert_eq!(re.is_match(\"foo\\nbar\"), false);",
          "    assert_eq!(re.is_match(\"foobarbazqux\"), true);",
          "    assert_eq!(re.is_match(\"bazqux\"), true);",
          "    assert_eq!(re.is_match(\"foo\\nbazqux\"), false);",
          "    assert_eq!(re.is_match(\"foo.bar\"), true);"
        ],
        "code": [
          "{",
          "    let re = RegexSetBuilder::new([\"foo.*bar\", \"baz.*qux\"])",
          "        .dot_matches_new_line(false)",
          "        .build()",
          "        .unwrap();",
          "    let re = RegexSetBuilder::new([\"foo.*bar\", \"baz.*qux\"])",
          "    .dot_matches_new_line(false)",
          "    .build()",
          "    .unwrap();",
          "    assert_eq!(re.is_match(\"foo\\nbar\"), false);",
          "    assert_eq!(re.is_match(\"foobarbazqux\"), true);",
          "    assert_eq!(re.is_match(\"bazqux\"), true);",
          "    assert_eq!(re.is_match(\"foo\\nbazqux\"), false);",
          "    assert_eq!(re.is_match(\"foo.bar\"), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re_zero = RegexSetBuilder::new([\"foo.bar\"])",
          "        .size_limit(0)",
          "        .build()",
          "        .unwrap();",
          "    let re_one = RegexSetBuilder::new([\"foo.bar\"])",
          "        .size_limit(1)",
          "        .build()",
          "        .unwrap();",
          "    let re_max = RegexSetBuilder::new([\"foo.bar\"])",
          "        .size_limit(usize::MAX)",
          "        .build()",
          "        .unwrap();",
          "}"
        ],
        "oracle": [
          "    let re_zero = RegexSetBuilder::new([\"foo.bar\"]).size_limit(0).build().unwrap();",
          "    let re_one = RegexSetBuilder::new([\"foo.bar\"]).size_limit(1).build().unwrap();",
          "    let re_max = RegexSetBuilder::new([\"foo.bar\"]).size_limit(usize::MAX).build().unwrap();",
          "    assert!(re_zero.is_match(\"foo\\nbar\"));",
          "    assert!(re_one.is_match(\"foo\\nbar\"));",
          "    assert!(re_max.is_match(\"foo\\nbar\"));",
          "    assert!(!re_zero.is_match(\"foobar\"));",
          "    assert!(!re_one.is_match(\"foobar\"));",
          "    assert!(!re_max.is_match(\"foobar\"));"
        ],
        "code": [
          "{",
          "    let re_zero = RegexSetBuilder::new([\"foo.bar\"])",
          "        .size_limit(0)",
          "        .build()",
          "        .unwrap();",
          "    let re_one = RegexSetBuilder::new([\"foo.bar\"])",
          "        .size_limit(1)",
          "        .build()",
          "        .unwrap();",
          "    let re_max = RegexSetBuilder::new([\"foo.bar\"])",
          "        .size_limit(usize::MAX)",
          "        .build()",
          "        .unwrap();",
          "    let re_zero = RegexSetBuilder::new([\"foo.bar\"]).size_limit(0).build().unwrap();",
          "    let re_one = RegexSetBuilder::new([\"foo.bar\"]).size_limit(1).build().unwrap();",
          "    let re_max = RegexSetBuilder::new([\"foo.bar\"]).size_limit(usize::MAX).build().unwrap();",
          "    assert!(re_zero.is_match(\"foo\\nbar\"));",
          "    assert!(re_one.is_match(\"foo\\nbar\"));",
          "    assert!(re_max.is_match(\"foo\\nbar\"));",
          "    assert!(!re_zero.is_match(\"foobar\"));",
          "    assert!(!re_one.is_match(\"foobar\"));",
          "    assert!(!re_max.is_match(\"foobar\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re_zero = RegexSetBuilder::new([\"foo.bar\"])",
          "        .nest_limit(0)",
          "        .build()",
          "        .unwrap();",
          "    let re_one = RegexSetBuilder::new([\"foo.bar\"])",
          "        .nest_limit(1)",
          "        .build()",
          "        .unwrap();",
          "    let re_max = RegexSetBuilder::new([\"foo.bar\"])",
          "        .nest_limit(u32::MAX)",
          "        .build()",
          "        .unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(RegexSetBuilder::new([\"foo.bar\"]).nest_limit(0).build().unwrap().is_match(\"foo.bar\"), false);",
          "    assert_eq!(RegexSetBuilder::new([\"foo.bar\"]).nest_limit(1).build().unwrap().is_match(\"foo.bar\"), true);",
          "    assert_eq!(RegexSetBuilder::new([\"foo.bar\"]).nest_limit(u32::MAX).build().unwrap().is_match(\"foo.bar\"), true);"
        ],
        "code": [
          "{",
          "    let re_zero = RegexSetBuilder::new([\"foo.bar\"])",
          "        .nest_limit(0)",
          "        .build()",
          "        .unwrap();",
          "    let re_one = RegexSetBuilder::new([\"foo.bar\"])",
          "        .nest_limit(1)",
          "        .build()",
          "        .unwrap();",
          "    let re_max = RegexSetBuilder::new([\"foo.bar\"])",
          "        .nest_limit(u32::MAX)",
          "        .build()",
          "        .unwrap();",
          "    assert_eq!(RegexSetBuilder::new([\"foo.bar\"]).nest_limit(0).build().unwrap().is_match(\"foo.bar\"), false);",
          "    assert_eq!(RegexSetBuilder::new([\"foo.bar\"]).nest_limit(1).build().unwrap().is_match(\"foo.bar\"), true);",
          "    assert_eq!(RegexSetBuilder::new([\"foo.bar\"]).nest_limit(u32::MAX).build().unwrap().is_match(\"foo.bar\"), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re_zero = RegexSetBuilder::new([\"foo.bar\"])",
          "        .line_terminator(0)",
          "        .build()",
          "        .unwrap();",
          "    let re_ten = RegexSetBuilder::new([\"foo.bar\"])",
          "        .line_terminator(10)",
          "        .build()",
          "        .unwrap();",
          "    let re_two_fifty_five = RegexSetBuilder::new([\"foo.bar\"])",
          "        .line_terminator(255)",
          "        .build()",
          "        .unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(re_zero.line_terminator(0), re_zero);",
          "    assert_eq!(re_ten.line_terminator(10), re_ten);",
          "    assert_eq!(re_two_fifty_five.line_terminator(255), re_two_fifty_five);",
          "    assert!(re_zero.is_match(\"foo\\nbar\"));",
          "    assert!(re_ten.is_match(\"foo\\nbar\"));",
          "    assert!(re_two_fifty_five.is_match(\"foo\\nbar\"));"
        ],
        "code": [
          "{",
          "    let re_zero = RegexSetBuilder::new([\"foo.bar\"])",
          "        .line_terminator(0)",
          "        .build()",
          "        .unwrap();",
          "    let re_ten = RegexSetBuilder::new([\"foo.bar\"])",
          "        .line_terminator(10)",
          "        .build()",
          "        .unwrap();",
          "    let re_two_fifty_five = RegexSetBuilder::new([\"foo.bar\"])",
          "        .line_terminator(255)",
          "        .build()",
          "        .unwrap();",
          "    assert_eq!(re_zero.line_terminator(0), re_zero);",
          "    assert_eq!(re_ten.line_terminator(10), re_ten);",
          "    assert_eq!(re_two_fifty_five.line_terminator(255), re_two_fifty_five);",
          "    assert!(re_zero.is_match(\"foo\\nbar\"));",
          "    assert!(re_ten.is_match(\"foo\\nbar\"));",
          "    assert!(re_two_fifty_five.is_match(\"foo\\nbar\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re_true = RegexSetBuilder::new([\"foo\"])",
          "        .case_insensitive(true)",
          "        .build()",
          "        .unwrap();",
          "    let re_false = RegexSetBuilder::new([\"foo\"])",
          "        .case_insensitive(false)",
          "        .build()",
          "        .unwrap();",
          "}"
        ],
        "oracle": [
          "    let re_dot_true = RegexSetBuilder::new([\"foo.bar\"])",
          "    .dot_matches_new_line(true)",
          "    .build()",
          "    .unwrap();",
          "    let re_dot_false = RegexSetBuilder::new([\"foo.bar\"])",
          "    .dot_matches_new_line(false)",
          "    .build()",
          "    .unwrap();"
        ],
        "code": [
          "{",
          "    let re_true = RegexSetBuilder::new([\"foo\"])",
          "        .case_insensitive(true)",
          "        .build()",
          "        .unwrap();",
          "    let re_false = RegexSetBuilder::new([\"foo\"])",
          "        .case_insensitive(false)",
          "        .build()",
          "        .unwrap();",
          "    let re_dot_true = RegexSetBuilder::new([\"foo.bar\"])",
          "    .dot_matches_new_line(true)",
          "    .build()",
          "    .unwrap();",
          "    let re_dot_false = RegexSetBuilder::new([\"foo.bar\"])",
          "    .dot_matches_new_line(false)",
          "    .build()",
          "    .unwrap();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]