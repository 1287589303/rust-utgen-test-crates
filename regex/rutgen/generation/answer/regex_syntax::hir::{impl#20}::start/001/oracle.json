[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassBytesRange::new(0, 255);",
          "    let start = range.start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start, 0);"
        ],
        "code": [
          "{",
          "    let range = ClassBytesRange::new(0, 255);",
          "    let start = range.start();",
          "    assert_eq!(start, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassBytesRange::new(128, 200);",
          "    let start = range.start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start, 128);"
        ],
        "code": [
          "{",
          "    let range = ClassBytesRange::new(128, 200);",
          "    let start = range.start();",
          "    assert_eq!(start, 128);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassBytesRange::new(255, 255);",
          "    let start = range.start();",
          "}"
        ],
        "oracle": [
          "    let range = ClassBytesRange::new(255, 255); assert_eq!(range.start(), 255);",
          "    let range = ClassBytesRange::new(0, 255); assert_eq!(range.start(), 0);",
          "    let range = ClassBytesRange::new(1, 1); assert_eq!(range.start(), 1);",
          "    let range = ClassBytesRange::new(100, 200); assert_eq!(range.start(), 100);",
          "    let range = ClassBytesRange::new(50, 50); assert_eq!(range.start(), 50);"
        ],
        "code": [
          "{",
          "    let range = ClassBytesRange::new(255, 255);",
          "    let start = range.start();",
          "    let range = ClassBytesRange::new(255, 255); assert_eq!(range.start(), 255);",
          "    let range = ClassBytesRange::new(0, 255); assert_eq!(range.start(), 0);",
          "    let range = ClassBytesRange::new(1, 1); assert_eq!(range.start(), 1);",
          "    let range = ClassBytesRange::new(100, 200); assert_eq!(range.start(), 100);",
          "    let range = ClassBytesRange::new(50, 50); assert_eq!(range.start(), 50);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassBytesRange::new(100, 100);",
          "    let start = range.start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start, 100);"
        ],
        "code": [
          "{",
          "    let range = ClassBytesRange::new(100, 100);",
          "    let start = range.start();",
          "    assert_eq!(start, 100);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassBytesRange::new(50, 150);",
          "    let start = range.start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start, 50);"
        ],
        "code": [
          "{",
          "    let range = ClassBytesRange::new(50, 150);",
          "    let start = range.start();",
          "    assert_eq!(start, 50);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]