[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special { ",
          "        max: StateID(5), ",
          "        quit_id: StateID(1), ",
          "        min_match: StateID(2), ",
          "        max_match: StateID(3), ",
          "        min_accel: StateID(10), ",
          "        max_accel: StateID(20), ",
          "        min_start: StateID(4), ",
          "        max_start: StateID(6) ",
          "    };",
          "    let id = StateID(9);",
          "    special.is_accel_state(id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(special.is_accel_state(StateID(9)), false);",
          "    assert!(special.is_dead_state(StateID(9)) == false);",
          "    assert!(special.min_accel <= StateID(9) == false);",
          "    assert!(special.max_accel >= StateID(9));"
        ],
        "code": [
          "{",
          "    let special = Special { ",
          "        max: StateID(5), ",
          "        quit_id: StateID(1), ",
          "        min_match: StateID(2), ",
          "        max_match: StateID(3), ",
          "        min_accel: StateID(10), ",
          "        max_accel: StateID(20), ",
          "        min_start: StateID(4), ",
          "        max_start: StateID(6) ",
          "    };",
          "    let id = StateID(9);",
          "    special.is_accel_state(id);",
          "    assert_eq!(special.is_accel_state(StateID(9)), false);",
          "    assert!(special.is_dead_state(StateID(9)) == false);",
          "    assert!(special.min_accel <= StateID(9) == false);",
          "    assert!(special.max_accel >= StateID(9));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special { ",
          "        max: StateID(5), ",
          "        quit_id: StateID(1), ",
          "        min_match: StateID(2), ",
          "        max_match: StateID(3), ",
          "        min_accel: StateID(10), ",
          "        max_accel: StateID(20), ",
          "        min_start: StateID(4), ",
          "        max_start: StateID(6) ",
          "    };",
          "    let id = StateID(21);",
          "    special.is_accel_state(id);",
          "}"
        ],
        "oracle": [
          "    assert!(!special.is_dead_state(id));",
          "    assert!(special.min_accel <= id);",
          "    assert!(id <= special.max_accel);",
          "    assert_eq!(special.is_accel_state(id), false);",
          "    id = StateID(10);",
          "    assert!(!special.is_dead_state(id));",
          "    assert!(special.min_accel <= id);",
          "    assert!(id <= special.max_accel);",
          "    assert_eq!(special.is_accel_state(id), true);",
          "    id = StateID(25);",
          "    assert!(!special.is_dead_state(id));",
          "    assert!(! (special.min_accel <= id));",
          "    assert_eq!(special.is_accel_state(id), false);"
        ],
        "code": [
          "{",
          "    let special = Special { ",
          "        max: StateID(5), ",
          "        quit_id: StateID(1), ",
          "        min_match: StateID(2), ",
          "        max_match: StateID(3), ",
          "        min_accel: StateID(10), ",
          "        max_accel: StateID(20), ",
          "        min_start: StateID(4), ",
          "        max_start: StateID(6) ",
          "    };",
          "    let id = StateID(21);",
          "    special.is_accel_state(id);",
          "    assert!(!special.is_dead_state(id));",
          "    assert!(special.min_accel <= id);",
          "    assert!(id <= special.max_accel);",
          "    assert_eq!(special.is_accel_state(id), false);",
          "    id = StateID(10);",
          "    assert!(!special.is_dead_state(id));",
          "    assert!(special.min_accel <= id);",
          "    assert!(id <= special.max_accel);",
          "    assert_eq!(special.is_accel_state(id), true);",
          "    id = StateID(25);",
          "    assert!(!special.is_dead_state(id));",
          "    assert!(! (special.min_accel <= id));",
          "    assert_eq!(special.is_accel_state(id), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special { ",
          "        max: StateID(5), ",
          "        quit_id: StateID(1), ",
          "        min_match: StateID(2), ",
          "        max_match: StateID(3), ",
          "        min_accel: StateID(10), ",
          "        max_accel: StateID(20), ",
          "        min_start: StateID(4), ",
          "        max_start: StateID(6) ",
          "    };",
          "    let id = StateID(10);",
          "    special.is_accel_state(id);",
          "}"
        ],
        "oracle": [
          "    assert!(!special.is_dead_state(id));",
          "    assert!(special.min_accel <= id);",
          "    assert!(id <= special.max_accel);",
          "    assert_eq!(special.is_accel_state(StateID(9)), false);",
          "    assert_eq!(special.is_accel_state(StateID(21)), false);",
          "    assert_eq!(special.is_accel_state(StateID(15)), true);"
        ],
        "code": [
          "{",
          "    let special = Special { ",
          "        max: StateID(5), ",
          "        quit_id: StateID(1), ",
          "        min_match: StateID(2), ",
          "        max_match: StateID(3), ",
          "        min_accel: StateID(10), ",
          "        max_accel: StateID(20), ",
          "        min_start: StateID(4), ",
          "        max_start: StateID(6) ",
          "    };",
          "    let id = StateID(10);",
          "    special.is_accel_state(id);",
          "    assert!(!special.is_dead_state(id));",
          "    assert!(special.min_accel <= id);",
          "    assert!(id <= special.max_accel);",
          "    assert_eq!(special.is_accel_state(StateID(9)), false);",
          "    assert_eq!(special.is_accel_state(StateID(21)), false);",
          "    assert_eq!(special.is_accel_state(StateID(15)), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special { ",
          "        max: StateID(5), ",
          "        quit_id: StateID(1), ",
          "        min_match: StateID(2), ",
          "        max_match: StateID(3), ",
          "        min_accel: StateID(10), ",
          "        max_accel: StateID(20), ",
          "        min_start: StateID(4), ",
          "        max_start: StateID(6) ",
          "    };",
          "    let id = StateID(20);",
          "    special.is_accel_state(id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(special.is_dead_state(StateID(20)), false);",
          "    assert_eq!(special.min_accel <= StateID(20), false);",
          "    assert_eq!(special.is_accel_state(StateID(20)), false);"
        ],
        "code": [
          "{",
          "    let special = Special { ",
          "        max: StateID(5), ",
          "        quit_id: StateID(1), ",
          "        min_match: StateID(2), ",
          "        max_match: StateID(3), ",
          "        min_accel: StateID(10), ",
          "        max_accel: StateID(20), ",
          "        min_start: StateID(4), ",
          "        max_start: StateID(6) ",
          "    };",
          "    let id = StateID(20);",
          "    special.is_accel_state(id);",
          "    assert_eq!(special.is_dead_state(StateID(20)), false);",
          "    assert_eq!(special.min_accel <= StateID(20), false);",
          "    assert_eq!(special.is_accel_state(StateID(20)), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]