[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = StateID(1);",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(5),",
          "        min_match: StateID(3),",
          "        max_match: StateID(6),",
          "        min_accel: StateID(4),",
          "        max_accel: StateID(8),",
          "        min_start: StateID(2),",
          "        max_start: StateID(9),",
          "    };",
          "    special.is_accel_state(state_id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(special.is_dead_state(state_id), true);",
          "    assert!(special.min_accel > state_id);",
          "    assert!(state_id > special.max_accel);",
          "    assert_eq!(special.is_accel_state(state_id), false);",
          "    assert_eq!(special.is_accel_state(StateID(4)), true);",
          "    assert_eq!(special.is_accel_state(StateID(7)), true);",
          "    assert_eq!(special.is_accel_state(StateID(9)), false);"
        ],
        "code": [
          "{",
          "    let state_id = StateID(1);",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(5),",
          "        min_match: StateID(3),",
          "        max_match: StateID(6),",
          "        min_accel: StateID(4),",
          "        max_accel: StateID(8),",
          "        min_start: StateID(2),",
          "        max_start: StateID(9),",
          "    };",
          "    special.is_accel_state(state_id);",
          "    assert_eq!(special.is_dead_state(state_id), true);",
          "    assert!(special.min_accel > state_id);",
          "    assert!(state_id > special.max_accel);",
          "    assert_eq!(special.is_accel_state(state_id), false);",
          "    assert_eq!(special.is_accel_state(StateID(4)), true);",
          "    assert_eq!(special.is_accel_state(StateID(7)), true);",
          "    assert_eq!(special.is_accel_state(StateID(9)), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = StateID(9);",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(5),",
          "        min_match: StateID(3),",
          "        max_match: StateID(6),",
          "        min_accel: StateID(4),",
          "        max_accel: StateID(8),",
          "        min_start: StateID(2),",
          "        max_start: StateID(9),",
          "    };",
          "    special.is_accel_state(state_id);",
          "}"
        ],
        "oracle": [
          "    assert!(!special.is_dead_state(state_id));",
          "    assert!(special.min_accel <= state_id);",
          "    assert!(state_id <= special.max_accel);",
          "    assert!(special.is_accel_state(state_id));"
        ],
        "code": [
          "{",
          "    let state_id = StateID(9);",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(5),",
          "        min_match: StateID(3),",
          "        max_match: StateID(6),",
          "        min_accel: StateID(4),",
          "        max_accel: StateID(8),",
          "        min_start: StateID(2),",
          "        max_start: StateID(9),",
          "    };",
          "    special.is_accel_state(state_id);",
          "    assert!(!special.is_dead_state(state_id));",
          "    assert!(special.min_accel <= state_id);",
          "    assert!(state_id <= special.max_accel);",
          "    assert!(special.is_accel_state(state_id));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]