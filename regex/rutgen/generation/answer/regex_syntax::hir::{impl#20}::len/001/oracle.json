[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassBytesRange::new(0, 100);",
          "    let result = range.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 101);",
          "    let range = ClassBytesRange::new(50, 60);",
          "    let result = range.len();",
          "    assert_eq!(result, 11);",
          "    let range = ClassBytesRange::new(255, 255);",
          "    let result = range.len();",
          "    assert_eq!(result, 1);",
          "    let range = ClassBytesRange::new(100, 0);",
          "    let result = range.len();",
          "    assert_eq!(result, 1);"
        ],
        "code": [
          "{",
          "    let range = ClassBytesRange::new(0, 100);",
          "    let result = range.len();",
          "    assert_eq!(result, 101);",
          "    let range = ClassBytesRange::new(50, 60);",
          "    let result = range.len();",
          "    assert_eq!(result, 11);",
          "    let range = ClassBytesRange::new(255, 255);",
          "    let result = range.len();",
          "    assert_eq!(result, 1);",
          "    let range = ClassBytesRange::new(100, 0);",
          "    let result = range.len();",
          "    assert_eq!(result, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassBytesRange::new(0, 0);",
          "    let result = range.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 1);",
          "    let range = ClassBytesRange::new(1, 1);",
          "    let result = range.len();",
          "    assert_eq!(result, 1);",
          "    let range = ClassBytesRange::new(0, 10);",
          "    let result = range.len();",
          "    assert_eq!(result, 11);",
          "    let range = ClassBytesRange::new(5, 15);",
          "    let result = range.len();",
          "    assert_eq!(result, 11);",
          "    let range = ClassBytesRange::new(10, 5);",
          "    let result = range.len();",
          "    assert_eq!(result, 1);"
        ],
        "code": [
          "{",
          "    let range = ClassBytesRange::new(0, 0);",
          "    let result = range.len();",
          "    assert_eq!(result, 1);",
          "    let range = ClassBytesRange::new(1, 1);",
          "    let result = range.len();",
          "    assert_eq!(result, 1);",
          "    let range = ClassBytesRange::new(0, 10);",
          "    let result = range.len();",
          "    assert_eq!(result, 11);",
          "    let range = ClassBytesRange::new(5, 15);",
          "    let result = range.len();",
          "    assert_eq!(result, 11);",
          "    let range = ClassBytesRange::new(10, 5);",
          "    let result = range.len();",
          "    assert_eq!(result, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassBytesRange::new(254, 255);",
          "    let result = range.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 2);"
        ],
        "code": [
          "{",
          "    let range = ClassBytesRange::new(254, 255);",
          "    let result = range.len();",
          "    assert_eq!(result, 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassBytesRange::new(0, 255);",
          "    let result = range.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 256);"
        ],
        "code": [
          "{",
          "    let range = ClassBytesRange::new(0, 255);",
          "    let result = range.len();",
          "    assert_eq!(result, 256);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassBytesRange::new(128, 200);",
          "    let result = range.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 73);"
        ],
        "code": [
          "{",
          "    let range = ClassBytesRange::new(128, 200);",
          "    let result = range.len();",
          "    assert_eq!(result, 73);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]