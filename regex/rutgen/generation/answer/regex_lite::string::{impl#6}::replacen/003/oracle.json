[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\d+\").unwrap();",
          "    let hay = \"The year 1973, the year 1975, the year 1980.\";",
          "    let limit = 2;",
          "    let rep = \"XXX\";",
          "    let new = re.replacen(hay, limit, rep);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(new, \"The year XXX, the year XXX, the year 1980.\");"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\d+\").unwrap();",
          "    let hay = \"The year 1973, the year 1975, the year 1980.\";",
          "    let limit = 2;",
          "    let rep = \"XXX\";",
          "    let new = re.replacen(hay, limit, rep);",
          "    assert_eq!(new, \"The year XXX, the year XXX, the year 1980.\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\s+\").unwrap();",
          "    let hay = \"Replace    this    with  one   space.\";",
          "    let limit = 3;",
          "    let rep = \" \";",
          "    let new = re.replacen(hay, limit, rep);",
          "}"
        ],
        "oracle": [
          "    assert!(new.is_owned());",
          "    assert_eq!(new, Cow::Owned(\"Replace this with one space.\".to_string()));",
          "    assert!(new.as_ref().len() < hay.len());",
          "    assert!(new.as_ref().contains(\" \"));",
          "    assert_eq!(new.as_ref().matches(\" \").count(), 3);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\s+\").unwrap();",
          "    let hay = \"Replace    this    with  one   space.\";",
          "    let limit = 3;",
          "    let rep = \" \";",
          "    let new = re.replacen(hay, limit, rep);",
          "    assert!(new.is_owned());",
          "    assert_eq!(new, Cow::Owned(\"Replace this with one space.\".to_string()));",
          "    assert!(new.as_ref().len() < hay.len());",
          "    assert!(new.as_ref().contains(\" \"));",
          "    assert_eq!(new.as_ref().matches(\" \").count(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"[!@#\\\\$%\\\\^&*()]+\").unwrap();",
          "    let hay = \"Hello!!! Is this @test# working?\";",
          "    let limit = 2;",
          "    let rep = \"*\";",
          "    let new = re.replacen(hay, limit, rep);",
          "}"
        ],
        "oracle": [
          "    let re = Regex::new(r\"[!@#\\\\$%\\\\^&*()]+\").unwrap();",
          "    let hay = \"Hello!!! Is this @test# working?\";",
          "    let limit = 2;",
          "    let rep = \"*\";",
          "    let new = re.replacen(hay, limit, rep);",
          "    assert_eq!(new, Cow::Owned(\"Hello* Is this *test# working?\".to_string()));"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"[!@#\\\\$%\\\\^&*()]+\").unwrap();",
          "    let hay = \"Hello!!! Is this @test# working?\";",
          "    let limit = 2;",
          "    let rep = \"*\";",
          "    let new = re.replacen(hay, limit, rep);",
          "    let re = Regex::new(r\"[!@#\\\\$%\\\\^&*()]+\").unwrap();",
          "    let hay = \"Hello!!! Is this @test# working?\";",
          "    let limit = 2;",
          "    let rep = \"*\";",
          "    let new = re.replacen(hay, limit, rep);",
          "    assert_eq!(new, Cow::Owned(\"Hello* Is this *test# working?\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"[0-9]+\").unwrap();",
          "    let hay = \"1 22 333 4444\";",
          "    let limit = 3;",
          "    let rep = \"NUM\";",
          "    let new = re.replacen(hay, limit, rep);",
          "}"
        ],
        "oracle": [
          "    assert!(new == Cow::Owned(\"NUM NUM NUM 4444\".to_string()));",
          "    assert_eq!(new.len(), \"NUM NUM NUM 4444\".len());",
          "    assert!(new.contains(\"NUM\"));",
          "    assert!(!new.contains(\"333\"));",
          "    assert!(new.starts_with(\"NUM\"));"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"[0-9]+\").unwrap();",
          "    let hay = \"1 22 333 4444\";",
          "    let limit = 3;",
          "    let rep = \"NUM\";",
          "    let new = re.replacen(hay, limit, rep);",
          "    assert!(new == Cow::Owned(\"NUM NUM NUM 4444\".to_string()));",
          "    assert_eq!(new.len(), \"NUM NUM NUM 4444\".len());",
          "    assert!(new.contains(\"NUM\"));",
          "    assert!(!new.contains(\"333\"));",
          "    assert!(new.starts_with(\"NUM\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"([a-z]+)\").unwrap();",
          "    let hay = \"hello world hello universe\";",
          "    let limit = 1;",
          "    let rep = \"greeting\";",
          "    let new = re.replacen(hay, limit, rep);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(new, Cow::Owned(_)));",
          "    assert_eq!(new, Cow::Owned(\"greeting world greeting universe\".to_string()));",
          "    assert!(new.as_ref().contains(\"greeting\"));",
          "    assert_eq!(new.len(), \"greeting world greeting universe\".len());",
          "    assert!(new.as_ref().starts_with(\"greeting\"));",
          "    assert!(new.as_ref().ends_with(\"universe\"));"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"([a-z]+)\").unwrap();",
          "    let hay = \"hello world hello universe\";",
          "    let limit = 1;",
          "    let rep = \"greeting\";",
          "    let new = re.replacen(hay, limit, rep);",
          "    assert!(matches!(new, Cow::Owned(_)));",
          "    assert_eq!(new, Cow::Owned(\"greeting world greeting universe\".to_string()));",
          "    assert!(new.as_ref().contains(\"greeting\"));",
          "    assert_eq!(new.len(), \"greeting world greeting universe\".len());",
          "    assert!(new.as_ref().starts_with(\"greeting\"));",
          "    assert!(new.as_ref().ends_with(\"universe\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]