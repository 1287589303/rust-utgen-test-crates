[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = regex_lite::Regex::new(r\"\\d+\").unwrap();",
          "    let hay = \"123 apples and 456 oranges\";",
          "    let limit = 2;",
          "    let replacement = \"REPLACED\";",
          "    let result = re.replacen(hay, limit, replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Cow::Owned(\"REPLACED apples and REPLACED oranges\".to_string()));"
        ],
        "code": [
          "{",
          "    let re = regex_lite::Regex::new(r\"\\d+\").unwrap();",
          "    let hay = \"123 apples and 456 oranges\";",
          "    let limit = 2;",
          "    let replacement = \"REPLACED\";",
          "    let result = re.replacen(hay, limit, replacement);",
          "    assert_eq!(result, Cow::Owned(\"REPLACED apples and REPLACED oranges\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = regex_lite::Regex::new(r\"\\d+\").unwrap();",
          "    let hay = \"There are 789 bananas\";",
          "    let limit = 1;",
          "    let replacement = \"NUMBER\";",
          "    let result = re.replacen(hay, limit, replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Cow::Owned(\"There are NUMBER bananas\".to_string()));"
        ],
        "code": [
          "{",
          "    let re = regex_lite::Regex::new(r\"\\d+\").unwrap();",
          "    let hay = \"There are 789 bananas\";",
          "    let limit = 1;",
          "    let replacement = \"NUMBER\";",
          "    let result = re.replacen(hay, limit, replacement);",
          "    assert_eq!(result, Cow::Owned(\"There are NUMBER bananas\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = regex_lite::Regex::new(r\"\\d+\").unwrap();",
          "    let hay = \"1 and 2 and 3\";",
          "    let limit = 3;",
          "    let replacement = \"X\";",
          "    let result = re.replacen(hay, limit, replacement);",
          "}"
        ],
        "oracle": [
          "    result.is_owned();",
          "    assert_eq!(result, Cow::Owned(\"X and X and 3\".to_string()));",
          "    assert!(result.as_ref() != hay);",
          "    assert!(result.len() < hay.len());",
          "    assert!(result.contains(\"X\"));",
          "    assert_eq!(result.matches(\"X\").count(), 2);",
          "    assert!(!result.contains(\"1\"));",
          "    assert!(!result.contains(\"2\"));",
          "    assert!(result.contains(\"3\"));",
          "    assert!(result.starts_with(\"X\"));",
          "    assert!(result.ends_with(\"3\"));"
        ],
        "code": [
          "{",
          "    let re = regex_lite::Regex::new(r\"\\d+\").unwrap();",
          "    let hay = \"1 and 2 and 3\";",
          "    let limit = 3;",
          "    let replacement = \"X\";",
          "    let result = re.replacen(hay, limit, replacement);",
          "    result.is_owned();",
          "    assert_eq!(result, Cow::Owned(\"X and X and 3\".to_string()));",
          "    assert!(result.as_ref() != hay);",
          "    assert!(result.len() < hay.len());",
          "    assert!(result.contains(\"X\"));",
          "    assert_eq!(result.matches(\"X\").count(), 2);",
          "    assert!(!result.contains(\"1\"));",
          "    assert!(!result.contains(\"2\"));",
          "    assert!(result.contains(\"3\"));",
          "    assert!(result.starts_with(\"X\"));",
          "    assert!(result.ends_with(\"3\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = regex_lite::Regex::new(r\"\\d+\").unwrap();",
          "    let hay = \"100 200 300 400\";",
          "    let limit = 3;",
          "    let replacement = \"NUM\";",
          "    let result = re.replacen(hay, limit, replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Cow::Owned(\"NUM NUM NUM 400\".to_string()));"
        ],
        "code": [
          "{",
          "    let re = regex_lite::Regex::new(r\"\\d+\").unwrap();",
          "    let hay = \"100 200 300 400\";",
          "    let limit = 3;",
          "    let replacement = \"NUM\";",
          "    let result = re.replacen(hay, limit, replacement);",
          "    assert_eq!(result, Cow::Owned(\"NUM NUM NUM 400\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]