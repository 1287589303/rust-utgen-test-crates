[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\d+\").unwrap();",
          "    let hay = \"abc 123 def 456 ghi\";",
          "    let limit = 0;",
          "    let rep = \"NUMBER\";",
          "    let result = re.replacen(hay, limit, rep);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Cow::Owned(\"abc NUMBER def NUMBER ghi\".to_string()));"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\d+\").unwrap();",
          "    let hay = \"abc 123 def 456 ghi\";",
          "    let limit = 0;",
          "    let rep = \"NUMBER\";",
          "    let result = re.replacen(hay, limit, rep);",
          "    assert_eq!(result, Cow::Owned(\"abc NUMBER def NUMBER ghi\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\s+\").unwrap();",
          "    let hay = \"hello   world\";",
          "    let limit = 0;",
          "    let rep = \" \";",
          "    let result = re.replacen(hay, limit, rep);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Cow::Owned(\"hello world\".to_string()));"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\s+\").unwrap();",
          "    let hay = \"hello   world\";",
          "    let limit = 0;",
          "    let rep = \" \";",
          "    let result = re.replacen(hay, limit, rep);",
          "    assert_eq!(result, Cow::Owned(\"hello world\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"(\\w+)<->(\\w+)\").unwrap();",
          "    let hay = \"foo<->bar baz<->qux\";",
          "    let limit = 0;",
          "    let rep = \"REPLACED\";",
          "    let result = re.replacen(hay, limit, rep);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Cow::Owned(\"REPLACED REPLACED baz<->qux\".to_string()));"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"(\\w+)<->(\\w+)\").unwrap();",
          "    let hay = \"foo<->bar baz<->qux\";",
          "    let limit = 0;",
          "    let rep = \"REPLACED\";",
          "    let result = re.replacen(hay, limit, rep);",
          "    assert_eq!(result, Cow::Owned(\"REPLACED REPLACED baz<->qux\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]