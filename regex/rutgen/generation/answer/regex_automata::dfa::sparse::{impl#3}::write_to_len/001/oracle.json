[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false };",
          "    let transitions = Transitions {",
          "        sparse: vec![0u8; 1],",
          "        classes: ByteClasses::default(),",
          "        state_len: 1,",
          "        pattern_len: 0,",
          "    };",
          "    let start_table = StartTable {",
          "        table: vec![0u32; 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap::default(),",
          "        stride: 2,",
          "        pattern_len: Some(0),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let special = Special { max: 0, quit_id: 1, min_match: 2, max_match: 3, min_accel: 4, max_accel: 5, min_start: 6, max_start: 7 };",
          "    let quitset = ByteSet::empty();",
          "    ",
          "    let dfa = DFA {",
          "        tt: transitions,",
          "        st: start_table,",
          "        special,",
          "        pre: None,",
          "        quitset,",
          "        flags,",
          "    };",
          "",
          "    let _ = dfa.write_to_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.write_to_len(), wire::write_label_len(LABEL) + wire::write_endianness_check_len() + wire::write_version_len() + size_of::<u32>() + flags.write_to_len() + transitions.write_to_len() + start_table.write_to_len() + special.write_to_len() + quitset.write_to_len());"
        ],
        "code": [
          "{",
          "    let flags = Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false };",
          "    let transitions = Transitions {",
          "        sparse: vec![0u8; 1],",
          "        classes: ByteClasses::default(),",
          "        state_len: 1,",
          "        pattern_len: 0,",
          "    };",
          "    let start_table = StartTable {",
          "        table: vec![0u32; 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap::default(),",
          "        stride: 2,",
          "        pattern_len: Some(0),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let special = Special { max: 0, quit_id: 1, min_match: 2, max_match: 3, min_accel: 4, max_accel: 5, min_start: 6, max_start: 7 };",
          "    let quitset = ByteSet::empty();",
          "    ",
          "    let dfa = DFA {",
          "        tt: transitions,",
          "        st: start_table,",
          "        special,",
          "        pre: None,",
          "        quitset,",
          "        flags,",
          "    };",
          "",
          "    let _ = dfa.write_to_len();",
          "    assert_eq!(dfa.write_to_len(), wire::write_label_len(LABEL) + wire::write_endianness_check_len() + wire::write_version_len() + size_of::<u32>() + flags.write_to_len() + transitions.write_to_len() + start_table.write_to_len() + special.write_to_len() + quitset.write_to_len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags { has_empty: true, is_utf8: true, is_always_start_anchored: true };",
          "    let transitions = Transitions {",
          "        sparse: vec![0u8; 256],",
          "        classes: ByteClasses::default(),",
          "        state_len: 256,",
          "        pattern_len: 5,",
          "    };",
          "    let start_table = StartTable {",
          "        table: vec![0u32; 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap::default(),",
          "        stride: 3,",
          "        pattern_len: Some(5),",
          "        universal_start_unanchored: Some(0),",
          "        universal_start_anchored: Some(0),",
          "    };",
          "    let special = Special { max: 7, quit_id: 8, min_match: 9, max_match: 10, min_accel: 11, max_accel: 12, min_start: 13, max_start: 14 };",
          "    let quitset = ByteSet::empty();",
          "    ",
          "    let dfa = DFA {",
          "        tt: transitions,",
          "        st: start_table,",
          "        special,",
          "        pre: None,",
          "        quitset,",
          "        flags,",
          "    };",
          "",
          "    let _ = dfa.write_to_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.write_to_len(),",
          "    wire::write_label_len(LABEL) +",
          "    wire::write_endianness_check_len() +",
          "    wire::write_version_len() +",
          "    size_of::<u32>() +",
          "    flags.write_to_len() +",
          "    transitions.write_to_len() +",
          "    start_table.write_to_len() +",
          "    special.write_to_len() +",
          "    quitset.write_to_len());"
        ],
        "code": [
          "{",
          "    let flags = Flags { has_empty: true, is_utf8: true, is_always_start_anchored: true };",
          "    let transitions = Transitions {",
          "        sparse: vec![0u8; 256],",
          "        classes: ByteClasses::default(),",
          "        state_len: 256,",
          "        pattern_len: 5,",
          "    };",
          "    let start_table = StartTable {",
          "        table: vec![0u32; 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap::default(),",
          "        stride: 3,",
          "        pattern_len: Some(5),",
          "        universal_start_unanchored: Some(0),",
          "        universal_start_anchored: Some(0),",
          "    };",
          "    let special = Special { max: 7, quit_id: 8, min_match: 9, max_match: 10, min_accel: 11, max_accel: 12, min_start: 13, max_start: 14 };",
          "    let quitset = ByteSet::empty();",
          "    ",
          "    let dfa = DFA {",
          "        tt: transitions,",
          "        st: start_table,",
          "        special,",
          "        pre: None,",
          "        quitset,",
          "        flags,",
          "    };",
          "",
          "    let _ = dfa.write_to_len();",
          "    assert_eq!(dfa.write_to_len(),",
          "    wire::write_label_len(LABEL) +",
          "    wire::write_endianness_check_len() +",
          "    wire::write_version_len() +",
          "    size_of::<u32>() +",
          "    flags.write_to_len() +",
          "    transitions.write_to_len() +",
          "    start_table.write_to_len() +",
          "    special.write_to_len() +",
          "    quitset.write_to_len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags { has_empty: false, is_utf8: true, is_always_start_anchored: false };",
          "    let transitions = Transitions {",
          "        sparse: vec![0u8; 10],",
          "        classes: ByteClasses::default(),",
          "        state_len: 10,",
          "        pattern_len: 0,",
          "    };",
          "    let start_table = StartTable {",
          "        table: vec![0u32; 8],",
          "        kind: StartKind::Unanchored,",
          "        start_map: StartByteMap::default(),",
          "        stride: 1,",
          "        pattern_len: Some(0),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let special = Special { max: 1, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 };",
          "    let quitset = ByteSet::from_bytes(&[0]).unwrap().0;",
          "",
          "    let dfa = DFA {",
          "        tt: transitions,",
          "        st: start_table,",
          "        special,",
          "        pre: None,",
          "        quitset,",
          "        flags,",
          "    };",
          "",
          "    let _ = dfa.write_to_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.write_to_len(), wire::write_label_len(LABEL) + wire::write_endianness_check_len() + wire::write_version_len() + size_of::<u32>() + dfa.flags.write_to_len() + dfa.tt.write_to_len() + dfa.st.write_to_len() + dfa.special.write_to_len() + dfa.quitset.write_to_len());"
        ],
        "code": [
          "{",
          "    let flags = Flags { has_empty: false, is_utf8: true, is_always_start_anchored: false };",
          "    let transitions = Transitions {",
          "        sparse: vec![0u8; 10],",
          "        classes: ByteClasses::default(),",
          "        state_len: 10,",
          "        pattern_len: 0,",
          "    };",
          "    let start_table = StartTable {",
          "        table: vec![0u32; 8],",
          "        kind: StartKind::Unanchored,",
          "        start_map: StartByteMap::default(),",
          "        stride: 1,",
          "        pattern_len: Some(0),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let special = Special { max: 1, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 };",
          "    let quitset = ByteSet::from_bytes(&[0]).unwrap().0;",
          "",
          "    let dfa = DFA {",
          "        tt: transitions,",
          "        st: start_table,",
          "        special,",
          "        pre: None,",
          "        quitset,",
          "        flags,",
          "    };",
          "",
          "    let _ = dfa.write_to_len();",
          "    assert_eq!(dfa.write_to_len(), wire::write_label_len(LABEL) + wire::write_endianness_check_len() + wire::write_version_len() + size_of::<u32>() + dfa.flags.write_to_len() + dfa.tt.write_to_len() + dfa.st.write_to_len() + dfa.special.write_to_len() + dfa.quitset.write_to_len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]