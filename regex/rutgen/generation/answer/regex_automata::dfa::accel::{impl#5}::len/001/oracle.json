[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let accel = Accel { bytes: [0; ACCEL_CAP] };",
          "    let _ = accel.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(accel.len(), 0);",
          "    let accel = Accel { bytes: [1; ACCEL_CAP] };",
          "    assert_eq!(accel.len(), 1);",
          "    let accel = Accel { bytes: [4; ACCEL_CAP] };",
          "    assert_eq!(accel.len(), 4);",
          "    let accel = Accel { bytes: [ACCEL_LEN as u8; ACCEL_CAP] };",
          "    assert_eq!(accel.len(), ACCEL_LEN);",
          "    let accel = Accel { bytes: [255; ACCEL_CAP] };",
          "    assert_eq!(accel.len(), 255);"
        ],
        "code": [
          "{",
          "    let accel = Accel { bytes: [0; ACCEL_CAP] };",
          "    let _ = accel.len();",
          "    assert_eq!(accel.len(), 0);",
          "    let accel = Accel { bytes: [1; ACCEL_CAP] };",
          "    assert_eq!(accel.len(), 1);",
          "    let accel = Accel { bytes: [4; ACCEL_CAP] };",
          "    assert_eq!(accel.len(), 4);",
          "    let accel = Accel { bytes: [ACCEL_LEN as u8; ACCEL_CAP] };",
          "    assert_eq!(accel.len(), ACCEL_LEN);",
          "    let accel = Accel { bytes: [255; ACCEL_CAP] };",
          "    assert_eq!(accel.len(), 255);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let accel = Accel { bytes: [1, 0, 0, 0, 0, 0, 0, 0] };",
          "    let _ = accel.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(accel.len(), 1);",
          "    assert_eq!(Accel { bytes: [0, 0, 0, 0, 0, 0, 0, 0] }.len(), 0);",
          "    assert_eq!(Accel { bytes: [8, 0, 0, 0, 0, 0, 0, 0] }.len(), 8);",
          "    assert_eq!(Accel { bytes: [4, 0, 0, 0, 0, 0, 0, 0] }.len(), 4);",
          "    assert_eq!(Accel { bytes: [255, 0, 0, 0, 0, 0, 0, 0] }.len(), 255);",
          "    assert_eq!(Accel { bytes: [127, 0, 0, 0, 0, 0, 0, 0] }.len(), 127);",
          "    assert_eq!(Accel { bytes: [1, 2, 3, 4, 5, 6, 7, 8] }.len(), 1);"
        ],
        "code": [
          "{",
          "    let accel = Accel { bytes: [1, 0, 0, 0, 0, 0, 0, 0] };",
          "    let _ = accel.len();",
          "    assert_eq!(accel.len(), 1);",
          "    assert_eq!(Accel { bytes: [0, 0, 0, 0, 0, 0, 0, 0] }.len(), 0);",
          "    assert_eq!(Accel { bytes: [8, 0, 0, 0, 0, 0, 0, 0] }.len(), 8);",
          "    assert_eq!(Accel { bytes: [4, 0, 0, 0, 0, 0, 0, 0] }.len(), 4);",
          "    assert_eq!(Accel { bytes: [255, 0, 0, 0, 0, 0, 0, 0] }.len(), 255);",
          "    assert_eq!(Accel { bytes: [127, 0, 0, 0, 0, 0, 0, 0] }.len(), 127);",
          "    assert_eq!(Accel { bytes: [1, 2, 3, 4, 5, 6, 7, 8] }.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let accel = Accel { bytes: [2, 0, 0, 0, 0, 0, 0, 0] };",
          "    let _ = accel.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(accel.len(), 2);"
        ],
        "code": [
          "{",
          "    let accel = Accel { bytes: [2, 0, 0, 0, 0, 0, 0, 0] };",
          "    let _ = accel.len();",
          "    assert_eq!(accel.len(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let accel = Accel { bytes: [3, 0, 0, 0, 0, 0, 0, 0] };",
          "    let _ = accel.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(accel.len(), 3);"
        ],
        "code": [
          "{",
          "    let accel = Accel { bytes: [3, 0, 0, 0, 0, 0, 0, 0] };",
          "    let _ = accel.len();",
          "    assert_eq!(accel.len(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let accel = Accel { bytes: [4, 0, 0, 0, 0, 0, 0, 0] };",
          "    let _ = accel.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(accel.len(), 4);"
        ],
        "code": [
          "{",
          "    let accel = Accel { bytes: [4, 0, 0, 0, 0, 0, 0, 0] };",
          "    let _ = accel.len();",
          "    assert_eq!(accel.len(), 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let accel = Accel { bytes: [5, 0, 0, 0, 0, 0, 0, 0] };",
          "    let _ = accel.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(accel.len(), 5);"
        ],
        "code": [
          "{",
          "    let accel = Accel { bytes: [5, 0, 0, 0, 0, 0, 0, 0] };",
          "    let _ = accel.len();",
          "    assert_eq!(accel.len(), 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let accel = Accel { bytes: [6, 0, 0, 0, 0, 0, 0, 0] };",
          "    let _ = accel.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(accel.len(), 6);"
        ],
        "code": [
          "{",
          "    let accel = Accel { bytes: [6, 0, 0, 0, 0, 0, 0, 0] };",
          "    let _ = accel.len();",
          "    assert_eq!(accel.len(), 6);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let accel = Accel { bytes: [7, 0, 0, 0, 0, 0, 0, 0] };",
          "    let _ = accel.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(accel.len(), 7);"
        ],
        "code": [
          "{",
          "    let accel = Accel { bytes: [7, 0, 0, 0, 0, 0, 0, 0] };",
          "    let _ = accel.len();",
          "    assert_eq!(accel.len(), 7);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let accel = Accel { bytes: [8, 0, 0, 0, 0, 0, 0, 0] };",
          "    let _ = accel.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(accel.len(), 8);"
        ],
        "code": [
          "{",
          "    let accel = Accel { bytes: [8, 0, 0, 0, 0, 0, 0, 0] };",
          "    let _ = accel.len();",
          "    assert_eq!(accel.len(), 8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]