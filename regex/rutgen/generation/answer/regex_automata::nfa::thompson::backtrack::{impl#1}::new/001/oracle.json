[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let builder = Builder::new();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.config, Config::default());",
          "    #[cfg(feature = \"syntax\")] assert!(builder.thompson.is_some());",
          "    assert!(builder.thompson.builder.borrow().config == Config::default());"
        ],
        "code": [
          "{",
          "    let builder = Builder::new();",
          "    assert_eq!(builder.config, Config::default());",
          "    #[cfg(feature = \"syntax\")] assert!(builder.thompson.is_some());",
          "    assert!(builder.thompson.builder.borrow().config == Config::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[cfg(feature = \"syntax\")]"
        ],
        "prefix": [
          "{",
          "    let builder = Builder::new();",
          "}"
        ],
        "oracle": [
          "    assert!(builder.config.match_kind.is_none());",
          "    assert!(builder.config.quit.is_empty());",
          "    assert_eq!(builder.config.dfa_size_limit, None);",
          "    assert_eq!(builder.config.determinize_size_limit, None);",
          "    #[cfg(feature = \"syntax\")] assert!(builder.thompson.parser.is_some());"
        ],
        "code": [
          "{",
          "    let builder = Builder::new();",
          "    assert!(builder.config.match_kind.is_none());",
          "    assert!(builder.config.quit.is_empty());",
          "    assert_eq!(builder.config.dfa_size_limit, None);",
          "    assert_eq!(builder.config.determinize_size_limit, None);",
          "    #[cfg(feature = \"syntax\")] assert!(builder.thompson.parser.is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]