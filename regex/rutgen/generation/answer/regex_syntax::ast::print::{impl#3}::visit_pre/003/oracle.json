[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span::new(0, 5);",
          "    let class_set = ClassBracketed {",
          "        span,",
          "        negated: false,",
          "        kind: ClassSet::Normal(vec![/* valid items */]),",
          "    };",
          "    let ast = Ast::ClassBracketed(Box::new(class_set));",
          "    let mut writer = Writer { wtr: Vec::new() };",
          "    let _ = writer.visit_pre(&ast);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.wtr, b\"[\");"
        ],
        "code": [
          "{",
          "    let span = Span::new(0, 5);",
          "    let class_set = ClassBracketed {",
          "        span,",
          "        negated: false,",
          "        kind: ClassSet::Normal(vec![/* valid items */]),",
          "    };",
          "    let ast = Ast::ClassBracketed(Box::new(class_set));",
          "    let mut writer = Writer { wtr: Vec::new() };",
          "    let _ = writer.visit_pre(&ast);",
          "    assert_eq!(writer.wtr, b\"[\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span::new(0, 5);",
          "    let class_set = ClassBracketed {",
          "        span,",
          "        negated: true,",
          "        kind: ClassSet::Normal(vec![/* valid items */]),",
          "    };",
          "    let ast = Ast::ClassBracketed(Box::new(class_set));",
          "    let mut writer = Writer { wtr: Vec::new() };",
          "    let _ = writer.visit_pre(&ast);",
          "}"
        ],
        "oracle": [
          "    let span = Span::new(0, 5);",
          "    let class_set = ClassBracketed {",
          "    span,",
          "    negated: true,",
          "    kind: ClassSet::Normal(vec![\"valid_item_1\".into(), \"valid_item_2\".into()]),",
          "    };",
          "    let ast = Ast::ClassBracketed(Box::new(class_set));",
          "    let mut writer = Writer { wtr: Vec::new() };",
          "    let result = writer.visit_pre(&ast);",
          "    assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    let span = Span::new(0, 5);",
          "    let class_set = ClassBracketed {",
          "        span,",
          "        negated: true,",
          "        kind: ClassSet::Normal(vec![/* valid items */]),",
          "    };",
          "    let ast = Ast::ClassBracketed(Box::new(class_set));",
          "    let mut writer = Writer { wtr: Vec::new() };",
          "    let _ = writer.visit_pre(&ast);",
          "    let span = Span::new(0, 5);",
          "    let class_set = ClassBracketed {",
          "    span,",
          "    negated: true,",
          "    kind: ClassSet::Normal(vec![\"valid_item_1\".into(), \"valid_item_2\".into()]),",
          "    };",
          "    let ast = Ast::ClassBracketed(Box::new(class_set));",
          "    let mut writer = Writer { wtr: Vec::new() };",
          "    let result = writer.visit_pre(&ast);",
          "    assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span::new(0, 0);",
          "    let class_set = ClassBracketed {",
          "        span,",
          "        negated: false,",
          "        kind: ClassSet::Normal(vec![]),",
          "    };",
          "    let ast = Ast::ClassBracketed(Box::new(class_set));",
          "    let mut writer = Writer { wtr: Vec::new() };",
          "    let _ = writer.visit_pre(&ast);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.wtr, b\"[\");",
          "    assert!(writer.visit_post(&ast).is_ok());",
          "    assert!(writer.finish().is_ok());"
        ],
        "code": [
          "{",
          "    let span = Span::new(0, 0);",
          "    let class_set = ClassBracketed {",
          "        span,",
          "        negated: false,",
          "        kind: ClassSet::Normal(vec![]),",
          "    };",
          "    let ast = Ast::ClassBracketed(Box::new(class_set));",
          "    let mut writer = Writer { wtr: Vec::new() };",
          "    let _ = writer.visit_pre(&ast);",
          "    assert_eq!(writer.wtr, b\"[\");",
          "    assert!(writer.visit_post(&ast).is_ok());",
          "    assert!(writer.finish().is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span::new(0, 10);",
          "    let class_set = ClassBracketed {",
          "        span,",
          "        negated: false,",
          "        kind: ClassSet::Range('a', 'z'),",
          "    };",
          "    let ast = Ast::ClassBracketed(Box::new(class_set));",
          "    let mut writer = Writer { wtr: Vec::new() };",
          "    let _ = writer.visit_pre(&ast);",
          "}"
        ],
        "oracle": [
          "    let span = Span::new(0, 10);",
          "    let class_set = ClassBracketed { span, negated: false, kind: ClassSet::Range('a', 'z') };",
          "    let ast = Ast::ClassBracketed(Box::new(class_set));",
          "    let mut writer = Writer { wtr: Vec::new() };",
          "    let result = writer.visit_pre(&ast);",
          "    assert!(result.is_ok());",
          "    assert_eq!(String::from_utf8(writer.wtr).unwrap(), \"[a-z]\");"
        ],
        "code": [
          "{",
          "    let span = Span::new(0, 10);",
          "    let class_set = ClassBracketed {",
          "        span,",
          "        negated: false,",
          "        kind: ClassSet::Range('a', 'z'),",
          "    };",
          "    let ast = Ast::ClassBracketed(Box::new(class_set));",
          "    let mut writer = Writer { wtr: Vec::new() };",
          "    let _ = writer.visit_pre(&ast);",
          "    let span = Span::new(0, 10);",
          "    let class_set = ClassBracketed { span, negated: false, kind: ClassSet::Range('a', 'z') };",
          "    let ast = Ast::ClassBracketed(Box::new(class_set));",
          "    let mut writer = Writer { wtr: Vec::new() };",
          "    let result = writer.visit_pre(&ast);",
          "    assert!(result.is_ok());",
          "    assert_eq!(String::from_utf8(writer.wtr).unwrap(), \"[a-z]\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span::new(0, 15);",
          "    let class_set = ClassBracketed {",
          "        span,",
          "        negated: true,",
          "        kind: ClassSet::Unicode(vec![/* valid unicode ranges or classes */]),",
          "    };",
          "    let ast = Ast::ClassBracketed(Box::new(class_set));",
          "    let mut writer = Writer { wtr: Vec::new() };",
          "    let _ = writer.visit_pre(&ast);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.wtr.as_slice(), b\"[^\");",
          "    assert!(writer.finish().is_ok());"
        ],
        "code": [
          "{",
          "    let span = Span::new(0, 15);",
          "    let class_set = ClassBracketed {",
          "        span,",
          "        negated: true,",
          "        kind: ClassSet::Unicode(vec![/* valid unicode ranges or classes */]),",
          "    };",
          "    let ast = Ast::ClassBracketed(Box::new(class_set));",
          "    let mut writer = Writer { wtr: Vec::new() };",
          "    let _ = writer.visit_pre(&ast);",
          "    assert_eq!(writer.wtr.as_slice(), b\"[^\");",
          "    assert!(writer.finish().is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]