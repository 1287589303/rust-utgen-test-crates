[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = StartKind::Anchored;",
          "    let result = kind.has_unanchored();",
          "}"
        ],
        "oracle": [
          "    let kind = StartKind::Anchored;",
          "    let result = kind.has_unanchored();",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let kind = StartKind::Anchored;",
          "    let result = kind.has_unanchored();",
          "    let kind = StartKind::Anchored;",
          "    let result = kind.has_unanchored();",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    // Assuming there could be more variants in future, this is a placeholder",
          "    // Currently, however, there are no other variants, thus skipped.",
          "}"
        ],
        "oracle": [
          "    StartKind::Anchored.has_unanchored(); // expected: false",
          "    StartKind::Unanchored.has_unanchored(); // expected: false",
          "    StartKind::Both.has_unanchored(); // expected: false"
        ],
        "code": [
          "{",
          "    // Assuming there could be more variants in future, this is a placeholder",
          "    // Currently, however, there are no other variants, thus skipped.",
          "    StartKind::Anchored.has_unanchored(); // expected: false",
          "    StartKind::Unanchored.has_unanchored(); // expected: false",
          "    StartKind::Both.has_unanchored(); // expected: false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]