[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 0, flags: Flags::default() };",
          "    let pattern = \"\";",
          "    let hir = Hir::parse(config.clone(), pattern).unwrap();",
          "    let compiler = Compiler::new(config, pattern.to_string());",
          "    let result = compiler.compile(&hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(Error::new(\"capture group slots exhausted\")));",
          "    assert!(result.is_err());",
          "    assert!(result.is_ok() == false);",
          "    assert!(matches!(result, Err(_)));",
          "    assert!(result.as_ref().err().map(|e| e.msg) == Some(\"capture group slots exhausted\"));",
          "    assert!(result.is_err() && result.unwrap_err().msg == \"capture group slots exhausted\");"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 0, flags: Flags::default() };",
          "    let pattern = \"\";",
          "    let hir = Hir::parse(config.clone(), pattern).unwrap();",
          "    let compiler = Compiler::new(config, pattern.to_string());",
          "    let result = compiler.compile(&hir);",
          "    assert_eq!(result, Err(Error::new(\"capture group slots exhausted\")));",
          "    assert!(result.is_err());",
          "    assert!(result.is_ok() == false);",
          "    assert!(matches!(result, Err(_)));",
          "    assert!(result.as_ref().err().map(|e| e.msg) == Some(\"capture group slots exhausted\"));",
          "    assert!(result.is_err() && result.unwrap_err().msg == \"capture group slots exhausted\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 1, flags: Flags::default() };",
          "    let pattern = \"a\";",
          "    let hir = Hir::parse(config.clone(), pattern).unwrap();",
          "    let compiler = Compiler::new(config, pattern.to_string());",
          "    let result = compiler.compile(&hir);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, \"capture group slots exhausted\");",
          "    assert!(result.is_err());",
          "    assert!(result.unwrap_err().msg.contains(\"capture group slots exhausted\"));",
          "    assert!(result.is_err());",
          "    assert!(result.unwrap_err().msg.contains(\"expected error\"));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 1, flags: Flags::default() };",
          "    let pattern = \"a\";",
          "    let hir = Hir::parse(config.clone(), pattern).unwrap();",
          "    let compiler = Compiler::new(config, pattern.to_string());",
          "    let result = compiler.compile(&hir);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, \"capture group slots exhausted\");",
          "    assert!(result.is_err());",
          "    assert!(result.unwrap_err().msg.contains(\"capture group slots exhausted\"));",
          "    assert!(result.is_err());",
          "    assert!(result.unwrap_err().msg.contains(\"expected error\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 0, flags: Flags::default() };",
          "    let pattern = \"(a(b))\";",
          "    let hir = Hir::parse(config.clone(), pattern).unwrap();",
          "    let compiler = Compiler::new(config, pattern.to_string());",
          "    let result = compiler.compile(&hir);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, \"capture group slots exhausted\");"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 0, flags: Flags::default() };",
          "    let pattern = \"(a(b))\";",
          "    let hir = Hir::parse(config.clone(), pattern).unwrap();",
          "    let compiler = Compiler::new(config, pattern.to_string());",
          "    let result = compiler.compile(&hir);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, \"capture group slots exhausted\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 1, flags: Flags::default() };",
          "    let pattern = \"abc\";",
          "    let hir = Hir::parse(config.clone(), pattern).unwrap();",
          "    let compiler = Compiler::new(config, pattern.to_string());",
          "    let result = compiler.compile(&hir);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, \"capture group slots exhausted\");",
          "    assert!(compiler.nfa.borrow().is_start_anchored);",
          "    assert!(compiler.nfa.borrow().is_match_empty);",
          "    assert_eq!(compiler.nfa.borrow().static_explicit_captures_len, Some(0));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 1, flags: Flags::default() };",
          "    let pattern = \"abc\";",
          "    let hir = Hir::parse(config.clone(), pattern).unwrap();",
          "    let compiler = Compiler::new(config, pattern.to_string());",
          "    let result = compiler.compile(&hir);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, \"capture group slots exhausted\");",
          "    assert!(compiler.nfa.borrow().is_start_anchored);",
          "    assert!(compiler.nfa.borrow().is_match_empty);",
          "    assert_eq!(compiler.nfa.borrow().static_explicit_captures_len, Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 2, flags: Flags::default() };",
          "    let pattern = \"(a)(b)\";",
          "    let hir = Hir::parse(config.clone(), pattern).unwrap();",
          "    let compiler = Compiler::new(config, pattern.to_string());",
          "    let result = compiler.compile(&hir);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().map(|e| e.msg), Some(\"capture group slots exhausted\"));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 2, flags: Flags::default() };",
          "    let pattern = \"(a)(b)\";",
          "    let hir = Hir::parse(config.clone(), pattern).unwrap();",
          "    let compiler = Compiler::new(config, pattern.to_string());",
          "    let result = compiler.compile(&hir);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().map(|e| e.msg), Some(\"capture group slots exhausted\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 1, flags: Flags::default() };",
          "    let pattern = \"^abc\";",
          "    let hir = Hir::parse(config.clone(), pattern).unwrap();",
          "    let compiler = Compiler::new(config, pattern.to_string());",
          "    let result = compiler.compile(&hir);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, \"capture group slots exhausted\");",
          "    assert!(compiler.nfa.borrow().is_start_anchored == hir.is_start_anchored());",
          "    assert!(compiler.nfa.borrow().is_match_empty == hir.is_match_empty());",
          "    assert!(compiler.nfa.borrow().static_explicit_captures_len == hir.static_explicit_captures_len());",
          "    assert!(compiler.nfa.borrow().start == 0);",
          "    assert!(compiler.nfa.borrow().states.is_empty());",
          "    assert!(compiler.nfa.borrow().memory_extra == 0);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 1, flags: Flags::default() };",
          "    let pattern = \"^abc\";",
          "    let hir = Hir::parse(config.clone(), pattern).unwrap();",
          "    let compiler = Compiler::new(config, pattern.to_string());",
          "    let result = compiler.compile(&hir);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, \"capture group slots exhausted\");",
          "    assert!(compiler.nfa.borrow().is_start_anchored == hir.is_start_anchored());",
          "    assert!(compiler.nfa.borrow().is_match_empty == hir.is_match_empty());",
          "    assert!(compiler.nfa.borrow().static_explicit_captures_len == hir.static_explicit_captures_len());",
          "    assert!(compiler.nfa.borrow().start == 0);",
          "    assert!(compiler.nfa.borrow().states.is_empty());",
          "    assert!(compiler.nfa.borrow().memory_extra == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 1, flags: Flags::default() };",
          "    let pattern = \".*\";",
          "    let hir = Hir::parse(config.clone(), pattern).unwrap();",
          "    let compiler = Compiler::new(config, pattern.to_string());",
          "    let result = compiler.compile(&hir);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, \"capture group slots exhausted\");"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 1, flags: Flags::default() };",
          "    let pattern = \".*\";",
          "    let hir = Hir::parse(config.clone(), pattern).unwrap();",
          "    let compiler = Compiler::new(config, pattern.to_string());",
          "    let result = compiler.compile(&hir);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, \"capture group slots exhausted\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]