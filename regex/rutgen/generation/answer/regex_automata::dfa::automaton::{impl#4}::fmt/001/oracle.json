[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = StartError::UnsupportedAnchored {",
          "        mode: Anchored::Yes,",
          "    };",
          "    let mut buffer = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{}\", StartError::UnsupportedAnchored { mode: Anchored::Yes }), \"error computing start state because anchored searches are not supported or enabled\");",
          "    assert_eq!(format!(\"{}\", StartError::UnsupportedAnchored { mode: Anchored::No }), \"error computing start state because unanchored searches are not supported or enabled\");",
          "    assert_eq!(format!(\"{}\", StartError::UnsupportedAnchored { mode: Anchored::Pattern(PatternID(5)) }), \"error computing start state because anchored searches for a specific pattern (5) are not supported or enabled\");"
        ],
        "code": [
          "{",
          "    let error = StartError::UnsupportedAnchored {",
          "        mode: Anchored::Yes,",
          "    };",
          "    let mut buffer = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut buffer);",
          "    assert_eq!(format!(\"{}\", StartError::UnsupportedAnchored { mode: Anchored::Yes }), \"error computing start state because anchored searches are not supported or enabled\");",
          "    assert_eq!(format!(\"{}\", StartError::UnsupportedAnchored { mode: Anchored::No }), \"error computing start state because unanchored searches are not supported or enabled\");",
          "    assert_eq!(format!(\"{}\", StartError::UnsupportedAnchored { mode: Anchored::Pattern(PatternID(5)) }), \"error computing start state because anchored searches for a specific pattern (5) are not supported or enabled\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = StartError::UnsupportedAnchored {",
          "        mode: Anchored::No,",
          "    };",
          "    let mut buffer = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    let error = StartError::UnsupportedAnchored { mode: Anchored::Yes };",
          "    let mut buffer = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut buffer);",
          "    let error = StartError::UnsupportedAnchored { mode: Anchored::Pattern(PatternID(1)) };",
          "    let mut buffer = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut buffer);",
          "    let error = StartError::Quit { byte: 0xFF };",
          "    let mut buffer = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut buffer);"
        ],
        "code": [
          "{",
          "    let error = StartError::UnsupportedAnchored {",
          "        mode: Anchored::No,",
          "    };",
          "    let mut buffer = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut buffer);",
          "    let error = StartError::UnsupportedAnchored { mode: Anchored::Yes };",
          "    let mut buffer = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut buffer);",
          "    let error = StartError::UnsupportedAnchored { mode: Anchored::Pattern(PatternID(1)) };",
          "    let mut buffer = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut buffer);",
          "    let error = StartError::Quit { byte: 0xFF };",
          "    let mut buffer = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut buffer);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pid = PatternID(Default::default());",
          "    let error = StartError::UnsupportedAnchored {",
          "        mode: Anchored::Pattern(pid),",
          "    };",
          "    let mut buffer = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(error.fmt(&mut buffer), Ok(()));",
          "    assert_eq!(buffer.to_string(), \"error computing start state because anchored searches for a specific pattern (0) are not supported or enabled\");",
          "    assert_eq!(error, StartError::UnsupportedAnchored { mode: Anchored::Pattern(pid) });",
          "    ",
          "    let error_yes = StartError::UnsupportedAnchored { mode: Anchored::Yes };",
          "    let mut buffer_yes = core::fmt::Formatter::new();",
          "    let _ = error_yes.fmt(&mut buffer_yes);",
          "    assert_eq!(buffer_yes.to_string(), \"error computing start state because anchored searches are not supported or enabled\");",
          "    ",
          "    let error_no = StartError::UnsupportedAnchored { mode: Anchored::No };",
          "    let mut buffer_no = core::fmt::Formatter::new();",
          "    let _ = error_no.fmt(&mut buffer_no);",
          "    assert_eq!(buffer_no.to_string(), \"error computing start state because unanchored searches are not supported or enabled\");"
        ],
        "code": [
          "{",
          "    let pid = PatternID(Default::default());",
          "    let error = StartError::UnsupportedAnchored {",
          "        mode: Anchored::Pattern(pid),",
          "    };",
          "    let mut buffer = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut buffer);",
          "    assert_eq!(error.fmt(&mut buffer), Ok(()));",
          "    assert_eq!(buffer.to_string(), \"error computing start state because anchored searches for a specific pattern (0) are not supported or enabled\");",
          "    assert_eq!(error, StartError::UnsupportedAnchored { mode: Anchored::Pattern(pid) });",
          "    ",
          "    let error_yes = StartError::UnsupportedAnchored { mode: Anchored::Yes };",
          "    let mut buffer_yes = core::fmt::Formatter::new();",
          "    let _ = error_yes.fmt(&mut buffer_yes);",
          "    assert_eq!(buffer_yes.to_string(), \"error computing start state because anchored searches are not supported or enabled\");",
          "    ",
          "    let error_no = StartError::UnsupportedAnchored { mode: Anchored::No };",
          "    let mut buffer_no = core::fmt::Formatter::new();",
          "    let _ = error_no.fmt(&mut buffer_no);",
          "    assert_eq!(buffer_no.to_string(), \"error computing start state because unanchored searches are not supported or enabled\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]