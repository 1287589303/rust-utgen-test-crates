[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = StartError::UnsupportedAnchored { mode: Anchored::Yes };",
          "    let _ = format!(\"{}\", error);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"error computing start state because anchored searches are not supported or enabled\") == \"error computing start state because anchored searches are not supported or enabled\"",
          "    let error = StartError::UnsupportedAnchored { mode: Anchored::No };",
          "    write!(f, \"error computing start state because unanchored searches are not supported or enabled\") == \"error computing start state because unanchored searches are not supported or enabled\"",
          "    let pid = PatternID(1);",
          "    let error = StartError::UnsupportedAnchored { mode: Anchored::Pattern(pid) };",
          "    write!(f, \"error computing start state because anchored searches for a specific pattern ({}) are not supported or enabled\", pid.as_usize()) == \"error computing start state because anchored searches for a specific pattern (1) are not supported or enabled\""
        ],
        "code": [
          "{",
          "    let error = StartError::UnsupportedAnchored { mode: Anchored::Yes };",
          "    let _ = format!(\"{}\", error);",
          "    write!(f, \"error computing start state because anchored searches are not supported or enabled\") == \"error computing start state because anchored searches are not supported or enabled\"",
          "    let error = StartError::UnsupportedAnchored { mode: Anchored::No };",
          "    write!(f, \"error computing start state because unanchored searches are not supported or enabled\") == \"error computing start state because unanchored searches are not supported or enabled\"",
          "    let pid = PatternID(1);",
          "    let error = StartError::UnsupportedAnchored { mode: Anchored::Pattern(pid) };",
          "    write!(f, \"error computing start state because anchored searches for a specific pattern ({}) are not supported or enabled\", pid.as_usize()) == \"error computing start state because anchored searches for a specific pattern (1) are not supported or enabled\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = StartError::UnsupportedAnchored { mode: Anchored::No };",
          "    let _ = format!(\"{}\", error);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"error computing start state because unanchored searches are not supported or enabled\") == format!(\"{}\", StartError::UnsupportedAnchored { mode: Anchored::No });",
          "    ",
          "    let error = StartError::UnsupportedAnchored { mode: Anchored::Yes };",
          "    assert_eq!(format!(\"{}\", error), \"error computing start state because anchored searches are not supported or enabled\");",
          "    ",
          "    let pattern_id = PatternID(5);",
          "    let error = StartError::UnsupportedAnchored { mode: Anchored::Pattern(pattern_id) };",
          "    assert_eq!(format!(\"{}\", error), \"error computing start state because anchored searches for a specific pattern (5) are not supported or enabled\");"
        ],
        "code": [
          "{",
          "    let error = StartError::UnsupportedAnchored { mode: Anchored::No };",
          "    let _ = format!(\"{}\", error);",
          "    write!(f, \"error computing start state because unanchored searches are not supported or enabled\") == format!(\"{}\", StartError::UnsupportedAnchored { mode: Anchored::No });",
          "    ",
          "    let error = StartError::UnsupportedAnchored { mode: Anchored::Yes };",
          "    assert_eq!(format!(\"{}\", error), \"error computing start state because anchored searches are not supported or enabled\");",
          "    ",
          "    let pattern_id = PatternID(5);",
          "    let error = StartError::UnsupportedAnchored { mode: Anchored::Pattern(pattern_id) };",
          "    assert_eq!(format!(\"{}\", error), \"error computing start state because anchored searches for a specific pattern (5) are not supported or enabled\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pid = PatternID(0);",
          "    let error = StartError::UnsupportedAnchored { mode: Anchored::Pattern(pid) };",
          "    let _ = format!(\"{}\", error);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"error computing start state because anchored searches for a specific pattern ({}) are not supported or enabled\", 0);",
          "    write!(f, \"error computing start state because anchored searches are not supported or enabled\");",
          "    write!(f, \"error computing start state because unanchored searches are not supported or enabled\");"
        ],
        "code": [
          "{",
          "    let pid = PatternID(0);",
          "    let error = StartError::UnsupportedAnchored { mode: Anchored::Pattern(pid) };",
          "    let _ = format!(\"{}\", error);",
          "    write!(f, \"error computing start state because anchored searches for a specific pattern ({}) are not supported or enabled\", 0);",
          "    write!(f, \"error computing start state because anchored searches are not supported or enabled\");",
          "    write!(f, \"error computing start state because unanchored searches are not supported or enabled\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = StartError::Quit { byte: 128 }; // Testing with a valid byte",
          "    let _ = format!(\"{}\", error);",
          "}"
        ],
        "oracle": [
          "    let error = StartError::UnsupportedAnchored { mode: Anchored::Yes }; let result = format!(\"{}\", error); assert_eq!(result, \"error computing start state because anchored searches are not supported or enabled\");",
          "    ",
          "    let error = StartError::UnsupportedAnchored { mode: Anchored::No }; let result = format!(\"{}\", error); assert_eq!(result, \"error computing start state because unanchored searches are not supported or enabled\");",
          "    ",
          "    let pid = PatternID(1); let error = StartError::UnsupportedAnchored { mode: Anchored::Pattern(pid) }; let result = format!(\"{}\", error); assert_eq!(result, \"error computing start state because anchored searches for a specific pattern (1) are not supported or enabled\");"
        ],
        "code": [
          "{",
          "    let error = StartError::Quit { byte: 128 }; // Testing with a valid byte",
          "    let _ = format!(\"{}\", error);",
          "    let error = StartError::UnsupportedAnchored { mode: Anchored::Yes }; let result = format!(\"{}\", error); assert_eq!(result, \"error computing start state because anchored searches are not supported or enabled\");",
          "    ",
          "    let error = StartError::UnsupportedAnchored { mode: Anchored::No }; let result = format!(\"{}\", error); assert_eq!(result, \"error computing start state because unanchored searches are not supported or enabled\");",
          "    ",
          "    let pid = PatternID(1); let error = StartError::UnsupportedAnchored { mode: Anchored::Pattern(pid) }; let result = format!(\"{}\", error); assert_eq!(result, \"error computing start state because anchored searches for a specific pattern (1) are not supported or enabled\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]