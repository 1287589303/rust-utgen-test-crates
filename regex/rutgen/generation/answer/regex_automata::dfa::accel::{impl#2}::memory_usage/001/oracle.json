[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let accels = Accels { accels: vec![0u32; 0] }; ",
          "    let usage = accels.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(usage, 0);",
          "    ",
          "    let accels = Accels { accels: vec![0u32; 1] };",
          "    let usage = accels.memory_usage();",
          "    assert_eq!(usage, ACCEL_TY_SIZE);",
          "    ",
          "    let accels = Accels { accels: vec![0u32; 2] };",
          "    let usage = accels.memory_usage();",
          "    assert_eq!(usage, 2 * ACCEL_TY_SIZE);",
          "    ",
          "    let accels = Accels { accels: vec![0u32; ACCEL_CAP] };",
          "    let usage = accels.memory_usage();",
          "    assert_eq!(usage, ACCEL_CAP * ACCEL_TY_SIZE);"
        ],
        "code": [
          "{",
          "    let accels = Accels { accels: vec![0u32; 0] }; ",
          "    let usage = accels.memory_usage();",
          "    assert_eq!(usage, 0);",
          "    ",
          "    let accels = Accels { accels: vec![0u32; 1] };",
          "    let usage = accels.memory_usage();",
          "    assert_eq!(usage, ACCEL_TY_SIZE);",
          "    ",
          "    let accels = Accels { accels: vec![0u32; 2] };",
          "    let usage = accels.memory_usage();",
          "    assert_eq!(usage, 2 * ACCEL_TY_SIZE);",
          "    ",
          "    let accels = Accels { accels: vec![0u32; ACCEL_CAP] };",
          "    let usage = accels.memory_usage();",
          "    assert_eq!(usage, ACCEL_CAP * ACCEL_TY_SIZE);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let accels = Accels { accels: vec![1u32] }; ",
          "    let usage = accels.memory_usage();",
          "}"
        ],
        "oracle": [
          "    let accels = Accels { accels: vec![1u32] };",
          "    assert_eq!(usage, 4);",
          "    let accels = Accels { accels: vec![1u32, 2u32, 3u32] };",
          "    let usage = accels.memory_usage();",
          "    assert_eq!(usage, 12);",
          "    let accels = Accels { accels: vec![] };",
          "    let usage = accels.memory_usage();",
          "    assert_eq!(usage, 0);",
          "    let accels = Accels { accels: vec![10u32, 20u32, 30u32, 40u32, 50u32] };",
          "    let usage = accels.memory_usage();",
          "    assert_eq!(usage, 20);",
          "    let accels = Accels { accels: vec![u32::MAX; ACCEL_CAP] };",
          "    let usage = accels.memory_usage();",
          "    assert_eq!(usage, 32);"
        ],
        "code": [
          "{",
          "    let accels = Accels { accels: vec![1u32] }; ",
          "    let usage = accels.memory_usage();",
          "    let accels = Accels { accels: vec![1u32] };",
          "    assert_eq!(usage, 4);",
          "    let accels = Accels { accels: vec![1u32, 2u32, 3u32] };",
          "    let usage = accels.memory_usage();",
          "    assert_eq!(usage, 12);",
          "    let accels = Accels { accels: vec![] };",
          "    let usage = accels.memory_usage();",
          "    assert_eq!(usage, 0);",
          "    let accels = Accels { accels: vec![10u32, 20u32, 30u32, 40u32, 50u32] };",
          "    let usage = accels.memory_usage();",
          "    assert_eq!(usage, 20);",
          "    let accels = Accels { accels: vec![u32::MAX; ACCEL_CAP] };",
          "    let usage = accels.memory_usage();",
          "    assert_eq!(usage, 32);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let accels = Accels { accels: vec![1u32, 2, 3, 4] }; ",
          "    let usage = accels.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(usage, 4 * ACCEL_TY_SIZE);",
          "    assert!(usage > 0);",
          "    assert!(usage <= ACCEL_CAP * ACCEL_TY_SIZE);",
          "    assert_eq!(usage, accels.as_bytes().len());",
          "    assert_eq!(accels.memory_usage(), 0) if accels.accels.as_ref().is_empty();"
        ],
        "code": [
          "{",
          "    let accels = Accels { accels: vec![1u32, 2, 3, 4] }; ",
          "    let usage = accels.memory_usage();",
          "    assert_eq!(usage, 4 * ACCEL_TY_SIZE);",
          "    assert!(usage > 0);",
          "    assert!(usage <= ACCEL_CAP * ACCEL_TY_SIZE);",
          "    assert_eq!(usage, accels.as_bytes().len());",
          "    assert_eq!(accels.memory_usage(), 0) if accels.accels.as_ref().is_empty();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let accels = Accels { accels: vec![1u32, 2, 3, 4, 5, 6, 7, 8] }; ",
          "    let usage = accels.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(usage, 32);  // 8 accelerators * 4 bytes each"
        ],
        "code": [
          "{",
          "    let accels = Accels { accels: vec![1u32, 2, 3, 4, 5, 6, 7, 8] }; ",
          "    let usage = accels.memory_usage();",
          "    assert_eq!(usage, 32);  // 8 accelerators * 4 bytes each",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let accels = Accels { accels: vec![0u32; 8] }; ",
          "    let usage = accels.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(usage, 32);",
          "    assert_eq!(accels.memory_usage(), 32);",
          "    let accels_empty = Accels { accels: vec![] };",
          "    assert_eq!(accels_empty.memory_usage(), 0);",
          "    let accels_single = Accels { accels: vec![1u32] };",
          "    assert_eq!(accels_single.memory_usage(), 4);",
          "    let accels_max_capacity = Accels { accels: vec![0u32; 8] };",
          "    assert_eq!(accels_max_capacity.memory_usage(), 32);",
          "    let accels_with_different_values = Accels { accels: vec![0u32, 1u32, 2u32, 3u32] };",
          "    assert_eq!(accels_with_different_values.memory_usage(), 16);"
        ],
        "code": [
          "{",
          "    let accels = Accels { accels: vec![0u32; 8] }; ",
          "    let usage = accels.memory_usage();",
          "    assert_eq!(usage, 32);",
          "    assert_eq!(accels.memory_usage(), 32);",
          "    let accels_empty = Accels { accels: vec![] };",
          "    assert_eq!(accels_empty.memory_usage(), 0);",
          "    let accels_single = Accels { accels: vec![1u32] };",
          "    assert_eq!(accels_single.memory_usage(), 4);",
          "    let accels_max_capacity = Accels { accels: vec![0u32; 8] };",
          "    assert_eq!(accels_max_capacity.memory_usage(), 32);",
          "    let accels_with_different_values = Accels { accels: vec![0u32, 1u32, 2u32, 3u32] };",
          "    assert_eq!(accels_with_different_values.memory_usage(), 16);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]