[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_end = Look::End;",
          "    let result = look_end.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::End.as_char(), 'z');"
        ],
        "code": [
          "{",
          "    let look_end = Look::End;",
          "    let result = look_end.as_char();",
          "    assert_eq!(Look::End.as_char(), 'z');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_start = Look::Start;",
          "    let result = look_start.as_char();",
          "}"
        ],
        "oracle": [
          "    Look::End.as_char() == 'z'",
          "    Look::Start.as_char() != 'z'",
          "    Look::StartLF.as_char() != 'z'",
          "    Look::EndLF.as_char() != 'z'",
          "    Look::StartCRLF.as_char() != 'z'",
          "    Look::EndCRLF.as_char() != 'z'",
          "    Look::WordAscii.as_char() != 'z'",
          "    Look::WordAsciiNegate.as_char() != 'z'",
          "    Look::WordUnicode.as_char() != 'z'",
          "    Look::WordUnicodeNegate.as_char() != 'z'",
          "    Look::WordStartAscii.as_char() != 'z'",
          "    Look::WordEndAscii.as_char() != 'z'",
          "    Look::WordStartUnicode.as_char() != 'z'",
          "    Look::WordEndUnicode.as_char() != 'z'",
          "    Look::WordStartHalfAscii.as_char() != 'z'",
          "    Look::WordEndHalfAscii.as_char() != 'z'",
          "    Look::WordStartHalfUnicode.as_char() != 'z'",
          "    Look::WordEndHalfUnicode.as_char() != 'z'"
        ],
        "code": [
          "{",
          "    let look_start = Look::Start;",
          "    let result = look_start.as_char();",
          "    Look::End.as_char() == 'z'",
          "    Look::Start.as_char() != 'z'",
          "    Look::StartLF.as_char() != 'z'",
          "    Look::EndLF.as_char() != 'z'",
          "    Look::StartCRLF.as_char() != 'z'",
          "    Look::EndCRLF.as_char() != 'z'",
          "    Look::WordAscii.as_char() != 'z'",
          "    Look::WordAsciiNegate.as_char() != 'z'",
          "    Look::WordUnicode.as_char() != 'z'",
          "    Look::WordUnicodeNegate.as_char() != 'z'",
          "    Look::WordStartAscii.as_char() != 'z'",
          "    Look::WordEndAscii.as_char() != 'z'",
          "    Look::WordStartUnicode.as_char() != 'z'",
          "    Look::WordEndUnicode.as_char() != 'z'",
          "    Look::WordStartHalfAscii.as_char() != 'z'",
          "    Look::WordEndHalfAscii.as_char() != 'z'",
          "    Look::WordStartHalfUnicode.as_char() != 'z'",
          "    Look::WordEndHalfUnicode.as_char() != 'z'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_startLF = Look::StartLF;",
          "    let result = look_startLF.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::End.as_char(), 'z');",
          "    assert_eq!(Look::Start.as_char(), 'A');",
          "    assert_eq!(Look::StartLF.as_char(), '^');",
          "    assert_eq!(Look::EndLF.as_char(), '$');",
          "    assert_eq!(Look::StartCRLF.as_char(), 'r');",
          "    assert_eq!(Look::EndCRLF.as_char(), 'R');",
          "    assert_eq!(Look::WordAscii.as_char(), 'b');",
          "    assert_eq!(Look::WordAsciiNegate.as_char(), 'B');",
          "    assert_eq!(Look::WordUnicode.as_char(), 'ùõÉ');",
          "    assert_eq!(Look::WordUnicodeNegate.as_char(), 'ùö©');",
          "    assert_eq!(Look::WordStartAscii.as_char(), '<');",
          "    assert_eq!(Look::WordEndAscii.as_char(), '>');",
          "    assert_eq!(Look::WordStartUnicode.as_char(), '„Äà');",
          "    assert_eq!(Look::WordEndUnicode.as_char(), '„Äâ');",
          "    assert_eq!(Look::WordStartHalfAscii.as_char(), '‚óÅ');",
          "    assert_eq!(Look::WordEndHalfAscii.as_char(), '‚ñ∑');",
          "    assert_eq!(Look::WordStartHalfUnicode.as_char(), '‚óÄ');",
          "    assert_eq!(Look::WordEndHalfUnicode.as_char(), '‚ñ∂');"
        ],
        "code": [
          "{",
          "    let look_startLF = Look::StartLF;",
          "    let result = look_startLF.as_char();",
          "    assert_eq!(Look::End.as_char(), 'z');",
          "    assert_eq!(Look::Start.as_char(), 'A');",
          "    assert_eq!(Look::StartLF.as_char(), '^');",
          "    assert_eq!(Look::EndLF.as_char(), '$');",
          "    assert_eq!(Look::StartCRLF.as_char(), 'r');",
          "    assert_eq!(Look::EndCRLF.as_char(), 'R');",
          "    assert_eq!(Look::WordAscii.as_char(), 'b');",
          "    assert_eq!(Look::WordAsciiNegate.as_char(), 'B');",
          "    assert_eq!(Look::WordUnicode.as_char(), 'ùõÉ');",
          "    assert_eq!(Look::WordUnicodeNegate.as_char(), 'ùö©');",
          "    assert_eq!(Look::WordStartAscii.as_char(), '<');",
          "    assert_eq!(Look::WordEndAscii.as_char(), '>');",
          "    assert_eq!(Look::WordStartUnicode.as_char(), '„Äà');",
          "    assert_eq!(Look::WordEndUnicode.as_char(), '„Äâ');",
          "    assert_eq!(Look::WordStartHalfAscii.as_char(), '‚óÅ');",
          "    assert_eq!(Look::WordEndHalfAscii.as_char(), '‚ñ∑');",
          "    assert_eq!(Look::WordStartHalfUnicode.as_char(), '‚óÄ');",
          "    assert_eq!(Look::WordEndHalfUnicode.as_char(), '‚ñ∂');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_endLF = Look::EndLF;",
          "    let result = look_endLF.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::End.as_char(), 'z');"
        ],
        "code": [
          "{",
          "    let look_endLF = Look::EndLF;",
          "    let result = look_endLF.as_char();",
          "    assert_eq!(Look::End.as_char(), 'z');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_startCRLF = Look::StartCRLF;",
          "    let result = look_startCRLF.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::End.as_char(), 'z');"
        ],
        "code": [
          "{",
          "    let look_startCRLF = Look::StartCRLF;",
          "    let result = look_startCRLF.as_char();",
          "    assert_eq!(Look::End.as_char(), 'z');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_endCRLF = Look::EndCRLF;",
          "    let result = look_endCRLF.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_endCRLF.as_char(), 'R');"
        ],
        "code": [
          "{",
          "    let look_endCRLF = Look::EndCRLF;",
          "    let result = look_endCRLF.as_char();",
          "    assert_eq!(look_endCRLF.as_char(), 'R');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_wordAscii = Look::WordAscii;",
          "    let result = look_wordAscii.as_char();",
          "}"
        ],
        "oracle": [
          "    let look_end = Look::End;",
          "    let result = look_end.as_char();",
          "    assert_eq!(result, 'z');"
        ],
        "code": [
          "{",
          "    let look_wordAscii = Look::WordAscii;",
          "    let result = look_wordAscii.as_char();",
          "    let look_end = Look::End;",
          "    let result = look_end.as_char();",
          "    assert_eq!(result, 'z');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_wordAsciiNegate = Look::WordAsciiNegate;",
          "    let result = look_wordAsciiNegate.as_char();",
          "}"
        ],
        "oracle": [
          "    Look::End.as_char() == 'z'",
          "    Look::Start.as_char() == 'A'",
          "    Look::StartLF.as_char() == '^'",
          "    Look::EndLF.as_char() == '$'",
          "    Look::StartCRLF.as_char() == 'r'",
          "    Look::EndCRLF.as_char() == 'R'",
          "    Look::WordAscii.as_char() == 'b'",
          "    Look::WordAsciiNegate.as_char() == 'B'",
          "    Look::WordUnicode.as_char() == 'ùõÉ'",
          "    Look::WordUnicodeNegate.as_char() == 'ùö©'",
          "    Look::WordStartAscii.as_char() == '<'",
          "    Look::WordEndAscii.as_char() == '>'",
          "    Look::WordStartUnicode.as_char() == '„Äà'",
          "    Look::WordEndUnicode.as_char() == '„Äâ'",
          "    Look::WordStartHalfAscii.as_char() == '‚óÅ'",
          "    Look::WordEndHalfAscii.as_char() == '‚ñ∑'",
          "    Look::WordStartHalfUnicode.as_char() == '‚óÄ'",
          "    Look::WordEndHalfUnicode.as_char() == '‚ñ∂'"
        ],
        "code": [
          "{",
          "    let look_wordAsciiNegate = Look::WordAsciiNegate;",
          "    let result = look_wordAsciiNegate.as_char();",
          "    Look::End.as_char() == 'z'",
          "    Look::Start.as_char() == 'A'",
          "    Look::StartLF.as_char() == '^'",
          "    Look::EndLF.as_char() == '$'",
          "    Look::StartCRLF.as_char() == 'r'",
          "    Look::EndCRLF.as_char() == 'R'",
          "    Look::WordAscii.as_char() == 'b'",
          "    Look::WordAsciiNegate.as_char() == 'B'",
          "    Look::WordUnicode.as_char() == 'ùõÉ'",
          "    Look::WordUnicodeNegate.as_char() == 'ùö©'",
          "    Look::WordStartAscii.as_char() == '<'",
          "    Look::WordEndAscii.as_char() == '>'",
          "    Look::WordStartUnicode.as_char() == '„Äà'",
          "    Look::WordEndUnicode.as_char() == '„Äâ'",
          "    Look::WordStartHalfAscii.as_char() == '‚óÅ'",
          "    Look::WordEndHalfAscii.as_char() == '‚ñ∑'",
          "    Look::WordStartHalfUnicode.as_char() == '‚óÄ'",
          "    Look::WordEndHalfUnicode.as_char() == '‚ñ∂'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_wordUnicode = Look::WordUnicode;",
          "    let result = look_wordUnicode.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::Start as_char(), 'A');",
          "    assert_eq!(Look::End as_char(), 'z');",
          "    assert_eq!(Look::StartLF as_char(), '^');",
          "    assert_eq!(Look::EndLF as_char(), '$');",
          "    assert_eq!(Look::StartCRLF as_char(), 'r');",
          "    assert_eq!(Look::EndCRLF as_char(), 'R');",
          "    assert_eq!(Look::WordAscii as_char(), 'b');",
          "    assert_eq!(Look::WordAsciiNegate as_char(), 'B');",
          "    assert_eq!(Look::WordUnicode as_char(), 'ùõÉ');",
          "    assert_eq!(Look::WordUnicodeNegate as_char(), 'ùö©');",
          "    assert_eq!(Look::WordStartAscii as_char(), '<');",
          "    assert_eq!(Look::WordEndAscii as_char(), '>');",
          "    assert_eq!(Look::WordStartUnicode as_char(), '„Äà');",
          "    assert_eq!(Look::WordEndUnicode as_char(), '„Äâ');",
          "    assert_eq!(Look::WordStartHalfAscii as_char(), '‚óÅ');",
          "    assert_eq!(Look::WordEndHalfAscii as_char(), '‚ñ∑');",
          "    assert_eq!(Look::WordStartHalfUnicode as_char(), '‚óÄ');",
          "    assert_eq!(Look::WordEndHalfUnicode as_char(), '‚ñ∂');"
        ],
        "code": [
          "{",
          "    let look_wordUnicode = Look::WordUnicode;",
          "    let result = look_wordUnicode.as_char();",
          "    assert_eq!(Look::Start as_char(), 'A');",
          "    assert_eq!(Look::End as_char(), 'z');",
          "    assert_eq!(Look::StartLF as_char(), '^');",
          "    assert_eq!(Look::EndLF as_char(), '$');",
          "    assert_eq!(Look::StartCRLF as_char(), 'r');",
          "    assert_eq!(Look::EndCRLF as_char(), 'R');",
          "    assert_eq!(Look::WordAscii as_char(), 'b');",
          "    assert_eq!(Look::WordAsciiNegate as_char(), 'B');",
          "    assert_eq!(Look::WordUnicode as_char(), 'ùõÉ');",
          "    assert_eq!(Look::WordUnicodeNegate as_char(), 'ùö©');",
          "    assert_eq!(Look::WordStartAscii as_char(), '<');",
          "    assert_eq!(Look::WordEndAscii as_char(), '>');",
          "    assert_eq!(Look::WordStartUnicode as_char(), '„Äà');",
          "    assert_eq!(Look::WordEndUnicode as_char(), '„Äâ');",
          "    assert_eq!(Look::WordStartHalfAscii as_char(), '‚óÅ');",
          "    assert_eq!(Look::WordEndHalfAscii as_char(), '‚ñ∑');",
          "    assert_eq!(Look::WordStartHalfUnicode as_char(), '‚óÄ');",
          "    assert_eq!(Look::WordEndHalfUnicode as_char(), '‚ñ∂');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_wordUnicodeNegate = Look::WordUnicodeNegate;",
          "    let result = look_wordUnicodeNegate.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::End.as_char(), 'z');",
          "    assert_eq!(Look::Start.as_char(), 'A');",
          "    assert_eq!(Look::StartLF.as_char(), '^');",
          "    assert_eq!(Look::EndLF.as_char(), '$');",
          "    assert_eq!(Look::StartCRLF.as_char(), 'r');",
          "    assert_eq!(Look::EndCRLF.as_char(), 'R');",
          "    assert_eq!(Look::WordAscii.as_char(), 'b');",
          "    assert_eq!(Look::WordAsciiNegate.as_char(), 'B');",
          "    assert_eq!(Look::WordUnicode.as_char(), 'ùõÉ');",
          "    assert_eq!(Look::WordUnicodeNegate.as_char(), 'ùö©');",
          "    assert_eq!(Look::WordStartAscii.as_char(), '<');",
          "    assert_eq!(Look::WordEndAscii.as_char(), '>');",
          "    assert_eq!(Look::WordStartUnicode.as_char(), '„Äà');",
          "    assert_eq!(Look::WordEndUnicode.as_char(), '„Äâ');",
          "    assert_eq!(Look::WordStartHalfAscii.as_char(), '‚óÅ');",
          "    assert_eq!(Look::WordEndHalfAscii.as_char(), '‚ñ∑');",
          "    assert_eq!(Look::WordStartHalfUnicode.as_char(), '‚óÄ');",
          "    assert_eq!(Look::WordEndHalfUnicode.as_char(), '‚ñ∂');"
        ],
        "code": [
          "{",
          "    let look_wordUnicodeNegate = Look::WordUnicodeNegate;",
          "    let result = look_wordUnicodeNegate.as_char();",
          "    assert_eq!(Look::End.as_char(), 'z');",
          "    assert_eq!(Look::Start.as_char(), 'A');",
          "    assert_eq!(Look::StartLF.as_char(), '^');",
          "    assert_eq!(Look::EndLF.as_char(), '$');",
          "    assert_eq!(Look::StartCRLF.as_char(), 'r');",
          "    assert_eq!(Look::EndCRLF.as_char(), 'R');",
          "    assert_eq!(Look::WordAscii.as_char(), 'b');",
          "    assert_eq!(Look::WordAsciiNegate.as_char(), 'B');",
          "    assert_eq!(Look::WordUnicode.as_char(), 'ùõÉ');",
          "    assert_eq!(Look::WordUnicodeNegate.as_char(), 'ùö©');",
          "    assert_eq!(Look::WordStartAscii.as_char(), '<');",
          "    assert_eq!(Look::WordEndAscii.as_char(), '>');",
          "    assert_eq!(Look::WordStartUnicode.as_char(), '„Äà');",
          "    assert_eq!(Look::WordEndUnicode.as_char(), '„Äâ');",
          "    assert_eq!(Look::WordStartHalfAscii.as_char(), '‚óÅ');",
          "    assert_eq!(Look::WordEndHalfAscii.as_char(), '‚ñ∑');",
          "    assert_eq!(Look::WordStartHalfUnicode.as_char(), '‚óÄ');",
          "    assert_eq!(Look::WordEndHalfUnicode.as_char(), '‚ñ∂');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_wordStartAscii = Look::WordStartAscii;",
          "    let result = look_wordStartAscii.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::End.as_char(), 'z');",
          "    assert_eq!(Look::Start.as_char(), 'A');",
          "    assert_eq!(Look::StartLF.as_char(), '^');",
          "    assert_eq!(Look::EndLF.as_char(), '$');",
          "    assert_eq!(Look::StartCRLF.as_char(), 'r');",
          "    assert_eq!(Look::EndCRLF.as_char(), 'R');",
          "    assert_eq!(Look::WordAscii.as_char(), 'b');",
          "    assert_eq!(Look::WordAsciiNegate.as_char(), 'B');",
          "    assert_eq!(Look::WordUnicode.as_char(), 'ùõÉ');",
          "    assert_eq!(Look::WordUnicodeNegate.as_char(), 'ùö©');",
          "    assert_eq!(Look::WordStartAscii.as_char(), '<');",
          "    assert_eq!(Look::WordEndAscii.as_char(), '>');",
          "    assert_eq!(Look::WordStartUnicode.as_char(), '„Äà');",
          "    assert_eq!(Look::WordEndUnicode.as_char(), '„Äâ');",
          "    assert_eq!(Look::WordStartHalfAscii.as_char(), '‚óÅ');",
          "    assert_eq!(Look::WordEndHalfAscii.as_char(), '‚ñ∑');",
          "    assert_eq!(Look::WordStartHalfUnicode.as_char(), '‚óÄ');",
          "    assert_eq!(Look::WordEndHalfUnicode.as_char(), '‚ñ∂');"
        ],
        "code": [
          "{",
          "    let look_wordStartAscii = Look::WordStartAscii;",
          "    let result = look_wordStartAscii.as_char();",
          "    assert_eq!(Look::End.as_char(), 'z');",
          "    assert_eq!(Look::Start.as_char(), 'A');",
          "    assert_eq!(Look::StartLF.as_char(), '^');",
          "    assert_eq!(Look::EndLF.as_char(), '$');",
          "    assert_eq!(Look::StartCRLF.as_char(), 'r');",
          "    assert_eq!(Look::EndCRLF.as_char(), 'R');",
          "    assert_eq!(Look::WordAscii.as_char(), 'b');",
          "    assert_eq!(Look::WordAsciiNegate.as_char(), 'B');",
          "    assert_eq!(Look::WordUnicode.as_char(), 'ùõÉ');",
          "    assert_eq!(Look::WordUnicodeNegate.as_char(), 'ùö©');",
          "    assert_eq!(Look::WordStartAscii.as_char(), '<');",
          "    assert_eq!(Look::WordEndAscii.as_char(), '>');",
          "    assert_eq!(Look::WordStartUnicode.as_char(), '„Äà');",
          "    assert_eq!(Look::WordEndUnicode.as_char(), '„Äâ');",
          "    assert_eq!(Look::WordStartHalfAscii.as_char(), '‚óÅ');",
          "    assert_eq!(Look::WordEndHalfAscii.as_char(), '‚ñ∑');",
          "    assert_eq!(Look::WordStartHalfUnicode.as_char(), '‚óÄ');",
          "    assert_eq!(Look::WordEndHalfUnicode.as_char(), '‚ñ∂');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_wordEndAscii = Look::WordEndAscii;",
          "    let result = look_wordEndAscii.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::End.as_char(), 'z');",
          "    assert_eq!(Look::Start.as_char(), 'A');",
          "    assert_eq!(Look::StartLF.as_char(), '^');",
          "    assert_eq!(Look::EndLF.as_char(), '$');",
          "    assert_eq!(Look::StartCRLF.as_char(), 'r');",
          "    assert_eq!(Look::EndCRLF.as_char(), 'R');",
          "    assert_eq!(Look::WordAscii.as_char(), 'b');",
          "    assert_eq!(Look::WordAsciiNegate.as_char(), 'B');",
          "    assert_eq!(Look::WordUnicode.as_char(), 'ùõÉ');",
          "    assert_eq!(Look::WordUnicodeNegate.as_char(), 'ùö©');",
          "    assert_eq!(Look::WordStartAscii.as_char(), '<');",
          "    assert_eq!(Look::WordEndAscii.as_char(), '>');",
          "    assert_eq!(Look::WordStartUnicode.as_char(), '„Äà');",
          "    assert_eq!(Look::WordEndUnicode.as_char(), '„Äâ');",
          "    assert_eq!(Look::WordStartHalfAscii.as_char(), '‚óÅ');",
          "    assert_eq!(Look::WordEndHalfAscii.as_char(), '‚ñ∑');",
          "    assert_eq!(Look::WordStartHalfUnicode.as_char(), '‚óÄ');",
          "    assert_eq!(Look::WordEndHalfUnicode.as_char(), '‚ñ∂');"
        ],
        "code": [
          "{",
          "    let look_wordEndAscii = Look::WordEndAscii;",
          "    let result = look_wordEndAscii.as_char();",
          "    assert_eq!(Look::End.as_char(), 'z');",
          "    assert_eq!(Look::Start.as_char(), 'A');",
          "    assert_eq!(Look::StartLF.as_char(), '^');",
          "    assert_eq!(Look::EndLF.as_char(), '$');",
          "    assert_eq!(Look::StartCRLF.as_char(), 'r');",
          "    assert_eq!(Look::EndCRLF.as_char(), 'R');",
          "    assert_eq!(Look::WordAscii.as_char(), 'b');",
          "    assert_eq!(Look::WordAsciiNegate.as_char(), 'B');",
          "    assert_eq!(Look::WordUnicode.as_char(), 'ùõÉ');",
          "    assert_eq!(Look::WordUnicodeNegate.as_char(), 'ùö©');",
          "    assert_eq!(Look::WordStartAscii.as_char(), '<');",
          "    assert_eq!(Look::WordEndAscii.as_char(), '>');",
          "    assert_eq!(Look::WordStartUnicode.as_char(), '„Äà');",
          "    assert_eq!(Look::WordEndUnicode.as_char(), '„Äâ');",
          "    assert_eq!(Look::WordStartHalfAscii.as_char(), '‚óÅ');",
          "    assert_eq!(Look::WordEndHalfAscii.as_char(), '‚ñ∑');",
          "    assert_eq!(Look::WordStartHalfUnicode.as_char(), '‚óÄ');",
          "    assert_eq!(Look::WordEndHalfUnicode.as_char(), '‚ñ∂');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_wordStartUnicode = Look::WordStartUnicode;",
          "    let result = look_wordStartUnicode.as_char();",
          "}"
        ],
        "oracle": [
          "    Look::End.as_char() == 'z'",
          "    Look::Start.as_char() == 'A'",
          "    Look::StartLF.as_char() == '^'",
          "    Look::EndLF.as_char() == '$'",
          "    Look::StartCRLF.as_char() == 'r'",
          "    Look::EndCRLF.as_char() == 'R'",
          "    Look::WordAscii.as_char() == 'b'",
          "    Look::WordAsciiNegate.as_char() == 'B'",
          "    Look::WordUnicode.as_char() == 'ùõÉ'",
          "    Look::WordUnicodeNegate.as_char() == 'ùö©'",
          "    Look::WordStartAscii.as_char() == '<'",
          "    Look::WordEndAscii.as_char() == '>'",
          "    Look::WordStartHalfAscii.as_char() == '‚óÅ'",
          "    Look::WordEndHalfAscii.as_char() == '‚ñ∑'",
          "    Look::WordStartHalfUnicode.as_char() == '‚óÄ'",
          "    Look::WordEndHalfUnicode.as_char() == '‚ñ∂'",
          "    Look::WordStartUnicode.as_char() == '„Äà'",
          "    Look::WordEndUnicode.as_char() == '„Äâ'"
        ],
        "code": [
          "{",
          "    let look_wordStartUnicode = Look::WordStartUnicode;",
          "    let result = look_wordStartUnicode.as_char();",
          "    Look::End.as_char() == 'z'",
          "    Look::Start.as_char() == 'A'",
          "    Look::StartLF.as_char() == '^'",
          "    Look::EndLF.as_char() == '$'",
          "    Look::StartCRLF.as_char() == 'r'",
          "    Look::EndCRLF.as_char() == 'R'",
          "    Look::WordAscii.as_char() == 'b'",
          "    Look::WordAsciiNegate.as_char() == 'B'",
          "    Look::WordUnicode.as_char() == 'ùõÉ'",
          "    Look::WordUnicodeNegate.as_char() == 'ùö©'",
          "    Look::WordStartAscii.as_char() == '<'",
          "    Look::WordEndAscii.as_char() == '>'",
          "    Look::WordStartHalfAscii.as_char() == '‚óÅ'",
          "    Look::WordEndHalfAscii.as_char() == '‚ñ∑'",
          "    Look::WordStartHalfUnicode.as_char() == '‚óÄ'",
          "    Look::WordEndHalfUnicode.as_char() == '‚ñ∂'",
          "    Look::WordStartUnicode.as_char() == '„Äà'",
          "    Look::WordEndUnicode.as_char() == '„Äâ'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_wordEndUnicode = Look::WordEndUnicode;",
          "    let result = look_wordEndUnicode.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::Start.as_char(), 'A');",
          "    assert_eq!(Look::End.as_char(), 'z');",
          "    assert_eq!(Look::StartLF.as_char(), '^');",
          "    assert_eq!(Look::EndLF.as_char(), '$');",
          "    assert_eq!(Look::StartCRLF.as_char(), 'r');",
          "    assert_eq!(Look::EndCRLF.as_char(), 'R');",
          "    assert_eq!(Look::WordAscii.as_char(), 'b');",
          "    assert_eq!(Look::WordAsciiNegate.as_char(), 'B');",
          "    assert_eq!(Look::WordUnicode.as_char(), 'ùõÉ');",
          "    assert_eq!(Look::WordUnicodeNegate.as_char(), 'ùö©');",
          "    assert_eq!(Look::WordStartAscii.as_char(), '<');",
          "    assert_eq!(Look::WordEndAscii.as_char(), '>');",
          "    assert_eq!(Look::WordStartUnicode.as_char(), '„Äà');",
          "    assert_eq!(Look::WordEndUnicode.as_char(), '„Äâ');",
          "    assert_eq!(Look::WordStartHalfAscii.as_char(), '‚óÅ');",
          "    assert_eq!(Look::WordEndHalfAscii.as_char(), '‚ñ∑');",
          "    assert_eq!(Look::WordStartHalfUnicode.as_char(), '‚óÄ');",
          "    assert_eq!(Look::WordEndHalfUnicode.as_char(), '‚ñ∂');"
        ],
        "code": [
          "{",
          "    let look_wordEndUnicode = Look::WordEndUnicode;",
          "    let result = look_wordEndUnicode.as_char();",
          "    assert_eq!(Look::Start.as_char(), 'A');",
          "    assert_eq!(Look::End.as_char(), 'z');",
          "    assert_eq!(Look::StartLF.as_char(), '^');",
          "    assert_eq!(Look::EndLF.as_char(), '$');",
          "    assert_eq!(Look::StartCRLF.as_char(), 'r');",
          "    assert_eq!(Look::EndCRLF.as_char(), 'R');",
          "    assert_eq!(Look::WordAscii.as_char(), 'b');",
          "    assert_eq!(Look::WordAsciiNegate.as_char(), 'B');",
          "    assert_eq!(Look::WordUnicode.as_char(), 'ùõÉ');",
          "    assert_eq!(Look::WordUnicodeNegate.as_char(), 'ùö©');",
          "    assert_eq!(Look::WordStartAscii.as_char(), '<');",
          "    assert_eq!(Look::WordEndAscii.as_char(), '>');",
          "    assert_eq!(Look::WordStartUnicode.as_char(), '„Äà');",
          "    assert_eq!(Look::WordEndUnicode.as_char(), '„Äâ');",
          "    assert_eq!(Look::WordStartHalfAscii.as_char(), '‚óÅ');",
          "    assert_eq!(Look::WordEndHalfAscii.as_char(), '‚ñ∑');",
          "    assert_eq!(Look::WordStartHalfUnicode.as_char(), '‚óÄ');",
          "    assert_eq!(Look::WordEndHalfUnicode.as_char(), '‚ñ∂');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_wordStartHalfAscii = Look::WordStartHalfAscii;",
          "    let result = look_wordStartHalfAscii.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::Start.as_char(), 'A');",
          "    assert_eq!(Look::End.as_char(), 'z');",
          "    assert_eq!(Look::StartLF.as_char(), '^');",
          "    assert_eq!(Look::EndLF.as_char(), '$');",
          "    assert_eq!(Look::StartCRLF.as_char(), 'r');",
          "    assert_eq!(Look::EndCRLF.as_char(), 'R');",
          "    assert_eq!(Look::WordAscii.as_char(), 'b');",
          "    assert_eq!(Look::WordAsciiNegate.as_char(), 'B');",
          "    assert_eq!(Look::WordUnicode.as_char(), 'ùõÉ');",
          "    assert_eq!(Look::WordUnicodeNegate.as_char(), 'ùö©');",
          "    assert_eq!(Look::WordStartAscii.as_char(), '<');",
          "    assert_eq!(Look::WordEndAscii.as_char(), '>');",
          "    assert_eq!(Look::WordStartUnicode.as_char(), '„Äà');",
          "    assert_eq!(Look::WordEndUnicode.as_char(), '„Äâ');",
          "    assert_eq!(Look::WordStartHalfAscii.as_char(), '‚óÅ');",
          "    assert_eq!(Look::WordEndHalfAscii.as_char(), '‚ñ∑');",
          "    assert_eq!(Look::WordStartHalfUnicode.as_char(), '‚óÄ');",
          "    assert_eq!(Look::WordEndHalfUnicode.as_char(), '‚ñ∂');"
        ],
        "code": [
          "{",
          "    let look_wordStartHalfAscii = Look::WordStartHalfAscii;",
          "    let result = look_wordStartHalfAscii.as_char();",
          "    assert_eq!(Look::Start.as_char(), 'A');",
          "    assert_eq!(Look::End.as_char(), 'z');",
          "    assert_eq!(Look::StartLF.as_char(), '^');",
          "    assert_eq!(Look::EndLF.as_char(), '$');",
          "    assert_eq!(Look::StartCRLF.as_char(), 'r');",
          "    assert_eq!(Look::EndCRLF.as_char(), 'R');",
          "    assert_eq!(Look::WordAscii.as_char(), 'b');",
          "    assert_eq!(Look::WordAsciiNegate.as_char(), 'B');",
          "    assert_eq!(Look::WordUnicode.as_char(), 'ùõÉ');",
          "    assert_eq!(Look::WordUnicodeNegate.as_char(), 'ùö©');",
          "    assert_eq!(Look::WordStartAscii.as_char(), '<');",
          "    assert_eq!(Look::WordEndAscii.as_char(), '>');",
          "    assert_eq!(Look::WordStartUnicode.as_char(), '„Äà');",
          "    assert_eq!(Look::WordEndUnicode.as_char(), '„Äâ');",
          "    assert_eq!(Look::WordStartHalfAscii.as_char(), '‚óÅ');",
          "    assert_eq!(Look::WordEndHalfAscii.as_char(), '‚ñ∑');",
          "    assert_eq!(Look::WordStartHalfUnicode.as_char(), '‚óÄ');",
          "    assert_eq!(Look::WordEndHalfUnicode.as_char(), '‚ñ∂');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_wordEndHalfAscii = Look::WordEndHalfAscii;",
          "    let result = look_wordEndHalfAscii.as_char();",
          "}"
        ],
        "oracle": [
          "    Look::End.as_char() == 'z'",
          "    Look::Start.as_char() == 'A'",
          "    Look::StartLF.as_char() == '^'",
          "    Look::EndLF.as_char() == '$'",
          "    Look::StartCRLF.as_char() == 'r'",
          "    Look::EndCRLF.as_char() == 'R'",
          "    Look::WordAscii.as_char() == 'b'",
          "    Look::WordAsciiNegate.as_char() == 'B'",
          "    Look::WordUnicode.as_char() == 'ùõÉ'",
          "    Look::WordUnicodeNegate.as_char() == 'ùö©'",
          "    Look::WordStartAscii.as_char() == '<'",
          "    Look::WordEndAscii.as_char() == '>'",
          "    Look::WordStartUnicode.as_char() == '„Äà'",
          "    Look::WordEndUnicode.as_char() == '„Äâ'",
          "    Look::WordStartHalfAscii.as_char() == '‚óÅ'",
          "    Look::WordEndHalfAscii.as_char() == '‚ñ∑'",
          "    Look::WordStartHalfUnicode.as_char() == '‚óÄ'",
          "    Look::WordEndHalfUnicode.as_char() == '‚ñ∂'"
        ],
        "code": [
          "{",
          "    let look_wordEndHalfAscii = Look::WordEndHalfAscii;",
          "    let result = look_wordEndHalfAscii.as_char();",
          "    Look::End.as_char() == 'z'",
          "    Look::Start.as_char() == 'A'",
          "    Look::StartLF.as_char() == '^'",
          "    Look::EndLF.as_char() == '$'",
          "    Look::StartCRLF.as_char() == 'r'",
          "    Look::EndCRLF.as_char() == 'R'",
          "    Look::WordAscii.as_char() == 'b'",
          "    Look::WordAsciiNegate.as_char() == 'B'",
          "    Look::WordUnicode.as_char() == 'ùõÉ'",
          "    Look::WordUnicodeNegate.as_char() == 'ùö©'",
          "    Look::WordStartAscii.as_char() == '<'",
          "    Look::WordEndAscii.as_char() == '>'",
          "    Look::WordStartUnicode.as_char() == '„Äà'",
          "    Look::WordEndUnicode.as_char() == '„Äâ'",
          "    Look::WordStartHalfAscii.as_char() == '‚óÅ'",
          "    Look::WordEndHalfAscii.as_char() == '‚ñ∑'",
          "    Look::WordStartHalfUnicode.as_char() == '‚óÄ'",
          "    Look::WordEndHalfUnicode.as_char() == '‚ñ∂'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_wordStartHalfUnicode = Look::WordStartHalfUnicode;",
          "    let result = look_wordStartHalfUnicode.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::End.as_char(), 'z');"
        ],
        "code": [
          "{",
          "    let look_wordStartHalfUnicode = Look::WordStartHalfUnicode;",
          "    let result = look_wordStartHalfUnicode.as_char();",
          "    assert_eq!(Look::End.as_char(), 'z');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_wordEndHalfUnicode = Look::WordEndHalfUnicode;",
          "    let result = look_wordEndHalfUnicode.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::End.as_char(), 'z');"
        ],
        "code": [
          "{",
          "    let look_wordEndHalfUnicode = Look::WordEndHalfUnicode;",
          "    let result = look_wordEndHalfUnicode.as_char();",
          "    assert_eq!(Look::End.as_char(), 'z');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]