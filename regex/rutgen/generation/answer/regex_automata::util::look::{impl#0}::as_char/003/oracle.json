[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordEndHalfAscii;",
          "    let result = look.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, '▷');"
        ],
        "code": [
          "{",
          "    let look = Look::WordEndHalfAscii;",
          "    let result = look.as_char();",
          "    assert_eq!(result, '▷');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordStartHalfAscii;",
          "    let result = look.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::WordEndHalfAscii.as_char(), '▷');"
        ],
        "code": [
          "{",
          "    let look = Look::WordStartHalfAscii;",
          "    let result = look.as_char();",
          "    assert_eq!(Look::WordEndHalfAscii.as_char(), '▷');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordEndAscii;",
          "    let result = look.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::WordEndHalfAscii.as_char(), '▷');"
        ],
        "code": [
          "{",
          "    let look = Look::WordEndAscii;",
          "    let result = look.as_char();",
          "    assert_eq!(Look::WordEndHalfAscii.as_char(), '▷');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordStartAscii;",
          "    let result = look.as_char();",
          "}"
        ],
        "oracle": [
          "    Look::WordStartAscii.as_char(); // should return '<'",
          "    Look::WordAscii.as_char(); // should return 'b'",
          "    Look::WordAsciiNegate.as_char(); // should return 'B'",
          "    Look::WordUnicode.as_char(); // should return '𝛃'",
          "    Look::WordUnicodeNegate.as_char(); // should return '𝚩'",
          "    Look::WordStartUnicode.as_char(); // should return '〈'",
          "    Look::WordEndUnicode.as_char(); // should return '〉'",
          "    Look::WordStartHalfAscii.as_char(); // should return '◁'",
          "    Look::WordEndHalfAscii.as_char(); // should return '▷'",
          "    Look::Start.as_char(); // should return 'A'",
          "    Look::End.as_char(); // should return 'z'",
          "    Look::StartLF.as_char(); // should return '^'",
          "    Look::EndLF.as_char(); // should return '$'",
          "    Look::StartCRLF.as_char(); // should return 'r'",
          "    Look::EndCRLF.as_char(); // should return 'R'"
        ],
        "code": [
          "{",
          "    let look = Look::WordStartAscii;",
          "    let result = look.as_char();",
          "    Look::WordStartAscii.as_char(); // should return '<'",
          "    Look::WordAscii.as_char(); // should return 'b'",
          "    Look::WordAsciiNegate.as_char(); // should return 'B'",
          "    Look::WordUnicode.as_char(); // should return '𝛃'",
          "    Look::WordUnicodeNegate.as_char(); // should return '𝚩'",
          "    Look::WordStartUnicode.as_char(); // should return '〈'",
          "    Look::WordEndUnicode.as_char(); // should return '〉'",
          "    Look::WordStartHalfAscii.as_char(); // should return '◁'",
          "    Look::WordEndHalfAscii.as_char(); // should return '▷'",
          "    Look::Start.as_char(); // should return 'A'",
          "    Look::End.as_char(); // should return 'z'",
          "    Look::StartLF.as_char(); // should return '^'",
          "    Look::EndLF.as_char(); // should return '$'",
          "    Look::StartCRLF.as_char(); // should return 'r'",
          "    Look::EndCRLF.as_char(); // should return 'R'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordEndUnicode;",
          "    let result = look.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.as_char(), '▶');"
        ],
        "code": [
          "{",
          "    let look = Look::WordEndUnicode;",
          "    let result = look.as_char();",
          "    assert_eq!(look.as_char(), '▶');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordStartUnicode;",
          "    let result = look.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::WordEndHalfAscii.as_char(), '▷');"
        ],
        "code": [
          "{",
          "    let look = Look::WordStartUnicode;",
          "    let result = look.as_char();",
          "    assert_eq!(Look::WordEndHalfAscii.as_char(), '▷');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]