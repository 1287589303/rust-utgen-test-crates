[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::EndLF;",
          "    let _ = look.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.as_char(), '$');"
        ],
        "code": [
          "{",
          "    let look = Look::EndLF;",
          "    let _ = look.as_char();",
          "    assert_eq!(look.as_char(), '$');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::Start;",
          "    let _ = look.as_char();",
          "}"
        ],
        "oracle": [
          "    look.as_char() == 'A'",
          "    look.as_char() == 'z'",
          "    look.as_char() == '^'",
          "    look.as_char() == '$'",
          "    look.as_char() == 'r'",
          "    look.as_char() == 'R'",
          "    look.as_char() == 'b'",
          "    look.as_char() == 'B'",
          "    look.as_char() == 'ùõÉ'",
          "    look.as_char() == 'ùö©'",
          "    look.as_char() == '<'",
          "    look.as_char() == '>'",
          "    look.as_char() == '„Äà'",
          "    look.as_char() == '„Äâ'",
          "    look.as_char() == '‚óÅ'",
          "    look.as_char() == '‚ñ∑'",
          "    look.as_char() == '‚óÄ'",
          "    look.as_char() == '‚ñ∂'"
        ],
        "code": [
          "{",
          "    let look = Look::Start;",
          "    let _ = look.as_char();",
          "    look.as_char() == 'A'",
          "    look.as_char() == 'z'",
          "    look.as_char() == '^'",
          "    look.as_char() == '$'",
          "    look.as_char() == 'r'",
          "    look.as_char() == 'R'",
          "    look.as_char() == 'b'",
          "    look.as_char() == 'B'",
          "    look.as_char() == 'ùõÉ'",
          "    look.as_char() == 'ùö©'",
          "    look.as_char() == '<'",
          "    look.as_char() == '>'",
          "    look.as_char() == '„Äà'",
          "    look.as_char() == '„Äâ'",
          "    look.as_char() == '‚óÅ'",
          "    look.as_char() == '‚ñ∑'",
          "    look.as_char() == '‚óÄ'",
          "    look.as_char() == '‚ñ∂'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::End;",
          "    let _ = look.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::EndLF.as_char(), '$');"
        ],
        "code": [
          "{",
          "    let look = Look::End;",
          "    let _ = look.as_char();",
          "    assert_eq!(Look::EndLF.as_char(), '$');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::StartLF;",
          "    let _ = look.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::EndLF.as_char(), '$');"
        ],
        "code": [
          "{",
          "    let look = Look::StartLF;",
          "    let _ = look.as_char();",
          "    assert_eq!(Look::EndLF.as_char(), '$');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::StartCRLF;",
          "    let _ = look.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::EndLF.as_char(), '$');"
        ],
        "code": [
          "{",
          "    let look = Look::StartCRLF;",
          "    let _ = look.as_char();",
          "    assert_eq!(Look::EndLF.as_char(), '$');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]