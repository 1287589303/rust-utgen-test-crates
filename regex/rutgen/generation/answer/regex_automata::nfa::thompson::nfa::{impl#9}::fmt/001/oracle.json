[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition = Transition {",
          "        start: 0,",
          "        end: 0,",
          "        next: StateID(SmallIndex(1)),",
          "    };",
          "    let mut output = String::new();",
          "    let _ = fmt::write(&mut output, transition.fmt(&mut fmt::Formatter::new()));",
          "}"
        ],
        "oracle": [
          "    write!(f, \"{:?} => {:?}\", DebugByte(0), 1);"
        ],
        "code": [
          "{",
          "    let transition = Transition {",
          "        start: 0,",
          "        end: 0,",
          "        next: StateID(SmallIndex(1)),",
          "    };",
          "    let mut output = String::new();",
          "    let _ = fmt::write(&mut output, transition.fmt(&mut fmt::Formatter::new()));",
          "    write!(f, \"{:?} => {:?}\", DebugByte(0), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition = Transition {",
          "        start: 127,",
          "        end: 127,",
          "        next: StateID(SmallIndex(2)),",
          "    };",
          "    let mut output = String::new();",
          "    let _ = fmt::write(&mut output, transition.fmt(&mut fmt::Formatter::new()));",
          "}"
        ],
        "oracle": [
          "    write!(f, \"{:?} => {:?}\", DebugByte(127), 2) assert_eq!(output, \"DebugByte(127) => 2\");"
        ],
        "code": [
          "{",
          "    let transition = Transition {",
          "        start: 127,",
          "        end: 127,",
          "        next: StateID(SmallIndex(2)),",
          "    };",
          "    let mut output = String::new();",
          "    let _ = fmt::write(&mut output, transition.fmt(&mut fmt::Formatter::new()));",
          "    write!(f, \"{:?} => {:?}\", DebugByte(127), 2) assert_eq!(output, \"DebugByte(127) => 2\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition = Transition {",
          "        start: 255,",
          "        end: 255,",
          "        next: StateID(SmallIndex(3)),",
          "    };",
          "    let mut output = String::new();",
          "    let _ = fmt::write(&mut output, transition.fmt(&mut fmt::Formatter::new()));",
          "}"
        ],
        "oracle": [
          "    write!(f, \"{:?} => {:?}\", DebugByte(255), 3)"
        ],
        "code": [
          "{",
          "    let transition = Transition {",
          "        start: 255,",
          "        end: 255,",
          "        next: StateID(SmallIndex(3)),",
          "    };",
          "    let mut output = String::new();",
          "    let _ = fmt::write(&mut output, transition.fmt(&mut fmt::Formatter::new()));",
          "    write!(f, \"{:?} => {:?}\", DebugByte(255), 3)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]