[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::empty();",
          "    let captures = Captures::empty(group_info.clone());",
          "    let result = captures.get_group(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::empty();",
          "    let captures = Captures::empty(group_info.clone());",
          "    let result = captures.get_group(0);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::empty();",
          "    let captures = Captures::empty(group_info.clone());",
          "    let result = captures.get_group(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::empty();",
          "    let captures = Captures::empty(group_info.clone());",
          "    let result = captures.get_group(1);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::empty();",
          "    let captures = Captures::empty(group_info.clone());",
          "    let result = captures.get_group(2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::empty();",
          "    let captures = Captures::empty(group_info.clone());",
          "    let result = captures.get_group(2);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::new(vec![vec![None]]).unwrap();",
          "    let captures = Captures::all(group_info);",
          "    let result = captures.get_group(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None)"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::new(vec![vec![None]]).unwrap();",
          "    let captures = Captures::all(group_info);",
          "    let result = captures.get_group(0);",
          "    assert_eq!(result, None)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::new(vec![vec![None]]).unwrap();",
          "    let captures = Captures::all(group_info);",
          "    let result = captures.get_group(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::new(vec![vec![None]]).unwrap();",
          "    let captures = Captures::all(group_info);",
          "    let result = captures.get_group(1);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]