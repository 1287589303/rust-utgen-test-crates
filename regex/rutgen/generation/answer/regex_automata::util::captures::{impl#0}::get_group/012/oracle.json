[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::new(vec![Some(\"group1\")]).unwrap();",
          "    let pattern_id = PatternID(SmallIndex::new(0).unwrap());",
          "    let slots = vec![Some(NonMaxUsize::new(0).unwrap()), Some(NonMaxUsize::new(5).unwrap())];",
          "    ",
          "    let captures = Captures {",
          "        group_info: group_info.clone(),",
          "        pid: Some(pattern_id),",
          "        slots,",
          "    };",
          "",
          "    let span = captures.get_group(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(captures.pattern(), Some(pattern_id));",
          "    assert_eq!(captures.group_info().pattern_len(), 1);",
          "    assert_eq!(captures.group_info().slots(pattern_id, 0), Some((0, 1)));",
          "    assert_eq!(captures.slots.get(0).copied(), Some(Some(NonMaxUsize::new(0).unwrap())));",
          "    assert_eq!(captures.slots.get(1).copied(), Some(Some(NonMaxUsize::new(5).unwrap())));",
          "    assert_eq!(span, Some(Span { start: 0, end: 5 }));"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::new(vec![Some(\"group1\")]).unwrap();",
          "    let pattern_id = PatternID(SmallIndex::new(0).unwrap());",
          "    let slots = vec![Some(NonMaxUsize::new(0).unwrap()), Some(NonMaxUsize::new(5).unwrap())];",
          "    ",
          "    let captures = Captures {",
          "        group_info: group_info.clone(),",
          "        pid: Some(pattern_id),",
          "        slots,",
          "    };",
          "",
          "    let span = captures.get_group(0);",
          "    assert_eq!(captures.pattern(), Some(pattern_id));",
          "    assert_eq!(captures.group_info().pattern_len(), 1);",
          "    assert_eq!(captures.group_info().slots(pattern_id, 0), Some((0, 1)));",
          "    assert_eq!(captures.slots.get(0).copied(), Some(Some(NonMaxUsize::new(0).unwrap())));",
          "    assert_eq!(captures.slots.get(1).copied(), Some(Some(NonMaxUsize::new(5).unwrap())));",
          "    assert_eq!(span, Some(Span { start: 0, end: 5 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::new(vec![Some(\"group1\")]).unwrap();",
          "    let pattern_id = PatternID(SmallIndex::new(0).unwrap());",
          "    let slots = vec![",
          "        Some(NonMaxUsize::new(0).unwrap()), ",
          "        Some(NonMaxUsize::new(5).unwrap())",
          "    ];",
          "    ",
          "    let captures = Captures {",
          "        group_info: group_info.clone(),",
          "        pid: Some(pattern_id),",
          "        slots,",
          "    };",
          "",
          "    let span = captures.get_group(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Some(Span { start: 0, end: 5 }), span);",
          "    assert!(captures.pattern().is_some());",
          "    assert_eq!(captures.group_info().pattern_len(), 1);",
          "    assert!(captures.group_info().slots(pattern_id, 1).is_some());",
          "    assert!(captures.slots.get(1).copied().is_some());",
          "    assert!(captures.slots.get(2).copied().is_some());",
          "    assert!(captures.slots.get(2).copied().is_none());"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::new(vec![Some(\"group1\")]).unwrap();",
          "    let pattern_id = PatternID(SmallIndex::new(0).unwrap());",
          "    let slots = vec![",
          "        Some(NonMaxUsize::new(0).unwrap()), ",
          "        Some(NonMaxUsize::new(5).unwrap())",
          "    ];",
          "    ",
          "    let captures = Captures {",
          "        group_info: group_info.clone(),",
          "        pid: Some(pattern_id),",
          "        slots,",
          "    };",
          "",
          "    let span = captures.get_group(1);",
          "    assert_eq!(Some(Span { start: 0, end: 5 }), span);",
          "    assert!(captures.pattern().is_some());",
          "    assert_eq!(captures.group_info().pattern_len(), 1);",
          "    assert!(captures.group_info().slots(pattern_id, 1).is_some());",
          "    assert!(captures.slots.get(1).copied().is_some());",
          "    assert!(captures.slots.get(2).copied().is_some());",
          "    assert!(captures.slots.get(2).copied().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::new(vec![Some(\"group1\")]).unwrap();",
          "    let pattern_id = PatternID(SmallIndex::new(0).unwrap());",
          "    let slots = vec![",
          "        Some(NonMaxUsize::new(0).unwrap()), ",
          "        Some(NonMaxUsize::new(5).unwrap())",
          "    ];",
          "    ",
          "    let captures = Captures {",
          "        group_info: group_info.clone(),",
          "        pid: Some(pattern_id),",
          "        slots,",
          "    };",
          "",
          "    let span = captures.get_group(2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Some(Span { start: 0, end: 5 }), captures.get_group(1));",
          "    assert_eq!(None, captures.get_group(3));",
          "    assert_eq!(None, captures.get_group(9944060567225171988));",
          "    assert!(captures.is_match());",
          "    assert!(captures.pattern().is_some());",
          "    assert!(captures.get_match().is_some());"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::new(vec![Some(\"group1\")]).unwrap();",
          "    let pattern_id = PatternID(SmallIndex::new(0).unwrap());",
          "    let slots = vec![",
          "        Some(NonMaxUsize::new(0).unwrap()), ",
          "        Some(NonMaxUsize::new(5).unwrap())",
          "    ];",
          "    ",
          "    let captures = Captures {",
          "        group_info: group_info.clone(),",
          "        pid: Some(pattern_id),",
          "        slots,",
          "    };",
          "",
          "    let span = captures.get_group(2);",
          "    assert_eq!(Some(Span { start: 0, end: 5 }), captures.get_group(1));",
          "    assert_eq!(None, captures.get_group(3));",
          "    assert_eq!(None, captures.get_group(9944060567225171988));",
          "    assert!(captures.is_match());",
          "    assert!(captures.pattern().is_some());",
          "    assert!(captures.get_match().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::new(vec![Some(\"group1\")]).unwrap();",
          "    let pattern_id = PatternID(SmallIndex::new(0).unwrap());",
          "    let slots = vec![",
          "        Some(NonMaxUsize::new(0).unwrap()), ",
          "        None",
          "    ];",
          "    ",
          "    let captures = Captures {",
          "        group_info: group_info.clone(),",
          "        pid: Some(pattern_id),",
          "        slots,",
          "    };",
          "",
          "    let span = captures.get_group(1);",
          "}"
        ],
        "oracle": [
          "    assert!(captures.pattern().is_some());",
          "    assert_eq!(captures.group_info().pattern_len(), 1);",
          "    assert!(captures.group_info().slots(pattern_id, 1).is_some());",
          "    assert!(captures.slots.get(2).copied().is_some());",
          "    assert!(captures.slots.get(2).copied().is_none());"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::new(vec![Some(\"group1\")]).unwrap();",
          "    let pattern_id = PatternID(SmallIndex::new(0).unwrap());",
          "    let slots = vec![",
          "        Some(NonMaxUsize::new(0).unwrap()), ",
          "        None",
          "    ];",
          "    ",
          "    let captures = Captures {",
          "        group_info: group_info.clone(),",
          "        pid: Some(pattern_id),",
          "        slots,",
          "    };",
          "",
          "    let span = captures.get_group(1);",
          "    assert!(captures.pattern().is_some());",
          "    assert_eq!(captures.group_info().pattern_len(), 1);",
          "    assert!(captures.group_info().slots(pattern_id, 1).is_some());",
          "    assert!(captures.slots.get(2).copied().is_some());",
          "    assert!(captures.slots.get(2).copied().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]