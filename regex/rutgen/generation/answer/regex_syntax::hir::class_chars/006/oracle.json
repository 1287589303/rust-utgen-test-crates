[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unicode_class_1 = ClassUnicode::new(vec![ClassUnicodeRange { start: 'a', end: 'z' }]);",
          "    let unicode_class_2 = ClassUnicode::new(vec![ClassUnicodeRange { start: 'A', end: 'Z' }]);",
          "    ",
          "    let hir_1 = Hir { kind: HirKind::Class(Class::Unicode(unicode_class_1)), props: Properties::default() };",
          "    let hir_2 = Hir { kind: HirKind::Class(Class::Unicode(unicode_class_2)), props: Properties::default() };",
          "    ",
          "    let hirs = vec![hir_1, hir_2];",
          "    ",
          "    let result = class_chars(&hirs);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange { start: 'a', end: 'z' }, ClassUnicodeRange { start: 'A', end: 'Z' }])),));"
        ],
        "code": [
          "{",
          "    let unicode_class_1 = ClassUnicode::new(vec![ClassUnicodeRange { start: 'a', end: 'z' }]);",
          "    let unicode_class_2 = ClassUnicode::new(vec![ClassUnicodeRange { start: 'A', end: 'Z' }]);",
          "    ",
          "    let hir_1 = Hir { kind: HirKind::Class(Class::Unicode(unicode_class_1)), props: Properties::default() };",
          "    let hir_2 = Hir { kind: HirKind::Class(Class::Unicode(unicode_class_2)), props: Properties::default() };",
          "    ",
          "    let hirs = vec![hir_1, hir_2];",
          "    ",
          "    let result = class_chars(&hirs);",
          "    assert_eq!(result, Some(Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange { start: 'a', end: 'z' }, ClassUnicodeRange { start: 'A', end: 'Z' }])),));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes_class_ascii = ClassBytes::new(vec![ClassBytesRange { start: 0x20, end: 0x7E }]); // ASCII range",
          "    let unicode_class = ClassUnicode::new(vec![ClassUnicodeRange { start: '0', end: '9' }]);",
          "    ",
          "    let hir_bytes = Hir { kind: HirKind::Class(Class::Bytes(bytes_class_ascii)), props: Properties::default() };",
          "    let hir_unicode = Hir { kind: HirKind::Class(Class::Unicode(unicode_class)), props: Properties::default() };",
          "    ",
          "    let hirs = vec![hir_bytes, hir_unicode];",
          "    ",
          "    let result = class_chars(&hirs);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange { start: '0', end: '9' }]))));"
        ],
        "code": [
          "{",
          "    let bytes_class_ascii = ClassBytes::new(vec![ClassBytesRange { start: 0x20, end: 0x7E }]); // ASCII range",
          "    let unicode_class = ClassUnicode::new(vec![ClassUnicodeRange { start: '0', end: '9' }]);",
          "    ",
          "    let hir_bytes = Hir { kind: HirKind::Class(Class::Bytes(bytes_class_ascii)), props: Properties::default() };",
          "    let hir_unicode = Hir { kind: HirKind::Class(Class::Unicode(unicode_class)), props: Properties::default() };",
          "    ",
          "    let hirs = vec![hir_bytes, hir_unicode];",
          "    ",
          "    let result = class_chars(&hirs);",
          "    assert_eq!(result, Some(Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange { start: '0', end: '9' }]))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes_class_ascii = ClassBytes::new(vec![ClassBytesRange { start: 0x30, end: 0x39 }]); // ASCII digits",
          "    let unicode_class_1 = ClassUnicode::new(vec![ClassUnicodeRange { start: 'a', end: 'f' }]);",
          "    ",
          "    let hir_bytes = Hir { kind: HirKind::Class(Class::Bytes(bytes_class_ascii)), props: Properties::default() };",
          "    let hir_unicode = Hir { kind: HirKind::Class(Class::Unicode(unicode_class_1)), props: Properties::default() };",
          "    ",
          "    let hirs = vec![hir_bytes, hir_unicode];",
          "    ",
          "    let result = class_chars(&hirs);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange { start: 'a', end: 'f' }]))));"
        ],
        "code": [
          "{",
          "    let bytes_class_ascii = ClassBytes::new(vec![ClassBytesRange { start: 0x30, end: 0x39 }]); // ASCII digits",
          "    let unicode_class_1 = ClassUnicode::new(vec![ClassUnicodeRange { start: 'a', end: 'f' }]);",
          "    ",
          "    let hir_bytes = Hir { kind: HirKind::Class(Class::Bytes(bytes_class_ascii)), props: Properties::default() };",
          "    let hir_unicode = Hir { kind: HirKind::Class(Class::Unicode(unicode_class_1)), props: Properties::default() };",
          "    ",
          "    let hirs = vec![hir_bytes, hir_unicode];",
          "    ",
          "    let result = class_chars(&hirs);",
          "    assert_eq!(result, Some(Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange { start: 'a', end: 'f' }]))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let bytes_class_non_ascii = ClassBytes::new(vec![ClassBytesRange { start: 0x80, end: 0xFF }]); // Non-ASCII range",
          "    let unicode_class = ClassUnicode::new(vec![ClassUnicodeRange { start: 'g', end: 'z' }]);",
          "    ",
          "    let hir_bytes = Hir { kind: HirKind::Class(Class::Bytes(bytes_class_non_ascii)), props: Properties::default() };",
          "    let hir_unicode = Hir { kind: HirKind::Class(Class::Unicode(unicode_class)), props: Properties::default() };",
          "    ",
          "    let hirs = vec![hir_bytes, hir_unicode];",
          "    ",
          "    let result = class_chars(&hirs);",
          "}"
        ],
        "oracle": [
          "    let bytes_class_non_ascii = ClassBytes::new(vec![ClassBytesRange { start: 0x80, end: 0xFF }]);",
          "    let unicode_class = ClassUnicode::new(vec![ClassUnicodeRange { start: 'g', end: 'z' }]);",
          "    let hir_bytes = Hir { kind: HirKind::Class(Class::Bytes(bytes_class_non_ascii)), props: Properties::default() };",
          "    let hir_unicode = Hir { kind: HirKind::Class(Class::Unicode(unicode_class)), props: Properties::default() };",
          "    let hirs = vec![hir_bytes, hir_unicode];",
          "    let result = class_chars(&hirs);",
          "    assert!(result.is_some() && matches!(result, Some(Class::Unicode(_))));"
        ],
        "code": [
          "{",
          "    let bytes_class_non_ascii = ClassBytes::new(vec![ClassBytesRange { start: 0x80, end: 0xFF }]); // Non-ASCII range",
          "    let unicode_class = ClassUnicode::new(vec![ClassUnicodeRange { start: 'g', end: 'z' }]);",
          "    ",
          "    let hir_bytes = Hir { kind: HirKind::Class(Class::Bytes(bytes_class_non_ascii)), props: Properties::default() };",
          "    let hir_unicode = Hir { kind: HirKind::Class(Class::Unicode(unicode_class)), props: Properties::default() };",
          "    ",
          "    let hirs = vec![hir_bytes, hir_unicode];",
          "    ",
          "    let result = class_chars(&hirs);",
          "    let bytes_class_non_ascii = ClassBytes::new(vec![ClassBytesRange { start: 0x80, end: 0xFF }]);",
          "    let unicode_class = ClassUnicode::new(vec![ClassUnicodeRange { start: 'g', end: 'z' }]);",
          "    let hir_bytes = Hir { kind: HirKind::Class(Class::Bytes(bytes_class_non_ascii)), props: Properties::default() };",
          "    let hir_unicode = Hir { kind: HirKind::Class(Class::Unicode(unicode_class)), props: Properties::default() };",
          "    let hirs = vec![hir_bytes, hir_unicode];",
          "    let result = class_chars(&hirs);",
          "    assert!(result.is_some() && matches!(result, Some(Class::Unicode(_))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]