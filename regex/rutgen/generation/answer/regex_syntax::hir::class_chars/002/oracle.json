[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hirs: Vec<Hir> = vec![",
          "        Hir {",
          "            kind: HirKind::Empty,",
          "            props: Properties {},",
          "        },",
          "        Hir {",
          "            kind: HirKind::Literal(Literal::new(b\"test\")),",
          "            props: Properties {},",
          "        },",
          "        Hir {",
          "            kind: HirKind::Look(Look::new()),",
          "            props: Properties {},",
          "        },",
          "        Hir {",
          "            kind: HirKind::Repetition(Repetition::new(Hir::empty(), 1, Some(2))),",
          "            props: Properties {},",
          "        },",
          "    ];",
          "    let result = class_chars(&hirs);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_chars(&hirs), None);",
          "    assert!(result.is_none());",
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Class(Class::Unicode(ClassUnicode::new(vec![]))), props: Properties {}, }];",
          "    assert_eq!(class_chars(&hirs), None);",
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Class(Class::Bytes(ClassBytes::new(vec![]))), props: Properties {}, }];",
          "    assert_eq!(class_chars(&hirs), None);",
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Class(Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange { start: 'A', end: 'Z' }])), props: Properties {}, }];",
          "    assert_eq!(class_chars(&hirs), None);"
        ],
        "code": [
          "{",
          "    let hirs: Vec<Hir> = vec![",
          "        Hir {",
          "            kind: HirKind::Empty,",
          "            props: Properties {},",
          "        },",
          "        Hir {",
          "            kind: HirKind::Literal(Literal::new(b\"test\")),",
          "            props: Properties {},",
          "        },",
          "        Hir {",
          "            kind: HirKind::Look(Look::new()),",
          "            props: Properties {},",
          "        },",
          "        Hir {",
          "            kind: HirKind::Repetition(Repetition::new(Hir::empty(), 1, Some(2))),",
          "            props: Properties {},",
          "        },",
          "    ];",
          "    let result = class_chars(&hirs);",
          "    assert_eq!(class_chars(&hirs), None);",
          "    assert!(result.is_none());",
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Class(Class::Unicode(ClassUnicode::new(vec![]))), props: Properties {}, }];",
          "    assert_eq!(class_chars(&hirs), None);",
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Class(Class::Bytes(ClassBytes::new(vec![]))), props: Properties {}, }];",
          "    assert_eq!(class_chars(&hirs), None);",
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Class(Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange { start: 'A', end: 'Z' }])), props: Properties {}, }];",
          "    assert_eq!(class_chars(&hirs), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hirs: Vec<Hir> = vec![",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::new(b\"abc\")),",
          "                    props: Properties {},",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Empty,",
          "                    props: Properties {},",
          "                },",
          "            ]),",
          "            props: Properties {},",
          "        },",
          "    ];",
          "    let result = class_chars(&hirs);",
          "}"
        ],
        "oracle": [
          "    let hirs: Vec<Hir> = vec![",
          "    Hir {",
          "    kind: HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::new(b\"abc\")),",
          "    props: Properties {},",
          "    },",
          "    Hir {",
          "    kind: HirKind::Empty,",
          "    props: Properties {},",
          "    },",
          "    ]),",
          "    props: Properties {},",
          "    },",
          "    ];",
          "    let result = class_chars(&hirs);",
          "    assert!(result.is_none());"
        ],
        "code": [
          "{",
          "    let hirs: Vec<Hir> = vec![",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::new(b\"abc\")),",
          "                    props: Properties {},",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Empty,",
          "                    props: Properties {},",
          "                },",
          "            ]),",
          "            props: Properties {},",
          "        },",
          "    ];",
          "    let result = class_chars(&hirs);",
          "    let hirs: Vec<Hir> = vec![",
          "    Hir {",
          "    kind: HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::new(b\"abc\")),",
          "    props: Properties {},",
          "    },",
          "    Hir {",
          "    kind: HirKind::Empty,",
          "    props: Properties {},",
          "    },",
          "    ]),",
          "    props: Properties {},",
          "    },",
          "    ];",
          "    let result = class_chars(&hirs);",
          "    assert!(result.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hirs: Vec<Hir> = vec![",
          "        Hir {",
          "            kind: HirKind::Capture(Capture::new(Hir::empty())),",
          "            props: Properties {},",
          "        },",
          "        Hir {",
          "            kind: HirKind::Class(Class::Unicode(ClassUnicode::empty())),",
          "            props: Properties {},",
          "        },",
          "    ];",
          "    let result = class_chars(&hirs);",
          "}"
        ],
        "oracle": [
          "    let hirs: Vec<Hir> = vec![",
          "    Hir {",
          "    kind: HirKind::Capture(Capture::new(Hir::empty())),",
          "    props: Properties {},",
          "    },",
          "    Hir {",
          "    kind: HirKind::Class(Class::Bytes(ClassBytes::empty())),",
          "    props: Properties {},",
          "    },",
          "    ];",
          "    let result = class_chars(&hirs);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let hirs: Vec<Hir> = vec![",
          "        Hir {",
          "            kind: HirKind::Capture(Capture::new(Hir::empty())),",
          "            props: Properties {},",
          "        },",
          "        Hir {",
          "            kind: HirKind::Class(Class::Unicode(ClassUnicode::empty())),",
          "            props: Properties {},",
          "        },",
          "    ];",
          "    let result = class_chars(&hirs);",
          "    let hirs: Vec<Hir> = vec![",
          "    Hir {",
          "    kind: HirKind::Capture(Capture::new(Hir::empty())),",
          "    props: Properties {},",
          "    },",
          "    Hir {",
          "    kind: HirKind::Class(Class::Bytes(ClassBytes::empty())),",
          "    props: Properties {},",
          "    },",
          "    ];",
          "    let result = class_chars(&hirs);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]