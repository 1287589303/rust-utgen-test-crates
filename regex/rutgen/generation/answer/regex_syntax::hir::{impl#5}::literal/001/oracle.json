[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Hir::literal(&[]);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Hir::literal(&[]).kind, HirKind::Empty);"
        ],
        "code": [
          "{",
          "    let result = Hir::literal(&[]);",
          "    assert_eq!(Hir::literal(&[]).kind, HirKind::Empty);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Hir::literal(Vec::<u8>::new());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind(), &HirKind::Empty);"
        ],
        "code": [
          "{",
          "    let result = Hir::literal(Vec::<u8>::new());",
          "    assert_eq!(result.kind(), &HirKind::Empty);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Hir::literal(\"\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Hir::literal(\"\").kind, HirKind::Empty);",
          "    assert!(Hir::literal(\"\").properties().is_utf8());",
          "    assert_eq!(Hir::literal(\"\").properties().minimum_len, None);",
          "    assert_eq!(Hir::literal(\"\").properties().maximum_len, None);"
        ],
        "code": [
          "{",
          "    let result = Hir::literal(\"\");",
          "    assert_eq!(Hir::literal(\"\").kind, HirKind::Empty);",
          "    assert!(Hir::literal(\"\").properties().is_utf8());",
          "    assert_eq!(Hir::literal(\"\").properties().minimum_len, None);",
          "    assert_eq!(Hir::literal(\"\").properties().maximum_len, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]