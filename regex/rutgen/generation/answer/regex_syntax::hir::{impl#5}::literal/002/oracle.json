[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Box::from([0x00]); // Single byte",
          "    let result = Hir::literal(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, HirKind::Literal(Literal(Box::from([0x00]))));",
          "    assert!(result.props.utf8);",
          "    assert_eq!(result.props.minimum_len, Some(1));",
          "    assert_eq!(result.props.maximum_len, Some(1));"
        ],
        "code": [
          "{",
          "    let input = Box::from([0x00]); // Single byte",
          "    let result = Hir::literal(input);",
          "    assert_eq!(result.kind, HirKind::Literal(Literal(Box::from([0x00]))));",
          "    assert!(result.props.utf8);",
          "    assert_eq!(result.props.minimum_len, Some(1));",
          "    assert_eq!(result.props.maximum_len, Some(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Box::from([0xE2, 0x98, 0x83]); // Multi-byte UTF-8 for '☃'",
          "    let result = Hir::literal(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, HirKind::Literal(Literal(Box::from([0xE2, 0x98, 0x83]))));",
          "    assert!(result.props.is_utf8());",
          "    assert_ne!(result.props.minimum_len, None);",
          "    assert_eq!(result.props.minimum_len.unwrap(), 3);",
          "    assert_eq!(result.props.maximum_len.unwrap(), 3);"
        ],
        "code": [
          "{",
          "    let input = Box::from([0xE2, 0x98, 0x83]); // Multi-byte UTF-8 for '☃'",
          "    let result = Hir::literal(input);",
          "    assert_eq!(result.kind, HirKind::Literal(Literal(Box::from([0xE2, 0x98, 0x83]))));",
          "    assert!(result.props.is_utf8());",
          "    assert_ne!(result.props.minimum_len, None);",
          "    assert_eq!(result.props.minimum_len.unwrap(), 3);",
          "    assert_eq!(result.props.maximum_len.unwrap(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Box::from([0x01]); // Minimum non-empty byte array",
          "    let result = Hir::literal(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(HirKind::Literal(Literal(Box::from([0x01]))), result.kind);",
          "    assert!(result.props.is_utf8());",
          "    assert!(result.props.minimum_len == Some(1));",
          "    assert!(result.props.maximum_len == Some(1));"
        ],
        "code": [
          "{",
          "    let input = Box::from([0x01]); // Minimum non-empty byte array",
          "    let result = Hir::literal(input);",
          "    assert_eq!(HirKind::Literal(Literal(Box::from([0x01]))), result.kind);",
          "    assert!(result.props.is_utf8());",
          "    assert!(result.props.minimum_len == Some(1));",
          "    assert!(result.props.maximum_len == Some(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Box::from([0xFF]); // Single byte at upper boundary",
          "    let result = Hir::literal(input);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(result.kind, HirKind::Literal(_)));",
          "    assert_eq!(result.props.0.minimum_len, Some(1));",
          "    assert_eq!(result.props.0.maximum_len, Some(1));",
          "    assert!(result.props.0.utf8);",
          "    assert_eq!(result.props.0.literal, true);",
          "    assert_eq!(result.props.0.alternation_literal, true);"
        ],
        "code": [
          "{",
          "    let input = Box::from([0xFF]); // Single byte at upper boundary",
          "    let result = Hir::literal(input);",
          "    assert!(matches!(result.kind, HirKind::Literal(_)));",
          "    assert_eq!(result.props.0.minimum_len, Some(1));",
          "    assert_eq!(result.props.0.maximum_len, Some(1));",
          "    assert!(result.props.0.utf8);",
          "    assert_eq!(result.props.0.literal, true);",
          "    assert_eq!(result.props.0.alternation_literal, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Box::from([0xC3, 0xA9]); // Multi-byte UTF-8 for 'é'",
          "    let result = Hir::literal(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, HirKind::Literal(Literal(Box::from([0xC3, 0xA9]))));",
          "    assert!(result.props.utf8);"
        ],
        "code": [
          "{",
          "    let input = Box::from([0xC3, 0xA9]); // Multi-byte UTF-8 for 'é'",
          "    let result = Hir::literal(input);",
          "    assert_eq!(result.kind, HirKind::Literal(Literal(Box::from([0xC3, 0xA9]))));",
          "    assert!(result.props.utf8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]