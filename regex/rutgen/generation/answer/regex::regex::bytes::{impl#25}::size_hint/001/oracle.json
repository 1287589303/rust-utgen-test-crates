[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockGroupInfoPatternNames;",
          "    ",
          "    impl captures::GroupInfoPatternNames<'static> for MockGroupInfoPatternNames {",
          "        fn size_hint(&self) -> (usize, Option<usize>) {",
          "            (0, None)",
          "        }",
          "    }",
          "",
          "    let group_info = MockGroupInfoPatternNames;",
          "    let capture_names = CaptureNames(group_info);",
          "    capture_names.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(capture_names.size_hint(), (0, None));"
        ],
        "code": [
          "{",
          "    struct MockGroupInfoPatternNames;",
          "    ",
          "    impl captures::GroupInfoPatternNames<'static> for MockGroupInfoPatternNames {",
          "        fn size_hint(&self) -> (usize, Option<usize>) {",
          "            (0, None)",
          "        }",
          "    }",
          "",
          "    let group_info = MockGroupInfoPatternNames;",
          "    let capture_names = CaptureNames(group_info);",
          "    capture_names.size_hint();",
          "    assert_eq!(capture_names.size_hint(), (0, None));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockGroupInfoPatternNames;",
          "    ",
          "    impl captures::GroupInfoPatternNames<'static> for MockGroupInfoPatternNames {",
          "        fn size_hint(&self) -> (usize, Option<usize>) {",
          "            (0, Some(0))",
          "        }",
          "    }",
          "",
          "    let group_info = MockGroupInfoPatternNames;",
          "    let capture_names = CaptureNames(group_info);",
          "    capture_names.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(capture_names.size_hint(), (0, Some(0)));"
        ],
        "code": [
          "{",
          "    struct MockGroupInfoPatternNames;",
          "    ",
          "    impl captures::GroupInfoPatternNames<'static> for MockGroupInfoPatternNames {",
          "        fn size_hint(&self) -> (usize, Option<usize>) {",
          "            (0, Some(0))",
          "        }",
          "    }",
          "",
          "    let group_info = MockGroupInfoPatternNames;",
          "    let capture_names = CaptureNames(group_info);",
          "    capture_names.size_hint();",
          "    assert_eq!(capture_names.size_hint(), (0, Some(0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockGroupInfoPatternNames;",
          "    ",
          "    impl captures::GroupInfoPatternNames<'static> for MockGroupInfoPatternNames {",
          "        fn size_hint(&self) -> (usize, Option<usize>) {",
          "            (1, Some(1))",
          "        }",
          "    }",
          "",
          "    let group_info = MockGroupInfoPatternNames;",
          "    let capture_names = CaptureNames(group_info);",
          "    capture_names.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(capture_names.size_hint(), (1, Some(1));"
        ],
        "code": [
          "{",
          "    struct MockGroupInfoPatternNames;",
          "    ",
          "    impl captures::GroupInfoPatternNames<'static> for MockGroupInfoPatternNames {",
          "        fn size_hint(&self) -> (usize, Option<usize>) {",
          "            (1, Some(1))",
          "        }",
          "    }",
          "",
          "    let group_info = MockGroupInfoPatternNames;",
          "    let capture_names = CaptureNames(group_info);",
          "    capture_names.size_hint();",
          "    assert_eq!(capture_names.size_hint(), (1, Some(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockGroupInfoPatternNames;",
          "    ",
          "    impl captures::GroupInfoPatternNames<'static> for MockGroupInfoPatternNames {",
          "        fn size_hint(&self) -> (usize, Option<usize>) {",
          "            (3, Some(3))",
          "        }",
          "    }",
          "",
          "    let group_info = MockGroupInfoPatternNames;",
          "    let capture_names = CaptureNames(group_info);",
          "    capture_names.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(capture_names.size_hint(), (3, Some(3));"
        ],
        "code": [
          "{",
          "    struct MockGroupInfoPatternNames;",
          "    ",
          "    impl captures::GroupInfoPatternNames<'static> for MockGroupInfoPatternNames {",
          "        fn size_hint(&self) -> (usize, Option<usize>) {",
          "            (3, Some(3))",
          "        }",
          "    }",
          "",
          "    let group_info = MockGroupInfoPatternNames;",
          "    let capture_names = CaptureNames(group_info);",
          "    capture_names.size_hint();",
          "    assert_eq!(capture_names.size_hint(), (3, Some(3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockGroupInfoPatternNames;",
          "    ",
          "    impl captures::GroupInfoPatternNames<'static> for MockGroupInfoPatternNames {",
          "        fn size_hint(&self) -> (usize, Option<usize>) {",
          "            (10, Some(10))",
          "        }",
          "    }",
          "",
          "    let group_info = MockGroupInfoPatternNames;",
          "    let capture_names = CaptureNames(group_info);",
          "    capture_names.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(capture_names.size_hint(), (10, Some(10));"
        ],
        "code": [
          "{",
          "    struct MockGroupInfoPatternNames;",
          "    ",
          "    impl captures::GroupInfoPatternNames<'static> for MockGroupInfoPatternNames {",
          "        fn size_hint(&self) -> (usize, Option<usize>) {",
          "            (10, Some(10))",
          "        }",
          "    }",
          "",
          "    let group_info = MockGroupInfoPatternNames;",
          "    let capture_names = CaptureNames(group_info);",
          "    capture_names.size_hint();",
          "    assert_eq!(capture_names.size_hint(), (10, Some(10));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]