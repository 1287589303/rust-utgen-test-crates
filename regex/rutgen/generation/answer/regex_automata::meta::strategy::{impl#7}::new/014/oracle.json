[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo::new(Config::new().auto_prefilter(true), &[]),",
          "        pre: None,",
          "        nfa: NFA::default(),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::default(),",
          "        dfa: wrappers::DFA::default(),",
          "    };",
          "    let hirs: &[&Hir] = &[];",
          "",
          "    let result = ReverseSuffix::new(core, hirs);",
          "}"
        ],
        "oracle": [
          "    let core = Core { info: RegexInfo::new(Config::new().auto_prefilter(true), &[]), pre: None, nfa: NFA::default(), nfarev: None, pikevm: wrappers::PikeVM::default(), backtrack: wrappers::BoundedBacktracker::default(), onepass: wrappers::OnePass::default(), hybrid: wrappers::Hybrid::default(), dfa: wrappers::DFA::default() };",
          "    let hirs: &[&Hir] = &[];",
          "    let result = ReverseSuffix::new(core, hirs);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), core);"
        ],
        "code": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo::new(Config::new().auto_prefilter(true), &[]),",
          "        pre: None,",
          "        nfa: NFA::default(),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::default(),",
          "        dfa: wrappers::DFA::default(),",
          "    };",
          "    let hirs: &[&Hir] = &[];",
          "",
          "    let result = ReverseSuffix::new(core, hirs);",
          "    let core = Core { info: RegexInfo::new(Config::new().auto_prefilter(true), &[]), pre: None, nfa: NFA::default(), nfarev: None, pikevm: wrappers::PikeVM::default(), backtrack: wrappers::BoundedBacktracker::default(), onepass: wrappers::OnePass::default(), hybrid: wrappers::Hybrid::default(), dfa: wrappers::DFA::default() };",
          "    let hirs: &[&Hir] = &[];",
          "    let result = ReverseSuffix::new(core, hirs);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), core);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo::new(Config::new().auto_prefilter(true), &[]),",
          "        pre: None,",
          "        nfa: NFA::default(),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::default(),",
          "        dfa: wrappers::DFA::default(),",
          "    };",
          "    let hirs: &[&Hir] = &[];",
          "",
          "    let result = ReverseSuffix::new(core, hirs);",
          "}"
        ],
        "oracle": [
          "    let core = Core {",
          "    info: RegexInfo::new(Config::new().auto_prefilter(true), &[]),",
          "    pre: None,",
          "    nfa: NFA::default(),",
          "    nfarev: None,",
          "    pikevm: wrappers::PikeVM::default(),",
          "    backtrack: wrappers::BoundedBacktracker::default(),",
          "    onepass: wrappers::OnePass::default(),",
          "    hybrid: wrappers::Hybrid::default(),",
          "    dfa: wrappers::DFA::default(),",
          "    };",
          "    // Verify that the function returns an error when automatic prefilter is enabled,",
          "    // dfa and hybrid are not available, and the regex is not always anchored.",
          "    let result = ReverseSuffix::new(core, hirs);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), core);"
        ],
        "code": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo::new(Config::new().auto_prefilter(true), &[]),",
          "        pre: None,",
          "        nfa: NFA::default(),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::default(),",
          "        dfa: wrappers::DFA::default(),",
          "    };",
          "    let hirs: &[&Hir] = &[];",
          "",
          "    let result = ReverseSuffix::new(core, hirs);",
          "    let core = Core {",
          "    info: RegexInfo::new(Config::new().auto_prefilter(true), &[]),",
          "    pre: None,",
          "    nfa: NFA::default(),",
          "    nfarev: None,",
          "    pikevm: wrappers::PikeVM::default(),",
          "    backtrack: wrappers::BoundedBacktracker::default(),",
          "    onepass: wrappers::OnePass::default(),",
          "    hybrid: wrappers::Hybrid::default(),",
          "    dfa: wrappers::DFA::default(),",
          "    };",
          "    // Verify that the function returns an error when automatic prefilter is enabled,",
          "    // dfa and hybrid are not available, and the regex is not always anchored.",
          "    let result = ReverseSuffix::new(core, hirs);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), core);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo::new(Config::new().auto_prefilter(true), &[]),",
          "        pre: None,",
          "        nfa: NFA::default(),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::default(),",
          "        dfa: wrappers::DFA::default(),",
          "    };",
          "    let literal_hir = literal::Literal::from_str(\"test\").into();",
          "    let hirs: &[&Hir] = &[&literal_hir];",
          "",
          "    let result = ReverseSuffix::new(core, hirs);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.err().unwrap(), core);"
        ],
        "code": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo::new(Config::new().auto_prefilter(true), &[]),",
          "        pre: None,",
          "        nfa: NFA::default(),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::default(),",
          "        dfa: wrappers::DFA::default(),",
          "    };",
          "    let literal_hir = literal::Literal::from_str(\"test\").into();",
          "    let hirs: &[&Hir] = &[&literal_hir];",
          "",
          "    let result = ReverseSuffix::new(core, hirs);",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.err().unwrap(), core);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo::new(Config::new().auto_prefilter(true), &[]),",
          "        pre: None,",
          "        nfa: NFA::default(),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::default(),",
          "        dfa: wrappers::DFA::default(),",
          "    };",
          "    let literal_hir_1 = literal::Literal::from_str(\"foo\").into();",
          "    let literal_hir_2 = literal::Literal::from_str(\"bar\").into();",
          "    let hirs: &[&Hir] = &[&literal_hir_1, &literal_hir_2];",
          "",
          "    let result = ReverseSuffix::new(core, hirs);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), core);",
          "    assert_eq!(core.info.config().get_auto_prefilter(), true);",
          "    assert_eq!(core.info.is_always_anchored_start(), false);",
          "    assert!(!core.hybrid.is_some());",
          "    assert!(!core.dfa.is_some());"
        ],
        "code": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo::new(Config::new().auto_prefilter(true), &[]),",
          "        pre: None,",
          "        nfa: NFA::default(),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::default(),",
          "        dfa: wrappers::DFA::default(),",
          "    };",
          "    let literal_hir_1 = literal::Literal::from_str(\"foo\").into();",
          "    let literal_hir_2 = literal::Literal::from_str(\"bar\").into();",
          "    let hirs: &[&Hir] = &[&literal_hir_1, &literal_hir_2];",
          "",
          "    let result = ReverseSuffix::new(core, hirs);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), core);",
          "    assert_eq!(core.info.config().get_auto_prefilter(), true);",
          "    assert_eq!(core.info.is_always_anchored_start(), false);",
          "    assert!(!core.hybrid.is_some());",
          "    assert!(!core.dfa.is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]