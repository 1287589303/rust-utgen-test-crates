[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo::new(Config::new().auto_prefilter(true), &[]),",
          "        pre: None,",
          "        nfa: NFA::default(),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::default(),",
          "        dfa: wrappers::DFA::default(),",
          "    };",
          "    let hirs: Vec<&Hir> = vec![];",
          "    let _ = ReverseSuffix::new(core, &hirs);",
          "}"
        ],
        "oracle": [
          "    let core = Core { info: RegexInfo::new(Config::new().auto_prefilter(true), &[]), pre: None, nfa: NFA::default(), nfarev: None, pikevm: wrappers::PikeVM::default(), backtrack: wrappers::BoundedBacktracker::default(), onepass: wrappers::OnePass::default(), hybrid: wrappers::Hybrid::default(), dfa: wrappers::DFA::default() };",
          "    let hirs: Vec<&Hir> = vec![];",
          "    assert_eq!(ReverseSuffix::new(core, &hirs), Err(core));"
        ],
        "code": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo::new(Config::new().auto_prefilter(true), &[]),",
          "        pre: None,",
          "        nfa: NFA::default(),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::default(),",
          "        dfa: wrappers::DFA::default(),",
          "    };",
          "    let hirs: Vec<&Hir> = vec![];",
          "    let _ = ReverseSuffix::new(core, &hirs);",
          "    let core = Core { info: RegexInfo::new(Config::new().auto_prefilter(true), &[]), pre: None, nfa: NFA::default(), nfarev: None, pikevm: wrappers::PikeVM::default(), backtrack: wrappers::BoundedBacktracker::default(), onepass: wrappers::OnePass::default(), hybrid: wrappers::Hybrid::default(), dfa: wrappers::DFA::default() };",
          "    let hirs: Vec<&Hir> = vec![];",
          "    assert_eq!(ReverseSuffix::new(core, &hirs), Err(core));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo::new(Config::new().auto_prefilter(true), &[]),",
          "        pre: None,",
          "        nfa: NFA::default(),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::default(),",
          "        dfa: wrappers::DFA::default(),",
          "    };",
          "    let hirs: Vec<&Hir> = vec![];",
          "    core.info.is_always_anchored_start = false; // Mutable for context simulation",
          "    let _ = ReverseSuffix::new(core, &hirs);",
          "}"
        ],
        "oracle": [
          "    assert!(core.info.config().get_auto_prefilter());",
          "    assert!(!core.info.is_always_anchored_start());",
          "    assert!(core.hybrid.is_some());",
          "    assert!(!core.pre.as_ref().map_or(false, |p| p.is_fast()));",
          "    assert!(prefixes.longest_common_suffix().is_none());",
          "    let result = ReverseSuffix::new(core, &hirs);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo::new(Config::new().auto_prefilter(true), &[]),",
          "        pre: None,",
          "        nfa: NFA::default(),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::default(),",
          "        dfa: wrappers::DFA::default(),",
          "    };",
          "    let hirs: Vec<&Hir> = vec![];",
          "    core.info.is_always_anchored_start = false; // Mutable for context simulation",
          "    let _ = ReverseSuffix::new(core, &hirs);",
          "    assert!(core.info.config().get_auto_prefilter());",
          "    assert!(!core.info.is_always_anchored_start());",
          "    assert!(core.hybrid.is_some());",
          "    assert!(!core.pre.as_ref().map_or(false, |p| p.is_fast()));",
          "    assert!(prefixes.longest_common_suffix().is_none());",
          "    let result = ReverseSuffix::new(core, &hirs);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo::new(Config::new().auto_prefilter(true), &[]),",
          "        pre: None,",
          "        nfa: NFA::default(),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::none(),",
          "        dfa: wrappers::DFA::none(),",
          "    };",
          "    let hirs: Vec<&Hir> = vec![];",
          "    let _ = ReverseSuffix::new(core, &hirs);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(",
          "    ReverseSuffix::new(core, &hirs),",
          "    Err(core)",
          "    );"
        ],
        "code": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo::new(Config::new().auto_prefilter(true), &[]),",
          "        pre: None,",
          "        nfa: NFA::default(),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::none(),",
          "        dfa: wrappers::DFA::none(),",
          "    };",
          "    let hirs: Vec<&Hir> = vec![];",
          "    let _ = ReverseSuffix::new(core, &hirs);",
          "    assert_eq!(",
          "    ReverseSuffix::new(core, &hirs),",
          "    Err(core)",
          "    );",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pre = Prefilter { is_fast: false, ..Default::default() };",
          "    let core = Core {",
          "        info: RegexInfo::new(Config::new().auto_prefilter(true), &[]),",
          "        pre: Some(pre),",
          "        nfa: NFA::default(),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::default(),",
          "        dfa: wrappers::DFA::default(),",
          "    };",
          "    let hirs: Vec<&Hir> = vec![];",
          "    let _ = ReverseSuffix::new(core, &hirs);",
          "}"
        ],
        "oracle": [
          "    let pre = Prefilter { is_fast: false, ..Default::default() };",
          "    let core = Core {",
          "    info: RegexInfo::new(Config::new().auto_prefilter(true), &[]),",
          "    pre: Some(pre),",
          "    nfa: NFA::default(),",
          "    nfarev: None,",
          "    pikevm: wrappers::PikeVM::default(),",
          "    backtrack: wrappers::BoundedBacktracker::default(),",
          "    onepass: wrappers::OnePass::default(),",
          "    hybrid: wrappers::Hybrid::default(),",
          "    dfa: wrappers::DFA::default(),",
          "    };",
          "    let hirs: Vec<&Hir> = vec![];",
          "    let result = ReverseSuffix::new(core, &hirs);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let pre = Prefilter { is_fast: false, ..Default::default() };",
          "    let core = Core {",
          "        info: RegexInfo::new(Config::new().auto_prefilter(true), &[]),",
          "        pre: Some(pre),",
          "        nfa: NFA::default(),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::default(),",
          "        dfa: wrappers::DFA::default(),",
          "    };",
          "    let hirs: Vec<&Hir> = vec![];",
          "    let _ = ReverseSuffix::new(core, &hirs);",
          "    let pre = Prefilter { is_fast: false, ..Default::default() };",
          "    let core = Core {",
          "    info: RegexInfo::new(Config::new().auto_prefilter(true), &[]),",
          "    pre: Some(pre),",
          "    nfa: NFA::default(),",
          "    nfarev: None,",
          "    pikevm: wrappers::PikeVM::default(),",
          "    backtrack: wrappers::BoundedBacktracker::default(),",
          "    onepass: wrappers::OnePass::default(),",
          "    hybrid: wrappers::Hybrid::default(),",
          "    dfa: wrappers::DFA::default(),",
          "    };",
          "    let hirs: Vec<&Hir> = vec![];",
          "    let result = ReverseSuffix::new(core, &hirs);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo::new(Config::new().auto_prefilter(true), &[]),",
          "        pre: None,",
          "        nfa: NFA::default(),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::default(),",
          "        dfa: wrappers::DFA::default(),",
          "    };",
          "    let hirs: Vec<&Hir> = vec![];",
          "    let _ = ReverseSuffix::new(core, &hirs);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(core.info.config().get_auto_prefilter(), true);",
          "    assert_eq!(core.info.is_always_anchored_start(), false);",
          "    assert_eq!(core.hybrid.is_some(), true);",
          "    assert_eq!(core.pre.as_ref().map_or(false, |p| p.is_fast()), false);",
          "    assert_eq!(crate::util::prefilter::suffixes(core.info.config().get_match_kind(), &hirs).longest_common_suffix(), None);",
          "    assert!(matches!(ReverseSuffix::new(core, &hirs), Err(_)));"
        ],
        "code": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo::new(Config::new().auto_prefilter(true), &[]),",
          "        pre: None,",
          "        nfa: NFA::default(),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::default(),",
          "        dfa: wrappers::DFA::default(),",
          "    };",
          "    let hirs: Vec<&Hir> = vec![];",
          "    let _ = ReverseSuffix::new(core, &hirs);",
          "    assert_eq!(core.info.config().get_auto_prefilter(), true);",
          "    assert_eq!(core.info.is_always_anchored_start(), false);",
          "    assert_eq!(core.hybrid.is_some(), true);",
          "    assert_eq!(core.pre.as_ref().map_or(false, |p| p.is_fast()), false);",
          "    assert_eq!(crate::util::prefilter::suffixes(core.info.config().get_match_kind(), &hirs).longest_common_suffix(), None);",
          "    assert!(matches!(ReverseSuffix::new(core, &hirs), Err(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]