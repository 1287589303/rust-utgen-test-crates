[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'1'];",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'a'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"a\"), end: 2 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{', b'a', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"a\"), end: 4 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{', b'1', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(1), end: 4 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'1', b'2'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(12), end: 3 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{', b'a', b'1', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"a1\"), end: 5 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{' b'a', b'1'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b\"$\"];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'1'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'1'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'a'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"a\"), end: 2 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{', b'a', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"a\"), end: 4 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{', b'1', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(1), end: 4 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'1', b'2'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(12), end: 3 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{', b'a', b'1', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"a1\"), end: 5 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{' b'a', b'1'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b\"$\"];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'1'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'{', b'a', b'b', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"ab\"), end: 5 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'a', b'b'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(0), end: 3 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{', b'1', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(1), end: 4 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{' , b'a', b'0', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"a0\"), end: 5 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{', b'a', b'b', b'c', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"abc\"), end: 6 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'1', b'2', b'3'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(123), end: 4 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{', b'c', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"c\"), end: 4 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'a'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'{', b'a', b'b'}];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'$'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'{', b'a', b'b', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"ab\"), end: 5 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'a', b'b'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(0), end: 3 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{', b'1', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(1), end: 4 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{' , b'a', b'0', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"a0\"), end: 5 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{', b'a', b'b', b'c', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"abc\"), end: 6 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'1', b'2', b'3'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(123), end: 4 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{', b'c', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"c\"), end: 4 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'a'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'{', b'a', b'b'}];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'$'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'{', b'a', b'b', b'}', b'c'];",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"ab\"), end: 5 }));",
          "    let replacement: &[u8] = &[b'$', b'2', b'c'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(2), end: 2 }));",
          "    let replacement: &[u8] = &[b'$', b'1', b'b', b'c'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(1), end: 3 }));",
          "    let replacement: &[u8] = &[b'$', b'{' ,b'a', b'1', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"a1\"), end: 5 }));",
          "    let replacement: &[u8] = &[b'$', b'{', b'1', b'2', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"12\"), end: 5 }));",
          "    let replacement: &[u8] = &[b'$', b'{', b'a', b'_', b'b', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"a_b\"), end: 6 }));",
          "    let replacement: &[u8] = &[b'$', b'{', b'c', b'@', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    let replacement: &[u8] = &[b'$', b'{' ];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'{', b'a', b'b', b'}', b'c'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"ab\"), end: 5 }));",
          "    let replacement: &[u8] = &[b'$', b'2', b'c'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(2), end: 2 }));",
          "    let replacement: &[u8] = &[b'$', b'1', b'b', b'c'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(1), end: 3 }));",
          "    let replacement: &[u8] = &[b'$', b'{' ,b'a', b'1', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"a1\"), end: 5 }));",
          "    let replacement: &[u8] = &[b'$', b'{', b'1', b'2', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"12\"), end: 5 }));",
          "    let replacement: &[u8] = &[b'$', b'{', b'a', b'_', b'b', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"a_b\"), end: 6 }));",
          "    let replacement: &[u8] = &[b'$', b'{', b'c', b'@', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    let replacement: &[u8] = &[b'$', b'{' ];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = &[b'$'];",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    let replacement: &[u8] = &[b'$']; // precondition: rep.len() <= 1 is false",
          "    let replacement: &[u8] = &[b'$', b'{' ]; // precondition: rep[0] != b'$' is false",
          "    let replacement: &[u8] = &[b'$', b'{', b'a', b'b', b'}']; // precondition: rep[i] == b'{' is true",
          "    let replacement: &[u8] = &[b'$', b'{', b'1', b'}']; // precondition: rep.get(cap_end).copied().map_or(false, is_valid_cap_letter) is true",
          "    let replacement: &[u8] = &[b'$', b'{', b'a', b'b', b'}']; // precondition: rep.get(cap_end).copied().map_or(false, is_valid_cap_letter) is false",
          "    let replacement: &[u8] = &[b'$', b'a']; // precondition: cap_end == i is false",
          "    let replacement: &[u8] = &[b'$', b'{', b'1', b'}']; // precondition: cap.parse::<usize>() matches Ok(i) is true",
          "    let replacement: &[u8] = &[b'$', b'{', b'sample', b'}']; // precondition: cap.parse::<usize>() matches Ok(i) is false",
          "    let expected = Some(CaptureRef { cap: Ref::Number(1), end: 4 }); // expected return value/type for valid capture number",
          "    let expected = Some(CaptureRef { cap: Ref::Named(\"sample\"), end: 7 }); // expected return value/type for valid named capture",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, expected); // validate result against expected value/type"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = &[b'$'];",
          "    let result = find_cap_ref(replacement);",
          "    let replacement: &[u8] = &[b'$']; // precondition: rep.len() <= 1 is false",
          "    let replacement: &[u8] = &[b'$', b'{' ]; // precondition: rep[0] != b'$' is false",
          "    let replacement: &[u8] = &[b'$', b'{', b'a', b'b', b'}']; // precondition: rep[i] == b'{' is true",
          "    let replacement: &[u8] = &[b'$', b'{', b'1', b'}']; // precondition: rep.get(cap_end).copied().map_or(false, is_valid_cap_letter) is true",
          "    let replacement: &[u8] = &[b'$', b'{', b'a', b'b', b'}']; // precondition: rep.get(cap_end).copied().map_or(false, is_valid_cap_letter) is false",
          "    let replacement: &[u8] = &[b'$', b'a']; // precondition: cap_end == i is false",
          "    let replacement: &[u8] = &[b'$', b'{', b'1', b'}']; // precondition: cap.parse::<usize>() matches Ok(i) is true",
          "    let replacement: &[u8] = &[b'$', b'{', b'sample', b'}']; // precondition: cap.parse::<usize>() matches Ok(i) is false",
          "    let expected = Some(CaptureRef { cap: Ref::Number(1), end: 4 }); // expected return value/type for valid capture number",
          "    let expected = Some(CaptureRef { cap: Ref::Named(\"sample\"), end: 7 }); // expected return value/type for valid named capture",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, expected); // validate result against expected value/type",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]