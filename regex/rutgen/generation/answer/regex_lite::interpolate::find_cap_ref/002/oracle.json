[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = &[b'a'];",
          "    find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_cap_ref(replacement), None);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = &[b'a'];",
          "    find_cap_ref(replacement);",
          "    assert_eq!(find_cap_ref(replacement), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = &[b'$'];",
          "    find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    let replacement: &[u8] = &[b'$'];",
          "    assert_eq!(find_cap_ref(replacement), None);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = &[b'$'];",
          "    find_cap_ref(replacement);",
          "    let replacement: &[u8] = &[b'$'];",
          "    assert_eq!(find_cap_ref(replacement), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'{', b'}'];",
          "    find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_cap_ref(replacement), None);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'{', b'}'];",
          "    find_cap_ref(replacement);",
          "    assert_eq!(find_cap_ref(replacement), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'1'];",
          "    find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_cap_ref(replacement), None);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'1'];",
          "    find_cap_ref(replacement);",
          "    assert_eq!(find_cap_ref(replacement), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'0', b'a', b'b', b'c'];",
          "    find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_cap_ref(&[b'$', b'0', b'a', b'b', b'c']), None);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'0', b'a', b'b', b'c'];",
          "    find_cap_ref(replacement);",
          "    assert_eq!(find_cap_ref(&[b'$', b'0', b'a', b'b', b'c']), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'a', b'b', b'c', b'{', b'}'];",
          "    find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_cap_ref(&[b'a', b'b', b'c', b'{', b'}']), None);",
          "    assert_eq!(find_cap_ref(&[b'$', b'a', b'b', b'c']), None);",
          "    assert_eq!(find_cap_ref(&[b'$']), None);",
          "    assert_eq!(find_cap_ref(&[b'$', b'1', b'2', b'3']), None);",
          "    assert_eq!(find_cap_ref(&[b'$', b'{']), None);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'a', b'b', b'c', b'{', b'}'];",
          "    find_cap_ref(replacement);",
          "    assert_eq!(find_cap_ref(&[b'a', b'b', b'c', b'{', b'}']), None);",
          "    assert_eq!(find_cap_ref(&[b'$', b'a', b'b', b'c']), None);",
          "    assert_eq!(find_cap_ref(&[b'$']), None);",
          "    assert_eq!(find_cap_ref(&[b'$', b'1', b'2', b'3']), None);",
          "    assert_eq!(find_cap_ref(&[b'$', b'{']), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'a', b'b', b'c', b'{', b'd', b'e', b'f', b'}'];",
          "    find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_cap_ref(&[b'a']), None);",
          "    assert_eq!(find_cap_ref(&[b'$', b'a']), None);",
          "    assert_eq!(find_cap_ref(&[b'$']), None);",
          "    assert_eq!(find_cap_ref(&[b'b', b'$', b'a']), None);",
          "    assert_eq!(find_cap_ref(&[b'$', b'a', b'b', b'c', b'}']), None);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'a', b'b', b'c', b'{', b'd', b'e', b'f', b'}'];",
          "    find_cap_ref(replacement);",
          "    assert_eq!(find_cap_ref(&[b'a']), None);",
          "    assert_eq!(find_cap_ref(&[b'$', b'a']), None);",
          "    assert_eq!(find_cap_ref(&[b'$']), None);",
          "    assert_eq!(find_cap_ref(&[b'b', b'$', b'a']), None);",
          "    assert_eq!(find_cap_ref(&[b'$', b'a', b'b', b'c', b'}']), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'a', b'b', b'c', b'{'];",
          "    find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    let replacement: &[u8] = &[b'a', b'b', b'c', b'{'];",
          "    assert_eq!(find_cap_ref(replacement), None);",
          "    let replacement: &[u8] = &[b'$', b'a', b'b', b'c'];",
          "    assert_eq!(find_cap_ref(replacement), None);",
          "    let replacement: &[u8] = &[b'$', b'1', b'2', b'3', b'{' ];",
          "    assert_eq!(find_cap_ref(replacement), None);",
          "    let replacement: &[u8] = &[b'$', b'{', b'a', b'b', b'c'];",
          "    assert_eq!(find_cap_ref(replacement), None);",
          "    let replacement: &[u8] = &[b'$', b'a', b'b', b'c', b'}'];",
          "    assert_eq!(find_cap_ref(replacement), None);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'a', b'b', b'c', b'{'];",
          "    find_cap_ref(replacement);",
          "    let replacement: &[u8] = &[b'a', b'b', b'c', b'{'];",
          "    assert_eq!(find_cap_ref(replacement), None);",
          "    let replacement: &[u8] = &[b'$', b'a', b'b', b'c'];",
          "    assert_eq!(find_cap_ref(replacement), None);",
          "    let replacement: &[u8] = &[b'$', b'1', b'2', b'3', b'{' ];",
          "    assert_eq!(find_cap_ref(replacement), None);",
          "    let replacement: &[u8] = &[b'$', b'{', b'a', b'b', b'c'];",
          "    assert_eq!(find_cap_ref(replacement), None);",
          "    let replacement: &[u8] = &[b'$', b'a', b'b', b'c', b'}'];",
          "    assert_eq!(find_cap_ref(replacement), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]