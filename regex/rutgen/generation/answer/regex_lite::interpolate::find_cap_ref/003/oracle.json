[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = b\"$1\";",
          "    let _ = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_cap_ref(replacement), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
          "    let replacement: &[u8] = b\"$name\";",
          "    assert_eq!(find_cap_ref(replacement), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 5 }));",
          "    let replacement: &[u8] = b\"${name}\";",
          "    assert_eq!(find_cap_ref(replacement), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 6 }));",
          "    let replacement: &[u8] = b\"${\";",
          "    assert_eq!(find_cap_ref(replacement), None);",
          "    let replacement: &[u8] = b\"$\";",
          "    assert_eq!(find_cap_ref(replacement), None);",
          "    let replacement: &[u8] = b\"\";",
          "    assert_eq!(find_cap_ref(replacement), None);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = b\"$1\";",
          "    let _ = find_cap_ref(replacement);",
          "    assert_eq!(find_cap_ref(replacement), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
          "    let replacement: &[u8] = b\"$name\";",
          "    assert_eq!(find_cap_ref(replacement), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 5 }));",
          "    let replacement: &[u8] = b\"${name}\";",
          "    assert_eq!(find_cap_ref(replacement), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 6 }));",
          "    let replacement: &[u8] = b\"${\";",
          "    assert_eq!(find_cap_ref(replacement), None);",
          "    let replacement: &[u8] = b\"$\";",
          "    assert_eq!(find_cap_ref(replacement), None);",
          "    let replacement: &[u8] = b\"\";",
          "    assert_eq!(find_cap_ref(replacement), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = b\"$name\";",
          "    let _ = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_cap_ref(b\"$name\"), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 5 }));",
          "    assert_eq!(find_cap_ref(b\"$1\"), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
          "    assert_eq!(find_cap_ref(b\"${index}\"), Some(CaptureRef { cap: Ref::Named(\"index\"), end: 8 }));",
          "    assert_eq!(find_cap_ref(b\"$\"), None);",
          "    assert_eq!(find_cap_ref(b\"\"), None);",
          "    assert_eq!(find_cap_ref(b\"abc\"), None);",
          "    assert_eq!(find_cap_ref(b\"$$name\"), None);",
          "    assert_eq!(find_cap_ref(b\"$123\"), Some(CaptureRef { cap: Ref::Number(123), end: 4 }));",
          "    assert_eq!(find_cap_ref(b\"${}\"), None);",
          "    assert_eq!(find_cap_ref(b\"${}\"), None);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = b\"$name\";",
          "    let _ = find_cap_ref(replacement);",
          "    assert_eq!(find_cap_ref(b\"$name\"), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 5 }));",
          "    assert_eq!(find_cap_ref(b\"$1\"), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
          "    assert_eq!(find_cap_ref(b\"${index}\"), Some(CaptureRef { cap: Ref::Named(\"index\"), end: 8 }));",
          "    assert_eq!(find_cap_ref(b\"$\"), None);",
          "    assert_eq!(find_cap_ref(b\"\"), None);",
          "    assert_eq!(find_cap_ref(b\"abc\"), None);",
          "    assert_eq!(find_cap_ref(b\"$$name\"), None);",
          "    assert_eq!(find_cap_ref(b\"$123\"), Some(CaptureRef { cap: Ref::Number(123), end: 4 }));",
          "    assert_eq!(find_cap_ref(b\"${}\"), None);",
          "    assert_eq!(find_cap_ref(b\"${}\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = b\"${name}\";",
          "    let _ = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_cap_ref(b\"${name}\"), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 7 }));",
          "    assert_eq!(find_cap_ref(b\"$0\"), Some(CaptureRef { cap: Ref::Number(0), end: 2 }));",
          "    assert_eq!(find_cap_ref(b\"$1\"), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
          "    assert_eq!(find_cap_ref(b\"${1}\"), Some(CaptureRef { cap: Ref::Number(1), end: 4 }));",
          "    assert_eq!(find_cap_ref(b\"${name}\"), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 7 }));",
          "    assert_eq!(find_cap_ref(b\"${name} extra text\"), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 7 }));",
          "    assert_eq!(find_cap_ref(b\"$name\"), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 4 }));",
          "    assert_eq!(find_cap_ref(b\"$\"), None);",
          "    assert_eq!(find_cap_ref(b\"$!\"), None);",
          "    assert_eq!(find_cap_ref(b\"$Invalid!\"), None);",
          "    assert_eq!(find_cap_ref(b\"${\"), None);",
          "    assert_eq!(find_cap_ref(b\"$}\"), None);",
          "    assert_eq!(find_cap_ref(b\"Test\"), None);",
          "    assert_eq!(find_cap_ref(b\"\"), None);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = b\"${name}\";",
          "    let _ = find_cap_ref(replacement);",
          "    assert_eq!(find_cap_ref(b\"${name}\"), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 7 }));",
          "    assert_eq!(find_cap_ref(b\"$0\"), Some(CaptureRef { cap: Ref::Number(0), end: 2 }));",
          "    assert_eq!(find_cap_ref(b\"$1\"), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
          "    assert_eq!(find_cap_ref(b\"${1}\"), Some(CaptureRef { cap: Ref::Number(1), end: 4 }));",
          "    assert_eq!(find_cap_ref(b\"${name}\"), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 7 }));",
          "    assert_eq!(find_cap_ref(b\"${name} extra text\"), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 7 }));",
          "    assert_eq!(find_cap_ref(b\"$name\"), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 4 }));",
          "    assert_eq!(find_cap_ref(b\"$\"), None);",
          "    assert_eq!(find_cap_ref(b\"$!\"), None);",
          "    assert_eq!(find_cap_ref(b\"$Invalid!\"), None);",
          "    assert_eq!(find_cap_ref(b\"${\"), None);",
          "    assert_eq!(find_cap_ref(b\"$}\"), None);",
          "    assert_eq!(find_cap_ref(b\"Test\"), None);",
          "    assert_eq!(find_cap_ref(b\"\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = b\"${123}\";",
          "    let _ = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    let replacement: &[u8] = b\"${123}\";",
          "    assert_eq!(find_cap_ref(replacement), Some(CaptureRef { cap: Ref::Number(123), end: 6 }));",
          "    ",
          "    let replacement: &[u8] = b\"$name\";",
          "    assert_eq!(find_cap_ref(replacement), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 5 }));",
          "    ",
          "    let replacement: &[u8] = b\"$\";",
          "    assert_eq!(find_cap_ref(replacement), None);",
          "    ",
          "    let replacement: &[u8] = b\"${}\";",
          "    assert_eq!(find_cap_ref(replacement), None);",
          "    ",
          "    let replacement: &[u8] = b\"$1\";",
          "    assert_eq!(find_cap_ref(replacement), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
          "    ",
          "    let replacement: &[u8] = b\"$name$other\";",
          "    assert_eq!(find_cap_ref(replacement), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 5 }));",
          "    ",
          "    let replacement: &[u8] = b\"$$\";",
          "    assert_eq!(find_cap_ref(replacement), None);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = b\"${123}\";",
          "    let _ = find_cap_ref(replacement);",
          "    let replacement: &[u8] = b\"${123}\";",
          "    assert_eq!(find_cap_ref(replacement), Some(CaptureRef { cap: Ref::Number(123), end: 6 }));",
          "    ",
          "    let replacement: &[u8] = b\"$name\";",
          "    assert_eq!(find_cap_ref(replacement), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 5 }));",
          "    ",
          "    let replacement: &[u8] = b\"$\";",
          "    assert_eq!(find_cap_ref(replacement), None);",
          "    ",
          "    let replacement: &[u8] = b\"${}\";",
          "    assert_eq!(find_cap_ref(replacement), None);",
          "    ",
          "    let replacement: &[u8] = b\"$1\";",
          "    assert_eq!(find_cap_ref(replacement), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
          "    ",
          "    let replacement: &[u8] = b\"$name$other\";",
          "    assert_eq!(find_cap_ref(replacement), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 5 }));",
          "    ",
          "    let replacement: &[u8] = b\"$$\";",
          "    assert_eq!(find_cap_ref(replacement), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = b\"$abc\";",
          "    let _ = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_cap_ref(b\"$abc\"), Some(CaptureRef { cap: Ref::Named(\"abc\"), end: 4 }));",
          "    assert_eq!(find_cap_ref(b\"$1\"), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
          "    assert_eq!(find_cap_ref(b\"$A\"), Some(CaptureRef { cap: Ref::Named(\"A\"), end: 2 }));",
          "    assert_eq!(find_cap_ref(b\"${name}\"), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 6 }));",
          "    assert_eq!(find_cap_ref(b\"$\"), None);",
          "    assert_eq!(find_cap_ref(b\"abc\"), None);",
          "    assert_eq!(find_cap_ref(b\"${\"), None);",
          "    assert_eq!(find_cap_ref(b\"${\"), None);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = b\"$abc\";",
          "    let _ = find_cap_ref(replacement);",
          "    assert_eq!(find_cap_ref(b\"$abc\"), Some(CaptureRef { cap: Ref::Named(\"abc\"), end: 4 }));",
          "    assert_eq!(find_cap_ref(b\"$1\"), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
          "    assert_eq!(find_cap_ref(b\"$A\"), Some(CaptureRef { cap: Ref::Named(\"A\"), end: 2 }));",
          "    assert_eq!(find_cap_ref(b\"${name}\"), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 6 }));",
          "    assert_eq!(find_cap_ref(b\"$\"), None);",
          "    assert_eq!(find_cap_ref(b\"abc\"), None);",
          "    assert_eq!(find_cap_ref(b\"${\"), None);",
          "    assert_eq!(find_cap_ref(b\"${\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = b\"$2d\";",
          "    let _ = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_cap_ref(b\"$2d\"), Some(CaptureRef { cap: Ref::Number(2), end: 3 }));",
          "    assert_eq!(find_cap_ref(b\"$d\"), Some(CaptureRef { cap: Ref::Named(\"d\"), end: 2 }));",
          "    assert_eq!(find_cap_ref(b\"${name}\"), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 7 }));",
          "    assert_eq!(find_cap_ref(b\"$\"), None);",
          "    assert_eq!(find_cap_ref(b\"2d\"), None);",
          "    assert_eq!(find_cap_ref(b\"$2$\"), Some(CaptureRef { cap: Ref::Number(2), end: 3 }));",
          "    assert_eq!(find_cap_ref(b\"${}\"), None);",
          "    assert_eq!(find_cap_ref(b\"$2{\" ), None);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = b\"$2d\";",
          "    let _ = find_cap_ref(replacement);",
          "    assert_eq!(find_cap_ref(b\"$2d\"), Some(CaptureRef { cap: Ref::Number(2), end: 3 }));",
          "    assert_eq!(find_cap_ref(b\"$d\"), Some(CaptureRef { cap: Ref::Named(\"d\"), end: 2 }));",
          "    assert_eq!(find_cap_ref(b\"${name}\"), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 7 }));",
          "    assert_eq!(find_cap_ref(b\"$\"), None);",
          "    assert_eq!(find_cap_ref(b\"2d\"), None);",
          "    assert_eq!(find_cap_ref(b\"$2$\"), Some(CaptureRef { cap: Ref::Number(2), end: 3 }));",
          "    assert_eq!(find_cap_ref(b\"${}\"), None);",
          "    assert_eq!(find_cap_ref(b\"$2{\" ), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = b\"$[a-zA-Z0-9]\";",
          "    let _ = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_cap_ref(b\"$[a-zA-Z0-9]\"), Some(CaptureRef { cap: Ref::Named(\"[a-zA-Z0-9]\"), end: 12 }));",
          "    assert_eq!(find_cap_ref(b\"$\"), None);",
          "    assert_eq!(find_cap_ref(b\"$1\"), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
          "    assert_eq!(find_cap_ref(b\"${}\"), None);",
          "    assert_eq!(find_cap_ref(b\"${test}\"), Some(CaptureRef { cap: Ref::Named(\"test\"), end: 7 }));",
          "    assert_eq!(find_cap_ref(b\"$123\"), Some(CaptureRef { cap: Ref::Number(123), end: 4 }));",
          "    assert_eq!(find_cap_ref(b\"$abc\"), Some(CaptureRef { cap: Ref::Named(\"abc\"), end: 4 }));",
          "    assert_eq!(find_cap_ref(b\"$12a\"), Some(CaptureRef { cap: Ref::Number(12), end: 3 }));",
          "    assert_eq!(find_cap_ref(b\"${abc123}\"), Some(CaptureRef { cap: Ref::Named(\"abc123\"), end: 10 }));",
          "    assert_eq!(find_cap_ref(b\"no dollar sign\"), None);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = b\"$[a-zA-Z0-9]\";",
          "    let _ = find_cap_ref(replacement);",
          "    assert_eq!(find_cap_ref(b\"$[a-zA-Z0-9]\"), Some(CaptureRef { cap: Ref::Named(\"[a-zA-Z0-9]\"), end: 12 }));",
          "    assert_eq!(find_cap_ref(b\"$\"), None);",
          "    assert_eq!(find_cap_ref(b\"$1\"), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
          "    assert_eq!(find_cap_ref(b\"${}\"), None);",
          "    assert_eq!(find_cap_ref(b\"${test}\"), Some(CaptureRef { cap: Ref::Named(\"test\"), end: 7 }));",
          "    assert_eq!(find_cap_ref(b\"$123\"), Some(CaptureRef { cap: Ref::Number(123), end: 4 }));",
          "    assert_eq!(find_cap_ref(b\"$abc\"), Some(CaptureRef { cap: Ref::Named(\"abc\"), end: 4 }));",
          "    assert_eq!(find_cap_ref(b\"$12a\"), Some(CaptureRef { cap: Ref::Number(12), end: 3 }));",
          "    assert_eq!(find_cap_ref(b\"${abc123}\"), Some(CaptureRef { cap: Ref::Named(\"abc123\"), end: 10 }));",
          "    assert_eq!(find_cap_ref(b\"no dollar sign\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]