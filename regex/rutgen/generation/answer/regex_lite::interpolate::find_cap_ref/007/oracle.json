[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = &[];",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    let replacement: &[u8] = &[b'$'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'$','{'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'$','{',b'a',b'b',b'c'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'$','{',b'a',b'b',b'c',b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'$','{',b'''];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'$','{',b'1',b'2',b'3',b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'$','{',b'0',b'1',b'2',b'{'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = &[];",
          "    let result = find_cap_ref(replacement);",
          "    let replacement: &[u8] = &[b'$'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'$','{'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'$','{',b'a',b'b',b'c'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'$','{',b'a',b'b',b'c',b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'$','{',b'''];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'$','{',b'1',b'2',b'3',b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'$','{',b'0',b'1',b'2',b'{'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = &[b'$'];",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    let replacement: &[u8] = &[b'$'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'$','{','a','b','c','}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'$','{','1','2','3','}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'$',b'1'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'$','{','a','b','3','}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'$','{','1','2','3'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = &[b'$'];",
          "    let result = find_cap_ref(replacement);",
          "    let replacement: &[u8] = &[b'$'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'$','{','a','b','c','}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'$','{','1','2','3','}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'$',b'1'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'$','{','a','b','3','}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'$','{','1','2','3'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'{'];",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    let replacement: &[u8] = &[b'$', b'{']; assert_eq!(find_cap_ref(replacement), None);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'{'];",
          "    let result = find_cap_ref(replacement);",
          "    let replacement: &[u8] = &[b'$', b'{']; assert_eq!(find_cap_ref(replacement), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'{', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    let replacement: &[u8] = &[b'$', b'{', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'{', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    let replacement: &[u8] = &[b'$', b'{', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'A'];",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'A'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]