[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = b\"$ValidName\";",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"ValidName\"), end: 10 }));",
          "    ",
          "    let replacement_braced: &[u8] = b\"${ValidName}\";",
          "    let result_braced = find_cap_ref(replacement_braced);",
          "    assert_eq!(result_braced, Some(CaptureRef { cap: Ref::Named(\"ValidName\"), end: 11 }));",
          "    ",
          "    let replacement_invalid: &[u8] = b\"$123Invalid\";",
          "    let result_invalid = find_cap_ref(replacement_invalid);",
          "    assert_eq!(result_invalid, Some(CaptureRef { cap: Ref::Number(123), end: 12 }));",
          "    ",
          "    let replacement_empty: &[u8] = b\"$\";",
          "    let result_empty = find_cap_ref(replacement_empty);",
          "    assert_eq!(result_empty, None);",
          "    ",
          "    let replacement_no_capture: &[u8] = b\"ValidName\";",
          "    let result_no_capture = find_cap_ref(replacement_no_capture);",
          "    assert_eq!(result_no_capture, None);",
          "    ",
          "    let replacement_invalid_braced: &[u8] = b\"${InvalidName\";",
          "    let result_invalid_braced = find_cap_ref(replacement_invalid_braced);",
          "    assert_eq!(result_invalid_braced, None);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = b\"$ValidName\";",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"ValidName\"), end: 10 }));",
          "    ",
          "    let replacement_braced: &[u8] = b\"${ValidName}\";",
          "    let result_braced = find_cap_ref(replacement_braced);",
          "    assert_eq!(result_braced, Some(CaptureRef { cap: Ref::Named(\"ValidName\"), end: 11 }));",
          "    ",
          "    let replacement_invalid: &[u8] = b\"$123Invalid\";",
          "    let result_invalid = find_cap_ref(replacement_invalid);",
          "    assert_eq!(result_invalid, Some(CaptureRef { cap: Ref::Number(123), end: 12 }));",
          "    ",
          "    let replacement_empty: &[u8] = b\"$\";",
          "    let result_empty = find_cap_ref(replacement_empty);",
          "    assert_eq!(result_empty, None);",
          "    ",
          "    let replacement_no_capture: &[u8] = b\"ValidName\";",
          "    let result_no_capture = find_cap_ref(replacement_no_capture);",
          "    assert_eq!(result_no_capture, None);",
          "    ",
          "    let replacement_invalid_braced: &[u8] = b\"${InvalidName\";",
          "    let result_invalid_braced = find_cap_ref(replacement_invalid_braced);",
          "    assert_eq!(result_invalid_braced, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = b\"${ValidName}\";",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    let replacement: &[u8] = b\"${ValidName}\";",
          "    let expected = Some(CaptureRef { cap: Ref::Named(\"ValidName\"), end: 12 });",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = b\"${ValidName}\";",
          "    let result = find_cap_ref(replacement);",
          "    let replacement: &[u8] = b\"${ValidName}\";",
          "    let expected = Some(CaptureRef { cap: Ref::Named(\"ValidName\"), end: 12 });",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = b\"$123\";",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    let replacement: &[u8] = b\"$123\";",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result.is_some(), true);",
          "    if let Some(capture_ref) = result {",
          "    assert_eq!(capture_ref.cap, Ref::Number(123));",
          "    assert_eq!(capture_ref.end, 4);",
          "    }"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = b\"$123\";",
          "    let result = find_cap_ref(replacement);",
          "    let replacement: &[u8] = b\"$123\";",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result.is_some(), true);",
          "    if let Some(capture_ref) = result {",
          "    assert_eq!(capture_ref.cap, Ref::Number(123));",
          "    assert_eq!(capture_ref.end, 4);",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = b\"$Invalid@Name\";",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    let replacement: &[u8] = b\"$Invalid@Name\";",
          "    let expected = Some(CaptureRef {",
          "    cap: Ref::Named(\"Invalid@Name\"),",
          "    end: 14,",
          "    });",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = b\"$Invalid@Name\";",
          "    let result = find_cap_ref(replacement);",
          "    let replacement: &[u8] = b\"$Invalid@Name\";",
          "    let expected = Some(CaptureRef {",
          "    cap: Ref::Named(\"Invalid@Name\"),",
          "    end: 14,",
          "    });",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = b\"$\";",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    let replacement: &[u8] = b\"$1\";",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
          "    ",
          "    let replacement: &[u8] = b\"${name}\";",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"name\"), end: 6 }));",
          "    ",
          "    let replacement: &[u8] = b\"$abc\";",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"abc\"), end: 4 }));",
          "    ",
          "    let replacement: &[u8] = b\"$123\";",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(123), end: 4 }));",
          "    ",
          "    let replacement: &[u8] = b\"$${not_a_capture}\";",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"not_a_capture\"), end: 16 }));",
          "    ",
          "    let replacement: &[u8] = b\"${\";",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = b\"$invalid\";",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = b\"$\";",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = b\"$\";",
          "    let result = find_cap_ref(replacement);",
          "    let replacement: &[u8] = b\"$1\";",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
          "    ",
          "    let replacement: &[u8] = b\"${name}\";",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"name\"), end: 6 }));",
          "    ",
          "    let replacement: &[u8] = b\"$abc\";",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"abc\"), end: 4 }));",
          "    ",
          "    let replacement: &[u8] = b\"$123\";",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(123), end: 4 }));",
          "    ",
          "    let replacement: &[u8] = b\"$${not_a_capture}\";",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"not_a_capture\"), end: 16 }));",
          "    ",
          "    let replacement: &[u8] = b\"${\";",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = b\"$invalid\";",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = b\"$\";",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]