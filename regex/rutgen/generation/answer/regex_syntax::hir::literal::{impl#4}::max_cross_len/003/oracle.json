[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lit1 = Literal(Box::new(b\"test1\".to_vec()));",
          "    let lit2 = Literal(Box::new(b\"test2\".to_vec()));",
          "    ",
          "    let mut seq1 = Seq::new(vec![&lit1.bytes, &lit2.bytes]);",
          "    let mut seq2 = Seq::new(vec![&lit1.bytes, &lit2.bytes]);",
          "",
          "    let result = seq1.max_cross_len(&seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(4));"
        ],
        "code": [
          "{",
          "    let lit1 = Literal(Box::new(b\"test1\".to_vec()));",
          "    let lit2 = Literal(Box::new(b\"test2\".to_vec()));",
          "    ",
          "    let mut seq1 = Seq::new(vec![&lit1.bytes, &lit2.bytes]);",
          "    let mut seq2 = Seq::new(vec![&lit1.bytes, &lit2.bytes]);",
          "",
          "    let result = seq1.max_cross_len(&seq2);",
          "    assert_eq!(result, Some(4));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lit1 = Literal(Box::new(b\"example\".to_vec()));",
          "",
          "    let mut seq1 = Seq::new(vec![&lit1.bytes]);",
          "    let mut seq2 = Seq::empty();",
          "",
          "    let result = seq1.max_cross_len(&seq2);",
          "}"
        ],
        "oracle": [
          "    let lit1 = Literal(Box::new(b\"example\".to_vec()));",
          "    let mut seq1 = Seq::new(vec![&lit1.bytes]);",
          "    let mut seq2 = Seq::empty();",
          "    assert_eq!(seq1.max_cross_len(&seq2), None);"
        ],
        "code": [
          "{",
          "    let lit1 = Literal(Box::new(b\"example\".to_vec()));",
          "",
          "    let mut seq1 = Seq::new(vec![&lit1.bytes]);",
          "    let mut seq2 = Seq::empty();",
          "",
          "    let result = seq1.max_cross_len(&seq2);",
          "    let lit1 = Literal(Box::new(b\"example\".to_vec()));",
          "    let mut seq1 = Seq::new(vec![&lit1.bytes]);",
          "    let mut seq2 = Seq::empty();",
          "    assert_eq!(seq1.max_cross_len(&seq2), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lit1 = Literal(Box::new(b\"a\".to_vec()));",
          "    let lit2 = Literal(Box::new(b\"b\".to_vec()));",
          "",
          "    let mut seq1 = Seq::new(vec![&lit1.bytes, &lit2.bytes]);",
          "    let mut seq2 = Seq::new(vec![&lit1.bytes, &lit2.bytes]);",
          "",
          "    let result = seq1.max_cross_len(&seq2);",
          "}"
        ],
        "oracle": [
          "    let lit1 = Literal(Box::new(b\"a\".to_vec()));",
          "    let lit2 = Literal(Box::new(b\"b\".to_vec()));",
          "    let mut seq1 = Seq::new(vec![&lit1.bytes, &lit2.bytes]);",
          "    let mut seq2 = Seq::new(vec![&lit1.bytes, &lit2.bytes]);",
          "    let result = seq1.max_cross_len(&seq2);",
          "    assert_eq!(result, Some(4));"
        ],
        "code": [
          "{",
          "    let lit1 = Literal(Box::new(b\"a\".to_vec()));",
          "    let lit2 = Literal(Box::new(b\"b\".to_vec()));",
          "",
          "    let mut seq1 = Seq::new(vec![&lit1.bytes, &lit2.bytes]);",
          "    let mut seq2 = Seq::new(vec![&lit1.bytes, &lit2.bytes]);",
          "",
          "    let result = seq1.max_cross_len(&seq2);",
          "    let lit1 = Literal(Box::new(b\"a\".to_vec()));",
          "    let lit2 = Literal(Box::new(b\"b\".to_vec()));",
          "    let mut seq1 = Seq::new(vec![&lit1.bytes, &lit2.bytes]);",
          "    let mut seq2 = Seq::new(vec![&lit1.bytes, &lit2.bytes]);",
          "    let result = seq1.max_cross_len(&seq2);",
          "    assert_eq!(result, Some(4));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lit1 = Literal(Box::new(b\"longsequence1\".to_vec()));",
          "    let lit2 = Literal(Box::new(b\"longsequence2\".to_vec()));",
          "",
          "    let mut seq1 = Seq::new(vec![&lit1.bytes; 500]); // 500 literals",
          "    let mut seq2 = Seq::new(vec![&lit2.bytes; 500]); // 500 literals",
          "",
          "    let result = seq1.max_cross_len(&seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(500 * 500));"
        ],
        "code": [
          "{",
          "    let lit1 = Literal(Box::new(b\"longsequence1\".to_vec()));",
          "    let lit2 = Literal(Box::new(b\"longsequence2\".to_vec()));",
          "",
          "    let mut seq1 = Seq::new(vec![&lit1.bytes; 500]); // 500 literals",
          "    let mut seq2 = Seq::new(vec![&lit2.bytes; 500]); // 500 literals",
          "",
          "    let result = seq1.max_cross_len(&seq2);",
          "    assert_eq!(result, Some(500 * 500));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lit1 = Literal(Box::new(b\"short\".to_vec()));",
          "    let lit2 = Literal(Box::new(b\"muchlonger\".to_vec()));",
          "    ",
          "    let mut seq1 = Seq::new(vec![&lit1.bytes; 100]); // 100 literals",
          "    let mut seq2 = Seq::new(vec![&lit2.bytes; 200]); // 200 literals",
          "    ",
          "    let result = seq1.max_cross_len(&seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(20000));"
        ],
        "code": [
          "{",
          "    let lit1 = Literal(Box::new(b\"short\".to_vec()));",
          "    let lit2 = Literal(Box::new(b\"muchlonger\".to_vec()));",
          "    ",
          "    let mut seq1 = Seq::new(vec![&lit1.bytes; 100]); // 100 literals",
          "    let mut seq2 = Seq::new(vec![&lit2.bytes; 200]); // 200 literals",
          "    ",
          "    let result = seq1.max_cross_len(&seq2);",
          "    assert_eq!(result, Some(20000));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]