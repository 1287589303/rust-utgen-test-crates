[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_seq = Seq::empty();",
          "    let other_seq = Seq::singleton(Literal(Box::new([1, 2, 3])));",
          "    let result = empty_seq.max_cross_len(&other_seq);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let empty_seq = Seq::empty();",
          "    let other_seq = Seq::singleton(Literal(Box::new([1, 2, 3])));",
          "    let result = empty_seq.max_cross_len(&other_seq);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let self_seq = Seq::singleton(Literal(Box::new([1, 2, 3])));",
          "    let empty_seq = Seq::empty();",
          "    let result = self_seq.max_cross_len(&empty_seq);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let self_seq = Seq::singleton(Literal(Box::new([1, 2, 3])));",
          "    let empty_seq = Seq::empty();",
          "    let result = self_seq.max_cross_len(&empty_seq);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_seq1 = Seq::empty();",
          "    let empty_seq2 = Seq::empty();",
          "    let result = empty_seq1.max_cross_len(&empty_seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let empty_seq1 = Seq::empty();",
          "    let empty_seq2 = Seq::empty();",
          "    let result = empty_seq1.max_cross_len(&empty_seq2);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let infinite_seq = Seq::infinite();",
          "    let other_seq = Seq::singleton(Literal(Box::new([1, 2, 3])));",
          "    let result = infinite_seq.max_cross_len(&other_seq);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_none());"
        ],
        "code": [
          "{",
          "    let infinite_seq = Seq::infinite();",
          "    let other_seq = Seq::singleton(Literal(Box::new([1, 2, 3])));",
          "    let result = infinite_seq.max_cross_len(&other_seq);",
          "    assert!(result.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let self_seq = Seq::singleton(Literal(Box::new([1, 2, 3])));",
          "    let infinite_seq = Seq::infinite();",
          "    let result = self_seq.max_cross_len(&infinite_seq);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let self_seq = Seq::singleton(Literal(Box::new([1, 2, 3])));",
          "    let infinite_seq = Seq::infinite();",
          "    let result = self_seq.max_cross_len(&infinite_seq);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let infinite_seq1 = Seq::infinite();",
          "    let infinite_seq2 = Seq::infinite();",
          "    let result = infinite_seq1.max_cross_len(&infinite_seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let infinite_seq1 = Seq::infinite();",
          "    let infinite_seq2 = Seq::infinite();",
          "    let result = infinite_seq1.max_cross_len(&infinite_seq2);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]