[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = utf8_decode(&[]);",
          "}"
        ],
        "oracle": [
          "    let result = utf8_decode(&[0xC2, 0xA9]); assert_eq!(result, Some(Ok('¬©')));",
          "    let result = utf8_decode(&[0xE2, 0x82, 0xAC]); assert_eq!(result, Some(Ok('‚Ç¨')));",
          "    let result = utf8_decode(&[0xF0, 0x9F, 0x92, 0xA9]); assert_eq!(result, Some(Ok('üí©')));",
          "    let result = utf8_decode(&[0xC2]); assert_eq!(result, Some(Err(0xC2)));",
          "    let result = utf8_decode(&[0xE2]); assert_eq!(result, Some(Err(0xE2)));",
          "    let result = utf8_decode(&[0xF0]); assert_eq!(result, Some(Err(0xF0)));",
          "    let result = utf8_decode(&[0xC0, 0x80]); assert_eq!(result, Some(Err(0xC0)));",
          "    let result = utf8_decode(&[0xE0, 0xA0, 0x80]); assert_eq!(result, Some(Err(0xE0)));",
          "    let result = utf8_decode(&[0xF0, 0x80, 0x80, 0x80]); assert_eq!(result, Some(Err(0xF0)));",
          "    let result = utf8_decode(&[0xED, 0x9F, 0xBF]); assert_eq!(result, Some(Err(0xED)));"
        ],
        "code": [
          "{",
          "    let result = utf8_decode(&[]);",
          "    let result = utf8_decode(&[0xC2, 0xA9]); assert_eq!(result, Some(Ok('¬©')));",
          "    let result = utf8_decode(&[0xE2, 0x82, 0xAC]); assert_eq!(result, Some(Ok('‚Ç¨')));",
          "    let result = utf8_decode(&[0xF0, 0x9F, 0x92, 0xA9]); assert_eq!(result, Some(Ok('üí©')));",
          "    let result = utf8_decode(&[0xC2]); assert_eq!(result, Some(Err(0xC2)));",
          "    let result = utf8_decode(&[0xE2]); assert_eq!(result, Some(Err(0xE2)));",
          "    let result = utf8_decode(&[0xF0]); assert_eq!(result, Some(Err(0xF0)));",
          "    let result = utf8_decode(&[0xC0, 0x80]); assert_eq!(result, Some(Err(0xC0)));",
          "    let result = utf8_decode(&[0xE0, 0xA0, 0x80]); assert_eq!(result, Some(Err(0xE0)));",
          "    let result = utf8_decode(&[0xF0, 0x80, 0x80, 0x80]); assert_eq!(result, Some(Err(0xF0)));",
          "    let result = utf8_decode(&[0xED, 0x9F, 0xBF]); assert_eq!(result, Some(Err(0xED)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = utf8_decode(&[0x80]);",
          "}"
        ],
        "oracle": [
          "    let result = utf8_decode(&[0x80]); assert_eq!(result, Some(Err(0x80)));",
          "    let result = utf8_decode(&[0xC2, 0xA9]); assert_eq!(result, Some(Ok('¬©')));",
          "    let result = utf8_decode(&[0xE2, 0x82, 0xAC]); assert_eq!(result, Some(Ok('‚Ç¨')));",
          "    let result = utf8_decode(&[0xF0, 0x9F, 0x92, 0xA9]); assert_eq!(result, Some(Ok('ü§ë')));",
          "    let result = utf8_decode(&[0xF8]); assert_eq!(result, Some(Err(0xF8)));",
          "    let result = utf8_decode(&[]); assert_eq!(result, None);",
          "    let result = utf8_decode(&[0xC0]); assert_eq!(result, Some(Err(0xC0)));",
          "    let result = utf8_decode(&[0xC3, 0x28]); assert_eq!(result, Some(Err(0x28)));",
          "    let result = utf8_decode(&[0xED, 0x9F, 0xBF]); assert_eq!(result, Some(Ok('ü§ø')));",
          "    let result = utf8_decode(&[0xF4, 0x90, 0x80, 0x80]); assert_eq!(result, Some(Err(0xF4)));"
        ],
        "code": [
          "{",
          "    let result = utf8_decode(&[0x80]);",
          "    let result = utf8_decode(&[0x80]); assert_eq!(result, Some(Err(0x80)));",
          "    let result = utf8_decode(&[0xC2, 0xA9]); assert_eq!(result, Some(Ok('¬©')));",
          "    let result = utf8_decode(&[0xE2, 0x82, 0xAC]); assert_eq!(result, Some(Ok('‚Ç¨')));",
          "    let result = utf8_decode(&[0xF0, 0x9F, 0x92, 0xA9]); assert_eq!(result, Some(Ok('ü§ë')));",
          "    let result = utf8_decode(&[0xF8]); assert_eq!(result, Some(Err(0xF8)));",
          "    let result = utf8_decode(&[]); assert_eq!(result, None);",
          "    let result = utf8_decode(&[0xC0]); assert_eq!(result, Some(Err(0xC0)));",
          "    let result = utf8_decode(&[0xC3, 0x28]); assert_eq!(result, Some(Err(0x28)));",
          "    let result = utf8_decode(&[0xED, 0x9F, 0xBF]); assert_eq!(result, Some(Ok('ü§ø')));",
          "    let result = utf8_decode(&[0xF4, 0x90, 0x80, 0x80]); assert_eq!(result, Some(Err(0xF4)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = utf8_decode(&[0xC0, 0x80]);",
          "}"
        ],
        "oracle": [
          "    let result = utf8_decode(&[]); assert_eq!(result, None);",
          "    let result = utf8_decode(&[0x80]); assert_eq!(result, Some(Err(0x80)));",
          "    let result = utf8_decode(&[0xC0, 0x80, 0x80]); assert_eq!(result, Some(Err(0xC0)));",
          "    let result = utf8_decode(&[0xF0, 0x80]); assert_eq!(result, Some(Err(0xF0)));",
          "    let result = utf8_decode(&[0xE0, 0xA0, 0x80]); assert_eq!(result, Some(Ok('ÍÄÄ')));"
        ],
        "code": [
          "{",
          "    let result = utf8_decode(&[0xC0, 0x80]);",
          "    let result = utf8_decode(&[]); assert_eq!(result, None);",
          "    let result = utf8_decode(&[0x80]); assert_eq!(result, Some(Err(0x80)));",
          "    let result = utf8_decode(&[0xC0, 0x80, 0x80]); assert_eq!(result, Some(Err(0xC0)));",
          "    let result = utf8_decode(&[0xF0, 0x80]); assert_eq!(result, Some(Err(0xF0)));",
          "    let result = utf8_decode(&[0xE0, 0xA0, 0x80]); assert_eq!(result, Some(Ok('ÍÄÄ')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = utf8_decode(&[0xE0, 0xA0, 0x80]);",
          "}"
        ],
        "oracle": [
          "    let result = utf8_decode(&[]);",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = utf8_decode(&[0xE0, 0xA0, 0x80, 0x00]);",
          "    assert_eq!(result, Some(Ok('êÄÄ')));",
          "    ",
          "    let result = utf8_decode(&[0xC0, 0x80]);",
          "    assert_eq!(result, Some(Ok('‚Ç¨')));",
          "    ",
          "    let result = utf8_decode(&[0xC3, 0x28]);",
          "    assert_eq!(result, Some(Err(0xC3)));",
          "    ",
          "    let result = utf8_decode(&[0xF0, 0x9F, 0x8D, 0x95]);",
          "    assert_eq!(result, Some(Ok('üçï')));",
          "    ",
          "    let result = utf8_decode(&[0xFF]);",
          "    assert_eq!(result, Some(Err(0xFF)));",
          "    ",
          "    let result = utf8_decode(&[0xF8, 0x80, 0x80, 0x80]);",
          "    assert_eq!(result, Some(Err(0xF8)));",
          "    ",
          "    let result = utf8_decode(&[0xC0]);",
          "    assert_eq!(result, Some(Err(0xC0)));",
          "    ",
          "    let result = utf8_decode(&[0xE0, 0xB0]);",
          "    assert_eq!(result, Some(Err(0xB0)));",
          "    ",
          "    let result = utf8_decode(&[0xF0, 0x80, 0x80, 0x80, 0x80]);",
          "    assert_eq!(result, Some(Err(0x80)));"
        ],
        "code": [
          "{",
          "    let result = utf8_decode(&[0xE0, 0xA0, 0x80]);",
          "    let result = utf8_decode(&[]);",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = utf8_decode(&[0xE0, 0xA0, 0x80, 0x00]);",
          "    assert_eq!(result, Some(Ok('êÄÄ')));",
          "    ",
          "    let result = utf8_decode(&[0xC0, 0x80]);",
          "    assert_eq!(result, Some(Ok('‚Ç¨')));",
          "    ",
          "    let result = utf8_decode(&[0xC3, 0x28]);",
          "    assert_eq!(result, Some(Err(0xC3)));",
          "    ",
          "    let result = utf8_decode(&[0xF0, 0x9F, 0x8D, 0x95]);",
          "    assert_eq!(result, Some(Ok('üçï')));",
          "    ",
          "    let result = utf8_decode(&[0xFF]);",
          "    assert_eq!(result, Some(Err(0xFF)));",
          "    ",
          "    let result = utf8_decode(&[0xF8, 0x80, 0x80, 0x80]);",
          "    assert_eq!(result, Some(Err(0xF8)));",
          "    ",
          "    let result = utf8_decode(&[0xC0]);",
          "    assert_eq!(result, Some(Err(0xC0)));",
          "    ",
          "    let result = utf8_decode(&[0xE0, 0xB0]);",
          "    assert_eq!(result, Some(Err(0xB0)));",
          "    ",
          "    let result = utf8_decode(&[0xF0, 0x80, 0x80, 0x80, 0x80]);",
          "    assert_eq!(result, Some(Err(0x80)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = utf8_decode(&[0xF0, 0x90, 0x80, 0x80]);",
          "}"
        ],
        "oracle": [
          "    let result = utf8_decode(&[0xF0, 0x90, 0x80]); assert_eq!(result, Some(Err(0xF0)));",
          "    let result = utf8_decode(&[0xC3, 0x28]); assert_eq!(result, Some(Err(0xC3)));",
          "    let result = utf8_decode(&[0b11000000, 0x80]); assert_eq!(result, Some(Err(0b11000000)));",
          "    let result = utf8_decode(&[0xED, 0xA0]); assert_eq!(result, Some(Err(0xED)));",
          "    let result = utf8_decode(&[0xF0, 0x80]); assert_eq!(result, Some(Err(0xF0)));",
          "    let result = utf8_decode(&[0xE0]); assert_eq!(result, Some(Err(0xE0)));"
        ],
        "code": [
          "{",
          "    let result = utf8_decode(&[0xF0, 0x90, 0x80, 0x80]);",
          "    let result = utf8_decode(&[0xF0, 0x90, 0x80]); assert_eq!(result, Some(Err(0xF0)));",
          "    let result = utf8_decode(&[0xC3, 0x28]); assert_eq!(result, Some(Err(0xC3)));",
          "    let result = utf8_decode(&[0b11000000, 0x80]); assert_eq!(result, Some(Err(0b11000000)));",
          "    let result = utf8_decode(&[0xED, 0xA0]); assert_eq!(result, Some(Err(0xED)));",
          "    let result = utf8_decode(&[0xF0, 0x80]); assert_eq!(result, Some(Err(0xF0)));",
          "    let result = utf8_decode(&[0xE0]); assert_eq!(result, Some(Err(0xE0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = utf8_decode(&[0xF8, 0x80, 0x80, 0x80, 0x80]);",
          "}"
        ],
        "oracle": [
          "    let result = utf8_decode(&[0xF8, 0x80, 0x80, 0x80, 0x80]); assert_eq!(result, Some(Err(0xF8)));"
        ],
        "code": [
          "{",
          "    let result = utf8_decode(&[0xF8, 0x80, 0x80, 0x80, 0x80]);",
          "    let result = utf8_decode(&[0xF8, 0x80, 0x80, 0x80, 0x80]); assert_eq!(result, Some(Err(0xF8)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]