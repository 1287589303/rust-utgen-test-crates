[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"example\";",
          "    let start = 0;",
          "    let end = 7;",
          "    let m = Match::new(haystack, start, end);",
          "    let result = m.start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0);"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"example\";",
          "    let start = 0;",
          "    let end = 7;",
          "    let m = Match::new(haystack, start, end);",
          "    let result = m.start();",
          "    assert_eq!(result, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"example\";",
          "    let start = 3;",
          "    let end = 6;",
          "    let m = Match::new(haystack, start, end);",
          "    let result = m.start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, start);"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"example\";",
          "    let start = 3;",
          "    let end = 6;",
          "    let m = Match::new(haystack, start, end);",
          "    let result = m.start();",
          "    assert_eq!(result, start);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"example\";",
          "    let start = 6;",
          "    let end = 7;",
          "    let m = Match::new(haystack, start, end);",
          "    let result = m.start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, start);",
          "    assert!(result <= m.end());",
          "    assert!(result < haystack.len());",
          "    assert!(m.is_empty() == false);",
          "    assert_eq!(m.len(), end - start);",
          "    assert_eq!(m.range(), start..end);",
          "    assert_eq!(m.as_bytes(), &haystack[start..end]);"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"example\";",
          "    let start = 6;",
          "    let end = 7;",
          "    let m = Match::new(haystack, start, end);",
          "    let result = m.start();",
          "    assert_eq!(result, start);",
          "    assert!(result <= m.end());",
          "    assert!(result < haystack.len());",
          "    assert!(m.is_empty() == false);",
          "    assert_eq!(m.len(), end - start);",
          "    assert_eq!(m.range(), start..end);",
          "    assert_eq!(m.as_bytes(), &haystack[start..end]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"example\";",
          "    let start = usize::MAX; // out of bounds",
          "    let end = 7;",
          "    let m = Match::new(haystack, start, end);",
          "    let result = m.start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(m.start(), start);"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"example\";",
          "    let start = usize::MAX; // out of bounds",
          "    let end = 7;",
          "    let m = Match::new(haystack, start, end);",
          "    let result = m.start();",
          "    assert_eq!(m.start(), start);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"example\";",
          "    let start = 8; // out of bounds",
          "    let end = 9; // would also be out of bounds",
          "    let m = Match::new(haystack, start, end);",
          "    let result = m.start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(m.start(), 8);"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"example\";",
          "    let start = 8; // out of bounds",
          "    let end = 9; // would also be out of bounds",
          "    let m = Match::new(haystack, start, end);",
          "    let result = m.start();",
          "    assert_eq!(m.start(), 8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]