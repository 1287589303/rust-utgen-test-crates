[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = RegexSetBuilder::new(vec![\"a+\", \"b?\"]);",
          "    builder.swap_greed(true);",
          "}"
        ],
        "oracle": [
          "    builder.swap_greed(true);",
          "    assert_eq!(builder.builder.syntaxc.is_greedy(), false);",
          "    builder.swap_greed(false);",
          "    assert_eq!(builder.builder.syntaxc.is_greedy(), true);",
          "    builder.swap_greed(true);",
          "    let result = builder.build();",
          "    assert!(result.is_ok());",
          "    let regex_set = result.unwrap();",
          "    assert_eq!(regex_set.patterns.len(), 2);",
          "    assert!(regex_set.is_match(\"a\"));",
          "    assert!(regex_set.is_match(\"b\"));",
          "    assert!(!regex_set.is_match(\"c\"));",
          "    builder.swap_greed(false);",
          "    let result_after = builder.build();",
          "    assert!(result_after.is_ok());",
          "    let regex_set_after = result_after.unwrap();",
          "    assert_eq!(regex_set_after.patterns.len(), 2);"
        ],
        "code": [
          "{",
          "    let mut builder = RegexSetBuilder::new(vec![\"a+\", \"b?\"]);",
          "    builder.swap_greed(true);",
          "    builder.swap_greed(true);",
          "    assert_eq!(builder.builder.syntaxc.is_greedy(), false);",
          "    builder.swap_greed(false);",
          "    assert_eq!(builder.builder.syntaxc.is_greedy(), true);",
          "    builder.swap_greed(true);",
          "    let result = builder.build();",
          "    assert!(result.is_ok());",
          "    let regex_set = result.unwrap();",
          "    assert_eq!(regex_set.patterns.len(), 2);",
          "    assert!(regex_set.is_match(\"a\"));",
          "    assert!(regex_set.is_match(\"b\"));",
          "    assert!(!regex_set.is_match(\"c\"));",
          "    builder.swap_greed(false);",
          "    let result_after = builder.build();",
          "    assert!(result_after.is_ok());",
          "    let regex_set_after = result_after.unwrap();",
          "    assert_eq!(regex_set_after.patterns.len(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = RegexSetBuilder::new(vec![\"a+\", \"b?\"]);",
          "    builder.swap_greed(false);",
          "}"
        ],
        "oracle": [
          "    let builder = RegexSetBuilder::new(vec![\"a+\", \"b?\"]);",
          "    assert_eq!(builder.swap_greed(false), &builder);",
          "    let builder = RegexSetBuilder::new(vec![\"a+\", \"b?\"]);",
          "    assert_eq!(builder.swap_greed(true), &builder);",
          "    let mut builder = RegexSetBuilder::new(vec![\"pattern1+\", \"pattern2?\"]);",
          "    assert_eq!(builder.swap_greed(false), &builder);"
        ],
        "code": [
          "{",
          "    let mut builder = RegexSetBuilder::new(vec![\"a+\", \"b?\"]);",
          "    builder.swap_greed(false);",
          "    let builder = RegexSetBuilder::new(vec![\"a+\", \"b?\"]);",
          "    assert_eq!(builder.swap_greed(false), &builder);",
          "    let builder = RegexSetBuilder::new(vec![\"a+\", \"b?\"]);",
          "    assert_eq!(builder.swap_greed(true), &builder);",
          "    let mut builder = RegexSetBuilder::new(vec![\"pattern1+\", \"pattern2?\"]);",
          "    assert_eq!(builder.swap_greed(false), &builder);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]