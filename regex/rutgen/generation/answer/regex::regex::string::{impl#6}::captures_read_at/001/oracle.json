[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = \"eschew\";",
          "    let mut locs = re.capture_locations();",
          "",
          "    let result = re.captures_read_at(&mut locs, hay, 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Match::new(hay, 2, 6)));",
          "    let result_none = re.captures_read_at(&mut locs, hay, 2);",
          "    assert_eq!(result_none, None);",
          "    let panic_result = std::panic::catch_unwind(|| re.captures_read_at(&mut locs, hay, hay.len() + 1));",
          "    assert!(panic_result.is_err());",
          "    let invalid_locs = CaptureLocations(captures::Captures::new());",
          "    let panic_invalid_result = std::panic::catch_unwind(|| re.captures_read_at(&mut invalid_locs, hay, 0));",
          "    assert!(panic_invalid_result.is_err());"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = \"eschew\";",
          "    let mut locs = re.capture_locations();",
          "",
          "    let result = re.captures_read_at(&mut locs, hay, 0);",
          "    assert_eq!(result, Some(Match::new(hay, 2, 6)));",
          "    let result_none = re.captures_read_at(&mut locs, hay, 2);",
          "    assert_eq!(result_none, None);",
          "    let panic_result = std::panic::catch_unwind(|| re.captures_read_at(&mut locs, hay, hay.len() + 1));",
          "    assert!(panic_result.is_err());",
          "    let invalid_locs = CaptureLocations(captures::Captures::new());",
          "    let panic_invalid_result = std::panic::catch_unwind(|| re.captures_read_at(&mut invalid_locs, hay, 0));",
          "    assert!(panic_invalid_result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = \"eschew\";",
          "    let mut locs = re.capture_locations();",
          "",
          "    let result = re.captures_read_at(&mut locs, hay, 2);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().start, 2);",
          "    assert_eq!(result.unwrap().end, 6);",
          "    assert!(re.captures_read_at(&mut locs, hay, hay.len()).is_none());",
          "    assert!(std::panic::catch_unwind(|| { re.captures_read_at(&mut locs, hay, hay.len() + 1); }).is_err());"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = \"eschew\";",
          "    let mut locs = re.capture_locations();",
          "",
          "    let result = re.captures_read_at(&mut locs, hay, 2);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().start, 2);",
          "    assert_eq!(result.unwrap().end, 6);",
          "    assert!(re.captures_read_at(&mut locs, hay, hay.len()).is_none());",
          "    assert!(std::panic::catch_unwind(|| { re.captures_read_at(&mut locs, hay, hay.len() + 1); }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = \"eschew\";",
          "    let mut locs = re.capture_locations();",
          "",
          "    let result = re.captures_read_at(&mut locs, hay, hay.len() - 3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Match::new(hay, 2, 6)));",
          "    assert!(re.captures_read_at(&mut locs, hay, hay.len()).is_none());",
          "    assert!(re.captures_read_at(&mut locs, hay, hay.len() + 1).is_none());",
          "    assert!(std::panic::catch_unwind(|| { re.captures_read_at(&mut locs, hay, hay.len() + 2); }).is_err());",
          "    assert!(re.captures_read_at(&mut locs, hay, 0).is_some());",
          "    assert_eq!(re.captures_read_at(&mut locs, \"\", 0), None);",
          "    assert_eq!(re.captures_read_at(&mut locs, hay, 1), None);",
          "    assert_eq!(re.captures_read_at(&mut locs, hay, 3), Some(Match::new(hay, 2, 6)));"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = \"eschew\";",
          "    let mut locs = re.capture_locations();",
          "",
          "    let result = re.captures_read_at(&mut locs, hay, hay.len() - 3);",
          "    assert_eq!(result, Some(Match::new(hay, 2, 6)));",
          "    assert!(re.captures_read_at(&mut locs, hay, hay.len()).is_none());",
          "    assert!(re.captures_read_at(&mut locs, hay, hay.len() + 1).is_none());",
          "    assert!(std::panic::catch_unwind(|| { re.captures_read_at(&mut locs, hay, hay.len() + 2); }).is_err());",
          "    assert!(re.captures_read_at(&mut locs, hay, 0).is_some());",
          "    assert_eq!(re.captures_read_at(&mut locs, \"\", 0), None);",
          "    assert_eq!(re.captures_read_at(&mut locs, hay, 1), None);",
          "    assert_eq!(re.captures_read_at(&mut locs, hay, 3), Some(Match::new(hay, 2, 6)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = \"eschew\";",
          "    let mut locs = re.capture_locations();",
          "",
          "    let result = re.captures_read_at(&mut locs, hay, hay.len());",
          "}"
        ],
        "oracle": [
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = \"eschew\";",
          "    let mut locs = re.capture_locations();",
          "    let result = re.captures_read_at(&mut locs, hay, hay.len());",
          "    assert!(result.is_none());"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = \"eschew\";",
          "    let mut locs = re.capture_locations();",
          "",
          "    let result = re.captures_read_at(&mut locs, hay, hay.len());",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = \"eschew\";",
          "    let mut locs = re.capture_locations();",
          "    let result = re.captures_read_at(&mut locs, hay, hay.len());",
          "    assert!(result.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = \"\";",
          "    let mut locs = re.capture_locations();",
          "",
          "    let result = re.captures_read_at(&mut locs, hay, 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);",
          "    ",
          "    let hay = \"eschew\";",
          "    let mut locs = re.capture_locations();",
          "    let result = re.captures_read_at(&mut locs, hay, 2);",
          "    assert_eq!(result, None);",
          "    ",
          "    let hay = \"chew\";",
          "    let mut locs = re.capture_locations();",
          "    let result = re.captures_read_at(&mut locs, hay, 0);",
          "    assert!(result.is_some());",
          "    ",
          "    let hay = \"chewing\";",
          "    let mut locs = re.capture_locations();",
          "    let result = re.captures_read_at(&mut locs, hay, 0);",
          "    assert!(result.is_some());",
          "    ",
          "    let hay = \"chewing\";",
          "    let mut locs = re.capture_locations();",
          "    let result = re.captures_read_at(&mut locs, hay, 7);",
          "    assert_eq!(result, None);",
          "    ",
          "    let mut locs = re.capture_locations();",
          "    let result = re.captures_read_at(&mut locs, hay, hay.len() + 1);",
          "    assert!(result.is_none()); // testing panic condition, needs to be in a separate test to catch panic"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = \"\";",
          "    let mut locs = re.capture_locations();",
          "",
          "    let result = re.captures_read_at(&mut locs, hay, 0);",
          "    assert_eq!(result, None);",
          "    ",
          "    let hay = \"eschew\";",
          "    let mut locs = re.capture_locations();",
          "    let result = re.captures_read_at(&mut locs, hay, 2);",
          "    assert_eq!(result, None);",
          "    ",
          "    let hay = \"chew\";",
          "    let mut locs = re.capture_locations();",
          "    let result = re.captures_read_at(&mut locs, hay, 0);",
          "    assert!(result.is_some());",
          "    ",
          "    let hay = \"chewing\";",
          "    let mut locs = re.capture_locations();",
          "    let result = re.captures_read_at(&mut locs, hay, 0);",
          "    assert!(result.is_some());",
          "    ",
          "    let hay = \"chewing\";",
          "    let mut locs = re.capture_locations();",
          "    let result = re.captures_read_at(&mut locs, hay, 7);",
          "    assert_eq!(result, None);",
          "    ",
          "    let mut locs = re.capture_locations();",
          "    let result = re.captures_read_at(&mut locs, hay, hay.len() + 1);",
          "    assert!(result.is_none()); // testing panic condition, needs to be in a separate test to catch panic",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]