[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dead_state_id = StateID::new_unchecked(DEAD.as_usize());",
          "    let transition_dead = Transition::new(true, dead_state_id, Epsilons::default());",
          "    transition_dead.is_dead();",
          "}"
        ],
        "oracle": [
          "    assert!(transition_dead.is_dead());",
          "    let alive_state_id = StateID::new_unchecked(1);",
          "    let transition_alive = Transition::new(false, alive_state_id, Epsilons::default());",
          "    assert!(!transition_alive.is_dead());",
          "    let transition_with_dead_state_id = Transition::new(true, dead_state_id, Epsilons::default());",
          "    assert!(transition_with_dead_state_id.is_dead());",
          "    let transition_with_other_state_id = Transition::new(false, StateID::new_unchecked(2), Epsilons::default());",
          "    assert!(!transition_with_other_state_id.is_dead());"
        ],
        "code": [
          "{",
          "    let dead_state_id = StateID::new_unchecked(DEAD.as_usize());",
          "    let transition_dead = Transition::new(true, dead_state_id, Epsilons::default());",
          "    transition_dead.is_dead();",
          "    assert!(transition_dead.is_dead());",
          "    let alive_state_id = StateID::new_unchecked(1);",
          "    let transition_alive = Transition::new(false, alive_state_id, Epsilons::default());",
          "    assert!(!transition_alive.is_dead());",
          "    let transition_with_dead_state_id = Transition::new(true, dead_state_id, Epsilons::default());",
          "    assert!(transition_with_dead_state_id.is_dead());",
          "    let transition_with_other_state_id = Transition::new(false, StateID::new_unchecked(2), Epsilons::default());",
          "    assert!(!transition_with_other_state_id.is_dead());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alive_state_id = StateID::new_unchecked(1);",
          "    let transition_alive = Transition::new(false, alive_state_id, Epsilons::default());",
          "    transition_alive.is_dead();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(transition_alive.is_dead(), false);"
        ],
        "code": [
          "{",
          "    let alive_state_id = StateID::new_unchecked(1);",
          "    let transition_alive = Transition::new(false, alive_state_id, Epsilons::default());",
          "    transition_alive.is_dead();",
          "    assert_eq!(transition_alive.is_dead(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition_dead_boundary = Transition::new(true, StateID::new_unchecked((1 << Transition::STATE_ID_BITS) - 1), Epsilons::default());",
          "    transition_dead_boundary.is_dead();",
          "}"
        ],
        "oracle": [
          "    assert!(transition_dead_boundary.is_dead() == true);"
        ],
        "code": [
          "{",
          "    let transition_dead_boundary = Transition::new(true, StateID::new_unchecked((1 << Transition::STATE_ID_BITS) - 1), Epsilons::default());",
          "    transition_dead_boundary.is_dead();",
          "    assert!(transition_dead_boundary.is_dead() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]