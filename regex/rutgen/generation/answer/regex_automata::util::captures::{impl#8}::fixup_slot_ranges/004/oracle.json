[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut group_info = GroupInfoInner {",
          "        slot_ranges: vec![],",
          "        name_to_index: vec![],",
          "        index_to_name: vec![],",
          "        memory_extra: 0,",
          "    };",
          "    let result = group_info.fixup_slot_ranges();",
          "}"
        ],
        "oracle": [
          "    let mut group_info = GroupInfoInner { slot_ranges: vec![], name_to_index: vec![], index_to_name: vec![], memory_extra: 0 };",
          "    let result = group_info.fixup_slot_ranges();",
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    let mut group_info = GroupInfoInner {",
          "        slot_ranges: vec![],",
          "        name_to_index: vec![],",
          "        index_to_name: vec![],",
          "        memory_extra: 0,",
          "    };",
          "    let result = group_info.fixup_slot_ranges();",
          "    let mut group_info = GroupInfoInner { slot_ranges: vec![], name_to_index: vec![], index_to_name: vec![], memory_extra: 0 };",
          "    let result = group_info.fixup_slot_ranges();",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut group_info = GroupInfoInner {",
          "        slot_ranges: vec![],",
          "        name_to_index: vec![],",
          "        index_to_name: vec![],",
          "        memory_extra: 0,",
          "    };",
          "    let result = group_info.fixup_slot_ranges();",
          "}"
        ],
        "oracle": [
          "    let mut group_info = GroupInfoInner { slot_ranges: vec![], name_to_index: vec![], index_to_name: vec![], memory_extra: 0 };",
          "    let result = group_info.fixup_slot_ranges();",
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    let mut group_info = GroupInfoInner {",
          "        slot_ranges: vec![],",
          "        name_to_index: vec![],",
          "        index_to_name: vec![],",
          "        memory_extra: 0,",
          "    };",
          "    let result = group_info.fixup_slot_ranges();",
          "    let mut group_info = GroupInfoInner { slot_ranges: vec![], name_to_index: vec![], index_to_name: vec![], memory_extra: 0 };",
          "    let result = group_info.fixup_slot_ranges();",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]