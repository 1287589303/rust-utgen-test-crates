[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u64 = 0;",
          "    let result = value.high_u32();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0);",
          "    let value: u64 = 1 << 33;",
          "    let result = value.high_u32();",
          "    assert_eq!(result, 1);",
          "    let value: u64 = (u64::MAX >> 32) << 32;",
          "    let result = value.high_u32();",
          "    assert_eq!(result, u32::MAX);",
          "    let value: u64 = u64::MAX;",
          "    let result = value.high_u32();",
          "    assert_eq!(result, u32::MAX);",
          "    let value: u64 = 0xFFFFFFFFFFFFFFFF;",
          "    let result = value.high_u32();",
          "    assert_eq!(result, 0xFFFFFFFF);",
          "    let value: u64 = 0x123456789ABCDEF0;",
          "    let result = value.high_u32();",
          "    assert_eq!(result, 0x12345678);"
        ],
        "code": [
          "{",
          "    let value: u64 = 0;",
          "    let result = value.high_u32();",
          "    assert_eq!(result, 0);",
          "    let value: u64 = 1 << 33;",
          "    let result = value.high_u32();",
          "    assert_eq!(result, 1);",
          "    let value: u64 = (u64::MAX >> 32) << 32;",
          "    let result = value.high_u32();",
          "    assert_eq!(result, u32::MAX);",
          "    let value: u64 = u64::MAX;",
          "    let result = value.high_u32();",
          "    assert_eq!(result, u32::MAX);",
          "    let value: u64 = 0xFFFFFFFFFFFFFFFF;",
          "    let result = value.high_u32();",
          "    assert_eq!(result, 0xFFFFFFFF);",
          "    let value: u64 = 0x123456789ABCDEF0;",
          "    let result = value.high_u32();",
          "    assert_eq!(result, 0x12345678);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u64 = u64::MAX >> 32; // Values just below 2^32",
          "    let result = value.high_u32();",
          "}"
        ],
        "oracle": [
          "    let value: u64 = u64::MAX >> 32;",
          "    let expected: u32 = (u64::MAX >> 32) as u32;",
          "    assert_eq!(result, expected);",
          "    ",
          "    let value: u64 = 0;",
          "    let expected: u32 = (0 >> 32) as u32;",
          "    assert_eq!(value.high_u32(), expected);",
          "    ",
          "    let value: u64 = 1 << 33;",
          "    let expected: u32 = (1 << 33 >> 32) as u32;",
          "    assert_eq!(value.high_u32(), expected);",
          "    ",
          "    let value: u64 = 1 << 32;",
          "    let expected: u32 = (1 << 32 >> 32) as u32;",
          "    assert_eq!(value.high_u32(), expected);",
          "    ",
          "    let value: u64 = 2u64.pow(63) - 1;",
          "    let expected: u32 = (2u64.pow(63) - 1 >> 32) as u32;",
          "    assert_eq!(value.high_u32(), expected);"
        ],
        "code": [
          "{",
          "    let value: u64 = u64::MAX >> 32; // Values just below 2^32",
          "    let result = value.high_u32();",
          "    let value: u64 = u64::MAX >> 32;",
          "    let expected: u32 = (u64::MAX >> 32) as u32;",
          "    assert_eq!(result, expected);",
          "    ",
          "    let value: u64 = 0;",
          "    let expected: u32 = (0 >> 32) as u32;",
          "    assert_eq!(value.high_u32(), expected);",
          "    ",
          "    let value: u64 = 1 << 33;",
          "    let expected: u32 = (1 << 33 >> 32) as u32;",
          "    assert_eq!(value.high_u32(), expected);",
          "    ",
          "    let value: u64 = 1 << 32;",
          "    let expected: u32 = (1 << 32 >> 32) as u32;",
          "    assert_eq!(value.high_u32(), expected);",
          "    ",
          "    let value: u64 = 2u64.pow(63) - 1;",
          "    let expected: u32 = (2u64.pow(63) - 1 >> 32) as u32;",
          "    assert_eq!(value.high_u32(), expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u64 = 1 << 32; // Value equal to 2^32",
          "    let result = value.high_u32();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 1);  // Assert that the high 32 bits of 2^32 equal 1",
          "    ",
          "    let value: u64 = 0; // Value equal to 0",
          "    let result = value.high_u32();",
          "    assert_eq!(result, 0);  // Assert that the high 32 bits of 0 equal 0",
          "    ",
          "    let value: u64 = 0xFFFFFFFFFFFFFFFF; // Maximum u64 value",
          "    let result = value.high_u32();",
          "    assert_eq!(result, 0xFFFFFFFF);  // Assert that the high 32 bits of maximum u64 value equal 0xFFFFFFFF",
          "    ",
          "    let value: u64 = 0x0000000100000000; // Value equal to 2^32 + 1",
          "    let result = value.high_u32();",
          "    assert_eq!(result, 1);  // Assert that the high 32 bits of (2^32 + 1) equal 1",
          "    ",
          "    let value: u64 = 0x80000000; // Value equal to 2^31",
          "    let result = value.high_u32();",
          "    assert_eq!(result, 0);  // Assert that the high 32 bits of 2^31 equal 0"
        ],
        "code": [
          "{",
          "    let value: u64 = 1 << 32; // Value equal to 2^32",
          "    let result = value.high_u32();",
          "    assert_eq!(result, 1);  // Assert that the high 32 bits of 2^32 equal 1",
          "    ",
          "    let value: u64 = 0; // Value equal to 0",
          "    let result = value.high_u32();",
          "    assert_eq!(result, 0);  // Assert that the high 32 bits of 0 equal 0",
          "    ",
          "    let value: u64 = 0xFFFFFFFFFFFFFFFF; // Maximum u64 value",
          "    let result = value.high_u32();",
          "    assert_eq!(result, 0xFFFFFFFF);  // Assert that the high 32 bits of maximum u64 value equal 0xFFFFFFFF",
          "    ",
          "    let value: u64 = 0x0000000100000000; // Value equal to 2^32 + 1",
          "    let result = value.high_u32();",
          "    assert_eq!(result, 1);  // Assert that the high 32 bits of (2^32 + 1) equal 1",
          "    ",
          "    let value: u64 = 0x80000000; // Value equal to 2^31",
          "    let result = value.high_u32();",
          "    assert_eq!(result, 0);  // Assert that the high 32 bits of 2^31 equal 0",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u64 = u64::MAX; // Value equal to 2^64 - 1",
          "    let result = value.high_u32();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0xFFFFFFFF);  // High 32 bits of u64::MAX is 0xFFFFFFFF",
          "    let value: u64 = 0; // Value equal to 0",
          "    let result = value.high_u32();",
          "    assert_eq!(result, 0);  // High 32 bits of 0 is 0",
          "    let value: u64 = 0x00000000FFFFFFFF; // Value equal to 0xFFFFFFFF",
          "    let result = value.high_u32();",
          "    assert_eq!(result, 0);  // High 32 bits of 0x00000000FFFFFFFF is 0",
          "    let value: u64 = 0xFFFFFFFF00000000; // Value equal to 0xFFFFFFFF00000000",
          "    let result = value.high_u32();",
          "    assert_eq!(result, 0xFFFFFFFF);  // High 32 bits of 0xFFFFFFFF00000000 is 0xFFFFFFFF",
          "    let value: u64 = 0x1234567890ABCDEF; // Arbitrary value",
          "    let result = value.high_u32();",
          "    assert_eq!(result, 0x90ABCDE);  // High 32 bits of 0x1234567890ABCDE is 0x90ABCDE"
        ],
        "code": [
          "{",
          "    let value: u64 = u64::MAX; // Value equal to 2^64 - 1",
          "    let result = value.high_u32();",
          "    assert_eq!(result, 0xFFFFFFFF);  // High 32 bits of u64::MAX is 0xFFFFFFFF",
          "    let value: u64 = 0; // Value equal to 0",
          "    let result = value.high_u32();",
          "    assert_eq!(result, 0);  // High 32 bits of 0 is 0",
          "    let value: u64 = 0x00000000FFFFFFFF; // Value equal to 0xFFFFFFFF",
          "    let result = value.high_u32();",
          "    assert_eq!(result, 0);  // High 32 bits of 0x00000000FFFFFFFF is 0",
          "    let value: u64 = 0xFFFFFFFF00000000; // Value equal to 0xFFFFFFFF00000000",
          "    let result = value.high_u32();",
          "    assert_eq!(result, 0xFFFFFFFF);  // High 32 bits of 0xFFFFFFFF00000000 is 0xFFFFFFFF",
          "    let value: u64 = 0x1234567890ABCDEF; // Arbitrary value",
          "    let result = value.high_u32();",
          "    assert_eq!(result, 0x90ABCDE);  // High 32 bits of 0x1234567890ABCDE is 0x90ABCDE",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]