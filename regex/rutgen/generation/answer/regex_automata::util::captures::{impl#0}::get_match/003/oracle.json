[
  {
    "uses": [
      "use crate::util::primitives::NonMaxUsize;",
      "use crate::util::primitives::PatternID;",
      "use crate::util::captures::GroupInfo;",
      "use crate::util::captures::Captures;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::util::primitives::NonMaxUsize;",
          "    use crate::util::primitives::PatternID;",
          "    use crate::util::captures::Captures;",
          "    use crate::util::captures::GroupInfo;",
          "    ",
          "    let group_info = GroupInfo::default();",
          "    let pid = PatternID::default();",
          "",
          "    let valid_slot1 = NonMaxUsize::new(1).unwrap();",
          "    let valid_slot2 = NonMaxUsize::new(3).unwrap();",
          "    let slots = vec![Some(valid_slot1), Some(valid_slot2)];",
          "",
          "    let captures = Captures {",
          "        group_info: group_info.clone(),",
          "        pid: Some(pid),",
          "        slots,",
          "    };",
          "",
          "    let _ = captures.get_match();",
          "}"
        ],
        "oracle": [
          "    assert!(captures.pattern().is_some());",
          "    assert!(captures.get_group(0).is_some());",
          "    assert_eq!(_unwrap(_captures.get_match()), Some(Match::new(captures.pattern().unwrap(), captures.get_group(0).unwrap())));",
          "    assert_eq!(captures.get_match().is_some(), true);"
        ],
        "code": [
          "{",
          "    use crate::util::primitives::NonMaxUsize;",
          "    use crate::util::primitives::PatternID;",
          "    use crate::util::captures::Captures;",
          "    use crate::util::captures::GroupInfo;",
          "    ",
          "    let group_info = GroupInfo::default();",
          "    let pid = PatternID::default();",
          "",
          "    let valid_slot1 = NonMaxUsize::new(1).unwrap();",
          "    let valid_slot2 = NonMaxUsize::new(3).unwrap();",
          "    let slots = vec![Some(valid_slot1), Some(valid_slot2)];",
          "",
          "    let captures = Captures {",
          "        group_info: group_info.clone(),",
          "        pid: Some(pid),",
          "        slots,",
          "    };",
          "",
          "    let _ = captures.get_match();",
          "    assert!(captures.pattern().is_some());",
          "    assert!(captures.get_group(0).is_some());",
          "    assert_eq!(_unwrap(_captures.get_match()), Some(Match::new(captures.pattern().unwrap(), captures.get_group(0).unwrap())));",
          "    assert_eq!(captures.get_match().is_some(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::util::primitives::NonMaxUsize;",
          "    use crate::util::primitives::PatternID;",
          "    use crate::util::captures::Captures;",
          "    use crate::util::captures::GroupInfo;",
          "    ",
          "    let group_info = GroupInfo::default();",
          "    let pid = PatternID::default();",
          "",
          "    let valid_slot1 = NonMaxUsize::new(1).unwrap();",
          "    let valid_slot2 = NonMaxUsize::new(4).unwrap();",
          "    let valid_slot3 = NonMaxUsize::new(6).unwrap();",
          "    let slots = vec![Some(valid_slot1), Some(valid_slot2), Some(valid_slot3)];",
          "",
          "    let captures = Captures {",
          "        group_info: group_info.clone(),",
          "        pid: Some(pid),",
          "        slots,",
          "    };",
          "",
          "    let _ = captures.get_match();",
          "}"
        ],
        "oracle": [
          "    assert!(captures.pattern().is_some());",
          "    assert!(captures.get_group(0).is_some());",
          "    assert_eq!(captures.get_match(), Some(Match::new(captures.pattern().unwrap(), captures.get_group(0).unwrap())));"
        ],
        "code": [
          "{",
          "    use crate::util::primitives::NonMaxUsize;",
          "    use crate::util::primitives::PatternID;",
          "    use crate::util::captures::Captures;",
          "    use crate::util::captures::GroupInfo;",
          "    ",
          "    let group_info = GroupInfo::default();",
          "    let pid = PatternID::default();",
          "",
          "    let valid_slot1 = NonMaxUsize::new(1).unwrap();",
          "    let valid_slot2 = NonMaxUsize::new(4).unwrap();",
          "    let valid_slot3 = NonMaxUsize::new(6).unwrap();",
          "    let slots = vec![Some(valid_slot1), Some(valid_slot2), Some(valid_slot3)];",
          "",
          "    let captures = Captures {",
          "        group_info: group_info.clone(),",
          "        pid: Some(pid),",
          "        slots,",
          "    };",
          "",
          "    let _ = captures.get_match();",
          "    assert!(captures.pattern().is_some());",
          "    assert!(captures.get_group(0).is_some());",
          "    assert_eq!(captures.get_match(), Some(Match::new(captures.pattern().unwrap(), captures.get_group(0).unwrap())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::util::primitives::NonMaxUsize;",
          "    use crate::util::primitives::PatternID;",
          "    use crate::util::captures::Captures;",
          "    use crate::util::captures::GroupInfo;",
          "    ",
          "    let group_info = GroupInfo::default();",
          "    let pid = PatternID::default();",
          "",
          "    let valid_slot1 = NonMaxUsize::new(0).unwrap();",
          "    let valid_slot2 = NonMaxUsize::new(2).unwrap();",
          "    let slots = vec![Some(valid_slot1), Some(valid_slot2)];",
          "",
          "    let captures = Captures {",
          "        group_info: group_info.clone(),",
          "        pid: Some(pid),",
          "        slots,",
          "    };",
          "",
          "    let _ = captures.get_match();",
          "}"
        ],
        "oracle": [
          "    assert!(captures.pattern().is_some());",
          "    assert!(captures.get_group(0).is_some());",
          "    assert_eq!(captures.get_match(), Some(Match::new(captures.pattern().unwrap(), captures.get_group(0).unwrap())));"
        ],
        "code": [
          "{",
          "    use crate::util::primitives::NonMaxUsize;",
          "    use crate::util::primitives::PatternID;",
          "    use crate::util::captures::Captures;",
          "    use crate::util::captures::GroupInfo;",
          "    ",
          "    let group_info = GroupInfo::default();",
          "    let pid = PatternID::default();",
          "",
          "    let valid_slot1 = NonMaxUsize::new(0).unwrap();",
          "    let valid_slot2 = NonMaxUsize::new(2).unwrap();",
          "    let slots = vec![Some(valid_slot1), Some(valid_slot2)];",
          "",
          "    let captures = Captures {",
          "        group_info: group_info.clone(),",
          "        pid: Some(pid),",
          "        slots,",
          "    };",
          "",
          "    let _ = captures.get_match();",
          "    assert!(captures.pattern().is_some());",
          "    assert!(captures.get_group(0).is_some());",
          "    assert_eq!(captures.get_match(), Some(Match::new(captures.pattern().unwrap(), captures.get_group(0).unwrap())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]