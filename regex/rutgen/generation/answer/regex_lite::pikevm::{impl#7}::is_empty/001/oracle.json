[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sparse_set = SparseSet::new(0);",
          "    sparse_set.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert!(sparse_set.is_empty() == true);"
        ],
        "code": [
          "{",
          "    let sparse_set = SparseSet::new(0);",
          "    sparse_set.is_empty();",
          "    assert!(sparse_set.is_empty() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sparse_set = SparseSet::new(3);",
          "    sparse_set.insert(StateID::new(1));",
          "    sparse_set.clear();",
          "    sparse_set.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sparse_set.len(), 0);",
          "    assert!(sparse_set.is_empty());",
          "    sparse_set.insert(StateID::new(1));",
          "    sparse_set.clear();",
          "    assert_eq!(sparse_set.len(), 0);",
          "    assert!(sparse_set.is_empty());"
        ],
        "code": [
          "{",
          "    let mut sparse_set = SparseSet::new(3);",
          "    sparse_set.insert(StateID::new(1));",
          "    sparse_set.clear();",
          "    sparse_set.is_empty();",
          "    assert_eq!(sparse_set.len(), 0);",
          "    assert!(sparse_set.is_empty());",
          "    sparse_set.insert(StateID::new(1));",
          "    sparse_set.clear();",
          "    assert_eq!(sparse_set.len(), 0);",
          "    assert!(sparse_set.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sparse_set = SparseSet::new(1);",
          "    sparse_set.insert(StateID::new(1));",
          "    sparse_set.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sparse_set.is_empty(), false);",
          "    sparse_set.clear();",
          "    assert_eq!(sparse_set.is_empty(), true);",
          "    sparse_set.insert(StateID::new(2));",
          "    assert_eq!(sparse_set.is_empty(), false);",
          "    sparse_set.resize(0);",
          "    assert_eq!(sparse_set.is_empty(), true);"
        ],
        "code": [
          "{",
          "    let mut sparse_set = SparseSet::new(1);",
          "    sparse_set.insert(StateID::new(1));",
          "    sparse_set.is_empty();",
          "    assert_eq!(sparse_set.is_empty(), false);",
          "    sparse_set.clear();",
          "    assert_eq!(sparse_set.is_empty(), true);",
          "    sparse_set.insert(StateID::new(2));",
          "    assert_eq!(sparse_set.is_empty(), false);",
          "    sparse_set.resize(0);",
          "    assert_eq!(sparse_set.is_empty(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]