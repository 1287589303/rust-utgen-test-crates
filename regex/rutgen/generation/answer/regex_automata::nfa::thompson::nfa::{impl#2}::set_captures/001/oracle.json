[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut inner = Inner::default();",
          "    let captures: Vec<Vec<Option<Arc<str>>>> = vec![vec![None, Some(Arc::new(\"group1\".to_string()))], vec![]];",
          "    let _ = inner.set_captures(&captures);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(inner.set_captures(&captures), Err(GroupInfoError { kind: GroupInfoErrorKind::SomeExpectedErrorKind }));",
          "    assert!(inner.group_info().is_empty());"
        ],
        "code": [
          "{",
          "    let mut inner = Inner::default();",
          "    let captures: Vec<Vec<Option<Arc<str>>>> = vec![vec![None, Some(Arc::new(\"group1\".to_string()))], vec![]];",
          "    let _ = inner.set_captures(&captures);",
          "    assert_eq!(inner.set_captures(&captures), Err(GroupInfoError { kind: GroupInfoErrorKind::SomeExpectedErrorKind }));",
          "    assert!(inner.group_info().is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut inner = Inner::default();",
          "    let captures: Vec<Vec<Option<Arc<str>>>> = vec![",
          "        vec![Some(Arc::new(\"group1\".to_string())), Some(Arc::new(\"group2\".to_string()))], ",
          "        vec![Some(Arc::new(\"group3\".to_string())), Some(Arc::new(\"group4\".to_string())), Some(Arc::new(\"group5\".to_string()))]",
          "    ];",
          "    let _ = inner.set_captures(&captures);",
          "}"
        ],
        "oracle": [
          "    let mut inner = Inner::default();",
          "    let captures: Vec<Vec<Option<Arc<str>>>> = vec![];",
          "    let result = inner.set_captures(&captures);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().kind, GroupInfoErrorKind::SomeExpectedError);",
          "    let captures: Vec<Vec<Option<Arc<str>>>> = vec![vec![None]];",
          "    let result = inner.set_captures(&captures);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().kind, GroupInfoErrorKind::SomeExpectedError);",
          "    let captures: Vec<Vec<Option<Arc<str>>>> = vec![vec![Some(Arc::new(\"group1\".to_string()))], vec![Some(Arc::new(\"group2\".to_string()))]];",
          "    let result = inner.set_captures(&captures);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().kind, GroupInfoErrorKind::SomeExpectedError);",
          "    let captures: Vec<Vec<Option<Arc<str>>>> = vec![vec![Some(Arc::new(\"group1\".to_string())), Some(Arc::new(\"group2\".to_string()))], vec![]];",
          "    let result = inner.set_captures(&captures);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().kind, GroupInfoErrorKind::SomeExpectedError);"
        ],
        "code": [
          "{",
          "    let mut inner = Inner::default();",
          "    let captures: Vec<Vec<Option<Arc<str>>>> = vec![",
          "        vec![Some(Arc::new(\"group1\".to_string())), Some(Arc::new(\"group2\".to_string()))], ",
          "        vec![Some(Arc::new(\"group3\".to_string())), Some(Arc::new(\"group4\".to_string())), Some(Arc::new(\"group5\".to_string()))]",
          "    ];",
          "    let _ = inner.set_captures(&captures);",
          "    let mut inner = Inner::default();",
          "    let captures: Vec<Vec<Option<Arc<str>>>> = vec![];",
          "    let result = inner.set_captures(&captures);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().kind, GroupInfoErrorKind::SomeExpectedError);",
          "    let captures: Vec<Vec<Option<Arc<str>>>> = vec![vec![None]];",
          "    let result = inner.set_captures(&captures);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().kind, GroupInfoErrorKind::SomeExpectedError);",
          "    let captures: Vec<Vec<Option<Arc<str>>>> = vec![vec![Some(Arc::new(\"group1\".to_string()))], vec![Some(Arc::new(\"group2\".to_string()))]];",
          "    let result = inner.set_captures(&captures);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().kind, GroupInfoErrorKind::SomeExpectedError);",
          "    let captures: Vec<Vec<Option<Arc<str>>>> = vec![vec![Some(Arc::new(\"group1\".to_string())), Some(Arc::new(\"group2\".to_string()))], vec![]];",
          "    let result = inner.set_captures(&captures);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().kind, GroupInfoErrorKind::SomeExpectedError);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]