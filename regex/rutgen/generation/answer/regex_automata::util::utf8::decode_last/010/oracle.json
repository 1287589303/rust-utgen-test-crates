[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: &[u8] = &[];",
          "    let result = decode_last(bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(decode_last(&[0xC0]), None);",
          "    assert_eq!(decode_last(&[0xC0, 0x80]), None);",
          "    assert_eq!(decode_last(&[0xE0, 0xA0, 0x80]), None);",
          "    assert_eq!(decode_last(&[0xF0, 0x80, 0x80, 0xBF]), None);",
          "    assert_eq!(decode_last(&[0xF0, 0x80, 0x80, 0x80, 0xFF]), None);"
        ],
        "code": [
          "{",
          "    let bytes: &[u8] = &[];",
          "    let result = decode_last(bytes);",
          "    assert_eq!(decode_last(&[0xC0]), None);",
          "    assert_eq!(decode_last(&[0xC0, 0x80]), None);",
          "    assert_eq!(decode_last(&[0xE0, 0xA0, 0x80]), None);",
          "    assert_eq!(decode_last(&[0xF0, 0x80, 0x80, 0xBF]), None);",
          "    assert_eq!(decode_last(&[0xF0, 0x80, 0x80, 0x80, 0xFF]), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: &[u8] = &[0b11000010, 0b10111111, 0b11100000, 0b10111111]; // Invalid continuation bytes",
          "    let result = decode_last(bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let bytes: &[u8] = &[0b11000010, 0b10111111, 0b11100000, 0b10111111]; // Invalid continuation bytes",
          "    let result = decode_last(bytes);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: &[u8] = &[0b11000000, 0b00000000, 0b00000000, 0b11111111]; // Last byte is invalid",
          "    let result = decode_last(bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let bytes: &[u8] = &[0b11000000, 0b00000000, 0b00000000, 0b11111111]; // Last byte is invalid",
          "    let result = decode_last(bytes);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]