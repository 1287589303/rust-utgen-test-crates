[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let valid_id = StateID::new_unchecked(1);",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: NFA::default(),",
          "        table: vec![],",
          "        starts: vec![],",
          "        min_match_id: StateID::new_unchecked(0),",
          "        classes: ByteClasses([0; 256]),",
          "        alphabet_len: 0,",
          "        stride2: 0,",
          "        pateps_offset: 0,",
          "        explicit_slot_start: 0,",
          "    };",
          "    let result = dfa.prev_state_id(valid_id);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result, Some(StateID::new_unchecked(0)));"
        ],
        "code": [
          "{",
          "    let valid_id = StateID::new_unchecked(1);",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: NFA::default(),",
          "        table: vec![],",
          "        starts: vec![],",
          "        min_match_id: StateID::new_unchecked(0),",
          "        classes: ByteClasses([0; 256]),",
          "        alphabet_len: 0,",
          "        stride2: 0,",
          "        pateps_offset: 0,",
          "        explicit_slot_start: 0,",
          "    };",
          "    let result = dfa.prev_state_id(valid_id);",
          "    assert!(result.is_some());",
          "    assert_eq!(result, Some(StateID::new_unchecked(0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let max_valid_id = StateID::new_unchecked(u64::MAX); // Assuming this is the MAX_STATE_ID.",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: NFA::default(),",
          "        table: vec![],",
          "        starts: vec![],",
          "        min_match_id: StateID::new_unchecked(0),",
          "        classes: ByteClasses([0; 256]),",
          "        alphabet_len: 0,",
          "        stride2: 0,",
          "        pateps_offset: 0,",
          "        explicit_slot_start: 0,",
          "    };",
          "    let result = dfa.prev_state_id(max_valid_id);",
          "}"
        ],
        "oracle": [
          "    let max_valid_id = StateID::new_unchecked(u64::MAX);",
          "    let result = dfa.prev_state_id(max_valid_id);",
          "    assert!(result.is_some());",
          "    let expected_id = StateID::new_unchecked(u64::MAX.checked_sub(1).unwrap());",
          "    assert_eq!(result, Some(expected_id));"
        ],
        "code": [
          "{",
          "    let max_valid_id = StateID::new_unchecked(u64::MAX); // Assuming this is the MAX_STATE_ID.",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: NFA::default(),",
          "        table: vec![],",
          "        starts: vec![],",
          "        min_match_id: StateID::new_unchecked(0),",
          "        classes: ByteClasses([0; 256]),",
          "        alphabet_len: 0,",
          "        stride2: 0,",
          "        pateps_offset: 0,",
          "        explicit_slot_start: 0,",
          "    };",
          "    let result = dfa.prev_state_id(max_valid_id);",
          "    let max_valid_id = StateID::new_unchecked(u64::MAX);",
          "    let result = dfa.prev_state_id(max_valid_id);",
          "    assert!(result.is_some());",
          "    let expected_id = StateID::new_unchecked(u64::MAX.checked_sub(1).unwrap());",
          "    assert_eq!(result, Some(expected_id));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mid_id = StateID::new_unchecked(2);",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: NFA::default(),",
          "        table: vec![],",
          "        starts: vec![],",
          "        min_match_id: StateID::new_unchecked(0),",
          "        classes: ByteClasses([0; 256]),",
          "        alphabet_len: 0,",
          "        stride2: 0,",
          "        pateps_offset: 0,",
          "        explicit_slot_start: 0,",
          "    };",
          "    let result = dfa.prev_state_id(mid_id);",
          "}"
        ],
        "oracle": [
          "    let mid_id = StateID::new_unchecked(2);",
          "    let expected_result = Some(StateID::new_unchecked(1));",
          "    let result = dfa.prev_state_id(mid_id);",
          "    assert_eq!(result, expected_result);"
        ],
        "code": [
          "{",
          "    let mid_id = StateID::new_unchecked(2);",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: NFA::default(),",
          "        table: vec![],",
          "        starts: vec![],",
          "        min_match_id: StateID::new_unchecked(0),",
          "        classes: ByteClasses([0; 256]),",
          "        alphabet_len: 0,",
          "        stride2: 0,",
          "        pateps_offset: 0,",
          "        explicit_slot_start: 0,",
          "    };",
          "    let result = dfa.prev_state_id(mid_id);",
          "    let mid_id = StateID::new_unchecked(2);",
          "    let expected_result = Some(StateID::new_unchecked(1));",
          "    let result = dfa.prev_state_id(mid_id);",
          "    assert_eq!(result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let large_id = StateID::new_unchecked(u32::MAX as u64); // Example of a large valid StateID.",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: NFA::default(),",
          "        table: vec![],",
          "        starts: vec![],",
          "        min_match_id: StateID::new_unchecked(0),",
          "        classes: ByteClasses([0; 256]),",
          "        alphabet_len: 0,",
          "        stride2: 0,",
          "        pateps_offset: 0,",
          "        explicit_slot_start: 0,",
          "    };",
          "    let result = dfa.prev_state_id(large_id);",
          "}"
        ],
        "oracle": [
          "    let large_id = StateID::new_unchecked(u32::MAX as u64);",
          "    let result = dfa.prev_state_id(large_id);",
          "    assert!(result.is_some(), \"Expected Some(StateID), got None\");",
          "    let expected_id = StateID::new_unchecked(u32::MAX as u64 - 1);",
          "    assert_eq!(result, Some(expected_id), \"Expected Some(StateID::new_unchecked(u32::MAX as u64 - 1)), got {:?}\", result);"
        ],
        "code": [
          "{",
          "    let large_id = StateID::new_unchecked(u32::MAX as u64); // Example of a large valid StateID.",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: NFA::default(),",
          "        table: vec![],",
          "        starts: vec![],",
          "        min_match_id: StateID::new_unchecked(0),",
          "        classes: ByteClasses([0; 256]),",
          "        alphabet_len: 0,",
          "        stride2: 0,",
          "        pateps_offset: 0,",
          "        explicit_slot_start: 0,",
          "    };",
          "    let result = dfa.prev_state_id(large_id);",
          "    let large_id = StateID::new_unchecked(u32::MAX as u64);",
          "    let result = dfa.prev_state_id(large_id);",
          "    assert!(result.is_some(), \"Expected Some(StateID), got None\");",
          "    let expected_id = StateID::new_unchecked(u32::MAX as u64 - 1);",
          "    assert_eq!(result, Some(expected_id), \"Expected Some(StateID::new_unchecked(u32::MAX as u64 - 1)), got {:?}\", result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]