[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let builder = regex_automata::dfa::Builder::new();",
          "}"
        ],
        "oracle": [
          "    let builder = regex_automata::dfa::builder();",
          "    assert_eq!(builder.config, Config::default());",
          "    assert!(builder.pattern_len.is_none());",
          "    assert!(builder.universal_start_unanchored.is_none());",
          "    assert!(builder.universal_start_anchored.is_none());",
          "    assert_eq!(builder.kind, StartKind::Both);",
          "    assert_eq!(builder.stride, 2);"
        ],
        "code": [
          "{",
          "    let builder = regex_automata::dfa::Builder::new();",
          "    let builder = regex_automata::dfa::builder();",
          "    assert_eq!(builder.config, Config::default());",
          "    assert!(builder.pattern_len.is_none());",
          "    assert!(builder.universal_start_unanchored.is_none());",
          "    assert!(builder.universal_start_anchored.is_none());",
          "    assert_eq!(builder.kind, StartKind::Both);",
          "    assert_eq!(builder.stride, 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let builder = regex_automata::dfa::builder();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.config, Config::default());",
          "    assert!(builder.pattern_len.is_none());",
          "    assert!(builder.universal_start_unanchored.is_none());",
          "    assert!(builder.universal_start_anchored.is_none());",
          "    assert_eq!(builder.start_map.len(), 256);",
          "    assert_eq!(builder.stride, 8);",
          "    assert_eq!(builder.kind, StartKind::Both);"
        ],
        "code": [
          "{",
          "    let builder = regex_automata::dfa::builder();",
          "    assert_eq!(builder.config, Config::default());",
          "    assert!(builder.pattern_len.is_none());",
          "    assert!(builder.universal_start_unanchored.is_none());",
          "    assert!(builder.universal_start_anchored.is_none());",
          "    assert_eq!(builder.start_map.len(), 256);",
          "    assert_eq!(builder.stride, 8);",
          "    assert_eq!(builder.kind, StartKind::Both);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]