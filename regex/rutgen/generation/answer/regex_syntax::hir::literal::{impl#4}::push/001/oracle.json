[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq = Seq {",
          "        literals: Some(vec![Literal {",
          "            span: Span::default(),",
          "            kind: LiteralKind::default(),",
          "            c: 'a',",
          "        }]),",
          "    };",
          "",
          "    let equivalent_literal = Literal {",
          "        span: Span::default(),",
          "        kind: LiteralKind::default(),",
          "        c: 'a',",
          "    };",
          "",
          "    seq.push(equivalent_literal);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq.literals().unwrap().len(), 1);",
          "    assert_eq!(seq.literals().unwrap()[0], Literal { span: Span::default(), kind: LiteralKind::default(), c: 'a' });",
          "    assert!(matches!(seq.literals(), Some(ref lits) if lits.len() == 1 && lits[0] == Literal { span: Span::default(), kind: LiteralKind::default(), c: 'a' }));"
        ],
        "code": [
          "{",
          "    let mut seq = Seq {",
          "        literals: Some(vec![Literal {",
          "            span: Span::default(),",
          "            kind: LiteralKind::default(),",
          "            c: 'a',",
          "        }]),",
          "    };",
          "",
          "    let equivalent_literal = Literal {",
          "        span: Span::default(),",
          "        kind: LiteralKind::default(),",
          "        c: 'a',",
          "    };",
          "",
          "    seq.push(equivalent_literal);",
          "    assert_eq!(seq.literals().unwrap().len(), 1);",
          "    assert_eq!(seq.literals().unwrap()[0], Literal { span: Span::default(), kind: LiteralKind::default(), c: 'a' });",
          "    assert!(matches!(seq.literals(), Some(ref lits) if lits.len() == 1 && lits[0] == Literal { span: Span::default(), kind: LiteralKind::default(), c: 'a' }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq = Seq {",
          "        literals: Some(vec![Literal {",
          "            span: Span::default(),",
          "            kind: LiteralKind::default(),",
          "            c: 'b',",
          "        }]),",
          "    };",
          "",
          "    let second_equivalent_literal = Literal {",
          "        span: Span::default(),",
          "        kind: LiteralKind::default(),",
          "        c: 'b',",
          "    };",
          "",
          "    seq.push(second_equivalent_literal);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq.literals().as_ref().map(|l| l.len()), Some(1));",
          "    assert_eq!(seq.literals().as_ref().map(|l| &l[0]), Some(&Literal { span: Span::default(), kind: LiteralKind::default(), c: 'b' }));",
          "    assert!(seq.is_finite());",
          "    assert!(!seq.is_empty());",
          "    assert_eq!(seq.len(), Some(1));"
        ],
        "code": [
          "{",
          "    let mut seq = Seq {",
          "        literals: Some(vec![Literal {",
          "            span: Span::default(),",
          "            kind: LiteralKind::default(),",
          "            c: 'b',",
          "        }]),",
          "    };",
          "",
          "    let second_equivalent_literal = Literal {",
          "        span: Span::default(),",
          "        kind: LiteralKind::default(),",
          "        c: 'b',",
          "    };",
          "",
          "    seq.push(second_equivalent_literal);",
          "    assert_eq!(seq.literals().as_ref().map(|l| l.len()), Some(1));",
          "    assert_eq!(seq.literals().as_ref().map(|l| &l[0]), Some(&Literal { span: Span::default(), kind: LiteralKind::default(), c: 'b' }));",
          "    assert!(seq.is_finite());",
          "    assert!(!seq.is_empty());",
          "    assert_eq!(seq.len(), Some(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq = Seq {",
          "        literals: Some(vec![]),",
          "    };",
          "",
          "    let new_literal = Literal {",
          "        span: Span::default(),",
          "        kind: LiteralKind::default(),",
          "        c: 'c',",
          "    };",
          "",
          "    seq.push(new_literal);",
          "}"
        ],
        "oracle": [
          "    assert!(seq.literals().is_some());",
          "    assert_eq!(seq.literals().unwrap().len(), 1);",
          "    assert_eq!(seq.literals().unwrap()[0].c, 'c');"
        ],
        "code": [
          "{",
          "    let mut seq = Seq {",
          "        literals: Some(vec![]),",
          "    };",
          "",
          "    let new_literal = Literal {",
          "        span: Span::default(),",
          "        kind: LiteralKind::default(),",
          "        c: 'c',",
          "    };",
          "",
          "    seq.push(new_literal);",
          "    assert!(seq.literals().is_some());",
          "    assert_eq!(seq.literals().unwrap().len(), 1);",
          "    assert_eq!(seq.literals().unwrap()[0].c, 'c');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]