[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq = Seq::empty();",
          "    let lit = Literal(Box::new([b'a', b'b', b'c']));",
          "",
          "    seq.push(lit);",
          "}"
        ],
        "oracle": [
          "    assert!(seq.literals().is_none());",
          "    assert_eq!(seq.len(), None);"
        ],
        "code": [
          "{",
          "    let mut seq = Seq::empty();",
          "    let lit = Literal(Box::new([b'a', b'b', b'c']));",
          "",
          "    seq.push(lit);",
          "    assert!(seq.literals().is_none());",
          "    assert_eq!(seq.len(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq = Seq {",
          "        literals: Some(vec![]),",
          "    };",
          "    let lit = Literal(Box::new([b'a', b'b', b'c']));",
          "",
          "    seq.push(lit);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq.literals().unwrap().len(), 1);",
          "    assert_eq!(seq.literals().unwrap()[0], lit);",
          "    assert!(seq.is_finite());",
          "    assert!(!seq.is_empty());"
        ],
        "code": [
          "{",
          "    let mut seq = Seq {",
          "        literals: Some(vec![]),",
          "    };",
          "    let lit = Literal(Box::new([b'a', b'b', b'c']));",
          "",
          "    seq.push(lit);",
          "    assert_eq!(seq.literals().unwrap().len(), 1);",
          "    assert_eq!(seq.literals().unwrap()[0], lit);",
          "    assert!(seq.is_finite());",
          "    assert!(!seq.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq = Seq {",
          "        literals: Some(vec![Literal(Box::new([b'a', b'b', b'c']))]),",
          "    };",
          "    let lit = Literal(Box::new([b'a', b'b', b'c']));",
          "",
          "    seq.push(lit);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq.literals().unwrap().len(), 1);",
          "    assert_eq!(seq.literals().unwrap()[0], Literal(Box::new([b'a', b'b', b'c'])));"
        ],
        "code": [
          "{",
          "    let mut seq = Seq {",
          "        literals: Some(vec![Literal(Box::new([b'a', b'b', b'c']))]),",
          "    };",
          "    let lit = Literal(Box::new([b'a', b'b', b'c']));",
          "",
          "    seq.push(lit);",
          "    assert_eq!(seq.literals().unwrap().len(), 1);",
          "    assert_eq!(seq.literals().unwrap()[0], Literal(Box::new([b'a', b'b', b'c'])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq = Seq {",
          "        literals: Some(vec![Literal(Box::new([b'a', b'b', b'c']))]),",
          "    };",
          "    let lit = Literal(Box::new([b'd', b'e', b'f']));",
          "",
          "    seq.push(lit);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq.literals(), Some(&[Literal(Box::new([b'a', b'b', b'c'])), Literal(Box::new([b'd', b'e', b'f']))]));",
          "    seq.push(lit);",
          "    assert_eq!(seq.literals().unwrap().len(), 2);",
          "    assert_eq!(seq.literals().unwrap()[1], Literal(Box::new([b'd', b'e', b'f'])));",
          "    assert_ne!(seq.literals().unwrap()[0], seq.literals().unwrap()[1]);",
          "    seq.push(Literal(Box::new([b'd', b'e', b'f'])));",
          "    assert_eq!(seq.literals().unwrap().len(), 2);",
          "    assert_eq!(seq.literals().unwrap()[1], Literal(Box::new([b'd', b'e', b'f'])));"
        ],
        "code": [
          "{",
          "    let mut seq = Seq {",
          "        literals: Some(vec![Literal(Box::new([b'a', b'b', b'c']))]),",
          "    };",
          "    let lit = Literal(Box::new([b'd', b'e', b'f']));",
          "",
          "    seq.push(lit);",
          "    assert_eq!(seq.literals(), Some(&[Literal(Box::new([b'a', b'b', b'c'])), Literal(Box::new([b'd', b'e', b'f']))]));",
          "    seq.push(lit);",
          "    assert_eq!(seq.literals().unwrap().len(), 2);",
          "    assert_eq!(seq.literals().unwrap()[1], Literal(Box::new([b'd', b'e', b'f'])));",
          "    assert_ne!(seq.literals().unwrap()[0], seq.literals().unwrap()[1]);",
          "    seq.push(Literal(Box::new([b'd', b'e', b'f'])));",
          "    assert_eq!(seq.literals().unwrap().len(), 2);",
          "    assert_eq!(seq.literals().unwrap()[1], Literal(Box::new([b'd', b'e', b'f'])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]