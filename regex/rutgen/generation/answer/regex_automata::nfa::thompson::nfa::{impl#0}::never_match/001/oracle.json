[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = regex_automata::nfa::thompson::NFA::never_match();",
          "    let re = regex_automata::nfa::pikevm::PikeVM::new_from_nfa(nfa).unwrap();",
          "    let (mut cache, mut caps) = (re.create_cache(), re.create_captures());",
          "    re.captures(&mut cache, b\"\", &mut caps);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(caps.is_match(), false);",
          "    re.captures(&mut cache, b\"foo\", &mut caps);",
          "    assert_eq!(caps.is_match(), false);"
        ],
        "code": [
          "{",
          "    let nfa = regex_automata::nfa::thompson::NFA::never_match();",
          "    let re = regex_automata::nfa::pikevm::PikeVM::new_from_nfa(nfa).unwrap();",
          "    let (mut cache, mut caps) = (re.create_cache(), re.create_captures());",
          "    re.captures(&mut cache, b\"\", &mut caps);",
          "    assert_eq!(caps.is_match(), false);",
          "    re.captures(&mut cache, b\"foo\", &mut caps);",
          "    assert_eq!(caps.is_match(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = regex_automata::nfa::thompson::NFA::never_match();",
          "    let re = regex_automata::nfa::pikevm::PikeVM::new_from_nfa(nfa).unwrap();",
          "    let (mut cache, mut caps) = (re.create_cache(), re.create_captures());",
          "    re.captures(&mut cache, b\"foo\", &mut caps);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(caps.is_match(), false);",
          "    assert_eq!(caps.len(), 0);",
          "    re.captures(&mut cache, b\"\", &mut caps);",
          "    assert_eq!(caps.is_match(), false);",
          "    assert_eq!(caps.len(), 0);"
        ],
        "code": [
          "{",
          "    let nfa = regex_automata::nfa::thompson::NFA::never_match();",
          "    let re = regex_automata::nfa::pikevm::PikeVM::new_from_nfa(nfa).unwrap();",
          "    let (mut cache, mut caps) = (re.create_cache(), re.create_captures());",
          "    re.captures(&mut cache, b\"foo\", &mut caps);",
          "    assert_eq!(caps.is_match(), false);",
          "    assert_eq!(caps.len(), 0);",
          "    re.captures(&mut cache, b\"\", &mut caps);",
          "    assert_eq!(caps.is_match(), false);",
          "    assert_eq!(caps.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]