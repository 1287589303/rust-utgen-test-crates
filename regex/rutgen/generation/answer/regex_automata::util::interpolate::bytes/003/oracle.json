[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = Vec::new();",
          "    let replacement = b\"Hello $name!\";",
          "    let mut append = |index: usize, dst: &mut Vec<u8>| {",
          "        if index == 0 {",
          "            dst.extend_from_slice(b\"Alice\");",
          "        }",
          "    };",
          "    let mut name_to_index = |name: &str| {",
          "        if name == \"name\" {",
          "            Some(0)",
          "        } else {",
          "            None",
          "        }",
          "    };",
          "",
          "    bytes(replacement, append, name_to_index, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(&b\"Hello Alice!\"[..], dst);"
        ],
        "code": [
          "{",
          "    let mut dst = Vec::new();",
          "    let replacement = b\"Hello $name!\";",
          "    let mut append = |index: usize, dst: &mut Vec<u8>| {",
          "        if index == 0 {",
          "            dst.extend_from_slice(b\"Alice\");",
          "        }",
          "    };",
          "    let mut name_to_index = |name: &str| {",
          "        if name == \"name\" {",
          "            Some(0)",
          "        } else {",
          "            None",
          "        }",
          "    };",
          "",
          "    bytes(replacement, append, name_to_index, &mut dst);",
          "    assert_eq!(&b\"Hello Alice!\"[..], dst);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = Vec::new();",
          "    let replacement = b\"$user is logged in as $role.\";",
          "    let mut append = |index: usize, dst: &mut Vec<u8>| {",
          "        match index {",
          "            0 => dst.extend_from_slice(b\"john_doe\"),",
          "            1 => dst.extend_from_slice(b\"admin\"),",
          "            _ => {}",
          "        }",
          "    };",
          "    let mut name_to_index = |name: &str| {",
          "        match name {",
          "            \"user\" => Some(0),",
          "            \"role\" => Some(1),",
          "            _ => None,",
          "        }",
          "    };",
          "",
          "    bytes(replacement, append, name_to_index, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(&b\"john_doe is logged in as admin.\"[..], dst);"
        ],
        "code": [
          "{",
          "    let mut dst = Vec::new();",
          "    let replacement = b\"$user is logged in as $role.\";",
          "    let mut append = |index: usize, dst: &mut Vec<u8>| {",
          "        match index {",
          "            0 => dst.extend_from_slice(b\"john_doe\"),",
          "            1 => dst.extend_from_slice(b\"admin\"),",
          "            _ => {}",
          "        }",
          "    };",
          "    let mut name_to_index = |name: &str| {",
          "        match name {",
          "            \"user\" => Some(0),",
          "            \"role\" => Some(1),",
          "            _ => None,",
          "        }",
          "    };",
          "",
          "    bytes(replacement, append, name_to_index, &mut dst);",
          "    assert_eq!(&b\"john_doe is logged in as admin.\"[..], dst);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = Vec::new();",
          "    let replacement = b\"No captures here!\";",
          "    let append = |_: usize, _: &mut Vec<u8>| {};",
          "    let name_to_index = |_name: &str| None;",
          "",
          "    bytes(replacement, append, name_to_index, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert!(dst.is_empty());",
          "    assert_eq!(dst, b\"No captures here!\");"
        ],
        "code": [
          "{",
          "    let mut dst = Vec::new();",
          "    let replacement = b\"No captures here!\";",
          "    let append = |_: usize, _: &mut Vec<u8>| {};",
          "    let name_to_index = |_name: &str| None;",
          "",
          "    bytes(replacement, append, name_to_index, &mut dst);",
          "    assert!(dst.is_empty());",
          "    assert_eq!(dst, b\"No captures here!\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = Vec::new();",
          "    let replacement = b\"Value: ${value}\";",
          "    let mut append = |index: usize, dst: &mut Vec<u8>| {",
          "        if index == 0 {",
          "            dst.extend_from_slice(b\"42\");",
          "        }",
          "    };",
          "    let mut name_to_index = |name: &str| {",
          "        if name == \"value\" {",
          "            Some(0)",
          "        } else {",
          "            None",
          "        }",
          "    };",
          "",
          "    bytes(replacement, append, name_to_index, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert!(dst.is_empty() == false);",
          "    assert_eq!(dst, b\"Value: 42\");",
          "    assert!(dst.len() == 12);"
        ],
        "code": [
          "{",
          "    let mut dst = Vec::new();",
          "    let replacement = b\"Value: ${value}\";",
          "    let mut append = |index: usize, dst: &mut Vec<u8>| {",
          "        if index == 0 {",
          "            dst.extend_from_slice(b\"42\");",
          "        }",
          "    };",
          "    let mut name_to_index = |name: &str| {",
          "        if name == \"value\" {",
          "            Some(0)",
          "        } else {",
          "            None",
          "        }",
          "    };",
          "",
          "    bytes(replacement, append, name_to_index, &mut dst);",
          "    assert!(dst.is_empty() == false);",
          "    assert_eq!(dst, b\"Value: 42\");",
          "    assert!(dst.len() == 12);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]