[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = vec![];",
          "    let replacement: &[u8] = b\"foo bar baz\";",
          "",
          "    let append = |index: usize, dst: &mut Vec<u8>| {",
          "        if index == 0 {",
          "            dst.extend_from_slice(b\"BAR\");",
          "        }",
          "    };",
          "",
          "    let name_to_index = |name: &str| {",
          "        if name == \"bar\" {",
          "            Some(0)",
          "        } else {",
          "            None",
          "        }",
          "    };",
          "",
          "    bytes(replacement, append, name_to_index, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(&b\"foo bar baz\"[..], dst);",
          "    assert_eq!(dst.len(), 11);",
          "    assert_eq!(dst[0..3], b\"foo\");",
          "    assert_eq!(dst[3..7], b\" bar\");",
          "    assert_eq!(dst[7..11], b\" baz\");"
        ],
        "code": [
          "{",
          "    let mut dst = vec![];",
          "    let replacement: &[u8] = b\"foo bar baz\";",
          "",
          "    let append = |index: usize, dst: &mut Vec<u8>| {",
          "        if index == 0 {",
          "            dst.extend_from_slice(b\"BAR\");",
          "        }",
          "    };",
          "",
          "    let name_to_index = |name: &str| {",
          "        if name == \"bar\" {",
          "            Some(0)",
          "        } else {",
          "            None",
          "        }",
          "    };",
          "",
          "    bytes(replacement, append, name_to_index, &mut dst);",
          "    assert_eq!(&b\"foo bar baz\"[..], dst);",
          "    assert_eq!(dst.len(), 11);",
          "    assert_eq!(dst[0..3], b\"foo\");",
          "    assert_eq!(dst[3..7], b\" bar\");",
          "    assert_eq!(dst[7..11], b\" baz\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = vec![];",
          "    let replacement: &[u8] = b\"foo $$ bar baz\";",
          "",
          "    let append = |index: usize, dst: &mut Vec<u8>| {",
          "        if index == 0 {",
          "            dst.extend_from_slice(b\"BAR\");",
          "        }",
          "    };",
          "",
          "    let name_to_index = |name: &str| {",
          "        if name == \"bar\" {",
          "            Some(0)",
          "        } else {",
          "            None",
          "        }",
          "    };",
          "",
          "    bytes(replacement, append, name_to_index, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(&b\"foo $ bar baz\"[..], dst);"
        ],
        "code": [
          "{",
          "    let mut dst = vec![];",
          "    let replacement: &[u8] = b\"foo $$ bar baz\";",
          "",
          "    let append = |index: usize, dst: &mut Vec<u8>| {",
          "        if index == 0 {",
          "            dst.extend_from_slice(b\"BAR\");",
          "        }",
          "    };",
          "",
          "    let name_to_index = |name: &str| {",
          "        if name == \"bar\" {",
          "            Some(0)",
          "        } else {",
          "            None",
          "        }",
          "    };",
          "",
          "    bytes(replacement, append, name_to_index, &mut dst);",
          "    assert_eq!(&b\"foo $ bar baz\"[..], dst);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = vec![];",
          "    let replacement: &[u8] = b\"abc def ghi\";",
          "",
          "    let append = |index: usize, dst: &mut Vec<u8>| {",
          "        // No captures to append in this test",
          "    };",
          "",
          "    let name_to_index = |name: &str| {",
          "        // No names to map in this test",
          "        None",
          "    };",
          "",
          "    bytes(replacement, append, name_to_index, &mut dst);",
          "}"
        ],
        "oracle": [
          "    dst.extend_from_slice(&replacement);",
          "    assert_eq!(dst, b\"abc def ghi\");"
        ],
        "code": [
          "{",
          "    let mut dst = vec![];",
          "    let replacement: &[u8] = b\"abc def ghi\";",
          "",
          "    let append = |index: usize, dst: &mut Vec<u8>| {",
          "        // No captures to append in this test",
          "    };",
          "",
          "    let name_to_index = |name: &str| {",
          "        // No names to map in this test",
          "        None",
          "    };",
          "",
          "    bytes(replacement, append, name_to_index, &mut dst);",
          "    dst.extend_from_slice(&replacement);",
          "    assert_eq!(dst, b\"abc def ghi\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = vec![];",
          "    let replacement: &[u8] = b\"hello world\";",
          "",
          "    let append = |index: usize, dst: &mut Vec<u8>| {",
          "        if index == 1 {",
          "            dst.extend_from_slice(b\"WORLD\");",
          "        }",
          "    };",
          "",
          "    let name_to_index = |name: &str| {",
          "        if name == \"world\" {",
          "            Some(1)",
          "        } else {",
          "            None",
          "        }",
          "    };",
          "",
          "    bytes(replacement, append, name_to_index, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, b\"hello world\");",
          "    assert_eq!(dst.len(), 11);",
          "    dst.clear();",
          "    let replacement: &[u8] = b\"goodbye $world\";",
          "    bytes(replacement, append, name_to_index, &mut dst);",
          "    assert_eq!(dst, b\"goodbye WORLD\");",
          "    assert_eq!(dst.len(), 14);",
          "    dst.clear();",
          "    let replacement: &[u8] = b\"no captures here\";",
          "    bytes(replacement, append, name_to_index, &mut dst);",
          "    assert_eq!(dst, b\"no captures here\");",
          "    assert_eq!(dst.len(), 20);"
        ],
        "code": [
          "{",
          "    let mut dst = vec![];",
          "    let replacement: &[u8] = b\"hello world\";",
          "",
          "    let append = |index: usize, dst: &mut Vec<u8>| {",
          "        if index == 1 {",
          "            dst.extend_from_slice(b\"WORLD\");",
          "        }",
          "    };",
          "",
          "    let name_to_index = |name: &str| {",
          "        if name == \"world\" {",
          "            Some(1)",
          "        } else {",
          "            None",
          "        }",
          "    };",
          "",
          "    bytes(replacement, append, name_to_index, &mut dst);",
          "    assert_eq!(dst, b\"hello world\");",
          "    assert_eq!(dst.len(), 11);",
          "    dst.clear();",
          "    let replacement: &[u8] = b\"goodbye $world\";",
          "    bytes(replacement, append, name_to_index, &mut dst);",
          "    assert_eq!(dst, b\"goodbye WORLD\");",
          "    assert_eq!(dst.len(), 14);",
          "    dst.clear();",
          "    let replacement: &[u8] = b\"no captures here\";",
          "    bytes(replacement, append, name_to_index, &mut dst);",
          "    assert_eq!(dst, b\"no captures here\");",
          "    assert_eq!(dst.len(), 20);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]