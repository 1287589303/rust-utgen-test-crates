[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Look::Start;",
          "    let result = value.as_repr();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 1);",
          "    assert_eq!(Look::reversed(Look::Start).as_repr(), 0);",
          "    assert_eq!(Look::End.as_repr(), 2);",
          "    assert_eq!(Look::StartLF.as_repr(), 4);",
          "    assert_eq!(Look::EndLF.as_repr(), 8);",
          "    assert_eq!(Look::WordAscii.as_repr(), 64);",
          "    assert_eq!(Look::WordAsciiNegate.as_repr(), 128);",
          "    assert_eq!(Look::WordUnicode.as_repr(), 256);",
          "    assert_eq!(Look::WordUnicodeNegate.as_repr(), 512);",
          "    assert_eq!(Look::WordStartAscii.as_repr(), 1024);",
          "    assert_eq!(Look::WordEndAscii.as_repr(), 2048);",
          "    assert_eq!(Look::WordStartUnicode.as_repr(), 4096);",
          "    assert_eq!(Look::WordEndUnicode.as_repr(), 8192);",
          "    assert_eq!(Look::WordStartHalfAscii.as_repr(), 16384);",
          "    assert_eq!(Look::WordEndHalfAscii.as_repr(), 32768);",
          "    assert_eq!(Look::WordStartHalfUnicode.as_repr(), 65536);",
          "    assert_eq!(Look::WordEndHalfUnicode.as_repr(), 131072);"
        ],
        "code": [
          "{",
          "    let value = Look::Start;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, 1);",
          "    assert_eq!(Look::reversed(Look::Start).as_repr(), 0);",
          "    assert_eq!(Look::End.as_repr(), 2);",
          "    assert_eq!(Look::StartLF.as_repr(), 4);",
          "    assert_eq!(Look::EndLF.as_repr(), 8);",
          "    assert_eq!(Look::WordAscii.as_repr(), 64);",
          "    assert_eq!(Look::WordAsciiNegate.as_repr(), 128);",
          "    assert_eq!(Look::WordUnicode.as_repr(), 256);",
          "    assert_eq!(Look::WordUnicodeNegate.as_repr(), 512);",
          "    assert_eq!(Look::WordStartAscii.as_repr(), 1024);",
          "    assert_eq!(Look::WordEndAscii.as_repr(), 2048);",
          "    assert_eq!(Look::WordStartUnicode.as_repr(), 4096);",
          "    assert_eq!(Look::WordEndUnicode.as_repr(), 8192);",
          "    assert_eq!(Look::WordStartHalfAscii.as_repr(), 16384);",
          "    assert_eq!(Look::WordEndHalfAscii.as_repr(), 32768);",
          "    assert_eq!(Look::WordStartHalfUnicode.as_repr(), 65536);",
          "    assert_eq!(Look::WordEndHalfUnicode.as_repr(), 131072);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Look::End;",
          "    let result = value.as_repr();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 2);",
          "    assert_eq!(result as u32, Look::End.as_repr());",
          "    assert!(result == Look::End.as_repr());",
          "    assert_eq!(Look::Start.as_repr(), 1);",
          "    assert_eq!(Look::StartLF.as_repr(), 4);",
          "    assert_eq!(Look::WordAscii.as_repr(), 64);",
          "    assert_eq!(Look::WordEndHalfUnicode.as_repr(), 131072);",
          "    assert_eq!(Look::EndCRLF.as_repr(), 32);"
        ],
        "code": [
          "{",
          "    let value = Look::End;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, 2);",
          "    assert_eq!(result as u32, Look::End.as_repr());",
          "    assert!(result == Look::End.as_repr());",
          "    assert_eq!(Look::Start.as_repr(), 1);",
          "    assert_eq!(Look::StartLF.as_repr(), 4);",
          "    assert_eq!(Look::WordAscii.as_repr(), 64);",
          "    assert_eq!(Look::WordEndHalfUnicode.as_repr(), 131072);",
          "    assert_eq!(Look::EndCRLF.as_repr(), 32);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Look::StartLF;",
          "    let result = value.as_repr();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 4);",
          "    let value = Look::End;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, 2);",
          "    let value = Look::WordAscii;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, 64);",
          "    let value = Look::WordEndUnicode;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, 8192);",
          "    let value = Look::EndLF;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, 8);",
          "    let value = Look::Start;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, 1);",
          "    let value = Look::WordStartHalfAscii;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, 16384);",
          "    let value = Look::WordEndHalfUnicode;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, 131072);",
          "    let value = Look::StartCRLF;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, 16);",
          "    let value = Look::WordStartUnicode;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, 4096);"
        ],
        "code": [
          "{",
          "    let value = Look::StartLF;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, 4);",
          "    let value = Look::End;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, 2);",
          "    let value = Look::WordAscii;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, 64);",
          "    let value = Look::WordEndUnicode;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, 8192);",
          "    let value = Look::EndLF;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, 8);",
          "    let value = Look::Start;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, 1);",
          "    let value = Look::WordStartHalfAscii;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, 16384);",
          "    let value = Look::WordEndHalfUnicode;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, 131072);",
          "    let value = Look::StartCRLF;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, 16);",
          "    let value = Look::WordStartUnicode;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, 4096);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Look::EndLF;",
          "    let result = value.as_repr();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Look::EndLF as u32);"
        ],
        "code": [
          "{",
          "    let value = Look::EndLF;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, Look::EndLF as u32);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Look::StartCRLF;",
          "    let result = value.as_repr();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 16);",
          "    assert_eq!(value.as_repr() as usize, Look::StartCRLF as usize);",
          "    assert_eq!(Look::from_repr(result), Some(Look::StartCRLF));",
          "    assert_eq!(value.as_repr().count_ones(), 1);",
          "    assert_eq!(result, Look::EndCRLF.reversed().as_repr());"
        ],
        "code": [
          "{",
          "    let value = Look::StartCRLF;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, 16);",
          "    assert_eq!(value.as_repr() as usize, Look::StartCRLF as usize);",
          "    assert_eq!(Look::from_repr(result), Some(Look::StartCRLF));",
          "    assert_eq!(value.as_repr().count_ones(), 1);",
          "    assert_eq!(result, Look::EndCRLF.reversed().as_repr());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Look::EndCRLF;",
          "    let result = value.as_repr();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 32);"
        ],
        "code": [
          "{",
          "    let value = Look::EndCRLF;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, 32);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Look::WordAscii;",
          "    let result = value.as_repr();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 64);"
        ],
        "code": [
          "{",
          "    let value = Look::WordAscii;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, 64);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Look::WordAsciiNegate;",
          "    let result = value.as_repr();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Look::WordAsciiNegate.as_repr());"
        ],
        "code": [
          "{",
          "    let value = Look::WordAsciiNegate;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, Look::WordAsciiNegate.as_repr());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Look::WordUnicode;",
          "    let result = value.as_repr();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Look::WordUnicode.as_repr());"
        ],
        "code": [
          "{",
          "    let value = Look::WordUnicode;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, Look::WordUnicode.as_repr());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Look::WordUnicodeNegate;",
          "    let result = value.as_repr();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Look::WordUnicodeNegate.as_repr());"
        ],
        "code": [
          "{",
          "    let value = Look::WordUnicodeNegate;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, Look::WordUnicodeNegate.as_repr());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Look::WordStartAscii;",
          "    let result = value.as_repr();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 1024);"
        ],
        "code": [
          "{",
          "    let value = Look::WordStartAscii;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, 1024);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Look::WordEndAscii;",
          "    let result = value.as_repr();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0b000000000000100000);"
        ],
        "code": [
          "{",
          "    let value = Look::WordEndAscii;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, 0b000000000000100000);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Look::WordStartUnicode;",
          "    let result = value.as_repr();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 1 << 12);",
          "    assert_eq!(std::mem::size_of_val(&result), std::mem::size_of::<u32>());",
          "    assert_eq!(result, Look::from_repr(result).unwrap().as_repr());"
        ],
        "code": [
          "{",
          "    let value = Look::WordStartUnicode;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, 1 << 12);",
          "    assert_eq!(std::mem::size_of_val(&result), std::mem::size_of::<u32>());",
          "    assert_eq!(result, Look::from_repr(result).unwrap().as_repr());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Look::WordEndUnicode;",
          "    let result = value.as_repr();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 1 << 13);"
        ],
        "code": [
          "{",
          "    let value = Look::WordEndUnicode;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, 1 << 13);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Look::WordStartHalfAscii;",
          "    let result = value.as_repr();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Look::WordStartHalfAscii.as_repr());",
          "    assert_eq!(result, 1 << 14);",
          "    assert_eq!(result, 32768);",
          "    assert_eq!(result, Look::Start.as_repr() + Look::End.as_repr());",
          "    assert_ne!(result, Look::WordStartAscii.as_repr());",
          "    assert_ne!(result, Look::WordEndHalfAscii.as_repr());",
          "    assert!(result.is_power_of_two());",
          "    assert!(result > 0);"
        ],
        "code": [
          "{",
          "    let value = Look::WordStartHalfAscii;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, Look::WordStartHalfAscii.as_repr());",
          "    assert_eq!(result, 1 << 14);",
          "    assert_eq!(result, 32768);",
          "    assert_eq!(result, Look::Start.as_repr() + Look::End.as_repr());",
          "    assert_ne!(result, Look::WordStartAscii.as_repr());",
          "    assert_ne!(result, Look::WordEndHalfAscii.as_repr());",
          "    assert!(result.is_power_of_two());",
          "    assert!(result > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Look::WordEndHalfAscii;",
          "    let result = value.as_repr();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 32768);"
        ],
        "code": [
          "{",
          "    let value = Look::WordEndHalfAscii;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, 32768);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Look::WordStartHalfUnicode;",
          "    let result = value.as_repr();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Look::WordStartHalfUnicode as u32);"
        ],
        "code": [
          "{",
          "    let value = Look::WordStartHalfUnicode;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, Look::WordStartHalfUnicode as u32);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Look::WordEndHalfUnicode;",
          "    let result = value.as_repr();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 1 << 17);"
        ],
        "code": [
          "{",
          "    let value = Look::WordEndHalfUnicode;",
          "    let result = value.as_repr();",
          "    assert_eq!(result, 1 << 17);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]