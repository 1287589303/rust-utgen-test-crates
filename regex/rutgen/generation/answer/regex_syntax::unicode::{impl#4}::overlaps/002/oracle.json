[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let table: &[(char, &'static [char])] = &[];",
          "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
          "    let start = '\\u{FF00}';",
          "    let end = '\\u{00FF}';",
          "    case_folder.overlaps(start, end);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(true, std::panic::catch_unwind(|| {",
          "    let table: &[(char, &'static [char])] = &[];",
          "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
          "    let start = '\\u{FF00}';",
          "    let end = '\\u{00FF}';",
          "    case_folder.overlaps(start, end);",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    let table: &[(char, &'static [char])] = &[];",
          "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
          "    let start = '\\u{FF00}';",
          "    let end = '\\u{00FF}';",
          "    case_folder.overlaps(start, end);",
          "    assert_eq!(true, std::panic::catch_unwind(|| {",
          "    let table: &[(char, &'static [char])] = &[];",
          "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
          "    let start = '\\u{FF00}';",
          "    let end = '\\u{00FF}';",
          "    case_folder.overlaps(start, end);",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let table: &[(char, &'static [char])] = &[];",
          "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
          "    let start = '\\u{007F}';",
          "    let end = '\\u{0000}';",
          "    case_folder.overlaps(start, end);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(case_folder.overlaps('\\u{007F}', '\\u{0000}'), true);",
          "    assert_eq!(case_folder.overlaps('\\u{0041}', '\\u{0030}'), true);",
          "    assert_eq!(case_folder.overlaps('\\u{0030}', '\\u{0035}'), true);",
          "    assert_eq!(case_folder.overlaps('\\u{0001}', '\\u{0000}'), true);"
        ],
        "code": [
          "{",
          "    let table: &[(char, &'static [char])] = &[];",
          "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
          "    let start = '\\u{007F}';",
          "    let end = '\\u{0000}';",
          "    case_folder.overlaps(start, end);",
          "    assert_eq!(case_folder.overlaps('\\u{007F}', '\\u{0000}'), true);",
          "    assert_eq!(case_folder.overlaps('\\u{0041}', '\\u{0030}'), true);",
          "    assert_eq!(case_folder.overlaps('\\u{0030}', '\\u{0035}'), true);",
          "    assert_eq!(case_folder.overlaps('\\u{0001}', '\\u{0000}'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let table: &[(char, &'static [char])] = &[];",
          "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
          "    let start = '\\u{1234}';",
          "    let end = '\\u{1233}';",
          "    case_folder.overlaps(start, end);",
          "}"
        ],
        "oracle": [
          "    assert!(case_folder.overlaps(start, end).is_panic());"
        ],
        "code": [
          "{",
          "    let table: &[(char, &'static [char])] = &[];",
          "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
          "    let start = '\\u{1234}';",
          "    let end = '\\u{1233}';",
          "    case_folder.overlaps(start, end);",
          "    assert!(case_folder.overlaps(start, end).is_panic());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let table: &[(char, &'static [char])] = &[];",
          "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
          "    let start = '\\u{2E00}';",
          "    let end = '\\u{2DFF}';",
          "    case_folder.overlaps(start, end);",
          "}"
        ],
        "oracle": [
          "    assert!(core::panic::catch_unwind(|| {",
          "    let table: &[(char, &'static [char])] = &[];",
          "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
          "    let start = '\\u{2E00}';",
          "    let end = '\\u{2DFF}';",
          "    case_folder.overlaps(start, end);",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    let table: &[(char, &'static [char])] = &[];",
          "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
          "    let start = '\\u{2E00}';",
          "    let end = '\\u{2DFF}';",
          "    case_folder.overlaps(start, end);",
          "    assert!(core::panic::catch_unwind(|| {",
          "    let table: &[(char, &'static [char])] = &[];",
          "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
          "    let start = '\\u{2E00}';",
          "    let end = '\\u{2DFF}';",
          "    case_folder.overlaps(start, end);",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let table: &[(char, &'static [char])] = &[];",
          "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
          "    let start = '\\u{FFFF}';",
          "    let end = '\\u{FFFE}';",
          "    case_folder.overlaps(start, end);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(case_folder.overlaps('\\u{FFFF}', '\\u{FFFE}'), true);",
          "    assert_eq!(case_folder.overlaps('a', 'A'), false);",
          "    assert_eq!(case_folder.overlaps('A', 'a'), false);",
          "    assert_eq!(case_folder.overlaps('\\u{0041}', '\\u{007A}'), false);",
          "    assert_eq!(case_folder.overlaps('\\u{0061}', '\\u{007A}'), false);",
          "    assert_eq!(case_folder.overlaps('\\u{0000}', '\\u{0000}'), false);",
          "    assert_eq!(case_folder.overlaps('\\u{007A}', '\\u{007A}'), false);",
          "    assert_eq!(case_folder.overlaps('\\u{0020}', '\\u{0020}'), false);",
          "    assert_eq!(case_folder.overlaps('\\u{0100}', '\\u{03FF}'), false);",
          "    assert_eq!(case_folder.overlaps('\\u{300}', '\\u{400}'), false);"
        ],
        "code": [
          "{",
          "    let table: &[(char, &'static [char])] = &[];",
          "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
          "    let start = '\\u{FFFF}';",
          "    let end = '\\u{FFFE}';",
          "    case_folder.overlaps(start, end);",
          "    assert_eq!(case_folder.overlaps('\\u{FFFF}', '\\u{FFFE}'), true);",
          "    assert_eq!(case_folder.overlaps('a', 'A'), false);",
          "    assert_eq!(case_folder.overlaps('A', 'a'), false);",
          "    assert_eq!(case_folder.overlaps('\\u{0041}', '\\u{007A}'), false);",
          "    assert_eq!(case_folder.overlaps('\\u{0061}', '\\u{007A}'), false);",
          "    assert_eq!(case_folder.overlaps('\\u{0000}', '\\u{0000}'), false);",
          "    assert_eq!(case_folder.overlaps('\\u{007A}', '\\u{007A}'), false);",
          "    assert_eq!(case_folder.overlaps('\\u{0020}', '\\u{0020}'), false);",
          "    assert_eq!(case_folder.overlaps('\\u{0100}', '\\u{03FF}'), false);",
          "    assert_eq!(case_folder.overlaps('\\u{300}', '\\u{400}'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]