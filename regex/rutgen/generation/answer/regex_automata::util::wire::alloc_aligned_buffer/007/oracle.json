[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(0);",
          "    let align = core::mem::align_of::<StateID>();",
          "    assert!(buf.len() == 0);",
          "    assert!(padding == 0);",
          "    assert!(buf.as_ptr().as_usize() % align == 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(alloc_aligned_buffer::<StateID>(0), (Vec::new(), 0));",
          "    assert!(buf.len() == 0);",
          "    assert!(padding == 0);",
          "    assert!(buf.as_ptr().as_usize() % core::mem::align_of::<StateID>() == 0);"
        ],
        "code": [
          "{",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(0);",
          "    let align = core::mem::align_of::<StateID>();",
          "    assert!(buf.len() == 0);",
          "    assert!(padding == 0);",
          "    assert!(buf.as_ptr().as_usize() % align == 0);",
          "    assert_eq!(alloc_aligned_buffer::<StateID>(0), (Vec::new(), 0));",
          "    assert!(buf.len() == 0);",
          "    assert!(padding == 0);",
          "    assert!(buf.as_ptr().as_usize() % core::mem::align_of::<StateID>() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let size = 8;",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(size);",
          "    let align = core::mem::align_of::<StateID>();",
          "    assert!(buf.len() == size + 1); // padding must push size to 9",
          "    assert!(padding > 7);",
          "    assert!(buf.as_ptr().as_usize() % align == 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), size + 1);",
          "    assert!(padding > 7);",
          "    assert_eq!(buf.as_ptr().as_usize() % align, 0);"
        ],
        "code": [
          "{",
          "    let size = 8;",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(size);",
          "    let align = core::mem::align_of::<StateID>();",
          "    assert!(buf.len() == size + 1); // padding must push size to 9",
          "    assert!(padding > 7);",
          "    assert!(buf.as_ptr().as_usize() % align == 0);",
          "    assert_eq!(buf.len(), size + 1);",
          "    assert!(padding > 7);",
          "    assert_eq!(buf.as_ptr().as_usize() % align, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let size = 1;",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(size);",
          "    let align = core::mem::align_of::<StateID>();",
          "    assert!(buf.len() == size + 8); // padding must push size to 9",
          "    assert!(padding > 7);",
          "    assert!(buf.as_ptr().as_usize() % align == 0);",
          "}"
        ],
        "oracle": [
          "    let size = 1;",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(size);",
          "    assert!(buf.len() == size + 8);",
          "    assert!(padding > 7);",
          "    assert!(buf.as_ptr().as_usize() % align == 0);"
        ],
        "code": [
          "{",
          "    let size = 1;",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(size);",
          "    let align = core::mem::align_of::<StateID>();",
          "    assert!(buf.len() == size + 8); // padding must push size to 9",
          "    assert!(padding > 7);",
          "    assert!(buf.as_ptr().as_usize() % align == 0);",
          "    let size = 1;",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(size);",
          "    assert!(buf.len() == size + 8);",
          "    assert!(padding > 7);",
          "    assert!(buf.as_ptr().as_usize() % align == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]