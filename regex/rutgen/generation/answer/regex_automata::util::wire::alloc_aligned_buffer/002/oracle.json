[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(0);",
          "    let align = core::mem::align_of::<StateID>();",
          "    let address = buf.as_ptr().as_usize();",
          "    assert!(address % align == 0);",
          "    assert_eq!(padding, 0);",
          "}"
        ],
        "oracle": [
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(0);",
          "    let address = buf.as_ptr().as_usize();",
          "    assert!(address % align == 0);",
          "    assert_eq!(padding, 0);",
          "    ",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(SIZE);",
          "    assert_eq!(SIZE, buf[padding..].len());",
          "    ",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(1);",
          "    assert!(buf.len() >= 1);",
          "    assert_eq!(padding, 0);",
          "    ",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(8);",
          "    assert!(buf.len() >= 8);",
          "    assert_eq!(padding, 0);",
          "    ",
          "    let align = core::mem::align_of::<StateID>();",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(SIZE);",
          "    let address = buf.as_ptr().as_usize();",
          "    if address % align != 0 {",
          "    assert!(padding > 0);",
          "    }"
        ],
        "code": [
          "{",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(0);",
          "    let align = core::mem::align_of::<StateID>();",
          "    let address = buf.as_ptr().as_usize();",
          "    assert!(address % align == 0);",
          "    assert_eq!(padding, 0);",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(0);",
          "    let address = buf.as_ptr().as_usize();",
          "    assert!(address % align == 0);",
          "    assert_eq!(padding, 0);",
          "    ",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(SIZE);",
          "    assert_eq!(SIZE, buf[padding..].len());",
          "    ",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(1);",
          "    assert!(buf.len() >= 1);",
          "    assert_eq!(padding, 0);",
          "    ",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(8);",
          "    assert!(buf.len() >= 8);",
          "    assert_eq!(padding, 0);",
          "    ",
          "    let align = core::mem::align_of::<StateID>();",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(SIZE);",
          "    let address = buf.as_ptr().as_usize();",
          "    if address % align != 0 {",
          "    assert!(padding > 0);",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(1);",
          "    let align = core::mem::align_of::<StateID>();",
          "    let address = buf.as_ptr().as_usize();",
          "    assert!(address % align == 0);",
          "    assert_eq!(padding, 0);",
          "}"
        ],
        "oracle": [
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(1);",
          "    let align = core::mem::align_of::<StateID>();",
          "    let address = buf.as_ptr().as_usize();",
          "    assert!(address % align == 0);",
          "    assert_eq!(padding, 0);"
        ],
        "code": [
          "{",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(1);",
          "    let align = core::mem::align_of::<StateID>();",
          "    let address = buf.as_ptr().as_usize();",
          "    assert!(address % align == 0);",
          "    assert_eq!(padding, 0);",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(1);",
          "    let align = core::mem::align_of::<StateID>();",
          "    let address = buf.as_ptr().as_usize();",
          "    assert!(address % align == 0);",
          "    assert_eq!(padding, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(2);",
          "    let align = core::mem::align_of::<StateID>();",
          "    let address = buf.as_ptr().as_usize();",
          "    assert!(address % align == 0);",
          "    assert_eq!(padding, 0);",
          "}"
        ],
        "oracle": [
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(2);",
          "    let align = core::mem::align_of::<StateID>();",
          "    let address = buf.as_ptr().as_usize();",
          "    assert!(address % align == 0);",
          "    assert_eq!(padding, 0);",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(3);",
          "    let align = core::mem::align_of::<StateID>();",
          "    let address = buf.as_ptr().as_usize();",
          "    assert!(address % align != 0);",
          "    assert!(padding > 0);",
          "    assert_eq!(buf.len(), 3 + padding);",
          "    assert_eq!(0, buf[padding..].as_ptr().as_usize() % align);"
        ],
        "code": [
          "{",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(2);",
          "    let align = core::mem::align_of::<StateID>();",
          "    let address = buf.as_ptr().as_usize();",
          "    assert!(address % align == 0);",
          "    assert_eq!(padding, 0);",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(2);",
          "    let align = core::mem::align_of::<StateID>();",
          "    let address = buf.as_ptr().as_usize();",
          "    assert!(address % align == 0);",
          "    assert_eq!(padding, 0);",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(3);",
          "    let align = core::mem::align_of::<StateID>();",
          "    let address = buf.as_ptr().as_usize();",
          "    assert!(address % align != 0);",
          "    assert!(padding > 0);",
          "    assert_eq!(buf.len(), 3 + padding);",
          "    assert_eq!(0, buf[padding..].as_ptr().as_usize() % align);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(3);",
          "    let align = core::mem::align_of::<StateID>();",
          "    let address = buf.as_ptr().as_usize();",
          "    assert!(address % align == 0);",
          "    assert_eq!(padding, 0);",
          "}"
        ],
        "oracle": [
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(3);",
          "    let align = core::mem::align_of::<StateID>();",
          "    let address = buf.as_ptr().as_usize();",
          "    assert!(address % align == 0);",
          "    assert_eq!(padding, 0);",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(9);",
          "    let align = core::mem::align_of::<StateID>();",
          "    let address = buf.as_ptr().as_usize();",
          "    assert!(address % align != 0);",
          "    assert!(padding <= 7);",
          "    assert_eq!(buf.len(), 9 + padding);",
          "    assert_eq!(buf[padding..].as_ptr().as_usize() % align, 0);"
        ],
        "code": [
          "{",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(3);",
          "    let align = core::mem::align_of::<StateID>();",
          "    let address = buf.as_ptr().as_usize();",
          "    assert!(address % align == 0);",
          "    assert_eq!(padding, 0);",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(3);",
          "    let align = core::mem::align_of::<StateID>();",
          "    let address = buf.as_ptr().as_usize();",
          "    assert!(address % align == 0);",
          "    assert_eq!(padding, 0);",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(9);",
          "    let align = core::mem::align_of::<StateID>();",
          "    let address = buf.as_ptr().as_usize();",
          "    assert!(address % align != 0);",
          "    assert!(padding <= 7);",
          "    assert_eq!(buf.len(), 9 + padding);",
          "    assert_eq!(buf[padding..].as_ptr().as_usize() % align, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(4);",
          "    let align = core::mem::align_of::<StateID>();",
          "    let address = buf.as_ptr().as_usize();",
          "    assert!(address % align == 0);",
          "    assert_eq!(padding, 0);",
          "}"
        ],
        "oracle": [
          "    assert!(address % align == 0);",
          "    assert_eq!(padding, 0);",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(4);",
          "    let align = core::mem::align_of::<StateID>();",
          "    let address = buf.as_ptr().as_usize();",
          "    assert!(address % align != 0);",
          "    assert!(padding > 0);",
          "    assert!(padding <= 7);",
          "    assert_eq!(size + padding, buf.len());",
          "    assert_eq!(0, buf[padding..].as_ptr().as_usize() % align);"
        ],
        "code": [
          "{",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(4);",
          "    let align = core::mem::align_of::<StateID>();",
          "    let address = buf.as_ptr().as_usize();",
          "    assert!(address % align == 0);",
          "    assert_eq!(padding, 0);",
          "    assert!(address % align == 0);",
          "    assert_eq!(padding, 0);",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(4);",
          "    let align = core::mem::align_of::<StateID>();",
          "    let address = buf.as_ptr().as_usize();",
          "    assert!(address % align != 0);",
          "    assert!(padding > 0);",
          "    assert!(padding <= 7);",
          "    assert_eq!(size + padding, buf.len());",
          "    assert_eq!(0, buf[padding..].as_ptr().as_usize() % align);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(5);",
          "    let align = core::mem::align_of::<StateID>();",
          "    let address = buf.as_ptr().as_usize();",
          "    assert!(address % align == 0);",
          "    assert!(padding > 0);",
          "}"
        ],
        "oracle": [
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(5);",
          "    let align = core::mem::align_of::<StateID>();",
          "    let address = buf.as_ptr().as_usize();",
          "    assert_eq!(padding, 0);",
          "    assert_eq!(buf.len(), 5);",
          "    assert!(address % align == 0);"
        ],
        "code": [
          "{",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(5);",
          "    let align = core::mem::align_of::<StateID>();",
          "    let address = buf.as_ptr().as_usize();",
          "    assert!(address % align == 0);",
          "    assert!(padding > 0);",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(5);",
          "    let align = core::mem::align_of::<StateID>();",
          "    let address = buf.as_ptr().as_usize();",
          "    assert_eq!(padding, 0);",
          "    assert_eq!(buf.len(), 5);",
          "    assert!(address % align == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(6);",
          "    let align = core::mem::align_of::<StateID>();",
          "    let address = buf.as_ptr().as_usize();",
          "    assert!(address % align == 0);",
          "    assert!(padding > 0);",
          "}"
        ],
        "oracle": [
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(6);",
          "    let align = core::mem::align_of::<StateID>();",
          "    let address = buf.as_ptr().as_usize();",
          "    assert!(address % align == 0);",
          "    assert_eq!(padding, 0);",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(7);",
          "    let align = core::mem::align_of::<StateID>();",
          "    let address = buf.as_ptr().as_usize();",
          "    assert!(address % align != 0);",
          "    assert!(padding > 0);"
        ],
        "code": [
          "{",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(6);",
          "    let align = core::mem::align_of::<StateID>();",
          "    let address = buf.as_ptr().as_usize();",
          "    assert!(address % align == 0);",
          "    assert!(padding > 0);",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(6);",
          "    let align = core::mem::align_of::<StateID>();",
          "    let address = buf.as_ptr().as_usize();",
          "    assert!(address % align == 0);",
          "    assert_eq!(padding, 0);",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(7);",
          "    let align = core::mem::align_of::<StateID>();",
          "    let address = buf.as_ptr().as_usize();",
          "    assert!(address % align != 0);",
          "    assert!(padding > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(7);",
          "    let align = core::mem::align_of::<StateID>();",
          "    let address = buf.as_ptr().as_usize();",
          "    assert!(address % align == 0);",
          "    assert!(padding > 0);",
          "}"
        ],
        "oracle": [
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(7);",
          "    let align = core::mem::align_of::<StateID>();",
          "    assert_eq!(padding, 0);",
          "    assert_eq!(buf.len(), 7);",
          "    assert!(buf.as_ptr().as_usize() % align == 0);",
          "    assert!(padding == 0);"
        ],
        "code": [
          "{",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(7);",
          "    let align = core::mem::align_of::<StateID>();",
          "    let address = buf.as_ptr().as_usize();",
          "    assert!(address % align == 0);",
          "    assert!(padding > 0);",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(7);",
          "    let align = core::mem::align_of::<StateID>();",
          "    assert_eq!(padding, 0);",
          "    assert_eq!(buf.len(), 7);",
          "    assert!(buf.as_ptr().as_usize() % align == 0);",
          "    assert!(padding == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]