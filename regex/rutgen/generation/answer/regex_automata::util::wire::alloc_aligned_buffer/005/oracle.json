[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(0);",
          "    assert_eq!(0, buf.len());",
          "    assert_eq!(0, padding);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(0, buf.len());",
          "    assert_eq!(0, padding);",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(1);",
          "    assert_eq!(1, buf[padding..].len());",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(8);",
          "    assert_eq!(8, buf[padding..].len());",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(15);",
          "    assert_eq!(15, buf[padding..].len());",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(16);",
          "    assert_eq!(16, buf[padding..].len());",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(32);",
          "    assert_eq!(32, buf[padding..].len());",
          "    assert!(padding <= 7);",
          "    assert_eq!(buf[padding..].as_ptr().align_offset(core::mem::align_of::<StateID>()), 0);",
          "    assert_eq!(SIZE, buf[padding..].len());"
        ],
        "code": [
          "{",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(0);",
          "    assert_eq!(0, buf.len());",
          "    assert_eq!(0, padding);",
          "    assert_eq!(0, buf.len());",
          "    assert_eq!(0, padding);",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(1);",
          "    assert_eq!(1, buf[padding..].len());",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(8);",
          "    assert_eq!(8, buf[padding..].len());",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(15);",
          "    assert_eq!(15, buf[padding..].len());",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(16);",
          "    assert_eq!(16, buf[padding..].len());",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(32);",
          "    assert_eq!(32, buf[padding..].len());",
          "    assert!(padding <= 7);",
          "    assert_eq!(buf[padding..].as_ptr().align_offset(core::mem::align_of::<StateID>()), 0);",
          "    assert_eq!(SIZE, buf[padding..].len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(1);",
          "    assert_eq!(1, buf[padding..].len());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(1, buf[padding..].len());",
          "    assert_eq!(0, padding);",
          "    assert!(buf.as_ptr().as_usize() % core::mem::align_of::<StateID>() == 0);",
          "    assert!(padding <= 7);",
          "    assert!(padding <= (core::mem::align_of::<StateID>() - 1));",
          "    assert!(buf.len() == 1 + padding);"
        ],
        "code": [
          "{",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(1);",
          "    assert_eq!(1, buf[padding..].len());",
          "    assert_eq!(1, buf[padding..].len());",
          "    assert_eq!(0, padding);",
          "    assert!(buf.as_ptr().as_usize() % core::mem::align_of::<StateID>() == 0);",
          "    assert!(padding <= 7);",
          "    assert!(padding <= (core::mem::align_of::<StateID>() - 1));",
          "    assert!(buf.len() == 1 + padding);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(2);",
          "    assert_eq!(2, buf[padding..].len());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(2, buf[padding..].len());",
          "    assert!(buf.len() >= 2 + padding);",
          "    assert_eq!(0, buf[padding..].as_ptr().as_usize() % core::mem::align_of::<StateID>());",
          "    assert!(padding <= 7);",
          "    assert!(padding <= core::mem::align_of::<StateID>() - 1);",
          "    assert_ne!(buf.as_ptr() as usize % core::mem::align_of::<StateID>(), 0);"
        ],
        "code": [
          "{",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(2);",
          "    assert_eq!(2, buf[padding..].len());",
          "    assert_eq!(2, buf[padding..].len());",
          "    assert!(buf.len() >= 2 + padding);",
          "    assert_eq!(0, buf[padding..].as_ptr().as_usize() % core::mem::align_of::<StateID>());",
          "    assert!(padding <= 7);",
          "    assert!(padding <= core::mem::align_of::<StateID>() - 1);",
          "    assert_ne!(buf.as_ptr() as usize % core::mem::align_of::<StateID>(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(7);",
          "    assert_eq!(7, buf[padding..].len());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(7, buf.len());",
          "    assert_eq!(0, padding);",
          "    assert!(buf.as_ptr().as_usize() % core::mem::align_of::<StateID>() == 0);",
          "    assert!(padding <= 7);",
          "    assert!(padding <= core::mem::align_of::<StateID>() - 1);"
        ],
        "code": [
          "{",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(7);",
          "    assert_eq!(7, buf[padding..].len());",
          "    assert_eq!(7, buf.len());",
          "    assert_eq!(0, padding);",
          "    assert!(buf.as_ptr().as_usize() % core::mem::align_of::<StateID>() == 0);",
          "    assert!(padding <= 7);",
          "    assert!(padding <= core::mem::align_of::<StateID>() - 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(8);",
          "    assert_eq!(8, buf[padding..].len());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(8, buf.len());",
          "    assert_eq!(0, padding);",
          "    assert!(buf.as_ptr().as_usize() % core::mem::align_of::<StateID>() == 0);",
          "    assert!(padding <= 7);",
          "    assert!(padding <= core::mem::align_of::<StateID>() - 1);",
          "    assert!(*left_val != *right_val);"
        ],
        "code": [
          "{",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(8);",
          "    assert_eq!(8, buf[padding..].len());",
          "    assert_eq!(8, buf.len());",
          "    assert_eq!(0, padding);",
          "    assert!(buf.as_ptr().as_usize() % core::mem::align_of::<StateID>() == 0);",
          "    assert!(padding <= 7);",
          "    assert!(padding <= core::mem::align_of::<StateID>() - 1);",
          "    assert!(*left_val != *right_val);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(9);",
          "    assert_eq!(9, buf[padding..].len());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(9, buf.len());",
          "    assert_eq!(0, padding);",
          "    assert!(buf.as_ptr().as_usize() % core::mem::align_of::<StateID>() == 0);",
          "    assert!(padding <= 7);",
          "    assert!(padding <= core::mem::align_of::<StateID>() - 1);",
          "    assert!(buf[padding..].as_ptr().as_usize() % core::mem::align_of::<StateID>() == 0);"
        ],
        "code": [
          "{",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(9);",
          "    assert_eq!(9, buf[padding..].len());",
          "    assert_eq!(9, buf.len());",
          "    assert_eq!(0, padding);",
          "    assert!(buf.as_ptr().as_usize() % core::mem::align_of::<StateID>() == 0);",
          "    assert!(padding <= 7);",
          "    assert!(padding <= core::mem::align_of::<StateID>() - 1);",
          "    assert!(buf[padding..].as_ptr().as_usize() % core::mem::align_of::<StateID>() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(15);",
          "    assert_eq!(15, buf[padding..].len());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(15, buf[padding..].len());",
          "    assert!(addr % align == 0);",
          "    assert!(padding <= 7);",
          "    assert!(padding <= extra);",
          "    assert_ne!(*left_val, *right_val);"
        ],
        "code": [
          "{",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(15);",
          "    assert_eq!(15, buf[padding..].len());",
          "    assert_eq!(15, buf[padding..].len());",
          "    assert!(addr % align == 0);",
          "    assert!(padding <= 7);",
          "    assert!(padding <= extra);",
          "    assert_ne!(*left_val, *right_val);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(16);",
          "    assert_eq!(16, buf[padding..].len());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(16, buf.len());",
          "    assert_eq!(0, padding);",
          "    assert!(buf.as_ptr().as_usize() % core::mem::align_of::<StateID>() == 0);",
          "    assert!(padding <= 7);",
          "    assert!(padding <= core::mem::align_of::<StateID>() - 1);",
          "    assert_eq!(buf[0..padding].iter().all(|&x| x == 0), true);",
          "    assert_eq!((buf.len() - padding), 16);",
          "    assert!(buf[padding..].as_ptr().as_usize() % core::mem::align_of::<StateID>() == 0);",
          "    assert_ne!(buf.as_ptr() as *const u8, buf[padding..].as_ptr());"
        ],
        "code": [
          "{",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(16);",
          "    assert_eq!(16, buf[padding..].len());",
          "    assert_eq!(16, buf.len());",
          "    assert_eq!(0, padding);",
          "    assert!(buf.as_ptr().as_usize() % core::mem::align_of::<StateID>() == 0);",
          "    assert!(padding <= 7);",
          "    assert!(padding <= core::mem::align_of::<StateID>() - 1);",
          "    assert_eq!(buf[0..padding].iter().all(|&x| x == 0), true);",
          "    assert_eq!((buf.len() - padding), 16);",
          "    assert!(buf[padding..].as_ptr().as_usize() % core::mem::align_of::<StateID>() == 0);",
          "    assert_ne!(buf.as_ptr() as *const u8, buf[padding..].as_ptr());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]