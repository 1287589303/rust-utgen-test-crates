[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let size = 1;",
          "    let buf = alloc_aligned_buffer::<StateID>(size);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.1, 0);",
          "    assert_eq!(buf.0.len(), size);",
          "    assert_eq!(buf.0.as_ptr().as_usize() % core::mem::align_of::<StateID>(), 0);"
        ],
        "code": [
          "{",
          "    let size = 1;",
          "    let buf = alloc_aligned_buffer::<StateID>(size);",
          "    assert_eq!(buf.1, 0);",
          "    assert_eq!(buf.0.len(), size);",
          "    assert_eq!(buf.0.as_ptr().as_usize() % core::mem::align_of::<StateID>(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let size = 2;",
          "    let buf = alloc_aligned_buffer::<StateID>(size);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.0.len(), 2);",
          "    assert_eq!(buf.1, 0);",
          "    assert_eq!(buf.0.as_ptr().as_usize() % core::mem::align_of::<StateID>(), 0);",
          "    assert!(buf.1 <= 7);",
          "    assert!(buf.1 <= core::mem::align_of::<StateID>() - 1);"
        ],
        "code": [
          "{",
          "    let size = 2;",
          "    let buf = alloc_aligned_buffer::<StateID>(size);",
          "    assert_eq!(buf.0.len(), 2);",
          "    assert_eq!(buf.1, 0);",
          "    assert_eq!(buf.0.as_ptr().as_usize() % core::mem::align_of::<StateID>(), 0);",
          "    assert!(buf.1 <= 7);",
          "    assert!(buf.1 <= core::mem::align_of::<StateID>() - 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let size = 3;",
          "    let buf = alloc_aligned_buffer::<StateID>(size);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(3, buf.0.len());",
          "    assert_eq!(0, buf.1);",
          "    assert!(buf.0.as_ptr().as_usize() % core::mem::align_of::<StateID>() == 0);",
          "    assert_eq!(7, buf.1);",
          "    assert!(buf.0.len() >= 10);",
          "    assert!(buf.0.len() == 3 + buf.1);",
          "    assert!(buf.1 <= 7);",
          "    assert!(buf.1 > 7);"
        ],
        "code": [
          "{",
          "    let size = 3;",
          "    let buf = alloc_aligned_buffer::<StateID>(size);",
          "    assert_eq!(3, buf.0.len());",
          "    assert_eq!(0, buf.1);",
          "    assert!(buf.0.as_ptr().as_usize() % core::mem::align_of::<StateID>() == 0);",
          "    assert_eq!(7, buf.1);",
          "    assert!(buf.0.len() >= 10);",
          "    assert!(buf.0.len() == 3 + buf.1);",
          "    assert!(buf.1 <= 7);",
          "    assert!(buf.1 > 7);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let size = 4;",
          "    let buf = alloc_aligned_buffer::<StateID>(size);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(4, buf[1..].len());",
          "    assert!(buf.1 <= 7);",
          "    assert_eq!(0, buf.1);",
          "    assert_eq!(size + buf.1, buf.0.len());",
          "    assert_eq!(0, buf.0[buf.1..].as_ptr().as_usize() % core::mem::align_of::<StateID>());"
        ],
        "code": [
          "{",
          "    let size = 4;",
          "    let buf = alloc_aligned_buffer::<StateID>(size);",
          "    assert_eq!(4, buf[1..].len());",
          "    assert!(buf.1 <= 7);",
          "    assert_eq!(0, buf.1);",
          "    assert_eq!(size + buf.1, buf.0.len());",
          "    assert_eq!(0, buf.0[buf.1..].as_ptr().as_usize() % core::mem::align_of::<StateID>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let size = 5;",
          "    let buf = alloc_aligned_buffer::<StateID>(size);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(5, buf.0[buf.1..].len());",
          "    assert!(buf.1 <= 7);",
          "    assert!(buf.1 > 7);",
          "    assert_eq!(0, buf.0[buf.1..].as_ptr().as_usize() % core::mem::align_of::<StateID>());",
          "    assert!(buf.0.len() >= 5 + buf.1);"
        ],
        "code": [
          "{",
          "    let size = 5;",
          "    let buf = alloc_aligned_buffer::<StateID>(size);",
          "    assert_eq!(5, buf.0[buf.1..].len());",
          "    assert!(buf.1 <= 7);",
          "    assert!(buf.1 > 7);",
          "    assert_eq!(0, buf.0[buf.1..].as_ptr().as_usize() % core::mem::align_of::<StateID>());",
          "    assert!(buf.0.len() >= 5 + buf.1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let size = 6;",
          "    let buf = alloc_aligned_buffer::<StateID>(size);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.0.len(), 6);",
          "    assert_eq!(buf.1, 0);",
          "    assert_eq!(buf.0.as_ptr().as_usize() % core::mem::align_of::<StateID>(), 0);",
          "    assert!(buf.1 <= 7);",
          "    assert!(buf.1 <= core::mem::align_of::<StateID>() - 1);"
        ],
        "code": [
          "{",
          "    let size = 6;",
          "    let buf = alloc_aligned_buffer::<StateID>(size);",
          "    assert_eq!(buf.0.len(), 6);",
          "    assert_eq!(buf.1, 0);",
          "    assert_eq!(buf.0.as_ptr().as_usize() % core::mem::align_of::<StateID>(), 0);",
          "    assert!(buf.1 <= 7);",
          "    assert!(buf.1 <= core::mem::align_of::<StateID>() - 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let size = 7;",
          "    let buf = alloc_aligned_buffer::<StateID>(size);",
          "}"
        ],
        "oracle": [
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(7);",
          "    assert_eq!(7, buf[padding..].len());",
          "    assert!(padding == 0);",
          "    assert!(padding <= 7);",
          "    assert!(padding <= 6);",
          "    assert_eq!(buf.len(), 7 + padding);",
          "    assert_eq!(0, buf[padding..].as_ptr().as_usize() % core::mem::align_of::<StateID>());"
        ],
        "code": [
          "{",
          "    let size = 7;",
          "    let buf = alloc_aligned_buffer::<StateID>(size);",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(7);",
          "    assert_eq!(7, buf[padding..].len());",
          "    assert!(padding == 0);",
          "    assert!(padding <= 7);",
          "    assert!(padding <= 6);",
          "    assert_eq!(buf.len(), 7 + padding);",
          "    assert_eq!(0, buf[padding..].as_ptr().as_usize() % core::mem::align_of::<StateID>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let size = 8;",
          "    let buf = alloc_aligned_buffer::<StateID>(size);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.1, 0);",
          "    assert_eq!(buf.0.len(), 8);",
          "    assert_eq!(buf.0.as_ptr().as_usize() % core::mem::align_of::<StateID>(), 0);",
          "    assert!(buf.0.iter().take(buf.1).all(|&x| x == 0));",
          "    assert!(buf.0.iter().skip(buf.1).all(|&x| x == 0));",
          "    assert!(buf.1 <= 7);",
          "    assert!(buf.1 < core::mem::align_of::<StateID>() - 1);"
        ],
        "code": [
          "{",
          "    let size = 8;",
          "    let buf = alloc_aligned_buffer::<StateID>(size);",
          "    assert_eq!(buf.1, 0);",
          "    assert_eq!(buf.0.len(), 8);",
          "    assert_eq!(buf.0.as_ptr().as_usize() % core::mem::align_of::<StateID>(), 0);",
          "    assert!(buf.0.iter().take(buf.1).all(|&x| x == 0));",
          "    assert!(buf.0.iter().skip(buf.1).all(|&x| x == 0));",
          "    assert!(buf.1 <= 7);",
          "    assert!(buf.1 < core::mem::align_of::<StateID>() - 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let size = 9;",
          "    let buf = alloc_aligned_buffer::<StateID>(size);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 9);",
          "    assert_eq!(buf.1, 0);",
          "    assert!(buf.0.as_ptr().as_usize() % core::mem::align_of::<StateID>() == 0);",
          "    assert!(buf.0[0..7].iter().all(|&x| x == 0));"
        ],
        "code": [
          "{",
          "    let size = 9;",
          "    let buf = alloc_aligned_buffer::<StateID>(size);",
          "    assert_eq!(buf.len(), 9);",
          "    assert_eq!(buf.1, 0);",
          "    assert!(buf.0.as_ptr().as_usize() % core::mem::align_of::<StateID>() == 0);",
          "    assert!(buf.0[0..7].iter().all(|&x| x == 0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let size = 10;",
          "    let buf = alloc_aligned_buffer::<StateID>(size);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.1, 0);",
          "    assert_eq!(buf.0.len(), 10);",
          "    assert!(buf.0.as_ptr() as usize % core::mem::align_of::<StateID>() == 0);",
          "    assert!(buf.0.len() >= 10);",
          "    assert!(buf.0.len() <= 10 + 7);",
          "    assert!(buf.1 <= 7);"
        ],
        "code": [
          "{",
          "    let size = 10;",
          "    let buf = alloc_aligned_buffer::<StateID>(size);",
          "    assert_eq!(buf.1, 0);",
          "    assert_eq!(buf.0.len(), 10);",
          "    assert!(buf.0.as_ptr() as usize % core::mem::align_of::<StateID>() == 0);",
          "    assert!(buf.0.len() >= 10);",
          "    assert!(buf.0.len() <= 10 + 7);",
          "    assert!(buf.1 <= 7);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let size = 11;",
          "    let buf = alloc_aligned_buffer::<StateID>(size);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(11, buf.0[7..].len());",
          "    assert!(buf.0.len() >= 11);",
          "    assert!(buf.1 == 7);",
          "    assert_eq!(0, buf.0[7..].as_ptr().as_usize() % core::mem::align_of::<StateID>());",
          "    assert!(buf.1 <= 7);",
          "    assert!(buf.1 > 0);"
        ],
        "code": [
          "{",
          "    let size = 11;",
          "    let buf = alloc_aligned_buffer::<StateID>(size);",
          "    assert_eq!(11, buf.0[7..].len());",
          "    assert!(buf.0.len() >= 11);",
          "    assert!(buf.1 == 7);",
          "    assert_eq!(0, buf.0[7..].as_ptr().as_usize() % core::mem::align_of::<StateID>());",
          "    assert!(buf.1 <= 7);",
          "    assert!(buf.1 > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let size = 12;",
          "    let buf = alloc_aligned_buffer::<StateID>(size);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 12);",
          "    assert!(buf.1 == 0);",
          "    assert_eq!(buf.0.as_ptr().as_usize() % core::mem::align_of::<StateID>(), 0);",
          "    assert!(buf.1 <= 7);",
          "    assert!(buf.1 <= core::mem::align_of::<StateID>() - 1);",
          "    assert!(buf.0[0..buf.1].iter().all(|&x| x == 0));"
        ],
        "code": [
          "{",
          "    let size = 12;",
          "    let buf = alloc_aligned_buffer::<StateID>(size);",
          "    assert_eq!(buf.len(), 12);",
          "    assert!(buf.1 == 0);",
          "    assert_eq!(buf.0.as_ptr().as_usize() % core::mem::align_of::<StateID>(), 0);",
          "    assert!(buf.1 <= 7);",
          "    assert!(buf.1 <= core::mem::align_of::<StateID>() - 1);",
          "    assert!(buf.0[0..buf.1].iter().all(|&x| x == 0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let size = 13;",
          "    let buf = alloc_aligned_buffer::<StateID>(size);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.1, 0);",
          "    assert_eq!(buf.0.len(), 13);",
          "    assert_eq!(buf.0.as_ptr().align_offset(core::mem::align_of::<StateID>()), 0);",
          "    assert!(buf.1 <= 7);",
          "    assert!(buf.1 <= (core::mem::align_of::<StateID>() - 1));"
        ],
        "code": [
          "{",
          "    let size = 13;",
          "    let buf = alloc_aligned_buffer::<StateID>(size);",
          "    assert_eq!(buf.1, 0);",
          "    assert_eq!(buf.0.len(), 13);",
          "    assert_eq!(buf.0.as_ptr().align_offset(core::mem::align_of::<StateID>()), 0);",
          "    assert!(buf.1 <= 7);",
          "    assert!(buf.1 <= (core::mem::align_of::<StateID>() - 1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let size = 14;",
          "    let buf = alloc_aligned_buffer::<StateID>(size);",
          "}"
        ],
        "oracle": [
          "    let size = 14;",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(size);",
          "    assert_eq!(size, buf[padding..].len());",
          "    assert_eq!(0, padding);",
          "    assert_eq!(buf.len(), size + padding);",
          "    assert!(buf.as_ptr().as_usize() % core::mem::align_of::<StateID>() == 0);",
          "    assert!(padding <= 7);",
          "    assert!(padding > (core::mem::align_of::<StateID>() - 1));"
        ],
        "code": [
          "{",
          "    let size = 14;",
          "    let buf = alloc_aligned_buffer::<StateID>(size);",
          "    let size = 14;",
          "    let (buf, padding) = alloc_aligned_buffer::<StateID>(size);",
          "    assert_eq!(size, buf[padding..].len());",
          "    assert_eq!(0, padding);",
          "    assert_eq!(buf.len(), size + padding);",
          "    assert!(buf.as_ptr().as_usize() % core::mem::align_of::<StateID>() == 0);",
          "    assert!(padding <= 7);",
          "    assert!(padding > (core::mem::align_of::<StateID>() - 1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let size = 15;",
          "    let buf = alloc_aligned_buffer::<StateID>(size);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.1, 0);",
          "    assert_eq!(buf.0.len(), 15);",
          "    assert!(buf.0.as_ptr().as_usize() % 8 == 0);",
          "    assert!(buf.1 <= 7);",
          "    assert!(buf.1 <= 8);",
          "    assert!(buf.0[buf.1..].len() == 15);"
        ],
        "code": [
          "{",
          "    let size = 15;",
          "    let buf = alloc_aligned_buffer::<StateID>(size);",
          "    assert_eq!(buf.1, 0);",
          "    assert_eq!(buf.0.len(), 15);",
          "    assert!(buf.0.as_ptr().as_usize() % 8 == 0);",
          "    assert!(buf.1 <= 7);",
          "    assert!(buf.1 <= 8);",
          "    assert!(buf.0[buf.1..].len() == 15);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]