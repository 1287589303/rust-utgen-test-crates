[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new();",
          "    let modified_config = config.onepass(true);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(modified_config.onepass, Some(true));",
          "    assert_ne!(modified_config.onepass, None);",
          "    assert_eq!(modified_config.onepass.unwrap(), true);",
          "    assert_eq!(modified_config.get_onepass(), true);",
          "    assert_eq!(config.onepass, None);"
        ],
        "code": [
          "{",
          "    let config = Config::new();",
          "    let modified_config = config.onepass(true);",
          "    assert_eq!(modified_config.onepass, Some(true));",
          "    assert_ne!(modified_config.onepass, None);",
          "    assert_eq!(modified_config.onepass.unwrap(), true);",
          "    assert_eq!(modified_config.get_onepass(), true);",
          "    assert_eq!(config.onepass, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new();",
          "    let modified_config = config.onepass(false);",
          "}"
        ],
        "oracle": [
          "    let config = Config::new();",
          "    let modified_config = config.onepass(false);",
          "    assert_eq!(modified_config.onepass, Some(false));",
          "    assert_eq!(modified_config, Config { onepass: Some(false), ..config });",
          "    let modified_config_true = config.onepass(true);",
          "    assert_eq!(modified_config_true.onepass, Some(true));",
          "    assert_eq!(modified_config_true, Config { onepass: Some(true), ..config });"
        ],
        "code": [
          "{",
          "    let config = Config::new();",
          "    let modified_config = config.onepass(false);",
          "    let config = Config::new();",
          "    let modified_config = config.onepass(false);",
          "    assert_eq!(modified_config.onepass, Some(false));",
          "    assert_eq!(modified_config, Config { onepass: Some(false), ..config });",
          "    let modified_config_true = config.onepass(true);",
          "    assert_eq!(modified_config_true.onepass, Some(true));",
          "    assert_eq!(modified_config_true, Config { onepass: Some(true), ..config });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]