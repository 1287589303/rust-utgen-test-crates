[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH);",
          "    id.is_match();",
          "}"
        ],
        "oracle": [
          "    assert!(id.is_match());",
          "    let id_unknown = LazyStateID::new_unchecked(LazyStateID::MASK_UNKNOWN);",
          "    assert!(!id_unknown.is_match());",
          "    let id_dead = LazyStateID::new_unchecked(LazyStateID::MASK_DEAD);",
          "    assert!(!id_dead.is_match());",
          "    let id_quit = LazyStateID::new_unchecked(LazyStateID::MASK_QUIT);",
          "    assert!(!id_quit.is_match());",
          "    let id_start = LazyStateID::new_unchecked(LazyStateID::MASK_START);",
          "    assert!(!id_start.is_match());",
          "    let id_non_match = LazyStateID::new_unchecked(0);",
          "    assert!(!id_non_match.is_match());",
          "    let id_match_max = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH | 1);",
          "    assert!(id_match_max.is_match());",
          "    let id_match_only = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH);",
          "    assert!(id_match_only.is_match());"
        ],
        "code": [
          "{",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH);",
          "    id.is_match();",
          "    assert!(id.is_match());",
          "    let id_unknown = LazyStateID::new_unchecked(LazyStateID::MASK_UNKNOWN);",
          "    assert!(!id_unknown.is_match());",
          "    let id_dead = LazyStateID::new_unchecked(LazyStateID::MASK_DEAD);",
          "    assert!(!id_dead.is_match());",
          "    let id_quit = LazyStateID::new_unchecked(LazyStateID::MASK_QUIT);",
          "    assert!(!id_quit.is_match());",
          "    let id_start = LazyStateID::new_unchecked(LazyStateID::MASK_START);",
          "    assert!(!id_start.is_match());",
          "    let id_non_match = LazyStateID::new_unchecked(0);",
          "    assert!(!id_non_match.is_match());",
          "    let id_match_max = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH | 1);",
          "    assert!(id_match_max.is_match());",
          "    let id_match_only = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH);",
          "    assert!(id_match_only.is_match());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH + 1);",
          "    id.is_match();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(id.is_match(), true);",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH - 1);",
          "    assert_eq!(id.is_match(), false);",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH);",
          "    assert_eq!(id.is_match(), true);",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH << 1);",
          "    assert_eq!(id.is_match(), true);",
          "    let id = LazyStateID::new_unchecked(0);",
          "    assert_eq!(id.is_match(), false);"
        ],
        "code": [
          "{",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH + 1);",
          "    id.is_match();",
          "    assert_eq!(id.is_match(), true);",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH - 1);",
          "    assert_eq!(id.is_match(), false);",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH);",
          "    assert_eq!(id.is_match(), true);",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH << 1);",
          "    assert_eq!(id.is_match(), true);",
          "    let id = LazyStateID::new_unchecked(0);",
          "    assert_eq!(id.is_match(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let id = LazyStateID::new_unchecked(0);",
          "    id.is_match();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(id.as_usize_unchecked() & LazyStateID::MASK_MATCH > 0, false);",
          "    let id_match = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH);",
          "    assert_eq!(id_match.is_match(), true);",
          "    let id_non_match = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH - 1);",
          "    assert_eq!(id_non_match.is_match(), false);",
          "    let id_unknown = id.to_unknown();",
          "    assert_eq!(id_unknown.is_match(), false);",
          "    let id_dead = id.to_dead();",
          "    assert_eq!(id_dead.is_match(), false);",
          "    let id_quit = id.to_quit();",
          "    assert_eq!(id_quit.is_match(), false);",
          "    let id_start = id.to_start();",
          "    assert_eq!(id_start.is_match(), false);"
        ],
        "code": [
          "{",
          "    let id = LazyStateID::new_unchecked(0);",
          "    id.is_match();",
          "    assert_eq!(id.as_usize_unchecked() & LazyStateID::MASK_MATCH > 0, false);",
          "    let id_match = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH);",
          "    assert_eq!(id_match.is_match(), true);",
          "    let id_non_match = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH - 1);",
          "    assert_eq!(id_non_match.is_match(), false);",
          "    let id_unknown = id.to_unknown();",
          "    assert_eq!(id_unknown.is_match(), false);",
          "    let id_dead = id.to_dead();",
          "    assert_eq!(id_dead.is_match(), false);",
          "    let id_quit = id.to_quit();",
          "    assert_eq!(id_quit.is_match(), false);",
          "    let id_start = id.to_start();",
          "    assert_eq!(id_start.is_match(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH - 1);",
          "    id.is_match();",
          "}"
        ],
        "oracle": [
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH - 1); assert!(id.is_match() == true);",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH); assert!(id.is_match() == true);",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH + 1); assert!(id.is_match() == true);",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH - 2); assert!(id.is_match() == false);",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH + 2); assert!(id.is_match() == false);",
          "    let id = LazyStateID::new_unchecked(0); assert!(id.is_match() == false);"
        ],
        "code": [
          "{",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH - 1);",
          "    id.is_match();",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH - 1); assert!(id.is_match() == true);",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH); assert!(id.is_match() == true);",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH + 1); assert!(id.is_match() == true);",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH - 2); assert!(id.is_match() == false);",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH + 2); assert!(id.is_match() == false);",
          "    let id = LazyStateID::new_unchecked(0); assert!(id.is_match() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]