[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition = Transition { start: 100, end: 150, next: StateID(1) };",
          "    let transitions = SparseTransitions { transitions: Box::from([transition]) };",
          "    let byte = 100;",
          "    let result = transitions.matches_byte(byte);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(StateID(1)));"
        ],
        "code": [
          "{",
          "    let transition = Transition { start: 100, end: 150, next: StateID(1) };",
          "    let transitions = SparseTransitions { transitions: Box::from([transition]) };",
          "    let byte = 100;",
          "    let result = transitions.matches_byte(byte);",
          "    assert_eq!(result, Some(StateID(1)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition = Transition { start: 100, end: 150, next: StateID(2) };",
          "    let transitions = SparseTransitions { transitions: Box::from([transition]) };",
          "    let byte = 150;",
          "    let result = transitions.matches_byte(byte);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result, Some(StateID(2)));"
        ],
        "code": [
          "{",
          "    let transition = Transition { start: 100, end: 150, next: StateID(2) };",
          "    let transitions = SparseTransitions { transitions: Box::from([transition]) };",
          "    let byte = 150;",
          "    let result = transitions.matches_byte(byte);",
          "    assert!(result.is_some());",
          "    assert_eq!(result, Some(StateID(2)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition1 = Transition { start: 50, end: 75, next: StateID(3) };",
          "    let transition2 = Transition { start: 100, end: 150, next: StateID(4) };",
          "    let transitions = SparseTransitions { transitions: Box::from([transition1, transition2]) };",
          "    let byte = 100;",
          "    let result = transitions.matches_byte(byte);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(StateID(4)));"
        ],
        "code": [
          "{",
          "    let transition1 = Transition { start: 50, end: 75, next: StateID(3) };",
          "    let transition2 = Transition { start: 100, end: 150, next: StateID(4) };",
          "    let transitions = SparseTransitions { transitions: Box::from([transition1, transition2]) };",
          "    let byte = 100;",
          "    let result = transitions.matches_byte(byte);",
          "    assert_eq!(result, Some(StateID(4)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]