[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transitions: Box<[Transition]> = Box::new([]);",
          "    let sparse_transitions = SparseTransitions { transitions };",
          "",
          "    let result = sparse_transitions.matches_byte(5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let transitions: Box<[Transition]> = Box::new([]);",
          "    let sparse_transitions = SparseTransitions { transitions };",
          "",
          "    let result = sparse_transitions.matches_byte(5);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transitions: Box<[Transition]> = Box::new([",
          "        Transition { start: 10, end: 20, next: StateID(1) },",
          "        Transition { start: 30, end: 40, next: StateID(2) },",
          "    ]);",
          "    let sparse_transitions = SparseTransitions { transitions };",
          "",
          "    let result = sparse_transitions.matches_byte(5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let transitions: Box<[Transition]> = Box::new([",
          "        Transition { start: 10, end: 20, next: StateID(1) },",
          "        Transition { start: 30, end: 40, next: StateID(2) },",
          "    ]);",
          "    let sparse_transitions = SparseTransitions { transitions };",
          "",
          "    let result = sparse_transitions.matches_byte(5);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transitions: Box<[Transition]> = Box::new([",
          "        Transition { start: 10, end: 20, next: StateID(1) },",
          "    ]);",
          "    let sparse_transitions = SparseTransitions { transitions };",
          "",
          "    let result = sparse_transitions.matches_byte(9);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let transitions: Box<[Transition]> = Box::new([",
          "        Transition { start: 10, end: 20, next: StateID(1) },",
          "    ]);",
          "    let sparse_transitions = SparseTransitions { transitions };",
          "",
          "    let result = sparse_transitions.matches_byte(9);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]