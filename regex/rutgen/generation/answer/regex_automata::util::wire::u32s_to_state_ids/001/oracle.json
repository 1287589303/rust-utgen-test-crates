[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u32] = &[];",
          "    let state_ids = u32s_to_state_ids(slice);",
          "}"
        ],
        "oracle": [
          "    let slice: &[u32] = &[];",
          "    let state_ids = u32s_to_state_ids(slice);",
          "    assert_eq!(state_ids, core::slice::from_raw_parts(slice.as_ptr().cast::<StateID>(), slice.len()));",
          "    ",
          "    let slice: &[u32] = &[1, 2, 3];",
          "    let state_ids = u32s_to_state_ids(slice);",
          "    assert_eq!(state_ids, core::slice::from_raw_parts(slice.as_ptr().cast::<StateID>(), slice.len()));",
          "    ",
          "    let slice: &[u32] = &[0, 0, 0];",
          "    let state_ids = u32s_to_state_ids(slice);",
          "    assert_eq!(state_ids, core::slice::from_raw_parts(slice.as_ptr().cast::<StateID>(), slice.len()));",
          "    ",
          "    let slice: &[u32] = &[u32::MAX];",
          "    let state_ids = u32s_to_state_ids(slice);",
          "    assert_eq!(state_ids, core::slice::from_raw_parts(slice.as_ptr().cast::<StateID>(), slice.len()));",
          "    ",
          "    let non_empty_slice: &[u32] = &[1, 2, 3, 4, 5];",
          "    let state_ids = u32s_to_state_ids(non_empty_slice);",
          "    assert_eq!(state_ids, core::slice::from_raw_parts(non_empty_slice.as_ptr().cast::<StateID>(), non_empty_slice.len()));"
        ],
        "code": [
          "{",
          "    let slice: &[u32] = &[];",
          "    let state_ids = u32s_to_state_ids(slice);",
          "    let slice: &[u32] = &[];",
          "    let state_ids = u32s_to_state_ids(slice);",
          "    assert_eq!(state_ids, core::slice::from_raw_parts(slice.as_ptr().cast::<StateID>(), slice.len()));",
          "    ",
          "    let slice: &[u32] = &[1, 2, 3];",
          "    let state_ids = u32s_to_state_ids(slice);",
          "    assert_eq!(state_ids, core::slice::from_raw_parts(slice.as_ptr().cast::<StateID>(), slice.len()));",
          "    ",
          "    let slice: &[u32] = &[0, 0, 0];",
          "    let state_ids = u32s_to_state_ids(slice);",
          "    assert_eq!(state_ids, core::slice::from_raw_parts(slice.as_ptr().cast::<StateID>(), slice.len()));",
          "    ",
          "    let slice: &[u32] = &[u32::MAX];",
          "    let state_ids = u32s_to_state_ids(slice);",
          "    assert_eq!(state_ids, core::slice::from_raw_parts(slice.as_ptr().cast::<StateID>(), slice.len()));",
          "    ",
          "    let non_empty_slice: &[u32] = &[1, 2, 3, 4, 5];",
          "    let state_ids = u32s_to_state_ids(non_empty_slice);",
          "    assert_eq!(state_ids, core::slice::from_raw_parts(non_empty_slice.as_ptr().cast::<StateID>(), non_empty_slice.len()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u32] = &[0];",
          "    let state_ids = u32s_to_state_ids(slice);",
          "}"
        ],
        "oracle": [
          "    let slice: &[u32] = &[0];",
          "    let state_ids = u32s_to_state_ids(slice);",
          "    assert_eq!(state_ids.len(), slice.len());",
          "    assert_eq!(state_ids[0], StateID(0));",
          "    let slice: &[u32] = &[1, 2, 3];",
          "    let state_ids = u32s_to_state_ids(slice);",
          "    assert_eq!(state_ids.len(), slice.len());",
          "    assert_eq!(state_ids[0], StateID(1));",
          "    assert_eq!(state_ids[1], StateID(2));",
          "    assert_eq!(state_ids[2], StateID(3));",
          "    let slice: &[u32] = &[];",
          "    let state_ids = u32s_to_state_ids(slice);",
          "    assert_eq!(state_ids.len(), 0);"
        ],
        "code": [
          "{",
          "    let slice: &[u32] = &[0];",
          "    let state_ids = u32s_to_state_ids(slice);",
          "    let slice: &[u32] = &[0];",
          "    let state_ids = u32s_to_state_ids(slice);",
          "    assert_eq!(state_ids.len(), slice.len());",
          "    assert_eq!(state_ids[0], StateID(0));",
          "    let slice: &[u32] = &[1, 2, 3];",
          "    let state_ids = u32s_to_state_ids(slice);",
          "    assert_eq!(state_ids.len(), slice.len());",
          "    assert_eq!(state_ids[0], StateID(1));",
          "    assert_eq!(state_ids[1], StateID(2));",
          "    assert_eq!(state_ids[2], StateID(3));",
          "    let slice: &[u32] = &[];",
          "    let state_ids = u32s_to_state_ids(slice);",
          "    assert_eq!(state_ids.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u32] = &[u32::MAX];",
          "    let state_ids = u32s_to_state_ids(slice);",
          "}"
        ],
        "oracle": [
          "    let slice: &[u32] = &[u32::MAX];",
          "    let expected_state_ids = core::slice::from_raw_parts(slice.as_ptr().cast::<StateID>(), slice.len());",
          "    assert_eq!(state_ids, expected_state_ids);"
        ],
        "code": [
          "{",
          "    let slice: &[u32] = &[u32::MAX];",
          "    let state_ids = u32s_to_state_ids(slice);",
          "    let slice: &[u32] = &[u32::MAX];",
          "    let expected_state_ids = core::slice::from_raw_parts(slice.as_ptr().cast::<StateID>(), slice.len());",
          "    assert_eq!(state_ids, expected_state_ids);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u32] = &[1, 2, 3, 4, 5];",
          "    let state_ids = u32s_to_state_ids(slice);",
          "}"
        ],
        "oracle": [
          "    let slice: &[u32] = &[1, 2, 3, 4, 5];",
          "    let expected_state_ids: &[StateID] = unsafe { core::slice::from_raw_parts(slice.as_ptr().cast::<StateID>(), slice.len()) };",
          "    assert_eq!(state_ids, expected_state_ids);",
          "    assert_eq!(state_ids.len(), slice.len());",
          "    assert_eq!(state_ids[0], StateID(1));",
          "    assert_eq!(state_ids[1], StateID(2));",
          "    assert_eq!(state_ids[2], StateID(3));",
          "    assert_eq!(state_ids[3], StateID(4));",
          "    assert_eq!(state_ids[4], StateID(5));"
        ],
        "code": [
          "{",
          "    let slice: &[u32] = &[1, 2, 3, 4, 5];",
          "    let state_ids = u32s_to_state_ids(slice);",
          "    let slice: &[u32] = &[1, 2, 3, 4, 5];",
          "    let expected_state_ids: &[StateID] = unsafe { core::slice::from_raw_parts(slice.as_ptr().cast::<StateID>(), slice.len()) };",
          "    assert_eq!(state_ids, expected_state_ids);",
          "    assert_eq!(state_ids.len(), slice.len());",
          "    assert_eq!(state_ids[0], StateID(1));",
          "    assert_eq!(state_ids[1], StateID(2));",
          "    assert_eq!(state_ids[2], StateID(3));",
          "    assert_eq!(state_ids[3], StateID(4));",
          "    assert_eq!(state_ids[4], StateID(5));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u32] = &[0, u32::MAX];",
          "    let state_ids = u32s_to_state_ids(slice);",
          "}"
        ],
        "oracle": [
          "    let slice: &[u32] = &[0, u32::MAX];",
          "    let state_ids = u32s_to_state_ids(slice);",
          "    assert_eq!(state_ids.len(), slice.len());",
          "    assert_eq!(state_ids[0].0, slice[0]);",
          "    assert_eq!(state_ids[1].0, slice[1]);",
          "    assert!(core::ptr::eq(state_ids.as_ptr(), slice.as_ptr().cast::<StateID>()));"
        ],
        "code": [
          "{",
          "    let slice: &[u32] = &[0, u32::MAX];",
          "    let state_ids = u32s_to_state_ids(slice);",
          "    let slice: &[u32] = &[0, u32::MAX];",
          "    let state_ids = u32s_to_state_ids(slice);",
          "    assert_eq!(state_ids.len(), slice.len());",
          "    assert_eq!(state_ids[0].0, slice[0]);",
          "    assert_eq!(state_ids[1].0, slice[1]);",
          "    assert!(core::ptr::eq(state_ids.as_ptr(), slice.as_ptr().cast::<StateID>()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: Vec<u32> = (0..1000).collect();",
          "    let state_ids = u32s_to_state_ids(&slice);",
          "}"
        ],
        "oracle": [
          "    let slice: Vec<u32> = (0..1000).collect();",
          "    let state_ids: &[StateID] = u32s_to_state_ids(&slice);",
          "    assert_eq!(state_ids.len(), slice.len());",
          "    assert_eq!(state_ids.as_ptr(), slice.as_ptr().cast::<StateID>());"
        ],
        "code": [
          "{",
          "    let slice: Vec<u32> = (0..1000).collect();",
          "    let state_ids = u32s_to_state_ids(&slice);",
          "    let slice: Vec<u32> = (0..1000).collect();",
          "    let state_ids: &[StateID] = u32s_to_state_ids(&slice);",
          "    assert_eq!(state_ids.len(), slice.len());",
          "    assert_eq!(state_ids.as_ptr(), slice.as_ptr().cast::<StateID>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]