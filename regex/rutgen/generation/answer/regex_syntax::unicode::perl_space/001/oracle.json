[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    // No feature flags set; expect Error::PerlClassNotFound",
          "    let result = perl_space();",
          "}"
        ],
        "oracle": [
          "    let expected_error = Error::PerlClassNotFound;",
          "    assert_eq!(result, Err(expected_error));"
        ],
        "code": [
          "{",
          "    // No feature flags set; expect Error::PerlClassNotFound",
          "    let result = perl_space();",
          "    let expected_error = Error::PerlClassNotFound;",
          "    assert_eq!(result, Err(expected_error));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[cfg(feature = \"unicode-perl\")]"
        ],
        "prefix": [
          "{",
          "    // Feature \"unicode-perl\" enabled; expect success with valid ClassUnicode",
          "    let result = perl_space();",
          "}"
        ],
        "oracle": [
          "    let result = perl_space(); assert!(result.is_ok());",
          "    let class_unicode = result.unwrap(); assert_eq!(class_unicode.set, expected_class_unicode_set);",
          "    let result = perl_space(); assert!(result.is_err()); assert_eq!(result.unwrap_err(), Error::PerlClassNotFound);",
          "    let result = perl_space(); assert!(result.is_ok());",
          "    let class_unicode = result.unwrap(); assert_eq!(class_unicode.set, expected_class_unicode_set);",
          "    let result = perl_space(); assert!(result.is_err()); assert_eq!(result.unwrap_err(), Error::PropertyNotFound);",
          "    let result = perl_space(); assert!(result.is_ok());",
          "    let class_unicode = result.unwrap(); assert_eq!(class_unicode.set, expected_class_unicode_set);"
        ],
        "code": [
          "{",
          "    // Feature \"unicode-perl\" enabled; expect success with valid ClassUnicode",
          "    let result = perl_space();",
          "    let result = perl_space(); assert!(result.is_ok());",
          "    let class_unicode = result.unwrap(); assert_eq!(class_unicode.set, expected_class_unicode_set);",
          "    let result = perl_space(); assert!(result.is_err()); assert_eq!(result.unwrap_err(), Error::PerlClassNotFound);",
          "    let result = perl_space(); assert!(result.is_ok());",
          "    let class_unicode = result.unwrap(); assert_eq!(class_unicode.set, expected_class_unicode_set);",
          "    let result = perl_space(); assert!(result.is_err()); assert_eq!(result.unwrap_err(), Error::PropertyNotFound);",
          "    let result = perl_space(); assert!(result.is_ok());",
          "    let class_unicode = result.unwrap(); assert_eq!(class_unicode.set, expected_class_unicode_set);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[cfg(feature = \"unicode-bool\")]"
        ],
        "prefix": [
          "{",
          "    // Feature \"unicode-bool\" enabled; expect success with valid ClassUnicode",
          "    let result = perl_space();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let class_unicode = result.unwrap();",
          "    assert_eq!(class_unicode, hir_class(crate::unicode_tables::property_bool::WHITE_SPACE));"
        ],
        "code": [
          "{",
          "    // Feature \"unicode-bool\" enabled; expect success with valid ClassUnicode",
          "    let result = perl_space();",
          "    assert!(result.is_ok());",
          "    let class_unicode = result.unwrap();",
          "    assert_eq!(class_unicode, hir_class(crate::unicode_tables::property_bool::WHITE_SPACE));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[cfg(all(feature = \"unicode-perl\", feature = \"unicode-bool\"))]"
        ],
        "prefix": [
          "{",
          "    // Both feature flags enabled; expect success with valid ClassUnicode",
          "    let result = perl_space();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().set, expected_class_unicode_set);"
        ],
        "code": [
          "{",
          "    // Both feature flags enabled; expect success with valid ClassUnicode",
          "    let result = perl_space();",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().set, expected_class_unicode_set);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]