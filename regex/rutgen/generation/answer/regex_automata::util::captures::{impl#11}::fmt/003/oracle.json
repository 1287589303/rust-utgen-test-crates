[
  {
    "uses": [
      "use crate::util::primitives::SmallIndex;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::util::primitives::SmallIndex;",
          "",
          "    let pattern_id_valid = PatternID(SmallIndex::from_usize(0).unwrap());",
          "    let error = GroupInfoError {",
          "        kind: GroupInfoErrorKind::MissingGroups { pattern: pattern_id_valid },",
          "    };",
          "    ",
          "    let _ = core::fmt::write(&mut String::new().into(), &error);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{}\", error), \"no capturing groups found for pattern 0 (either all patterns have zero groups or all patterns have at least one group)\");"
        ],
        "code": [
          "{",
          "    use crate::util::primitives::SmallIndex;",
          "",
          "    let pattern_id_valid = PatternID(SmallIndex::from_usize(0).unwrap());",
          "    let error = GroupInfoError {",
          "        kind: GroupInfoErrorKind::MissingGroups { pattern: pattern_id_valid },",
          "    };",
          "    ",
          "    let _ = core::fmt::write(&mut String::new().into(), &error);",
          "    assert_eq!(format!(\"{}\", error), \"no capturing groups found for pattern 0 (either all patterns have zero groups or all patterns have at least one group)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::util::primitives::SmallIndex;",
          "",
          "    let pattern_id_boundary = PatternID(SmallIndex::from_usize(usize::MAX).unwrap());",
          "    let error = GroupInfoError {",
          "        kind: GroupInfoErrorKind::MissingGroups { pattern: pattern_id_boundary },",
          "    };",
          "    ",
          "    let _ = core::fmt::write(&mut String::new().into(), &error);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"no capturing groups found for pattern {} (either all patterns have zero groups or all patterns have at least one group)\", pattern_id_boundary.as_usize())"
        ],
        "code": [
          "{",
          "    use crate::util::primitives::SmallIndex;",
          "",
          "    let pattern_id_boundary = PatternID(SmallIndex::from_usize(usize::MAX).unwrap());",
          "    let error = GroupInfoError {",
          "        kind: GroupInfoErrorKind::MissingGroups { pattern: pattern_id_boundary },",
          "    };",
          "    ",
          "    let _ = core::fmt::write(&mut String::new().into(), &error);",
          "    write!(f, \"no capturing groups found for pattern {} (either all patterns have zero groups or all patterns have at least one group)\", pattern_id_boundary.as_usize())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::util::primitives::SmallIndex;",
          "",
          "    let pattern_id_large = PatternID(SmallIndex::from_usize(1000).unwrap());",
          "    let error = GroupInfoError {",
          "        kind: GroupInfoErrorKind::MissingGroups { pattern: pattern_id_large },",
          "    };",
          "    ",
          "    let _ = core::fmt::write(&mut String::new().into(), &error);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"no capturing groups found for pattern {} \\",
          "    (either all patterns have zero groups or all patterns have \\",
          "    at least one group)\", 1000)"
        ],
        "code": [
          "{",
          "    use crate::util::primitives::SmallIndex;",
          "",
          "    let pattern_id_large = PatternID(SmallIndex::from_usize(1000).unwrap());",
          "    let error = GroupInfoError {",
          "        kind: GroupInfoErrorKind::MissingGroups { pattern: pattern_id_large },",
          "    };",
          "    ",
          "    let _ = core::fmt::write(&mut String::new().into(), &error);",
          "    write!(f, \"no capturing groups found for pattern {} \\",
          "    (either all patterns have zero groups or all patterns have \\",
          "    at least one group)\", 1000)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]