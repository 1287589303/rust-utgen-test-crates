[
  {
    "uses": [
      "use crate::util::primitives::SmallIndex;",
      "use crate::util::primitives::PatternID;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::util::primitives::SmallIndex;",
          "    use crate::util::primitives::PatternID;",
          "",
          "    let valid_pattern_id = PatternID(SmallIndex(1));",
          "    let error = GroupInfoError {",
          "        kind: GroupInfoErrorKind::FirstMustBeUnnamed {",
          "            pattern: valid_pattern_id.clone(),",
          "        }",
          "    };",
          "    let _ = format!(\"{}\", error);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{}\", error), \"first capture group (at index 0) for pattern 1 has a name (it must be unnamed)\");"
        ],
        "code": [
          "{",
          "    use crate::util::primitives::SmallIndex;",
          "    use crate::util::primitives::PatternID;",
          "",
          "    let valid_pattern_id = PatternID(SmallIndex(1));",
          "    let error = GroupInfoError {",
          "        kind: GroupInfoErrorKind::FirstMustBeUnnamed {",
          "            pattern: valid_pattern_id.clone(),",
          "        }",
          "    };",
          "    let _ = format!(\"{}\", error);",
          "    assert_eq!(format!(\"{}\", error), \"first capture group (at index 0) for pattern 1 has a name (it must be unnamed)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::util::primitives::SmallIndex;",
          "    use crate::util::primitives::PatternID;",
          "",
          "    let max_pattern_id = PatternID(SmallIndex(255)); // Assume 255 is MAX_PATTERN_ID",
          "    let error = GroupInfoError {",
          "        kind: GroupInfoErrorKind::FirstMustBeUnnamed {",
          "            pattern: max_pattern_id.clone(),",
          "        }",
          "    };",
          "    let _ = format!(\"{}\", error);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{}\", error), \"first capture group (at index 0) for pattern 255 has a name (it must be unnamed)\");"
        ],
        "code": [
          "{",
          "    use crate::util::primitives::SmallIndex;",
          "    use crate::util::primitives::PatternID;",
          "",
          "    let max_pattern_id = PatternID(SmallIndex(255)); // Assume 255 is MAX_PATTERN_ID",
          "    let error = GroupInfoError {",
          "        kind: GroupInfoErrorKind::FirstMustBeUnnamed {",
          "            pattern: max_pattern_id.clone(),",
          "        }",
          "    };",
          "    let _ = format!(\"{}\", error);",
          "    assert_eq!(format!(\"{}\", error), \"first capture group (at index 0) for pattern 255 has a name (it must be unnamed)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    use crate::util::primitives::SmallIndex;",
          "    use crate::util::primitives::PatternID;",
          "",
          "    let zero_pattern_id = PatternID(SmallIndex(0)); // This should not be valid",
          "    let error = GroupInfoError {",
          "        kind: GroupInfoErrorKind::FirstMustBeUnnamed {",
          "            pattern: zero_pattern_id.clone(),",
          "        }",
          "    };",
          "    let _ = format!(\"{}\", error);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(error.kind, GroupInfoErrorKind::FirstMustBeUnnamed { pattern } if pattern == zero_pattern_id));",
          "    assert_eq!(format!(\"{}\", error), \"first capture group (at index 0) for pattern 0 has a name (it must be unnamed)\");",
          "    assert!(std::panic::catch_unwind(|| { format!(\"{}\", error); }).is_err());",
          "    assert!(std::panic::catch_unwind(|| { let _ = format!(\"{}\", error); }).is_err());",
          "    assert_eq!(error.kind as usize, GroupInfoErrorKind::FirstMustBeUnnamed { pattern: zero_pattern_id }.into());"
        ],
        "code": [
          "{",
          "    use crate::util::primitives::SmallIndex;",
          "    use crate::util::primitives::PatternID;",
          "",
          "    let zero_pattern_id = PatternID(SmallIndex(0)); // This should not be valid",
          "    let error = GroupInfoError {",
          "        kind: GroupInfoErrorKind::FirstMustBeUnnamed {",
          "            pattern: zero_pattern_id.clone(),",
          "        }",
          "    };",
          "    let _ = format!(\"{}\", error);",
          "    assert!(matches!(error.kind, GroupInfoErrorKind::FirstMustBeUnnamed { pattern } if pattern == zero_pattern_id));",
          "    assert_eq!(format!(\"{}\", error), \"first capture group (at index 0) for pattern 0 has a name (it must be unnamed)\");",
          "    assert!(std::panic::catch_unwind(|| { format!(\"{}\", error); }).is_err());",
          "    assert!(std::panic::catch_unwind(|| { let _ = format!(\"{}\", error); }).is_err());",
          "    assert_eq!(error.kind as usize, GroupInfoErrorKind::FirstMustBeUnnamed { pattern: zero_pattern_id }.into());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]