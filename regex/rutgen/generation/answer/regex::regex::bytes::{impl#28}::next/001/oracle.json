[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"hello world\";",
          "    let captures = vec![(0, 5), (6, 11)]; // Valid capture ranges",
          "    let captures_iter = captures.iter().map(|&(start, end)| Some(captures::Capture { start, end }));",
          "    let sub_capture_matches = SubCaptureMatches {",
          "        haystack,",
          "        it: captures_iter,",
          "    };",
          "    ",
          "    let _ = sub_capture_matches.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sub_capture_matches.next(), Some(Some(Match::new(haystack, 0, 5))));",
          "    let _ = sub_capture_matches.next();",
          "    assert_eq!(sub_capture_matches.next(), Some(Some(Match::new(haystack, 6, 11))));",
          "    assert_eq!(sub_capture_matches.next(), None);",
          "    let haystack_empty: &[u8] = b\"\";",
          "    let captures_empty = vec![];",
          "    let captures_iter_empty = captures_empty.iter().map(|&(start, end)| Some(captures::Capture { start, end }));",
          "    let sub_capture_matches_empty = SubCaptureMatches { haystack: haystack_empty, it: captures_iter_empty };",
          "    assert_eq!(sub_capture_matches_empty.next(), None);"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"hello world\";",
          "    let captures = vec![(0, 5), (6, 11)]; // Valid capture ranges",
          "    let captures_iter = captures.iter().map(|&(start, end)| Some(captures::Capture { start, end }));",
          "    let sub_capture_matches = SubCaptureMatches {",
          "        haystack,",
          "        it: captures_iter,",
          "    };",
          "    ",
          "    let _ = sub_capture_matches.next();",
          "    assert_eq!(sub_capture_matches.next(), Some(Some(Match::new(haystack, 0, 5))));",
          "    let _ = sub_capture_matches.next();",
          "    assert_eq!(sub_capture_matches.next(), Some(Some(Match::new(haystack, 6, 11))));",
          "    assert_eq!(sub_capture_matches.next(), None);",
          "    let haystack_empty: &[u8] = b\"\";",
          "    let captures_empty = vec![];",
          "    let captures_iter_empty = captures_empty.iter().map(|&(start, end)| Some(captures::Capture { start, end }));",
          "    let sub_capture_matches_empty = SubCaptureMatches { haystack: haystack_empty, it: captures_iter_empty };",
          "    assert_eq!(sub_capture_matches_empty.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"boundary test\";",
          "    let captures = vec![(0, 8), (8, 12)]; // Valid boundary capture ranges including bounds of the haystack",
          "    let captures_iter = captures.iter().map(|&(start, end)| Some(captures::Capture { start, end }));",
          "    let sub_capture_matches = SubCaptureMatches {",
          "        haystack,",
          "        it: captures_iter,",
          "    };",
          "",
          "    let _ = sub_capture_matches.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sub_capture_matches.next().is_some(), true);",
          "    assert_eq!(sub_capture_matches.next().unwrap().is_some(), true);",
          "    let first_match = sub_capture_matches.next().unwrap().unwrap();",
          "    assert_eq!(first_match.haystack, b\"boundary test\");",
          "    assert_eq!(first_match.start, 0);",
          "    assert_eq!(first_match.end, 8);",
          "    let second_match = sub_capture_matches.next().unwrap().unwrap();",
          "    assert_eq!(second_match.haystack, b\"boundary test\");",
          "    assert_eq!(second_match.start, 8);",
          "    assert_eq!(second_match.end, 12);",
          "    assert_eq!(sub_capture_matches.next().is_none(), true);"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"boundary test\";",
          "    let captures = vec![(0, 8), (8, 12)]; // Valid boundary capture ranges including bounds of the haystack",
          "    let captures_iter = captures.iter().map(|&(start, end)| Some(captures::Capture { start, end }));",
          "    let sub_capture_matches = SubCaptureMatches {",
          "        haystack,",
          "        it: captures_iter,",
          "    };",
          "",
          "    let _ = sub_capture_matches.next();",
          "    assert_eq!(sub_capture_matches.next().is_some(), true);",
          "    assert_eq!(sub_capture_matches.next().unwrap().is_some(), true);",
          "    let first_match = sub_capture_matches.next().unwrap().unwrap();",
          "    assert_eq!(first_match.haystack, b\"boundary test\");",
          "    assert_eq!(first_match.start, 0);",
          "    assert_eq!(first_match.end, 8);",
          "    let second_match = sub_capture_matches.next().unwrap().unwrap();",
          "    assert_eq!(second_match.haystack, b\"boundary test\");",
          "    assert_eq!(second_match.start, 8);",
          "    assert_eq!(second_match.end, 12);",
          "    assert_eq!(sub_capture_matches.next().is_none(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"single\";",
          "    let captures = vec![(0, 7)]; // A single capture covering the entire haystack",
          "    let captures_iter = captures.iter().map(|&(start, end)| Some(captures::Capture { start, end }));",
          "    let sub_capture_matches = SubCaptureMatches {",
          "        haystack,",
          "        it: captures_iter,",
          "    };",
          "",
          "    let _ = sub_capture_matches.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sub_capture_matches.next(), Some(Some(Match::new(haystack, 0, 7))));"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"single\";",
          "    let captures = vec![(0, 7)]; // A single capture covering the entire haystack",
          "    let captures_iter = captures.iter().map(|&(start, end)| Some(captures::Capture { start, end }));",
          "    let sub_capture_matches = SubCaptureMatches {",
          "        haystack,",
          "        it: captures_iter,",
          "    };",
          "",
          "    let _ = sub_capture_matches.next();",
          "    assert_eq!(sub_capture_matches.next(), Some(Some(Match::new(haystack, 0, 7))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"test\";",
          "    let captures: Vec<(usize, usize)> = vec![]; // No captures",
          "    let captures_iter = captures.iter().map(|&_| None);",
          "    let sub_capture_matches = SubCaptureMatches {",
          "        haystack,",
          "        it: captures_iter,",
          "    };",
          "",
          "    let _ = sub_capture_matches.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sub_capture_matches.next(), None);"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"test\";",
          "    let captures: Vec<(usize, usize)> = vec![]; // No captures",
          "    let captures_iter = captures.iter().map(|&_| None);",
          "    let sub_capture_matches = SubCaptureMatches {",
          "        haystack,",
          "        it: captures_iter,",
          "    };",
          "",
          "    let _ = sub_capture_matches.next();",
          "    assert_eq!(sub_capture_matches.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"check\";",
          "    let captures = vec![(2, 7)]; // Invalid capture (end exceeds haystack length)",
          "    let captures_iter = captures.iter().map(|&(start, end)| Some(captures::Capture { start, end }));",
          "    let sub_capture_matches = SubCaptureMatches {",
          "        haystack,",
          "        it: captures_iter,",
          "    };",
          "",
          "    let _ = sub_capture_matches.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sub_capture_matches.next(), None);"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"check\";",
          "    let captures = vec![(2, 7)]; // Invalid capture (end exceeds haystack length)",
          "    let captures_iter = captures.iter().map(|&(start, end)| Some(captures::Capture { start, end }));",
          "    let sub_capture_matches = SubCaptureMatches {",
          "        haystack,",
          "        it: captures_iter,",
          "    };",
          "",
          "    let _ = sub_capture_matches.next();",
          "    assert_eq!(sub_capture_matches.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]