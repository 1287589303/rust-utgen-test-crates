[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let index = SmallIndex::new_unchecked(0);",
          "    let _result = index.as_usize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index.as_usize(), 0);",
          "    let index = SmallIndex::new_unchecked(1);",
          "    assert_eq!(index.as_usize(), 1);",
          "    let index = SmallIndex::new_unchecked(usize::MAX - 1);",
          "    assert_eq!(index.as_usize(), usize::MAX - 1);",
          "    let index = SmallIndex::MAX;",
          "    assert_eq!(index.as_usize(), SmallIndex::MAX.as_usize());"
        ],
        "code": [
          "{",
          "    let index = SmallIndex::new_unchecked(0);",
          "    let _result = index.as_usize();",
          "    assert_eq!(index.as_usize(), 0);",
          "    let index = SmallIndex::new_unchecked(1);",
          "    assert_eq!(index.as_usize(), 1);",
          "    let index = SmallIndex::new_unchecked(usize::MAX - 1);",
          "    assert_eq!(index.as_usize(), usize::MAX - 1);",
          "    let index = SmallIndex::MAX;",
          "    assert_eq!(index.as_usize(), SmallIndex::MAX.as_usize());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let index = SmallIndex::new_unchecked(SmallIndex::MAX.as_usize());",
          "    let _result = index.as_usize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index.as_usize(), SmallIndex::MAX.as_usize());",
          "    assert_eq!(SmallIndex::ZERO.as_usize(), 0);",
          "    assert_eq!(SmallIndex::new_unchecked(10).as_usize(), 10);",
          "    assert_eq!(SmallIndex::new_unchecked(1).as_usize(), 1);",
          "    assert_eq!(SmallIndex::new_unchecked(99).as_usize(), 99);",
          "    assert_eq!(SmallIndex::new_unchecked(SmallIndex::LIMIT - 1).as_usize(), SmallIndex::LIMIT - 1);",
          "    assert!(SmallIndex::new(SmallIndex::LIMIT).is_err());"
        ],
        "code": [
          "{",
          "    let index = SmallIndex::new_unchecked(SmallIndex::MAX.as_usize());",
          "    let _result = index.as_usize();",
          "    assert_eq!(index.as_usize(), SmallIndex::MAX.as_usize());",
          "    assert_eq!(SmallIndex::ZERO.as_usize(), 0);",
          "    assert_eq!(SmallIndex::new_unchecked(10).as_usize(), 10);",
          "    assert_eq!(SmallIndex::new_unchecked(1).as_usize(), 1);",
          "    assert_eq!(SmallIndex::new_unchecked(99).as_usize(), 99);",
          "    assert_eq!(SmallIndex::new_unchecked(SmallIndex::LIMIT - 1).as_usize(), SmallIndex::LIMIT - 1);",
          "    assert!(SmallIndex::new(SmallIndex::LIMIT).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let index = SmallIndex::new_unchecked(SmallIndex::MAX.as_usize() / 2);",
          "    let _result = index.as_usize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index.as_usize(), SmallIndex::MAX.as_usize() / 2);"
        ],
        "code": [
          "{",
          "    let index = SmallIndex::new_unchecked(SmallIndex::MAX.as_usize() / 2);",
          "    let _result = index.as_usize();",
          "    assert_eq!(index.as_usize(), SmallIndex::MAX.as_usize() / 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let index = SmallIndex::new_unchecked(SmallIndex::MAX.as_usize() - 1);",
          "    let _result = index.as_usize();",
          "}"
        ],
        "oracle": [
          "    let index = SmallIndex::new_unchecked(0); assert_eq!(index.as_usize(), 0);",
          "    let index = SmallIndex::new_unchecked(1); assert_eq!(index.as_usize(), 1);",
          "    let index = SmallIndex::new_unchecked(SmallIndex::LIMIT - 1); assert_eq!(index.as_usize(), SmallIndex::LIMIT - 1);",
          "    let index = SmallIndex::new_unchecked(SmallIndex::MAX.as_usize() - 1); assert_eq!(index.as_usize(), SmallIndex::MAX.as_usize() - 1);",
          "    let index = SmallIndex::new_unchecked(SmallIndex::MAX.as_usize()); assert_eq!(index.as_usize(), SmallIndex::MAX.as_usize());"
        ],
        "code": [
          "{",
          "    let index = SmallIndex::new_unchecked(SmallIndex::MAX.as_usize() - 1);",
          "    let _result = index.as_usize();",
          "    let index = SmallIndex::new_unchecked(0); assert_eq!(index.as_usize(), 0);",
          "    let index = SmallIndex::new_unchecked(1); assert_eq!(index.as_usize(), 1);",
          "    let index = SmallIndex::new_unchecked(SmallIndex::LIMIT - 1); assert_eq!(index.as_usize(), SmallIndex::LIMIT - 1);",
          "    let index = SmallIndex::new_unchecked(SmallIndex::MAX.as_usize() - 1); assert_eq!(index.as_usize(), SmallIndex::MAX.as_usize() - 1);",
          "    let index = SmallIndex::new_unchecked(SmallIndex::MAX.as_usize()); assert_eq!(index.as_usize(), SmallIndex::MAX.as_usize());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]