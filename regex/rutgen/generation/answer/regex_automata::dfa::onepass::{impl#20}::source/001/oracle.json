[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let build_error = BuildError {",
          "        kind: BuildErrorKind::Unsupported(\"unsupported feature\"),",
          "    };",
          "    let _ = build_error.source();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(build_error.source(), None);"
        ],
        "code": [
          "{",
          "    let build_error = BuildError {",
          "        kind: BuildErrorKind::Unsupported(\"unsupported feature\"),",
          "    };",
          "    let _ = build_error.source();",
          "    assert_eq!(build_error.source(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let build_error = BuildError {",
          "        kind: BuildErrorKind::TooManyStates { limit: 10 },",
          "    };",
          "    let _ = build_error.source();",
          "}"
        ],
        "oracle": [
          "    let build_error = BuildError { kind: BuildErrorKind::TooManyStates { limit: 10 } };",
          "    let result = build_error.source();",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let build_error = BuildError {",
          "        kind: BuildErrorKind::TooManyStates { limit: 10 },",
          "    };",
          "    let _ = build_error.source();",
          "    let build_error = BuildError { kind: BuildErrorKind::TooManyStates { limit: 10 } };",
          "    let result = build_error.source();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let build_error = BuildError {",
          "        kind: BuildErrorKind::TooManyPatterns { limit: 20 },",
          "    };",
          "    let _ = build_error.source();",
          "}"
        ],
        "oracle": [
          "    let build_error = BuildError { kind: BuildErrorKind::TooManyPatterns { limit: 20 } };",
          "    let result = build_error.source();",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let build_error = BuildError {",
          "        kind: BuildErrorKind::TooManyPatterns { limit: 20 },",
          "    };",
          "    let _ = build_error.source();",
          "    let build_error = BuildError { kind: BuildErrorKind::TooManyPatterns { limit: 20 } };",
          "    let result = build_error.source();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let build_error = BuildError {",
          "        kind: BuildErrorKind::ExceededSizeLimit { limit: 1000 },",
          "    };",
          "    let _ = build_error.source();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(build_error.source(), None);"
        ],
        "code": [
          "{",
          "    let build_error = BuildError {",
          "        kind: BuildErrorKind::ExceededSizeLimit { limit: 1000 },",
          "    };",
          "    let _ = build_error.source();",
          "    assert_eq!(build_error.source(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let build_error = BuildError {",
          "        kind: BuildErrorKind::InvalidCaptureIndex { index: 42 },",
          "    };",
          "    let _ = build_error.source();",
          "}"
        ],
        "oracle": [
          "    let build_error = BuildError { kind: BuildErrorKind::InvalidCaptureIndex { index: 42 } };",
          "    let result = build_error.source();",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let build_error = BuildError {",
          "        kind: BuildErrorKind::InvalidCaptureIndex { index: 42 },",
          "    };",
          "    let _ = build_error.source();",
          "    let build_error = BuildError { kind: BuildErrorKind::InvalidCaptureIndex { index: 42 } };",
          "    let result = build_error.source();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]