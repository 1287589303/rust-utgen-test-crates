[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Clone, Debug)]",
          "    struct TestError(());",
          "    ",
          "    let error_instance = UnicodeWordBoundaryError(TestError(()));",
          "    let build_error = BuildError {",
          "        kind: BuildErrorKind::Word(error_instance),",
          "    };",
          "",
          "    let _result = build_error.source();",
          "}"
        ],
        "oracle": [
          "    let error_instance = UnicodeWordBoundaryError(TestError(()));",
          "    let build_error = BuildError {",
          "    kind: BuildErrorKind::Word(error_instance),",
          "    };",
          "    let result = build_error.source();",
          "    assert!(result.is_some());",
          "    assert!(matches!(result, Some(_)));"
        ],
        "code": [
          "{",
          "    #[derive(Clone, Debug)]",
          "    struct TestError(());",
          "    ",
          "    let error_instance = UnicodeWordBoundaryError(TestError(()));",
          "    let build_error = BuildError {",
          "        kind: BuildErrorKind::Word(error_instance),",
          "    };",
          "",
          "    let _result = build_error.source();",
          "    let error_instance = UnicodeWordBoundaryError(TestError(()));",
          "    let build_error = BuildError {",
          "    kind: BuildErrorKind::Word(error_instance),",
          "    };",
          "    let result = build_error.source();",
          "    assert!(result.is_some());",
          "    assert!(matches!(result, Some(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Clone, Debug)]",
          "    struct TestError(());",
          "    ",
          "    let error_instance = UnicodeWordBoundaryError(TestError(()));",
          "    let build_error = BuildError {",
          "        kind: BuildErrorKind::Word(error_instance),",
          "    };",
          "",
          "    let _result = build_error.source();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(&error_instance));"
        ],
        "code": [
          "{",
          "    #[derive(Clone, Debug)]",
          "    struct TestError(());",
          "    ",
          "    let error_instance = UnicodeWordBoundaryError(TestError(()));",
          "    let build_error = BuildError {",
          "        kind: BuildErrorKind::Word(error_instance),",
          "    };",
          "",
          "    let _result = build_error.source();",
          "    assert_eq!(_result, Some(&error_instance));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]