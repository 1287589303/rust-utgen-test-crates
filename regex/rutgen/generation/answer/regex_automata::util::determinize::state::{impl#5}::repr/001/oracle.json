[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_builder = StateBuilderMatches(Vec::new());",
          "    let result = state_builder.repr();",
          "}"
        ],
        "oracle": [
          "    let state_builder = StateBuilderMatches(Vec::new());",
          "    let result = state_builder.repr();",
          "    assert_eq!(result.0, &state_builder.0);"
        ],
        "code": [
          "{",
          "    let state_builder = StateBuilderMatches(Vec::new());",
          "    let result = state_builder.repr();",
          "    let state_builder = StateBuilderMatches(Vec::new());",
          "    let result = state_builder.repr();",
          "    assert_eq!(result.0, &state_builder.0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_builder = StateBuilderMatches(vec![1]);",
          "    let result = state_builder.repr();",
          "}"
        ],
        "oracle": [
          "    let state_builder = StateBuilderMatches(vec![1]);",
          "    let result = state_builder.repr();",
          "    assert_eq!(result.0, vec![1]);"
        ],
        "code": [
          "{",
          "    let state_builder = StateBuilderMatches(vec![1]);",
          "    let result = state_builder.repr();",
          "    let state_builder = StateBuilderMatches(vec![1]);",
          "    let result = state_builder.repr();",
          "    assert_eq!(result.0, vec![1]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_builder = StateBuilderMatches(vec![1, 2, 3]);",
          "    let result = state_builder.repr();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.0, vec![1, 2, 3]);"
        ],
        "code": [
          "{",
          "    let state_builder = StateBuilderMatches(vec![1, 2, 3]);",
          "    let result = state_builder.repr();",
          "    assert_eq!(result.0, vec![1, 2, 3]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let max_capacity = Vec::with_capacity(usize::MAX);",
          "    let state_builder = StateBuilderMatches(max_capacity);",
          "    let result = state_builder.repr();",
          "}"
        ],
        "oracle": [
          "    let state_builder = StateBuilderMatches(Vec::new());",
          "    let result = state_builder.repr();",
          "    assert_eq!(result.0, &state_builder.0);",
          "    let state_builder = StateBuilderMatches(vec![1, 2, 3]);",
          "    let result = state_builder.repr();",
          "    assert_eq!(result.0, &state_builder.0);",
          "    let state_builder = StateBuilderMatches(vec![0]);",
          "    let result = state_builder.repr();",
          "    assert_eq!(result.0, &state_builder.0);"
        ],
        "code": [
          "{",
          "    let max_capacity = Vec::with_capacity(usize::MAX);",
          "    let state_builder = StateBuilderMatches(max_capacity);",
          "    let result = state_builder.repr();",
          "    let state_builder = StateBuilderMatches(Vec::new());",
          "    let result = state_builder.repr();",
          "    assert_eq!(result.0, &state_builder.0);",
          "    let state_builder = StateBuilderMatches(vec![1, 2, 3]);",
          "    let result = state_builder.repr();",
          "    assert_eq!(result.0, &state_builder.0);",
          "    let state_builder = StateBuilderMatches(vec![0]);",
          "    let result = state_builder.repr();",
          "    assert_eq!(result.0, &state_builder.0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]