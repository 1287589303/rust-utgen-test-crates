[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let frame = HirFrame::AlternationBranch;",
          "    frame.unwrap_alternation_pipe();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(HirFrame::AlternationBranch.unwrap_alternation_pipe(), ());"
        ],
        "code": [
          "{",
          "    let frame = HirFrame::AlternationBranch;",
          "    frame.unwrap_alternation_pipe();",
          "    assert_eq!(HirFrame::AlternationBranch.unwrap_alternation_pipe(), ());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let frame = HirFrame::Expr(Hir { kind: HirKind::Literal, props: Properties::default() });",
          "    frame.unwrap_alternation_pipe();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(panic::catch_unwind(|| {",
          "    let frame = HirFrame::Expr(Hir { kind: HirKind::Literal, props: Properties::default() });",
          "    frame.unwrap_alternation_pipe();",
          "    }).is_err(), true);"
        ],
        "code": [
          "{",
          "    let frame = HirFrame::Expr(Hir { kind: HirKind::Literal, props: Properties::default() });",
          "    frame.unwrap_alternation_pipe();",
          "    assert_eq!(panic::catch_unwind(|| {",
          "    let frame = HirFrame::Expr(Hir { kind: HirKind::Literal, props: Properties::default() });",
          "    frame.unwrap_alternation_pipe();",
          "    }).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]