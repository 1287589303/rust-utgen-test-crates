[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: Look::StartLF as u32 };",
          "    let _ = look_set.contains_anchor_lf();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.contains_anchor_lf(), true);",
          "    let look_set = LookSet { bits: Look::EndLF as u32 };",
          "    assert_eq!(look_set.contains_anchor_lf(), true);",
          "    let look_set = LookSet { bits: Look::StartLF as u32 | Look::EndLF as u32 };",
          "    assert_eq!(look_set.contains_anchor_lf(), true);",
          "    let look_set = LookSet { bits: 0 };",
          "    assert_eq!(look_set.contains_anchor_lf(), false);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: Look::StartLF as u32 };",
          "    let _ = look_set.contains_anchor_lf();",
          "    assert_eq!(look_set.contains_anchor_lf(), true);",
          "    let look_set = LookSet { bits: Look::EndLF as u32 };",
          "    assert_eq!(look_set.contains_anchor_lf(), true);",
          "    let look_set = LookSet { bits: Look::StartLF as u32 | Look::EndLF as u32 };",
          "    assert_eq!(look_set.contains_anchor_lf(), true);",
          "    let look_set = LookSet { bits: 0 };",
          "    assert_eq!(look_set.contains_anchor_lf(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: Look::EndLF as u32 };",
          "    let _ = look_set.contains_anchor_lf();",
          "}"
        ],
        "oracle": [
          "    let look_set_with_start_lf = LookSet { bits: Look::StartLF as u32 };",
          "    assert_eq!(look_set_with_start_lf.contains_anchor_lf(), true);",
          "    ",
          "    let look_set_with_end_lf = LookSet { bits: Look::EndLF as u32 };",
          "    assert_eq!(look_set_with_end_lf.contains_anchor_lf(), true);",
          "    ",
          "    let look_set_with_both = LookSet { bits: (Look::StartLF | Look::EndLF) as u32 };",
          "    assert_eq!(look_set_with_both.contains_anchor_lf(), true);",
          "    ",
          "    let look_set_without_anchors = LookSet { bits: 0 };",
          "    assert_eq!(look_set_without_anchors.contains_anchor_lf(), false);",
          "    ",
          "    let look_set_with_no_start_lf_only = LookSet { bits: Look::End as u32 };",
          "    assert_eq!(look_set_with_no_start_lf_only.contains_anchor_lf(), false);",
          "    ",
          "    let look_set_with_mixed_anchors = LookSet { bits: (Look::Start | Look::EndLF) as u32 };",
          "    assert_eq!(look_set_with_mixed_anchors.contains_anchor_lf(), true);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: Look::EndLF as u32 };",
          "    let _ = look_set.contains_anchor_lf();",
          "    let look_set_with_start_lf = LookSet { bits: Look::StartLF as u32 };",
          "    assert_eq!(look_set_with_start_lf.contains_anchor_lf(), true);",
          "    ",
          "    let look_set_with_end_lf = LookSet { bits: Look::EndLF as u32 };",
          "    assert_eq!(look_set_with_end_lf.contains_anchor_lf(), true);",
          "    ",
          "    let look_set_with_both = LookSet { bits: (Look::StartLF | Look::EndLF) as u32 };",
          "    assert_eq!(look_set_with_both.contains_anchor_lf(), true);",
          "    ",
          "    let look_set_without_anchors = LookSet { bits: 0 };",
          "    assert_eq!(look_set_without_anchors.contains_anchor_lf(), false);",
          "    ",
          "    let look_set_with_no_start_lf_only = LookSet { bits: Look::End as u32 };",
          "    assert_eq!(look_set_with_no_start_lf_only.contains_anchor_lf(), false);",
          "    ",
          "    let look_set_with_mixed_anchors = LookSet { bits: (Look::Start | Look::EndLF) as u32 };",
          "    assert_eq!(look_set_with_mixed_anchors.contains_anchor_lf(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: (Look::StartLF | Look::EndLF) as u32 };",
          "    let _ = look_set.contains_anchor_lf();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.contains_anchor_lf(), true);",
          "    let look_set = LookSet { bits: (Look::StartLF) as u32 };",
          "    assert_eq!(look_set.contains_anchor_lf(), true);",
          "    let look_set = LookSet { bits: (Look::EndLF) as u32 };",
          "    assert_eq!(look_set.contains_anchor_lf(), true);",
          "    let look_set = LookSet { bits: (Look::StartLF | Look::End) as u32 };",
          "    assert_eq!(look_set.contains_anchor_lf(), true);",
          "    let look_set = LookSet { bits: (Look::End | Look::EndLF) as u32 };",
          "    assert_eq!(look_set.contains_anchor_lf(), true);",
          "    let look_set = LookSet { bits: 0 };",
          "    assert_eq!(look_set.contains_anchor_lf(), false);",
          "    let look_set = LookSet { bits: (Look::End) as u32 };",
          "    assert_eq!(look_set.contains_anchor_lf(), false);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: (Look::StartLF | Look::EndLF) as u32 };",
          "    let _ = look_set.contains_anchor_lf();",
          "    assert_eq!(look_set.contains_anchor_lf(), true);",
          "    let look_set = LookSet { bits: (Look::StartLF) as u32 };",
          "    assert_eq!(look_set.contains_anchor_lf(), true);",
          "    let look_set = LookSet { bits: (Look::EndLF) as u32 };",
          "    assert_eq!(look_set.contains_anchor_lf(), true);",
          "    let look_set = LookSet { bits: (Look::StartLF | Look::End) as u32 };",
          "    assert_eq!(look_set.contains_anchor_lf(), true);",
          "    let look_set = LookSet { bits: (Look::End | Look::EndLF) as u32 };",
          "    assert_eq!(look_set.contains_anchor_lf(), true);",
          "    let look_set = LookSet { bits: 0 };",
          "    assert_eq!(look_set.contains_anchor_lf(), false);",
          "    let look_set = LookSet { bits: (Look::End) as u32 };",
          "    assert_eq!(look_set.contains_anchor_lf(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: 0 };",
          "    let _ = look_set.contains_anchor_lf();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.contains(Look::StartLF), true);",
          "    assert_eq!(look_set.contains(Look::EndLF), false);",
          "    assert_eq!(look_set.contains_anchor_lf(), true);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: 0 };",
          "    let _ = look_set.contains_anchor_lf();",
          "    assert_eq!(look_set.contains(Look::StartLF), true);",
          "    assert_eq!(look_set.contains(Look::EndLF), false);",
          "    assert_eq!(look_set.contains_anchor_lf(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]