[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let r = [",
          "        Utf8Range { start: 0, end: 1 },",
          "        Utf8Range { start: 2, end: 3 },",
          "        Utf8Range { start: 4, end: 5 },",
          "    ];",
          "    let seq = Utf8Sequence::Three(r);",
          "    let _ = format!(\"{:?}\", seq);",
          "}"
        ],
        "oracle": [
          "    let r = [",
          "    Utf8Range { start: 0, end: 1 },",
          "    Utf8Range { start: 2, end: 3 },",
          "    Utf8Range { start: 4, end: 5 },",
          "    ];",
          "    let seq = Utf8Sequence::Three(r);",
          "    assert_eq!(format!(\"{:?}\", seq), \"Utf8Range { start: 0, end: 1 }Utf8Range { start: 2, end: 3 }Utf8Range { start: 4, end: 5 }\");"
        ],
        "code": [
          "{",
          "    let r = [",
          "        Utf8Range { start: 0, end: 1 },",
          "        Utf8Range { start: 2, end: 3 },",
          "        Utf8Range { start: 4, end: 5 },",
          "    ];",
          "    let seq = Utf8Sequence::Three(r);",
          "    let _ = format!(\"{:?}\", seq);",
          "    let r = [",
          "    Utf8Range { start: 0, end: 1 },",
          "    Utf8Range { start: 2, end: 3 },",
          "    Utf8Range { start: 4, end: 5 },",
          "    ];",
          "    let seq = Utf8Sequence::Three(r);",
          "    assert_eq!(format!(\"{:?}\", seq), \"Utf8Range { start: 0, end: 1 }Utf8Range { start: 2, end: 3 }Utf8Range { start: 4, end: 5 }\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let r = [",
          "        Utf8Range { start: 10, end: 20 },",
          "        Utf8Range { start: 30, end: 40 },",
          "        Utf8Range { start: 50, end: 60 },",
          "    ];",
          "    let seq = Utf8Sequence::Three(r);",
          "    let _ = format!(\"{:?}\", seq);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{:?}\", Utf8Sequence::Three([Utf8Range { start: 10, end: 20 }, Utf8Range { start: 30, end: 40 }, Utf8Range { start: 50, end: 60 }])), \"Utf8Range { start: 10, end: 20 }Utf8Range { start: 30, end: 40 }Utf8Range { start: 50, end: 60 }\");"
        ],
        "code": [
          "{",
          "    let r = [",
          "        Utf8Range { start: 10, end: 20 },",
          "        Utf8Range { start: 30, end: 40 },",
          "        Utf8Range { start: 50, end: 60 },",
          "    ];",
          "    let seq = Utf8Sequence::Three(r);",
          "    let _ = format!(\"{:?}\", seq);",
          "    assert_eq!(format!(\"{:?}\", Utf8Sequence::Three([Utf8Range { start: 10, end: 20 }, Utf8Range { start: 30, end: 40 }, Utf8Range { start: 50, end: 60 }])), \"Utf8Range { start: 10, end: 20 }Utf8Range { start: 30, end: 40 }Utf8Range { start: 50, end: 60 }\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let r = [",
          "        Utf8Range { start: 200, end: 210 },",
          "        Utf8Range { start: 220, end: 225 },",
          "        Utf8Range { start: 230, end: 240 },",
          "    ];",
          "    let seq = Utf8Sequence::Three(r);",
          "    let _ = format!(\"{:?}\", seq);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{:?}\", Utf8Sequence::Three([",
          "    Utf8Range { start: 200, end: 210 },",
          "    Utf8Range { start: 220, end: 225 },",
          "    Utf8Range { start: 230, end: 240 }",
          "    ])), \"200..=210220..=225230..=240\");"
        ],
        "code": [
          "{",
          "    let r = [",
          "        Utf8Range { start: 200, end: 210 },",
          "        Utf8Range { start: 220, end: 225 },",
          "        Utf8Range { start: 230, end: 240 },",
          "    ];",
          "    let seq = Utf8Sequence::Three(r);",
          "    let _ = format!(\"{:?}\", seq);",
          "    assert_eq!(format!(\"{:?}\", Utf8Sequence::Three([",
          "    Utf8Range { start: 200, end: 210 },",
          "    Utf8Range { start: 220, end: 225 },",
          "    Utf8Range { start: 230, end: 240 }",
          "    ])), \"200..=210220..=225230..=240\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let r = [",
          "        Utf8Range { start: 255, end: 255 },",
          "        Utf8Range { start: 255, end: 255 },",
          "        Utf8Range { start: 255, end: 255 },",
          "    ];",
          "    let seq = Utf8Sequence::Three(r);",
          "    let _ = format!(\"{:?}\", seq);",
          "}"
        ],
        "oracle": [
          "    let r = [",
          "    Utf8Range { start: 255, end: 255 },",
          "    Utf8Range { start: 255, end: 255 },",
          "    Utf8Range { start: 255, end: 255 },",
          "    ];",
          "    let seq = Utf8Sequence::Three(r);",
          "    let result = format!(\"{:?}\", seq);",
          "    assert_eq!(result, \"Utf8Range { start: 255, end: 255 }Utf8Range { start: 255, end: 255 }Utf8Range { start: 255, end: 255 }\");"
        ],
        "code": [
          "{",
          "    let r = [",
          "        Utf8Range { start: 255, end: 255 },",
          "        Utf8Range { start: 255, end: 255 },",
          "        Utf8Range { start: 255, end: 255 },",
          "    ];",
          "    let seq = Utf8Sequence::Three(r);",
          "    let _ = format!(\"{:?}\", seq);",
          "    let r = [",
          "    Utf8Range { start: 255, end: 255 },",
          "    Utf8Range { start: 255, end: 255 },",
          "    Utf8Range { start: 255, end: 255 },",
          "    ];",
          "    let seq = Utf8Sequence::Three(r);",
          "    let result = format!(\"{:?}\", seq);",
          "    assert_eq!(result, \"Utf8Range { start: 255, end: 255 }Utf8Range { start: 255, end: 255 }Utf8Range { start: 255, end: 255 }\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let r = [",
          "        Utf8Range { start: 0, end: 255 },",
          "        Utf8Range { start: 255, end: 255 },",
          "        Utf8Range { start: 0, end: 0 },",
          "    ];",
          "    let seq = Utf8Sequence::Three(r);",
          "    let _ = format!(\"{:?}\", seq);",
          "}"
        ],
        "oracle": [
          "    let r = [",
          "    Utf8Range { start: 0, end: 255 },",
          "    Utf8Range { start: 255, end: 255 },",
          "    Utf8Range { start: 0, end: 0 },",
          "    ];",
          "    let seq = Utf8Sequence::Three(r);",
          "    assert_eq!(format!(\"{:?}\", seq), \"Utf8Range { start: 0, end: 255 }Utf8Range { start: 255, end: 255 }Utf8Range { start: 0, end: 0 }\");"
        ],
        "code": [
          "{",
          "    let r = [",
          "        Utf8Range { start: 0, end: 255 },",
          "        Utf8Range { start: 255, end: 255 },",
          "        Utf8Range { start: 0, end: 0 },",
          "    ];",
          "    let seq = Utf8Sequence::Three(r);",
          "    let _ = format!(\"{:?}\", seq);",
          "    let r = [",
          "    Utf8Range { start: 0, end: 255 },",
          "    Utf8Range { start: 255, end: 255 },",
          "    Utf8Range { start: 0, end: 0 },",
          "    ];",
          "    let seq = Utf8Sequence::Three(r);",
          "    assert_eq!(format!(\"{:?}\", seq), \"Utf8Range { start: 0, end: 255 }Utf8Range { start: 255, end: 255 }Utf8Range { start: 0, end: 0 }\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]