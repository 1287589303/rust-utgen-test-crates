[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[cfg(feature = \"alloc\")]",
          "    {",
          "        let mut seen = Seen {",
          "            set: alloc::collections::BTreeSet::new(),",
          "        };",
          "        let state_id = StateID(SmallIndex::new(1));",
          "        seen.insert(state_id);",
          "        ",
          "        let result = seen.contains(&state_id);",
          "    }",
          "}"
        ],
        "oracle": [
          "    let mut seen = Seen { set: alloc::collections::BTreeSet::new() };",
          "    let state_id = StateID(SmallIndex::new(1));",
          "    seen.insert(state_id);",
          "    assert!(seen.contains(&state_id));",
          "    let another_state_id = StateID(SmallIndex::new(2));",
          "    assert!(!seen.contains(&another_state_id));",
          "    seen.insert(another_state_id);",
          "    assert!(seen.contains(&another_state_id));"
        ],
        "code": [
          "{",
          "    #[cfg(feature = \"alloc\")]",
          "    {",
          "        let mut seen = Seen {",
          "            set: alloc::collections::BTreeSet::new(),",
          "        };",
          "        let state_id = StateID(SmallIndex::new(1));",
          "        seen.insert(state_id);",
          "        ",
          "        let result = seen.contains(&state_id);",
          "    }",
          "    let mut seen = Seen { set: alloc::collections::BTreeSet::new() };",
          "    let state_id = StateID(SmallIndex::new(1));",
          "    seen.insert(state_id);",
          "    assert!(seen.contains(&state_id));",
          "    let another_state_id = StateID(SmallIndex::new(2));",
          "    assert!(!seen.contains(&another_state_id));",
          "    seen.insert(another_state_id);",
          "    assert!(seen.contains(&another_state_id));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[cfg(feature = \"alloc\")]",
          "    {",
          "        let mut seen = Seen {",
          "            set: alloc::collections::BTreeSet::new(),",
          "        };",
          "        let existing_id = StateID(SmallIndex::new(1));",
          "        seen.insert(existing_id);",
          "        let non_existing_id = StateID(SmallIndex::new(2));",
          "        ",
          "        let result = seen.contains(&non_existing_id);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    let result_existing = seen.contains(&existing_id);",
          "    assert_eq!(result_existing, true);",
          "    let empty_seen = Seen::new();",
          "    let result_empty = empty_seen.contains(&existing_id);",
          "    assert_eq!(result_empty, false);"
        ],
        "code": [
          "{",
          "    #[cfg(feature = \"alloc\")]",
          "    {",
          "        let mut seen = Seen {",
          "            set: alloc::collections::BTreeSet::new(),",
          "        };",
          "        let existing_id = StateID(SmallIndex::new(1));",
          "        seen.insert(existing_id);",
          "        let non_existing_id = StateID(SmallIndex::new(2));",
          "        ",
          "        let result = seen.contains(&non_existing_id);",
          "    }",
          "    assert_eq!(result, false);",
          "    let result_existing = seen.contains(&existing_id);",
          "    assert_eq!(result_existing, true);",
          "    let empty_seen = Seen::new();",
          "    let result_empty = empty_seen.contains(&existing_id);",
          "    assert_eq!(result_empty, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[cfg(feature = \"alloc\")]",
          "    {",
          "        let mut seen = Seen {",
          "            set: alloc::collections::BTreeSet::new(),",
          "        };",
          "        let default_id = StateID(SmallIndex::default());",
          "        ",
          "        let result = seen.contains(&default_id);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    #[cfg(feature = \"alloc\")]",
          "    {",
          "        let mut seen = Seen {",
          "            set: alloc::collections::BTreeSet::new(),",
          "        };",
          "        let default_id = StateID(SmallIndex::default());",
          "        ",
          "        let result = seen.contains(&default_id);",
          "    }",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]