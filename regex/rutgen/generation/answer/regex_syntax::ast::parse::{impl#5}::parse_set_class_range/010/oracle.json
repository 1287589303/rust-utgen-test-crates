[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(Position { offset: 0, line: 1, column: 1 }),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \"z-a\",",
          "    };",
          "",
          "    let _result = parser.parse_set_class_range();",
          "}"
        ],
        "oracle": [
          "    let parser = ParserI { parser: Parser { pos: Cell::new(Position { offset: 0, line: 1, column: 1 }), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"z-a\", };",
          "    assert!(parser.parse_set_class_item().is_ok());",
          "    assert!(!parser.is_eof());",
          "    assert_eq!(parser.char(), '-');",
          "    assert!(!parser.peek_space().map_or(true, |c| c == ']' || c == '-'));",
          "    assert!(parser.bump_and_bump_space());",
          "    assert!(parser.parse_set_class_item().is_ok());",
          "    assert!(prim1.into_class_literal(&parser).is_ok());",
          "    assert!(prim2.into_class_literal(&parser).is_ok());",
          "    assert!(!range.is_valid());",
          "    assert_eq!(parser.parse_set_class_range().err().unwrap().kind, ast::ErrorKind::ClassRangeInvalid);"
        ],
        "code": [
          "{",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(Position { offset: 0, line: 1, column: 1 }),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \"z-a\",",
          "    };",
          "",
          "    let _result = parser.parse_set_class_range();",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(Position { offset: 0, line: 1, column: 1 }), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"z-a\", };",
          "    assert!(parser.parse_set_class_item().is_ok());",
          "    assert!(!parser.is_eof());",
          "    assert_eq!(parser.char(), '-');",
          "    assert!(!parser.peek_space().map_or(true, |c| c == ']' || c == '-'));",
          "    assert!(parser.bump_and_bump_space());",
          "    assert!(parser.parse_set_class_item().is_ok());",
          "    assert!(prim1.into_class_literal(&parser).is_ok());",
          "    assert!(prim2.into_class_literal(&parser).is_ok());",
          "    assert!(!range.is_valid());",
          "    assert_eq!(parser.parse_set_class_range().err().unwrap().kind, ast::ErrorKind::ClassRangeInvalid);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(Position { offset: 0, line: 1, column: 1 }),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \"z - a\",",
          "    };",
          "",
          "    let _result = parser.parse_set_class_range();",
          "}"
        ],
        "oracle": [
          "    let parser = ParserI { parser: Parser { pos: Cell::new(Position { offset: 0, line: 1, column: 1 }), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"z - a\", };",
          "    let prim1_result = parser.parse_set_class_item();",
          "    let is_eof = parser.is_eof();",
          "    let char = parser.char();",
          "    let peek_space_1 = parser.peek_space();",
          "    let peek_space_2 = parser.peek_space();",
          "    let bump_and_bump_space_result = parser.bump_and_bump_space();",
          "    let prim2_result = parser.parse_set_class_item();",
          "    let prim1_literal_result = prim1_result.into_class_literal(&parser);",
          "    let prim2_literal_result = prim2_result.into_class_literal(&parser);",
          "    let range = ast::ClassSetRange { span: Span::new(prim1_result.span(), prim2_result.span()), start: prim1_literal_result, end: prim2_literal_result };",
          "    let is_range_valid = range.is_valid();",
          "    assert_eq!(parser.parse_set_class_range(), Err(parser.error(range.span, ast::ErrorKind::ClassRangeInvalid)));"
        ],
        "code": [
          "{",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(Position { offset: 0, line: 1, column: 1 }),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \"z - a\",",
          "    };",
          "",
          "    let _result = parser.parse_set_class_range();",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(Position { offset: 0, line: 1, column: 1 }), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"z - a\", };",
          "    let prim1_result = parser.parse_set_class_item();",
          "    let is_eof = parser.is_eof();",
          "    let char = parser.char();",
          "    let peek_space_1 = parser.peek_space();",
          "    let peek_space_2 = parser.peek_space();",
          "    let bump_and_bump_space_result = parser.bump_and_bump_space();",
          "    let prim2_result = parser.parse_set_class_item();",
          "    let prim1_literal_result = prim1_result.into_class_literal(&parser);",
          "    let prim2_literal_result = prim2_result.into_class_literal(&parser);",
          "    let range = ast::ClassSetRange { span: Span::new(prim1_result.span(), prim2_result.span()), start: prim1_literal_result, end: prim2_literal_result };",
          "    let is_range_valid = range.is_valid();",
          "    assert_eq!(parser.parse_set_class_range(), Err(parser.error(range.span, ast::ErrorKind::ClassRangeInvalid)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(Position { offset: 0, line: 1, column: 1 }),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \"2-1\",",
          "    };",
          "",
          "    let _result = parser.parse_set_class_range();",
          "}"
        ],
        "oracle": [
          "    let parser = ParserI { parser: Parser { pos: Cell::new(Position { offset: 0, line: 1, column: 1 }), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"2-1\", }; let result = parser.parse_set_class_range(); assert!(result.is_err()); assert_eq!(result.err().unwrap().kind, ast::ErrorKind::ClassRangeInvalid);"
        ],
        "code": [
          "{",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(Position { offset: 0, line: 1, column: 1 }),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \"2-1\",",
          "    };",
          "",
          "    let _result = parser.parse_set_class_range();",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(Position { offset: 0, line: 1, column: 1 }), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"2-1\", }; let result = parser.parse_set_class_range(); assert!(result.is_err()); assert_eq!(result.err().unwrap().kind, ast::ErrorKind::ClassRangeInvalid);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]