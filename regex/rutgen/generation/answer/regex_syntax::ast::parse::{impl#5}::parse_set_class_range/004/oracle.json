[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let prim1 = Primitive::Literal(Literal {",
          "        span: Span::new(Position { offset: 0, line: 1, column: 1 }, Position { offset: 1, line: 1, column: 2 }),",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: 'a',",
          "    });",
          "    ",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(Position { offset: 0, line: 1, column: 1 }),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 0,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \"-]\",",
          "    };",
          "    ",
          "    let _ = parser.parse_set_class_range();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(prim1.into_class_set_item(&parser), Ok(ClassSetItem::Literal(prim1)));",
          "    assert!(parser.is_eof() == false);",
          "    assert!(parser.char() == '-');",
          "    assert!(parser.peek_space() == Some(']'));",
          "    let result = parser.parse_set_class_range();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().kind, ErrorKind::ClassRangeInvalid);"
        ],
        "code": [
          "{",
          "    let prim1 = Primitive::Literal(Literal {",
          "        span: Span::new(Position { offset: 0, line: 1, column: 1 }, Position { offset: 1, line: 1, column: 2 }),",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: 'a',",
          "    });",
          "    ",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(Position { offset: 0, line: 1, column: 1 }),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 0,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \"-]\",",
          "    };",
          "    ",
          "    let _ = parser.parse_set_class_range();",
          "    assert_eq!(prim1.into_class_set_item(&parser), Ok(ClassSetItem::Literal(prim1)));",
          "    assert!(parser.is_eof() == false);",
          "    assert!(parser.char() == '-');",
          "    assert!(parser.peek_space() == Some(']'));",
          "    let result = parser.parse_set_class_range();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().kind, ErrorKind::ClassRangeInvalid);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let prim1 = Primitive::Literal(Literal {",
          "        span: Span::new(Position { offset: 0, line: 1, column: 1 }, Position { offset: 1, line: 1, column: 2 }),",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: 'a',",
          "    });",
          "",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(Position { offset: 0, line: 1, column: 1 }),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 0,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \"--\",",
          "    };",
          "",
          "    let _ = parser.parse_set_class_range();",
          "}"
        ],
        "oracle": [
          "    assert!(parser.parse_set_class_range().is_ok());",
          "    let result = parser.parse_set_class_range().unwrap();",
          "    match result {",
          "    ast::ClassSetItem::Range(range) => {",
          "    assert_eq!(range.start.c, 'a');",
          "    assert_eq!(range.end.c, 'a');",
          "    assert!(range.is_valid());",
          "    },",
          "    _ => panic!(\"Expected ClassSetItem::Range\"),",
          "    }",
          "    assert_eq!(parser.pos.get().offset, 2);",
          "    assert_eq!(parser.comments.borrow().len(), 0);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(parser.stack_group.borrow().is_empty());",
          "    assert!(parser.stack_class.borrow().is_empty());"
        ],
        "code": [
          "{",
          "    let prim1 = Primitive::Literal(Literal {",
          "        span: Span::new(Position { offset: 0, line: 1, column: 1 }, Position { offset: 1, line: 1, column: 2 }),",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: 'a',",
          "    });",
          "",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(Position { offset: 0, line: 1, column: 1 }),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 0,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \"--\",",
          "    };",
          "",
          "    let _ = parser.parse_set_class_range();",
          "    assert!(parser.parse_set_class_range().is_ok());",
          "    let result = parser.parse_set_class_range().unwrap();",
          "    match result {",
          "    ast::ClassSetItem::Range(range) => {",
          "    assert_eq!(range.start.c, 'a');",
          "    assert_eq!(range.end.c, 'a');",
          "    assert!(range.is_valid());",
          "    },",
          "    _ => panic!(\"Expected ClassSetItem::Range\"),",
          "    }",
          "    assert_eq!(parser.pos.get().offset, 2);",
          "    assert_eq!(parser.comments.borrow().len(), 0);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(parser.stack_group.borrow().is_empty());",
          "    assert!(parser.stack_class.borrow().is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]