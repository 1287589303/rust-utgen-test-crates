[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pos1 = Position { offset: 0, line: 1, column: 1 };",
          "    let pos2 = Position { offset: 3, line: 1, column: 4 };",
          "    let span1 = Span::new(pos1, pos1);",
          "    let span2 = Span::new(pos2, pos2);",
          "",
          "    let prim1 = Primitive::Literal(Literal {",
          "        span: span1.clone(),",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: 'a',",
          "    });",
          "",
          "    let prim2 = Primitive::Literal(Literal {",
          "        span: span2.clone(),",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: 'c',",
          "    });",
          "",
          "    let parser = Parser {",
          "        pos: Cell::new(pos1),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern: \"a-c\",",
          "    };",
          "",
          "    let _ = parser_i.parse_set_class_range();",
          "}"
        ],
        "oracle": [
          "    let pos1 = Position { offset: 0, line: 1, column: 1 };",
          "    let pos2 = Position { offset: 3, line: 1, column: 4 };",
          "    let span1 = Span::new(pos1, pos1);",
          "    let span2 = Span::new(pos2, pos2);",
          "    ",
          "    let prim1 = Primitive::Literal(Literal {",
          "    span: span1.clone(),",
          "    kind: ast::LiteralKind::Verbatim,",
          "    c: 'a',",
          "    });",
          "    ",
          "    let prim2 = Primitive::Literal(Literal {",
          "    span: span2.clone(),",
          "    kind: ast::LiteralKind::Verbatim,",
          "    c: 'c',",
          "    });",
          "    ",
          "    let mut parser = Parser {",
          "    pos: Cell::new(pos1),",
          "    capture_index: Cell::new(0),",
          "    nest_limit: 10,",
          "    octal: false,",
          "    initial_ignore_whitespace: false,",
          "    empty_min_range: false,",
          "    ignore_whitespace: Cell::new(false),",
          "    comments: RefCell::new(vec![]),",
          "    stack_group: RefCell::new(vec![]),",
          "    stack_class: RefCell::new(vec![]),",
          "    capture_names: RefCell::new(vec![]),",
          "    scratch: RefCell::new(String::new()),",
          "    };",
          "    ",
          "    let parser_i = ParserI {",
          "    parser: &mut parser,",
          "    pattern: \"a-c\",",
          "    };",
          "    ",
          "    parser_i.parser.bump_and_bump_space = || true;",
          "    parser_i.parser.char = || '-';",
          "    parser_i.parser.is_eof = || false;",
          "    parser_i.parser.peek_space = || None;",
          "    parser_i.parser.parse_set_class_item = || Ok(prim1.clone());",
          "    parser_i.parser.parse_set_class_item = || Ok(prim2.clone());",
          "    prim1.into_class_literal = || Ok(prim1.clone());",
          "    prim2.into_class_literal = || Ok(prim2.clone());",
          "    ",
          "    let result = parser_i.parse_set_class_range();",
          "    assert_eq!(result, Ok(ast::ClassSetItem::Range(ast::ClassSetRange {",
          "    span: Span::new(span1.start, span2.end),",
          "    start: prim1.into_class_literal(&parser_i).unwrap(),",
          "    end: prim2.into_class_literal(&parser_i).unwrap(),",
          "    })));"
        ],
        "code": [
          "{",
          "    let pos1 = Position { offset: 0, line: 1, column: 1 };",
          "    let pos2 = Position { offset: 3, line: 1, column: 4 };",
          "    let span1 = Span::new(pos1, pos1);",
          "    let span2 = Span::new(pos2, pos2);",
          "",
          "    let prim1 = Primitive::Literal(Literal {",
          "        span: span1.clone(),",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: 'a',",
          "    });",
          "",
          "    let prim2 = Primitive::Literal(Literal {",
          "        span: span2.clone(),",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: 'c',",
          "    });",
          "",
          "    let parser = Parser {",
          "        pos: Cell::new(pos1),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern: \"a-c\",",
          "    };",
          "",
          "    let _ = parser_i.parse_set_class_range();",
          "    let pos1 = Position { offset: 0, line: 1, column: 1 };",
          "    let pos2 = Position { offset: 3, line: 1, column: 4 };",
          "    let span1 = Span::new(pos1, pos1);",
          "    let span2 = Span::new(pos2, pos2);",
          "    ",
          "    let prim1 = Primitive::Literal(Literal {",
          "    span: span1.clone(),",
          "    kind: ast::LiteralKind::Verbatim,",
          "    c: 'a',",
          "    });",
          "    ",
          "    let prim2 = Primitive::Literal(Literal {",
          "    span: span2.clone(),",
          "    kind: ast::LiteralKind::Verbatim,",
          "    c: 'c',",
          "    });",
          "    ",
          "    let mut parser = Parser {",
          "    pos: Cell::new(pos1),",
          "    capture_index: Cell::new(0),",
          "    nest_limit: 10,",
          "    octal: false,",
          "    initial_ignore_whitespace: false,",
          "    empty_min_range: false,",
          "    ignore_whitespace: Cell::new(false),",
          "    comments: RefCell::new(vec![]),",
          "    stack_group: RefCell::new(vec![]),",
          "    stack_class: RefCell::new(vec![]),",
          "    capture_names: RefCell::new(vec![]),",
          "    scratch: RefCell::new(String::new()),",
          "    };",
          "    ",
          "    let parser_i = ParserI {",
          "    parser: &mut parser,",
          "    pattern: \"a-c\",",
          "    };",
          "    ",
          "    parser_i.parser.bump_and_bump_space = || true;",
          "    parser_i.parser.char = || '-';",
          "    parser_i.parser.is_eof = || false;",
          "    parser_i.parser.peek_space = || None;",
          "    parser_i.parser.parse_set_class_item = || Ok(prim1.clone());",
          "    parser_i.parser.parse_set_class_item = || Ok(prim2.clone());",
          "    prim1.into_class_literal = || Ok(prim1.clone());",
          "    prim2.into_class_literal = || Ok(prim2.clone());",
          "    ",
          "    let result = parser_i.parse_set_class_range();",
          "    assert_eq!(result, Ok(ast::ClassSetItem::Range(ast::ClassSetRange {",
          "    span: Span::new(span1.start, span2.end),",
          "    start: prim1.into_class_literal(&parser_i).unwrap(),",
          "    end: prim2.into_class_literal(&parser_i).unwrap(),",
          "    })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pos1 = Position { offset: 0, line: 1, column: 1 };",
          "    let pos2 = Position { offset: 5, line: 1, column: 6 };",
          "    let span1 = Span::new(pos1, pos1);",
          "    let span2 = Span::new(pos2, pos2);",
          "",
          "    let prim1 = Primitive::Literal(Literal {",
          "        span: span1.clone(),",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: 'g',",
          "    });",
          "",
          "    let prim2 = Primitive::Literal(Literal {",
          "        span: span2.clone(),",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: 'j',",
          "    });",
          "",
          "    let parser = Parser {",
          "        pos: Cell::new(pos1),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern: \"g-j\",",
          "    };",
          "",
          "    let _ = parser_i.parse_set_class_range();",
          "}"
        ],
        "oracle": [
          "    let pos1 = Position { offset: 0, line: 1, column: 1 };",
          "    let pos2 = Position { offset: 5, line: 1, column: 6 };",
          "    let span1 = Span::new(pos1, pos1);",
          "    let span2 = Span::new(pos2, pos2);",
          "    ",
          "    let prim1 = Primitive::Literal(Literal {",
          "    span: span1.clone(),",
          "    kind: ast::LiteralKind::Verbatim,",
          "    c: 'g',",
          "    });",
          "    ",
          "    let prim2 = Primitive::Literal(Literal {",
          "    span: span2.clone(),",
          "    kind: ast::LiteralKind::Verbatim,",
          "    c: 'j',",
          "    });",
          "    ",
          "    assert!(parser_i.parse_set_class_item().is_ok());",
          "    assert!(!parser_i.is_eof());",
          "    assert_eq!(parser_i.char(), '-');",
          "    assert_ne!(parser_i.peek_space(), Some(']'));",
          "    assert_ne!(parser_i.peek_space(), Some('-'));",
          "    assert!(parser_i.bump_and_bump_space());",
          "    assert!(parser_i.parse_set_class_item().is_ok());",
          "    assert!(prim1.into_class_literal(&parser_i).is_ok());",
          "    assert!(prim2.into_class_literal(&parser_i).is_ok());",
          "    let range = ast::ClassSetRange {",
          "    span: Span::new(prim1.span().start, prim2.span().end),",
          "    start: prim1.into_class_literal(&parser_i).unwrap(),",
          "    end: prim2.into_class_literal(&parser_i).unwrap(),",
          "    };",
          "    assert!(range.is_valid());",
          "    let result = parser_i.parse_set_class_range();",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), ast::ClassSetItem::Range(range));"
        ],
        "code": [
          "{",
          "    let pos1 = Position { offset: 0, line: 1, column: 1 };",
          "    let pos2 = Position { offset: 5, line: 1, column: 6 };",
          "    let span1 = Span::new(pos1, pos1);",
          "    let span2 = Span::new(pos2, pos2);",
          "",
          "    let prim1 = Primitive::Literal(Literal {",
          "        span: span1.clone(),",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: 'g',",
          "    });",
          "",
          "    let prim2 = Primitive::Literal(Literal {",
          "        span: span2.clone(),",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: 'j',",
          "    });",
          "",
          "    let parser = Parser {",
          "        pos: Cell::new(pos1),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern: \"g-j\",",
          "    };",
          "",
          "    let _ = parser_i.parse_set_class_range();",
          "    let pos1 = Position { offset: 0, line: 1, column: 1 };",
          "    let pos2 = Position { offset: 5, line: 1, column: 6 };",
          "    let span1 = Span::new(pos1, pos1);",
          "    let span2 = Span::new(pos2, pos2);",
          "    ",
          "    let prim1 = Primitive::Literal(Literal {",
          "    span: span1.clone(),",
          "    kind: ast::LiteralKind::Verbatim,",
          "    c: 'g',",
          "    });",
          "    ",
          "    let prim2 = Primitive::Literal(Literal {",
          "    span: span2.clone(),",
          "    kind: ast::LiteralKind::Verbatim,",
          "    c: 'j',",
          "    });",
          "    ",
          "    assert!(parser_i.parse_set_class_item().is_ok());",
          "    assert!(!parser_i.is_eof());",
          "    assert_eq!(parser_i.char(), '-');",
          "    assert_ne!(parser_i.peek_space(), Some(']'));",
          "    assert_ne!(parser_i.peek_space(), Some('-'));",
          "    assert!(parser_i.bump_and_bump_space());",
          "    assert!(parser_i.parse_set_class_item().is_ok());",
          "    assert!(prim1.into_class_literal(&parser_i).is_ok());",
          "    assert!(prim2.into_class_literal(&parser_i).is_ok());",
          "    let range = ast::ClassSetRange {",
          "    span: Span::new(prim1.span().start, prim2.span().end),",
          "    start: prim1.into_class_literal(&parser_i).unwrap(),",
          "    end: prim2.into_class_literal(&parser_i).unwrap(),",
          "    };",
          "    assert!(range.is_valid());",
          "    let result = parser_i.parse_set_class_range();",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), ast::ClassSetItem::Range(range));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pos1 = Position { offset: 0, line: 1, column: 1 };",
          "    let pos2 = Position { offset: 3, line: 1, column: 4 };",
          "    let span1 = Span::new(pos1, pos1);",
          "    let span2 = Span::new(pos2, pos2);",
          "",
          "    let prim1 = Primitive::Literal(Literal {",
          "        span: span1.clone(),",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: 'A',",
          "    });",
          "",
          "    let prim2 = Primitive::Literal(Literal {",
          "        span: span2.clone(),",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: 'C',",
          "    });",
          "",
          "    let parser = Parser {",
          "        pos: Cell::new(pos1),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern: \"A-C\",",
          "    };",
          "",
          "    let _ = parser_i.parse_set_class_range();",
          "}"
        ],
        "oracle": [
          "    parser_i.parse_set_class_item().unwrap();",
          "    assert_eq!(parser_i.is_eof(), false);",
          "    assert_eq!(parser_i.char(), '-');",
          "    assert_eq!(parser_i.peek_space(), None);",
          "    assert!(parser_i.bump_and_bump_space());",
          "    parser_i.parse_set_class_item().unwrap();",
          "    prim1.into_class_literal(&parser_i).unwrap();",
          "    prim2.into_class_literal(&parser_i).unwrap();",
          "    let range = ast::ClassSetRange {",
          "    span: Span::new(prim1.span().start, prim2.span().end),",
          "    start: prim1.into_class_literal(&parser_i).unwrap(),",
          "    end: prim2.into_class_literal(&parser_i).unwrap(),",
          "    };",
          "    assert!(range.is_valid());",
          "    let result = parser_i.parse_set_class_range();",
          "    assert_eq!(result, Ok(ast::ClassSetItem::Range(range)));"
        ],
        "code": [
          "{",
          "    let pos1 = Position { offset: 0, line: 1, column: 1 };",
          "    let pos2 = Position { offset: 3, line: 1, column: 4 };",
          "    let span1 = Span::new(pos1, pos1);",
          "    let span2 = Span::new(pos2, pos2);",
          "",
          "    let prim1 = Primitive::Literal(Literal {",
          "        span: span1.clone(),",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: 'A',",
          "    });",
          "",
          "    let prim2 = Primitive::Literal(Literal {",
          "        span: span2.clone(),",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: 'C',",
          "    });",
          "",
          "    let parser = Parser {",
          "        pos: Cell::new(pos1),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern: \"A-C\",",
          "    };",
          "",
          "    let _ = parser_i.parse_set_class_range();",
          "    parser_i.parse_set_class_item().unwrap();",
          "    assert_eq!(parser_i.is_eof(), false);",
          "    assert_eq!(parser_i.char(), '-');",
          "    assert_eq!(parser_i.peek_space(), None);",
          "    assert!(parser_i.bump_and_bump_space());",
          "    parser_i.parse_set_class_item().unwrap();",
          "    prim1.into_class_literal(&parser_i).unwrap();",
          "    prim2.into_class_literal(&parser_i).unwrap();",
          "    let range = ast::ClassSetRange {",
          "    span: Span::new(prim1.span().start, prim2.span().end),",
          "    start: prim1.into_class_literal(&parser_i).unwrap(),",
          "    end: prim2.into_class_literal(&parser_i).unwrap(),",
          "    };",
          "    assert!(range.is_valid());",
          "    let result = parser_i.parse_set_class_range();",
          "    assert_eq!(result, Ok(ast::ClassSetItem::Range(range)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pos1 = Position { offset: 0, line: 1, column: 1 };",
          "    let pos2 = Position { offset: 5, line: 1, column: 6 };",
          "    let span1 = Span::new(pos1, pos1);",
          "    let span2 = Span::new(pos2, pos2);",
          "",
          "    let prim1 = Primitive::Literal(Literal {",
          "        span: span1.clone(),",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: 'h',",
          "    });",
          "",
          "    let prim2 = Primitive::Literal(Literal {",
          "        span: span2.clone(),",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: 'k',",
          "    });",
          "",
          "    let parser = Parser {",
          "        pos: Cell::new(pos1),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern: \"h - k\",",
          "    };",
          "",
          "    let _ = parser_i.parse_set_class_range();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser_i.parse_set_class_item().is_ok(), true);",
          "    assert_eq!(parser_i.is_eof(), false);",
          "    assert_eq!(parser_i.char(), '-');",
          "    assert_eq!(parser_i.peek_space(), None);",
          "    assert!(parser_i.bump_and_bump_space());",
          "    assert_eq!(parser_i.parse_set_class_item().is_ok(), true);",
          "    assert_eq!(prim1.into_class_literal(&parser_i).is_ok(), true);",
          "    assert_eq!(prim2.into_class_literal(&parser_i).is_ok(), true);",
          "    assert!(range.is_valid());",
          "    assert_eq!(parser_i.parse_set_class_range(), Ok(ast::ClassSetItem::Range(range)));"
        ],
        "code": [
          "{",
          "    let pos1 = Position { offset: 0, line: 1, column: 1 };",
          "    let pos2 = Position { offset: 5, line: 1, column: 6 };",
          "    let span1 = Span::new(pos1, pos1);",
          "    let span2 = Span::new(pos2, pos2);",
          "",
          "    let prim1 = Primitive::Literal(Literal {",
          "        span: span1.clone(),",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: 'h',",
          "    });",
          "",
          "    let prim2 = Primitive::Literal(Literal {",
          "        span: span2.clone(),",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: 'k',",
          "    });",
          "",
          "    let parser = Parser {",
          "        pos: Cell::new(pos1),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern: \"h - k\",",
          "    };",
          "",
          "    let _ = parser_i.parse_set_class_range();",
          "    assert_eq!(parser_i.parse_set_class_item().is_ok(), true);",
          "    assert_eq!(parser_i.is_eof(), false);",
          "    assert_eq!(parser_i.char(), '-');",
          "    assert_eq!(parser_i.peek_space(), None);",
          "    assert!(parser_i.bump_and_bump_space());",
          "    assert_eq!(parser_i.parse_set_class_item().is_ok(), true);",
          "    assert_eq!(prim1.into_class_literal(&parser_i).is_ok(), true);",
          "    assert_eq!(prim2.into_class_literal(&parser_i).is_ok(), true);",
          "    assert!(range.is_valid());",
          "    assert_eq!(parser_i.parse_set_class_range(), Ok(ast::ClassSetItem::Range(range)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]