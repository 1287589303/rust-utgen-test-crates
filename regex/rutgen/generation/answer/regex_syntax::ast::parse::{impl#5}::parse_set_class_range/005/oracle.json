[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start_pos = Position { offset: 0, line: 1, column: 1 };",
          "    let end_pos = Position { offset: 5, line: 1, column: 6 };",
          "    let prim1 = Primitive::Literal(Literal {",
          "        span: Span::new(start_pos, start_pos),",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: 'a',",
          "    });",
          "    let prim2 = Primitive::Literal(Literal {",
          "        span: Span::new(end_pos, end_pos),",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: 'z',",
          "    });",
          "    ",
          "    let parser = Parser {",
          "        pos: Cell::new(start_pos),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern: \"[a-z]-[b-z]\",",
          "    };",
          "",
          "    // Mock methods to simulate behavior",
          "    parser.bump_space = || {};",
          "    parser.is_eof = || false;",
          "    parser.char = || '-';",
          "    parser.peek_space = || Some('-');",
          "    parser.bump_and_bump_space = || true;",
          "    ",
          "    let _ = parser_i.parse_set_class_range();",
          "}"
        ],
        "oracle": [
          "    let start_pos = Position { offset: 0, line: 1, column: 1 };",
          "    let end_pos = Position { offset: 5, line: 1, column: 6 };",
          "    let prim1 = Primitive::Literal(Literal {",
          "    span: Span::new(start_pos, start_pos),",
          "    kind: ast::LiteralKind::Verbatim,",
          "    c: 'a',",
          "    });",
          "    let prim2 = Primitive::Literal(Literal {",
          "    span: Span::new(end_pos, end_pos),",
          "    kind: ast::LiteralKind::Verbatim,",
          "    c: 'z',",
          "    });",
          "    ",
          "    let range = ast::ClassSetRange {",
          "    span: Span::new(start_pos, end_pos),",
          "    start: prim1.into_class_literal(&parser_i).unwrap(),",
          "    end: prim2.into_class_literal(&parser_i).unwrap(),",
          "    };",
          "    ",
          "    assert_eq!(range.is_valid(), true);",
          "    let result = parser_i.parse_set_class_range();",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), ast::ClassSetItem::Range(range));"
        ],
        "code": [
          "{",
          "    let start_pos = Position { offset: 0, line: 1, column: 1 };",
          "    let end_pos = Position { offset: 5, line: 1, column: 6 };",
          "    let prim1 = Primitive::Literal(Literal {",
          "        span: Span::new(start_pos, start_pos),",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: 'a',",
          "    });",
          "    let prim2 = Primitive::Literal(Literal {",
          "        span: Span::new(end_pos, end_pos),",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: 'z',",
          "    });",
          "    ",
          "    let parser = Parser {",
          "        pos: Cell::new(start_pos),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern: \"[a-z]-[b-z]\",",
          "    };",
          "",
          "    // Mock methods to simulate behavior",
          "    parser.bump_space = || {};",
          "    parser.is_eof = || false;",
          "    parser.char = || '-';",
          "    parser.peek_space = || Some('-');",
          "    parser.bump_and_bump_space = || true;",
          "    ",
          "    let _ = parser_i.parse_set_class_range();",
          "    let start_pos = Position { offset: 0, line: 1, column: 1 };",
          "    let end_pos = Position { offset: 5, line: 1, column: 6 };",
          "    let prim1 = Primitive::Literal(Literal {",
          "    span: Span::new(start_pos, start_pos),",
          "    kind: ast::LiteralKind::Verbatim,",
          "    c: 'a',",
          "    });",
          "    let prim2 = Primitive::Literal(Literal {",
          "    span: Span::new(end_pos, end_pos),",
          "    kind: ast::LiteralKind::Verbatim,",
          "    c: 'z',",
          "    });",
          "    ",
          "    let range = ast::ClassSetRange {",
          "    span: Span::new(start_pos, end_pos),",
          "    start: prim1.into_class_literal(&parser_i).unwrap(),",
          "    end: prim2.into_class_literal(&parser_i).unwrap(),",
          "    };",
          "    ",
          "    assert_eq!(range.is_valid(), true);",
          "    let result = parser_i.parse_set_class_range();",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), ast::ClassSetItem::Range(range));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start_pos = Position { offset: 0, line: 1, column: 1 };",
          "    let end_pos = Position { offset: 3, line: 1, column: 4 };",
          "    let prim1 = Primitive::Literal(Literal {",
          "        span: Span::new(start_pos, start_pos),",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: '1',",
          "    });",
          "    let prim2 = Primitive::Literal(Literal {",
          "        span: Span::new(end_pos, end_pos),",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: '0',",
          "    });",
          "    ",
          "    let parser = Parser {",
          "        pos: Cell::new(start_pos),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern: \"[1]-[0]\",",
          "    };",
          "",
          "    // Mock methods to simulate behavior",
          "    parser.bump_space = || {};",
          "    parser.is_eof = || false;",
          "    parser.char = || '-';",
          "    parser.peek_space = || Some('-');",
          "    parser.bump_and_bump_space = || true;",
          "    ",
          "    let _ = parser_i.parse_set_class_range();",
          "}"
        ],
        "oracle": [
          "    let start_pos = Position { offset: 0, line: 1, column: 1 };",
          "    let end_pos = Position { offset: 3, line: 1, column: 4 };",
          "    let prim1 = Primitive::Literal(Literal {",
          "    span: Span::new(start_pos, start_pos),",
          "    kind: ast::LiteralKind::Verbatim,",
          "    c: '1',",
          "    });",
          "    let prim2 = Primitive::Literal(Literal {",
          "    span: Span::new(end_pos, end_pos),",
          "    kind: ast::LiteralKind::Verbatim,",
          "    c: '0',",
          "    });",
          "    let range = ast::ClassSetRange {",
          "    span: Span::new(prim1.span().start, prim2.span().end),",
          "    start: prim1.into_class_literal(&parser_i).unwrap(),",
          "    end: prim2.into_class_literal(&parser_i).unwrap(),",
          "    };",
          "    assert!(range.is_valid());",
          "    let result = parser_i.parse_set_class_range();",
          "    assert!(result.is_ok());",
          "    if let Ok(ast::ClassSetItem::Range(parsed_range)) = result {",
          "    assert_eq!(parsed_range.start.c, '1');",
          "    assert_eq!(parsed_range.end.c, '0');",
          "    } else {",
          "    panic!(\"Expected ClassSetItem::Range\");",
          "    }"
        ],
        "code": [
          "{",
          "    let start_pos = Position { offset: 0, line: 1, column: 1 };",
          "    let end_pos = Position { offset: 3, line: 1, column: 4 };",
          "    let prim1 = Primitive::Literal(Literal {",
          "        span: Span::new(start_pos, start_pos),",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: '1',",
          "    });",
          "    let prim2 = Primitive::Literal(Literal {",
          "        span: Span::new(end_pos, end_pos),",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: '0',",
          "    });",
          "    ",
          "    let parser = Parser {",
          "        pos: Cell::new(start_pos),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern: \"[1]-[0]\",",
          "    };",
          "",
          "    // Mock methods to simulate behavior",
          "    parser.bump_space = || {};",
          "    parser.is_eof = || false;",
          "    parser.char = || '-';",
          "    parser.peek_space = || Some('-');",
          "    parser.bump_and_bump_space = || true;",
          "    ",
          "    let _ = parser_i.parse_set_class_range();",
          "    let start_pos = Position { offset: 0, line: 1, column: 1 };",
          "    let end_pos = Position { offset: 3, line: 1, column: 4 };",
          "    let prim1 = Primitive::Literal(Literal {",
          "    span: Span::new(start_pos, start_pos),",
          "    kind: ast::LiteralKind::Verbatim,",
          "    c: '1',",
          "    });",
          "    let prim2 = Primitive::Literal(Literal {",
          "    span: Span::new(end_pos, end_pos),",
          "    kind: ast::LiteralKind::Verbatim,",
          "    c: '0',",
          "    });",
          "    let range = ast::ClassSetRange {",
          "    span: Span::new(prim1.span().start, prim2.span().end),",
          "    start: prim1.into_class_literal(&parser_i).unwrap(),",
          "    end: prim2.into_class_literal(&parser_i).unwrap(),",
          "    };",
          "    assert!(range.is_valid());",
          "    let result = parser_i.parse_set_class_range();",
          "    assert!(result.is_ok());",
          "    if let Ok(ast::ClassSetItem::Range(parsed_range)) = result {",
          "    assert_eq!(parsed_range.start.c, '1');",
          "    assert_eq!(parsed_range.end.c, '0');",
          "    } else {",
          "    panic!(\"Expected ClassSetItem::Range\");",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]