[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().unicode_word_boundary(true);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.unicode_word_boundary, Some(true));",
          "    assert_eq!(config.get_unicode_word_boundary(), true);",
          "    let config_disabled = Config::new().unicode_word_boundary(false);",
          "    assert_eq!(config_disabled.unicode_word_boundary, Some(false));",
          "    assert_eq!(config_disabled.get_unicode_word_boundary(), false);",
          "    let config_default = Config::new();",
          "    assert_eq!(config_default.unicode_word_boundary, None);",
          "    assert_eq!(config_default.get_unicode_word_boundary(), false);"
        ],
        "code": [
          "{",
          "    let config = Config::new().unicode_word_boundary(true);",
          "    assert_eq!(config.unicode_word_boundary, Some(true));",
          "    assert_eq!(config.get_unicode_word_boundary(), true);",
          "    let config_disabled = Config::new().unicode_word_boundary(false);",
          "    assert_eq!(config_disabled.unicode_word_boundary, Some(false));",
          "    assert_eq!(config_disabled.get_unicode_word_boundary(), false);",
          "    let config_default = Config::new();",
          "    assert_eq!(config_default.unicode_word_boundary, None);",
          "    assert_eq!(config_default.get_unicode_word_boundary(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().unicode_word_boundary(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_unicode_word_boundary(), false);",
          "    ",
          "    let config = Config::new().unicode_word_boundary(true);",
          "    assert_eq!(config.get_unicode_word_boundary(), true);",
          "    ",
          "    let config = Config::new().unicode_word_boundary(false).unicode_word_boundary(true);",
          "    assert_eq!(config.get_unicode_word_boundary(), true);",
          "    ",
          "    let config = Config::new().unicode_word_boundary(true).unicode_word_boundary(false);",
          "    assert_eq!(config.get_unicode_word_boundary(), false);"
        ],
        "code": [
          "{",
          "    let config = Config::new().unicode_word_boundary(false);",
          "    assert_eq!(config.get_unicode_word_boundary(), false);",
          "    ",
          "    let config = Config::new().unicode_word_boundary(true);",
          "    assert_eq!(config.get_unicode_word_boundary(), true);",
          "    ",
          "    let config = Config::new().unicode_word_boundary(false).unicode_word_boundary(true);",
          "    assert_eq!(config.get_unicode_word_boundary(), true);",
          "    ",
          "    let config = Config::new().unicode_word_boundary(true).unicode_word_boundary(false);",
          "    assert_eq!(config.get_unicode_word_boundary(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new();",
          "    let config_with_unicode = config.unicode_word_boundary(true);",
          "    let config_without_unicode = config.unicode_word_boundary(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.unicode_word_boundary(true).unicode_word_boundary, Some(true));",
          "    assert_eq!(config.unicode_word_boundary(false).unicode_word_boundary, Some(false));"
        ],
        "code": [
          "{",
          "    let config = Config::new();",
          "    let config_with_unicode = config.unicode_word_boundary(true);",
          "    let config_without_unicode = config.unicode_word_boundary(false);",
          "    assert_eq!(config.unicode_word_boundary(true).unicode_word_boundary, Some(true));",
          "    assert_eq!(config.unicode_word_boundary(false).unicode_word_boundary, Some(false));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]