[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"{1,3}\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![\"group_name\".to_string()]),",
          "    };",
          "    ",
          "    let concat = vec![Hir::char('a')];",
          "    let _ = parser.parse_counted_repetition(concat);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char.get(), '{');",
          "    assert_eq!(concat.len(), 1);",
          "    assert!(concat.pop().is_some());",
          "    assert!(parser.bump_and_bump_space());",
          "    let result = parser.parse_decimal();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, ERR_DECIMAL_NO_DIGITS);",
          "    assert!(parser.bump_and_bump_space());",
          "    assert_eq!(parser.char.get(), '}');",
          "    assert!(parser.flags().swap_greed);"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"{1,3}\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![\"group_name\".to_string()]),",
          "    };",
          "    ",
          "    let concat = vec![Hir::char('a')];",
          "    let _ = parser.parse_counted_repetition(concat);",
          "    assert_eq!(parser.char.get(), '{');",
          "    assert_eq!(concat.len(), 1);",
          "    assert!(concat.pop().is_some());",
          "    assert!(parser.bump_and_bump_space());",
          "    let result = parser.parse_decimal();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, ERR_DECIMAL_NO_DIGITS);",
          "    assert!(parser.bump_and_bump_space());",
          "    assert_eq!(parser.char.get(), '}');",
          "    assert!(parser.flags().swap_greed);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"{1,3}\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    ",
          "    let concat: Vec<Hir> = vec![];",
          "    let _ = parser.parse_counted_repetition(concat);",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"{1,3}\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('{')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let concat: Vec<Hir> = vec![];",
          "    let result = parser.parse_counted_repetition(concat);",
          "    assert!(result.is_err() && result.err().unwrap().msg == ERR_COUNTED_REP_SUB_MISSING);",
          "    ",
          "    let concat = vec![Hir::char('a')];",
          "    let result = parser.parse_counted_repetition(concat.clone());",
          "    assert!(result.is_ok());",
          "    let result_value = result.unwrap();",
          "    assert_eq!(result_value.len(), 1);",
          "    assert!(matches!(result_value[0].kind(), HirKind::Repetition(_)));",
          "    ",
          "    let concat = vec![Hir::char('a')];",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('{')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_counted_repetition(concat.clone());",
          "    assert!(result.is_ok());",
          "    ",
          "    let concat = vec![Hir::char('a')];",
          "    let parser = Parser { config, pattern: \"{,3}\", depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('{')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_counted_repetition(concat.clone());",
          "    assert!(result.is_err() && result.err().unwrap().msg == ERR_COUNTED_REP_MIN_UNCLOSED);",
          "    ",
          "    let concat = vec![Hir::char('a')];",
          "    let parser = Parser { config, pattern: \"{3,2}\", depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('{')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_counted_repetition(concat.clone());",
          "    assert!(result.is_err() && result.err().unwrap().msg == ERR_COUNTED_REP_INVALID_RANGE);",
          "    ",
          "    let concat = vec![Hir::char('a')];",
          "    let parser = Parser { config, pattern: \"{1,3}?\", depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('{')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_counted_repetition(concat.clone());",
          "    assert!(result.is_ok());",
          "    let result_value = result.unwrap();",
          "    assert!(matches!(result_value[0].kind(), HirKind::Repetition(rep) if !rep.greedy));"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"{1,3}\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    ",
          "    let concat: Vec<Hir> = vec![];",
          "    let _ = parser.parse_counted_repetition(concat);",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"{1,3}\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('{')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let concat: Vec<Hir> = vec![];",
          "    let result = parser.parse_counted_repetition(concat);",
          "    assert!(result.is_err() && result.err().unwrap().msg == ERR_COUNTED_REP_SUB_MISSING);",
          "    ",
          "    let concat = vec![Hir::char('a')];",
          "    let result = parser.parse_counted_repetition(concat.clone());",
          "    assert!(result.is_ok());",
          "    let result_value = result.unwrap();",
          "    assert_eq!(result_value.len(), 1);",
          "    assert!(matches!(result_value[0].kind(), HirKind::Repetition(_)));",
          "    ",
          "    let concat = vec![Hir::char('a')];",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('{')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_counted_repetition(concat.clone());",
          "    assert!(result.is_ok());",
          "    ",
          "    let concat = vec![Hir::char('a')];",
          "    let parser = Parser { config, pattern: \"{,3}\", depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('{')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_counted_repetition(concat.clone());",
          "    assert!(result.is_err() && result.err().unwrap().msg == ERR_COUNTED_REP_MIN_UNCLOSED);",
          "    ",
          "    let concat = vec![Hir::char('a')];",
          "    let parser = Parser { config, pattern: \"{3,2}\", depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('{')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_counted_repetition(concat.clone());",
          "    assert!(result.is_err() && result.err().unwrap().msg == ERR_COUNTED_REP_INVALID_RANGE);",
          "    ",
          "    let concat = vec![Hir::char('a')];",
          "    let parser = Parser { config, pattern: \"{1,3}?\", depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('{')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_counted_repetition(concat.clone());",
          "    assert!(result.is_ok());",
          "    let result_value = result.unwrap();",
          "    assert!(matches!(result_value[0].kind(), HirKind::Repetition(rep) if !rep.greedy));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic(expected = \"expected opening brace\")]"
        ],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"1,3}\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('1')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![\"group_name\".to_string()]),",
          "    };",
          "    ",
          "    let concat = vec![Hir::char('a')];",
          "    let _ = parser.parse_counted_repetition(concat);",
          "}"
        ],
        "oracle": [
          "    #[should_panic(expected = \"found unclosed counted repetition operator\")]",
          "    let pattern = \"{3,\";",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('{')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![\"group_name\".to_string()]),",
          "    };",
          "    ",
          "    let concat = vec![Hir::char('a')];",
          "    let _ = parser.parse_counted_repetition(concat);",
          "    ",
          "    #[should_panic(expected = \"expected closing brace for counted repetition, but got something else\")]",
          "    let pattern = \"{5,3a\";",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('{')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![\"group_name\".to_string()]),",
          "    };",
          "    ",
          "    let concat = vec![Hir::char('a')];",
          "    let _ = parser.parse_counted_repetition(concat);",
          "    ",
          "    #[should_panic(expected = \"expected decimal number, but found no digits\")]",
          "    let pattern = \"{,}\";",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('{')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![\"group_name\".to_string()]),",
          "    };",
          "    ",
          "    let concat = vec![Hir::char('a')];",
          "    let _ = parser.parse_counted_repetition(concat);",
          "    ",
          "    #[should_panic(expected = \"unrecognized escape sequence\")]",
          "    let pattern = \"{2,3}\";",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('{')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![\"group_name\".to_string()]),",
          "    };",
          "    ",
          "    let concat = vec![]; // this is empty to trigger the corresponding error",
          "    let _ = parser.parse_counted_repetition(concat);"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"1,3}\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('1')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![\"group_name\".to_string()]),",
          "    };",
          "    ",
          "    let concat = vec![Hir::char('a')];",
          "    let _ = parser.parse_counted_repetition(concat);",
          "    #[should_panic(expected = \"found unclosed counted repetition operator\")]",
          "    let pattern = \"{3,\";",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('{')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![\"group_name\".to_string()]),",
          "    };",
          "    ",
          "    let concat = vec![Hir::char('a')];",
          "    let _ = parser.parse_counted_repetition(concat);",
          "    ",
          "    #[should_panic(expected = \"expected closing brace for counted repetition, but got something else\")]",
          "    let pattern = \"{5,3a\";",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('{')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![\"group_name\".to_string()]),",
          "    };",
          "    ",
          "    let concat = vec![Hir::char('a')];",
          "    let _ = parser.parse_counted_repetition(concat);",
          "    ",
          "    #[should_panic(expected = \"expected decimal number, but found no digits\")]",
          "    let pattern = \"{,}\";",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('{')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![\"group_name\".to_string()]),",
          "    };",
          "    ",
          "    let concat = vec![Hir::char('a')];",
          "    let _ = parser.parse_counted_repetition(concat);",
          "    ",
          "    #[should_panic(expected = \"unrecognized escape sequence\")]",
          "    let pattern = \"{2,3}\";",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('{')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![\"group_name\".to_string()]),",
          "    };",
          "    ",
          "    let concat = vec![]; // this is empty to trigger the corresponding error",
          "    let _ = parser.parse_counted_repetition(concat);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"{a,b}\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![\"group_name\".to_string()]),",
          "    };",
          "    ",
          "    let concat = vec![Hir::char('a')];",
          "    let _ = parser.parse_counted_repetition(concat);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.parse_counted_repetition(vec![Hir::char('a')]), Err(Error::new(ERR_COUNTED_REP_INVALID)));",
          "    assert_eq!(parser.parse_counted_repetition(vec![Hir::char('a'), Hir::char('b')]), Ok(vec![Hir::repetition(hir::Repetition { min: 1, max: Some(1), greedy: true, sub: Box::new(Hir::char('a')) })]));",
          "    assert_eq!(parser.parse_counted_repetition(vec![]), Err(Error::new(ERR_COUNTED_REP_SUB_MISSING)));",
          "    assert_eq!(parser.parse_counted_repetition(vec![Hir::char('a'), Hir::char('b')]), Err(Error::new(ERR_COUNTED_REP_MIN_UNCLOSED)));",
          "    assert_eq!(parser.parse_counted_repetition(vec![Hir::char('a')]), Err(Error::new(ERR_DECIMAL_NO_DIGITS)));",
          "    assert_eq!(parser.parse_counted_repetition(vec![Hir::char('a'), Hir::char('b')]), Err(Error::new(ERR_COUNTED_REP_INVALID_RANGE)));"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"{a,b}\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![\"group_name\".to_string()]),",
          "    };",
          "    ",
          "    let concat = vec![Hir::char('a')];",
          "    let _ = parser.parse_counted_repetition(concat);",
          "    assert_eq!(parser.parse_counted_repetition(vec![Hir::char('a')]), Err(Error::new(ERR_COUNTED_REP_INVALID)));",
          "    assert_eq!(parser.parse_counted_repetition(vec![Hir::char('a'), Hir::char('b')]), Ok(vec![Hir::repetition(hir::Repetition { min: 1, max: Some(1), greedy: true, sub: Box::new(Hir::char('a')) })]));",
          "    assert_eq!(parser.parse_counted_repetition(vec![]), Err(Error::new(ERR_COUNTED_REP_SUB_MISSING)));",
          "    assert_eq!(parser.parse_counted_repetition(vec![Hir::char('a'), Hir::char('b')]), Err(Error::new(ERR_COUNTED_REP_MIN_UNCLOSED)));",
          "    assert_eq!(parser.parse_counted_repetition(vec![Hir::char('a')]), Err(Error::new(ERR_DECIMAL_NO_DIGITS)));",
          "    assert_eq!(parser.parse_counted_repetition(vec![Hir::char('a'), Hir::char('b')]), Err(Error::new(ERR_COUNTED_REP_INVALID_RANGE)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"{1,}\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![\"group_name\".to_string()]),",
          "    };",
          "    ",
          "    let concat = vec![Hir::char('a')];",
          "    let _ = parser.parse_counted_repetition(concat);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char.get(), '{', \"expected opening brace\");",
          "    assert!(concat.pop().is_some(), \"expected non-empty concat vector\");",
          "    let result = parser.bump_and_bump_space();",
          "    assert!(result, \"expected bump_and_bump_space to succeed\");",
          "    let min_result = parser.parse_decimal();",
          "    assert!(min_result.is_err(), \"expected parse_decimal to return an error\");",
          "    assert_eq!(parser.capture_names.borrow().len(), 1, \"expected one capture name\");",
          "    assert_eq!(parser.capture_names.borrow()[0], \"group_name\", \"expected capture name to match\");"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"{1,}\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![\"group_name\".to_string()]),",
          "    };",
          "    ",
          "    let concat = vec![Hir::char('a')];",
          "    let _ = parser.parse_counted_repetition(concat);",
          "    assert_eq!(parser.char.get(), '{', \"expected opening brace\");",
          "    assert!(concat.pop().is_some(), \"expected non-empty concat vector\");",
          "    let result = parser.bump_and_bump_space();",
          "    assert!(result, \"expected bump_and_bump_space to succeed\");",
          "    let min_result = parser.parse_decimal();",
          "    assert!(min_result.is_err(), \"expected parse_decimal to return an error\");",
          "    assert_eq!(parser.capture_names.borrow().len(), 1, \"expected one capture name\");",
          "    assert_eq!(parser.capture_names.borrow()[0], \"group_name\", \"expected capture name to match\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]