[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = [0, 1, 2, 3];",
          "    let result = Accel::from_bytes(bytes);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let accel = result.unwrap();",
          "    assert_eq!(accel.len(), 4);",
          "    assert_eq!(accel.bytes[0], 0);",
          "    assert_eq!(accel.bytes[1], 1);",
          "    assert_eq!(accel.bytes[2], 2);",
          "    assert_eq!(accel.bytes[3], 3);"
        ],
        "code": [
          "{",
          "    let bytes = [0, 1, 2, 3];",
          "    let result = Accel::from_bytes(bytes);",
          "    assert!(result.is_ok());",
          "    let accel = result.unwrap();",
          "    assert_eq!(accel.len(), 4);",
          "    assert_eq!(accel.bytes[0], 0);",
          "    assert_eq!(accel.bytes[1], 1);",
          "    assert_eq!(accel.bytes[2], 2);",
          "    assert_eq!(accel.bytes[3], 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = [1, 255, 255, 255];",
          "    let result = Accel::from_bytes(bytes);",
          "}"
        ],
        "oracle": [
          "    let bytes = [1, 255, 255, 255];",
          "    let result = Accel::from_bytes(bytes);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().len(), 1);",
          "    assert_eq!(result.unwrap().needles()[0], 255);",
          "    assert_eq!(result.unwrap().needles()[1], 255);",
          "    assert_eq!(result.unwrap().needles()[2], 255);",
          "    assert_eq!(result.unwrap().needles()[3], 0);"
        ],
        "code": [
          "{",
          "    let bytes = [1, 255, 255, 255];",
          "    let result = Accel::from_bytes(bytes);",
          "    let bytes = [1, 255, 255, 255];",
          "    let result = Accel::from_bytes(bytes);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().len(), 1);",
          "    assert_eq!(result.unwrap().needles()[0], 255);",
          "    assert_eq!(result.unwrap().needles()[1], 255);",
          "    assert_eq!(result.unwrap().needles()[2], 255);",
          "    assert_eq!(result.unwrap().needles()[3], 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = [2, 0, 0, 0];",
          "    let result = Accel::from_bytes(bytes);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let accel = result.unwrap();",
          "    assert_eq!(accel.len(), 2);",
          "    assert_eq!(accel.bytes[0], 2);",
          "    assert_eq!(accel.bytes[1], 0);",
          "    assert_eq!(accel.bytes[2], 0);",
          "    assert_eq!(accel.bytes[3], 0);",
          "    assert_eq!(accel.bytes[4], 0);",
          "    assert_eq!(accel.bytes[5], 0);",
          "    assert_eq!(accel.bytes[6], 0);",
          "    assert_eq!(accel.bytes[7], 0);"
        ],
        "code": [
          "{",
          "    let bytes = [2, 0, 0, 0];",
          "    let result = Accel::from_bytes(bytes);",
          "    assert!(result.is_ok());",
          "    let accel = result.unwrap();",
          "    assert_eq!(accel.len(), 2);",
          "    assert_eq!(accel.bytes[0], 2);",
          "    assert_eq!(accel.bytes[1], 0);",
          "    assert_eq!(accel.bytes[2], 0);",
          "    assert_eq!(accel.bytes[3], 0);",
          "    assert_eq!(accel.bytes[4], 0);",
          "    assert_eq!(accel.bytes[5], 0);",
          "    assert_eq!(accel.bytes[6], 0);",
          "    assert_eq!(accel.bytes[7], 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = [3, 100, 150, 200];",
          "    let result = Accel::from_bytes(bytes);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let accel = result.unwrap();",
          "    assert_eq!(accel.bytes[0], 3);",
          "    assert_eq!(accel.bytes[1], 100);",
          "    assert_eq!(accel.bytes[2], 150);",
          "    assert_eq!(accel.bytes[3], 200);",
          "    assert_eq!(&accel.bytes[4..8], &[0, 0, 0, 0]);"
        ],
        "code": [
          "{",
          "    let bytes = [3, 100, 150, 200];",
          "    let result = Accel::from_bytes(bytes);",
          "    assert!(result.is_ok());",
          "    let accel = result.unwrap();",
          "    assert_eq!(accel.bytes[0], 3);",
          "    assert_eq!(accel.bytes[1], 100);",
          "    assert_eq!(accel.bytes[2], 150);",
          "    assert_eq!(accel.bytes[3], 200);",
          "    assert_eq!(&accel.bytes[4..8], &[0, 0, 0, 0]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]