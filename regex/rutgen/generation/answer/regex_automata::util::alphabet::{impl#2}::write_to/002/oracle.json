[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut dst = [0u8; 256];",
          "    let result = byte_classes.write_to(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(256));",
          "    assert_eq!(dst, byte_classes.0);",
          "    let mut small_dst = [0u8; 255];",
          "    let result_small = byte_classes.write_to(&mut small_dst);",
          "    assert!(result_small.is_err());",
          "    assert_eq!(result_small.err().unwrap().what, \"byte class map\");",
          "    let mut oversized_dst = [0u8; 512];",
          "    let result_oversized = byte_classes.write_to(&mut oversized_dst);",
          "    assert_eq!(result_oversized, Ok(256));",
          "    assert_eq!(&oversized_dst[..256], byte_classes.0);"
        ],
        "code": [
          "{",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut dst = [0u8; 256];",
          "    let result = byte_classes.write_to(&mut dst);",
          "    assert_eq!(result, Ok(256));",
          "    assert_eq!(dst, byte_classes.0);",
          "    let mut small_dst = [0u8; 255];",
          "    let result_small = byte_classes.write_to(&mut small_dst);",
          "    assert!(result_small.is_err());",
          "    assert_eq!(result_small.err().unwrap().what, \"byte class map\");",
          "    let mut oversized_dst = [0u8; 512];",
          "    let result_oversized = byte_classes.write_to(&mut oversized_dst);",
          "    assert_eq!(result_oversized, Ok(256));",
          "    assert_eq!(&oversized_dst[..256], byte_classes.0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_classes = ByteClasses::singletons();",
          "    let mut dst = [0u8; 256];",
          "    let _ = byte_classes.write_to(&mut dst);",
          "    for b in 0..=255 {",
          "        assert_eq!(dst[b as usize], byte_classes.get(b));",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(byte_classes.write_to(&mut dst).is_ok());",
          "    assert_eq!(dst.len(), byte_classes.write_to_len());",
          "    assert!(dst.iter().all(|&byte| byte == byte_classes.get(byte)));",
          "    let small_buffer = [0u8; 255];",
          "    assert_eq!(byte_classes.write_to(&mut small_buffer), Err(SerializeError::buffer_too_small(\"byte class map\")));",
          "    assert_eq!(byte_classes.write_to(&mut dst).unwrap(), byte_classes.write_to_len());"
        ],
        "code": [
          "{",
          "    let byte_classes = ByteClasses::singletons();",
          "    let mut dst = [0u8; 256];",
          "    let _ = byte_classes.write_to(&mut dst);",
          "    for b in 0..=255 {",
          "        assert_eq!(dst[b as usize], byte_classes.get(b));",
          "    }",
          "    assert!(byte_classes.write_to(&mut dst).is_ok());",
          "    assert_eq!(dst.len(), byte_classes.write_to_len());",
          "    assert!(dst.iter().all(|&byte| byte == byte_classes.get(byte)));",
          "    let small_buffer = [0u8; 255];",
          "    assert_eq!(byte_classes.write_to(&mut small_buffer), Err(SerializeError::buffer_too_small(\"byte class map\")));",
          "    assert_eq!(byte_classes.write_to(&mut dst).unwrap(), byte_classes.write_to_len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut dst = [0u8; 255];",
          "    let _ = byte_classes.write_to(&mut dst);",
          "}"
        ],
        "oracle": [
          "    let byte_classes = ByteClasses::empty();",
          "    let mut dst = [0u8; 256];",
          "    assert_eq!(byte_classes.write_to(&mut dst), Ok(256));",
          "    let mut dst = [0u8; 255];",
          "    assert!(byte_classes.write_to(&mut dst).is_err());",
          "    let byte_classes = ByteClasses::singletons();",
          "    let mut dst = [0u8; 256];",
          "    assert_eq!(byte_classes.write_to(&mut dst), Ok(256));",
          "    let mut dst = [0u8; 1];",
          "    assert!(byte_classes.write_to(&mut dst).is_err());",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut dst = [0u8; 256];",
          "    let result = byte_classes.write_to(&mut dst);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), 256);",
          "    let mut dst = [0u8; 256];",
          "    let byte_classes = ByteClasses::empty();",
          "    let result = byte_classes.write_to(&mut dst);",
          "    assert!(result.unwrap() == 256);"
        ],
        "code": [
          "{",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut dst = [0u8; 255];",
          "    let _ = byte_classes.write_to(&mut dst);",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut dst = [0u8; 256];",
          "    assert_eq!(byte_classes.write_to(&mut dst), Ok(256));",
          "    let mut dst = [0u8; 255];",
          "    assert!(byte_classes.write_to(&mut dst).is_err());",
          "    let byte_classes = ByteClasses::singletons();",
          "    let mut dst = [0u8; 256];",
          "    assert_eq!(byte_classes.write_to(&mut dst), Ok(256));",
          "    let mut dst = [0u8; 1];",
          "    assert!(byte_classes.write_to(&mut dst).is_err());",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut dst = [0u8; 256];",
          "    let result = byte_classes.write_to(&mut dst);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), 256);",
          "    let mut dst = [0u8; 256];",
          "    let byte_classes = ByteClasses::empty();",
          "    let result = byte_classes.write_to(&mut dst);",
          "    assert!(result.unwrap() == 256);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]