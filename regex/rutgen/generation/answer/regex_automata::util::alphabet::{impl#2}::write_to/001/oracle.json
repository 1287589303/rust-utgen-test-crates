[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 0];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 0];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));"
        ],
        "code": [
          "{",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 0];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 0];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 1];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 1];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));"
        ],
        "code": [
          "{",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 1];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 1];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 2];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    let byte_classes = ByteClasses::empty();",
          "    let buffer = [0u8; 2];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));"
        ],
        "code": [
          "{",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 2];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "    let byte_classes = ByteClasses::empty();",
          "    let buffer = [0u8; 2];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 3];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().what, \"byte class map\");"
        ],
        "code": [
          "{",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 3];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().what, \"byte class map\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 4];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 4];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));"
        ],
        "code": [
          "{",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 4];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 4];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 5];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 5];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().what, \"byte class map\");"
        ],
        "code": [
          "{",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 5];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 5];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().what, \"byte class map\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 6];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 6];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));"
        ],
        "code": [
          "{",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 6];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 6];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 7];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 7];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));"
        ],
        "code": [
          "{",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 7];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 7];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 8];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 8];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));"
        ],
        "code": [
          "{",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 8];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 8];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 9];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    result.unwrap_err();",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));"
        ],
        "code": [
          "{",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 9];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "    result.unwrap_err();",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 255];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 255];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));"
        ],
        "code": [
          "{",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 255];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "    let byte_classes = ByteClasses::empty();",
          "    let mut buffer = [0u8; 255];",
          "    let result = byte_classes.write_to(&mut buffer);",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]