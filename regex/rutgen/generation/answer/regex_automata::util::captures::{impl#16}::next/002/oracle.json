[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info_inner = GroupInfoInner {",
          "        index_to_name: vec![vec![Some(Arc::from(\"name1\")), Some(Arc::from(\"name2\"))]],",
          "        ..Default::default()",
          "    };",
          "    let group_info = GroupInfo(Arc::new(group_info_inner));",
          "    ",
          "    let pids = PatternIDIter::new(vec![PatternID::default()].into_iter());",
          "    let mut group_info_all_names = GroupInfoAllNames {",
          "        group_info: &group_info,",
          "        pids,",
          "        current_pid: None,",
          "        names: None,",
          "    };",
          "    ",
          "    let result = group_info_all_names.next();",
          "}"
        ],
        "oracle": [
          "    let group_info_inner = GroupInfoInner { index_to_name: vec![vec![Some(Arc::from(\"name1\")), Some(Arc::from(\"name2\"))]], ..Default::default() };",
          "    let group_info = GroupInfo(Arc::new(group_info_inner));",
          "    let pids = PatternIDIter::new(vec![PatternID::default()].into_iter());",
          "    let mut group_info_all_names = GroupInfoAllNames { group_info: &group_info, pids, current_pid: None, names: None };",
          "    let result = group_info_all_names.next();",
          "    assert!(result.is_none());"
        ],
        "code": [
          "{",
          "    let group_info_inner = GroupInfoInner {",
          "        index_to_name: vec![vec![Some(Arc::from(\"name1\")), Some(Arc::from(\"name2\"))]],",
          "        ..Default::default()",
          "    };",
          "    let group_info = GroupInfo(Arc::new(group_info_inner));",
          "    ",
          "    let pids = PatternIDIter::new(vec![PatternID::default()].into_iter());",
          "    let mut group_info_all_names = GroupInfoAllNames {",
          "        group_info: &group_info,",
          "        pids,",
          "        current_pid: None,",
          "        names: None,",
          "    };",
          "    ",
          "    let result = group_info_all_names.next();",
          "    let group_info_inner = GroupInfoInner { index_to_name: vec![vec![Some(Arc::from(\"name1\")), Some(Arc::from(\"name2\"))]], ..Default::default() };",
          "    let group_info = GroupInfo(Arc::new(group_info_inner));",
          "    let pids = PatternIDIter::new(vec![PatternID::default()].into_iter());",
          "    let mut group_info_all_names = GroupInfoAllNames { group_info: &group_info, pids, current_pid: None, names: None };",
          "    let result = group_info_all_names.next();",
          "    assert!(result.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info_inner = GroupInfoInner {",
          "        index_to_name: vec![vec![Some(Arc::from(\"name1\"))]],",
          "        ..Default::default()",
          "    };",
          "    let group_info = GroupInfo(Arc::new(group_info_inner));",
          "",
          "    let pids = PatternIDIter::new(vec![].into_iter());",
          "    let mut group_info_all_names = GroupInfoAllNames {",
          "        group_info: &group_info,",
          "        pids,",
          "        current_pid: None,",
          "        names: None,",
          "    };",
          "",
          "    let result = group_info_all_names.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let group_info_inner = GroupInfoInner {",
          "        index_to_name: vec![vec![Some(Arc::from(\"name1\"))]],",
          "        ..Default::default()",
          "    };",
          "    let group_info = GroupInfo(Arc::new(group_info_inner));",
          "",
          "    let pids = PatternIDIter::new(vec![].into_iter());",
          "    let mut group_info_all_names = GroupInfoAllNames {",
          "        group_info: &group_info,",
          "        pids,",
          "        current_pid: None,",
          "        names: None,",
          "    };",
          "",
          "    let result = group_info_all_names.next();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]