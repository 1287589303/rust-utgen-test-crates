[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA::never_match().unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let mut caps = dfa.create_captures();",
          "    dfa.captures(&mut cache, \"\", &mut caps);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(None, caps.get_match());",
          "    dfa.captures(&mut cache, \"foo\", &mut caps);",
          "    assert_eq!(None, caps.get_match());"
        ],
        "code": [
          "{",
          "    let dfa = DFA::never_match().unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let mut caps = dfa.create_captures();",
          "    dfa.captures(&mut cache, \"\", &mut caps);",
          "    assert_eq!(None, caps.get_match());",
          "    dfa.captures(&mut cache, \"foo\", &mut caps);",
          "    assert_eq!(None, caps.get_match());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA::never_match().unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let mut caps = dfa.create_captures();",
          "    dfa.captures(&mut cache, \"!@#$%^&*\", &mut caps);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(None, caps.get_match());",
          "    dfa.captures(&mut cache, \"foo\", &mut caps);",
          "    assert_eq!(None, caps.get_match());",
          "    dfa.captures(&mut cache, \"bar\", &mut caps);",
          "    assert_eq!(None, caps.get_match());",
          "    dfa.captures(&mut cache, \"\", &mut caps);",
          "    assert_eq!(None, caps.get_match());",
          "    dfa.captures(&mut cache, \"123456\", &mut caps);",
          "    assert_eq!(None, caps.get_match());",
          "    dfa.captures(&mut cache, \"abc\", &mut caps);",
          "    assert_eq!(None, caps.get_match());",
          "    dfa.captures(&mut cache, \" \", &mut caps);",
          "    assert_eq!(None, caps.get_match());"
        ],
        "code": [
          "{",
          "    let dfa = DFA::never_match().unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let mut caps = dfa.create_captures();",
          "    dfa.captures(&mut cache, \"!@#$%^&*\", &mut caps);",
          "    assert_eq!(None, caps.get_match());",
          "    dfa.captures(&mut cache, \"foo\", &mut caps);",
          "    assert_eq!(None, caps.get_match());",
          "    dfa.captures(&mut cache, \"bar\", &mut caps);",
          "    assert_eq!(None, caps.get_match());",
          "    dfa.captures(&mut cache, \"\", &mut caps);",
          "    assert_eq!(None, caps.get_match());",
          "    dfa.captures(&mut cache, \"123456\", &mut caps);",
          "    assert_eq!(None, caps.get_match());",
          "    dfa.captures(&mut cache, \"abc\", &mut caps);",
          "    assert_eq!(None, caps.get_match());",
          "    dfa.captures(&mut cache, \" \", &mut caps);",
          "    assert_eq!(None, caps.get_match());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA::never_match().unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let mut caps = dfa.create_captures();",
          "    dfa.captures(&mut cache, \"foo\", &mut caps);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(None, caps.get_match());",
          "    dfa.captures(&mut cache, \"\", &mut caps);",
          "    assert_eq!(None, caps.get_match());",
          "    dfa.captures(&mut cache, \"foo\", &mut caps);",
          "    assert_eq!(None, caps.get_match());"
        ],
        "code": [
          "{",
          "    let dfa = DFA::never_match().unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let mut caps = dfa.create_captures();",
          "    dfa.captures(&mut cache, \"foo\", &mut caps);",
          "    assert_eq!(None, caps.get_match());",
          "    dfa.captures(&mut cache, \"\", &mut caps);",
          "    assert_eq!(None, caps.get_match());",
          "    dfa.captures(&mut cache, \"foo\", &mut caps);",
          "    assert_eq!(None, caps.get_match());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA::never_match().unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let mut caps = dfa.create_captures();",
          "    dfa.captures(&mut cache, \"   \", &mut caps);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(None, caps.get_match());",
          "    dfa.captures(&mut cache, \"foo\", &mut caps);",
          "    assert_eq!(None, caps.get_match());"
        ],
        "code": [
          "{",
          "    let dfa = DFA::never_match().unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let mut caps = dfa.create_captures();",
          "    dfa.captures(&mut cache, \"   \", &mut caps);",
          "    assert_eq!(None, caps.get_match());",
          "    dfa.captures(&mut cache, \"foo\", &mut caps);",
          "    assert_eq!(None, caps.get_match());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA::never_match().unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let mut caps = dfa.create_captures();",
          "    dfa.captures(&mut cache, \"123456\", &mut caps);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(None, caps.get_match());",
          "    dfa.captures(&mut cache, \"\", &mut caps);",
          "    assert_eq!(None, caps.get_match());"
        ],
        "code": [
          "{",
          "    let dfa = DFA::never_match().unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let mut caps = dfa.create_captures();",
          "    dfa.captures(&mut cache, \"123456\", &mut caps);",
          "    assert_eq!(None, caps.get_match());",
          "    dfa.captures(&mut cache, \"\", &mut caps);",
          "    assert_eq!(None, caps.get_match());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]