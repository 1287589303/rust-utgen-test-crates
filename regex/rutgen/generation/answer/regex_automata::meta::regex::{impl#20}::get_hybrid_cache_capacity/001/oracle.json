[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().hybrid_cache_capacity(0);",
          "    let _ = config.get_hybrid_cache_capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_hybrid_cache_capacity(), 0);",
          "    let config = Config::new().hybrid_cache_capacity(1048576);",
          "    assert_eq!(config.get_hybrid_cache_capacity(), 1048576);",
          "    let config = Config::new();",
          "    assert_eq!(config.get_hybrid_cache_capacity(), 2097152);"
        ],
        "code": [
          "{",
          "    let config = Config::new().hybrid_cache_capacity(0);",
          "    let _ = config.get_hybrid_cache_capacity();",
          "    assert_eq!(config.get_hybrid_cache_capacity(), 0);",
          "    let config = Config::new().hybrid_cache_capacity(1048576);",
          "    assert_eq!(config.get_hybrid_cache_capacity(), 1048576);",
          "    let config = Config::new();",
          "    assert_eq!(config.get_hybrid_cache_capacity(), 2097152);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().hybrid_cache_capacity(1);",
          "    let _ = config.get_hybrid_cache_capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_hybrid_cache_capacity(), 1);",
          "    let config_default = Config::new();",
          "    assert_eq!(config_default.get_hybrid_cache_capacity(), 2097152);"
        ],
        "code": [
          "{",
          "    let config = Config::new().hybrid_cache_capacity(1);",
          "    let _ = config.get_hybrid_cache_capacity();",
          "    assert_eq!(config.get_hybrid_cache_capacity(), 1);",
          "    let config_default = Config::new();",
          "    assert_eq!(config_default.get_hybrid_cache_capacity(), 2097152);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().hybrid_cache_capacity(usize::MAX);",
          "    let _ = config.get_hybrid_cache_capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_hybrid_cache_capacity(), usize::MAX);",
          "    ",
          "    let config = Config::new();",
          "    assert_eq!(config.get_hybrid_cache_capacity(), 2 * (1 << 20));"
        ],
        "code": [
          "{",
          "    let config = Config::new().hybrid_cache_capacity(usize::MAX);",
          "    let _ = config.get_hybrid_cache_capacity();",
          "    assert_eq!(config.get_hybrid_cache_capacity(), usize::MAX);",
          "    ",
          "    let config = Config::new();",
          "    assert_eq!(config.get_hybrid_cache_capacity(), 2 * (1 << 20));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new(); // hybrid_cache_capacity is not set",
          "    let _ = config.get_hybrid_cache_capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_hybrid_cache_capacity(), 2 * (1 << 20));"
        ],
        "code": [
          "{",
          "    let config = Config::new(); // hybrid_cache_capacity is not set",
          "    let _ = config.get_hybrid_cache_capacity();",
          "    assert_eq!(config.get_hybrid_cache_capacity(), 2 * (1 << 20));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]