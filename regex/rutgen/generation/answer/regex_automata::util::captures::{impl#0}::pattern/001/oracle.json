[
  {
    "uses": [
      "use crate::util::captures::Captures;",
      "use crate::util::primitives::NonMaxUsize;",
      "use std::sync::Arc;",
      "use crate::util::captures::GroupInfo;",
      "use crate::util::primitives::SmallIndex;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::util::primitives::{NonMaxUsize, SmallIndex};",
          "    use crate::util::captures::{Captures, GroupInfo};",
          "    use std::sync::Arc;",
          "",
          "    let group_info = GroupInfo(Arc::new(Default::default()));",
          "    let pattern_id = PatternID(SmallIndex::new(0));",
          "    let captures = Captures {",
          "        group_info,",
          "        pid: Some(pattern_id),",
          "        slots: vec![Some(NonMaxUsize::new(0).unwrap())],",
          "    };",
          "    ",
          "    let result = captures.pattern();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(pattern_id));"
        ],
        "code": [
          "{",
          "    use crate::util::primitives::{NonMaxUsize, SmallIndex};",
          "    use crate::util::captures::{Captures, GroupInfo};",
          "    use std::sync::Arc;",
          "",
          "    let group_info = GroupInfo(Arc::new(Default::default()));",
          "    let pattern_id = PatternID(SmallIndex::new(0));",
          "    let captures = Captures {",
          "        group_info,",
          "        pid: Some(pattern_id),",
          "        slots: vec![Some(NonMaxUsize::new(0).unwrap())],",
          "    };",
          "    ",
          "    let result = captures.pattern();",
          "    assert_eq!(result, Some(pattern_id));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::util::primitives::{NonMaxUsize, SmallIndex};",
          "    use crate::util::captures::{Captures, GroupInfo};",
          "    use std::sync::Arc;",
          "",
          "    let group_info = GroupInfo(Arc::new(Default::default()));",
          "    let captures = Captures {",
          "        group_info,",
          "        pid: None,",
          "        slots: vec![None],",
          "    };",
          "    ",
          "    let result = captures.pattern();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);",
          "    ",
          "    let captures_with_pid = Captures {",
          "    group_info,",
          "    pid: Some(PatternID(SmallIndex::new(1))),",
          "    slots: vec![None],",
          "    };",
          "    let result_with_pid = captures_with_pid.pattern();",
          "    assert_eq!(result_with_pid, Some(PatternID(SmallIndex::new(1))));"
        ],
        "code": [
          "{",
          "    use crate::util::primitives::{NonMaxUsize, SmallIndex};",
          "    use crate::util::captures::{Captures, GroupInfo};",
          "    use std::sync::Arc;",
          "",
          "    let group_info = GroupInfo(Arc::new(Default::default()));",
          "    let captures = Captures {",
          "        group_info,",
          "        pid: None,",
          "        slots: vec![None],",
          "    };",
          "    ",
          "    let result = captures.pattern();",
          "    assert_eq!(result, None);",
          "    ",
          "    let captures_with_pid = Captures {",
          "    group_info,",
          "    pid: Some(PatternID(SmallIndex::new(1))),",
          "    slots: vec![None],",
          "    };",
          "    let result_with_pid = captures_with_pid.pattern();",
          "    assert_eq!(result_with_pid, Some(PatternID(SmallIndex::new(1))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]