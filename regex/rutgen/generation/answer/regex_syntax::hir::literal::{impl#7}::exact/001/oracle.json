[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal = Literal::exact(vec![]);",
          "}"
        ],
        "oracle": [
          "    let result = Literal::exact(vec![]);",
          "    assert_eq!(result.bytes, vec![]);",
          "    assert!(result.exact);"
        ],
        "code": [
          "{",
          "    let literal = Literal::exact(vec![]);",
          "    let result = Literal::exact(vec![]);",
          "    assert_eq!(result.bytes, vec![]);",
          "    assert!(result.exact);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal = Literal::exact(vec![0x61]); // ASCII 'a'",
          "}"
        ],
        "oracle": [
          "    let literal = Literal::exact(vec![0x61]);",
          "    assert_eq!(literal.bytes, vec![0x61]);",
          "    assert!(literal.exact);"
        ],
        "code": [
          "{",
          "    let literal = Literal::exact(vec![0x61]); // ASCII 'a'",
          "    let literal = Literal::exact(vec![0x61]);",
          "    assert_eq!(literal.bytes, vec![0x61]);",
          "    assert!(literal.exact);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal = Literal::exact(vec![0x61, 0x62, 0x63]); // ASCII 'abc'",
          "}"
        ],
        "oracle": [
          "    assert_eq!(literal.bytes, vec![0x61, 0x62, 0x63]);",
          "    assert!(literal.exact);"
        ],
        "code": [
          "{",
          "    let literal = Literal::exact(vec![0x61, 0x62, 0x63]); // ASCII 'abc'",
          "    assert_eq!(literal.bytes, vec![0x61, 0x62, 0x63]);",
          "    assert!(literal.exact);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal = Literal::exact(vec![0x00; 1024]); // Example maximum size; adjust based on actual limits",
          "}"
        ],
        "oracle": [
          "    assert_eq!(literal.bytes, vec![0x00; 1024]);",
          "    assert!(literal.exact);",
          "    assert_eq!(literal.len(), 1024);",
          "    assert!(!literal.is_empty());",
          "    assert!(literal.is_exact());"
        ],
        "code": [
          "{",
          "    let literal = Literal::exact(vec![0x00; 1024]); // Example maximum size; adjust based on actual limits",
          "    assert_eq!(literal.bytes, vec![0x00; 1024]);",
          "    assert!(literal.exact);",
          "    assert_eq!(literal.len(), 1024);",
          "    assert!(!literal.is_empty());",
          "    assert!(literal.is_exact());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]