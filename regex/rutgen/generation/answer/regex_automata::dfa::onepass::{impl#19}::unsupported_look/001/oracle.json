[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::Start;",
          "    let _result = BuildError::unsupported_look(look);",
          "}"
        ],
        "oracle": [
          "    let look = Look::Start;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::End;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::WordAscii;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::WordUnicode;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::StartLF;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::EndLF;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::StartCRLF;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::EndCRLF;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);"
        ],
        "code": [
          "{",
          "    let look = Look::Start;",
          "    let _result = BuildError::unsupported_look(look);",
          "    let look = Look::Start;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::End;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::WordAscii;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::WordUnicode;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::StartLF;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::EndLF;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::StartCRLF;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::EndCRLF;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::End;",
          "    let _result = BuildError::unsupported_look(look);",
          "}"
        ],
        "oracle": [
          "    let look = Look::End;",
          "    let result = BuildError::unsupported_look(look);",
          "    assert_eq!(result.kind, BuildErrorKind::UnsupportedLook { look });"
        ],
        "code": [
          "{",
          "    let look = Look::End;",
          "    let _result = BuildError::unsupported_look(look);",
          "    let look = Look::End;",
          "    let result = BuildError::unsupported_look(look);",
          "    assert_eq!(result.kind, BuildErrorKind::UnsupportedLook { look });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::StartLF;",
          "    let _result = BuildError::unsupported_look(look);",
          "}"
        ],
        "oracle": [
          "    let look = Look::StartLF;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);"
        ],
        "code": [
          "{",
          "    let look = Look::StartLF;",
          "    let _result = BuildError::unsupported_look(look);",
          "    let look = Look::StartLF;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::EndLF;",
          "    let _result = BuildError::unsupported_look(look);",
          "}"
        ],
        "oracle": [
          "    let look = Look::EndLF;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(_result, expected);"
        ],
        "code": [
          "{",
          "    let look = Look::EndLF;",
          "    let _result = BuildError::unsupported_look(look);",
          "    let look = Look::EndLF;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(_result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::StartCRLF;",
          "    let _result = BuildError::unsupported_look(look);",
          "}"
        ],
        "oracle": [
          "    let look = Look::StartCRLF;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);"
        ],
        "code": [
          "{",
          "    let look = Look::StartCRLF;",
          "    let _result = BuildError::unsupported_look(look);",
          "    let look = Look::StartCRLF;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::EndCRLF;",
          "    let _result = BuildError::unsupported_look(look);",
          "}"
        ],
        "oracle": [
          "    let look = Look::EndCRLF;",
          "    let result = BuildError::unsupported_look(look);",
          "    assert_eq!(result.kind, BuildErrorKind::UnsupportedLook { look });"
        ],
        "code": [
          "{",
          "    let look = Look::EndCRLF;",
          "    let _result = BuildError::unsupported_look(look);",
          "    let look = Look::EndCRLF;",
          "    let result = BuildError::unsupported_look(look);",
          "    assert_eq!(result.kind, BuildErrorKind::UnsupportedLook { look });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordAscii;",
          "    let _result = BuildError::unsupported_look(look);",
          "}"
        ],
        "oracle": [
          "    let look = Look::WordAscii;",
          "    let expected_error = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    let result = BuildError::unsupported_look(look);",
          "    assert_eq!(result, expected_error);",
          "    assert_matches!(result.kind, BuildErrorKind::UnsupportedLook { look: Look::WordAscii });"
        ],
        "code": [
          "{",
          "    let look = Look::WordAscii;",
          "    let _result = BuildError::unsupported_look(look);",
          "    let look = Look::WordAscii;",
          "    let expected_error = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    let result = BuildError::unsupported_look(look);",
          "    assert_eq!(result, expected_error);",
          "    assert_matches!(result.kind, BuildErrorKind::UnsupportedLook { look: Look::WordAscii });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordAsciiNegate;",
          "    let _result = BuildError::unsupported_look(look);",
          "}"
        ],
        "oracle": [
          "    let look = Look::WordAsciiNegate;",
          "    let expected_result = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(_result, expected_result);"
        ],
        "code": [
          "{",
          "    let look = Look::WordAsciiNegate;",
          "    let _result = BuildError::unsupported_look(look);",
          "    let look = Look::WordAsciiNegate;",
          "    let expected_result = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(_result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordUnicode;",
          "    let _result = BuildError::unsupported_look(look);",
          "}"
        ],
        "oracle": [
          "    let look = Look::WordUnicode;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(_result, expected);",
          "    ",
          "    let look = Look::WordAscii;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::Start;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::End;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::WordStartHalfAscii;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::WordEndHalfUnicode;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);"
        ],
        "code": [
          "{",
          "    let look = Look::WordUnicode;",
          "    let _result = BuildError::unsupported_look(look);",
          "    let look = Look::WordUnicode;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(_result, expected);",
          "    ",
          "    let look = Look::WordAscii;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::Start;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::End;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::WordStartHalfAscii;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::WordEndHalfUnicode;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordUnicodeNegate;",
          "    let _result = BuildError::unsupported_look(look);",
          "}"
        ],
        "oracle": [
          "    let look = Look::WordUnicodeNegate;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(_result, expected);"
        ],
        "code": [
          "{",
          "    let look = Look::WordUnicodeNegate;",
          "    let _result = BuildError::unsupported_look(look);",
          "    let look = Look::WordUnicodeNegate;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(_result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordStartAscii;",
          "    let _result = BuildError::unsupported_look(look);",
          "}"
        ],
        "oracle": [
          "    let look = Look::WordStartAscii;",
          "    let expected_error = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected_error);"
        ],
        "code": [
          "{",
          "    let look = Look::WordStartAscii;",
          "    let _result = BuildError::unsupported_look(look);",
          "    let look = Look::WordStartAscii;",
          "    let expected_error = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected_error);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordEndAscii;",
          "    let _result = BuildError::unsupported_look(look);",
          "}"
        ],
        "oracle": [
          "    let look = Look::WordEndAscii;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(_result, expected);"
        ],
        "code": [
          "{",
          "    let look = Look::WordEndAscii;",
          "    let _result = BuildError::unsupported_look(look);",
          "    let look = Look::WordEndAscii;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(_result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordStartUnicode;",
          "    let _result = BuildError::unsupported_look(look);",
          "}"
        ],
        "oracle": [
          "    let look = Look::WordStartUnicode;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(_result, expected);"
        ],
        "code": [
          "{",
          "    let look = Look::WordStartUnicode;",
          "    let _result = BuildError::unsupported_look(look);",
          "    let look = Look::WordStartUnicode;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(_result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordEndUnicode;",
          "    let _result = BuildError::unsupported_look(look);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.kind, BuildErrorKind::UnsupportedLook { look: Look::WordEndUnicode });"
        ],
        "code": [
          "{",
          "    let look = Look::WordEndUnicode;",
          "    let _result = BuildError::unsupported_look(look);",
          "    assert_eq!(_result.kind, BuildErrorKind::UnsupportedLook { look: Look::WordEndUnicode });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordStartHalfAscii;",
          "    let _result = BuildError::unsupported_look(look);",
          "}"
        ],
        "oracle": [
          "    let look = Look::WordStartHalfAscii;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::WordEndHalfAscii;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::WordStartUnicode;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::WordEndUnicode;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::WordAscii;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::WordAsciiNegate;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::WordUnicode;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::WordUnicodeNegate;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::Start;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::End;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::StartLF;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::EndLF;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::StartCRLF;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::EndCRLF;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);"
        ],
        "code": [
          "{",
          "    let look = Look::WordStartHalfAscii;",
          "    let _result = BuildError::unsupported_look(look);",
          "    let look = Look::WordStartHalfAscii;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::WordEndHalfAscii;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::WordStartUnicode;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::WordEndUnicode;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::WordAscii;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::WordAsciiNegate;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::WordUnicode;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::WordUnicodeNegate;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::Start;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::End;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::StartLF;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::EndLF;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::StartCRLF;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    ",
          "    let look = Look::EndCRLF;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordEndHalfAscii;",
          "    let _result = BuildError::unsupported_look(look);",
          "}"
        ],
        "oracle": [
          "    let look = Look::WordEndHalfAscii;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(_result, expected);"
        ],
        "code": [
          "{",
          "    let look = Look::WordEndHalfAscii;",
          "    let _result = BuildError::unsupported_look(look);",
          "    let look = Look::WordEndHalfAscii;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(_result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordStartHalfUnicode;",
          "    let _result = BuildError::unsupported_look(look);",
          "}"
        ],
        "oracle": [
          "    let look = Look::WordStartHalfUnicode;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(_result, expected);",
          "    let look = Look::WordEndHalfAscii;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    let look = Look::Start;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    let look = Look::End;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    let look = Look::WordAscii;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);"
        ],
        "code": [
          "{",
          "    let look = Look::WordStartHalfUnicode;",
          "    let _result = BuildError::unsupported_look(look);",
          "    let look = Look::WordStartHalfUnicode;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(_result, expected);",
          "    let look = Look::WordEndHalfAscii;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    let look = Look::Start;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    let look = Look::End;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "    let look = Look::WordAscii;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(BuildError::unsupported_look(look), expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordEndHalfUnicode;",
          "    let _result = BuildError::unsupported_look(look);",
          "}"
        ],
        "oracle": [
          "    let look = Look::WordEndHalfUnicode;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(_result, expected);"
        ],
        "code": [
          "{",
          "    let look = Look::WordEndHalfUnicode;",
          "    let _result = BuildError::unsupported_look(look);",
          "    let look = Look::WordEndHalfUnicode;",
          "    let expected = BuildError { kind: BuildErrorKind::UnsupportedLook { look } };",
          "    assert_eq!(_result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]