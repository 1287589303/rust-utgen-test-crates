[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transitions = vec![",
          "        Transition { start: 97, end: 122, next: StateID::new_unchecked(2) }, // a to z",
          "        Transition { start: 65, end: 90, next: StateID::new_unchecked(3) },  // A to Z",
          "    ];",
          "    let state = State { transitions };",
          "    let _ = format!(\"{:?}\", state);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"{}\", \"97..122: StateID(2), 65..90: StateID(3)\")",
          "    let transitions = vec![Transition { start: 97, end: 122, next: StateID::new_unchecked(2) }, Transition { start: 65, end: 90, next: StateID::new_unchecked(3) }];",
          "    let expected_output = \"97..122: StateID(2), 65..90: StateID(3)\";",
          "    assert_eq!(format!(\"{:?}\", state), expected_output);",
          "    let empty_state = State { transitions: vec![] };",
          "    assert_eq!(format!(\"{:?}\", empty_state), \"\");"
        ],
        "code": [
          "{",
          "    let transitions = vec![",
          "        Transition { start: 97, end: 122, next: StateID::new_unchecked(2) }, // a to z",
          "        Transition { start: 65, end: 90, next: StateID::new_unchecked(3) },  // A to Z",
          "    ];",
          "    let state = State { transitions };",
          "    let _ = format!(\"{:?}\", state);",
          "    write!(f, \"{}\", \"97..122: StateID(2), 65..90: StateID(3)\")",
          "    let transitions = vec![Transition { start: 97, end: 122, next: StateID::new_unchecked(2) }, Transition { start: 65, end: 90, next: StateID::new_unchecked(3) }];",
          "    let expected_output = \"97..122: StateID(2), 65..90: StateID(3)\";",
          "    assert_eq!(format!(\"{:?}\", state), expected_output);",
          "    let empty_state = State { transitions: vec![] };",
          "    assert_eq!(format!(\"{:?}\", empty_state), \"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transitions = vec![",
          "        Transition { start: 48, end: 57, next: StateID::new_unchecked(4) }, // 0 to 9",
          "    ];",
          "    let state = State { transitions };",
          "    let _ = format!(\"{:?}\", state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{:?}\", State { transitions: vec![Transition { start: 48, end: 57, next: StateID::new_unchecked(4) }] }), \"Transition { start: 48, end: 57, next: 4 }\");"
        ],
        "code": [
          "{",
          "    let transitions = vec![",
          "        Transition { start: 48, end: 57, next: StateID::new_unchecked(4) }, // 0 to 9",
          "    ];",
          "    let state = State { transitions };",
          "    let _ = format!(\"{:?}\", state);",
          "    assert_eq!(format!(\"{:?}\", State { transitions: vec![Transition { start: 48, end: 57, next: StateID::new_unchecked(4) }] }), \"Transition { start: 48, end: 57, next: 4 }\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transitions = vec![",
          "        Transition { start: 30, end: 60, next: StateID::new_unchecked(5) }, // 30 to 60",
          "        Transition { start: 61, end: 100, next: StateID::new_unchecked(6) }, // 61 to 100",
          "    ];",
          "    let state = State { transitions };",
          "    let _ = format!(\"{:?}\", state);",
          "}"
        ],
        "oracle": [
          "    let transitions = vec![Transition { start: 30, end: 60, next: StateID::new_unchecked(5) }, Transition { start: 61, end: 100, next: StateID::new_unchecked(6) }];",
          "    let state = State { transitions };",
          "    assert_eq!(format!(\"{:?}\", state), \"Transition { start: 30, end: 60, next: StateID(5) }, Transition { start: 61, end: 100, next: StateID(6) }\");",
          "    ",
          "    let transitions_empty = vec![];",
          "    let state_empty = State { transitions: transitions_empty };",
          "    assert_eq!(format!(\"{:?}\", state_empty), \"\");",
          "    ",
          "    let transitions_single = vec![Transition { start: 10, end: 20, next: StateID::new_unchecked(2) }];",
          "    let state_single = State { transitions: transitions_single };",
          "    assert_eq!(format!(\"{:?}\", state_single), \"Transition { start: 10, end: 20, next: StateID(2) }\");",
          "    ",
          "    let transitions_non_overlapping = vec![",
          "    Transition { start: 1, end: 10, next: StateID::new_unchecked(1) },",
          "    Transition { start: 20, end: 30, next: StateID::new_unchecked(2) },",
          "    ];",
          "    let state_non_overlapping = State { transitions: transitions_non_overlapping };",
          "    assert_eq!(format!(\"{:?}\", state_non_overlapping), \"Transition { start: 1, end: 10, next: StateID(1) }, Transition { start: 20, end: 30, next: StateID(2) }\");",
          "    ",
          "    let transitions_overlapping = vec![",
          "    Transition { start: 10, end: 50, next: StateID::new_unchecked(1) },",
          "    Transition { start: 40, end: 60, next: StateID::new_unchecked(2) },",
          "    ];",
          "    let state_overlapping = State { transitions: transitions_overlapping };",
          "    assert_eq!(format!(\"{:?}\", state_overlapping), \"Transition { start: 10, end: 50, next: StateID(1) }, Transition { start: 40, end: 60, next: StateID(2) }\");"
        ],
        "code": [
          "{",
          "    let transitions = vec![",
          "        Transition { start: 30, end: 60, next: StateID::new_unchecked(5) }, // 30 to 60",
          "        Transition { start: 61, end: 100, next: StateID::new_unchecked(6) }, // 61 to 100",
          "    ];",
          "    let state = State { transitions };",
          "    let _ = format!(\"{:?}\", state);",
          "    let transitions = vec![Transition { start: 30, end: 60, next: StateID::new_unchecked(5) }, Transition { start: 61, end: 100, next: StateID::new_unchecked(6) }];",
          "    let state = State { transitions };",
          "    assert_eq!(format!(\"{:?}\", state), \"Transition { start: 30, end: 60, next: StateID(5) }, Transition { start: 61, end: 100, next: StateID(6) }\");",
          "    ",
          "    let transitions_empty = vec![];",
          "    let state_empty = State { transitions: transitions_empty };",
          "    assert_eq!(format!(\"{:?}\", state_empty), \"\");",
          "    ",
          "    let transitions_single = vec![Transition { start: 10, end: 20, next: StateID::new_unchecked(2) }];",
          "    let state_single = State { transitions: transitions_single };",
          "    assert_eq!(format!(\"{:?}\", state_single), \"Transition { start: 10, end: 20, next: StateID(2) }\");",
          "    ",
          "    let transitions_non_overlapping = vec![",
          "    Transition { start: 1, end: 10, next: StateID::new_unchecked(1) },",
          "    Transition { start: 20, end: 30, next: StateID::new_unchecked(2) },",
          "    ];",
          "    let state_non_overlapping = State { transitions: transitions_non_overlapping };",
          "    assert_eq!(format!(\"{:?}\", state_non_overlapping), \"Transition { start: 1, end: 10, next: StateID(1) }, Transition { start: 20, end: 30, next: StateID(2) }\");",
          "    ",
          "    let transitions_overlapping = vec![",
          "    Transition { start: 10, end: 50, next: StateID::new_unchecked(1) },",
          "    Transition { start: 40, end: 60, next: StateID::new_unchecked(2) },",
          "    ];",
          "    let state_overlapping = State { transitions: transitions_overlapping };",
          "    assert_eq!(format!(\"{:?}\", state_overlapping), \"Transition { start: 10, end: 50, next: StateID(1) }, Transition { start: 40, end: 60, next: StateID(2) }\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transitions = vec![",
          "        Transition { start: 1, end: 1, next: StateID::new_unchecked(7) }, // minimum range",
          "        Transition { start: 255, end: 255, next: StateID::new_unchecked(8) }, // maximum range",
          "    ];",
          "    let state = State { transitions };",
          "    let _ = format!(\"{:?}\", state);",
          "}"
        ],
        "oracle": [
          "    let transitions_min = vec![Transition { start: 1, end: 1, next: StateID::new_unchecked(7) }];",
          "    let transitions_max = vec![Transition { start: 255, end: 255, next: StateID::new_unchecked(8) }];",
          "    let state_min = State { transitions: transitions_min };",
          "    let state_max = State { transitions: transitions_max };",
          "    assert_eq!(format!(\"{:?}\", state_min), \"Transition { start: 1, end: 1, next: StateID::new_unchecked(7) }\");",
          "    assert_eq!(format!(\"{:?}\", state_max), \"Transition { start: 255, end: 255, next: StateID::new_unchecked(8) }\");"
        ],
        "code": [
          "{",
          "    let transitions = vec![",
          "        Transition { start: 1, end: 1, next: StateID::new_unchecked(7) }, // minimum range",
          "        Transition { start: 255, end: 255, next: StateID::new_unchecked(8) }, // maximum range",
          "    ];",
          "    let state = State { transitions };",
          "    let _ = format!(\"{:?}\", state);",
          "    let transitions_min = vec![Transition { start: 1, end: 1, next: StateID::new_unchecked(7) }];",
          "    let transitions_max = vec![Transition { start: 255, end: 255, next: StateID::new_unchecked(8) }];",
          "    let state_min = State { transitions: transitions_min };",
          "    let state_max = State { transitions: transitions_max };",
          "    assert_eq!(format!(\"{:?}\", state_min), \"Transition { start: 1, end: 1, next: StateID::new_unchecked(7) }\");",
          "    assert_eq!(format!(\"{:?}\", state_max), \"Transition { start: 255, end: 255, next: StateID::new_unchecked(8) }\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]