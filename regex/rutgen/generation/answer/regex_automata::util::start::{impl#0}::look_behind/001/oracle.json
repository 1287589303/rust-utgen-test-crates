[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new();",
          "    let result = config.look_behind(None);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.get_look_behind(), None);"
        ],
        "code": [
          "{",
          "    let config = Config::new();",
          "    let result = config.look_behind(None);",
          "    assert_eq!(result.get_look_behind(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new();",
          "    let result = config.look_behind(Some(0));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.get_look_behind(), Some(0));",
          "    assert_ne!(result.get_look_behind(), None);",
          "    let config_no_look_behind = Config::new();",
          "    let result_no_look_behind = config_no_look_behind.look_behind(None);",
          "    assert_eq!(result_no_look_behind.get_look_behind(), None);",
          "    assert_eq!(result_no_look_behind.get_anchored(), Anchored::No);",
          "    let result_another_byte = config.look_behind(Some(255));",
          "    assert_eq!(result_another_byte.get_look_behind(), Some(255));"
        ],
        "code": [
          "{",
          "    let config = Config::new();",
          "    let result = config.look_behind(Some(0));",
          "    assert_eq!(result.get_look_behind(), Some(0));",
          "    assert_ne!(result.get_look_behind(), None);",
          "    let config_no_look_behind = Config::new();",
          "    let result_no_look_behind = config_no_look_behind.look_behind(None);",
          "    assert_eq!(result_no_look_behind.get_look_behind(), None);",
          "    assert_eq!(result_no_look_behind.get_anchored(), Anchored::No);",
          "    let result_another_byte = config.look_behind(Some(255));",
          "    assert_eq!(result_another_byte.get_look_behind(), Some(255));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new();",
          "    let result = config.look_behind(Some(255));",
          "}"
        ],
        "oracle": [
          "    let config = Config::new(); assert_eq!(config.look_behind(Some(255)).get_look_behind(), Some(255));",
          "    let config = Config::new(); assert_eq!(config.look_behind(None).get_look_behind(), None);",
          "    let config = Config::new(); assert_eq!(config.look_behind(Some(0)).get_look_behind(), Some(0));",
          "    let config = Config::new().look_behind(Some(128)); assert_eq!(config.get_look_behind(), Some(128));",
          "    let config = Config::new().look_behind(Some(255)); assert_eq!(config.get_look_behind(), Some(255));"
        ],
        "code": [
          "{",
          "    let config = Config::new();",
          "    let result = config.look_behind(Some(255));",
          "    let config = Config::new(); assert_eq!(config.look_behind(Some(255)).get_look_behind(), Some(255));",
          "    let config = Config::new(); assert_eq!(config.look_behind(None).get_look_behind(), None);",
          "    let config = Config::new(); assert_eq!(config.look_behind(Some(0)).get_look_behind(), Some(0));",
          "    let config = Config::new().look_behind(Some(128)); assert_eq!(config.get_look_behind(), Some(128));",
          "    let config = Config::new().look_behind(Some(255)); assert_eq!(config.get_look_behind(), Some(255));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]