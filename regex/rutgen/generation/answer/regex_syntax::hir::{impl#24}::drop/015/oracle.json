[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let capture_expression = Capture {",
          "        index: 0,",
          "        name: None,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Empty,",
          "            props: Properties(Box::new(PropertiesI {})),",
          "        }),",
          "    };",
          "",
          "    let repetition_expression = Repetition {",
          "        min: 1,",
          "        max: Some(3),",
          "        greedy: true,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Capture(capture_expression),",
          "            props: Properties(Box::new(PropertiesI {})),",
          "        }),",
          "    };",
          "",
          "    let alternation_expression = HirKind::Alternation(vec![",
          "        Hir {",
          "            kind: HirKind::Repetition(repetition_expression.clone()),",
          "            props: Properties(Box::new(PropertiesI {})),",
          "        },",
          "        Hir {",
          "            kind: HirKind::Repetition(repetition_expression),",
          "            props: Properties(Box::new(PropertiesI {})),",
          "        },",
          "    ]);",
          "",
          "    let mut hir = Hir {",
          "        kind: alternation_expression,",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "",
          "    drop(hir);",
          "}"
        ],
        "oracle": [
          "    let capture_expression = Capture { index: 0, name: None, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties(Box::new(PropertiesI {})) }) };",
          "    let repetition_expression = Repetition { min: 1, max: Some(3), greedy: true, sub: Box::new(Hir { kind: HirKind::Capture(capture_expression), props: Properties(Box::new(PropertiesI {})) }) };",
          "    let alternation_expression = HirKind::Alternation(vec![Hir { kind: HirKind::Repetition(repetition_expression.clone()), props: Properties(Box::new(PropertiesI {})) }, Hir { kind: HirKind::Repetition(repetition_expression), props: Properties(Box::new(PropertiesI {})) }]);",
          "    let mut hir = Hir { kind: alternation_expression, props: Properties(Box::new(PropertiesI {})) };",
          "    drop(hir);",
          "    ",
          "    assert_eq!(hir.kind(), &HirKind::Alternation(_));",
          "    assert!(matches!(hir.kind(), HirKind::Alternation(ref x) if !x.is_empty()));",
          "    assert!(matches!(hir.kind, HirKind::Repetition(ref mut x) if x.min == 1 && x.max == Some(3) && x.greedy == true));"
        ],
        "code": [
          "{",
          "    let capture_expression = Capture {",
          "        index: 0,",
          "        name: None,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Empty,",
          "            props: Properties(Box::new(PropertiesI {})),",
          "        }),",
          "    };",
          "",
          "    let repetition_expression = Repetition {",
          "        min: 1,",
          "        max: Some(3),",
          "        greedy: true,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Capture(capture_expression),",
          "            props: Properties(Box::new(PropertiesI {})),",
          "        }),",
          "    };",
          "",
          "    let alternation_expression = HirKind::Alternation(vec![",
          "        Hir {",
          "            kind: HirKind::Repetition(repetition_expression.clone()),",
          "            props: Properties(Box::new(PropertiesI {})),",
          "        },",
          "        Hir {",
          "            kind: HirKind::Repetition(repetition_expression),",
          "            props: Properties(Box::new(PropertiesI {})),",
          "        },",
          "    ]);",
          "",
          "    let mut hir = Hir {",
          "        kind: alternation_expression,",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "",
          "    drop(hir);",
          "    let capture_expression = Capture { index: 0, name: None, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties(Box::new(PropertiesI {})) }) };",
          "    let repetition_expression = Repetition { min: 1, max: Some(3), greedy: true, sub: Box::new(Hir { kind: HirKind::Capture(capture_expression), props: Properties(Box::new(PropertiesI {})) }) };",
          "    let alternation_expression = HirKind::Alternation(vec![Hir { kind: HirKind::Repetition(repetition_expression.clone()), props: Properties(Box::new(PropertiesI {})) }, Hir { kind: HirKind::Repetition(repetition_expression), props: Properties(Box::new(PropertiesI {})) }]);",
          "    let mut hir = Hir { kind: alternation_expression, props: Properties(Box::new(PropertiesI {})) };",
          "    drop(hir);",
          "    ",
          "    assert_eq!(hir.kind(), &HirKind::Alternation(_));",
          "    assert!(matches!(hir.kind(), HirKind::Alternation(ref x) if !x.is_empty()));",
          "    assert!(matches!(hir.kind, HirKind::Repetition(ref mut x) if x.min == 1 && x.max == Some(3) && x.greedy == true));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub_expression = Hir {",
          "        kind: HirKind::Literal(Literal { bytes: vec![b'a'] }),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "",
          "    let repetition_expression = Repetition {",
          "        min: 0,",
          "        max: None,",
          "        greedy: false,",
          "        sub: Box::new(sub_expression),",
          "    };",
          "",
          "    let alternation_expression = HirKind::Alternation(vec![",
          "        Hir {",
          "            kind: HirKind::Repetition(repetition_expression),",
          "            props: Properties(Box::new(PropertiesI {})),",
          "        },",
          "    ]);",
          "",
          "    let mut hir = Hir {",
          "        kind: alternation_expression,",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "",
          "    drop(hir);",
          "}"
        ],
        "oracle": [
          "    let sub_expression = Hir { kind: HirKind::Literal(Literal { bytes: vec![b'a'] }), props: Properties(Box::new(PropertiesI {})) };",
          "    let repetition_expression = Repetition { min: 0, max: None, greedy: false, sub: Box::new(sub_expression) };",
          "    let alternation_expression = HirKind::Alternation(vec![Hir { kind: HirKind::Repetition(repetition_expression), props: Properties(Box::new(PropertiesI {})) }]);",
          "    let mut hir = Hir { kind: alternation_expression, props: Properties(Box::new(PropertiesI {})) };",
          "    drop(hir);",
          "    ",
          "    assert_eq!(hir.kind(), &HirKind::Alternation(vec![Hir { kind: HirKind::Repetition(repetition_expression), props: Properties(Box::new(PropertiesI {})) }]));",
          "    assert!(!matches!(hir.kind(), HirKind::Alternation(ref x) if x.is_empty()));",
          "    assert!(matches!(hir.kind(), HirKind::Alternation(ref x) if !x.is_empty()));",
          "    ",
          "    let mut stack = vec![hir];",
          "    if let Some(mut expr) = stack.pop() {",
          "    assert!(matches!(expr.kind, HirKind::Repetition(ref mut x)));",
          "    }"
        ],
        "code": [
          "{",
          "    let sub_expression = Hir {",
          "        kind: HirKind::Literal(Literal { bytes: vec![b'a'] }),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "",
          "    let repetition_expression = Repetition {",
          "        min: 0,",
          "        max: None,",
          "        greedy: false,",
          "        sub: Box::new(sub_expression),",
          "    };",
          "",
          "    let alternation_expression = HirKind::Alternation(vec![",
          "        Hir {",
          "            kind: HirKind::Repetition(repetition_expression),",
          "            props: Properties(Box::new(PropertiesI {})),",
          "        },",
          "    ]);",
          "",
          "    let mut hir = Hir {",
          "        kind: alternation_expression,",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "",
          "    drop(hir);",
          "    let sub_expression = Hir { kind: HirKind::Literal(Literal { bytes: vec![b'a'] }), props: Properties(Box::new(PropertiesI {})) };",
          "    let repetition_expression = Repetition { min: 0, max: None, greedy: false, sub: Box::new(sub_expression) };",
          "    let alternation_expression = HirKind::Alternation(vec![Hir { kind: HirKind::Repetition(repetition_expression), props: Properties(Box::new(PropertiesI {})) }]);",
          "    let mut hir = Hir { kind: alternation_expression, props: Properties(Box::new(PropertiesI {})) };",
          "    drop(hir);",
          "    ",
          "    assert_eq!(hir.kind(), &HirKind::Alternation(vec![Hir { kind: HirKind::Repetition(repetition_expression), props: Properties(Box::new(PropertiesI {})) }]));",
          "    assert!(!matches!(hir.kind(), HirKind::Alternation(ref x) if x.is_empty()));",
          "    assert!(matches!(hir.kind(), HirKind::Alternation(ref x) if !x.is_empty()));",
          "    ",
          "    let mut stack = vec![hir];",
          "    if let Some(mut expr) = stack.pop() {",
          "    assert!(matches!(expr.kind, HirKind::Repetition(ref mut x)));",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]