[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let capture_sub = Hir {",
          "        kind: HirKind::Class(Class {}),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    let capture = Capture {",
          "        index: 0,",
          "        name: Some(Box::from(\"test\")),",
          "        sub: Box::new(capture_sub),",
          "    };",
          "    let hir_capture = Hir {",
          "        kind: HirKind::Capture(capture),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    drop(hir_capture);",
          "}"
        ],
        "oracle": [
          "    let capture_sub = Hir { kind: HirKind::Class(Class {}), props: Properties(Box::new(PropertiesI {})) };",
          "    let capture = Capture { index: 0, name: Some(Box::from(\"test\")), sub: Box::new(capture_sub) };",
          "    let hir_capture = Hir { kind: HirKind::Capture(capture), props: Properties(Box::new(PropertiesI {})) };",
          "    assert_eq!(hir_capture.kind(), &HirKind::Capture(capture));",
          "    assert!(!capture.sub.kind.subs().is_empty());",
          "    let mut stack = vec![mem::replace(hir_capture, Hir::empty())];",
          "    let expr = stack.pop().unwrap();",
          "    assert!(matches!(expr.kind, HirKind::Class(_)));",
          "    assert!(matches!(expr.kind, HirKind::Class(_) | HirKind::Look(_) | HirKind::Literal(_) | HirKind::Empty));"
        ],
        "code": [
          "{",
          "    let capture_sub = Hir {",
          "        kind: HirKind::Class(Class {}),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    let capture = Capture {",
          "        index: 0,",
          "        name: Some(Box::from(\"test\")),",
          "        sub: Box::new(capture_sub),",
          "    };",
          "    let hir_capture = Hir {",
          "        kind: HirKind::Capture(capture),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    drop(hir_capture);",
          "    let capture_sub = Hir { kind: HirKind::Class(Class {}), props: Properties(Box::new(PropertiesI {})) };",
          "    let capture = Capture { index: 0, name: Some(Box::from(\"test\")), sub: Box::new(capture_sub) };",
          "    let hir_capture = Hir { kind: HirKind::Capture(capture), props: Properties(Box::new(PropertiesI {})) };",
          "    assert_eq!(hir_capture.kind(), &HirKind::Capture(capture));",
          "    assert!(!capture.sub.kind.subs().is_empty());",
          "    let mut stack = vec![mem::replace(hir_capture, Hir::empty())];",
          "    let expr = stack.pop().unwrap();",
          "    assert!(matches!(expr.kind, HirKind::Class(_)));",
          "    assert!(matches!(expr.kind, HirKind::Class(_) | HirKind::Look(_) | HirKind::Literal(_) | HirKind::Empty));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let class_hir = Hir {",
          "        kind: HirKind::class(Class {}),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    let capture = Capture {",
          "        index: 1,",
          "        name: None,",
          "        sub: Box::new(class_hir),",
          "    };",
          "    let hir_capture = Hir {",
          "        kind: HirKind::Capture(capture),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    drop(hir_capture);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir_capture.kind(), HirKind::Capture(capture));",
          "    assert!(!capture.sub.kind.subs().is_empty());",
          "    let mut stack = vec![mem::replace(&hir_capture, Hir::empty())];",
          "    let expr = stack.pop().unwrap();",
          "    assert_eq!(expr.kind, HirKind::Class(_));",
          "    assert!(matches!(expr.kind, HirKind::Class(_) | HirKind::Look(_) | HirKind::Literal(_) | HirKind::Empty));"
        ],
        "code": [
          "{",
          "    let class_hir = Hir {",
          "        kind: HirKind::class(Class {}),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    let capture = Capture {",
          "        index: 1,",
          "        name: None,",
          "        sub: Box::new(class_hir),",
          "    };",
          "    let hir_capture = Hir {",
          "        kind: HirKind::Capture(capture),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    drop(hir_capture);",
          "    assert_eq!(hir_capture.kind(), HirKind::Capture(capture));",
          "    assert!(!capture.sub.kind.subs().is_empty());",
          "    let mut stack = vec![mem::replace(&hir_capture, Hir::empty())];",
          "    let expr = stack.pop().unwrap();",
          "    assert_eq!(expr.kind, HirKind::Class(_));",
          "    assert!(matches!(expr.kind, HirKind::Class(_) | HirKind::Look(_) | HirKind::Literal(_) | HirKind::Empty));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_hir = Hir {",
          "        kind: HirKind::Look(Look {}),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    let capture = Capture {",
          "        index: 2,",
          "        name: Some(Box::from(\"capture2\")),",
          "        sub: Box::new(look_hir),",
          "    };",
          "    let hir_capture = Hir {",
          "        kind: HirKind::Capture(capture),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    drop(hir_capture);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir_capture.kind(), HirKind::Capture(capture));",
          "    assert!(!x.sub.kind.subs().is_empty());",
          "    assert!(matches!(stack.pop(), Some(expr) if matches!(expr.kind, HirKind::Class(_))));",
          "    assert!(matches!(stack.pop(), Some(expr) if matches!(expr.kind, HirKind::Class(_) | HirKind::Look(_) | HirKind::Literal(_) | HirKind::Empty)));"
        ],
        "code": [
          "{",
          "    let look_hir = Hir {",
          "        kind: HirKind::Look(Look {}),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    let capture = Capture {",
          "        index: 2,",
          "        name: Some(Box::from(\"capture2\")),",
          "        sub: Box::new(look_hir),",
          "    };",
          "    let hir_capture = Hir {",
          "        kind: HirKind::Capture(capture),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    drop(hir_capture);",
          "    assert_eq!(hir_capture.kind(), HirKind::Capture(capture));",
          "    assert!(!x.sub.kind.subs().is_empty());",
          "    assert!(matches!(stack.pop(), Some(expr) if matches!(expr.kind, HirKind::Class(_))));",
          "    assert!(matches!(stack.pop(), Some(expr) if matches!(expr.kind, HirKind::Class(_) | HirKind::Look(_) | HirKind::Literal(_) | HirKind::Empty)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_hir = Hir {",
          "        kind: HirKind::Empty,",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    let capture = Capture {",
          "        index: 3,",
          "        name: None,",
          "        sub: Box::new(empty_hir),",
          "    };",
          "    let hir_capture = Hir {",
          "        kind: HirKind::Capture(capture),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    drop(hir_capture);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir_capture.kind(), &HirKind::Capture(capture));",
          "    assert!(!capture.sub.kind.subs().is_empty());",
          "    let expr = hir_capture.kind().subs()[0].clone();",
          "    assert_eq!(expr.kind, HirKind::Class(Class));",
          "    assert!(matches!(expr.kind, HirKind::Class(_) | HirKind::Look(_) | HirKind::Literal(_) | HirKind::Empty));"
        ],
        "code": [
          "{",
          "    let empty_hir = Hir {",
          "        kind: HirKind::Empty,",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    let capture = Capture {",
          "        index: 3,",
          "        name: None,",
          "        sub: Box::new(empty_hir),",
          "    };",
          "    let hir_capture = Hir {",
          "        kind: HirKind::Capture(capture),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    drop(hir_capture);",
          "    assert_eq!(hir_capture.kind(), &HirKind::Capture(capture));",
          "    assert!(!capture.sub.kind.subs().is_empty());",
          "    let expr = hir_capture.kind().subs()[0].clone();",
          "    assert_eq!(expr.kind, HirKind::Class(Class));",
          "    assert!(matches!(expr.kind, HirKind::Class(_) | HirKind::Look(_) | HirKind::Literal(_) | HirKind::Empty));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let class_hir = Hir {",
          "        kind: HirKind::Class(Class {}),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    let capture_sub = Hir {",
          "        kind: HirKind::Capture(Capture {",
          "            index: 0,",
          "            name: Some(Box::from(\"sub_capture\")),",
          "            sub: Box::new(class_hir),",
          "        }),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    let hir_capture = Hir {",
          "        kind: HirKind::Capture(Capture {",
          "            index: 0,",
          "            name: None,",
          "            sub: Box::new(capture_sub),",
          "        }),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    drop(hir_capture);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir_capture.kind(), &HirKind::Capture(ref x));",
          "    assert!(!x.sub.kind.subs().is_empty());",
          "    assert!(stack.pop().is_some());",
          "    assert_eq!(expr.kind, HirKind::Class(_));",
          "    assert!(matches!(expr.kind, HirKind::Class(_) | HirKind::Look(_) | HirKind::Literal(_) | HirKind::Empty));",
          "    assert!(stack.pop().is_some());"
        ],
        "code": [
          "{",
          "    let class_hir = Hir {",
          "        kind: HirKind::Class(Class {}),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    let capture_sub = Hir {",
          "        kind: HirKind::Capture(Capture {",
          "            index: 0,",
          "            name: Some(Box::from(\"sub_capture\")),",
          "            sub: Box::new(class_hir),",
          "        }),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    let hir_capture = Hir {",
          "        kind: HirKind::Capture(Capture {",
          "            index: 0,",
          "            name: None,",
          "            sub: Box::new(capture_sub),",
          "        }),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    drop(hir_capture);",
          "    assert_eq!(hir_capture.kind(), &HirKind::Capture(ref x));",
          "    assert!(!x.sub.kind.subs().is_empty());",
          "    assert!(stack.pop().is_some());",
          "    assert_eq!(expr.kind, HirKind::Class(_));",
          "    assert!(matches!(expr.kind, HirKind::Class(_) | HirKind::Look(_) | HirKind::Literal(_) | HirKind::Empty));",
          "    assert!(stack.pop().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]