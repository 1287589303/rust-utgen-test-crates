[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_hir = Hir {",
          "        kind: HirKind::Alternation(vec![]),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    // Calling the drop method",
          "    let _ = empty_hir;",
          "}"
        ],
        "oracle": [
          "    let empty_hir = Hir { kind: HirKind::Alternation(vec![]), props: Properties(Box::new(PropertiesI {})), }; assert_eq!(matches!(self.kind(), HirKind::Alternation(ref x) if x.is_empty()), true); assert_eq!(self.props.0, Box::new(PropertiesI {}));"
        ],
        "code": [
          "{",
          "    let empty_hir = Hir {",
          "        kind: HirKind::Alternation(vec![]),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    // Calling the drop method",
          "    let _ = empty_hir;",
          "    let empty_hir = Hir { kind: HirKind::Alternation(vec![]), props: Properties(Box::new(PropertiesI {})), }; assert_eq!(matches!(self.kind(), HirKind::Alternation(ref x) if x.is_empty()), true); assert_eq!(self.props.0, Box::new(PropertiesI {}));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_hir = Hir {",
          "        kind: HirKind::Concat(vec![]),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    // Calling the drop method",
          "    let _ = empty_hir;",
          "}"
        ],
        "oracle": [
          "    let empty_hir = Hir {",
          "    kind: HirKind::Alternation(vec![]),",
          "    props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    // Calling the drop method",
          "    let _ = empty_hir;"
        ],
        "code": [
          "{",
          "    let empty_hir = Hir {",
          "        kind: HirKind::Concat(vec![]),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    // Calling the drop method",
          "    let _ = empty_hir;",
          "    let empty_hir = Hir {",
          "    kind: HirKind::Alternation(vec![]),",
          "    props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    // Calling the drop method",
          "    let _ = empty_hir;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]