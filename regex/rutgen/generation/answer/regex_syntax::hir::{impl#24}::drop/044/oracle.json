[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let capture = Capture {",
          "        index: 0,",
          "        name: Some(Box::from(\"test_capture\")),",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"a\")),",
          "                    props: Properties(Box::new(PropertiesI)),",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"b\")),",
          "                    props: Properties(Box::new(PropertiesI)),",
          "                },",
          "            ]),",
          "            props: Properties(Box::new(PropertiesI)),",
          "        }),",
          "    };",
          "",
          "    let repetition = Repetition {",
          "        min: 1,",
          "        max: Some(5),",
          "        greedy: true,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Capture(capture),",
          "            props: Properties(Box::new(PropertiesI)),",
          "        }),",
          "    };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        props: Properties(Box::new(PropertiesI)),",
          "    };",
          "",
          "    drop(hir);",
          "}"
        ],
        "oracle": [
          "    let capture = Capture { index: 0, name: Some(Box::from(\"test_capture\")), sub: Box::new(Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::from(\"a\")), props: Properties(Box::new(PropertiesI)), }, Hir { kind: HirKind::Literal(Literal::from(\"b\")), props: Properties(Box::new(PropertiesI)), }, ]), props: Properties(Box::new(PropertiesI)), }), };",
          "    ",
          "    let repetition = Repetition { min: 1, max: Some(5), greedy: true, sub: Box::new(Hir { kind: HirKind::Capture(capture), props: Properties(Box::new(PropertiesI)), }), };",
          "    ",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties(Box::new(PropertiesI)), };",
          "    ",
          "    assert_eq!(hir.kind(), &HirKind::Repetition(repetition));",
          "    assert!(!hir.subs()[0].kind.subs().is_empty());",
          "    let result = hir.kind.subs()[0];",
          "    assert!(matches!(result.kind, HirKind::Capture(_)));"
        ],
        "code": [
          "{",
          "    let capture = Capture {",
          "        index: 0,",
          "        name: Some(Box::from(\"test_capture\")),",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"a\")),",
          "                    props: Properties(Box::new(PropertiesI)),",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"b\")),",
          "                    props: Properties(Box::new(PropertiesI)),",
          "                },",
          "            ]),",
          "            props: Properties(Box::new(PropertiesI)),",
          "        }),",
          "    };",
          "",
          "    let repetition = Repetition {",
          "        min: 1,",
          "        max: Some(5),",
          "        greedy: true,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Capture(capture),",
          "            props: Properties(Box::new(PropertiesI)),",
          "        }),",
          "    };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        props: Properties(Box::new(PropertiesI)),",
          "    };",
          "",
          "    drop(hir);",
          "    let capture = Capture { index: 0, name: Some(Box::from(\"test_capture\")), sub: Box::new(Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::from(\"a\")), props: Properties(Box::new(PropertiesI)), }, Hir { kind: HirKind::Literal(Literal::from(\"b\")), props: Properties(Box::new(PropertiesI)), }, ]), props: Properties(Box::new(PropertiesI)), }), };",
          "    ",
          "    let repetition = Repetition { min: 1, max: Some(5), greedy: true, sub: Box::new(Hir { kind: HirKind::Capture(capture), props: Properties(Box::new(PropertiesI)), }), };",
          "    ",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties(Box::new(PropertiesI)), };",
          "    ",
          "    assert_eq!(hir.kind(), &HirKind::Repetition(repetition));",
          "    assert!(!hir.subs()[0].kind.subs().is_empty());",
          "    let result = hir.kind.subs()[0];",
          "    assert!(matches!(result.kind, HirKind::Capture(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nested_capture = Capture {",
          "        index: 1,",
          "        name: Some(Box::from(\"nested_capture\")),",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Alternation(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"x\")),",
          "                    props: Properties(Box::new(PropertiesI)),",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"y\")),",
          "                    props: Properties(Box::new(PropertiesI)),",
          "                },",
          "            ]),",
          "            props: Properties(Box::new(PropertiesI)),",
          "        }),",
          "    };",
          "",
          "    let repetition = Repetition {",
          "        min: 2,",
          "        max: Some(10),",
          "        greedy: false,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Capture(nested_capture),",
          "            props: Properties(Box::new(PropertiesI)),",
          "        }),",
          "    };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        props: Properties(Box::new(PropertiesI)),",
          "    };",
          "",
          "    drop(hir);",
          "}"
        ],
        "oracle": [
          "    let nested_capture = Capture { index: 1, name: Some(Box::from(\"nested_capture\")), sub: Box::new(Hir { kind: HirKind::Alternation(vec![Hir { kind: HirKind::Literal(Literal::from(\"x\")), props: Properties(Box::new(PropertiesI)), }, Hir { kind: HirKind::Literal(Literal::from(\"y\")), props: Properties(Box::new(PropertiesI)), },]), props: Properties(Box::new(PropertiesI)), }), };",
          "    let repetition = Repetition { min: 2, max: Some(10), greedy: false, sub: Box::new(Hir { kind: HirKind::Capture(nested_capture), props: Properties(Box::new(PropertiesI)), }), };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties(Box::new(PropertiesI)), };",
          "    assert!(hir.kind() == HirKind::Repetition(repetition));",
          "    assert!(if let HirKind::Repetition(ref x) = hir.kind() { !x.sub.kind.subs().is_empty() } else { false });",
          "    assert!(hir.kind().subs().iter().any(|expr| matches!(expr.kind, HirKind::Capture(_))));"
        ],
        "code": [
          "{",
          "    let nested_capture = Capture {",
          "        index: 1,",
          "        name: Some(Box::from(\"nested_capture\")),",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Alternation(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"x\")),",
          "                    props: Properties(Box::new(PropertiesI)),",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"y\")),",
          "                    props: Properties(Box::new(PropertiesI)),",
          "                },",
          "            ]),",
          "            props: Properties(Box::new(PropertiesI)),",
          "        }),",
          "    };",
          "",
          "    let repetition = Repetition {",
          "        min: 2,",
          "        max: Some(10),",
          "        greedy: false,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Capture(nested_capture),",
          "            props: Properties(Box::new(PropertiesI)),",
          "        }),",
          "    };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        props: Properties(Box::new(PropertiesI)),",
          "    };",
          "",
          "    drop(hir);",
          "    let nested_capture = Capture { index: 1, name: Some(Box::from(\"nested_capture\")), sub: Box::new(Hir { kind: HirKind::Alternation(vec![Hir { kind: HirKind::Literal(Literal::from(\"x\")), props: Properties(Box::new(PropertiesI)), }, Hir { kind: HirKind::Literal(Literal::from(\"y\")), props: Properties(Box::new(PropertiesI)), },]), props: Properties(Box::new(PropertiesI)), }), };",
          "    let repetition = Repetition { min: 2, max: Some(10), greedy: false, sub: Box::new(Hir { kind: HirKind::Capture(nested_capture), props: Properties(Box::new(PropertiesI)), }), };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties(Box::new(PropertiesI)), };",
          "    assert!(hir.kind() == HirKind::Repetition(repetition));",
          "    assert!(if let HirKind::Repetition(ref x) = hir.kind() { !x.sub.kind.subs().is_empty() } else { false });",
          "    assert!(hir.kind().subs().iter().any(|expr| matches!(expr.kind, HirKind::Capture(_))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]