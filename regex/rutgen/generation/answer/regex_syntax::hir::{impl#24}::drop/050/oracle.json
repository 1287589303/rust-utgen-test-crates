[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_hir = Hir {",
          "        kind: HirKind::Look(/* initialize Look here */),",
          "        props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = look_hir; // Call drop implicitly by moving the variable out of scope.",
          "}"
        ],
        "oracle": [
          "    let look_hir = Hir { kind: HirKind::Look(/* initialize Look here */), props: Properties(/* initialize properties here */) };",
          "    let look_hir_ref = &look_hir;",
          "    assert_eq!(look_hir_ref.kind(), HirKind::Look(/* check against expected Look */));",
          "    let captured_props = look_hir_ref.properties();",
          "    assert!(matches!(look_hir_ref.kind(), HirKind::Look(_)));",
          "    drop(look_hir);",
          "    assert!(std::ptr::null() == std::ptr::from_exposed(look_hir_ref));"
        ],
        "code": [
          "{",
          "    let look_hir = Hir {",
          "        kind: HirKind::Look(/* initialize Look here */),",
          "        props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = look_hir; // Call drop implicitly by moving the variable out of scope.",
          "    let look_hir = Hir { kind: HirKind::Look(/* initialize Look here */), props: Properties(/* initialize properties here */) };",
          "    let look_hir_ref = &look_hir;",
          "    assert_eq!(look_hir_ref.kind(), HirKind::Look(/* check against expected Look */));",
          "    let captured_props = look_hir_ref.properties();",
          "    assert!(matches!(look_hir_ref.kind(), HirKind::Look(_)));",
          "    drop(look_hir);",
          "    assert!(std::ptr::null() == std::ptr::from_exposed(look_hir_ref));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let class_hir = Hir {",
          "        kind: HirKind::Class(/* initialize Class here */),",
          "        props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = class_hir; // Call drop implicitly by moving the variable out of scope.",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_hir.kind(), &HirKind::Class(/* expected Class initialization */));",
          "    assert!(class_hir.properties().is_some());",
          "    assert!(std::mem::size_of::<Hir>() > 0);",
          "    assert!(std::mem::drop(class_hir).is_none());"
        ],
        "code": [
          "{",
          "    let class_hir = Hir {",
          "        kind: HirKind::Class(/* initialize Class here */),",
          "        props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = class_hir; // Call drop implicitly by moving the variable out of scope.",
          "    assert_eq!(class_hir.kind(), &HirKind::Class(/* expected Class initialization */));",
          "    assert!(class_hir.properties().is_some());",
          "    assert!(std::mem::size_of::<Hir>() > 0);",
          "    assert!(std::mem::drop(class_hir).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_hir = Hir {",
          "        kind: HirKind::Empty,",
          "        props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = empty_hir; // Call drop implicitly by moving the variable out of scope.",
          "}"
        ],
        "oracle": [
          "    let look_hir = Hir {",
          "    kind: HirKind::Look(/* initialize appropriately */),",
          "    props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = look_hir; // Call drop implicitly by moving the variable out of scope.",
          "    ",
          "    let literal_hir = Hir {",
          "    kind: HirKind::Literal(/* initialize appropriately */),",
          "    props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = literal_hir; // Call drop implicitly by moving the variable out of scope.",
          "    ",
          "    let class_hir = Hir {",
          "    kind: HirKind::Class(/* initialize appropriately */),",
          "    props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = class_hir; // Call drop implicitly by moving the variable out of scope.",
          "    ",
          "    let empty_capture_hir = Hir {",
          "    kind: HirKind::Capture(Capture {",
          "    index: 0,",
          "    name: None,",
          "    sub: Box::new(Hir::empty()),",
          "    }),",
          "    props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = empty_capture_hir; // Call drop implicitly by moving the variable out of scope.",
          "    ",
          "    let empty_repetition_hir = Hir {",
          "    kind: HirKind::Repetition(Repetition {",
          "    min: 0,",
          "    max: None,",
          "    greedy: true,",
          "    sub: Box::new(Hir::empty()),",
          "    }),",
          "    props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = empty_repetition_hir; // Call drop implicitly by moving the variable out of scope.",
          "    ",
          "    let empty_concat_hir = Hir {",
          "    kind: HirKind::Concat(vec![]),",
          "    props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = empty_concat_hir; // Call drop implicitly by moving the variable out of scope.",
          "    ",
          "    let empty_alternation_hir = Hir {",
          "    kind: HirKind::Alternation(vec![]),",
          "    props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = empty_alternation_hir; // Call drop implicitly by moving the variable out of scope."
        ],
        "code": [
          "{",
          "    let empty_hir = Hir {",
          "        kind: HirKind::Empty,",
          "        props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = empty_hir; // Call drop implicitly by moving the variable out of scope.",
          "    let look_hir = Hir {",
          "    kind: HirKind::Look(/* initialize appropriately */),",
          "    props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = look_hir; // Call drop implicitly by moving the variable out of scope.",
          "    ",
          "    let literal_hir = Hir {",
          "    kind: HirKind::Literal(/* initialize appropriately */),",
          "    props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = literal_hir; // Call drop implicitly by moving the variable out of scope.",
          "    ",
          "    let class_hir = Hir {",
          "    kind: HirKind::Class(/* initialize appropriately */),",
          "    props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = class_hir; // Call drop implicitly by moving the variable out of scope.",
          "    ",
          "    let empty_capture_hir = Hir {",
          "    kind: HirKind::Capture(Capture {",
          "    index: 0,",
          "    name: None,",
          "    sub: Box::new(Hir::empty()),",
          "    }),",
          "    props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = empty_capture_hir; // Call drop implicitly by moving the variable out of scope.",
          "    ",
          "    let empty_repetition_hir = Hir {",
          "    kind: HirKind::Repetition(Repetition {",
          "    min: 0,",
          "    max: None,",
          "    greedy: true,",
          "    sub: Box::new(Hir::empty()),",
          "    }),",
          "    props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = empty_repetition_hir; // Call drop implicitly by moving the variable out of scope.",
          "    ",
          "    let empty_concat_hir = Hir {",
          "    kind: HirKind::Concat(vec![]),",
          "    props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = empty_concat_hir; // Call drop implicitly by moving the variable out of scope.",
          "    ",
          "    let empty_alternation_hir = Hir {",
          "    kind: HirKind::Alternation(vec![]),",
          "    props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = empty_alternation_hir; // Call drop implicitly by moving the variable out of scope.",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal_hir = Hir {",
          "        kind: HirKind::Literal(/* initialize Literal here */),",
          "        props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = literal_hir; // Call drop implicitly by moving the variable out of scope.",
          "}"
        ],
        "oracle": [
          "    assert_eq!(literal_hir.kind(), &HirKind::Literal(/* expected literal value */));",
          "    assert_eq!(literal_hir.properties(), &Properties(/* expected properties value */));",
          "    let capture_hir = Hir {",
          "    kind: HirKind::Capture(Capture {",
          "    index: 0,",
          "    name: None,",
          "    sub: Box::new(Hir::empty()),",
          "    }),",
          "    props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = capture_hir; // Call drop implicitly by moving the variable out of scope.",
          "    ",
          "    let empty_hir = Hir {",
          "    kind: HirKind::Empty,",
          "    props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = empty_hir; // Call drop implicitly by moving the variable out of scope.",
          "    ",
          "    let class_hir = Hir {",
          "    kind: HirKind::Class(/* initialize Class here */),",
          "    props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = class_hir; // Call drop implicitly by moving the variable out of scope.",
          "    ",
          "    let look_hir = Hir {",
          "    kind: HirKind::Look(/* initialize Look here */),",
          "    props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = look_hir; // Call drop implicitly by moving the variable out of scope.",
          "    ",
          "    let repetition_hir = Hir {",
          "    kind: HirKind::Repetition(Repetition {",
          "    min: 1,",
          "    max: Some(2),",
          "    greedy: true,",
          "    sub: Box::new(Hir::empty()),",
          "    }),",
          "    props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = repetition_hir; // Call drop implicitly by moving the variable out of scope.",
          "    ",
          "    let concat_hir = Hir {",
          "    kind: HirKind::Concat(vec![Hir::empty(), Hir::empty()]),",
          "    props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = concat_hir; // Call drop implicitly by moving the variable out of scope.",
          "    ",
          "    let alternation_hir = Hir {",
          "    kind: HirKind::Alternation(vec![Hir::empty(), Hir::empty()]),",
          "    props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = alternation_hir; // Call drop implicitly by moving the variable out of scope."
        ],
        "code": [
          "{",
          "    let literal_hir = Hir {",
          "        kind: HirKind::Literal(/* initialize Literal here */),",
          "        props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = literal_hir; // Call drop implicitly by moving the variable out of scope.",
          "    assert_eq!(literal_hir.kind(), &HirKind::Literal(/* expected literal value */));",
          "    assert_eq!(literal_hir.properties(), &Properties(/* expected properties value */));",
          "    let capture_hir = Hir {",
          "    kind: HirKind::Capture(Capture {",
          "    index: 0,",
          "    name: None,",
          "    sub: Box::new(Hir::empty()),",
          "    }),",
          "    props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = capture_hir; // Call drop implicitly by moving the variable out of scope.",
          "    ",
          "    let empty_hir = Hir {",
          "    kind: HirKind::Empty,",
          "    props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = empty_hir; // Call drop implicitly by moving the variable out of scope.",
          "    ",
          "    let class_hir = Hir {",
          "    kind: HirKind::Class(/* initialize Class here */),",
          "    props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = class_hir; // Call drop implicitly by moving the variable out of scope.",
          "    ",
          "    let look_hir = Hir {",
          "    kind: HirKind::Look(/* initialize Look here */),",
          "    props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = look_hir; // Call drop implicitly by moving the variable out of scope.",
          "    ",
          "    let repetition_hir = Hir {",
          "    kind: HirKind::Repetition(Repetition {",
          "    min: 1,",
          "    max: Some(2),",
          "    greedy: true,",
          "    sub: Box::new(Hir::empty()),",
          "    }),",
          "    props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = repetition_hir; // Call drop implicitly by moving the variable out of scope.",
          "    ",
          "    let concat_hir = Hir {",
          "    kind: HirKind::Concat(vec![Hir::empty(), Hir::empty()]),",
          "    props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = concat_hir; // Call drop implicitly by moving the variable out of scope.",
          "    ",
          "    let alternation_hir = Hir {",
          "    kind: HirKind::Alternation(vec![Hir::empty(), Hir::empty()]),",
          "    props: Properties(/* initialize properties here */),",
          "    };",
          "    let _ = alternation_hir; // Call drop implicitly by moving the variable out of scope.",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]