[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = prev_char('\\u{E000}');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some('\\u{D7FF}'));",
          "    let result_none = prev_char(char::from_u32(0).unwrap());",
          "    assert_eq!(result_none, None);",
          "    let result_invalid = prev_char('\\u{E001}');",
          "    assert_eq!(result_invalid, Some('\\u{E000}'));"
        ],
        "code": [
          "{",
          "    let result = prev_char('\\u{E000}');",
          "    assert_eq!(result, Some('\\u{D7FF}'));",
          "    let result_none = prev_char(char::from_u32(0).unwrap());",
          "    assert_eq!(result_none, None);",
          "    let result_invalid = prev_char('\\u{E001}');",
          "    assert_eq!(result_invalid, Some('\\u{E000}'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = prev_char('\\u{0001}');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some('\\u{0000}'));",
          "    let result = prev_char('\\u{E000}');",
          "    assert_eq!(result, Some('\\u{D7FF}'));",
          "    let result = prev_char('\\u{0000}');",
          "    assert_eq!(result, None);",
          "    let result = prev_char('\\u{E001}');",
          "    assert_eq!(result, Some('\\u{E000}'));"
        ],
        "code": [
          "{",
          "    let result = prev_char('\\u{0001}');",
          "    assert_eq!(result, Some('\\u{0000}'));",
          "    let result = prev_char('\\u{E000}');",
          "    assert_eq!(result, Some('\\u{D7FF}'));",
          "    let result = prev_char('\\u{0000}');",
          "    assert_eq!(result, None);",
          "    let result = prev_char('\\u{E001}');",
          "    assert_eq!(result, Some('\\u{E000}'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = prev_char('\\u{D7FF}');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some('\\u{D7FF}'));",
          "    assert_eq!(prev_char('\\u{E000}'), Some('\\u{D7FF}'));",
          "    assert_eq!(prev_char('\\u{0000}'), None);",
          "    assert_eq!(prev_char('\\u{0001}'), Some('\\u{0000}'));",
          "    assert_eq!(prev_char('\\u{E001}'), Some('\\u{E000}'));"
        ],
        "code": [
          "{",
          "    let result = prev_char('\\u{D7FF}');",
          "    assert_eq!(result, Some('\\u{D7FF}'));",
          "    assert_eq!(prev_char('\\u{E000}'), Some('\\u{D7FF}'));",
          "    assert_eq!(prev_char('\\u{0000}'), None);",
          "    assert_eq!(prev_char('\\u{0001}'), Some('\\u{0000}'));",
          "    assert_eq!(prev_char('\\u{E001}'), Some('\\u{E000}'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = prev_char('\\u{0000}');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);",
          "    assert_eq!(prev_char('\\u{E000}'), Some('\\u{D7FF}'));",
          "    assert_eq!(prev_char('\\u{0000}'), None);",
          "    assert_eq!(prev_char('\\u{D7FF}'), Some('\\u{D7FE}'));",
          "    assert_eq!(prev_char('\\u{10FFFF}'), Some('\\u{10FFFE}'));",
          "    assert_eq!(prev_char('\\u{E001}'), Some('\\u{E000}'));"
        ],
        "code": [
          "{",
          "    let result = prev_char('\\u{0000}');",
          "    assert_eq!(result, None);",
          "    assert_eq!(prev_char('\\u{E000}'), Some('\\u{D7FF}'));",
          "    assert_eq!(prev_char('\\u{0000}'), None);",
          "    assert_eq!(prev_char('\\u{D7FF}'), Some('\\u{D7FE}'));",
          "    assert_eq!(prev_char('\\u{10FFFF}'), Some('\\u{10FFFE}'));",
          "    assert_eq!(prev_char('\\u{E001}'), Some('\\u{E000}'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]