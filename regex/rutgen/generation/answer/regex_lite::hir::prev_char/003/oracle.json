[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ch = '\\u{E000}';",
          "    let result = prev_char(ch);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some('\\u{D7FF}'));",
          "    assert!(result.is_some());",
          "    assert!(matches!(result, Some(_)));",
          "    assert_eq!(result.unwrap(), '\\u{D7FF}');"
        ],
        "code": [
          "{",
          "    let ch = '\\u{E000}';",
          "    let result = prev_char(ch);",
          "    assert_eq!(result, Some('\\u{D7FF}'));",
          "    assert!(result.is_some());",
          "    assert!(matches!(result, Some(_)));",
          "    assert_eq!(result.unwrap(), '\\u{D7FF}');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ch = '\\u{0001}';",
          "    let result = prev_char(ch);",
          "}"
        ],
        "oracle": [
          "    let ch = '\\u{E000}';",
          "    let expected = Some('\\u{D7FF}');",
          "    assert_eq!(prev_char(ch), expected);",
          "    let ch = '\\u{0002}';",
          "    let expected = Some('\\u{0001}');",
          "    assert_eq!(prev_char(ch), expected);",
          "    let ch = '\\u{0001}';",
          "    let expected = None;",
          "    assert_eq!(prev_char(ch), expected);"
        ],
        "code": [
          "{",
          "    let ch = '\\u{0001}';",
          "    let result = prev_char(ch);",
          "    let ch = '\\u{E000}';",
          "    let expected = Some('\\u{D7FF}');",
          "    assert_eq!(prev_char(ch), expected);",
          "    let ch = '\\u{0002}';",
          "    let expected = Some('\\u{0001}');",
          "    assert_eq!(prev_char(ch), expected);",
          "    let ch = '\\u{0001}';",
          "    let expected = None;",
          "    assert_eq!(prev_char(ch), expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ch = '\\u{D7FF}';",
          "    let result = prev_char(ch);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some('\\u{D7FE}'));",
          "    let ch = '\\u{E000}';",
          "    let result = prev_char(ch);",
          "    assert_eq!(result, Some('\\u{D7FF}'));",
          "    let ch = '\\u{0001}';",
          "    let result = prev_char(ch);",
          "    assert_eq!(result, Some('\\u{0000}'));",
          "    let ch = '\\u{0000}';",
          "    let result = prev_char(ch);",
          "    assert_eq!(result, None);",
          "    let ch = '\\u{E001}';",
          "    let result = prev_char(ch);",
          "    assert_eq!(result, Some('\\u{E000}'));"
        ],
        "code": [
          "{",
          "    let ch = '\\u{D7FF}';",
          "    let result = prev_char(ch);",
          "    assert_eq!(result, Some('\\u{D7FE}'));",
          "    let ch = '\\u{E000}';",
          "    let result = prev_char(ch);",
          "    assert_eq!(result, Some('\\u{D7FF}'));",
          "    let ch = '\\u{0001}';",
          "    let result = prev_char(ch);",
          "    assert_eq!(result, Some('\\u{0000}'));",
          "    let ch = '\\u{0000}';",
          "    let result = prev_char(ch);",
          "    assert_eq!(result, None);",
          "    let ch = '\\u{E001}';",
          "    let result = prev_char(ch);",
          "    assert_eq!(result, Some('\\u{E000}'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ch = '\\u{007F}';",
          "    let result = prev_char(ch);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some('\\u{007E}'));",
          "    ",
          "    let ch = '\\u{E000}';",
          "    let result = prev_char(ch);",
          "    assert_eq!(result, Some('\\u{D7FF}'));",
          "    ",
          "    let ch = '\\u{0100}';",
          "    let result = prev_char(ch);",
          "    assert_eq!(result, Some('\\u{00FF}'));",
          "    ",
          "    let ch = '\\u{0001}';",
          "    let result = prev_char(ch);",
          "    assert_eq!(result, Some('\\u{0000}'));",
          "    ",
          "    let ch = '\\u{10FFFF}';",
          "    let result = prev_char(ch);",
          "    assert_eq!(result, Some('\\u{10FFFE}'));",
          "    ",
          "    let ch = '\\u{FFFD}';",
          "    let result = prev_char(ch);",
          "    assert_eq!(result, Some('\\u{FFFC}'));",
          "    ",
          "    let ch = '\\u{D800}';",
          "    let result = prev_char(ch);",
          "    assert_eq!(result, Some('\\u{D7FF}'));"
        ],
        "code": [
          "{",
          "    let ch = '\\u{007F}';",
          "    let result = prev_char(ch);",
          "    assert_eq!(result, Some('\\u{007E}'));",
          "    ",
          "    let ch = '\\u{E000}';",
          "    let result = prev_char(ch);",
          "    assert_eq!(result, Some('\\u{D7FF}'));",
          "    ",
          "    let ch = '\\u{0100}';",
          "    let result = prev_char(ch);",
          "    assert_eq!(result, Some('\\u{00FF}'));",
          "    ",
          "    let ch = '\\u{0001}';",
          "    let result = prev_char(ch);",
          "    assert_eq!(result, Some('\\u{0000}'));",
          "    ",
          "    let ch = '\\u{10FFFF}';",
          "    let result = prev_char(ch);",
          "    assert_eq!(result, Some('\\u{10FFFE}'));",
          "    ",
          "    let ch = '\\u{FFFD}';",
          "    let result = prev_char(ch);",
          "    assert_eq!(result, Some('\\u{FFFC}'));",
          "    ",
          "    let ch = '\\u{D800}';",
          "    let result = prev_char(ch);",
          "    assert_eq!(result, Some('\\u{D7FF}'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ch = '\\u{0100}';",
          "    let result = prev_char(ch);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some('\\u{00FF}'));",
          "    assert!(result.is_some());",
          "    assert!(result.unwrap() == '\\u{00FF}');"
        ],
        "code": [
          "{",
          "    let ch = '\\u{0100}';",
          "    let result = prev_char(ch);",
          "    assert_eq!(result, Some('\\u{00FF}'));",
          "    assert!(result.is_some());",
          "    assert!(result.unwrap() == '\\u{00FF}');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]