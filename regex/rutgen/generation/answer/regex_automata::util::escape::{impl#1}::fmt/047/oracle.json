[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = DebugHaystack(&[]);",
          "    let _ = format!(\"{:?}\", haystack);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"\\\"\").unwrap();",
          "    let result = utf8::decode(b\"hello\");",
          "    let ch = match result { Ok(ch) => ch, Err(byte) => { write!(f, r\"\\x{:02x}\", byte).unwrap(); continue; } };",
          "    bytes = &bytes[ch.len_utf8()..];",
          "    write!(f, \"\\\\0\").unwrap();",
          "    format!(\"{:?}\", DebugHaystack(b\"\\0\"));",
          "    let err = write!(f, \"\\\"\").is_err();"
        ],
        "code": [
          "{",
          "    let haystack = DebugHaystack(&[]);",
          "    let _ = format!(\"{:?}\", haystack);",
          "    write!(f, \"\\\"\").unwrap();",
          "    let result = utf8::decode(b\"hello\");",
          "    let ch = match result { Ok(ch) => ch, Err(byte) => { write!(f, r\"\\x{:02x}\", byte).unwrap(); continue; } };",
          "    bytes = &bytes[ch.len_utf8()..];",
          "    write!(f, \"\\\\0\").unwrap();",
          "    format!(\"{:?}\", DebugHaystack(b\"\\0\"));",
          "    let err = write!(f, \"\\\"\").is_err();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = DebugHaystack(b\"Hello\");",
          "    let _ = format!(\"{:?}\", haystack);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"\\\"\").is_ok();",
          "    utf8::decode(bytes).is_some();",
          "    match utf8::decode(bytes) { Ok(ch) => { assert!(ch == '\\0'); } };",
          "    write!(f, \"\\\\0\").is_ok();",
          "    write!(f, \"\\\"\").is_err();"
        ],
        "code": [
          "{",
          "    let haystack = DebugHaystack(b\"Hello\");",
          "    let _ = format!(\"{:?}\", haystack);",
          "    write!(f, \"\\\"\").is_ok();",
          "    utf8::decode(bytes).is_some();",
          "    match utf8::decode(bytes) { Ok(ch) => { assert!(ch == '\\0'); } };",
          "    write!(f, \"\\\\0\").is_ok();",
          "    write!(f, \"\\\"\").is_err();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = DebugHaystack(b\"\\0\");",
          "    let _ = format!(\"{:?}\", haystack);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"\\\"\").is_ok()",
          "    utf8::decode(bytes).is_some()",
          "    result.is_ok()",
          "    ch == '\\0'",
          "    write!(f, \"\\\\0\").is_ok()",
          "    utf8::decode(bytes).is_some()",
          "    write!(f, \"\\\"\").is_err()"
        ],
        "code": [
          "{",
          "    let haystack = DebugHaystack(b\"\\0\");",
          "    let _ = format!(\"{:?}\", haystack);",
          "    write!(f, \"\\\"\").is_ok()",
          "    utf8::decode(bytes).is_some()",
          "    result.is_ok()",
          "    ch == '\\0'",
          "    write!(f, \"\\\\0\").is_ok()",
          "    utf8::decode(bytes).is_some()",
          "    write!(f, \"\\\"\").is_err()",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = DebugHaystack(b\"\\x01\");",
          "    let _ = format!(\"{:?}\", haystack);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"\\\"\").is_ok()",
          "    utf8::decode(bytes).is_some()",
          "    matches!(result, Ok(ch))",
          "    matches!(ch, '\\0')",
          "    write!(f, \"\\\\0\").is_ok()",
          "    let input = DebugHaystack(b\"\\x01\");",
          "    let output = format!(\"{:?}\", input);",
          "    assert_eq!(output, \"\\\"\\\\x01\\\"\");",
          "    write!(f, \"\\\"\").is_err()"
        ],
        "code": [
          "{",
          "    let haystack = DebugHaystack(b\"\\x01\");",
          "    let _ = format!(\"{:?}\", haystack);",
          "    write!(f, \"\\\"\").is_ok()",
          "    utf8::decode(bytes).is_some()",
          "    matches!(result, Ok(ch))",
          "    matches!(ch, '\\0')",
          "    write!(f, \"\\\\0\").is_ok()",
          "    let input = DebugHaystack(b\"\\x01\");",
          "    let output = format!(\"{:?}\", input);",
          "    assert_eq!(output, \"\\\"\\\\x01\\\"\");",
          "    write!(f, \"\\\"\").is_err()",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = DebugHaystack(b\"\\xe2\\x9c\\x94\"); // Checkmark (U+2714)",
          "    let _ = format!(\"{:?}\", haystack);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"\\\"\").unwrap();",
          "    utf8::decode(b\"\\xe2\\x9c\\x94\").is_some();",
          "    utf8::decode(b\"\\xe2\\x9c\\x94\").unwrap().is_ok();",
          "    let ch = utf8::decode(b\"\\xe2\\x9c\\x94\").unwrap().unwrap();",
          "    ch == '\\u{2714}';",
          "    write!(f, \"{}\", ch.escape_debug()).unwrap();",
          "    write!(f, \"\\\"\").is_ok();"
        ],
        "code": [
          "{",
          "    let haystack = DebugHaystack(b\"\\xe2\\x9c\\x94\"); // Checkmark (U+2714)",
          "    let _ = format!(\"{:?}\", haystack);",
          "    write!(f, \"\\\"\").unwrap();",
          "    utf8::decode(b\"\\xe2\\x9c\\x94\").is_some();",
          "    utf8::decode(b\"\\xe2\\x9c\\x94\").unwrap().is_ok();",
          "    let ch = utf8::decode(b\"\\xe2\\x9c\\x94\").unwrap().unwrap();",
          "    ch == '\\u{2714}';",
          "    write!(f, \"{}\", ch.escape_debug()).unwrap();",
          "    write!(f, \"\\\"\").is_ok();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = DebugHaystack(b\"\\xff\"); // invalid UTF-8 byte",
          "    let _ = format!(\"{:?}\", haystack);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"\\\"\").is_ok();",
          "    utf8::decode(bytes).is_some();",
          "    result.is_ok();",
          "    ch == '\\0';",
          "    write!(f, \"\\\\0\").is_ok();",
          "    write!(f, \"\\\"\").is_err();"
        ],
        "code": [
          "{",
          "    let haystack = DebugHaystack(b\"\\xff\"); // invalid UTF-8 byte",
          "    let _ = format!(\"{:?}\", haystack);",
          "    write!(f, \"\\\"\").is_ok();",
          "    utf8::decode(bytes).is_some();",
          "    result.is_ok();",
          "    ch == '\\0';",
          "    write!(f, \"\\\\0\").is_ok();",
          "    write!(f, \"\\\"\").is_err();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = DebugHaystack(b\"\\xe2\\x28\"); // Invalid sequence",
          "    let _ = format!(\"{:?}\", haystack);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"\\\"\").is_ok();",
          "    utf8::decode(bytes).is_some();",
          "    result.is_ok();",
          "    ch == '\\0';",
          "    write!(f, \"\\\\0\").is_ok();",
          "    utf8::decode(bytes).is_some();",
          "    write!(f, \"\\\"\").is_err();"
        ],
        "code": [
          "{",
          "    let haystack = DebugHaystack(b\"\\xe2\\x28\"); // Invalid sequence",
          "    let _ = format!(\"{:?}\", haystack);",
          "    write!(f, \"\\\"\").is_ok();",
          "    utf8::decode(bytes).is_some();",
          "    result.is_ok();",
          "    ch == '\\0';",
          "    write!(f, \"\\\\0\").is_ok();",
          "    utf8::decode(bytes).is_some();",
          "    write!(f, \"\\\"\").is_err();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]