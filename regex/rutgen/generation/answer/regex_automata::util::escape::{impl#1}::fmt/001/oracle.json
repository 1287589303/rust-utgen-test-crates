[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_bytes: &[u8] = &[];",
          "    let debug_haystack = DebugHaystack(empty_bytes);",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", debug_haystack));",
          "}"
        ],
        "oracle": [
          "    assert!(core::fmt::format(format_args!(\"{:?}\", DebugHaystack(&[]))).is_empty());",
          "    assert_eq!(core::fmt::format(format_args!(\"{:?}\", DebugHaystack(&[0]))), \"\\\"\\\\x00\\\"\");",
          "    assert_eq!(core::fmt::format(format_args!(\"{:?}\", DebugHaystack(&[1]))), \"\\\"\\\\x01\\\"\");",
          "    assert_eq!(core::fmt::format(format_args!(\"{:?}\", DebugHaystack(&[9]))), \"\\\"\\\\t\\\"\");",
          "    assert_eq!(core::fmt::format(format_args!(\"{:?}\", DebugHaystack(&[10]))), \"\\\"\\\\n\\\"\");",
          "    assert_eq!(core::fmt::format(format_args!(\"{:?}\", DebugHaystack(&[13]))), \"\\\"\\\\r\\\"\");",
          "    assert_eq!(core::fmt::format(format_args!(\"{:?}\", DebugHaystack(&[255]))), \"\\\"\\\\xff\\\"\");",
          "    assert_eq!(core::fmt::format(format_args!(\"{:?}\", DebugHaystack(&[0, 1, 2]))), \"\\\"\\\\x00\\\\x01\\\\x02\\\"\");",
          "    assert!(core::fmt::format(format_args!(\"{:?}\", DebugHaystack(&[128, 255])).contains(\"\\\\x80\"));",
          "    assert!(core::fmt::format(format_args!(\"{:?}\", DebugHaystack(&[2, 255, 0, 1])).contains(\"\\\\xff\"));"
        ],
        "code": [
          "{",
          "    let empty_bytes: &[u8] = &[];",
          "    let debug_haystack = DebugHaystack(empty_bytes);",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", debug_haystack));",
          "    assert!(core::fmt::format(format_args!(\"{:?}\", DebugHaystack(&[]))).is_empty());",
          "    assert_eq!(core::fmt::format(format_args!(\"{:?}\", DebugHaystack(&[0]))), \"\\\"\\\\x00\\\"\");",
          "    assert_eq!(core::fmt::format(format_args!(\"{:?}\", DebugHaystack(&[1]))), \"\\\"\\\\x01\\\"\");",
          "    assert_eq!(core::fmt::format(format_args!(\"{:?}\", DebugHaystack(&[9]))), \"\\\"\\\\t\\\"\");",
          "    assert_eq!(core::fmt::format(format_args!(\"{:?}\", DebugHaystack(&[10]))), \"\\\"\\\\n\\\"\");",
          "    assert_eq!(core::fmt::format(format_args!(\"{:?}\", DebugHaystack(&[13]))), \"\\\"\\\\r\\\"\");",
          "    assert_eq!(core::fmt::format(format_args!(\"{:?}\", DebugHaystack(&[255]))), \"\\\"\\\\xff\\\"\");",
          "    assert_eq!(core::fmt::format(format_args!(\"{:?}\", DebugHaystack(&[0, 1, 2]))), \"\\\"\\\\x00\\\\x01\\\\x02\\\"\");",
          "    assert!(core::fmt::format(format_args!(\"{:?}\", DebugHaystack(&[128, 255])).contains(\"\\\\x80\"));",
          "    assert!(core::fmt::format(format_args!(\"{:?}\", DebugHaystack(&[2, 255, 0, 1])).contains(\"\\\\xff\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let valid_bytes = b\"Hello, World!\";",
          "    let debug_haystack = DebugHaystack(valid_bytes);",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", debug_haystack));",
          "}"
        ],
        "oracle": [
          "    write!(f, \"\\\"\").is_err();",
          "    write!(f, \"\\\"\").is_none();",
          "    let debug_haystack = DebugHaystack(b\"\");",
          "    let debug_haystack = DebugHaystack(b\"\\x01\");",
          "    let debug_haystack = DebugHaystack(b\"\\x7f\");",
          "    let debug_haystack = DebugHaystack(b\"\\x01\\x02\\x03\");",
          "    let debug_haystack = DebugHaystack(b\"\\x00Hello\");",
          "    let debug_haystack = DebugHaystack(b\"\\nHello\");",
          "    let debug_haystack = DebugHaystack(b\"Hello\\x01World\");",
          "    let debug_haystack = DebugHaystack(b\"\\x80\");",
          "    let debug_haystack = DebugHaystack(b\"\\xFF\");"
        ],
        "code": [
          "{",
          "    let valid_bytes = b\"Hello, World!\";",
          "    let debug_haystack = DebugHaystack(valid_bytes);",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", debug_haystack));",
          "    write!(f, \"\\\"\").is_err();",
          "    write!(f, \"\\\"\").is_none();",
          "    let debug_haystack = DebugHaystack(b\"\");",
          "    let debug_haystack = DebugHaystack(b\"\\x01\");",
          "    let debug_haystack = DebugHaystack(b\"\\x7f\");",
          "    let debug_haystack = DebugHaystack(b\"\\x01\\x02\\x03\");",
          "    let debug_haystack = DebugHaystack(b\"\\x00Hello\");",
          "    let debug_haystack = DebugHaystack(b\"\\nHello\");",
          "    let debug_haystack = DebugHaystack(b\"Hello\\x01World\");",
          "    let debug_haystack = DebugHaystack(b\"\\x80\");",
          "    let debug_haystack = DebugHaystack(b\"\\xFF\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mixed_bytes = b\"Valid \\x80 Invalid\";",
          "    let debug_haystack = DebugHaystack(mixed_bytes);",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", debug_haystack));",
          "}"
        ],
        "oracle": [
          "    write!(f, \"\\\"\").is_err();",
          "    write!(f, \"\\\"\").is_none();",
          "    utf8::decode(&mixed_bytes).is_none();",
          "    utf8::decode(&mixed_bytes).unwrap().is_err();",
          "    utf8::decode(&mixed_bytes).unwrap() == Err(0x80);",
          "    bytes == &mixed_bytes[1..];",
          "    write!(f, r\"\\x{:02x}\", 0x80).is_ok();",
          "    format_args!(\"{:?}\", debug_haystack).to_string().contains(\"Invalid\");",
          "    format_args!(\"{:?}\", debug_haystack).to_string().contains(\"Valid\");",
          "    format_args!(\"{:?}\", debug_haystack).to_string().starts_with('\"');",
          "    format_args!(\"{:?}\", debug_haystack).to_string().ends_with('\"');"
        ],
        "code": [
          "{",
          "    let mixed_bytes = b\"Valid \\x80 Invalid\";",
          "    let debug_haystack = DebugHaystack(mixed_bytes);",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", debug_haystack));",
          "    write!(f, \"\\\"\").is_err();",
          "    write!(f, \"\\\"\").is_none();",
          "    utf8::decode(&mixed_bytes).is_none();",
          "    utf8::decode(&mixed_bytes).unwrap().is_err();",
          "    utf8::decode(&mixed_bytes).unwrap() == Err(0x80);",
          "    bytes == &mixed_bytes[1..];",
          "    write!(f, r\"\\x{:02x}\", 0x80).is_ok();",
          "    format_args!(\"{:?}\", debug_haystack).to_string().contains(\"Invalid\");",
          "    format_args!(\"{:?}\", debug_haystack).to_string().contains(\"Valid\");",
          "    format_args!(\"{:?}\", debug_haystack).to_string().starts_with('\"');",
          "    format_args!(\"{:?}\", debug_haystack).to_string().ends_with('\"');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let control_bytes = [0x01];",
          "    let debug_haystack = DebugHaystack(&control_bytes);",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", debug_haystack));",
          "}"
        ],
        "oracle": [
          "    write!(f, \"\\\"\").is_err();",
          "    write!(f, \"\\\"\").is_none();",
          "    write!(f, \"{}\").is_err();",
          "    write!(f, \"{}\").is_none();"
        ],
        "code": [
          "{",
          "    let control_bytes = [0x01];",
          "    let debug_haystack = DebugHaystack(&control_bytes);",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", debug_haystack));",
          "    write!(f, \"\\\"\").is_err();",
          "    write!(f, \"\\\"\").is_none();",
          "    write!(f, \"{}\").is_err();",
          "    write!(f, \"{}\").is_none();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let control_bytes = [0x00, 0x01, 0x02, 0x07, 0x08, 0x09, 0x0A, 0x7F];",
          "    let debug_haystack = DebugHaystack(&control_bytes);",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", debug_haystack));",
          "}"
        ],
        "oracle": [
          "    write!(f, \"\\\"\").is_err();",
          "    write!(f, \"\\\"\").is_none();",
          "    utf8::decode(&control_bytes).is_some();",
          "    utf8::decode(&control_bytes).is_none();",
          "    bytes[ch.len_utf8()].is_empty();",
          "    bytes.len() < 1;",
          "    write!(f, r\"\\x{:02x}\", byte).is_err();",
          "    write!(f, r\"\\x{:02x}\", byte).is_none();",
          "    write!(f, \"\\\\0\").is_err();",
          "    write!(f, \"\\\\0\").is_none();",
          "    write!(f, \"{}\", ch.escape_debug()).is_err();",
          "    write!(f, \"{}\", ch.escape_debug()).is_none();"
        ],
        "code": [
          "{",
          "    let control_bytes = [0x00, 0x01, 0x02, 0x07, 0x08, 0x09, 0x0A, 0x7F];",
          "    let debug_haystack = DebugHaystack(&control_bytes);",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", debug_haystack));",
          "    write!(f, \"\\\"\").is_err();",
          "    write!(f, \"\\\"\").is_none();",
          "    utf8::decode(&control_bytes).is_some();",
          "    utf8::decode(&control_bytes).is_none();",
          "    bytes[ch.len_utf8()].is_empty();",
          "    bytes.len() < 1;",
          "    write!(f, r\"\\x{:02x}\", byte).is_err();",
          "    write!(f, r\"\\x{:02x}\", byte).is_none();",
          "    write!(f, \"\\\\0\").is_err();",
          "    write!(f, \"\\\\0\").is_none();",
          "    write!(f, \"{}\", ch.escape_debug()).is_err();",
          "    write!(f, \"{}\", ch.escape_debug()).is_none();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let long_bytes = b\"Short\";",
          "    let debug_haystack = DebugHaystack(long_bytes);",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", debug_haystack));",
          "}"
        ],
        "oracle": [
          "    write!(f, \"\\\"\").is_err();",
          "    write!(f, \"\\\"\").is_none();",
          "    let debug_haystack = DebugHaystack(b\"Short\");",
          "    core::fmt::format(format_args!(\"{:?}\", debug_haystack)).is_err();",
          "    core::fmt::format(format_args!(\"{:?}\", debug_haystack)).is_none();"
        ],
        "code": [
          "{",
          "    let long_bytes = b\"Short\";",
          "    let debug_haystack = DebugHaystack(long_bytes);",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", debug_haystack));",
          "    write!(f, \"\\\"\").is_err();",
          "    write!(f, \"\\\"\").is_none();",
          "    let debug_haystack = DebugHaystack(b\"Short\");",
          "    core::fmt::format(format_args!(\"{:?}\", debug_haystack)).is_err();",
          "    core::fmt::format(format_args!(\"{:?}\", debug_haystack)).is_none();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]