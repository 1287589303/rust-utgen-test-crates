[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct;",
          "    impl core::fmt::Debug for TestStruct {",
          "        fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {",
          "            let haystack = DebugHaystack(&[0x00, 0x01, 0x02, 0x7f, 0x80, 0xC3, 0xA9]);",
          "            haystack.fmt(f)",
          "        }",
          "    }",
          "    ",
          "    let test_instance = TestStruct;",
          "    let _ = format!(\"{:?}\", test_instance);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"\\\"\").unwrap();",
          "    let some_result = utf8::decode(&[0x00, 0x01, 0x02, 0x7f, 0x80, 0xC3, 0xA9]);",
          "    let result = some_result.unwrap_err();",
          "    write!(f, r\"\\x{:02x}\", result).unwrap();",
          "    let another_result = utf8::decode(&[0x01, 0x02, 0x7f, 0x80, 0xC3, 0xA9]);",
          "    write!(f, \"\\\"\").unwrap();",
          "    assert_eq!(haystack.fmt(f), Ok(()));"
        ],
        "code": [
          "{",
          "    struct TestStruct;",
          "    impl core::fmt::Debug for TestStruct {",
          "        fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {",
          "            let haystack = DebugHaystack(&[0x00, 0x01, 0x02, 0x7f, 0x80, 0xC3, 0xA9]);",
          "            haystack.fmt(f)",
          "        }",
          "    }",
          "    ",
          "    let test_instance = TestStruct;",
          "    let _ = format!(\"{:?}\", test_instance);",
          "    write!(f, \"\\\"\").unwrap();",
          "    let some_result = utf8::decode(&[0x00, 0x01, 0x02, 0x7f, 0x80, 0xC3, 0xA9]);",
          "    let result = some_result.unwrap_err();",
          "    write!(f, r\"\\x{:02x}\", result).unwrap();",
          "    let another_result = utf8::decode(&[0x01, 0x02, 0x7f, 0x80, 0xC3, 0xA9]);",
          "    write!(f, \"\\\"\").unwrap();",
          "    assert_eq!(haystack.fmt(f), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct;",
          "    impl core::fmt::Debug for TestStruct {",
          "        fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {",
          "            let haystack = DebugHaystack(&[0x80, 0x00, 0x01, 0x7f]);",
          "            haystack.fmt(f)",
          "        }",
          "    }",
          "",
          "    let test_instance = TestStruct;",
          "    let _ = format!(\"{:?}\", test_instance);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"\\\"\").unwrap();",
          "    utf8::decode(&[0x80, 0x00, 0x01, 0x7f]).is_some();",
          "    let result = utf8::decode(&[0x80, 0x00, 0x01, 0x7f]).unwrap();",
          "    result.is_err();",
          "    write!(f, r\"\\x{:02x}\", 0x80).unwrap();",
          "    write!(f, r\"\\x{:02x}\", 0x00).unwrap();",
          "    write!(f, r\"\\x{:02x}\", 0x01).unwrap();",
          "    write!(f, r\"\\x{:02x}\", 0x7f).unwrap();",
          "    write!(f, \"\\\"\").unwrap();",
          "    assert_eq!(haystack.fmt(f), Ok(()));"
        ],
        "code": [
          "{",
          "    struct TestStruct;",
          "    impl core::fmt::Debug for TestStruct {",
          "        fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {",
          "            let haystack = DebugHaystack(&[0x80, 0x00, 0x01, 0x7f]);",
          "            haystack.fmt(f)",
          "        }",
          "    }",
          "",
          "    let test_instance = TestStruct;",
          "    let _ = format!(\"{:?}\", test_instance);",
          "    write!(f, \"\\\"\").unwrap();",
          "    utf8::decode(&[0x80, 0x00, 0x01, 0x7f]).is_some();",
          "    let result = utf8::decode(&[0x80, 0x00, 0x01, 0x7f]).unwrap();",
          "    result.is_err();",
          "    write!(f, r\"\\x{:02x}\", 0x80).unwrap();",
          "    write!(f, r\"\\x{:02x}\", 0x00).unwrap();",
          "    write!(f, r\"\\x{:02x}\", 0x01).unwrap();",
          "    write!(f, r\"\\x{:02x}\", 0x7f).unwrap();",
          "    write!(f, \"\\\"\").unwrap();",
          "    assert_eq!(haystack.fmt(f), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct;",
          "    impl core::fmt::Debug for TestStruct {",
          "        fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {",
          "            let haystack = DebugHaystack(&[0x00, 0x01, 0x02, 0x03, 0x7f]);",
          "            haystack.fmt(f)",
          "        }",
          "    }",
          "    ",
          "    let test_instance = TestStruct;",
          "    let _ = format!(\"{:?}\", test_instance);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"\\\"\").is_ok();",
          "    utf8::decode(bytes).is_some();",
          "    if let Some(result) = utf8::decode(bytes) { result.is_err(); }",
          "    write!(f, r\"\\x{:02x}\", byte).is_ok();",
          "    write!(f, \"\\\"\").is_ok();",
          "    self.fmt(f).unwrap() == Ok(());",
          "    format!(\"{:?}\", test_instance).should_contain(\"\\\"\\\\0\\\\x01\\\\x02\\\\x03\\\\x7f\\\"\");"
        ],
        "code": [
          "{",
          "    struct TestStruct;",
          "    impl core::fmt::Debug for TestStruct {",
          "        fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {",
          "            let haystack = DebugHaystack(&[0x00, 0x01, 0x02, 0x03, 0x7f]);",
          "            haystack.fmt(f)",
          "        }",
          "    }",
          "    ",
          "    let test_instance = TestStruct;",
          "    let _ = format!(\"{:?}\", test_instance);",
          "    write!(f, \"\\\"\").is_ok();",
          "    utf8::decode(bytes).is_some();",
          "    if let Some(result) = utf8::decode(bytes) { result.is_err(); }",
          "    write!(f, r\"\\x{:02x}\", byte).is_ok();",
          "    write!(f, \"\\\"\").is_ok();",
          "    self.fmt(f).unwrap() == Ok(());",
          "    format!(\"{:?}\", test_instance).should_contain(\"\\\"\\\\0\\\\x01\\\\x02\\\\x03\\\\x7f\\\"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct;",
          "    impl core::fmt::Debug for TestStruct {",
          "        fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {",
          "            let haystack = DebugHaystack(&[0xC3, 0xA9, 0x80, 0x7f, 0x0A]);",
          "            haystack.fmt(f)",
          "        }",
          "    }",
          "",
          "    let test_instance = TestStruct;",
          "    let _ = format!(\"{:?}\", test_instance);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"\\\"\").is_ok();",
          "    utf8::decode(bytes).is_some();",
          "    matches!(utf8::decode(bytes), Some(Err(byte)));",
          "    write!(f, r\"\\x{:02x}\", byte).is_ok();",
          "    utf8::decode(bytes).is_some();",
          "    write!(f, \"\\\"\").is_ok();",
          "    assert_eq!(haystack.fmt(f), Ok(()));",
          "    assert_eq!(format!(\"{:?}\", test_instance), \"\\\"é\\x80\\x7f\\n\\\"\");"
        ],
        "code": [
          "{",
          "    struct TestStruct;",
          "    impl core::fmt::Debug for TestStruct {",
          "        fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {",
          "            let haystack = DebugHaystack(&[0xC3, 0xA9, 0x80, 0x7f, 0x0A]);",
          "            haystack.fmt(f)",
          "        }",
          "    }",
          "",
          "    let test_instance = TestStruct;",
          "    let _ = format!(\"{:?}\", test_instance);",
          "    write!(f, \"\\\"\").is_ok();",
          "    utf8::decode(bytes).is_some();",
          "    matches!(utf8::decode(bytes), Some(Err(byte)));",
          "    write!(f, r\"\\x{:02x}\", byte).is_ok();",
          "    utf8::decode(bytes).is_some();",
          "    write!(f, \"\\\"\").is_ok();",
          "    assert_eq!(haystack.fmt(f), Ok(()));",
          "    assert_eq!(format!(\"{:?}\", test_instance), \"\\\"é\\x80\\x7f\\n\\\"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]