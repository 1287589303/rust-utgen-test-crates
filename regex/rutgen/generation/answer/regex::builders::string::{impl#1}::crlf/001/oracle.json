[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = RegexSetBuilder::new([r\"^foo$\"]);",
          "    builder.multi_line(true).crlf(true);",
          "    let regex_set = builder.build().unwrap();",
          "    let hay = \"\\r\\nfoo\\r\\n\";",
          "    let _ = regex_set.is_match(hay);",
          "}"
        ],
        "oracle": [
          "    let mut builder = RegexSetBuilder::new([r\"^foo$\"]);",
          "    builder.multi_line(true).crlf(true);",
          "    let regex_set = builder.build().unwrap();",
          "    let hay = \"\\r\\nfoo\\r\\n\";",
          "    assert!(regex_set.is_match(hay));"
        ],
        "code": [
          "{",
          "    let mut builder = RegexSetBuilder::new([r\"^foo$\"]);",
          "    builder.multi_line(true).crlf(true);",
          "    let regex_set = builder.build().unwrap();",
          "    let hay = \"\\r\\nfoo\\r\\n\";",
          "    let _ = regex_set.is_match(hay);",
          "    let mut builder = RegexSetBuilder::new([r\"^foo$\"]);",
          "    builder.multi_line(true).crlf(true);",
          "    let regex_set = builder.build().unwrap();",
          "    let hay = \"\\r\\nfoo\\r\\n\";",
          "    assert!(regex_set.is_match(hay));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = RegexSetBuilder::new([r\"^foo$\"]);",
          "    builder.multi_line(true).crlf(false);",
          "    let regex_set = builder.build().unwrap();",
          "    let hay = \"\\r\\nfoo\\r\\n\";",
          "    let _ = regex_set.is_match(hay);",
          "}"
        ],
        "oracle": [
          "    builder.multi_line(true).crlf(false);",
          "    let regex_set = builder.build();",
          "    assert!(regex_set.is_ok());",
          "    let regex_set = regex_set.unwrap();",
          "    let hay = \"\\r\\nfoo\\r\\n\";",
          "    assert!(!regex_set.is_match(hay));",
          "    builder.crlf(true);",
          "    let regex_set_with_crlf = builder.build();",
          "    assert!(regex_set_with_crlf.is_ok());",
          "    let regex_set_with_crlf = regex_set_with_crlf.unwrap();",
          "    assert!(regex_set_with_crlf.is_match(hay));"
        ],
        "code": [
          "{",
          "    let mut builder = RegexSetBuilder::new([r\"^foo$\"]);",
          "    builder.multi_line(true).crlf(false);",
          "    let regex_set = builder.build().unwrap();",
          "    let hay = \"\\r\\nfoo\\r\\n\";",
          "    let _ = regex_set.is_match(hay);",
          "    builder.multi_line(true).crlf(false);",
          "    let regex_set = builder.build();",
          "    assert!(regex_set.is_ok());",
          "    let regex_set = regex_set.unwrap();",
          "    let hay = \"\\r\\nfoo\\r\\n\";",
          "    assert!(!regex_set.is_match(hay));",
          "    builder.crlf(true);",
          "    let regex_set_with_crlf = builder.build();",
          "    assert!(regex_set_with_crlf.is_ok());",
          "    let regex_set_with_crlf = regex_set_with_crlf.unwrap();",
          "    assert!(regex_set_with_crlf.is_match(hay));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = RegexSetBuilder::new([r\"\"]);",
          "    builder.multi_line(true).crlf(true);",
          "    let regex_set = builder.build().unwrap();",
          "    let hay = \"\\r\\n\";",
          "    let _ = regex_set.is_match(hay);",
          "}"
        ],
        "oracle": [
          "    builder.crlf(true);",
          "    builder.crlf(false);",
          "    let builder_with_crlf = builder.crlf(true);",
          "    assert_eq!(builder_with_crlf, builder);",
          "    assert_eq!(builder.crlf(false), builder);",
          "    builder.crlf(true);",
          "    let regex_set_with_crlf = builder.build().unwrap();",
          "    let result_match_crlf = regex_set_with_crlf.is_match(\"\\r\\n\");",
          "    assert!(result_match_crlf);",
          "    let regex_set_without_crlf = builder.crlf(false).build().unwrap();",
          "    let result_no_match_crlf = regex_set_without_crlf.is_match(\"\\r\\n\");",
          "    assert!(!result_no_match_crlf);"
        ],
        "code": [
          "{",
          "    let mut builder = RegexSetBuilder::new([r\"\"]);",
          "    builder.multi_line(true).crlf(true);",
          "    let regex_set = builder.build().unwrap();",
          "    let hay = \"\\r\\n\";",
          "    let _ = regex_set.is_match(hay);",
          "    builder.crlf(true);",
          "    builder.crlf(false);",
          "    let builder_with_crlf = builder.crlf(true);",
          "    assert_eq!(builder_with_crlf, builder);",
          "    assert_eq!(builder.crlf(false), builder);",
          "    builder.crlf(true);",
          "    let regex_set_with_crlf = builder.build().unwrap();",
          "    let result_match_crlf = regex_set_with_crlf.is_match(\"\\r\\n\");",
          "    assert!(result_match_crlf);",
          "    let regex_set_without_crlf = builder.crlf(false).build().unwrap();",
          "    let result_no_match_crlf = regex_set_without_crlf.is_match(\"\\r\\n\");",
          "    assert!(!result_no_match_crlf);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = RegexSetBuilder::new([r\"^\\n\"]);",
          "    builder.multi_line(true).crlf(true);",
          "    let regex_set = builder.build().unwrap();",
          "    let _ = regex_set.is_match(\"\\r\\n\");",
          "}"
        ],
        "oracle": [
          "    builder.crlf(true);",
          "    builder.crlf(false);",
          "    builder.crlf(true).multi_line(false);",
          "    builder.crlf(false).multi_line(true);",
          "    let regex_set = builder.build().unwrap();",
          "    assert!(regex_set.is_match(\"\\r\\nfoo\\r\\n\"));",
          "    assert!(!regex_set.is_match(\"\\r\\n\"));"
        ],
        "code": [
          "{",
          "    let mut builder = RegexSetBuilder::new([r\"^\\n\"]);",
          "    builder.multi_line(true).crlf(true);",
          "    let regex_set = builder.build().unwrap();",
          "    let _ = regex_set.is_match(\"\\r\\n\");",
          "    builder.crlf(true);",
          "    builder.crlf(false);",
          "    builder.crlf(true).multi_line(false);",
          "    builder.crlf(false).multi_line(true);",
          "    let regex_set = builder.build().unwrap();",
          "    assert!(regex_set.is_match(\"\\r\\nfoo\\r\\n\"));",
          "    assert!(!regex_set.is_match(\"\\r\\n\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]