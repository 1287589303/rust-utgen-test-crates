[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = DFA::new(",
          "        \"(?P<first>[[:alpha:]]+)[[:space:]]+(?P<last>[[:alpha:]]+)\",",
          "    ).unwrap();",
          "    ",
          "    let mut cache = re.create_cache();",
          "    let mut caps = re.create_captures();",
          "    ",
          "    let input = Input::new(\"Bruce Springsteen\")",
          "        .set_anchored(Anchored::No); // Precondition: Input is non-anchored",
          "    ",
          "    re.captures(&mut cache, input, &mut caps);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(caps.get_match().is_some(), true);",
          "    assert_eq!(caps.get_group(1), Some(Span::from(0..5)));",
          "    assert_eq!(caps.get_group_by_name(\"last\"), Some(Span::from(6..17)));"
        ],
        "code": [
          "{",
          "    let re = DFA::new(",
          "        \"(?P<first>[[:alpha:]]+)[[:space:]]+(?P<last>[[:alpha:]]+)\",",
          "    ).unwrap();",
          "    ",
          "    let mut cache = re.create_cache();",
          "    let mut caps = re.create_captures();",
          "    ",
          "    let input = Input::new(\"Bruce Springsteen\")",
          "        .set_anchored(Anchored::No); // Precondition: Input is non-anchored",
          "    ",
          "    re.captures(&mut cache, input, &mut caps);",
          "    assert_eq!(caps.get_match().is_some(), true);",
          "    assert_eq!(caps.get_group(1), Some(Span::from(0..5)));",
          "    assert_eq!(caps.get_group_by_name(\"last\"), Some(Span::from(6..17)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = DFA::new(",
          "        \"(?P<first>[[:alpha:]]+)[[:space:]]+(?P<last>[[:alpha:]]+)\",",
          "    ).unwrap();",
          "    ",
          "    let mut cache = re.create_cache();",
          "    let mut caps = re.create_captures();",
          "    ",
          "    let input = Input::new(\"  \")",
          "        .set_anchored(Anchored::No); // Testing input that does not match any group, still non-anchored",
          "    ",
          "    re.captures(&mut cache, input, &mut caps);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(caps.is_match(), false);",
          "    assert_eq!(caps.get_match(), None);",
          "    assert_eq!(caps.get_group(1), None);",
          "    assert_eq!(caps.get_group_by_name(\"last\"), None);"
        ],
        "code": [
          "{",
          "    let re = DFA::new(",
          "        \"(?P<first>[[:alpha:]]+)[[:space:]]+(?P<last>[[:alpha:]]+)\",",
          "    ).unwrap();",
          "    ",
          "    let mut cache = re.create_cache();",
          "    let mut caps = re.create_captures();",
          "    ",
          "    let input = Input::new(\"  \")",
          "        .set_anchored(Anchored::No); // Testing input that does not match any group, still non-anchored",
          "    ",
          "    re.captures(&mut cache, input, &mut caps);",
          "    assert_eq!(caps.is_match(), false);",
          "    assert_eq!(caps.get_match(), None);",
          "    assert_eq!(caps.get_group(1), None);",
          "    assert_eq!(caps.get_group_by_name(\"last\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]