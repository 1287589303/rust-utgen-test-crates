[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyHir;",
          "    let head = &Hir { kind: HirKind::Dummy, props: Properties::default() };",
          "    let frame = Frame::Concat { head, tail: &[] };",
          "    let result = frame.child();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, head);"
        ],
        "code": [
          "{",
          "    struct DummyHir;",
          "    let head = &Hir { kind: HirKind::Dummy, props: Properties::default() };",
          "    let frame = Frame::Concat { head, tail: &[] };",
          "    let result = frame.child();",
          "    assert_eq!(result, head);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyHir;",
          "    let head = &Hir { kind: HirKind::Dummy, props: Properties::default() };",
          "    let tail = vec![Hir { kind: HirKind::Dummy, props: Properties::default() }];",
          "    let frame = Frame::Concat { head, tail: &tail };",
          "    let result = frame.child();",
          "}"
        ],
        "oracle": [
          "    let head = &Hir { kind: HirKind::Dummy, props: Properties::default() };",
          "    let frame = Frame::Concat { head, tail: &vec![Hir { kind: HirKind::Dummy, props: Properties::default() }] };",
          "    assert_eq!(frame.child(), head);"
        ],
        "code": [
          "{",
          "    struct DummyHir;",
          "    let head = &Hir { kind: HirKind::Dummy, props: Properties::default() };",
          "    let tail = vec![Hir { kind: HirKind::Dummy, props: Properties::default() }];",
          "    let frame = Frame::Concat { head, tail: &tail };",
          "    let result = frame.child();",
          "    let head = &Hir { kind: HirKind::Dummy, props: Properties::default() };",
          "    let frame = Frame::Concat { head, tail: &vec![Hir { kind: HirKind::Dummy, props: Properties::default() }] };",
          "    assert_eq!(frame.child(), head);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]