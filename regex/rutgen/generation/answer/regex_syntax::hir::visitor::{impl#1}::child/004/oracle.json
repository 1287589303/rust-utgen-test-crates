[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub_hir = Hir { ",
          "        kind: HirKind::SomeKind, ",
          "        props: Properties::default() ",
          "    };",
          "    let repetition = Repetition { ",
          "        min: 0, ",
          "        max: None, ",
          "        greedy: true, ",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    let frame = Frame::Repetition(&repetition);",
          "    let _child = frame.child();",
          "}"
        ],
        "oracle": [
          "    let sub_hir = Hir { kind: HirKind::SomeKind, props: Properties::default() };",
          "    let repetition = Repetition { min: 0, max: None, greedy: true, sub: Box::new(sub_hir) };",
          "    let frame = Frame::Repetition(&repetition);",
          "    assert_eq!(frame.child(), &repetition.sub);"
        ],
        "code": [
          "{",
          "    let sub_hir = Hir { ",
          "        kind: HirKind::SomeKind, ",
          "        props: Properties::default() ",
          "    };",
          "    let repetition = Repetition { ",
          "        min: 0, ",
          "        max: None, ",
          "        greedy: true, ",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    let frame = Frame::Repetition(&repetition);",
          "    let _child = frame.child();",
          "    let sub_hir = Hir { kind: HirKind::SomeKind, props: Properties::default() };",
          "    let repetition = Repetition { min: 0, max: None, greedy: true, sub: Box::new(sub_hir) };",
          "    let frame = Frame::Repetition(&repetition);",
          "    assert_eq!(frame.child(), &repetition.sub);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub_hir = Hir { ",
          "        kind: HirKind::SomeKind, ",
          "        props: Properties::default() ",
          "    };",
          "    let repetition = Repetition { ",
          "        min: 1, ",
          "        max: Some(10), ",
          "        greedy: false, ",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    let frame = Frame::Repetition(&repetition);",
          "    let _child = frame.child();",
          "}"
        ],
        "oracle": [
          "    let sub_hir = Hir { kind: HirKind::SomeKind, props: Properties::default() };",
          "    let repetition = Repetition { min: 1, max: Some(10), greedy: false, sub: Box::new(sub_hir) };",
          "    let frame = Frame::Repetition(&repetition);",
          "    let child = frame.child();",
          "    assert_eq!(child, &*repetition.sub);"
        ],
        "code": [
          "{",
          "    let sub_hir = Hir { ",
          "        kind: HirKind::SomeKind, ",
          "        props: Properties::default() ",
          "    };",
          "    let repetition = Repetition { ",
          "        min: 1, ",
          "        max: Some(10), ",
          "        greedy: false, ",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    let frame = Frame::Repetition(&repetition);",
          "    let _child = frame.child();",
          "    let sub_hir = Hir { kind: HirKind::SomeKind, props: Properties::default() };",
          "    let repetition = Repetition { min: 1, max: Some(10), greedy: false, sub: Box::new(sub_hir) };",
          "    let frame = Frame::Repetition(&repetition);",
          "    let child = frame.child();",
          "    assert_eq!(child, &*repetition.sub);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub_hir = Hir { ",
          "        kind: HirKind::SomeKind, ",
          "        props: Properties::default() ",
          "    };",
          "    let repetition = Repetition { ",
          "        min: 10, ",
          "        max: Some(10), ",
          "        greedy: true, ",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    let frame = Frame::Repetition(&repetition);",
          "    let _child = frame.child();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_child.kind, HirKind::SomeKind);",
          "    assert_eq!(_child.props, Properties::default());"
        ],
        "code": [
          "{",
          "    let sub_hir = Hir { ",
          "        kind: HirKind::SomeKind, ",
          "        props: Properties::default() ",
          "    };",
          "    let repetition = Repetition { ",
          "        min: 10, ",
          "        max: Some(10), ",
          "        greedy: true, ",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    let frame = Frame::Repetition(&repetition);",
          "    let _child = frame.child();",
          "    assert_eq!(_child.kind, HirKind::SomeKind);",
          "    assert_eq!(_child.props, Properties::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub_hir = Hir { ",
          "        kind: HirKind::SomeKind, ",
          "        props: Properties::default() ",
          "    };",
          "    let repetition = Repetition { ",
          "        min: 0, ",
          "        max: Some(10), ",
          "        greedy: false, ",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    let frame = Frame::Repetition(&repetition);",
          "    let _child = frame.child();",
          "}"
        ],
        "oracle": [
          "    _child should be equal to &sub_hir;"
        ],
        "code": [
          "{",
          "    let sub_hir = Hir { ",
          "        kind: HirKind::SomeKind, ",
          "        props: Properties::default() ",
          "    };",
          "    let repetition = Repetition { ",
          "        min: 0, ",
          "        max: Some(10), ",
          "        greedy: false, ",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    let frame = Frame::Repetition(&repetition);",
          "    let _child = frame.child();",
          "    _child should be equal to &sub_hir;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub_hir = Hir { ",
          "        kind: HirKind::SomeKind, ",
          "        props: Properties::default() ",
          "    };",
          "    let repetition = Repetition { ",
          "        min: 10, ",
          "        max: None, ",
          "        greedy: true, ",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    let frame = Frame::Repetition(&repetition);",
          "    let _child = frame.child();",
          "}"
        ],
        "oracle": [
          "    let sub_hir = Hir { kind: HirKind::SomeKind, props: Properties::default() };",
          "    let repetition = Repetition { min: 10, max: None, greedy: true, sub: Box::new(sub_hir) };",
          "    let frame = Frame::Repetition(&repetition);",
          "    let child = frame.child();",
          "    assert_eq!(child, &*repetition.sub);"
        ],
        "code": [
          "{",
          "    let sub_hir = Hir { ",
          "        kind: HirKind::SomeKind, ",
          "        props: Properties::default() ",
          "    };",
          "    let repetition = Repetition { ",
          "        min: 10, ",
          "        max: None, ",
          "        greedy: true, ",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    let frame = Frame::Repetition(&repetition);",
          "    let _child = frame.child();",
          "    let sub_hir = Hir { kind: HirKind::SomeKind, props: Properties::default() };",
          "    let repetition = Repetition { min: 10, max: None, greedy: true, sub: Box::new(sub_hir) };",
          "    let frame = Frame::Repetition(&repetition);",
          "    let child = frame.child();",
          "    assert_eq!(child, &*repetition.sub);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]