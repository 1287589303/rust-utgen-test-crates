[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_ranges: &[u8] = &[0, 1, 2];",
          "    let next_states: &[u8] = &[0, 1, 2, 3];",
          "    let pattern_ids: &[u8] = &[];",
          "    let accel: &[u8] = &[];",
          "",
          "    let state = State {",
          "        id: StateID::default(),",
          "        is_match: false,",
          "        ntrans: 2,",
          "        input_ranges,",
          "        next: next_states,",
          "        pattern_ids,",
          "        accel,",
          "    };",
          "",
          "    let mut dst = vec![0; state.write_to_len()];",
          "    let _ = state.write_to::<crate::util::Endian::Little>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.write_to_len(), dst.len());",
          "    assert!(state.write_to::<crate::util::Endian::Little>(&mut dst).is_ok());",
          "    state.is_match = true;",
          "    state.pattern_ids = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];",
          "    let mut dst_match = vec![0; state.write_to_len()];",
          "    assert!(state.write_to::<crate::util::Endian::Little>(&mut dst_match).is_ok());",
          "    assert_eq!(dst_match[0], u8::try_from(state.pattern_ids.len() / 4).unwrap());",
          "    for i in 0..state.pattern_len() {",
          "    let pid = state.pattern_id(i);",
          "    assert_eq!(pid.as_u32(), u32::from_le_bytes([dst_match[i * 4 + 2], dst_match[i * 4 + 3], dst_match[i * 4 + 4], dst_match[i * 4 + 5]]));",
          "    }",
          "    let invalid_idx = state.ntrans;",
          "    assert!(std::panic::catch_unwind(|| { state.next_at(invalid_idx); }).is_err());",
          "    assert!(state.pattern_len() > 0);"
        ],
        "code": [
          "{",
          "    let input_ranges: &[u8] = &[0, 1, 2];",
          "    let next_states: &[u8] = &[0, 1, 2, 3];",
          "    let pattern_ids: &[u8] = &[];",
          "    let accel: &[u8] = &[];",
          "",
          "    let state = State {",
          "        id: StateID::default(),",
          "        is_match: false,",
          "        ntrans: 2,",
          "        input_ranges,",
          "        next: next_states,",
          "        pattern_ids,",
          "        accel,",
          "    };",
          "",
          "    let mut dst = vec![0; state.write_to_len()];",
          "    let _ = state.write_to::<crate::util::Endian::Little>(&mut dst);",
          "    assert_eq!(state.write_to_len(), dst.len());",
          "    assert!(state.write_to::<crate::util::Endian::Little>(&mut dst).is_ok());",
          "    state.is_match = true;",
          "    state.pattern_ids = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];",
          "    let mut dst_match = vec![0; state.write_to_len()];",
          "    assert!(state.write_to::<crate::util::Endian::Little>(&mut dst_match).is_ok());",
          "    assert_eq!(dst_match[0], u8::try_from(state.pattern_ids.len() / 4).unwrap());",
          "    for i in 0..state.pattern_len() {",
          "    let pid = state.pattern_id(i);",
          "    assert_eq!(pid.as_u32(), u32::from_le_bytes([dst_match[i * 4 + 2], dst_match[i * 4 + 3], dst_match[i * 4 + 4], dst_match[i * 4 + 5]]));",
          "    }",
          "    let invalid_idx = state.ntrans;",
          "    assert!(std::panic::catch_unwind(|| { state.next_at(invalid_idx); }).is_err());",
          "    assert!(state.pattern_len() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_ranges: &[u8] = &[0, 1, 2];",
          "    let next_states: &[u8] = &[4, 5, 6, 7];",
          "    let pattern_ids: &[u8] = &[1, 2, 3, 4]; // 1 * 4 bytes",
          "    let accel: &[u8] = &[8, 9, 10];",
          "",
          "    let state = State {",
          "        id: StateID::default(),",
          "        is_match: true,",
          "        ntrans: 2,",
          "        input_ranges,",
          "        next: next_states,",
          "        pattern_ids,",
          "        accel,",
          "    };",
          "",
          "    let mut dst = vec![0; state.write_to_len()];",
          "    let _ = state.write_to::<crate::util::Endian::Little>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.write_to_len(), dst.len());",
          "    assert!(dst.len() < state.write_to_len() + 10); // nwrite <= dst.len()",
          "    assert!(state.is_match == true);",
          "    for i in 0..state.ntrans {",
          "    assert!(state.next_at(i).0 >= 0);",
          "    }",
          "    assert!(state.accel.len() <= 3);",
          "    if state.is_match {",
          "    for i in 0..state.pattern_len() {",
          "    assert!(state.pattern_id(i).0 >= 0);",
          "    }",
          "    } else {",
          "    assert!(state.pattern_len() == 0);",
          "    }"
        ],
        "code": [
          "{",
          "    let input_ranges: &[u8] = &[0, 1, 2];",
          "    let next_states: &[u8] = &[4, 5, 6, 7];",
          "    let pattern_ids: &[u8] = &[1, 2, 3, 4]; // 1 * 4 bytes",
          "    let accel: &[u8] = &[8, 9, 10];",
          "",
          "    let state = State {",
          "        id: StateID::default(),",
          "        is_match: true,",
          "        ntrans: 2,",
          "        input_ranges,",
          "        next: next_states,",
          "        pattern_ids,",
          "        accel,",
          "    };",
          "",
          "    let mut dst = vec![0; state.write_to_len()];",
          "    let _ = state.write_to::<crate::util::Endian::Little>(&mut dst);",
          "    assert_eq!(state.write_to_len(), dst.len());",
          "    assert!(dst.len() < state.write_to_len() + 10); // nwrite <= dst.len()",
          "    assert!(state.is_match == true);",
          "    for i in 0..state.ntrans {",
          "    assert!(state.next_at(i).0 >= 0);",
          "    }",
          "    assert!(state.accel.len() <= 3);",
          "    if state.is_match {",
          "    for i in 0..state.pattern_len() {",
          "    assert!(state.pattern_id(i).0 >= 0);",
          "    }",
          "    } else {",
          "    assert!(state.pattern_len() == 0);",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]