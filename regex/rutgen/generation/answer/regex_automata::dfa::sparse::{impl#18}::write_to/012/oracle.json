[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_ranges: &[u8] = &[];",
          "    let next: &[u8] = &[];",
          "    let pattern_ids: &[u8] = &[];",
          "    let accel: &[u8] = &[];",
          "    let state = State {",
          "        id: StateID::default(),",
          "        is_match: false,",
          "        ntrans: 0,",
          "        input_ranges,",
          "        next,",
          "        pattern_ids,",
          "        accel,",
          "    };",
          "    let mut dst = vec![0; 2 + size_of::<u16>()];",
          "    let result = state.write_to::<YourEndianType>(&mut dst);",
          "    // Note: The result should be checked/out of scope based on assertion requirements",
          "}"
        ],
        "oracle": [
          "    let input_ranges: &[u8] = &[];",
          "    let next: &[u8] = &[];",
          "    let pattern_ids: &[u8] = &[];",
          "    let accel: &[u8] = &[];",
          "    let state = State {",
          "    id: StateID::default(),",
          "    is_match: false,",
          "    ntrans: 0,",
          "    input_ranges,",
          "    next,",
          "    pattern_ids,",
          "    accel,",
          "    };",
          "    let mut dst = vec![0; 2 + size_of::<u16>()];",
          "    let result = state.write_to::<YourEndianType>(&mut dst);",
          "    assert_eq!(result, Ok(dst.len()));",
          "    ",
          "    let input_ranges: &[u8] = &[0, 1];",
          "    let next: &[u8] = &[(0u32).to_ne_bytes(), (0u32).to_ne_bytes()].concat();",
          "    let pattern_ids: &[u8] = &[0, 0, 0, 0];",
          "    let accel: &[u8] = &[0];",
          "    let state = State {",
          "    id: StateID::default(),",
          "    is_match: false,",
          "    ntrans: 1,",
          "    input_ranges,",
          "    next,",
          "    pattern_ids,",
          "    accel,",
          "    };",
          "    let mut dst = vec![0; state.write_to_len()];",
          "    let result = state.write_to::<YourEndianType>(&mut dst);",
          "    assert_eq!(result, Ok(dst.len()));",
          "    ",
          "    let input_ranges: &[u8] = &[0];",
          "    let next: &[u8] = &[0u32.to_ne_bytes().into(), 0u32.to_ne_bytes().into()].concat();",
          "    let pattern_ids: &[u8] = &[0, 0, 0, 0];",
          "    let accel: &[u8] = &[0, 1, 2];",
          "    let state = State {",
          "    id: StateID::default(),",
          "    is_match: true,",
          "    ntrans: 1,",
          "    input_ranges,",
          "    next,",
          "    pattern_ids,",
          "    accel,",
          "    };",
          "    let mut dst = vec![0; state.write_to_len()];",
          "    let result = state.write_to::<YourEndianType>(&mut dst);",
          "    assert_eq!(result, Ok(dst.len()));",
          "    ",
          "    let input_ranges: &[u8] = &[0, 1];",
          "    let next: &[u8] = &[0u32.to_ne_bytes().into(), 1u32.to_ne_bytes().into()].concat();",
          "    let pattern_ids: &[u8] = &[0, 0, 0, 0, 1, 0, 0, 0];",
          "    let accel: &[u8] = &[0];",
          "    let state = State {",
          "    id: StateID::default(),",
          "    is_match: true,",
          "    ntrans: 1,",
          "    input_ranges,",
          "    next,",
          "    pattern_ids,",
          "    accel,",
          "    };",
          "    let mut dst = vec![0; state.write_to_len()];",
          "    let result = state.write_to::<YourEndianType>(&mut dst);",
          "    assert_eq!(result, Ok(dst.len()));"
        ],
        "code": [
          "{",
          "    let input_ranges: &[u8] = &[];",
          "    let next: &[u8] = &[];",
          "    let pattern_ids: &[u8] = &[];",
          "    let accel: &[u8] = &[];",
          "    let state = State {",
          "        id: StateID::default(),",
          "        is_match: false,",
          "        ntrans: 0,",
          "        input_ranges,",
          "        next,",
          "        pattern_ids,",
          "        accel,",
          "    };",
          "    let mut dst = vec![0; 2 + size_of::<u16>()];",
          "    let result = state.write_to::<YourEndianType>(&mut dst);",
          "    // Note: The result should be checked/out of scope based on assertion requirements",
          "    let input_ranges: &[u8] = &[];",
          "    let next: &[u8] = &[];",
          "    let pattern_ids: &[u8] = &[];",
          "    let accel: &[u8] = &[];",
          "    let state = State {",
          "    id: StateID::default(),",
          "    is_match: false,",
          "    ntrans: 0,",
          "    input_ranges,",
          "    next,",
          "    pattern_ids,",
          "    accel,",
          "    };",
          "    let mut dst = vec![0; 2 + size_of::<u16>()];",
          "    let result = state.write_to::<YourEndianType>(&mut dst);",
          "    assert_eq!(result, Ok(dst.len()));",
          "    ",
          "    let input_ranges: &[u8] = &[0, 1];",
          "    let next: &[u8] = &[(0u32).to_ne_bytes(), (0u32).to_ne_bytes()].concat();",
          "    let pattern_ids: &[u8] = &[0, 0, 0, 0];",
          "    let accel: &[u8] = &[0];",
          "    let state = State {",
          "    id: StateID::default(),",
          "    is_match: false,",
          "    ntrans: 1,",
          "    input_ranges,",
          "    next,",
          "    pattern_ids,",
          "    accel,",
          "    };",
          "    let mut dst = vec![0; state.write_to_len()];",
          "    let result = state.write_to::<YourEndianType>(&mut dst);",
          "    assert_eq!(result, Ok(dst.len()));",
          "    ",
          "    let input_ranges: &[u8] = &[0];",
          "    let next: &[u8] = &[0u32.to_ne_bytes().into(), 0u32.to_ne_bytes().into()].concat();",
          "    let pattern_ids: &[u8] = &[0, 0, 0, 0];",
          "    let accel: &[u8] = &[0, 1, 2];",
          "    let state = State {",
          "    id: StateID::default(),",
          "    is_match: true,",
          "    ntrans: 1,",
          "    input_ranges,",
          "    next,",
          "    pattern_ids,",
          "    accel,",
          "    };",
          "    let mut dst = vec![0; state.write_to_len()];",
          "    let result = state.write_to::<YourEndianType>(&mut dst);",
          "    assert_eq!(result, Ok(dst.len()));",
          "    ",
          "    let input_ranges: &[u8] = &[0, 1];",
          "    let next: &[u8] = &[0u32.to_ne_bytes().into(), 1u32.to_ne_bytes().into()].concat();",
          "    let pattern_ids: &[u8] = &[0, 0, 0, 0, 1, 0, 0, 0];",
          "    let accel: &[u8] = &[0];",
          "    let state = State {",
          "    id: StateID::default(),",
          "    is_match: true,",
          "    ntrans: 1,",
          "    input_ranges,",
          "    next,",
          "    pattern_ids,",
          "    accel,",
          "    };",
          "    let mut dst = vec![0; state.write_to_len()];",
          "    let result = state.write_to::<YourEndianType>(&mut dst);",
          "    assert_eq!(result, Ok(dst.len()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_ranges: &[u8] = &[];",
          "    let next: &[u8] = &[];",
          "    let pattern_ids: &[u8] = &[];",
          "    let accel: &[u8] = &[];",
          "    let state = State {",
          "        id: StateID::default(),",
          "        is_match: true,",
          "        ntrans: 0,",
          "        input_ranges,",
          "        next,",
          "        pattern_ids,",
          "        accel,",
          "    };",
          "    let mut dst = vec![0; 2 + size_of::<u16>() + size_of::<u32>()];",
          "    let result = state.write_to::<YourEndianType>(&mut dst);",
          "    // Note: The result should be checked/out of scope based on assertion requirements",
          "}"
        ],
        "oracle": [
          "    dst.len() == nwrite;",
          "    self.is_match == false;",
          "    i >= self.ntrans;",
          "    self.is_match == true;",
          "    i >= self.pattern_len();",
          "    result == Ok(nwrite);"
        ],
        "code": [
          "{",
          "    let input_ranges: &[u8] = &[];",
          "    let next: &[u8] = &[];",
          "    let pattern_ids: &[u8] = &[];",
          "    let accel: &[u8] = &[];",
          "    let state = State {",
          "        id: StateID::default(),",
          "        is_match: true,",
          "        ntrans: 0,",
          "        input_ranges,",
          "        next,",
          "        pattern_ids,",
          "        accel,",
          "    };",
          "    let mut dst = vec![0; 2 + size_of::<u16>() + size_of::<u32>()];",
          "    let result = state.write_to::<YourEndianType>(&mut dst);",
          "    // Note: The result should be checked/out of scope based on assertion requirements",
          "    dst.len() == nwrite;",
          "    self.is_match == false;",
          "    i >= self.ntrans;",
          "    self.is_match == true;",
          "    i >= self.pattern_len();",
          "    result == Ok(nwrite);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]