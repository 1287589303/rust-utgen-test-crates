[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let r1 = SplitRange::Old(Utf8Range { start: 0, end: 0 });",
          "    let r2 = SplitRange::New(Utf8Range { start: 0, end: 1 });",
          "    let _result = Split::parts2(r1, r2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.partitions[0], r1);",
          "    assert_eq!(_result.partitions[1], r2);",
          "    assert_eq!(_result.partitions[2], SplitRange::Old(Utf8Range { start: 0, end: 0 }));",
          "    assert_eq!(_result.len, 2);"
        ],
        "code": [
          "{",
          "    let r1 = SplitRange::Old(Utf8Range { start: 0, end: 0 });",
          "    let r2 = SplitRange::New(Utf8Range { start: 0, end: 1 });",
          "    let _result = Split::parts2(r1, r2);",
          "    assert_eq!(_result.partitions[0], r1);",
          "    assert_eq!(_result.partitions[1], r2);",
          "    assert_eq!(_result.partitions[2], SplitRange::Old(Utf8Range { start: 0, end: 0 }));",
          "    assert_eq!(_result.len, 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let r1 = SplitRange::New(Utf8Range { start: 0, end: 1 });",
          "    let r2 = SplitRange::Both(Utf8Range { start: 0, end: 2 });",
          "    let _result = Split::parts2(r1, r2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Split { partitions: [r1, r2, SplitRange::Old(Utf8Range { start: 0, end: 0 })], len: 2 });"
        ],
        "code": [
          "{",
          "    let r1 = SplitRange::New(Utf8Range { start: 0, end: 1 });",
          "    let r2 = SplitRange::Both(Utf8Range { start: 0, end: 2 });",
          "    let _result = Split::parts2(r1, r2);",
          "    assert_eq!(_result, Split { partitions: [r1, r2, SplitRange::Old(Utf8Range { start: 0, end: 0 })], len: 2 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let r1 = SplitRange::Both(Utf8Range { start: 1, end: 1 });",
          "    let r2 = SplitRange::Old(Utf8Range { start: 0, end: 1 });",
          "    let _result = Split::parts2(r1, r2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.partitions[0], r1);",
          "    assert_eq!(_result.partitions[1], r2);",
          "    assert_eq!(_result.partitions[2], SplitRange::Old(Utf8Range { start: 0, end: 0 }));",
          "    assert_eq!(_result.len, 2);"
        ],
        "code": [
          "{",
          "    let r1 = SplitRange::Both(Utf8Range { start: 1, end: 1 });",
          "    let r2 = SplitRange::Old(Utf8Range { start: 0, end: 1 });",
          "    let _result = Split::parts2(r1, r2);",
          "    assert_eq!(_result.partitions[0], r1);",
          "    assert_eq!(_result.partitions[1], r2);",
          "    assert_eq!(_result.partitions[2], SplitRange::Old(Utf8Range { start: 0, end: 0 }));",
          "    assert_eq!(_result.len, 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let r1 = SplitRange::New(Utf8Range { start: 1, end: 2 });",
          "    let r2 = SplitRange::Both(Utf8Range { start: 2, end: 3 });",
          "    let _result = Split::parts2(r1, r2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.partitions[0], SplitRange::New(Utf8Range { start: 1, end: 2 }));",
          "    assert_eq!(_result.partitions[1], SplitRange::Both(Utf8Range { start: 2, end: 3 }));",
          "    assert_eq!(_result.partitions[2], SplitRange::Old(Utf8Range { start: 0, end: 0 }));",
          "    assert_eq!(_result.len, 2);"
        ],
        "code": [
          "{",
          "    let r1 = SplitRange::New(Utf8Range { start: 1, end: 2 });",
          "    let r2 = SplitRange::Both(Utf8Range { start: 2, end: 3 });",
          "    let _result = Split::parts2(r1, r2);",
          "    assert_eq!(_result.partitions[0], SplitRange::New(Utf8Range { start: 1, end: 2 }));",
          "    assert_eq!(_result.partitions[1], SplitRange::Both(Utf8Range { start: 2, end: 3 }));",
          "    assert_eq!(_result.partitions[2], SplitRange::Old(Utf8Range { start: 0, end: 0 }));",
          "    assert_eq!(_result.len, 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let r1 = SplitRange::Both(Utf8Range { start: 1, end: 3 });",
          "    let r2 = SplitRange::Both(Utf8Range { start: 3, end: 4 });",
          "    let _result = Split::parts2(r1, r2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Split { partitions: [SplitRange::Both(Utf8Range { start: 1, end: 3 }), SplitRange::Both(Utf8Range { start: 3, end: 4 }), SplitRange::Old(Utf8Range { start: 0, end: 0 })], len: 2 });"
        ],
        "code": [
          "{",
          "    let r1 = SplitRange::Both(Utf8Range { start: 1, end: 3 });",
          "    let r2 = SplitRange::Both(Utf8Range { start: 3, end: 4 });",
          "    let _result = Split::parts2(r1, r2);",
          "    assert_eq!(_result, Split { partitions: [SplitRange::Both(Utf8Range { start: 1, end: 3 }), SplitRange::Both(Utf8Range { start: 3, end: 4 }), SplitRange::Old(Utf8Range { start: 0, end: 0 })], len: 2 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]