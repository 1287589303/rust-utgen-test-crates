[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = escape(\"\");",
          "}"
        ],
        "oracle": [
          "    let result = escape(\"\");",
          "    assert_eq!(result, \"\");",
          "    ",
          "    let result = escape(\"abc\");",
          "    assert_eq!(result, \"abc\");",
          "    ",
          "    let result = escape(\"123\");",
          "    assert_eq!(result, \"123\");",
          "    ",
          "    let result = escape(\"a1b2c3\");",
          "    assert_eq!(result, \"a1b2c3\");",
          "    ",
          "    let result = escape(\"noMetaCharsHere\");",
          "    assert_eq!(result, \"noMetaCharsHere\");",
          "    ",
          "    let result = escape(\"someRandomString\");",
          "    assert_eq!(result, \"someRandomString\");",
          "    ",
          "    let result = escape(\" \");",
          "    assert_eq!(result, \" \");",
          "    ",
          "    let result = escape(\"test string with spaces\");",
          "    assert_eq!(result, \"test string with spaces\");",
          "    ",
          "    let result = escape(\"specialChars!@#\");",
          "    assert_eq!(result, \"specialChars!@#\");"
        ],
        "code": [
          "{",
          "    let result = escape(\"\");",
          "    let result = escape(\"\");",
          "    assert_eq!(result, \"\");",
          "    ",
          "    let result = escape(\"abc\");",
          "    assert_eq!(result, \"abc\");",
          "    ",
          "    let result = escape(\"123\");",
          "    assert_eq!(result, \"123\");",
          "    ",
          "    let result = escape(\"a1b2c3\");",
          "    assert_eq!(result, \"a1b2c3\");",
          "    ",
          "    let result = escape(\"noMetaCharsHere\");",
          "    assert_eq!(result, \"noMetaCharsHere\");",
          "    ",
          "    let result = escape(\"someRandomString\");",
          "    assert_eq!(result, \"someRandomString\");",
          "    ",
          "    let result = escape(\" \");",
          "    assert_eq!(result, \" \");",
          "    ",
          "    let result = escape(\"test string with spaces\");",
          "    assert_eq!(result, \"test string with spaces\");",
          "    ",
          "    let result = escape(\"specialChars!@#\");",
          "    assert_eq!(result, \"specialChars!@#\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = escape(\"hello\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, \"hello\");"
        ],
        "code": [
          "{",
          "    let result = escape(\"hello\");",
          "    assert_eq!(result, \"hello\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = escape(\"abcde\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, \"abcde\");",
          "    assert!(result.is_empty() == false);",
          "    assert!(result.chars().all(|c| !is_meta_character(c)));",
          "    assert_eq!(result.len(), 5);",
          "    assert!(result.contains('a'));",
          "    assert!(result.contains('b'));",
          "    assert!(result.contains('c'));",
          "    assert!(result.contains('d'));",
          "    assert!(result.contains('e'));"
        ],
        "code": [
          "{",
          "    let result = escape(\"abcde\");",
          "    assert_eq!(result, \"abcde\");",
          "    assert!(result.is_empty() == false);",
          "    assert!(result.chars().all(|c| !is_meta_character(c)));",
          "    assert_eq!(result.len(), 5);",
          "    assert!(result.contains('a'));",
          "    assert!(result.contains('b'));",
          "    assert!(result.contains('c'));",
          "    assert!(result.contains('d'));",
          "    assert!(result.contains('e'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = escape(\"a\");",
          "}"
        ],
        "oracle": [
          "    let expected = \"a\";",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let result = escape(\"a\");",
          "    let expected = \"a\";",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]