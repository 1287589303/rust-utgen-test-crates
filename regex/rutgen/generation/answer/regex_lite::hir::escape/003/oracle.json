[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"\";",
          "    let result = escape(pattern);",
          "}"
        ],
        "oracle": [
          "    let pattern = \"\";",
          "    let result = escape(pattern);",
          "    assert_eq!(result, \"\");"
        ],
        "code": [
          "{",
          "    let pattern = \"\";",
          "    let result = escape(pattern);",
          "    let pattern = \"\";",
          "    let result = escape(pattern);",
          "    assert_eq!(result, \"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"hello\";",
          "    let result = escape(pattern);",
          "}"
        ],
        "oracle": [
          "    let pattern = \"hello\";",
          "    let expected = \"hello\";",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let pattern = \"hello\";",
          "    let result = escape(pattern);",
          "    let pattern = \"hello\";",
          "    let expected = \"hello\";",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"hello.world+test\";",
          "    let result = escape(pattern);",
          "}"
        ],
        "oracle": [
          "    let pattern = \"hello world\";",
          "    let expected = \"hello world\";",
          "    assert_eq!(result, expected);",
          "    ",
          "    let pattern = \"no meta chars\";",
          "    let expected = \"no meta chars\";",
          "    assert_eq!(result, expected);",
          "    ",
          "    let pattern = \"justaletter\";",
          "    let expected = \"justaletter\";",
          "    assert_eq!(result, expected);",
          "    ",
          "    let pattern = \"abc123\";",
          "    let expected = \"abc123\";",
          "    assert_eq!(result, expected);",
          "    ",
          "    let pattern = \"\";",
          "    let expected = \"\";",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let pattern = \"hello.world+test\";",
          "    let result = escape(pattern);",
          "    let pattern = \"hello world\";",
          "    let expected = \"hello world\";",
          "    assert_eq!(result, expected);",
          "    ",
          "    let pattern = \"no meta chars\";",
          "    let expected = \"no meta chars\";",
          "    assert_eq!(result, expected);",
          "    ",
          "    let pattern = \"justaletter\";",
          "    let expected = \"justaletter\";",
          "    assert_eq!(result, expected);",
          "    ",
          "    let pattern = \"abc123\";",
          "    let expected = \"abc123\";",
          "    assert_eq!(result, expected);",
          "    ",
          "    let pattern = \"\";",
          "    let expected = \"\";",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"\\\\.+*?()|[]{}^$#&~-\";",
          "    let result = escape(pattern);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, \"\\\\.\\\\+\\\\*\\\\?\\\\(\\\\)\\\\|\\\\[\\\\]\\\\{\\\\}\\\\^\\\\$\\\\#\\\\&\\\\~\");",
          "    assert_eq!(result.len(), pattern.len() + 12);",
          "    assert_eq!(escape(\"hello\"), \"hello\");"
        ],
        "code": [
          "{",
          "    let pattern = \"\\\\.+*?()|[]{}^$#&~-\";",
          "    let result = escape(pattern);",
          "    assert_eq!(result, \"\\\\.\\\\+\\\\*\\\\?\\\\(\\\\)\\\\|\\\\[\\\\]\\\\{\\\\}\\\\^\\\\$\\\\#\\\\&\\\\~\");",
          "    assert_eq!(result.len(), pattern.len() + 12);",
          "    assert_eq!(escape(\"hello\"), \"hello\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]