[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = escape(\"\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, \"\");",
          "    assert_eq!(result.len(), 0);",
          "    let result = escape(\"abc\");",
          "    assert_eq!(result, \"abc\");",
          "    let result = escape(\"a.b+c?\");",
          "    assert_eq!(result, \"a\\\\.b\\\\+c\\\\?\");",
          "    let result = escape(\"\\\\(test\\\\)\");",
          "    assert_eq!(result, \"\\\\\\\\(test\\\\\\\\)\");",
          "    let result = escape(\"foo$bar\");",
          "    assert_eq!(result, \"foo\\\\$bar\");",
          "    let result = escape(\"[a-z]\");",
          "    assert_eq!(result, \"\\\\[a-z\\\\]\");"
        ],
        "code": [
          "{",
          "    let result = escape(\"\");",
          "    assert_eq!(result, \"\");",
          "    assert_eq!(result.len(), 0);",
          "    let result = escape(\"abc\");",
          "    assert_eq!(result, \"abc\");",
          "    let result = escape(\"a.b+c?\");",
          "    assert_eq!(result, \"a\\\\.b\\\\+c\\\\?\");",
          "    let result = escape(\"\\\\(test\\\\)\");",
          "    assert_eq!(result, \"\\\\\\\\(test\\\\\\\\)\");",
          "    let result = escape(\"foo$bar\");",
          "    assert_eq!(result, \"foo\\\\$bar\");",
          "    let result = escape(\"[a-z]\");",
          "    assert_eq!(result, \"\\\\[a-z\\\\]\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = escape(\".\");",
          "}"
        ],
        "oracle": [
          "    let result = escape(\".\"); assert_eq!(result, r\"\\.\");",
          "    let result = escape(\"+\"); assert_eq!(result, r\"\\+\");",
          "    let result = escape(\"a+b\"); assert_eq!(result, r\"a\\+b\");",
          "    let result = escape(\"abc*\"); assert_eq!(result, r\"abc\\*\");",
          "    let result = escape(\"x{2,3}\"); assert_eq!(result, r\"x\\{2,3\\}\");",
          "    let result = escape(\"~hello*world\"); assert_eq!(result, r\"~hello\\*world\");",
          "    let result = escape(\"a(bc)\"); assert_eq!(result, r\"a\\(bc\\)\");",
          "    let result = escape(\"-item\"); assert_eq!(result, r\"\\-item\");",
          "    let result = escape(\"^start\"); assert_eq!(result, r\"\\^start\");",
          "    let result = escape(\"end$\"); assert_eq!(result, r\"end\\$\");",
          "    let result = escape(\"no_meta_chars\"); assert_eq!(result, \"no_meta_chars\");"
        ],
        "code": [
          "{",
          "    let result = escape(\".\");",
          "    let result = escape(\".\"); assert_eq!(result, r\"\\.\");",
          "    let result = escape(\"+\"); assert_eq!(result, r\"\\+\");",
          "    let result = escape(\"a+b\"); assert_eq!(result, r\"a\\+b\");",
          "    let result = escape(\"abc*\"); assert_eq!(result, r\"abc\\*\");",
          "    let result = escape(\"x{2,3}\"); assert_eq!(result, r\"x\\{2,3\\}\");",
          "    let result = escape(\"~hello*world\"); assert_eq!(result, r\"~hello\\*world\");",
          "    let result = escape(\"a(bc)\"); assert_eq!(result, r\"a\\(bc\\)\");",
          "    let result = escape(\"-item\"); assert_eq!(result, r\"\\-item\");",
          "    let result = escape(\"^start\"); assert_eq!(result, r\"\\^start\");",
          "    let result = escape(\"end$\"); assert_eq!(result, r\"end\\$\");",
          "    let result = escape(\"no_meta_chars\"); assert_eq!(result, \"no_meta_chars\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = escape(\"a\");",
          "}"
        ],
        "oracle": [
          "    let result = escape(\"a\"); assert_eq!(result, \"a\");",
          "    let result = escape(\"a.b\"); assert_eq!(result, \"a\\\\.b\");",
          "    let result = escape(\"ab+c\"); assert_eq!(result, \"ab\\\\+c\");",
          "    let result = escape(\"a?b\"); assert_eq!(result, \"a\\\\?b\");",
          "    let result = escape(\"a(b)c\"); assert_eq!(result, \"a\\\\(b\\\\)c\");",
          "    let result = escape(\"a|b\"); assert_eq!(result, \"a\\\\|b\");",
          "    let result = escape(\"[abc]\"); assert_eq!(result, \"\\\\[abc\\\\]\");",
          "    let result = escape(\"{1,2}\"); assert_eq!(result, \"\\\\{1,2\\\\}\");",
          "    let result = escape(\"^start\"); assert_eq!(result, \"\\\\^start\");",
          "    let result = escape(\"end$\"); assert_eq!(result, \"end\\\\$\");",
          "    let result = escape(\"&\"); assert_eq!(result, \"&\");",
          "    let result = escape(\"-dash-\"); assert_eq!(result, \"-dash-\");",
          "    let result = escape(\"~tilde\"); assert_eq!(result, \"~tilde\");",
          "    let result = escape(\"\\\\backslash\"); assert_eq!(result, \"\\\\\\\\backslash\");"
        ],
        "code": [
          "{",
          "    let result = escape(\"a\");",
          "    let result = escape(\"a\"); assert_eq!(result, \"a\");",
          "    let result = escape(\"a.b\"); assert_eq!(result, \"a\\\\.b\");",
          "    let result = escape(\"ab+c\"); assert_eq!(result, \"ab\\\\+c\");",
          "    let result = escape(\"a?b\"); assert_eq!(result, \"a\\\\?b\");",
          "    let result = escape(\"a(b)c\"); assert_eq!(result, \"a\\\\(b\\\\)c\");",
          "    let result = escape(\"a|b\"); assert_eq!(result, \"a\\\\|b\");",
          "    let result = escape(\"[abc]\"); assert_eq!(result, \"\\\\[abc\\\\]\");",
          "    let result = escape(\"{1,2}\"); assert_eq!(result, \"\\\\{1,2\\\\}\");",
          "    let result = escape(\"^start\"); assert_eq!(result, \"\\\\^start\");",
          "    let result = escape(\"end$\"); assert_eq!(result, \"end\\\\$\");",
          "    let result = escape(\"&\"); assert_eq!(result, \"&\");",
          "    let result = escape(\"-dash-\"); assert_eq!(result, \"-dash-\");",
          "    let result = escape(\"~tilde\"); assert_eq!(result, \"~tilde\");",
          "    let result = escape(\"\\\\backslash\"); assert_eq!(result, \"\\\\\\\\backslash\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = escape(\"a.b+c*\");",
          "}"
        ],
        "oracle": [
          "    let result = escape(\"a.b+c*\");",
          "    assert_eq!(result, \"a\\\\.b\\\\+c\\\\*\");",
          "    let result = escape(\"a(b)c\");",
          "    assert_eq!(result, \"a\\\\(b\\\\)c\");",
          "    let result = escape(\"a|b\");",
          "    assert_eq!(result, \"a\\\\|b\");",
          "    let result = escape(\"c{2}\");",
          "    assert_eq!(result, \"c\\\\{2\\\\}\");",
          "    let result = escape(\"escape \\\\$\");",
          "    assert_eq!(result, \"escape \\\\$\");",
          "    let result = escape(\"^start$\");",
          "    assert_eq!(result, \"\\\\^start\\\\$\");",
          "    let result = escape(\"~end\");",
          "    assert_eq!(result, \"\\\\~end\");",
          "    let result = escape(\"no meta\");",
          "    assert_eq!(result, \"no meta\");",
          "    let result = escape(\"[set]\");",
          "    assert_eq!(result, \"\\\\[set\\\\]\");",
          "    let result = escape(\"complex*regex+\");",
          "    assert_eq!(result, \"complex\\\\*regex\\\\+\");"
        ],
        "code": [
          "{",
          "    let result = escape(\"a.b+c*\");",
          "    let result = escape(\"a.b+c*\");",
          "    assert_eq!(result, \"a\\\\.b\\\\+c\\\\*\");",
          "    let result = escape(\"a(b)c\");",
          "    assert_eq!(result, \"a\\\\(b\\\\)c\");",
          "    let result = escape(\"a|b\");",
          "    assert_eq!(result, \"a\\\\|b\");",
          "    let result = escape(\"c{2}\");",
          "    assert_eq!(result, \"c\\\\{2\\\\}\");",
          "    let result = escape(\"escape \\\\$\");",
          "    assert_eq!(result, \"escape \\\\$\");",
          "    let result = escape(\"^start$\");",
          "    assert_eq!(result, \"\\\\^start\\\\$\");",
          "    let result = escape(\"~end\");",
          "    assert_eq!(result, \"\\\\~end\");",
          "    let result = escape(\"no meta\");",
          "    assert_eq!(result, \"no meta\");",
          "    let result = escape(\"[set]\");",
          "    assert_eq!(result, \"\\\\[set\\\\]\");",
          "    let result = escape(\"complex*regex+\");",
          "    assert_eq!(result, \"complex\\\\*regex\\\\+\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = escape(r\"\\.+*?()|[]{}^$&#-~\");",
          "}"
        ],
        "oracle": [
          "    let expected_result = r\"\\\\\\.\\+\\*\\?\\(\\)\\|\\[\\]\\{\\}\\^\\$\\&\\#\\-\\~\";",
          "    assert_eq!(result, expected_result);",
          "    let result_empty = escape(\"\");",
          "    assert_eq!(result_empty, \"\");",
          "    let result_no_meta = escape(\"abc\");",
          "    assert_eq!(result_no_meta, \"abc\");",
          "    let result_partial_meta = escape(\"a.b+c?d\");",
          "    assert_eq!(result_partial_meta, \"a\\\\.b\\\\+c\\\\?d\");"
        ],
        "code": [
          "{",
          "    let result = escape(r\"\\.+*?()|[]{}^$&#-~\");",
          "    let expected_result = r\"\\\\\\.\\+\\*\\?\\(\\)\\|\\[\\]\\{\\}\\^\\$\\&\\#\\-\\~\";",
          "    assert_eq!(result, expected_result);",
          "    let result_empty = escape(\"\");",
          "    assert_eq!(result_empty, \"\");",
          "    let result_no_meta = escape(\"abc\");",
          "    assert_eq!(result_no_meta, \"abc\");",
          "    let result_partial_meta = escape(\"a.b+c?d\");",
          "    assert_eq!(result_partial_meta, \"a\\\\.b\\\\+c\\\\?d\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]