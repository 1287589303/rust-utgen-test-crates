[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap();",
          "    let mut names = re.capture_names();",
          "    names.next();",
          "    names.next();",
          "    names.next();",
          "    names.next();",
          "    names.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), Some(Some(\"a\")));",
          "    assert_eq!(names.next(), Some(Some(\"b\")));",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), Some(Some(\"c\")));",
          "    assert_eq!(names.next(), None);",
          "    ",
          "    let re_empty = Regex::new(r\"\").unwrap();",
          "    let mut names_empty = re_empty.capture_names();",
          "    assert_eq!(names_empty.next(), Some(None));",
          "    assert_eq!(names_empty.next(), None);",
          "    ",
          "    let re_no_capture = Regex::new(r\"[a&&b]\").unwrap();",
          "    let mut names_no_capture = re_no_capture.capture_names();",
          "    assert_eq!(names_no_capture.next(), Some(None));",
          "    assert_eq!(names_no_capture.next(), None);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap();",
          "    let mut names = re.capture_names();",
          "    names.next();",
          "    names.next();",
          "    names.next();",
          "    names.next();",
          "    names.next();",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), Some(Some(\"a\")));",
          "    assert_eq!(names.next(), Some(Some(\"b\")));",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), Some(Some(\"c\")));",
          "    assert_eq!(names.next(), None);",
          "    ",
          "    let re_empty = Regex::new(r\"\").unwrap();",
          "    let mut names_empty = re_empty.capture_names();",
          "    assert_eq!(names_empty.next(), Some(None));",
          "    assert_eq!(names_empty.next(), None);",
          "    ",
          "    let re_no_capture = Regex::new(r\"[a&&b]\").unwrap();",
          "    let mut names_no_capture = re_no_capture.capture_names();",
          "    assert_eq!(names_no_capture.next(), Some(None));",
          "    assert_eq!(names_no_capture.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\").unwrap();",
          "    let mut names = re.capture_names();",
          "    names.next();",
          "    names.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), None);",
          "    ",
          "    let re = Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap();",
          "    let mut names = re.capture_names();",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), Some(Some(\"a\")));",
          "    assert_eq!(names.next(), Some(Some(\"b\")));",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), Some(Some(\"c\")));",
          "    assert_eq!(names.next(), None);",
          "    ",
          "    let re = Regex::new(r\"[a&&b]\").unwrap();",
          "    let mut names = re.capture_names();",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), None);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\").unwrap();",
          "    let mut names = re.capture_names();",
          "    names.next();",
          "    names.next();",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), None);",
          "    ",
          "    let re = Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap();",
          "    let mut names = re.capture_names();",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), Some(Some(\"a\")));",
          "    assert_eq!(names.next(), Some(Some(\"b\")));",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), Some(Some(\"c\")));",
          "    assert_eq!(names.next(), None);",
          "    ",
          "    let re = Regex::new(r\"[a&&b]\").unwrap();",
          "    let mut names = re.capture_names();",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"[a&&b]\").unwrap();",
          "    let mut names = re.capture_names();",
          "    names.next();",
          "    names.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), None);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"[a&&b]\").unwrap();",
          "    let mut names = re.capture_names();",
          "    names.next();",
          "    names.next();",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"(?<name>abc)\").unwrap();",
          "    let mut names = re.capture_names();",
          "    names.next();",
          "    names.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), Some(Some(\"name\")));",
          "    assert_eq!(names.next(), None);",
          "    ",
          "    let re = Regex::new(r\"\").unwrap();",
          "    let mut names = re.capture_names();",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), None);",
          "    ",
          "    let re = Regex::new(r\"[a&&b]\").unwrap();",
          "    let mut names = re.capture_names();",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), None);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"(?<name>abc)\").unwrap();",
          "    let mut names = re.capture_names();",
          "    names.next();",
          "    names.next();",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), Some(Some(\"name\")));",
          "    assert_eq!(names.next(), None);",
          "    ",
          "    let re = Regex::new(r\"\").unwrap();",
          "    let mut names = re.capture_names();",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), None);",
          "    ",
          "    let re = Regex::new(r\"[a&&b]\").unwrap();",
          "    let mut names = re.capture_names();",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"(?<first>foo)(?<second>bar)\").unwrap();",
          "    let mut names = re.capture_names();",
          "    names.next();",
          "    names.next();",
          "    names.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), Some(Some(\"first\")));",
          "    assert_eq!(names.next(), Some(Some(\"second\")));",
          "    assert_eq!(names.next(), None);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"(?<first>foo)(?<second>bar)\").unwrap();",
          "    let mut names = re.capture_names();",
          "    names.next();",
          "    names.next();",
          "    names.next();",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), Some(Some(\"first\")));",
          "    assert_eq!(names.next(), Some(Some(\"second\")));",
          "    assert_eq!(names.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"(abc)\").unwrap();",
          "    let mut names = re.capture_names();",
          "    names.next();",
          "    names.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), Some(Some(\"abc\")));"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"(abc)\").unwrap();",
          "    let mut names = re.capture_names();",
          "    names.next();",
          "    names.next();",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), Some(Some(\"abc\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"(?:abc)(def)\").unwrap();",
          "    let mut names = re.capture_names();",
          "    names.next();",
          "    names.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), Some(Some(\"1\")));",
          "    assert_eq!(names.next(), None);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"(?:abc)(def)\").unwrap();",
          "    let mut names = re.capture_names();",
          "    names.next();",
          "    names.next();",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), Some(Some(\"1\")));",
          "    assert_eq!(names.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]