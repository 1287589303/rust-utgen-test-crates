[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: &'static [(char, &'static [char])] = &[('a', &['A']), ('b', &['B']), ('c', &['C'])];",
          "    let mut folder = SimpleCaseFolder { table, last: None, next: 0 };",
          "    let _ = folder.get('a');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(folder.get('a'), Ok(0));",
          "    assert_eq!(folder.get('b'), Ok(1));",
          "    assert_eq!(folder.get('c'), Ok(2));",
          "    assert!(folder.get('d').is_err());",
          "    assert_eq!(folder.get('A'), Err(1));",
          "    assert_eq!(folder.get('z'), Err(3));",
          "    assert_eq!(folder.get('!'), Err(0));",
          "    assert_eq!(folder.get('C'), Err(2));"
        ],
        "code": [
          "{",
          "    let table: &'static [(char, &'static [char])] = &[('a', &['A']), ('b', &['B']), ('c', &['C'])];",
          "    let mut folder = SimpleCaseFolder { table, last: None, next: 0 };",
          "    let _ = folder.get('a');",
          "    assert_eq!(folder.get('a'), Ok(0));",
          "    assert_eq!(folder.get('b'), Ok(1));",
          "    assert_eq!(folder.get('c'), Ok(2));",
          "    assert!(folder.get('d').is_err());",
          "    assert_eq!(folder.get('A'), Err(1));",
          "    assert_eq!(folder.get('z'), Err(3));",
          "    assert_eq!(folder.get('!'), Err(0));",
          "    assert_eq!(folder.get('C'), Err(2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: &'static [(char, &'static [char])] = &[('a', &['A']), ('b', &['B']), ('c', &['C'])];",
          "    let mut folder = SimpleCaseFolder { table, last: None, next: 0 };",
          "    let _ = folder.get('d');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(folder.get('a'), Ok(0));",
          "    assert_eq!(folder.get('b'), Ok(1));",
          "    assert_eq!(folder.get('c'), Ok(2));",
          "    assert_eq!(folder.get('d'), Err(3));",
          "    assert_eq!(folder.get('e'), Err(3));",
          "    assert_eq!(folder.get('`'), Err(0));",
          "    assert_eq!(folder.get('z'), Err(3));",
          "    assert_eq!(folder.get('A'), Err(0));",
          "    assert_eq!(folder.get('B'), Err(1));",
          "    assert_eq!(folder.get('C'), Err(2));"
        ],
        "code": [
          "{",
          "    let table: &'static [(char, &'static [char])] = &[('a', &['A']), ('b', &['B']), ('c', &['C'])];",
          "    let mut folder = SimpleCaseFolder { table, last: None, next: 0 };",
          "    let _ = folder.get('d');",
          "    assert_eq!(folder.get('a'), Ok(0));",
          "    assert_eq!(folder.get('b'), Ok(1));",
          "    assert_eq!(folder.get('c'), Ok(2));",
          "    assert_eq!(folder.get('d'), Err(3));",
          "    assert_eq!(folder.get('e'), Err(3));",
          "    assert_eq!(folder.get('`'), Err(0));",
          "    assert_eq!(folder.get('z'), Err(3));",
          "    assert_eq!(folder.get('A'), Err(0));",
          "    assert_eq!(folder.get('B'), Err(1));",
          "    assert_eq!(folder.get('C'), Err(2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: &'static [(char, &'static [char])] = &[",
          "        ('\\0', &['\\u{0001}']), ",
          "        ('\\u{007F}', &['\\u{007E}']), ",
          "        ('\\u{00FF}', &['\\u{00FE}']), ",
          "        ('\\u{FFFF}', &['\\u{FFFE}']), ",
          "        ('\\u{10FFFF}', &['\\u{10FFFE}'])",
          "    ];",
          "    let mut folder = SimpleCaseFolder { table, last: None, next: 0 };",
          "    ",
          "    let _ = folder.get('\\0');",
          "    let _ = folder.get('\\u{007F}');",
          "    let _ = folder.get('\\u{00FF}');",
          "    let _ = folder.get('\\u{FFFF}');",
          "    let _ = folder.get('\\u{10FFFF}');",
          "}"
        ],
        "oracle": [
          "    let result = folder.get('\\0'); assert_eq!(result, Ok(0));",
          "    let result = folder.get('\\u{007F}'); assert_eq!(result, Ok(1));",
          "    let result = folder.get('\\u{00FF}'); assert_eq!(result, Ok(2));",
          "    let result = folder.get('\\u{FFFF}'); assert_eq!(result, Ok(3));",
          "    let result = folder.get('\\u{10FFFF}'); assert_eq!(result, Ok(4));",
          "    let result = folder.get('\\u{0002}'); assert!(result.is_err());",
          "    let result = folder.get('\\u{007E}'); assert!(result.is_err());",
          "    let result = folder.get('\\u{00FE}'); assert!(result.is_err());",
          "    let result = folder.get('\\u{FFFD}'); assert!(result.is_err());",
          "    let result = folder.get('\\u{110000}'); assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let table: &'static [(char, &'static [char])] = &[",
          "        ('\\0', &['\\u{0001}']), ",
          "        ('\\u{007F}', &['\\u{007E}']), ",
          "        ('\\u{00FF}', &['\\u{00FE}']), ",
          "        ('\\u{FFFF}', &['\\u{FFFE}']), ",
          "        ('\\u{10FFFF}', &['\\u{10FFFE}'])",
          "    ];",
          "    let mut folder = SimpleCaseFolder { table, last: None, next: 0 };",
          "    ",
          "    let _ = folder.get('\\0');",
          "    let _ = folder.get('\\u{007F}');",
          "    let _ = folder.get('\\u{00FF}');",
          "    let _ = folder.get('\\u{FFFF}');",
          "    let _ = folder.get('\\u{10FFFF}');",
          "    let result = folder.get('\\0'); assert_eq!(result, Ok(0));",
          "    let result = folder.get('\\u{007F}'); assert_eq!(result, Ok(1));",
          "    let result = folder.get('\\u{00FF}'); assert_eq!(result, Ok(2));",
          "    let result = folder.get('\\u{FFFF}'); assert_eq!(result, Ok(3));",
          "    let result = folder.get('\\u{10FFFF}'); assert_eq!(result, Ok(4));",
          "    let result = folder.get('\\u{0002}'); assert!(result.is_err());",
          "    let result = folder.get('\\u{007E}'); assert!(result.is_err());",
          "    let result = folder.get('\\u{00FE}'); assert!(result.is_err());",
          "    let result = folder.get('\\u{FFFD}'); assert!(result.is_err());",
          "    let result = folder.get('\\u{110000}'); assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: &'static [(char, &'static [char])] = &[('a', &['A']), ('b', &['B']), ('c', &['C'])];",
          "    let mut folder = SimpleCaseFolder { table, last: None, next: 0 };",
          "    let _ = folder.get('\\u{0000}');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(folder.get('\\u{0000}').is_err(), true);",
          "    assert_eq!(folder.get('a').unwrap(), 0);",
          "    assert_eq!(folder.get('b').unwrap(), 1);",
          "    assert_eq!(folder.get('c').unwrap(), 2);",
          "    assert!(folder.get('d').is_err());",
          "    assert_eq!(folder.get('A').unwrap(), 0);",
          "    assert_eq!(folder.get('B').unwrap(), 1);",
          "    assert_eq!(folder.get('C').unwrap(), 2);"
        ],
        "code": [
          "{",
          "    let table: &'static [(char, &'static [char])] = &[('a', &['A']), ('b', &['B']), ('c', &['C'])];",
          "    let mut folder = SimpleCaseFolder { table, last: None, next: 0 };",
          "    let _ = folder.get('\\u{0000}');",
          "    assert_eq!(folder.get('\\u{0000}').is_err(), true);",
          "    assert_eq!(folder.get('a').unwrap(), 0);",
          "    assert_eq!(folder.get('b').unwrap(), 1);",
          "    assert_eq!(folder.get('c').unwrap(), 2);",
          "    assert!(folder.get('d').is_err());",
          "    assert_eq!(folder.get('A').unwrap(), 0);",
          "    assert_eq!(folder.get('B').unwrap(), 1);",
          "    assert_eq!(folder.get('C').unwrap(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: &'static [(char, &'static [char])] = &[('a', &['A']), ('b', &['B']), ('c', &['C'])];",
          "    let mut folder = SimpleCaseFolder { table, last: None, next: 0 };",
          "    let _ = folder.get('\\u{FFFF}');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(folder.get('a'), Ok(0));",
          "    assert_eq!(folder.get('b'), Ok(1));",
          "    assert_eq!(folder.get('c'), Ok(2));",
          "    assert_eq!(folder.get('d'), Err(3));",
          "    assert_eq!(folder.get('\\u{FFFF}'), Err(3));",
          "    assert_eq!(folder.get('A'), Err(0));",
          "    assert_eq!(folder.get('B'), Err(1));",
          "    assert_eq!(folder.get('C'), Err(2));",
          "    assert_eq!(folder.get('\\u{0000}'), Err(0));",
          "    assert_eq!(folder.get('\\u{007A}'), Err(3));"
        ],
        "code": [
          "{",
          "    let table: &'static [(char, &'static [char])] = &[('a', &['A']), ('b', &['B']), ('c', &['C'])];",
          "    let mut folder = SimpleCaseFolder { table, last: None, next: 0 };",
          "    let _ = folder.get('\\u{FFFF}');",
          "    assert_eq!(folder.get('a'), Ok(0));",
          "    assert_eq!(folder.get('b'), Ok(1));",
          "    assert_eq!(folder.get('c'), Ok(2));",
          "    assert_eq!(folder.get('d'), Err(3));",
          "    assert_eq!(folder.get('\\u{FFFF}'), Err(3));",
          "    assert_eq!(folder.get('A'), Err(0));",
          "    assert_eq!(folder.get('B'), Err(1));",
          "    assert_eq!(folder.get('C'), Err(2));",
          "    assert_eq!(folder.get('\\u{0000}'), Err(0));",
          "    assert_eq!(folder.get('\\u{007A}'), Err(3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]