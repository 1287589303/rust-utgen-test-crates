[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = Parser {",
          "        pos: Cell::new(0),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_instance = ParserI::new(&parser, \"some_pattern\");",
          "    ",
          "    let next_kind = ast::ClassSetBinaryOpKind::Intersection;",
          "    let next_union = ClassSetUnion {",
          "        span: Span { start: 0, end: 1 },",
          "        items: vec![ClassSetItem::Literal(Literal::new('a'))],",
          "    };",
          "    ",
          "    parser_instance.push_class_op(next_kind, next_union);",
          "}"
        ],
        "oracle": [
          "    let parser = Parser { pos: Cell::new(0), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), };",
          "    let parser_instance = ParserI::new(&parser, \"some_pattern\");",
          "    let next_kind = ast::ClassSetBinaryOpKind::Intersection;",
          "    let next_union = ClassSetUnion { span: Span { start: 0, end: 1 }, items: vec![ClassSetItem::Literal(Literal::new('a'))], };",
          "    let result = parser_instance.push_class_op(next_kind, next_union);",
          "    assert_eq!(result.span, parser_instance.span());",
          "    assert!(result.items.is_empty());",
          "    assert_eq!(result.items.len(), 0);"
        ],
        "code": [
          "{",
          "    let parser = Parser {",
          "        pos: Cell::new(0),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_instance = ParserI::new(&parser, \"some_pattern\");",
          "    ",
          "    let next_kind = ast::ClassSetBinaryOpKind::Intersection;",
          "    let next_union = ClassSetUnion {",
          "        span: Span { start: 0, end: 1 },",
          "        items: vec![ClassSetItem::Literal(Literal::new('a'))],",
          "    };",
          "    ",
          "    parser_instance.push_class_op(next_kind, next_union);",
          "    let parser = Parser { pos: Cell::new(0), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), };",
          "    let parser_instance = ParserI::new(&parser, \"some_pattern\");",
          "    let next_kind = ast::ClassSetBinaryOpKind::Intersection;",
          "    let next_union = ClassSetUnion { span: Span { start: 0, end: 1 }, items: vec![ClassSetItem::Literal(Literal::new('a'))], };",
          "    let result = parser_instance.push_class_op(next_kind, next_union);",
          "    assert_eq!(result.span, parser_instance.span());",
          "    assert!(result.items.is_empty());",
          "    assert_eq!(result.items.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = Parser {",
          "        pos: Cell::new(0),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_instance = ParserI::new(&parser, \"some_pattern\");",
          "",
          "    let next_kind = ast::ClassSetBinaryOpKind::Difference;",
          "    let next_union = ClassSetUnion {",
          "        span: Span { start: 1, end: 2 },",
          "        items: vec![ClassSetItem::Literal(Literal::new('b'))],",
          "    };",
          "",
          "    parser_instance.push_class_op(next_kind, next_union);",
          "}"
        ],
        "oracle": [
          "    let parser = Parser { pos: Cell::new(0), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), };",
          "    ",
          "    let parser_instance = ParserI::new(&parser, \"some_pattern\");",
          "    ",
          "    let next_kind = ast::ClassSetBinaryOpKind::Difference;",
          "    ",
          "    let next_union = ClassSetUnion { span: Span { start: 1, end: 2 }, items: vec![ClassSetItem::Literal(Literal::new('b'))], };",
          "    ",
          "    let result = parser_instance.push_class_op(next_kind, next_union);",
          "    ",
          "    assert_eq!(result.span, parser_instance.span());",
          "    ",
          "    assert_eq!(result.items.len(), 0);",
          "    ",
          "    assert_eq!(parser.stack_class.borrow().len(), 1);",
          "    ",
          "    if let ClassState::Op { kind, lhs } = &parser.stack_class.borrow()[0] {",
          "    ",
          "    assert_eq!(*kind, next_kind);",
          "    ",
          "    assert!(matches!(lhs, ClassSet::Item(ClassSetItem::Literal(_))));",
          "    ",
          "    }"
        ],
        "code": [
          "{",
          "    let parser = Parser {",
          "        pos: Cell::new(0),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_instance = ParserI::new(&parser, \"some_pattern\");",
          "",
          "    let next_kind = ast::ClassSetBinaryOpKind::Difference;",
          "    let next_union = ClassSetUnion {",
          "        span: Span { start: 1, end: 2 },",
          "        items: vec![ClassSetItem::Literal(Literal::new('b'))],",
          "    };",
          "",
          "    parser_instance.push_class_op(next_kind, next_union);",
          "    let parser = Parser { pos: Cell::new(0), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), };",
          "    ",
          "    let parser_instance = ParserI::new(&parser, \"some_pattern\");",
          "    ",
          "    let next_kind = ast::ClassSetBinaryOpKind::Difference;",
          "    ",
          "    let next_union = ClassSetUnion { span: Span { start: 1, end: 2 }, items: vec![ClassSetItem::Literal(Literal::new('b'))], };",
          "    ",
          "    let result = parser_instance.push_class_op(next_kind, next_union);",
          "    ",
          "    assert_eq!(result.span, parser_instance.span());",
          "    ",
          "    assert_eq!(result.items.len(), 0);",
          "    ",
          "    assert_eq!(parser.stack_class.borrow().len(), 1);",
          "    ",
          "    if let ClassState::Op { kind, lhs } = &parser.stack_class.borrow()[0] {",
          "    ",
          "    assert_eq!(*kind, next_kind);",
          "    ",
          "    assert!(matches!(lhs, ClassSet::Item(ClassSetItem::Literal(_))));",
          "    ",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = Parser {",
          "        pos: Cell::new(0),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_instance = ParserI::new(&parser, \"some_pattern\");",
          "",
          "    let next_kind = ast::ClassSetBinaryOpKind::SymmetricDifference;",
          "    let next_union = ClassSetUnion {",
          "        span: Span { start: 2, end: 3 },",
          "        items: vec![ClassSetItem::Literal(Literal::new('c'))],",
          "    };",
          "",
          "    parser_instance.push_class_op(next_kind, next_union);",
          "}"
        ],
        "oracle": [
          "    let parser = Parser { pos: Cell::new(0), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), };",
          "    let parser_instance = ParserI::new(&parser, \"some_pattern\");",
          "    ",
          "    let next_kind = ast::ClassSetBinaryOpKind::SymmetricDifference;",
          "    let next_union = ClassSetUnion { span: Span { start: 2, end: 3 }, items: vec![ClassSetItem::Literal(Literal::new('c'))], };",
          "    ",
          "    let result = parser_instance.push_class_op(next_kind, next_union);",
          "    let expected = ast::ClassSetUnion { span: parser_instance.span(), items: vec![] };",
          "    ",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let parser = Parser {",
          "        pos: Cell::new(0),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_instance = ParserI::new(&parser, \"some_pattern\");",
          "",
          "    let next_kind = ast::ClassSetBinaryOpKind::SymmetricDifference;",
          "    let next_union = ClassSetUnion {",
          "        span: Span { start: 2, end: 3 },",
          "        items: vec![ClassSetItem::Literal(Literal::new('c'))],",
          "    };",
          "",
          "    parser_instance.push_class_op(next_kind, next_union);",
          "    let parser = Parser { pos: Cell::new(0), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), };",
          "    let parser_instance = ParserI::new(&parser, \"some_pattern\");",
          "    ",
          "    let next_kind = ast::ClassSetBinaryOpKind::SymmetricDifference;",
          "    let next_union = ClassSetUnion { span: Span { start: 2, end: 3 }, items: vec![ClassSetItem::Literal(Literal::new('c'))], };",
          "    ",
          "    let result = parser_instance.push_class_op(next_kind, next_union);",
          "    let expected = ast::ClassSetUnion { span: parser_instance.span(), items: vec![] };",
          "    ",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = Parser {",
          "        pos: Cell::new(0),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![",
          "            ClassState::Open {",
          "                union: ClassSetUnion {",
          "                    span: Span { start: 0, end: 1 },",
          "                    items: vec![ClassSetItem::Literal(Literal::new('x'))],",
          "                },",
          "                set: ClassBracketed::new(),",
          "            },",
          "        ]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_instance = ParserI::new(&parser, \"some_pattern\");",
          "",
          "    let next_kind = ast::ClassSetBinaryOpKind::Intersection;",
          "    let next_union = ClassSetUnion {",
          "        span: Span { start: 1, end: 2 },",
          "        items: vec![ClassSetItem::Literal(Literal::new('y'))],",
          "    };",
          "",
          "    parser_instance.push_class_op(next_kind, next_union);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser_instance.parser().stack_class.borrow().len(), 2);",
          "    let result = parser_instance.push_class_op(next_kind, next_union);",
          "    assert_eq!(result.span, parser_instance.span());",
          "    assert!(result.items.is_empty());",
          "    assert_eq!(parser_instance.parser().stack_class.borrow()[1], ClassState::Op { kind: next_kind, lhs: new_lhs });",
          "    assert_eq!(parser_instance.parser().stack_class.borrow()[0], ClassState::Open { union: expected_union, set: expected_class });"
        ],
        "code": [
          "{",
          "    let parser = Parser {",
          "        pos: Cell::new(0),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![",
          "            ClassState::Open {",
          "                union: ClassSetUnion {",
          "                    span: Span { start: 0, end: 1 },",
          "                    items: vec![ClassSetItem::Literal(Literal::new('x'))],",
          "                },",
          "                set: ClassBracketed::new(),",
          "            },",
          "        ]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_instance = ParserI::new(&parser, \"some_pattern\");",
          "",
          "    let next_kind = ast::ClassSetBinaryOpKind::Intersection;",
          "    let next_union = ClassSetUnion {",
          "        span: Span { start: 1, end: 2 },",
          "        items: vec![ClassSetItem::Literal(Literal::new('y'))],",
          "    };",
          "",
          "    parser_instance.push_class_op(next_kind, next_union);",
          "    assert_eq!(parser_instance.parser().stack_class.borrow().len(), 2);",
          "    let result = parser_instance.push_class_op(next_kind, next_union);",
          "    assert_eq!(result.span, parser_instance.span());",
          "    assert!(result.items.is_empty());",
          "    assert_eq!(parser_instance.parser().stack_class.borrow()[1], ClassState::Op { kind: next_kind, lhs: new_lhs });",
          "    assert_eq!(parser_instance.parser().stack_class.borrow()[0], ClassState::Open { union: expected_union, set: expected_class });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]