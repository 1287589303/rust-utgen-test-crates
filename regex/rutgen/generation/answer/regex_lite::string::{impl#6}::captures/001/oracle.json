[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"'([^']+)'\\s+\\((\\d{4})\\)\").unwrap();",
          "    let hay = \"Not my favorite movie: 'Citizen Kane' (1941).\";",
          "    let _caps = re.captures(hay);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_caps.is_some(), true);",
          "    assert_eq!(_caps.unwrap().get(0).unwrap().as_str(), \"'Citizen Kane' (1941)\");",
          "    assert_eq!(_caps.unwrap().get(1).unwrap().as_str(), \"Citizen Kane\");",
          "    assert_eq!(_caps.unwrap().get(2).unwrap().as_str(), \"1941\");"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"'([^']+)'\\s+\\((\\d{4})\\)\").unwrap();",
          "    let hay = \"Not my favorite movie: 'Citizen Kane' (1941).\";",
          "    let _caps = re.captures(hay);",
          "    assert_eq!(_caps.is_some(), true);",
          "    assert_eq!(_caps.unwrap().get(0).unwrap().as_str(), \"'Citizen Kane' (1941)\");",
          "    assert_eq!(_caps.unwrap().get(1).unwrap().as_str(), \"Citizen Kane\");",
          "    assert_eq!(_caps.unwrap().get(2).unwrap().as_str(), \"1941\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"'([^']+)'\\s+\\((\\d{4})\\)\").unwrap();",
          "    let hay = \"Just some random text.\";",
          "    let _caps = re.captures(hay);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(caps, None);",
          "    let hay = \"Not my favorite movie: 'Citizen Kane' (1941).\";",
          "    let _caps = re.captures(hay).unwrap();",
          "    assert_eq!(caps.get(0).unwrap().as_str(), \"'Citizen Kane' (1941)\");",
          "    assert_eq!(caps.get(1).unwrap().as_str(), \"Citizen Kane\");",
          "    assert_eq!(caps.get(2).unwrap().as_str(), \"1941\");",
          "    let hay_named = \"Not my favorite movie: 'Citizen Kane' (1941).\";",
          "    let _caps_named = re.captures(hay_named).unwrap();",
          "    assert_eq!(caps.name(\"title\").unwrap().as_str(), \"Citizen Kane\");",
          "    assert_eq!(caps.name(\"year\").unwrap().as_str(), \"1941\");",
          "    assert_eq!(&caps[0], \"'Citizen Kane' (1941)\");",
          "    assert_eq!(&caps[\"title\"], \"Citizen Kane\");",
          "    assert_eq!(&caps[\"year\"], \"1941\");"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"'([^']+)'\\s+\\((\\d{4})\\)\").unwrap();",
          "    let hay = \"Just some random text.\";",
          "    let _caps = re.captures(hay);",
          "    assert_eq!(caps, None);",
          "    let hay = \"Not my favorite movie: 'Citizen Kane' (1941).\";",
          "    let _caps = re.captures(hay).unwrap();",
          "    assert_eq!(caps.get(0).unwrap().as_str(), \"'Citizen Kane' (1941)\");",
          "    assert_eq!(caps.get(1).unwrap().as_str(), \"Citizen Kane\");",
          "    assert_eq!(caps.get(2).unwrap().as_str(), \"1941\");",
          "    let hay_named = \"Not my favorite movie: 'Citizen Kane' (1941).\";",
          "    let _caps_named = re.captures(hay_named).unwrap();",
          "    assert_eq!(caps.name(\"title\").unwrap().as_str(), \"Citizen Kane\");",
          "    assert_eq!(caps.name(\"year\").unwrap().as_str(), \"1941\");",
          "    assert_eq!(&caps[0], \"'Citizen Kane' (1941)\");",
          "    assert_eq!(&caps[\"title\"], \"Citizen Kane\");",
          "    assert_eq!(&caps[\"year\"], \"1941\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"'([^']+)'\\s+\\((\\d{4})\\)\").unwrap();",
          "    let hay = \"\";",
          "    let _caps = re.captures(hay);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_caps, None);",
          "    let hay = \"Not my favorite movie: 'Citizen Kane' (1941).\";",
          "    let _caps = re.captures(hay).unwrap();",
          "    assert_eq!(_caps.get(0).unwrap().as_str(), \"'Citizen Kane' (1941)\");",
          "    assert_eq!(_caps.get(1).unwrap().as_str(), \"Citizen Kane\");",
          "    assert_eq!(_caps.get(2).unwrap().as_str(), \"1941\");",
          "    let hay_named = \"Not my favorite movie: 'Citizen Kane' (1941).\";",
          "    let _caps_named = re.captures(hay_named).unwrap();",
          "    assert_eq!(_caps_named.name(\"title\").unwrap().as_str(), \"Citizen Kane\");",
          "    assert_eq!(_caps_named.name(\"year\").unwrap().as_str(), \"1941\");",
          "    let empty_string = \"\";",
          "    let _empty_caps = re.captures(empty_string);",
          "    assert_eq!(_empty_caps, None);",
          "    let hay_invalid = \"Invalid Movie\";",
          "    let _invalid_caps = re.captures(hay_invalid);",
          "    assert_eq!(_invalid_caps, None);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"'([^']+)'\\s+\\((\\d{4})\\)\").unwrap();",
          "    let hay = \"\";",
          "    let _caps = re.captures(hay);",
          "    assert_eq!(_caps, None);",
          "    let hay = \"Not my favorite movie: 'Citizen Kane' (1941).\";",
          "    let _caps = re.captures(hay).unwrap();",
          "    assert_eq!(_caps.get(0).unwrap().as_str(), \"'Citizen Kane' (1941)\");",
          "    assert_eq!(_caps.get(1).unwrap().as_str(), \"Citizen Kane\");",
          "    assert_eq!(_caps.get(2).unwrap().as_str(), \"1941\");",
          "    let hay_named = \"Not my favorite movie: 'Citizen Kane' (1941).\";",
          "    let _caps_named = re.captures(hay_named).unwrap();",
          "    assert_eq!(_caps_named.name(\"title\").unwrap().as_str(), \"Citizen Kane\");",
          "    assert_eq!(_caps_named.name(\"year\").unwrap().as_str(), \"1941\");",
          "    let empty_string = \"\";",
          "    let _empty_caps = re.captures(empty_string);",
          "    assert_eq!(_empty_caps, None);",
          "    let hay_invalid = \"Invalid Movie\";",
          "    let _invalid_caps = re.captures(hay_invalid);",
          "    assert_eq!(_invalid_caps, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(\"\").unwrap();",
          "    let hay = \"Some haystack text.\";",
          "    let _caps = re.captures(hay);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(re.captures(\"Some haystack text.\"), None);",
          "    ",
          "    let re = Regex::new(r\"'([^']+)'\\s+\\((\\d{4})\\)\").unwrap();",
          "    let hay = \"Not my favorite movie: 'Citizen Kane' (1941).\";",
          "    let caps = re.captures(hay).unwrap();",
          "    assert_eq!(caps.get(0).unwrap().as_str(), \"'Citizen Kane' (1941)\");",
          "    assert_eq!(caps.get(1).unwrap().as_str(), \"Citizen Kane\");",
          "    assert_eq!(caps.get(2).unwrap().as_str(), \"1941\");",
          "    ",
          "    let re_named = Regex::new(r\"'(?<title>[^']+)'\\s+\\((?<year>\\d{4})\\)\").unwrap();",
          "    let caps_named = re_named.captures(hay).unwrap();",
          "    assert_eq!(caps_named.get(0).unwrap().as_str(), \"'Citizen Kane' (1941)\");",
          "    assert_eq!(caps_named.name(\"title\").unwrap().as_str(), \"Citizen Kane\");",
          "    assert_eq!(caps_named.name(\"year\").unwrap().as_str(), \"1941\");",
          "    ",
          "    let re_empty = Regex::new(r\"(\\d+)\").unwrap();",
          "    let caps_empty = re_empty.captures(\"No numbers here.\").unwrap();",
          "    assert_eq!(caps_empty.get(0).unwrap().as_str(), \"No numbers here.\");"
        ],
        "code": [
          "{",
          "    let re = Regex::new(\"\").unwrap();",
          "    let hay = \"Some haystack text.\";",
          "    let _caps = re.captures(hay);",
          "    assert_eq!(re.captures(\"Some haystack text.\"), None);",
          "    ",
          "    let re = Regex::new(r\"'([^']+)'\\s+\\((\\d{4})\\)\").unwrap();",
          "    let hay = \"Not my favorite movie: 'Citizen Kane' (1941).\";",
          "    let caps = re.captures(hay).unwrap();",
          "    assert_eq!(caps.get(0).unwrap().as_str(), \"'Citizen Kane' (1941)\");",
          "    assert_eq!(caps.get(1).unwrap().as_str(), \"Citizen Kane\");",
          "    assert_eq!(caps.get(2).unwrap().as_str(), \"1941\");",
          "    ",
          "    let re_named = Regex::new(r\"'(?<title>[^']+)'\\s+\\((?<year>\\d{4})\\)\").unwrap();",
          "    let caps_named = re_named.captures(hay).unwrap();",
          "    assert_eq!(caps_named.get(0).unwrap().as_str(), \"'Citizen Kane' (1941)\");",
          "    assert_eq!(caps_named.name(\"title\").unwrap().as_str(), \"Citizen Kane\");",
          "    assert_eq!(caps_named.name(\"year\").unwrap().as_str(), \"1941\");",
          "    ",
          "    let re_empty = Regex::new(r\"(\\d+)\").unwrap();",
          "    let caps_empty = re_empty.captures(\"No numbers here.\").unwrap();",
          "    assert_eq!(caps_empty.get(0).unwrap().as_str(), \"No numbers here.\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"'([^']+)\\s+\\(\\d{4}\").unwrap(); // missing closing parenthesis",
          "    let hay = \"Some text for testing.\";",
          "    let _caps = re.captures(hay);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(re.captures(hay), None);",
          "    let re2 = Regex::new(r\"'([^']+)'\\s+\\((\\d{4})\\)\").unwrap();",
          "    let hay2 = \"Not my favorite movie: 'Citizen Kane' (1941).\";",
          "    let caps2 = re2.captures(hay2).unwrap();",
          "    assert_eq!(caps2.get(0).unwrap().as_str(), \"'Citizen Kane' (1941)\");",
          "    assert_eq!(caps2.get(1).unwrap().as_str(), \"Citizen Kane\");",
          "    assert_eq!(caps2.get(2).unwrap().as_str(), \"1941\");",
          "    let re3 = Regex::new(r\"'(?<title>[^']+)'\\s+\\((?<year>\\d{4})\\)\").unwrap();",
          "    let caps3 = re3.captures(hay2).unwrap();",
          "    assert_eq!(caps3.name(\"title\").unwrap().as_str(), \"Citizen Kane\");",
          "    assert_eq!(caps3.name(\"year\").unwrap().as_str(), \"1941\");",
          "    assert_eq!(&caps3[0], \"'Citizen Kane' (1941)\");",
          "    assert_eq!(&caps3[\"title\"], \"Citizen Kane\");",
          "    assert_eq!(&caps3[\"year\"], \"1941\");",
          "    let re4 = Regex::new(r\"'([^']+)'\\s+\\((\\d{4})\\)\").unwrap();",
          "    let (full, [title, year]) = re4.captures(hay2).unwrap().extract();",
          "    assert_eq!(full, \"'Citizen Kane' (1941)\");",
          "    assert_eq!(title, \"Citizen Kane\");",
          "    assert_eq!(year, \"1941\");"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"'([^']+)\\s+\\(\\d{4}\").unwrap(); // missing closing parenthesis",
          "    let hay = \"Some text for testing.\";",
          "    let _caps = re.captures(hay);",
          "    assert_eq!(re.captures(hay), None);",
          "    let re2 = Regex::new(r\"'([^']+)'\\s+\\((\\d{4})\\)\").unwrap();",
          "    let hay2 = \"Not my favorite movie: 'Citizen Kane' (1941).\";",
          "    let caps2 = re2.captures(hay2).unwrap();",
          "    assert_eq!(caps2.get(0).unwrap().as_str(), \"'Citizen Kane' (1941)\");",
          "    assert_eq!(caps2.get(1).unwrap().as_str(), \"Citizen Kane\");",
          "    assert_eq!(caps2.get(2).unwrap().as_str(), \"1941\");",
          "    let re3 = Regex::new(r\"'(?<title>[^']+)'\\s+\\((?<year>\\d{4})\\)\").unwrap();",
          "    let caps3 = re3.captures(hay2).unwrap();",
          "    assert_eq!(caps3.name(\"title\").unwrap().as_str(), \"Citizen Kane\");",
          "    assert_eq!(caps3.name(\"year\").unwrap().as_str(), \"1941\");",
          "    assert_eq!(&caps3[0], \"'Citizen Kane' (1941)\");",
          "    assert_eq!(&caps3[\"title\"], \"Citizen Kane\");",
          "    assert_eq!(&caps3[\"year\"], \"1941\");",
          "    let re4 = Regex::new(r\"'([^']+)'\\s+\\((\\d{4})\\)\").unwrap();",
          "    let (full, [title, year]) = re4.captures(hay2).unwrap().extract();",
          "    assert_eq!(full, \"'Citizen Kane' (1941)\");",
          "    assert_eq!(title, \"Citizen Kane\");",
          "    assert_eq!(year, \"1941\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"'(?<title>[^']+)'\\s+\\((?<year>\\d{4})\\)\").unwrap();",
          "    let hay = \"Not my favorite movie: 'Citizen Kane' (1941).\";",
          "    let _caps = re.captures(hay);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_caps.is_some(), true);",
          "    let caps = _caps.unwrap();",
          "    assert_eq!(caps.get(0).unwrap().as_str(), \"'Citizen Kane' (1941)\");",
          "    assert_eq!(caps.name(\"title\").unwrap().as_str(), \"Citizen Kane\");",
          "    assert_eq!(caps.name(\"year\").unwrap().as_str(), \"1941\");",
          "    assert_eq!(&caps[0], \"'Citizen Kane' (1941)\");",
          "    assert_eq!(&caps[\"title\"], \"Citizen Kane\");",
          "    assert_eq!(&caps[\"year\"], \"1941\");"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"'(?<title>[^']+)'\\s+\\((?<year>\\d{4})\\)\").unwrap();",
          "    let hay = \"Not my favorite movie: 'Citizen Kane' (1941).\";",
          "    let _caps = re.captures(hay);",
          "    assert_eq!(_caps.is_some(), true);",
          "    let caps = _caps.unwrap();",
          "    assert_eq!(caps.get(0).unwrap().as_str(), \"'Citizen Kane' (1941)\");",
          "    assert_eq!(caps.name(\"title\").unwrap().as_str(), \"Citizen Kane\");",
          "    assert_eq!(caps.name(\"year\").unwrap().as_str(), \"1941\");",
          "    assert_eq!(&caps[0], \"'Citizen Kane' (1941)\");",
          "    assert_eq!(&caps[\"title\"], \"Citizen Kane\");",
          "    assert_eq!(&caps[\"year\"], \"1941\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"'([^']+)'\\s+\\((\\d{4})\\)\").unwrap();",
          "    let hay = \"   \";",
          "    let _caps = re.captures(hay);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_caps, None);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"'([^']+)'\\s+\\((\\d{4})\\)\").unwrap();",
          "    let hay = \"   \";",
          "    let _caps = re.captures(hay);",
          "    assert_eq!(_caps, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"'([^']+)'\\s+\\((\\d{4})\\)\").unwrap();",
          "    let hay = \"x\".repeat(1_000); // long string near maximum length limits",
          "    let _caps = re.captures(hay.as_str());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(re.captures(\"Not my favorite movie: 'Citizen Kane' (1941).\").unwrap().get(0).unwrap().as_str(), \"'Citizen Kane' (1941)\");",
          "    assert_eq!(re.captures(\"Not my favorite movie: 'Citizen Kane' (1941).\").unwrap().get(1).unwrap().as_str(), \"Citizen Kane\");",
          "    assert_eq!(re.captures(\"Not my favorite movie: 'Citizen Kane' (1941).\").unwrap().get(2).unwrap().as_str(), \"1941\");",
          "    assert!(re.captures(\"No match here.\").is_none());",
          "    assert_eq!(re.captures(\"Test: 'Movie' (2022)\").unwrap().get(0).unwrap().as_str(), \"'Movie' (2022)\");",
          "    assert_eq!(re.captures(\"Test: 'Movie' (2022)\").unwrap().get(1).unwrap().as_str(), \"Movie\");",
          "    assert_eq!(re.captures(\"Test: 'Movie' (2022)\").unwrap().get(2).unwrap().as_str(), \"2022\");",
          "    assert!(re.captures(\"\").is_none());",
          "    assert!(re.captures(\"Unmatched single quote ' \").is_none());",
          "    assert!(re.captures(\"'Just a year' (2020)\").unwrap().get(0).unwrap().as_str(), \"'Just a year' (2020)\");",
          "    assert_eq!(re.captures(\"'Just a year' (2020)\").unwrap().get(1).unwrap().as_str(), \"Just a year\");",
          "    assert_eq!(re.captures(\"'Just a year' (2020)\").unwrap().get(2).unwrap().as_str(), \"2020\");",
          "    assert!(re.captures(\"12345\").is_none());",
          "    assert!(re.captures(\"Random text without match\").is_none());"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"'([^']+)'\\s+\\((\\d{4})\\)\").unwrap();",
          "    let hay = \"x\".repeat(1_000); // long string near maximum length limits",
          "    let _caps = re.captures(hay.as_str());",
          "    assert_eq!(re.captures(\"Not my favorite movie: 'Citizen Kane' (1941).\").unwrap().get(0).unwrap().as_str(), \"'Citizen Kane' (1941)\");",
          "    assert_eq!(re.captures(\"Not my favorite movie: 'Citizen Kane' (1941).\").unwrap().get(1).unwrap().as_str(), \"Citizen Kane\");",
          "    assert_eq!(re.captures(\"Not my favorite movie: 'Citizen Kane' (1941).\").unwrap().get(2).unwrap().as_str(), \"1941\");",
          "    assert!(re.captures(\"No match here.\").is_none());",
          "    assert_eq!(re.captures(\"Test: 'Movie' (2022)\").unwrap().get(0).unwrap().as_str(), \"'Movie' (2022)\");",
          "    assert_eq!(re.captures(\"Test: 'Movie' (2022)\").unwrap().get(1).unwrap().as_str(), \"Movie\");",
          "    assert_eq!(re.captures(\"Test: 'Movie' (2022)\").unwrap().get(2).unwrap().as_str(), \"2022\");",
          "    assert!(re.captures(\"\").is_none());",
          "    assert!(re.captures(\"Unmatched single quote ' \").is_none());",
          "    assert!(re.captures(\"'Just a year' (2020)\").unwrap().get(0).unwrap().as_str(), \"'Just a year' (2020)\");",
          "    assert_eq!(re.captures(\"'Just a year' (2020)\").unwrap().get(1).unwrap().as_str(), \"Just a year\");",
          "    assert_eq!(re.captures(\"'Just a year' (2020)\").unwrap().get(2).unwrap().as_str(), \"2020\");",
          "    assert!(re.captures(\"12345\").is_none());",
          "    assert!(re.captures(\"Random text without match\").is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]