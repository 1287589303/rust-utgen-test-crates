[
  {
    "uses": [
      "use regex_syntax::hir::Literal;",
      "use regex_syntax::hir::Hir;",
      "use regex_syntax::hir::HirKind;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use regex_syntax::hir::{Hir, HirKind, Literal};",
          "",
          "    let config = Config::new().match_kind(MatchKind::LeftmostFirst);",
          "    let props = vec![",
          "        hir::Properties::default()",
          "            .look_set(Vec::new())",
          "            .explicit_captures_len(0)",
          "            .is_alternation_literal(false),",
          "    ];",
          "",
          "    let hir = Hir::Alternation(vec![]);",
          "    let info = RegexInfo(Arc::new(RegexInfoI { config, props }));",
          "    let hirs = vec![&hir];",
          "",
          "    let result = alternation_literals(&info, &hirs);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    use regex_syntax::hir::{Hir, HirKind, Literal};",
          "",
          "    let config = Config::new().match_kind(MatchKind::LeftmostFirst);",
          "    let props = vec![",
          "        hir::Properties::default()",
          "            .look_set(Vec::new())",
          "            .explicit_captures_len(0)",
          "            .is_alternation_literal(false),",
          "    ];",
          "",
          "    let hir = Hir::Alternation(vec![]);",
          "    let info = RegexInfo(Arc::new(RegexInfoI { config, props }));",
          "    let hirs = vec![&hir];",
          "",
          "    let result = alternation_literals(&info, &hirs);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use regex_syntax::hir::{Hir, HirKind, Literal};",
          "",
          "    let config = Config::new().match_kind(MatchKind::LeftmostFirst);",
          "    let props = vec![",
          "        hir::Properties::default()",
          "            .look_set(Vec::new())",
          "            .explicit_captures_len(0)",
          "            .is_alternation_literal(false),",
          "    ];",
          "",
          "    let hir = Hir::Concat(vec![]);",
          "    let info = RegexInfo(Arc::new(RegexInfoI { config, props }));",
          "    let hirs = vec![&hir];",
          "",
          "    let result = alternation_literals(&info, &hirs);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    use regex_syntax::hir::{Hir, HirKind, Literal};",
          "",
          "    let config = Config::new().match_kind(MatchKind::LeftmostFirst);",
          "    let props = vec![",
          "        hir::Properties::default()",
          "            .look_set(Vec::new())",
          "            .explicit_captures_len(0)",
          "            .is_alternation_literal(false),",
          "    ];",
          "",
          "    let hir = Hir::Concat(vec![]);",
          "    let info = RegexInfo(Arc::new(RegexInfoI { config, props }));",
          "    let hirs = vec![&hir];",
          "",
          "    let result = alternation_literals(&info, &hirs);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]