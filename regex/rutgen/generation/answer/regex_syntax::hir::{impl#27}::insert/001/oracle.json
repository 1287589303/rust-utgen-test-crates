[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let initial_set = LookSet { bits: 0x0000 };",
          "    let result_set = initial_set.insert(Look::Start);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result_set.bits, initial_set.bits | Look::Start.as_repr());",
          "    assert_eq!(result_set.bits, 0x0001);",
          "    assert!(result_set.contains(Look::Start));",
          "    assert_eq!(result_set.len(), 1);",
          "    assert!(!result_set.is_empty());",
          "    assert!(!result_set.contains(Look::End));"
        ],
        "code": [
          "{",
          "    let initial_set = LookSet { bits: 0x0000 };",
          "    let result_set = initial_set.insert(Look::Start);",
          "    assert_eq!(result_set.bits, initial_set.bits | Look::Start.as_repr());",
          "    assert_eq!(result_set.bits, 0x0001);",
          "    assert!(result_set.contains(Look::Start));",
          "    assert_eq!(result_set.len(), 1);",
          "    assert!(!result_set.is_empty());",
          "    assert!(!result_set.contains(Look::End));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let initial_set = LookSet { bits: 0x0000 };",
          "    let result_set = initial_set.insert(Look::End);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result_set.bits, 0x0002);",
          "    assert_eq!(result_set.len(), 1);",
          "    assert!(!result_set.is_empty());",
          "    assert!(result_set.contains(Look::End));",
          "    assert!(!result_set.contains(Look::Start));",
          "    assert!(!result_set.contains(Look::StartLF));",
          "    assert_eq!(initial_set.bits, 0x0000);",
          "    assert_eq!(result_set.insert(Look::End).bits, 0x0002);",
          "    assert_eq!(result_set.insert(Look::Start).bits, 0x0003);"
        ],
        "code": [
          "{",
          "    let initial_set = LookSet { bits: 0x0000 };",
          "    let result_set = initial_set.insert(Look::End);",
          "    assert_eq!(result_set.bits, 0x0002);",
          "    assert_eq!(result_set.len(), 1);",
          "    assert!(!result_set.is_empty());",
          "    assert!(result_set.contains(Look::End));",
          "    assert!(!result_set.contains(Look::Start));",
          "    assert!(!result_set.contains(Look::StartLF));",
          "    assert_eq!(initial_set.bits, 0x0000);",
          "    assert_eq!(result_set.insert(Look::End).bits, 0x0002);",
          "    assert_eq!(result_set.insert(Look::Start).bits, 0x0003);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let initial_set = LookSet { bits: 0x0000 };",
          "    let result_set = initial_set.insert(Look::StartLF);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result_set.bits, 0b0000_0100);",
          "    assert_eq!(result_set.len(), 1);",
          "    assert!(!result_set.is_empty());",
          "    assert!(result_set.contains(Look::StartLF));",
          "    assert!(!result_set.contains(Look::End));",
          "    assert!(!result_set.contains_anchor());",
          "    assert!(!result_set.contains_word());",
          "    assert!(!result_set.contains_word_unicode());",
          "    assert!(!result_set.contains_word_ascii());"
        ],
        "code": [
          "{",
          "    let initial_set = LookSet { bits: 0x0000 };",
          "    let result_set = initial_set.insert(Look::StartLF);",
          "    assert_eq!(result_set.bits, 0b0000_0100);",
          "    assert_eq!(result_set.len(), 1);",
          "    assert!(!result_set.is_empty());",
          "    assert!(result_set.contains(Look::StartLF));",
          "    assert!(!result_set.contains(Look::End));",
          "    assert!(!result_set.contains_anchor());",
          "    assert!(!result_set.contains_word());",
          "    assert!(!result_set.contains_word_unicode());",
          "    assert!(!result_set.contains_word_ascii());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let initial_set = LookSet { bits: 0x0000 };",
          "    let result_set = initial_set.insert(Look::EndLF);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result_set.bits, 0x0008);"
        ],
        "code": [
          "{",
          "    let initial_set = LookSet { bits: 0x0000 };",
          "    let result_set = initial_set.insert(Look::EndLF);",
          "    assert_eq!(result_set.bits, 0x0008);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let initial_set = LookSet { bits: 0x0000 };",
          "    let result_set = initial_set.insert(Look::WordAscii);",
          "}"
        ],
        "oracle": [
          "    let initial_set = LookSet { bits: 0x0000 };",
          "    let expected_set = LookSet { bits: 0x0040 };",
          "    assert_eq!(result_set, expected_set);",
          "    let initial_set_non_empty = LookSet { bits: 0x0040 };",
          "    let result_set_non_empty = initial_set_non_empty.insert(Look::WordAscii);",
          "    assert_eq!(result_set_non_empty, initial_set_non_empty);",
          "    let additional_insert = Look::End;",
          "    let expected_set_with_end = LookSet { bits: 0x0042 };",
          "    let result_set_with_end = initial_set.insert(additional_insert);",
          "    assert_eq!(result_set_with_end, expected_set_with_end);",
          "    let another_initial_set = LookSet { bits: 0x0002 };",
          "    let result_with_start = another_initial_set.insert(Look::Start);",
          "    let expected_with_start = LookSet { bits: 0x0003 };",
          "    assert_eq!(result_with_start, expected_with_start);"
        ],
        "code": [
          "{",
          "    let initial_set = LookSet { bits: 0x0000 };",
          "    let result_set = initial_set.insert(Look::WordAscii);",
          "    let initial_set = LookSet { bits: 0x0000 };",
          "    let expected_set = LookSet { bits: 0x0040 };",
          "    assert_eq!(result_set, expected_set);",
          "    let initial_set_non_empty = LookSet { bits: 0x0040 };",
          "    let result_set_non_empty = initial_set_non_empty.insert(Look::WordAscii);",
          "    assert_eq!(result_set_non_empty, initial_set_non_empty);",
          "    let additional_insert = Look::End;",
          "    let expected_set_with_end = LookSet { bits: 0x0042 };",
          "    let result_set_with_end = initial_set.insert(additional_insert);",
          "    assert_eq!(result_set_with_end, expected_set_with_end);",
          "    let another_initial_set = LookSet { bits: 0x0002 };",
          "    let result_with_start = another_initial_set.insert(Look::Start);",
          "    let expected_with_start = LookSet { bits: 0x0003 };",
          "    assert_eq!(result_with_start, expected_with_start);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let initial_set = LookSet { bits: 0x0000 };",
          "    let intermediate_set = initial_set.insert(Look::Start);",
          "    let result_set = intermediate_set.insert(Look::End);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(initial_set.bits, 0x0000);",
          "    assert_eq!(intermediate_set.bits, Look::Start.as_repr());",
          "    assert_eq!(result_set.bits, initial_set.bits | Look::Start.as_repr() | Look::End.as_repr());"
        ],
        "code": [
          "{",
          "    let initial_set = LookSet { bits: 0x0000 };",
          "    let intermediate_set = initial_set.insert(Look::Start);",
          "    let result_set = intermediate_set.insert(Look::End);",
          "    assert_eq!(initial_set.bits, 0x0000);",
          "    assert_eq!(intermediate_set.bits, Look::Start.as_repr());",
          "    assert_eq!(result_set.bits, initial_set.bits | Look::Start.as_repr() | Look::End.as_repr());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let initial_set = LookSet { bits: Look::Start.as_repr() };",
          "    let result_set = initial_set.insert(Look::Start);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result_set.bits, initial_set.bits);",
          "    assert_eq!(result_set.bits, Look::Start.as_repr());",
          "    assert_eq!(result_set.bits, initial_set.insert(Look::Start).bits);"
        ],
        "code": [
          "{",
          "    let initial_set = LookSet { bits: Look::Start.as_repr() };",
          "    let result_set = initial_set.insert(Look::Start);",
          "    assert_eq!(result_set.bits, initial_set.bits);",
          "    assert_eq!(result_set.bits, Look::Start.as_repr());",
          "    assert_eq!(result_set.bits, initial_set.insert(Look::Start).bits);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]