[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Input::new(\"test string\".as_bytes());",
          "    let searcher = Searcher {",
          "        input,",
          "        last_match_end: None,",
          "    };",
          "    let finder = |_: &Match| {};",
          "    let try_half_matches_iter = TryHalfMatchesIter { it: searcher, finder };",
          "    let _ = core::fmt::Debug::fmt(&try_half_matches_iter, &mut core::fmt::Formatter::new());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(try_half_matches_iter.it.input.as_ref(), \"test string\".as_bytes());",
          "    assert_eq!(try_half_matches_iter.it.last_match_end, None);",
          "    assert_eq!(try_half_matches_iter.finder as *const _, finder as *const _);",
          "    assert!(try_half_matches_iter.fmt(f).is_ok());"
        ],
        "code": [
          "{",
          "    let input = Input::new(\"test string\".as_bytes());",
          "    let searcher = Searcher {",
          "        input,",
          "        last_match_end: None,",
          "    };",
          "    let finder = |_: &Match| {};",
          "    let try_half_matches_iter = TryHalfMatchesIter { it: searcher, finder };",
          "    let _ = core::fmt::Debug::fmt(&try_half_matches_iter, &mut core::fmt::Formatter::new());",
          "    assert_eq!(try_half_matches_iter.it.input.as_ref(), \"test string\".as_bytes());",
          "    assert_eq!(try_half_matches_iter.it.last_match_end, None);",
          "    assert_eq!(try_half_matches_iter.finder as *const _, finder as *const _);",
          "    assert!(try_half_matches_iter.fmt(f).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Input::new(\"example\".as_bytes());",
          "    let searcher = Searcher {",
          "        input,",
          "        last_match_end: Some(0),",
          "    };",
          "    let finder = |_: &Match| {};",
          "    let try_half_matches_iter = TryHalfMatchesIter { it: searcher, finder };",
          "    let _ = core::fmt::Debug::fmt(&try_half_matches_iter, &mut core::fmt::Formatter::new());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{:?}\", try_half_matches_iter), \"TryHalfMatchesIter { it: Searcher { input: Input { data: [101, 120, 97, 109, 112, 108, 101] }, last_match_end: Some(0) }, finder: <closure> }\");",
          "    assert!(core::fmt::Debug::fmt(&try_half_matches_iter, &mut core::fmt::Formatter::new()).is_ok());",
          "    assert!(try_half_matches_iter.it.last_match_end.is_some());",
          "    assert_eq!(try_half_matches_iter.it.input.data, b\"example\");"
        ],
        "code": [
          "{",
          "    let input = Input::new(\"example\".as_bytes());",
          "    let searcher = Searcher {",
          "        input,",
          "        last_match_end: Some(0),",
          "    };",
          "    let finder = |_: &Match| {};",
          "    let try_half_matches_iter = TryHalfMatchesIter { it: searcher, finder };",
          "    let _ = core::fmt::Debug::fmt(&try_half_matches_iter, &mut core::fmt::Formatter::new());",
          "    assert_eq!(format!(\"{:?}\", try_half_matches_iter), \"TryHalfMatchesIter { it: Searcher { input: Input { data: [101, 120, 97, 109, 112, 108, 101] }, last_match_end: Some(0) }, finder: <closure> }\");",
          "    assert!(core::fmt::Debug::fmt(&try_half_matches_iter, &mut core::fmt::Formatter::new()).is_ok());",
          "    assert!(try_half_matches_iter.it.last_match_end.is_some());",
          "    assert_eq!(try_half_matches_iter.it.input.data, b\"example\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Input::new(\"longer input\".as_bytes());",
          "    let searcher = Searcher {",
          "        input,",
          "        last_match_end: Some(12),  // length of \"longer input\"",
          "    };",
          "    let finder = |_: &Match| {};",
          "    let try_half_matches_iter = TryHalfMatchesIter { it: searcher, finder };",
          "    let _ = core::fmt::Debug::fmt(&try_half_matches_iter, &mut core::fmt::Formatter::new());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(try_half_matches_iter.it.input.as_str(), \"longer input\");",
          "    assert_eq!(try_half_matches_iter.it.last_match_end, Some(12));",
          "    assert_eq!(try_half_matches_iter.finder as *const _, finder as *const _);",
          "    assert!(try_half_matches_iter.fmt(&mut core::fmt::Formatter::new()).is_ok());",
          "    assert!(core::fmt::Debug::fmt(&try_half_matches_iter, &mut core::fmt::Formatter::new()).is_ok());"
        ],
        "code": [
          "{",
          "    let input = Input::new(\"longer input\".as_bytes());",
          "    let searcher = Searcher {",
          "        input,",
          "        last_match_end: Some(12),  // length of \"longer input\"",
          "    };",
          "    let finder = |_: &Match| {};",
          "    let try_half_matches_iter = TryHalfMatchesIter { it: searcher, finder };",
          "    let _ = core::fmt::Debug::fmt(&try_half_matches_iter, &mut core::fmt::Formatter::new());",
          "    assert_eq!(try_half_matches_iter.it.input.as_str(), \"longer input\");",
          "    assert_eq!(try_half_matches_iter.it.last_match_end, Some(12));",
          "    assert_eq!(try_half_matches_iter.finder as *const _, finder as *const _);",
          "    assert!(try_half_matches_iter.fmt(&mut core::fmt::Formatter::new()).is_ok());",
          "    assert!(core::fmt::Debug::fmt(&try_half_matches_iter, &mut core::fmt::Formatter::new()).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Input::new(\"boundary test\".as_bytes());",
          "    let searcher = Searcher {",
          "        input,",
          "        last_match_end: Some(20),  // out of bounds",
          "    };",
          "    let finder = |_: &Match| {};",
          "    let try_half_matches_iter = TryHalfMatchesIter { it: searcher, finder };",
          "    let _ = core::fmt::Debug::fmt(&try_half_matches_iter, &mut core::fmt::Formatter::new());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(try_half_matches_iter.it.input.get_bytes(), b\"boundary test\");",
          "    assert_eq!(try_half_matches_iter.it.last_match_end, Some(20));",
          "    assert_eq!(try_half_matches_iter.fmt(&mut core::fmt::Formatter::new()).is_ok(), true);",
          "    assert!(format!(\"{:?}\", try_half_matches_iter).contains(\"TryHalfMatchesIter\"));",
          "    assert!(format!(\"{:?}\", try_half_matches_iter).contains(\"it:\"));",
          "    assert!(format!(\"{:?}\", try_half_matches_iter).contains(\"finder: <closure>\"));"
        ],
        "code": [
          "{",
          "    let input = Input::new(\"boundary test\".as_bytes());",
          "    let searcher = Searcher {",
          "        input,",
          "        last_match_end: Some(20),  // out of bounds",
          "    };",
          "    let finder = |_: &Match| {};",
          "    let try_half_matches_iter = TryHalfMatchesIter { it: searcher, finder };",
          "    let _ = core::fmt::Debug::fmt(&try_half_matches_iter, &mut core::fmt::Formatter::new());",
          "    assert_eq!(try_half_matches_iter.it.input.get_bytes(), b\"boundary test\");",
          "    assert_eq!(try_half_matches_iter.it.last_match_end, Some(20));",
          "    assert_eq!(try_half_matches_iter.fmt(&mut core::fmt::Formatter::new()).is_ok(), true);",
          "    assert!(format!(\"{:?}\", try_half_matches_iter).contains(\"TryHalfMatchesIter\"));",
          "    assert!(format!(\"{:?}\", try_half_matches_iter).contains(\"it:\"));",
          "    assert!(format!(\"{:?}\", try_half_matches_iter).contains(\"finder: <closure>\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]