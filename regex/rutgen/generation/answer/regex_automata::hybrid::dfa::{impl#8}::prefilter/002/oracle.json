[
  {
    "uses": [
      "use crate::util::search::MatchKind;",
      "use crate::util::prefilter::Prefilter;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::util::prefilter::Prefilter;",
          "    use crate::util::search::MatchKind;",
          "",
          "    let pre = Prefilter {",
          "        pre: None,",
          "        is_fast: true,",
          "        max_needle_len: 3,",
          "    };",
          "",
          "    let config = Config::new()",
          "        .prefilter(Some(pre))",
          "        .specialize_start_states(true)",
          "        .match_kind(MatchKind::LeftmostFirst)",
          "        .byte_classes(true);",
          "",
          "    let _result = config.prefilter(Some(pre));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.specialize_start_states, Some(true));",
          "    assert!(config.get_prefilter().is_some());",
          "    assert_eq!(config.get_match_kind(), MatchKind::LeftmostFirst);",
          "    assert!(config.get_byte_classes());",
          "    assert_eq!(config, _result);"
        ],
        "code": [
          "{",
          "    use crate::util::prefilter::Prefilter;",
          "    use crate::util::search::MatchKind;",
          "",
          "    let pre = Prefilter {",
          "        pre: None,",
          "        is_fast: true,",
          "        max_needle_len: 3,",
          "    };",
          "",
          "    let config = Config::new()",
          "        .prefilter(Some(pre))",
          "        .specialize_start_states(true)",
          "        .match_kind(MatchKind::LeftmostFirst)",
          "        .byte_classes(true);",
          "",
          "    let _result = config.prefilter(Some(pre));",
          "    assert_eq!(config.specialize_start_states, Some(true));",
          "    assert!(config.get_prefilter().is_some());",
          "    assert_eq!(config.get_match_kind(), MatchKind::LeftmostFirst);",
          "    assert!(config.get_byte_classes());",
          "    assert_eq!(config, _result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::util::prefilter::Prefilter;",
          "    use crate::util::search::MatchKind;",
          "",
          "    let pre = Prefilter {",
          "        pre: None,",
          "        is_fast: true,",
          "        max_needle_len: 3,",
          "    };",
          "",
          "    let config = Config::new()",
          "        .prefilter(Some(pre))",
          "        .specialize_start_states(true)",
          "        .match_kind(MatchKind::LeftmostFirst)",
          "        .byte_classes(false);",
          "",
          "    let _result = config.prefilter(Some(pre));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.specialize_start_states, Some(true));",
          "    assert_eq!(config.get_prefilter().is_some(), true);",
          "    assert!(config.pre.is_some());",
          "    assert_eq!(config.match_kind, Some(MatchKind::LeftmostFirst));",
          "    assert_eq!(config.get_byte_classes(), false);"
        ],
        "code": [
          "{",
          "    use crate::util::prefilter::Prefilter;",
          "    use crate::util::search::MatchKind;",
          "",
          "    let pre = Prefilter {",
          "        pre: None,",
          "        is_fast: true,",
          "        max_needle_len: 3,",
          "    };",
          "",
          "    let config = Config::new()",
          "        .prefilter(Some(pre))",
          "        .specialize_start_states(true)",
          "        .match_kind(MatchKind::LeftmostFirst)",
          "        .byte_classes(false);",
          "",
          "    let _result = config.prefilter(Some(pre));",
          "    assert_eq!(config.specialize_start_states, Some(true));",
          "    assert_eq!(config.get_prefilter().is_some(), true);",
          "    assert!(config.pre.is_some());",
          "    assert_eq!(config.match_kind, Some(MatchKind::LeftmostFirst));",
          "    assert_eq!(config.get_byte_classes(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::util::prefilter::Prefilter;",
          "    use crate::util::search::MatchKind;",
          "",
          "    let pre = Prefilter {",
          "        pre: None,",
          "        is_fast: true,",
          "        max_needle_len: 5,",
          "    };",
          "",
          "    let config = Config::new()",
          "        .prefilter(Some(pre))",
          "        .specialize_start_states(true)",
          "        .match_kind(MatchKind::All)",
          "        .byte_classes(true);",
          "",
          "    let _result = config.prefilter(Some(pre));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.get_prefilter().is_some(), true);",
          "    assert_eq!(_result.get_specialize_start_states(), true);",
          "    assert_eq!(_result.get_match_kind(), MatchKind::All);",
          "    assert_eq!(_result.get_byte_classes(), true);"
        ],
        "code": [
          "{",
          "    use crate::util::prefilter::Prefilter;",
          "    use crate::util::search::MatchKind;",
          "",
          "    let pre = Prefilter {",
          "        pre: None,",
          "        is_fast: true,",
          "        max_needle_len: 5,",
          "    };",
          "",
          "    let config = Config::new()",
          "        .prefilter(Some(pre))",
          "        .specialize_start_states(true)",
          "        .match_kind(MatchKind::All)",
          "        .byte_classes(true);",
          "",
          "    let _result = config.prefilter(Some(pre));",
          "    assert_eq!(_result.get_prefilter().is_some(), true);",
          "    assert_eq!(_result.get_specialize_start_states(), true);",
          "    assert_eq!(_result.get_match_kind(), MatchKind::All);",
          "    assert_eq!(_result.get_byte_classes(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]