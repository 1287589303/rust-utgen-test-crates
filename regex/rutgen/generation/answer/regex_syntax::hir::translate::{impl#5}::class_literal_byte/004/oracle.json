[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    ",
          "    impl Visitor for TestVisitor {",
          "        type Output = ();",
          "        type Err = Error;",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> { Ok(()) }",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: false,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let non_ascii_literal = ast::Literal {",
          "        span: Span { start: Position(0), end: Position(1) },",
          "        kind: LiteralKind::Unicode,",
          "        c: '©',",
          "    };",
          "",
          "    let translator_instance = TranslatorI::new(&translator, \"©\");",
          "",
          "    let result = translator_instance.class_literal_byte(&non_ascii_literal);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    match result {",
          "    Err(error) => assert_eq!(error.kind, ErrorKind::UnicodeNotAllowed),",
          "    _ => panic!(\"Expected an error of kind UnicodeNotAllowed\"),",
          "    }"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    ",
          "    impl Visitor for TestVisitor {",
          "        type Output = ();",
          "        type Err = Error;",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> { Ok(()) }",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: false,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let non_ascii_literal = ast::Literal {",
          "        span: Span { start: Position(0), end: Position(1) },",
          "        kind: LiteralKind::Unicode,",
          "        c: '©',",
          "    };",
          "",
          "    let translator_instance = TranslatorI::new(&translator, \"©\");",
          "",
          "    let result = translator_instance.class_literal_byte(&non_ascii_literal);",
          "    assert!(result.is_err());",
          "    match result {",
          "    Err(error) => assert_eq!(error.kind, ErrorKind::UnicodeNotAllowed),",
          "    _ => panic!(\"Expected an error of kind UnicodeNotAllowed\"),",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    ",
          "    impl Visitor for TestVisitor {",
          "        type Output = ();",
          "        type Err = Error;",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> { Ok(()) }",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: false,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let non_ascii_literal = ast::Literal {",
          "        span: Span { start: Position(0), end: Position(1) },",
          "        kind: LiteralKind::Unicode,",
          "        c: 'ß',",
          "    };",
          "",
          "    let translator_instance = TranslatorI::new(&translator, \"ß\");",
          "",
          "    let result = translator_instance.class_literal_byte(&non_ascii_literal);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind, ErrorKind::UnicodeNotAllowed);"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    ",
          "    impl Visitor for TestVisitor {",
          "        type Output = ();",
          "        type Err = Error;",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> { Ok(()) }",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: false,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let non_ascii_literal = ast::Literal {",
          "        span: Span { start: Position(0), end: Position(1) },",
          "        kind: LiteralKind::Unicode,",
          "        c: 'ß',",
          "    };",
          "",
          "    let translator_instance = TranslatorI::new(&translator, \"ß\");",
          "",
          "    let result = translator_instance.class_literal_byte(&non_ascii_literal);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind, ErrorKind::UnicodeNotAllowed);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    ",
          "    impl Visitor for TestVisitor {",
          "        type Output = ();",
          "        type Err = Error;",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> { Ok(()) }",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: false,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let non_ascii_literal = ast::Literal {",
          "        span: Span { start: Position(0), end: Position(1) },",
          "        kind: LiteralKind::Unicode,",
          "        c: '你',",
          "    };",
          "",
          "    let translator_instance = TranslatorI::new(&translator, \"你\");",
          "",
          "    let result = translator_instance.class_literal_byte(&non_ascii_literal);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind, ErrorKind::UnicodeNotAllowed);"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    ",
          "    impl Visitor for TestVisitor {",
          "        type Output = ();",
          "        type Err = Error;",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> { Ok(()) }",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: false,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let non_ascii_literal = ast::Literal {",
          "        span: Span { start: Position(0), end: Position(1) },",
          "        kind: LiteralKind::Unicode,",
          "        c: '你',",
          "    };",
          "",
          "    let translator_instance = TranslatorI::new(&translator, \"你\");",
          "",
          "    let result = translator_instance.class_literal_byte(&non_ascii_literal);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind, ErrorKind::UnicodeNotAllowed);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]