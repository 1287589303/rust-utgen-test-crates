[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"chew\").unwrap();",
          "    let hay = b\"eschew\";",
          "    let result = re.captures_at(hay, 0);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().haystack, hay);",
          "    assert_eq!(result.unwrap().caps.len(), expected_captures_len);",
          "    assert_eq!(result.unwrap().static_captures_len, Some(expected_static_captures_len));"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"chew\").unwrap();",
          "    let hay = b\"eschew\";",
          "    let result = re.captures_at(hay, 0);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().haystack, hay);",
          "    assert_eq!(result.unwrap().caps.len(), expected_captures_len);",
          "    assert_eq!(result.unwrap().static_captures_len, Some(expected_static_captures_len));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"chew\").unwrap();",
          "    let hay = b\"eschew\";",
          "    let result = re.captures_at(hay, 2);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().haystack, hay);",
          "    assert_eq!(result.unwrap().caps.matched_len(), 4);",
          "    assert_eq!(result.unwrap().caps[0], b\"chew\");",
          "    assert_eq!(result.unwrap().static_captures_len, None);",
          "    assert!(re.captures_at(hay, 0).is_some());",
          "    assert!(re.captures_at(hay, 1).is_some());",
          "    assert!(re.captures_at(hay, hay.len()).is_none());"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"chew\").unwrap();",
          "    let hay = b\"eschew\";",
          "    let result = re.captures_at(hay, 2);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().haystack, hay);",
          "    assert_eq!(result.unwrap().caps.matched_len(), 4);",
          "    assert_eq!(result.unwrap().caps[0], b\"chew\");",
          "    assert_eq!(result.unwrap().static_captures_len, None);",
          "    assert!(re.captures_at(hay, 0).is_some());",
          "    assert!(re.captures_at(hay, 1).is_some());",
          "    assert!(re.captures_at(hay, hay.len()).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"w$\").unwrap();",
          "    let hay = b\"eschew\";",
          "    let result = re.captures_at(hay, 5);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().haystack, hay);",
          "    assert_eq!(result.unwrap().caps.matches.len(), 1);",
          "    assert_eq!(result.unwrap().static_captures_len, Some(1));"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"w$\").unwrap();",
          "    let hay = b\"eschew\";",
          "    let result = re.captures_at(hay, 5);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().haystack, hay);",
          "    assert_eq!(result.unwrap().caps.matches.len(), 1);",
          "    assert_eq!(result.unwrap().static_captures_len, Some(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"es\").unwrap();",
          "    let hay = b\"eschew\";",
          "    let result = re.captures_at(hay, 0);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().haystack, hay);",
          "    assert_eq!(result.unwrap().caps.len(), expected_length);",
          "    assert_eq!(result.unwrap().static_captures_len, expected_static_captures_len);",
          "    assert_eq!(result.unwrap().caps.get(0), Some(&b\"es\"[..]));"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"es\").unwrap();",
          "    let hay = b\"eschew\";",
          "    let result = re.captures_at(hay, 0);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().haystack, hay);",
          "    assert_eq!(result.unwrap().caps.len(), expected_length);",
          "    assert_eq!(result.unwrap().static_captures_len, expected_static_captures_len);",
          "    assert_eq!(result.unwrap().caps.get(0), Some(&b\"es\"[..]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"chew\").unwrap();",
          "    let hay = b\"eschew\";",
          "    let _result = re.captures_at(hay, hay.len());",
          "}"
        ],
        "oracle": [
          "    let re = Regex::new(r\"chew\").unwrap();",
          "    let hay = b\"eschew\";",
          "    assert_eq!(re.captures_at(hay, 2).is_some(), true);",
          "    assert!(re.captures_at(hay, 2).unwrap().static_captures_len.is_some());",
          "    assert_eq!(re.captures_at(hay, 2).unwrap().haystack, hay);",
          "    assert!(re.captures_at(hay, 1).is_some());",
          "    assert!(re.captures_at(hay, 0).is_some());",
          "    assert_eq!(re.captures_at(hay, 2).unwrap().caps.is_match(), true);",
          "    assert!(re.captures_at(hay, hay.len() - 1).is_none());",
          "    assert!(re.captures_at(hay, hay.len()).is_none());"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"chew\").unwrap();",
          "    let hay = b\"eschew\";",
          "    let _result = re.captures_at(hay, hay.len());",
          "    let re = Regex::new(r\"chew\").unwrap();",
          "    let hay = b\"eschew\";",
          "    assert_eq!(re.captures_at(hay, 2).is_some(), true);",
          "    assert!(re.captures_at(hay, 2).unwrap().static_captures_len.is_some());",
          "    assert_eq!(re.captures_at(hay, 2).unwrap().haystack, hay);",
          "    assert!(re.captures_at(hay, 1).is_some());",
          "    assert!(re.captures_at(hay, 0).is_some());",
          "    assert_eq!(re.captures_at(hay, 2).unwrap().caps.is_match(), true);",
          "    assert!(re.captures_at(hay, hay.len() - 1).is_none());",
          "    assert!(re.captures_at(hay, hay.len()).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]