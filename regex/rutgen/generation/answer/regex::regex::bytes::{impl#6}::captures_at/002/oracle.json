[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = b\"eschew\";",
          "    let _result = re.captures_at(hay, hay.len() + 1);",
          "}"
        ],
        "oracle": [
          "    assert!(re.captures_at(hay, hay.len() + 1).is_none());",
          "    assert_eq!(re.captures_at(hay, 2).unwrap()[0], b\"chew\");",
          "    assert!(re.captures_at(hay, 2).is_none());",
          "    assert!(re.captures_at(hay, hay.len()).is_none());",
          "    assert!(re.captures_at(hay, 0).is_some());"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = b\"eschew\";",
          "    let _result = re.captures_at(hay, hay.len() + 1);",
          "    assert!(re.captures_at(hay, hay.len() + 1).is_none());",
          "    assert_eq!(re.captures_at(hay, 2).unwrap()[0], b\"chew\");",
          "    assert!(re.captures_at(hay, 2).is_none());",
          "    assert!(re.captures_at(hay, hay.len()).is_none());",
          "    assert!(re.captures_at(hay, 0).is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = b\"eschew\";",
          "    let result = re.captures_at(hay, hay.len());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = b\"eschew\";",
          "    let result = re.captures_at(hay, hay.len());",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = b\"eschew\";",
          "    let result = re.captures_at(hay, 2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = b\"eschew\";",
          "    let result = re.captures_at(hay, 2);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay: &[u8] = b\"\";",
          "    let result = re.captures_at(hay, 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay: &[u8] = b\"\";",
          "    let result = re.captures_at(hay, 0);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = b\"a\";",
          "    let result = re.captures_at(hay, 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = b\"a\";",
          "    let result = re.captures_at(hay, 0);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]