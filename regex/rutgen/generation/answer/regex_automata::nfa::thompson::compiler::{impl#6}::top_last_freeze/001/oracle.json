[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder {",
          "        pattern_id: None,",
          "        states: vec![],",
          "        start_pattern: vec![],",
          "        captures: vec![],",
          "        memory_states: 0,",
          "        utf8: true,",
          "        reverse: false,",
          "        look_matcher: LookMatcher::default(),",
          "        size_limit: None,",
          "        config: Config::default(),",
          "        #[cfg(feature = \"syntax\")]",
          "        thompson: thompson::Compiler::default(),",
          "    };",
          "    ",
          "    let mut state = Utf8State {",
          "        compiled: Utf8BoundedMap::default(),",
          "        uncompiled: vec![",
          "            Utf8Node { trans: vec![], last: None },",
          "        ],",
          "    };",
          "    ",
          "    let mut compiler = Utf8Compiler::new(&mut builder, &mut state).unwrap();",
          "    let next = StateID(SmallIndex::from(1));",
          "    ",
          "    compiler.top_last_freeze(next);",
          "}"
        ],
        "oracle": [
          "    assert!(state.uncompiled.len() == 1);",
          "    assert!(state.uncompiled[0].last.is_none());",
          "    compiler.top_last_freeze(next);",
          "    assert!(state.uncompiled[0].last.is_some());",
          "    assert_eq!(state.uncompiled[0].trans.len(), 1);",
          "    assert_eq!(state.uncompiled[0].trans[0].next, next);",
          "    assert!(state.uncompiled[0].trans[0].start == 0);",
          "    assert!(state.uncompiled[0].trans[0].end == 0);"
        ],
        "code": [
          "{",
          "    let mut builder = Builder {",
          "        pattern_id: None,",
          "        states: vec![],",
          "        start_pattern: vec![],",
          "        captures: vec![],",
          "        memory_states: 0,",
          "        utf8: true,",
          "        reverse: false,",
          "        look_matcher: LookMatcher::default(),",
          "        size_limit: None,",
          "        config: Config::default(),",
          "        #[cfg(feature = \"syntax\")]",
          "        thompson: thompson::Compiler::default(),",
          "    };",
          "    ",
          "    let mut state = Utf8State {",
          "        compiled: Utf8BoundedMap::default(),",
          "        uncompiled: vec![",
          "            Utf8Node { trans: vec![], last: None },",
          "        ],",
          "    };",
          "    ",
          "    let mut compiler = Utf8Compiler::new(&mut builder, &mut state).unwrap();",
          "    let next = StateID(SmallIndex::from(1));",
          "    ",
          "    compiler.top_last_freeze(next);",
          "    assert!(state.uncompiled.len() == 1);",
          "    assert!(state.uncompiled[0].last.is_none());",
          "    compiler.top_last_freeze(next);",
          "    assert!(state.uncompiled[0].last.is_some());",
          "    assert_eq!(state.uncompiled[0].trans.len(), 1);",
          "    assert_eq!(state.uncompiled[0].trans[0].next, next);",
          "    assert!(state.uncompiled[0].trans[0].start == 0);",
          "    assert!(state.uncompiled[0].trans[0].end == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic(expected = \"non-empty nodes\")]"
        ],
        "prefix": [
          "{",
          "    let mut builder = Builder {",
          "        pattern_id: None,",
          "        states: vec![],",
          "        start_pattern: vec![],",
          "        captures: vec![],",
          "        memory_states: 0,",
          "        utf8: true,",
          "        reverse: false,",
          "        look_matcher: LookMatcher::default(),",
          "        size_limit: None,",
          "        config: Config::default(),",
          "        #[cfg(feature = \"syntax\")]",
          "        thompson: thompson::Compiler::default(),",
          "    };",
          "    ",
          "    let mut state = Utf8State {",
          "        compiled: Utf8BoundedMap::default(),",
          "        uncompiled: vec![],",
          "    };",
          "    ",
          "    let mut compiler = Utf8Compiler::new(&mut builder, &mut state).unwrap();",
          "    let next = StateID(SmallIndex::from(1));",
          "    ",
          "    compiler.top_last_freeze(next);",
          "}"
        ],
        "oracle": [
          "    let mut builder = Builder { pattern_id: None, states: vec![], start_pattern: vec![], captures: vec![], memory_states: 0, utf8: true, reverse: false, look_matcher: LookMatcher::default(), size_limit: None, config: Config::default(), #[cfg(feature = \"syntax\")] thompson: thompson::Compiler::default(), };",
          "    let mut state = Utf8State { compiled: Utf8BoundedMap::default(), uncompiled: vec![], };",
          "    let mut compiler = Utf8Compiler::new(&mut builder, &mut state).unwrap();",
          "    let next = StateID(SmallIndex::from(1));",
          "    compiler.top_last_freeze(next);"
        ],
        "code": [
          "{",
          "    let mut builder = Builder {",
          "        pattern_id: None,",
          "        states: vec![],",
          "        start_pattern: vec![],",
          "        captures: vec![],",
          "        memory_states: 0,",
          "        utf8: true,",
          "        reverse: false,",
          "        look_matcher: LookMatcher::default(),",
          "        size_limit: None,",
          "        config: Config::default(),",
          "        #[cfg(feature = \"syntax\")]",
          "        thompson: thompson::Compiler::default(),",
          "    };",
          "    ",
          "    let mut state = Utf8State {",
          "        compiled: Utf8BoundedMap::default(),",
          "        uncompiled: vec![],",
          "    };",
          "    ",
          "    let mut compiler = Utf8Compiler::new(&mut builder, &mut state).unwrap();",
          "    let next = StateID(SmallIndex::from(1));",
          "    ",
          "    compiler.top_last_freeze(next);",
          "    let mut builder = Builder { pattern_id: None, states: vec![], start_pattern: vec![], captures: vec![], memory_states: 0, utf8: true, reverse: false, look_matcher: LookMatcher::default(), size_limit: None, config: Config::default(), #[cfg(feature = \"syntax\")] thompson: thompson::Compiler::default(), };",
          "    let mut state = Utf8State { compiled: Utf8BoundedMap::default(), uncompiled: vec![], };",
          "    let mut compiler = Utf8Compiler::new(&mut builder, &mut state).unwrap();",
          "    let next = StateID(SmallIndex::from(1));",
          "    compiler.top_last_freeze(next);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]