[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let patterns = &[r\"\\w+\", r\"\\d+\", r\"foo\", r\"bar\", r\"foo1bar\"];",
          "    let dfa = DFA::builder()",
          "        .configure(DFA::config().match_kind(MatchKind::All))",
          "        .build_many(patterns).unwrap();",
          "    ",
          "    let mut cache = dfa.create_cache();",
          "    let input = Input::new(\"foo1bar\");",
          "    let mut patset = PatternSet::new(dfa.pattern_len());",
          "",
          "    dfa.try_which_overlapping_matches(&mut cache, &input, &mut patset).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(dfa.try_search_overlapping_fwd(&mut cache, &input, &mut state).is_ok());",
          "    assert!(state.get_match().is_some());",
          "    assert!(patset.is_full());",
          "    assert_eq!(dfa.try_which_overlapping_matches(&mut cache, &input, &mut patset), Ok(()));"
        ],
        "code": [
          "{",
          "    let patterns = &[r\"\\w+\", r\"\\d+\", r\"foo\", r\"bar\", r\"foo1bar\"];",
          "    let dfa = DFA::builder()",
          "        .configure(DFA::config().match_kind(MatchKind::All))",
          "        .build_many(patterns).unwrap();",
          "    ",
          "    let mut cache = dfa.create_cache();",
          "    let input = Input::new(\"foo1bar\");",
          "    let mut patset = PatternSet::new(dfa.pattern_len());",
          "",
          "    dfa.try_which_overlapping_matches(&mut cache, &input, &mut patset).unwrap();",
          "    assert!(dfa.try_search_overlapping_fwd(&mut cache, &input, &mut state).is_ok());",
          "    assert!(state.get_match().is_some());",
          "    assert!(patset.is_full());",
          "    assert_eq!(dfa.try_which_overlapping_matches(&mut cache, &input, &mut patset), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let patterns = &[r\"foo\", r\"bar\", r\"foobar\", r\"baz\"];",
          "    let dfa = DFA::builder()",
          "        .configure(DFA::config().match_kind(MatchKind::All))",
          "        .build_many(patterns).unwrap();",
          "    ",
          "    let mut cache = dfa.create_cache();",
          "    let input = Input::new(\"foobar\");",
          "    let mut patset = PatternSet::new(dfa.pattern_len());",
          "",
          "    dfa.try_which_overlapping_matches(&mut cache, &input, &mut patset).unwrap();",
          "}"
        ],
        "oracle": [
          "    let patterns = &[r\"foo\", r\"bar\", r\"foobar\", r\"baz\"];",
          "    let dfa = DFA::builder().configure(DFA::config().match_kind(MatchKind::All)).build_many(patterns).unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let input = Input::new(\"foobar\");",
          "    let mut patset = PatternSet::new(dfa.pattern_len());",
          "    let mut state = OverlappingState::start();",
          "    assert!(dfa.try_search_overlapping_fwd(&mut cache, &input, &mut state).is_ok());",
          "    assert!(state.get_match().is_some());",
          "    assert!(patset.try_insert(state.get_match().unwrap().pattern()).is_ok());",
          "    assert!(patset.is_full());",
          "    assert_eq!(dfa.try_which_overlapping_matches(&mut cache, &input, &mut patset), Ok(()));"
        ],
        "code": [
          "{",
          "    let patterns = &[r\"foo\", r\"bar\", r\"foobar\", r\"baz\"];",
          "    let dfa = DFA::builder()",
          "        .configure(DFA::config().match_kind(MatchKind::All))",
          "        .build_many(patterns).unwrap();",
          "    ",
          "    let mut cache = dfa.create_cache();",
          "    let input = Input::new(\"foobar\");",
          "    let mut patset = PatternSet::new(dfa.pattern_len());",
          "",
          "    dfa.try_which_overlapping_matches(&mut cache, &input, &mut patset).unwrap();",
          "    let patterns = &[r\"foo\", r\"bar\", r\"foobar\", r\"baz\"];",
          "    let dfa = DFA::builder().configure(DFA::config().match_kind(MatchKind::All)).build_many(patterns).unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let input = Input::new(\"foobar\");",
          "    let mut patset = PatternSet::new(dfa.pattern_len());",
          "    let mut state = OverlappingState::start();",
          "    assert!(dfa.try_search_overlapping_fwd(&mut cache, &input, &mut state).is_ok());",
          "    assert!(state.get_match().is_some());",
          "    assert!(patset.try_insert(state.get_match().unwrap().pattern()).is_ok());",
          "    assert!(patset.is_full());",
          "    assert_eq!(dfa.try_which_overlapping_matches(&mut cache, &input, &mut patset), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let patterns = &[r\"\\w+\", r\"\\s+\", r\"bar\", r\"f\", r\"o\", r\"b\", r\"baz\"];",
          "    let dfa = DFA::builder()",
          "        .configure(DFA::config().match_kind(MatchKind::All))",
          "        .build_many(patterns).unwrap();",
          "",
          "    let mut cache = dfa.create_cache();",
          "    let input = Input::new(\"foobarbaz\");",
          "    let mut patset = PatternSet::new(dfa.pattern_len());",
          "",
          "    dfa.try_which_overlapping_matches(&mut cache, &input, &mut patset).unwrap();",
          "}"
        ],
        "oracle": [
          "    let patterns = &[r\"\\w+\", r\"\\s+\", r\"bar\", r\"f\", r\"o\", r\"b\", r\"baz\"];",
          "    let dfa = DFA::builder()",
          "    .configure(DFA::config().match_kind(MatchKind::All))",
          "    .build_many(patterns).unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let input = Input::new(\"foobarbaz\");",
          "    let mut patset = PatternSet::new(dfa.pattern_len());",
          "    let state = OverlappingState::start();",
          "    assert!(dfa.try_search_overlapping_fwd(&mut cache, &input, &mut state).is_ok());",
          "    assert!(state.get_match().is_some());",
          "    assert!(patset.is_full());",
          "    assert_eq!(dfa.try_which_overlapping_matches(&mut cache, &input, &mut patset).unwrap(), Ok(()));"
        ],
        "code": [
          "{",
          "    let patterns = &[r\"\\w+\", r\"\\s+\", r\"bar\", r\"f\", r\"o\", r\"b\", r\"baz\"];",
          "    let dfa = DFA::builder()",
          "        .configure(DFA::config().match_kind(MatchKind::All))",
          "        .build_many(patterns).unwrap();",
          "",
          "    let mut cache = dfa.create_cache();",
          "    let input = Input::new(\"foobarbaz\");",
          "    let mut patset = PatternSet::new(dfa.pattern_len());",
          "",
          "    dfa.try_which_overlapping_matches(&mut cache, &input, &mut patset).unwrap();",
          "    let patterns = &[r\"\\w+\", r\"\\s+\", r\"bar\", r\"f\", r\"o\", r\"b\", r\"baz\"];",
          "    let dfa = DFA::builder()",
          "    .configure(DFA::config().match_kind(MatchKind::All))",
          "    .build_many(patterns).unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let input = Input::new(\"foobarbaz\");",
          "    let mut patset = PatternSet::new(dfa.pattern_len());",
          "    let state = OverlappingState::start();",
          "    assert!(dfa.try_search_overlapping_fwd(&mut cache, &input, &mut state).is_ok());",
          "    assert!(state.get_match().is_some());",
          "    assert!(patset.is_full());",
          "    assert_eq!(dfa.try_which_overlapping_matches(&mut cache, &input, &mut patset).unwrap(), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let patterns = &[r\"foo\", r\"bar\", r\"baz\"];",
          "    let dfa = DFA::builder()",
          "        .configure(DFA::config().match_kind(MatchKind::All))",
          "        .build_many(patterns).unwrap();",
          "    ",
          "    let mut cache = dfa.create_cache();",
          "    let input = Input::new(\"foo bar\");",
          "    let mut patset = PatternSet::new(dfa.pattern_len());",
          "",
          "    dfa.try_which_overlapping_matches(&mut cache, &input, &mut patset).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(dfa.try_search_overlapping_fwd(&mut cache, &input, &mut state).is_ok());",
          "    assert!(state.get_match().is_some());",
          "    assert!(patset.is_full());",
          "    assert_eq!(dfa.try_which_overlapping_matches(&mut cache, &input, &mut patset), Ok(()));"
        ],
        "code": [
          "{",
          "    let patterns = &[r\"foo\", r\"bar\", r\"baz\"];",
          "    let dfa = DFA::builder()",
          "        .configure(DFA::config().match_kind(MatchKind::All))",
          "        .build_many(patterns).unwrap();",
          "    ",
          "    let mut cache = dfa.create_cache();",
          "    let input = Input::new(\"foo bar\");",
          "    let mut patset = PatternSet::new(dfa.pattern_len());",
          "",
          "    dfa.try_which_overlapping_matches(&mut cache, &input, &mut patset).unwrap();",
          "    assert!(dfa.try_search_overlapping_fwd(&mut cache, &input, &mut state).is_ok());",
          "    assert!(state.get_match().is_some());",
          "    assert!(patset.is_full());",
          "    assert_eq!(dfa.try_which_overlapping_matches(&mut cache, &input, &mut patset), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]