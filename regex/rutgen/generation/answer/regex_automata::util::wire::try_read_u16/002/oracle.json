[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[0x12, 0x34];",
          "    let what: &'static str = \"test_value\";",
          "    let result = try_read_u16(slice, what);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let (value, bytes_read) = result.unwrap();",
          "    assert_eq!(value, 0x3412);",
          "    assert_eq!(bytes_read, 2);"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[0x12, 0x34];",
          "    let what: &'static str = \"test_value\";",
          "    let result = try_read_u16(slice, what);",
          "    assert!(result.is_ok());",
          "    let (value, bytes_read) = result.unwrap();",
          "    assert_eq!(value, 0x3412);",
          "    assert_eq!(bytes_read, 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[0x56, 0x78, 0x9A];",
          "    let what: &'static str = \"test_value\";",
          "    let result = try_read_u16(slice, what);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok((0x7856, 2)));",
          "    assert!(result.is_ok());",
          "    assert!(result.unwrap().1 == 2);",
          "    assert!(result.unwrap().0 == 0x7856);",
          "    assert_eq!(result.is_err(), false);",
          "    assert_eq!(result.unwrap_err(), None);"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[0x56, 0x78, 0x9A];",
          "    let what: &'static str = \"test_value\";",
          "    let result = try_read_u16(slice, what);",
          "    assert_eq!(result, Ok((0x7856, 2)));",
          "    assert!(result.is_ok());",
          "    assert!(result.unwrap().1 == 2);",
          "    assert!(result.unwrap().0 == 0x7856);",
          "    assert_eq!(result.is_err(), false);",
          "    assert_eq!(result.unwrap_err(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[0xAB, 0xCD, 0xEF, 0x01, 0x02];",
          "    let what: &'static str = \"test_value\";",
          "    let result = try_read_u16(slice, what);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok((0xCDBA, 2)));"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[0xAB, 0xCD, 0xEF, 0x01, 0x02];",
          "    let what: &'static str = \"test_value\";",
          "    let result = try_read_u16(slice, what);",
          "    assert_eq!(result, Ok((0xCDBA, 2)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]