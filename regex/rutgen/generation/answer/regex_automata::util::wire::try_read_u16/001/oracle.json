[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[];",
          "    let what: &'static str = \"test_empty\";",
          "    let _result = try_read_u16(slice, what);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.is_err(), true);",
          "    assert!(matches!(_result, Err(DeserializeError::buffer_too_small(\"test_empty\"))));"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[];",
          "    let what: &'static str = \"test_empty\";",
          "    let _result = try_read_u16(slice, what);",
          "    assert_eq!(_result.is_err(), true);",
          "    assert!(matches!(_result, Err(DeserializeError::buffer_too_small(\"test_empty\"))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[0x01];",
          "    let what: &'static str = \"test_one_byte\";",
          "    let _result = try_read_u16(slice, what);",
          "}"
        ],
        "oracle": [
          "    assert!(_result.is_err());",
          "    assert_eq!(_result.err().unwrap().0, DeserializeErrorKind::buffer_too_small(\"test_one_byte\"));"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[0x01];",
          "    let what: &'static str = \"test_one_byte\";",
          "    let _result = try_read_u16(slice, what);",
          "    assert!(_result.is_err());",
          "    assert_eq!(_result.err().unwrap().0, DeserializeErrorKind::buffer_too_small(\"test_one_byte\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]