[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = RegexSetBuilder::new([\"foo(?-i:bar)quux\"])",
          "        .case_insensitive(true)",
          "        .build()",
          "        .unwrap();",
          "}"
        ],
        "oracle": [
          "    let re = RegexSetBuilder::new([\"foo(?-i:bar)quux\"]).case_insensitive(true).build().unwrap();",
          "    assert!(re.is_match(b\"FoObarQuUx\"));",
          "    assert!(!re.is_match(b\"fooBARquux\"));"
        ],
        "code": [
          "{",
          "    let re = RegexSetBuilder::new([\"foo(?-i:bar)quux\"])",
          "        .case_insensitive(true)",
          "        .build()",
          "        .unwrap();",
          "    let re = RegexSetBuilder::new([\"foo(?-i:bar)quux\"]).case_insensitive(true).build().unwrap();",
          "    assert!(re.is_match(b\"FoObarQuUx\"));",
          "    assert!(!re.is_match(b\"fooBARquux\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = RegexSetBuilder::new([\"foo(?-i:bar)quux\"])",
          "        .case_insensitive(false)",
          "        .build()",
          "        .unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(re.is_match(b\"fooBARquux\"), false);",
          "    assert_eq!(re.is_match(b\"FoObarQuUx\"), false);",
          "    let re_case_insensitive = RegexSetBuilder::new([\"foo(?-i:bar)quux\"])",
          "    .case_insensitive(true)",
          "    .build()",
          "    .unwrap();",
          "    assert_eq!(re_case_insensitive.is_match(b\"FoObarQuUx\"), true);",
          "    assert_eq!(re_case_insensitive.is_match(b\"fooBARquux\"), false);"
        ],
        "code": [
          "{",
          "    let re = RegexSetBuilder::new([\"foo(?-i:bar)quux\"])",
          "        .case_insensitive(false)",
          "        .build()",
          "        .unwrap();",
          "    assert_eq!(re.is_match(b\"fooBARquux\"), false);",
          "    assert_eq!(re.is_match(b\"FoObarQuUx\"), false);",
          "    let re_case_insensitive = RegexSetBuilder::new([\"foo(?-i:bar)quux\"])",
          "    .case_insensitive(true)",
          "    .build()",
          "    .unwrap();",
          "    assert_eq!(re_case_insensitive.is_match(b\"FoObarQuUx\"), true);",
          "    assert_eq!(re_case_insensitive.is_match(b\"fooBARquux\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = RegexSetBuilder::new([\"(?i)foo\", \"(?i)bar\"])",
          "        .case_insensitive(true)",
          "        .build()",
          "        .unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(re.is_match(b\"FOO\"), true);",
          "    assert_eq!(re.is_match(b\"foo\"), true);",
          "    assert_eq!(re.is_match(b\"BAR\"), true);",
          "    assert_eq!(re.is_match(b\"bar\"), true);",
          "    assert_eq!(re.is_match(b\"foobar\"), false);",
          "    assert_eq!(re.is_match(b\"fooBAR\"), false);",
          "    assert_eq!(re.is_match(b\"FOObAR\"), false);"
        ],
        "code": [
          "{",
          "    let re = RegexSetBuilder::new([\"(?i)foo\", \"(?i)bar\"])",
          "        .case_insensitive(true)",
          "        .build()",
          "        .unwrap();",
          "    assert_eq!(re.is_match(b\"FOO\"), true);",
          "    assert_eq!(re.is_match(b\"foo\"), true);",
          "    assert_eq!(re.is_match(b\"BAR\"), true);",
          "    assert_eq!(re.is_match(b\"bar\"), true);",
          "    assert_eq!(re.is_match(b\"foobar\"), false);",
          "    assert_eq!(re.is_match(b\"fooBAR\"), false);",
          "    assert_eq!(re.is_match(b\"FOObAR\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = RegexSetBuilder::new([\"foo\", \"(?i:bar)quux\"])",
          "        .case_insensitive(false)",
          "        .build()",
          "        .unwrap();",
          "}"
        ],
        "oracle": [
          "    let re = RegexSetBuilder::new([\"foo\", \"(?i:bar)quux\"]).case_insensitive(false).build().unwrap();",
          "    assert!(re.is_match(b\"fooquux\"));",
          "    assert!(!re.is_match(b\"Fooquux\"));",
          "    assert!(re.is_match(b\"barquux\"));",
          "    assert!(!re.is_match(b\"FOOQUX\"));",
          "    assert!(!re.is_match(b\"fooBARquux\"));",
          "    assert!(re.is_match(b\"FoOQUUX\"));"
        ],
        "code": [
          "{",
          "    let re = RegexSetBuilder::new([\"foo\", \"(?i:bar)quux\"])",
          "        .case_insensitive(false)",
          "        .build()",
          "        .unwrap();",
          "    let re = RegexSetBuilder::new([\"foo\", \"(?i:bar)quux\"]).case_insensitive(false).build().unwrap();",
          "    assert!(re.is_match(b\"fooquux\"));",
          "    assert!(!re.is_match(b\"Fooquux\"));",
          "    assert!(re.is_match(b\"barquux\"));",
          "    assert!(!re.is_match(b\"FOOQUX\"));",
          "    assert!(!re.is_match(b\"fooBARquux\"));",
          "    assert!(re.is_match(b\"FoOQUUX\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = RegexSetBuilder::new([\"(?i)foo\", \"(?-i:bar)quux\"])",
          "        .case_insensitive(true)",
          "        .build()",
          "        .unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(re.is_match(b\"FoObarQuUx\"), true);",
          "    assert_eq!(re.is_match(b\"fooBARquux\"), false);"
        ],
        "code": [
          "{",
          "    let re = RegexSetBuilder::new([\"(?i)foo\", \"(?-i:bar)quux\"])",
          "        .case_insensitive(true)",
          "        .build()",
          "        .unwrap();",
          "    assert_eq!(re.is_match(b\"FoObarQuUx\"), true);",
          "    assert_eq!(re.is_match(b\"fooBARquux\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]