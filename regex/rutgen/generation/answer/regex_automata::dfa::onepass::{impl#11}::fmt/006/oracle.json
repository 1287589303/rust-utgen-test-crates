[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = StateID::new_unchecked(1);",
          "    let epsilons = Epsilons(0x00000000_000003FF); // Non-empty epsilons",
          "    let transition = Transition::new(true, state_id, epsilons);",
          "    let mut output = vec![];",
          "    let result = transition.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    assert!(!transition.is_dead());",
          "    assert_eq!(transition.state_id().as_usize(), 1);",
          "    assert!(transition.match_wins());",
          "    assert_eq!(output, b\"1-MW-{:?}\"); // Output includes epsilons information",
          "    assert!(!transition.epsilons().is_empty());",
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    let state_id = StateID::new_unchecked(1);",
          "    let epsilons = Epsilons(0x00000000_000003FF); // Non-empty epsilons",
          "    let transition = Transition::new(true, state_id, epsilons);",
          "    let mut output = vec![];",
          "    let result = transition.fmt(&mut output);",
          "    assert!(!transition.is_dead());",
          "    assert_eq!(transition.state_id().as_usize(), 1);",
          "    assert!(transition.match_wins());",
          "    assert_eq!(output, b\"1-MW-{:?}\"); // Output includes epsilons information",
          "    assert!(!transition.epsilons().is_empty());",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = StateID::new_unchecked(2097151);",
          "    let epsilons = Epsilons(0x00000000_000003FF); // Non-empty epsilons",
          "    let transition = Transition::new(true, state_id, epsilons);",
          "    let mut output = vec![];",
          "    let result = transition.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    assert!(!transition.is_dead());",
          "    assert_eq!(transition.state_id().as_usize(), 2097151);",
          "    assert!(transition.match_wins());",
          "    assert_eq!(output, b\"2097151-MW-0x00000000000003FF\");",
          "    assert!(!transition.epsilons().is_empty());",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), ());"
        ],
        "code": [
          "{",
          "    let state_id = StateID::new_unchecked(2097151);",
          "    let epsilons = Epsilons(0x00000000_000003FF); // Non-empty epsilons",
          "    let transition = Transition::new(true, state_id, epsilons);",
          "    let mut output = vec![];",
          "    let result = transition.fmt(&mut output);",
          "    assert!(!transition.is_dead());",
          "    assert_eq!(transition.state_id().as_usize(), 2097151);",
          "    assert!(transition.match_wins());",
          "    assert_eq!(output, b\"2097151-MW-0x00000000000003FF\");",
          "    assert!(!transition.epsilons().is_empty());",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), ());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = StateID::new_unchecked(100);",
          "    let epsilons = Epsilons(0x00000000_000003FF); // Non-empty epsilons",
          "    let transition = Transition::new(true, state_id, epsilons);",
          "    let mut output = vec![];",
          "    let result = transition.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    assert!(!transition.is_dead());",
          "    assert_eq!(transition.state_id().as_usize(), 100);",
          "    assert!(transition.match_wins());",
          "    assert!(result.is_ok());",
          "    assert!(!transition.epsilons().is_empty());",
          "    assert!(result.is_ok());",
          "    assert_eq!(output, b\"100-MW-0x3FF\".to_vec());"
        ],
        "code": [
          "{",
          "    let state_id = StateID::new_unchecked(100);",
          "    let epsilons = Epsilons(0x00000000_000003FF); // Non-empty epsilons",
          "    let transition = Transition::new(true, state_id, epsilons);",
          "    let mut output = vec![];",
          "    let result = transition.fmt(&mut output);",
          "    assert!(!transition.is_dead());",
          "    assert_eq!(transition.state_id().as_usize(), 100);",
          "    assert!(transition.match_wins());",
          "    assert!(result.is_ok());",
          "    assert!(!transition.epsilons().is_empty());",
          "    assert!(result.is_ok());",
          "    assert_eq!(output, b\"100-MW-0x3FF\".to_vec());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]