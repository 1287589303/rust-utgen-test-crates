[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start_map = StartByteMap { map: [Start::default(); 256] };",
          "    let start_table = StartTable {",
          "        table: vec![0u8; 16], // 8 bytes for both anchored and unanchored searches + 8 bytes for patterns",
          "        kind: StartKind::Both,",
          "        start_map,",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    ",
          "    let _ = start_table.table();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start_table.table().len(), 16);",
          "    assert_eq!(start_table.table()[0], 0);",
          "    assert_eq!(start_table.table()[1], 0);",
          "    assert_eq!(start_table.table()[2], 0);",
          "    assert_eq!(start_table.table()[3], 0);",
          "    assert_eq!(start_table.table()[4], 0);",
          "    assert_eq!(start_table.table()[5], 0);",
          "    assert_eq!(start_table.table()[6], 0);",
          "    assert_eq!(start_table.table()[7], 0);",
          "    assert_eq!(start_table.table()[8], 0);",
          "    assert_eq!(start_table.table()[9], 0);",
          "    assert_eq!(start_table.table()[10], 0);",
          "    assert_eq!(start_table.table()[11], 0);",
          "    assert_eq!(start_table.table()[12], 0);",
          "    assert_eq!(start_table.table()[13], 0);",
          "    assert_eq!(start_table.table()[14], 0);",
          "    assert_eq!(start_table.table()[15], 0);"
        ],
        "code": [
          "{",
          "    let start_map = StartByteMap { map: [Start::default(); 256] };",
          "    let start_table = StartTable {",
          "        table: vec![0u8; 16], // 8 bytes for both anchored and unanchored searches + 8 bytes for patterns",
          "        kind: StartKind::Both,",
          "        start_map,",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    ",
          "    let _ = start_table.table();",
          "    assert_eq!(start_table.table().len(), 16);",
          "    assert_eq!(start_table.table()[0], 0);",
          "    assert_eq!(start_table.table()[1], 0);",
          "    assert_eq!(start_table.table()[2], 0);",
          "    assert_eq!(start_table.table()[3], 0);",
          "    assert_eq!(start_table.table()[4], 0);",
          "    assert_eq!(start_table.table()[5], 0);",
          "    assert_eq!(start_table.table()[6], 0);",
          "    assert_eq!(start_table.table()[7], 0);",
          "    assert_eq!(start_table.table()[8], 0);",
          "    assert_eq!(start_table.table()[9], 0);",
          "    assert_eq!(start_table.table()[10], 0);",
          "    assert_eq!(start_table.table()[11], 0);",
          "    assert_eq!(start_table.table()[12], 0);",
          "    assert_eq!(start_table.table()[13], 0);",
          "    assert_eq!(start_table.table()[14], 0);",
          "    assert_eq!(start_table.table()[15], 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start_map = StartByteMap { map: [Start::default(); 256] };",
          "    let table_data: [u8; 12] = [0; 12]; // 8 bytes + 4 additional bytes",
          "    let start_table = StartTable {",
          "        table: &table_data,",
          "        kind: StartKind::Unanchored,",
          "        start_map,",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    ",
          "    let _ = start_table.table();",
          "}"
        ],
        "oracle": [
          "    let start_table = StartTable {",
          "    table: &table_data,",
          "    kind: StartKind::Unanchored,",
          "    start_map,",
          "    stride: 1,",
          "    pattern_len: Some(1),",
          "    universal_start_unanchored: None,",
          "    universal_start_anchored: None,",
          "    };",
          "    assert_eq!(start_table.table(), &table_data);"
        ],
        "code": [
          "{",
          "    let start_map = StartByteMap { map: [Start::default(); 256] };",
          "    let table_data: [u8; 12] = [0; 12]; // 8 bytes + 4 additional bytes",
          "    let start_table = StartTable {",
          "        table: &table_data,",
          "        kind: StartKind::Unanchored,",
          "        start_map,",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    ",
          "    let _ = start_table.table();",
          "    let start_table = StartTable {",
          "    table: &table_data,",
          "    kind: StartKind::Unanchored,",
          "    start_map,",
          "    stride: 1,",
          "    pattern_len: Some(1),",
          "    universal_start_unanchored: None,",
          "    universal_start_anchored: None,",
          "    };",
          "    assert_eq!(start_table.table(), &table_data);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start_map = StartByteMap { map: [Start::default(); 256] };",
          "    let start_table = StartTable {",
          "        table: vec![0u8; 8], // minimum size boundary",
          "        kind: StartKind::Anchored,",
          "        start_map,",
          "        stride: 0,",
          "        pattern_len: None,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    ",
          "    let _ = start_table.table();",
          "}"
        ],
        "oracle": [
          "    let start_map = StartByteMap { map: [Start::default(); 256] };",
          "    let start_table = StartTable { table: vec![0u8; 8], kind: StartKind::Anchored, start_map, stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None };",
          "    assert_eq!(start_table.table(), start_table.table.as_ref());",
          "    assert_eq!(start_table.table().len(), 8);"
        ],
        "code": [
          "{",
          "    let start_map = StartByteMap { map: [Start::default(); 256] };",
          "    let start_table = StartTable {",
          "        table: vec![0u8; 8], // minimum size boundary",
          "        kind: StartKind::Anchored,",
          "        start_map,",
          "        stride: 0,",
          "        pattern_len: None,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    ",
          "    let _ = start_table.table();",
          "    let start_map = StartByteMap { map: [Start::default(); 256] };",
          "    let start_table = StartTable { table: vec![0u8; 8], kind: StartKind::Anchored, start_map, stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None };",
          "    assert_eq!(start_table.table(), start_table.table.as_ref());",
          "    assert_eq!(start_table.table().len(), 8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start_map = StartByteMap { map: [Start::default(); 256] };",
          "    let start_table = StartTable {",
          "        table: vec![0u8; 8], // 8 bytes for anchored and unanchored, no patterns",
          "        kind: StartKind::Both,",
          "        start_map,",
          "        stride: 0,",
          "        pattern_len: Some(0),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let _ = start_table.table();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start_table.table(), vec![0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8].as_slice());",
          "    assert_eq!(start_table.len(), 8);",
          "    assert!(start_table.pattern_len.is_some());",
          "    assert_eq!(start_table.kind, StartKind::Both);",
          "    assert!(start_table.universal_start_unanchored.is_none());",
          "    assert!(start_table.universal_start_anchored.is_none());"
        ],
        "code": [
          "{",
          "    let start_map = StartByteMap { map: [Start::default(); 256] };",
          "    let start_table = StartTable {",
          "        table: vec![0u8; 8], // 8 bytes for anchored and unanchored, no patterns",
          "        kind: StartKind::Both,",
          "        start_map,",
          "        stride: 0,",
          "        pattern_len: Some(0),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let _ = start_table.table();",
          "    assert_eq!(start_table.table(), vec![0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8].as_slice());",
          "    assert_eq!(start_table.len(), 8);",
          "    assert!(start_table.pattern_len.is_some());",
          "    assert_eq!(start_table.kind, StartKind::Both);",
          "    assert!(start_table.universal_start_unanchored.is_none());",
          "    assert!(start_table.universal_start_anchored.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]