[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let trie = LiteralTrie::forward();",
          "}"
        ],
        "oracle": [
          "    let trie = LiteralTrie::forward();",
          "    assert_eq!(trie.states.len(), 1);",
          "    assert!(trie.states[0].transitions.is_empty());",
          "    assert!(trie.states[0].chunks.is_empty());",
          "    assert!(!trie.rev);"
        ],
        "code": [
          "{",
          "    let trie = LiteralTrie::forward();",
          "    let trie = LiteralTrie::forward();",
          "    assert_eq!(trie.states.len(), 1);",
          "    assert!(trie.states[0].transitions.is_empty());",
          "    assert!(trie.states[0].chunks.is_empty());",
          "    assert!(!trie.rev);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let trie = LiteralTrie::forward();",
          "    let state_count = trie.states.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state_count, 1);",
          "    assert!(trie.rev == false);",
          "    assert!(trie.states[0].transitions.is_empty());",
          "    assert!(trie.states[0].chunks.is_empty());"
        ],
        "code": [
          "{",
          "    let trie = LiteralTrie::forward();",
          "    let state_count = trie.states.len();",
          "    assert_eq!(state_count, 1);",
          "    assert!(trie.rev == false);",
          "    assert!(trie.states[0].transitions.is_empty());",
          "    assert!(trie.states[0].chunks.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let trie = LiteralTrie::forward();",
          "    let rev_status = trie.rev;",
          "}"
        ],
        "oracle": [
          "    let trie = LiteralTrie::forward();",
          "    assert_eq!(trie.states.len(), 1);",
          "    assert!(trie.states[0].transitions.is_empty());",
          "    assert_eq!(trie.rev, false);",
          "    assert!(trie.states[0].chunks.is_empty());"
        ],
        "code": [
          "{",
          "    let trie = LiteralTrie::forward();",
          "    let rev_status = trie.rev;",
          "    let trie = LiteralTrie::forward();",
          "    assert_eq!(trie.states.len(), 1);",
          "    assert!(trie.states[0].transitions.is_empty());",
          "    assert_eq!(trie.rev, false);",
          "    assert!(trie.states[0].chunks.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]