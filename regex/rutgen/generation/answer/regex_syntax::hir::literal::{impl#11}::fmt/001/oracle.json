[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lit = Literal::exact(Vec::new());",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", lit));",
          "}"
        ],
        "oracle": [
          "    let lit = Literal::exact(Vec::new());",
          "    let result = core::fmt::format(format_args!(\"{:?}\", lit));",
          "    assert_eq!(result, \"E([])\");"
        ],
        "code": [
          "{",
          "    let lit = Literal::exact(Vec::new());",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", lit));",
          "    let lit = Literal::exact(Vec::new());",
          "    let result = core::fmt::format(format_args!(\"{:?}\", lit));",
          "    assert_eq!(result, \"E([])\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lit = Literal::exact(Vec::from([0x01]));",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", lit));",
          "}"
        ],
        "oracle": [
          "    let lit = Literal::exact(Vec::from([0x01]));",
          "    assert_eq!(lit.is_exact(), true);",
          "    assert_eq!(lit.as_bytes(), &[0x01]);",
          "    assert_eq!(core::fmt::format(format_args!(\"{:?}\", lit)), \"E(01)\");"
        ],
        "code": [
          "{",
          "    let lit = Literal::exact(Vec::from([0x01]));",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", lit));",
          "    let lit = Literal::exact(Vec::from([0x01]));",
          "    assert_eq!(lit.is_exact(), true);",
          "    assert_eq!(lit.as_bytes(), &[0x01]);",
          "    assert_eq!(core::fmt::format(format_args!(\"{:?}\", lit)), \"E(01)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lit = Literal::exact(Vec::from([0x01, 0x02, 0x03]));",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", lit));",
          "}"
        ],
        "oracle": [
          "    let lit = Literal::exact(Vec::from([0x01, 0x02, 0x03]));",
          "    assert_eq!(lit.is_exact(), true);",
          "    assert_eq!(lit.as_bytes(), &[0x01, 0x02, 0x03]);",
          "    let formatted = core::fmt::format(format_args!(\"{:?}\", lit));",
          "    assert!(formatted.contains(\"E\"));",
          "    assert!(!formatted.contains(\"I\"));"
        ],
        "code": [
          "{",
          "    let lit = Literal::exact(Vec::from([0x01, 0x02, 0x03]));",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", lit));",
          "    let lit = Literal::exact(Vec::from([0x01, 0x02, 0x03]));",
          "    assert_eq!(lit.is_exact(), true);",
          "    assert_eq!(lit.as_bytes(), &[0x01, 0x02, 0x03]);",
          "    let formatted = core::fmt::format(format_args!(\"{:?}\", lit));",
          "    assert!(formatted.contains(\"E\"));",
          "    assert!(!formatted.contains(\"I\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]