[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal = Literal::inexact(vec![]);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = literal.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(literal.is_exact(), false);",
          "    assert_eq!(formatter.to_string(), \"I\");",
          "    assert_eq!(literal.as_bytes().len(), 0);",
          "    assert!(literal.is_empty());",
          "    assert!(formatter.write_str(\"I\").is_ok());"
        ],
        "code": [
          "{",
          "    let literal = Literal::inexact(vec![]);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = literal.fmt(&mut formatter);",
          "    assert_eq!(literal.is_exact(), false);",
          "    assert_eq!(formatter.to_string(), \"I\");",
          "    assert_eq!(literal.as_bytes().len(), 0);",
          "    assert!(literal.is_empty());",
          "    assert!(formatter.write_str(\"I\").is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal = Literal::inexact(vec![42]);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = literal.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(literal.as_bytes(), &[42]);",
          "    assert_eq!(literal.is_exact(), false);",
          "    assert!(formatter.output().contains(\"I\"));"
        ],
        "code": [
          "{",
          "    let literal = Literal::inexact(vec![42]);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = literal.fmt(&mut formatter);",
          "    assert_eq!(literal.as_bytes(), &[42]);",
          "    assert_eq!(literal.is_exact(), false);",
          "    assert!(formatter.output().contains(\"I\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal = Literal::inexact(vec![1, 2, 3, 4, 5]);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = literal.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(literal.is_exact(), false);",
          "    assert_eq!(formatter.debug_tuple(\"I\").field(&crate::debug::Bytes(literal.as_bytes())).finish(), Ok(()));",
          "    assert_eq!(formatter.debug_tuple(\"I\").field(&crate::debug::Bytes(literal.as_bytes())).finish().is_ok(), true);",
          "    assert_eq!(literal.as_bytes(), &[1, 2, 3, 4, 5]);",
          "    assert_eq!(literal.len(), 5);",
          "    assert_eq!(literal.is_empty(), false);"
        ],
        "code": [
          "{",
          "    let literal = Literal::inexact(vec![1, 2, 3, 4, 5]);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = literal.fmt(&mut formatter);",
          "    assert_eq!(literal.is_exact(), false);",
          "    assert_eq!(formatter.debug_tuple(\"I\").field(&crate::debug::Bytes(literal.as_bytes())).finish(), Ok(()));",
          "    assert_eq!(formatter.debug_tuple(\"I\").field(&crate::debug::Bytes(literal.as_bytes())).finish().is_ok(), true);",
          "    assert_eq!(literal.as_bytes(), &[1, 2, 3, 4, 5]);",
          "    assert_eq!(literal.len(), 5);",
          "    assert_eq!(literal.is_empty(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal = Literal::inexact(vec![b'!', b'@', b'#', b'$']);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = literal.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    let literal = Literal::inexact(vec![b'!', b'@', b'#', b'$']);",
          "    let result = literal.fmt(&mut formatter);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(formatter.output(), \"I\");"
        ],
        "code": [
          "{",
          "    let literal = Literal::inexact(vec![b'!', b'@', b'#', b'$']);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = literal.fmt(&mut formatter);",
          "    let literal = Literal::inexact(vec![b'!', b'@', b'#', b'$']);",
          "    let result = literal.fmt(&mut formatter);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(formatter.output(), \"I\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]