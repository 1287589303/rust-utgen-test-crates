[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_id = PatternID(0);",
          "    let epsilons = PatternEpsilons(0x00000000_00000000);",
          "    ",
          "    let result = epsilons.set_pattern_id(pattern_id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, PatternEpsilons(0x00000000_00000000 | (0x00000000_00000000 & PatternEpsilons::EPSILONS_MASK)));",
          "    assert_eq!(result.pattern_id(), Some(pattern_id));",
          "    assert!(result.is_empty());",
          "    assert_eq!(result.epsilons(), Epsilons::default());"
        ],
        "code": [
          "{",
          "    let pattern_id = PatternID(0);",
          "    let epsilons = PatternEpsilons(0x00000000_00000000);",
          "    ",
          "    let result = epsilons.set_pattern_id(pattern_id);",
          "    assert_eq!(result, PatternEpsilons(0x00000000_00000000 | (0x00000000_00000000 & PatternEpsilons::EPSILONS_MASK)));",
          "    assert_eq!(result.pattern_id(), Some(pattern_id));",
          "    assert!(result.is_empty());",
          "    assert_eq!(result.epsilons(), Epsilons::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_id = PatternID(0xFFFFFC00);",
          "    let epsilons = PatternEpsilons(0x00000000_000003FF_FFFFFFFF);",
          "    ",
          "    let result = epsilons.set_pattern_id(pattern_id);",
          "}"
        ],
        "oracle": [
          "    let pattern_id = PatternID(0xFFFFFC00);",
          "    let epsilons = PatternEpsilons(0x00000000_000003FF_FFFFFFFF);",
          "    let expected_result = PatternEpsilons((pattern_id.as_u64() << PatternEpsilons::PATTERN_ID_SHIFT) | (epsilons.0 & PatternEpsilons::EPSILONS_MASK));",
          "    assert_eq!(result, expected_result);"
        ],
        "code": [
          "{",
          "    let pattern_id = PatternID(0xFFFFFC00);",
          "    let epsilons = PatternEpsilons(0x00000000_000003FF_FFFFFFFF);",
          "    ",
          "    let result = epsilons.set_pattern_id(pattern_id);",
          "    let pattern_id = PatternID(0xFFFFFC00);",
          "    let epsilons = PatternEpsilons(0x00000000_000003FF_FFFFFFFF);",
          "    let expected_result = PatternEpsilons((pattern_id.as_u64() << PatternEpsilons::PATTERN_ID_SHIFT) | (epsilons.0 & PatternEpsilons::EPSILONS_MASK));",
          "    assert_eq!(result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_id = PatternID(0);",
          "    let epsilons = PatternEpsilons::empty();",
          "    ",
          "    let result = epsilons.set_pattern_id(pattern_id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, PatternEpsilons((0 << PatternEpsilons::PATTERN_ID_SHIFT) | (epsilons.0 & PatternEpsilons::EPSILONS_MASK)));",
          "    assert!(result.is_empty() == epsilons.is_empty());",
          "    assert!(result.pattern_id() == epsilons.pattern_id());",
          "    assert_eq!(result.epsilons(), epsilons.epsilons());",
          "    assert_eq!(result.0 & PatternEpsilons::PATTERN_ID_MASK, 0);"
        ],
        "code": [
          "{",
          "    let pattern_id = PatternID(0);",
          "    let epsilons = PatternEpsilons::empty();",
          "    ",
          "    let result = epsilons.set_pattern_id(pattern_id);",
          "    assert_eq!(result, PatternEpsilons((0 << PatternEpsilons::PATTERN_ID_SHIFT) | (epsilons.0 & PatternEpsilons::EPSILONS_MASK)));",
          "    assert!(result.is_empty() == epsilons.is_empty());",
          "    assert!(result.pattern_id() == epsilons.pattern_id());",
          "    assert_eq!(result.epsilons(), epsilons.epsilons());",
          "    assert_eq!(result.0 & PatternEpsilons::PATTERN_ID_MASK, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_id = PatternID(0x7FFFFC00);",
          "    let epsilons = PatternEpsilons(0x00000000_00000100);",
          "    ",
          "    let result = epsilons.set_pattern_id(pattern_id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.0, (pattern_id.as_u64() << PatternEpsilons::PATTERN_ID_SHIFT) | (epsilons.0 & PatternEpsilons::EPSILONS_MASK));"
        ],
        "code": [
          "{",
          "    let pattern_id = PatternID(0x7FFFFC00);",
          "    let epsilons = PatternEpsilons(0x00000000_00000100);",
          "    ",
          "    let result = epsilons.set_pattern_id(pattern_id);",
          "    assert_eq!(result.0, (pattern_id.as_u64() << PatternEpsilons::PATTERN_ID_SHIFT) | (epsilons.0 & PatternEpsilons::EPSILONS_MASK));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_id = PatternID(0xFFFFFC00);",
          "    let epsilons = PatternEpsilons(0x00000000_00000200);",
          "    ",
          "    let result = epsilons.set_pattern_id(pattern_id);",
          "}"
        ],
        "oracle": [
          "    plaintext",
          "    assert_eq!(result.0, (pattern_id.as_u64() << PatternEpsilons::PATTERN_ID_SHIFT) | (epsilons.0 & PatternEpsilons::EPSILONS_MASK));",
          "    assert!(result.is_empty() == false);",
          "    assert!(result.pattern_id().is_some());"
        ],
        "code": [
          "{",
          "    let pattern_id = PatternID(0xFFFFFC00);",
          "    let epsilons = PatternEpsilons(0x00000000_00000200);",
          "    ",
          "    let result = epsilons.set_pattern_id(pattern_id);",
          "    plaintext",
          "    assert_eq!(result.0, (pattern_id.as_u64() << PatternEpsilons::PATTERN_ID_SHIFT) | (epsilons.0 & PatternEpsilons::EPSILONS_MASK));",
          "    assert!(result.is_empty() == false);",
          "    assert!(result.pattern_id().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]