[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA::new(\"(a)\").unwrap();",
          "    nfa.has_capture();",
          "}"
        ],
        "oracle": [
          "    assert!(nfa.has_capture());",
          "    let nfa = NFA::new(\"a\").unwrap();",
          "    assert!(nfa.has_capture());",
          "    let nfa = NFA::compiler().configure(NFA::config().which_captures(WhichCaptures::None)).build(\"(a)\").unwrap();",
          "    assert!(!nfa.has_capture());"
        ],
        "code": [
          "{",
          "    let nfa = NFA::new(\"(a)\").unwrap();",
          "    nfa.has_capture();",
          "    assert!(nfa.has_capture());",
          "    let nfa = NFA::new(\"a\").unwrap();",
          "    assert!(nfa.has_capture());",
          "    let nfa = NFA::compiler().configure(NFA::config().which_captures(WhichCaptures::None)).build(\"(a)\").unwrap();",
          "    assert!(!nfa.has_capture());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA::new(\"a\").unwrap();",
          "    nfa.has_capture();",
          "}"
        ],
        "oracle": [
          "    assert!(nfa.has_capture() == true);",
          "    let nfa = NFA::new(\"(a)\").unwrap();",
          "    assert!(nfa.has_capture() == true);",
          "    let nfa = NFA::compiler()",
          "    .configure(NFA::config().which_captures(WhichCaptures::None))",
          "    .build(\"(a)\").unwrap();",
          "    assert!(nfa.has_capture() == false);"
        ],
        "code": [
          "{",
          "    let nfa = NFA::new(\"a\").unwrap();",
          "    nfa.has_capture();",
          "    assert!(nfa.has_capture() == true);",
          "    let nfa = NFA::new(\"(a)\").unwrap();",
          "    assert!(nfa.has_capture() == true);",
          "    let nfa = NFA::compiler()",
          "    .configure(NFA::config().which_captures(WhichCaptures::None))",
          "    .build(\"(a)\").unwrap();",
          "    assert!(nfa.has_capture() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA::compiler()",
          "        .configure(NFA::config().which_captures(WhichCaptures::None))",
          "        .build(\"(a)\").unwrap();",
          "    nfa.has_capture();",
          "}"
        ],
        "oracle": [
          "    assert!(!nfa.has_capture());",
          "    let nfa = NFA::new(\"(a)\").unwrap();",
          "    assert!(nfa.has_capture());",
          "    let nfa = NFA::new(\"a\").unwrap();",
          "    assert!(nfa.has_capture());"
        ],
        "code": [
          "{",
          "    let nfa = NFA::compiler()",
          "        .configure(NFA::config().which_captures(WhichCaptures::None))",
          "        .build(\"(a)\").unwrap();",
          "    nfa.has_capture();",
          "    assert!(!nfa.has_capture());",
          "    let nfa = NFA::new(\"(a)\").unwrap();",
          "    assert!(nfa.has_capture());",
          "    let nfa = NFA::new(\"a\").unwrap();",
          "    assert!(nfa.has_capture());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA::new(\"((a)(b))\").unwrap();",
          "    nfa.has_capture();",
          "}"
        ],
        "oracle": [
          "    assert!(nfa.has_capture());",
          "    assert_eq!(nfa.has_capture(), true);",
          "    ",
          "    let nfa = NFA::new(\"abc\").unwrap();",
          "    assert!(!nfa.has_capture());",
          "    assert_eq!(nfa.has_capture(), false);",
          "    ",
          "    let nfa = NFA::new(\"(a)\").unwrap();",
          "    assert!(nfa.has_capture());",
          "    assert_eq!(nfa.has_capture(), true);",
          "    ",
          "    let nfa = NFA::compiler()",
          "    .configure(NFA::config().which_captures(WhichCaptures::None))",
          "    .build(\"(a)\").unwrap();",
          "    assert!(!nfa.has_capture());",
          "    assert_eq!(nfa.has_capture(), false);"
        ],
        "code": [
          "{",
          "    let nfa = NFA::new(\"((a)(b))\").unwrap();",
          "    nfa.has_capture();",
          "    assert!(nfa.has_capture());",
          "    assert_eq!(nfa.has_capture(), true);",
          "    ",
          "    let nfa = NFA::new(\"abc\").unwrap();",
          "    assert!(!nfa.has_capture());",
          "    assert_eq!(nfa.has_capture(), false);",
          "    ",
          "    let nfa = NFA::new(\"(a)\").unwrap();",
          "    assert!(nfa.has_capture());",
          "    assert_eq!(nfa.has_capture(), true);",
          "    ",
          "    let nfa = NFA::compiler()",
          "    .configure(NFA::config().which_captures(WhichCaptures::None))",
          "    .build(\"(a)\").unwrap();",
          "    assert!(!nfa.has_capture());",
          "    assert_eq!(nfa.has_capture(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA::new(\"\").unwrap();",
          "    nfa.has_capture();",
          "}"
        ],
        "oracle": [
          "    assert!(nfa.has_capture() == false);",
          "    let nfa = NFA::new(\"(a)\").unwrap();",
          "    assert!(nfa.has_capture() == true);",
          "    let nfa = NFA::new(\"a\").unwrap();",
          "    assert!(nfa.has_capture() == true);",
          "    let nfa = NFA::compiler().configure(NFA::config().which_captures(WhichCaptures::None)).build(\"(a)\").unwrap();",
          "    assert!(nfa.has_capture() == false);"
        ],
        "code": [
          "{",
          "    let nfa = NFA::new(\"\").unwrap();",
          "    nfa.has_capture();",
          "    assert!(nfa.has_capture() == false);",
          "    let nfa = NFA::new(\"(a)\").unwrap();",
          "    assert!(nfa.has_capture() == true);",
          "    let nfa = NFA::new(\"a\").unwrap();",
          "    assert!(nfa.has_capture() == true);",
          "    let nfa = NFA::compiler().configure(NFA::config().which_captures(WhichCaptures::None)).build(\"(a)\").unwrap();",
          "    assert!(nfa.has_capture() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA::new(\"((a(bc)d)ef)\").unwrap();",
          "    nfa.has_capture();",
          "}"
        ],
        "oracle": [
          "    assert!(nfa.has_capture() == true);",
          "    ",
          "    let nfa = NFA::new(\"a\").unwrap();",
          "    assert!(nfa.has_capture() == true);",
          "    ",
          "    let nfa = NFA::compiler()",
          "    .configure(NFA::config().which_captures(WhichCaptures::None))",
          "    .build(\"(a)\").unwrap();",
          "    assert!(nfa.has_capture() == false);",
          "    ",
          "    let nfa = NFA::never_match();",
          "    assert!(nfa.has_capture() == false);",
          "    ",
          "    let nfa = NFA::always_match();",
          "    assert!(nfa.has_capture() == false);"
        ],
        "code": [
          "{",
          "    let nfa = NFA::new(\"((a(bc)d)ef)\").unwrap();",
          "    nfa.has_capture();",
          "    assert!(nfa.has_capture() == true);",
          "    ",
          "    let nfa = NFA::new(\"a\").unwrap();",
          "    assert!(nfa.has_capture() == true);",
          "    ",
          "    let nfa = NFA::compiler()",
          "    .configure(NFA::config().which_captures(WhichCaptures::None))",
          "    .build(\"(a)\").unwrap();",
          "    assert!(nfa.has_capture() == false);",
          "    ",
          "    let nfa = NFA::never_match();",
          "    assert!(nfa.has_capture() == false);",
          "    ",
          "    let nfa = NFA::always_match();",
          "    assert!(nfa.has_capture() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]