[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: &[(char, &'static [char])] = &[",
          "        ('a', &['A']),",
          "        ('b', &['B']),",
          "        ('c', &['C']),",
          "        ('d', &['D']),",
          "    ];",
          "    ",
          "    let mut folder = SimpleCaseFolder {",
          "        table,",
          "        last: Some('a'),",
          "        next: 0,",
          "    };",
          "    ",
          "    folder.mapping('b'); // last updated to 'b'",
          "    ",
          "    let result = folder.mapping('e'); // last updated to 'e', returns &[]",
          "}"
        ],
        "oracle": [
          "    assert_eq!(folder.last, Some('b'));",
          "    assert_eq!(folder.next, 1);",
          "    assert_eq!(result, &[]);",
          "    assert!(folder.last > Some('a'));",
          "    assert!(folder.last > Some('b'));",
          "    assert!(folder.last > Some('c'));",
          "    assert!(folder.last > Some('d'));",
          "    assert!(folder.next < folder.table.len());",
          "    assert!(folder.get('e').is_err());"
        ],
        "code": [
          "{",
          "    let table: &[(char, &'static [char])] = &[",
          "        ('a', &['A']),",
          "        ('b', &['B']),",
          "        ('c', &['C']),",
          "        ('d', &['D']),",
          "    ];",
          "    ",
          "    let mut folder = SimpleCaseFolder {",
          "        table,",
          "        last: Some('a'),",
          "        next: 0,",
          "    };",
          "    ",
          "    folder.mapping('b'); // last updated to 'b'",
          "    ",
          "    let result = folder.mapping('e'); // last updated to 'e', returns &[]",
          "    assert_eq!(folder.last, Some('b'));",
          "    assert_eq!(folder.next, 1);",
          "    assert_eq!(result, &[]);",
          "    assert!(folder.last > Some('a'));",
          "    assert!(folder.last > Some('b'));",
          "    assert!(folder.last > Some('c'));",
          "    assert!(folder.last > Some('d'));",
          "    assert!(folder.next < folder.table.len());",
          "    assert!(folder.get('e').is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: &[(char, &'static [char])] = &[",
          "        ('a', &['A']),",
          "        ('b', &['B']),",
          "        ('c', &['C']),",
          "    ];",
          "    ",
          "    let mut folder = SimpleCaseFolder {",
          "        table,",
          "        last: Some('b'),",
          "        next: 1,",
          "    };",
          "    ",
          "    let result = folder.mapping('d'); // last updated to 'd', returns &[]",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, &[]);",
          "    assert_eq!(folder.last, Some('d'));",
          "    assert_eq!(folder.next, 1);",
          "    assert!(folder.get('d').is_err());",
          "    assert!(folder.get('d').unwrap_or(0) > folder.next);"
        ],
        "code": [
          "{",
          "    let table: &[(char, &'static [char])] = &[",
          "        ('a', &['A']),",
          "        ('b', &['B']),",
          "        ('c', &['C']),",
          "    ];",
          "    ",
          "    let mut folder = SimpleCaseFolder {",
          "        table,",
          "        last: Some('b'),",
          "        next: 1,",
          "    };",
          "    ",
          "    let result = folder.mapping('d'); // last updated to 'd', returns &[]",
          "    assert_eq!(result, &[]);",
          "    assert_eq!(folder.last, Some('d'));",
          "    assert_eq!(folder.next, 1);",
          "    assert!(folder.get('d').is_err());",
          "    assert!(folder.get('d').unwrap_or(0) > folder.next);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: &[(char, &'static [char])] = &[",
          "        ('x', &['X']),",
          "        ('y', &['Y']),",
          "        ('z', &['Z']),",
          "    ];",
          "    ",
          "    let mut folder = SimpleCaseFolder {",
          "        table,",
          "        last: Some('x'),",
          "        next: 0,",
          "    };",
          "    ",
          "    let result = folder.mapping('z'); // last updated to 'z', returns &[]",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, &[]);",
          "    assert_eq!(folder.last, Some('z'));",
          "    assert_eq!(folder.next, 1);",
          "    assert!(folder.get('z').is_err());",
          "    assert!(folder.get('y').is_err());"
        ],
        "code": [
          "{",
          "    let table: &[(char, &'static [char])] = &[",
          "        ('x', &['X']),",
          "        ('y', &['Y']),",
          "        ('z', &['Z']),",
          "    ];",
          "    ",
          "    let mut folder = SimpleCaseFolder {",
          "        table,",
          "        last: Some('x'),",
          "        next: 0,",
          "    };",
          "    ",
          "    let result = folder.mapping('z'); // last updated to 'z', returns &[]",
          "    assert_eq!(result, &[]);",
          "    assert_eq!(folder.last, Some('z'));",
          "    assert_eq!(folder.next, 1);",
          "    assert!(folder.get('z').is_err());",
          "    assert!(folder.get('y').is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]