[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: &'static [(char, &'static [char])] = &[('a', &['A']), ('b', &['B'])];",
          "    let mut case_folder = SimpleCaseFolder {",
          "        table,",
          "        last: Some('a'),",
          "        next: 0,",
          "    };",
          "    let result = case_folder.mapping('a');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, &[]);"
        ],
        "code": [
          "{",
          "    let table: &'static [(char, &'static [char])] = &[('a', &['A']), ('b', &['B'])];",
          "    let mut case_folder = SimpleCaseFolder {",
          "        table,",
          "        last: Some('a'),",
          "        next: 0,",
          "    };",
          "    let result = case_folder.mapping('a');",
          "    assert_eq!(result, &[]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: &'static [(char, &'static [char])] = &[('a', &['A']), ('b', &['B'])];",
          "    let mut case_folder = SimpleCaseFolder {",
          "        table,",
          "        last: Some('b'),",
          "        next: 1,",
          "    };",
          "    let result = case_folder.mapping('b');",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_empty());",
          "    assert_eq!(case_folder.last, Some('b'));",
          "    assert_eq!(case_folder.next, 1);",
          "    assert_eq!(case_folder.table.len(), 2);"
        ],
        "code": [
          "{",
          "    let table: &'static [(char, &'static [char])] = &[('a', &['A']), ('b', &['B'])];",
          "    let mut case_folder = SimpleCaseFolder {",
          "        table,",
          "        last: Some('b'),",
          "        next: 1,",
          "    };",
          "    let result = case_folder.mapping('b');",
          "    assert!(result.is_empty());",
          "    assert_eq!(case_folder.last, Some('b'));",
          "    assert_eq!(case_folder.next, 1);",
          "    assert_eq!(case_folder.table.len(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: &'static [(char, &'static [char])] = &[('x', &['X']), ('y', &['Y'])];",
          "    let mut case_folder = SimpleCaseFolder {",
          "        table,",
          "        last: Some('y'),",
          "        next: 1,",
          "    };",
          "    let result = case_folder.mapping('y');",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_empty());",
          "    assert_eq!(case_folder.last, Some('y'));",
          "    assert_eq!(case_folder.next, 1);"
        ],
        "code": [
          "{",
          "    let table: &'static [(char, &'static [char])] = &[('x', &['X']), ('y', &['Y'])];",
          "    let mut case_folder = SimpleCaseFolder {",
          "        table,",
          "        last: Some('y'),",
          "        next: 1,",
          "    };",
          "    let result = case_folder.mapping('y');",
          "    assert!(result.is_empty());",
          "    assert_eq!(case_folder.last, Some('y'));",
          "    assert_eq!(case_folder.next, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]