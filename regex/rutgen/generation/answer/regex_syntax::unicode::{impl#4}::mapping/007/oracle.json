[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: &[(char, &'static [char])] = &[('a', &['A']), ('b', &['B'])];",
          "    let mut case_folder = SimpleCaseFolder {",
          "        table,",
          "        last: Some('a'),",
          "        next: 0,",
          "    };",
          "    let result = case_folder.mapping('a');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, &['A']);"
        ],
        "code": [
          "{",
          "    let table: &[(char, &'static [char])] = &[('a', &['A']), ('b', &['B'])];",
          "    let mut case_folder = SimpleCaseFolder {",
          "        table,",
          "        last: Some('a'),",
          "        next: 0,",
          "    };",
          "    let result = case_folder.mapping('a');",
          "    assert_eq!(result, &['A']);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: &[(char, &'static [char])] = &[('c', &['C']), ('d', &['D'])];",
          "    let mut case_folder = SimpleCaseFolder {",
          "        table,",
          "        last: Some('c'),",
          "        next: 0,",
          "    };",
          "    let result = case_folder.mapping('c');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, &['C']);"
        ],
        "code": [
          "{",
          "    let table: &[(char, &'static [char])] = &[('c', &['C']), ('d', &['D'])];",
          "    let mut case_folder = SimpleCaseFolder {",
          "        table,",
          "        last: Some('c'),",
          "        next: 0,",
          "    };",
          "    let result = case_folder.mapping('c');",
          "    assert_eq!(result, &['C']);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: &[(char, &'static [char])] = &[('x', &['X']), ('y', &['Y']), ('z', &['Z'])];",
          "    let mut case_folder = SimpleCaseFolder {",
          "        table,",
          "        last: Some('x'),",
          "        next: 1,",
          "    };",
          "    let result = case_folder.mapping('y');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, &['Y']);"
        ],
        "code": [
          "{",
          "    let table: &[(char, &'static [char])] = &[('x', &['X']), ('y', &['Y']), ('z', &['Z'])];",
          "    let mut case_folder = SimpleCaseFolder {",
          "        table,",
          "        last: Some('x'),",
          "        next: 1,",
          "    };",
          "    let result = case_folder.mapping('y');",
          "    assert_eq!(result, &['Y']);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]