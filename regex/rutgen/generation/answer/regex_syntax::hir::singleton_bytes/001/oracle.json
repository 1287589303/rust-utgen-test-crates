[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Literal(Vec<u8>);",
          "    let hirs = vec![",
          "        Hir {",
          "            kind: HirKind::Class(Class), // Non-literal kind",
          "            props: Properties,",
          "        },",
          "        Hir {",
          "            kind: HirKind::Repetition(Repetition), // Non-literal kind",
          "            props: Properties,",
          "        },",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal(vec![0x61])), // Literal kind",
          "                    props: Properties,",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Look(Look), // Non-literal kind",
          "                    props: Properties,",
          "                },",
          "            ]),",
          "            props: Properties,",
          "        },",
          "    ];",
          "    let result = singleton_bytes(&hirs);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    struct Literal(Vec<u8>);",
          "    let hirs = vec![",
          "        Hir {",
          "            kind: HirKind::Class(Class), // Non-literal kind",
          "            props: Properties,",
          "        },",
          "        Hir {",
          "            kind: HirKind::Repetition(Repetition), // Non-literal kind",
          "            props: Properties,",
          "        },",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal(vec![0x61])), // Literal kind",
          "                    props: Properties,",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Look(Look), // Non-literal kind",
          "                    props: Properties,",
          "                },",
          "            ]),",
          "            props: Properties,",
          "        },",
          "    ];",
          "    let result = singleton_bytes(&hirs);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Literal(Vec<u8>);",
          "    let hirs = vec![",
          "        Hir {",
          "            kind: HirKind::Look(Look), // Non-literal kind",
          "            props: Properties,",
          "        },",
          "        Hir {",
          "            kind: HirKind::Class(Class), // Non-literal kind",
          "            props: Properties,",
          "        },",
          "        Hir {",
          "            kind: HirKind::Capture(Capture), // Non-literal kind",
          "            props: Properties,",
          "        },",
          "    ];",
          "    let result = singleton_bytes(&hirs);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    struct Literal(Vec<u8>);",
          "    let hirs = vec![",
          "        Hir {",
          "            kind: HirKind::Look(Look), // Non-literal kind",
          "            props: Properties,",
          "        },",
          "        Hir {",
          "            kind: HirKind::Class(Class), // Non-literal kind",
          "            props: Properties,",
          "        },",
          "        Hir {",
          "            kind: HirKind::Capture(Capture), // Non-literal kind",
          "            props: Properties,",
          "        },",
          "    ];",
          "    let result = singleton_bytes(&hirs);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]