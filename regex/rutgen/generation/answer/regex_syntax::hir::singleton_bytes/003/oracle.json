[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Literal {",
          "        bytes: Vec<u8>,",
          "    }",
          "",
          "    let hirs = vec![",
          "        Hir {",
          "            kind: HirKind::Literal(Literal { bytes: vec![1] }),",
          "            props: Properties {},",
          "        },",
          "        Hir {",
          "            kind: HirKind::Literal(Literal { bytes: vec![2] }),",
          "            props: Properties {},",
          "        },",
          "        Hir {",
          "            kind: HirKind::Literal(Literal { bytes: vec![3] }),",
          "            props: Properties {},",
          "        },",
          "    ];",
          "",
          "    let result = singleton_bytes(&hirs);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(vec![1, 2, 3]));"
        ],
        "code": [
          "{",
          "    struct Literal {",
          "        bytes: Vec<u8>,",
          "    }",
          "",
          "    let hirs = vec![",
          "        Hir {",
          "            kind: HirKind::Literal(Literal { bytes: vec![1] }),",
          "            props: Properties {},",
          "        },",
          "        Hir {",
          "            kind: HirKind::Literal(Literal { bytes: vec![2] }),",
          "            props: Properties {},",
          "        },",
          "        Hir {",
          "            kind: HirKind::Literal(Literal { bytes: vec![3] }),",
          "            props: Properties {},",
          "        },",
          "    ];",
          "",
          "    let result = singleton_bytes(&hirs);",
          "    assert_eq!(result, Some(vec![1, 2, 3]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Literal {",
          "        bytes: Vec<u8>,",
          "    }",
          "",
          "    let hirs = vec![",
          "        Hir {",
          "            kind: HirKind::Literal(Literal { bytes: vec![100] }),",
          "            props: Properties {},",
          "        },",
          "        Hir {",
          "            kind: HirKind::Literal(Literal { bytes: vec![101] }),",
          "            props: Properties {},",
          "        },",
          "        Hir {",
          "            kind: HirKind::Literal(Literal { bytes: vec![102] }),",
          "            props: Properties {},",
          "        },",
          "    ];",
          "",
          "    let result = singleton_bytes(&hirs);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(vec![100, 101, 102]));"
        ],
        "code": [
          "{",
          "    struct Literal {",
          "        bytes: Vec<u8>,",
          "    }",
          "",
          "    let hirs = vec![",
          "        Hir {",
          "            kind: HirKind::Literal(Literal { bytes: vec![100] }),",
          "            props: Properties {},",
          "        },",
          "        Hir {",
          "            kind: HirKind::Literal(Literal { bytes: vec![101] }),",
          "            props: Properties {},",
          "        },",
          "        Hir {",
          "            kind: HirKind::Literal(Literal { bytes: vec![102] }),",
          "            props: Properties {},",
          "        },",
          "    ];",
          "",
          "    let result = singleton_bytes(&hirs);",
          "    assert_eq!(result, Some(vec![100, 101, 102]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Literal {",
          "        bytes: Vec<u8>,",
          "    }",
          "",
          "    let hirs = vec![",
          "        Hir {",
          "            kind: HirKind::Literal(Literal { bytes: vec![255] }),",
          "            props: Properties {},",
          "        },",
          "        Hir {",
          "            kind: HirKind::Literal(Literal { bytes: vec![0] }),",
          "            props: Properties {},",
          "        },",
          "    ];",
          "",
          "    let result = singleton_bytes(&hirs);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(vec![255, 0]));"
        ],
        "code": [
          "{",
          "    struct Literal {",
          "        bytes: Vec<u8>,",
          "    }",
          "",
          "    let hirs = vec![",
          "        Hir {",
          "            kind: HirKind::Literal(Literal { bytes: vec![255] }),",
          "            props: Properties {},",
          "        },",
          "        Hir {",
          "            kind: HirKind::Literal(Literal { bytes: vec![0] }),",
          "            props: Properties {},",
          "        },",
          "    ];",
          "",
          "    let result = singleton_bytes(&hirs);",
          "    assert_eq!(result, Some(vec![255, 0]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Literal {",
          "        bytes: Vec<u8>,",
          "    }",
          "",
          "    let hirs: Vec<Hir> = vec![];",
          "",
          "    let result = singleton_bytes(&hirs);",
          "}"
        ],
        "oracle": [
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Literal(Literal { bytes: vec![b'a'] }), props: Properties::default() }];",
          "    assert_eq!(singleton_bytes(&hirs), Some(vec![b'a']));",
          "    ",
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Literal(Literal { bytes: vec![b'b'] }), props: Properties::default() }];",
          "    assert_eq!(singleton_bytes(&hirs), Some(vec![b'b']));",
          "    ",
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Literal(Literal { bytes: vec![b'c', b'd'] }), props: Properties::default() }];",
          "    assert_eq!(singleton_bytes(&hirs), None);",
          "    ",
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Literal(Literal { bytes: vec![] }), props: Properties::default() }];",
          "    assert_eq!(singleton_bytes(&hirs), None);",
          "    ",
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Class(Class {}), props: Properties::default() }];",
          "    assert_eq!(singleton_bytes(&hirs), None);",
          "    ",
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Literal(Literal { bytes: vec![b'e'] }), props: Properties::default() }, Hir { kind: HirKind::Literal(Literal { bytes: vec![b'f'] }), props: Properties::default() }];",
          "    assert_eq!(singleton_bytes(&hirs), Some(vec![b'e', b'f']));"
        ],
        "code": [
          "{",
          "    struct Literal {",
          "        bytes: Vec<u8>,",
          "    }",
          "",
          "    let hirs: Vec<Hir> = vec![];",
          "",
          "    let result = singleton_bytes(&hirs);",
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Literal(Literal { bytes: vec![b'a'] }), props: Properties::default() }];",
          "    assert_eq!(singleton_bytes(&hirs), Some(vec![b'a']));",
          "    ",
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Literal(Literal { bytes: vec![b'b'] }), props: Properties::default() }];",
          "    assert_eq!(singleton_bytes(&hirs), Some(vec![b'b']));",
          "    ",
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Literal(Literal { bytes: vec![b'c', b'd'] }), props: Properties::default() }];",
          "    assert_eq!(singleton_bytes(&hirs), None);",
          "    ",
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Literal(Literal { bytes: vec![] }), props: Properties::default() }];",
          "    assert_eq!(singleton_bytes(&hirs), None);",
          "    ",
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Class(Class {}), props: Properties::default() }];",
          "    assert_eq!(singleton_bytes(&hirs), None);",
          "    ",
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Literal(Literal { bytes: vec![b'e'] }), props: Properties::default() }, Hir { kind: HirKind::Literal(Literal { bytes: vec![b'f'] }), props: Properties::default() }];",
          "    assert_eq!(singleton_bytes(&hirs), Some(vec![b'e', b'f']));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]