[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Literal {",
          "        bytes: Vec<u8>,",
          "    }",
          "",
          "    let hirs = vec![Hir {",
          "        kind: HirKind::Literal(Literal { bytes: vec![42] }),",
          "        props: Properties {},",
          "    }];",
          "",
          "    let result = singleton_bytes(&hirs);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(vec![42]));"
        ],
        "code": [
          "{",
          "    struct Literal {",
          "        bytes: Vec<u8>,",
          "    }",
          "",
          "    let hirs = vec![Hir {",
          "        kind: HirKind::Literal(Literal { bytes: vec![42] }),",
          "        props: Properties {},",
          "    }];",
          "",
          "    let result = singleton_bytes(&hirs);",
          "    assert_eq!(result, Some(vec![42]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Literal {",
          "        bytes: Vec<u8>,",
          "    }",
          "",
          "    let hirs = vec![",
          "        Hir {",
          "            kind: HirKind::Literal(Literal { bytes: vec![12] }),",
          "            props: Properties {},",
          "        },",
          "        Hir {",
          "            kind: HirKind::Literal(Literal { bytes: vec![34] }),",
          "            props: Properties {},",
          "        },",
          "    ];",
          "",
          "    let result = singleton_bytes(&hirs);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(vec![12, 34]));"
        ],
        "code": [
          "{",
          "    struct Literal {",
          "        bytes: Vec<u8>,",
          "    }",
          "",
          "    let hirs = vec![",
          "        Hir {",
          "            kind: HirKind::Literal(Literal { bytes: vec![12] }),",
          "            props: Properties {},",
          "        },",
          "        Hir {",
          "            kind: HirKind::Literal(Literal { bytes: vec![34] }),",
          "            props: Properties {},",
          "        },",
          "    ];",
          "",
          "    let result = singleton_bytes(&hirs);",
          "    assert_eq!(result, Some(vec![12, 34]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Literal {",
          "        bytes: Vec<u8>,",
          "    }",
          "",
          "    let hirs = vec![",
          "        Hir {",
          "            kind: HirKind::Literal(Literal { bytes: vec![0] }),",
          "            props: Properties {},",
          "        },",
          "    ];",
          "",
          "    let result = singleton_bytes(&hirs);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), vec![0]);"
        ],
        "code": [
          "{",
          "    struct Literal {",
          "        bytes: Vec<u8>,",
          "    }",
          "",
          "    let hirs = vec![",
          "        Hir {",
          "            kind: HirKind::Literal(Literal { bytes: vec![0] }),",
          "            props: Properties {},",
          "        },",
          "    ];",
          "",
          "    let result = singleton_bytes(&hirs);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), vec![0]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Literal {",
          "        bytes: Vec<u8>,",
          "    }",
          "",
          "    let hirs = vec![",
          "        Hir {",
          "            kind: HirKind::Literal(Literal { bytes: vec![5] }),",
          "            props: Properties {},",
          "        },",
          "        Hir {",
          "            kind: HirKind::Literal(Literal { bytes: vec![10] }),",
          "            props: Properties {},",
          "        },",
          "    ];",
          "",
          "    let result = singleton_bytes(&hirs);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(vec![5, 10]));"
        ],
        "code": [
          "{",
          "    struct Literal {",
          "        bytes: Vec<u8>,",
          "    }",
          "",
          "    let hirs = vec![",
          "        Hir {",
          "            kind: HirKind::Literal(Literal { bytes: vec![5] }),",
          "            props: Properties {},",
          "        },",
          "        Hir {",
          "            kind: HirKind::Literal(Literal { bytes: vec![10] }),",
          "            props: Properties {},",
          "        },",
          "    ];",
          "",
          "    let result = singleton_bytes(&hirs);",
          "    assert_eq!(result, Some(vec![5, 10]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Literal {",
          "        bytes: Vec<u8>,",
          "    }",
          "",
          "    let hirs = vec![",
          "        Hir {",
          "            kind: HirKind::Literal(Literal { bytes: vec![1, 2] }),",
          "            props: Properties {},",
          "        },",
          "    ];",
          "",
          "    let result = singleton_bytes(&hirs);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    struct Literal {",
          "        bytes: Vec<u8>,",
          "    }",
          "",
          "    let hirs = vec![",
          "        Hir {",
          "            kind: HirKind::Literal(Literal { bytes: vec![1, 2] }),",
          "            props: Properties {},",
          "        },",
          "    ];",
          "",
          "    let result = singleton_bytes(&hirs);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]