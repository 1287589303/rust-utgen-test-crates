[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let haystack = \"On 14-03-2010, I became a Tenneessee lamb.\";",
          "    let replacement = \"year=$year, month=$month, day=$day\";",
          "    let mut dst = String::new();",
          "    ",
          "    let captures = Captures::all(group_info.clone());",
          "    captures.interpolate_string_into(haystack, replacement, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, \"year=, month=, day=\");",
          "    ",
          "    let captures = Captures::empty(group_info.clone());",
          "    captures.interpolate_string_into(haystack, replacement, &mut dst);",
          "    assert_eq!(dst, \"year=, month=, day=\");",
          "    ",
          "    let captures = Captures::matches(group_info.clone());",
          "    captures.interpolate_string_into(haystack, replacement, &mut dst);",
          "    assert_eq!(dst, \"year=, month=, day=\");",
          "    ",
          "    let pattern_id = captures.pattern();",
          "    assert!(pattern_id.is_none());",
          "    ",
          "    let match_opt = captures.get_match();",
          "    assert!(match_opt.is_none());",
          "    ",
          "    for i in 0..captures.group_len() {",
          "    assert!(captures.get_group(i).is_none());",
          "    }",
          "    ",
          "    let group_info_ref = captures.group_info();",
          "    assert_eq!(group_info_ref.0.as_ref(), group_info.0.as_ref());"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let haystack = \"On 14-03-2010, I became a Tenneessee lamb.\";",
          "    let replacement = \"year=$year, month=$month, day=$day\";",
          "    let mut dst = String::new();",
          "    ",
          "    let captures = Captures::all(group_info.clone());",
          "    captures.interpolate_string_into(haystack, replacement, &mut dst);",
          "    assert_eq!(dst, \"year=, month=, day=\");",
          "    ",
          "    let captures = Captures::empty(group_info.clone());",
          "    captures.interpolate_string_into(haystack, replacement, &mut dst);",
          "    assert_eq!(dst, \"year=, month=, day=\");",
          "    ",
          "    let captures = Captures::matches(group_info.clone());",
          "    captures.interpolate_string_into(haystack, replacement, &mut dst);",
          "    assert_eq!(dst, \"year=, month=, day=\");",
          "    ",
          "    let pattern_id = captures.pattern();",
          "    assert!(pattern_id.is_none());",
          "    ",
          "    let match_opt = captures.get_match();",
          "    assert!(match_opt.is_none());",
          "    ",
          "    for i in 0..captures.group_len() {",
          "    assert!(captures.get_group(i).is_none());",
          "    }",
          "    ",
          "    let group_info_ref = captures.group_info();",
          "    assert_eq!(group_info_ref.0.as_ref(), group_info.0.as_ref());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let haystack = \"On 2010-03-14, I became a Tenneessee lamb.\";",
          "    let replacement = \"year=$year, month=$month, day=$day\";",
          "    let mut dst = String::new();",
          "    ",
          "    let captures = Captures::all(group_info.clone());",
          "    captures.interpolate_string_into(haystack, replacement, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, \"year=2010, month=03, day=14\");"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let haystack = \"On 2010-03-14, I became a Tenneessee lamb.\";",
          "    let replacement = \"year=$year, month=$month, day=$day\";",
          "    let mut dst = String::new();",
          "    ",
          "    let captures = Captures::all(group_info.clone());",
          "    captures.interpolate_string_into(haystack, replacement, &mut dst);",
          "    assert_eq!(dst, \"year=2010, month=03, day=14\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let haystack = \"Sample text for interpolation.\";",
          "    let replacement = \"\";",
          "    let mut dst = String::new();",
          "    ",
          "    let captures = Captures::all(group_info.clone());",
          "    captures.interpolate_string_into(haystack, replacement, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, \"\");",
          "    assert!(dst.is_empty());",
          "    assert_eq!(dst.len(), 0);",
          "    assert!(captures.is_match() == false);",
          "    assert!(captures.pattern().is_none());",
          "    assert!(captures.get_match().is_none());",
          "    assert!(captures.group_len() == 0);",
          "    assert!(captures.group_info() == &group_info);"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let haystack = \"Sample text for interpolation.\";",
          "    let replacement = \"\";",
          "    let mut dst = String::new();",
          "    ",
          "    let captures = Captures::all(group_info.clone());",
          "    captures.interpolate_string_into(haystack, replacement, &mut dst);",
          "    assert_eq!(dst, \"\");",
          "    assert!(dst.is_empty());",
          "    assert_eq!(dst.len(), 0);",
          "    assert!(captures.is_match() == false);",
          "    assert!(captures.pattern().is_none());",
          "    assert!(captures.get_match().is_none());",
          "    assert!(captures.group_len() == 0);",
          "    assert!(captures.group_info() == &group_info);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let haystack = \"Data without matches.\";",
          "    let replacement = \"Invalid reference $invalid.\";",
          "    let mut dst = String::new();",
          "    ",
          "    let captures = Captures::all(group_info.clone());",
          "    captures.interpolate_string_into(haystack, replacement, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, \"Invalid reference $invalid.\");"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let haystack = \"Data without matches.\";",
          "    let replacement = \"Invalid reference $invalid.\";",
          "    let mut dst = String::new();",
          "    ",
          "    let captures = Captures::all(group_info.clone());",
          "    captures.interpolate_string_into(haystack, replacement, &mut dst);",
          "    assert_eq!(dst, \"Invalid reference $invalid.\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let haystack = \"Date is 01-01-2020.\";",
          "    let replacement = \"Year: $year, Month: $month, Day: $day\";",
          "    let mut dst = String::new();",
          "    ",
          "    let captures = Captures::all(group_info.clone());",
          "    captures.interpolate_string_into(haystack, replacement, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, \"Year: , Month: , Day: \");",
          "    assert!(captures.is_match() == false);",
          "    assert_eq!(captures.get_group(0), None);",
          "    assert_eq!(captures.get_group_by_name(\"year\"), None);",
          "    assert_eq!(captures.group_len(), 0);",
          "    assert_eq!(captures.pattern(), None);",
          "    assert_eq!(captures.get_match(), None);",
          "    assert_eq!(captures.group_info(), &group_info);"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let haystack = \"Date is 01-01-2020.\";",
          "    let replacement = \"Year: $year, Month: $month, Day: $day\";",
          "    let mut dst = String::new();",
          "    ",
          "    let captures = Captures::all(group_info.clone());",
          "    captures.interpolate_string_into(haystack, replacement, &mut dst);",
          "    assert_eq!(dst, \"Year: , Month: , Day: \");",
          "    assert!(captures.is_match() == false);",
          "    assert_eq!(captures.get_group(0), None);",
          "    assert_eq!(captures.get_group_by_name(\"year\"), None);",
          "    assert_eq!(captures.group_len(), 0);",
          "    assert_eq!(captures.pattern(), None);",
          "    assert_eq!(captures.get_match(), None);",
          "    assert_eq!(captures.group_info(), &group_info);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]