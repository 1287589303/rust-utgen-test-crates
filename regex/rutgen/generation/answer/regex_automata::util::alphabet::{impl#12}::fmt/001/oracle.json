[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.add(10);",
          "    byte_set.add(50);",
          "    byte_set.add(200);",
          "    let _ = format!(\"{:?}\", byte_set.bits);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{10, 50, 200}\");",
          "    byte_set.remove(10);",
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{50, 200}\");",
          "    assert!(byte_set.contains(50));",
          "    assert!(!byte_set.contains(10));",
          "    assert!(byte_set.is_empty() == false);",
          "    byte_set.remove(50);",
          "    byte_set.remove(200);",
          "    assert!(byte_set.is_empty() == true);",
          "    assert!(byte_set.contains_range(0, 255) == false);",
          "    byte_set.add(0);",
          "    assert!(byte_set.contains(0));",
          "    assert!(byte_set.contains_range(0, 0));"
        ],
        "code": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.add(10);",
          "    byte_set.add(50);",
          "    byte_set.add(200);",
          "    let _ = format!(\"{:?}\", byte_set.bits);",
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{10, 50, 200}\");",
          "    byte_set.remove(10);",
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{50, 200}\");",
          "    assert!(byte_set.contains(50));",
          "    assert!(!byte_set.contains(10));",
          "    assert!(byte_set.is_empty() == false);",
          "    byte_set.remove(50);",
          "    byte_set.remove(200);",
          "    assert!(byte_set.is_empty() == true);",
          "    assert!(byte_set.contains_range(0, 255) == false);",
          "    byte_set.add(0);",
          "    assert!(byte_set.contains(0));",
          "    assert!(byte_set.contains_range(0, 0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    for b in 0u8..=255 {",
          "        byte_set.add(b);",
          "    }",
          "    let _ = format!(\"{:?}\", byte_set.bits);",
          "}"
        ],
        "oracle": [
          "    let byte_set = ByteSet::empty();",
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{}\");",
          "    byte_set.add(0);",
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{0}\");",
          "    byte_set.add(255);",
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{0, 255}\");",
          "    byte_set.remove(0);",
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{255}\");",
          "    byte_set.remove(255);",
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{}\");",
          "    byte_set.add(127);",
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{127}\");",
          "    byte_set.add(128);",
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{127, 128}\");",
          "    byte_set.add(255);",
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{127, 128, 255}\");",
          "    byte_set.add(1);",
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{1, 127, 128, 255}\");"
        ],
        "code": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    for b in 0u8..=255 {",
          "        byte_set.add(b);",
          "    }",
          "    let _ = format!(\"{:?}\", byte_set.bits);",
          "    let byte_set = ByteSet::empty();",
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{}\");",
          "    byte_set.add(0);",
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{0}\");",
          "    byte_set.add(255);",
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{0, 255}\");",
          "    byte_set.remove(0);",
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{255}\");",
          "    byte_set.remove(255);",
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{}\");",
          "    byte_set.add(127);",
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{127}\");",
          "    byte_set.add(128);",
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{127, 128}\");",
          "    byte_set.add(255);",
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{127, 128, 255}\");",
          "    byte_set.add(1);",
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{1, 127, 128, 255}\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_set = ByteSet::empty();",
          "    let _ = format!(\"{:?}\", byte_set.bits);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{}\");",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.add(0);",
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{0}\");",
          "    byte_set.remove(0);",
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{}\");",
          "    byte_set.add(255);",
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{255}\");",
          "    byte_set.add(128);",
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{128, 255}\");",
          "    byte_set.remove(128);",
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{255}\");"
        ],
        "code": [
          "{",
          "    let byte_set = ByteSet::empty();",
          "    let _ = format!(\"{:?}\", byte_set.bits);",
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{}\");",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.add(0);",
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{0}\");",
          "    byte_set.remove(0);",
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{}\");",
          "    byte_set.add(255);",
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{255}\");",
          "    byte_set.add(128);",
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{128, 255}\");",
          "    byte_set.remove(128);",
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{255}\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.add(0);",
          "    byte_set.add(255);",
          "    let _ = format!(\"{:?}\", byte_set.bits);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_set.contains(0), true);",
          "    assert_eq!(byte_set.contains(255), true);",
          "    assert_eq!(byte_set.iter().collect::<Vec<_>>(), vec![0, 255]);",
          "    assert_eq!(byte_set.is_empty(), false);",
          "    assert_eq!(byte_set.bits.0[0], 1 << 0);",
          "    assert_eq!(byte_set.bits.0[1], 1 << 255);"
        ],
        "code": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.add(0);",
          "    byte_set.add(255);",
          "    let _ = format!(\"{:?}\", byte_set.bits);",
          "    assert_eq!(byte_set.contains(0), true);",
          "    assert_eq!(byte_set.contains(255), true);",
          "    assert_eq!(byte_set.iter().collect::<Vec<_>>(), vec![0, 255]);",
          "    assert_eq!(byte_set.is_empty(), false);",
          "    assert_eq!(byte_set.bits.0[0], 1 << 0);",
          "    assert_eq!(byte_set.bits.0[1], 1 << 255);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.add(100);",
          "    byte_set.add(150);",
          "    let _ = format!(\"{:?}\", byte_set.bits); ",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{100, 150}\");",
          "    assert!(byte_set.bits.contains(100));",
          "    assert!(byte_set.bits.contains(150));",
          "    assert!(!byte_set.bits.contains(0));",
          "    assert!(!byte_set.bits.contains(255));",
          "    byte_set.remove(100);",
          "    assert!(!byte_set.bits.contains(100));",
          "    assert!(byte_set.bits.contains(150));"
        ],
        "code": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.add(100);",
          "    byte_set.add(150);",
          "    let _ = format!(\"{:?}\", byte_set.bits); ",
          "    assert_eq!(format!(\"{:?}\", byte_set.bits), \"{100, 150}\");",
          "    assert!(byte_set.bits.contains(100));",
          "    assert!(byte_set.bits.contains(150));",
          "    assert!(!byte_set.bits.contains(0));",
          "    assert!(!byte_set.bits.contains(255));",
          "    byte_set.remove(100);",
          "    assert!(!byte_set.bits.contains(100));",
          "    assert!(byte_set.bits.contains(150));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]