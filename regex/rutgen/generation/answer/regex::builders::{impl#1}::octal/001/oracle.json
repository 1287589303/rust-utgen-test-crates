[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new(vec![\"pattern1\"]).case_insensitive(true);",
          "    builder.octal(true);",
          "}"
        ],
        "oracle": [
          "    builder.octal(true).octal(false);",
          "    builder.octal(false).octal(true);",
          "    builder.octal(true).octal(true);",
          "    builder.octal(false).octal(false);",
          "    builder.octal(true);",
          "    builder.octal(false);"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new(vec![\"pattern1\"]).case_insensitive(true);",
          "    builder.octal(true);",
          "    builder.octal(true).octal(false);",
          "    builder.octal(false).octal(true);",
          "    builder.octal(true).octal(true);",
          "    builder.octal(false).octal(false);",
          "    builder.octal(true);",
          "    builder.octal(false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new(vec![\"pattern2\"]).multi_line(true);",
          "    builder.octal(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.syntaxc.is_octal(), false);",
          "    assert!(std::ptr::eq(builder, &builder.octal(false)));",
          "    assert_eq!(builder.octal(true).syntaxc.is_octal(), true);",
          "    assert!(std::ptr::eq(builder, builder.octal(true)));"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new(vec![\"pattern2\"]).multi_line(true);",
          "    builder.octal(false);",
          "    assert_eq!(builder.syntaxc.is_octal(), false);",
          "    assert!(std::ptr::eq(builder, &builder.octal(false)));",
          "    assert_eq!(builder.octal(true).syntaxc.is_octal(), true);",
          "    assert!(std::ptr::eq(builder, builder.octal(true)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]