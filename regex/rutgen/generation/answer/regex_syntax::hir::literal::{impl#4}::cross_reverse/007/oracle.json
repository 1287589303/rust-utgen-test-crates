[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::empty();",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::exact(\"foo\"),",
          "        Literal::inexact(\"bar\"),",
          "    ]);",
          "    seq1.cross_reverse(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert!(seq1.is_finite());",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), None);"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::empty();",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::exact(\"foo\"),",
          "        Literal::inexact(\"bar\"),",
          "    ]);",
          "    seq1.cross_reverse(&mut seq2);",
          "    assert!(seq1.is_finite());",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(\"foo\"),",
          "        Literal::exact(\"baz\"),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::exact(\"quux\"),",
          "        Literal::inexact(\"bar\"),",
          "    ]);",
          "    seq1.cross_reverse(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&[",
          "    Literal::exact(b\"quuxfoo\"),",
          "    Literal::exact(b\"quuxbaz\")",
          "    ]));",
          "    assert!(seq1.literals().unwrap()[0].is_exact());",
          "    assert!(seq1.literals().unwrap()[1].is_exact());",
          "    assert!(seq1.is_finite());",
          "    assert!(seq1.min_literal_len().unwrap() > 0);",
          "    assert_eq!(seq1.max_cross_len(&seq2), Some(2));",
          "    assert!(seq2.is_empty());"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(\"foo\"),",
          "        Literal::exact(\"baz\"),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::exact(\"quux\"),",
          "        Literal::inexact(\"bar\"),",
          "    ]);",
          "    seq1.cross_reverse(&mut seq2);",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&[",
          "    Literal::exact(b\"quuxfoo\"),",
          "    Literal::exact(b\"quuxbaz\")",
          "    ]));",
          "    assert!(seq1.literals().unwrap()[0].is_exact());",
          "    assert!(seq1.literals().unwrap()[1].is_exact());",
          "    assert!(seq1.is_finite());",
          "    assert!(seq1.min_literal_len().unwrap() > 0);",
          "    assert_eq!(seq1.max_cross_len(&seq2), Some(2));",
          "    assert!(seq2.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(\"\"),",
          "        Literal::exact(\"baz\"),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::exact(\"quux\"),",
          "        Literal::inexact(\"\"),",
          "    ]);",
          "    seq1.cross_reverse(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq1.is_finite(), false);",
          "    assert_eq!(seq1.len(), None);",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&[Literal::exact(\"baz\")][..]));",
          "    assert_eq!(seq1.literals().unwrap().len(), 1);",
          "    assert!(seq1.is_inexact());",
          "    assert!(!seq1.is_exact());"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(\"\"),",
          "        Literal::exact(\"baz\"),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::exact(\"quux\"),",
          "        Literal::inexact(\"\"),",
          "    ]);",
          "    seq1.cross_reverse(&mut seq2);",
          "    assert_eq!(seq1.is_finite(), false);",
          "    assert_eq!(seq1.len(), None);",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&[Literal::exact(\"baz\")][..]));",
          "    assert_eq!(seq1.literals().unwrap().len(), 1);",
          "    assert!(seq1.is_inexact());",
          "    assert!(!seq1.is_exact());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(\"hello\"),",
          "        Literal::exact(\"world\"),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::exact(\"foo\"),",
          "        Literal::inexact(\"bar\"),",
          "    ]);",
          "    seq1.cross_reverse(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert!(seq1.is_finite());",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals().unwrap().len(), 2);",
          "    assert_eq!(seq1.literals().unwrap()[0].as_bytes(), b\"hello\");",
          "    assert_eq!(seq1.literals().unwrap()[1].as_bytes(), b\"world\");",
          "    assert!(seq1.literals().unwrap()[0].is_exact());",
          "    assert!(seq1.literals().unwrap()[1].is_exact());"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(\"hello\"),",
          "        Literal::exact(\"world\"),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::exact(\"foo\"),",
          "        Literal::inexact(\"bar\"),",
          "    ]);",
          "    seq1.cross_reverse(&mut seq2);",
          "    assert!(seq1.is_finite());",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals().unwrap().len(), 2);",
          "    assert_eq!(seq1.literals().unwrap()[0].as_bytes(), b\"hello\");",
          "    assert_eq!(seq1.literals().unwrap()[1].as_bytes(), b\"world\");",
          "    assert!(seq1.literals().unwrap()[0].is_exact());",
          "    assert!(seq1.literals().unwrap()[1].is_exact());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::infinite();",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::exact(\"foo\"),",
          "        Literal::inexact(\"bar\"),",
          "    ]);",
          "    seq1.cross_reverse(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert!(seq1.is_finite());",
          "    assert_eq!(Some(2), seq2.len());",
          "    assert_eq!(seq2.literals(), Some(&[Literal::exact(\"foo\"), Literal::inexact(\"bar\")]));"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::infinite();",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::exact(\"foo\"),",
          "        Literal::inexact(\"bar\"),",
          "    ]);",
          "    seq1.cross_reverse(&mut seq2);",
          "    assert!(seq1.is_finite());",
          "    assert_eq!(Some(2), seq2.len());",
          "    assert_eq!(seq2.literals(), Some(&[Literal::exact(\"foo\"), Literal::inexact(\"bar\")]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]