[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![Literal::exact(\"foo\"), Literal::exact(\"baz\")]);",
          "    let mut seq2 = Seq::new(vec![Literal::exact(\"bar\")]);",
          "    seq1.cross_reverse(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&[Literal::exact(\"barfoo\"), Literal::exact(\"bazfoo\")]));",
          "    assert!(seq1.is_finite());",
          "    assert!(seq1.is_exact());"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![Literal::exact(\"foo\"), Literal::exact(\"baz\")]);",
          "    let mut seq2 = Seq::new(vec![Literal::exact(\"bar\")]);",
          "    seq1.cross_reverse(&mut seq2);",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&[Literal::exact(\"barfoo\"), Literal::exact(\"bazfoo\")]));",
          "    assert!(seq1.is_finite());",
          "    assert!(seq1.is_exact());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::empty();",
          "    let mut seq2 = Seq::new(vec![Literal::exact(\"bar\"), Literal::exact(\"baz\")]);",
          "    seq1.cross_reverse(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq1.literals(), Some(&[]));",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert!(seq1.is_empty());",
          "    assert!(seq2.is_empty());"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::empty();",
          "    let mut seq2 = Seq::new(vec![Literal::exact(\"bar\"), Literal::exact(\"baz\")]);",
          "    seq1.cross_reverse(&mut seq2);",
          "    assert_eq!(seq1.literals(), Some(&[]));",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert!(seq1.is_empty());",
          "    assert!(seq2.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::infinite();",
          "    let mut seq2 = Seq::new(vec![Literal::exact(\"bar\"), Literal::exact(\"baz\")]);",
          "    seq1.cross_reverse(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert!(seq1.is_finite());",
          "    assert_eq!(Some(2), seq2.len());",
          "    assert_eq!(seq2.literals(), Some(&[Literal::exact(\"bar\"), Literal::exact(\"baz\")]));",
          "    assert!(seq1.is_exact());"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::infinite();",
          "    let mut seq2 = Seq::new(vec![Literal::exact(\"bar\"), Literal::exact(\"baz\")]);",
          "    seq1.cross_reverse(&mut seq2);",
          "    assert!(seq1.is_finite());",
          "    assert_eq!(Some(2), seq2.len());",
          "    assert_eq!(seq2.literals(), Some(&[Literal::exact(\"bar\"), Literal::exact(\"baz\")]));",
          "    assert!(seq1.is_exact());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![Literal::exact(\"foo\"), Literal::inexact(\"quux\")]);",
          "    let mut seq2 = Seq::new(vec![Literal::exact(\"bar\")]);",
          "    seq1.cross_reverse(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert!(seq1.literals().is_some());",
          "    assert_eq!(seq1.len(), Some(2));",
          "    assert_eq!(seq1.literals().unwrap()[0].as_bytes(), b\"foo\");",
          "    assert_eq!(seq1.literals().unwrap()[1].as_bytes(), b\"quux\");",
          "    assert_eq!(seq2.len(), Some(0));"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![Literal::exact(\"foo\"), Literal::inexact(\"quux\")]);",
          "    let mut seq2 = Seq::new(vec![Literal::exact(\"bar\")]);",
          "    seq1.cross_reverse(&mut seq2);",
          "    assert!(seq1.literals().is_some());",
          "    assert_eq!(seq1.len(), Some(2));",
          "    assert_eq!(seq1.literals().unwrap()[0].as_bytes(), b\"foo\");",
          "    assert_eq!(seq1.literals().unwrap()[1].as_bytes(), b\"quux\");",
          "    assert_eq!(seq2.len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![Literal::exact(\"foo\"), Literal::exact(\"\")]);",
          "    let mut seq2 = Seq::infinite();",
          "    seq1.cross_reverse(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq1.is_finite(), false);",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&[Literal::exact(\"foo\"), Literal::exact(\"\")]));",
          "    assert!(seq1.is_inexact());"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![Literal::exact(\"foo\"), Literal::exact(\"\")]);",
          "    let mut seq2 = Seq::infinite();",
          "    seq1.cross_reverse(&mut seq2);",
          "    assert_eq!(seq1.is_finite(), false);",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&[Literal::exact(\"foo\"), Literal::exact(\"\")]));",
          "    assert!(seq1.is_inexact());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]