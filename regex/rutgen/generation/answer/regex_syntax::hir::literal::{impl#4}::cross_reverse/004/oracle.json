[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(b\"foo\".to_vec()),",
          "        Literal::inexact(b\"bar\".to_vec()),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::inexact(b\"quux\".to_vec()),",
          "        Literal::exact(b\"baz\".to_vec()),",
          "    ]);",
          "",
          "    seq1.cross_reverse(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&[",
          "    Literal::inexact(b\"quuxfoo\".to_vec()),",
          "    Literal::inexact(b\"bar\".to_vec()),",
          "    Literal::exact(b\"bazfoo\".to_vec()),",
          "    ]));",
          "    assert!(seq1.is_finite());",
          "    assert!(seq2.is_empty());",
          "    assert!(!seq1.is_empty());",
          "    assert_eq!(seq1.len(), Some(3));",
          "    assert!(seq1.literals().unwrap()[0].is_inexact());",
          "    assert!(seq1.literals().unwrap()[1].is_inexact());",
          "    assert!(seq1.literals().unwrap()[2].is_exact());"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(b\"foo\".to_vec()),",
          "        Literal::inexact(b\"bar\".to_vec()),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::inexact(b\"quux\".to_vec()),",
          "        Literal::exact(b\"baz\".to_vec()),",
          "    ]);",
          "",
          "    seq1.cross_reverse(&mut seq2);",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&[",
          "    Literal::inexact(b\"quuxfoo\".to_vec()),",
          "    Literal::inexact(b\"bar\".to_vec()),",
          "    Literal::exact(b\"bazfoo\".to_vec()),",
          "    ]));",
          "    assert!(seq1.is_finite());",
          "    assert!(seq2.is_empty());",
          "    assert!(!seq1.is_empty());",
          "    assert_eq!(seq1.len(), Some(3));",
          "    assert!(seq1.literals().unwrap()[0].is_inexact());",
          "    assert!(seq1.literals().unwrap()[1].is_inexact());",
          "    assert!(seq1.literals().unwrap()[2].is_exact());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::inexact(b\"bar\".to_vec()),",
          "        Literal::exact(b\"foo\".to_vec()),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::inexact(b\"quux\".to_vec()),",
          "        Literal::exact(b\"baz\".to_vec()),",
          "    ]);",
          "",
          "    seq1.cross_reverse(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert!(seq1.literals().is_some());",
          "    assert_eq!(seq1.len(), Some(3));",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(vec![",
          "    Literal::inexact(b\"quux\".to_vec()).as_bytes(),",
          "    Literal::inexact(b\"bar\".to_vec()).as_bytes(),",
          "    Literal::exact(b\"bazfoo\".to_vec()).as_bytes(),",
          "    ]));",
          "    assert!(seq1.is_finite());",
          "    assert!(seq2.is_empty());"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::inexact(b\"bar\".to_vec()),",
          "        Literal::exact(b\"foo\".to_vec()),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::inexact(b\"quux\".to_vec()),",
          "        Literal::exact(b\"baz\".to_vec()),",
          "    ]);",
          "",
          "    seq1.cross_reverse(&mut seq2);",
          "    assert!(seq1.literals().is_some());",
          "    assert_eq!(seq1.len(), Some(3));",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(vec![",
          "    Literal::inexact(b\"quux\".to_vec()).as_bytes(),",
          "    Literal::inexact(b\"bar\".to_vec()).as_bytes(),",
          "    Literal::exact(b\"bazfoo\".to_vec()).as_bytes(),",
          "    ]));",
          "    assert!(seq1.is_finite());",
          "    assert!(seq2.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(b\"\".to_vec()), ",
          "        Literal::exact(b\"foo\".to_vec()),",
          "        Literal::inexact(b\"bar\".to_vec()),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::exact(b\"baz\".to_vec()),",
          "        Literal::inexact(b\"quux\".to_vec()),",
          "    ]);",
          "",
          "    seq1.cross_reverse(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq1.len(), Some(2));",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert!(seq1.is_inexact());",
          "    assert_eq!(seq1.literals(), Some(&[",
          "    Literal::inexact(b\"baz\".to_vec()),",
          "    Literal::inexact(b\"bar\".to_vec()),",
          "    ]));",
          "    assert!(seq1.is_finite());",
          "    assert!(seq2.is_empty());"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(b\"\".to_vec()), ",
          "        Literal::exact(b\"foo\".to_vec()),",
          "        Literal::inexact(b\"bar\".to_vec()),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::exact(b\"baz\".to_vec()),",
          "        Literal::inexact(b\"quux\".to_vec()),",
          "    ]);",
          "",
          "    seq1.cross_reverse(&mut seq2);",
          "    assert_eq!(seq1.len(), Some(2));",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert!(seq1.is_inexact());",
          "    assert_eq!(seq1.literals(), Some(&[",
          "    Literal::inexact(b\"baz\".to_vec()),",
          "    Literal::inexact(b\"bar\".to_vec()),",
          "    ]));",
          "    assert!(seq1.is_finite());",
          "    assert!(seq2.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(b\"exact\".to_vec()),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::inexact(b\"inexact\".to_vec()),",
          "    ]);",
          "",
          "    seq1.cross_reverse(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&[Literal::inexact(b\"inexactexact\".to_vec()), Literal::exact(b\"exact\".to_vec())][..]));"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(b\"exact\".to_vec()),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::inexact(b\"inexact\".to_vec()),",
          "    ]);",
          "",
          "    seq1.cross_reverse(&mut seq2);",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&[Literal::inexact(b\"inexactexact\".to_vec()), Literal::exact(b\"exact\".to_vec())][..]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]