[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(b\"foo\".to_vec()),",
          "        Literal::exact(b\"bar\".to_vec()),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::inexact(b\"quux\".to_vec()),",
          "        Literal::exact(b\"baz\".to_vec()),",
          "    ]);",
          "    seq1.cross_reverse(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.len(), Some(3));",
          "    assert!(matches!(seq1.literals(), Some(lits) if lits[0].as_bytes() == b\"quuxfoo\"));",
          "    assert!(matches!(seq1.literals(), Some(lits) if lits[1].as_bytes() == b\"bar\"));",
          "    assert!(matches!(seq1.literals(), Some(lits) if lits[2].as_bytes() == b\"bazfoo\"));",
          "    assert!(seq1.literals().unwrap()[0].is_inexact());",
          "    assert!(seq1.literals().unwrap()[1].is_inexact());",
          "    assert!(seq1.literals().unwrap()[2].is_exact());"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(b\"foo\".to_vec()),",
          "        Literal::exact(b\"bar\".to_vec()),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::inexact(b\"quux\".to_vec()),",
          "        Literal::exact(b\"baz\".to_vec()),",
          "    ]);",
          "    seq1.cross_reverse(&mut seq2);",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.len(), Some(3));",
          "    assert!(matches!(seq1.literals(), Some(lits) if lits[0].as_bytes() == b\"quuxfoo\"));",
          "    assert!(matches!(seq1.literals(), Some(lits) if lits[1].as_bytes() == b\"bar\"));",
          "    assert!(matches!(seq1.literals(), Some(lits) if lits[2].as_bytes() == b\"bazfoo\"));",
          "    assert!(seq1.literals().unwrap()[0].is_inexact());",
          "    assert!(seq1.literals().unwrap()[1].is_inexact());",
          "    assert!(seq1.literals().unwrap()[2].is_exact());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(b\"apple\".to_vec()),",
          "        Literal::exact(b\"orange\".to_vec()),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::inexact(b\"banana\".to_vec()),",
          "        Literal::exact(b\"grape\".to_vec()),",
          "    ]);",
          "    seq1.cross_reverse(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq2.len(), Some(0));",
          "    let expected = Seq::new(vec![",
          "    Literal::inexact(b\"bananapple\".to_vec()),",
          "    Literal::exact(b\"grapeapple\".to_vec()),",
          "    ]);",
          "    assert_eq!(seq1, expected);",
          "    seq1.cross_reverse(&mut Seq::infinite());",
          "    assert!(seq1.is_finite());",
          "    seq1.cross_reverse(&mut Seq::new(vec![Literal::exact(b\"cherry\".to_vec())]));",
          "    assert_eq!(seq1.len(), Some(3));",
          "    seq1.cross_reverse(&mut Seq::new(vec![Literal::inexact(b\"peach\".to_vec())]));",
          "    assert_eq!(seq1.len(), Some(3));"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(b\"apple\".to_vec()),",
          "        Literal::exact(b\"orange\".to_vec()),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::inexact(b\"banana\".to_vec()),",
          "        Literal::exact(b\"grape\".to_vec()),",
          "    ]);",
          "    seq1.cross_reverse(&mut seq2);",
          "    assert_eq!(seq2.len(), Some(0));",
          "    let expected = Seq::new(vec![",
          "    Literal::inexact(b\"bananapple\".to_vec()),",
          "    Literal::exact(b\"grapeapple\".to_vec()),",
          "    ]);",
          "    assert_eq!(seq1, expected);",
          "    seq1.cross_reverse(&mut Seq::infinite());",
          "    assert!(seq1.is_finite());",
          "    seq1.cross_reverse(&mut Seq::new(vec![Literal::exact(b\"cherry\".to_vec())]));",
          "    assert_eq!(seq1.len(), Some(3));",
          "    seq1.cross_reverse(&mut Seq::new(vec![Literal::inexact(b\"peach\".to_vec())]));",
          "    assert_eq!(seq1.len(), Some(3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(b\"hello\".to_vec()),",
          "        Literal::exact(b\"\".to_vec()), // empty literal",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::inexact(b\"world\".to_vec()),",
          "        Literal::exact(b\"test\".to_vec()),",
          "    ]);",
          "    seq1.cross_reverse(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq1.literals(), Some(&[Literal::inexact(b\"worldhello\".to_vec()), Literal::exact(b\"testhello\".to_vec())]));",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert!(!seq1.is_finite());",
          "    assert!(seq1.literals().unwrap()[0].is_inexact());",
          "    assert!(seq1.literals().unwrap()[1].is_exact());",
          "    assert_eq!(seq1.len(), Some(2));"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(b\"hello\".to_vec()),",
          "        Literal::exact(b\"\".to_vec()), // empty literal",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::inexact(b\"world\".to_vec()),",
          "        Literal::exact(b\"test\".to_vec()),",
          "    ]);",
          "    seq1.cross_reverse(&mut seq2);",
          "    assert_eq!(seq1.literals(), Some(&[Literal::inexact(b\"worldhello\".to_vec()), Literal::exact(b\"testhello\".to_vec())]));",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert!(!seq1.is_finite());",
          "    assert!(seq1.literals().unwrap()[0].is_inexact());",
          "    assert!(seq1.literals().unwrap()[1].is_exact());",
          "    assert_eq!(seq1.len(), Some(2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(b\"foo\".to_vec()),",
          "        Literal::exact(b\"bar\".to_vec()),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::inexact(b\"quux\".to_vec()),",
          "        Literal::inexact(b\"baz\".to_vec()),",
          "    ]);",
          "    seq1.cross_reverse(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&[",
          "    Literal::inexact(b\"quuxfoo\".to_vec()),",
          "    Literal::exact(b\"bazfoo\".to_vec()),",
          "    ]));",
          "    assert!(seq1.is_finite());",
          "    assert!(seq2.is_empty());",
          "    seq1.cross_reverse(&mut seq2);",
          "    assert!(seq1.is_finite());",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&[",
          "    Literal::inexact(b\"quuxfoo\".to_vec()),",
          "    Literal::exact(b\"bazfoo\".to_vec()),",
          "    ]));",
          "    seq1.cross_reverse(&mut seq2);",
          "    seq1.push(Literal::exact(b\"\"));",
          "    seq1.cross_reverse(&mut Seq::infinite());",
          "    assert!(!seq1.is_finite());"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(b\"foo\".to_vec()),",
          "        Literal::exact(b\"bar\".to_vec()),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::inexact(b\"quux\".to_vec()),",
          "        Literal::inexact(b\"baz\".to_vec()),",
          "    ]);",
          "    seq1.cross_reverse(&mut seq2);",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&[",
          "    Literal::inexact(b\"quuxfoo\".to_vec()),",
          "    Literal::exact(b\"bazfoo\".to_vec()),",
          "    ]));",
          "    assert!(seq1.is_finite());",
          "    assert!(seq2.is_empty());",
          "    seq1.cross_reverse(&mut seq2);",
          "    assert!(seq1.is_finite());",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&[",
          "    Literal::inexact(b\"quuxfoo\".to_vec()),",
          "    Literal::exact(b\"bazfoo\".to_vec()),",
          "    ]));",
          "    seq1.cross_reverse(&mut seq2);",
          "    seq1.push(Literal::exact(b\"\"));",
          "    seq1.cross_reverse(&mut Seq::infinite());",
          "    assert!(!seq1.is_finite());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(b\"cat\".to_vec()),",
          "        Literal::exact(b\"dog\".to_vec()),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::exact(b\"fish\".to_vec()),",
          "        Literal::inexact(b\"bird\".to_vec()),",
          "    ]);",
          "    seq1.cross_reverse(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq1.literals(), Some(&[Literal::inexact(b\"fishcat\".to_vec()), Literal::exact(b\"fishdog\".to_vec())]));",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert!(seq1.is_inexact());",
          "    assert!(seq1.len().is_some());",
          "    assert!(seq1.len().unwrap() > 0);"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(b\"cat\".to_vec()),",
          "        Literal::exact(b\"dog\".to_vec()),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::exact(b\"fish\".to_vec()),",
          "        Literal::inexact(b\"bird\".to_vec()),",
          "    ]);",
          "    seq1.cross_reverse(&mut seq2);",
          "    assert_eq!(seq1.literals(), Some(&[Literal::inexact(b\"fishcat\".to_vec()), Literal::exact(b\"fishdog\".to_vec())]));",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert!(seq1.is_inexact());",
          "    assert!(seq1.len().is_some());",
          "    assert!(seq1.len().unwrap() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]