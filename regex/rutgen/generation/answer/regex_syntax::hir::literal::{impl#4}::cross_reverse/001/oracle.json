[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(b\"foo\".to_vec()),",
          "        Literal::inexact(b\"bar\".to_vec())",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::exact(b\"baz\".to_vec()),",
          "        Literal::exact(b\"quux\".to_vec())",
          "    ]);",
          "    ",
          "    seq1.cross_reverse(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Some(0), seq2.len());",
          "    assert_eq!(Some(2), seq1.len());",
          "    assert!(seq1.literals().unwrap()[0].is_inexact());",
          "    assert_eq!(seq1.literals().unwrap()[0].as_bytes(), b\"quuxfoo\");",
          "    assert_eq!(seq1.literals().unwrap()[1].as_bytes(), b\"bazfoo\");",
          "    assert!(seq2.literals().is_empty());",
          "    assert!(seq1.is_finite());",
          "    assert!(seq2.is_empty());",
          "    assert!(seq1.literals().unwrap()[1].is_exact());",
          "    assert!(seq1.literals().unwrap()[0].is_inexact());"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(b\"foo\".to_vec()),",
          "        Literal::inexact(b\"bar\".to_vec())",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::exact(b\"baz\".to_vec()),",
          "        Literal::exact(b\"quux\".to_vec())",
          "    ]);",
          "    ",
          "    seq1.cross_reverse(&mut seq2);",
          "    assert_eq!(Some(0), seq2.len());",
          "    assert_eq!(Some(2), seq1.len());",
          "    assert!(seq1.literals().unwrap()[0].is_inexact());",
          "    assert_eq!(seq1.literals().unwrap()[0].as_bytes(), b\"quuxfoo\");",
          "    assert_eq!(seq1.literals().unwrap()[1].as_bytes(), b\"bazfoo\");",
          "    assert!(seq2.literals().is_empty());",
          "    assert!(seq1.is_finite());",
          "    assert!(seq2.is_empty());",
          "    assert!(seq1.literals().unwrap()[1].is_exact());",
          "    assert!(seq1.literals().unwrap()[0].is_inexact());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(b\"foo\".to_vec()),",
          "        Literal::exact(b\"\".to_vec()),",
          "        Literal::inexact(b\"bar\".to_vec())",
          "    ]);",
          "    let mut seq2 = Seq::infinite();",
          "    ",
          "    seq1.cross_reverse(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert!(seq1.is_finite());",
          "    assert_eq!(seq1.len(), Some(2));",
          "    assert!(seq1.literals().unwrap()[0].is_inexact());",
          "    assert!(seq1.literals().unwrap()[1].is_exact());",
          "    assert_eq!(seq1.literals().unwrap()[1].as_bytes(), b\"foo\");",
          "    assert_eq!(seq1.literals().unwrap()[0].as_bytes(), b\"\");"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(b\"foo\".to_vec()),",
          "        Literal::exact(b\"\".to_vec()),",
          "        Literal::inexact(b\"bar\".to_vec())",
          "    ]);",
          "    let mut seq2 = Seq::infinite();",
          "    ",
          "    seq1.cross_reverse(&mut seq2);",
          "    assert!(seq1.is_finite());",
          "    assert_eq!(seq1.len(), Some(2));",
          "    assert!(seq1.literals().unwrap()[0].is_inexact());",
          "    assert!(seq1.literals().unwrap()[1].is_exact());",
          "    assert_eq!(seq1.literals().unwrap()[1].as_bytes(), b\"foo\");",
          "    assert_eq!(seq1.literals().unwrap()[0].as_bytes(), b\"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::inexact(b\"baz\".to_vec()),",
          "        Literal::exact(b\"foo\".to_vec())",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::exact(b\"quux\".to_vec()),",
          "        Literal::exact(b\"baz\".to_vec())",
          "    ]);",
          "    ",
          "    seq1.cross_reverse(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    let mut seq1 = Seq::new(vec![Literal::inexact(b\"baz\".to_vec()), Literal::exact(b\"foo\".to_vec())]);",
          "    let mut seq2 = Seq::new(vec![Literal::exact(b\"quux\".to_vec()), Literal::exact(b\"baz\".to_vec())]);",
          "    seq1.cross_reverse(&mut seq2);",
          "    assert_eq!(seq2.len(), Some(0));",
          "    let expected = Seq::new(vec![Literal::inexact(b\"quuxfoo\".to_vec()), Literal::inexact(b\"baz\".to_vec())]);",
          "    assert_eq!(seq1, expected);",
          "    let mut seq3 = Seq::new(vec![Literal::exact(b\"foo\".to_vec()), Literal::inexact(b\"bar\".to_vec())]);",
          "    let mut seq4 = Seq::infinite();",
          "    seq3.cross_reverse(&mut seq4);",
          "    let expected_infinite = Seq::new(vec![Literal::inexact(b\"foo\".to_vec()), Literal::inexact(b\"bar\".to_vec())]);",
          "    assert_eq!(seq3, expected_infinite);",
          "    let mut seq5 = Seq::new(vec![Literal::exact(b\"foo\".to_vec()), Literal::exact(b\"\".to_vec()), Literal::inexact(b\"bar\".to_vec())]);",
          "    let mut seq6 = Seq::infinite();",
          "    seq5.cross_reverse(&mut seq6);",
          "    assert!(!seq5.is_finite());",
          "    let mut seq7 = Seq::infinite();",
          "    let mut seq8 = Seq::new(vec![Literal::exact(b\"foo\".to_vec()), Literal::inexact(b\"bar\".to_vec())]);",
          "    seq7.cross_reverse(&mut seq8);",
          "    assert!(!seq7.is_finite());",
          "    assert_eq!(seq8.len(), Some(0));"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::inexact(b\"baz\".to_vec()),",
          "        Literal::exact(b\"foo\".to_vec())",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::exact(b\"quux\".to_vec()),",
          "        Literal::exact(b\"baz\".to_vec())",
          "    ]);",
          "    ",
          "    seq1.cross_reverse(&mut seq2);",
          "    let mut seq1 = Seq::new(vec![Literal::inexact(b\"baz\".to_vec()), Literal::exact(b\"foo\".to_vec())]);",
          "    let mut seq2 = Seq::new(vec![Literal::exact(b\"quux\".to_vec()), Literal::exact(b\"baz\".to_vec())]);",
          "    seq1.cross_reverse(&mut seq2);",
          "    assert_eq!(seq2.len(), Some(0));",
          "    let expected = Seq::new(vec![Literal::inexact(b\"quuxfoo\".to_vec()), Literal::inexact(b\"baz\".to_vec())]);",
          "    assert_eq!(seq1, expected);",
          "    let mut seq3 = Seq::new(vec![Literal::exact(b\"foo\".to_vec()), Literal::inexact(b\"bar\".to_vec())]);",
          "    let mut seq4 = Seq::infinite();",
          "    seq3.cross_reverse(&mut seq4);",
          "    let expected_infinite = Seq::new(vec![Literal::inexact(b\"foo\".to_vec()), Literal::inexact(b\"bar\".to_vec())]);",
          "    assert_eq!(seq3, expected_infinite);",
          "    let mut seq5 = Seq::new(vec![Literal::exact(b\"foo\".to_vec()), Literal::exact(b\"\".to_vec()), Literal::inexact(b\"bar\".to_vec())]);",
          "    let mut seq6 = Seq::infinite();",
          "    seq5.cross_reverse(&mut seq6);",
          "    assert!(!seq5.is_finite());",
          "    let mut seq7 = Seq::infinite();",
          "    let mut seq8 = Seq::new(vec![Literal::exact(b\"foo\".to_vec()), Literal::inexact(b\"bar\".to_vec())]);",
          "    seq7.cross_reverse(&mut seq8);",
          "    assert!(!seq7.is_finite());",
          "    assert_eq!(seq8.len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(b\"foo\".to_vec()),",
          "        Literal::inexact(b\"bar\".to_vec()),",
          "    ]);",
          "    let mut seq2 = Seq::infinite();",
          "    ",
          "    seq1.cross_reverse(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq1.literals(), Some(&[Literal::inexact(b\"foo\".to_vec()), Literal::inexact(b\"bar\".to_vec())]));",
          "    assert!(!seq1.is_finite());",
          "    assert_eq!(seq2.len(), Some(0));"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(b\"foo\".to_vec()),",
          "        Literal::inexact(b\"bar\".to_vec()),",
          "    ]);",
          "    let mut seq2 = Seq::infinite();",
          "    ",
          "    seq1.cross_reverse(&mut seq2);",
          "    assert_eq!(seq1.literals(), Some(&[Literal::inexact(b\"foo\".to_vec()), Literal::inexact(b\"bar\".to_vec())]));",
          "    assert!(!seq1.is_finite());",
          "    assert_eq!(seq2.len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]