[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let regex_set = RegexSet::empty();",
          "    let result = regex_set.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert!(result);",
          "    let regex_set_non_empty = RegexSet::new([r\"[a-z]\"]).unwrap();",
          "    let result_non_empty = regex_set_non_empty.is_empty();",
          "    assert!(!result_non_empty);",
          "    let another_regex_set = RegexSet::new([]).unwrap();",
          "    let result_empty_set = another_regex_set.is_empty();",
          "    assert!(result_empty_set);",
          "    let regex_set_single = RegexSet::new([r\"[0-9]\"]).unwrap();",
          "    let result_single = regex_set_single.is_empty();",
          "    assert!(!result_single);"
        ],
        "code": [
          "{",
          "    let regex_set = RegexSet::empty();",
          "    let result = regex_set.is_empty();",
          "    assert!(result);",
          "    let regex_set_non_empty = RegexSet::new([r\"[a-z]\"]).unwrap();",
          "    let result_non_empty = regex_set_non_empty.is_empty();",
          "    assert!(!result_non_empty);",
          "    let another_regex_set = RegexSet::new([]).unwrap();",
          "    let result_empty_set = another_regex_set.is_empty();",
          "    assert!(result_empty_set);",
          "    let regex_set_single = RegexSet::new([r\"[0-9]\"]).unwrap();",
          "    let result_single = regex_set_single.is_empty();",
          "    assert!(!result_single);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let regex_set = RegexSet::new([\"[a-z]\", \"[0-9]\"]).unwrap();",
          "    let result = regex_set.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert!(!result);",
          "    let empty_regex_set = RegexSet::empty();",
          "    let empty_result = empty_regex_set.is_empty();",
          "    assert!(empty_result);"
        ],
        "code": [
          "{",
          "    let regex_set = RegexSet::new([\"[a-z]\", \"[0-9]\"]).unwrap();",
          "    let result = regex_set.is_empty();",
          "    assert!(!result);",
          "    let empty_regex_set = RegexSet::empty();",
          "    let empty_result = empty_regex_set.is_empty();",
          "    assert!(empty_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]