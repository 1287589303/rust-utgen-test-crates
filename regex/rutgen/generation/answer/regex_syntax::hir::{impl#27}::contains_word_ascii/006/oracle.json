[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet::empty();",
          "    look_set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.contains_word_ascii(), false);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet::empty();",
          "    look_set.contains_word_ascii();",
          "    assert_eq!(look_set.contains_word_ascii(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet::full();",
          "    look_set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    look_set.contains_word_ascii() == false;",
          "    look_set.bits & Look::WordAscii.as_repr() == 0;",
          "    look_set.bits & Look::WordAsciiNegate.as_repr() == 0;",
          "    look_set.bits & Look::WordStartAscii.as_repr() == 0;",
          "    look_set.bits & Look::WordEndAscii.as_repr() == 0;",
          "    look_set.bits & Look::WordStartHalfAscii.as_repr() == 0;"
        ],
        "code": [
          "{",
          "    let look_set = LookSet::full();",
          "    look_set.contains_word_ascii();",
          "    look_set.contains_word_ascii() == false;",
          "    look_set.bits & Look::WordAscii.as_repr() == 0;",
          "    look_set.bits & Look::WordAsciiNegate.as_repr() == 0;",
          "    look_set.bits & Look::WordStartAscii.as_repr() == 0;",
          "    look_set.bits & Look::WordEndAscii.as_repr() == 0;",
          "    look_set.bits & Look::WordStartHalfAscii.as_repr() == 0;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet::singleton(Look::WordAscii);",
          "    look_set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    look_set.contains_word_ascii() == false",
          "    let look_set = LookSet::singleton(Look::WordAsciiNegate); look_set.contains_word_ascii() == false",
          "    let look_set = LookSet::singleton(Look::WordStartAscii); look_set.contains_word_ascii() == false",
          "    let look_set = LookSet::singleton(Look::WordEndAscii); look_set.contains_word_ascii() == false",
          "    let look_set = LookSet::singleton(Look::WordStartHalfAscii); look_set.contains_word_ascii() == false",
          "    let look_set = LookSet::empty(); look_set.contains_word_ascii() == false",
          "    let look_set = LookSet::full(); look_set.contains_word_ascii() == true"
        ],
        "code": [
          "{",
          "    let look_set = LookSet::singleton(Look::WordAscii);",
          "    look_set.contains_word_ascii();",
          "    look_set.contains_word_ascii() == false",
          "    let look_set = LookSet::singleton(Look::WordAsciiNegate); look_set.contains_word_ascii() == false",
          "    let look_set = LookSet::singleton(Look::WordStartAscii); look_set.contains_word_ascii() == false",
          "    let look_set = LookSet::singleton(Look::WordEndAscii); look_set.contains_word_ascii() == false",
          "    let look_set = LookSet::singleton(Look::WordStartHalfAscii); look_set.contains_word_ascii() == false",
          "    let look_set = LookSet::empty(); look_set.contains_word_ascii() == false",
          "    let look_set = LookSet::full(); look_set.contains_word_ascii() == true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet::singleton(Look::WordAsciiNegate);",
          "    look_set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    assert!(!look_set.contains(Look::WordAscii));",
          "    assert!(!look_set.contains(Look::WordAsciiNegate));",
          "    assert!(!look_set.contains(Look::WordStartAscii));",
          "    assert!(!look_set.contains(Look::WordEndAscii));",
          "    assert!(!look_set.contains(Look::WordStartHalfAscii));",
          "    assert!(look_set.contains_word_ascii());"
        ],
        "code": [
          "{",
          "    let look_set = LookSet::singleton(Look::WordAsciiNegate);",
          "    look_set.contains_word_ascii();",
          "    assert!(!look_set.contains(Look::WordAscii));",
          "    assert!(!look_set.contains(Look::WordAsciiNegate));",
          "    assert!(!look_set.contains(Look::WordStartAscii));",
          "    assert!(!look_set.contains(Look::WordEndAscii));",
          "    assert!(!look_set.contains(Look::WordStartHalfAscii));",
          "    assert!(look_set.contains_word_ascii());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet::singleton(Look::WordStartAscii);",
          "    look_set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    assert!(!look_set.contains(Look::WordAscii));",
          "    assert!(!look_set.contains(Look::WordAsciiNegate));",
          "    assert!(look_set.contains(Look::WordStartAscii));",
          "    assert!(!look_set.contains(Look::WordEndAscii));",
          "    assert!(!look_set.contains(Look::WordStartHalfAscii));",
          "    assert!(!look_set.contains(Look::WordEndHalfAscii));",
          "    assert!(look_set.contains_word_ascii());"
        ],
        "code": [
          "{",
          "    let look_set = LookSet::singleton(Look::WordStartAscii);",
          "    look_set.contains_word_ascii();",
          "    assert!(!look_set.contains(Look::WordAscii));",
          "    assert!(!look_set.contains(Look::WordAsciiNegate));",
          "    assert!(look_set.contains(Look::WordStartAscii));",
          "    assert!(!look_set.contains(Look::WordEndAscii));",
          "    assert!(!look_set.contains(Look::WordStartHalfAscii));",
          "    assert!(!look_set.contains(Look::WordEndHalfAscii));",
          "    assert!(look_set.contains_word_ascii());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet::singleton(Look::WordEndAscii);",
          "    look_set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.contains_word_ascii(), false);",
          "    let look_set_empty = LookSet::empty();",
          "    assert_eq!(look_set_empty.contains_word_ascii(), false);",
          "    let look_set_full = LookSet::full();",
          "    assert_eq!(look_set_full.contains_word_ascii(), true);",
          "    let look_set_single_word_start_half_ascii = LookSet::singleton(Look::WordStartHalfAscii);",
          "    assert_eq!(look_set_single_word_start_half_ascii.contains_word_ascii(), true);",
          "    let look_set_single_word_end_half_ascii = LookSet::singleton(Look::WordEndHalfAscii);",
          "    assert_eq!(look_set_single_word_end_half_ascii.contains_word_ascii(), true);",
          "    let look_set_single_word_start_ascii = LookSet::singleton(Look::WordStartAscii);",
          "    assert_eq!(look_set_single_word_start_ascii.contains_word_ascii(), true);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet::singleton(Look::WordEndAscii);",
          "    look_set.contains_word_ascii();",
          "    assert_eq!(look_set.contains_word_ascii(), false);",
          "    let look_set_empty = LookSet::empty();",
          "    assert_eq!(look_set_empty.contains_word_ascii(), false);",
          "    let look_set_full = LookSet::full();",
          "    assert_eq!(look_set_full.contains_word_ascii(), true);",
          "    let look_set_single_word_start_half_ascii = LookSet::singleton(Look::WordStartHalfAscii);",
          "    assert_eq!(look_set_single_word_start_half_ascii.contains_word_ascii(), true);",
          "    let look_set_single_word_end_half_ascii = LookSet::singleton(Look::WordEndHalfAscii);",
          "    assert_eq!(look_set_single_word_end_half_ascii.contains_word_ascii(), true);",
          "    let look_set_single_word_start_ascii = LookSet::singleton(Look::WordStartAscii);",
          "    assert_eq!(look_set_single_word_start_ascii.contains_word_ascii(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet::singleton(Look::WordStartHalfAscii);",
          "    look_set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.contains(Look::WordAscii), false);",
          "    assert_eq!(look_set.contains(Look::WordAsciiNegate), false);",
          "    assert_eq!(look_set.contains(Look::WordStartAscii), false);",
          "    assert_eq!(look_set.contains(Look::WordEndAscii), false);",
          "    assert_eq!(look_set.contains(Look::WordStartHalfAscii), true);",
          "    assert_eq!(look_set.contains(Look::WordEndHalfAscii), false);",
          "    assert!(look_set.contains_word_ascii());"
        ],
        "code": [
          "{",
          "    let look_set = LookSet::singleton(Look::WordStartHalfAscii);",
          "    look_set.contains_word_ascii();",
          "    assert_eq!(look_set.contains(Look::WordAscii), false);",
          "    assert_eq!(look_set.contains(Look::WordAsciiNegate), false);",
          "    assert_eq!(look_set.contains(Look::WordStartAscii), false);",
          "    assert_eq!(look_set.contains(Look::WordEndAscii), false);",
          "    assert_eq!(look_set.contains(Look::WordStartHalfAscii), true);",
          "    assert_eq!(look_set.contains(Look::WordEndHalfAscii), false);",
          "    assert!(look_set.contains_word_ascii());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet::singleton(Look::WordEndHalfAscii);",
          "    look_set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    look_set = LookSet::singleton(Look::WordEndHalfAscii);",
          "    assert_eq!(look_set.contains_word_ascii(), false);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet::singleton(Look::WordEndHalfAscii);",
          "    look_set.contains_word_ascii();",
          "    look_set = LookSet::singleton(Look::WordEndHalfAscii);",
          "    assert_eq!(look_set.contains_word_ascii(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet::empty()",
          "        .insert(Look::WordStartHalfAscii)",
          "        .insert(Look::WordEndHalfAscii);",
          "    look_set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    assert!(look_set.contains(Look::WordStartHalfAscii));",
          "    assert!(look_set.contains(Look::WordEndHalfAscii));",
          "    assert!(!look_set.contains(Look::WordAscii));",
          "    assert!(!look_set.contains(Look::WordAsciiNegate));",
          "    assert!(!look_set.contains(Look::WordStartAscii));",
          "    assert!(!look_set.contains(Look::WordEndAscii));",
          "    assert!(!look_set.contains(Look::WordStartHalfUnicode));",
          "    assert!(!look_set.contains(Look::WordEndHalfUnicode));",
          "    assert!(look_set.contains_word_ascii());"
        ],
        "code": [
          "{",
          "    let look_set = LookSet::empty()",
          "        .insert(Look::WordStartHalfAscii)",
          "        .insert(Look::WordEndHalfAscii);",
          "    look_set.contains_word_ascii();",
          "    assert!(look_set.contains(Look::WordStartHalfAscii));",
          "    assert!(look_set.contains(Look::WordEndHalfAscii));",
          "    assert!(!look_set.contains(Look::WordAscii));",
          "    assert!(!look_set.contains(Look::WordAsciiNegate));",
          "    assert!(!look_set.contains(Look::WordStartAscii));",
          "    assert!(!look_set.contains(Look::WordEndAscii));",
          "    assert!(!look_set.contains(Look::WordStartHalfUnicode));",
          "    assert!(!look_set.contains(Look::WordEndHalfUnicode));",
          "    assert!(look_set.contains_word_ascii());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]