[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut lookset = LookSet::empty();",
          "    lookset.set_insert(Look::WordEndAscii);",
          "    assert!(lookset.contains_word_ascii());",
          "}"
        ],
        "oracle": [
          "    lookset.set_insert(Look::WordEndAscii);",
          "    assert!(lookset.contains_word_ascii() == true);",
          "    assert!(lookset.contains(Look::WordAscii) == false);",
          "    assert!(lookset.contains(Look::WordAsciiNegate) == false);",
          "    assert!(lookset.contains(Look::WordStartAscii) == false);",
          "    assert!(lookset.contains(Look::WordEndAscii) == true);",
          "    assert!(lookset.contains(Look::WordStartHalfAscii) == false);",
          "    assert!(lookset.contains(Look::WordEndHalfAscii) == false);"
        ],
        "code": [
          "{",
          "    let mut lookset = LookSet::empty();",
          "    lookset.set_insert(Look::WordEndAscii);",
          "    assert!(lookset.contains_word_ascii());",
          "    lookset.set_insert(Look::WordEndAscii);",
          "    assert!(lookset.contains_word_ascii() == true);",
          "    assert!(lookset.contains(Look::WordAscii) == false);",
          "    assert!(lookset.contains(Look::WordAsciiNegate) == false);",
          "    assert!(lookset.contains(Look::WordStartAscii) == false);",
          "    assert!(lookset.contains(Look::WordEndAscii) == true);",
          "    assert!(lookset.contains(Look::WordStartHalfAscii) == false);",
          "    assert!(lookset.contains(Look::WordEndHalfAscii) == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut lookset = LookSet::full();",
          "    lookset.set_remove(Look::WordAscii);",
          "    lookset.set_remove(Look::WordAsciiNegate);",
          "    lookset.set_remove(Look::WordStartAscii);",
          "    lookset.set_remove(Look::WordStartHalfAscii);",
          "    lookset.set_remove(Look::WordEndHalfAscii);",
          "    lookset.set_insert(Look::WordEndAscii);",
          "    assert!(lookset.contains_word_ascii());",
          "}"
        ],
        "oracle": [
          "    assert!(lookset.contains(Look::WordEndAscii));",
          "    assert!(!lookset.contains(Look::WordAscii));",
          "    assert!(!lookset.contains(Look::WordAsciiNegate));",
          "    assert!(!lookset.contains(Look::WordStartAscii));",
          "    assert!(!lookset.contains(Look::WordStartHalfAscii));",
          "    assert!(!lookset.contains(Look::WordEndHalfAscii));",
          "    assert!(lookset.contains_word_ascii());"
        ],
        "code": [
          "{",
          "    let mut lookset = LookSet::full();",
          "    lookset.set_remove(Look::WordAscii);",
          "    lookset.set_remove(Look::WordAsciiNegate);",
          "    lookset.set_remove(Look::WordStartAscii);",
          "    lookset.set_remove(Look::WordStartHalfAscii);",
          "    lookset.set_remove(Look::WordEndHalfAscii);",
          "    lookset.set_insert(Look::WordEndAscii);",
          "    assert!(lookset.contains_word_ascii());",
          "    assert!(lookset.contains(Look::WordEndAscii));",
          "    assert!(!lookset.contains(Look::WordAscii));",
          "    assert!(!lookset.contains(Look::WordAsciiNegate));",
          "    assert!(!lookset.contains(Look::WordStartAscii));",
          "    assert!(!lookset.contains(Look::WordStartHalfAscii));",
          "    assert!(!lookset.contains(Look::WordEndHalfAscii));",
          "    assert!(lookset.contains_word_ascii());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lookset = LookSet::singleton(Look::WordEndAscii);",
          "    assert!(lookset.contains_word_ascii());",
          "}"
        ],
        "oracle": [
          "    assert!(lookset.contains(Look::WordEndAscii) == true);",
          "    assert!(lookset.contains(Look::WordAscii) == false);",
          "    assert!(lookset.contains(Look::WordAsciiNegate) == false);",
          "    assert!(lookset.contains(Look::WordStartAscii) == false);",
          "    assert!(lookset.contains(Look::WordEndAscii) == true);",
          "    assert!(lookset.contains(Look::WordStartHalfAscii) == false);",
          "    assert!(lookset.contains(Look::WordEndHalfAscii) == false);",
          "    assert!(lookset.contains_word_ascii() == true);"
        ],
        "code": [
          "{",
          "    let lookset = LookSet::singleton(Look::WordEndAscii);",
          "    assert!(lookset.contains_word_ascii());",
          "    assert!(lookset.contains(Look::WordEndAscii) == true);",
          "    assert!(lookset.contains(Look::WordAscii) == false);",
          "    assert!(lookset.contains(Look::WordAsciiNegate) == false);",
          "    assert!(lookset.contains(Look::WordStartAscii) == false);",
          "    assert!(lookset.contains(Look::WordEndAscii) == true);",
          "    assert!(lookset.contains(Look::WordStartHalfAscii) == false);",
          "    assert!(lookset.contains(Look::WordEndHalfAscii) == false);",
          "    assert!(lookset.contains_word_ascii() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut lookset = LookSet::empty();",
          "    lookset.set_insert(Look::WordAscii);",
          "    let _ = lookset.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    let mut lookset = LookSet::empty();",
          "    lookset.set_insert(Look::WordEndAscii);",
          "    assert!(lookset.contains_word_ascii() == true);",
          "    lookset.set_remove(Look::WordEndAscii);",
          "    assert!(lookset.contains_word_ascii() == false);",
          "    lookset.set_insert(Look::WordStartAscii);",
          "    assert!(lookset.contains_word_ascii() == true);",
          "    lookset.set_remove(Look::WordStartAscii);",
          "    assert!(lookset.contains_word_ascii() == false);",
          "    lookset.set_insert(Look::WordEndHalfAscii);",
          "    assert!(lookset.contains_word_ascii() == true);",
          "    lookset.set_remove(Look::WordEndHalfAscii);",
          "    assert!(lookset.contains_word_ascii() == false);"
        ],
        "code": [
          "{",
          "    let mut lookset = LookSet::empty();",
          "    lookset.set_insert(Look::WordAscii);",
          "    let _ = lookset.contains_word_ascii();",
          "    let mut lookset = LookSet::empty();",
          "    lookset.set_insert(Look::WordEndAscii);",
          "    assert!(lookset.contains_word_ascii() == true);",
          "    lookset.set_remove(Look::WordEndAscii);",
          "    assert!(lookset.contains_word_ascii() == false);",
          "    lookset.set_insert(Look::WordStartAscii);",
          "    assert!(lookset.contains_word_ascii() == true);",
          "    lookset.set_remove(Look::WordStartAscii);",
          "    assert!(lookset.contains_word_ascii() == false);",
          "    lookset.set_insert(Look::WordEndHalfAscii);",
          "    assert!(lookset.contains_word_ascii() == true);",
          "    lookset.set_remove(Look::WordEndHalfAscii);",
          "    assert!(lookset.contains_word_ascii() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]