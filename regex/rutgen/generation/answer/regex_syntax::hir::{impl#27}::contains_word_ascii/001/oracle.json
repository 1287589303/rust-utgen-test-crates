[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set = LookSet { bits: Look::WordAscii as u32 };",
          "    set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    assert!(set.contains_word_ascii() == true);",
          "    assert!(set.contains(Look::WordAscii) == true);",
          "    assert!(set.contains(Look::WordAsciiNegate) == false);",
          "    assert!(set.contains(Look::WordStartAscii) == false);",
          "    assert!(set.contains(Look::WordEndAscii) == false);",
          "    assert!(set.contains(Look::WordStartHalfAscii) == false);",
          "    assert!(set.contains(Look::WordEndHalfAscii) == false);"
        ],
        "code": [
          "{",
          "    let set = LookSet { bits: Look::WordAscii as u32 };",
          "    set.contains_word_ascii();",
          "    assert!(set.contains_word_ascii() == true);",
          "    assert!(set.contains(Look::WordAscii) == true);",
          "    assert!(set.contains(Look::WordAsciiNegate) == false);",
          "    assert!(set.contains(Look::WordStartAscii) == false);",
          "    assert!(set.contains(Look::WordEndAscii) == false);",
          "    assert!(set.contains(Look::WordStartHalfAscii) == false);",
          "    assert!(set.contains(Look::WordEndHalfAscii) == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set = LookSet { bits: Look::WordAsciiNegate as u32 };",
          "    set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    assert!(set.contains_word_ascii() == true);",
          "    set.bits = Look::WordAscii as u32;",
          "    assert!(set.contains_word_ascii() == true);",
          "    set.bits = Look::WordStartAscii as u32;",
          "    assert!(set.contains_word_ascii() == true);",
          "    set.bits = Look::WordEndAscii as u32;",
          "    assert!(set.contains_word_ascii() == true);",
          "    set.bits = Look::WordStartHalfAscii as u32;",
          "    assert!(set.contains_word_ascii() == true);",
          "    set.bits = Look::WordEndHalfAscii as u32;",
          "    assert!(set.contains_word_ascii() == true);"
        ],
        "code": [
          "{",
          "    let set = LookSet { bits: Look::WordAsciiNegate as u32 };",
          "    set.contains_word_ascii();",
          "    assert!(set.contains_word_ascii() == true);",
          "    set.bits = Look::WordAscii as u32;",
          "    assert!(set.contains_word_ascii() == true);",
          "    set.bits = Look::WordStartAscii as u32;",
          "    assert!(set.contains_word_ascii() == true);",
          "    set.bits = Look::WordEndAscii as u32;",
          "    assert!(set.contains_word_ascii() == true);",
          "    set.bits = Look::WordStartHalfAscii as u32;",
          "    assert!(set.contains_word_ascii() == true);",
          "    set.bits = Look::WordEndHalfAscii as u32;",
          "    assert!(set.contains_word_ascii() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set = LookSet { bits: Look::WordStartAscii as u32 };",
          "    set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.set_insert(Look::WordAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.set_insert(Look::WordAsciiNegate);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.set_insert(Look::WordStartAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.set_insert(Look::WordEndAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.set_insert(Look::WordStartHalfAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.set_insert(Look::WordEndHalfAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.set_remove(Look::WordAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.set_remove(Look::WordAsciiNegate);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.set_remove(Look::WordStartAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.set_remove(Look::WordEndAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.set_remove(Look::WordStartHalfAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.set_remove(Look::WordEndHalfAscii);",
          "    assert_eq!(set.contains_word_ascii(), false);",
          "    set = LookSet { bits: 0 };",
          "    assert_eq!(set.contains_word_ascii(), false);"
        ],
        "code": [
          "{",
          "    let set = LookSet { bits: Look::WordStartAscii as u32 };",
          "    set.contains_word_ascii();",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.set_insert(Look::WordAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.set_insert(Look::WordAsciiNegate);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.set_insert(Look::WordStartAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.set_insert(Look::WordEndAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.set_insert(Look::WordStartHalfAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.set_insert(Look::WordEndHalfAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.set_remove(Look::WordAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.set_remove(Look::WordAsciiNegate);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.set_remove(Look::WordStartAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.set_remove(Look::WordEndAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.set_remove(Look::WordStartHalfAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.set_remove(Look::WordEndHalfAscii);",
          "    assert_eq!(set.contains_word_ascii(), false);",
          "    set = LookSet { bits: 0 };",
          "    assert_eq!(set.contains_word_ascii(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set = LookSet { bits: Look::WordEndAscii as u32 };",
          "    set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    set.bits = Look::WordAscii as u32; assert!(set.contains_word_ascii());",
          "    set.bits = Look::WordAsciiNegate as u32; assert!(set.contains_word_ascii());",
          "    set.bits = Look::WordStartAscii as u32; assert!(set.contains_word_ascii());",
          "    set.bits = Look::WordEndAscii as u32; assert!(set.contains_word_ascii());",
          "    set.bits = Look::WordStartHalfAscii as u32; assert!(set.contains_word_ascii());",
          "    set.bits = Look::WordEndHalfAscii as u32; assert!(set.contains_word_ascii());",
          "    set.bits = Look::WordAscii as u32 | Look::WordEndAscii as u32; assert!(set.contains_word_ascii());",
          "    set.bits = Look::WordAsciiNegate as u32 | Look::WordStartAscii as u32; assert!(set.contains_word_ascii());",
          "    set.bits = Look::WordStartHalfAscii as u32 | Look::WordEndAscii as u32; assert!(set.contains_word_ascii());",
          "    set.bits = Look::WordEndHalfAscii as u32 | Look::WordStartHalfAscii as u32; assert!(set.contains_word_ascii());",
          "    set.bits = Look::WordAscii as u32 | Look::WordStartHalfAscii as u32 | Look::WordEndAscii as u32; assert!(set.contains_word_ascii());"
        ],
        "code": [
          "{",
          "    let set = LookSet { bits: Look::WordEndAscii as u32 };",
          "    set.contains_word_ascii();",
          "    set.bits = Look::WordAscii as u32; assert!(set.contains_word_ascii());",
          "    set.bits = Look::WordAsciiNegate as u32; assert!(set.contains_word_ascii());",
          "    set.bits = Look::WordStartAscii as u32; assert!(set.contains_word_ascii());",
          "    set.bits = Look::WordEndAscii as u32; assert!(set.contains_word_ascii());",
          "    set.bits = Look::WordStartHalfAscii as u32; assert!(set.contains_word_ascii());",
          "    set.bits = Look::WordEndHalfAscii as u32; assert!(set.contains_word_ascii());",
          "    set.bits = Look::WordAscii as u32 | Look::WordEndAscii as u32; assert!(set.contains_word_ascii());",
          "    set.bits = Look::WordAsciiNegate as u32 | Look::WordStartAscii as u32; assert!(set.contains_word_ascii());",
          "    set.bits = Look::WordStartHalfAscii as u32 | Look::WordEndAscii as u32; assert!(set.contains_word_ascii());",
          "    set.bits = Look::WordEndHalfAscii as u32 | Look::WordStartHalfAscii as u32; assert!(set.contains_word_ascii());",
          "    set.bits = Look::WordAscii as u32 | Look::WordStartHalfAscii as u32 | Look::WordEndAscii as u32; assert!(set.contains_word_ascii());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set = LookSet { bits: Look::WordStartHalfAscii as u32 };",
          "    set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    assert!(set.contains_word_ascii() == true);",
          "    set.set_insert(Look::WordAscii);",
          "    assert!(set.contains_word_ascii() == true);",
          "    set.set_insert(Look::WordAsciiNegate);",
          "    assert!(set.contains_word_ascii() == true);",
          "    set.set_insert(Look::WordStartAscii);",
          "    assert!(set.contains_word_ascii() == true);",
          "    set.set_insert(Look::WordEndAscii);",
          "    assert!(set.contains_word_ascii() == true);",
          "    set.set_insert(Look::WordStartHalfAscii);",
          "    assert!(set.contains_word_ascii() == true);",
          "    set.set_insert(Look::WordEndHalfAscii);",
          "    assert!(set.contains_word_ascii() == true);",
          "    set.set_remove(Look::WordAscii);",
          "    assert!(set.contains_word_ascii() == true);",
          "    set.set_remove(Look::WordAsciiNegate);",
          "    assert!(set.contains_word_ascii() == true);",
          "    set.set_remove(Look::WordStartAscii);",
          "    assert!(set.contains_word_ascii() == true);",
          "    set.set_remove(Look::WordEndAscii);",
          "    assert!(set.contains_word_ascii() == true);",
          "    set.set_remove(Look::WordStartHalfAscii);",
          "    assert!(set.contains_word_ascii() == true);",
          "    set.set_remove(Look::WordEndHalfAscii);",
          "    assert!(set.contains_word_ascii() == false);"
        ],
        "code": [
          "{",
          "    let set = LookSet { bits: Look::WordStartHalfAscii as u32 };",
          "    set.contains_word_ascii();",
          "    assert!(set.contains_word_ascii() == true);",
          "    set.set_insert(Look::WordAscii);",
          "    assert!(set.contains_word_ascii() == true);",
          "    set.set_insert(Look::WordAsciiNegate);",
          "    assert!(set.contains_word_ascii() == true);",
          "    set.set_insert(Look::WordStartAscii);",
          "    assert!(set.contains_word_ascii() == true);",
          "    set.set_insert(Look::WordEndAscii);",
          "    assert!(set.contains_word_ascii() == true);",
          "    set.set_insert(Look::WordStartHalfAscii);",
          "    assert!(set.contains_word_ascii() == true);",
          "    set.set_insert(Look::WordEndHalfAscii);",
          "    assert!(set.contains_word_ascii() == true);",
          "    set.set_remove(Look::WordAscii);",
          "    assert!(set.contains_word_ascii() == true);",
          "    set.set_remove(Look::WordAsciiNegate);",
          "    assert!(set.contains_word_ascii() == true);",
          "    set.set_remove(Look::WordStartAscii);",
          "    assert!(set.contains_word_ascii() == true);",
          "    set.set_remove(Look::WordEndAscii);",
          "    assert!(set.contains_word_ascii() == true);",
          "    set.set_remove(Look::WordStartHalfAscii);",
          "    assert!(set.contains_word_ascii() == true);",
          "    set.set_remove(Look::WordEndHalfAscii);",
          "    assert!(set.contains_word_ascii() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set = LookSet { bits: Look::WordEndHalfAscii as u32 };",
          "    set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    assert!(set.contains(Look::WordAscii) == false);",
          "    assert!(set.contains(Look::WordAsciiNegate) == false);",
          "    assert!(set.contains(Look::WordStartAscii) == false);",
          "    assert!(set.contains(Look::WordEndAscii) == false);",
          "    assert!(set.contains(Look::WordStartHalfAscii) == false);",
          "    assert!(set.contains(Look::WordEndHalfAscii) == true);",
          "    assert!(set.contains_word_ascii() == true);"
        ],
        "code": [
          "{",
          "    let set = LookSet { bits: Look::WordEndHalfAscii as u32 };",
          "    set.contains_word_ascii();",
          "    assert!(set.contains(Look::WordAscii) == false);",
          "    assert!(set.contains(Look::WordAsciiNegate) == false);",
          "    assert!(set.contains(Look::WordStartAscii) == false);",
          "    assert!(set.contains(Look::WordEndAscii) == false);",
          "    assert!(set.contains(Look::WordStartHalfAscii) == false);",
          "    assert!(set.contains(Look::WordEndHalfAscii) == true);",
          "    assert!(set.contains_word_ascii() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set = LookSet { bits: Look::WordAscii as u32 | Look::WordStartAscii as u32 | Look::WordEndAscii as u32 };",
          "    set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    assert!(set.contains(Look::WordAscii));",
          "    assert!(set.contains(Look::WordStartAscii));",
          "    assert!(set.contains(Look::WordEndAscii));",
          "    assert!(set.contains_word_ascii());",
          "    assert_eq!(set.contains_word_ascii(), true);"
        ],
        "code": [
          "{",
          "    let set = LookSet { bits: Look::WordAscii as u32 | Look::WordStartAscii as u32 | Look::WordEndAscii as u32 };",
          "    set.contains_word_ascii();",
          "    assert!(set.contains(Look::WordAscii));",
          "    assert!(set.contains(Look::WordStartAscii));",
          "    assert!(set.contains(Look::WordEndAscii));",
          "    assert!(set.contains_word_ascii());",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]