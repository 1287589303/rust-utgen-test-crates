[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let extractor = Extractor::new().limit_class(0);",
          "    let class_unicode = ClassUnicode::empty();",
          "    extractor.class_over_limit_unicode(&class_unicode);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(extractor.class_over_limit_unicode(&class_unicode), false);",
          "    assert_eq!(extractor.limit_class, 0);",
          "    assert_eq!(class_unicode.iter().count(), 0);",
          "    assert!(class_unicode.ranges().is_empty());",
          "    assert!(!extractor.class_over_limit_unicode(&class_unicode));"
        ],
        "code": [
          "{",
          "    let extractor = Extractor::new().limit_class(0);",
          "    let class_unicode = ClassUnicode::empty();",
          "    extractor.class_over_limit_unicode(&class_unicode);",
          "    assert_eq!(extractor.class_over_limit_unicode(&class_unicode), false);",
          "    assert_eq!(extractor.limit_class, 0);",
          "    assert_eq!(class_unicode.iter().count(), 0);",
          "    assert!(class_unicode.ranges().is_empty());",
          "    assert!(!extractor.class_over_limit_unicode(&class_unicode));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let extractor = Extractor::new().limit_class(0);",
          "    let class_unicode = ClassUnicode::new(vec![ClassUnicodeRange::new('a', 'a')]);",
          "    extractor.class_over_limit_unicode(&class_unicode);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(extractor.class_over_limit_unicode(&class_unicode), true);"
        ],
        "code": [
          "{",
          "    let extractor = Extractor::new().limit_class(0);",
          "    let class_unicode = ClassUnicode::new(vec![ClassUnicodeRange::new('a', 'a')]);",
          "    extractor.class_over_limit_unicode(&class_unicode);",
          "    assert_eq!(extractor.class_over_limit_unicode(&class_unicode), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let extractor = Extractor::new().limit_class(2);",
          "    let class_unicode = ClassUnicode::new(vec![",
          "        ClassUnicodeRange::new('a', 'a'),",
          "        ClassUnicodeRange::new('b', 'b'),",
          "    ]);",
          "    extractor.class_over_limit_unicode(&class_unicode);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(extractor.limit_class, 2);",
          "    assert_eq!(class_unicode.ranges().len(), 2);",
          "    assert_eq!(class_unicode.iter().count(), 2);",
          "    assert!(extractor.class_over_limit_unicode(&class_unicode) == false);"
        ],
        "code": [
          "{",
          "    let extractor = Extractor::new().limit_class(2);",
          "    let class_unicode = ClassUnicode::new(vec![",
          "        ClassUnicodeRange::new('a', 'a'),",
          "        ClassUnicodeRange::new('b', 'b'),",
          "    ]);",
          "    extractor.class_over_limit_unicode(&class_unicode);",
          "    assert_eq!(extractor.limit_class, 2);",
          "    assert_eq!(class_unicode.ranges().len(), 2);",
          "    assert_eq!(class_unicode.iter().count(), 2);",
          "    assert!(extractor.class_over_limit_unicode(&class_unicode) == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let extractor = Extractor::new().limit_class(1);",
          "    let class_unicode = ClassUnicode::new(vec![",
          "        ClassUnicodeRange::new('a', 'a'),",
          "        ClassUnicodeRange::new('b', 'b'),",
          "    ]);",
          "    extractor.class_over_limit_unicode(&class_unicode);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(extractor.class_over_limit_unicode(&class_unicode), false);",
          "    assert_eq!(extractor.limit_class, 1);",
          "    assert_eq!(class_unicode.ranges().len(), 2);",
          "    assert!(class_unicode.iter().count() > 0);"
        ],
        "code": [
          "{",
          "    let extractor = Extractor::new().limit_class(1);",
          "    let class_unicode = ClassUnicode::new(vec![",
          "        ClassUnicodeRange::new('a', 'a'),",
          "        ClassUnicodeRange::new('b', 'b'),",
          "    ]);",
          "    extractor.class_over_limit_unicode(&class_unicode);",
          "    assert_eq!(extractor.class_over_limit_unicode(&class_unicode), false);",
          "    assert_eq!(extractor.limit_class, 1);",
          "    assert_eq!(class_unicode.ranges().len(), 2);",
          "    assert!(class_unicode.iter().count() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]