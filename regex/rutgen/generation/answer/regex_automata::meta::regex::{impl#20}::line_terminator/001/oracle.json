[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().line_terminator(0);",
          "}"
        ],
        "oracle": [
          "    let config = Config::new().line_terminator(0); assert_eq!(config.line_terminator, Some(0));",
          "    let config = Config::new().line_terminator(1); assert_eq!(config.line_terminator, Some(1));",
          "    let config = Config::new().line_terminator(255); assert_eq!(config.line_terminator, Some(255));",
          "    let config = Config::new().line_terminator(127); assert_eq!(config.line_terminator, Some(127));",
          "    let config = Config::new().line_terminator(5); assert_eq!(config.line_terminator, Some(5));"
        ],
        "code": [
          "{",
          "    let config = Config::new().line_terminator(0);",
          "    let config = Config::new().line_terminator(0); assert_eq!(config.line_terminator, Some(0));",
          "    let config = Config::new().line_terminator(1); assert_eq!(config.line_terminator, Some(1));",
          "    let config = Config::new().line_terminator(255); assert_eq!(config.line_terminator, Some(255));",
          "    let config = Config::new().line_terminator(127); assert_eq!(config.line_terminator, Some(127));",
          "    let config = Config::new().line_terminator(5); assert_eq!(config.line_terminator, Some(5));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().line_terminator(255);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.line_terminator, Some(255));",
          "    assert_eq!(config.get_line_terminator(), 255);",
          "    assert!(config.get_utf8_empty().is_none());",
          "    assert!(config.get_auto_prefilter().is_none());",
          "    assert!(config.get_prefilter().is_none());",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(config.get_nfa_size_limit(), None);",
          "    assert_eq!(config.get_onepass_size_limit(), None);",
          "    assert_eq!(config.get_hybrid_cache_capacity(), 0);",
          "    assert_eq!(config.get_dfa_size_limit(), None);",
          "    assert_eq!(config.get_dfa_state_limit(), None);",
          "    assert!(!config.get_byte_classes());",
          "    assert!(!config.get_hybrid());",
          "    assert!(!config.get_dfa());",
          "    assert!(!config.get_onepass());",
          "    assert!(!config.get_backtrack());"
        ],
        "code": [
          "{",
          "    let config = Config::new().line_terminator(255);",
          "    assert_eq!(config.line_terminator, Some(255));",
          "    assert_eq!(config.get_line_terminator(), 255);",
          "    assert!(config.get_utf8_empty().is_none());",
          "    assert!(config.get_auto_prefilter().is_none());",
          "    assert!(config.get_prefilter().is_none());",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(config.get_nfa_size_limit(), None);",
          "    assert_eq!(config.get_onepass_size_limit(), None);",
          "    assert_eq!(config.get_hybrid_cache_capacity(), 0);",
          "    assert_eq!(config.get_dfa_size_limit(), None);",
          "    assert_eq!(config.get_dfa_state_limit(), None);",
          "    assert!(!config.get_byte_classes());",
          "    assert!(!config.get_hybrid());",
          "    assert!(!config.get_dfa());",
          "    assert!(!config.get_onepass());",
          "    assert!(!config.get_backtrack());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().line_terminator(128);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.line_terminator, Some(128));"
        ],
        "code": [
          "{",
          "    let config = Config::new().line_terminator(128);",
          "    assert_eq!(config.line_terminator, Some(128));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().line_terminator(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.line_terminator, Some(1));",
          "    assert_eq!(config.get_line_terminator(), 1);",
          "    assert_ne!(config.line_terminator, None);",
          "    assert_ne!(config.line_terminator, Some(0));",
          "    assert!(config.get_hybrid());",
          "    assert!(!config.get_backtrack());",
          "    assert!(config.get_utf8_empty());",
          "    assert_eq!(config.get_match_kind(), MatchKind::All);",
          "    assert_eq!(config.get_onepass_size_limit(), None);",
          "    assert_eq!(config.get_nfa_size_limit(), None);",
          "    assert_eq!(config.get_dfa_size_limit(), None);",
          "    assert_eq!(config.get_dfa_state_limit(), None);",
          "    assert_eq!(config.get_hybrid_cache_capacity(), 0);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "    assert!(config.get_auto_prefilter());"
        ],
        "code": [
          "{",
          "    let config = Config::new().line_terminator(1);",
          "    assert_eq!(config.line_terminator, Some(1));",
          "    assert_eq!(config.get_line_terminator(), 1);",
          "    assert_ne!(config.line_terminator, None);",
          "    assert_ne!(config.line_terminator, Some(0));",
          "    assert!(config.get_hybrid());",
          "    assert!(!config.get_backtrack());",
          "    assert!(config.get_utf8_empty());",
          "    assert_eq!(config.get_match_kind(), MatchKind::All);",
          "    assert_eq!(config.get_onepass_size_limit(), None);",
          "    assert_eq!(config.get_nfa_size_limit(), None);",
          "    assert_eq!(config.get_dfa_size_limit(), None);",
          "    assert_eq!(config.get_dfa_state_limit(), None);",
          "    assert_eq!(config.get_hybrid_cache_capacity(), 0);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "    assert!(config.get_auto_prefilter());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().line_terminator(254);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.line_terminator, Some(254));"
        ],
        "code": [
          "{",
          "    let config = Config::new().line_terminator(254);",
          "    assert_eq!(config.line_terminator, Some(254));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]