[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = LazyStateID::new_unchecked(0);",
          "    let _result = state_id.to_dead();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state_id.to_dead().as_usize_unchecked(), 1 << (LazyStateID::MAX_BIT - 1));",
          "    assert!(state_id.to_dead().is_dead());",
          "    assert!(!state_id.to_dead().is_unknown());",
          "    assert!(!state_id.to_dead().is_quit());",
          "    assert!(!state_id.to_dead().is_start());",
          "    assert!(!state_id.to_dead().is_match());",
          "    assert!(LazyStateID::new_unchecked((1 << (LazyStateID::MAX_BIT - 1)) | 1).is_dead());"
        ],
        "code": [
          "{",
          "    let state_id = LazyStateID::new_unchecked(0);",
          "    let _result = state_id.to_dead();",
          "    assert_eq!(state_id.to_dead().as_usize_unchecked(), 1 << (LazyStateID::MAX_BIT - 1));",
          "    assert!(state_id.to_dead().is_dead());",
          "    assert!(!state_id.to_dead().is_unknown());",
          "    assert!(!state_id.to_dead().is_quit());",
          "    assert!(!state_id.to_dead().is_start());",
          "    assert!(!state_id.to_dead().is_match());",
          "    assert!(LazyStateID::new_unchecked((1 << (LazyStateID::MAX_BIT - 1)) | 1).is_dead());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = LazyStateID::new_unchecked(1);",
          "    let _result = state_id.to_dead();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state_id.to_dead().as_usize_unchecked(), 1 | LazyStateID::MASK_DEAD);",
          "    assert!(state_id.to_dead().is_dead());",
          "    assert!(!state_id.to_dead().is_unknown());",
          "    assert!(!state_id.to_dead().is_quit());",
          "    assert!(!state_id.to_dead().is_start());",
          "    assert!(!state_id.to_dead().is_match());",
          "    assert_ne!(state_id.to_dead().as_usize_unchecked(), state_id.as_usize_unchecked());",
          "    assert!(state_id.to_dead().is_tagged());"
        ],
        "code": [
          "{",
          "    let state_id = LazyStateID::new_unchecked(1);",
          "    let _result = state_id.to_dead();",
          "    assert_eq!(state_id.to_dead().as_usize_unchecked(), 1 | LazyStateID::MASK_DEAD);",
          "    assert!(state_id.to_dead().is_dead());",
          "    assert!(!state_id.to_dead().is_unknown());",
          "    assert!(!state_id.to_dead().is_quit());",
          "    assert!(!state_id.to_dead().is_start());",
          "    assert!(!state_id.to_dead().is_match());",
          "    assert_ne!(state_id.to_dead().as_usize_unchecked(), state_id.as_usize_unchecked());",
          "    assert!(state_id.to_dead().is_tagged());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = LazyStateID::new_unchecked(31);",
          "    let _result = state_id.to_dead();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.as_usize_unchecked() & LazyStateID::MASK_DEAD, LazyStateID::MASK_DEAD);",
          "    assert!(state_id.is_dead());",
          "    assert!(state_id.to_dead().is_tagged());",
          "    assert!(state_id.to_dead().is_match() == false);",
          "    assert!(state_id.to_dead().as_usize_unchecked() > state_id.as_usize_unchecked());",
          "    assert!(state_id.to_dead().as_usize_unchecked() <= LazyStateID::MAX);"
        ],
        "code": [
          "{",
          "    let state_id = LazyStateID::new_unchecked(31);",
          "    let _result = state_id.to_dead();",
          "    assert_eq!(_result.as_usize_unchecked() & LazyStateID::MASK_DEAD, LazyStateID::MASK_DEAD);",
          "    assert!(state_id.is_dead());",
          "    assert!(state_id.to_dead().is_tagged());",
          "    assert!(state_id.to_dead().is_match() == false);",
          "    assert!(state_id.to_dead().as_usize_unchecked() > state_id.as_usize_unchecked());",
          "    assert!(state_id.to_dead().as_usize_unchecked() <= LazyStateID::MAX);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = LazyStateID::new_unchecked(32);",
          "    let _result = state_id.to_dead();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.as_usize_unchecked(), 32 | LazyStateID::MASK_DEAD);",
          "    assert_eq!(_result.is_dead(), true);",
          "    assert_eq!(_result.is_unknown(), false);",
          "    assert_eq!(_result.is_quit(), false);",
          "    assert_eq!(_result.is_start(), false);",
          "    assert_eq!(_result.is_match(), false);",
          "    assert_ne!(state_id.as_usize_unchecked(), _result.as_usize_unchecked());"
        ],
        "code": [
          "{",
          "    let state_id = LazyStateID::new_unchecked(32);",
          "    let _result = state_id.to_dead();",
          "    assert_eq!(_result.as_usize_unchecked(), 32 | LazyStateID::MASK_DEAD);",
          "    assert_eq!(_result.is_dead(), true);",
          "    assert_eq!(_result.is_unknown(), false);",
          "    assert_eq!(_result.is_quit(), false);",
          "    assert_eq!(_result.is_start(), false);",
          "    assert_eq!(_result.is_match(), false);",
          "    assert_ne!(state_id.as_usize_unchecked(), _result.as_usize_unchecked());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = LazyStateID::new_unchecked(63);",
          "    let _result = state_id.to_dead();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.as_usize_unchecked(), 63 | LazyStateID::MASK_DEAD);",
          "    assert_eq!(_result.is_dead(), true);",
          "    assert_eq!(_result.is_unknown(), false);",
          "    assert_eq!(_result.is_quit(), false);",
          "    assert_eq!(_result.is_start(), false);",
          "    assert_eq!(_result.is_match(), false);",
          "    assert_eq!(_result.as_usize_unchecked() & LazyStateID::MASK_DEAD, LazyStateID::MASK_DEAD);"
        ],
        "code": [
          "{",
          "    let state_id = LazyStateID::new_unchecked(63);",
          "    let _result = state_id.to_dead();",
          "    assert_eq!(_result.as_usize_unchecked(), 63 | LazyStateID::MASK_DEAD);",
          "    assert_eq!(_result.is_dead(), true);",
          "    assert_eq!(_result.is_unknown(), false);",
          "    assert_eq!(_result.is_quit(), false);",
          "    assert_eq!(_result.is_start(), false);",
          "    assert_eq!(_result.is_match(), false);",
          "    assert_eq!(_result.as_usize_unchecked() & LazyStateID::MASK_DEAD, LazyStateID::MASK_DEAD);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]