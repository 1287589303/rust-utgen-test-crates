[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_id_value = PatternEpsilons::PATTERN_ID_LIMIT - 1; // valid pattern ID",
          "    let pattern_id = PatternID::new_unchecked(pattern_id_value.as_usize());",
          "    let epsilons_value = 1; // non-zero value for epsilons",
          "    let epsilons = Epsilons(epsilons_value);",
          "    ",
          "    let pattern_epsilons = PatternEpsilons(pattern_id_value << PatternEpsilons::PATTERN_ID_SHIFT | epsilons_value);",
          "    ",
          "    pattern_epsilons.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert!(pattern_epsilons.pattern_id().is_some());",
          "    assert!(!pattern_epsilons.epsilons().is_empty());",
          "    assert_eq!(pattern_epsilons.is_empty(), false);"
        ],
        "code": [
          "{",
          "    let pattern_id_value = PatternEpsilons::PATTERN_ID_LIMIT - 1; // valid pattern ID",
          "    let pattern_id = PatternID::new_unchecked(pattern_id_value.as_usize());",
          "    let epsilons_value = 1; // non-zero value for epsilons",
          "    let epsilons = Epsilons(epsilons_value);",
          "    ",
          "    let pattern_epsilons = PatternEpsilons(pattern_id_value << PatternEpsilons::PATTERN_ID_SHIFT | epsilons_value);",
          "    ",
          "    pattern_epsilons.is_empty();",
          "    assert!(pattern_epsilons.pattern_id().is_some());",
          "    assert!(!pattern_epsilons.epsilons().is_empty());",
          "    assert_eq!(pattern_epsilons.is_empty(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_id_value = 123; // another valid pattern ID",
          "    let pattern_id = PatternID::new_unchecked(pattern_id_value);",
          "    let epsilons_value = 10; // non-zero value for epsilons",
          "    let epsilons = Epsilons(epsilons_value);",
          "    ",
          "    let pattern_epsilons = PatternEpsilons(pattern_id_value << PatternEpsilons::PATTERN_ID_SHIFT | epsilons_value);",
          "    ",
          "    pattern_epsilons.is_empty();",
          "}"
        ],
        "oracle": [
          "    self.pattern_id().is_none() // expect true",
          "    self.epsilons().is_empty() // expect false",
          "    pattern_epsilons.is_empty() // expect false"
        ],
        "code": [
          "{",
          "    let pattern_id_value = 123; // another valid pattern ID",
          "    let pattern_id = PatternID::new_unchecked(pattern_id_value);",
          "    let epsilons_value = 10; // non-zero value for epsilons",
          "    let epsilons = Epsilons(epsilons_value);",
          "    ",
          "    let pattern_epsilons = PatternEpsilons(pattern_id_value << PatternEpsilons::PATTERN_ID_SHIFT | epsilons_value);",
          "    ",
          "    pattern_epsilons.is_empty();",
          "    self.pattern_id().is_none() // expect true",
          "    self.epsilons().is_empty() // expect false",
          "    pattern_epsilons.is_empty() // expect false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_id_value = 2048; // another valid pattern ID",
          "    let pattern_id = PatternID::new_unchecked(pattern_id_value);",
          "    let epsilons_value = 5; // non-zero value for epsilons",
          "    let epsilons = Epsilons(epsilons_value);",
          "    ",
          "    let pattern_epsilons = PatternEpsilons(pattern_id_value << PatternEpsilons::PATTERN_ID_SHIFT | epsilons_value);",
          "    ",
          "    pattern_epsilons.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pattern_epsilons.pattern_id().is_some(), true);",
          "    assert_eq!(pattern_epsilons.epsilons().is_empty(), false);",
          "    assert_eq!(pattern_epsilons.is_empty(), false);"
        ],
        "code": [
          "{",
          "    let pattern_id_value = 2048; // another valid pattern ID",
          "    let pattern_id = PatternID::new_unchecked(pattern_id_value);",
          "    let epsilons_value = 5; // non-zero value for epsilons",
          "    let epsilons = Epsilons(epsilons_value);",
          "    ",
          "    let pattern_epsilons = PatternEpsilons(pattern_id_value << PatternEpsilons::PATTERN_ID_SHIFT | epsilons_value);",
          "    ",
          "    pattern_epsilons.is_empty();",
          "    assert_eq!(pattern_epsilons.pattern_id().is_some(), true);",
          "    assert_eq!(pattern_epsilons.epsilons().is_empty(), false);",
          "    assert_eq!(pattern_epsilons.is_empty(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]