[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_epsilons = PatternEpsilons(0);",
          "    let _ = pattern_epsilons.is_empty();",
          "}"
        ],
        "oracle": [
          "    self.is_empty() == true",
          "    self.0 == 0",
          "    self.pattern_id().is_none() == true",
          "    self.epsilons().is_empty() == true"
        ],
        "code": [
          "{",
          "    let pattern_epsilons = PatternEpsilons(0);",
          "    let _ = pattern_epsilons.is_empty();",
          "    self.is_empty() == true",
          "    self.0 == 0",
          "    self.pattern_id().is_none() == true",
          "    self.epsilons().is_empty() == true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_epsilons = PatternEpsilons(PatternEpsilons::PATTERN_ID_LIMIT);",
          "    let _ = pattern_epsilons.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert!(pattern_epsilons.is_empty());"
        ],
        "code": [
          "{",
          "    let pattern_epsilons = PatternEpsilons(PatternEpsilons::PATTERN_ID_LIMIT);",
          "    let _ = pattern_epsilons.is_empty();",
          "    assert!(pattern_epsilons.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let epsilons = Epsilons::empty();",
          "    let pattern_epsilons = PatternEpsilons(0 | epsilons.0);",
          "    let _ = pattern_epsilons.is_empty();",
          "}"
        ],
        "oracle": [
          "    let epsilons = Epsilons::empty();",
          "    let pattern_epsilons = PatternEpsilons(0 | epsilons.0);",
          "    assert!(pattern_epsilons.is_empty());",
          "    let pattern_epsilons_non_empty = PatternEpsilons(PatternEpsilons::PATTERN_ID_MASK);",
          "    assert!(!pattern_epsilons_non_empty.is_empty());",
          "    let epsilons_with_slots = Epsilons(0b000000000000000000000000000000000000000000000000000000000000001010);",
          "    let pattern_epsilons_with_slots = PatternEpsilons(0 | epsilons_with_slots.0);",
          "    assert!(!pattern_epsilons_with_slots.is_empty());",
          "    let epsilons_full = Epsilons(Epsilons::SLOT_MASK);",
          "    let pattern_epsilons_full = PatternEpsilons(PatternEpsilons::PATTERN_ID_LIMIT | epsilons_full.0);",
          "    assert!(pattern_epsilons_full.is_empty());"
        ],
        "code": [
          "{",
          "    let epsilons = Epsilons::empty();",
          "    let pattern_epsilons = PatternEpsilons(0 | epsilons.0);",
          "    let _ = pattern_epsilons.is_empty();",
          "    let epsilons = Epsilons::empty();",
          "    let pattern_epsilons = PatternEpsilons(0 | epsilons.0);",
          "    assert!(pattern_epsilons.is_empty());",
          "    let pattern_epsilons_non_empty = PatternEpsilons(PatternEpsilons::PATTERN_ID_MASK);",
          "    assert!(!pattern_epsilons_non_empty.is_empty());",
          "    let epsilons_with_slots = Epsilons(0b000000000000000000000000000000000000000000000000000000000000001010);",
          "    let pattern_epsilons_with_slots = PatternEpsilons(0 | epsilons_with_slots.0);",
          "    assert!(!pattern_epsilons_with_slots.is_empty());",
          "    let epsilons_full = Epsilons(Epsilons::SLOT_MASK);",
          "    let pattern_epsilons_full = PatternEpsilons(PatternEpsilons::PATTERN_ID_LIMIT | epsilons_full.0);",
          "    assert!(pattern_epsilons_full.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]