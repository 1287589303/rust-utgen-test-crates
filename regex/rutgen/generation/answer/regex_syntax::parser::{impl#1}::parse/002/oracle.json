[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut parser = Parser::new();",
          "    let pattern = \"(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(w(x(y(z))))))))))))))))))))))))\"; // Deeply nested groups",
          "    let _ = parser.parse(pattern);",
          "}"
        ],
        "oracle": [
          "    assert!(parser.hir.translate(pattern, &ast).is_err());",
          "    assert!(parser.ast.parse(pattern).is_ok());",
          "    assert!(parser.nest_limit > 0);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.scratch.borrow().is_empty());",
          "    assert!(parser.stack_group.borrow().is_empty());",
          "    assert!(parser.stack_class.borrow().is_empty());",
          "    assert!(parser.comments.borrow().is_empty());",
          "    assert!(!parser.ignore_whitespace.get());",
          "    assert_eq!(parser.capture_names.borrow().len(), 0);"
        ],
        "code": [
          "{",
          "    let mut parser = Parser::new();",
          "    let pattern = \"(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(w(x(y(z))))))))))))))))))))))))\"; // Deeply nested groups",
          "    let _ = parser.parse(pattern);",
          "    assert!(parser.hir.translate(pattern, &ast).is_err());",
          "    assert!(parser.ast.parse(pattern).is_ok());",
          "    assert!(parser.nest_limit > 0);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.scratch.borrow().is_empty());",
          "    assert!(parser.stack_group.borrow().is_empty());",
          "    assert!(parser.stack_class.borrow().is_empty());",
          "    assert!(parser.comments.borrow().is_empty());",
          "    assert!(!parser.ignore_whitespace.get());",
          "    assert_eq!(parser.capture_names.borrow().len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut parser = Parser::new();",
          "    let pattern = \"[\\\\d\\\\w\\\\s\\\\p{L}]\"; // Complex character classes",
          "    let _ = parser.parse(pattern);",
          "}"
        ],
        "oracle": [
          "    assert!(parser.parse(pattern).is_err());",
          "    assert_eq!(parser.parse(pattern).unwrap_err().kind, ErrorKind::Translate);",
          "    assert!(parser.hir.translate(pattern, &ast).is_err());",
          "    assert!(parser.ast.parse(pattern).is_ok());",
          "    assert!(parser.capture_index.get() == 0);",
          "    assert!(parser.comments.borrow().is_empty());",
          "    assert!(parser.stack_group.borrow().is_empty());",
          "    assert!(parser.stack_class.borrow().is_empty());",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(parser.scratch.borrow().is_empty());"
        ],
        "code": [
          "{",
          "    let mut parser = Parser::new();",
          "    let pattern = \"[\\\\d\\\\w\\\\s\\\\p{L}]\"; // Complex character classes",
          "    let _ = parser.parse(pattern);",
          "    assert!(parser.parse(pattern).is_err());",
          "    assert_eq!(parser.parse(pattern).unwrap_err().kind, ErrorKind::Translate);",
          "    assert!(parser.hir.translate(pattern, &ast).is_err());",
          "    assert!(parser.ast.parse(pattern).is_ok());",
          "    assert!(parser.capture_index.get() == 0);",
          "    assert!(parser.comments.borrow().is_empty());",
          "    assert!(parser.stack_group.borrow().is_empty());",
          "    assert!(parser.stack_class.borrow().is_empty());",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(parser.scratch.borrow().is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut parser = Parser::new();",
          "    let pattern = \"\"; // Empty pattern",
          "    let _ = parser.parse(pattern);",
          "}"
        ],
        "oracle": [
          "    let mut parser = Parser::new();",
          "    let pattern = \"\";",
          "    let result = parser.parse(pattern);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind, ErrorKind::Translate);",
          "    assert!(result.unwrap_err().pattern.is_empty());",
          "    assert!(result.unwrap_err().span.start == 0);",
          "    assert!(result.unwrap_err().span.end == 0);"
        ],
        "code": [
          "{",
          "    let mut parser = Parser::new();",
          "    let pattern = \"\"; // Empty pattern",
          "    let _ = parser.parse(pattern);",
          "    let mut parser = Parser::new();",
          "    let pattern = \"\";",
          "    let result = parser.parse(pattern);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind, ErrorKind::Translate);",
          "    assert!(result.unwrap_err().pattern.is_empty());",
          "    assert!(result.unwrap_err().span.start == 0);",
          "    assert!(result.unwrap_err().span.end == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut parser = Parser::new();",
          "    let pattern = \"(abc|def|ghi|jkl|mno)(xyz|123|!@#)\"; // Alternation with groups",
          "    let _ = parser.parse(pattern);",
          "}"
        ],
        "oracle": [
          "    assert!(parser.ast.parse(pattern).is_ok());",
          "    assert!(parser.hir.translate(pattern, &parser.ast.parse(pattern).unwrap()).is_err());"
        ],
        "code": [
          "{",
          "    let mut parser = Parser::new();",
          "    let pattern = \"(abc|def|ghi|jkl|mno)(xyz|123|!@#)\"; // Alternation with groups",
          "    let _ = parser.parse(pattern);",
          "    assert!(parser.ast.parse(pattern).is_ok());",
          "    assert!(parser.hir.translate(pattern, &parser.ast.parse(pattern).unwrap()).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut parser = Parser::new();",
          "    let pattern = \"(?:a|b|c)(?:(?=d)|(?=e))\"; // Lookahead with non-capturing groups",
          "    let _ = parser.parse(pattern);",
          "}"
        ],
        "oracle": [
          "    let mut parser = Parser::new();",
          "    let pattern = \"(?:a|b|c)(?:(?=d)|(?=e))\";",
          "    let ast_result = parser.ast.parse(pattern);",
          "    let hir_result = parser.hir.translate(pattern, &ast_result.unwrap());",
          "    assert!(hir_result.is_err());"
        ],
        "code": [
          "{",
          "    let mut parser = Parser::new();",
          "    let pattern = \"(?:a|b|c)(?:(?=d)|(?=e))\"; // Lookahead with non-capturing groups",
          "    let _ = parser.parse(pattern);",
          "    let mut parser = Parser::new();",
          "    let pattern = \"(?:a|b|c)(?:(?=d)|(?=e))\";",
          "    let ast_result = parser.ast.parse(pattern);",
          "    let hir_result = parser.hir.translate(pattern, &ast_result.unwrap());",
          "    assert!(hir_result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]