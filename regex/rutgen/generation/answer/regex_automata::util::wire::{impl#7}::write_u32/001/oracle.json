[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = [0u8; 4];",
          "    let n: u32 = 0;",
          "    BE::write_u32(n, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, [0, 0, 0, 0]);  // Check if dst is filled with zeroes for input 0",
          "    let n: u32 = 1;",
          "    BE::write_u32(n, &mut dst);",
          "    assert_eq!(dst, [0, 0, 0, 1]);  // Check if the last byte is set to 1 for input 1",
          "    let n: u32 = 0xFF;",
          "    BE::write_u32(n, &mut dst);",
          "    assert_eq!(dst, [0, 0, 0, 255]);  // Check if last byte is 255",
          "    let n: u32 = 0x01020304;",
          "    BE::write_u32(n, &mut dst);",
          "    assert_eq!(dst, [1, 2, 3, 4]);  // Check endianness for input 0x01020304",
          "    let n: u32 = u32::MAX;",
          "    BE::write_u32(n, &mut dst);",
          "    assert_eq!(dst, [255, 255, 255, 255]);  // Check if all bytes are 255 for MAX value"
        ],
        "code": [
          "{",
          "    let mut dst = [0u8; 4];",
          "    let n: u32 = 0;",
          "    BE::write_u32(n, &mut dst);",
          "    assert_eq!(dst, [0, 0, 0, 0]);  // Check if dst is filled with zeroes for input 0",
          "    let n: u32 = 1;",
          "    BE::write_u32(n, &mut dst);",
          "    assert_eq!(dst, [0, 0, 0, 1]);  // Check if the last byte is set to 1 for input 1",
          "    let n: u32 = 0xFF;",
          "    BE::write_u32(n, &mut dst);",
          "    assert_eq!(dst, [0, 0, 0, 255]);  // Check if last byte is 255",
          "    let n: u32 = 0x01020304;",
          "    BE::write_u32(n, &mut dst);",
          "    assert_eq!(dst, [1, 2, 3, 4]);  // Check endianness for input 0x01020304",
          "    let n: u32 = u32::MAX;",
          "    BE::write_u32(n, &mut dst);",
          "    assert_eq!(dst, [255, 255, 255, 255]);  // Check if all bytes are 255 for MAX value",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = [0u8; 4];",
          "    let n: u32 = 4294967295;",
          "    BE::write_u32(n, &mut dst);",
          "}"
        ],
        "oracle": [
          "    let mut dst = [0u8; 4];",
          "    let n: u32 = 4294967295;",
          "    BE::write_u32(n, &mut dst);",
          "    assert_eq!(dst, [255, 255, 255, 255]);"
        ],
        "code": [
          "{",
          "    let mut dst = [0u8; 4];",
          "    let n: u32 = 4294967295;",
          "    BE::write_u32(n, &mut dst);",
          "    let mut dst = [0u8; 4];",
          "    let n: u32 = 4294967295;",
          "    BE::write_u32(n, &mut dst);",
          "    assert_eq!(dst, [255, 255, 255, 255]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = [0u8; 4];",
          "    let n: u32 = 2147483648;",
          "    BE::write_u32(n, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, [0x80, 0x00, 0x00, 0x00]);"
        ],
        "code": [
          "{",
          "    let mut dst = [0u8; 4];",
          "    let n: u32 = 2147483648;",
          "    BE::write_u32(n, &mut dst);",
          "    assert_eq!(dst, [0x80, 0x00, 0x00, 0x00]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = [0u8; 4];",
          "    let n: u32 = 1;",
          "    BE::write_u32(n, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, [0, 0, 0, 1]);"
        ],
        "code": [
          "{",
          "    let mut dst = [0u8; 4];",
          "    let n: u32 = 1;",
          "    BE::write_u32(n, &mut dst);",
          "    assert_eq!(dst, [0, 0, 0, 1]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = [0u8; 4];",
          "    let n: u32 = 4294967294;",
          "    BE::write_u32(n, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, [0xFF, 0xFF, 0xFF, 0xFE]);"
        ],
        "code": [
          "{",
          "    let mut dst = [0u8; 4];",
          "    let n: u32 = 4294967294;",
          "    BE::write_u32(n, &mut dst);",
          "    assert_eq!(dst, [0xFF, 0xFF, 0xFF, 0xFE]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]