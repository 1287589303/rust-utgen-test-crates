[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = RetryQuadraticError::new();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(error, RetryQuadraticError::new());",
          "    assert!(matches!(error, RetryQuadraticError(_)));",
          "    assert!(std::mem::size_of_val(&error) == std::mem::size_of::<RetryQuadraticError>());",
          "    assert!(format!(\"{:?}\", error) == \"RetryQuadraticError(())\");",
          "    assert!(std::any::TypeId::of::<RetryQuadraticError>() == std::any::TypeId::of::<RetryQuadraticError>());"
        ],
        "code": [
          "{",
          "    let error = RetryQuadraticError::new();",
          "    assert_eq!(error, RetryQuadraticError::new());",
          "    assert!(matches!(error, RetryQuadraticError(_)));",
          "    assert!(std::mem::size_of_val(&error) == std::mem::size_of::<RetryQuadraticError>());",
          "    assert!(format!(\"{:?}\", error) == \"RetryQuadraticError(())\");",
          "    assert!(std::any::TypeId::of::<RetryQuadraticError>() == std::any::TypeId::of::<RetryQuadraticError>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = RetryQuadraticError::new();",
          "}"
        ],
        "oracle": [
          "    let error = RetryQuadraticError::new();",
          "    assert_eq!(error, RetryQuadraticError(()));",
          "    assert!(std::mem::size_of_val(&error) > 0);",
          "    assert!(std::any::type_name::<RetryQuadraticError>() == \"regex_automata::RetryQuadraticError\");",
          "    assert!(std::panic::catch_unwind(|| RetryQuadraticError::new()).is_ok());",
          "    assert!(std::any::TypeId::of::<RetryQuadraticError>() == std::any::TypeId::of::<RetryQuadraticError>());"
        ],
        "code": [
          "{",
          "    let error = RetryQuadraticError::new();",
          "    let error = RetryQuadraticError::new();",
          "    assert_eq!(error, RetryQuadraticError(()));",
          "    assert!(std::mem::size_of_val(&error) > 0);",
          "    assert!(std::any::type_name::<RetryQuadraticError>() == \"regex_automata::RetryQuadraticError\");",
          "    assert!(std::panic::catch_unwind(|| RetryQuadraticError::new()).is_ok());",
          "    assert!(std::any::TypeId::of::<RetryQuadraticError>() == std::any::TypeId::of::<RetryQuadraticError>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]