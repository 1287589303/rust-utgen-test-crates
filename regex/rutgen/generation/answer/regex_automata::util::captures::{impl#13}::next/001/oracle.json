[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let items: &[Option<Arc<str>>] = &[];",
          "    let mut iter = GroupInfoPatternNames { it: items.iter() };",
          "    let result = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let items: &[Option<Arc<str>>] = &[];",
          "    let mut iter = GroupInfoPatternNames { it: items.iter() };",
          "    let result = iter.next();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let items: &[Option<Arc<str>>] = &[None];",
          "    let mut iter = GroupInfoPatternNames { it: items.iter() };",
          "    let result = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(None));"
        ],
        "code": [
          "{",
          "    let items: &[Option<Arc<str>>] = &[None];",
          "    let mut iter = GroupInfoPatternNames { it: items.iter() };",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(None));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let items: &[Option<Arc<str>>] = &[Some(Arc::new(\"first\".to_string())), Some(Arc::new(\"second\".to_string()))];",
          "    let mut iter = GroupInfoPatternNames { it: items.iter() };",
          "    let result1 = iter.next();",
          "    let result2 = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result1, Some(Some(\"first\")));",
          "    assert_eq!(result2, Some(Some(\"second\")));"
        ],
        "code": [
          "{",
          "    let items: &[Option<Arc<str>>] = &[Some(Arc::new(\"first\".to_string())), Some(Arc::new(\"second\".to_string()))];",
          "    let mut iter = GroupInfoPatternNames { it: items.iter() };",
          "    let result1 = iter.next();",
          "    let result2 = iter.next();",
          "    assert_eq!(result1, Some(Some(\"first\")));",
          "    assert_eq!(result2, Some(Some(\"second\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let items: &[Option<Arc<str>>] = &[Some(Arc::new(\"valid\".to_string())), None, Some(Arc::new(\"another\".to_string()))];",
          "    let mut iter = GroupInfoPatternNames { it: items.iter() };",
          "    let result1 = iter.next();",
          "    let result2 = iter.next();",
          "    let result3 = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result1, Some(Some(\"valid\")));",
          "    assert_eq!(result2, Some(None));",
          "    assert_eq!(result3, Some(Some(\"another\")));",
          "    assert_eq!(iter.next(), None);"
        ],
        "code": [
          "{",
          "    let items: &[Option<Arc<str>>] = &[Some(Arc::new(\"valid\".to_string())), None, Some(Arc::new(\"another\".to_string()))];",
          "    let mut iter = GroupInfoPatternNames { it: items.iter() };",
          "    let result1 = iter.next();",
          "    let result2 = iter.next();",
          "    let result3 = iter.next();",
          "    assert_eq!(result1, Some(Some(\"valid\")));",
          "    assert_eq!(result2, Some(None));",
          "    assert_eq!(result3, Some(Some(\"another\")));",
          "    assert_eq!(iter.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]