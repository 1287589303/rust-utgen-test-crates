[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::Start;",
          "    let _ = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(compiler.c_look(&hir::Look::Start), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::End), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartHalfAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert!(compiler.add_look(Look::Start).is_ok());",
          "    assert!(compiler.add_look(Look::End).is_ok());",
          "    assert!(compiler.add_look(Look::WordStartHalfAscii).is_ok());"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::Start;",
          "    let _ = compiler.c_look(&anchor);",
          "    assert_eq!(compiler.c_look(&hir::Look::Start), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::End), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartHalfAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert!(compiler.add_look(Look::Start).is_ok());",
          "    assert!(compiler.add_look(Look::End).is_ok());",
          "    assert!(compiler.add_look(Look::WordStartHalfAscii).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::End;",
          "    let _ = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    let compiler = Compiler { parser: ParserBuilder::new(), config: Config::default(), builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap::default()), };",
          "    let anchor = hir::Look::WordStartHalfAscii;",
          "    assert_eq!(compiler.c_look(&anchor), Ok(ThompsonRef { start: id, end: id }));",
          "    let look = Look::WordStartHalfAscii;",
          "    let id = compiler.add_look(look).expect(\"Failed to add look\");"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::End;",
          "    let _ = compiler.c_look(&anchor);",
          "    let compiler = Compiler { parser: ParserBuilder::new(), config: Config::default(), builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap::default()), };",
          "    let anchor = hir::Look::WordStartHalfAscii;",
          "    assert_eq!(compiler.c_look(&anchor), Ok(ThompsonRef { start: id, end: id }));",
          "    let look = Look::WordStartHalfAscii;",
          "    let id = compiler.add_look(look).expect(\"Failed to add look\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::StartLF;",
          "    let _ = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    let compiler = Compiler { parser: ParserBuilder::new(), config: Config::default(), builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap::default()), };",
          "    let anchor = hir::Look::WordStartHalfAscii;",
          "    let result = compiler.c_look(&anchor);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::StartLF;",
          "    let _ = compiler.c_look(&anchor);",
          "    let compiler = Compiler { parser: ParserBuilder::new(), config: Config::default(), builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap::default()), };",
          "    let anchor = hir::Look::WordStartHalfAscii;",
          "    let result = compiler.c_look(&anchor);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::EndLF;",
          "    let _ = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(compiler.c_look(&hir::Look::StartHalfAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartHalfAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert!(compiler.add_look(Look::WordStartHalfAscii).is_ok());"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::EndLF;",
          "    let _ = compiler.c_look(&anchor);",
          "    assert_eq!(compiler.c_look(&hir::Look::StartHalfAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartHalfAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert!(compiler.add_look(Look::WordStartHalfAscii).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::StartCRLF;",
          "    let _ = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    let anchor = hir::Look::WordStartHalfAscii;",
          "    assert_eq!(compiler.c_look(&anchor), Ok(ThompsonRef { start: id, end: id }));",
          "    let anchor = hir::Look::WordEndHalfAscii;",
          "    assert_eq!(compiler.c_look(&anchor), Ok(ThompsonRef { start: id, end: id }));"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::StartCRLF;",
          "    let _ = compiler.c_look(&anchor);",
          "    let anchor = hir::Look::WordStartHalfAscii;",
          "    assert_eq!(compiler.c_look(&anchor), Ok(ThompsonRef { start: id, end: id }));",
          "    let anchor = hir::Look::WordEndHalfAscii;",
          "    assert_eq!(compiler.c_look(&anchor), Ok(ThompsonRef { start: id, end: id }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::EndCRLF;",
          "    let _ = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(compiler.c_look(&hir::Look::Start), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::End), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::StartLF), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::EndLF), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::StartCRLF), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::EndCRLF), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordAsciiNegate), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordUnicode), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordUnicodeNegate), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordEndAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartUnicode), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordEndUnicode), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartHalfAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordEndHalfAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartHalfUnicode), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordEndHalfUnicode), Ok(ThompsonRef { start: id, end: id }));"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::EndCRLF;",
          "    let _ = compiler.c_look(&anchor);",
          "    assert_eq!(compiler.c_look(&hir::Look::Start), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::End), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::StartLF), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::EndLF), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::StartCRLF), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::EndCRLF), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordAsciiNegate), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordUnicode), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordUnicodeNegate), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordEndAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartUnicode), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordEndUnicode), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartHalfAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordEndHalfAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartHalfUnicode), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordEndHalfUnicode), Ok(ThompsonRef { start: id, end: id }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordAscii;",
          "    let _ = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    let compiler = Compiler { parser: ParserBuilder::new(), config: Config::default(), builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap::default()), };",
          "    let anchor = hir::Look::WordStartHalfAscii;",
          "    let result = compiler.c_look(&anchor);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordAscii;",
          "    let _ = compiler.c_look(&anchor);",
          "    let compiler = Compiler { parser: ParserBuilder::new(), config: Config::default(), builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap::default()), };",
          "    let anchor = hir::Look::WordStartHalfAscii;",
          "    let result = compiler.c_look(&anchor);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordAsciiNegate;",
          "    let _ = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(compiler.c_look(&hir::Look::Start), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::End), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::StartLF), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::EndLF), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::StartCRLF), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::EndCRLF), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordAsciiNegate), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordUnicode), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordUnicodeNegate), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordEndAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartUnicode), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordEndUnicode), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartHalfAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordEndHalfAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartHalfUnicode), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordEndHalfUnicode), Ok(ThompsonRef { start: id, end: id }));"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordAsciiNegate;",
          "    let _ = compiler.c_look(&anchor);",
          "    assert_eq!(compiler.c_look(&hir::Look::Start), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::End), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::StartLF), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::EndLF), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::StartCRLF), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::EndCRLF), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordAsciiNegate), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordUnicode), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordUnicodeNegate), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordEndAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartUnicode), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordEndUnicode), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartHalfAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordEndHalfAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartHalfUnicode), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordEndHalfUnicode), Ok(ThompsonRef { start: id, end: id }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordUnicode;",
          "    let _ = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    let compiler = Compiler { parser: ParserBuilder::new(), config: Config::default(), builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap::default()) };",
          "    let anchor = hir::Look::WordStartHalfAscii;",
          "    let result = compiler.c_look(&anchor);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordUnicode;",
          "    let _ = compiler.c_look(&anchor);",
          "    let compiler = Compiler { parser: ParserBuilder::new(), config: Config::default(), builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap::default()) };",
          "    let anchor = hir::Look::WordStartHalfAscii;",
          "    let result = compiler.c_look(&anchor);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordUnicodeNegate;",
          "    let _ = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    let compiler = Compiler { parser: ParserBuilder::new(), config: Config::default(), builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap::default()), };",
          "    let anchor_word_start_half_ascii = hir::Look::WordStartHalfAscii;",
          "    let result = compiler.c_look(&anchor_word_start_half_ascii);",
          "    assert_eq!(result.is_ok(), true);",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordUnicodeNegate;",
          "    let _ = compiler.c_look(&anchor);",
          "    let compiler = Compiler { parser: ParserBuilder::new(), config: Config::default(), builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap::default()), };",
          "    let anchor_word_start_half_ascii = hir::Look::WordStartHalfAscii;",
          "    let result = compiler.c_look(&anchor_word_start_half_ascii);",
          "    assert_eq!(result.is_ok(), true);",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordStartAscii;",
          "    let _ = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    let compiler = Compiler { parser: ParserBuilder::new(), config: Config::default(), builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap::default()), };",
          "    let anchor = hir::Look::WordStartHalfAscii;",
          "    let result = compiler.c_look(&anchor);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordStartAscii;",
          "    let _ = compiler.c_look(&anchor);",
          "    let compiler = Compiler { parser: ParserBuilder::new(), config: Config::default(), builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap::default()), };",
          "    let anchor = hir::Look::WordStartHalfAscii;",
          "    let result = compiler.c_look(&anchor);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordEndAscii;",
          "    let _ = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    let compiler = Compiler { parser: ParserBuilder::new(), config: Config::default(), builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap::default()) };",
          "    let anchor = hir::Look::WordStartHalfAscii;",
          "    let result = compiler.c_look(&anchor);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordEndAscii;",
          "    let _ = compiler.c_look(&anchor);",
          "    let compiler = Compiler { parser: ParserBuilder::new(), config: Config::default(), builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap::default()) };",
          "    let anchor = hir::Look::WordStartHalfAscii;",
          "    let result = compiler.c_look(&anchor);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordStartUnicode;",
          "    let _ = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(compiler.c_look(&hir::Look::Start), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::End), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::StartLF), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::EndLF), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::StartCRLF), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::EndCRLF), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordAsciiNegate), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordUnicode), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordUnicodeNegate), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordEndAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartUnicode), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordEndUnicode), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartHalfAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordEndHalfAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartHalfUnicode), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordEndHalfUnicode), Ok(ThompsonRef { start: id, end: id }));"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordStartUnicode;",
          "    let _ = compiler.c_look(&anchor);",
          "    assert_eq!(compiler.c_look(&hir::Look::Start), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::End), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::StartLF), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::EndLF), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::StartCRLF), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::EndCRLF), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordAsciiNegate), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordUnicode), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordUnicodeNegate), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordEndAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartUnicode), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordEndUnicode), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartHalfAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordEndHalfAscii), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartHalfUnicode), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordEndHalfUnicode), Ok(ThompsonRef { start: id, end: id }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordEndUnicode;",
          "    let _ = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    let compiler = Compiler { parser: ParserBuilder::new(), config: Config::default(), builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap::default()) };",
          "    let anchor = hir::Look::WordStartHalfAscii;",
          "    let result = compiler.c_look(&anchor);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordEndUnicode;",
          "    let _ = compiler.c_look(&anchor);",
          "    let compiler = Compiler { parser: ParserBuilder::new(), config: Config::default(), builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap::default()) };",
          "    let anchor = hir::Look::WordStartHalfAscii;",
          "    let result = compiler.c_look(&anchor);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordStartHalfAscii;",
          "    let _ = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartHalfAscii).is_ok(), true);",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartHalfAscii).unwrap(), ThompsonRef { start: id, end: id });"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordStartHalfAscii;",
          "    let _ = compiler.c_look(&anchor);",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartHalfAscii).is_ok(), true);",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartHalfAscii).unwrap(), ThompsonRef { start: id, end: id });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordEndHalfAscii;",
          "    let _ = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    let compiler = Compiler { parser: ParserBuilder::new(), config: Config::default(), builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap::default()) };",
          "    let anchor = hir::Look::WordStartHalfAscii;",
          "    let result = compiler.c_look(&anchor);",
          "    assert_eq!(result.is_ok(), true);",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordEndHalfAscii;",
          "    let _ = compiler.c_look(&anchor);",
          "    let compiler = Compiler { parser: ParserBuilder::new(), config: Config::default(), builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap::default()) };",
          "    let anchor = hir::Look::WordStartHalfAscii;",
          "    let result = compiler.c_look(&anchor);",
          "    assert_eq!(result.is_ok(), true);",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordStartHalfUnicode;",
          "    let _ = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    let compiler = Compiler { parser: ParserBuilder::new(), config: Config::default(), builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap::default()), };",
          "    let anchor = hir::Look::WordStartHalfUnicode;",
          "    let result = compiler.c_look(&anchor);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordStartHalfUnicode;",
          "    let _ = compiler.c_look(&anchor);",
          "    let compiler = Compiler { parser: ParserBuilder::new(), config: Config::default(), builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap::default()), };",
          "    let anchor = hir::Look::WordStartHalfUnicode;",
          "    let result = compiler.c_look(&anchor);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordEndHalfUnicode;",
          "    let _ = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    let compiler = Compiler { parser: ParserBuilder::new(), config: Config::default(), builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap::default()) };",
          "    let anchor = hir::Look::WordStartHalfAscii;",
          "    let result = compiler.c_look(&anchor);",
          "    assert_eq!(result.is_ok(), true);",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordEndHalfUnicode;",
          "    let _ = compiler.c_look(&anchor);",
          "    let compiler = Compiler { parser: ParserBuilder::new(), config: Config::default(), builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap::default()) };",
          "    let anchor = hir::Look::WordStartHalfAscii;",
          "    let result = compiler.c_look(&anchor);",
          "    assert_eq!(result.is_ok(), true);",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]