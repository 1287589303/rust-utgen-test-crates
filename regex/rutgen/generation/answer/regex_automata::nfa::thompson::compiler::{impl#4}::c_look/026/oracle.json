[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: vec![] }),",
          "    };",
          "    let anchor = hir::Look::Start;",
          "    let _result = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    let anchor = hir::Look::EndCRLF;",
          "    let result = compiler.c_look(&anchor);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);",
          "    assert!(thompson_ref.start != StateID::ZERO);"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: vec![] }),",
          "    };",
          "    let anchor = hir::Look::Start;",
          "    let _result = compiler.c_look(&anchor);",
          "    let anchor = hir::Look::EndCRLF;",
          "    let result = compiler.c_look(&anchor);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);",
          "    assert!(thompson_ref.start != StateID::ZERO);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: vec![] }),",
          "    };",
          "    let anchor = hir::Look::End;",
          "    let _result = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    let compiler = Compiler {",
          "    parser: ParserBuilder::default(),",
          "    config: Config::default(),",
          "    builder: RefCell::new(Builder::default()),",
          "    utf8_state: RefCell::new(Utf8State::default()),",
          "    trie_state: RefCell::new(RangeTrie::default()),",
          "    utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: vec![] }),",
          "    };",
          "    let anchor = hir::Look::EndCRLF;",
          "    let result = compiler.c_look(&anchor);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: vec![] }),",
          "    };",
          "    let anchor = hir::Look::End;",
          "    let _result = compiler.c_look(&anchor);",
          "    let compiler = Compiler {",
          "    parser: ParserBuilder::default(),",
          "    config: Config::default(),",
          "    builder: RefCell::new(Builder::default()),",
          "    utf8_state: RefCell::new(Utf8State::default()),",
          "    trie_state: RefCell::new(RangeTrie::default()),",
          "    utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: vec![] }),",
          "    };",
          "    let anchor = hir::Look::EndCRLF;",
          "    let result = compiler.c_look(&anchor);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: vec![] }),",
          "    };",
          "    let anchor = hir::Look::StartCRLF;",
          "    let _result = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    let anchor = hir::Look::EndCRLF;",
          "    let _result = compiler.c_look(&anchor);",
          "    assert_eq!(_result, Ok(ThompsonRef { start: id, end: id }));",
          "    assert!(self.add_look(look).is_ok());",
          "    let anchor = hir::Look::WordAscii;",
          "    let _result = compiler.c_look(&anchor);",
          "    assert_eq!(_result, Ok(ThompsonRef { start: id, end: id }));",
          "    let anchor = hir::Look::WordUnicodeNegate;",
          "    let _result = compiler.c_look(&anchor);",
          "    assert_eq!(_result, Ok(ThompsonRef { start: id, end: id }));",
          "    let anchor = hir::Look::WordEndHalfUnicode;",
          "    let _result = compiler.c_look(&anchor);",
          "    assert_eq!(_result, Ok(ThompsonRef { start: id, end: id }));"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: vec![] }),",
          "    };",
          "    let anchor = hir::Look::StartCRLF;",
          "    let _result = compiler.c_look(&anchor);",
          "    let anchor = hir::Look::EndCRLF;",
          "    let _result = compiler.c_look(&anchor);",
          "    assert_eq!(_result, Ok(ThompsonRef { start: id, end: id }));",
          "    assert!(self.add_look(look).is_ok());",
          "    let anchor = hir::Look::WordAscii;",
          "    let _result = compiler.c_look(&anchor);",
          "    assert_eq!(_result, Ok(ThompsonRef { start: id, end: id }));",
          "    let anchor = hir::Look::WordUnicodeNegate;",
          "    let _result = compiler.c_look(&anchor);",
          "    assert_eq!(_result, Ok(ThompsonRef { start: id, end: id }));",
          "    let anchor = hir::Look::WordEndHalfUnicode;",
          "    let _result = compiler.c_look(&anchor);",
          "    assert_eq!(_result, Ok(ThompsonRef { start: id, end: id }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: vec![] }),",
          "    };",
          "    let anchor = hir::Look::EndCRLF;",
          "    let _result = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.is_ok(), true);",
          "    let result = _result.unwrap();",
          "    assert_eq!(result.start, result.end);",
          "    assert!(result.start != StateID::ZERO);",
          "    assert!(result.end != StateID::ZERO);",
          "    assert_eq!(result.start, result.end);"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: vec![] }),",
          "    };",
          "    let anchor = hir::Look::EndCRLF;",
          "    let _result = compiler.c_look(&anchor);",
          "    assert_eq!(_result.is_ok(), true);",
          "    let result = _result.unwrap();",
          "    assert_eq!(result.start, result.end);",
          "    assert!(result.start != StateID::ZERO);",
          "    assert!(result.end != StateID::ZERO);",
          "    assert_eq!(result.start, result.end);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: vec![] }),",
          "    };",
          "    let anchor = hir::Look::WordAscii;",
          "    let _result = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    let anchor = hir::Look::EndCRLF;",
          "    let result = compiler.c_look(&anchor);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: vec![] }),",
          "    };",
          "    let anchor = hir::Look::WordAscii;",
          "    let _result = compiler.c_look(&anchor);",
          "    let anchor = hir::Look::EndCRLF;",
          "    let result = compiler.c_look(&anchor);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: vec![] }),",
          "    };",
          "    let anchor = hir::Look::WordUnicode;",
          "    let _result = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    let anchor = hir::Look::EndCRLF;",
          "    let result = compiler.c_look(&anchor);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);",
          "    assert!(thompson_ref.start != StateID::ZERO);"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: vec![] }),",
          "    };",
          "    let anchor = hir::Look::WordUnicode;",
          "    let _result = compiler.c_look(&anchor);",
          "    let anchor = hir::Look::EndCRLF;",
          "    let result = compiler.c_look(&anchor);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);",
          "    assert!(thompson_ref.start != StateID::ZERO);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: vec![] }),",
          "    };",
          "    let anchor = hir::Look::WordAsciiNegate;",
          "    let _result = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(*anchor, hir::Look::EndCRLF);",
          "    assert!(compiler.add_look(Look::EndCRLF).is_ok());",
          "    let result = compiler.c_look(&hir::Look::EndCRLF);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), ThompsonRef { start: result.unwrap().start, end: result.unwrap().end });"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: vec![] }),",
          "    };",
          "    let anchor = hir::Look::WordAsciiNegate;",
          "    let _result = compiler.c_look(&anchor);",
          "    assert_eq!(*anchor, hir::Look::EndCRLF);",
          "    assert!(compiler.add_look(Look::EndCRLF).is_ok());",
          "    let result = compiler.c_look(&hir::Look::EndCRLF);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), ThompsonRef { start: result.unwrap().start, end: result.unwrap().end });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: vec![] }),",
          "    };",
          "    let anchor = hir::Look::WordUnicodeNegate;",
          "    let _result = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(*anchor, hir::Look::EndCRLF);",
          "    assert!(matches!(_result, Ok(ThompsonRef { start: _, end: _ })));",
          "    assert!(compiler.add_look(Look::EndCRLF).is_ok());"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: vec![] }),",
          "    };",
          "    let anchor = hir::Look::WordUnicodeNegate;",
          "    let _result = compiler.c_look(&anchor);",
          "    assert_eq!(*anchor, hir::Look::EndCRLF);",
          "    assert!(matches!(_result, Ok(ThompsonRef { start: _, end: _ })));",
          "    assert!(compiler.add_look(Look::EndCRLF).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]