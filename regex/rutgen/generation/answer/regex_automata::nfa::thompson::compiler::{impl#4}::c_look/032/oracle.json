[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::Start;",
          "    compiler.c_look(&anchor).unwrap();",
          "}"
        ],
        "oracle": [
          "    compiler.c_look(&hir::Look::StartLF).unwrap();",
          "    assert_eq!(compiler.c_look(&hir::Look::StartLF), Ok(ThompsonRef { start: id, end: id }));",
          "    assert!(compiler.add_look(Look::StartLF).is_ok());",
          "    assert!(matches!(compiler.c_look(&hir::Look::WordAscii), Ok(_)));",
          "    assert!(matches!(compiler.c_look(&hir::Look::WordUnicodeNegate), Ok(_)));",
          "    assert!(matches!(compiler.c_look(&hir::Look::End), Ok(_)));",
          "    assert!(matches!(compiler.c_look(&hir::Look::EndLF), Ok(_)));",
          "    assert!(matches!(compiler.c_look(&hir::Look::WordStartAscii), Ok(_)));",
          "    assert!(matches!(compiler.c_look(&hir::Look::WordEndHalfUnicode), Ok(_)));",
          "    assert!(matches!(compiler.c_look(&hir::Look::Start), Ok(_)));",
          "    assert!(matches!(compiler.c_look(&hir::Look::WordStartHalfUnicode), Ok(_)));"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::Start;",
          "    compiler.c_look(&anchor).unwrap();",
          "    compiler.c_look(&hir::Look::StartLF).unwrap();",
          "    assert_eq!(compiler.c_look(&hir::Look::StartLF), Ok(ThompsonRef { start: id, end: id }));",
          "    assert!(compiler.add_look(Look::StartLF).is_ok());",
          "    assert!(matches!(compiler.c_look(&hir::Look::WordAscii), Ok(_)));",
          "    assert!(matches!(compiler.c_look(&hir::Look::WordUnicodeNegate), Ok(_)));",
          "    assert!(matches!(compiler.c_look(&hir::Look::End), Ok(_)));",
          "    assert!(matches!(compiler.c_look(&hir::Look::EndLF), Ok(_)));",
          "    assert!(matches!(compiler.c_look(&hir::Look::WordStartAscii), Ok(_)));",
          "    assert!(matches!(compiler.c_look(&hir::Look::WordEndHalfUnicode), Ok(_)));",
          "    assert!(matches!(compiler.c_look(&hir::Look::Start), Ok(_)));",
          "    assert!(matches!(compiler.c_look(&hir::Look::WordStartHalfUnicode), Ok(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::End;",
          "    compiler.c_look(&anchor).unwrap();",
          "}"
        ],
        "oracle": [
          "    compiler.c_look(&hir::Look::StartLF).unwrap();",
          "    assert!(compiler.c_look(&hir::Look::StartLF).is_ok());",
          "    let result = compiler.c_look(&hir::Look::StartLF).unwrap();",
          "    assert_eq!(result.start, result.end);",
          "    assert!(matches!(compiler.add_look(Look::StartLF), Ok(_)));"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::End;",
          "    compiler.c_look(&anchor).unwrap();",
          "    compiler.c_look(&hir::Look::StartLF).unwrap();",
          "    assert!(compiler.c_look(&hir::Look::StartLF).is_ok());",
          "    let result = compiler.c_look(&hir::Look::StartLF).unwrap();",
          "    assert_eq!(result.start, result.end);",
          "    assert!(matches!(compiler.add_look(Look::StartLF), Ok(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::StartLF;",
          "    compiler.c_look(&anchor).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(compiler.c_look(&hir::Look::StartLF).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert!(matches!(compiler.c_look(&hir::Look::End), Ok(_)));",
          "    assert!(matches!(compiler.c_look(&hir::Look::StartCRLF), Ok(_)));",
          "    assert!(matches!(compiler.c_look(&hir::Look::WordAscii), Ok(_)));",
          "    assert!(matches!(compiler.c_look(&hir::Look::WordUnicode), Ok(_)));",
          "    assert!(compiler.builder.borrow_mut().add_look(Look::StartLF).is_ok());",
          "    assert!(compiler.add_look(Look::WordStartHalfUnicode).is_ok());"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::StartLF;",
          "    compiler.c_look(&anchor).unwrap();",
          "    assert_eq!(compiler.c_look(&hir::Look::StartLF).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert!(matches!(compiler.c_look(&hir::Look::End), Ok(_)));",
          "    assert!(matches!(compiler.c_look(&hir::Look::StartCRLF), Ok(_)));",
          "    assert!(matches!(compiler.c_look(&hir::Look::WordAscii), Ok(_)));",
          "    assert!(matches!(compiler.c_look(&hir::Look::WordUnicode), Ok(_)));",
          "    assert!(compiler.builder.borrow_mut().add_look(Look::StartLF).is_ok());",
          "    assert!(compiler.add_look(Look::WordStartHalfUnicode).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::EndLF;",
          "    compiler.c_look(&anchor).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(compiler.c_look(&hir::Look::StartLF), Ok(ThompsonRef { start: id, end: id }));",
          "    assert!(self.add_look(Look::StartLF).is_ok());"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::EndLF;",
          "    compiler.c_look(&anchor).unwrap();",
          "    assert_eq!(compiler.c_look(&hir::Look::StartLF), Ok(ThompsonRef { start: id, end: id }));",
          "    assert!(self.add_look(Look::StartLF).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordAscii;",
          "    compiler.c_look(&anchor).unwrap();",
          "}"
        ],
        "oracle": [
          "    let anchor = hir::Look::StartLF;",
          "    assert_eq!(compiler.c_look(&anchor), Ok(ThompsonRef { start: id, end: id }));",
          "    let anchor = hir::Look::EndLF;",
          "    assert_eq!(compiler.c_look(&anchor), Ok(ThompsonRef { start: id, end: id }));",
          "    let anchor = hir::Look::WordAscii;",
          "    assert_eq!(compiler.c_look(&anchor), Ok(ThompsonRef { start: id, end: id }));",
          "    let anchor = hir::Look::WordAsciiNegate;",
          "    assert_eq!(compiler.c_look(&anchor), Ok(ThompsonRef { start: id, end: id }));",
          "    let anchor = hir::Look::WordUnicode;",
          "    assert_eq!(compiler.c_look(&anchor), Ok(ThompsonRef { start: id, end: id }));",
          "    let anchor = hir::Look::WordUnicodeNegate;",
          "    assert_eq!(compiler.c_look(&anchor), Ok(ThompsonRef { start: id, end: id }));",
          "    let anchor = hir::Look::WordStartAscii;",
          "    assert_eq!(compiler.c_look(&anchor), Ok(ThompsonRef { start: id, end: id }));",
          "    let anchor = hir::Look::WordEndAscii;",
          "    assert_eq!(compiler.c_look(&anchor), Ok(ThompsonRef { start: id, end: id }));",
          "    let anchor = hir::Look::WordStartUnicode;",
          "    assert_eq!(compiler.c_look(&anchor), Ok(ThompsonRef { start: id, end: id }));",
          "    let anchor = hir::Look::WordEndUnicode;",
          "    assert_eq!(compiler.c_look(&anchor), Ok(ThompsonRef { start: id, end: id }));",
          "    let anchor = hir::Look::WordStartHalfAscii;",
          "    assert_eq!(compiler.c_look(&anchor), Ok(ThompsonRef { start: id, end: id }));",
          "    let anchor = hir::Look::WordEndHalfAscii;",
          "    assert_eq!(compiler.c_look(&anchor), Ok(ThompsonRef { start: id, end: id }));",
          "    let anchor = hir::Look::WordStartHalfUnicode;",
          "    assert_eq!(compiler.c_look(&anchor), Ok(ThompsonRef { start: id, end: id }));",
          "    let anchor = hir::Look::WordEndHalfUnicode;",
          "    assert_eq!(compiler.c_look(&anchor), Ok(ThompsonRef { start: id, end: id }));"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordAscii;",
          "    compiler.c_look(&anchor).unwrap();",
          "    let anchor = hir::Look::StartLF;",
          "    assert_eq!(compiler.c_look(&anchor), Ok(ThompsonRef { start: id, end: id }));",
          "    let anchor = hir::Look::EndLF;",
          "    assert_eq!(compiler.c_look(&anchor), Ok(ThompsonRef { start: id, end: id }));",
          "    let anchor = hir::Look::WordAscii;",
          "    assert_eq!(compiler.c_look(&anchor), Ok(ThompsonRef { start: id, end: id }));",
          "    let anchor = hir::Look::WordAsciiNegate;",
          "    assert_eq!(compiler.c_look(&anchor), Ok(ThompsonRef { start: id, end: id }));",
          "    let anchor = hir::Look::WordUnicode;",
          "    assert_eq!(compiler.c_look(&anchor), Ok(ThompsonRef { start: id, end: id }));",
          "    let anchor = hir::Look::WordUnicodeNegate;",
          "    assert_eq!(compiler.c_look(&anchor), Ok(ThompsonRef { start: id, end: id }));",
          "    let anchor = hir::Look::WordStartAscii;",
          "    assert_eq!(compiler.c_look(&anchor), Ok(ThompsonRef { start: id, end: id }));",
          "    let anchor = hir::Look::WordEndAscii;",
          "    assert_eq!(compiler.c_look(&anchor), Ok(ThompsonRef { start: id, end: id }));",
          "    let anchor = hir::Look::WordStartUnicode;",
          "    assert_eq!(compiler.c_look(&anchor), Ok(ThompsonRef { start: id, end: id }));",
          "    let anchor = hir::Look::WordEndUnicode;",
          "    assert_eq!(compiler.c_look(&anchor), Ok(ThompsonRef { start: id, end: id }));",
          "    let anchor = hir::Look::WordStartHalfAscii;",
          "    assert_eq!(compiler.c_look(&anchor), Ok(ThompsonRef { start: id, end: id }));",
          "    let anchor = hir::Look::WordEndHalfAscii;",
          "    assert_eq!(compiler.c_look(&anchor), Ok(ThompsonRef { start: id, end: id }));",
          "    let anchor = hir::Look::WordStartHalfUnicode;",
          "    assert_eq!(compiler.c_look(&anchor), Ok(ThompsonRef { start: id, end: id }));",
          "    let anchor = hir::Look::WordEndHalfUnicode;",
          "    assert_eq!(compiler.c_look(&anchor), Ok(ThompsonRef { start: id, end: id }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordUnicode;",
          "    compiler.c_look(&anchor).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(compiler.c_look(&hir::Look::Start).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::End).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::StartLF).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::EndLF).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::StartCRLF).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::EndCRLF).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordAscii).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordAsciiNegate).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordUnicode).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordUnicodeNegate).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartAscii).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordEndAscii).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartUnicode).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordEndUnicode).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartHalfAscii).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordEndHalfAscii).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartHalfUnicode).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordEndHalfUnicode).unwrap(), Ok(ThompsonRef { start: id, end: id }));"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordUnicode;",
          "    compiler.c_look(&anchor).unwrap();",
          "    assert_eq!(compiler.c_look(&hir::Look::Start).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::End).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::StartLF).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::EndLF).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::StartCRLF).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::EndCRLF).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordAscii).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordAsciiNegate).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordUnicode).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordUnicodeNegate).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartAscii).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordEndAscii).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartUnicode).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordEndUnicode).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartHalfAscii).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordEndHalfAscii).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordStartHalfUnicode).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert_eq!(compiler.c_look(&hir::Look::WordEndHalfUnicode).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordStartHalfAscii;",
          "    compiler.c_look(&anchor).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(compiler.c_look(&hir::Look::StartLF).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert!(matches!(compiler.c_look(&hir::Look::StartLF), Ok(_)));",
          "    assert_eq!(compiler.add_look(Look::StartLF), Ok(id));"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordStartHalfAscii;",
          "    compiler.c_look(&anchor).unwrap();",
          "    assert_eq!(compiler.c_look(&hir::Look::StartLF).unwrap(), Ok(ThompsonRef { start: id, end: id }));",
          "    assert!(matches!(compiler.c_look(&hir::Look::StartLF), Ok(_)));",
          "    assert_eq!(compiler.add_look(Look::StartLF), Ok(id));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordEndHalfUnicode;",
          "    compiler.c_look(&anchor).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(anchor, hir::Look::WordEndHalfUnicode));",
          "    let result = compiler.c_look(&anchor);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordEndHalfUnicode;",
          "    compiler.c_look(&anchor).unwrap();",
          "    assert!(matches!(anchor, hir::Look::WordEndHalfUnicode));",
          "    let result = compiler.c_look(&anchor);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]