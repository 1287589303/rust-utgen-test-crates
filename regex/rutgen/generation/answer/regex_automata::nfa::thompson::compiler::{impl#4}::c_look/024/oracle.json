[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordAscii;",
          "    let result = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    let anchor = hir::Look::WordAscii;",
          "    assert_eq!(result, Ok(ThompsonRef { start: id, end: id }));",
          "    assert!(self.add_look(look).is_ok());",
          "    assert_eq!(*anchor, hir::Look::WordAscii);"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordAscii;",
          "    let result = compiler.c_look(&anchor);",
          "    let anchor = hir::Look::WordAscii;",
          "    assert_eq!(result, Ok(ThompsonRef { start: id, end: id }));",
          "    assert!(self.add_look(look).is_ok());",
          "    assert_eq!(*anchor, hir::Look::WordAscii);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordAsciiNegate;",
          "    let result = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(result.as_ref().unwrap().start != StateID::ZERO);",
          "    assert!(result.as_ref().unwrap().end != StateID::ZERO);",
          "    assert_eq!(result.unwrap(), ThompsonRef { start: id, end: id });"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordAsciiNegate;",
          "    let result = compiler.c_look(&anchor);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(result.as_ref().unwrap().start != StateID::ZERO);",
          "    assert!(result.as_ref().unwrap().end != StateID::ZERO);",
          "    assert_eq!(result.unwrap(), ThompsonRef { start: id, end: id });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordUnicode;",
          "    let result = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(result, Ok(ThompsonRef { start: _, end: _ })));",
          "    assert_eq!(anchor, hir::Look::WordUnicode);",
          "    assert!(compiler.add_look(Look::WordUnicode).is_ok());",
          "    assert!(result.is_ok());",
          "    assert!(result.unwrap().start != 0);",
          "    assert!(result.unwrap().end != 0);"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordUnicode;",
          "    let result = compiler.c_look(&anchor);",
          "    assert!(matches!(result, Ok(ThompsonRef { start: _, end: _ })));",
          "    assert_eq!(anchor, hir::Look::WordUnicode);",
          "    assert!(compiler.add_look(Look::WordUnicode).is_ok());",
          "    assert!(result.is_ok());",
          "    assert!(result.unwrap().start != 0);",
          "    assert!(result.unwrap().end != 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordUnicodeNegate;",
          "    let result = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);",
          "    assert!(matches!(anchor, hir::Look::WordAscii));",
          "    assert!(matches!(result, Ok(ThompsonRef { start: _, end: _ })));"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordUnicodeNegate;",
          "    let result = compiler.c_look(&anchor);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);",
          "    assert!(matches!(anchor, hir::Look::WordAscii));",
          "    assert!(matches!(result, Ok(ThompsonRef { start: _, end: _ })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordStartAscii;",
          "    let result = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(result, Ok(_)));",
          "    assert_eq!(result.unwrap().start, result.unwrap().end);",
          "    assert_eq!(result.unwrap().start, self.add_look(Look::WordStartAscii).unwrap());",
          "    assert!(self.add_look(Look::WordStartAscii).is_ok());"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordStartAscii;",
          "    let result = compiler.c_look(&anchor);",
          "    assert!(matches!(result, Ok(_)));",
          "    assert_eq!(result.unwrap().start, result.unwrap().end);",
          "    assert_eq!(result.unwrap().start, self.add_look(Look::WordStartAscii).unwrap());",
          "    assert!(self.add_look(Look::WordStartAscii).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordEndAscii;",
          "    let result = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(ThompsonRef { start: id, end: id }));",
          "    assert!(match anchor { hir::Look::WordAscii => true, _ => false });",
          "    assert!(result.is_ok());",
          "    assert!(self.add_look(look).is_ok());"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordEndAscii;",
          "    let result = compiler.c_look(&anchor);",
          "    assert_eq!(result, Ok(ThompsonRef { start: id, end: id }));",
          "    assert!(match anchor { hir::Look::WordAscii => true, _ => false });",
          "    assert!(result.is_ok());",
          "    assert!(self.add_look(look).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordStartUnicode;",
          "    let result = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    let anchor = hir::Look::WordAscii;",
          "    let result = compiler.c_look(&anchor);",
          "    assert!(result.is_ok());",
          "    if let Ok(thompson_ref) = result {",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);",
          "    }",
          "    let look = Look::WordAscii;",
          "    let id = compiler.add_look(look).expect(\"add_look should succeed\");",
          "    assert_eq!(id, thompson_ref.start);",
          "    assert_eq!(id, thompson_ref.end);"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordStartUnicode;",
          "    let result = compiler.c_look(&anchor);",
          "    let anchor = hir::Look::WordAscii;",
          "    let result = compiler.c_look(&anchor);",
          "    assert!(result.is_ok());",
          "    if let Ok(thompson_ref) = result {",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);",
          "    }",
          "    let look = Look::WordAscii;",
          "    let id = compiler.add_look(look).expect(\"add_look should succeed\");",
          "    assert_eq!(id, thompson_ref.start);",
          "    assert_eq!(id, thompson_ref.end);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordEndUnicode;",
          "    let result = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(result, Ok(ThompsonRef { start: _, end: _ })));",
          "    assert_eq!(result.unwrap().start, result.unwrap().end);",
          "    assert!(matches!(result, Ok(_)) => self.add_look(Look::WordEndUnicode).is_ok());"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordEndUnicode;",
          "    let result = compiler.c_look(&anchor);",
          "    assert!(matches!(result, Ok(ThompsonRef { start: _, end: _ })));",
          "    assert_eq!(result.unwrap().start, result.unwrap().end);",
          "    assert!(matches!(result, Ok(_)) => self.add_look(Look::WordEndUnicode).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordStartHalfAscii;",
          "    let result = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    let anchor = hir::Look::WordAscii;",
          "    let result = compiler.c_look(&anchor);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordStartHalfAscii;",
          "    let result = compiler.c_look(&anchor);",
          "    let anchor = hir::Look::WordAscii;",
          "    let result = compiler.c_look(&anchor);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordEndHalfAscii;",
          "    let result = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(ThompsonRef { start: id, end: id }));",
          "    assert!(matches!(anchor, hir::Look::WordAscii));",
          "    assert!(result.is_ok());",
          "    assert!(self.add_look(look).is_ok());"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordEndHalfAscii;",
          "    let result = compiler.c_look(&anchor);",
          "    assert_eq!(result, Ok(ThompsonRef { start: id, end: id }));",
          "    assert!(matches!(anchor, hir::Look::WordAscii));",
          "    assert!(result.is_ok());",
          "    assert!(self.add_look(look).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordStartHalfUnicode;",
          "    let result = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);",
          "    assert_eq!(thompson_ref.start, compiler.builder.borrow_mut().get_last_state_id());",
          "    assert!(matches!(anchor, hir::Look::WordStartHalfUnicode));"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordStartHalfUnicode;",
          "    let result = compiler.c_look(&anchor);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);",
          "    assert_eq!(thompson_ref.start, compiler.builder.borrow_mut().get_last_state_id());",
          "    assert!(matches!(anchor, hir::Look::WordStartHalfUnicode));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordEndHalfUnicode;",
          "    let result = compiler.c_look(&anchor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(matches!(result, Ok(ThompsonRef { start, end })));",
          "    assert_eq!(start, end);",
          "    assert_eq!(start, compiler.add_look(Look::WordEndHalfUnicode).unwrap());"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    let anchor = hir::Look::WordEndHalfUnicode;",
          "    let result = compiler.c_look(&anchor);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(matches!(result, Ok(ThompsonRef { start, end })));",
          "    assert_eq!(start, end);",
          "    assert_eq!(start, compiler.add_look(Look::WordEndHalfUnicode).unwrap());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]