[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
          "    writer.write_literal_class_byte(0x20).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.wtr.output, \"\\\\x20\");",
          "    assert!(writer.wtr.output.contains(\"\\\\x20\"));",
          "    assert!(writer.wtr.output.len() > 0);",
          "    assert!(writer.wtr.output.starts_with(\"\\\\x\"));",
          "    assert!(writer.wtr.output.ends_with(\"20\"));"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
          "    writer.write_literal_class_byte(0x20).unwrap();",
          "    assert_eq!(writer.wtr.output, \"\\\\x20\");",
          "    assert!(writer.wtr.output.contains(\"\\\\x20\"));",
          "    assert!(writer.wtr.output.len() > 0);",
          "    assert!(writer.wtr.output.starts_with(\"\\\\x\"));",
          "    assert!(writer.wtr.output.ends_with(\"20\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
          "    writer.write_literal_class_byte(0x7E).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.wtr.output, \"\\\\x7E\");",
          "    assert!(writer.wtr.output.contains(\"\\\\x7E\"));",
          "    assert!(writer.wtr.output.len() > 0);",
          "    assert!(writer.wtr.output.chars().next().unwrap() == '\\\\');",
          "    assert!(writer.wtr.output.chars().nth(1).unwrap() == 'x');",
          "    assert!(writer.wtr.output.chars().nth(2).unwrap() == '7');",
          "    assert!(writer.wtr.output.chars().nth(3).unwrap() == 'E');"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
          "    writer.write_literal_class_byte(0x7E).unwrap();",
          "    assert_eq!(writer.wtr.output, \"\\\\x7E\");",
          "    assert!(writer.wtr.output.contains(\"\\\\x7E\"));",
          "    assert!(writer.wtr.output.len() > 0);",
          "    assert!(writer.wtr.output.chars().next().unwrap() == '\\\\');",
          "    assert!(writer.wtr.output.chars().nth(1).unwrap() == 'x');",
          "    assert!(writer.wtr.output.chars().nth(2).unwrap() == '7');",
          "    assert!(writer.wtr.output.chars().nth(3).unwrap() == 'E');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]