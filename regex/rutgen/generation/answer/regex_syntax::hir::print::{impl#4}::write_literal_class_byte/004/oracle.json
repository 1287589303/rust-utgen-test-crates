[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter(String);",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.0.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut output = TestWriter(String::new());",
          "    let mut writer = Writer { wtr: output };",
          "    let _ = writer.write_literal_class_byte(0x00);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.wtr.0, \"\\\\x00\");",
          "    assert!(writer.wtr.0.contains(\"\\\\x00\"));",
          "    assert!(writer.wtr.0.len() > 0);",
          "    assert!(writer.wtr.0.starts_with(\"\\\\x\"));",
          "    assert!(writer.wtr.0.ends_with(\"00\"));"
        ],
        "code": [
          "{",
          "    struct TestWriter(String);",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.0.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut output = TestWriter(String::new());",
          "    let mut writer = Writer { wtr: output };",
          "    let _ = writer.write_literal_class_byte(0x00);",
          "    assert_eq!(writer.wtr.0, \"\\\\x00\");",
          "    assert!(writer.wtr.0.contains(\"\\\\x00\"));",
          "    assert!(writer.wtr.0.len() > 0);",
          "    assert!(writer.wtr.0.starts_with(\"\\\\x\"));",
          "    assert!(writer.wtr.0.ends_with(\"00\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter(String);",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.0.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut output = TestWriter(String::new());",
          "    let mut writer = Writer { wtr: output };",
          "    let _ = writer.write_literal_class_byte(0x80);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.wtr.0, \"\\\\x80\");"
        ],
        "code": [
          "{",
          "    struct TestWriter(String);",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.0.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut output = TestWriter(String::new());",
          "    let mut writer = Writer { wtr: output };",
          "    let _ = writer.write_literal_class_byte(0x80);",
          "    assert_eq!(writer.wtr.0, \"\\\\x80\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter(String);",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.0.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut output = TestWriter(String::new());",
          "    let mut writer = Writer { wtr: output };",
          "    let _ = writer.write_literal_class_byte(0xFF);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output.0, \"\\\\xFF\");",
          "    assert!(output.0.contains(\"\\\\x\"));",
          "    assert!(output.0.len() > 0);",
          "    assert!(output.0.ends_with(\"FF\"));"
        ],
        "code": [
          "{",
          "    struct TestWriter(String);",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.0.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut output = TestWriter(String::new());",
          "    let mut writer = Writer { wtr: output };",
          "    let _ = writer.write_literal_class_byte(0xFF);",
          "    assert_eq!(output.0, \"\\\\xFF\");",
          "    assert!(output.0.contains(\"\\\\x\"));",
          "    assert!(output.0.len() > 0);",
          "    assert!(output.0.ends_with(\"FF\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]