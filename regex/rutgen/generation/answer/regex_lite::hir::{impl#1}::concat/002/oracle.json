[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir1 = Hir {",
          "        kind: HirKind::Char('a'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let hir2 = Hir {",
          "        kind: HirKind::Char('b'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let result = Hir::concat(vec![hir1, hir2]);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, HirKind::Concat(vec![hir1, hir2]));",
          "    assert!(!result.is_start_anchored);",
          "    assert!(!result.is_match_empty);",
          "    assert_eq!(result.static_explicit_captures_len, Some(0));"
        ],
        "code": [
          "{",
          "    let hir1 = Hir {",
          "        kind: HirKind::Char('a'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let hir2 = Hir {",
          "        kind: HirKind::Char('b'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let result = Hir::concat(vec![hir1, hir2]);",
          "    assert_eq!(result.kind, HirKind::Concat(vec![hir1, hir2]));",
          "    assert!(!result.is_start_anchored);",
          "    assert!(!result.is_match_empty);",
          "    assert_eq!(result.static_explicit_captures_len, Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir1 = Hir {",
          "        kind: HirKind::Char('a'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: Some(2),",
          "    };",
          "    let hir2 = Hir {",
          "        kind: HirKind::Char('b'),",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: Some(1),",
          "    };",
          "    let result = Hir::concat(vec![hir1, hir2]);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, HirKind::Concat(vec![hir1, hir2]));",
          "    assert_eq!(result.is_start_anchored, false);",
          "    assert_eq!(result.is_match_empty, false);",
          "    assert_eq!(result.static_explicit_captures_len, Some(3));"
        ],
        "code": [
          "{",
          "    let hir1 = Hir {",
          "        kind: HirKind::Char('a'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: Some(2),",
          "    };",
          "    let hir2 = Hir {",
          "        kind: HirKind::Char('b'),",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: Some(1),",
          "    };",
          "    let result = Hir::concat(vec![hir1, hir2]);",
          "    assert_eq!(result.kind, HirKind::Concat(vec![hir1, hir2]));",
          "    assert_eq!(result.is_start_anchored, false);",
          "    assert_eq!(result.is_match_empty, false);",
          "    assert_eq!(result.static_explicit_captures_len, Some(3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir1 = Hir {",
          "        kind: HirKind::Empty,",
          "        is_start_anchored: true,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: Some(0),",
          "    };",
          "    let hir2 = Hir {",
          "        kind: HirKind::Empty,",
          "        is_start_anchored: true,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: Some(0),",
          "    };",
          "    let result = Hir::concat(vec![hir1, hir2]);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, HirKind::Concat(vec![hir1.clone(), hir2.clone()]));",
          "    assert!(result.is_start_anchored);",
          "    assert!(result.is_match_empty);",
          "    assert_eq!(result.static_explicit_captures_len, Some(0));"
        ],
        "code": [
          "{",
          "    let hir1 = Hir {",
          "        kind: HirKind::Empty,",
          "        is_start_anchored: true,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: Some(0),",
          "    };",
          "    let hir2 = Hir {",
          "        kind: HirKind::Empty,",
          "        is_start_anchored: true,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: Some(0),",
          "    };",
          "    let result = Hir::concat(vec![hir1, hir2]);",
          "    assert_eq!(result.kind, HirKind::Concat(vec![hir1.clone(), hir2.clone()]));",
          "    assert!(result.is_start_anchored);",
          "    assert!(result.is_match_empty);",
          "    assert_eq!(result.static_explicit_captures_len, Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir1 = Hir {",
          "        kind: HirKind::Char('c'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let hir2 = Hir {",
          "        kind: HirKind::Char('d'),",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: Some(3),",
          "    };",
          "    let result = Hir::concat(vec![hir1, hir2]);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, HirKind::Concat(vec![hir1, hir2]));",
          "    assert_eq!(result.is_start_anchored, false);",
          "    assert_eq!(result.is_match_empty, false);",
          "    assert_eq!(result.static_explicit_captures_len, Some(3));"
        ],
        "code": [
          "{",
          "    let hir1 = Hir {",
          "        kind: HirKind::Char('c'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let hir2 = Hir {",
          "        kind: HirKind::Char('d'),",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: Some(3),",
          "    };",
          "    let result = Hir::concat(vec![hir1, hir2]);",
          "    assert_eq!(result.kind, HirKind::Concat(vec![hir1, hir2]));",
          "    assert_eq!(result.is_start_anchored, false);",
          "    assert_eq!(result.is_match_empty, false);",
          "    assert_eq!(result.static_explicit_captures_len, Some(3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]