[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_id = PatternID(SmallIndex(0));",
          "    let result = GroupInfoError::first_must_be_unnamed(pattern_id);",
          "}"
        ],
        "oracle": [
          "    let pattern_id = PatternID(SmallIndex(0));",
          "    let expected = GroupInfoError { kind: GroupInfoErrorKind::FirstMustBeUnnamed { pattern: pattern_id } };",
          "    assert_eq!(result.kind, expected.kind);"
        ],
        "code": [
          "{",
          "    let pattern_id = PatternID(SmallIndex(0));",
          "    let result = GroupInfoError::first_must_be_unnamed(pattern_id);",
          "    let pattern_id = PatternID(SmallIndex(0));",
          "    let expected = GroupInfoError { kind: GroupInfoErrorKind::FirstMustBeUnnamed { pattern: pattern_id } };",
          "    assert_eq!(result.kind, expected.kind);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_id = PatternID(SmallIndex(u32::MAX as usize));",
          "    let result = GroupInfoError::first_must_be_unnamed(pattern_id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, GroupInfoErrorKind::FirstMustBeUnnamed { pattern: pattern_id });"
        ],
        "code": [
          "{",
          "    let pattern_id = PatternID(SmallIndex(u32::MAX as usize));",
          "    let result = GroupInfoError::first_must_be_unnamed(pattern_id);",
          "    assert_eq!(result.kind, GroupInfoErrorKind::FirstMustBeUnnamed { pattern: pattern_id });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]