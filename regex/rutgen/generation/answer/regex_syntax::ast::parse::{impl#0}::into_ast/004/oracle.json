[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let assertion = Assertion {",
          "        span: Span { start: Position(0), end: Position(10) },",
          "        kind: AssertionKind::B,",
          "    };",
          "    let primitive = Primitive::Assertion(assertion);",
          "    let _ = primitive.into_ast();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(primitive.into_ast(), Ast::Assertion(Box::new(Assertion { span: Span { start: Position(0), end: Position(10) }, kind: AssertionKind::B })));"
        ],
        "code": [
          "{",
          "    let assertion = Assertion {",
          "        span: Span { start: Position(0), end: Position(10) },",
          "        kind: AssertionKind::B,",
          "    };",
          "    let primitive = Primitive::Assertion(assertion);",
          "    let _ = primitive.into_ast();",
          "    assert_eq!(primitive.into_ast(), Ast::Assertion(Box::new(Assertion { span: Span { start: Position(0), end: Position(10) }, kind: AssertionKind::B })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let assertion = Assertion {",
          "        span: Span { start: Position(0), end: Position(10) },",
          "        kind: AssertionKind::NotB,",
          "    };",
          "    let primitive = Primitive::Assertion(assertion);",
          "    let _ = primitive.into_ast();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(primitive.into_ast(), Ast::Assertion(Box::new(Assertion { span: Span { start: Position(0), end: Position(10) }, kind: AssertionKind::NotB })));"
        ],
        "code": [
          "{",
          "    let assertion = Assertion {",
          "        span: Span { start: Position(0), end: Position(10) },",
          "        kind: AssertionKind::NotB,",
          "    };",
          "    let primitive = Primitive::Assertion(assertion);",
          "    let _ = primitive.into_ast();",
          "    assert_eq!(primitive.into_ast(), Ast::Assertion(Box::new(Assertion { span: Span { start: Position(0), end: Position(10) }, kind: AssertionKind::NotB })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let assertion = Assertion {",
          "        span: Span { start: Position(0), end: Position(1) },",
          "        kind: AssertionKind::Start,",
          "    };",
          "    let primitive = Primitive::Assertion(assertion);",
          "    let _ = primitive.into_ast();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(primitive.into_ast(), Ast::assertion(assertion));"
        ],
        "code": [
          "{",
          "    let assertion = Assertion {",
          "        span: Span { start: Position(0), end: Position(1) },",
          "        kind: AssertionKind::Start,",
          "    };",
          "    let primitive = Primitive::Assertion(assertion);",
          "    let _ = primitive.into_ast();",
          "    assert_eq!(primitive.into_ast(), Ast::assertion(assertion));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let assertion = Assertion {",
          "        span: Span { start: Position(10), end: Position(20) },",
          "        kind: AssertionKind::End,",
          "    };",
          "    let primitive = Primitive::Assertion(assertion);",
          "    let _ = primitive.into_ast();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(primitive.into_ast(), Ast::Assertion(Box::new(assertion)));"
        ],
        "code": [
          "{",
          "    let assertion = Assertion {",
          "        span: Span { start: Position(10), end: Position(20) },",
          "        kind: AssertionKind::End,",
          "    };",
          "    let primitive = Primitive::Assertion(assertion);",
          "    let _ = primitive.into_ast();",
          "    assert_eq!(primitive.into_ast(), Ast::Assertion(Box::new(assertion)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]