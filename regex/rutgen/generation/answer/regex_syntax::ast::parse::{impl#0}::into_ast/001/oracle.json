[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let cls = ClassUnicode { span, negated: true, kind: ClassUnicodeKind };",
          "    let primitive = Primitive::Unicode(cls);",
          "    let _result = primitive.into_ast();",
          "}"
        ],
        "oracle": [
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let cls = ClassUnicode { span, negated: true, kind: ClassUnicodeKind };",
          "    let primitive = Primitive::Unicode(cls);",
          "    let result = primitive.into_ast();",
          "    assert_eq!(result, Ast::ClassUnicode(Box::new(cls)));"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let cls = ClassUnicode { span, negated: true, kind: ClassUnicodeKind };",
          "    let primitive = Primitive::Unicode(cls);",
          "    let _result = primitive.into_ast();",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let cls = ClassUnicode { span, negated: true, kind: ClassUnicodeKind };",
          "    let primitive = Primitive::Unicode(cls);",
          "    let result = primitive.into_ast();",
          "    assert_eq!(result, Ast::ClassUnicode(Box::new(cls)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position(2), end: Position(3) };",
          "    let cls = ClassUnicode { span, negated: false, kind: ClassUnicodeKind };",
          "    let primitive = Primitive::Unicode(cls);",
          "    let _result = primitive.into_ast();",
          "}"
        ],
        "oracle": [
          "    let span = Span { start: Position(2), end: Position(3) };",
          "    let cls = ClassUnicode { span, negated: false, kind: ClassUnicodeKind };",
          "    let primitive = Primitive::Unicode(cls);",
          "    let result = primitive.into_ast();",
          "    assert_eq!(result, Ast::ClassUnicode(Box::new(cls)));"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position(2), end: Position(3) };",
          "    let cls = ClassUnicode { span, negated: false, kind: ClassUnicodeKind };",
          "    let primitive = Primitive::Unicode(cls);",
          "    let _result = primitive.into_ast();",
          "    let span = Span { start: Position(2), end: Position(3) };",
          "    let cls = ClassUnicode { span, negated: false, kind: ClassUnicodeKind };",
          "    let primitive = Primitive::Unicode(cls);",
          "    let result = primitive.into_ast();",
          "    assert_eq!(result, Ast::ClassUnicode(Box::new(cls)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]