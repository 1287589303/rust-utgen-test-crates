[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let perl_class = ClassPerl { span, kind: ClassPerlKind::SomeKind, negated: true };",
          "    let primitive = Primitive::Perl(perl_class);",
          "    let _ = primitive.into_ast();",
          "}"
        ],
        "oracle": [
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let perl_class = ClassPerl { span, kind: ClassPerlKind::SomeKind, negated: true };",
          "    let primitive = Primitive::Perl(perl_class);",
          "    let result = primitive.into_ast();",
          "    assert_eq!(result, Ast::ClassPerl(Box::new(perl_class)));"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let perl_class = ClassPerl { span, kind: ClassPerlKind::SomeKind, negated: true };",
          "    let primitive = Primitive::Perl(perl_class);",
          "    let _ = primitive.into_ast();",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let perl_class = ClassPerl { span, kind: ClassPerlKind::SomeKind, negated: true };",
          "    let primitive = Primitive::Perl(perl_class);",
          "    let result = primitive.into_ast();",
          "    assert_eq!(result, Ast::ClassPerl(Box::new(perl_class)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position(1), end: Position(2) };",
          "    let perl_class = ClassPerl { span, kind: ClassPerlKind::OtherKind, negated: false };",
          "    let primitive = Primitive::Perl(perl_class);",
          "    let _ = primitive.into_ast();",
          "}"
        ],
        "oracle": [
          "    let span = Span { start: Position(1), end: Position(2) };",
          "    let perl_class = ClassPerl { span, kind: ClassPerlKind::OtherKind, negated: false };",
          "    let primitive = Primitive::Perl(perl_class);",
          "    let result = primitive.into_ast();",
          "    assert_eq!(result, Ast::ClassPerl(Box::new(perl_class)));"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position(1), end: Position(2) };",
          "    let perl_class = ClassPerl { span, kind: ClassPerlKind::OtherKind, negated: false };",
          "    let primitive = Primitive::Perl(perl_class);",
          "    let _ = primitive.into_ast();",
          "    let span = Span { start: Position(1), end: Position(2) };",
          "    let perl_class = ClassPerl { span, kind: ClassPerlKind::OtherKind, negated: false };",
          "    let primitive = Primitive::Perl(perl_class);",
          "    let result = primitive.into_ast();",
          "    assert_eq!(result, Ast::ClassPerl(Box::new(perl_class)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position(2), end: Position(3) };",
          "    let perl_class = ClassPerl { span, kind: ClassPerlKind::DifferentKind, negated: false };",
          "    let primitive = Primitive::Perl(perl_class);",
          "    let _ = primitive.into_ast();",
          "}"
        ],
        "oracle": [
          "    let span = Span { start: Position(2), end: Position(3) };",
          "    let perl_class = ClassPerl { span, kind: ClassPerlKind::DifferentKind, negated: false };",
          "    let primitive = Primitive::Perl(perl_class);",
          "    let result = primitive.into_ast();",
          "    assert!(matches!(result, Ast::ClassPerl(_)));"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position(2), end: Position(3) };",
          "    let perl_class = ClassPerl { span, kind: ClassPerlKind::DifferentKind, negated: false };",
          "    let primitive = Primitive::Perl(perl_class);",
          "    let _ = primitive.into_ast();",
          "    let span = Span { start: Position(2), end: Position(3) };",
          "    let perl_class = ClassPerl { span, kind: ClassPerlKind::DifferentKind, negated: false };",
          "    let primitive = Primitive::Perl(perl_class);",
          "    let result = primitive.into_ast();",
          "    assert!(matches!(result, Ast::ClassPerl(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]