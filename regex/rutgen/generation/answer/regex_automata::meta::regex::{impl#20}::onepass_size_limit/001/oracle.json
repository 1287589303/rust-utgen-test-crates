[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().onepass_size_limit(None);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.onepass_size_limit, Some(None));"
        ],
        "code": [
          "{",
          "    let config = Config::new().onepass_size_limit(None);",
          "    assert_eq!(config.onepass_size_limit, Some(None));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().onepass_size_limit(Some(0));",
          "}"
        ],
        "oracle": [
          "    let expected_config = Config { onepass_size_limit: Some(Some(0)), ..Config::default() };",
          "    assert_eq!(config, expected_config);",
          "    let config = Config::new().onepass_size_limit(None);",
          "    let expected_config_none = Config { onepass_size_limit: Some(None), ..Config::default() };",
          "    assert_eq!(config, expected_config_none);",
          "    let config = Config::new().onepass_size_limit(Some(1));",
          "    let expected_config_one = Config { onepass_size_limit: Some(Some(1)), ..Config::default() };",
          "    assert_eq!(config, expected_config_one);",
          "    let config = Config::new().onepass_size_limit(Some(1024));",
          "    let expected_config_large = Config { onepass_size_limit: Some(Some(1024)), ..Config::default() };",
          "    assert_eq!(config, expected_config_large);"
        ],
        "code": [
          "{",
          "    let config = Config::new().onepass_size_limit(Some(0));",
          "    let expected_config = Config { onepass_size_limit: Some(Some(0)), ..Config::default() };",
          "    assert_eq!(config, expected_config);",
          "    let config = Config::new().onepass_size_limit(None);",
          "    let expected_config_none = Config { onepass_size_limit: Some(None), ..Config::default() };",
          "    assert_eq!(config, expected_config_none);",
          "    let config = Config::new().onepass_size_limit(Some(1));",
          "    let expected_config_one = Config { onepass_size_limit: Some(Some(1)), ..Config::default() };",
          "    assert_eq!(config, expected_config_one);",
          "    let config = Config::new().onepass_size_limit(Some(1024));",
          "    let expected_config_large = Config { onepass_size_limit: Some(Some(1024)), ..Config::default() };",
          "    assert_eq!(config, expected_config_large);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().onepass_size_limit(Some(1));",
          "}"
        ],
        "oracle": [
          "    let config = Config::new().onepass_size_limit(Some(1)); assert_eq!(config.onepass_size_limit, Some(Some(1)));",
          "    let config = Config::new().onepass_size_limit(None); assert_eq!(config.onepass_size_limit, Some(None));",
          "    let config = Config::new().onepass_size_limit(Some(0)); assert_eq!(config.onepass_size_limit, Some(Some(0)));",
          "    let config = Config::new().onepass_size_limit(Some(2 * (1<<20))); assert_eq!(config.onepass_size_limit, Some(Some(2 * (1<<20))));",
          "    let config = Config::new().onepass_size_limit(Some(usize::MAX)); assert_eq!(config.onepass_size_limit, Some(Some(usize::MAX)));",
          "    let config = Config::new().onepass_size_limit(Some(42)); assert_eq!(config.onepass_size_limit, Some(Some(42)));"
        ],
        "code": [
          "{",
          "    let config = Config::new().onepass_size_limit(Some(1));",
          "    let config = Config::new().onepass_size_limit(Some(1)); assert_eq!(config.onepass_size_limit, Some(Some(1)));",
          "    let config = Config::new().onepass_size_limit(None); assert_eq!(config.onepass_size_limit, Some(None));",
          "    let config = Config::new().onepass_size_limit(Some(0)); assert_eq!(config.onepass_size_limit, Some(Some(0)));",
          "    let config = Config::new().onepass_size_limit(Some(2 * (1<<20))); assert_eq!(config.onepass_size_limit, Some(Some(2 * (1<<20))));",
          "    let config = Config::new().onepass_size_limit(Some(usize::MAX)); assert_eq!(config.onepass_size_limit, Some(Some(usize::MAX)));",
          "    let config = Config::new().onepass_size_limit(Some(42)); assert_eq!(config.onepass_size_limit, Some(Some(42)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().onepass_size_limit(Some(2 * 1024)); // 2 KiB",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.onepass_size_limit, Some(Some(2048)));",
          "    assert_eq!(config.get_onepass_size_limit(), Some(Some(2048)));",
          "    assert_eq!(config.onepass_size_limit.is_some(), true);",
          "    assert_eq!(config.onepass_size_limit.unwrap(), Some(2048));",
          "    assert_ne!(config.onepass_size_limit, None);",
          "    assert!(config.onepass_size_limit.is_some());",
          "    assert!(config.get_onepass_size_limit() == Some(Some(2048)));"
        ],
        "code": [
          "{",
          "    let config = Config::new().onepass_size_limit(Some(2 * 1024)); // 2 KiB",
          "    assert_eq!(config.onepass_size_limit, Some(Some(2048)));",
          "    assert_eq!(config.get_onepass_size_limit(), Some(Some(2048)));",
          "    assert_eq!(config.onepass_size_limit.is_some(), true);",
          "    assert_eq!(config.onepass_size_limit.unwrap(), Some(2048));",
          "    assert_ne!(config.onepass_size_limit, None);",
          "    assert!(config.onepass_size_limit.is_some());",
          "    assert!(config.get_onepass_size_limit() == Some(Some(2048)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().onepass_size_limit(Some(4 * 1024 * 1024)); // 4 MiB",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.onepass_size_limit, Some(4 * 1024 * 1024));"
        ],
        "code": [
          "{",
          "    let config = Config::new().onepass_size_limit(Some(4 * 1024 * 1024)); // 4 MiB",
          "    assert_eq!(config.onepass_size_limit, Some(4 * 1024 * 1024));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().onepass_size_limit(Some(4 * 1024 * 1024 * 1024)); // 4 GiB",
          "}"
        ],
        "oracle": [
          "    let expected_config = Config { onepass_size_limit: Some(Some(4 * 1024 * 1024 * 1024)), ..Config::new() };",
          "    assert_eq!(config, expected_config);"
        ],
        "code": [
          "{",
          "    let config = Config::new().onepass_size_limit(Some(4 * 1024 * 1024 * 1024)); // 4 GiB",
          "    let expected_config = Config { onepass_size_limit: Some(Some(4 * 1024 * 1024 * 1024)), ..Config::new() };",
          "    assert_eq!(config, expected_config);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]