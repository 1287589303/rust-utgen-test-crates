[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::EndCRLF;",
          "    let haystack = b\"Hello World\\r\";",
          "    let at = haystack.len() - 1;",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), haystack[at - 1] != b'\\r');"
        ],
        "code": [
          "{",
          "    let look = Look::EndCRLF;",
          "    let haystack = b\"Hello World\\r\";",
          "    let at = haystack.len() - 1;",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), haystack[at - 1] != b'\\r');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::EndCRLF;",
          "    let haystack = b\"Hello\\r\";",
          "    let at = haystack.len() - 1;",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(at, haystack.len() - 1);",
          "    assert_eq!(haystack[at], b'\\r');",
          "    assert_eq!(haystack[at - 1], b'H');",
          "    assert!(haystack[at - 1] != b'\\r');"
        ],
        "code": [
          "{",
          "    let look = Look::EndCRLF;",
          "    let haystack = b\"Hello\\r\";",
          "    let at = haystack.len() - 1;",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(at, haystack.len() - 1);",
          "    assert_eq!(haystack[at], b'\\r');",
          "    assert_eq!(haystack[at - 1], b'H');",
          "    assert!(haystack[at - 1] != b'\\r');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::EndCRLF;",
          "    let haystack = b\"A\\r\";",
          "    let at = haystack.len() - 1;",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), false);"
        ],
        "code": [
          "{",
          "    let look = Look::EndCRLF;",
          "    let haystack = b\"A\\r\";",
          "    let at = haystack.len() - 1;",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::EndCRLF;",
          "    let haystack = b\"SingleLine\\r\";",
          "    let at = haystack.len() - 1;",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert!(at == haystack.len() - 1);",
          "    assert_eq!(haystack[at], b'\\r');",
          "    assert_ne!(haystack[at - 1], b'\\r');",
          "    assert!(!look.is_match(haystack, at + 1));"
        ],
        "code": [
          "{",
          "    let look = Look::EndCRLF;",
          "    let haystack = b\"SingleLine\\r\";",
          "    let at = haystack.len() - 1;",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert!(at == haystack.len() - 1);",
          "    assert_eq!(haystack[at], b'\\r');",
          "    assert_ne!(haystack[at - 1], b'\\r');",
          "    assert!(!look.is_match(haystack, at + 1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]