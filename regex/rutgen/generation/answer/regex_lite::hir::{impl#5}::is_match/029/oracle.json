[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = b\"Hello, world!\\n\";",
          "    let at = haystack.len();",
          "    let look = Look::EndCRLF;",
          "    let _ = look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(at, haystack.len());",
          "    assert_eq!(haystack[at], b'\\n');",
          "    assert_eq!(at == 0 || haystack[at - 1], b'\\r');",
          "    assert_eq!(look.is_match(haystack, at), at == haystack.len() || haystack[at] == b'\\r' || (haystack[at] == b'\\n' && (at == 0 || haystack[at - 1] != b'\\r')));"
        ],
        "code": [
          "{",
          "    let haystack = b\"Hello, world!\\n\";",
          "    let at = haystack.len();",
          "    let look = Look::EndCRLF;",
          "    let _ = look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(at, haystack.len());",
          "    assert_eq!(haystack[at], b'\\n');",
          "    assert_eq!(at == 0 || haystack[at - 1], b'\\r');",
          "    assert_eq!(look.is_match(haystack, at), at == haystack.len() || haystack[at] == b'\\r' || (haystack[at] == b'\\n' && (at == 0 || haystack[at - 1] != b'\\r')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = b\"Hello, world!\\r\";",
          "    let at = haystack.len();",
          "    let look = Look::EndCRLF;",
          "    let _ = look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    let haystack = b\"Hello, world!\\r\";",
          "    let at = haystack.len();",
          "    let look = Look::EndCRLF;",
          "    assert!(look.is_match(haystack, at));",
          "    assert!(at == haystack.len());",
          "    assert!(haystack[at] == b'\\r');",
          "    assert!(haystack[at] == b'\\n' && (at == 0 || haystack[at - 1] != b'\\r'));"
        ],
        "code": [
          "{",
          "    let haystack = b\"Hello, world!\\r\";",
          "    let at = haystack.len();",
          "    let look = Look::EndCRLF;",
          "    let _ = look.is_match(haystack, at);",
          "    let haystack = b\"Hello, world!\\r\";",
          "    let at = haystack.len();",
          "    let look = Look::EndCRLF;",
          "    assert!(look.is_match(haystack, at));",
          "    assert!(at == haystack.len());",
          "    assert!(haystack[at] == b'\\r');",
          "    assert!(haystack[at] == b'\\n' && (at == 0 || haystack[at - 1] != b'\\r'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = b\"Hello, world!\\r\\n\";",
          "    let at = haystack.len();",
          "    let look = Look::EndCRLF;",
          "    let _ = look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(look.is_match(haystack, at), at == haystack.len() || haystack[at] == b'\\r' || (haystack[at] == b'\\n' && (at == 0 || haystack[at - 1] != b'\\r')));",
          "    assert!(look.is_match(haystack, at));",
          "    assert!(look.is_match(haystack, at) == (at == haystack.len()));",
          "    assert!(!look.is_match(haystack, at) || haystack[at] == b'\\r');",
          "    assert!(!look.is_match(haystack, at) || (haystack[at] == b'\\n' && (at == 0 || haystack[at - 1] != b'\\r')));"
        ],
        "code": [
          "{",
          "    let haystack = b\"Hello, world!\\r\\n\";",
          "    let at = haystack.len();",
          "    let look = Look::EndCRLF;",
          "    let _ = look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(look.is_match(haystack, at), at == haystack.len() || haystack[at] == b'\\r' || (haystack[at] == b'\\n' && (at == 0 || haystack[at - 1] != b'\\r')));",
          "    assert!(look.is_match(haystack, at));",
          "    assert!(look.is_match(haystack, at) == (at == haystack.len()));",
          "    assert!(!look.is_match(haystack, at) || haystack[at] == b'\\r');",
          "    assert!(!look.is_match(haystack, at) || (haystack[at] == b'\\n' && (at == 0 || haystack[at - 1] != b'\\r')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"\";",
          "    let at = haystack.len();",
          "    let look = Look::EndCRLF;",
          "    let _ = look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert!(look.is_match(haystack, at) == (at == haystack.len() || haystack[at] == b'\\r' || (haystack[at] == b'\\n' && (at == 0 || haystack[at - 1] != b'\\r'))));"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"\";",
          "    let at = haystack.len();",
          "    let look = Look::EndCRLF;",
          "    let _ = look.is_match(haystack, at);",
          "    assert!(look.is_match(haystack, at) == (at == haystack.len() || haystack[at] == b'\\r' || (haystack[at] == b'\\n' && (at == 0 || haystack[at - 1] != b'\\r'))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]