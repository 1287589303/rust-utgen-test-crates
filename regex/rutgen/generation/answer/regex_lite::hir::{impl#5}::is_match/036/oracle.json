[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::StartCRLF;",
          "    let haystack: &[u8] = b\"\";",
          "    let at = 0;",
          "    let _ = look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(at, 0);",
          "    assert!(haystack.len() == at);",
          "    assert!(haystack.get(at).is_none());",
          "    assert_eq!(haystack.get(at.wrapping_sub(1)), None);"
        ],
        "code": [
          "{",
          "    let look = Look::StartCRLF;",
          "    let haystack: &[u8] = b\"\";",
          "    let at = 0;",
          "    let _ = look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(at, 0);",
          "    assert!(haystack.len() == at);",
          "    assert!(haystack.get(at).is_none());",
          "    assert_eq!(haystack.get(at.wrapping_sub(1)), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::StartCRLF;",
          "    let haystack: &[u8] = b\"abc\\n\";",
          "    let at = haystack.len();",
          "    let _ = look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    let look = Look::StartCRLF;",
          "    let haystack: &[u8] = b\"abc\\n\";",
          "    let at = haystack.len();",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(haystack[at - 1], b'\\n');",
          "    assert_eq!(at >= haystack.len(), true);"
        ],
        "code": [
          "{",
          "    let look = Look::StartCRLF;",
          "    let haystack: &[u8] = b\"abc\\n\";",
          "    let at = haystack.len();",
          "    let _ = look.is_match(haystack, at);",
          "    let look = Look::StartCRLF;",
          "    let haystack: &[u8] = b\"abc\\n\";",
          "    let at = haystack.len();",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(haystack[at - 1], b'\\n');",
          "    assert_eq!(at >= haystack.len(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::StartCRLF;",
          "    let haystack: &[u8] = b\"abc\";",
          "    let at = haystack.len();",
          "    let _ = look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), true);"
        ],
        "code": [
          "{",
          "    let look = Look::StartCRLF;",
          "    let haystack: &[u8] = b\"abc\";",
          "    let at = haystack.len();",
          "    let _ = look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]