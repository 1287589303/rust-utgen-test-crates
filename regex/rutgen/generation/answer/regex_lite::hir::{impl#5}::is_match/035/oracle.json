[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::StartCRLF;",
          "    let haystack: Vec<u8> = vec![];",
          "    let at = 0;",
          "    let _ = look.is_match(&haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(&haystack, at), true);",
          "    let haystack: Vec<u8> = vec![b'\\r'];",
          "    assert_eq!(look.is_match(&haystack, at), true);",
          "    let haystack: Vec<u8> = vec![b'\\n'];",
          "    assert_eq!(look.is_match(&haystack, at), true);",
          "    let haystack: Vec<u8> = vec![b'\\r', b'\\n'];",
          "    assert_eq!(look.is_match(&haystack, at), true);",
          "    let at = 1;",
          "    let haystack: Vec<u8> = vec![b'b', b'\\n'];",
          "    assert_eq!(look.is_match(&haystack, at), false);",
          "    let haystack: Vec<u8> = vec![b'\\n', b'b'];",
          "    assert_eq!(look.is_match(&haystack, at), true);",
          "    let haystack: Vec<u8> = vec![b'a', b'\\r', b'\\n'];",
          "    assert_eq!(look.is_match(&haystack, at), false);",
          "    let haystack: Vec<u8> = vec![b'\\r', b'a', b'b'];",
          "    assert_eq!(look.is_match(&haystack, at), true);"
        ],
        "code": [
          "{",
          "    let look = Look::StartCRLF;",
          "    let haystack: Vec<u8> = vec![];",
          "    let at = 0;",
          "    let _ = look.is_match(&haystack, at);",
          "    assert_eq!(look.is_match(&haystack, at), true);",
          "    let haystack: Vec<u8> = vec![b'\\r'];",
          "    assert_eq!(look.is_match(&haystack, at), true);",
          "    let haystack: Vec<u8> = vec![b'\\n'];",
          "    assert_eq!(look.is_match(&haystack, at), true);",
          "    let haystack: Vec<u8> = vec![b'\\r', b'\\n'];",
          "    assert_eq!(look.is_match(&haystack, at), true);",
          "    let at = 1;",
          "    let haystack: Vec<u8> = vec![b'b', b'\\n'];",
          "    assert_eq!(look.is_match(&haystack, at), false);",
          "    let haystack: Vec<u8> = vec![b'\\n', b'b'];",
          "    assert_eq!(look.is_match(&haystack, at), true);",
          "    let haystack: Vec<u8> = vec![b'a', b'\\r', b'\\n'];",
          "    assert_eq!(look.is_match(&haystack, at), false);",
          "    let haystack: Vec<u8> = vec![b'\\r', b'a', b'b'];",
          "    assert_eq!(look.is_match(&haystack, at), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::StartCRLF;",
          "    let haystack: Vec<u8> = vec![b'\\n'];",
          "    let at = 0;",
          "    let _ = look.is_match(&haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(&haystack, at), true);",
          "    assert_eq!(at, 0);",
          "    assert_eq!(haystack.len(), 1);",
          "    assert_eq!(haystack[at - 1], b'\\n');",
          "    assert!(haystack[at - 1] != b'\\r');"
        ],
        "code": [
          "{",
          "    let look = Look::StartCRLF;",
          "    let haystack: Vec<u8> = vec![b'\\n'];",
          "    let at = 0;",
          "    let _ = look.is_match(&haystack, at);",
          "    assert_eq!(look.is_match(&haystack, at), true);",
          "    assert_eq!(at, 0);",
          "    assert_eq!(haystack.len(), 1);",
          "    assert_eq!(haystack[at - 1], b'\\n');",
          "    assert!(haystack[at - 1] != b'\\r');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::StartCRLF;",
          "    let haystack: Vec<u8> = vec![b'\\r'];",
          "    let at = 0;",
          "    let _ = look.is_match(&haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(&haystack, at), true);",
          "    assert_eq!(at, 0);",
          "    assert_eq!(haystack.len(), 1);",
          "    assert_eq!(haystack[at - 1], b'\\r');",
          "    assert_eq!(haystack[at], b'\\r');",
          "    assert!(haystack.len() == 1 || haystack[at] != b'\\n');"
        ],
        "code": [
          "{",
          "    let look = Look::StartCRLF;",
          "    let haystack: Vec<u8> = vec![b'\\r'];",
          "    let at = 0;",
          "    let _ = look.is_match(&haystack, at);",
          "    assert_eq!(look.is_match(&haystack, at), true);",
          "    assert_eq!(at, 0);",
          "    assert_eq!(haystack.len(), 1);",
          "    assert_eq!(haystack[at - 1], b'\\r');",
          "    assert_eq!(haystack[at], b'\\r');",
          "    assert!(haystack.len() == 1 || haystack[at] != b'\\n');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::StartCRLF;",
          "    let haystack: Vec<u8> = vec![b'\\r', b'\\n'];",
          "    let at = 0;",
          "    let _ = look.is_match(&haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert!(look.is_match(&haystack, at) == true);",
          "    assert!(at == 0);",
          "    assert!(haystack[at - 1] == b'\\n' == false);",
          "    assert!(haystack[at - 1] == b'\\r' && (at >= haystack.len() || haystack[at] != b'\\n') == true);"
        ],
        "code": [
          "{",
          "    let look = Look::StartCRLF;",
          "    let haystack: Vec<u8> = vec![b'\\r', b'\\n'];",
          "    let at = 0;",
          "    let _ = look.is_match(&haystack, at);",
          "    assert!(look.is_match(&haystack, at) == true);",
          "    assert!(at == 0);",
          "    assert!(haystack[at - 1] == b'\\n' == false);",
          "    assert!(haystack[at - 1] == b'\\r' && (at >= haystack.len() || haystack[at] != b'\\n') == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::StartCRLF;",
          "    let haystack: Vec<u8> = vec![b'a', b'\\r', b'b'];",
          "    let at = 0;",
          "    let _ = look.is_match(&haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(&haystack, at), true);",
          "    assert_eq!(haystack[at - 1], b'\\n');",
          "    assert!(at >= haystack.len() || haystack[at] != b'\\n');",
          "    assert!(at == 0);",
          "    assert!(haystack.len() > 0);"
        ],
        "code": [
          "{",
          "    let look = Look::StartCRLF;",
          "    let haystack: Vec<u8> = vec![b'a', b'\\r', b'b'];",
          "    let at = 0;",
          "    let _ = look.is_match(&haystack, at);",
          "    assert_eq!(look.is_match(&haystack, at), true);",
          "    assert_eq!(haystack[at - 1], b'\\n');",
          "    assert!(at >= haystack.len() || haystack[at] != b'\\n');",
          "    assert!(at == 0);",
          "    assert!(haystack.len() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]