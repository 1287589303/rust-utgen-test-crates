[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestLook(Look);",
          "    ",
          "    let look = TestLook(Look::StartCRLF);",
          "    let haystack: Vec<u8> = vec![b'A', b'B', b'C', b'\\n'];",
          "    let at: usize = 0;",
          "    ",
          "    let _ = look.0.is_match(&haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.0.is_match(&haystack, at), true);",
          "    assert_eq!(haystack[at], b'A');",
          "    assert!(at < haystack.len());",
          "    assert!(haystack[at] != b'\\n');",
          "    assert!(haystack[at - 1] == b'\\n');",
          "    assert!(at >= haystack.len() == false);",
          "    assert!(haystack[at - 1] == b'\\r' == false);",
          "    assert!(looks.is_match(&haystack, at));",
          "    assert(!true);"
        ],
        "code": [
          "{",
          "    struct TestLook(Look);",
          "    ",
          "    let look = TestLook(Look::StartCRLF);",
          "    let haystack: Vec<u8> = vec![b'A', b'B', b'C', b'\\n'];",
          "    let at: usize = 0;",
          "    ",
          "    let _ = look.0.is_match(&haystack, at);",
          "    assert_eq!(look.0.is_match(&haystack, at), true);",
          "    assert_eq!(haystack[at], b'A');",
          "    assert!(at < haystack.len());",
          "    assert!(haystack[at] != b'\\n');",
          "    assert!(haystack[at - 1] == b'\\n');",
          "    assert!(at >= haystack.len() == false);",
          "    assert!(haystack[at - 1] == b'\\r' == false);",
          "    assert!(looks.is_match(&haystack, at));",
          "    assert(!true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestLook(Look);",
          "    ",
          "    let look = TestLook(Look::StartCRLF);",
          "    let haystack: Vec<u8> = vec![b'A', b'B', b'C', b'\\n'];",
          "    let at: usize = 0;",
          "",
          "    let _ = look.0.is_match(&haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.0.is_match(&haystack, at), true);",
          "    assert!(haystack[at] != b'\\n');",
          "    assert!(at == 0);",
          "    assert!(haystack[at - 1] == b'\\n');",
          "    assert!(haystack[at - 1] == b'\\r' == false);",
          "    assert!(at >= haystack.len() == false);"
        ],
        "code": [
          "{",
          "    struct TestLook(Look);",
          "    ",
          "    let look = TestLook(Look::StartCRLF);",
          "    let haystack: Vec<u8> = vec![b'A', b'B', b'C', b'\\n'];",
          "    let at: usize = 0;",
          "",
          "    let _ = look.0.is_match(&haystack, at);",
          "    assert_eq!(look.0.is_match(&haystack, at), true);",
          "    assert!(haystack[at] != b'\\n');",
          "    assert!(at == 0);",
          "    assert!(haystack[at - 1] == b'\\n');",
          "    assert!(haystack[at - 1] == b'\\r' == false);",
          "    assert!(at >= haystack.len() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]