[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordStart;",
          "    let haystack: &[u8] = b\" _\"; // Non-word character before a word character",
          "    let at = 0;",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), true);"
        ],
        "code": [
          "{",
          "    let look = Look::WordStart;",
          "    let haystack: &[u8] = b\" _\"; // Non-word character before a word character",
          "    let at = 0;",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordStart;",
          "    let haystack: &[u8] = b\"@abc\"; // Non-word character at the start ",
          "    let at = 0;",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), true);"
        ],
        "code": [
          "{",
          "    let look = Look::WordStart;",
          "    let haystack: &[u8] = b\"@abc\"; // Non-word character at the start ",
          "    let at = 0;",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordStart;",
          "    let haystack: &[u8] = b\" .\"; // Non-word character before a word character",
          "    let at = 0;",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), true);"
        ],
        "code": [
          "{",
          "    let look = Look::WordStart;",
          "    let haystack: &[u8] = b\" .\"; // Non-word character before a word character",
          "    let at = 0;",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordStart;",
          "    let haystack: &[u8] = b\"123abc\"; // Non-word character at start",
          "    let at = 0;",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert!(look.is_match(haystack, at));",
          "    assert!(!look.is_match(haystack, at + 1));",
          "    assert!(at == 0);",
          "    assert!(haystack.len() > at);",
          "    assert_eq!(utf8::is_word_byte(haystack[at]), false);",
          "    assert_eq!(utf8::is_word_byte(haystack[at + 1]), true);",
          "    assert_eq!(look.is_match(haystack, at + 1), true);"
        ],
        "code": [
          "{",
          "    let look = Look::WordStart;",
          "    let haystack: &[u8] = b\"123abc\"; // Non-word character at start",
          "    let at = 0;",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert!(look.is_match(haystack, at));",
          "    assert!(!look.is_match(haystack, at + 1));",
          "    assert!(at == 0);",
          "    assert!(haystack.len() > at);",
          "    assert_eq!(utf8::is_word_byte(haystack[at]), false);",
          "    assert_eq!(utf8::is_word_byte(haystack[at + 1]), true);",
          "    assert_eq!(look.is_match(haystack, at + 1), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordStart;",
          "    let haystack: &[u8] = b\"\"; // Empty haystack",
          "    let at = 0; // at should be 0 but haystack length is also 0",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), false);"
        ],
        "code": [
          "{",
          "    let look = Look::WordStart;",
          "    let haystack: &[u8] = b\"\"; // Empty haystack",
          "    let at = 0; // at should be 0 but haystack length is also 0",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]