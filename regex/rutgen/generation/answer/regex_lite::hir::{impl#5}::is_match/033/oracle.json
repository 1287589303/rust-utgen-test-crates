[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::EndCRLF;",
          "    let haystack = vec![b'a', b'\\n'];",
          "    let at = 1;",
          "    look.is_match(&haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(&haystack, at), true);",
          "    assert_eq!(haystack[at], b'\\n');",
          "    assert_eq!(at, haystack.len() - 1);",
          "    assert_eq!(haystack[at - 1], b'a');",
          "    assert!(at > 0);"
        ],
        "code": [
          "{",
          "    let look = Look::EndCRLF;",
          "    let haystack = vec![b'a', b'\\n'];",
          "    let at = 1;",
          "    look.is_match(&haystack, at);",
          "    assert_eq!(look.is_match(&haystack, at), true);",
          "    assert_eq!(haystack[at], b'\\n');",
          "    assert_eq!(at, haystack.len() - 1);",
          "    assert_eq!(haystack[at - 1], b'a');",
          "    assert!(at > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::EndCRLF;",
          "    let haystack = vec![b'\\r', b'\\n'];",
          "    let at = 1;",
          "    look.is_match(&haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(&haystack, at), true);",
          "    assert_eq!(look.is_match(&haystack, at), haystack[at] == b'\\n' && (at == 0 || haystack[at - 1] != b'\\r'));",
          "    assert!(look.is_match(&haystack, at));",
          "    assert!(at != haystack.len());",
          "    assert!(haystack[at] == b'\\r');",
          "    assert!(haystack[at] == b'\\n');"
        ],
        "code": [
          "{",
          "    let look = Look::EndCRLF;",
          "    let haystack = vec![b'\\r', b'\\n'];",
          "    let at = 1;",
          "    look.is_match(&haystack, at);",
          "    assert_eq!(look.is_match(&haystack, at), true);",
          "    assert_eq!(look.is_match(&haystack, at), haystack[at] == b'\\n' && (at == 0 || haystack[at - 1] != b'\\r'));",
          "    assert!(look.is_match(&haystack, at));",
          "    assert!(at != haystack.len());",
          "    assert!(haystack[at] == b'\\r');",
          "    assert!(haystack[at] == b'\\n');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::EndCRLF;",
          "    let haystack = vec![b'b', b'\\n'];",
          "    let at = 1;",
          "    look.is_match(&haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(&haystack, at), true);",
          "    assert_eq!(haystack.len(), 2);",
          "    assert_eq!(haystack[at], b'\\n');",
          "    assert_ne!(at, 0);",
          "    assert_eq!(haystack[at - 1], b'b');"
        ],
        "code": [
          "{",
          "    let look = Look::EndCRLF;",
          "    let haystack = vec![b'b', b'\\n'];",
          "    let at = 1;",
          "    look.is_match(&haystack, at);",
          "    assert_eq!(look.is_match(&haystack, at), true);",
          "    assert_eq!(haystack.len(), 2);",
          "    assert_eq!(haystack[at], b'\\n');",
          "    assert_ne!(at, 0);",
          "    assert_eq!(haystack[at - 1], b'b');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]