[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: Vec<u8> = vec![b'a', b'b', b'c'];",
          "    let look = Look::Start;",
          "    let _ = look.is_match(&haystack, 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(&haystack, 0), true);",
          "    haystack = vec![b'a', b'b', b'c'];",
          "    look = Look::Start;",
          "    assert_eq!(look.is_match(&haystack, 1), false);",
          "    assert_eq!(look.is_match(&haystack, 3), false);"
        ],
        "code": [
          "{",
          "    let haystack: Vec<u8> = vec![b'a', b'b', b'c'];",
          "    let look = Look::Start;",
          "    let _ = look.is_match(&haystack, 0);",
          "    assert_eq!(look.is_match(&haystack, 0), true);",
          "    haystack = vec![b'a', b'b', b'c'];",
          "    look = Look::Start;",
          "    assert_eq!(look.is_match(&haystack, 1), false);",
          "    assert_eq!(look.is_match(&haystack, 3), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: Vec<u8> = vec![];",
          "    let look = Look::Start;",
          "    let _ = look.is_match(&haystack, 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(&haystack, 0), true);"
        ],
        "code": [
          "{",
          "    let haystack: Vec<u8> = vec![];",
          "    let look = Look::Start;",
          "    let _ = look.is_match(&haystack, 0);",
          "    assert_eq!(look.is_match(&haystack, 0), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]