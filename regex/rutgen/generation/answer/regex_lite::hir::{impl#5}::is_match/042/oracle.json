[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::StartLF;",
          "    let haystack: &[u8] = b\"\\nHello, World!\";",
          "    let at = 0;",
          "    let _ = look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    let at = 1;",
          "    assert_eq!(look.is_match(haystack, at), false);",
          "    let at = haystack.len();",
          "    assert_eq!(look.is_match(haystack, at), false);",
          "    let haystack_empty: &[u8] = b\"\";",
          "    assert_eq!(look.is_match(haystack_empty, 0), true);",
          "    let at_invalid: usize = 2;",
          "    assert_eq!(look.is_match(haystack_empty, at_invalid), false);"
        ],
        "code": [
          "{",
          "    let look = Look::StartLF;",
          "    let haystack: &[u8] = b\"\\nHello, World!\";",
          "    let at = 0;",
          "    let _ = look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    let at = 1;",
          "    assert_eq!(look.is_match(haystack, at), false);",
          "    let at = haystack.len();",
          "    assert_eq!(look.is_match(haystack, at), false);",
          "    let haystack_empty: &[u8] = b\"\";",
          "    assert_eq!(look.is_match(haystack_empty, 0), true);",
          "    let at_invalid: usize = 2;",
          "    assert_eq!(look.is_match(haystack_empty, at_invalid), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::StartLF;",
          "    let haystack: &[u8] = b\"\\nHello, World!\";",
          "    let at = 1;",
          "    let _ = look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert!(look.is_match(haystack, at) == true);",
          "    assert!(at == 1);",
          "    assert!(haystack[at - 1] == b'\\n');",
          "    assert!(look == Look::StartLF);"
        ],
        "code": [
          "{",
          "    let look = Look::StartLF;",
          "    let haystack: &[u8] = b\"\\nHello, World!\";",
          "    let at = 1;",
          "    let _ = look.is_match(haystack, at);",
          "    assert!(look.is_match(haystack, at) == true);",
          "    assert!(at == 1);",
          "    assert!(haystack[at - 1] == b'\\n');",
          "    assert!(look == Look::StartLF);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::StartLF;",
          "    let haystack: &[u8] = b\"\";",
          "    let at = 0;",
          "    let _ = look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    let look = Look::StartLF;",
          "    let haystack: &[u8] = b\"\";",
          "    let at = 0;",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert!(at == 0);",
          "    assert!(haystack.len() == 0);"
        ],
        "code": [
          "{",
          "    let look = Look::StartLF;",
          "    let haystack: &[u8] = b\"\";",
          "    let at = 0;",
          "    let _ = look.is_match(haystack, at);",
          "    let look = Look::StartLF;",
          "    let haystack: &[u8] = b\"\";",
          "    let at = 0;",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert!(at == 0);",
          "    assert!(haystack.len() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]