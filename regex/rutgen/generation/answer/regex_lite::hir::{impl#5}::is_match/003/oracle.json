[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = &[b'a', b'b', b'_', b'c', b'1', b'2', b'3', b' ', b' ', b'a'];",
          "    let look = Look::WordStartHalf;",
          "    let at = 1; ",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert!(look.is_match(haystack, at) == !utf8::is_word_byte(haystack[at - 1]));"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = &[b'a', b'b', b'_', b'c', b'1', b'2', b'3', b' ', b' ', b'a'];",
          "    let look = Look::WordStartHalf;",
          "    let at = 1; ",
          "    look.is_match(haystack, at);",
          "    assert!(look.is_match(haystack, at) == !utf8::is_word_byte(haystack[at - 1]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = &[b'a', b'b', b'_', b'c', b'1', b'2', b'3', b' ', b' ', b'a'];",
          "    let look = Look::WordStartHalf;",
          "    let at = 2; ",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert!(at > 0);",
          "    assert_eq!(utf8::is_word_byte(haystack[at - 1]), false);"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = &[b'a', b'b', b'_', b'c', b'1', b'2', b'3', b' ', b' ', b'a'];",
          "    let look = Look::WordStartHalf;",
          "    let at = 2; ",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert!(at > 0);",
          "    assert_eq!(utf8::is_word_byte(haystack[at - 1]), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = &[b'a', b'b', b'_', b'c', b'1', b'2', b'3', b' ', b' ', b'a'];",
          "    let look = Look::WordStartHalf;",
          "    let at = 3; ",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(at, 3);",
          "    assert!(at > 0);",
          "    assert_eq!(haystack[at - 1], b'_');",
          "    assert_eq!(utf8::is_word_byte(haystack[at - 1]), false);",
          "    assert_eq!(utf8::is_word_byte(haystack[at]), true);",
          "    assert_eq!(!utf8::is_word_byte(haystack[at - 1]), true);"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = &[b'a', b'b', b'_', b'c', b'1', b'2', b'3', b' ', b' ', b'a'];",
          "    let look = Look::WordStartHalf;",
          "    let at = 3; ",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(at, 3);",
          "    assert!(at > 0);",
          "    assert_eq!(haystack[at - 1], b'_');",
          "    assert_eq!(utf8::is_word_byte(haystack[at - 1]), false);",
          "    assert_eq!(utf8::is_word_byte(haystack[at]), true);",
          "    assert_eq!(!utf8::is_word_byte(haystack[at - 1]), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = &[b'a', b'b', b'_', b'c', b'1', b'2', b'3', b' ', b' ', b'a'];",
          "    let look = Look::WordStartHalf;",
          "    let at = 4; ",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert!(at > 0);",
          "    assert_eq!(utf8::is_word_byte(haystack[at - 1]), true);",
          "    assert_eq!(utf8::is_word_byte(haystack[at]), false);"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = &[b'a', b'b', b'_', b'c', b'1', b'2', b'3', b' ', b' ', b'a'];",
          "    let look = Look::WordStartHalf;",
          "    let at = 4; ",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert!(at > 0);",
          "    assert_eq!(utf8::is_word_byte(haystack[at - 1]), true);",
          "    assert_eq!(utf8::is_word_byte(haystack[at]), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = &[b'a', b'b', b'_', b'c', b'1', b'2', b'3', b' ', b' ', b'a'];",
          "    let look = Look::WordStartHalf;",
          "    let at = 5; ",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(at > 0, true);",
          "    assert_eq!(utf8::is_word_byte(haystack[at - 1]), true);",
          "    assert_eq!(utf8::is_word_byte(haystack[at]), false);"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = &[b'a', b'b', b'_', b'c', b'1', b'2', b'3', b' ', b' ', b'a'];",
          "    let look = Look::WordStartHalf;",
          "    let at = 5; ",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(at > 0, true);",
          "    assert_eq!(utf8::is_word_byte(haystack[at - 1]), true);",
          "    assert_eq!(utf8::is_word_byte(haystack[at]), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = &[b'a', b'b', b'_', b'c', b'1', b'2', b'3', b' ', b' ', b'a'];",
          "    let look = Look::WordStartHalf;",
          "    let at = 6; ",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), true);"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = &[b'a', b'b', b'_', b'c', b'1', b'2', b'3', b' ', b' ', b'a'];",
          "    let look = Look::WordStartHalf;",
          "    let at = 6; ",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = &[b'a', b'b', b'_', b'c', b'1', b'2', b'3', b' ', b' ', b'a'];",
          "    let look = Look::WordStartHalf;",
          "    let at = 7; ",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), true);"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = &[b'a', b'b', b'_', b'c', b'1', b'2', b'3', b' ', b' ', b'a'];",
          "    let look = Look::WordStartHalf;",
          "    let at = 7; ",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = &[b'a', b'b', b'_', b'c', b'1', b'2', b'3', b' ', b' ', b'a'];",
          "    let look = Look::WordStartHalf;",
          "    let at = 8; ",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(look.is_match(&[b'a'], 0), false);",
          "    assert_eq!(look.is_match(haystack, 0), false);",
          "    assert_eq!(look.is_match(haystack, haystack.len()), false);",
          "    assert_eq!(look.is_match(haystack, 7), true);",
          "    assert_eq!(look.is_match(haystack, 1), false);"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = &[b'a', b'b', b'_', b'c', b'1', b'2', b'3', b' ', b' ', b'a'];",
          "    let look = Look::WordStartHalf;",
          "    let at = 8; ",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(look.is_match(&[b'a'], 0), false);",
          "    assert_eq!(look.is_match(haystack, 0), false);",
          "    assert_eq!(look.is_match(haystack, haystack.len()), false);",
          "    assert_eq!(look.is_match(haystack, 7), true);",
          "    assert_eq!(look.is_match(haystack, 1), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]