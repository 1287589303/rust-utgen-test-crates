[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordEndHalf;",
          "    let haystack = b\"hello world\";",
          "    let at = 10; // Position after 'o' (non-word character)",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    let at = 0;",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    let at = 9;",
          "    assert_eq!(look.is_match(haystack, at), false);",
          "    let at = 11;",
          "    assert_eq!(look.is_match(haystack, at), false);",
          "    let haystack = b\"hello\";",
          "    let at = 5;",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    let haystack = b\"hello \";",
          "    let at = 6;",
          "    assert_eq!(look.is_match(haystack, at), false);"
        ],
        "code": [
          "{",
          "    let look = Look::WordEndHalf;",
          "    let haystack = b\"hello world\";",
          "    let at = 10; // Position after 'o' (non-word character)",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    let at = 0;",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    let at = 9;",
          "    assert_eq!(look.is_match(haystack, at), false);",
          "    let at = 11;",
          "    assert_eq!(look.is_match(haystack, at), false);",
          "    let haystack = b\"hello\";",
          "    let at = 5;",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    let haystack = b\"hello \";",
          "    let at = 6;",
          "    assert_eq!(look.is_match(haystack, at), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordEndHalf;",
          "    let haystack = b\"test_case\";",
          "    let at = 9; // Position after '_' (non-word character)",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), !utf8::is_word_byte(haystack[at]));"
        ],
        "code": [
          "{",
          "    let look = Look::WordEndHalf;",
          "    let haystack = b\"test_case\";",
          "    let at = 9; // Position after '_' (non-word character)",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), !utf8::is_word_byte(haystack[at]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordEndHalf;",
          "    let haystack = b\"abc-def\";",
          "    let at = 7; // Position after '-' (non-word character)",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert!(at < haystack.len());",
          "    assert!(matches!(look, Look::WordEndHalf));",
          "    assert_eq!(at, 7);",
          "    assert_eq!(haystack[at - 1], b'-');"
        ],
        "code": [
          "{",
          "    let look = Look::WordEndHalf;",
          "    let haystack = b\"abc-def\";",
          "    let at = 7; // Position after '-' (non-word character)",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert!(at < haystack.len());",
          "    assert!(matches!(look, Look::WordEndHalf));",
          "    assert_eq!(at, 7);",
          "    assert_eq!(haystack[at - 1], b'-');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordEndHalf;",
          "    let haystack = b\"word#\";",
          "    let at = 5; // Position after '#' (non-word character)",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    let look = Look::WordEndHalf;",
          "    let haystack = b\"word#\";",
          "    let at = 5;",
          "    assert!(look.is_match(haystack, at));",
          "    assert!(!utf8::is_word_byte(haystack[at]));",
          "    assert!(at < haystack.len());"
        ],
        "code": [
          "{",
          "    let look = Look::WordEndHalf;",
          "    let haystack = b\"word#\";",
          "    let at = 5; // Position after '#' (non-word character)",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    let look = Look::WordEndHalf;",
          "    let haystack = b\"word#\";",
          "    let at = 5;",
          "    assert!(look.is_match(haystack, at));",
          "    assert!(!utf8::is_word_byte(haystack[at]));",
          "    assert!(at < haystack.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]