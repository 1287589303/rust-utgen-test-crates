[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::StartCRLF;",
          "    let haystack: &[u8] = b\"\\r\\n\";",
          "    let at = 1;",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(haystack[at - 1], b'\\r');",
          "    assert!(at >= haystack.len() || haystack[at] != b'\\n');",
          "    assert!(!look.is_match(haystack, 0));",
          "    assert!(look.is_match(haystack, 1));"
        ],
        "code": [
          "{",
          "    let look = Look::StartCRLF;",
          "    let haystack: &[u8] = b\"\\r\\n\";",
          "    let at = 1;",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(haystack[at - 1], b'\\r');",
          "    assert!(at >= haystack.len() || haystack[at] != b'\\n');",
          "    assert!(!look.is_match(haystack, 0));",
          "    assert!(look.is_match(haystack, 1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::StartCRLF;",
          "    let haystack: &[u8] = b\"\\r\\n\";",
          "    let at = 2;",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), false);",
          "    assert_eq!(at, 2);",
          "    assert_eq!(haystack[at - 1], b'\\n');",
          "    assert!(at >= haystack.len() || haystack[at] != b'\\n');"
        ],
        "code": [
          "{",
          "    let look = Look::StartCRLF;",
          "    let haystack: &[u8] = b\"\\r\\n\";",
          "    let at = 2;",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), false);",
          "    assert_eq!(at, 2);",
          "    assert_eq!(haystack[at - 1], b'\\n');",
          "    assert!(at >= haystack.len() || haystack[at] != b'\\n');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::StartCRLF;",
          "    let haystack: &[u8] = b\"abc\";",
          "    let at = 1;",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), false);",
          "    assert_eq!(look.is_match(haystack, at), at == 0 || haystack[at - 1] == b'\\n' || (haystack[at - 1] == b'\\r' && (at >= haystack.len() || haystack[at] != b'\\n')));",
          "    assert!(at > 0);",
          "    assert_eq!(haystack[at - 1], b'a');"
        ],
        "code": [
          "{",
          "    let look = Look::StartCRLF;",
          "    let haystack: &[u8] = b\"abc\";",
          "    let at = 1;",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), false);",
          "    assert_eq!(look.is_match(haystack, at), at == 0 || haystack[at - 1] == b'\\n' || (haystack[at - 1] == b'\\r' && (at >= haystack.len() || haystack[at] != b'\\n')));",
          "    assert!(at > 0);",
          "    assert_eq!(haystack[at - 1], b'a');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::StartCRLF;",
          "    let haystack: &[u8] = b\"abc\";",
          "    let at = 3;",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert!(!look.is_match(haystack, at));",
          "    assert_eq!(look.is_match(haystack, at), false);",
          "    assert!(haystack[at - 1] != b'\\n');",
          "    assert!(haystack[at - 1] == b'\\r' && at < haystack.len());",
          "    assert!(at >= haystack.len() || haystack[at] != b'\\n');"
        ],
        "code": [
          "{",
          "    let look = Look::StartCRLF;",
          "    let haystack: &[u8] = b\"abc\";",
          "    let at = 3;",
          "    look.is_match(haystack, at);",
          "    assert!(!look.is_match(haystack, at));",
          "    assert_eq!(look.is_match(haystack, at), false);",
          "    assert!(haystack[at - 1] != b'\\n');",
          "    assert!(haystack[at - 1] == b'\\r' && at < haystack.len());",
          "    assert!(at >= haystack.len() || haystack[at] != b'\\n');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::StartCRLF;",
          "    let haystack: &[u8] = b\"\\r\\nabc\";",
          "    let at = 4;",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), false);",
          "    assert!(haystack[at - 1] == b'c');",
          "    assert!(at >= haystack.len() || haystack[at] != b'\\n');",
          "    assert!(haystack[at - 1] == b'\\r');",
          "    assert!(at > 0);",
          "    assert!(haystack[at - 1] != b'\\n');",
          "    assert!(at >= haystack.len() == false);"
        ],
        "code": [
          "{",
          "    let look = Look::StartCRLF;",
          "    let haystack: &[u8] = b\"\\r\\nabc\";",
          "    let at = 4;",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), false);",
          "    assert!(haystack[at - 1] == b'c');",
          "    assert!(at >= haystack.len() || haystack[at] != b'\\n');",
          "    assert!(haystack[at - 1] == b'\\r');",
          "    assert!(at > 0);",
          "    assert!(haystack[at - 1] != b'\\n');",
          "    assert!(at >= haystack.len() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]