[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"hello world\"; ",
          "    let look = Look::WordNegate;",
          "    let at = 5; ",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert!(utf8::is_word_byte(haystack[at - 1]) == utf8::is_word_byte(haystack[at]));",
          "    assert!(at > 0);",
          "    assert!(at < haystack.len());"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"hello world\"; ",
          "    let look = Look::WordNegate;",
          "    let at = 5; ",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert!(utf8::is_word_byte(haystack[at - 1]) == utf8::is_word_byte(haystack[at]));",
          "    assert!(at > 0);",
          "    assert!(at < haystack.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"good_morning\"; ",
          "    let look = Look::WordNegate;",
          "    let at = 4; ",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(look.is_match(haystack, at), false);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(look.is_match(haystack, at + 1), false);",
          "    assert_eq!(look.is_match(haystack, at - 1), true);",
          "    assert_eq!(look.is_match(haystack, at + 2), true);",
          "    assert_eq!(look.is_match(haystack, at + 3), false);",
          "    assert_eq!(look.is_match(haystack, at - 2), true);",
          "    assert_eq!(look.is_match(haystack, at - 3), false);",
          "    assert_eq!(look.is_match(haystack, at + 4), true);",
          "    assert_eq!(look.is_match(haystack, at), haystack[at - 1] == b'_');",
          "    assert_eq!(look.is_match(haystack, at), haystack[at] == b'm');"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"good_morning\"; ",
          "    let look = Look::WordNegate;",
          "    let at = 4; ",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(look.is_match(haystack, at), false);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(look.is_match(haystack, at + 1), false);",
          "    assert_eq!(look.is_match(haystack, at - 1), true);",
          "    assert_eq!(look.is_match(haystack, at + 2), true);",
          "    assert_eq!(look.is_match(haystack, at + 3), false);",
          "    assert_eq!(look.is_match(haystack, at - 2), true);",
          "    assert_eq!(look.is_match(haystack, at - 3), false);",
          "    assert_eq!(look.is_match(haystack, at + 4), true);",
          "    assert_eq!(look.is_match(haystack, at), haystack[at - 1] == b'_');",
          "    assert_eq!(look.is_match(haystack, at), haystack[at] == b'm');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"__test__\"; ",
          "    let look = Look::WordNegate;",
          "    let at = 3; ",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(utf8::is_word_byte(haystack[at - 1]), true);",
          "    assert_eq!(utf8::is_word_byte(haystack[at]), true);",
          "    assert!(at > 0);",
          "    assert!(at < haystack.len());"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"__test__\"; ",
          "    let look = Look::WordNegate;",
          "    let at = 3; ",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(utf8::is_word_byte(haystack[at - 1]), true);",
          "    assert_eq!(utf8::is_word_byte(haystack[at]), true);",
          "    assert!(at > 0);",
          "    assert!(at < haystack.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"word#test\"; ",
          "    let look = Look::WordNegate;",
          "    let at = 4; ",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(at > 0, true);",
          "    assert_eq!(at < haystack.len(), true);",
          "    assert_eq!(utf8::is_word_byte(haystack[at - 1]), false);",
          "    assert_eq!(utf8::is_word_byte(haystack[at]), true);",
          "    assert_eq!(word_before == word_after, true);"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"word#test\"; ",
          "    let look = Look::WordNegate;",
          "    let at = 4; ",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(at > 0, true);",
          "    assert_eq!(at < haystack.len(), true);",
          "    assert_eq!(utf8::is_word_byte(haystack[at - 1]), false);",
          "    assert_eq!(utf8::is_word_byte(haystack[at]), true);",
          "    assert_eq!(word_before == word_after, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"check_this\"; ",
          "    let look = Look::WordNegate;",
          "    let at = 5; ",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(look.is_match(b\"check_this\", 5), look.is_match(b\"check-these\", 5));",
          "    assert_eq!(look.is_match(b\"check_this\", 5), look.is_match(b\"check this\", 5));",
          "    assert_eq!(look.is_match(b\"check_this\", 5), look.is_match(b\"check@this\", 5));",
          "    assert_eq!(look.is_match(b\"check_this\", 5), look.is_match(b\"check0this\", 5));",
          "    assert_eq!(look.is_match(b\"check_this\", 5), look.is_match(b\"check1this\", 5));",
          "    assert_eq!(look.is_match(b\"check_this\", 5), look.is_match(b\"check-this\", 5));",
          "    assert_eq!(look.is_match(b\"check_this\", 5), look.is_match(b\"check this\", 5));"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"check_this\"; ",
          "    let look = Look::WordNegate;",
          "    let at = 5; ",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(look.is_match(b\"check_this\", 5), look.is_match(b\"check-these\", 5));",
          "    assert_eq!(look.is_match(b\"check_this\", 5), look.is_match(b\"check this\", 5));",
          "    assert_eq!(look.is_match(b\"check_this\", 5), look.is_match(b\"check@this\", 5));",
          "    assert_eq!(look.is_match(b\"check_this\", 5), look.is_match(b\"check0this\", 5));",
          "    assert_eq!(look.is_match(b\"check_this\", 5), look.is_match(b\"check1this\", 5));",
          "    assert_eq!(look.is_match(b\"check_this\", 5), look.is_match(b\"check-this\", 5));",
          "    assert_eq!(look.is_match(b\"check_this\", 5), look.is_match(b\"check this\", 5));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]