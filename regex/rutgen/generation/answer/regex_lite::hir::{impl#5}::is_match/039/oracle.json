[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"Hello, world!\\n\";",
          "    let look = Look::EndLF;",
          "    let at = haystack.len();",
          "    let _ = look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), true);"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"Hello, world!\\n\";",
          "    let look = Look::EndLF;",
          "    let at = haystack.len();",
          "    let _ = look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"\\n\";",
          "    let look = Look::EndLF;",
          "    let at = haystack.len();",
          "    let _ = look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    let look = Look::EndLF;",
          "    let haystack: &[u8] = b\"\\n\";",
          "    let at = haystack.len();",
          "    assert!(look.is_match(haystack, at));",
          "    assert_eq!(look.is_match(haystack, at), at == haystack.len() || haystack[at] == b'\\n');"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"\\n\";",
          "    let look = Look::EndLF;",
          "    let at = haystack.len();",
          "    let _ = look.is_match(haystack, at);",
          "    let look = Look::EndLF;",
          "    let haystack: &[u8] = b\"\\n\";",
          "    let at = haystack.len();",
          "    assert!(look.is_match(haystack, at));",
          "    assert_eq!(look.is_match(haystack, at), at == haystack.len() || haystack[at] == b'\\n');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"Line 1\\nLine 2\\n\";",
          "    let look = Look::EndLF;",
          "    let at = haystack.len();",
          "    let _ = look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(haystack.len(), at);",
          "    assert!(at == haystack.len() || haystack[at] == b'\\n');"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"Line 1\\nLine 2\\n\";",
          "    let look = Look::EndLF;",
          "    let at = haystack.len();",
          "    let _ = look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(haystack.len(), at);",
          "    assert!(at == haystack.len() || haystack[at] == b'\\n');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]