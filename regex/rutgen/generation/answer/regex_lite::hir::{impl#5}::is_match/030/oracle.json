[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::EndCRLF;",
          "    let haystack: &[u8] = b\"Hello\\nWorld\";",
          "    let at: usize = 9; // Position just after \"Hello\\nWo\"",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert!(look.is_match(haystack, at) == false);",
          "    assert!(at == haystack.len() == false);",
          "    assert!(haystack[at] == b'\\r' == false);",
          "    assert!(haystack[at] == b'\\n' && (at == 0 || haystack[at - 1] != b'\\r') == true);"
        ],
        "code": [
          "{",
          "    let look = Look::EndCRLF;",
          "    let haystack: &[u8] = b\"Hello\\nWorld\";",
          "    let at: usize = 9; // Position just after \"Hello\\nWo\"",
          "    look.is_match(haystack, at);",
          "    assert!(look.is_match(haystack, at) == false);",
          "    assert!(at == haystack.len() == false);",
          "    assert!(haystack[at] == b'\\r' == false);",
          "    assert!(haystack[at] == b'\\n' && (at == 0 || haystack[at - 1] != b'\\r') == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::EndCRLF;",
          "    let haystack: &[u8] = b\"Hello\\nWorld\";",
          "    let at: usize = 10; // Position at the end of \"Hello\\nWorld\"",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(look.is_match(haystack, at), at == haystack.len() || haystack[at] == b'\\r' || (haystack[at] == b'\\n' && (at == 0 || haystack[at - 1] != b'\\r)));",
          "    at += 1;",
          "    assert_eq!(look.is_match(haystack, at), false);",
          "    at -= 1;",
          "    assert_eq!(look.is_match(haystack, at), false);"
        ],
        "code": [
          "{",
          "    let look = Look::EndCRLF;",
          "    let haystack: &[u8] = b\"Hello\\nWorld\";",
          "    let at: usize = 10; // Position at the end of \"Hello\\nWorld\"",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(look.is_match(haystack, at), at == haystack.len() || haystack[at] == b'\\r' || (haystack[at] == b'\\n' && (at == 0 || haystack[at - 1] != b'\\r)));",
          "    at += 1;",
          "    assert_eq!(look.is_match(haystack, at), false);",
          "    at -= 1;",
          "    assert_eq!(look.is_match(haystack, at), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::EndCRLF;",
          "    let haystack: &[u8] = b\"Hello\\r\\nWorld\";",
          "    let at: usize = 7; // Position at \"\\r\" in \"Hello\\r\\nWorld\"",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert!(look.is_match(haystack, at) == (at == haystack.len() || haystack[at] == b'\\r' || (haystack[at] == b'\\n' && (at == 0 || haystack[at - 1] != b'\\r'))));"
        ],
        "code": [
          "{",
          "    let look = Look::EndCRLF;",
          "    let haystack: &[u8] = b\"Hello\\r\\nWorld\";",
          "    let at: usize = 7; // Position at \"\\r\" in \"Hello\\r\\nWorld\"",
          "    look.is_match(haystack, at);",
          "    assert!(look.is_match(haystack, at) == (at == haystack.len() || haystack[at] == b'\\r' || (haystack[at] == b'\\n' && (at == 0 || haystack[at - 1] != b'\\r'))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::EndCRLF;",
          "    let haystack: &[u8] = b\"HelloWorld\";",
          "    let at: usize = 5; // Position in the middle of \"Hello\"",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), false);",
          "    assert!(at < haystack.len());",
          "    assert_ne!(haystack[at], b'\\r');",
          "    assert_eq!(haystack[at], b'\\n');",
          "    assert!(at != 0 || haystack[at - 1] == b'\\r');",
          "    assert!(at == 0 || haystack[at - 1] != b'\\r');"
        ],
        "code": [
          "{",
          "    let look = Look::EndCRLF;",
          "    let haystack: &[u8] = b\"HelloWorld\";",
          "    let at: usize = 5; // Position in the middle of \"Hello\"",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), false);",
          "    assert!(at < haystack.len());",
          "    assert_ne!(haystack[at], b'\\r');",
          "    assert_eq!(haystack[at], b'\\n');",
          "    assert!(at != 0 || haystack[at - 1] == b'\\r');",
          "    assert!(at == 0 || haystack[at - 1] != b'\\r');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::EndCRLF;",
          "    let haystack: &[u8] = b\"Hello\\n\";",
          "    let at: usize = 5; // Position after \"Hello\\n\"",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert!(at == haystack.len());",
          "    assert!(haystack[at] != b'\\r');",
          "    assert!(haystack[at] == b'\\n');",
          "    assert!(at == 0 || haystack[at - 1] != b'\\r');"
        ],
        "code": [
          "{",
          "    let look = Look::EndCRLF;",
          "    let haystack: &[u8] = b\"Hello\\n\";",
          "    let at: usize = 5; // Position after \"Hello\\n\"",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert!(at == haystack.len());",
          "    assert!(haystack[at] != b'\\r');",
          "    assert!(haystack[at] == b'\\n');",
          "    assert!(at == 0 || haystack[at - 1] != b'\\r');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]