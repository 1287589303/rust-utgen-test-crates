[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordEnd;",
          "    let haystack: &[u8] = b\"hello world\";",
          "    let at = 5; // 'o' -> ' ' transition",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(look.is_match(haystack, 0), false);",
          "    assert_eq!(look.is_match(haystack, 10), false);"
        ],
        "code": [
          "{",
          "    let look = Look::WordEnd;",
          "    let haystack: &[u8] = b\"hello world\";",
          "    let at = 5; // 'o' -> ' ' transition",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(look.is_match(haystack, 0), false);",
          "    assert_eq!(look.is_match(haystack, 10), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordEnd;",
          "    let haystack: &[u8] = b\"hello_world!\";",
          "    let at = 11; // '_' -> '!' transition",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(at > 0, true);",
          "    assert_eq!(at < haystack.len(), true);",
          "    assert_eq!(utf8::is_word_byte(haystack[at - 1]), true);",
          "    assert_eq!(utf8::is_word_byte(haystack[at]), false);"
        ],
        "code": [
          "{",
          "    let look = Look::WordEnd;",
          "    let haystack: &[u8] = b\"hello_world!\";",
          "    let at = 11; // '_' -> '!' transition",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert_eq!(at > 0, true);",
          "    assert_eq!(at < haystack.len(), true);",
          "    assert_eq!(utf8::is_word_byte(haystack[at - 1]), true);",
          "    assert_eq!(utf8::is_word_byte(haystack[at]), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordEnd;",
          "    let haystack: &[u8] = b\"test_case123\";",
          "    let at = 10; // '3' -> end transition",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), true);"
        ],
        "code": [
          "{",
          "    let look = Look::WordEnd;",
          "    let haystack: &[u8] = b\"test_case123\";",
          "    let at = 10; // '3' -> end transition",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordEnd;",
          "    let haystack: &[u8] = b\"goodbye_world\";",
          "    let at = 12; // 'd' -> end transition",
          "    look.is_match(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert!(at > 0);",
          "    assert!(at < haystack.len());",
          "    assert!(utf8::is_word_byte(haystack[at - 1]));",
          "    assert!(!utf8::is_word_byte(haystack[at]));"
        ],
        "code": [
          "{",
          "    let look = Look::WordEnd;",
          "    let haystack: &[u8] = b\"goodbye_world\";",
          "    let at = 12; // 'd' -> end transition",
          "    look.is_match(haystack, at);",
          "    assert_eq!(look.is_match(haystack, at), true);",
          "    assert!(at > 0);",
          "    assert!(at < haystack.len());",
          "    assert!(utf8::is_word_byte(haystack[at - 1]));",
          "    assert!(!utf8::is_word_byte(haystack[at]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]