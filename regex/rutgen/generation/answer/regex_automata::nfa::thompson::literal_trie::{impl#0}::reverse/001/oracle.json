[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = LiteralTrie::reverse();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.states.len(), 1);",
          "    assert!(result.rev);",
          "    assert!(result.states[0].transitions.is_empty());",
          "    assert!(result.states[0].chunks.is_empty());"
        ],
        "code": [
          "{",
          "    let result = LiteralTrie::reverse();",
          "    assert_eq!(result.states.len(), 1);",
          "    assert!(result.rev);",
          "    assert!(result.states[0].transitions.is_empty());",
          "    assert!(result.states[0].chunks.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = LiteralTrie::reverse();",
          "    let expected_state = State::default();",
          "    let has_default_state = result.states.contains(&expected_state);",
          "}"
        ],
        "oracle": [
          "    let result = LiteralTrie::reverse();",
          "    let expected_state = State::default();",
          "    assert_eq!(result.rev, true);",
          "    assert_eq!(result.states.len(), 1);",
          "    assert!(result.states.contains(&expected_state));",
          "    assert!(result.states[0].is_match == false);",
          "    assert_eq!(result.states[0].ntrans, 0);",
          "    assert!(result.states[0].input_ranges.is_empty());",
          "    assert!(result.states[0].next.is_empty());",
          "    assert!(result.states[0].pattern_ids.is_empty());",
          "    assert!(result.states[0].accel.is_empty());"
        ],
        "code": [
          "{",
          "    let result = LiteralTrie::reverse();",
          "    let expected_state = State::default();",
          "    let has_default_state = result.states.contains(&expected_state);",
          "    let result = LiteralTrie::reverse();",
          "    let expected_state = State::default();",
          "    assert_eq!(result.rev, true);",
          "    assert_eq!(result.states.len(), 1);",
          "    assert!(result.states.contains(&expected_state));",
          "    assert!(result.states[0].is_match == false);",
          "    assert_eq!(result.states[0].ntrans, 0);",
          "    assert!(result.states[0].input_ranges.is_empty());",
          "    assert!(result.states[0].next.is_empty());",
          "    assert!(result.states[0].pattern_ids.is_empty());",
          "    assert!(result.states[0].accel.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]