[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let builder = Builder::new();",
          "    assert!(builder.pattern_id.is_none());",
          "    assert!(builder.states.is_empty());",
          "    assert!(builder.start_pattern.is_empty());",
          "    assert!(builder.captures.is_empty());",
          "    assert_eq!(builder.memory_states, 0);",
          "    assert!(!builder.utf8);",
          "    assert!(!builder.reverse);",
          "    assert_eq!(builder.look_matcher.lineterm, DebugByte::default());",
          "    assert!(builder.size_limit.is_none());",
          "}"
        ],
        "oracle": [
          "    builder.pattern_id.is_none();",
          "    builder.states.is_empty();",
          "    builder.start_pattern.is_empty();",
          "    builder.captures.is_empty();",
          "    builder.memory_states == 0;",
          "    !builder.utf8;",
          "    !builder.reverse;",
          "    builder.look_matcher.lineterm == DebugByte::default();",
          "    builder.size_limit.is_none();"
        ],
        "code": [
          "{",
          "    let builder = Builder::new();",
          "    assert!(builder.pattern_id.is_none());",
          "    assert!(builder.states.is_empty());",
          "    assert!(builder.start_pattern.is_empty());",
          "    assert!(builder.captures.is_empty());",
          "    assert_eq!(builder.memory_states, 0);",
          "    assert!(!builder.utf8);",
          "    assert!(!builder.reverse);",
          "    assert_eq!(builder.look_matcher.lineterm, DebugByte::default());",
          "    assert!(builder.size_limit.is_none());",
          "    builder.pattern_id.is_none();",
          "    builder.states.is_empty();",
          "    builder.start_pattern.is_empty();",
          "    builder.captures.is_empty();",
          "    builder.memory_states == 0;",
          "    !builder.utf8;",
          "    !builder.reverse;",
          "    builder.look_matcher.lineterm == DebugByte::default();",
          "    builder.size_limit.is_none();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]