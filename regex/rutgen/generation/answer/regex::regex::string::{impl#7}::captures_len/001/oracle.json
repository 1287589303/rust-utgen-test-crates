[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"foo\").unwrap();",
          "    let _ = re.captures_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(1, re.captures_len());",
          "    let re = Regex::new(r\"(foo)\").unwrap();",
          "    assert_eq!(2, re.captures_len());",
          "    let re = Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap();",
          "    assert_eq!(5, re.captures_len());",
          "    let re = Regex::new(r\"[a&&b]\").unwrap();",
          "    assert_eq!(1, re.captures_len());"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"foo\").unwrap();",
          "    let _ = re.captures_len();",
          "    assert_eq!(1, re.captures_len());",
          "    let re = Regex::new(r\"(foo)\").unwrap();",
          "    assert_eq!(2, re.captures_len());",
          "    let re = Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap();",
          "    assert_eq!(5, re.captures_len());",
          "    let re = Regex::new(r\"[a&&b]\").unwrap();",
          "    assert_eq!(1, re.captures_len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"(foo)\").unwrap();",
          "    let _ = re.captures_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(2, re.captures_len());",
          "    assert_eq!(1, Regex::new(r\"foo\").unwrap().captures_len());",
          "    assert_eq!(5, Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap().captures_len());",
          "    assert_eq!(1, Regex::new(r\"[a&&b]\").unwrap().captures_len());",
          "    assert!(Regex::new(r\"\").is_err());"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"(foo)\").unwrap();",
          "    let _ = re.captures_len();",
          "    assert_eq!(2, re.captures_len());",
          "    assert_eq!(1, Regex::new(r\"foo\").unwrap().captures_len());",
          "    assert_eq!(5, Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap().captures_len());",
          "    assert_eq!(1, Regex::new(r\"[a&&b]\").unwrap().captures_len());",
          "    assert!(Regex::new(r\"\").is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap();",
          "    let _ = re.captures_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(5, re.captures_len());",
          "    let re = Regex::new(r\"foo\").unwrap(); assert_eq!(1, re.captures_len());",
          "    let re = Regex::new(r\"(foo)\").unwrap(); assert_eq!(2, re.captures_len());",
          "    let re = Regex::new(r\"[a&&b]\").unwrap(); assert_eq!(1, re.captures_len());"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap();",
          "    let _ = re.captures_len();",
          "    assert_eq!(5, re.captures_len());",
          "    let re = Regex::new(r\"foo\").unwrap(); assert_eq!(1, re.captures_len());",
          "    let re = Regex::new(r\"(foo)\").unwrap(); assert_eq!(2, re.captures_len());",
          "    let re = Regex::new(r\"[a&&b]\").unwrap(); assert_eq!(1, re.captures_len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"[a&&b]\").unwrap();",
          "    let _ = re.captures_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(1, re.captures_len());",
          "    let re = Regex::new(r\"foo\").unwrap();",
          "    assert_eq!(1, re.captures_len());",
          "    let re = Regex::new(r\"(foo)\").unwrap();",
          "    assert_eq!(2, re.captures_len());",
          "    let re = Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap();",
          "    assert_eq!(5, re.captures_len());",
          "    let re = Regex::new(r\"[a&&b]\").unwrap();",
          "    assert_eq!(1, re.captures_len());"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"[a&&b]\").unwrap();",
          "    let _ = re.captures_len();",
          "    assert_eq!(1, re.captures_len());",
          "    let re = Regex::new(r\"foo\").unwrap();",
          "    assert_eq!(1, re.captures_len());",
          "    let re = Regex::new(r\"(foo)\").unwrap();",
          "    assert_eq!(2, re.captures_len());",
          "    let re = Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap();",
          "    assert_eq!(5, re.captures_len());",
          "    let re = Regex::new(r\"[a&&b]\").unwrap();",
          "    assert_eq!(1, re.captures_len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]