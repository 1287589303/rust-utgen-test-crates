[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut data = Vec::new();",
          "    let n: i32 = 0;",
          "    write_vari32(&mut data, n);",
          "}"
        ],
        "oracle": [
          "    data.len() == 1",
          "    data[0] == 0",
          "    data[0] & 0b1000_0000 == 0"
        ],
        "code": [
          "{",
          "    let mut data = Vec::new();",
          "    let n: i32 = 0;",
          "    write_vari32(&mut data, n);",
          "    data.len() == 1",
          "    data[0] == 0",
          "    data[0] & 0b1000_0000 == 0",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut data = Vec::new();",
          "    let n: i32 = 1;",
          "    write_vari32(&mut data, n);",
          "}"
        ],
        "oracle": [
          "    data.len() == 1",
          "    data[0] == 2",
          "    data[0] | 0b1000_0000 == 0b0000_0000",
          "    data[0] & 0b0111_1111 == 1"
        ],
        "code": [
          "{",
          "    let mut data = Vec::new();",
          "    let n: i32 = 1;",
          "    write_vari32(&mut data, n);",
          "    data.len() == 1",
          "    data[0] == 2",
          "    data[0] | 0b1000_0000 == 0b0000_0000",
          "    data[0] & 0b0111_1111 == 1",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut data = Vec::new();",
          "    let n: i32 = 2_147_483_647;",
          "    write_vari32(&mut data, n);",
          "}"
        ],
        "oracle": [
          "    let mut data = Vec::new();",
          "    let n: i32 = 2_147_483_647;",
          "    write_vari32(&mut data, n);",
          "    assert_eq!(data.len(), 1);",
          "    assert_eq!(data[0], 0b11111111);"
        ],
        "code": [
          "{",
          "    let mut data = Vec::new();",
          "    let n: i32 = 2_147_483_647;",
          "    write_vari32(&mut data, n);",
          "    let mut data = Vec::new();",
          "    let n: i32 = 2_147_483_647;",
          "    write_vari32(&mut data, n);",
          "    assert_eq!(data.len(), 1);",
          "    assert_eq!(data[0], 0b11111111);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]