[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = String::new();",
          "    escape_into(\"\", &mut buf);",
          "}"
        ],
        "oracle": [
          "    let mut buf = String::new(); escape_into(\"abc\", &mut buf); assert_eq!(buf, \"abc\");",
          "    let mut buf = String::new(); escape_into(\"\\\\.+?*()\", &mut buf); assert_eq!(buf, \"\\\\\\\\.\\\\+\\\\?\\\\*\\\\(\\\\)\");",
          "    let mut buf = String::new(); escape_into(\"no_meta\", &mut buf); assert_eq!(buf, \"no_meta\");",
          "    let mut buf = String::new(); escape_into(\"special^chars$\", &mut buf); assert_eq!(buf, \"special\\\\^chars\\\\$\");",
          "    let mut buf = String::new(); escape_into(\"just-~test\", &mut buf); assert_eq!(buf, \"just-\\\\~test\");",
          "    let mut buf = String::new(); escape_into(\"mixed\\\\characters()\", &mut buf); assert_eq!(buf, \"mixed\\\\\\\\characters\\\\(\\\\)\");"
        ],
        "code": [
          "{",
          "    let mut buf = String::new();",
          "    escape_into(\"\", &mut buf);",
          "    let mut buf = String::new(); escape_into(\"abc\", &mut buf); assert_eq!(buf, \"abc\");",
          "    let mut buf = String::new(); escape_into(\"\\\\.+?*()\", &mut buf); assert_eq!(buf, \"\\\\\\\\.\\\\+\\\\?\\\\*\\\\(\\\\)\");",
          "    let mut buf = String::new(); escape_into(\"no_meta\", &mut buf); assert_eq!(buf, \"no_meta\");",
          "    let mut buf = String::new(); escape_into(\"special^chars$\", &mut buf); assert_eq!(buf, \"special\\\\^chars\\\\$\");",
          "    let mut buf = String::new(); escape_into(\"just-~test\", &mut buf); assert_eq!(buf, \"just-\\\\~test\");",
          "    let mut buf = String::new(); escape_into(\"mixed\\\\characters()\", &mut buf); assert_eq!(buf, \"mixed\\\\\\\\characters\\\\(\\\\)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = String::new();",
          "    escape_into(\"abc\", &mut buf);",
          "}"
        ],
        "oracle": [
          "    buf == \"abc\"",
          "    buf.len() == 3"
        ],
        "code": [
          "{",
          "    let mut buf = String::new();",
          "    escape_into(\"abc\", &mut buf);",
          "    buf == \"abc\"",
          "    buf.len() == 3",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = String::new();",
          "    escape_into(\".*+?()|[]{}^$#&-~\", &mut buf);",
          "}"
        ],
        "oracle": [
          "    buf == r\"\\.\\*\\+\\?\\(\\)\\|\\[\\]\\{\\}\\^\\$\\#\\&\\-\\~\""
        ],
        "code": [
          "{",
          "    let mut buf = String::new();",
          "    escape_into(\".*+?()|[]{}^$#&-~\", &mut buf);",
          "    buf == r\"\\.\\*\\+\\?\\(\\)\\|\\[\\]\\{\\}\\^\\$\\#\\&\\-\\~\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = String::new();",
          "    escape_into(\"a+b*c?\", &mut buf);",
          "}"
        ],
        "oracle": [
          "    let mut buf = String::new();",
          "    escape_into(\"a+b*c?\", &mut buf);",
          "    assert_eq!(buf, \"\\\\a\\\\+\\\\b\\\\*\\\\c\\\\?\");",
          "    let mut buf = String::new();",
          "    escape_into(\"hello\", &mut buf);",
          "    assert_eq!(buf, \"hello\");",
          "    let mut buf = String::new();",
          "    escape_into(\"\\\\ ( ) [ ] { } * + ? . ^ $ | - & ~\", &mut buf);",
          "    assert_eq!(buf, \"\\\\\\\\ \\\\( \\\\) \\\\[ \\\\] \\\\{ \\\\} \\\\* \\\\+ \\\\? \\\\. \\\\^ \\\\$ \\\\| \\\\- \\\\& \\\\~\");",
          "    let mut buf = String::new();",
          "    escape_into(\"\", &mut buf);",
          "    assert_eq!(buf, \"\");"
        ],
        "code": [
          "{",
          "    let mut buf = String::new();",
          "    escape_into(\"a+b*c?\", &mut buf);",
          "    let mut buf = String::new();",
          "    escape_into(\"a+b*c?\", &mut buf);",
          "    assert_eq!(buf, \"\\\\a\\\\+\\\\b\\\\*\\\\c\\\\?\");",
          "    let mut buf = String::new();",
          "    escape_into(\"hello\", &mut buf);",
          "    assert_eq!(buf, \"hello\");",
          "    let mut buf = String::new();",
          "    escape_into(\"\\\\ ( ) [ ] { } * + ? . ^ $ | - & ~\", &mut buf);",
          "    assert_eq!(buf, \"\\\\\\\\ \\\\( \\\\) \\\\[ \\\\] \\\\{ \\\\} \\\\* \\\\+ \\\\? \\\\. \\\\^ \\\\$ \\\\| \\\\- \\\\& \\\\~\");",
          "    let mut buf = String::new();",
          "    escape_into(\"\", &mut buf);",
          "    assert_eq!(buf, \"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = String::new();",
          "    escape_into(\"hello\\\\world\", &mut buf);",
          "}"
        ],
        "oracle": [
          "    buf == \"hello\\\\\\\\world\"",
          "    buf.len() == 14",
          "    escape_into(\"hello+world\", &mut buf);",
          "    buf == \"hello\\\\+world\"",
          "    buf.len() == 12",
          "    escape_into(\"hello*world\", &mut buf);",
          "    buf == \"hello\\\\*world\"",
          "    buf.len() == 12",
          "    escape_into(\"hello?world\", &mut buf);",
          "    buf == \"hello\\\\?world\"",
          "    buf.len() == 12",
          "    escape_into(\"hello(world)\", &mut buf);",
          "    buf == \"hello\\\\(world\\\\)\"",
          "    buf.len() == 14",
          "    escape_into(\"hello|world\", &mut buf);",
          "    buf == \"hello\\\\|world\"",
          "    buf.len() == 12",
          "    escape_into(\"hello[world]\", &mut buf);",
          "    buf == \"hello\\\\[world\\\\]\"",
          "    buf.len() == 14",
          "    escape_into(\"hello{world}\", &mut buf);",
          "    buf == \"hello\\\\{world\\\\}\"",
          "    buf.len() == 14",
          "    escape_into(\"hello^world\", &mut buf);",
          "    buf == \"hello\\\\^world\"",
          "    buf.len() == 12",
          "    escape_into(\"hello$world\", &mut buf);",
          "    buf == \"hello\\\\$world\"",
          "    buf.len() == 12",
          "    escape_into(\"hello#world\", &mut buf);",
          "    buf == \"hello\\\\#world\"",
          "    buf.len() == 12",
          "    escape_into(\"hello&world\", &mut buf);",
          "    buf == \"hello\\\\&world\"",
          "    buf.len() == 12",
          "    escape_into(\"hello-world\", &mut buf);",
          "    buf == \"hello\\\\-world\"",
          "    buf.len() == 12",
          "    escape_into(\"hello~world\", &mut buf);",
          "    buf == \"hello\\\\~world\"",
          "    buf.len() == 12",
          "    escape_into(\"hello world\", &mut buf);",
          "    buf == \"hello world\"",
          "    buf.len() == 11"
        ],
        "code": [
          "{",
          "    let mut buf = String::new();",
          "    escape_into(\"hello\\\\world\", &mut buf);",
          "    buf == \"hello\\\\\\\\world\"",
          "    buf.len() == 14",
          "    escape_into(\"hello+world\", &mut buf);",
          "    buf == \"hello\\\\+world\"",
          "    buf.len() == 12",
          "    escape_into(\"hello*world\", &mut buf);",
          "    buf == \"hello\\\\*world\"",
          "    buf.len() == 12",
          "    escape_into(\"hello?world\", &mut buf);",
          "    buf == \"hello\\\\?world\"",
          "    buf.len() == 12",
          "    escape_into(\"hello(world)\", &mut buf);",
          "    buf == \"hello\\\\(world\\\\)\"",
          "    buf.len() == 14",
          "    escape_into(\"hello|world\", &mut buf);",
          "    buf == \"hello\\\\|world\"",
          "    buf.len() == 12",
          "    escape_into(\"hello[world]\", &mut buf);",
          "    buf == \"hello\\\\[world\\\\]\"",
          "    buf.len() == 14",
          "    escape_into(\"hello{world}\", &mut buf);",
          "    buf == \"hello\\\\{world\\\\}\"",
          "    buf.len() == 14",
          "    escape_into(\"hello^world\", &mut buf);",
          "    buf == \"hello\\\\^world\"",
          "    buf.len() == 12",
          "    escape_into(\"hello$world\", &mut buf);",
          "    buf == \"hello\\\\$world\"",
          "    buf.len() == 12",
          "    escape_into(\"hello#world\", &mut buf);",
          "    buf == \"hello\\\\#world\"",
          "    buf.len() == 12",
          "    escape_into(\"hello&world\", &mut buf);",
          "    buf == \"hello\\\\&world\"",
          "    buf.len() == 12",
          "    escape_into(\"hello-world\", &mut buf);",
          "    buf == \"hello\\\\-world\"",
          "    buf.len() == 12",
          "    escape_into(\"hello~world\", &mut buf);",
          "    buf == \"hello\\\\~world\"",
          "    buf.len() == 12",
          "    escape_into(\"hello world\", &mut buf);",
          "    buf == \"hello world\"",
          "    buf.len() == 11",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]