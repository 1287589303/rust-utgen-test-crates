[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start = Start::NonWordByte;",
          "    let result = start.as_u8();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start.as_u8(), 0);",
          "    ",
          "    let start = Start::WordByte;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 1);",
          "    ",
          "    let start = Start::Text;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 2);",
          "    ",
          "    let start = Start::LineLF;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 3);",
          "    ",
          "    let start = Start::LineCR;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 4);",
          "    ",
          "    let start = Start::CustomLineTerminator;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 5);"
        ],
        "code": [
          "{",
          "    let start = Start::NonWordByte;",
          "    let result = start.as_u8();",
          "    assert_eq!(start.as_u8(), 0);",
          "    ",
          "    let start = Start::WordByte;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 1);",
          "    ",
          "    let start = Start::Text;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 2);",
          "    ",
          "    let start = Start::LineLF;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 3);",
          "    ",
          "    let start = Start::LineCR;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 4);",
          "    ",
          "    let start = Start::CustomLineTerminator;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start = Start::WordByte;",
          "    let result = start.as_u8();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 1);",
          "    let start = Start::Text;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 2);",
          "    let start = Start::LineLF;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 3);",
          "    let start = Start::LineCR;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 4);",
          "    let start = Start::CustomLineTerminator;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 5);",
          "    let start = Start::NonWordByte;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 0);"
        ],
        "code": [
          "{",
          "    let start = Start::WordByte;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 1);",
          "    let start = Start::Text;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 2);",
          "    let start = Start::LineLF;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 3);",
          "    let start = Start::LineCR;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 4);",
          "    let start = Start::CustomLineTerminator;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 5);",
          "    let start = Start::NonWordByte;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start = Start::Text;",
          "    let result = start.as_u8();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 2);",
          "    assert_eq!(start.as_u8(), Start::Text as u8);",
          "    assert!(result < Start::len() as u8);"
        ],
        "code": [
          "{",
          "    let start = Start::Text;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 2);",
          "    assert_eq!(start.as_u8(), Start::Text as u8);",
          "    assert!(result < Start::len() as u8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start = Start::LineLF;",
          "    let result = start.as_u8();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 3);",
          "    let start = Start::LineCR;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 4);",
          "    let start = Start::Text;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 2);",
          "    let start = Start::WordByte;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 1);",
          "    let start = Start::NonWordByte;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 0);",
          "    let start = Start::CustomLineTerminator;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 5);"
        ],
        "code": [
          "{",
          "    let start = Start::LineLF;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 3);",
          "    let start = Start::LineCR;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 4);",
          "    let start = Start::Text;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 2);",
          "    let start = Start::WordByte;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 1);",
          "    let start = Start::NonWordByte;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 0);",
          "    let start = Start::CustomLineTerminator;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start = Start::LineCR;",
          "    let result = start.as_u8();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 4);",
          "    let start = Start::LineLF;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 3);",
          "    let start = Start::Text;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 2);",
          "    let start = Start::WordByte;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 1);",
          "    let start = Start::NonWordByte;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 0);",
          "    let start = Start::CustomLineTerminator;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 5);"
        ],
        "code": [
          "{",
          "    let start = Start::LineCR;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 4);",
          "    let start = Start::LineLF;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 3);",
          "    let start = Start::Text;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 2);",
          "    let start = Start::WordByte;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 1);",
          "    let start = Start::NonWordByte;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 0);",
          "    let start = Start::CustomLineTerminator;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start = Start::CustomLineTerminator;",
          "    let result = start.as_u8();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Start::CustomLineTerminator.as_u8());"
        ],
        "code": [
          "{",
          "    let start = Start::CustomLineTerminator;",
          "    let result = start.as_u8();",
          "    assert_eq!(result, Start::CustomLineTerminator.as_u8());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]