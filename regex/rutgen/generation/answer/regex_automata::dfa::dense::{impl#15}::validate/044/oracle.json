[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition_table = TransitionTable {",
          "        table: vec![0, 1, 2, 3, 4],",
          "        classes: ByteClasses([0; 256]),",
          "        stride2: 1,",
          "    };",
          "",
          "    let special = Special {",
          "        max: StateID(4),",
          "        quit_id: StateID(3),",
          "        min_match: StateID(2),",
          "        max_match: StateID(4),",
          "        min_accel: StateID(1),",
          "        max_accel: StateID(3),",
          "        min_start: StateID(0),",
          "        max_start: StateID(4),",
          "    };",
          "",
          "    let dfa = DFA {",
          "        tt: transition_table,",
          "        st: StartTable::new(),",
          "        ms: MatchStates::new(),",
          "        special,",
          "        accels: Accels::new(),",
          "        pre: None,",
          "        quitset: ByteSet::new(),",
          "        flags: Flags::new(),",
          "    };",
          "",
          "    let _ = dfa.tt.validate(&dfa);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.tt.validate(&dfa), Ok(()))",
          "    assert!(dfa.tt.is_valid(StateID(5)) == false)",
          "    assert!(dfa.tt.is_valid(StateID(6)) == false)",
          "    assert!(dfa.tt.is_valid(StateID(4)) == true)",
          "    assert!(dfa.tt.is_valid(StateID(3)) == true)",
          "    assert!(dfa.tt.is_valid(StateID(0)) == true)",
          "    assert!(dfa.tt.is_valid(StateID(1)) == true)",
          "    assert!(dfa.tt.is_valid(StateID(2)) == true)",
          "    assert_eq!(dfa.special.is_special_state(StateID(5)), false)",
          "    assert_eq!(dfa.special.is_special_state(StateID(4)), true)"
        ],
        "code": [
          "{",
          "    let transition_table = TransitionTable {",
          "        table: vec![0, 1, 2, 3, 4],",
          "        classes: ByteClasses([0; 256]),",
          "        stride2: 1,",
          "    };",
          "",
          "    let special = Special {",
          "        max: StateID(4),",
          "        quit_id: StateID(3),",
          "        min_match: StateID(2),",
          "        max_match: StateID(4),",
          "        min_accel: StateID(1),",
          "        max_accel: StateID(3),",
          "        min_start: StateID(0),",
          "        max_start: StateID(4),",
          "    };",
          "",
          "    let dfa = DFA {",
          "        tt: transition_table,",
          "        st: StartTable::new(),",
          "        ms: MatchStates::new(),",
          "        special,",
          "        accels: Accels::new(),",
          "        pre: None,",
          "        quitset: ByteSet::new(),",
          "        flags: Flags::new(),",
          "    };",
          "",
          "    let _ = dfa.tt.validate(&dfa);",
          "    assert_eq!(dfa.tt.validate(&dfa), Ok(()))",
          "    assert!(dfa.tt.is_valid(StateID(5)) == false)",
          "    assert!(dfa.tt.is_valid(StateID(6)) == false)",
          "    assert!(dfa.tt.is_valid(StateID(4)) == true)",
          "    assert!(dfa.tt.is_valid(StateID(3)) == true)",
          "    assert!(dfa.tt.is_valid(StateID(0)) == true)",
          "    assert!(dfa.tt.is_valid(StateID(1)) == true)",
          "    assert!(dfa.tt.is_valid(StateID(2)) == true)",
          "    assert_eq!(dfa.special.is_special_state(StateID(5)), false)",
          "    assert_eq!(dfa.special.is_special_state(StateID(4)), true)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition_table = TransitionTable {",
          "        table: vec![0, 1, 2],",
          "        classes: ByteClasses([0; 256]),",
          "        stride2: 1,",
          "    };",
          "",
          "    let special = Special {",
          "        max: StateID(2),",
          "        quit_id: StateID(1),",
          "        min_match: StateID(1),",
          "        max_match: StateID(2),",
          "        min_accel: StateID(0),",
          "        max_accel: StateID(2),",
          "        min_start: StateID(0),",
          "        max_start: StateID(2),",
          "    };",
          "",
          "    let dfa = DFA {",
          "        tt: transition_table,",
          "        st: StartTable::new(),",
          "        ms: MatchStates::new(),",
          "        special,",
          "        accels: Accels::new(),",
          "        pre: None,",
          "        quitset: ByteSet::new(),",
          "        flags: Flags::new(),",
          "    };",
          "",
          "    let _ = dfa.tt.validate(&dfa);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.tt.validate(&dfa), Ok(()));"
        ],
        "code": [
          "{",
          "    let transition_table = TransitionTable {",
          "        table: vec![0, 1, 2],",
          "        classes: ByteClasses([0; 256]),",
          "        stride2: 1,",
          "    };",
          "",
          "    let special = Special {",
          "        max: StateID(2),",
          "        quit_id: StateID(1),",
          "        min_match: StateID(1),",
          "        max_match: StateID(2),",
          "        min_accel: StateID(0),",
          "        max_accel: StateID(2),",
          "        min_start: StateID(0),",
          "        max_start: StateID(2),",
          "    };",
          "",
          "    let dfa = DFA {",
          "        tt: transition_table,",
          "        st: StartTable::new(),",
          "        ms: MatchStates::new(),",
          "        special,",
          "        accels: Accels::new(),",
          "        pre: None,",
          "        quitset: ByteSet::new(),",
          "        flags: Flags::new(),",
          "    };",
          "",
          "    let _ = dfa.tt.validate(&dfa);",
          "    assert_eq!(dfa.tt.validate(&dfa), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]