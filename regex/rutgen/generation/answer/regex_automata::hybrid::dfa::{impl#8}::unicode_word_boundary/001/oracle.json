[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().unicode_word_boundary(true);",
          "}"
        ],
        "oracle": [
          "    assert!(config.unicode_word_boundary.is_some());",
          "    assert_eq!(config.unicode_word_boundary.unwrap(), true);"
        ],
        "code": [
          "{",
          "    let config = Config::new().unicode_word_boundary(true);",
          "    assert!(config.unicode_word_boundary.is_some());",
          "    assert_eq!(config.unicode_word_boundary.unwrap(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().unicode_word_boundary(false);",
          "}"
        ],
        "oracle": [
          "    config.unicode_word_boundary = Some(false);",
          "    assert_eq!(config.unicode_word_boundary, Some(false));"
        ],
        "code": [
          "{",
          "    let config = Config::new().unicode_word_boundary(false);",
          "    config.unicode_word_boundary = Some(false);",
          "    assert_eq!(config.unicode_word_boundary, Some(false));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new()",
          "        .unicode_word_boundary(true);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_unicode_word_boundary(), true);",
          "    assert_eq!(config.unicode_word_boundary, Some(true));"
        ],
        "code": [
          "{",
          "    let config = Config::new()",
          "        .unicode_word_boundary(true);",
          "    assert_eq!(config.get_unicode_word_boundary(), true);",
          "    assert_eq!(config.unicode_word_boundary, Some(true));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"foo 123\";",
          "    let config = Config::new()",
          "        .unicode_word_boundary(true);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_unicode_word_boundary(), true);",
          "    assert_eq!(config.unicode_word_boundary.is_some(), true);",
          "    assert_eq!(config.unicode_word_boundary.unwrap(), true);",
          "    assert_eq!(config.unicode_word_boundary, Some(true));",
          "    assert_eq!(config.unicode_word_boundary.unwrap_or(false), true);"
        ],
        "code": [
          "{",
          "    let input = \"foo 123\";",
          "    let config = Config::new()",
          "        .unicode_word_boundary(true);",
          "    assert_eq!(config.get_unicode_word_boundary(), true);",
          "    assert_eq!(config.unicode_word_boundary.is_some(), true);",
          "    assert_eq!(config.unicode_word_boundary.unwrap(), true);",
          "    assert_eq!(config.unicode_word_boundary, Some(true));",
          "    assert_eq!(config.unicode_word_boundary.unwrap_or(false), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"foo 123 ☃\";",
          "    let config = Config::new()",
          "        .unicode_word_boundary(true);",
          "}"
        ],
        "oracle": [
          "    self.unicode_word_boundary.is_some()",
          "    self.unicode_word_boundary.unwrap() == true",
          "    self == Config { unicode_word_boundary: Some(true), ..Default::default() }",
          "    self.unicode_word_boundary(Some(true))",
          "    self.unicode_word_boundary(false)",
          "    self == Config { unicode_word_boundary: Some(false), ..Default::default() }"
        ],
        "code": [
          "{",
          "    let input = \"foo 123 ☃\";",
          "    let config = Config::new()",
          "        .unicode_word_boundary(true);",
          "    self.unicode_word_boundary.is_some()",
          "    self.unicode_word_boundary.unwrap() == true",
          "    self == Config { unicode_word_boundary: Some(true), ..Default::default() }",
          "    self.unicode_word_boundary(Some(true))",
          "    self.unicode_word_boundary(false)",
          "    self == Config { unicode_word_boundary: Some(false), ..Default::default() }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Input::new(\"β123\").range(2..);",
          "    let config = Config::new()",
          "        .unicode_word_boundary(true);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_unicode_word_boundary(), true);",
          "    assert_eq!(config.unicode_word_boundary, Some(true));"
        ],
        "code": [
          "{",
          "    let input = Input::new(\"β123\").range(2..);",
          "    let config = Config::new()",
          "        .unicode_word_boundary(true);",
          "    assert_eq!(config.get_unicode_word_boundary(), true);",
          "    assert_eq!(config.unicode_word_boundary, Some(true));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Input::new(\"123β\").range(..3);",
          "    let config = Config::new()",
          "        .unicode_word_boundary(true);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_unicode_word_boundary(), true);",
          "    assert_eq!(config.unicode_word_boundary, Some(true));",
          "    assert_eq!(config.unicode_word_boundary.is_some(), true);",
          "    assert_eq!(config.unicode_word_boundary.unwrap(), true);",
          "    assert_eq!(config.override(unicode_word_boundary(false)).get_unicode_word_boundary(), false);",
          "    assert_eq!(config.override(unicode_word_boundary(true)).get_unicode_word_boundary(), true);"
        ],
        "code": [
          "{",
          "    let input = Input::new(\"123β\").range(..3);",
          "    let config = Config::new()",
          "        .unicode_word_boundary(true);",
          "    assert_eq!(config.get_unicode_word_boundary(), true);",
          "    assert_eq!(config.unicode_word_boundary, Some(true));",
          "    assert_eq!(config.unicode_word_boundary.is_some(), true);",
          "    assert_eq!(config.unicode_word_boundary.unwrap(), true);",
          "    assert_eq!(config.override(unicode_word_boundary(false)).get_unicode_word_boundary(), false);",
          "    assert_eq!(config.override(unicode_word_boundary(true)).get_unicode_word_boundary(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]