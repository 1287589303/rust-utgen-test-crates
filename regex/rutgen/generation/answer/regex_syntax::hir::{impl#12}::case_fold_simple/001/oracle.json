[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ranges = vec![",
          "        ClassUnicodeRange { start: 'a', end: 'z' },",
          "        ClassUnicodeRange { start: 'A', end: 'Z' },",
          "    ];",
          "    let mut class_unicode = ClassUnicode::new(ranges);",
          "    class_unicode.case_fold_simple();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_unicode.ranges().len(), 4);",
          "    assert!(class_unicode.ranges().contains(&ClassUnicodeRange { start: 'a', end: 'z' }));",
          "    assert!(class_unicode.ranges().contains(&ClassUnicodeRange { start: 'A', end: 'Z' }));",
          "    assert!(class_unicode.ranges().contains(&ClassUnicodeRange { start: 'а', end: 'я' })); // Example case folded range in Cyrillic",
          "    assert!(class_unicode.ranges().contains(&ClassUnicodeRange { start: 'А', end: 'Я' })); // Example case folded range in Cyrillic",
          "    assert!(class_unicode.ranges().contains(&ClassUnicodeRange { start: '0', end: '9' })); // Example if numeric ranges were included",
          "    assert!(class_unicode.is_ascii());"
        ],
        "code": [
          "{",
          "    let ranges = vec![",
          "        ClassUnicodeRange { start: 'a', end: 'z' },",
          "        ClassUnicodeRange { start: 'A', end: 'Z' },",
          "    ];",
          "    let mut class_unicode = ClassUnicode::new(ranges);",
          "    class_unicode.case_fold_simple();",
          "    assert_eq!(class_unicode.ranges().len(), 4);",
          "    assert!(class_unicode.ranges().contains(&ClassUnicodeRange { start: 'a', end: 'z' }));",
          "    assert!(class_unicode.ranges().contains(&ClassUnicodeRange { start: 'A', end: 'Z' }));",
          "    assert!(class_unicode.ranges().contains(&ClassUnicodeRange { start: 'а', end: 'я' })); // Example case folded range in Cyrillic",
          "    assert!(class_unicode.ranges().contains(&ClassUnicodeRange { start: 'А', end: 'Я' })); // Example case folded range in Cyrillic",
          "    assert!(class_unicode.ranges().contains(&ClassUnicodeRange { start: '0', end: '9' })); // Example if numeric ranges were included",
          "    assert!(class_unicode.is_ascii());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ranges = vec![",
          "        ClassUnicodeRange { start: 'α', end: 'ω' },",
          "        ClassUnicodeRange { start: 'Α', end: 'Ω' },",
          "    ];",
          "    let mut class_unicode = ClassUnicode::new(ranges);",
          "    class_unicode.case_fold_simple();",
          "}"
        ],
        "oracle": [
          "    class_unicode.ranges().len() == 2",
          "    class_unicode.ranges().contains(&ClassUnicodeRange { start: 'α', end: 'ω' })",
          "    class_unicode.ranges().contains(&ClassUnicodeRange { start: 'Α', end: 'Ω' })",
          "    class_unicode.ranges().contains(&ClassUnicodeRange { start: 'a', end: 'z' })",
          "    class_unicode.ranges().contains(&ClassUnicodeRange { start: 'A', end: 'Z' })",
          "    class_unicode.is_ascii() == false",
          "    class_unicode.minimum_len().is_some()",
          "    class_unicode.maximum_len().is_some()"
        ],
        "code": [
          "{",
          "    let ranges = vec![",
          "        ClassUnicodeRange { start: 'α', end: 'ω' },",
          "        ClassUnicodeRange { start: 'Α', end: 'Ω' },",
          "    ];",
          "    let mut class_unicode = ClassUnicode::new(ranges);",
          "    class_unicode.case_fold_simple();",
          "    class_unicode.ranges().len() == 2",
          "    class_unicode.ranges().contains(&ClassUnicodeRange { start: 'α', end: 'ω' })",
          "    class_unicode.ranges().contains(&ClassUnicodeRange { start: 'Α', end: 'Ω' })",
          "    class_unicode.ranges().contains(&ClassUnicodeRange { start: 'a', end: 'z' })",
          "    class_unicode.ranges().contains(&ClassUnicodeRange { start: 'A', end: 'Z' })",
          "    class_unicode.is_ascii() == false",
          "    class_unicode.minimum_len().is_some()",
          "    class_unicode.maximum_len().is_some()",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ranges = vec![",
          "        ClassUnicodeRange { start: 'a', end: 'z' },",
          "        ClassUnicodeRange { start: 'α', end: 'ω' },",
          "    ];",
          "    let mut class_unicode = ClassUnicode::new(ranges);",
          "    class_unicode.case_fold_simple();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_unicode.ranges().len(), 4); // Check if the range count has expanded after case folding.",
          "    assert!(class_unicode.ranges().contains(&ClassUnicodeRange { start: 'A', end: 'Z' })); // Check if uppercase range A-Z is included.",
          "    assert!(class_unicode.ranges().contains(&ClassUnicodeRange { start: 'a', end: 'z' })); // Check if the original range a-z is still included.",
          "    assert!(class_unicode.ranges().contains(&ClassUnicodeRange { start: 'Α', end: 'Ω' })); // Check if uppercase Greek range Α-Ω is included.",
          "    assert!(class_unicode.ranges().contains(&ClassUnicodeRange { start: 'α', end: 'ω' })); // Check if the original Greek range α-ω is still included."
        ],
        "code": [
          "{",
          "    let ranges = vec![",
          "        ClassUnicodeRange { start: 'a', end: 'z' },",
          "        ClassUnicodeRange { start: 'α', end: 'ω' },",
          "    ];",
          "    let mut class_unicode = ClassUnicode::new(ranges);",
          "    class_unicode.case_fold_simple();",
          "    assert_eq!(class_unicode.ranges().len(), 4); // Check if the range count has expanded after case folding.",
          "    assert!(class_unicode.ranges().contains(&ClassUnicodeRange { start: 'A', end: 'Z' })); // Check if uppercase range A-Z is included.",
          "    assert!(class_unicode.ranges().contains(&ClassUnicodeRange { start: 'a', end: 'z' })); // Check if the original range a-z is still included.",
          "    assert!(class_unicode.ranges().contains(&ClassUnicodeRange { start: 'Α', end: 'Ω' })); // Check if uppercase Greek range Α-Ω is included.",
          "    assert!(class_unicode.ranges().contains(&ClassUnicodeRange { start: 'α', end: 'ω' })); // Check if the original Greek range α-ω is still included.",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ranges: Vec<ClassUnicodeRange> = vec![];",
          "    let mut class_unicode = ClassUnicode::new(ranges);",
          "    class_unicode.case_fold_simple();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_unicode.ranges().len(), 0);",
          "    assert!(class_unicode.is_ascii());",
          "    assert_eq!(class_unicode.minimum_len(), None);",
          "    assert_eq!(class_unicode.maximum_len(), None);",
          "    assert_eq!(class_unicode.literal(), None);",
          "    assert!(class_unicode.to_byte_class().is_none());",
          "    ",
          "    let ranges: Vec<ClassUnicodeRange> = vec![ClassUnicodeRange { start: 'a', end: 'z' }];",
          "    let mut class_unicode_case_fold = ClassUnicode::new(ranges);",
          "    class_unicode_case_fold.case_fold_simple();",
          "    assert_eq!(class_unicode_case_fold.ranges().len(), 52);",
          "    assert!(class_unicode_case_fold.ranges().contains(&ClassUnicodeRange { start: 'a', end: 'z' }));",
          "    assert!(class_unicode_case_fold.ranges().contains(&ClassUnicodeRange { start: 'A', end: 'Z' }));",
          "    ",
          "    let ranges_invalid: Vec<ClassUnicodeRange> = vec![ClassUnicodeRange { start: 'z', end: 'a' }];",
          "    let mut class_unicode_invalid = ClassUnicode::new(ranges_invalid);",
          "    panic::catch_unwind(|| {",
          "    class_unicode_invalid.case_fold_simple();",
          "    }).unwrap_err();"
        ],
        "code": [
          "{",
          "    let ranges: Vec<ClassUnicodeRange> = vec![];",
          "    let mut class_unicode = ClassUnicode::new(ranges);",
          "    class_unicode.case_fold_simple();",
          "    assert_eq!(class_unicode.ranges().len(), 0);",
          "    assert!(class_unicode.is_ascii());",
          "    assert_eq!(class_unicode.minimum_len(), None);",
          "    assert_eq!(class_unicode.maximum_len(), None);",
          "    assert_eq!(class_unicode.literal(), None);",
          "    assert!(class_unicode.to_byte_class().is_none());",
          "    ",
          "    let ranges: Vec<ClassUnicodeRange> = vec![ClassUnicodeRange { start: 'a', end: 'z' }];",
          "    let mut class_unicode_case_fold = ClassUnicode::new(ranges);",
          "    class_unicode_case_fold.case_fold_simple();",
          "    assert_eq!(class_unicode_case_fold.ranges().len(), 52);",
          "    assert!(class_unicode_case_fold.ranges().contains(&ClassUnicodeRange { start: 'a', end: 'z' }));",
          "    assert!(class_unicode_case_fold.ranges().contains(&ClassUnicodeRange { start: 'A', end: 'Z' }));",
          "    ",
          "    let ranges_invalid: Vec<ClassUnicodeRange> = vec![ClassUnicodeRange { start: 'z', end: 'a' }];",
          "    let mut class_unicode_invalid = ClassUnicode::new(ranges_invalid);",
          "    panic::catch_unwind(|| {",
          "    class_unicode_invalid.case_fold_simple();",
          "    }).unwrap_err();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]