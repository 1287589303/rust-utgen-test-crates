[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet::singleton(Look::Start);",
          "    let mut output = Vec::new();",
          "    let result = look_set.fmt(&mut output).unwrap();",
          "}"
        ],
        "oracle": [
          "    let look_set = LookSet::singleton(Look::Start);",
          "    let mut output = Vec::new();",
          "    let result = look_set.fmt(&mut output).unwrap();",
          "    assert_eq!(output, vec![Look::Start.as_char() as u8]);",
          "    assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    let look_set = LookSet::singleton(Look::Start);",
          "    let mut output = Vec::new();",
          "    let result = look_set.fmt(&mut output).unwrap();",
          "    let look_set = LookSet::singleton(Look::Start);",
          "    let mut output = Vec::new();",
          "    let result = look_set.fmt(&mut output).unwrap();",
          "    assert_eq!(output, vec![Look::Start.as_char() as u8]);",
          "    assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet::empty()",
          "        .insert(Look::Start)",
          "        .insert(Look::End)",
          "        .insert(Look::WordAscii);",
          "    let mut output = Vec::new();",
          "    let result = look_set.fmt(&mut output).unwrap();",
          "}"
        ],
        "oracle": [
          "    let look_set = LookSet::empty().insert(Look::Start).insert(Look::End).insert(Look::WordAscii);",
          "    let mut output = Vec::new();",
          "    let result = look_set.fmt(&mut output).unwrap();",
          "    assert_eq!(result, Ok(()));",
          "    assert!(!look_set.is_empty());",
          "    assert!(look_set.iter().next().is_some());",
          "    assert_eq!(output, vec!['A', 'z', 'b']);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet::empty()",
          "        .insert(Look::Start)",
          "        .insert(Look::End)",
          "        .insert(Look::WordAscii);",
          "    let mut output = Vec::new();",
          "    let result = look_set.fmt(&mut output).unwrap();",
          "    let look_set = LookSet::empty().insert(Look::Start).insert(Look::End).insert(Look::WordAscii);",
          "    let mut output = Vec::new();",
          "    let result = look_set.fmt(&mut output).unwrap();",
          "    assert_eq!(result, Ok(()));",
          "    assert!(!look_set.is_empty());",
          "    assert!(look_set.iter().next().is_some());",
          "    assert_eq!(output, vec!['A', 'z', 'b']);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet::full();",
          "    let mut output = Vec::new();",
          "    let result = look_set.fmt(&mut output).unwrap();",
          "}"
        ],
        "oracle": [
          "    LookSet::full().fmt(&mut Vec::new()).unwrap() == Ok(())",
          "    ",
          "    let look_set = LookSet::full();",
          "    ",
          "    let mut output = Vec::new();",
          "    ",
          "    assert!(look_set.is_empty() == false);",
          "    ",
          "    let look_iter = look_set.iter();",
          "    ",
          "    assert!(look_iter.is_empty() == false);",
          "    ",
          "    output.clear();",
          "    ",
          "    let result = look_set.fmt(&mut output).unwrap();",
          "    ",
          "    assert_eq!(result, Ok(()));",
          "    ",
          "    assert!(output.len() > 0);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet::full();",
          "    let mut output = Vec::new();",
          "    let result = look_set.fmt(&mut output).unwrap();",
          "    LookSet::full().fmt(&mut Vec::new()).unwrap() == Ok(())",
          "    ",
          "    let look_set = LookSet::full();",
          "    ",
          "    let mut output = Vec::new();",
          "    ",
          "    assert!(look_set.is_empty() == false);",
          "    ",
          "    let look_iter = look_set.iter();",
          "    ",
          "    assert!(look_iter.is_empty() == false);",
          "    ",
          "    output.clear();",
          "    ",
          "    let result = look_set.fmt(&mut output).unwrap();",
          "    ",
          "    assert_eq!(result, Ok(()));",
          "    ",
          "    assert!(output.len() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]