[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_lookset = LookSet::empty();",
          "    let _ = format!(\"{:?}\", empty_lookset);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{:?}\", LookSet::empty()), \"∅\");"
        ],
        "code": [
          "{",
          "    let empty_lookset = LookSet::empty();",
          "    let _ = format!(\"{:?}\", empty_lookset);",
          "    assert_eq!(format!(\"{:?}\", LookSet::empty()), \"∅\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let full_lookset = LookSet::full();",
          "    let _ = format!(\"{:?}\", full_lookset);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{:?}\", LookSet::empty()), \"∅\");"
        ],
        "code": [
          "{",
          "    let full_lookset = LookSet::full();",
          "    let _ = format!(\"{:?}\", full_lookset);",
          "    assert_eq!(format!(\"{:?}\", LookSet::empty()), \"∅\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let singleton_lookset = LookSet::singleton(Look::Start);",
          "    let _ = format!(\"{:?}\", singleton_lookset);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{:?}\", LookSet::empty()), \"∅\");",
          "    assert_eq!(format!(\"{:?}\", LookSet { bits: 0 }), \"∅\");"
        ],
        "code": [
          "{",
          "    let singleton_lookset = LookSet::singleton(Look::Start);",
          "    let _ = format!(\"{:?}\", singleton_lookset);",
          "    assert_eq!(format!(\"{:?}\", LookSet::empty()), \"∅\");",
          "    assert_eq!(format!(\"{:?}\", LookSet { bits: 0 }), \"∅\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let non_empty_lookset = LookSet::singleton(Look::End);",
          "    let iter = non_empty_lookset.iter();",
          "    let _ = iter.collect::<Vec<_>>();",
          "}"
        ],
        "oracle": [
          "    assert!(non_empty_lookset.is_empty() == false);",
          "    assert!(iter.collect::<Vec<_>>() == vec![Look::End]);",
          "    assert!(non_empty_lookset.len() == 1);",
          "    assert!(non_empty_lookset.contains(Look::End) == true);",
          "    assert!(non_empty_lookset.contains(Look::Start) == false);",
          "    assert!(non_empty_lookset.contains_anchor() == false);",
          "    assert!(non_empty_lookset.contains_word() == false);",
          "    assert!(non_empty_lookset.iter().next() == Some(Look::End));",
          "    assert!(format!(\"{:?}\", non_empty_lookset) == \"z\");"
        ],
        "code": [
          "{",
          "    let non_empty_lookset = LookSet::singleton(Look::End);",
          "    let iter = non_empty_lookset.iter();",
          "    let _ = iter.collect::<Vec<_>>();",
          "    assert!(non_empty_lookset.is_empty() == false);",
          "    assert!(iter.collect::<Vec<_>>() == vec![Look::End]);",
          "    assert!(non_empty_lookset.len() == 1);",
          "    assert!(non_empty_lookset.contains(Look::End) == true);",
          "    assert!(non_empty_lookset.contains(Look::Start) == false);",
          "    assert!(non_empty_lookset.contains_anchor() == false);",
          "    assert!(non_empty_lookset.contains_word() == false);",
          "    assert!(non_empty_lookset.iter().next() == Some(Look::End));",
          "    assert!(format!(\"{:?}\", non_empty_lookset) == \"z\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]