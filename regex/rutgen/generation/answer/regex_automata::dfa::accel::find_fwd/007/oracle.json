[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let needles: &[u8] = &[1u8];",
          "    let haystack: &[u8] = &[0u8; 10];",
          "    let at: usize = 0;",
          "    let _result = find_fwd(needles, haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_fwd(&[1u8], &[0u8; 10], 0), None);"
        ],
        "code": [
          "{",
          "    let needles: &[u8] = &[1u8];",
          "    let haystack: &[u8] = &[0u8; 10];",
          "    let at: usize = 0;",
          "    let _result = find_fwd(needles, haystack, at);",
          "    assert_eq!(find_fwd(&[1u8], &[0u8; 10], 0), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let needles: &[u8] = &[1u8];",
          "    let haystack: &[u8] = &[0u8; 10];",
          "    let at: usize = 5;",
          "    let _result = find_fwd(needles, haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, None);"
        ],
        "code": [
          "{",
          "    let needles: &[u8] = &[1u8];",
          "    let haystack: &[u8] = &[0u8; 10];",
          "    let at: usize = 5;",
          "    let _result = find_fwd(needles, haystack, at);",
          "    assert_eq!(_result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let needles: &[u8] = &[1u8];",
          "    let haystack: &[u8] = &[0u8; 10];",
          "    let at: usize = 9;",
          "    let _result = find_fwd(needles, haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, None);"
        ],
        "code": [
          "{",
          "    let needles: &[u8] = &[1u8];",
          "    let haystack: &[u8] = &[0u8; 10];",
          "    let at: usize = 9;",
          "    let _result = find_fwd(needles, haystack, at);",
          "    assert_eq!(_result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let needles: &[u8] = &[1u8];",
          "    let haystack: &[u8] = &[0u8; 10];",
          "    let at: usize = 10; // out of bounds",
          "    let _result = find_fwd(needles, haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_fwd(&[1u8], &[0u8; 10], 10), None);"
        ],
        "code": [
          "{",
          "    let needles: &[u8] = &[1u8];",
          "    let haystack: &[u8] = &[0u8; 10];",
          "    let at: usize = 10; // out of bounds",
          "    let _result = find_fwd(needles, haystack, at);",
          "    assert_eq!(find_fwd(&[1u8], &[0u8; 10], 10), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]