[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let needles = [0x00, 0x01];",
          "    let haystack = [0x02, 0x03, 0x04];",
          "    let at = 0;",
          "    let result = find_fwd(&needles, &haystack, at);",
          "}"
        ],
        "oracle": [
          "    let needles = [0x00, 0x01];",
          "    let haystack = [0x02, 0x03, 0x04];",
          "    let at = 0;",
          "    let result = find_fwd(&needles, &haystack, at);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let needles = [0x00, 0x01];",
          "    let haystack = [0x02, 0x03, 0x04];",
          "    let at = 0;",
          "    let result = find_fwd(&needles, &haystack, at);",
          "    let needles = [0x00, 0x01];",
          "    let haystack = [0x02, 0x03, 0x04];",
          "    let at = 0;",
          "    let result = find_fwd(&needles, &haystack, at);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic(expected = \"invalid needles length: 4\")]"
        ],
        "prefix": [
          "{",
          "    let needles = [0x00, 0x01, 0x02, 0x03];",
          "    let haystack = [0x02, 0x03, 0x04];",
          "    let at = 0;",
          "    let result = find_fwd(&needles, &haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_fwd(&[0x00, 0x01], &[0x02, 0x03, 0x04], 0), None);",
          "    assert_eq!(find_fwd(&[0x00, 0x01], &[0x02, 0x01, 0x04], 0), Some(1));",
          "    assert_eq!(find_fwd(&[0x00, 0x01], &[0x02, 0x00, 0x04], 0), Some(2));",
          "    assert_eq!(find_fwd(&[0x00, 0x01], &[0x02, 0x03, 0x04], 1), None);",
          "    assert_eq!(find_fwd(&[0x00, 0x01], &[0x02, 0x00, 0x04], 1), Some(2));",
          "    assert_eq!(find_fwd(&[0x00, 0x01], &[0x01, 0x02, 0x03], 0), Some(0));",
          "    assert_eq!(find_fwd(&[0x00, 0x01], &[0x01, 0x02, 0x03], 1), None);",
          "    assert_eq!(find_fwd(&[0x00, 0x01], &[], 0), None);"
        ],
        "code": [
          "{",
          "    let needles = [0x00, 0x01, 0x02, 0x03];",
          "    let haystack = [0x02, 0x03, 0x04];",
          "    let at = 0;",
          "    let result = find_fwd(&needles, &haystack, at);",
          "    assert_eq!(find_fwd(&[0x00, 0x01], &[0x02, 0x03, 0x04], 0), None);",
          "    assert_eq!(find_fwd(&[0x00, 0x01], &[0x02, 0x01, 0x04], 0), Some(1));",
          "    assert_eq!(find_fwd(&[0x00, 0x01], &[0x02, 0x00, 0x04], 0), Some(2));",
          "    assert_eq!(find_fwd(&[0x00, 0x01], &[0x02, 0x03, 0x04], 1), None);",
          "    assert_eq!(find_fwd(&[0x00, 0x01], &[0x02, 0x00, 0x04], 1), Some(2));",
          "    assert_eq!(find_fwd(&[0x00, 0x01], &[0x01, 0x02, 0x03], 0), Some(0));",
          "    assert_eq!(find_fwd(&[0x00, 0x01], &[0x01, 0x02, 0x03], 1), None);",
          "    assert_eq!(find_fwd(&[0x00, 0x01], &[], 0), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic(expected = \"cannot find with empty needles\")]"
        ],
        "prefix": [
          "{",
          "    let needles: [u8; 0] = [];",
          "    let haystack = [0x02, 0x03, 0x04];",
          "    let at = 0;",
          "    let result = find_fwd(&needles, &haystack, at);",
          "}"
        ],
        "oracle": [
          "    let needles: [u8; 2] = [0x01, 0x02];",
          "    let haystack = [0x02, 0x03, 0x04];",
          "    let at = 0;",
          "    let result = find_fwd(&needles, &haystack, at);",
          "    assert_eq!(result, None);",
          "    let needles: [u8; 2] = [0x04, 0x05];",
          "    let haystack = [0x01, 0x02, 0x03];",
          "    let at = 0;",
          "    let result = find_fwd(&needles, &haystack, at);",
          "    assert_eq!(result, None);",
          "    let needles: [u8; 2] = [0x02, 0x03];",
          "    let haystack = [0x01, 0x02, 0x03];",
          "    let at = 1;",
          "    let result = find_fwd(&needles, &haystack, at);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let needles: [u8; 0] = [];",
          "    let haystack = [0x02, 0x03, 0x04];",
          "    let at = 0;",
          "    let result = find_fwd(&needles, &haystack, at);",
          "    let needles: [u8; 2] = [0x01, 0x02];",
          "    let haystack = [0x02, 0x03, 0x04];",
          "    let at = 0;",
          "    let result = find_fwd(&needles, &haystack, at);",
          "    assert_eq!(result, None);",
          "    let needles: [u8; 2] = [0x04, 0x05];",
          "    let haystack = [0x01, 0x02, 0x03];",
          "    let at = 0;",
          "    let result = find_fwd(&needles, &haystack, at);",
          "    assert_eq!(result, None);",
          "    let needles: [u8; 2] = [0x02, 0x03];",
          "    let haystack = [0x01, 0x02, 0x03];",
          "    let at = 1;",
          "    let result = find_fwd(&needles, &haystack, at);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]