[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = 1; // Minimum valid value",
          "    let non_max_usize = NonMaxUsize::new(value).unwrap();",
          "    let _ = core::fmt::Debug::fmt(&non_max_usize, &mut core::fmt::Formatter::new());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(core::fmt::Debug::fmt(&non_max_usize, &mut core::fmt::Formatter::new()), Ok(()));",
          "    assert_eq!(non_max_usize.get(), 0);",
          "    let value = 2;",
          "    let non_max_usize = NonMaxUsize::new(value).unwrap();",
          "    assert_eq!(core::fmt::Debug::fmt(&non_max_usize, &mut core::fmt::Formatter::new()), Ok(()));",
          "    assert_eq!(non_max_usize.get(), 1);",
          "    let value = usize::MAX;",
          "    let non_max_usize = NonMaxUsize::new(value).unwrap();",
          "    assert_eq!(core::fmt::Debug::fmt(&non_max_usize, &mut core::fmt::Formatter::new()), Ok(()));",
          "    assert_eq!(non_max_usize.get(), usize::MAX - 1);",
          "    let value = 0;",
          "    assert!(NonMaxUsize::new(value).is_none());"
        ],
        "code": [
          "{",
          "    let value = 1; // Minimum valid value",
          "    let non_max_usize = NonMaxUsize::new(value).unwrap();",
          "    let _ = core::fmt::Debug::fmt(&non_max_usize, &mut core::fmt::Formatter::new());",
          "    assert_eq!(core::fmt::Debug::fmt(&non_max_usize, &mut core::fmt::Formatter::new()), Ok(()));",
          "    assert_eq!(non_max_usize.get(), 0);",
          "    let value = 2;",
          "    let non_max_usize = NonMaxUsize::new(value).unwrap();",
          "    assert_eq!(core::fmt::Debug::fmt(&non_max_usize, &mut core::fmt::Formatter::new()), Ok(()));",
          "    assert_eq!(non_max_usize.get(), 1);",
          "    let value = usize::MAX;",
          "    let non_max_usize = NonMaxUsize::new(value).unwrap();",
          "    assert_eq!(core::fmt::Debug::fmt(&non_max_usize, &mut core::fmt::Formatter::new()), Ok(()));",
          "    assert_eq!(non_max_usize.get(), usize::MAX - 1);",
          "    let value = 0;",
          "    assert!(NonMaxUsize::new(value).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = std::usize::MAX / 2; // Mid-range value",
          "    let non_max_usize = NonMaxUsize::new(value).unwrap();",
          "    let _ = core::fmt::Debug::fmt(&non_max_usize, &mut core::fmt::Formatter::new());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(core::fmt::Debug::fmt(&non_max_usize, &mut core::fmt::Formatter::new()), Ok(()));",
          "    assert_eq!(non_max_usize.get(), value - 1);",
          "    assert!(NonMaxUsize::new(1).is_some());",
          "    assert!(NonMaxUsize::new(0).is_none());",
          "    assert!(NonMaxUsize::new(std::usize::MAX).is_none());"
        ],
        "code": [
          "{",
          "    let value = std::usize::MAX / 2; // Mid-range value",
          "    let non_max_usize = NonMaxUsize::new(value).unwrap();",
          "    let _ = core::fmt::Debug::fmt(&non_max_usize, &mut core::fmt::Formatter::new());",
          "    assert_eq!(core::fmt::Debug::fmt(&non_max_usize, &mut core::fmt::Formatter::new()), Ok(()));",
          "    assert_eq!(non_max_usize.get(), value - 1);",
          "    assert!(NonMaxUsize::new(1).is_some());",
          "    assert!(NonMaxUsize::new(0).is_none());",
          "    assert!(NonMaxUsize::new(std::usize::MAX).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = std::usize::MAX - 1; // Maximum valid value",
          "    let non_max_usize = NonMaxUsize::new(value).unwrap();",
          "    let _ = core::fmt::Debug::fmt(&non_max_usize, &mut core::fmt::Formatter::new());",
          "}"
        ],
        "oracle": [
          "    assert!(NonMaxUsize::new(std::usize::MAX - 1).is_some());",
          "    assert_eq!(NonMaxUsize::new(std::usize::MAX - 1).unwrap().get(), std::usize::MAX - 2);",
          "    assert!(NonMaxUsize::new(1).is_some());",
          "    assert_eq!(NonMaxUsize::new(1).unwrap().get(), 0);",
          "    assert!(NonMaxUsize::new(0).is_none());",
          "    assert!(NonMaxUsize::new(std::usize::MAX).is_none());",
          "    assert_eq!(format!(\"{:?}\", NonMaxUsize::new(std::usize::MAX - 1).unwrap()), format!(\"{:?}\", std::usize::MAX - 2));"
        ],
        "code": [
          "{",
          "    let value = std::usize::MAX - 1; // Maximum valid value",
          "    let non_max_usize = NonMaxUsize::new(value).unwrap();",
          "    let _ = core::fmt::Debug::fmt(&non_max_usize, &mut core::fmt::Formatter::new());",
          "    assert!(NonMaxUsize::new(std::usize::MAX - 1).is_some());",
          "    assert_eq!(NonMaxUsize::new(std::usize::MAX - 1).unwrap().get(), std::usize::MAX - 2);",
          "    assert!(NonMaxUsize::new(1).is_some());",
          "    assert_eq!(NonMaxUsize::new(1).unwrap().get(), 0);",
          "    assert!(NonMaxUsize::new(0).is_none());",
          "    assert!(NonMaxUsize::new(std::usize::MAX).is_none());",
          "    assert_eq!(format!(\"{:?}\", NonMaxUsize::new(std::usize::MAX - 1).unwrap()), format!(\"{:?}\", std::usize::MAX - 2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]