[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = next_char('\\u{D7FE}');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some('\\u{D7FF}' + 1));",
          "    assert_eq!(result, Some('\\u{E000}'));",
          "    assert!(result.is_some());",
          "    assert!(result.unwrap() < '\\u{D7FF}');",
          "    assert!(result.unwrap() <= char::MAX);"
        ],
        "code": [
          "{",
          "    let result = next_char('\\u{D7FE}');",
          "    assert_eq!(result, Some('\\u{D7FF}' + 1));",
          "    assert_eq!(result, Some('\\u{E000}'));",
          "    assert!(result.is_some());",
          "    assert!(result.unwrap() < '\\u{D7FF}');",
          "    assert!(result.unwrap() <= char::MAX);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = next_char('\\u{E000}');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some('\\u{E001}'));"
        ],
        "code": [
          "{",
          "    let result = next_char('\\u{E000}');",
          "    assert_eq!(result, Some('\\u{E001}'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = next_char('\\u{0000}');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some('\\u{0001}'));"
        ],
        "code": [
          "{",
          "    let result = next_char('\\u{0000}');",
          "    assert_eq!(result, Some('\\u{0001}'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = next_char('\\u{FFFF}');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some('\\u{10000}'));"
        ],
        "code": [
          "{",
          "    let result = next_char('\\u{FFFF}');",
          "    assert_eq!(result, Some('\\u{10000}'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]