[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct FakeBuildError;",
          "    impl std::error::Error for FakeBuildError {}",
          "",
          "    let nfa_error = FakeBuildError;",
          "    let build_error = BuildError {",
          "        kind: BuildErrorKind::NFA(nfa_error),",
          "    };",
          "",
          "    let result = build_error.source();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(result.as_ref().unwrap().source().is_none(), true);"
        ],
        "code": [
          "{",
          "    struct FakeBuildError;",
          "    impl std::error::Error for FakeBuildError {}",
          "",
          "    let nfa_error = FakeBuildError;",
          "    let build_error = BuildError {",
          "        kind: BuildErrorKind::NFA(nfa_error),",
          "    };",
          "",
          "    let result = build_error.source();",
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(result.as_ref().unwrap().source().is_none(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct AnotherFakeBuildError;",
          "    impl std::error::Error for AnotherFakeBuildError {}",
          "",
          "    let nfa_error = AnotherFakeBuildError;",
          "    let build_error = BuildError {",
          "        kind: BuildErrorKind::NFA(nfa_error),",
          "    };",
          "",
          "    let result = build_error.source();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(&nfa_error));"
        ],
        "code": [
          "{",
          "    struct AnotherFakeBuildError;",
          "    impl std::error::Error for AnotherFakeBuildError {}",
          "",
          "    let nfa_error = AnotherFakeBuildError;",
          "    let build_error = BuildError {",
          "        kind: BuildErrorKind::NFA(nfa_error),",
          "    };",
          "",
          "    let result = build_error.source();",
          "    assert_eq!(result, Some(&nfa_error));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]