[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let nfa = NFA(Arc::new(Inner::default()));",
          "    let pikevm = PikeVM::new(&RegexInfo(Arc::new(RegexInfoI::default())), None, &nfa).unwrap();",
          "    let backtrack = BoundedBacktracker::new(&RegexInfo(Arc::new(RegexInfoI::default())), None, &nfa).unwrap();",
          "    let onepass = OnePass::new(&RegexInfo(Arc::new(RegexInfoI::default())), &nfa);",
          "    let hybrid = Hybrid::new(&RegexInfo(Arc::new(RegexInfoI::default())), None, &nfa, &nfa);",
          "",
          "    let core = Core {",
          "        info: RegexInfo(Arc::new(RegexInfoI::default())),",
          "        pre: None,",
          "        nfa,",
          "        nfarev: None,",
          "        pikevm,",
          "        backtrack,",
          "        onepass,",
          "        hybrid,",
          "        dfa: wrappers::DFA(None),",
          "    };",
          "",
          "    let cache = core.create_cache();",
          "}"
        ],
        "oracle": [
          "    assert!(cache.capmatches.is_match());",
          "    assert_eq!(cache.capmatches.group_info(), &group_info);",
          "    assert!(cache.pikevm.is_some());",
          "    assert!(cache.backtrack.is_some());",
          "    assert!(cache.onepass.is_some());",
          "    assert!(cache.hybrid.is_some());",
          "    assert!(cache.revhybrid.is_none());"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let nfa = NFA(Arc::new(Inner::default()));",
          "    let pikevm = PikeVM::new(&RegexInfo(Arc::new(RegexInfoI::default())), None, &nfa).unwrap();",
          "    let backtrack = BoundedBacktracker::new(&RegexInfo(Arc::new(RegexInfoI::default())), None, &nfa).unwrap();",
          "    let onepass = OnePass::new(&RegexInfo(Arc::new(RegexInfoI::default())), &nfa);",
          "    let hybrid = Hybrid::new(&RegexInfo(Arc::new(RegexInfoI::default())), None, &nfa, &nfa);",
          "",
          "    let core = Core {",
          "        info: RegexInfo(Arc::new(RegexInfoI::default())),",
          "        pre: None,",
          "        nfa,",
          "        nfarev: None,",
          "        pikevm,",
          "        backtrack,",
          "        onepass,",
          "        hybrid,",
          "        dfa: wrappers::DFA(None),",
          "    };",
          "",
          "    let cache = core.create_cache();",
          "    assert!(cache.capmatches.is_match());",
          "    assert_eq!(cache.capmatches.group_info(), &group_info);",
          "    assert!(cache.pikevm.is_some());",
          "    assert!(cache.backtrack.is_some());",
          "    assert!(cache.onepass.is_some());",
          "    assert!(cache.hybrid.is_some());",
          "    assert!(cache.revhybrid.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let nfa = NFA(Arc::new(Inner::default()));",
          "    let pikevm = PikeVM::new(&RegexInfo(Arc::new(RegexInfoI::default())), None, &nfa).unwrap();",
          "    let backtrack = BoundedBacktracker::new(&RegexInfo(Arc::new(RegexInfoI::default())), None, &nfa).unwrap();",
          "    let onepass = OnePass::new(&RegexInfo(Arc::new(RegexInfoI::default())), &nfa);",
          "    let hybrid = Hybrid::none();",
          "",
          "    let core = Core {",
          "        info: RegexInfo(Arc::new(RegexInfoI::default())),",
          "        pre: None,",
          "        nfa,",
          "        nfarev: None,",
          "        pikevm,",
          "        backtrack,",
          "        onepass,",
          "        hybrid,",
          "        dfa: wrappers::DFA(None),",
          "    };",
          "",
          "    let cache = core.create_cache();",
          "}"
        ],
        "oracle": [
          "    let group_info = GroupInfo::default();",
          "    let nfa = NFA(Arc::new(Inner::default()));",
          "    let pikevm = PikeVM::new(&RegexInfo(Arc::new(RegexInfoI::default())), None, &nfa).unwrap();",
          "    let backtrack = BoundedBacktracker::new(&RegexInfo(Arc::new(RegexInfoI::default())), None, &nfa).unwrap();",
          "    let onepass = OnePass::new(&RegexInfo(Arc::new(RegexInfoI::default())), &nfa);",
          "    let hybrid = Hybrid::none();",
          "    ",
          "    let expected_cache = Cache {",
          "    capmatches: Captures::all(group_info.clone()),",
          "    pikevm: pikevm.create_cache(),",
          "    backtrack: backtrack.create_cache(),",
          "    onepass: onepass.create_cache(),",
          "    hybrid: hybrid.create_cache(),",
          "    revhybrid: wrappers::ReverseHybridCache::none(),",
          "    };",
          "    ",
          "    assert_eq!(cache, expected_cache);"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let nfa = NFA(Arc::new(Inner::default()));",
          "    let pikevm = PikeVM::new(&RegexInfo(Arc::new(RegexInfoI::default())), None, &nfa).unwrap();",
          "    let backtrack = BoundedBacktracker::new(&RegexInfo(Arc::new(RegexInfoI::default())), None, &nfa).unwrap();",
          "    let onepass = OnePass::new(&RegexInfo(Arc::new(RegexInfoI::default())), &nfa);",
          "    let hybrid = Hybrid::none();",
          "",
          "    let core = Core {",
          "        info: RegexInfo(Arc::new(RegexInfoI::default())),",
          "        pre: None,",
          "        nfa,",
          "        nfarev: None,",
          "        pikevm,",
          "        backtrack,",
          "        onepass,",
          "        hybrid,",
          "        dfa: wrappers::DFA(None),",
          "    };",
          "",
          "    let cache = core.create_cache();",
          "    let group_info = GroupInfo::default();",
          "    let nfa = NFA(Arc::new(Inner::default()));",
          "    let pikevm = PikeVM::new(&RegexInfo(Arc::new(RegexInfoI::default())), None, &nfa).unwrap();",
          "    let backtrack = BoundedBacktracker::new(&RegexInfo(Arc::new(RegexInfoI::default())), None, &nfa).unwrap();",
          "    let onepass = OnePass::new(&RegexInfo(Arc::new(RegexInfoI::default())), &nfa);",
          "    let hybrid = Hybrid::none();",
          "    ",
          "    let expected_cache = Cache {",
          "    capmatches: Captures::all(group_info.clone()),",
          "    pikevm: pikevm.create_cache(),",
          "    backtrack: backtrack.create_cache(),",
          "    onepass: onepass.create_cache(),",
          "    hybrid: hybrid.create_cache(),",
          "    revhybrid: wrappers::ReverseHybridCache::none(),",
          "    };",
          "    ",
          "    assert_eq!(cache, expected_cache);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo(Arc::new(GroupInfoInner::default()));",
          "    let nfa = NFA(Arc::new(Inner::default()));",
          "    let pikevm = PikeVM::new(&RegexInfo(Arc::new(RegexInfoI::default())), None, &nfa).unwrap();",
          "    let backtrack = BoundedBacktracker::new(&RegexInfo(Arc::new(RegexInfoI::default())), None, &nfa).unwrap();",
          "    let onepass = OnePass::new(&RegexInfo(Arc::new(RegexInfoI::default())), &nfa);",
          "    let hybrid = Hybrid::new(&RegexInfo(Arc::new(RegexInfoI::default())), None, &nfa, &nfa);",
          "",
          "    let core = Core {",
          "        info: RegexInfo(Arc::new(RegexInfoI::default())),",
          "        pre: None,",
          "        nfa,",
          "        nfarev: None,",
          "        pikevm,",
          "        backtrack,",
          "        onepass,",
          "        hybrid,",
          "        dfa: wrappers::DFA(None),",
          "    };",
          "",
          "    let cache = core.create_cache();",
          "}"
        ],
        "oracle": [
          "    let expected_cache = Cache {",
          "    capmatches: Captures::all(core.group_info().clone()),",
          "    pikevm: core.pikevm.create_cache(),",
          "    backtrack: core.backtrack.create_cache(),",
          "    onepass: core.onepass.create_cache(),",
          "    hybrid: core.hybrid.create_cache(),",
          "    revhybrid: wrappers::ReverseHybridCache::none(),",
          "    };",
          "    ",
          "    assert_eq!(cache, expected_cache);"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo(Arc::new(GroupInfoInner::default()));",
          "    let nfa = NFA(Arc::new(Inner::default()));",
          "    let pikevm = PikeVM::new(&RegexInfo(Arc::new(RegexInfoI::default())), None, &nfa).unwrap();",
          "    let backtrack = BoundedBacktracker::new(&RegexInfo(Arc::new(RegexInfoI::default())), None, &nfa).unwrap();",
          "    let onepass = OnePass::new(&RegexInfo(Arc::new(RegexInfoI::default())), &nfa);",
          "    let hybrid = Hybrid::new(&RegexInfo(Arc::new(RegexInfoI::default())), None, &nfa, &nfa);",
          "",
          "    let core = Core {",
          "        info: RegexInfo(Arc::new(RegexInfoI::default())),",
          "        pre: None,",
          "        nfa,",
          "        nfarev: None,",
          "        pikevm,",
          "        backtrack,",
          "        onepass,",
          "        hybrid,",
          "        dfa: wrappers::DFA(None),",
          "    };",
          "",
          "    let cache = core.create_cache();",
          "    let expected_cache = Cache {",
          "    capmatches: Captures::all(core.group_info().clone()),",
          "    pikevm: core.pikevm.create_cache(),",
          "    backtrack: core.backtrack.create_cache(),",
          "    onepass: core.onepass.create_cache(),",
          "    hybrid: core.hybrid.create_cache(),",
          "    revhybrid: wrappers::ReverseHybridCache::none(),",
          "    };",
          "    ",
          "    assert_eq!(cache, expected_cache);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]