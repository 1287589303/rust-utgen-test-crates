[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"sample_pattern\";",
          "    let mut parser = Parser::new(config, pattern);",
          "    ",
          "    let capture_name = \"duplicate_name\";",
          "    let _ = parser.add_capture_name(capture_name);",
          "",
          "    let result = parser.add_capture_name(capture_name);",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"sample_pattern\";",
          "    let mut parser = Parser::new(config, pattern);",
          "    let capture_name = \"duplicate_name\";",
          "    let _ = parser.add_capture_name(capture_name);",
          "    assert_eq!(result, Err(Error::new(ERR_DUPLICATE_CAPTURE_NAME)));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"sample_pattern\";",
          "    let mut parser = Parser::new(config, pattern);",
          "    ",
          "    let capture_name = \"duplicate_name\";",
          "    let _ = parser.add_capture_name(capture_name);",
          "",
          "    let result = parser.add_capture_name(capture_name);",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"sample_pattern\";",
          "    let mut parser = Parser::new(config, pattern);",
          "    let capture_name = \"duplicate_name\";",
          "    let _ = parser.add_capture_name(capture_name);",
          "    assert_eq!(result, Err(Error::new(ERR_DUPLICATE_CAPTURE_NAME)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"sample_pattern\";",
          "    let mut parser = Parser::new(config, pattern);",
          "",
          "    let capture_name_1 = \"duplicate_name\";",
          "    let _ = parser.add_capture_name(capture_name_1);",
          "    ",
          "    let capture_name_2 = \"duplicate_name\"; ",
          "    let result = parser.add_capture_name(capture_name_2);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, ERR_DUPLICATE_CAPTURE_NAME);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"sample_pattern\";",
          "    let mut parser = Parser::new(config, pattern);",
          "",
          "    let capture_name_1 = \"duplicate_name\";",
          "    let _ = parser.add_capture_name(capture_name_1);",
          "    ",
          "    let capture_name_2 = \"duplicate_name\"; ",
          "    let result = parser.add_capture_name(capture_name_2);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, ERR_DUPLICATE_CAPTURE_NAME);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]