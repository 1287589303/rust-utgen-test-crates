[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_bytes = Class::Bytes(ClassBytes::new(vec![",
          "        ClassBytesRange::new(b'A', b'Z'),",
          "    ]));",
          "    class_bytes.case_fold_simple();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_bytes, Class::Bytes(ClassBytes::new(vec![ClassBytesRange::new(b'a', b'z')])));",
          "    assert!(class_bytes.is_ascii());",
          "    assert!(!class_bytes.is_empty());"
        ],
        "code": [
          "{",
          "    let mut class_bytes = Class::Bytes(ClassBytes::new(vec![",
          "        ClassBytesRange::new(b'A', b'Z'),",
          "    ]));",
          "    class_bytes.case_fold_simple();",
          "    assert_eq!(class_bytes, Class::Bytes(ClassBytes::new(vec![ClassBytesRange::new(b'a', b'z')])));",
          "    assert!(class_bytes.is_ascii());",
          "    assert!(!class_bytes.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut class_unicode = Class::Unicode(ClassUnicode::new(vec![",
          "        ClassUnicodeRange::new('A', 'Z'),",
          "    ]));",
          "    class_unicode.case_fold_simple();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_unicode.is_empty(), false);",
          "    assert!(class_unicode.minimum_len().is_none());",
          "    assert!(class_unicode.maximum_len().is_none());",
          "    assert!(class_unicode.literal().is_none());",
          "    assert!(class_unicode.try_case_fold_simple().is_err());"
        ],
        "code": [
          "{",
          "    let mut class_unicode = Class::Unicode(ClassUnicode::new(vec![",
          "        ClassUnicodeRange::new('A', 'Z'),",
          "    ]));",
          "    class_unicode.case_fold_simple();",
          "    assert_eq!(class_unicode.is_empty(), false);",
          "    assert!(class_unicode.minimum_len().is_none());",
          "    assert!(class_unicode.maximum_len().is_none());",
          "    assert!(class_unicode.literal().is_none());",
          "    assert!(class_unicode.try_case_fold_simple().is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]