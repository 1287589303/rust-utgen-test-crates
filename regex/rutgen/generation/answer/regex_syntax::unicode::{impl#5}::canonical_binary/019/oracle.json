[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::Binary(\"cf\");",
          "    let result = query.canonical_binary(\"cf\");",
          "}"
        ],
        "oracle": [
          "    result == Err(Error::PropertyNotFound)",
          "    result.is_err()",
          "    result.unwrap_err() == Error::PropertyNotFound",
          "    result.is_ok() == false",
          "    result.unwrap_err() != Error::PropertyValueNotFound",
          "    result.is_err() && result.unwrap_err() == Error::PropertyNotFound"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::Binary(\"cf\");",
          "    let result = query.canonical_binary(\"cf\");",
          "    result == Err(Error::PropertyNotFound)",
          "    result.is_err()",
          "    result.unwrap_err() == Error::PropertyNotFound",
          "    result.is_ok() == false",
          "    result.unwrap_err() != Error::PropertyValueNotFound",
          "    result.is_err() && result.unwrap_err() == Error::PropertyNotFound",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"any\" };",
          "    let result = query.canonical_binary(\"any\");",
          "}"
        ],
        "oracle": [
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"any\" };",
          "    let result = query.canonical_binary(\"any\");",
          "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"Any\")));",
          "    assert!(result.is_ok());",
          "    assert!(result.unwrap().is::<CanonicalClassQuery>());",
          "    assert_ne!(result.unwrap(), CanonicalClassQuery::Binary(\"dummy\"));",
          "    assert_eq!(symbolic_name_normalize(\"any\"), \"any\".to_string());",
          "    assert_eq!(canonical_gencat(\"any\").unwrap(), Some(\"Any\"));",
          "    assert_eq!(canonical_script(\"any\").is_err(), true);",
          "    assert_eq!(canonical_prop(\"any\").unwrap(), None);",
          "    let result = query.canonical_binary(\"non_existing_property\");",
          "    assert_eq!(result, Err(Error::PropertyNotFound));",
          "    let result = query.canonical_binary(\"sc\");",
          "    assert_eq!(result.is_ok(), false);",
          "    let result = query.canonical_binary(\"cf\");",
          "    assert_eq!(result.is_ok(), false);",
          "    let result = query.canonical_binary(\"lc\");",
          "    assert_eq!(result.is_ok(), false);"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"any\" };",
          "    let result = query.canonical_binary(\"any\");",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"any\" };",
          "    let result = query.canonical_binary(\"any\");",
          "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"Any\")));",
          "    assert!(result.is_ok());",
          "    assert!(result.unwrap().is::<CanonicalClassQuery>());",
          "    assert_ne!(result.unwrap(), CanonicalClassQuery::Binary(\"dummy\"));",
          "    assert_eq!(symbolic_name_normalize(\"any\"), \"any\".to_string());",
          "    assert_eq!(canonical_gencat(\"any\").unwrap(), Some(\"Any\"));",
          "    assert_eq!(canonical_script(\"any\").is_err(), true);",
          "    assert_eq!(canonical_prop(\"any\").unwrap(), None);",
          "    let result = query.canonical_binary(\"non_existing_property\");",
          "    assert_eq!(result, Err(Error::PropertyNotFound));",
          "    let result = query.canonical_binary(\"sc\");",
          "    assert_eq!(result.is_ok(), false);",
          "    let result = query.canonical_binary(\"cf\");",
          "    assert_eq!(result.is_ok(), false);",
          "    let result = query.canonical_binary(\"lc\");",
          "    assert_eq!(result.is_ok(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"assigned\" };",
          "    let result = query.canonical_binary(\"assigned\");",
          "}"
        ],
        "oracle": [
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"assigned\" };",
          "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"Assigned\")));"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"assigned\" };",
          "    let result = query.canonical_binary(\"assigned\");",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"assigned\" };",
          "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"Assigned\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]