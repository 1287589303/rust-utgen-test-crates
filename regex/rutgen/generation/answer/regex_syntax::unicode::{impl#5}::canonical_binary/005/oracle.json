[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let class_query = ClassQuery::Binary(\"SomeBinaryProperty\");",
          "    let result = class_query.canonical_binary(\"SomeBinaryProperty\");",
          "}"
        ],
        "oracle": [
          "    let class_query = ClassQuery::Binary(\"SomeBinaryProperty\");",
          "    let result = class_query.canonical_binary(\"ValidBinaryName\");",
          "    assert_eq!(result, Ok(CanonicalClassQuery::Binary(\"ExpectedCanonicalValue\")));",
          "    let result = class_query.canonical_binary(\"General_Category\");",
          "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"ExpectedGeneralCategory\")));",
          "    let result = class_query.canonical_binary(\"Script\");",
          "    assert_eq!(result, Ok(CanonicalClassQuery::Script(\"ExpectedScriptValue\")));"
        ],
        "code": [
          "{",
          "    let class_query = ClassQuery::Binary(\"SomeBinaryProperty\");",
          "    let result = class_query.canonical_binary(\"SomeBinaryProperty\");",
          "    let class_query = ClassQuery::Binary(\"SomeBinaryProperty\");",
          "    let result = class_query.canonical_binary(\"ValidBinaryName\");",
          "    assert_eq!(result, Ok(CanonicalClassQuery::Binary(\"ExpectedCanonicalValue\")));",
          "    let result = class_query.canonical_binary(\"General_Category\");",
          "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"ExpectedGeneralCategory\")));",
          "    let result = class_query.canonical_binary(\"Script\");",
          "    assert_eq!(result, Ok(CanonicalClassQuery::Script(\"ExpectedScriptValue\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let class_query = ClassQuery::Binary(\"SomeGeneralCategory\");",
          "    let result = class_query.canonical_binary(\"SomeGeneralCategory\");",
          "}"
        ],
        "oracle": [
          "    let class_query = ClassQuery::Binary(\"SomeGeneralCategory\");",
          "    let result = class_query.canonical_binary(\"SomeGeneralCategory\");",
          "    assert!(result.is_ok());",
          "    if let Ok(canonical_class) = result {",
          "    assert_eq!(canonical_class, CanonicalClassQuery::GeneralCategory(\"SomeGeneralCategory\"));",
          "    }"
        ],
        "code": [
          "{",
          "    let class_query = ClassQuery::Binary(\"SomeGeneralCategory\");",
          "    let result = class_query.canonical_binary(\"SomeGeneralCategory\");",
          "    let class_query = ClassQuery::Binary(\"SomeGeneralCategory\");",
          "    let result = class_query.canonical_binary(\"SomeGeneralCategory\");",
          "    assert!(result.is_ok());",
          "    if let Ok(canonical_class) = result {",
          "    assert_eq!(canonical_class, CanonicalClassQuery::GeneralCategory(\"SomeGeneralCategory\"));",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let class_query = ClassQuery::Binary(\"SomeScript\");",
          "    let result = class_query.canonical_binary(\"SomeScript\");",
          "}"
        ],
        "oracle": [
          "    let class_query = ClassQuery::Binary(\"SomeScript\");",
          "    let result = class_query.canonical_binary(\"SomeScript\");",
          "    assert_eq!(result, Ok(CanonicalClassQuery::Script(canon)));",
          "    assert!(norm != \"cf\");",
          "    assert!(norm != \"sc\");",
          "    assert!(norm != \"lc\");",
          "    assert!(canonical_prop(&norm).is_ok());",
          "    assert!(canonical_prop(&norm).unwrap().is_some());",
          "    assert!(canonical_gencat(&norm).is_ok());",
          "    assert!(canonical_gencat(&norm).unwrap().is_some());",
          "    assert!(canonical_script(&norm).is_ok());",
          "    assert!(canonical_script(&norm).unwrap().is_some());"
        ],
        "code": [
          "{",
          "    let class_query = ClassQuery::Binary(\"SomeScript\");",
          "    let result = class_query.canonical_binary(\"SomeScript\");",
          "    let class_query = ClassQuery::Binary(\"SomeScript\");",
          "    let result = class_query.canonical_binary(\"SomeScript\");",
          "    assert_eq!(result, Ok(CanonicalClassQuery::Script(canon)));",
          "    assert!(norm != \"cf\");",
          "    assert!(norm != \"sc\");",
          "    assert!(norm != \"lc\");",
          "    assert!(canonical_prop(&norm).is_ok());",
          "    assert!(canonical_prop(&norm).unwrap().is_some());",
          "    assert!(canonical_gencat(&norm).is_ok());",
          "    assert!(canonical_gencat(&norm).unwrap().is_some());",
          "    assert!(canonical_script(&norm).is_ok());",
          "    assert!(canonical_script(&norm).unwrap().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]