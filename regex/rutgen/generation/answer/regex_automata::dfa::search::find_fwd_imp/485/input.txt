haystack: non-empty array of bytes; span: {start: 0, end: haystack.len()}; pre: Some(Prefilter); pre.find: Some(Span{start: 0, end: haystack.len()}); universal_start: false; at: any value < haystack.len(); dfa.is_special_state(sid): true; dfa.is_start_state(sid): false; dfa.is_match_state(sid): false; dfa.is_accel_state(sid): true; valid range for at ensuring it can be incremented up to input.end without exceeding it; valid state transitions in DFA based on haystack content.
