[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let create_fn: Box<dyn Fn() -> pikevm::Cache + Send + Sync + UnwindSafe + RefUnwindSafe> = Box::new(|| pikevm::Cache::new());",
          "    let pool: Pool<pikevm::Cache, _> = Pool::new(create_fn);",
          "}"
        ],
        "oracle": [
          "    let create_fn: Box<dyn Fn() -> pikevm::Cache + Send + Sync + UnwindSafe + RefUnwindSafe> = Box::new(|| pikevm::Cache::new());",
          "    let pool: Pool<pikevm::Cache, _> = Pool::new(create_fn);",
          "    assert!(pool.stack.lock().unwrap().is_empty());",
          "    assert_eq!(std::mem::size_of_val(&pool.create), std::mem::size_of::<Box<dyn Fn() -> pikevm::Cache + Send + Sync + UnwindSafe + RefUnwindSafe>>());"
        ],
        "code": [
          "{",
          "    let create_fn: Box<dyn Fn() -> pikevm::Cache + Send + Sync + UnwindSafe + RefUnwindSafe> = Box::new(|| pikevm::Cache::new());",
          "    let pool: Pool<pikevm::Cache, _> = Pool::new(create_fn);",
          "    let create_fn: Box<dyn Fn() -> pikevm::Cache + Send + Sync + UnwindSafe + RefUnwindSafe> = Box::new(|| pikevm::Cache::new());",
          "    let pool: Pool<pikevm::Cache, _> = Pool::new(create_fn);",
          "    assert!(pool.stack.lock().unwrap().is_empty());",
          "    assert_eq!(std::mem::size_of_val(&pool.create), std::mem::size_of::<Box<dyn Fn() -> pikevm::Cache + Send + Sync + UnwindSafe + RefUnwindSafe>>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let create_fn: Box<dyn Fn() -> pikevm::Cache + Send + Sync + UnwindSafe + RefUnwindSafe> = Box::new(|| pikevm::Cache::new());",
          "    let pool: Pool<pikevm::Cache, _> = Pool::new(create_fn);",
          "    let mut stack = pool.stack.lock().unwrap();",
          "    assert!(stack.is_empty());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pool.stack.lock().unwrap().len(), 0);",
          "    assert_eq!(pool.create as *const _, create_fn as *const _);",
          "    assert!(pool.create.is_safe());",
          "    assert!(pool.create.is_send());",
          "    assert!(pool.create.is_sync());"
        ],
        "code": [
          "{",
          "    let create_fn: Box<dyn Fn() -> pikevm::Cache + Send + Sync + UnwindSafe + RefUnwindSafe> = Box::new(|| pikevm::Cache::new());",
          "    let pool: Pool<pikevm::Cache, _> = Pool::new(create_fn);",
          "    let mut stack = pool.stack.lock().unwrap();",
          "    assert!(stack.is_empty());",
          "    assert_eq!(pool.stack.lock().unwrap().len(), 0);",
          "    assert_eq!(pool.create as *const _, create_fn as *const _);",
          "    assert!(pool.create.is_safe());",
          "    assert!(pool.create.is_send());",
          "    assert!(pool.create.is_sync());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let create_fn: Box<dyn Fn() -> pikevm::Cache + Send + Sync + UnwindSafe + RefUnwindSafe> = Box::new(|| pikevm::Cache::new());",
          "    let pool: Pool<pikevm::Cache, _> = Pool::new(create_fn);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pool.stack.lock().unwrap().len(), 0);",
          "    assert!(std::mem::size_of_val(&pool.create) > 0);",
          "    assert!(pool.create.is::<Box<dyn Fn() -> pikevm::Cache + Send + Sync + UnwindSafe + RefUnwindSafe>>());",
          "    assert!(pool.stack.lock().unwrap().is_empty());",
          "    assert!(pool.create().is_instance_of::<pikevm::Cache>());"
        ],
        "code": [
          "{",
          "    let create_fn: Box<dyn Fn() -> pikevm::Cache + Send + Sync + UnwindSafe + RefUnwindSafe> = Box::new(|| pikevm::Cache::new());",
          "    let pool: Pool<pikevm::Cache, _> = Pool::new(create_fn);",
          "    assert_eq!(pool.stack.lock().unwrap().len(), 0);",
          "    assert!(std::mem::size_of_val(&pool.create) > 0);",
          "    assert!(pool.create.is::<Box<dyn Fn() -> pikevm::Cache + Send + Sync + UnwindSafe + RefUnwindSafe>>());",
          "    assert!(pool.stack.lock().unwrap().is_empty());",
          "    assert!(pool.create().is_instance_of::<pikevm::Cache>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]