[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut parser_builder = ParserBuilder::new();",
          "    parser_builder.unicode(true);",
          "}"
        ],
        "oracle": [
          "    parser_builder.unicode(true); // Test enabling Unicode flag",
          "    parser_builder.unicode(false); // Test disabling Unicode flag",
          "    parser_builder.unicode(true).unicode(false); // Test chaining calls",
          "    parser_builder.unicode(false).unicode(true); // Test chaining calls in reverse order"
        ],
        "code": [
          "{",
          "    let mut parser_builder = ParserBuilder::new();",
          "    parser_builder.unicode(true);",
          "    parser_builder.unicode(true); // Test enabling Unicode flag",
          "    parser_builder.unicode(false); // Test disabling Unicode flag",
          "    parser_builder.unicode(true).unicode(false); // Test chaining calls",
          "    parser_builder.unicode(false).unicode(true); // Test chaining calls in reverse order",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut parser_builder = ParserBuilder::new();",
          "    parser_builder.unicode(false);",
          "}"
        ],
        "oracle": [
          "    parser_builder.unicode(false) == &mut parser_builder",
          "    parser_builder.hir.flags.unicode == Some(false)",
          "    parser_builder.unicode(true).unicode(true) == &mut parser_builder",
          "    parser_builder.hir.flags.unicode == None",
          "    parser_builder.unicode(false).unicode(false) == &mut parser_builder",
          "    parser_builder.hir.flags.unicode == Some(false)",
          "    parser_builder.unicode(true).unicode(false) == &mut parser_builder",
          "    parser_builder.hir.flags.unicode == Some(false)",
          "    parser_builder.unicode(false).unicode(true) == &mut parser_builder",
          "    parser_builder.hir.flags.unicode == None"
        ],
        "code": [
          "{",
          "    let mut parser_builder = ParserBuilder::new();",
          "    parser_builder.unicode(false);",
          "    parser_builder.unicode(false) == &mut parser_builder",
          "    parser_builder.hir.flags.unicode == Some(false)",
          "    parser_builder.unicode(true).unicode(true) == &mut parser_builder",
          "    parser_builder.hir.flags.unicode == None",
          "    parser_builder.unicode(false).unicode(false) == &mut parser_builder",
          "    parser_builder.hir.flags.unicode == Some(false)",
          "    parser_builder.unicode(true).unicode(false) == &mut parser_builder",
          "    parser_builder.hir.flags.unicode == Some(false)",
          "    parser_builder.unicode(false).unicode(true) == &mut parser_builder",
          "    parser_builder.hir.flags.unicode == None",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]