[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\\";",
          "    let mut union = vec![];",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('\\\\')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let _ = parser.parse_class_range(&mut union);",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\\";",
          "    let mut union = vec![];",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('\\\\')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_class_range(&mut union);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, ERR_ESCAPE_UNRECOGNIZED);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\\";",
          "    let mut union = vec![];",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('\\\\')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let _ = parser.parse_class_range(&mut union);",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\\";",
          "    let mut union = vec![];",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('\\\\')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_class_range(&mut union);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, ERR_ESCAPE_UNRECOGNIZED);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"[a-z\";",
          "    let mut union = vec![];",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('[')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let _ = parser.parse_class_range(&mut union);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.parse_class_range(&mut union), Err(Error::new(ERR_CLASS_UNCLOSED_AFTER_ITEM)));",
          "    assert_eq!(union.len(), 0);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"[a-z\";",
          "    let mut union = vec![];",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('[')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let _ = parser.parse_class_range(&mut union);",
          "    assert_eq!(parser.parse_class_range(&mut union), Err(Error::new(ERR_CLASS_UNCLOSED_AFTER_ITEM)));",
          "    assert_eq!(union.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"z-a\";",
          "    let mut union = vec![];",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('z')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let _ = parser.parse_class_range(&mut union);",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"z-a\";",
          "    let mut union = vec![];",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('z')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_class_range(&mut union);",
          "    assert_eq!(result, Err(Error::new(ERR_CLASS_INVALID_RANGE)));",
          "    let expected_union: Vec<hir::ClassRange> = vec![];",
          "    assert_eq!(union, expected_union);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"z-a\";",
          "    let mut union = vec![];",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('z')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let _ = parser.parse_class_range(&mut union);",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"z-a\";",
          "    let mut union = vec![];",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('z')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_class_range(&mut union);",
          "    assert_eq!(result, Err(Error::new(ERR_CLASS_INVALID_RANGE)));",
          "    let expected_union: Vec<hir::ClassRange> = vec![];",
          "    assert_eq!(union, expected_union);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"a-]\";",
          "    let mut union = vec![];",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('a')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let _ = parser.parse_class_range(&mut union);",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"a-]\";",
          "    let mut union = vec![];",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('a')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_class_range(&mut union);",
          "    assert_eq!(result, Err(Error::new(ERR_CLASS_UNCLOSED_AFTER_ITEM)));",
          "    assert!(union.is_empty());"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"a-]\";",
          "    let mut union = vec![];",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('a')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let _ = parser.parse_class_range(&mut union);",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"a-]\";",
          "    let mut union = vec![];",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('a')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_class_range(&mut union);",
          "    assert_eq!(result, Err(Error::new(ERR_CLASS_UNCLOSED_AFTER_ITEM)));",
          "    assert!(union.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"[a-z][A-Z]\";",
          "    let mut union = vec![];",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('[')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let _ = parser.parse_class_range(&mut union);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.parse_class_range(&mut union), Err(Error::new(ERR_CLASS_UNCLOSED_AFTER_ITEM)));",
          "    assert_eq!(parser.parse_class_range(&mut union), Err(Error::new(ERR_CLASS_UNCLOSED_AFTER_DASH)));",
          "    assert_eq!(parser.parse_class_range(&mut union), Err(Error::new(ERR_CLASS_INVALID_RANGE)));",
          "    assert_eq!(parser.parse_class_range(&mut union).is_ok(), false);",
          "    assert!(union.is_empty());"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"[a-z][A-Z]\";",
          "    let mut union = vec![];",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('[')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let _ = parser.parse_class_range(&mut union);",
          "    assert_eq!(parser.parse_class_range(&mut union), Err(Error::new(ERR_CLASS_UNCLOSED_AFTER_ITEM)));",
          "    assert_eq!(parser.parse_class_range(&mut union), Err(Error::new(ERR_CLASS_UNCLOSED_AFTER_DASH)));",
          "    assert_eq!(parser.parse_class_range(&mut union), Err(Error::new(ERR_CLASS_INVALID_RANGE)));",
          "    assert_eq!(parser.parse_class_range(&mut union).is_ok(), false);",
          "    assert!(union.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]