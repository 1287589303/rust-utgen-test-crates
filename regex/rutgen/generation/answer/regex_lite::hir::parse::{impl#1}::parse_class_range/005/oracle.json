[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags::default();",
          "    let config = Config { nest_limit: 10, flags };",
          "    let pattern = \"a]\"; // single character followed by a closing bracket",
          "    let mut union = Vec::new();",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('a')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class_range(&mut union);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.parse_class_item(), Ok(Hir::char('a')));",
          "    assert!(!parser.is_done());",
          "    assert_eq!(parser.char(), Some('-'));",
          "    assert_eq!(parser.peek_space(), Some(']'));",
          "    assert!(into_class_item_ranges(prim1).is_err());"
        ],
        "code": [
          "{",
          "    let flags = Flags::default();",
          "    let config = Config { nest_limit: 10, flags };",
          "    let pattern = \"a]\"; // single character followed by a closing bracket",
          "    let mut union = Vec::new();",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('a')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class_range(&mut union);",
          "    assert_eq!(parser.parse_class_item(), Ok(Hir::char('a')));",
          "    assert!(!parser.is_done());",
          "    assert_eq!(parser.char(), Some('-'));",
          "    assert_eq!(parser.peek_space(), Some(']'));",
          "    assert!(into_class_item_ranges(prim1).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags::default();",
          "    let config = Config { nest_limit: 10, flags };",
          "    let pattern = \"a \"; // single character followed by a space",
          "    let mut union = Vec::new();",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('a')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class_range(&mut union);",
          "}"
        ],
        "oracle": [
          "    let flags = Flags::default();",
          "    let config = Config { nest_limit: 10, flags };",
          "    let pattern = \"a \";",
          "    let mut union = Vec::new();",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('-')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(flags),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_class_range(&mut union);",
          "    assert_eq!(result.unwrap_err().msg, ERR_CLASS_UNCLOSED_AFTER_DASH);",
          "    ",
          "    let flags = Flags::default();",
          "    let config = Config { nest_limit: 10, flags };",
          "    let pattern = \"a \";",
          "    let mut union = Vec::new();",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('a')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(flags),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class_range(&mut union);",
          "    assert!(!union.is_empty());",
          "    assert!(union.len() == 1);",
          "    assert_eq!(union[0].start, 'a');",
          "    assert_eq!(union[0].end, 'a');",
          "    ",
          "    let flags = Flags::default();",
          "    let config = Config { nest_limit: 10, flags };",
          "    let pattern = \"a-\";",
          "    let mut union = Vec::new();",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('-')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(flags),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_class_range(&mut union);",
          "    assert_eq!(result.unwrap_err().msg, ERR_CLASS_UNCLOSED_AFTER_DASH);",
          "    ",
          "    let flags = Flags::default();",
          "    let config = Config { nest_limit: 10, flags };",
          "    let pattern = \"x-y\";",
          "    let mut union = Vec::new();",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('-')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(flags),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_class_range(&mut union);",
          "    assert_eq!(result.unwrap_err().msg, ERR_CLASS_INVALID_RANGE);",
          "    assert!(union.is_empty());"
        ],
        "code": [
          "{",
          "    let flags = Flags::default();",
          "    let config = Config { nest_limit: 10, flags };",
          "    let pattern = \"a \"; // single character followed by a space",
          "    let mut union = Vec::new();",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('a')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class_range(&mut union);",
          "    let flags = Flags::default();",
          "    let config = Config { nest_limit: 10, flags };",
          "    let pattern = \"a \";",
          "    let mut union = Vec::new();",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('-')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(flags),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_class_range(&mut union);",
          "    assert_eq!(result.unwrap_err().msg, ERR_CLASS_UNCLOSED_AFTER_DASH);",
          "    ",
          "    let flags = Flags::default();",
          "    let config = Config { nest_limit: 10, flags };",
          "    let pattern = \"a \";",
          "    let mut union = Vec::new();",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('a')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(flags),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class_range(&mut union);",
          "    assert!(!union.is_empty());",
          "    assert!(union.len() == 1);",
          "    assert_eq!(union[0].start, 'a');",
          "    assert_eq!(union[0].end, 'a');",
          "    ",
          "    let flags = Flags::default();",
          "    let config = Config { nest_limit: 10, flags };",
          "    let pattern = \"a-\";",
          "    let mut union = Vec::new();",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('-')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(flags),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_class_range(&mut union);",
          "    assert_eq!(result.unwrap_err().msg, ERR_CLASS_UNCLOSED_AFTER_DASH);",
          "    ",
          "    let flags = Flags::default();",
          "    let config = Config { nest_limit: 10, flags };",
          "    let pattern = \"x-y\";",
          "    let mut union = Vec::new();",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('-')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(flags),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_class_range(&mut union);",
          "    assert_eq!(result.unwrap_err().msg, ERR_CLASS_INVALID_RANGE);",
          "    assert!(union.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags::default();",
          "    let config = Config { nest_limit: 10, flags };",
          "    let pattern = \"b-c\"; // invalid range where start is greater than end",
          "    let mut union = Vec::new();",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('b')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class_range(&mut union);",
          "}"
        ],
        "oracle": [
          "    Err::new(ERR_CLASS_INVALID_RANGE)",
          "    union.len() == 0",
          "    parser.char.get() == Some('-')",
          "    parser.peek_space() == Some(']')",
          "    parser.pos.get() == 0",
          "    parser.capture_index.get() == 0",
          "    parser.depth.get() == 0",
          "    parser.flags.borrow().case_insensitive == false",
          "    parser.flags.borrow().multi_line == false",
          "    parser.flags.borrow().dot_matches_new_line == false"
        ],
        "code": [
          "{",
          "    let flags = Flags::default();",
          "    let config = Config { nest_limit: 10, flags };",
          "    let pattern = \"b-c\"; // invalid range where start is greater than end",
          "    let mut union = Vec::new();",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('b')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class_range(&mut union);",
          "    Err::new(ERR_CLASS_INVALID_RANGE)",
          "    union.len() == 0",
          "    parser.char.get() == Some('-')",
          "    parser.peek_space() == Some(']')",
          "    parser.pos.get() == 0",
          "    parser.capture_index.get() == 0",
          "    parser.depth.get() == 0",
          "    parser.flags.borrow().case_insensitive == false",
          "    parser.flags.borrow().multi_line == false",
          "    parser.flags.borrow().dot_matches_new_line == false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags::default();",
          "    let config = Config { nest_limit: 10, flags };",
          "    let pattern = \"[]\"; // empty character class",
          "    let mut union = Vec::new();",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some(']')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class_range(&mut union);",
          "}"
        ],
        "oracle": [
          "    let flags = Flags::default();",
          "    let config = Config { nest_limit: 10, flags };",
          "    let pattern = \"[]\";",
          "    let mut union = Vec::new();",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some(']')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(flags),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_class_range(&mut union);",
          "    assert!(result.is_err() && result.unwrap_err().msg == ERR_CLASS_INVALID_RANGE_ITEM);",
          "    assert!(union.is_empty());"
        ],
        "code": [
          "{",
          "    let flags = Flags::default();",
          "    let config = Config { nest_limit: 10, flags };",
          "    let pattern = \"[]\"; // empty character class",
          "    let mut union = Vec::new();",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some(']')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class_range(&mut union);",
          "    let flags = Flags::default();",
          "    let config = Config { nest_limit: 10, flags };",
          "    let pattern = \"[]\";",
          "    let mut union = Vec::new();",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some(']')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(flags),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_class_range(&mut union);",
          "    assert!(result.is_err() && result.unwrap_err().msg == ERR_CLASS_INVALID_RANGE_ITEM);",
          "    assert!(union.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags::default();",
          "    let config = Config { nest_limit: 10, flags };",
          "    let pattern = \"a-\"; // single character followed by '-'",
          "    let mut union = Vec::new();",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('a')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class_range(&mut union);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(union.len(), 1);",
          "    assert_eq!(union[0].start, 'a');",
          "    assert_eq!(union[0].end, 'a');",
          "    assert!(matches!(_ , Err(Error { msg: ERR_CLASS_UNCLOSED_AFTER_ITEM })));",
          "    assert_eq!(parser.pos.get(), 2);",
          "    assert_eq!(parser.char.get(), None);",
          "    assert!(parser.is_done());"
        ],
        "code": [
          "{",
          "    let flags = Flags::default();",
          "    let config = Config { nest_limit: 10, flags };",
          "    let pattern = \"a-\"; // single character followed by '-'",
          "    let mut union = Vec::new();",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('a')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class_range(&mut union);",
          "    assert_eq!(union.len(), 1);",
          "    assert_eq!(union[0].start, 'a');",
          "    assert_eq!(union[0].end, 'a');",
          "    assert!(matches!(_ , Err(Error { msg: ERR_CLASS_UNCLOSED_AFTER_ITEM })));",
          "    assert_eq!(parser.pos.get(), 2);",
          "    assert_eq!(parser.char.get(), None);",
          "    assert!(parser.is_done());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]