[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"a-z\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('a')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let mut union: Vec<hir::ClassRange> = vec![];",
          "    let _result = parser.parse_class_range(&mut union);",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"a-z\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('a')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let mut union: Vec<hir::ClassRange> = vec![];",
          "    let _result = parser.parse_class_range(&mut union);",
          "    assert_eq!(_result, Ok(()));",
          "    assert!(!parser.is_done());",
          "    assert_eq!(parser.char.get(), Some('-'));",
          "    assert_eq!(parser.peek_space(), Some(' '));",
          "    assert!(parser.bump_and_bump_space());",
          "    assert_eq!(union.len(), 1);",
          "    assert_eq!(union[0].start, 'a');",
          "    assert_eq!(union[0].end, 'z');"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"a-z\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('a')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let mut union: Vec<hir::ClassRange> = vec![];",
          "    let _result = parser.parse_class_range(&mut union);",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"a-z\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('a')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let mut union: Vec<hir::ClassRange> = vec![];",
          "    let _result = parser.parse_class_range(&mut union);",
          "    assert_eq!(_result, Ok(()));",
          "    assert!(!parser.is_done());",
          "    assert_eq!(parser.char.get(), Some('-'));",
          "    assert_eq!(parser.peek_space(), Some(' '));",
          "    assert!(parser.bump_and_bump_space());",
          "    assert_eq!(union.len(), 1);",
          "    assert_eq!(union[0].start, 'a');",
          "    assert_eq!(union[0].end, 'z');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"a-a\"; // Both items are the same",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('a')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let mut union: Vec<hir::ClassRange> = vec![];",
          "    let _result = parser.parse_class_range(&mut union);",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"a-a\";",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('a')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let mut union: Vec<hir::ClassRange> = vec![];",
          "    let result = parser.parse_class_range(&mut union);",
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"a-a\"; // Both items are the same",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('a')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let mut union: Vec<hir::ClassRange> = vec![];",
          "    let _result = parser.parse_class_range(&mut union);",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"a-a\";",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('a')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let mut union: Vec<hir::ClassRange> = vec![];",
          "    let result = parser.parse_class_range(&mut union);",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"a-b\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('a')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let mut union: Vec<hir::ClassRange> = vec![];",
          "    let _result = parser.parse_class_range(&mut union);",
          "}"
        ],
        "oracle": [
          "    parser.bump_space();",
          "    assert_eq!(parser.char(), Some('-'));",
          "    assert!(parser.peek_space().is_none());",
          "    assert!(parser.bump_and_bump_space());",
          "    assert!(parser.parse_class_item().is_ok());",
          "    assert!(into_class_item_range(prim1).is_ok());",
          "    assert!(into_class_item_range(prim2).is_ok());",
          "    assert!(range.start <= range.end);",
          "    assert_eq!(_result, Ok(()));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"a-b\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('a')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let mut union: Vec<hir::ClassRange> = vec![];",
          "    let _result = parser.parse_class_range(&mut union);",
          "    parser.bump_space();",
          "    assert_eq!(parser.char(), Some('-'));",
          "    assert!(parser.peek_space().is_none());",
          "    assert!(parser.bump_and_bump_space());",
          "    assert!(parser.parse_class_item().is_ok());",
          "    assert!(into_class_item_range(prim1).is_ok());",
          "    assert!(into_class_item_range(prim2).is_ok());",
          "    assert!(range.start <= range.end);",
          "    assert_eq!(_result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]