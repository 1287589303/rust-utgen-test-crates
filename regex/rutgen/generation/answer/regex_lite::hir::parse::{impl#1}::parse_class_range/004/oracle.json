[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"a\";",
          "    let union: Vec<hir::ClassRange> = vec![];",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('a')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    parser.parse_class_range(&mut union).unwrap();",
          "}"
        ],
        "oracle": [
          "    union.clear();",
          "    let prim1 = parser.parse_class_item().unwrap();",
          "    assert!(parser.is_done() == false);",
          "    assert!(parser.char() != '-');",
          "    assert!(into_class_item_ranges(prim1).is_ok());",
          "    assert_eq!(parser.parse_class_range(&mut union).unwrap(), Ok(()));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"a\";",
          "    let union: Vec<hir::ClassRange> = vec![];",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('a')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    parser.parse_class_range(&mut union).unwrap();",
          "    union.clear();",
          "    let prim1 = parser.parse_class_item().unwrap();",
          "    assert!(parser.is_done() == false);",
          "    assert!(parser.char() != '-');",
          "    assert!(into_class_item_ranges(prim1).is_ok());",
          "    assert_eq!(parser.parse_class_range(&mut union).unwrap(), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"a-b\";",
          "    let union: Vec<hir::ClassRange> = vec![];",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('a')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    parser.parse_class_range(&mut union).unwrap();",
          "}"
        ],
        "oracle": [
          "    parser.parse_class_range(&mut union).unwrap() == Ok(());",
          "    self.is_done() == false;",
          "    self.char() != '-';",
          "    self.parse_class_item() == Ok(prim1);",
          "    into_class_item_ranges(prim1) == Ok(some_ranges);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"a-b\";",
          "    let union: Vec<hir::ClassRange> = vec![];",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('a')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    parser.parse_class_range(&mut union).unwrap();",
          "    parser.parse_class_range(&mut union).unwrap() == Ok(());",
          "    self.is_done() == false;",
          "    self.char() != '-';",
          "    self.parse_class_item() == Ok(prim1);",
          "    into_class_item_ranges(prim1) == Ok(some_ranges);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"a c\";",
          "    let union: Vec<hir::ClassRange> = vec![];",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('a')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    parser.parse_class_range(&mut union).unwrap();",
          "}"
        ],
        "oracle": [
          "    parser.parse_class_item().is_ok();",
          "    !parser.is_done();",
          "    parser.char() != '-';",
          "    into_class_item_ranges(prim1).is_ok();",
          "    parser.parse_class_range(&mut union).unwrap().is_ok();"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"a c\";",
          "    let union: Vec<hir::ClassRange> = vec![];",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('a')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    parser.parse_class_range(&mut union).unwrap();",
          "    parser.parse_class_item().is_ok();",
          "    !parser.is_done();",
          "    parser.char() != '-';",
          "    into_class_item_ranges(prim1).is_ok();",
          "    parser.parse_class_range(&mut union).unwrap().is_ok();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]