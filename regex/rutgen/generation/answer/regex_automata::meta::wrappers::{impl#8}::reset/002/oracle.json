[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: NFA::default(),",
          "        table: vec![Transition::default(); 512],",
          "        starts: vec![StateID::default()],",
          "        min_match_id: StateID::default(),",
          "        classes: ByteClasses::default(),",
          "        alphabet_len: 256,",
          "        stride2: 9,",
          "        pateps_offset: 0,",
          "        explicit_slot_start: 2,",
          "    };",
          "",
          "    #[cfg(feature = \"dfa-onepass\")]",
          "    let one_pass_engine = OnePassEngine(Some(onepass::DFA::default()));",
          "    #[cfg(not(feature = \"dfa-onepass\"))]",
          "    let one_pass_engine = OnePassEngine(None);",
          "",
          "    let mut one_pass = OnePass(Some(one_pass_engine));",
          "    let mut one_pass_cache = OnePassCache::none();",
          "",
          "    one_pass_cache.reset(&one_pass);",
          "}"
        ],
        "oracle": [
          "    let mut one_pass_cache = OnePassCache::none();",
          "    let some_engine = OnePassEngine(Some(onepass::DFA::default()));",
          "    let mut one_pass = OnePass(Some(some_engine));",
          "    one_pass_cache.reset(&one_pass);",
          "    assert!(one_pass_cache.memory_usage() > 0);",
          "    assert!(one_pass_cache.0.is_some());",
          "    #[cfg(feature = \"dfa-onepass\")] assert!(one_pass_cache.0.as_ref().unwrap().memory_usage() > 0);",
          "    assert_eq!(one_pass_cache.explicit_slot_len, 0);"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: NFA::default(),",
          "        table: vec![Transition::default(); 512],",
          "        starts: vec![StateID::default()],",
          "        min_match_id: StateID::default(),",
          "        classes: ByteClasses::default(),",
          "        alphabet_len: 256,",
          "        stride2: 9,",
          "        pateps_offset: 0,",
          "        explicit_slot_start: 2,",
          "    };",
          "",
          "    #[cfg(feature = \"dfa-onepass\")]",
          "    let one_pass_engine = OnePassEngine(Some(onepass::DFA::default()));",
          "    #[cfg(not(feature = \"dfa-onepass\"))]",
          "    let one_pass_engine = OnePassEngine(None);",
          "",
          "    let mut one_pass = OnePass(Some(one_pass_engine));",
          "    let mut one_pass_cache = OnePassCache::none();",
          "",
          "    one_pass_cache.reset(&one_pass);",
          "    let mut one_pass_cache = OnePassCache::none();",
          "    let some_engine = OnePassEngine(Some(onepass::DFA::default()));",
          "    let mut one_pass = OnePass(Some(some_engine));",
          "    one_pass_cache.reset(&one_pass);",
          "    assert!(one_pass_cache.memory_usage() > 0);",
          "    assert!(one_pass_cache.0.is_some());",
          "    #[cfg(feature = \"dfa-onepass\")] assert!(one_pass_cache.0.as_ref().unwrap().memory_usage() > 0);",
          "    assert_eq!(one_pass_cache.explicit_slot_len, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut one_pass_cache = OnePassCache::none();",
          "    let one_pass = OnePass(None);",
          "    one_pass_cache.reset(&one_pass);",
          "}"
        ],
        "oracle": [
          "    let mut one_pass_cache = OnePassCache::none();",
          "    let one_pass = OnePass(Some(OnePassEngine(...)));",
          "    one_pass_cache.reset(&one_pass);",
          "    assert!(one_pass_cache.0.is_some());",
          "    assert!(one_pass_cache.memory_usage() > 0);",
          "    assert_eq!(one_pass_cache.explicit_slot_len, expected_length);",
          "    assert_eq!(one_pass_cache.explicit_slots.len(), expected_length);",
          "    assert!(one_pass_cache.explicit_slots.iter().all(|slot| slot.is_none()));"
        ],
        "code": [
          "{",
          "    let mut one_pass_cache = OnePassCache::none();",
          "    let one_pass = OnePass(None);",
          "    one_pass_cache.reset(&one_pass);",
          "    let mut one_pass_cache = OnePassCache::none();",
          "    let one_pass = OnePass(Some(OnePassEngine(...)));",
          "    one_pass_cache.reset(&one_pass);",
          "    assert!(one_pass_cache.0.is_some());",
          "    assert!(one_pass_cache.memory_usage() > 0);",
          "    assert_eq!(one_pass_cache.explicit_slot_len, expected_length);",
          "    assert_eq!(one_pass_cache.explicit_slots.len(), expected_length);",
          "    assert!(one_pass_cache.explicit_slots.iter().all(|slot| slot.is_none()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]