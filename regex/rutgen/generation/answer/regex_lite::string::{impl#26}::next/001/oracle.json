[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let options: Vec<Option<Arc<str>>> = vec![];",
          "    let capture_names = CaptureNames { it: options.iter() };",
          "    let mut iter = capture_names;",
          "    let result = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);",
          "    assert_eq!(iter.size_hint(), (0, Some(0)));",
          "    assert_eq!(iter.count(), 0);",
          "    assert_eq!(iter.next(), None);"
        ],
        "code": [
          "{",
          "    let options: Vec<Option<Arc<str>>> = vec![];",
          "    let capture_names = CaptureNames { it: options.iter() };",
          "    let mut iter = capture_names;",
          "    let result = iter.next();",
          "    assert_eq!(result, None);",
          "    assert_eq!(iter.size_hint(), (0, Some(0)));",
          "    assert_eq!(iter.count(), 0);",
          "    assert_eq!(iter.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let options: Vec<Option<Arc<str>>> = vec![Some(Arc::new(\"test\".to_string()))];",
          "    let capture_names = CaptureNames { it: options.iter() };",
          "    let mut iter = capture_names;",
          "    let result = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Some(\"test\")));",
          "    assert_eq!(iter.count(), 0);",
          "    let empty_capture_names = CaptureNames { it: vec![].iter() };",
          "    let empty_result = empty_capture_names.next();",
          "    assert_eq!(empty_result, None);",
          "    let options_with_none: Vec<Option<Arc<str>>> = vec![None];",
          "    let capture_names_none = CaptureNames { it: options_with_none.iter() };",
          "    let result_none = capture_names_none.next();",
          "    assert_eq!(result_none, Some(None));",
          "    let options_multiple: Vec<Option<Arc<str>>> = vec![Some(Arc::new(\"test1\".to_string())), Some(Arc::new(\"test2\".to_string()))];",
          "    let capture_names_multiple = CaptureNames { it: options_multiple.iter() };",
          "    let mut iter_multiple = capture_names_multiple;",
          "    assert_eq!(iter_multiple.next(), Some(Some(\"test1\")));",
          "    assert_eq!(iter_multiple.next(), Some(Some(\"test2\")));",
          "    assert_eq!(iter_multiple.next(), None);"
        ],
        "code": [
          "{",
          "    let options: Vec<Option<Arc<str>>> = vec![Some(Arc::new(\"test\".to_string()))];",
          "    let capture_names = CaptureNames { it: options.iter() };",
          "    let mut iter = capture_names;",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(Some(\"test\")));",
          "    assert_eq!(iter.count(), 0);",
          "    let empty_capture_names = CaptureNames { it: vec![].iter() };",
          "    let empty_result = empty_capture_names.next();",
          "    assert_eq!(empty_result, None);",
          "    let options_with_none: Vec<Option<Arc<str>>> = vec![None];",
          "    let capture_names_none = CaptureNames { it: options_with_none.iter() };",
          "    let result_none = capture_names_none.next();",
          "    assert_eq!(result_none, Some(None));",
          "    let options_multiple: Vec<Option<Arc<str>>> = vec![Some(Arc::new(\"test1\".to_string())), Some(Arc::new(\"test2\".to_string()))];",
          "    let capture_names_multiple = CaptureNames { it: options_multiple.iter() };",
          "    let mut iter_multiple = capture_names_multiple;",
          "    assert_eq!(iter_multiple.next(), Some(Some(\"test1\")));",
          "    assert_eq!(iter_multiple.next(), Some(Some(\"test2\")));",
          "    assert_eq!(iter_multiple.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let options: Vec<Option<Arc<str>>> = vec![None];",
          "    let capture_names = CaptureNames { it: options.iter() };",
          "    let mut iter = capture_names;",
          "    let result = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(None));"
        ],
        "code": [
          "{",
          "    let options: Vec<Option<Arc<str>>> = vec![None];",
          "    let capture_names = CaptureNames { it: options.iter() };",
          "    let mut iter = capture_names;",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(None));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let options: Vec<Option<Arc<str>>> = vec![",
          "        Some(Arc::new(\"first\".to_string())),",
          "        Some(Arc::new(\"second\".to_string())),",
          "        Some(Arc::new(\"third\".to_string())),",
          "    ];",
          "    let capture_names = CaptureNames { it: options.iter() };",
          "    let mut iter = capture_names;",
          "    let result = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Some(\"first\")));",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(Some(\"second\")));",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(Some(\"third\")));",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(None));",
          "    let result = iter.next();",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let options: Vec<Option<Arc<str>>> = vec![",
          "        Some(Arc::new(\"first\".to_string())),",
          "        Some(Arc::new(\"second\".to_string())),",
          "        Some(Arc::new(\"third\".to_string())),",
          "    ];",
          "    let capture_names = CaptureNames { it: options.iter() };",
          "    let mut iter = capture_names;",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(Some(\"first\")));",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(Some(\"second\")));",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(Some(\"third\")));",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(None));",
          "    let result = iter.next();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let options: Vec<Option<Arc<str>>> = vec![",
          "        Some(Arc::new(\"first\".to_string())),",
          "        None,",
          "        Some(Arc::new(\"third\".to_string())),",
          "    ];",
          "    let capture_names = CaptureNames { it: options.iter() };",
          "    let mut iter = capture_names;",
          "    let result = iter.next();",
          "}"
        ],
        "oracle": [
          "    let expected_result_1 = Some(Some(\"first\"));",
          "    let expected_result_2 = Some(None);",
          "    let expected_result_3 = Some(Some(\"third\"));",
          "    assert_eq!(result, expected_result_1);",
          "    let result_2 = iter.next();",
          "    assert_eq!(result_2, expected_result_2);",
          "    let result_3 = iter.next();",
          "    assert_eq!(result_3, expected_result_3);",
          "    let result_4 = iter.next();",
          "    assert_eq!(result_4, None);"
        ],
        "code": [
          "{",
          "    let options: Vec<Option<Arc<str>>> = vec![",
          "        Some(Arc::new(\"first\".to_string())),",
          "        None,",
          "        Some(Arc::new(\"third\".to_string())),",
          "    ];",
          "    let capture_names = CaptureNames { it: options.iter() };",
          "    let mut iter = capture_names;",
          "    let result = iter.next();",
          "    let expected_result_1 = Some(Some(\"first\"));",
          "    let expected_result_2 = Some(None);",
          "    let expected_result_3 = Some(Some(\"third\"));",
          "    assert_eq!(result, expected_result_1);",
          "    let result_2 = iter.next();",
          "    assert_eq!(result_2, expected_result_2);",
          "    let result_3 = iter.next();",
          "    assert_eq!(result_3, expected_result_3);",
          "    let result_4 = iter.next();",
          "    assert_eq!(result_4, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let options: Vec<Option<Arc<str>>> = vec![None, None, None];",
          "    let capture_names = CaptureNames { it: options.iter() };",
          "    let mut iter = capture_names;",
          "    let result = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(None));",
          "    assert_eq!(iter.count(), 2);",
          "    assert_eq!(iter.size_hint(), (2, Some(2)));",
          "    assert_eq!(iter.next(), Some(None));",
          "    assert_eq!(iter.next(), Some(None));",
          "    assert_eq!(iter.next(), None);"
        ],
        "code": [
          "{",
          "    let options: Vec<Option<Arc<str>>> = vec![None, None, None];",
          "    let capture_names = CaptureNames { it: options.iter() };",
          "    let mut iter = capture_names;",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(None));",
          "    assert_eq!(iter.count(), 2);",
          "    assert_eq!(iter.size_hint(), (2, Some(2)));",
          "    assert_eq!(iter.next(), Some(None));",
          "    assert_eq!(iter.next(), Some(None));",
          "    assert_eq!(iter.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]