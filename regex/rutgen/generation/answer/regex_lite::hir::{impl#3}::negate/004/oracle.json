[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class = Class::new(vec![ClassRange { start: 'a', end: 'z' }]);",
          "    class.negate();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class.ranges.len(), 1);",
          "    assert_eq!(class.ranges[0], ClassRange { start: '\\x00', end: 'a' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'z' + 1 as char, end: char::MAX });",
          "    assert!(class.ranges.is_empty() == false);",
          "    assert!(class.ranges[0].start > '\\x00');",
          "    assert!(class.ranges.len() == 3);",
          "    assert!(class.ranges[class.ranges.len() - 1].end < char::MAX);"
        ],
        "code": [
          "{",
          "    let mut class = Class::new(vec![ClassRange { start: 'a', end: 'z' }]);",
          "    class.negate();",
          "    assert_eq!(class.ranges.len(), 1);",
          "    assert_eq!(class.ranges[0], ClassRange { start: '\\x00', end: 'a' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'z' + 1 as char, end: char::MAX });",
          "    assert!(class.ranges.is_empty() == false);",
          "    assert!(class.ranges[0].start > '\\x00');",
          "    assert!(class.ranges.len() == 3);",
          "    assert!(class.ranges[class.ranges.len() - 1].end < char::MAX);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'c' },",
          "        ClassRange { start: 'g', end: 'j' },",
          "    ]);",
          "    class.negate();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class.ranges.len(), 2);",
          "    assert_eq!(class.ranges[0], ClassRange { start: '\\x00', end: 'a' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'd', end: 'f' });",
          "    assert_eq!(class.ranges[2], ClassRange { start: 'k', end: char::MAX });"
        ],
        "code": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'c' },",
          "        ClassRange { start: 'g', end: 'j' },",
          "    ]);",
          "    class.negate();",
          "    assert_eq!(class.ranges.len(), 2);",
          "    assert_eq!(class.ranges[0], ClassRange { start: '\\x00', end: 'a' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'd', end: 'f' });",
          "    assert_eq!(class.ranges[2], ClassRange { start: 'k', end: char::MAX });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'e' },",
          "        ClassRange { start: 'g', end: 'k' },",
          "    ]);",
          "    class.negate();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class.ranges.len(), 2);",
          "    assert_eq!(class.ranges[0], ClassRange { start: '\\x00', end: 'a' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'f', end: 'g' });",
          "    assert_eq!(class.ranges[2], ClassRange { start: 'l', end: char::MAX });"
        ],
        "code": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'e' },",
          "        ClassRange { start: 'g', end: 'k' },",
          "    ]);",
          "    class.negate();",
          "    assert_eq!(class.ranges.len(), 2);",
          "    assert_eq!(class.ranges[0], ClassRange { start: '\\x00', end: 'a' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'f', end: 'g' });",
          "    assert_eq!(class.ranges[2], ClassRange { start: 'l', end: char::MAX });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'd', end: 'g' },",
          "        ClassRange { start: 'i', end: 'm' },",
          "    ]);",
          "    class.negate();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class.ranges.len(), 3);",
          "    assert_eq!(class.ranges[0], ClassRange { start: '\\x00', end: 'c' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'h', end: 'h' });",
          "    assert_eq!(class.ranges[2], ClassRange { start: 'n', end: char::MAX });"
        ],
        "code": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'd', end: 'g' },",
          "        ClassRange { start: 'i', end: 'm' },",
          "    ]);",
          "    class.negate();",
          "    assert_eq!(class.ranges.len(), 3);",
          "    assert_eq!(class.ranges[0], ClassRange { start: '\\x00', end: 'c' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'h', end: 'h' });",
          "    assert_eq!(class.ranges[2], ClassRange { start: 'n', end: char::MAX });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'd', end: 'x' },",
          "    ]);",
          "    class.negate();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class.ranges.len(), 1);",
          "    assert_eq!(class.ranges[0], ClassRange { start: '\\x00', end: 'c' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'y', end: char::MAX });"
        ],
        "code": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'd', end: 'x' },",
          "    ]);",
          "    class.negate();",
          "    assert_eq!(class.ranges.len(), 1);",
          "    assert_eq!(class.ranges[0], ClassRange { start: '\\x00', end: 'c' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'y', end: char::MAX });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]