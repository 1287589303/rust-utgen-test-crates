[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class = Class::new(vec![ClassRange { start: '\\x00', end: char::MAX }]);",
          "    class.negate();",
          "}"
        ],
        "oracle": [
          "    self.ranges.is_empty() is false",
          "    self.ranges[0].start == MIN",
          "    i in 1..drain_end is false",
          "    self.ranges[drain_end - 1].end == MAX"
        ],
        "code": [
          "{",
          "    let mut class = Class::new(vec![ClassRange { start: '\\x00', end: char::MAX }]);",
          "    class.negate();",
          "    self.ranges.is_empty() is false",
          "    self.ranges[0].start == MIN",
          "    i in 1..drain_end is false",
          "    self.ranges[drain_end - 1].end == MAX",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class = Class::new(vec![ClassRange { start: '\\x00', end: 'a' }]);",
          "    class.negate();",
          "}"
        ],
        "oracle": [
          "    self.ranges.len() == 1",
          "    self.ranges[0].start == '\\x00'",
          "    self.ranges[0].end == 'a'",
          "    self.ranges.len() == 1",
          "    self.ranges[0] == ClassRange { start: '\\u{E000}', end: '\\u{D7FF}' }",
          "    self.ranges.len() == 2",
          "    self.ranges[1] == ClassRange { start: 'b', end: char::MAX }"
        ],
        "code": [
          "{",
          "    let mut class = Class::new(vec![ClassRange { start: '\\x00', end: 'a' }]);",
          "    class.negate();",
          "    self.ranges.len() == 1",
          "    self.ranges[0].start == '\\x00'",
          "    self.ranges[0].end == 'a'",
          "    self.ranges.len() == 1",
          "    self.ranges[0] == ClassRange { start: '\\u{E000}', end: '\\u{D7FF}' }",
          "    self.ranges.len() == 2",
          "    self.ranges[1] == ClassRange { start: 'b', end: char::MAX }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class = Class::new(vec![ClassRange { start: 'a', end: 'b' }]);",
          "    class.negate();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class.ranges.len(), 1);",
          "    assert_eq!(class.ranges[0], ClassRange { start: '\\x00', end: 'a' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'c', end: char::MAX });"
        ],
        "code": [
          "{",
          "    let mut class = Class::new(vec![ClassRange { start: 'a', end: 'b' }]);",
          "    class.negate();",
          "    assert_eq!(class.ranges.len(), 1);",
          "    assert_eq!(class.ranges[0], ClassRange { start: '\\x00', end: 'a' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'c', end: char::MAX });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class = Class::new(vec![ClassRange { start: 'a', end: char::MAX }]);",
          "    class.negate();",
          "}"
        ],
        "oracle": [
          "    self.ranges.len() == 1",
          "    self.ranges[0].start == 'a'",
          "    self.ranges[0].end == char::MAX",
          "    self.ranges[0].start > '\\x00'",
          "    self.ranges.len() == 2",
          "    self.ranges[1].start == '\\x00'",
          "    self.ranges[1].end == 'a' - 1",
          "    self.ranges[0].end == char::MAX"
        ],
        "code": [
          "{",
          "    let mut class = Class::new(vec![ClassRange { start: 'a', end: char::MAX }]);",
          "    class.negate();",
          "    self.ranges.len() == 1",
          "    self.ranges[0].start == 'a'",
          "    self.ranges[0].end == char::MAX",
          "    self.ranges[0].start > '\\x00'",
          "    self.ranges.len() == 2",
          "    self.ranges[1].start == '\\x00'",
          "    self.ranges[1].end == 'a' - 1",
          "    self.ranges[0].end == char::MAX",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'b' },",
          "        ClassRange { start: 'c', end: char::MAX },",
          "    ]);",
          "    class.negate();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class.ranges.len(), 1);",
          "    assert_eq!(class.ranges[0], ClassRange { start: '\\x00', end: 'a' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'b', end: 'c' });",
          "    assert_eq!(class.ranges[2], ClassRange { start: 'd', end: char::MAX });"
        ],
        "code": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'b' },",
          "        ClassRange { start: 'c', end: char::MAX },",
          "    ]);",
          "    class.negate();",
          "    assert_eq!(class.ranges.len(), 1);",
          "    assert_eq!(class.ranges[0], ClassRange { start: '\\x00', end: 'a' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'b', end: 'c' });",
          "    assert_eq!(class.ranges[2], ClassRange { start: 'd', end: char::MAX });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]