[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start_kind = StartKind::Both;",
          "    let mut dst: [u8; 2] = [0; 2]; // length less than size_of::<u32>()",
          "    let result = start_kind.write_to::<wire::LittleEndian>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"start kind\")));"
        ],
        "code": [
          "{",
          "    let start_kind = StartKind::Both;",
          "    let mut dst: [u8; 2] = [0; 2]; // length less than size_of::<u32>()",
          "    let result = start_kind.write_to::<wire::LittleEndian>(&mut dst);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"start kind\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start_kind = StartKind::Unanchored;",
          "    let mut dst: [u8; 2] = [0; 2]; // length less than size_of::<u32>()",
          "    let result = start_kind.write_to::<wire::LittleEndian>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"start kind\")));"
        ],
        "code": [
          "{",
          "    let start_kind = StartKind::Unanchored;",
          "    let mut dst: [u8; 2] = [0; 2]; // length less than size_of::<u32>()",
          "    let result = start_kind.write_to::<wire::LittleEndian>(&mut dst);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"start kind\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start_kind = StartKind::Anchored;",
          "    let mut dst: [u8; 2] = [0; 2]; // length less than size_of::<u32>()",
          "    let result = start_kind.write_to::<wire::LittleEndian>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"start kind\")));"
        ],
        "code": [
          "{",
          "    let start_kind = StartKind::Anchored;",
          "    let mut dst: [u8; 2] = [0; 2]; // length less than size_of::<u32>()",
          "    let result = start_kind.write_to::<wire::LittleEndian>(&mut dst);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"start kind\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]