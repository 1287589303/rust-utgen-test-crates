[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct LittleEndian;",
          "",
          "    impl Endian for LittleEndian {",
          "        fn write_u32(value: u32, dst: &mut [u8]) {",
          "            dst[0] = (value & 0xFF) as u8;",
          "            dst[1] = ((value >> 8) & 0xFF) as u8;",
          "            dst[2] = ((value >> 16) & 0xFF) as u8;",
          "            dst[3] = ((value >> 24) & 0xFF) as u8;",
          "        }",
          "    }",
          "",
          "    let start_kind = StartKind::Unanchored;",
          "    let mut dst = [0u8; 4];",
          "    let result = start_kind.write_to::<LittleEndian>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(4));",
          "    assert_eq!(dst[0], 1);",
          "    assert_eq!(dst[1], 0);",
          "    assert_eq!(dst[2], 0);",
          "    assert_eq!(dst[3], 0);"
        ],
        "code": [
          "{",
          "    struct LittleEndian;",
          "",
          "    impl Endian for LittleEndian {",
          "        fn write_u32(value: u32, dst: &mut [u8]) {",
          "            dst[0] = (value & 0xFF) as u8;",
          "            dst[1] = ((value >> 8) & 0xFF) as u8;",
          "            dst[2] = ((value >> 16) & 0xFF) as u8;",
          "            dst[3] = ((value >> 24) & 0xFF) as u8;",
          "        }",
          "    }",
          "",
          "    let start_kind = StartKind::Unanchored;",
          "    let mut dst = [0u8; 4];",
          "    let result = start_kind.write_to::<LittleEndian>(&mut dst);",
          "    assert_eq!(result, Ok(4));",
          "    assert_eq!(dst[0], 1);",
          "    assert_eq!(dst[1], 0);",
          "    assert_eq!(dst[2], 0);",
          "    assert_eq!(dst[3], 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct LittleEndian;",
          "",
          "    impl Endian for LittleEndian {",
          "        fn write_u32(value: u32, dst: &mut [u8]) {",
          "            dst[0] = (value & 0xFF) as u8;",
          "            dst[1] = ((value >> 8) & 0xFF) as u8;",
          "            dst[2] = ((value >> 16) & 0xFF) as u8;",
          "            dst[3] = ((value >> 24) & 0xFF) as u8;",
          "        }",
          "    }",
          "",
          "    let start_kind = StartKind::Both;",
          "    let mut dst = [0u8; 4];",
          "    let result = start_kind.write_to::<LittleEndian>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    let start_kind = StartKind::Unanchored;",
          "    let mut dst = [0u8; 4];",
          "    let result = start_kind.write_to::<LittleEndian>(&mut dst);",
          "    assert_eq!(result, Ok(4));",
          "    assert_eq!(dst[0], 1);",
          "    assert_eq!(dst[1], 0);",
          "    assert_eq!(dst[2], 0);",
          "    assert_eq!(dst[3], 0);"
        ],
        "code": [
          "{",
          "    struct LittleEndian;",
          "",
          "    impl Endian for LittleEndian {",
          "        fn write_u32(value: u32, dst: &mut [u8]) {",
          "            dst[0] = (value & 0xFF) as u8;",
          "            dst[1] = ((value >> 8) & 0xFF) as u8;",
          "            dst[2] = ((value >> 16) & 0xFF) as u8;",
          "            dst[3] = ((value >> 24) & 0xFF) as u8;",
          "        }",
          "    }",
          "",
          "    let start_kind = StartKind::Both;",
          "    let mut dst = [0u8; 4];",
          "    let result = start_kind.write_to::<LittleEndian>(&mut dst);",
          "    let start_kind = StartKind::Unanchored;",
          "    let mut dst = [0u8; 4];",
          "    let result = start_kind.write_to::<LittleEndian>(&mut dst);",
          "    assert_eq!(result, Ok(4));",
          "    assert_eq!(dst[0], 1);",
          "    assert_eq!(dst[1], 0);",
          "    assert_eq!(dst[2], 0);",
          "    assert_eq!(dst[3], 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct LittleEndian;",
          "",
          "    impl Endian for LittleEndian {",
          "        fn write_u32(value: u32, dst: &mut [u8]) {",
          "            dst[0] = (value & 0xFF) as u8;",
          "            dst[1] = ((value >> 8) & 0xFF) as u8;",
          "            dst[2] = ((value >> 16) & 0xFF) as u8;",
          "            dst[3] = ((value >> 24) & 0xFF) as u8;",
          "        }",
          "    }",
          "",
          "    let start_kind = StartKind::Anchored;",
          "    let mut dst = [0u8; 4];",
          "    let result = start_kind.write_to::<LittleEndian>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    let start_kind = StartKind::Unanchored;",
          "    let mut dst = [0u8; 4];",
          "    let result = start_kind.write_to::<LittleEndian>(&mut dst);",
          "    assert_eq!(result, Ok(4));",
          "    assert_eq!(dst, [1, 0, 0, 0]);"
        ],
        "code": [
          "{",
          "    struct LittleEndian;",
          "",
          "    impl Endian for LittleEndian {",
          "        fn write_u32(value: u32, dst: &mut [u8]) {",
          "            dst[0] = (value & 0xFF) as u8;",
          "            dst[1] = ((value >> 8) & 0xFF) as u8;",
          "            dst[2] = ((value >> 16) & 0xFF) as u8;",
          "            dst[3] = ((value >> 24) & 0xFF) as u8;",
          "        }",
          "    }",
          "",
          "    let start_kind = StartKind::Anchored;",
          "    let mut dst = [0u8; 4];",
          "    let result = start_kind.write_to::<LittleEndian>(&mut dst);",
          "    let start_kind = StartKind::Unanchored;",
          "    let mut dst = [0u8; 4];",
          "    let result = start_kind.write_to::<LittleEndian>(&mut dst);",
          "    assert_eq!(result, Ok(4));",
          "    assert_eq!(dst, [1, 0, 0, 0]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]