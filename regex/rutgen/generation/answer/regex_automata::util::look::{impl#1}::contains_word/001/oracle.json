[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordUnicode);",
          "    assert!(look_set.contains_word());",
          "}"
        ],
        "oracle": [
          "    assert!(look_set.contains_word_unicode());",
          "    assert!(!look_set.contains_word_ascii());",
          "    assert!(look_set.contains_word());",
          "    assert_eq!(look_set.len(), 1);",
          "    assert!(!look_set.is_empty());",
          "    assert!(look_set.contains(Look::WordUnicode));",
          "    assert!(look_set.contains_word());"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordUnicode);",
          "    assert!(look_set.contains_word());",
          "    assert!(look_set.contains_word_unicode());",
          "    assert!(!look_set.contains_word_ascii());",
          "    assert!(look_set.contains_word());",
          "    assert_eq!(look_set.len(), 1);",
          "    assert!(!look_set.is_empty());",
          "    assert!(look_set.contains(Look::WordUnicode));",
          "    assert!(look_set.contains_word());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordUnicodeNegate);",
          "    assert!(look_set.contains_word());",
          "}"
        ],
        "oracle": [
          "    assert!(look_set.contains_word_unicode() == true);",
          "    assert!(look_set.contains_word_ascii() == false);",
          "    assert!(look_set.contains_word() == true);"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordUnicodeNegate);",
          "    assert!(look_set.contains_word());",
          "    assert!(look_set.contains_word_unicode() == true);",
          "    assert!(look_set.contains_word_ascii() == false);",
          "    assert!(look_set.contains_word() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordStartUnicode);",
          "    assert!(look_set.contains_word());",
          "}"
        ],
        "oracle": [
          "    assert!(look_set.contains_word_unicode());",
          "    assert!(look_set.contains_word_ascii() == false);",
          "    assert!(look_set.len() > 0);",
          "    assert!(look_set.is_empty() == false);",
          "    assert!(look_set.contains(Look::WordStartUnicode));",
          "    assert!(look_set.contains_word());",
          "    assert!(look_set.disjoint_with(LookSet::full()));"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordStartUnicode);",
          "    assert!(look_set.contains_word());",
          "    assert!(look_set.contains_word_unicode());",
          "    assert!(look_set.contains_word_ascii() == false);",
          "    assert!(look_set.len() > 0);",
          "    assert!(look_set.is_empty() == false);",
          "    assert!(look_set.contains(Look::WordStartUnicode));",
          "    assert!(look_set.contains_word());",
          "    assert!(look_set.disjoint_with(LookSet::full()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordEndUnicode);",
          "    assert!(look_set.contains_word());",
          "}"
        ],
        "oracle": [
          "    assert!(look_set.contains_word_unicode());",
          "    assert!(!look_set.contains_word_ascii());",
          "    assert!(look_set.contains_word());"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordEndUnicode);",
          "    assert!(look_set.contains_word());",
          "    assert!(look_set.contains_word_unicode());",
          "    assert!(!look_set.contains_word_ascii());",
          "    assert!(look_set.contains_word());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordStartHalfUnicode);",
          "    assert!(look_set.contains_word());",
          "}"
        ],
        "oracle": [
          "    assert!(look_set.contains_word_unicode());",
          "    assert!(look_set.contains_word_ascii() == false);",
          "    assert!(look_set.contains_word() == true);",
          "    assert_eq!(look_set.len(), 1);",
          "    assert!(!look_set.is_empty());",
          "    assert!(look_set.contains(Look::WordStartHalfUnicode));",
          "    assert!(!look_set.contains(Look::WordEndHalfUnicode));"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordStartHalfUnicode);",
          "    assert!(look_set.contains_word());",
          "    assert!(look_set.contains_word_unicode());",
          "    assert!(look_set.contains_word_ascii() == false);",
          "    assert!(look_set.contains_word() == true);",
          "    assert_eq!(look_set.len(), 1);",
          "    assert!(!look_set.is_empty());",
          "    assert!(look_set.contains(Look::WordStartHalfUnicode));",
          "    assert!(!look_set.contains(Look::WordEndHalfUnicode));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordEndHalfUnicode);",
          "    assert!(look_set.contains_word());",
          "}"
        ],
        "oracle": [
          "    assert!(look_set.contains_word_unicode());",
          "    assert!(look_set.contains_word());",
          "    assert!(look_set.contains(Look::WordEndHalfUnicode));"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordEndHalfUnicode);",
          "    assert!(look_set.contains_word());",
          "    assert!(look_set.contains_word_unicode());",
          "    assert!(look_set.contains_word());",
          "    assert!(look_set.contains(Look::WordEndHalfUnicode));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordAscii);",
          "    assert!(look_set.contains_word());",
          "}"
        ],
        "oracle": [
          "    assert!(look_set.contains_word_unicode());",
          "    assert!(look_set.contains_word_ascii());",
          "    assert_eq!(look_set.contains_word(), true);",
          "    look_set.set_insert(Look::WordAsciiNegate);",
          "    assert!(look_set.contains_word());",
          "    look_set.set_remove(Look::WordAscii);",
          "    assert!(look_set.contains_word());"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordAscii);",
          "    assert!(look_set.contains_word());",
          "    assert!(look_set.contains_word_unicode());",
          "    assert!(look_set.contains_word_ascii());",
          "    assert_eq!(look_set.contains_word(), true);",
          "    look_set.set_insert(Look::WordAsciiNegate);",
          "    assert!(look_set.contains_word());",
          "    look_set.set_remove(Look::WordAscii);",
          "    assert!(look_set.contains_word());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordAsciiNegate);",
          "    assert!(look_set.contains_word());",
          "}"
        ],
        "oracle": [
          "    assert!(look_set.contains_word_unicode());",
          "    assert!(!look_set.contains_word_ascii());",
          "    assert!(look_set.len() > 0);",
          "    assert!(look_set.contains(Look::WordAsciiNegate));",
          "    assert_eq!(look_set.full().len(), 1);",
          "    assert!(look_set.is_empty() == false);"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordAsciiNegate);",
          "    assert!(look_set.contains_word());",
          "    assert!(look_set.contains_word_unicode());",
          "    assert!(!look_set.contains_word_ascii());",
          "    assert!(look_set.len() > 0);",
          "    assert!(look_set.contains(Look::WordAsciiNegate));",
          "    assert_eq!(look_set.full().len(), 1);",
          "    assert!(look_set.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordStartAscii);",
          "    assert!(look_set.contains_word());",
          "}"
        ],
        "oracle": [
          "    assert!(look_set.contains_word_unicode());",
          "    assert!(!look_set.contains_word_ascii());",
          "    assert!(look_set.len() > 0);",
          "    assert!(look_set.contains(Look::WordStartAscii));",
          "    assert!(look_set.contains_word());"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordStartAscii);",
          "    assert!(look_set.contains_word());",
          "    assert!(look_set.contains_word_unicode());",
          "    assert!(!look_set.contains_word_ascii());",
          "    assert!(look_set.len() > 0);",
          "    assert!(look_set.contains(Look::WordStartAscii));",
          "    assert!(look_set.contains_word());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordEndAscii);",
          "    assert!(look_set.contains_word());",
          "}"
        ],
        "oracle": [
          "    assert!(look_set.contains_word_unicode());",
          "    assert!(look_set.contains_word_ascii());",
          "    assert!(look_set.contains(Look::WordEndAscii));",
          "    assert!(look_set.len() > 0);"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordEndAscii);",
          "    assert!(look_set.contains_word());",
          "    assert!(look_set.contains_word_unicode());",
          "    assert!(look_set.contains_word_ascii());",
          "    assert!(look_set.contains(Look::WordEndAscii));",
          "    assert!(look_set.len() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordStartHalfAscii);",
          "    assert!(look_set.contains_word());",
          "}"
        ],
        "oracle": [
          "    assert!(look_set.contains_word_unicode());",
          "    assert!(look_set.contains(Look::WordStartHalfAscii));",
          "    assert!(look_set.contains_word_ascii());",
          "    assert!(look_set.len() > 0);"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordStartHalfAscii);",
          "    assert!(look_set.contains_word());",
          "    assert!(look_set.contains_word_unicode());",
          "    assert!(look_set.contains(Look::WordStartHalfAscii));",
          "    assert!(look_set.contains_word_ascii());",
          "    assert!(look_set.len() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordEndHalfAscii);",
          "    assert!(look_set.contains_word());",
          "}"
        ],
        "oracle": [
          "    assert!(look_set.contains_word_unicode() || look_set.contains_word_ascii());",
          "    look_set.set_insert(Look::WordStartAscii);",
          "    assert!(look_set.contains_word());",
          "    look_set.set_insert(Look::WordStartUnicode);",
          "    assert!(look_set.contains_word());",
          "    look_set.set_insert(Look::WordEndUnicode);",
          "    assert!(look_set.contains_word());",
          "    look_set.set_insert(Look::WordAsciiNegate);",
          "    assert!(look_set.contains_word());",
          "    look_set.set_union(LookSet::singleton(Look::WordEndAscii));",
          "    assert!(look_set.contains_word());"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordEndHalfAscii);",
          "    assert!(look_set.contains_word());",
          "    assert!(look_set.contains_word_unicode() || look_set.contains_word_ascii());",
          "    look_set.set_insert(Look::WordStartAscii);",
          "    assert!(look_set.contains_word());",
          "    look_set.set_insert(Look::WordStartUnicode);",
          "    assert!(look_set.contains_word());",
          "    look_set.set_insert(Look::WordEndUnicode);",
          "    assert!(look_set.contains_word());",
          "    look_set.set_insert(Look::WordAsciiNegate);",
          "    assert!(look_set.contains_word());",
          "    look_set.set_union(LookSet::singleton(Look::WordEndAscii));",
          "    assert!(look_set.contains_word());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]