[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::empty();",
          "    let captures = Captures::all(group_info.clone());",
          "    let pattern_id = PatternID(SmallIndex(0)); ",
          "",
          "    let captures_debug_map = CapturesDebugMap { pid: pattern_id, caps: &captures };",
          "",
          "    for group_index in 0..captures.group_info().group_len(pattern_id) {",
          "        let _result = core::fmt::Debug::fmt(&captures_debug_map, &mut core::fmt::Formatter::new());",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(captures.group_info().pattern_names(pattern_id).enumerate().next().is_some());",
          "    assert!(captures.get_group(0).is_none());",
          "    assert!(captures.group_info().pattern_names(pattern_id).enumerate().last().is_none());"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::empty();",
          "    let captures = Captures::all(group_info.clone());",
          "    let pattern_id = PatternID(SmallIndex(0)); ",
          "",
          "    let captures_debug_map = CapturesDebugMap { pid: pattern_id, caps: &captures };",
          "",
          "    for group_index in 0..captures.group_info().group_len(pattern_id) {",
          "        let _result = core::fmt::Debug::fmt(&captures_debug_map, &mut core::fmt::Formatter::new());",
          "    }",
          "    assert!(captures.group_info().pattern_names(pattern_id).enumerate().next().is_some());",
          "    assert!(captures.get_group(0).is_none());",
          "    assert!(captures.group_info().pattern_names(pattern_id).enumerate().last().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::new(vec![vec![None::<&str>]]).unwrap();",
          "    let captures = Captures::all(group_info.clone());",
          "    let pattern_id = PatternID(SmallIndex(0)); ",
          "",
          "    let captures_debug_map = CapturesDebugMap { pid: pattern_id, caps: &captures };",
          "",
          "    for group_index in 0..captures.group_info().group_len(pattern_id) {",
          "        let _result = core::fmt::Debug::fmt(&captures_debug_map, &mut core::fmt::Formatter::new());",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(captures_debug_map.caps.get_group(0), None);",
          "    assert!(captures_debug_map.caps.group_info().pattern_names(pattern_id).enumerate().all(|(i, name)| name.is_none()));",
          "    assert_eq!(captures_debug_map.pid, PatternID(SmallIndex(0)));",
          "    assert!(captures_debug_map.caps.is_match() == false);",
          "    assert_eq!(captures_debug_map.caps.group_len(), 1);",
          "    assert_eq!(captures_debug_map.caps.get_match(), None);",
          "    assert_eq!(captures_debug_map.caps.pattern(), Some(pattern_id));",
          "    assert_eq!(captures_debug_map.caps.group_info().to_index(pattern_id, \"\"), None);"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::new(vec![vec![None::<&str>]]).unwrap();",
          "    let captures = Captures::all(group_info.clone());",
          "    let pattern_id = PatternID(SmallIndex(0)); ",
          "",
          "    let captures_debug_map = CapturesDebugMap { pid: pattern_id, caps: &captures };",
          "",
          "    for group_index in 0..captures.group_info().group_len(pattern_id) {",
          "        let _result = core::fmt::Debug::fmt(&captures_debug_map, &mut core::fmt::Formatter::new());",
          "    }",
          "    assert_eq!(captures_debug_map.caps.get_group(0), None);",
          "    assert!(captures_debug_map.caps.group_info().pattern_names(pattern_id).enumerate().all(|(i, name)| name.is_none()));",
          "    assert_eq!(captures_debug_map.pid, PatternID(SmallIndex(0)));",
          "    assert!(captures_debug_map.caps.is_match() == false);",
          "    assert_eq!(captures_debug_map.caps.group_len(), 1);",
          "    assert_eq!(captures_debug_map.caps.get_match(), None);",
          "    assert_eq!(captures_debug_map.caps.pattern(), Some(pattern_id));",
          "    assert_eq!(captures_debug_map.caps.group_info().to_index(pattern_id, \"\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::new(vec![vec![None::<&str>], vec![Some(\"group1\")]]).unwrap();",
          "    let captures = Captures::all(group_info.clone());",
          "    let pattern_id = PatternID(SmallIndex(0)); ",
          "",
          "    let captures_debug_map = CapturesDebugMap { pid: pattern_id, caps: &captures };",
          "",
          "    let _result = core::fmt::Debug::fmt(&captures_debug_map, &mut core::fmt::Formatter::new());",
          "",
          "    for group_index in 1..captures.group_info().group_len(pattern_id) {",
          "        let _result = core::fmt::Debug::fmt(&captures_debug_map, &mut core::fmt::Formatter::new());",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(captures_debug_map.caps.get_group(0), None);",
          "    assert!(captures_debug_map.caps.group_info().pattern_names(pattern_id).enumerate().next().is_some());",
          "    assert_eq!(captures_debug_map.caps.get_group(1), None);",
          "    assert!(captures_debug_map.caps.group_info().pattern_names(pattern_id).enumerate().next().is_none());"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::new(vec![vec![None::<&str>], vec![Some(\"group1\")]]).unwrap();",
          "    let captures = Captures::all(group_info.clone());",
          "    let pattern_id = PatternID(SmallIndex(0)); ",
          "",
          "    let captures_debug_map = CapturesDebugMap { pid: pattern_id, caps: &captures };",
          "",
          "    let _result = core::fmt::Debug::fmt(&captures_debug_map, &mut core::fmt::Formatter::new());",
          "",
          "    for group_index in 1..captures.group_info().group_len(pattern_id) {",
          "        let _result = core::fmt::Debug::fmt(&captures_debug_map, &mut core::fmt::Formatter::new());",
          "    }",
          "    assert_eq!(captures_debug_map.caps.get_group(0), None);",
          "    assert!(captures_debug_map.caps.group_info().pattern_names(pattern_id).enumerate().next().is_some());",
          "    assert_eq!(captures_debug_map.caps.get_group(1), None);",
          "    assert!(captures_debug_map.caps.group_info().pattern_names(pattern_id).enumerate().next().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]