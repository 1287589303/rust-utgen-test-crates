[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = ast::ClassPerlKind::Digit;",
          "    let ast = ast::ClassSetItem::Perl(ast::ClassPerl {",
          "        span: Span::default(),",
          "        kind,",
          "        negated: true,",
          "    });",
          "    let mut writer = Writer { wtr: String::new() };",
          "    let _ = writer.visit_class_set_item_post(&ast);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.wtr, r\"\\D\");",
          "    assert!(writer.finish().is_ok());"
        ],
        "code": [
          "{",
          "    let kind = ast::ClassPerlKind::Digit;",
          "    let ast = ast::ClassSetItem::Perl(ast::ClassPerl {",
          "        span: Span::default(),",
          "        kind,",
          "        negated: true,",
          "    });",
          "    let mut writer = Writer { wtr: String::new() };",
          "    let _ = writer.visit_class_set_item_post(&ast);",
          "    assert_eq!(writer.wtr, r\"\\D\");",
          "    assert!(writer.finish().is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = ast::ClassPerlKind::Digit;",
          "    let ast = ast::ClassSetItem::Perl(ast::ClassPerl {",
          "        span: Span::default(),",
          "        kind,",
          "        negated: false,",
          "    });",
          "    let mut writer = Writer { wtr: String::new() };",
          "    let _ = writer.visit_class_set_item_post(&ast);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.wtr, r\"\\d\");"
        ],
        "code": [
          "{",
          "    let kind = ast::ClassPerlKind::Digit;",
          "    let ast = ast::ClassSetItem::Perl(ast::ClassPerl {",
          "        span: Span::default(),",
          "        kind,",
          "        negated: false,",
          "    });",
          "    let mut writer = Writer { wtr: String::new() };",
          "    let _ = writer.visit_class_set_item_post(&ast);",
          "    assert_eq!(writer.wtr, r\"\\d\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = ast::ClassPerlKind::Space;",
          "    let ast = ast::ClassSetItem::Perl(ast::ClassPerl {",
          "        span: Span::default(),",
          "        kind,",
          "        negated: true,",
          "    });",
          "    let mut writer = Writer { wtr: String::new() };",
          "    let _ = writer.visit_class_set_item_post(&ast);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.wtr, r\"\\S\");"
        ],
        "code": [
          "{",
          "    let kind = ast::ClassPerlKind::Space;",
          "    let ast = ast::ClassSetItem::Perl(ast::ClassPerl {",
          "        span: Span::default(),",
          "        kind,",
          "        negated: true,",
          "    });",
          "    let mut writer = Writer { wtr: String::new() };",
          "    let _ = writer.visit_class_set_item_post(&ast);",
          "    assert_eq!(writer.wtr, r\"\\S\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = ast::ClassPerlKind::Space;",
          "    let ast = ast::ClassSetItem::Perl(ast::ClassPerl {",
          "        span: Span::default(),",
          "        kind,",
          "        negated: false,",
          "    });",
          "    let mut writer = Writer { wtr: String::new() };",
          "    let _ = writer.visit_class_set_item_post(&ast);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.wtr, r\"\\s\");"
        ],
        "code": [
          "{",
          "    let kind = ast::ClassPerlKind::Space;",
          "    let ast = ast::ClassSetItem::Perl(ast::ClassPerl {",
          "        span: Span::default(),",
          "        kind,",
          "        negated: false,",
          "    });",
          "    let mut writer = Writer { wtr: String::new() };",
          "    let _ = writer.visit_class_set_item_post(&ast);",
          "    assert_eq!(writer.wtr, r\"\\s\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = ast::ClassPerlKind::Word;",
          "    let ast = ast::ClassSetItem::Perl(ast::ClassPerl {",
          "        span: Span::default(),",
          "        kind,",
          "        negated: true,",
          "    });",
          "    let mut writer = Writer { wtr: String::new() };",
          "    let _ = writer.visit_class_set_item_post(&ast);",
          "}"
        ],
        "oracle": [
          "    let kind = ast::ClassPerlKind::Word;",
          "    let ast = ast::ClassSetItem::Perl(ast::ClassPerl { span: Span::default(), kind, negated: true });",
          "    let mut writer = Writer { wtr: String::new() };",
          "    let result = writer.visit_class_set_item_post(&ast);",
          "    assert!(result.is_ok());",
          "    assert_eq!(writer.wtr, r\"\\W\");"
        ],
        "code": [
          "{",
          "    let kind = ast::ClassPerlKind::Word;",
          "    let ast = ast::ClassSetItem::Perl(ast::ClassPerl {",
          "        span: Span::default(),",
          "        kind,",
          "        negated: true,",
          "    });",
          "    let mut writer = Writer { wtr: String::new() };",
          "    let _ = writer.visit_class_set_item_post(&ast);",
          "    let kind = ast::ClassPerlKind::Word;",
          "    let ast = ast::ClassSetItem::Perl(ast::ClassPerl { span: Span::default(), kind, negated: true });",
          "    let mut writer = Writer { wtr: String::new() };",
          "    let result = writer.visit_class_set_item_post(&ast);",
          "    assert!(result.is_ok());",
          "    assert_eq!(writer.wtr, r\"\\W\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = ast::ClassPerlKind::Word;",
          "    let ast = ast::ClassSetItem::Perl(ast::ClassPerl {",
          "        span: Span::default(),",
          "        kind,",
          "        negated: false,",
          "    });",
          "    let mut writer = Writer { wtr: String::new() };",
          "    let _ = writer.visit_class_set_item_post(&ast);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.wtr, r\"\\w\");"
        ],
        "code": [
          "{",
          "    let kind = ast::ClassPerlKind::Word;",
          "    let ast = ast::ClassSetItem::Perl(ast::ClassPerl {",
          "        span: Span::default(),",
          "        kind,",
          "        negated: false,",
          "    });",
          "    let mut writer = Writer { wtr: String::new() };",
          "    let _ = writer.visit_class_set_item_post(&ast);",
          "    assert_eq!(writer.wtr, r\"\\w\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]