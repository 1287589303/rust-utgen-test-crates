[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ascii_class = ast::ClassAscii {",
          "        span: Span::default(),",
          "        kind: ast::ClassAsciiKind::Alnum,",
          "        negated: true,",
          "    };",
          "    let class_set_item = ast::ClassSetItem::Ascii(ascii_class);",
          "    ",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.visit_class_set_item_post(&class_set_item);",
          "}"
        ],
        "oracle": [
          "    let expected_output = \"[:^alnum:]\";",
          "    assert_eq!(writer.output, expected_output);"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ascii_class = ast::ClassAscii {",
          "        span: Span::default(),",
          "        kind: ast::ClassAsciiKind::Alnum,",
          "        negated: true,",
          "    };",
          "    let class_set_item = ast::ClassSetItem::Ascii(ascii_class);",
          "    ",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.visit_class_set_item_post(&class_set_item);",
          "    let expected_output = \"[:^alnum:]\";",
          "    assert_eq!(writer.output, expected_output);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ascii_class = ast::ClassAscii {",
          "        span: Span::default(),",
          "        kind: ast::ClassAsciiKind::Alpha,",
          "        negated: false,",
          "    };",
          "    let class_set_item = ast::ClassSetItem::Ascii(ascii_class);",
          "    ",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.visit_class_set_item_post(&class_set_item);",
          "}"
        ],
        "oracle": [
          "    let expected_output = \"[:alpha:]\";",
          "    assert_eq!(writer.output, expected_output);"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ascii_class = ast::ClassAscii {",
          "        span: Span::default(),",
          "        kind: ast::ClassAsciiKind::Alpha,",
          "        negated: false,",
          "    };",
          "    let class_set_item = ast::ClassSetItem::Ascii(ascii_class);",
          "    ",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.visit_class_set_item_post(&class_set_item);",
          "    let expected_output = \"[:alpha:]\";",
          "    assert_eq!(writer.output, expected_output);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]