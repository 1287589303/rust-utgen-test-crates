[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start_char = 'a';",
          "    let end_char = 'z';",
          "    let valid_span = Span::new(0, 5);",
          "    let start_span = Span::new(0, 1);",
          "    let end_span = Span::new(4, 5);",
          "",
          "    let literal_start = Literal {",
          "        span: start_span,",
          "        kind: LiteralKind::Verbatim,",
          "        c: start_char,",
          "    };",
          "",
          "    let literal_end = Literal {",
          "        span: end_span,",
          "        kind: LiteralKind::Verbatim,",
          "        c: end_char,",
          "    };",
          "",
          "    let range = ClassSetRange {",
          "        span: valid_span,",
          "        start: literal_start,",
          "        end: literal_end,",
          "    };",
          "",
          "    let class_set_item = ast::ClassSetItem::Range(range);",
          "",
          "    let writer = Writer {",
          "        wtr: String::new(),",
          "    };",
          "",
          "    writer.visit_class_set_item_post(&class_set_item).unwrap();",
          "}"
        ],
        "oracle": [
          "    writer.visit_class_set_item_post(&class_set_item).unwrap();",
          "    assert_eq!(writer.wtr, \"a-z\");",
          "    assert!(writer.wtr.len() > 0);",
          "    assert!(writer.wtr.contains(\"-\"));",
          "    assert!(writer.wtr.contains(\"a\"));",
          "    assert!(writer.wtr.contains(\"z\"));"
        ],
        "code": [
          "{",
          "    let start_char = 'a';",
          "    let end_char = 'z';",
          "    let valid_span = Span::new(0, 5);",
          "    let start_span = Span::new(0, 1);",
          "    let end_span = Span::new(4, 5);",
          "",
          "    let literal_start = Literal {",
          "        span: start_span,",
          "        kind: LiteralKind::Verbatim,",
          "        c: start_char,",
          "    };",
          "",
          "    let literal_end = Literal {",
          "        span: end_span,",
          "        kind: LiteralKind::Verbatim,",
          "        c: end_char,",
          "    };",
          "",
          "    let range = ClassSetRange {",
          "        span: valid_span,",
          "        start: literal_start,",
          "        end: literal_end,",
          "    };",
          "",
          "    let class_set_item = ast::ClassSetItem::Range(range);",
          "",
          "    let writer = Writer {",
          "        wtr: String::new(),",
          "    };",
          "",
          "    writer.visit_class_set_item_post(&class_set_item).unwrap();",
          "    writer.visit_class_set_item_post(&class_set_item).unwrap();",
          "    assert_eq!(writer.wtr, \"a-z\");",
          "    assert!(writer.wtr.len() > 0);",
          "    assert!(writer.wtr.contains(\"-\"));",
          "    assert!(writer.wtr.contains(\"a\"));",
          "    assert!(writer.wtr.contains(\"z\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start_char = '1';",
          "    let end_char = '9';",
          "    let valid_span = Span::new(0, 5);",
          "    let start_span = Span::new(0, 1);",
          "    let end_span = Span::new(4, 5);",
          "",
          "    let literal_start = Literal {",
          "        span: start_span,",
          "        kind: LiteralKind::Verbatim,",
          "        c: start_char,",
          "    };",
          "",
          "    let literal_end = Literal {",
          "        span: end_span,",
          "        kind: LiteralKind::Verbatim,",
          "        c: end_char,",
          "    };",
          "",
          "    let range = ClassSetRange {",
          "        span: valid_span,",
          "        start: literal_start,",
          "        end: literal_end,",
          "    };",
          "",
          "    let class_set_item = ast::ClassSetItem::Range(range);",
          "",
          "    let writer = Writer {",
          "        wtr: String::new(),",
          "    };",
          "",
          "    writer.visit_class_set_item_post(&class_set_item).unwrap();",
          "}"
        ],
        "oracle": [
          "    writer.visit_class_set_item_post(&ast::ClassSetItem::Range(ClassSetRange {",
          "    span: Span::new(0, 5),",
          "    start: Literal {",
          "    span: Span::new(0, 1),",
          "    kind: LiteralKind::Verbatim,",
          "    c: '1',",
          "    },",
          "    end: Literal {",
          "    span: Span::new(4, 5),",
          "    kind: LiteralKind::Verbatim,",
          "    c: '9',",
          "    },",
          "    })).unwrap() == Ok(())"
        ],
        "code": [
          "{",
          "    let start_char = '1';",
          "    let end_char = '9';",
          "    let valid_span = Span::new(0, 5);",
          "    let start_span = Span::new(0, 1);",
          "    let end_span = Span::new(4, 5);",
          "",
          "    let literal_start = Literal {",
          "        span: start_span,",
          "        kind: LiteralKind::Verbatim,",
          "        c: start_char,",
          "    };",
          "",
          "    let literal_end = Literal {",
          "        span: end_span,",
          "        kind: LiteralKind::Verbatim,",
          "        c: end_char,",
          "    };",
          "",
          "    let range = ClassSetRange {",
          "        span: valid_span,",
          "        start: literal_start,",
          "        end: literal_end,",
          "    };",
          "",
          "    let class_set_item = ast::ClassSetItem::Range(range);",
          "",
          "    let writer = Writer {",
          "        wtr: String::new(),",
          "    };",
          "",
          "    writer.visit_class_set_item_post(&class_set_item).unwrap();",
          "    writer.visit_class_set_item_post(&ast::ClassSetItem::Range(ClassSetRange {",
          "    span: Span::new(0, 5),",
          "    start: Literal {",
          "    span: Span::new(0, 1),",
          "    kind: LiteralKind::Verbatim,",
          "    c: '1',",
          "    },",
          "    end: Literal {",
          "    span: Span::new(4, 5),",
          "    kind: LiteralKind::Verbatim,",
          "    c: '9',",
          "    },",
          "    })).unwrap() == Ok(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start_char = '!';",
          "    let end_char = '#';",
          "    let valid_span = Span::new(0, 5);",
          "    let start_span = Span::new(0, 1);",
          "    let end_span = Span::new(4, 5);",
          "",
          "    let literal_start = Literal {",
          "        span: start_span,",
          "        kind: LiteralKind::Verbatim,",
          "        c: start_char,",
          "    };",
          "",
          "    let literal_end = Literal {",
          "        span: end_span,",
          "        kind: LiteralKind::Verbatim,",
          "        c: end_char,",
          "    };",
          "",
          "    let range = ClassSetRange {",
          "        span: valid_span,",
          "        start: literal_start,",
          "        end: literal_end,",
          "    };",
          "",
          "    let class_set_item = ast::ClassSetItem::Range(range);",
          "",
          "    let writer = Writer {",
          "        wtr: String::new(),",
          "    };",
          "",
          "    writer.visit_class_set_item_post(&class_set_item).unwrap();",
          "}"
        ],
        "oracle": [
          "    writer.visit_class_set_item_post(&class_set_item).unwrap();",
          "    let start_char = '!';",
          "    let end_char = '#';",
          "    let valid_span = Span::new(0, 5);",
          "    let start_span = Span::new(0, 1);",
          "    let end_span = Span::new(4, 5);",
          "    let literal_start = Literal { span: start_span, kind: LiteralKind::Verbatim, c: start_char };",
          "    let literal_end = Literal { span: end_span, kind: LiteralKind::Verbatim, c: end_char };",
          "    let range = ClassSetRange { span: valid_span, start: literal_start, end: literal_end };",
          "    let class_set_item = ast::ClassSetItem::Range(range);",
          "    self.fmt_literal(&x.start)?;",
          "    self.wtr.write_str(\"-\")?;",
          "    self.fmt_literal(&x.end)?;",
          "    Ok(())"
        ],
        "code": [
          "{",
          "    let start_char = '!';",
          "    let end_char = '#';",
          "    let valid_span = Span::new(0, 5);",
          "    let start_span = Span::new(0, 1);",
          "    let end_span = Span::new(4, 5);",
          "",
          "    let literal_start = Literal {",
          "        span: start_span,",
          "        kind: LiteralKind::Verbatim,",
          "        c: start_char,",
          "    };",
          "",
          "    let literal_end = Literal {",
          "        span: end_span,",
          "        kind: LiteralKind::Verbatim,",
          "        c: end_char,",
          "    };",
          "",
          "    let range = ClassSetRange {",
          "        span: valid_span,",
          "        start: literal_start,",
          "        end: literal_end,",
          "    };",
          "",
          "    let class_set_item = ast::ClassSetItem::Range(range);",
          "",
          "    let writer = Writer {",
          "        wtr: String::new(),",
          "    };",
          "",
          "    writer.visit_class_set_item_post(&class_set_item).unwrap();",
          "    writer.visit_class_set_item_post(&class_set_item).unwrap();",
          "    let start_char = '!';",
          "    let end_char = '#';",
          "    let valid_span = Span::new(0, 5);",
          "    let start_span = Span::new(0, 1);",
          "    let end_span = Span::new(4, 5);",
          "    let literal_start = Literal { span: start_span, kind: LiteralKind::Verbatim, c: start_char };",
          "    let literal_end = Literal { span: end_span, kind: LiteralKind::Verbatim, c: end_char };",
          "    let range = ClassSetRange { span: valid_span, start: literal_start, end: literal_end };",
          "    let class_set_item = ast::ClassSetItem::Range(range);",
          "    self.fmt_literal(&x.start)?;",
          "    self.wtr.write_str(\"-\")?;",
          "    self.fmt_literal(&x.end)?;",
          "    Ok(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]