[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let valid_literal = ast::Literal {",
          "        span: Span { start: 1, end: 10 },",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: 'a',",
          "    };",
          "",
          "    let error_literal = ast::Literal {",
          "        span: Span { start: 11, end: 20 },",
          "        kind: ast::LiteralKind::Meta, // assume this causes an error in fmt_literal",
          "        c: 'b',",
          "    };",
          "",
          "    let range_item = ast::ClassSetItem::Range(ast::ClassSetRange {",
          "        span: Span { start: 1, end: 20 },",
          "        start: valid_literal,",
          "        end: error_literal,",
          "    });",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    ",
          "    let _ = visitor.visit_class_set_item_post(&range_item);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_class_set_item_post(&range_item).is_err(), true);",
          "    assert_eq!(writer.output, \"a-b\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let valid_literal = ast::Literal {",
          "        span: Span { start: 1, end: 10 },",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: 'a',",
          "    };",
          "",
          "    let error_literal = ast::Literal {",
          "        span: Span { start: 11, end: 20 },",
          "        kind: ast::LiteralKind::Meta, // assume this causes an error in fmt_literal",
          "        c: 'b',",
          "    };",
          "",
          "    let range_item = ast::ClassSetItem::Range(ast::ClassSetRange {",
          "        span: Span { start: 1, end: 20 },",
          "        start: valid_literal,",
          "        end: error_literal,",
          "    });",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    ",
          "    let _ = visitor.visit_class_set_item_post(&range_item);",
          "    assert_eq!(visitor.visit_class_set_item_post(&range_item).is_err(), true);",
          "    assert_eq!(writer.output, \"a-b\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]