[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: 'a',",
          "    };",
          "    let ast = ast::ClassSetItem::Literal(literal);",
          "    let writer = Writer { wtr: String::new() };",
          "    writer.visit_class_set_item_post(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.wtr, \"a\");"
        ],
        "code": [
          "{",
          "    let literal = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: 'a',",
          "    };",
          "    let ast = ast::ClassSetItem::Literal(literal);",
          "    let writer = Writer { wtr: String::new() };",
          "    writer.visit_class_set_item_post(&ast).unwrap();",
          "    assert_eq!(writer.wtr, \"a\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Meta,",
          "        c: 'b',",
          "    };",
          "    let ast = ast::ClassSetItem::Literal(literal);",
          "    let writer = Writer { wtr: String::new() };",
          "    writer.visit_class_set_item_post(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.wtr, r\"\\b\");"
        ],
        "code": [
          "{",
          "    let literal = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Meta,",
          "        c: 'b',",
          "    };",
          "    let ast = ast::ClassSetItem::Literal(literal);",
          "    let writer = Writer { wtr: String::new() };",
          "    writer.visit_class_set_item_post(&ast).unwrap();",
          "    assert_eq!(writer.wtr, r\"\\b\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Superfluous,",
          "        c: 'c',",
          "    };",
          "    let ast = ast::ClassSetItem::Literal(literal);",
          "    let writer = Writer { wtr: String::new() };",
          "    writer.visit_class_set_item_post(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.wtr, r\"\\c\");"
        ],
        "code": [
          "{",
          "    let literal = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Superfluous,",
          "        c: 'c',",
          "    };",
          "    let ast = ast::ClassSetItem::Literal(literal);",
          "    let writer = Writer { wtr: String::new() };",
          "    writer.visit_class_set_item_post(&ast).unwrap();",
          "    assert_eq!(writer.wtr, r\"\\c\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Octal,",
          "        c: '7',",
          "    };",
          "    let ast = ast::ClassSetItem::Literal(literal);",
          "    let writer = Writer { wtr: String::new() };",
          "    writer.visit_class_set_item_post(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.wtr, r\"\\7\");"
        ],
        "code": [
          "{",
          "    let literal = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Octal,",
          "        c: '7',",
          "    };",
          "    let ast = ast::ClassSetItem::Literal(literal);",
          "    let writer = Writer { wtr: String::new() };",
          "    writer.visit_class_set_item_post(&ast).unwrap();",
          "    assert_eq!(writer.wtr, r\"\\7\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeShort),",
          "        c: 'd',",
          "    };",
          "    let ast = ast::ClassSetItem::Literal(literal);",
          "    let writer = Writer { wtr: String::new() };",
          "    writer.visit_class_set_item_post(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.wtr, r\"\\u{64}\");"
        ],
        "code": [
          "{",
          "    let literal = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeShort),",
          "        c: 'd',",
          "    };",
          "    let ast = ast::ClassSetItem::Literal(literal);",
          "    let writer = Writer { wtr: String::new() };",
          "    writer.visit_class_set_item_post(&ast).unwrap();",
          "    assert_eq!(writer.wtr, r\"\\u{64}\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Tab),",
          "        c: '\\t',",
          "    };",
          "    let ast = ast::ClassSetItem::Literal(literal);",
          "    let writer = Writer { wtr: String::new() };",
          "    writer.visit_class_set_item_post(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.wtr, r\"\\t\");"
        ],
        "code": [
          "{",
          "    let literal = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Tab),",
          "        c: '\\t',",
          "    };",
          "    let ast = ast::ClassSetItem::Literal(literal);",
          "    let writer = Writer { wtr: String::new() };",
          "    writer.visit_class_set_item_post(&ast).unwrap();",
          "    assert_eq!(writer.wtr, r\"\\t\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]