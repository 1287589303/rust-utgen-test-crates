[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = r\"\\>\";",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('>')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_escape();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_unwrap(parser.parse_escape()), Ok(Hir::look(hir::Look::WordEnd)));"
        ],
        "code": [
          "{",
          "    let pattern = r\"\\>\";",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('>')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_escape();",
          "    assert_eq!(_unwrap(parser.parse_escape()), Ok(Hir::look(hir::Look::WordEnd)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = r\"\\d\";",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('d')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_escape();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_unwrap_error(_), Ok(Hir::look(hir::Look::WordEnd)));"
        ],
        "code": [
          "{",
          "    let pattern = r\"\\d\";",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('d')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_escape();",
          "    assert_eq!(_unwrap_error(_), Ok(Hir::look(hir::Look::WordEnd)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = r\"\\w\";",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('w')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_escape();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_ as Result<Hir, Error>, Ok(Hir::look(hir::Look::WordEnd)));"
        ],
        "code": [
          "{",
          "    let pattern = r\"\\w\";",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('w')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_escape();",
          "    assert_eq!(_ as Result<Hir, Error>, Ok(Hir::look(hir::Look::WordEnd)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = r\"\\u1234\";",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('u')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_escape();",
          "}"
        ],
        "oracle": [
          "    let pattern = r\"\\u1234\";",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('p')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_escape();",
          "    assert_eq!(result, Ok(Hir::look(hir::Look::WordEnd)));",
          "    ",
          "    let pattern = r\"\\u1234\";",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('D')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_escape();",
          "    assert_eq!(result, Ok(Hir::look(hir::Look::WordEnd)));",
          "    ",
          "    let pattern = r\"\\u1234\";",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('d')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_escape();",
          "    assert_eq!(result, Ok(Hir::look(hir::Look::WordEnd)));",
          "    ",
          "    let pattern = r\"\\u1234\";",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('u')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_escape();",
          "    assert_eq!(result, Ok(Hir::look(hir::Look::WordEnd)));",
          "    ",
          "    let pattern = r\"\\u1234\";",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('x')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_escape();",
          "    assert_eq!(result, Ok(Hir::look(hir::Look::WordEnd)));",
          "    ",
          "    let pattern = r\"\\u1234\";",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('s')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_escape();",
          "    assert_eq!(result, Ok(Hir::look(hir::Look::WordEnd)));",
          "    ",
          "    let pattern = r\"\\u1234\";",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('S')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_escape();",
          "    assert_eq!(result, Ok(Hir::look(hir::Look::WordEnd)));",
          "    ",
          "    let pattern = r\"\\u1234\";",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('W')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_escape();",
          "    assert_eq!(result, Ok(Hir::look(hir::Look::WordEnd)));"
        ],
        "code": [
          "{",
          "    let pattern = r\"\\u1234\";",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('u')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_escape();",
          "    let pattern = r\"\\u1234\";",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('p')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_escape();",
          "    assert_eq!(result, Ok(Hir::look(hir::Look::WordEnd)));",
          "    ",
          "    let pattern = r\"\\u1234\";",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('D')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_escape();",
          "    assert_eq!(result, Ok(Hir::look(hir::Look::WordEnd)));",
          "    ",
          "    let pattern = r\"\\u1234\";",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('d')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_escape();",
          "    assert_eq!(result, Ok(Hir::look(hir::Look::WordEnd)));",
          "    ",
          "    let pattern = r\"\\u1234\";",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('u')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_escape();",
          "    assert_eq!(result, Ok(Hir::look(hir::Look::WordEnd)));",
          "    ",
          "    let pattern = r\"\\u1234\";",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('x')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_escape();",
          "    assert_eq!(result, Ok(Hir::look(hir::Look::WordEnd)));",
          "    ",
          "    let pattern = r\"\\u1234\";",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('s')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_escape();",
          "    assert_eq!(result, Ok(Hir::look(hir::Look::WordEnd)));",
          "    ",
          "    let pattern = r\"\\u1234\";",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('S')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_escape();",
          "    assert_eq!(result, Ok(Hir::look(hir::Look::WordEnd)));",
          "    ",
          "    let pattern = r\"\\u1234\";",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('W')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_escape();",
          "    assert_eq!(result, Ok(Hir::look(hir::Look::WordEnd)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = r\"\\xFF\";",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('x')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_escape();",
          "}"
        ],
        "oracle": [
          "    let pattern = r\"\\xFF\";",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('x')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_escape();",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Hir::look(hir::Look::WordEnd));",
          "    let pattern = r\"\\u{00FF}\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('u')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_escape();",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Hir::look(hir::Look::WordEnd));",
          "    let pattern = r\"\\w\";",
          "    let character = 'w';",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some(character)), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_escape();",
          "    assert!(result.is_ok());",
          "    assert!(parser.parse_perl_class().is_not_empty());"
        ],
        "code": [
          "{",
          "    let pattern = r\"\\xFF\";",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('x')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_escape();",
          "    let pattern = r\"\\xFF\";",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('x')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_escape();",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Hir::look(hir::Look::WordEnd));",
          "    let pattern = r\"\\u{00FF}\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('u')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_escape();",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Hir::look(hir::Look::WordEnd));",
          "    let pattern = r\"\\w\";",
          "    let character = 'w';",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some(character)), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_escape();",
          "    assert!(result.is_ok());",
          "    assert!(parser.parse_perl_class().is_not_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = r\"\\D\";",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('D')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_escape();",
          "}"
        ],
        "oracle": [
          "    let pattern = r\"\\d\"; let config = Config { nest_limit: 10, flags: Flags::default(), }; let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('d')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]), }; assert_eq!(parser.parse_escape(), Ok(Hir::look(hir::Look::WordEnd)));",
          "    let pattern = r\"\\s\"; let config = Config { nest_limit: 10, flags: Flags::default(), }; let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('s')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]), }; assert_eq!(parser.parse_escape(), Ok(Hir::look(hir::Look::WordEnd)));",
          "    let pattern = r\"\\p\"; let config = Config { nest_limit: 10, flags: Flags::default(), }; let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('p')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]), }; assert_eq!(parser.parse_escape(), Err(Error::new(ERR_UNICODE_CLASS_UNSUPPORTED)));",
          "    let pattern = r\"\\P\"; let config = Config { nest_limit: 10, flags: Flags::default(), }; let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('P')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]), }; assert_eq!(parser.parse_escape(), Err(Error::new(ERR_UNICODE_CLASS_UNSUPPORTED)));",
          "    let pattern = r\"\\w\"; let config = Config { nest_limit: 10, flags: Flags::default(), }; let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('w')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]), }; assert_eq!(parser.parse_escape(), Ok(parser.parse_perl_class()));",
          "    let pattern = r\"\\W\"; let config = Config { nest_limit: 10, flags: Flags::default(), }; let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('W')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]), }; assert_eq!(parser.parse_escape(), Ok(parser.parse_perl_class()));",
          "    let pattern = r\"\\u\"; let config = Config { nest_limit: 10, flags: Flags::default(), }; let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('u')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]), }; assert_eq!(parser.parse_escape(), Ok(parser.parse_hex()));",
          "    let pattern = r\"\\x\"; let config = Config { nest_limit: 10, flags: Flags::default(), }; let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('x')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]), }; assert_eq!(parser.parse_escape(), Ok(parser.parse_hex()));",
          "    let pattern = r\"\\U\"; let config = Config { nest_limit: 10, flags: Flags::default(), }; let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('U')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]), }; assert_eq!(parser.parse_escape(), Ok(parser.parse_hex()));"
        ],
        "code": [
          "{",
          "    let pattern = r\"\\D\";",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('D')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_escape();",
          "    let pattern = r\"\\d\"; let config = Config { nest_limit: 10, flags: Flags::default(), }; let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('d')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]), }; assert_eq!(parser.parse_escape(), Ok(Hir::look(hir::Look::WordEnd)));",
          "    let pattern = r\"\\s\"; let config = Config { nest_limit: 10, flags: Flags::default(), }; let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('s')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]), }; assert_eq!(parser.parse_escape(), Ok(Hir::look(hir::Look::WordEnd)));",
          "    let pattern = r\"\\p\"; let config = Config { nest_limit: 10, flags: Flags::default(), }; let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('p')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]), }; assert_eq!(parser.parse_escape(), Err(Error::new(ERR_UNICODE_CLASS_UNSUPPORTED)));",
          "    let pattern = r\"\\P\"; let config = Config { nest_limit: 10, flags: Flags::default(), }; let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('P')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]), }; assert_eq!(parser.parse_escape(), Err(Error::new(ERR_UNICODE_CLASS_UNSUPPORTED)));",
          "    let pattern = r\"\\w\"; let config = Config { nest_limit: 10, flags: Flags::default(), }; let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('w')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]), }; assert_eq!(parser.parse_escape(), Ok(parser.parse_perl_class()));",
          "    let pattern = r\"\\W\"; let config = Config { nest_limit: 10, flags: Flags::default(), }; let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('W')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]), }; assert_eq!(parser.parse_escape(), Ok(parser.parse_perl_class()));",
          "    let pattern = r\"\\u\"; let config = Config { nest_limit: 10, flags: Flags::default(), }; let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('u')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]), }; assert_eq!(parser.parse_escape(), Ok(parser.parse_hex()));",
          "    let pattern = r\"\\x\"; let config = Config { nest_limit: 10, flags: Flags::default(), }; let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('x')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]), }; assert_eq!(parser.parse_escape(), Ok(parser.parse_hex()));",
          "    let pattern = r\"\\U\"; let config = Config { nest_limit: 10, flags: Flags::default(), }; let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('U')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]), }; assert_eq!(parser.parse_escape(), Ok(parser.parse_hex()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = r\"\\W\";",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('W')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_escape();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_unwrap_parser_result(parser.parse_escape()), Ok(Hir::look(hir::Look::WordEnd)));"
        ],
        "code": [
          "{",
          "    let pattern = r\"\\W\";",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('W')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_escape();",
          "    assert_eq!(_unwrap_parser_result(parser.parse_escape()), Ok(Hir::look(hir::Look::WordEnd)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = r\"\\s\";",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('s')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_escape();",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(_ , Ok(Hir::look(hir::Look::WordEnd))));"
        ],
        "code": [
          "{",
          "    let pattern = r\"\\s\";",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('s')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_escape();",
          "    assert!(matches!(_ , Ok(Hir::look(hir::Look::WordEnd))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = r\"\\S\";",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('S')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_escape();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.parse_escape(), Ok(Hir::look(hir::Look::WordEnd)));"
        ],
        "code": [
          "{",
          "    let pattern = r\"\\S\";",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('S')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_escape();",
          "    assert_eq!(parser.parse_escape(), Ok(Hir::look(hir::Look::WordEnd)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = r\"\\p{L}\";",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('p')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_escape();",
          "}"
        ],
        "oracle": [
          "    let pattern = r\"\\d\";",
          "    let config = Config {",
          "    nest_limit: 10,",
          "    flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('d')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_escape();",
          "    assert_eq!(result, Ok(Hir::look(hir::Look::Word)));",
          "    ",
          "    let pattern = r\"\\s\";",
          "    let config = Config {",
          "    nest_limit: 10,",
          "    flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('s')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_escape();",
          "    assert_eq!(result, Ok(Hir::look(hir::Look::Word)));",
          "    ",
          "    let pattern = r\"\\u{002}\";",
          "    let config = Config {",
          "    nest_limit: 10,",
          "    flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('u')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_escape();",
          "    assert_eq!(result, Ok(Hir::looking(hir::Look::WordStart)));",
          "    ",
          "    let pattern = r\"\\x{A}\";",
          "    let config = Config {",
          "    nest_limit: 10,",
          "    flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('x')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_escape();",
          "    assert_eq!(result, Ok(Hir::looking(hir::Look::WordEnd)));",
          "    ",
          "    let pattern = r\"\\p\";",
          "    let config = Config {",
          "    nest_limit: 10,",
          "    flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('P')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_escape();",
          "    assert_eq!(result, Err(Error::new(ERR_UNICODE_CLASS_UNSUPPORTED)));"
        ],
        "code": [
          "{",
          "    let pattern = r\"\\p{L}\";",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('p')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_escape();",
          "    let pattern = r\"\\d\";",
          "    let config = Config {",
          "    nest_limit: 10,",
          "    flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('d')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_escape();",
          "    assert_eq!(result, Ok(Hir::look(hir::Look::Word)));",
          "    ",
          "    let pattern = r\"\\s\";",
          "    let config = Config {",
          "    nest_limit: 10,",
          "    flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('s')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_escape();",
          "    assert_eq!(result, Ok(Hir::look(hir::Look::Word)));",
          "    ",
          "    let pattern = r\"\\u{002}\";",
          "    let config = Config {",
          "    nest_limit: 10,",
          "    flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('u')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_escape();",
          "    assert_eq!(result, Ok(Hir::looking(hir::Look::WordStart)));",
          "    ",
          "    let pattern = r\"\\x{A}\";",
          "    let config = Config {",
          "    nest_limit: 10,",
          "    flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('x')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_escape();",
          "    assert_eq!(result, Ok(Hir::looking(hir::Look::WordEnd)));",
          "    ",
          "    let pattern = r\"\\p\";",
          "    let config = Config {",
          "    nest_limit: 10,",
          "    flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('P')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_escape();",
          "    assert_eq!(result, Err(Error::new(ERR_UNICODE_CLASS_UNSUPPORTED)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = r\"\\P{L}\";",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('P')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_escape();",
          "}"
        ],
        "oracle": [
          "    let pattern = r\"\\P{L}\";",
          "    let config = Config {",
          "    nest_limit: 10,",
          "    flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('P')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_escape();",
          "    assert_eq!(result, Ok(Hir::look(hir::Look::WordEnd)));"
        ],
        "code": [
          "{",
          "    let pattern = r\"\\P{L}\";",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('P')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_escape();",
          "    let pattern = r\"\\P{L}\";",
          "    let config = Config {",
          "    nest_limit: 10,",
          "    flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('P')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_escape();",
          "    assert_eq!(result, Ok(Hir::look(hir::Look::WordEnd)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]