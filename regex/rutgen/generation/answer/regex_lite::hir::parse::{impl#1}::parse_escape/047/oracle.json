[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"\\\\r\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('r')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    parser.parse_escape().unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(!parser.is_done());",
          "    assert!(parser.char() == Some('r'));",
          "    assert!(parser.char() == Some('r')); // satisfies ch matches 'r' at line 497",
          "    assert!(parser.char() == Some('r')); // satisfies ch matches 'r' at line 502",
          "    assert!(hir::is_meta_character('r') == false);",
          "    assert!(hir::is_escapeable_character('r') == false);",
          "    assert!(parser.parse_escape().is_ok());",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.flags.try_borrow().is_ok());",
          "    assert!(parser.depth.get() == 0);",
          "    assert!(parser.pos.get() == 1);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(parser.config.nest_limit == 10);",
          "    assert!(parser.config.flags.case_insensitive == false);",
          "    assert!(parser.config.flags.multi_line == false);",
          "    assert!(parser.config.flags.dot_matches_new_line == false);",
          "    assert!(parser.config.flags.swap_greed == false);",
          "    assert!(parser.config.flags.crlf == false);",
          "    assert!(parser.config.flags.ignore_whitespace == false);"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"\\\\r\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('r')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    parser.parse_escape().unwrap();",
          "    assert!(!parser.is_done());",
          "    assert!(parser.char() == Some('r'));",
          "    assert!(parser.char() == Some('r')); // satisfies ch matches 'r' at line 497",
          "    assert!(parser.char() == Some('r')); // satisfies ch matches 'r' at line 502",
          "    assert!(hir::is_meta_character('r') == false);",
          "    assert!(hir::is_escapeable_character('r') == false);",
          "    assert!(parser.parse_escape().is_ok());",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.flags.try_borrow().is_ok());",
          "    assert!(parser.depth.get() == 0);",
          "    assert!(parser.pos.get() == 1);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(parser.config.nest_limit == 10);",
          "    assert!(parser.config.flags.case_insensitive == false);",
          "    assert!(parser.config.flags.multi_line == false);",
          "    assert!(parser.config.flags.dot_matches_new_line == false);",
          "    assert!(parser.config.flags.swap_greed == false);",
          "    assert!(parser.config.flags.crlf == false);",
          "    assert!(parser.config.flags.ignore_whitespace == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"\\\\u\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('u')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    parser.parse_escape().unwrap();",
          "}"
        ],
        "oracle": [
          "    parser.is_done() == false",
          "    parser.char() == 'u'",
          "    parser.char() == 'p'",
          "    parser.char() == 'd'",
          "    parser.char() == 'D'",
          "    parser.char() == 'x'",
          "    parser.char() == 'u'",
          "    parser.char() == 'U'",
          "    parser.char() == 's'",
          "    parser.char() == 'P'",
          "    parser.char() == 'S'",
          "    parser.char() == 'w'",
          "    parser.hir.is_meta_character(parser.char()) == false",
          "    parser.hir.is_escapeable_character(parser.char()) == false",
          "    parser.char() == 'r'",
          "    parser.char() == 'r'",
          "    parser.parse_escape() == Ok(parser.parse_perl_class())"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"\\\\u\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('u')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    parser.parse_escape().unwrap();",
          "    parser.is_done() == false",
          "    parser.char() == 'u'",
          "    parser.char() == 'p'",
          "    parser.char() == 'd'",
          "    parser.char() == 'D'",
          "    parser.char() == 'x'",
          "    parser.char() == 'u'",
          "    parser.char() == 'U'",
          "    parser.char() == 's'",
          "    parser.char() == 'P'",
          "    parser.char() == 'S'",
          "    parser.char() == 'w'",
          "    parser.hir.is_meta_character(parser.char()) == false",
          "    parser.hir.is_escapeable_character(parser.char()) == false",
          "    parser.char() == 'r'",
          "    parser.char() == 'r'",
          "    parser.parse_escape() == Ok(parser.parse_perl_class())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"\\\\x\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('x')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    parser.parse_escape().unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char.get(), Some('x'));",
          "    assert!(!parser.is_done());",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.flags.borrow().case_insensitive == false);",
          "    assert!(parser.flags.borrow().multi_line == false);",
          "    assert!(parser.flags.borrow().dot_matches_new_line == false);",
          "    assert!(parser.flags.borrow().swap_greed == false);",
          "    assert!(parser.flags.borrow().crlf == false);",
          "    assert!(parser.flags.borrow().ignore_whitespace == false);",
          "    assert!(parser.capture_names.borrow().is_empty());"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"\\\\x\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('x')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    parser.parse_escape().unwrap();",
          "    assert_eq!(parser.char.get(), Some('x'));",
          "    assert!(!parser.is_done());",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.flags.borrow().case_insensitive == false);",
          "    assert!(parser.flags.borrow().multi_line == false);",
          "    assert!(parser.flags.borrow().dot_matches_new_line == false);",
          "    assert!(parser.flags.borrow().swap_greed == false);",
          "    assert!(parser.flags.borrow().crlf == false);",
          "    assert!(parser.flags.borrow().ignore_whitespace == false);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"\\\\D\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('D')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    parser.parse_escape().unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(parser.char.get() == Some('D'));",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert!(parser.depth.get() == 0);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.flags.borrow() == &Flags::default());",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(parser.parse_escape().is_ok());",
          "    assert_eq!(parser.parse_escape().unwrap().kind(), &HirKind::PerlClass);",
          "    assert!(parser.is_done() == false);"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"\\\\D\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('D')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    parser.parse_escape().unwrap();",
          "    assert!(parser.char.get() == Some('D'));",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert!(parser.depth.get() == 0);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.flags.borrow() == &Flags::default());",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(parser.parse_escape().is_ok());",
          "    assert_eq!(parser.parse_escape().unwrap().kind(), &HirKind::PerlClass);",
          "    assert!(parser.is_done() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"\\\\d\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('d')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    parser.parse_escape().unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char.get(), Some('d'));",
          "    assert!(!parser.is_done());",
          "    assert!(parser.parse_escape().is_ok());",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.flags.borrow(), &Flags::default());",
          "    assert!(parser.capture_names.borrow().is_empty());"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"\\\\d\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('d')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    parser.parse_escape().unwrap();",
          "    assert_eq!(parser.char.get(), Some('d'));",
          "    assert!(!parser.is_done());",
          "    assert!(parser.parse_escape().is_ok());",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.flags.borrow(), &Flags::default());",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"\\\\P\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('P')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    parser.parse_escape().unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.is_done(), false);",
          "    assert_ne!(parser.char(), Some('0'));",
          "    assert!(matches!(parser.char(), Some('w')));",
          "    assert!(matches!(parser.char(), Some('p')));",
          "    assert!(matches!(parser.char(), Some('d')));",
          "    assert!(matches!(parser.char(), Some('D')));",
          "    assert!(matches!(parser.char(), Some('u')));",
          "    assert!(matches!(parser.char(), Some('x')));",
          "    assert!(matches!(parser.char(), Some('U')));",
          "    assert!(matches!(parser.char(), Some('s')));",
          "    assert!(matches!(parser.char(), Some('P')));",
          "    assert!(matches!(parser.char(), Some('S')));",
          "    assert!(matches!(parser.char(), Some('W')));",
          "    assert!(matches!(parser.char(), ch) if ch ==  parse_escape_next_character());",
          "    assert!(!hir::is_meta_character(parser.char().unwrap()));",
          "    assert!(!hir::is_escapeable_character(parser.char().unwrap()));",
          "    assert!(matches!(parser.char(), Some('r')));",
          "    assert!(matches!(parser.char(), Some('r')));"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"\\\\P\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('P')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    parser.parse_escape().unwrap();",
          "    assert_eq!(parser.is_done(), false);",
          "    assert_ne!(parser.char(), Some('0'));",
          "    assert!(matches!(parser.char(), Some('w')));",
          "    assert!(matches!(parser.char(), Some('p')));",
          "    assert!(matches!(parser.char(), Some('d')));",
          "    assert!(matches!(parser.char(), Some('D')));",
          "    assert!(matches!(parser.char(), Some('u')));",
          "    assert!(matches!(parser.char(), Some('x')));",
          "    assert!(matches!(parser.char(), Some('U')));",
          "    assert!(matches!(parser.char(), Some('s')));",
          "    assert!(matches!(parser.char(), Some('P')));",
          "    assert!(matches!(parser.char(), Some('S')));",
          "    assert!(matches!(parser.char(), Some('W')));",
          "    assert!(matches!(parser.char(), ch) if ch ==  parse_escape_next_character());",
          "    assert!(!hir::is_meta_character(parser.char().unwrap()));",
          "    assert!(!hir::is_escapeable_character(parser.char().unwrap()));",
          "    assert!(matches!(parser.char(), Some('r')));",
          "    assert!(matches!(parser.char(), Some('r')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"\\\\s\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('s')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    parser.parse_escape().unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char.get(), Some('s'));",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert_eq!(parser.flags.borrow(), &Flags::default());",
          "    assert!(parser.depth.get() == 0);",
          "    assert!(parser.is_done() == false);",
          "    assert!(parser.parse_escape().is_ok());",
          "    assert!(parser.parse_perl_class().is_ok());",
          "    assert_err!(parser.parse_escape(), Error::new(ERR_UNICODE_CLASS_UNSUPPORTED));",
          "    assert_err!(parser.parse_escape(), Error::new(ERR_BACKREF_UNSUPPORTED));",
          "    assert!(parser.hir_char('s').kind == HirKind::Class(posix_class(\"space\").unwrap()));",
          "    assert_eq!(parser.char.get(), Some('s'));",
          "    assert_eq!(parser.hir_char('r').kind, HirKind::Look(Look::Word));",
          "    assert_err!(parser.parse_escape(), Error::new(ERR_ESCAPE_UNRECOGNIZED));",
          "    assert_eq!(parser.char.get(), Some('r'));"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"\\\\s\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('s')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    parser.parse_escape().unwrap();",
          "    assert_eq!(parser.char.get(), Some('s'));",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert_eq!(parser.flags.borrow(), &Flags::default());",
          "    assert!(parser.depth.get() == 0);",
          "    assert!(parser.is_done() == false);",
          "    assert!(parser.parse_escape().is_ok());",
          "    assert!(parser.parse_perl_class().is_ok());",
          "    assert_err!(parser.parse_escape(), Error::new(ERR_UNICODE_CLASS_UNSUPPORTED));",
          "    assert_err!(parser.parse_escape(), Error::new(ERR_BACKREF_UNSUPPORTED));",
          "    assert!(parser.hir_char('s').kind == HirKind::Class(posix_class(\"space\").unwrap()));",
          "    assert_eq!(parser.char.get(), Some('s'));",
          "    assert_eq!(parser.hir_char('r').kind, HirKind::Look(Look::Word));",
          "    assert_err!(parser.parse_escape(), Error::new(ERR_ESCAPE_UNRECOGNIZED));",
          "    assert_eq!(parser.char.get(), Some('r'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"\\\\S\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('S')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    parser.parse_escape().unwrap();",
          "}"
        ],
        "oracle": [
          "    parser.is_done() == false",
          "    parser.char() == 'S'",
          "    parser.char() != '0'..='9'",
          "    parser.char() == 'S'",
          "    parser.char() == 'p'",
          "    parser.char() == 'd'",
          "    parser.char() == 'D'",
          "    parser.char() == 'u'",
          "    parser.char() == 'x'",
          "    parser.char() == 'U'",
          "    parser.char() == 's'",
          "    parser.char() == 'P'",
          "    parser.char() == 'S'",
          "    parser.char() != '\\\\'",
          "    hir::is_meta_character(parser.char()) == false",
          "    hir::is_escapeable_character(parser.char()) == false",
          "    parser.char() == 'r'",
          "    parser.char() == 'r'"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"\\\\S\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('S')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    parser.parse_escape().unwrap();",
          "    parser.is_done() == false",
          "    parser.char() == 'S'",
          "    parser.char() != '0'..='9'",
          "    parser.char() == 'S'",
          "    parser.char() == 'p'",
          "    parser.char() == 'd'",
          "    parser.char() == 'D'",
          "    parser.char() == 'u'",
          "    parser.char() == 'x'",
          "    parser.char() == 'U'",
          "    parser.char() == 's'",
          "    parser.char() == 'P'",
          "    parser.char() == 'S'",
          "    parser.char() != '\\\\'",
          "    hir::is_meta_character(parser.char()) == false",
          "    hir::is_escapeable_character(parser.char()) == false",
          "    parser.char() == 'r'",
          "    parser.char() == 'r'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"\\\\w\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('w')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    parser.parse_escape().unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(!parser.is_done());",
          "    assert!(parser.char() == Some('w'));",
          "    assert!(parser.char() != Some('0'));",
          "    assert!(parser.char() == Some('p') || parser.char() == Some('d') || parser.char() == Some('D') || parser.char() == Some('u') || parser.char() == Some('x') || parser.char() == Some('U') || parser.char() == Some('s') || parser.char() == Some('P') || parser.char() == Some('S') || parser.char() == Some('W'));",
          "    assert!(parser.char() != Some('r'));",
          "    assert!(!hir::is_meta_character('w'));",
          "    assert!(!hir::is_escapeable_character('w'));",
          "    parser.char.set(Some('r'));",
          "    assert!(parser.hir_char('r').is_ok());"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"\\\\w\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('w')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    parser.parse_escape().unwrap();",
          "    assert!(!parser.is_done());",
          "    assert!(parser.char() == Some('w'));",
          "    assert!(parser.char() != Some('0'));",
          "    assert!(parser.char() == Some('p') || parser.char() == Some('d') || parser.char() == Some('D') || parser.char() == Some('u') || parser.char() == Some('x') || parser.char() == Some('U') || parser.char() == Some('s') || parser.char() == Some('P') || parser.char() == Some('S') || parser.char() == Some('W'));",
          "    assert!(parser.char() != Some('r'));",
          "    assert!(!hir::is_meta_character('w'));",
          "    assert!(!hir::is_escapeable_character('w'));",
          "    parser.char.set(Some('r'));",
          "    assert!(parser.hir_char('r').is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"\\\\W\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('W')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    parser.parse_escape().unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char.get(), Some('W'));",
          "    assert!(parser.pos.get() > 0);",
          "    assert!(parser.capture_index.get() == 0);",
          "    assert!(parser.flags.borrow().case_insensitive == false);",
          "    assert!(parser.flags.borrow().multi_line == false);",
          "    assert!(parser.flags.borrow().dot_matches_new_line == false);",
          "    assert!(parser.flags.borrow().swap_greed == false);",
          "    assert!(parser.flags.borrow().crlf == false);",
          "    assert!(parser.flags.borrow().ignore_whitespace == false);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(parser.depth.get() == 0);",
          "    assert!(parser.is_done() == false);"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"\\\\W\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('W')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    parser.parse_escape().unwrap();",
          "    assert_eq!(parser.char.get(), Some('W'));",
          "    assert!(parser.pos.get() > 0);",
          "    assert!(parser.capture_index.get() == 0);",
          "    assert!(parser.flags.borrow().case_insensitive == false);",
          "    assert!(parser.flags.borrow().multi_line == false);",
          "    assert!(parser.flags.borrow().dot_matches_new_line == false);",
          "    assert!(parser.flags.borrow().swap_greed == false);",
          "    assert!(parser.flags.borrow().crlf == false);",
          "    assert!(parser.flags.borrow().ignore_whitespace == false);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(parser.depth.get() == 0);",
          "    assert!(parser.is_done() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]