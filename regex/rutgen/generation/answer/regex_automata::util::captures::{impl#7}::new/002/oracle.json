[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = GroupInfo::new(vec![",
          "        vec![Some(\"named_group\")],",
          "        vec![None],",
          "    ]);",
          "    let _ = result.unwrap_err(); // Expected to trigger Err(GroupInfoError::first_must_be_unnamed)",
          "}"
        ],
        "oracle": [
          "    let result = GroupInfo::new(vec![vec![Some(\"named_group\")], vec![None]]);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind, GroupInfoErrorKind::FirstMustBeUnnamed { pattern: PatternID::new(0).unwrap() });"
        ],
        "code": [
          "{",
          "    let result = GroupInfo::new(vec![",
          "        vec![Some(\"named_group\")],",
          "        vec![None],",
          "    ]);",
          "    let _ = result.unwrap_err(); // Expected to trigger Err(GroupInfoError::first_must_be_unnamed)",
          "    let result = GroupInfo::new(vec![vec![Some(\"named_group\")], vec![None]]);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind, GroupInfoErrorKind::FirstMustBeUnnamed { pattern: PatternID::new(0).unwrap() });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = GroupInfo::new(vec![",
          "        vec![Some(\"first_group\"), Some(\"second_group\")],",
          "        vec![None, None],",
          "    ]);",
          "    let _ = result.unwrap_err(); // Expected to trigger Err(GroupInfoError::first_must_be_unnamed)",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(GroupInfo::new(vec![vec![Some(\"first_group\"), Some(\"second_group\")], vec![None, None]]), Err(GroupInfoError::first_must_be_unnamed(_)));"
        ],
        "code": [
          "{",
          "    let result = GroupInfo::new(vec![",
          "        vec![Some(\"first_group\"), Some(\"second_group\")],",
          "        vec![None, None],",
          "    ]);",
          "    let _ = result.unwrap_err(); // Expected to trigger Err(GroupInfoError::first_must_be_unnamed)",
          "    assert!(matches!(GroupInfo::new(vec![vec![Some(\"first_group\"), Some(\"second_group\")], vec![None, None]]), Err(GroupInfoError::first_must_be_unnamed(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = GroupInfo::new(vec![",
          "        vec![Some(\"first_named\")],",
          "        vec![None, Some(\"second_named\")],",
          "    ]);",
          "    let _ = result.unwrap_err(); // Expected to trigger Err(GroupInfoError::first_must_be_unnamed)",
          "}"
        ],
        "oracle": [
          "    let result = GroupInfo::new(vec![vec![Some(\"first_named\")], vec![None, Some(\"second_named\")]]);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind, GroupInfoErrorKind::FirstMustBeUnnamed { pattern: PatternID::new(0).unwrap() });"
        ],
        "code": [
          "{",
          "    let result = GroupInfo::new(vec![",
          "        vec![Some(\"first_named\")],",
          "        vec![None, Some(\"second_named\")],",
          "    ]);",
          "    let _ = result.unwrap_err(); // Expected to trigger Err(GroupInfoError::first_must_be_unnamed)",
          "    let result = GroupInfo::new(vec![vec![Some(\"first_named\")], vec![None, Some(\"second_named\")]]);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind, GroupInfoErrorKind::FirstMustBeUnnamed { pattern: PatternID::new(0).unwrap() });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]