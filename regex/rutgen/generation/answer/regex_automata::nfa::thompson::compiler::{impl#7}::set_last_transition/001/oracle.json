[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut utf8_node = Utf8Node {",
          "        trans: Vec::new(),",
          "        last: Some(Utf8LastTransition { start: 10, end: 20 }),",
          "    };",
          "    let next_state = StateID(0);",
          "    utf8_node.set_last_transition(next_state);",
          "}"
        ],
        "oracle": [
          "    utf8_node.last.is_none() == true",
          "    utf8_node.trans.len() == 1",
          "    utf8_node.trans[0].start == 10",
          "    utf8_node.trans[0].end == 20",
          "    utf8_node.trans[0].next == next_state"
        ],
        "code": [
          "{",
          "    let mut utf8_node = Utf8Node {",
          "        trans: Vec::new(),",
          "        last: Some(Utf8LastTransition { start: 10, end: 20 }),",
          "    };",
          "    let next_state = StateID(0);",
          "    utf8_node.set_last_transition(next_state);",
          "    utf8_node.last.is_none() == true",
          "    utf8_node.trans.len() == 1",
          "    utf8_node.trans[0].start == 10",
          "    utf8_node.trans[0].end == 20",
          "    utf8_node.trans[0].next == next_state",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut utf8_node = Utf8Node {",
          "        trans: Vec::new(),",
          "        last: Some(Utf8LastTransition { start: 0, end: 0 }),",
          "    };",
          "    let next_state = StateID(1);",
          "    utf8_node.set_last_transition(next_state);",
          "}"
        ],
        "oracle": [
          "    utf8_node.trans.len() == 1",
          "    utf8_node.trans[0].start == 0",
          "    utf8_node.trans[0].end == 0",
          "    utf8_node.trans[0].next == StateID(1)"
        ],
        "code": [
          "{",
          "    let mut utf8_node = Utf8Node {",
          "        trans: Vec::new(),",
          "        last: Some(Utf8LastTransition { start: 0, end: 0 }),",
          "    };",
          "    let next_state = StateID(1);",
          "    utf8_node.set_last_transition(next_state);",
          "    utf8_node.trans.len() == 1",
          "    utf8_node.trans[0].start == 0",
          "    utf8_node.trans[0].end == 0",
          "    utf8_node.trans[0].next == StateID(1)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut utf8_node = Utf8Node {",
          "        trans: Vec::new(),",
          "        last: Some(Utf8LastTransition { start: 255, end: 255 }),",
          "    };",
          "    let next_state = StateID(2);",
          "    utf8_node.set_last_transition(next_state);",
          "}"
        ],
        "oracle": [
          "    utf8_node.trans.len() == 1",
          "    utf8_node.trans[0].start == 255",
          "    utf8_node.trans[0].end == 255",
          "    utf8_node.trans[0].next == StateID(2)",
          "    utf8_node.last.is_none()"
        ],
        "code": [
          "{",
          "    let mut utf8_node = Utf8Node {",
          "        trans: Vec::new(),",
          "        last: Some(Utf8LastTransition { start: 255, end: 255 }),",
          "    };",
          "    let next_state = StateID(2);",
          "    utf8_node.set_last_transition(next_state);",
          "    utf8_node.trans.len() == 1",
          "    utf8_node.trans[0].start == 255",
          "    utf8_node.trans[0].end == 255",
          "    utf8_node.trans[0].next == StateID(2)",
          "    utf8_node.last.is_none()",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut utf8_node = Utf8Node {",
          "        trans: Vec::new(),",
          "        last: Some(Utf8LastTransition { start: 0, end: 255 }),",
          "    };",
          "    let next_state = StateID(3);",
          "    utf8_node.set_last_transition(next_state);",
          "}"
        ],
        "oracle": [
          "    utf8_node.trans.len() == 1",
          "    utf8_node.trans[0].start == 0",
          "    utf8_node.trans[0].end == 255",
          "    utf8_node.trans[0].next == StateID(3)"
        ],
        "code": [
          "{",
          "    let mut utf8_node = Utf8Node {",
          "        trans: Vec::new(),",
          "        last: Some(Utf8LastTransition { start: 0, end: 255 }),",
          "    };",
          "    let next_state = StateID(3);",
          "    utf8_node.set_last_transition(next_state);",
          "    utf8_node.trans.len() == 1",
          "    utf8_node.trans[0].start == 0",
          "    utf8_node.trans[0].end == 255",
          "    utf8_node.trans[0].next == StateID(3)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut utf8_node = Utf8Node {",
          "        trans: Vec::new(),",
          "        last: Some(Utf8LastTransition { start: 100, end: 150 }),",
          "    };",
          "    let next_state = StateID(4);",
          "    utf8_node.set_last_transition(next_state);",
          "}"
        ],
        "oracle": [
          "    utf8_node.trans.len() == 1",
          "    utf8_node.trans[0].start == 100",
          "    utf8_node.trans[0].end == 150",
          "    utf8_node.trans[0].next == StateID(4)",
          "    utf8_node.last.is_none()"
        ],
        "code": [
          "{",
          "    let mut utf8_node = Utf8Node {",
          "        trans: Vec::new(),",
          "        last: Some(Utf8LastTransition { start: 100, end: 150 }),",
          "    };",
          "    let next_state = StateID(4);",
          "    utf8_node.set_last_transition(next_state);",
          "    utf8_node.trans.len() == 1",
          "    utf8_node.trans[0].start == 100",
          "    utf8_node.trans[0].end == 150",
          "    utf8_node.trans[0].next == StateID(4)",
          "    utf8_node.last.is_none()",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]