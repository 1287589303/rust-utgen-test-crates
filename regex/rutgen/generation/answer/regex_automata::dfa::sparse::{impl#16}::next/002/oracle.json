[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestTransition {",
          "        sparse: Vec<u8>,",
          "        classes: ByteClasses,",
          "        state_len: usize,",
          "        pattern_len: usize,",
          "    }",
          "",
          "    let transitions = TestTransition {",
          "        sparse: vec![0u8; 10], // Ensure non-empty sparse (10 bytes)",
          "        classes: ByteClasses::new(),",
          "        state_len: 1,",
          "        pattern_len: 0,",
          "    };",
          "",
          "    let id = StateID(0); // Valid ID within range",
          "    let state_iter = StateIter {",
          "        trans: &transitions,",
          "        id: id.0,",
          "    };",
          "",
          "    let _ = state_iter.next();",
          "}"
        ],
        "oracle": [
          "    let transitions = TestTransition { sparse: vec![0u8; 10], classes: ByteClasses::new(), state_len: 1, pattern_len: 0 };",
          "    let id = StateID(0);",
          "    let state_iter = StateIter { trans: &transitions, id: id.0 };",
          "    assert_eq!(state_iter.next().is_some(), true);",
          "    assert_eq!(state_iter.id, 10);"
        ],
        "code": [
          "{",
          "    struct TestTransition {",
          "        sparse: Vec<u8>,",
          "        classes: ByteClasses,",
          "        state_len: usize,",
          "        pattern_len: usize,",
          "    }",
          "",
          "    let transitions = TestTransition {",
          "        sparse: vec![0u8; 10], // Ensure non-empty sparse (10 bytes)",
          "        classes: ByteClasses::new(),",
          "        state_len: 1,",
          "        pattern_len: 0,",
          "    };",
          "",
          "    let id = StateID(0); // Valid ID within range",
          "    let state_iter = StateIter {",
          "        trans: &transitions,",
          "        id: id.0,",
          "    };",
          "",
          "    let _ = state_iter.next();",
          "    let transitions = TestTransition { sparse: vec![0u8; 10], classes: ByteClasses::new(), state_len: 1, pattern_len: 0 };",
          "    let id = StateID(0);",
          "    let state_iter = StateIter { trans: &transitions, id: id.0 };",
          "    assert_eq!(state_iter.next().is_some(), true);",
          "    assert_eq!(state_iter.id, 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestTransition {",
          "        sparse: Vec<u8>,",
          "        classes: ByteClasses,",
          "        state_len: usize,",
          "        pattern_len: usize,",
          "    }",
          "",
          "    let sparse_data = vec![0u8; 10]; // Ensure non-empty sparse (10 bytes)",
          "    let transitions = TestTransition {",
          "        sparse: sparse_data.clone(),",
          "        classes: ByteClasses::new(),",
          "        state_len: 1,",
          "        pattern_len: 0,",
          "    };",
          "",
          "    let id = StateID((transitions.sparse.len() / 2) as usize - 1); // Max valid ID",
          "    let state_iter = StateIter {",
          "        trans: &transitions,",
          "        id: id.0,",
          "    };",
          "",
          "    let _ = state_iter.next();",
          "}"
        ],
        "oracle": [
          "    let transitions = TestTransition {",
          "    sparse: vec![0u8; 10],",
          "    classes: ByteClasses::new(),",
          "    state_len: 1,",
          "    pattern_len: 0,",
          "    };",
          "    ",
          "    let id = StateID((transitions.sparse.len() / 2) as usize - 1);",
          "    let state_iter = StateIter {",
          "    trans: &transitions,",
          "    id: id.0,",
          "    };",
          "    ",
          "    assert!(state_iter.next().is_some());"
        ],
        "code": [
          "{",
          "    struct TestTransition {",
          "        sparse: Vec<u8>,",
          "        classes: ByteClasses,",
          "        state_len: usize,",
          "        pattern_len: usize,",
          "    }",
          "",
          "    let sparse_data = vec![0u8; 10]; // Ensure non-empty sparse (10 bytes)",
          "    let transitions = TestTransition {",
          "        sparse: sparse_data.clone(),",
          "        classes: ByteClasses::new(),",
          "        state_len: 1,",
          "        pattern_len: 0,",
          "    };",
          "",
          "    let id = StateID((transitions.sparse.len() / 2) as usize - 1); // Max valid ID",
          "    let state_iter = StateIter {",
          "        trans: &transitions,",
          "        id: id.0,",
          "    };",
          "",
          "    let _ = state_iter.next();",
          "    let transitions = TestTransition {",
          "    sparse: vec![0u8; 10],",
          "    classes: ByteClasses::new(),",
          "    state_len: 1,",
          "    pattern_len: 0,",
          "    };",
          "    ",
          "    let id = StateID((transitions.sparse.len() / 2) as usize - 1);",
          "    let state_iter = StateIter {",
          "    trans: &transitions,",
          "    id: id.0,",
          "    };",
          "    ",
          "    assert!(state_iter.next().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]