[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let tt = Transitions {",
          "        sparse: vec![1, 2, 3],",
          "        classes: ByteClasses::default(),",
          "        state_len: 5,",
          "        pattern_len: 2,",
          "    };",
          "    let st = StartTable {",
          "        table: vec![0, 1, 2, 3, 4, 5, 6, 7],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap::default(),",
          "        stride: 4,",
          "        pattern_len: Some(2),",
          "        universal_start_unanchored: Some(1),",
          "        universal_start_anchored: Some(2),",
          "    };",
          "    let flags = Flags {",
          "        has_empty: true,",
          "        is_utf8: false,",
          "        is_always_start_anchored: false,",
          "    };",
          "    let special = Special {",
          "        max: 4,",
          "        quit_id: 5,",
          "        min_match: 1,",
          "        max_match: 3,",
          "        min_accel: 0,",
          "        max_accel: 2,",
          "        min_start: 0,",
          "        max_start: 4,",
          "    };",
          "    let dfa: DFA<&[u8]> = DFA {",
          "        tt,",
          "        st,",
          "        special,",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags,",
          "    };",
          "    let owned_dfa = dfa.to_owned();",
          "}"
        ],
        "oracle": [
          "    let expected_tt = Transitions {",
          "    sparse: vec![1, 2, 3],",
          "    classes: ByteClasses::default(),",
          "    state_len: 5,",
          "    pattern_len: 2,",
          "    };",
          "    let expected_st = StartTable {",
          "    table: vec![0, 1, 2, 3, 4, 5, 6, 7],",
          "    kind: StartKind::Both,",
          "    start_map: StartByteMap::default(),",
          "    stride: 4,",
          "    pattern_len: Some(2),",
          "    universal_start_unanchored: Some(1),",
          "    universal_start_anchored: Some(2),",
          "    };",
          "    let expected_flags = Flags {",
          "    has_empty: true,",
          "    is_utf8: false,",
          "    is_always_start_anchored: false,",
          "    };",
          "    let expected_special = Special {",
          "    max: 4,",
          "    quit_id: 5,",
          "    min_match: 1,",
          "    max_match: 3,",
          "    min_accel: 0,",
          "    max_accel: 2,",
          "    min_start: 0,",
          "    max_start: 4,",
          "    };",
          "    let expected_owned_dfa = DFA {",
          "    tt: expected_tt.to_owned(),",
          "    st: expected_st.to_owned(),",
          "    special: expected_special,",
          "    pre: None,",
          "    quitset: ByteSet::default(),",
          "    flags: expected_flags,",
          "    };",
          "    assert_eq!(owned_dfa, expected_owned_dfa);"
        ],
        "code": [
          "{",
          "    let tt = Transitions {",
          "        sparse: vec![1, 2, 3],",
          "        classes: ByteClasses::default(),",
          "        state_len: 5,",
          "        pattern_len: 2,",
          "    };",
          "    let st = StartTable {",
          "        table: vec![0, 1, 2, 3, 4, 5, 6, 7],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap::default(),",
          "        stride: 4,",
          "        pattern_len: Some(2),",
          "        universal_start_unanchored: Some(1),",
          "        universal_start_anchored: Some(2),",
          "    };",
          "    let flags = Flags {",
          "        has_empty: true,",
          "        is_utf8: false,",
          "        is_always_start_anchored: false,",
          "    };",
          "    let special = Special {",
          "        max: 4,",
          "        quit_id: 5,",
          "        min_match: 1,",
          "        max_match: 3,",
          "        min_accel: 0,",
          "        max_accel: 2,",
          "        min_start: 0,",
          "        max_start: 4,",
          "    };",
          "    let dfa: DFA<&[u8]> = DFA {",
          "        tt,",
          "        st,",
          "        special,",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags,",
          "    };",
          "    let owned_dfa = dfa.to_owned();",
          "    let expected_tt = Transitions {",
          "    sparse: vec![1, 2, 3],",
          "    classes: ByteClasses::default(),",
          "    state_len: 5,",
          "    pattern_len: 2,",
          "    };",
          "    let expected_st = StartTable {",
          "    table: vec![0, 1, 2, 3, 4, 5, 6, 7],",
          "    kind: StartKind::Both,",
          "    start_map: StartByteMap::default(),",
          "    stride: 4,",
          "    pattern_len: Some(2),",
          "    universal_start_unanchored: Some(1),",
          "    universal_start_anchored: Some(2),",
          "    };",
          "    let expected_flags = Flags {",
          "    has_empty: true,",
          "    is_utf8: false,",
          "    is_always_start_anchored: false,",
          "    };",
          "    let expected_special = Special {",
          "    max: 4,",
          "    quit_id: 5,",
          "    min_match: 1,",
          "    max_match: 3,",
          "    min_accel: 0,",
          "    max_accel: 2,",
          "    min_start: 0,",
          "    max_start: 4,",
          "    };",
          "    let expected_owned_dfa = DFA {",
          "    tt: expected_tt.to_owned(),",
          "    st: expected_st.to_owned(),",
          "    special: expected_special,",
          "    pre: None,",
          "    quitset: ByteSet::default(),",
          "    flags: expected_flags,",
          "    };",
          "    assert_eq!(owned_dfa, expected_owned_dfa);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let tt = Transitions {",
          "        sparse: &[1, 2, 3],",
          "        classes: ByteClasses::default(),",
          "        state_len: 5,",
          "        pattern_len: 2,",
          "    };",
          "    let st = StartTable {",
          "        table: &[0, 1, 2, 3, 4, 5, 6, 7],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap::default(),",
          "        stride: 4,",
          "        pattern_len: Some(2),",
          "        universal_start_unanchored: Some(1),",
          "        universal_start_anchored: Some(2),",
          "    };",
          "    let flags = Flags {",
          "        has_empty: true,",
          "        is_utf8: false,",
          "        is_always_start_anchored: false,",
          "    };",
          "    let special = Special {",
          "        max: 4,",
          "        quit_id: 5,",
          "        min_match: 1,",
          "        max_match: 3,",
          "        min_accel: 0,",
          "        max_accel: 2,",
          "        min_start: 0,",
          "        max_start: 4,",
          "    };",
          "    let dfa: DFA<&[u8]> = DFA {",
          "        tt,",
          "        st,",
          "        special,",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags,",
          "    };",
          "    let owned_dfa = dfa.to_owned();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(owned_dfa.tt.sparse, vec![1, 2, 3]);",
          "    assert_eq!(owned_dfa.st.table, vec![0, 1, 2, 3, 4, 5, 6, 7]);",
          "    assert_eq!(owned_dfa.special.max, 4);",
          "    assert_eq!(owned_dfa.special.quit_id, 5);",
          "    assert_eq!(owned_dfa.pre, None);",
          "    assert_eq!(owned_dfa.quitset, ByteSet::default());",
          "    assert_eq!(owned_dfa.flags.has_empty, true);",
          "    assert_eq!(owned_dfa.flags.is_utf8, false);",
          "    assert_eq!(owned_dfa.flags.is_always_start_anchored, false);",
          "    assert_eq!(owned_dfa.st.pattern_len, Some(2));",
          "    assert_eq!(owned_dfa.tt.state_len, 5);",
          "    assert_eq!(owned_dfa.special.min_match, 1);",
          "    assert_eq!(owned_dfa.special.max_match, 3);",
          "    assert_eq!(owned_dfa.special.min_accel, 0);",
          "    assert_eq!(owned_dfa.special.max_accel, 2);",
          "    assert_eq!(owned_dfa.special.min_start, 0);",
          "    assert_eq!(owned_dfa.special.max_start, 4);",
          "    assert_eq!(owned_dfa.st.kind, StartKind::Both);",
          "    assert_eq!(owned_dfa.st.universal_start_unanchored, Some(1));",
          "    assert_eq!(owned_dfa.st.universal_start_anchored, Some(2));"
        ],
        "code": [
          "{",
          "    let tt = Transitions {",
          "        sparse: &[1, 2, 3],",
          "        classes: ByteClasses::default(),",
          "        state_len: 5,",
          "        pattern_len: 2,",
          "    };",
          "    let st = StartTable {",
          "        table: &[0, 1, 2, 3, 4, 5, 6, 7],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap::default(),",
          "        stride: 4,",
          "        pattern_len: Some(2),",
          "        universal_start_unanchored: Some(1),",
          "        universal_start_anchored: Some(2),",
          "    };",
          "    let flags = Flags {",
          "        has_empty: true,",
          "        is_utf8: false,",
          "        is_always_start_anchored: false,",
          "    };",
          "    let special = Special {",
          "        max: 4,",
          "        quit_id: 5,",
          "        min_match: 1,",
          "        max_match: 3,",
          "        min_accel: 0,",
          "        max_accel: 2,",
          "        min_start: 0,",
          "        max_start: 4,",
          "    };",
          "    let dfa: DFA<&[u8]> = DFA {",
          "        tt,",
          "        st,",
          "        special,",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags,",
          "    };",
          "    let owned_dfa = dfa.to_owned();",
          "    assert_eq!(owned_dfa.tt.sparse, vec![1, 2, 3]);",
          "    assert_eq!(owned_dfa.st.table, vec![0, 1, 2, 3, 4, 5, 6, 7]);",
          "    assert_eq!(owned_dfa.special.max, 4);",
          "    assert_eq!(owned_dfa.special.quit_id, 5);",
          "    assert_eq!(owned_dfa.pre, None);",
          "    assert_eq!(owned_dfa.quitset, ByteSet::default());",
          "    assert_eq!(owned_dfa.flags.has_empty, true);",
          "    assert_eq!(owned_dfa.flags.is_utf8, false);",
          "    assert_eq!(owned_dfa.flags.is_always_start_anchored, false);",
          "    assert_eq!(owned_dfa.st.pattern_len, Some(2));",
          "    assert_eq!(owned_dfa.tt.state_len, 5);",
          "    assert_eq!(owned_dfa.special.min_match, 1);",
          "    assert_eq!(owned_dfa.special.max_match, 3);",
          "    assert_eq!(owned_dfa.special.min_accel, 0);",
          "    assert_eq!(owned_dfa.special.max_accel, 2);",
          "    assert_eq!(owned_dfa.special.min_start, 0);",
          "    assert_eq!(owned_dfa.special.max_start, 4);",
          "    assert_eq!(owned_dfa.st.kind, StartKind::Both);",
          "    assert_eq!(owned_dfa.st.universal_start_unanchored, Some(1));",
          "    assert_eq!(owned_dfa.st.universal_start_anchored, Some(2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]