[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let classes = ByteClasses([0; 256]);",
          "    let transitions = Transitions {",
          "        sparse: vec![0; 256],",
          "        classes,",
          "        state_len: 1,",
          "        pattern_len: 0,",
          "    };",
          "    let start_table = StartTable {",
          "        table: vec![0; 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap::new(),",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let dfa = DFA {",
          "        tt: transitions,",
          "        st: start_table,",
          "        special: Special {",
          "            max: 0,",
          "            quit_id: 0,",
          "            min_match: 0,",
          "            max_match: 0,",
          "            min_accel: 0,",
          "            max_accel: 0,",
          "            min_start: 0,",
          "            max_start: 0,",
          "        },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags: Flags {",
          "            has_empty: true,",
          "            is_utf8: true,",
          "            is_always_start_anchored: false,",
          "        },",
          "    };",
          "    let _ = dfa.byte_classes();",
          "}"
        ],
        "oracle": [
          "    let classes = ByteClasses([0; 256]);",
          "    let transitions = Transitions {",
          "    sparse: vec![0; 256],",
          "    classes,",
          "    state_len: 1,",
          "    pattern_len: 0,",
          "    };",
          "    let start_table = StartTable {",
          "    table: vec![0; 8],",
          "    kind: StartKind::Both,",
          "    start_map: StartByteMap::new(),",
          "    stride: 1,",
          "    pattern_len: Some(1),",
          "    universal_start_unanchored: None,",
          "    universal_start_anchored: None,",
          "    };",
          "    let dfa = DFA {",
          "    tt: transitions,",
          "    st: start_table,",
          "    special: Special {",
          "    max: 0,",
          "    quit_id: 0,",
          "    min_match: 0,",
          "    max_match: 0,",
          "    min_accel: 0,",
          "    max_accel: 0,",
          "    min_start: 0,",
          "    max_start: 0,",
          "    },",
          "    pre: None,",
          "    quitset: ByteSet([false; 256]),",
          "    flags: Flags {",
          "    has_empty: true,",
          "    is_utf8: true,",
          "    is_always_start_anchored: false,",
          "    },",
          "    };",
          "    assert_eq!(dfa.byte_classes(), &dfa.tt.classes);"
        ],
        "code": [
          "{",
          "    let classes = ByteClasses([0; 256]);",
          "    let transitions = Transitions {",
          "        sparse: vec![0; 256],",
          "        classes,",
          "        state_len: 1,",
          "        pattern_len: 0,",
          "    };",
          "    let start_table = StartTable {",
          "        table: vec![0; 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap::new(),",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let dfa = DFA {",
          "        tt: transitions,",
          "        st: start_table,",
          "        special: Special {",
          "            max: 0,",
          "            quit_id: 0,",
          "            min_match: 0,",
          "            max_match: 0,",
          "            min_accel: 0,",
          "            max_accel: 0,",
          "            min_start: 0,",
          "            max_start: 0,",
          "        },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags: Flags {",
          "            has_empty: true,",
          "            is_utf8: true,",
          "            is_always_start_anchored: false,",
          "        },",
          "    };",
          "    let _ = dfa.byte_classes();",
          "    let classes = ByteClasses([0; 256]);",
          "    let transitions = Transitions {",
          "    sparse: vec![0; 256],",
          "    classes,",
          "    state_len: 1,",
          "    pattern_len: 0,",
          "    };",
          "    let start_table = StartTable {",
          "    table: vec![0; 8],",
          "    kind: StartKind::Both,",
          "    start_map: StartByteMap::new(),",
          "    stride: 1,",
          "    pattern_len: Some(1),",
          "    universal_start_unanchored: None,",
          "    universal_start_anchored: None,",
          "    };",
          "    let dfa = DFA {",
          "    tt: transitions,",
          "    st: start_table,",
          "    special: Special {",
          "    max: 0,",
          "    quit_id: 0,",
          "    min_match: 0,",
          "    max_match: 0,",
          "    min_accel: 0,",
          "    max_accel: 0,",
          "    min_start: 0,",
          "    max_start: 0,",
          "    },",
          "    pre: None,",
          "    quitset: ByteSet([false; 256]),",
          "    flags: Flags {",
          "    has_empty: true,",
          "    is_utf8: true,",
          "    is_always_start_anchored: false,",
          "    },",
          "    };",
          "    assert_eq!(dfa.byte_classes(), &dfa.tt.classes);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let classes = ByteClasses([0; 256]);",
          "    let transitions = Transitions {",
          "        sparse: vec![0; 256],",
          "        classes,",
          "        state_len: 1,",
          "        pattern_len: 0,",
          "    };",
          "    let start_table = StartTable {",
          "        table: vec![0; 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap::new(),",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let dfa = DFA {",
          "        tt: transitions,",
          "        st: start_table,",
          "        special: Special {",
          "            max: 0,",
          "            quit_id: 0,",
          "            min_match: 0,",
          "            max_match: 0,",
          "            min_accel: 0,",
          "            max_accel: 0,",
          "            min_start: 0,",
          "            max_start: 0,",
          "        },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags: Flags {",
          "            has_empty: true,",
          "            is_utf8: true,",
          "            is_always_start_anchored: false,",
          "        },",
          "    };",
          "    let _ = dfa.byte_classes();",
          "}"
        ],
        "oracle": [
          "    let classes = ByteClasses([0; 256]);",
          "    let transitions = Transitions {",
          "    sparse: vec![0; 256],",
          "    classes,",
          "    state_len: 1,",
          "    pattern_len: 0,",
          "    };",
          "    ",
          "    let start_table = StartTable {",
          "    table: vec![0; 8],",
          "    kind: StartKind::Both,",
          "    start_map: StartByteMap::new(),",
          "    stride: 1,",
          "    pattern_len: Some(1),",
          "    universal_start_unanchored: None,",
          "    universal_start_anchored: None,",
          "    };",
          "    ",
          "    let dfa = DFA {",
          "    tt: transitions,",
          "    st: start_table,",
          "    special: Special {",
          "    max: 0,",
          "    quit_id: 0,",
          "    min_match: 0,",
          "    max_match: 0,",
          "    min_accel: 0,",
          "    max_accel: 0,",
          "    min_start: 0,",
          "    max_start: 0,",
          "    },",
          "    pre: None,",
          "    quitset: ByteSet([false; 256]),",
          "    flags: Flags {",
          "    has_empty: true,",
          "    is_utf8: true,",
          "    is_always_start_anchored: false,",
          "    },",
          "    };",
          "    ",
          "    assert_eq!(dfa.byte_classes(), &classes);"
        ],
        "code": [
          "{",
          "    let classes = ByteClasses([0; 256]);",
          "    let transitions = Transitions {",
          "        sparse: vec![0; 256],",
          "        classes,",
          "        state_len: 1,",
          "        pattern_len: 0,",
          "    };",
          "    let start_table = StartTable {",
          "        table: vec![0; 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap::new(),",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let dfa = DFA {",
          "        tt: transitions,",
          "        st: start_table,",
          "        special: Special {",
          "            max: 0,",
          "            quit_id: 0,",
          "            min_match: 0,",
          "            max_match: 0,",
          "            min_accel: 0,",
          "            max_accel: 0,",
          "            min_start: 0,",
          "            max_start: 0,",
          "        },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags: Flags {",
          "            has_empty: true,",
          "            is_utf8: true,",
          "            is_always_start_anchored: false,",
          "        },",
          "    };",
          "    let _ = dfa.byte_classes();",
          "    let classes = ByteClasses([0; 256]);",
          "    let transitions = Transitions {",
          "    sparse: vec![0; 256],",
          "    classes,",
          "    state_len: 1,",
          "    pattern_len: 0,",
          "    };",
          "    ",
          "    let start_table = StartTable {",
          "    table: vec![0; 8],",
          "    kind: StartKind::Both,",
          "    start_map: StartByteMap::new(),",
          "    stride: 1,",
          "    pattern_len: Some(1),",
          "    universal_start_unanchored: None,",
          "    universal_start_anchored: None,",
          "    };",
          "    ",
          "    let dfa = DFA {",
          "    tt: transitions,",
          "    st: start_table,",
          "    special: Special {",
          "    max: 0,",
          "    quit_id: 0,",
          "    min_match: 0,",
          "    max_match: 0,",
          "    min_accel: 0,",
          "    max_accel: 0,",
          "    min_start: 0,",
          "    max_start: 0,",
          "    },",
          "    pre: None,",
          "    quitset: ByteSet([false; 256]),",
          "    flags: Flags {",
          "    has_empty: true,",
          "    is_utf8: true,",
          "    is_always_start_anchored: false,",
          "    },",
          "    };",
          "    ",
          "    assert_eq!(dfa.byte_classes(), &classes);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let classes = ByteClasses([0; 256]);",
          "    let transitions = Transitions {",
          "        sparse: vec![0; 256],",
          "        classes,",
          "        state_len: 257,  // Edge case where we're at max capacity of 257",
          "        pattern_len: 0,",
          "    };",
          "    let start_table = StartTable {",
          "        table: vec![0; 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap::new(),",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let dfa = DFA {",
          "        tt: transitions,",
          "        st: start_table,",
          "        special: Special {",
          "            max: 0,",
          "            quit_id: 0,",
          "            min_match: 0,",
          "            max_match: 0,",
          "            min_accel: 0,",
          "            max_accel: 0,",
          "            min_start: 0,",
          "            max_start: 0,",
          "        },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags: Flags {",
          "            has_empty: true,",
          "            is_utf8: true,",
          "            is_always_start_anchored: false,",
          "        },",
          "    };",
          "    let _ = dfa.byte_classes();",
          "}"
        ],
        "oracle": [
          "    let classes = ByteClasses([0; 256]);",
          "    let dfa = DFA { tt: Transitions { sparse: vec![0; 256], classes, state_len: 257, pattern_len: 0 }, st: StartTable { table: vec![0; 8], kind: StartKind::Both, start_map: StartByteMap::new(), stride: 1, pattern_len: Some(1), universal_start_unanchored: None, universal_start_anchored: None }, special: Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 }, pre: None, quitset: ByteSet([false; 256]), flags: Flags { has_empty: true, is_utf8: true, is_always_start_anchored: false }, };",
          "    assert_eq!(dfa.byte_classes(), &classes);",
          "    ",
          "    let classes = ByteClasses([1; 256]);",
          "    let dfa = DFA { tt: Transitions { sparse: vec![0; 256], classes, state_len: 257, pattern_len: 0 }, st: StartTable { table: vec![0; 8], kind: StartKind::Both, start_map: StartByteMap::new(), stride: 1, pattern_len: Some(1), universal_start_unanchored: None, universal_start_anchored: None }, special: Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 }, pre: None, quitset: ByteSet([false; 256]), flags: Flags { has_empty: true, is_utf8: true, is_always_start_anchored: false }, };",
          "    assert_eq!(dfa.byte_classes(), &classes);",
          "    ",
          "    let classes = ByteClasses([0; 256]);",
          "    let dfa = DFA { tt: Transitions { sparse: vec![0; 256], classes, state_len: 257, pattern_len: 0 }, st: StartTable { table: vec![0; 8], kind: StartKind::Both, start_map: StartByteMap::new(), stride: 1, pattern_len: Some(0), universal_start_unanchored: None, universal_start_anchored: None }, special: Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 }, pre: None, quitset: ByteSet([false; 256]), flags: Flags { has_empty: true, is_utf8: true, is_always_start_anchored: false }, };",
          "    assert_eq!(dfa.byte_classes(), &classes);",
          "    ",
          "    let classes = ByteClasses([255; 256]);",
          "    let dfa = DFA { tt: Transitions { sparse: vec![0; 256], classes, state_len: 257, pattern_len: 0 }, st: StartTable { table: vec![0; 8], kind: StartKind::Both, start_map: StartByteMap::new(), stride: 1, pattern_len: Some(1), universal_start_unanchored: None, universal_start_anchored: None }, special: Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 }, pre: None, quitset: ByteSet([false; 256]), flags: Flags { has_empty: true, is_utf8: true, is_always_start_anchored: false }, };",
          "    assert_eq!(dfa.byte_classes(), &classes);",
          "    ",
          "    let classes = ByteClasses([i as u8; 0..256].try_collect().unwrap());",
          "    let dfa = DFA { tt: Transitions { sparse: vec![0; 256], classes, state_len: 257, pattern_len: 0 }, st: StartTable { table: vec![0; 8], kind: StartKind::Both, start_map: StartByteMap::new(), stride: 1, pattern_len: Some(1), universal_start_unanchored: None, universal_start_anchored: None }, special: Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 }, pre: None, quitset: ByteSet([false; 256]), flags: Flags { has_empty: true, is_utf8: true, is_always_start_anchored: false }, };",
          "    assert_eq!(dfa.byte_classes(), &classes);"
        ],
        "code": [
          "{",
          "    let classes = ByteClasses([0; 256]);",
          "    let transitions = Transitions {",
          "        sparse: vec![0; 256],",
          "        classes,",
          "        state_len: 257,  // Edge case where we're at max capacity of 257",
          "        pattern_len: 0,",
          "    };",
          "    let start_table = StartTable {",
          "        table: vec![0; 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap::new(),",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let dfa = DFA {",
          "        tt: transitions,",
          "        st: start_table,",
          "        special: Special {",
          "            max: 0,",
          "            quit_id: 0,",
          "            min_match: 0,",
          "            max_match: 0,",
          "            min_accel: 0,",
          "            max_accel: 0,",
          "            min_start: 0,",
          "            max_start: 0,",
          "        },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags: Flags {",
          "            has_empty: true,",
          "            is_utf8: true,",
          "            is_always_start_anchored: false,",
          "        },",
          "    };",
          "    let _ = dfa.byte_classes();",
          "    let classes = ByteClasses([0; 256]);",
          "    let dfa = DFA { tt: Transitions { sparse: vec![0; 256], classes, state_len: 257, pattern_len: 0 }, st: StartTable { table: vec![0; 8], kind: StartKind::Both, start_map: StartByteMap::new(), stride: 1, pattern_len: Some(1), universal_start_unanchored: None, universal_start_anchored: None }, special: Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 }, pre: None, quitset: ByteSet([false; 256]), flags: Flags { has_empty: true, is_utf8: true, is_always_start_anchored: false }, };",
          "    assert_eq!(dfa.byte_classes(), &classes);",
          "    ",
          "    let classes = ByteClasses([1; 256]);",
          "    let dfa = DFA { tt: Transitions { sparse: vec![0; 256], classes, state_len: 257, pattern_len: 0 }, st: StartTable { table: vec![0; 8], kind: StartKind::Both, start_map: StartByteMap::new(), stride: 1, pattern_len: Some(1), universal_start_unanchored: None, universal_start_anchored: None }, special: Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 }, pre: None, quitset: ByteSet([false; 256]), flags: Flags { has_empty: true, is_utf8: true, is_always_start_anchored: false }, };",
          "    assert_eq!(dfa.byte_classes(), &classes);",
          "    ",
          "    let classes = ByteClasses([0; 256]);",
          "    let dfa = DFA { tt: Transitions { sparse: vec![0; 256], classes, state_len: 257, pattern_len: 0 }, st: StartTable { table: vec![0; 8], kind: StartKind::Both, start_map: StartByteMap::new(), stride: 1, pattern_len: Some(0), universal_start_unanchored: None, universal_start_anchored: None }, special: Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 }, pre: None, quitset: ByteSet([false; 256]), flags: Flags { has_empty: true, is_utf8: true, is_always_start_anchored: false }, };",
          "    assert_eq!(dfa.byte_classes(), &classes);",
          "    ",
          "    let classes = ByteClasses([255; 256]);",
          "    let dfa = DFA { tt: Transitions { sparse: vec![0; 256], classes, state_len: 257, pattern_len: 0 }, st: StartTable { table: vec![0; 8], kind: StartKind::Both, start_map: StartByteMap::new(), stride: 1, pattern_len: Some(1), universal_start_unanchored: None, universal_start_anchored: None }, special: Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 }, pre: None, quitset: ByteSet([false; 256]), flags: Flags { has_empty: true, is_utf8: true, is_always_start_anchored: false }, };",
          "    assert_eq!(dfa.byte_classes(), &classes);",
          "    ",
          "    let classes = ByteClasses([i as u8; 0..256].try_collect().unwrap());",
          "    let dfa = DFA { tt: Transitions { sparse: vec![0; 256], classes, state_len: 257, pattern_len: 0 }, st: StartTable { table: vec![0; 8], kind: StartKind::Both, start_map: StartByteMap::new(), stride: 1, pattern_len: Some(1), universal_start_unanchored: None, universal_start_anchored: None }, special: Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 }, pre: None, quitset: ByteSet([false; 256]), flags: Flags { has_empty: true, is_utf8: true, is_always_start_anchored: false }, };",
          "    assert_eq!(dfa.byte_classes(), &classes);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]