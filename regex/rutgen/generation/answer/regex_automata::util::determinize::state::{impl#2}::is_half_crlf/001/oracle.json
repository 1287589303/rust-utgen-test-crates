[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State(Arc::new([8, 0, 0, 0])); // 3rd bit set",
          "    let _ = state.is_half_crlf();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.is_half_crlf(), true);",
          "    let state = State(Arc::new([0, 0, 0, 0])); // no bits set",
          "    assert_eq!(state.is_half_crlf(), false);",
          "    let state = State(Arc::new([8, 0, 0, 1])); // 3rd bit set",
          "    assert_eq!(state.is_half_crlf(), true);",
          "    let state = State(Arc::new([8, 0, 1, 0])); // 3rd bit set",
          "    assert_eq!(state.is_half_crlf(), true);",
          "    let state = State(Arc::new([0, 0, 8, 0])); // 3rd bit set at different position",
          "    assert_eq!(state.is_half_crlf(), true);"
        ],
        "code": [
          "{",
          "    let state = State(Arc::new([8, 0, 0, 0])); // 3rd bit set",
          "    let _ = state.is_half_crlf();",
          "    assert_eq!(state.is_half_crlf(), true);",
          "    let state = State(Arc::new([0, 0, 0, 0])); // no bits set",
          "    assert_eq!(state.is_half_crlf(), false);",
          "    let state = State(Arc::new([8, 0, 0, 1])); // 3rd bit set",
          "    assert_eq!(state.is_half_crlf(), true);",
          "    let state = State(Arc::new([8, 0, 1, 0])); // 3rd bit set",
          "    assert_eq!(state.is_half_crlf(), true);",
          "    let state = State(Arc::new([0, 0, 8, 0])); // 3rd bit set at different position",
          "    assert_eq!(state.is_half_crlf(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_zero = State(Arc::new([0, 0, 0, 0])); // 3rd bit not set",
          "    let _ = state_zero.is_half_crlf();",
          "",
          "    let state_one = State(Arc::new([1, 0, 0, 0])); // 3rd bit not set",
          "    let _ = state_one.is_half_crlf();",
          "    ",
          "    let state_seven = State(Arc::new([7, 0, 0, 0])); // 3rd bit not set",
          "    let _ = state_seven.is_half_crlf();",
          "",
          "    let state_fifteen = State(Arc::new([15, 0, 0, 0])); // 3rd bit not set",
          "    let _ = state_fifteen.is_half_crlf();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state_zero.is_half_crlf(), false);",
          "    assert_eq!(state_one.is_half_crlf(), false);",
          "    assert_eq!(state_seven.is_half_crlf(), false);",
          "    assert_eq!(state_fifteen.is_half_crlf(), false);",
          "    ",
          "    let state_eight = State(Arc::new([8, 0, 0, 0])); // 3rd bit set",
          "    assert_eq!(state_eight.is_half_crlf(), true);",
          "    ",
          "    let state_fourteen = State(Arc::new([14, 0, 0, 0])); // 3rd bit set",
          "    assert_eq!(state_fourteen.is_half_crlf(), true);"
        ],
        "code": [
          "{",
          "    let state_zero = State(Arc::new([0, 0, 0, 0])); // 3rd bit not set",
          "    let _ = state_zero.is_half_crlf();",
          "",
          "    let state_one = State(Arc::new([1, 0, 0, 0])); // 3rd bit not set",
          "    let _ = state_one.is_half_crlf();",
          "    ",
          "    let state_seven = State(Arc::new([7, 0, 0, 0])); // 3rd bit not set",
          "    let _ = state_seven.is_half_crlf();",
          "",
          "    let state_fifteen = State(Arc::new([15, 0, 0, 0])); // 3rd bit not set",
          "    let _ = state_fifteen.is_half_crlf();",
          "    assert_eq!(state_zero.is_half_crlf(), false);",
          "    assert_eq!(state_one.is_half_crlf(), false);",
          "    assert_eq!(state_seven.is_half_crlf(), false);",
          "    assert_eq!(state_fifteen.is_half_crlf(), false);",
          "    ",
          "    let state_eight = State(Arc::new([8, 0, 0, 0])); // 3rd bit set",
          "    assert_eq!(state_eight.is_half_crlf(), true);",
          "    ",
          "    let state_fourteen = State(Arc::new([14, 0, 0, 0])); // 3rd bit set",
          "    assert_eq!(state_fourteen.is_half_crlf(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_eight = State(Arc::new([8, 0, 0, 0])); // 3rd bit set",
          "    let _ = state_eight.is_half_crlf();",
          "    ",
          "    let state_nineteen = State(Arc::new([19, 0, 0, 0])); // 3rd bit not set",
          "    let _ = state_nineteen.is_half_crlf();",
          "",
          "    let state_two_fifty_five = State(Arc::new([255, 0, 0, 0])); // 3rd bit not set",
          "    let _ = state_two_fifty_five.is_half_crlf();",
          "}"
        ],
        "oracle": [
          "    assert!(state_eight.is_half_crlf() == true);",
          "    assert!(state_nineteen.is_half_crlf() == false);",
          "    assert!(state_two_fifty_five.is_half_crlf() == false);"
        ],
        "code": [
          "{",
          "    let state_eight = State(Arc::new([8, 0, 0, 0])); // 3rd bit set",
          "    let _ = state_eight.is_half_crlf();",
          "    ",
          "    let state_nineteen = State(Arc::new([19, 0, 0, 0])); // 3rd bit not set",
          "    let _ = state_nineteen.is_half_crlf();",
          "",
          "    let state_two_fifty_five = State(Arc::new([255, 0, 0, 0])); // 3rd bit not set",
          "    let _ = state_two_fifty_five.is_half_crlf();",
          "    assert!(state_eight.is_half_crlf() == true);",
          "    assert!(state_nineteen.is_half_crlf() == false);",
          "    assert!(state_two_fifty_five.is_half_crlf() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]