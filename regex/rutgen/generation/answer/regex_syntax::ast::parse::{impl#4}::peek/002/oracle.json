[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"abc\";",
          "    let parser = Parser {",
          "        pos: Cell::new(Position { offset: 1 }),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: true,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI::new(&parser, pattern);",
          "    let result = parser_i.peek();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some('b'));"
        ],
        "code": [
          "{",
          "    let pattern = \"abc\";",
          "    let parser = Parser {",
          "        pos: Cell::new(Position { offset: 1 }),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: true,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI::new(&parser, pattern);",
          "    let result = parser_i.peek();",
          "    assert_eq!(result, Some('b'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"xyz\";",
          "    let parser = Parser {",
          "        pos: Cell::new(Position { offset: 2 }),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: true,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI::new(&parser, pattern);",
          "    let result = parser_i.peek();",
          "}"
        ],
        "oracle": [
          "    let pattern = \"xyz\";",
          "    let parser = Parser {",
          "    pos: Cell::new(Position { offset: 2 }),",
          "    capture_index: Cell::new(0),",
          "    nest_limit: 10,",
          "    octal: true,",
          "    initial_ignore_whitespace: false,",
          "    empty_min_range: false,",
          "    ignore_whitespace: Cell::new(false),",
          "    comments: RefCell::new(vec![]),",
          "    stack_group: RefCell::new(vec![]),",
          "    stack_class: RefCell::new(vec![]),",
          "    capture_names: RefCell::new(vec![]),",
          "    scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI::new(&parser, pattern);",
          "    assert_eq!(parser_i.peek(), Some('z'));"
        ],
        "code": [
          "{",
          "    let pattern = \"xyz\";",
          "    let parser = Parser {",
          "        pos: Cell::new(Position { offset: 2 }),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: true,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI::new(&parser, pattern);",
          "    let result = parser_i.peek();",
          "    let pattern = \"xyz\";",
          "    let parser = Parser {",
          "    pos: Cell::new(Position { offset: 2 }),",
          "    capture_index: Cell::new(0),",
          "    nest_limit: 10,",
          "    octal: true,",
          "    initial_ignore_whitespace: false,",
          "    empty_min_range: false,",
          "    ignore_whitespace: Cell::new(false),",
          "    comments: RefCell::new(vec![]),",
          "    stack_group: RefCell::new(vec![]),",
          "    stack_class: RefCell::new(vec![]),",
          "    capture_names: RefCell::new(vec![]),",
          "    scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI::new(&parser, pattern);",
          "    assert_eq!(parser_i.peek(), Some('z'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"a#b$c%\";",
          "    let parser = Parser {",
          "        pos: Cell::new(Position { offset: 3 }),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: true,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI::new(&parser, pattern);",
          "    let result = parser_i.peek();",
          "}"
        ],
        "oracle": [
          "    let pattern = \"a#b$c%\";",
          "    let parser = Parser { pos: Cell::new(Position { offset: 3 }), ..Default::default() };",
          "    let parser_i = ParserI::new(&parser, pattern);",
          "    assert_eq!(parser_i.peek(), Some('b'));",
          "    assert_eq!(parser.pos.get().offset, 3);",
          "    assert!(!parser_i.is_eof());",
          "    assert_eq!(parser_i.offset(), 3);",
          "    assert_eq!(parser_i.char(), 'b');",
          "    assert_eq!(parser_i.pattern(), pattern);"
        ],
        "code": [
          "{",
          "    let pattern = \"a#b$c%\";",
          "    let parser = Parser {",
          "        pos: Cell::new(Position { offset: 3 }),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: true,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI::new(&parser, pattern);",
          "    let result = parser_i.peek();",
          "    let pattern = \"a#b$c%\";",
          "    let parser = Parser { pos: Cell::new(Position { offset: 3 }), ..Default::default() };",
          "    let parser_i = ParserI::new(&parser, pattern);",
          "    assert_eq!(parser_i.peek(), Some('b'));",
          "    assert_eq!(parser.pos.get().offset, 3);",
          "    assert!(!parser_i.is_eof());",
          "    assert_eq!(parser_i.offset(), 3);",
          "    assert_eq!(parser_i.char(), 'b');",
          "    assert_eq!(parser_i.pattern(), pattern);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]