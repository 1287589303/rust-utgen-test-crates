[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_unicode_class = Class::Unicode(ClassUnicode::empty());",
          "    let _result = Hir::class(empty_unicode_class);",
          "}"
        ],
        "oracle": [
          "    let empty_unicode_class = Class::Unicode(ClassUnicode::empty());",
          "    let result = Hir::class(empty_unicode_class);",
          "    assert_eq!(result.kind, HirKind::Class(Class::Bytes(ClassBytes::empty())));",
          "    assert!(result.props.is_empty());"
        ],
        "code": [
          "{",
          "    let empty_unicode_class = Class::Unicode(ClassUnicode::empty());",
          "    let _result = Hir::class(empty_unicode_class);",
          "    let empty_unicode_class = Class::Unicode(ClassUnicode::empty());",
          "    let result = Hir::class(empty_unicode_class);",
          "    assert_eq!(result.kind, HirKind::Class(Class::Bytes(ClassBytes::empty())));",
          "    assert!(result.props.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_bytes_class = Class::Bytes(ClassBytes::empty());",
          "    let _result = Hir::class(empty_bytes_class);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.kind, HirKind::Class(empty_bytes_class));",
          "    assert!(class.is_empty());",
          "    assert_eq!(_result.props, Properties::empty());",
          "    assert_eq!(_result, Hir::fail());"
        ],
        "code": [
          "{",
          "    let empty_bytes_class = Class::Bytes(ClassBytes::empty());",
          "    let _result = Hir::class(empty_bytes_class);",
          "    assert_eq!(_result.kind, HirKind::Class(empty_bytes_class));",
          "    assert!(class.is_empty());",
          "    assert_eq!(_result.props, Properties::empty());",
          "    assert_eq!(_result, Hir::fail());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]