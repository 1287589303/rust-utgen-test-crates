[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unicode_class = Class::Unicode(ClassUnicode::from_literal(vec![b'a', b'b', b'c']));",
          "    let hir = Hir::class(unicode_class);",
          "}"
        ],
        "oracle": [
          "    let unicode_class = Class::Unicode(ClassUnicode::from_literal(vec![b'a', b'b', b'c']));",
          "    assert_eq!(hir.kind, HirKind::Class(unicode_class));",
          "    assert!(hir.props.0.minimum_len.is_some());",
          "    assert!(hir.props.0.maximum_len.is_some());",
          "    assert!(hir.props.0.utf8);",
          "    assert!(!hir.props.0.literal);"
        ],
        "code": [
          "{",
          "    let unicode_class = Class::Unicode(ClassUnicode::from_literal(vec![b'a', b'b', b'c']));",
          "    let hir = Hir::class(unicode_class);",
          "    let unicode_class = Class::Unicode(ClassUnicode::from_literal(vec![b'a', b'b', b'c']));",
          "    assert_eq!(hir.kind, HirKind::Class(unicode_class));",
          "    assert!(hir.props.0.minimum_len.is_some());",
          "    assert!(hir.props.0.maximum_len.is_some());",
          "    assert!(hir.props.0.utf8);",
          "    assert!(!hir.props.0.literal);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes_class = Class::Bytes(ClassBytes::from_literal(vec![b'x', b'y', b'z']));",
          "    let hir = Hir::class(bytes_class);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.kind, HirKind::Class(bytes_class));",
          "    assert!(hir.props.0.literal == false);",
          "    assert!(hir.props.0.minimum_len.is_none());",
          "    assert!(hir.props.0.maximum_len.is_none());",
          "    assert!(hir.props.0.utf8 == false);"
        ],
        "code": [
          "{",
          "    let bytes_class = Class::Bytes(ClassBytes::from_literal(vec![b'x', b'y', b'z']));",
          "    let hir = Hir::class(bytes_class);",
          "    assert_eq!(hir.kind, HirKind::Class(bytes_class));",
          "    assert!(hir.props.0.literal == false);",
          "    assert!(hir.props.0.minimum_len.is_none());",
          "    assert!(hir.props.0.maximum_len.is_none());",
          "    assert!(hir.props.0.utf8 == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]