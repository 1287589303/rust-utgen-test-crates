[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyHir;",
          "",
          "    impl DummyHir {",
          "        fn properties(&self) -> Properties {",
          "            let look_set = LookSet::empty();",
          "            Properties(Box::new(PropertiesI {",
          "                minimum_len: Some(5),",
          "                maximum_len: Some(10),",
          "                look_set,",
          "                look_set_prefix: LookSet::empty(),",
          "                look_set_suffix: LookSet::empty(),",
          "                look_set_prefix_any: look_set,",
          "                look_set_suffix_any: look_set,",
          "                utf8: true,",
          "                explicit_captures_len: 2,",
          "                static_explicit_captures_len: Some(1),",
          "                literal: false,",
          "                alternation_literal: false,",
          "            }))",
          "        }",
          "    }",
          "",
          "    let repetition = Repetition {",
          "        min: 1,",
          "        max: Some(10),",
          "        greedy: true,",
          "        sub: Box::new(DummyHir),",
          "    };",
          "",
          "    let _ = Properties::repetition(&repetition);",
          "}"
        ],
        "oracle": [
          "    let repetition = Repetition { min: 1, max: Some(10), greedy: true, sub: Box::new(DummyHir) };",
          "    let properties = Properties::repetition(&repetition);",
          "    assert!(properties.0.minimum_len == Some(5));",
          "    assert!(properties.0.maximum_len == Some(100));",
          "    assert!(!properties.0.look_set_prefix.is_empty());",
          "    assert!(!properties.0.look_set_suffix.is_empty());",
          "    assert_eq!(properties.0.explicit_captures_len, 2);",
          "    assert_eq!(properties.0.static_explicit_captures_len, Some(1));",
          "    ",
          "    let repetition_zero = Repetition { min: 0, max: Some(0), greedy: true, sub: Box::new(DummyHir) };",
          "    let properties_zero = Properties::repetition(&repetition_zero);",
          "    assert!(properties_zero.0.static_explicit_captures_len == Some(0));"
        ],
        "code": [
          "{",
          "    struct DummyHir;",
          "",
          "    impl DummyHir {",
          "        fn properties(&self) -> Properties {",
          "            let look_set = LookSet::empty();",
          "            Properties(Box::new(PropertiesI {",
          "                minimum_len: Some(5),",
          "                maximum_len: Some(10),",
          "                look_set,",
          "                look_set_prefix: LookSet::empty(),",
          "                look_set_suffix: LookSet::empty(),",
          "                look_set_prefix_any: look_set,",
          "                look_set_suffix_any: look_set,",
          "                utf8: true,",
          "                explicit_captures_len: 2,",
          "                static_explicit_captures_len: Some(1),",
          "                literal: false,",
          "                alternation_literal: false,",
          "            }))",
          "        }",
          "    }",
          "",
          "    let repetition = Repetition {",
          "        min: 1,",
          "        max: Some(10),",
          "        greedy: true,",
          "        sub: Box::new(DummyHir),",
          "    };",
          "",
          "    let _ = Properties::repetition(&repetition);",
          "    let repetition = Repetition { min: 1, max: Some(10), greedy: true, sub: Box::new(DummyHir) };",
          "    let properties = Properties::repetition(&repetition);",
          "    assert!(properties.0.minimum_len == Some(5));",
          "    assert!(properties.0.maximum_len == Some(100));",
          "    assert!(!properties.0.look_set_prefix.is_empty());",
          "    assert!(!properties.0.look_set_suffix.is_empty());",
          "    assert_eq!(properties.0.explicit_captures_len, 2);",
          "    assert_eq!(properties.0.static_explicit_captures_len, Some(1));",
          "    ",
          "    let repetition_zero = Repetition { min: 0, max: Some(0), greedy: true, sub: Box::new(DummyHir) };",
          "    let properties_zero = Properties::repetition(&repetition_zero);",
          "    assert!(properties_zero.0.static_explicit_captures_len == Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyHir;",
          "",
          "    impl DummyHir {",
          "        fn properties(&self) -> Properties {",
          "            let look_set = LookSet::empty();",
          "            Properties(Box::new(PropertiesI {",
          "                minimum_len: Some(0),",
          "                maximum_len: Some(5),",
          "                look_set,",
          "                look_set_prefix: LookSet::empty(),",
          "                look_set_suffix: LookSet::empty(),",
          "                look_set_prefix_any: look_set,",
          "                look_set_suffix_any: look_set,",
          "                utf8: false,",
          "                explicit_captures_len: 1,",
          "                static_explicit_captures_len: Some(2),",
          "                literal: true,",
          "                alternation_literal: false,",
          "            }))",
          "        }",
          "    }",
          "",
          "    let repetition = Repetition {",
          "        min: 0,",
          "        max: Some(5),",
          "        greedy: false,",
          "        sub: Box::new(DummyHir),",
          "    };",
          "",
          "    let _ = Properties::repetition(&repetition);",
          "}"
        ],
        "oracle": [
          "    Properties::repetition(&repetition).properties().minimum_len.is_some();",
          "    Properties::repetition(&repetition).properties().maximum_len.is_some();",
          "    Properties::repetition(&repetition).properties().look_set_prefix.is_empty();",
          "    Properties::repetition(&repetition).properties().look_set_suffix.is_empty();",
          "    Properties::repetition(&repetition).properties().static_explicit_captures_len.is_none();",
          "    Properties::repetition(&repetition).properties().explicit_captures_len == 1;",
          "    ",
          "    let repetition = Repetition { min: 1, max: Some(5), greedy: false, sub: Box::new(DummyHir), };",
          "    Properties::repetition(&repetition).properties().look_set_prefix == DummyHir.properties().look_set_prefix();",
          "    Properties::repetition(&repetition).properties().look_set_suffix == DummyHir.properties().look_set_suffix();",
          "    Properties::repetition(&repetition).properties().minimum_len == Some(0);",
          "    Properties::repetition(&repetition).properties().maximum_len == Some(25);",
          "    Properties::repetition(&repetition).properties().utf8 == false;"
        ],
        "code": [
          "{",
          "    struct DummyHir;",
          "",
          "    impl DummyHir {",
          "        fn properties(&self) -> Properties {",
          "            let look_set = LookSet::empty();",
          "            Properties(Box::new(PropertiesI {",
          "                minimum_len: Some(0),",
          "                maximum_len: Some(5),",
          "                look_set,",
          "                look_set_prefix: LookSet::empty(),",
          "                look_set_suffix: LookSet::empty(),",
          "                look_set_prefix_any: look_set,",
          "                look_set_suffix_any: look_set,",
          "                utf8: false,",
          "                explicit_captures_len: 1,",
          "                static_explicit_captures_len: Some(2),",
          "                literal: true,",
          "                alternation_literal: false,",
          "            }))",
          "        }",
          "    }",
          "",
          "    let repetition = Repetition {",
          "        min: 0,",
          "        max: Some(5),",
          "        greedy: false,",
          "        sub: Box::new(DummyHir),",
          "    };",
          "",
          "    let _ = Properties::repetition(&repetition);",
          "    Properties::repetition(&repetition).properties().minimum_len.is_some();",
          "    Properties::repetition(&repetition).properties().maximum_len.is_some();",
          "    Properties::repetition(&repetition).properties().look_set_prefix.is_empty();",
          "    Properties::repetition(&repetition).properties().look_set_suffix.is_empty();",
          "    Properties::repetition(&repetition).properties().static_explicit_captures_len.is_none();",
          "    Properties::repetition(&repetition).properties().explicit_captures_len == 1;",
          "    ",
          "    let repetition = Repetition { min: 1, max: Some(5), greedy: false, sub: Box::new(DummyHir), };",
          "    Properties::repetition(&repetition).properties().look_set_prefix == DummyHir.properties().look_set_prefix();",
          "    Properties::repetition(&repetition).properties().look_set_suffix == DummyHir.properties().look_set_suffix();",
          "    Properties::repetition(&repetition).properties().minimum_len == Some(0);",
          "    Properties::repetition(&repetition).properties().maximum_len == Some(25);",
          "    Properties::repetition(&repetition).properties().utf8 == false;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]