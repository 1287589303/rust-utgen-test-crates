[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub_hir = Hir {",
          "        kind: HirKind::Literal(Literal::from(\"a\")),",
          "        props: Properties::empty(),",
          "    };",
          "    let repetition = Repetition {",
          "        min: 0,",
          "        max: Some(1),",
          "        greedy: true,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    let _properties = Properties::repetition(&repetition);",
          "}"
        ],
        "oracle": [
          "    let sub_hir = Hir { kind: HirKind::Literal(Literal::from(\"a\")), props: Properties::empty() };",
          "    let repetition = Repetition { min: 0, max: Some(1), greedy: true, sub: Box::new(sub_hir) };",
          "    let properties = Properties::repetition(&repetition);",
          "    assert!(properties.is_a_box());",
          "    assert_eq!(properties.minimum_len(), None);",
          "    assert_eq!(properties.maximum_len(), Some(1));",
          "    assert!(properties.look_set().is_empty());",
          "    assert!(properties.look_set_prefix.is_empty());",
          "    assert!(properties.look_set_suffix.is_empty());",
          "    assert_eq!(properties.static_explicit_captures_len, None);"
        ],
        "code": [
          "{",
          "    let sub_hir = Hir {",
          "        kind: HirKind::Literal(Literal::from(\"a\")),",
          "        props: Properties::empty(),",
          "    };",
          "    let repetition = Repetition {",
          "        min: 0,",
          "        max: Some(1),",
          "        greedy: true,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    let _properties = Properties::repetition(&repetition);",
          "    let sub_hir = Hir { kind: HirKind::Literal(Literal::from(\"a\")), props: Properties::empty() };",
          "    let repetition = Repetition { min: 0, max: Some(1), greedy: true, sub: Box::new(sub_hir) };",
          "    let properties = Properties::repetition(&repetition);",
          "    assert!(properties.is_a_box());",
          "    assert_eq!(properties.minimum_len(), None);",
          "    assert_eq!(properties.maximum_len(), Some(1));",
          "    assert!(properties.look_set().is_empty());",
          "    assert!(properties.look_set_prefix.is_empty());",
          "    assert!(properties.look_set_suffix.is_empty());",
          "    assert_eq!(properties.static_explicit_captures_len, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub_hir = Hir {",
          "        kind: HirKind::Literal(Literal::from(\"b\")),",
          "        props: Properties::empty(),",
          "    };",
          "    let repetition = Repetition {",
          "        min: 0,",
          "        max: None,",
          "        greedy: false,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    let _properties = Properties::repetition(&repetition);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_properties.minimum_len, None);",
          "    assert_eq!(_properties.maximum_len, None);",
          "    assert!(matches!(_properties.look_set, LookSet { bits: 0 }));",
          "    assert!(matches!(_properties.look_set_prefix, LookSet { bits: 0 }));",
          "    assert!(matches!(_properties.look_set_suffix, LookSet { bits: 0 }));",
          "    assert!(matches!(_properties.look_set_prefix_any, LookSet { bits: 0 }));",
          "    assert!(matches!(_properties.look_set_suffix_any, LookSet { bits: 0 }));",
          "    assert!(!_properties.utf8);",
          "    assert_eq!(_properties.explicit_captures_len, 0);",
          "    assert_eq!(_properties.static_explicit_captures_len, None);",
          "    assert!(!_properties.literal);",
          "    assert!(!_properties.alternation_literal);"
        ],
        "code": [
          "{",
          "    let sub_hir = Hir {",
          "        kind: HirKind::Literal(Literal::from(\"b\")),",
          "        props: Properties::empty(),",
          "    };",
          "    let repetition = Repetition {",
          "        min: 0,",
          "        max: None,",
          "        greedy: false,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    let _properties = Properties::repetition(&repetition);",
          "    assert_eq!(_properties.minimum_len, None);",
          "    assert_eq!(_properties.maximum_len, None);",
          "    assert!(matches!(_properties.look_set, LookSet { bits: 0 }));",
          "    assert!(matches!(_properties.look_set_prefix, LookSet { bits: 0 }));",
          "    assert!(matches!(_properties.look_set_suffix, LookSet { bits: 0 }));",
          "    assert!(matches!(_properties.look_set_prefix_any, LookSet { bits: 0 }));",
          "    assert!(matches!(_properties.look_set_suffix_any, LookSet { bits: 0 }));",
          "    assert!(!_properties.utf8);",
          "    assert_eq!(_properties.explicit_captures_len, 0);",
          "    assert_eq!(_properties.static_explicit_captures_len, None);",
          "    assert!(!_properties.literal);",
          "    assert!(!_properties.alternation_literal);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub_hir = Hir {",
          "        kind: HirKind::Literal(Literal::from(\"c\")),",
          "        props: Properties::empty(),",
          "    };",
          "    let repetition = Repetition {",
          "        min: 0,",
          "        max: Some(3),",
          "        greedy: true,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    let _properties = Properties::repetition(&repetition);",
          "}"
        ],
        "oracle": [
          "    let sub_hir = Hir { kind: HirKind::Literal(Literal::from(\"c\")), props: Properties::empty() };",
          "    let repetition = Repetition { min: 0, max: Some(3), greedy: true, sub: Box::new(sub_hir) };",
          "    let properties = Properties::repetition(&repetition);",
          "    assert!(properties.0.minimum_len.is_none());",
          "    assert_eq!(properties.0.maximum_len, Some(3));",
          "    assert!(properties.0.look_set_prefix.is_empty());",
          "    assert!(properties.0.look_set_suffix.is_empty());",
          "    assert!(properties.0.static_explicit_captures_len.is_none());",
          "    assert_eq!(properties.0.literal, false);",
          "    assert_eq!(properties.0.alternation_literal, false);",
          "    assert!(properties.0.utf8);"
        ],
        "code": [
          "{",
          "    let sub_hir = Hir {",
          "        kind: HirKind::Literal(Literal::from(\"c\")),",
          "        props: Properties::empty(),",
          "    };",
          "    let repetition = Repetition {",
          "        min: 0,",
          "        max: Some(3),",
          "        greedy: true,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    let _properties = Properties::repetition(&repetition);",
          "    let sub_hir = Hir { kind: HirKind::Literal(Literal::from(\"c\")), props: Properties::empty() };",
          "    let repetition = Repetition { min: 0, max: Some(3), greedy: true, sub: Box::new(sub_hir) };",
          "    let properties = Properties::repetition(&repetition);",
          "    assert!(properties.0.minimum_len.is_none());",
          "    assert_eq!(properties.0.maximum_len, Some(3));",
          "    assert!(properties.0.look_set_prefix.is_empty());",
          "    assert!(properties.0.look_set_suffix.is_empty());",
          "    assert!(properties.0.static_explicit_captures_len.is_none());",
          "    assert_eq!(properties.0.literal, false);",
          "    assert_eq!(properties.0.alternation_literal, false);",
          "    assert!(properties.0.utf8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]