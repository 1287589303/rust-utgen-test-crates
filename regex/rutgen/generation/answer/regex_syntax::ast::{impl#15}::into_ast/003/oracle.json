[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position(0), end: Position(0) };",
          "    let concat = Concat { span, asts: Vec::new() };",
          "    let _result = concat.into_ast();",
          "}"
        ],
        "oracle": [
          "    let span = Span { start: Position(0), end: Position(0) };",
          "    let concat = Concat { span, asts: Vec::new() };",
          "    let result = concat.into_ast();",
          "    assert_eq!(result, Ast::empty(span));"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position(0), end: Position(0) };",
          "    let concat = Concat { span, asts: Vec::new() };",
          "    let _result = concat.into_ast();",
          "    let span = Span { start: Position(0), end: Position(0) };",
          "    let concat = Concat { span, asts: Vec::new() };",
          "    let result = concat.into_ast();",
          "    assert_eq!(result, Ast::empty(span));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position(0), end: Position(0) };",
          "    let concat = Concat { span, asts: Vec::new() };",
          "    let _result = concat.into_ast();",
          "}"
        ],
        "oracle": [
          "    let span = Span { start: Position(0), end: Position(0) };",
          "    let concat = Concat { span, asts: Vec::new() };",
          "    let result = concat.into_ast();",
          "    assert_eq!(result, Ast::empty(span));"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position(0), end: Position(0) };",
          "    let concat = Concat { span, asts: Vec::new() };",
          "    let _result = concat.into_ast();",
          "    let span = Span { start: Position(0), end: Position(0) };",
          "    let concat = Concat { span, asts: Vec::new() };",
          "    let result = concat.into_ast();",
          "    assert_eq!(result, Ast::empty(span));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]