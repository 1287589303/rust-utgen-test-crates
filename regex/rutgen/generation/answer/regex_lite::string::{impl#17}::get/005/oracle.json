[
  {
    "uses": [
      "use crate::CaptureLocations;",
      "use alloc::vec::Vec;",
      "use crate::int::NonMaxUsize;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use alloc::vec::Vec;",
          "    use crate::int::NonMaxUsize;",
          "    use crate::CaptureLocations;",
          "",
          "    let capture_vec = vec![",
          "        NonMaxUsize::new(1).unwrap(), // Start of group 0",
          "        NonMaxUsize::new(18).unwrap(), // End of group 0",
          "        NonMaxUsize::new(1).unwrap(), // Start of group 1",
          "        NonMaxUsize::new(6).unwrap(), // End of group 1",
          "    ];",
          "",
          "    let locs = CaptureLocations(capture_vec);",
          "    let result = locs.get(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some((0, 17)));",
          "    let result = locs.get(1);",
          "    assert_eq!(result, Some((0, 5)));",
          "    let result = locs.get(2);",
          "    assert_eq!(result, Some((6, 17)));",
          "    let result = locs.get(3);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    use alloc::vec::Vec;",
          "    use crate::int::NonMaxUsize;",
          "    use crate::CaptureLocations;",
          "",
          "    let capture_vec = vec![",
          "        NonMaxUsize::new(1).unwrap(), // Start of group 0",
          "        NonMaxUsize::new(18).unwrap(), // End of group 0",
          "        NonMaxUsize::new(1).unwrap(), // Start of group 1",
          "        NonMaxUsize::new(6).unwrap(), // End of group 1",
          "    ];",
          "",
          "    let locs = CaptureLocations(capture_vec);",
          "    let result = locs.get(0);",
          "    assert_eq!(result, Some((0, 17)));",
          "    let result = locs.get(1);",
          "    assert_eq!(result, Some((0, 5)));",
          "    let result = locs.get(2);",
          "    assert_eq!(result, Some((6, 17)));",
          "    let result = locs.get(3);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use alloc::vec::Vec;",
          "    use crate::int::NonMaxUsize;",
          "    use crate::CaptureLocations;",
          "",
          "    let capture_vec = vec![",
          "        NonMaxUsize::new(1).unwrap(), // Start of group 0",
          "        NonMaxUsize::new(18).unwrap(), // End of group 0",
          "        NonMaxUsize::new(1).unwrap(), // Start of group 1",
          "        NonMaxUsize::new(6).unwrap(), // End of group 1",
          "    ];",
          "",
          "    let locs = CaptureLocations(capture_vec);",
          "    let result = locs.get(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some((0, 18)));",
          "    assert_eq!(locs.get(0), Some((0, 17)));",
          "    assert_eq!(locs.get(1), Some((0, 5)));",
          "    assert_eq!(locs.get(2), Some((6, 17)));",
          "    assert_eq!(locs.get(3), None);",
          "    assert_eq!(locs.get(4), None);"
        ],
        "code": [
          "{",
          "    use alloc::vec::Vec;",
          "    use crate::int::NonMaxUsize;",
          "    use crate::CaptureLocations;",
          "",
          "    let capture_vec = vec![",
          "        NonMaxUsize::new(1).unwrap(), // Start of group 0",
          "        NonMaxUsize::new(18).unwrap(), // End of group 0",
          "        NonMaxUsize::new(1).unwrap(), // Start of group 1",
          "        NonMaxUsize::new(6).unwrap(), // End of group 1",
          "    ];",
          "",
          "    let locs = CaptureLocations(capture_vec);",
          "    let result = locs.get(1);",
          "    assert_eq!(result, Some((0, 18)));",
          "    assert_eq!(locs.get(0), Some((0, 17)));",
          "    assert_eq!(locs.get(1), Some((0, 5)));",
          "    assert_eq!(locs.get(2), Some((6, 17)));",
          "    assert_eq!(locs.get(3), None);",
          "    assert_eq!(locs.get(4), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use alloc::vec::Vec;",
          "    use crate::int::NonMaxUsize;",
          "    use crate::CaptureLocations;",
          "",
          "    let capture_vec = vec![];",
          "    let locs = CaptureLocations(capture_vec);",
          "    let result = locs.get(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);",
          "    let capture_vec = vec![Some(NonMaxUsize::new(1).unwrap()), Some(NonMaxUsize::new(3).unwrap())];",
          "    let locs = CaptureLocations(capture_vec);",
          "    let result = locs.get(0);",
          "    assert_eq!(result, Some((0, 2)));",
          "    let result = locs.get(1);",
          "    assert_eq!(result, Some((2, 4)));",
          "    let result = locs.get(2);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    use alloc::vec::Vec;",
          "    use crate::int::NonMaxUsize;",
          "    use crate::CaptureLocations;",
          "",
          "    let capture_vec = vec![];",
          "    let locs = CaptureLocations(capture_vec);",
          "    let result = locs.get(0);",
          "    assert_eq!(result, None);",
          "    let capture_vec = vec![Some(NonMaxUsize::new(1).unwrap()), Some(NonMaxUsize::new(3).unwrap())];",
          "    let locs = CaptureLocations(capture_vec);",
          "    let result = locs.get(0);",
          "    assert_eq!(result, Some((0, 2)));",
          "    let result = locs.get(1);",
          "    assert_eq!(result, Some((2, 4)));",
          "    let result = locs.get(2);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]