[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let locs = CaptureLocations(vec![Some(NonMaxUsize::new(1).unwrap()), Some(NonMaxUsize::new(5).unwrap())]);",
          "    let result = locs.get(2); // 2 * 2 = 4, which is out of bounds for the vec",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let locs = CaptureLocations(vec![Some(NonMaxUsize::new(1).unwrap()), Some(NonMaxUsize::new(5).unwrap())]);",
          "    let result = locs.get(2); // 2 * 2 = 4, which is out of bounds for the vec",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let locs = CaptureLocations(vec![]);",
          "    let result = locs.get(0); // 0 * 2 = 0, which is out of bounds for the vec",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let locs = CaptureLocations(vec![]);",
          "    let result = locs.get(0); // 0 * 2 = 0, which is out of bounds for the vec",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let locs = CaptureLocations(vec![Some(NonMaxUsize::new(3).unwrap())]);",
          "    let result = locs.get(usize::MAX); // usize::MAX * 2 would overflow",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let locs = CaptureLocations(vec![Some(NonMaxUsize::new(3).unwrap())]);",
          "    let result = locs.get(usize::MAX); // usize::MAX * 2 would overflow",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]