[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ValidCaptureLocations {",
          "        locations: CaptureLocations,",
          "    }",
          "",
          "    impl ValidCaptureLocations {",
          "        fn new() -> Self {",
          "            let locs = CaptureLocations(vec![",
          "                NonMaxUsize::new(1).unwrap(), // start for group 0",
          "                NonMaxUsize::new(5).unwrap(), // end for group 0",
          "                NonMaxUsize::new(6).unwrap(), // start for group 1",
          "                NonMaxUsize::new(10).unwrap(), // end for group 1",
          "            ]);",
          "            ValidCaptureLocations { locations: locs }",
          "        }",
          "    }",
          "",
          "    let locs = ValidCaptureLocations::new();",
          "    ",
          "    // This call uses a valid index (0) but expects None for the start since it's moved.",
          "    let _result = locs.locations.get(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(None, locs.locations.get(1));"
        ],
        "code": [
          "{",
          "    struct ValidCaptureLocations {",
          "        locations: CaptureLocations,",
          "    }",
          "",
          "    impl ValidCaptureLocations {",
          "        fn new() -> Self {",
          "            let locs = CaptureLocations(vec![",
          "                NonMaxUsize::new(1).unwrap(), // start for group 0",
          "                NonMaxUsize::new(5).unwrap(), // end for group 0",
          "                NonMaxUsize::new(6).unwrap(), // start for group 1",
          "                NonMaxUsize::new(10).unwrap(), // end for group 1",
          "            ]);",
          "            ValidCaptureLocations { locations: locs }",
          "        }",
          "    }",
          "",
          "    let locs = ValidCaptureLocations::new();",
          "    ",
          "    // This call uses a valid index (0) but expects None for the start since it's moved.",
          "    let _result = locs.locations.get(1);",
          "    assert_eq!(None, locs.locations.get(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct OutOfRangeCaptureLocations {",
          "        locations: CaptureLocations,",
          "    }",
          "",
          "    impl OutOfRangeCaptureLocations {",
          "        fn new() -> Self {",
          "            let locs = CaptureLocations(vec![",
          "                NonMaxUsize::new(1).unwrap(), // start for group 0",
          "                NonMaxUsize::new(5).unwrap(), // end for group 0",
          "            ]);",
          "            OutOfRangeCaptureLocations { locations: locs }",
          "        }",
          "    }",
          "",
          "    let locs = OutOfRangeCaptureLocations::new();",
          "    ",
          "    // This call uses an index (1) that leads to out-of-bounds for get. ",
          "    let _result = locs.locations.get(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Some((0, 5)), locs.locations.get(0));",
          "    assert_eq!(None, locs.locations.get(1));",
          "    assert_eq!(None, locs.locations.get(2));"
        ],
        "code": [
          "{",
          "    struct OutOfRangeCaptureLocations {",
          "        locations: CaptureLocations,",
          "    }",
          "",
          "    impl OutOfRangeCaptureLocations {",
          "        fn new() -> Self {",
          "            let locs = CaptureLocations(vec![",
          "                NonMaxUsize::new(1).unwrap(), // start for group 0",
          "                NonMaxUsize::new(5).unwrap(), // end for group 0",
          "            ]);",
          "            OutOfRangeCaptureLocations { locations: locs }",
          "        }",
          "    }",
          "",
          "    let locs = OutOfRangeCaptureLocations::new();",
          "    ",
          "    // This call uses an index (1) that leads to out-of-bounds for get. ",
          "    let _result = locs.locations.get(1);",
          "    assert_eq!(Some((0, 5)), locs.locations.get(0));",
          "    assert_eq!(None, locs.locations.get(1));",
          "    assert_eq!(None, locs.locations.get(2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]