[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let valid_start = NonMaxUsize::new(1).unwrap();",
          "    let valid_end = NonMaxUsize::new(3).unwrap();",
          "    let locs = CaptureLocations(vec![Some(valid_start), Some(valid_end)]);",
          "    assert!(locs.get(0).is_some());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Some((0, 1)), locs.get(0));",
          "    assert!(locs.get(1).is_some());",
          "    assert!(locs.get(2).is_none());"
        ],
        "code": [
          "{",
          "    let valid_start = NonMaxUsize::new(1).unwrap();",
          "    let valid_end = NonMaxUsize::new(3).unwrap();",
          "    let locs = CaptureLocations(vec![Some(valid_start), Some(valid_end)]);",
          "    assert!(locs.get(0).is_some());",
          "    assert_eq!(Some((0, 1)), locs.get(0));",
          "    assert!(locs.get(1).is_some());",
          "    assert!(locs.get(2).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let valid_start = NonMaxUsize::new(1).unwrap();",
          "    let locs = CaptureLocations(vec![Some(valid_start), None]);",
          "    assert!(locs.get(0).is_some());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(locs.get(0), Some((0, 0)));",
          "    assert!(locs.get(1).is_none());",
          "    assert!(locs.get(2).is_none());",
          "    assert!(locs.get(3).is_none());",
          "    assert!(locs.get(4).is_none());",
          "    assert!(locs.get(usize::MAX).is_none());",
          "    assert!(locs.get(1).is_none());"
        ],
        "code": [
          "{",
          "    let valid_start = NonMaxUsize::new(1).unwrap();",
          "    let locs = CaptureLocations(vec![Some(valid_start), None]);",
          "    assert!(locs.get(0).is_some());",
          "    assert_eq!(locs.get(0), Some((0, 0)));",
          "    assert!(locs.get(1).is_none());",
          "    assert!(locs.get(2).is_none());",
          "    assert!(locs.get(3).is_none());",
          "    assert!(locs.get(4).is_none());",
          "    assert!(locs.get(usize::MAX).is_none());",
          "    assert!(locs.get(1).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let invalid_start = NonMaxUsize::new(1).unwrap();",
          "    let locs = CaptureLocations(vec![Some(invalid_start)]);",
          "    assert!(locs.get(1).is_none());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(locs.get(0), None);",
          "    assert_eq!(locs.get(2), None);",
          "    assert_eq!(locs.get(3), None);",
          "    assert_eq!(locs.get(10), None);",
          "    assert_eq!(locs.get(5), None);",
          "    assert_eq!(locs.get(4), None);",
          "    assert_eq!(locs.get(u32::MAX as usize), None);"
        ],
        "code": [
          "{",
          "    let invalid_start = NonMaxUsize::new(1).unwrap();",
          "    let locs = CaptureLocations(vec![Some(invalid_start)]);",
          "    assert!(locs.get(1).is_none());",
          "    assert_eq!(locs.get(0), None);",
          "    assert_eq!(locs.get(2), None);",
          "    assert_eq!(locs.get(3), None);",
          "    assert_eq!(locs.get(10), None);",
          "    assert_eq!(locs.get(5), None);",
          "    assert_eq!(locs.get(4), None);",
          "    assert_eq!(locs.get(u32::MAX as usize), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]