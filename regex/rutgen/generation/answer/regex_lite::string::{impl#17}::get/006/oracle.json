[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let locs = CaptureLocations(vec![",
          "        Some(NonMaxUsize::new(1).unwrap()),",
          "        Some(NonMaxUsize::new(18).unwrap()),",
          "        Some(NonMaxUsize::new(7).unwrap()),",
          "        Some(NonMaxUsize::new(18).unwrap()),",
          "    ]);",
          "",
          "    let result = locs.get(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Some((0, 17)), locs.get(0));",
          "    assert_eq!(Some((0, 5)), locs.get(1));",
          "    assert_eq!(Some((6, 17)), locs.get(2));",
          "    assert_eq!(None, locs.get(3));",
          "    assert_eq!(None, locs.get(4));",
          "    assert_eq!(None, locs.get(10));",
          "    assert_eq!(None, locs.get(1_000));",
          "    assert_eq!(Some((0, 17)), locs.get(0));",
          "    assert_eq!(Some((0, 18)), locs.get(1));",
          "    assert_eq!(Some((7, 18)), locs.get(2));",
          "    assert_eq!(None, locs.get(5));"
        ],
        "code": [
          "{",
          "    let locs = CaptureLocations(vec![",
          "        Some(NonMaxUsize::new(1).unwrap()),",
          "        Some(NonMaxUsize::new(18).unwrap()),",
          "        Some(NonMaxUsize::new(7).unwrap()),",
          "        Some(NonMaxUsize::new(18).unwrap()),",
          "    ]);",
          "",
          "    let result = locs.get(0);",
          "    assert_eq!(Some((0, 17)), locs.get(0));",
          "    assert_eq!(Some((0, 5)), locs.get(1));",
          "    assert_eq!(Some((6, 17)), locs.get(2));",
          "    assert_eq!(None, locs.get(3));",
          "    assert_eq!(None, locs.get(4));",
          "    assert_eq!(None, locs.get(10));",
          "    assert_eq!(None, locs.get(1_000));",
          "    assert_eq!(Some((0, 17)), locs.get(0));",
          "    assert_eq!(Some((0, 18)), locs.get(1));",
          "    assert_eq!(Some((7, 18)), locs.get(2));",
          "    assert_eq!(None, locs.get(5));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let locs = CaptureLocations(vec![",
          "        Some(NonMaxUsize::new(1).unwrap()),",
          "        Some(NonMaxUsize::new(10).unwrap()),",
          "        Some(NonMaxUsize::new(5).unwrap()),",
          "        Some(NonMaxUsize::new(10).unwrap()),",
          "    ]);",
          "",
          "    let result = locs.get(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Some((0, 9)), result);",
          "    assert_eq!(None, locs.get(3));"
        ],
        "code": [
          "{",
          "    let locs = CaptureLocations(vec![",
          "        Some(NonMaxUsize::new(1).unwrap()),",
          "        Some(NonMaxUsize::new(10).unwrap()),",
          "        Some(NonMaxUsize::new(5).unwrap()),",
          "        Some(NonMaxUsize::new(10).unwrap()),",
          "    ]);",
          "",
          "    let result = locs.get(1);",
          "    assert_eq!(Some((0, 9)), result);",
          "    assert_eq!(None, locs.get(3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let locs = CaptureLocations(vec![",
          "        Some(NonMaxUsize::new(1).unwrap()),",
          "        Some(NonMaxUsize::new(10).unwrap()),",
          "        Some(NonMaxUsize::new(5).unwrap()),",
          "    ]);",
          "",
          "    let result = locs.get(2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Some((0, 4)), locs.get(0));",
          "    assert_eq!(Some((0, 9)), locs.get(1));",
          "    assert_eq!(None, locs.get(2));"
        ],
        "code": [
          "{",
          "    let locs = CaptureLocations(vec![",
          "        Some(NonMaxUsize::new(1).unwrap()),",
          "        Some(NonMaxUsize::new(10).unwrap()),",
          "        Some(NonMaxUsize::new(5).unwrap()),",
          "    ]);",
          "",
          "    let result = locs.get(2);",
          "    assert_eq!(Some((0, 4)), locs.get(0));",
          "    assert_eq!(Some((0, 9)), locs.get(1));",
          "    assert_eq!(None, locs.get(2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]