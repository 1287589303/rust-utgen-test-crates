[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestCaptures<'h> {",
          "        haystack: &'h str,",
          "        slots: CaptureLocations,",
          "        pikevm: Arc<PikeVM>,",
          "    }",
          "",
          "    let haystack = \"On 14-03-2010, I became a Tennessee lamb.\";",
          "    let slots = CaptureLocations(vec![Some(0), Some(3), Some(6)]);",
          "    let pikevm = Arc::new(PikeVM { nfa: NFA::default() });",
          "    let caps = TestCaptures { haystack, slots, pikevm };",
          "",
          "    let mut dst = String::new();",
          "    caps.expand(\"$2-$1\", &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, \"03-14\");",
          "    ",
          "    let mut dst = String::new();",
          "    caps.expand(\"year=${0}, month=${1}, day=${2}\", &mut dst);",
          "    assert_eq!(dst, \"year=14, month=03, day=2010\");",
          "    ",
          "    let mut dst = String::new();",
          "    caps.expand(\"$$\", &mut dst);",
          "    assert_eq!(dst, \"$\");",
          "    ",
          "    let mut dst = String::new();",
          "    caps.expand(\"$nonexistent\", &mut dst);",
          "    assert_eq!(dst, \"\");",
          "    ",
          "    let mut dst = String::new();",
          "    caps.expand(\"${1}a\", &mut dst);",
          "    assert_eq!(dst, \"14a\");",
          "    ",
          "    let mut dst = String::new();",
          "    caps.expand(\"$1${2}$${3}\", &mut dst);",
          "    assert_eq!(dst, \"14${3}\");",
          "    ",
          "    let mut dst = String::new();",
          "    caps.expand(\"${foo[bar].baz}\", &mut dst); // Assuming no capture named \"foo[bar].baz\" exists",
          "    assert_eq!(dst, \"\");"
        ],
        "code": [
          "{",
          "    struct TestCaptures<'h> {",
          "        haystack: &'h str,",
          "        slots: CaptureLocations,",
          "        pikevm: Arc<PikeVM>,",
          "    }",
          "",
          "    let haystack = \"On 14-03-2010, I became a Tennessee lamb.\";",
          "    let slots = CaptureLocations(vec![Some(0), Some(3), Some(6)]);",
          "    let pikevm = Arc::new(PikeVM { nfa: NFA::default() });",
          "    let caps = TestCaptures { haystack, slots, pikevm };",
          "",
          "    let mut dst = String::new();",
          "    caps.expand(\"$2-$1\", &mut dst);",
          "    assert_eq!(dst, \"03-14\");",
          "    ",
          "    let mut dst = String::new();",
          "    caps.expand(\"year=${0}, month=${1}, day=${2}\", &mut dst);",
          "    assert_eq!(dst, \"year=14, month=03, day=2010\");",
          "    ",
          "    let mut dst = String::new();",
          "    caps.expand(\"$$\", &mut dst);",
          "    assert_eq!(dst, \"$\");",
          "    ",
          "    let mut dst = String::new();",
          "    caps.expand(\"$nonexistent\", &mut dst);",
          "    assert_eq!(dst, \"\");",
          "    ",
          "    let mut dst = String::new();",
          "    caps.expand(\"${1}a\", &mut dst);",
          "    assert_eq!(dst, \"14a\");",
          "    ",
          "    let mut dst = String::new();",
          "    caps.expand(\"$1${2}$${3}\", &mut dst);",
          "    assert_eq!(dst, \"14${3}\");",
          "    ",
          "    let mut dst = String::new();",
          "    caps.expand(\"${foo[bar].baz}\", &mut dst); // Assuming no capture named \"foo[bar].baz\" exists",
          "    assert_eq!(dst, \"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestCaptures<'h> {",
          "        haystack: &'h str,",
          "        slots: CaptureLocations,",
          "        pikevm: Arc<PikeVM>,",
          "    }",
          "",
          "    let haystack = \"On 14-03-2010, I became a Tennessee lamb.\";",
          "    let slots = CaptureLocations(vec![Some(0), Some(3), Some(6)]);",
          "    let pikevm = Arc::new(PikeVM { nfa: NFA::default() });",
          "    let caps = TestCaptures { haystack, slots, pikevm };",
          "",
          "    let mut dst = String::new();",
          "    caps.expand(\"${year}-${month}-${day}\", &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, \"2010-03-14\");",
          "    assert_eq!(dst.len(), 10);",
          "    assert!(dst.starts_with(\"2010-\"));",
          "    assert!(dst.ends_with(\"-14\"));",
          "    caps.expand(\"$1a\", &mut dst);",
          "    assert_eq!(dst, \"\");",
          "    caps.expand(\"$$\", &mut dst);",
          "    assert_eq!(dst, \"$\");",
          "    caps.expand(\"${invalid_name}\", &mut dst);",
          "    assert_eq!(dst, \"\");",
          "    caps.expand(\"$$$1\", &mut dst);",
          "    assert_eq!(dst, \"$1\");",
          "    caps.expand(\"Some text ${day} rest\", &mut dst);",
          "    assert_eq!(dst, \"Some text 14 rest\");",
          "    caps.expand(\"Invalid ${1a}\", &mut dst);",
          "    assert_eq!(dst, \"Invalid \");"
        ],
        "code": [
          "{",
          "    struct TestCaptures<'h> {",
          "        haystack: &'h str,",
          "        slots: CaptureLocations,",
          "        pikevm: Arc<PikeVM>,",
          "    }",
          "",
          "    let haystack = \"On 14-03-2010, I became a Tennessee lamb.\";",
          "    let slots = CaptureLocations(vec![Some(0), Some(3), Some(6)]);",
          "    let pikevm = Arc::new(PikeVM { nfa: NFA::default() });",
          "    let caps = TestCaptures { haystack, slots, pikevm };",
          "",
          "    let mut dst = String::new();",
          "    caps.expand(\"${year}-${month}-${day}\", &mut dst);",
          "    assert_eq!(dst, \"2010-03-14\");",
          "    assert_eq!(dst.len(), 10);",
          "    assert!(dst.starts_with(\"2010-\"));",
          "    assert!(dst.ends_with(\"-14\"));",
          "    caps.expand(\"$1a\", &mut dst);",
          "    assert_eq!(dst, \"\");",
          "    caps.expand(\"$$\", &mut dst);",
          "    assert_eq!(dst, \"$\");",
          "    caps.expand(\"${invalid_name}\", &mut dst);",
          "    assert_eq!(dst, \"\");",
          "    caps.expand(\"$$$1\", &mut dst);",
          "    assert_eq!(dst, \"$1\");",
          "    caps.expand(\"Some text ${day} rest\", &mut dst);",
          "    assert_eq!(dst, \"Some text 14 rest\");",
          "    caps.expand(\"Invalid ${1a}\", &mut dst);",
          "    assert_eq!(dst, \"Invalid \");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestCaptures<'h> {",
          "        haystack: &'h str,",
          "        slots: CaptureLocations,",
          "        pikevm: Arc<PikeVM>,",
          "    }",
          "",
          "    let haystack = \"On 14-03-2010, I became a Tennessee lamb.\";",
          "    let slots = CaptureLocations(vec![Some(0), None, Some(6)]);",
          "    let pikevm = Arc::new(PikeVM { nfa: NFA::default() });",
          "    let caps = TestCaptures { haystack, slots, pikevm };",
          "",
          "    let mut dst = String::new();",
          "    caps.expand(\"$1-${nonexistent}-$3\", &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, \"14-${nonexistent}-03\");"
        ],
        "code": [
          "{",
          "    struct TestCaptures<'h> {",
          "        haystack: &'h str,",
          "        slots: CaptureLocations,",
          "        pikevm: Arc<PikeVM>,",
          "    }",
          "",
          "    let haystack = \"On 14-03-2010, I became a Tennessee lamb.\";",
          "    let slots = CaptureLocations(vec![Some(0), None, Some(6)]);",
          "    let pikevm = Arc::new(PikeVM { nfa: NFA::default() });",
          "    let caps = TestCaptures { haystack, slots, pikevm };",
          "",
          "    let mut dst = String::new();",
          "    caps.expand(\"$1-${nonexistent}-$3\", &mut dst);",
          "    assert_eq!(dst, \"14-${nonexistent}-03\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestCaptures<'h> {",
          "        haystack: &'h str,",
          "        slots: CaptureLocations,",
          "        pikevm: Arc<PikeVM>,",
          "    }",
          "",
          "    let haystack = \"On 14-03-2010, I became a Tennessee lamb.\";",
          "    let slots = CaptureLocations(vec![Some(0), Some(3), Some(6)]);",
          "    let pikevm = Arc::new(PikeVM { nfa: NFA::default() });",
          "    let caps = TestCaptures { haystack, slots, pikevm };",
          "",
          "    let mut dst = String::new();",
          "    caps.expand(\"\", &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, \"\");",
          "    let mut dst = String::new();",
          "    caps.expand(\"year=$year, month=$month, day=$day\", &mut dst);",
          "    assert_eq!(dst, \"year=, month=, day=\");",
          "    let mut dst = String::new();",
          "    caps.expand(\"$$\", &mut dst);",
          "    assert_eq!(dst, \"$\");",
          "    let mut dst = String::new();",
          "    caps.expand(\"No capture $5 here\", &mut dst);",
          "    assert_eq!(dst, \"No capture  here\");",
          "    let mut dst = String::new();",
          "    caps.expand(\"$1 and ${2}\", &mut dst);",
          "    assert_eq!(dst, \" and \");",
          "    let mut dst = String::new();",
          "    caps.expand(\"${foo[bar].baz}\", &mut dst);",
          "    assert_eq!(dst, \"\");",
          "    let mut dst = String::new();",
          "    caps.expand(\"$0 and $$\", &mut dst);",
          "    assert_eq!(dst, \" and $\");",
          "    let mut dst = String::new();",
          "    caps.expand(\"Invalid reference $invalid\", &mut dst);",
          "    assert_eq!(dst, \"Invalid reference \");"
        ],
        "code": [
          "{",
          "    struct TestCaptures<'h> {",
          "        haystack: &'h str,",
          "        slots: CaptureLocations,",
          "        pikevm: Arc<PikeVM>,",
          "    }",
          "",
          "    let haystack = \"On 14-03-2010, I became a Tennessee lamb.\";",
          "    let slots = CaptureLocations(vec![Some(0), Some(3), Some(6)]);",
          "    let pikevm = Arc::new(PikeVM { nfa: NFA::default() });",
          "    let caps = TestCaptures { haystack, slots, pikevm };",
          "",
          "    let mut dst = String::new();",
          "    caps.expand(\"\", &mut dst);",
          "    assert_eq!(dst, \"\");",
          "    let mut dst = String::new();",
          "    caps.expand(\"year=$year, month=$month, day=$day\", &mut dst);",
          "    assert_eq!(dst, \"year=, month=, day=\");",
          "    let mut dst = String::new();",
          "    caps.expand(\"$$\", &mut dst);",
          "    assert_eq!(dst, \"$\");",
          "    let mut dst = String::new();",
          "    caps.expand(\"No capture $5 here\", &mut dst);",
          "    assert_eq!(dst, \"No capture  here\");",
          "    let mut dst = String::new();",
          "    caps.expand(\"$1 and ${2}\", &mut dst);",
          "    assert_eq!(dst, \" and \");",
          "    let mut dst = String::new();",
          "    caps.expand(\"${foo[bar].baz}\", &mut dst);",
          "    assert_eq!(dst, \"\");",
          "    let mut dst = String::new();",
          "    caps.expand(\"$0 and $$\", &mut dst);",
          "    assert_eq!(dst, \" and $\");",
          "    let mut dst = String::new();",
          "    caps.expand(\"Invalid reference $invalid\", &mut dst);",
          "    assert_eq!(dst, \"Invalid reference \");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestCaptures<'h> {",
          "        haystack: &'h str,",
          "        slots: CaptureLocations,",
          "        pikevm: Arc<PikeVM>,",
          "    }",
          "",
          "    let haystack = \"On 14-03-2010, I became a Tennessee lamb.\";",
          "    let slots = CaptureLocations(vec![Some(0), Some(3), Some(6)]);",
          "    let pikevm = Arc::new(PikeVM { nfa: NFA::default() });",
          "    let caps = TestCaptures { haystack, slots, pikevm };",
          "",
          "    let mut dst = String::new();",
          "    caps.expand(\"$$ $1 $$\", &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, \"$ $1 $\");",
          "    ",
          "    let mut dst = String::new();",
          "    caps.expand(\"year=${year}, month=$month, day=$day\", &mut dst);",
          "    assert_eq!(dst, \"year=, month=, day=\");",
          "    ",
          "    let mut dst = String::new();",
          "    caps.expand(\"day=$2, month=$1\", &mut dst);",
          "    assert_eq!(dst, \"day=03, month=14\");",
          "    ",
          "    let mut dst = String::new();",
          "    caps.expand(\"$$$${foo[bar].baz}\", &mut dst);",
          "    assert_eq!(dst, \"$$\",);",
          "    ",
          "    let mut dst = String::new();",
          "    caps.expand(\"unmatched$42sequence\", &mut dst);",
          "    assert_eq!(dst, \"unmatchedsequence\");"
        ],
        "code": [
          "{",
          "    struct TestCaptures<'h> {",
          "        haystack: &'h str,",
          "        slots: CaptureLocations,",
          "        pikevm: Arc<PikeVM>,",
          "    }",
          "",
          "    let haystack = \"On 14-03-2010, I became a Tennessee lamb.\";",
          "    let slots = CaptureLocations(vec![Some(0), Some(3), Some(6)]);",
          "    let pikevm = Arc::new(PikeVM { nfa: NFA::default() });",
          "    let caps = TestCaptures { haystack, slots, pikevm };",
          "",
          "    let mut dst = String::new();",
          "    caps.expand(\"$$ $1 $$\", &mut dst);",
          "    assert_eq!(dst, \"$ $1 $\");",
          "    ",
          "    let mut dst = String::new();",
          "    caps.expand(\"year=${year}, month=$month, day=$day\", &mut dst);",
          "    assert_eq!(dst, \"year=, month=, day=\");",
          "    ",
          "    let mut dst = String::new();",
          "    caps.expand(\"day=$2, month=$1\", &mut dst);",
          "    assert_eq!(dst, \"day=03, month=14\");",
          "    ",
          "    let mut dst = String::new();",
          "    caps.expand(\"$$$${foo[bar].baz}\", &mut dst);",
          "    assert_eq!(dst, \"$$\",);",
          "    ",
          "    let mut dst = String::new();",
          "    caps.expand(\"unmatched$42sequence\", &mut dst);",
          "    assert_eq!(dst, \"unmatchedsequence\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]