[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA {",
          "        pattern: \"ab\".to_string(),",
          "        states: vec![",
          "            State::Splits { targets: vec![StateID(1)], reverse: true },",
          "            State::Char { target: StateID(2), ch: 'b' },",
          "            State::Match,",
          "        ],",
          "        start: StateID(0),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: Some(1),",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![None],",
          "        memory_extra: 0,",
          "    };",
          "",
          "    let mut next = ActiveStates { ",
          "        set: SparseSet::new(1), ",
          "        slot_table: SlotTable::new(),",
          "    };",
          "    ",
          "    let mut stack = Vec::new();",
          "    let mut curr_slots = vec![None; nfa.group_len()];",
          "    let haystack: &[u8] = b\"abc\";",
          "    let at = 0;",
          "    let sid = StateID(0);",
          "",
          "    let pike_vm = PikeVM::new(nfa);",
          "    pike_vm.epsilon_closure_explore(&mut stack, &mut curr_slots, &mut next, haystack, at, sid);",
          "}"
        ],
        "oracle": [
          "    let nfa = NFA {",
          "    pattern: \"ab\".to_string(),",
          "    states: vec![",
          "    State::Splits { targets: vec![StateID(1)], reverse: false },",
          "    ],",
          "    start: StateID(0),",
          "    is_start_anchored: false,",
          "    is_match_empty: false,",
          "    static_explicit_captures_len: Some(1),",
          "    cap_name_to_index: CaptureNameMap::new(),",
          "    cap_index_to_name: vec![None],",
          "    memory_extra: 0,",
          "    };",
          "    ",
          "    let mut next = ActiveStates {",
          "    set: SparseSet::new(1),",
          "    slot_table: SlotTable::new(),",
          "    };",
          "    ",
          "    let mut stack = Vec::new();",
          "    let mut curr_slots = vec![None; nfa.group_len()];",
          "    let haystack: &[u8] = b\"abc\";",
          "    let at = 0;",
          "    let sid = StateID(0);",
          "    let pike_vm = PikeVM::new(nfa);",
          "    next.set.insert(sid);",
          "    pike_vm.epsilon_closure_explore(&mut stack, &mut curr_slots, &mut next, haystack, at, sid); // assert next.set.len() == 1",
          "    ",
          "    let nfa = NFA {",
          "    pattern: \"a\".to_string(),",
          "    states: vec![",
          "    State::Char { target: StateID(1), ch: 'a' },",
          "    State::Match,",
          "    ],",
          "    start: StateID(0),",
          "    is_start_anchored: true,",
          "    is_match_empty: false,",
          "    static_explicit_captures_len: None,",
          "    cap_name_to_index: CaptureNameMap::new(),",
          "    cap_index_to_name: vec![None],",
          "    memory_extra: 0,",
          "    };",
          "    ",
          "    let mut next = ActiveStates {",
          "    set: SparseSet::new(1),",
          "    slot_table: SlotTable::new(),",
          "    };",
          "    ",
          "    let mut stack = Vec::new();",
          "    let mut curr_slots = vec![None; nfa.group_len()];",
          "    let haystack: &[u8] = b\"a\";",
          "    let at = 0;",
          "    let sid = StateID(0);",
          "    let pike_vm = PikeVM::new(nfa);",
          "    next.set.insert(sid);",
          "    pike_vm.epsilon_closure_explore(&mut stack, &mut curr_slots, &mut next, haystack, at, sid); // assert next.set.len() == 1",
          "    ",
          "    let nfa = NFA {",
          "    pattern: \"abc\".to_string(),",
          "    states: vec![",
          "    State::Splits { targets: vec![StateID(1), StateID(2)], reverse: false },",
          "    State::Char { target: StateID(3), ch: 'b' },",
          "    State::Char { target: StateID(4), ch: 'c' },",
          "    State::Match,",
          "    ],",
          "    start: StateID(0),",
          "    is_start_anchored: false,",
          "    is_match_empty: false,",
          "    static_explicit_captures_len: Some(1),",
          "    cap_name_to_index: CaptureNameMap::new(),",
          "    cap_index_to_name: vec![None],",
          "    memory_extra: 0,",
          "    };",
          "    ",
          "    let mut next = ActiveStates {",
          "    set: SparseSet::new(1),",
          "    slot_table: SlotTable::new(),",
          "    };",
          "    ",
          "    let mut stack = Vec::new();",
          "    let mut curr_slots = vec![None; nfa.group_len()];",
          "    let haystack: &[u8] = b\"abc\";",
          "    let at = 0;",
          "    let sid = StateID(0);",
          "    let pike_vm = PikeVM::new(nfa);",
          "    next.set.insert(sid);",
          "    pike_vm.epsilon_closure_explore(&mut stack, &mut curr_slots, &mut next, haystack, at, sid); // assert next.set.len() == 2",
          "    ",
          "    // Setup conditions for targets.get(0) to match Some(&sid)",
          "    let targets = vec![StateID(1), StateID(2)];",
          "    ",
          "    let mut nfa = nfa.clone();",
          "    nfa.states[0] = State::Splits { targets: targets.clone(), reverse: true };",
          "    ",
          "    next.set.clear(); // precondition for next.set.insert(sid) must be false",
          "    next.set.insert(sid);",
          "    pike_vm.epsilon_closure_explore(&mut stack, &mut curr_slots, &mut next, haystack, at, sid); // assert next.set.len() == 1"
        ],
        "code": [
          "{",
          "    let nfa = NFA {",
          "        pattern: \"ab\".to_string(),",
          "        states: vec![",
          "            State::Splits { targets: vec![StateID(1)], reverse: true },",
          "            State::Char { target: StateID(2), ch: 'b' },",
          "            State::Match,",
          "        ],",
          "        start: StateID(0),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: Some(1),",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![None],",
          "        memory_extra: 0,",
          "    };",
          "",
          "    let mut next = ActiveStates { ",
          "        set: SparseSet::new(1), ",
          "        slot_table: SlotTable::new(),",
          "    };",
          "    ",
          "    let mut stack = Vec::new();",
          "    let mut curr_slots = vec![None; nfa.group_len()];",
          "    let haystack: &[u8] = b\"abc\";",
          "    let at = 0;",
          "    let sid = StateID(0);",
          "",
          "    let pike_vm = PikeVM::new(nfa);",
          "    pike_vm.epsilon_closure_explore(&mut stack, &mut curr_slots, &mut next, haystack, at, sid);",
          "    let nfa = NFA {",
          "    pattern: \"ab\".to_string(),",
          "    states: vec![",
          "    State::Splits { targets: vec![StateID(1)], reverse: false },",
          "    ],",
          "    start: StateID(0),",
          "    is_start_anchored: false,",
          "    is_match_empty: false,",
          "    static_explicit_captures_len: Some(1),",
          "    cap_name_to_index: CaptureNameMap::new(),",
          "    cap_index_to_name: vec![None],",
          "    memory_extra: 0,",
          "    };",
          "    ",
          "    let mut next = ActiveStates {",
          "    set: SparseSet::new(1),",
          "    slot_table: SlotTable::new(),",
          "    };",
          "    ",
          "    let mut stack = Vec::new();",
          "    let mut curr_slots = vec![None; nfa.group_len()];",
          "    let haystack: &[u8] = b\"abc\";",
          "    let at = 0;",
          "    let sid = StateID(0);",
          "    let pike_vm = PikeVM::new(nfa);",
          "    next.set.insert(sid);",
          "    pike_vm.epsilon_closure_explore(&mut stack, &mut curr_slots, &mut next, haystack, at, sid); // assert next.set.len() == 1",
          "    ",
          "    let nfa = NFA {",
          "    pattern: \"a\".to_string(),",
          "    states: vec![",
          "    State::Char { target: StateID(1), ch: 'a' },",
          "    State::Match,",
          "    ],",
          "    start: StateID(0),",
          "    is_start_anchored: true,",
          "    is_match_empty: false,",
          "    static_explicit_captures_len: None,",
          "    cap_name_to_index: CaptureNameMap::new(),",
          "    cap_index_to_name: vec![None],",
          "    memory_extra: 0,",
          "    };",
          "    ",
          "    let mut next = ActiveStates {",
          "    set: SparseSet::new(1),",
          "    slot_table: SlotTable::new(),",
          "    };",
          "    ",
          "    let mut stack = Vec::new();",
          "    let mut curr_slots = vec![None; nfa.group_len()];",
          "    let haystack: &[u8] = b\"a\";",
          "    let at = 0;",
          "    let sid = StateID(0);",
          "    let pike_vm = PikeVM::new(nfa);",
          "    next.set.insert(sid);",
          "    pike_vm.epsilon_closure_explore(&mut stack, &mut curr_slots, &mut next, haystack, at, sid); // assert next.set.len() == 1",
          "    ",
          "    let nfa = NFA {",
          "    pattern: \"abc\".to_string(),",
          "    states: vec![",
          "    State::Splits { targets: vec![StateID(1), StateID(2)], reverse: false },",
          "    State::Char { target: StateID(3), ch: 'b' },",
          "    State::Char { target: StateID(4), ch: 'c' },",
          "    State::Match,",
          "    ],",
          "    start: StateID(0),",
          "    is_start_anchored: false,",
          "    is_match_empty: false,",
          "    static_explicit_captures_len: Some(1),",
          "    cap_name_to_index: CaptureNameMap::new(),",
          "    cap_index_to_name: vec![None],",
          "    memory_extra: 0,",
          "    };",
          "    ",
          "    let mut next = ActiveStates {",
          "    set: SparseSet::new(1),",
          "    slot_table: SlotTable::new(),",
          "    };",
          "    ",
          "    let mut stack = Vec::new();",
          "    let mut curr_slots = vec![None; nfa.group_len()];",
          "    let haystack: &[u8] = b\"abc\";",
          "    let at = 0;",
          "    let sid = StateID(0);",
          "    let pike_vm = PikeVM::new(nfa);",
          "    next.set.insert(sid);",
          "    pike_vm.epsilon_closure_explore(&mut stack, &mut curr_slots, &mut next, haystack, at, sid); // assert next.set.len() == 2",
          "    ",
          "    // Setup conditions for targets.get(0) to match Some(&sid)",
          "    let targets = vec![StateID(1), StateID(2)];",
          "    ",
          "    let mut nfa = nfa.clone();",
          "    nfa.states[0] = State::Splits { targets: targets.clone(), reverse: true };",
          "    ",
          "    next.set.clear(); // precondition for next.set.insert(sid) must be false",
          "    next.set.insert(sid);",
          "    pike_vm.epsilon_closure_explore(&mut stack, &mut curr_slots, &mut next, haystack, at, sid); // assert next.set.len() == 1",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA {",
          "        pattern: \"abc\".to_string(),",
          "        states: vec![",
          "            State::Char { target: StateID(1), ch: 'a' },",
          "            State::Match,",
          "        ],",
          "        start: StateID(0),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: Some(1),",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![None],",
          "        memory_extra: 0,",
          "    };",
          "",
          "    let mut next = ActiveStates { ",
          "        set: SparseSet::new(1), ",
          "        slot_table: SlotTable::new(),",
          "    };",
          "    ",
          "    let mut stack = Vec::new();",
          "    let mut curr_slots = vec![None; nfa.group_len()];",
          "    let haystack: &[u8] = b\"abcd\";",
          "    let at = 0;",
          "    let sid = StateID(0);",
          "",
          "    let pike_vm = PikeVM::new(nfa);",
          "    pike_vm.epsilon_closure_explore(&mut stack, &mut curr_slots, &mut next, haystack, at, sid);",
          "}"
        ],
        "oracle": [
          "    assert!(next.set.insert(sid));",
          "    let mut targets = vec![StateID(1)];",
          "    let mut curr_slots = vec![None, None];",
          "    let mut haystack: &[u8] = b\"abcd\";",
          "    let at = 1;",
          "    let sid = StateID(0);",
          "    ",
          "    let nfa = NFA {",
          "    pattern: \"abcd\".to_string(),",
          "    states: vec![",
          "    State::Splits { targets: targets.clone(), reverse: false },",
          "    State::Char { target: StateID(1), ch: 'a' },",
          "    State::Match,",
          "    ],",
          "    start: StateID(0),",
          "    is_start_anchored: false,",
          "    is_match_empty: false,",
          "    static_explicit_captures_len: Some(1),",
          "    cap_name_to_index: CaptureNameMap::new(),",
          "    cap_index_to_name: vec![None],",
          "    memory_extra: 0,",
          "    };",
          "    ",
          "    // Test State::Char case",
          "    assert!(matches!(*self.nfa.state(sid), State::Char { .. }));",
          "    ",
          "    // Test State::Splits case with reverse: false",
          "    if let State::Splits { ref targets, reverse } = *self.nfa.state(sid) {",
          "    assert!(!reverse);",
          "    assert_eq!(targets.len(), 1);",
          "    }",
          "    ",
          "    // Test insertion into the SparseSet",
          "    assert!(next.set.insert(sid));",
          "    assert!(!next.set.insert(sid));",
          "    ",
          "    // Ensure proper handling of epsilon transitions",
          "    let state = &next.slot_table.for_state(sid);",
          "    assert_eq!(state.len(), curr_slots.len());",
          "    ",
          "    // Verify no unexpected changes",
          "    assert!(curr_slots.iter().all(|&slot| slot.is_none()));"
        ],
        "code": [
          "{",
          "    let nfa = NFA {",
          "        pattern: \"abc\".to_string(),",
          "        states: vec![",
          "            State::Char { target: StateID(1), ch: 'a' },",
          "            State::Match,",
          "        ],",
          "        start: StateID(0),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: Some(1),",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![None],",
          "        memory_extra: 0,",
          "    };",
          "",
          "    let mut next = ActiveStates { ",
          "        set: SparseSet::new(1), ",
          "        slot_table: SlotTable::new(),",
          "    };",
          "    ",
          "    let mut stack = Vec::new();",
          "    let mut curr_slots = vec![None; nfa.group_len()];",
          "    let haystack: &[u8] = b\"abcd\";",
          "    let at = 0;",
          "    let sid = StateID(0);",
          "",
          "    let pike_vm = PikeVM::new(nfa);",
          "    pike_vm.epsilon_closure_explore(&mut stack, &mut curr_slots, &mut next, haystack, at, sid);",
          "    assert!(next.set.insert(sid));",
          "    let mut targets = vec![StateID(1)];",
          "    let mut curr_slots = vec![None, None];",
          "    let mut haystack: &[u8] = b\"abcd\";",
          "    let at = 1;",
          "    let sid = StateID(0);",
          "    ",
          "    let nfa = NFA {",
          "    pattern: \"abcd\".to_string(),",
          "    states: vec![",
          "    State::Splits { targets: targets.clone(), reverse: false },",
          "    State::Char { target: StateID(1), ch: 'a' },",
          "    State::Match,",
          "    ],",
          "    start: StateID(0),",
          "    is_start_anchored: false,",
          "    is_match_empty: false,",
          "    static_explicit_captures_len: Some(1),",
          "    cap_name_to_index: CaptureNameMap::new(),",
          "    cap_index_to_name: vec![None],",
          "    memory_extra: 0,",
          "    };",
          "    ",
          "    // Test State::Char case",
          "    assert!(matches!(*self.nfa.state(sid), State::Char { .. }));",
          "    ",
          "    // Test State::Splits case with reverse: false",
          "    if let State::Splits { ref targets, reverse } = *self.nfa.state(sid) {",
          "    assert!(!reverse);",
          "    assert_eq!(targets.len(), 1);",
          "    }",
          "    ",
          "    // Test insertion into the SparseSet",
          "    assert!(next.set.insert(sid));",
          "    assert!(!next.set.insert(sid));",
          "    ",
          "    // Ensure proper handling of epsilon transitions",
          "    let state = &next.slot_table.for_state(sid);",
          "    assert_eq!(state.len(), curr_slots.len());",
          "    ",
          "    // Verify no unexpected changes",
          "    assert!(curr_slots.iter().all(|&slot| slot.is_none()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA {",
          "        pattern: \"abc\".to_string(),",
          "        states: vec![",
          "            State::Splits { targets: vec![StateID(1), StateID(2)], reverse: false },",
          "            State::Char { target: StateID(2), ch: 'b' },",
          "            State::Match,",
          "        ],",
          "        start: StateID(0),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: Some(1),",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![None],",
          "        memory_extra: 0,",
          "    };",
          "",
          "    let mut next = ActiveStates { ",
          "        set: SparseSet::new(1), ",
          "        slot_table: SlotTable::new(),",
          "    };",
          "    ",
          "    let mut stack = Vec::new();",
          "    let mut curr_slots = vec![None; nfa.group_len()];",
          "    let haystack: &[u8] = b\"abcd\";",
          "    let at = 0;",
          "    let sid = StateID(0);",
          "",
          "    let pike_vm = PikeVM::new(nfa);",
          "    pike_vm.epsilon_closure_explore(&mut stack, &mut curr_slots, &mut next, haystack, at, sid);",
          "}"
        ],
        "oracle": [
          "    next.set.insert(sid) == true",
          "    ",
          "    self.nfa.state(sid) matches State::Splits { ref targets, reverse: false }",
          "    ",
          "    self.nfa.state(sid) matches State::Char { target: StateID(2), ch: 'b' }",
          "    ",
          "    self.nfa.state(sid) matches State::Splits { ref targets, reverse: false }",
          "    ",
          "    targets.get(0) matches Some(&sid)",
          "    ",
          "    next.set.insert(sid) == false"
        ],
        "code": [
          "{",
          "    let nfa = NFA {",
          "        pattern: \"abc\".to_string(),",
          "        states: vec![",
          "            State::Splits { targets: vec![StateID(1), StateID(2)], reverse: false },",
          "            State::Char { target: StateID(2), ch: 'b' },",
          "            State::Match,",
          "        ],",
          "        start: StateID(0),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: Some(1),",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![None],",
          "        memory_extra: 0,",
          "    };",
          "",
          "    let mut next = ActiveStates { ",
          "        set: SparseSet::new(1), ",
          "        slot_table: SlotTable::new(),",
          "    };",
          "    ",
          "    let mut stack = Vec::new();",
          "    let mut curr_slots = vec![None; nfa.group_len()];",
          "    let haystack: &[u8] = b\"abcd\";",
          "    let at = 0;",
          "    let sid = StateID(0);",
          "",
          "    let pike_vm = PikeVM::new(nfa);",
          "    pike_vm.epsilon_closure_explore(&mut stack, &mut curr_slots, &mut next, haystack, at, sid);",
          "    next.set.insert(sid) == true",
          "    ",
          "    self.nfa.state(sid) matches State::Splits { ref targets, reverse: false }",
          "    ",
          "    self.nfa.state(sid) matches State::Char { target: StateID(2), ch: 'b' }",
          "    ",
          "    self.nfa.state(sid) matches State::Splits { ref targets, reverse: false }",
          "    ",
          "    targets.get(0) matches Some(&sid)",
          "    ",
          "    next.set.insert(sid) == false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]