[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = SparseSet {",
          "        len: 0,",
          "        dense: vec![],",
          "        sparse: vec![],",
          "    };",
          "    set.clear();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.len, 0);",
          "    assert!(set.dense.is_empty());",
          "    assert!(set.sparse.is_empty());"
        ],
        "code": [
          "{",
          "    let mut set = SparseSet {",
          "        len: 0,",
          "        dense: vec![],",
          "        sparse: vec![],",
          "    };",
          "    set.clear();",
          "    assert_eq!(set.len, 0);",
          "    assert!(set.dense.is_empty());",
          "    assert!(set.sparse.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = SparseSet {",
          "        len: 3,",
          "        dense: vec![1, 2, 3],",
          "        sparse: vec![0, 1, 2],",
          "    };",
          "    set.clear();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.len, 0);",
          "    assert!(set.dense.is_empty());",
          "    assert!(set.sparse.is_empty());",
          "    assert!(set.is_empty());",
          "    assert_eq!(set.capacity(), 3);"
        ],
        "code": [
          "{",
          "    let mut set = SparseSet {",
          "        len: 3,",
          "        dense: vec![1, 2, 3],",
          "        sparse: vec![0, 1, 2],",
          "    };",
          "    set.clear();",
          "    assert_eq!(set.len, 0);",
          "    assert!(set.dense.is_empty());",
          "    assert!(set.sparse.is_empty());",
          "    assert!(set.is_empty());",
          "    assert_eq!(set.capacity(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = SparseSet {",
          "        len: 5,",
          "        dense: vec![4, 5, 6, 7, 8],",
          "        sparse: vec![0, 1, 2, 3, 4],",
          "    };",
          "    set.clear();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.len, 0);",
          "    assert!(set.dense.is_empty());",
          "    assert!(set.sparse.is_empty());"
        ],
        "code": [
          "{",
          "    let mut set = SparseSet {",
          "        len: 5,",
          "        dense: vec![4, 5, 6, 7, 8],",
          "        sparse: vec![0, 1, 2, 3, 4],",
          "    };",
          "    set.clear();",
          "    assert_eq!(set.len, 0);",
          "    assert!(set.dense.is_empty());",
          "    assert!(set.sparse.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = SparseSet {",
          "        len: 2,",
          "        dense: vec![10, 20],",
          "        sparse: vec![1, 0],",
          "    };",
          "    let original_dense = set.dense.clone();",
          "    let original_sparse = set.sparse.clone();",
          "    set.clear();",
          "    assert_eq!(original_dense, set.dense);",
          "    assert_eq!(original_sparse, set.sparse);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.len, 0);",
          "    assert!(set.is_empty());",
          "    assert!(set.contains(10) == false);",
          "    assert!(set.contains(20) == false);"
        ],
        "code": [
          "{",
          "    let mut set = SparseSet {",
          "        len: 2,",
          "        dense: vec![10, 20],",
          "        sparse: vec![1, 0],",
          "    };",
          "    let original_dense = set.dense.clone();",
          "    let original_sparse = set.sparse.clone();",
          "    set.clear();",
          "    assert_eq!(original_dense, set.dense);",
          "    assert_eq!(original_sparse, set.sparse);",
          "    assert_eq!(set.len, 0);",
          "    assert!(set.is_empty());",
          "    assert!(set.contains(10) == false);",
          "    assert!(set.contains(20) == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]