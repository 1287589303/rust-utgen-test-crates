[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for DummyWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: DummyWriter { output: String::new() } };",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Digit, negated: true };",
          "    writer.fmt_class_perl(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    writer.fmt_class_perl(&ast).unwrap();",
          "    assert_eq!(writer.wtr.output, r\"\\D\");",
          "    ",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Digit, negated: false };",
          "    writer.fmt_class_perl(&ast).unwrap();",
          "    assert_eq!(writer.wtr.output, r\"\\d\");",
          "    ",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Space, negated: true };",
          "    writer.fmt_class_perl(&ast).unwrap();",
          "    assert_eq!(writer.wtr.output, r\"\\S\");",
          "    ",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Space, negated: false };",
          "    writer.fmt_class_perl(&ast).unwrap();",
          "    assert_eq!(writer.wtr.output, r\"\\s\");",
          "    ",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Word, negated: true };",
          "    writer.fmt_class_perl(&ast).unwrap();",
          "    assert_eq!(writer.wtr.output, r\"\\W\");",
          "    ",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Word, negated: false };",
          "    writer.fmt_class_perl(&ast).unwrap();",
          "    assert_eq!(writer.wtr.output, r\"\\w\");"
        ],
        "code": [
          "{",
          "    struct DummyWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for DummyWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: DummyWriter { output: String::new() } };",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Digit, negated: true };",
          "    writer.fmt_class_perl(&ast).unwrap();",
          "    writer.fmt_class_perl(&ast).unwrap();",
          "    assert_eq!(writer.wtr.output, r\"\\D\");",
          "    ",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Digit, negated: false };",
          "    writer.fmt_class_perl(&ast).unwrap();",
          "    assert_eq!(writer.wtr.output, r\"\\d\");",
          "    ",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Space, negated: true };",
          "    writer.fmt_class_perl(&ast).unwrap();",
          "    assert_eq!(writer.wtr.output, r\"\\S\");",
          "    ",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Space, negated: false };",
          "    writer.fmt_class_perl(&ast).unwrap();",
          "    assert_eq!(writer.wtr.output, r\"\\s\");",
          "    ",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Word, negated: true };",
          "    writer.fmt_class_perl(&ast).unwrap();",
          "    assert_eq!(writer.wtr.output, r\"\\W\");",
          "    ",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Word, negated: false };",
          "    writer.fmt_class_perl(&ast).unwrap();",
          "    assert_eq!(writer.wtr.output, r\"\\w\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for DummyWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: DummyWriter { output: String::new() } };",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Digit, negated: false };",
          "    writer.fmt_class_perl(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.wtr.output, r\"\\d\");"
        ],
        "code": [
          "{",
          "    struct DummyWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for DummyWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: DummyWriter { output: String::new() } };",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Digit, negated: false };",
          "    writer.fmt_class_perl(&ast).unwrap();",
          "    assert_eq!(writer.wtr.output, r\"\\d\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for DummyWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: DummyWriter { output: String::new() } };",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Space, negated: true };",
          "    writer.fmt_class_perl(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    writer.fmt_class_perl(&ast); // assert writer.output == r\"\\S\"",
          "    ",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Space, negated: false };",
          "    writer.fmt_class_perl(&ast); // assert writer.output == r\"\\s\"",
          "    ",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Digit, negated: true };",
          "    writer.fmt_class_perl(&ast); // assert writer.output == r\"\\D\"",
          "    ",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Digit, negated: false };",
          "    writer.fmt_class_perl(&ast); // assert writer.output == r\"\\d\"",
          "    ",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Word, negated: true };",
          "    writer.fmt_class_perl(&ast); // assert writer.output == r\"\\W\"",
          "    ",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Word, negated: false };",
          "    writer.fmt_class_perl(&ast); // assert writer.output == r\"\\w\""
        ],
        "code": [
          "{",
          "    struct DummyWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for DummyWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: DummyWriter { output: String::new() } };",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Space, negated: true };",
          "    writer.fmt_class_perl(&ast).unwrap();",
          "    writer.fmt_class_perl(&ast); // assert writer.output == r\"\\S\"",
          "    ",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Space, negated: false };",
          "    writer.fmt_class_perl(&ast); // assert writer.output == r\"\\s\"",
          "    ",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Digit, negated: true };",
          "    writer.fmt_class_perl(&ast); // assert writer.output == r\"\\D\"",
          "    ",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Digit, negated: false };",
          "    writer.fmt_class_perl(&ast); // assert writer.output == r\"\\d\"",
          "    ",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Word, negated: true };",
          "    writer.fmt_class_perl(&ast); // assert writer.output == r\"\\W\"",
          "    ",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Word, negated: false };",
          "    writer.fmt_class_perl(&ast); // assert writer.output == r\"\\w\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for DummyWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: DummyWriter { output: String::new() } };",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Space, negated: false };",
          "    writer.fmt_class_perl(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Digit, negated: false };",
          "    assert_eq!(writer.wtr.output, r\"\\d\");",
          "    ",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Space, negated: false };",
          "    assert_eq!(writer.wtr.output, r\"\\s\");",
          "    ",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Word, negated: false };",
          "    assert_eq!(writer.wtr.output, r\"\\w\");",
          "    ",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Digit, negated: true };",
          "    assert_eq!(writer.wtr.output, r\"\\D\");",
          "    ",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Space, negated: true };",
          "    assert_eq!(writer.wtr.output, r\"\\S\");",
          "    ",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Word, negated: true };",
          "    assert_eq!(writer.wtr.output, r\"\\W\");"
        ],
        "code": [
          "{",
          "    struct DummyWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for DummyWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: DummyWriter { output: String::new() } };",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Space, negated: false };",
          "    writer.fmt_class_perl(&ast).unwrap();",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Digit, negated: false };",
          "    assert_eq!(writer.wtr.output, r\"\\d\");",
          "    ",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Space, negated: false };",
          "    assert_eq!(writer.wtr.output, r\"\\s\");",
          "    ",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Word, negated: false };",
          "    assert_eq!(writer.wtr.output, r\"\\w\");",
          "    ",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Digit, negated: true };",
          "    assert_eq!(writer.wtr.output, r\"\\D\");",
          "    ",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Space, negated: true };",
          "    assert_eq!(writer.wtr.output, r\"\\S\");",
          "    ",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Word, negated: true };",
          "    assert_eq!(writer.wtr.output, r\"\\W\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for DummyWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: DummyWriter { output: String::new() } };",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Word, negated: true };",
          "    writer.fmt_class_perl(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    let mut writer = Writer { wtr: DummyWriter { output: String::new() } };",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Digit, negated: false };",
          "    writer.fmt_class_perl(&ast).unwrap();",
          "    assert_eq!(writer.wtr.output, r\"\\d\");",
          "    ",
          "    let mut writer = Writer { wtr: DummyWriter { output: String::new() } };",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Space, negated: false };",
          "    writer.fmt_class_perl(&ast).unwrap();",
          "    assert_eq!(writer.wtr.output, r\"\\s\");",
          "    ",
          "    let mut writer = Writer { wtr: DummyWriter { output: String::new() } };",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Word, negated: true };",
          "    writer.fmt_class_perl(&ast).unwrap();",
          "    assert_eq!(writer.wtr.output, r\"\\W\");"
        ],
        "code": [
          "{",
          "    struct DummyWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for DummyWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: DummyWriter { output: String::new() } };",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Word, negated: true };",
          "    writer.fmt_class_perl(&ast).unwrap();",
          "    let mut writer = Writer { wtr: DummyWriter { output: String::new() } };",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Digit, negated: false };",
          "    writer.fmt_class_perl(&ast).unwrap();",
          "    assert_eq!(writer.wtr.output, r\"\\d\");",
          "    ",
          "    let mut writer = Writer { wtr: DummyWriter { output: String::new() } };",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Space, negated: false };",
          "    writer.fmt_class_perl(&ast).unwrap();",
          "    assert_eq!(writer.wtr.output, r\"\\s\");",
          "    ",
          "    let mut writer = Writer { wtr: DummyWriter { output: String::new() } };",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Word, negated: true };",
          "    writer.fmt_class_perl(&ast).unwrap();",
          "    assert_eq!(writer.wtr.output, r\"\\W\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for DummyWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: DummyWriter { output: String::new() } };",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Word, negated: false };",
          "    writer.fmt_class_perl(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.wtr.output, r\"\\w\");",
          "    let ast_negated = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Word, negated: true };",
          "    writer.fmt_class_perl(&ast_negated).unwrap();",
          "    assert_eq!(writer.wtr.output, r\"\\W\");",
          "    let ast_digit_negated = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Digit, negated: true };",
          "    writer.fmt_class_perl(&ast_digit_negated).unwrap();",
          "    assert_eq!(writer.wtr.output, r\"\\D\");",
          "    let ast_digit = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Digit, negated: false };",
          "    writer.fmt_class_perl(&ast_digit).unwrap();",
          "    assert_eq!(writer.wtr.output, r\"\\d\");",
          "    let ast_space_negated = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Space, negated: true };",
          "    writer.fmt_class_perl(&ast_space_negated).unwrap();",
          "    assert_eq!(writer.wtr.output, r\"\\S\");",
          "    let ast_space = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Space, negated: false };",
          "    writer.fmt_class_perl(&ast_space).unwrap();",
          "    assert_eq!(writer.wtr.output, r\"\\s\");"
        ],
        "code": [
          "{",
          "    struct DummyWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for DummyWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: DummyWriter { output: String::new() } };",
          "    let ast = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Word, negated: false };",
          "    writer.fmt_class_perl(&ast).unwrap();",
          "    assert_eq!(writer.wtr.output, r\"\\w\");",
          "    let ast_negated = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Word, negated: true };",
          "    writer.fmt_class_perl(&ast_negated).unwrap();",
          "    assert_eq!(writer.wtr.output, r\"\\W\");",
          "    let ast_digit_negated = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Digit, negated: true };",
          "    writer.fmt_class_perl(&ast_digit_negated).unwrap();",
          "    assert_eq!(writer.wtr.output, r\"\\D\");",
          "    let ast_digit = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Digit, negated: false };",
          "    writer.fmt_class_perl(&ast_digit).unwrap();",
          "    assert_eq!(writer.wtr.output, r\"\\d\");",
          "    let ast_space_negated = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Space, negated: true };",
          "    writer.fmt_class_perl(&ast_space_negated).unwrap();",
          "    assert_eq!(writer.wtr.output, r\"\\S\");",
          "    let ast_space = ast::ClassPerl { span: Span::default(), kind: ClassPerlKind::Space, negated: false };",
          "    writer.fmt_class_perl(&ast_space).unwrap();",
          "    assert_eq!(writer.wtr.output, r\"\\s\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]