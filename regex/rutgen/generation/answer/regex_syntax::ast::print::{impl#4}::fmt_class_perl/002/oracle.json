[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut output = String::new();",
          "    let ast = ast::ClassPerl {",
          "        span: Span::default(),",
          "        kind: ast::ClassPerlKind::Word,",
          "        negated: false,",
          "    };",
          "    let mut writer = Writer { wtr: &mut output };",
          "    let _ = writer.fmt_class_perl(&ast);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, r\"\\w\");"
        ],
        "code": [
          "{",
          "    let mut output = String::new();",
          "    let ast = ast::ClassPerl {",
          "        span: Span::default(),",
          "        kind: ast::ClassPerlKind::Word,",
          "        negated: false,",
          "    };",
          "    let mut writer = Writer { wtr: &mut output };",
          "    let _ = writer.fmt_class_perl(&ast);",
          "    assert_eq!(output, r\"\\w\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut output = String::new();",
          "    let ast = ast::ClassPerl {",
          "        span: Span::default(),",
          "        kind: ast::ClassPerlKind::Space,",
          "        negated: false,",
          "    };",
          "    let mut writer = Writer { wtr: &mut output };",
          "    let _ = writer.fmt_class_perl(&ast);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, r\"\\s\");",
          "    ",
          "    let ast = ast::ClassPerl {",
          "    span: Span::default(),",
          "    kind: ast::ClassPerlKind::Word,",
          "    negated: false,",
          "    };",
          "    ",
          "    let _ = writer.fmt_class_perl(&ast);",
          "    assert_eq!(output, r\"\\w\");",
          "    ",
          "    let ast = ast::ClassPerl {",
          "    span: Span::default(),",
          "    kind: ast::ClassPerlKind::Word,",
          "    negated: true,",
          "    };",
          "    ",
          "    let _ = writer.fmt_class_perl(&ast);",
          "    assert_eq!(output, r\"\\W\");"
        ],
        "code": [
          "{",
          "    let mut output = String::new();",
          "    let ast = ast::ClassPerl {",
          "        span: Span::default(),",
          "        kind: ast::ClassPerlKind::Space,",
          "        negated: false,",
          "    };",
          "    let mut writer = Writer { wtr: &mut output };",
          "    let _ = writer.fmt_class_perl(&ast);",
          "    assert_eq!(output, r\"\\s\");",
          "    ",
          "    let ast = ast::ClassPerl {",
          "    span: Span::default(),",
          "    kind: ast::ClassPerlKind::Word,",
          "    negated: false,",
          "    };",
          "    ",
          "    let _ = writer.fmt_class_perl(&ast);",
          "    assert_eq!(output, r\"\\w\");",
          "    ",
          "    let ast = ast::ClassPerl {",
          "    span: Span::default(),",
          "    kind: ast::ClassPerlKind::Word,",
          "    negated: true,",
          "    };",
          "    ",
          "    let _ = writer.fmt_class_perl(&ast);",
          "    assert_eq!(output, r\"\\W\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut output = String::new();",
          "    let ast = ast::ClassPerl {",
          "        span: Span::default(),",
          "        kind: ast::ClassPerlKind::Digit,",
          "        negated: false,",
          "    };",
          "    let mut writer = Writer { wtr: &mut output };",
          "    let _ = writer.fmt_class_perl(&ast);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, r\"\\d\");"
        ],
        "code": [
          "{",
          "    let mut output = String::new();",
          "    let ast = ast::ClassPerl {",
          "        span: Span::default(),",
          "        kind: ast::ClassPerlKind::Digit,",
          "        negated: false,",
          "    };",
          "    let mut writer = Writer { wtr: &mut output };",
          "    let _ = writer.fmt_class_perl(&ast);",
          "    assert_eq!(output, r\"\\d\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]