[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: thompson::NFA::new(),",
          "        stride2: 1,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 1024,",
          "    };",
          "",
          "    let mut cache = Cache {",
          "        trans: vec![LazyStateID::new_unchecked(1)],",
          "        starts: vec![LazyStateID::new_unchecked(0)],",
          "        states: vec![],",
          "        states_to_id: StateMap::default(),",
          "        sparses: SparseSets::default(),",
          "        stack: vec![],",
          "        scratch_state_builder: StateBuilderEmpty::default(),",
          "        state_saver: StateSaver::default(),",
          "        memory_usage_state: 0,",
          "        clear_count: 0,",
          "        bytes_searched: 0,",
          "        progress: None,",
          "    };",
          "",
          "    let input = Input::new(&b\"abc\"[..])",
          "        .span(Span { start: 0, end: 3 });",
          "",
          "    let mut sid = LazyStateID::new_unchecked(2);",
          "    let mut mat = None;",
          "",
          "    let result = unsafe { eoi_rev(&dfa, &mut cache, &input, &mut sid, &mut mat) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));",
          "    assert!(mat.is_none());",
          "    assert_eq!(sid.as_usize_unchecked(), 2);",
          "    assert!(sid.is_match() == false);",
          "    assert!(sid.is_quit() == false);"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: thompson::NFA::new(),",
          "        stride2: 1,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 1024,",
          "    };",
          "",
          "    let mut cache = Cache {",
          "        trans: vec![LazyStateID::new_unchecked(1)],",
          "        starts: vec![LazyStateID::new_unchecked(0)],",
          "        states: vec![],",
          "        states_to_id: StateMap::default(),",
          "        sparses: SparseSets::default(),",
          "        stack: vec![],",
          "        scratch_state_builder: StateBuilderEmpty::default(),",
          "        state_saver: StateSaver::default(),",
          "        memory_usage_state: 0,",
          "        clear_count: 0,",
          "        bytes_searched: 0,",
          "        progress: None,",
          "    };",
          "",
          "    let input = Input::new(&b\"abc\"[..])",
          "        .span(Span { start: 0, end: 3 });",
          "",
          "    let mut sid = LazyStateID::new_unchecked(2);",
          "    let mut mat = None;",
          "",
          "    let result = unsafe { eoi_rev(&dfa, &mut cache, &input, &mut sid, &mut mat) };",
          "    assert_eq!(result, Ok(()));",
          "    assert!(mat.is_none());",
          "    assert_eq!(sid.as_usize_unchecked(), 2);",
          "    assert!(sid.is_match() == false);",
          "    assert!(sid.is_quit() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: thompson::NFA::new(),",
          "        stride2: 1,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 1024,",
          "    };",
          "",
          "    let mut cache = Cache {",
          "        trans: vec![LazyStateID::new_unchecked(3)],",
          "        starts: vec![LazyStateID::new_unchecked(0)],",
          "        states: vec![],",
          "        states_to_id: StateMap::default(),",
          "        sparses: SparseSets::default(),",
          "        stack: vec![],",
          "        scratch_state_builder: StateBuilderEmpty::default(),",
          "        state_saver: StateSaver::default(),",
          "        memory_usage_state: 0,",
          "        clear_count: 0,",
          "        bytes_searched: 0,",
          "        progress: None,",
          "    };",
          "",
          "    let input = Input::new(&b\"xyz\"[..])",
          "        .span(Span { start: 0, end: 3 });",
          "",
          "    let mut sid = LazyStateID::new_unchecked(4);",
          "    let mut mat = None;",
          "",
          "    let result = unsafe { eoi_rev(&dfa, &mut cache, &input, &mut sid, &mut mat) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));",
          "    assert!(mat.is_none());",
          "    assert_eq!(sid.as_usize_untagged(), 4);",
          "    assert!(!sid.is_match());",
          "    assert!(!sid.is_quit());"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: thompson::NFA::new(),",
          "        stride2: 1,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 1024,",
          "    };",
          "",
          "    let mut cache = Cache {",
          "        trans: vec![LazyStateID::new_unchecked(3)],",
          "        starts: vec![LazyStateID::new_unchecked(0)],",
          "        states: vec![],",
          "        states_to_id: StateMap::default(),",
          "        sparses: SparseSets::default(),",
          "        stack: vec![],",
          "        scratch_state_builder: StateBuilderEmpty::default(),",
          "        state_saver: StateSaver::default(),",
          "        memory_usage_state: 0,",
          "        clear_count: 0,",
          "        bytes_searched: 0,",
          "        progress: None,",
          "    };",
          "",
          "    let input = Input::new(&b\"xyz\"[..])",
          "        .span(Span { start: 0, end: 3 });",
          "",
          "    let mut sid = LazyStateID::new_unchecked(4);",
          "    let mut mat = None;",
          "",
          "    let result = unsafe { eoi_rev(&dfa, &mut cache, &input, &mut sid, &mut mat) };",
          "    assert_eq!(result, Ok(()));",
          "    assert!(mat.is_none());",
          "    assert_eq!(sid.as_usize_untagged(), 4);",
          "    assert!(!sid.is_match());",
          "    assert!(!sid.is_quit());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]