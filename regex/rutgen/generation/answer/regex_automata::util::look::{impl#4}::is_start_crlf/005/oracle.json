[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[0, 1, 2, b'\\n', 4, 5, 6];",
          "    let at: usize = 4; // at - 1 should be b'\\n'",
          "    matcher.is_start_crlf(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(matcher.is_start_crlf(haystack, at), false);",
          "    assert!(haystack[at - 1] == b'\\n');",
          "    assert!(haystack[at - 1] == b'\\r');",
          "    assert!(at >= haystack.len() || haystack[at] != b'\\n');"
        ],
        "code": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[0, 1, 2, b'\\n', 4, 5, 6];",
          "    let at: usize = 4; // at - 1 should be b'\\n'",
          "    matcher.is_start_crlf(haystack, at);",
          "    assert_eq!(matcher.is_start_crlf(haystack, at), false);",
          "    assert!(haystack[at - 1] == b'\\n');",
          "    assert!(haystack[at - 1] == b'\\r');",
          "    assert!(at >= haystack.len() || haystack[at] != b'\\n');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[0, 1, b'\\r', b'\\n', 4, 5, 6];",
          "    let at: usize = 3; // at - 1 should be b'\\r'",
          "    matcher.is_start_crlf(haystack, at);",
          "}"
        ],
        "oracle": [
          "    let mut matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[0, 1, b'\\r', b'\\n', 4, 5, 6];",
          "    let at: usize = 3;",
          "    assert!(!matcher.is_start(haystack, at));",
          "    assert!(haystack[at - 1] == b'\\n');",
          "    assert!(haystack[at - 1] == b'\\r');",
          "    assert!(matcher.is_start_crlf(haystack, at) == (haystack[at - 1] == b'\\r' && (at >= haystack.len() || haystack[at] != b'\\n')));"
        ],
        "code": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[0, 1, b'\\r', b'\\n', 4, 5, 6];",
          "    let at: usize = 3; // at - 1 should be b'\\r'",
          "    matcher.is_start_crlf(haystack, at);",
          "    let mut matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[0, 1, b'\\r', b'\\n', 4, 5, 6];",
          "    let at: usize = 3;",
          "    assert!(!matcher.is_start(haystack, at));",
          "    assert!(haystack[at - 1] == b'\\n');",
          "    assert!(haystack[at - 1] == b'\\r');",
          "    assert!(matcher.is_start_crlf(haystack, at) == (haystack[at - 1] == b'\\r' && (at >= haystack.len() || haystack[at] != b'\\n')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[b'\\r', b'\\n', 4, 5, 6];",
          "    let at: usize = 2; // at - 1 should be b'\\n'",
          "    matcher.is_start_crlf(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert!(!matcher.is_start(haystack, at));",
          "    assert!(haystack[at - 1] == b'\\n');",
          "    assert!(haystack[at - 1] == b'\\r');",
          "    assert!(haystack[at - 1] == b'\\r' && (at >= haystack.len() || haystack[at] != b'\\n'));"
        ],
        "code": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[b'\\r', b'\\n', 4, 5, 6];",
          "    let at: usize = 2; // at - 1 should be b'\\n'",
          "    matcher.is_start_crlf(haystack, at);",
          "    assert!(!matcher.is_start(haystack, at));",
          "    assert!(haystack[at - 1] == b'\\n');",
          "    assert!(haystack[at - 1] == b'\\r');",
          "    assert!(haystack[at - 1] == b'\\r' && (at >= haystack.len() || haystack[at] != b'\\n'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[b'\\r', 1, 2, 3];",
          "    let at: usize = 1; // at - 1 should be b'\\r'",
          "    matcher.is_start_crlf(haystack, at);",
          "}"
        ],
        "oracle": [
          "    let mut matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[b'\\r', 1, 2, 3];",
          "    let at: usize = 1;",
          "    assert_eq!(matcher.is_start_crlf(haystack, at), true);",
          "    let at: usize = 3;",
          "    assert!(std::panic::catch_unwind(|| matcher.is_start_crlf(haystack, at)).is_err());",
          "    assert_eq!(matcher.is_start_crlf(haystack, at), false);",
          "    let at: usize = 2;",
          "    assert_eq!(matcher.is_start_crlf(haystack, at), false);"
        ],
        "code": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[b'\\r', 1, 2, 3];",
          "    let at: usize = 1; // at - 1 should be b'\\r'",
          "    matcher.is_start_crlf(haystack, at);",
          "    let mut matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[b'\\r', 1, 2, 3];",
          "    let at: usize = 1;",
          "    assert_eq!(matcher.is_start_crlf(haystack, at), true);",
          "    let at: usize = 3;",
          "    assert!(std::panic::catch_unwind(|| matcher.is_start_crlf(haystack, at)).is_err());",
          "    assert_eq!(matcher.is_start_crlf(haystack, at), false);",
          "    let at: usize = 2;",
          "    assert_eq!(matcher.is_start_crlf(haystack, at), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[0, 1, 2, 3];",
          "    let at: usize = 4; // at out of bounds",
          "    matcher.is_start_crlf(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(matcher.is_start_crlf(haystack, at), true);",
          "    assert!(at > haystack.len());",
          "    assert!(haystack[at - 1] == b'\\n');",
          "    assert!(haystack[at - 1] == b'\\r');",
          "    assert!(at >= haystack.len() || haystack[at] != b'\\n');"
        ],
        "code": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[0, 1, 2, 3];",
          "    let at: usize = 4; // at out of bounds",
          "    matcher.is_start_crlf(haystack, at);",
          "    assert_eq!(matcher.is_start_crlf(haystack, at), true);",
          "    assert!(at > haystack.len());",
          "    assert!(haystack[at - 1] == b'\\n');",
          "    assert!(haystack[at - 1] == b'\\r');",
          "    assert!(at >= haystack.len() || haystack[at] != b'\\n');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]