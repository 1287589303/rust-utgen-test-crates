[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"Hello\\nWorld\";",
          "    let at = 0;",
          "    matcher.is_start_crlf(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(matcher.is_start_crlf(haystack, at), true);",
          "    assert_eq!(matcher.is_start_crlf(haystack, at + 1), true);",
          "    assert_eq!(matcher.is_start_crlf(haystack, at + 2), false);",
          "    let at = 1;",
          "    assert_eq!(matcher.is_start_crlf(haystack, at), false);",
          "    assert_eq!(matcher.is_start_crlf(haystack, haystack.len()), true);",
          "    let at = haystack.len() + 1;",
          "    assert!(std::panic::catch_unwind(|| matcher.is_start_crlf(haystack, at)).is_err());",
          "    let at = 2;",
          "    assert_eq!(matcher.is_start_crlf(haystack, at), true);"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"Hello\\nWorld\";",
          "    let at = 0;",
          "    matcher.is_start_crlf(haystack, at);",
          "    assert_eq!(matcher.is_start_crlf(haystack, at), true);",
          "    assert_eq!(matcher.is_start_crlf(haystack, at + 1), true);",
          "    assert_eq!(matcher.is_start_crlf(haystack, at + 2), false);",
          "    let at = 1;",
          "    assert_eq!(matcher.is_start_crlf(haystack, at), false);",
          "    assert_eq!(matcher.is_start_crlf(haystack, haystack.len()), true);",
          "    let at = haystack.len() + 1;",
          "    assert!(std::panic::catch_unwind(|| matcher.is_start_crlf(haystack, at)).is_err());",
          "    let at = 2;",
          "    assert_eq!(matcher.is_start_crlf(haystack, at), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"\\nWorld\";",
          "    let at = 1;",
          "    matcher.is_start_crlf(haystack, at);",
          "}"
        ],
        "oracle": [
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"\\nWorld\";",
          "    let at = 1;",
          "    assert!(matcher.is_start_crlf(haystack, at));"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"\\nWorld\";",
          "    let at = 1;",
          "    matcher.is_start_crlf(haystack, at);",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"\\nWorld\";",
          "    let at = 1;",
          "    assert!(matcher.is_start_crlf(haystack, at));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"\\rWorld\";",
          "    let at = 1;",
          "    matcher.is_start_crlf(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert!(matcher.is_start_crlf(haystack, at) == matcher.is_start(haystack, at));",
          "    assert!(matcher.is_start_crlf(haystack, at) == true);",
          "    assert!(matcher.is_start_crlf(haystack, at) == (haystack[at - 1] == b'\\n'));",
          "    assert!(matcher.is_start_crlf(haystack, at) == (haystack[at - 1] == b'\\r' && (at >= haystack.len() || haystack[at] != b'\\n')));"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"\\rWorld\";",
          "    let at = 1;",
          "    matcher.is_start_crlf(haystack, at);",
          "    assert!(matcher.is_start_crlf(haystack, at) == matcher.is_start(haystack, at));",
          "    assert!(matcher.is_start_crlf(haystack, at) == true);",
          "    assert!(matcher.is_start_crlf(haystack, at) == (haystack[at - 1] == b'\\n'));",
          "    assert!(matcher.is_start_crlf(haystack, at) == (haystack[at - 1] == b'\\r' && (at >= haystack.len() || haystack[at] != b'\\n')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"Hello\\rWorld\";",
          "    let at = 7; // after 'Hello\\r'",
          "    matcher.is_start_crlf(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert!(matcher.is_start(haystack, at) == true);",
          "    assert!(haystack[at - 1] == b'\\n' || haystack[at - 1] == b'\\r' && (at >= haystack.len() || haystack[at] != b'\\n'));"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"Hello\\rWorld\";",
          "    let at = 7; // after 'Hello\\r'",
          "    matcher.is_start_crlf(haystack, at);",
          "    assert!(matcher.is_start(haystack, at) == true);",
          "    assert!(haystack[at - 1] == b'\\n' || haystack[at - 1] == b'\\r' && (at >= haystack.len() || haystack[at] != b'\\n'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"Hello\\r\"; // ending with a carriage return",
          "    let at = 6; // at the end",
          "    matcher.is_start_crlf(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert!(matcher.is_start_crlf(haystack, at));",
          "    assert!(matcher.is_start(haystack, at));",
          "    assert_eq!(haystack[at - 1], b'\\r');",
          "    assert!(at >= haystack.len() || haystack[at] != b'\\n');"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"Hello\\r\"; // ending with a carriage return",
          "    let at = 6; // at the end",
          "    matcher.is_start_crlf(haystack, at);",
          "    assert!(matcher.is_start_crlf(haystack, at));",
          "    assert!(matcher.is_start(haystack, at));",
          "    assert_eq!(haystack[at - 1], b'\\r');",
          "    assert!(at >= haystack.len() || haystack[at] != b'\\n');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]