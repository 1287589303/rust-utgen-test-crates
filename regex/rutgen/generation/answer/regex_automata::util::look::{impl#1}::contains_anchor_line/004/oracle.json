[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet::empty();",
          "    let result = look_set.contains_anchor_line();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet::empty();",
          "    let result = look_set.contains_anchor_line();",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: 0 };",
          "    let result = look_set.contains_anchor_line();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: 0 };",
          "    let result = look_set.contains_anchor_line();",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: Look::WordAscii as u32 }; // Set a bit that is not an anchor",
          "    let result = look_set.contains_anchor_line();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: Look::WordAscii as u32 }; // Set a bit that is not an anchor",
          "    let result = look_set.contains_anchor_line();",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]