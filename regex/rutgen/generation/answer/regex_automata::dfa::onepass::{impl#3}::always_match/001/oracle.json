[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA::always_match().unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let mut caps = dfa.create_captures();",
          "    dfa.captures(&mut cache, \"\", &mut caps);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(caps.get_match(), None);",
          "    cache.clear();",
          "    dfa.captures(&mut cache, \"foo\", &mut caps);",
          "    assert_eq!(caps.get_match(), Some(Match::must(0, 0..0)));"
        ],
        "code": [
          "{",
          "    let dfa = DFA::always_match().unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let mut caps = dfa.create_captures();",
          "    dfa.captures(&mut cache, \"\", &mut caps);",
          "    assert_eq!(caps.get_match(), None);",
          "    cache.clear();",
          "    dfa.captures(&mut cache, \"foo\", &mut caps);",
          "    assert_eq!(caps.get_match(), Some(Match::must(0, 0..0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA::always_match().unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let mut caps = dfa.create_captures();",
          "    dfa.captures(&mut cache, \"test\", &mut caps);",
          "}"
        ],
        "oracle": [
          "    assert!(dfa.captures(&mut cache, \"\", &mut caps).is_ok());",
          "    assert!(dfa.captures(&mut cache, \"foo\", &mut caps).is_ok());",
          "    assert_eq!(caps.get_match().unwrap().start(), 0);",
          "    assert_eq!(caps.get_match().unwrap().end(), 0);"
        ],
        "code": [
          "{",
          "    let dfa = DFA::always_match().unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let mut caps = dfa.create_captures();",
          "    dfa.captures(&mut cache, \"test\", &mut caps);",
          "    assert!(dfa.captures(&mut cache, \"\", &mut caps).is_ok());",
          "    assert!(dfa.captures(&mut cache, \"foo\", &mut caps).is_ok());",
          "    assert_eq!(caps.get_match().unwrap().start(), 0);",
          "    assert_eq!(caps.get_match().unwrap().end(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA::always_match().unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let mut caps = dfa.create_captures();",
          "    dfa.captures(&mut cache, \"foo\", &mut caps);",
          "    dfa.captures(&mut cache, \"bar\", &mut caps);",
          "    dfa.captures(&mut cache, \"baz\", &mut caps);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(caps.get_match(), Some(Match::must(0, 0..0)));",
          "    assert_eq!(caps.get_match(), Some(Match::must(0, 0..0)));",
          "    assert_eq!(caps.get_match(), Some(Match::must(0, 0..0)));"
        ],
        "code": [
          "{",
          "    let dfa = DFA::always_match().unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let mut caps = dfa.create_captures();",
          "    dfa.captures(&mut cache, \"foo\", &mut caps);",
          "    dfa.captures(&mut cache, \"bar\", &mut caps);",
          "    dfa.captures(&mut cache, \"baz\", &mut caps);",
          "    assert_eq!(caps.get_match(), Some(Match::must(0, 0..0)));",
          "    assert_eq!(caps.get_match(), Some(Match::must(0, 0..0)));",
          "    assert_eq!(caps.get_match(), Some(Match::must(0, 0..0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA::always_match().unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let mut caps = dfa.create_captures();",
          "    let long_input = \"a\".repeat(1000);",
          "    dfa.captures(&mut cache, &long_input, &mut caps);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(caps.get_match(), Some(Match::must(0, 0..0)));",
          "    assert_eq!(caps.get_match().is_some(), true);",
          "    assert_eq!(caps.get_match().unwrap().start(), 0);",
          "    assert_eq!(caps.get_match().unwrap().end(), 0);",
          "    assert_eq!(caps.get_match().unwrap().len(), 0);",
          "    assert_eq!(cache.len(), 1);",
          "    assert_eq!(dfa.pattern_len(), 1);",
          "    assert_eq!(dfa.state_len(), dfa.state_len());",
          "    assert!(dfa.alphabet_len() > 0);"
        ],
        "code": [
          "{",
          "    let dfa = DFA::always_match().unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let mut caps = dfa.create_captures();",
          "    let long_input = \"a\".repeat(1000);",
          "    dfa.captures(&mut cache, &long_input, &mut caps);",
          "    assert_eq!(caps.get_match(), Some(Match::must(0, 0..0)));",
          "    assert_eq!(caps.get_match().is_some(), true);",
          "    assert_eq!(caps.get_match().unwrap().start(), 0);",
          "    assert_eq!(caps.get_match().unwrap().end(), 0);",
          "    assert_eq!(caps.get_match().unwrap().len(), 0);",
          "    assert_eq!(cache.len(), 1);",
          "    assert_eq!(dfa.pattern_len(), 1);",
          "    assert_eq!(dfa.state_len(), dfa.state_len());",
          "    assert!(dfa.alphabet_len() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA::always_match().unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let mut caps = dfa.create_captures();",
          "    dfa.captures(&mut cache, \"a\", &mut caps);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.pattern_len(), 1);",
          "    assert_eq!(dfa.state_len(), 1);",
          "    assert_eq!(dfa.alphabet_len(), 256);",
          "    assert_eq!(dfa.stride2(), 9);",
          "    assert_eq!(caps.get_match(), None);",
          "    assert_eq!(cache.total(), 0);"
        ],
        "code": [
          "{",
          "    let dfa = DFA::always_match().unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let mut caps = dfa.create_captures();",
          "    dfa.captures(&mut cache, \"a\", &mut caps);",
          "    assert_eq!(dfa.pattern_len(), 1);",
          "    assert_eq!(dfa.state_len(), 1);",
          "    assert_eq!(dfa.alphabet_len(), 256);",
          "    assert_eq!(dfa.stride2(), 9);",
          "    assert_eq!(caps.get_match(), None);",
          "    assert_eq!(cache.total(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA::always_match().unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let mut caps = dfa.create_captures();",
          "    dfa.captures(&mut cache, \"!@#$%^&*()\", &mut caps);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(caps.get_match(), None);",
          "    dfa.captures(&mut cache, \"\", &mut caps);",
          "    assert_eq!(caps.get_match(), Some(Match::must(0, 0..0)));",
          "    dfa.captures(&mut cache, \"foo\", &mut caps);",
          "    assert_eq!(caps.get_match(), Some(Match::must(0, 0..0)));",
          "    dfa.captures(&mut cache, \"bar\", &mut caps);",
          "    assert_eq!(caps.get_match(), Some(Match::must(0, 0..0)));",
          "    dfa.captures(&mut cache, \"abcdef\", &mut caps);",
          "    assert_eq!(caps.get_match(), Some(Match::must(0, 0..0)));"
        ],
        "code": [
          "{",
          "    let dfa = DFA::always_match().unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let mut caps = dfa.create_captures();",
          "    dfa.captures(&mut cache, \"!@#$%^&*()\", &mut caps);",
          "    assert_eq!(caps.get_match(), None);",
          "    dfa.captures(&mut cache, \"\", &mut caps);",
          "    assert_eq!(caps.get_match(), Some(Match::must(0, 0..0)));",
          "    dfa.captures(&mut cache, \"foo\", &mut caps);",
          "    assert_eq!(caps.get_match(), Some(Match::must(0, 0..0)));",
          "    dfa.captures(&mut cache, \"bar\", &mut caps);",
          "    assert_eq!(caps.get_match(), Some(Match::must(0, 0..0)));",
          "    dfa.captures(&mut cache, \"abcdef\", &mut caps);",
          "    assert_eq!(caps.get_match(), Some(Match::must(0, 0..0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA::always_match().unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let mut caps = dfa.create_captures();",
          "    dfa.captures(&mut cache, \"\", &mut caps);",
          "    dfa.captures(&mut cache, \" \", &mut caps);",
          "    dfa.captures(&mut cache, \"\\n\", &mut caps);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Some(Match::must(0, 0..0)), caps.get_match());",
          "    dfa.captures(&mut cache, \"\", &mut caps);",
          "    assert_eq!(Some(Match::must(0, 0..0)), caps.get_match());",
          "    dfa.captures(&mut cache, \" \", &mut caps);",
          "    assert_eq!(Some(Match::must(0, 0..0)), caps.get_match());",
          "    dfa.captures(&mut cache, \"\\n\", &mut caps);",
          "    assert_eq!(Some(Match::must(0, 0..0)), caps.get_match());"
        ],
        "code": [
          "{",
          "    let dfa = DFA::always_match().unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let mut caps = dfa.create_captures();",
          "    dfa.captures(&mut cache, \"\", &mut caps);",
          "    dfa.captures(&mut cache, \" \", &mut caps);",
          "    dfa.captures(&mut cache, \"\\n\", &mut caps);",
          "    assert_eq!(Some(Match::must(0, 0..0)), caps.get_match());",
          "    dfa.captures(&mut cache, \"\", &mut caps);",
          "    assert_eq!(Some(Match::must(0, 0..0)), caps.get_match());",
          "    dfa.captures(&mut cache, \" \", &mut caps);",
          "    assert_eq!(Some(Match::must(0, 0..0)), caps.get_match());",
          "    dfa.captures(&mut cache, \"\\n\", &mut caps);",
          "    assert_eq!(Some(Match::must(0, 0..0)), caps.get_match());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]