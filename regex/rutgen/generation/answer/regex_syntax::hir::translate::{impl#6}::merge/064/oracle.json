[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_flags = Flags {",
          "        case_insensitive: Some(true),",
          "        multi_line: Some(true),",
          "        dot_matches_new_line: Some(true),",
          "        swap_greed: Some(true),",
          "        unicode: Some(true),",
          "        crlf: Some(true),",
          "    };",
          "    let previous_flags = Flags {",
          "        case_insensitive: Some(false),",
          "        multi_line: Some(false),",
          "        dot_matches_new_line: Some(false),",
          "        swap_greed: Some(false),",
          "        unicode: Some(false),",
          "        crlf: Some(false),",
          "    };",
          "    ",
          "    self_flags.merge(&previous_flags);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(self_flags.case_insensitive, Some(true));",
          "    assert_eq!(self_flags.multi_line, Some(true));",
          "    assert_eq!(self_flags.dot_matches_new_line, Some(true));",
          "    assert_eq!(self_flags.swap_greed, Some(true));",
          "    assert_eq!(self_flags.unicode, Some(true));",
          "    assert_eq!(self_flags.crlf, Some(true));"
        ],
        "code": [
          "{",
          "    let mut self_flags = Flags {",
          "        case_insensitive: Some(true),",
          "        multi_line: Some(true),",
          "        dot_matches_new_line: Some(true),",
          "        swap_greed: Some(true),",
          "        unicode: Some(true),",
          "        crlf: Some(true),",
          "    };",
          "    let previous_flags = Flags {",
          "        case_insensitive: Some(false),",
          "        multi_line: Some(false),",
          "        dot_matches_new_line: Some(false),",
          "        swap_greed: Some(false),",
          "        unicode: Some(false),",
          "        crlf: Some(false),",
          "    };",
          "    ",
          "    self_flags.merge(&previous_flags);",
          "    assert_eq!(self_flags.case_insensitive, Some(true));",
          "    assert_eq!(self_flags.multi_line, Some(true));",
          "    assert_eq!(self_flags.dot_matches_new_line, Some(true));",
          "    assert_eq!(self_flags.swap_greed, Some(true));",
          "    assert_eq!(self_flags.unicode, Some(true));",
          "    assert_eq!(self_flags.crlf, Some(true));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_flags = Flags {",
          "        case_insensitive: Some(false),",
          "        multi_line: Some(false),",
          "        dot_matches_new_line: Some(false),",
          "        swap_greed: Some(false),",
          "        unicode: Some(false),",
          "        crlf: Some(false),",
          "    };",
          "    let previous_flags = Flags {",
          "        case_insensitive: Some(true),",
          "        multi_line: Some(true),",
          "        dot_matches_new_line: Some(true),",
          "        swap_greed: Some(true),",
          "        unicode: Some(true),",
          "        crlf: Some(true),",
          "    };",
          "    ",
          "    self_flags.merge(&previous_flags);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(self_flags.case_insensitive, Some(false));",
          "    assert_eq!(self_flags.multi_line, Some(false));",
          "    assert_eq!(self_flags.dot_matches_new_line, Some(false));",
          "    assert_eq!(self_flags.swap_greed, Some(false));",
          "    assert_eq!(self_flags.unicode, Some(false));",
          "    assert_eq!(self_flags.crlf, Some(false));"
        ],
        "code": [
          "{",
          "    let mut self_flags = Flags {",
          "        case_insensitive: Some(false),",
          "        multi_line: Some(false),",
          "        dot_matches_new_line: Some(false),",
          "        swap_greed: Some(false),",
          "        unicode: Some(false),",
          "        crlf: Some(false),",
          "    };",
          "    let previous_flags = Flags {",
          "        case_insensitive: Some(true),",
          "        multi_line: Some(true),",
          "        dot_matches_new_line: Some(true),",
          "        swap_greed: Some(true),",
          "        unicode: Some(true),",
          "        crlf: Some(true),",
          "    };",
          "    ",
          "    self_flags.merge(&previous_flags);",
          "    assert_eq!(self_flags.case_insensitive, Some(false));",
          "    assert_eq!(self_flags.multi_line, Some(false));",
          "    assert_eq!(self_flags.dot_matches_new_line, Some(false));",
          "    assert_eq!(self_flags.swap_greed, Some(false));",
          "    assert_eq!(self_flags.unicode, Some(false));",
          "    assert_eq!(self_flags.crlf, Some(false));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_flags = Flags {",
          "        case_insensitive: Some(true),",
          "        multi_line: Some(false),",
          "        dot_matches_new_line: Some(true),",
          "        swap_greed: Some(false),",
          "        unicode: Some(false),",
          "        crlf: Some(true),",
          "    };",
          "    let previous_flags = Flags {",
          "        case_insensitive: Some(false),",
          "        multi_line: Some(true),",
          "        dot_matches_new_line: Some(false),",
          "        swap_greed: Some(true),",
          "        unicode: Some(true),",
          "        crlf: Some(false),",
          "    };",
          "    ",
          "    self_flags.merge(&previous_flags);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(self_flags.case_insensitive, Some(true));",
          "    assert_eq!(self_flags.multi_line, Some(false));",
          "    assert_eq!(self_flags.dot_matches_new_line, Some(true));",
          "    assert_eq!(self_flags.swap_greed, Some(false));",
          "    assert_eq!(self_flags.unicode, Some(false));",
          "    assert_eq!(self_flags.crlf, Some(true));"
        ],
        "code": [
          "{",
          "    let mut self_flags = Flags {",
          "        case_insensitive: Some(true),",
          "        multi_line: Some(false),",
          "        dot_matches_new_line: Some(true),",
          "        swap_greed: Some(false),",
          "        unicode: Some(false),",
          "        crlf: Some(true),",
          "    };",
          "    let previous_flags = Flags {",
          "        case_insensitive: Some(false),",
          "        multi_line: Some(true),",
          "        dot_matches_new_line: Some(false),",
          "        swap_greed: Some(true),",
          "        unicode: Some(true),",
          "        crlf: Some(false),",
          "    };",
          "    ",
          "    self_flags.merge(&previous_flags);",
          "    assert_eq!(self_flags.case_insensitive, Some(true));",
          "    assert_eq!(self_flags.multi_line, Some(false));",
          "    assert_eq!(self_flags.dot_matches_new_line, Some(true));",
          "    assert_eq!(self_flags.swap_greed, Some(false));",
          "    assert_eq!(self_flags.unicode, Some(false));",
          "    assert_eq!(self_flags.crlf, Some(true));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_flags = Flags {",
          "        case_insensitive: Some(true),",
          "        multi_line: Some(true),",
          "        dot_matches_new_line: Some(true),",
          "        swap_greed: Some(true),",
          "        unicode: Some(true),",
          "        crlf: Some(true),",
          "    };",
          "    let previous_flags = Flags {",
          "        case_insensitive: Some(true),",
          "        multi_line: Some(true),",
          "        dot_matches_new_line: Some(true),",
          "        swap_greed: Some(true),",
          "        unicode: Some(true),",
          "        crlf: Some(true),",
          "    };",
          "    ",
          "    self_flags.merge(&previous_flags);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(self_flags.case_insensitive, Some(true));",
          "    assert_eq!(self_flags.multi_line, Some(true));",
          "    assert_eq!(self_flags.dot_matches_new_line, Some(true));",
          "    assert_eq!(self_flags.swap_greed, Some(true));",
          "    assert_eq!(self_flags.unicode, Some(true));",
          "    assert_eq!(self_flags.crlf, Some(true));"
        ],
        "code": [
          "{",
          "    let mut self_flags = Flags {",
          "        case_insensitive: Some(true),",
          "        multi_line: Some(true),",
          "        dot_matches_new_line: Some(true),",
          "        swap_greed: Some(true),",
          "        unicode: Some(true),",
          "        crlf: Some(true),",
          "    };",
          "    let previous_flags = Flags {",
          "        case_insensitive: Some(true),",
          "        multi_line: Some(true),",
          "        dot_matches_new_line: Some(true),",
          "        swap_greed: Some(true),",
          "        unicode: Some(true),",
          "        crlf: Some(true),",
          "    };",
          "    ",
          "    self_flags.merge(&previous_flags);",
          "    assert_eq!(self_flags.case_insensitive, Some(true));",
          "    assert_eq!(self_flags.multi_line, Some(true));",
          "    assert_eq!(self_flags.dot_matches_new_line, Some(true));",
          "    assert_eq!(self_flags.swap_greed, Some(true));",
          "    assert_eq!(self_flags.unicode, Some(true));",
          "    assert_eq!(self_flags.crlf, Some(true));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]