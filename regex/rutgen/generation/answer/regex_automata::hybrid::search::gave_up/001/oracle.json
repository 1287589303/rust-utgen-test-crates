[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let offset = 0;",
          "    let error = gave_up(offset);",
          "}"
        ],
        "oracle": [
          "    let offset = 0;",
          "    let error = gave_up(offset);",
          "    assert_eq!(error.kind(), MatchErrorKind::GaveUp { offset });",
          "    let offset = 1;",
          "    let error = gave_up(offset);",
          "    assert_eq!(error.kind(), MatchErrorKind::GaveUp { offset });",
          "    let offset = 100;",
          "    let error = gave_up(offset);",
          "    assert_eq!(error.kind(), MatchErrorKind::GaveUp { offset });"
        ],
        "code": [
          "{",
          "    let offset = 0;",
          "    let error = gave_up(offset);",
          "    let offset = 0;",
          "    let error = gave_up(offset);",
          "    assert_eq!(error.kind(), MatchErrorKind::GaveUp { offset });",
          "    let offset = 1;",
          "    let error = gave_up(offset);",
          "    assert_eq!(error.kind(), MatchErrorKind::GaveUp { offset });",
          "    let offset = 100;",
          "    let error = gave_up(offset);",
          "    assert_eq!(error.kind(), MatchErrorKind::GaveUp { offset });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let offset = 1;",
          "    let error = gave_up(offset);",
          "}"
        ],
        "oracle": [
          "    let offset = 1;",
          "    let error = gave_up(offset);",
          "    assert_eq!(error.kind(), &MatchErrorKind::GaveUp { offset });",
          "    assert!(matches!(error, MatchError::GaveUp { .. }));",
          "    assert!(error.0.is_none() || error.0.is_alloc());"
        ],
        "code": [
          "{",
          "    let offset = 1;",
          "    let error = gave_up(offset);",
          "    let offset = 1;",
          "    let error = gave_up(offset);",
          "    assert_eq!(error.kind(), &MatchErrorKind::GaveUp { offset });",
          "    assert!(matches!(error, MatchError::GaveUp { .. }));",
          "    assert!(error.0.is_none() || error.0.is_alloc());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let offset = std::usize::MAX;",
          "    let error = gave_up(offset);",
          "}"
        ],
        "oracle": [
          "    let expected_error_kind = MatchErrorKind::GaveUp { offset: std::usize::MAX };",
          "    assert_eq!(error.kind(), &expected_error_kind);"
        ],
        "code": [
          "{",
          "    let offset = std::usize::MAX;",
          "    let error = gave_up(offset);",
          "    let expected_error_kind = MatchErrorKind::GaveUp { offset: std::usize::MAX };",
          "    assert_eq!(error.kind(), &expected_error_kind);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]