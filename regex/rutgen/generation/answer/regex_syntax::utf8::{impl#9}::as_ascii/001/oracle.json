[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ScalarRange { start: 0, end: 10 };",
          "    let result = range.as_ascii();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    let utf8_range = result.unwrap();",
          "    assert_eq!(utf8_range.start, 0);",
          "    assert_eq!(utf8_range.end, 10);",
          "    assert!(range.is_ascii());"
        ],
        "code": [
          "{",
          "    let range = ScalarRange { start: 0, end: 10 };",
          "    let result = range.as_ascii();",
          "    assert!(result.is_some());",
          "    let utf8_range = result.unwrap();",
          "    assert_eq!(utf8_range.start, 0);",
          "    assert_eq!(utf8_range.end, 10);",
          "    assert!(range.is_ascii());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ScalarRange { start: 50, end: 70 };",
          "    let result = range.as_ascii();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    let utf8_range = result.unwrap();",
          "    assert_eq!(utf8_range.start, 50);",
          "    assert_eq!(utf8_range.end, 70);"
        ],
        "code": [
          "{",
          "    let range = ScalarRange { start: 50, end: 70 };",
          "    let result = range.as_ascii();",
          "    assert!(result.is_some());",
          "    let utf8_range = result.unwrap();",
          "    assert_eq!(utf8_range.start, 50);",
          "    assert_eq!(utf8_range.end, 70);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ScalarRange { start: 120, end: 127 };",
          "    let result = range.as_ascii();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    let utf8_range = result.unwrap();",
          "    assert_eq!(utf8_range.start, 120);",
          "    assert_eq!(utf8_range.end, 127);"
        ],
        "code": [
          "{",
          "    let range = ScalarRange { start: 120, end: 127 };",
          "    let result = range.as_ascii();",
          "    assert!(result.is_some());",
          "    let utf8_range = result.unwrap();",
          "    assert_eq!(utf8_range.start, 120);",
          "    assert_eq!(utf8_range.end, 127);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ScalarRange { start: 100, end: 100 };",
          "    let result = range.as_ascii();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    let utf8_range = result.unwrap();",
          "    assert_eq!(utf8_range.start, 100);",
          "    assert_eq!(utf8_range.end, 100);"
        ],
        "code": [
          "{",
          "    let range = ScalarRange { start: 100, end: 100 };",
          "    let result = range.as_ascii();",
          "    assert!(result.is_some());",
          "    let utf8_range = result.unwrap();",
          "    assert_eq!(utf8_range.start, 100);",
          "    assert_eq!(utf8_range.end, 100);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ScalarRange { start: 0, end: 0 };",
          "    let result = range.as_ascii();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), Utf8Range::new(0, 0));",
          "    assert!(ScalarRange { start: 0, end: 0x7F }.is_ascii());",
          "    assert!(result.unwrap().matches(0));",
          "    assert!(result.unwrap().matches(0x7F));",
          "    assert!(!result.unwrap().matches(0x80));"
        ],
        "code": [
          "{",
          "    let range = ScalarRange { start: 0, end: 0 };",
          "    let result = range.as_ascii();",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), Utf8Range::new(0, 0));",
          "    assert!(ScalarRange { start: 0, end: 0x7F }.is_ascii());",
          "    assert!(result.unwrap().matches(0));",
          "    assert!(result.unwrap().matches(0x7F));",
          "    assert!(!result.unwrap().matches(0x80));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]