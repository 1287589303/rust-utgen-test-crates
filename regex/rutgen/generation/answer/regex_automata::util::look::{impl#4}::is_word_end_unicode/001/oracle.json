[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let result = matcher.is_word_end_unicode(&[], 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(UnicodeWordBoundaryError(())));"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let result = matcher.is_word_end_unicode(&[], 0);",
          "    assert_eq!(result, Err(UnicodeWordBoundaryError(())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let result = matcher.is_word_end_unicode(&[0x61], 1);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let result = matcher.is_word_end_unicode(&[0x61], 1);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let result = matcher.is_word_end_unicode(&[0x61, 0x62], 2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err(), UnicodeWordBoundaryError(()));"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let result = matcher.is_word_end_unicode(&[0x61, 0x62], 2);",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err(), UnicodeWordBoundaryError(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let result = matcher.is_word_end_unicode(&[0xE2, 0x9C, 0x94], 3);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), UnicodeWordBoundaryError(()));"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let result = matcher.is_word_end_unicode(&[0xE2, 0x9C, 0x94], 3);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), UnicodeWordBoundaryError(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let result = matcher.is_word_end_unicode(&[0x61, 0x62], 2);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), UnicodeWordBoundaryError(()));"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let result = matcher.is_word_end_unicode(&[0x61, 0x62], 2);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), UnicodeWordBoundaryError(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let result = matcher.is_word_end_unicode(&[0x61, 0x62], 3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(matcher.is_word_end_unicode(&[0x61, 0x62], 3), Err(UnicodeWordBoundaryError(())));"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let result = matcher.is_word_end_unicode(&[0x61, 0x62], 3);",
          "    assert_eq!(matcher.is_word_end_unicode(&[0x61, 0x62], 3), Err(UnicodeWordBoundaryError(())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]