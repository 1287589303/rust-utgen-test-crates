[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"hello world\"; // Contains word characters",
          "    let at: usize = 5; // Pointing to the end of \"hello\"",
          "    let _ = matcher.is_word_end_unicode(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert!(matcher.is_word_end_unicode(haystack, at).is_ok());",
          "    assert_eq!(matcher.is_word_end_unicode(haystack, at).unwrap(), true);"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"hello world\"; // Contains word characters",
          "    let at: usize = 5; // Pointing to the end of \"hello\"",
          "    let _ = matcher.is_word_end_unicode(haystack, at);",
          "    assert!(matcher.is_word_end_unicode(haystack, at).is_ok());",
          "    assert_eq!(matcher.is_word_end_unicode(haystack, at).unwrap(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"word\"; // Single word",
          "    let at: usize = 4; // Pointing after the last character",
          "    let _ = matcher.is_word_end_unicode(haystack, at);",
          "}"
        ],
        "oracle": [
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"word\";",
          "    let at: usize = 4;",
          "    assert_eq!(matcher.is_word_end_unicode(haystack, at), Ok(true));",
          "    ",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"test\";",
          "    let at: usize = 4;",
          "    assert_eq!(matcher.is_word_end_unicode(haystack, at), Ok(true));",
          "    ",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"\";",
          "    let at: usize = 0;",
          "    assert_eq!(matcher.is_word_end_unicode(haystack, at), Ok(false));",
          "    ",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"word!\";",
          "    let at: usize = 4;",
          "    assert_eq!(matcher.is_word_end_unicode(haystack, at), Ok(false));",
          "    ",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"hello world\";",
          "    let at: usize = 5;",
          "    assert_eq!(matcher.is_word_end_unicode(haystack, at), Ok(true));"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"word\"; // Single word",
          "    let at: usize = 4; // Pointing after the last character",
          "    let _ = matcher.is_word_end_unicode(haystack, at);",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"word\";",
          "    let at: usize = 4;",
          "    assert_eq!(matcher.is_word_end_unicode(haystack, at), Ok(true));",
          "    ",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"test\";",
          "    let at: usize = 4;",
          "    assert_eq!(matcher.is_word_end_unicode(haystack, at), Ok(true));",
          "    ",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"\";",
          "    let at: usize = 0;",
          "    assert_eq!(matcher.is_word_end_unicode(haystack, at), Ok(false));",
          "    ",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"word!\";",
          "    let at: usize = 4;",
          "    assert_eq!(matcher.is_word_end_unicode(haystack, at), Ok(false));",
          "    ",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"hello world\";",
          "    let at: usize = 5;",
          "    assert_eq!(matcher.is_word_end_unicode(haystack, at), Ok(true));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"end.\"; // Word followed by a punctuation",
          "    let at: usize = 3; // Pointing to the end of \"end\"",
          "    let _ = matcher.is_word_end_unicode(haystack, at);",
          "}"
        ],
        "oracle": [
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"end.\";",
          "    let at: usize = 3;",
          "    assert_eq!(matcher.is_word_end_unicode(haystack, at), Ok(true));",
          "    assert!(matcher.is_word_end_unicode(haystack, at).is_ok());",
          "    assert!(matcher.is_word_end_unicode(haystack, at).unwrap());",
          "    let at_out_of_bounds: usize = 4;",
          "    assert_eq!(matcher.is_word_end_unicode(haystack, at_out_of_bounds), Ok(false));",
          "    assert!(matcher.is_word_end_unicode(haystack, at).is_ok());",
          "    assert!(matcher.is_word_end_unicode(haystack, at) != Err(UnicodeWordBoundaryError(())));"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"end.\"; // Word followed by a punctuation",
          "    let at: usize = 3; // Pointing to the end of \"end\"",
          "    let _ = matcher.is_word_end_unicode(haystack, at);",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"end.\";",
          "    let at: usize = 3;",
          "    assert_eq!(matcher.is_word_end_unicode(haystack, at), Ok(true));",
          "    assert!(matcher.is_word_end_unicode(haystack, at).is_ok());",
          "    assert!(matcher.is_word_end_unicode(haystack, at).unwrap());",
          "    let at_out_of_bounds: usize = 4;",
          "    assert_eq!(matcher.is_word_end_unicode(haystack, at_out_of_bounds), Ok(false));",
          "    assert!(matcher.is_word_end_unicode(haystack, at).is_ok());",
          "    assert!(matcher.is_word_end_unicode(haystack, at) != Err(UnicodeWordBoundaryError(())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"hello?\"; // Word followed by a punctuation",
          "    let at: usize = 5; // Pointing to the end of \"hello\"",
          "    let _ = matcher.is_word_end_unicode(haystack, at);",
          "}"
        ],
        "oracle": [
          "    let haystack: &[u8] = b\"hello?\";",
          "    let at: usize = 5;",
          "    let result = matcher.is_word_end_unicode(haystack, at);",
          "    assert_eq!(result, Ok(true));",
          "    let haystack: &[u8] = b\"hello\";",
          "    let at: usize = 5;",
          "    let result = matcher.is_word_end_unicode(haystack, at);",
          "    assert_eq!(result, Ok(true));",
          "    let haystack: &[u8] = b\"hello!\";",
          "    let at: usize = 5;",
          "    let result = matcher.is_word_end_unicode(haystack, at);",
          "    assert_eq!(result, Ok(false));",
          "    let haystack: &[u8] = b\"\";",
          "    let at: usize = 0;",
          "    let result = matcher.is_word_end_unicode(haystack, at);",
          "    assert_eq!(result, Ok(false));",
          "    let haystack: &[u8] = b\"こんにちは\";",
          "    let at: usize = 5;",
          "    let result = matcher.is_word_end_unicode(haystack, at);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"hello?\"; // Word followed by a punctuation",
          "    let at: usize = 5; // Pointing to the end of \"hello\"",
          "    let _ = matcher.is_word_end_unicode(haystack, at);",
          "    let haystack: &[u8] = b\"hello?\";",
          "    let at: usize = 5;",
          "    let result = matcher.is_word_end_unicode(haystack, at);",
          "    assert_eq!(result, Ok(true));",
          "    let haystack: &[u8] = b\"hello\";",
          "    let at: usize = 5;",
          "    let result = matcher.is_word_end_unicode(haystack, at);",
          "    assert_eq!(result, Ok(true));",
          "    let haystack: &[u8] = b\"hello!\";",
          "    let at: usize = 5;",
          "    let result = matcher.is_word_end_unicode(haystack, at);",
          "    assert_eq!(result, Ok(false));",
          "    let haystack: &[u8] = b\"\";",
          "    let at: usize = 0;",
          "    let result = matcher.is_word_end_unicode(haystack, at);",
          "    assert_eq!(result, Ok(false));",
          "    let haystack: &[u8] = b\"こんにちは\";",
          "    let at: usize = 5;",
          "    let result = matcher.is_word_end_unicode(haystack, at);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]