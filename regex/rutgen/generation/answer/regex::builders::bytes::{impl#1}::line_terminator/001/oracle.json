[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let _ = RegexSetBuilder::new([r\"^test$\"])",
          "        .line_terminator(0)",
          "        .build()",
          "        .unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(RegexSetBuilder::new([r\"^test$\"]).line_terminator(0).build().is_ok());",
          "    assert!(RegexSetBuilder::new([r\"^test$\"]).line_terminator(b'\\n').build().is_ok());",
          "    assert!(RegexSetBuilder::new([r\"^test$\"]).line_terminator(b'\\r').build().is_ok());",
          "    assert!(RegexSetBuilder::new([r\"^test$\"]).line_terminator(b'\\x00').build().is_ok());",
          "    assert!(RegexSetBuilder::new([r\"^test$\"]).line_terminator(0x80).unicode(false).build().is_ok());",
          "    assert!(RegexSetBuilder::new([r\".\"]).line_terminator(b'\\x00').build().unwrap().is_match(b\"\\n\"));",
          "    assert!(!RegexSetBuilder::new([r\".\"]).line_terminator(b'\\x00').build().unwrap().is_match(b\"\\x00\"));"
        ],
        "code": [
          "{",
          "    let _ = RegexSetBuilder::new([r\"^test$\"])",
          "        .line_terminator(0)",
          "        .build()",
          "        .unwrap();",
          "    assert!(RegexSetBuilder::new([r\"^test$\"]).line_terminator(0).build().is_ok());",
          "    assert!(RegexSetBuilder::new([r\"^test$\"]).line_terminator(b'\\n').build().is_ok());",
          "    assert!(RegexSetBuilder::new([r\"^test$\"]).line_terminator(b'\\r').build().is_ok());",
          "    assert!(RegexSetBuilder::new([r\"^test$\"]).line_terminator(b'\\x00').build().is_ok());",
          "    assert!(RegexSetBuilder::new([r\"^test$\"]).line_terminator(0x80).unicode(false).build().is_ok());",
          "    assert!(RegexSetBuilder::new([r\".\"]).line_terminator(b'\\x00').build().unwrap().is_match(b\"\\n\"));",
          "    assert!(!RegexSetBuilder::new([r\".\"]).line_terminator(b'\\x00').build().unwrap().is_match(b\"\\x00\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let _ = RegexSetBuilder::new([r\"^test$\"])",
          "        .line_terminator(255)",
          "        .build()",
          "        .unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(RegexSetBuilder::new([r\"^test$\"]).line_terminator(255).build().is_ok(), true);",
          "    assert_eq!(RegexSetBuilder::new([r\"^test$\"]).line_terminator(0).build().is_ok(), true);",
          "    assert_eq!(RegexSetBuilder::new([r\"^test$\"]).line_terminator(10).build().is_ok(), true);",
          "    assert_eq!(RegexSetBuilder::new([r\"^test$\"]).line_terminator(0x80).build().is_ok(), true);",
          "    assert_eq!(RegexSetBuilder::new([r\"^test$\"]).line_terminator(0xFF).build().is_ok(), true);",
          "    assert_eq!(RegexSetBuilder::new([r\"^test$\"]).line_terminator(255).multi_line(true).build().is_ok(), true);",
          "    assert!(RegexSetBuilder::new([r\"^test$\"]).line_terminator(10).multi_line(false).build().is_ok());",
          "    assert!(RegexSetBuilder::new([r\".\"]).line_terminator(255).build().is_ok());",
          "    assert!(!RegexSetBuilder::new([r\".\"]).line_terminator(255).build().is_err());"
        ],
        "code": [
          "{",
          "    let _ = RegexSetBuilder::new([r\"^test$\"])",
          "        .line_terminator(255)",
          "        .build()",
          "        .unwrap();",
          "    assert_eq!(RegexSetBuilder::new([r\"^test$\"]).line_terminator(255).build().is_ok(), true);",
          "    assert_eq!(RegexSetBuilder::new([r\"^test$\"]).line_terminator(0).build().is_ok(), true);",
          "    assert_eq!(RegexSetBuilder::new([r\"^test$\"]).line_terminator(10).build().is_ok(), true);",
          "    assert_eq!(RegexSetBuilder::new([r\"^test$\"]).line_terminator(0x80).build().is_ok(), true);",
          "    assert_eq!(RegexSetBuilder::new([r\"^test$\"]).line_terminator(0xFF).build().is_ok(), true);",
          "    assert_eq!(RegexSetBuilder::new([r\"^test$\"]).line_terminator(255).multi_line(true).build().is_ok(), true);",
          "    assert!(RegexSetBuilder::new([r\"^test$\"]).line_terminator(10).multi_line(false).build().is_ok());",
          "    assert!(RegexSetBuilder::new([r\".\"]).line_terminator(255).build().is_ok());",
          "    assert!(!RegexSetBuilder::new([r\".\"]).line_terminator(255).build().is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let _ = RegexSetBuilder::new([r\"^test$\"])",
          "        .unicode(false)",
          "        .line_terminator(127)",
          "        .build()",
          "        .unwrap();",
          "}"
        ],
        "oracle": [
          "    self.line_terminator(127);"
        ],
        "code": [
          "{",
          "    let _ = RegexSetBuilder::new([r\"^test$\"])",
          "        .unicode(false)",
          "        .line_terminator(127)",
          "        .build()",
          "        .unwrap();",
          "    self.line_terminator(127);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let _ = RegexSetBuilder::new([r\"^test$\"])",
          "        .multi_line(true)",
          "        .line_terminator(10)",
          "        .build()",
          "        .unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(RegexSetBuilder::new([r\"^test$\"]).multi_line(true).line_terminator(10).build().is_ok(), true);",
          "    assert_eq!(RegexSetBuilder::new([r\"^test$\"]).multi_line(false).line_terminator(10).build().is_ok(), true);",
          "    assert_eq!(RegexSetBuilder::new([r\"^test$\"]).multi_line(true).line_terminator(0).build().is_ok(), true);",
          "    assert_eq!(RegexSetBuilder::new([r\"^test$\"]).multi_line(true).line_terminator(255).build().is_ok(), true);",
          "    assert_eq!(RegexSetBuilder::new([r\"^test$\"]).multi_line(true).line_terminator(10).build().unwrap().is_match(b\"\\n\"), false);",
          "    assert_eq!(RegexSetBuilder::new([r\"^test$\"]).multi_line(true).line_terminator(10).build().unwrap().is_match(b\"test\"), true);",
          "    assert_eq!(RegexSetBuilder::new([r\".\"]).multi_line(false).line_terminator(10).build().unwrap().is_match(b\"\\n\"), false);",
          "    assert_eq!(RegexSetBuilder::new([r\".\"]).multi_line(false).line_terminator(10).build().unwrap().is_match(b\"\\x00\"), false);",
          "    assert_eq!(RegexSetBuilder::new([r\".\"]).unicode(false).line_terminator(0x80).build().is_ok(), true);"
        ],
        "code": [
          "{",
          "    let _ = RegexSetBuilder::new([r\"^test$\"])",
          "        .multi_line(true)",
          "        .line_terminator(10)",
          "        .build()",
          "        .unwrap();",
          "    assert_eq!(RegexSetBuilder::new([r\"^test$\"]).multi_line(true).line_terminator(10).build().is_ok(), true);",
          "    assert_eq!(RegexSetBuilder::new([r\"^test$\"]).multi_line(false).line_terminator(10).build().is_ok(), true);",
          "    assert_eq!(RegexSetBuilder::new([r\"^test$\"]).multi_line(true).line_terminator(0).build().is_ok(), true);",
          "    assert_eq!(RegexSetBuilder::new([r\"^test$\"]).multi_line(true).line_terminator(255).build().is_ok(), true);",
          "    assert_eq!(RegexSetBuilder::new([r\"^test$\"]).multi_line(true).line_terminator(10).build().unwrap().is_match(b\"\\n\"), false);",
          "    assert_eq!(RegexSetBuilder::new([r\"^test$\"]).multi_line(true).line_terminator(10).build().unwrap().is_match(b\"test\"), true);",
          "    assert_eq!(RegexSetBuilder::new([r\".\"]).multi_line(false).line_terminator(10).build().unwrap().is_match(b\"\\n\"), false);",
          "    assert_eq!(RegexSetBuilder::new([r\".\"]).multi_line(false).line_terminator(10).build().unwrap().is_match(b\"\\x00\"), false);",
          "    assert_eq!(RegexSetBuilder::new([r\".\"]).unicode(false).line_terminator(0x80).build().is_ok(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let _ = RegexSetBuilder::new([r\"^test$\"])",
          "        .case_insensitive(true)",
          "        .line_terminator(10)",
          "        .build()",
          "        .unwrap();",
          "}"
        ],
        "oracle": [
          "    let builder = RegexSetBuilder::new([r\"^test$\"]).case_insensitive(true).line_terminator(10);",
          "    assert_eq!(builder.line_terminator(10), &builder);",
          "    let result = builder.build().unwrap();",
          "    assert!(result.is_match(b\"test\"));",
          "    assert!(!result.is_match(b\"test\\n\"));"
        ],
        "code": [
          "{",
          "    let _ = RegexSetBuilder::new([r\"^test$\"])",
          "        .case_insensitive(true)",
          "        .line_terminator(10)",
          "        .build()",
          "        .unwrap();",
          "    let builder = RegexSetBuilder::new([r\"^test$\"]).case_insensitive(true).line_terminator(10);",
          "    assert_eq!(builder.line_terminator(10), &builder);",
          "    let result = builder.build().unwrap();",
          "    assert!(result.is_match(b\"test\"));",
          "    assert!(!result.is_match(b\"test\\n\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let _ = RegexSetBuilder::new([r\".\"])",
          "        .dot_matches_new_line(true)",
          "        .line_terminator(10)",
          "        .build()",
          "        .unwrap();",
          "}"
        ],
        "oracle": [
          "    let _ = RegexSetBuilder::new([r\".\"])",
          "    .line_terminator(10)",
          "    .build()",
          "    .unwrap();"
        ],
        "code": [
          "{",
          "    let _ = RegexSetBuilder::new([r\".\"])",
          "        .dot_matches_new_line(true)",
          "        .line_terminator(10)",
          "        .build()",
          "        .unwrap();",
          "    let _ = RegexSetBuilder::new([r\".\"])",
          "    .line_terminator(10)",
          "    .build()",
          "    .unwrap();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let _ = RegexSetBuilder::new([r\"^test$\"])",
          "        .crlf(true)",
          "        .line_terminator(10)",
          "        .build()",
          "        .unwrap();",
          "}"
        ],
        "oracle": [
          "    let re = RegexSetBuilder::new([r\"^test$\"]).crlf(true).line_terminator(10).build().unwrap();",
          "    assert_eq!(re.is_match(b\"test\"), true);",
          "    assert_eq!(re.is_match(b\"\\ntest\"), false);",
          "    let _ = RegexSetBuilder::new([r\"^test$\"]).line_terminator(b'\\x00').build().unwrap();",
          "    assert_eq!(re.is_match(b\"test\"), true);",
          "    assert_eq!(re.is_match(b\"\\x00test\"), false);"
        ],
        "code": [
          "{",
          "    let _ = RegexSetBuilder::new([r\"^test$\"])",
          "        .crlf(true)",
          "        .line_terminator(10)",
          "        .build()",
          "        .unwrap();",
          "    let re = RegexSetBuilder::new([r\"^test$\"]).crlf(true).line_terminator(10).build().unwrap();",
          "    assert_eq!(re.is_match(b\"test\"), true);",
          "    assert_eq!(re.is_match(b\"\\ntest\"), false);",
          "    let _ = RegexSetBuilder::new([r\"^test$\"]).line_terminator(b'\\x00').build().unwrap();",
          "    assert_eq!(re.is_match(b\"test\"), true);",
          "    assert_eq!(re.is_match(b\"\\x00test\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]