[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_a = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'a', end: 'c' },",
          "        ClassUnicodeRange { start: 'd', end: 'f' },",
          "    ]);",
          "    let class_b = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'b', end: 'e' },",
          "    ]);",
          "    ",
          "    class_a.symmetric_difference(&class_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_a.ranges(), &[ClassUnicodeRange { start: 'a', end: 'a' }, ClassUnicodeRange { start: 'f', end: 'f' }]);",
          "    assert_eq!(class_b.ranges(), &[ClassUnicodeRange { start: 'b', end: 'e' }]);",
          "    assert!(class_a.is_ascii());"
        ],
        "code": [
          "{",
          "    let mut class_a = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'a', end: 'c' },",
          "        ClassUnicodeRange { start: 'd', end: 'f' },",
          "    ]);",
          "    let class_b = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'b', end: 'e' },",
          "    ]);",
          "    ",
          "    class_a.symmetric_difference(&class_b);",
          "    assert_eq!(class_a.ranges(), &[ClassUnicodeRange { start: 'a', end: 'a' }, ClassUnicodeRange { start: 'f', end: 'f' }]);",
          "    assert_eq!(class_b.ranges(), &[ClassUnicodeRange { start: 'b', end: 'e' }]);",
          "    assert!(class_a.is_ascii());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_a = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'a', end: 'a' },",
          "        ClassUnicodeRange { start: 'd', end: 'd' },",
          "    ]);",
          "    let class_b = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'b', end: 'c' },",
          "        ClassUnicodeRange { start: 'e', end: 'f' },",
          "    ]);",
          "    ",
          "    class_a.symmetric_difference(&class_b);",
          "}"
        ],
        "oracle": [
          "    let class_a = ClassUnicode::new(vec![ClassUnicodeRange { start: 'a', end: 'a' }, ClassUnicodeRange { start: 'd', end: 'd' }]);",
          "    let class_b = ClassUnicode::new(vec![ClassUnicodeRange { start: 'b', end: 'c' }, ClassUnicodeRange { start: 'e', end: 'f' }]);",
          "    let expected_class_a_after_symmetric_difference = ClassUnicode::new(vec![ClassUnicodeRange { start: 'a', end: 'a' }, ClassUnicodeRange { start: 'b', end: 'c' }, ClassUnicodeRange { start: 'd', end: 'd' }, ClassUnicodeRange { start: 'e', end: 'f' }]);",
          "    assert_eq!(class_a.ranges(), expected_class_a_after_symmetric_difference.ranges());"
        ],
        "code": [
          "{",
          "    let mut class_a = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'a', end: 'a' },",
          "        ClassUnicodeRange { start: 'd', end: 'd' },",
          "    ]);",
          "    let class_b = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'b', end: 'c' },",
          "        ClassUnicodeRange { start: 'e', end: 'f' },",
          "    ]);",
          "    ",
          "    class_a.symmetric_difference(&class_b);",
          "    let class_a = ClassUnicode::new(vec![ClassUnicodeRange { start: 'a', end: 'a' }, ClassUnicodeRange { start: 'd', end: 'd' }]);",
          "    let class_b = ClassUnicode::new(vec![ClassUnicodeRange { start: 'b', end: 'c' }, ClassUnicodeRange { start: 'e', end: 'f' }]);",
          "    let expected_class_a_after_symmetric_difference = ClassUnicode::new(vec![ClassUnicodeRange { start: 'a', end: 'a' }, ClassUnicodeRange { start: 'b', end: 'c' }, ClassUnicodeRange { start: 'd', end: 'd' }, ClassUnicodeRange { start: 'e', end: 'f' }]);",
          "    assert_eq!(class_a.ranges(), expected_class_a_after_symmetric_difference.ranges());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_a = ClassUnicode::empty();",
          "    let class_b = ClassUnicode::empty();",
          "    ",
          "    class_a.symmetric_difference(&class_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_a.ranges(), &[]);",
          "    assert!(class_a.is_ascii());",
          "    assert_eq!(class_a.minimum_len(), None);",
          "    assert_eq!(class_a.maximum_len(), None);",
          "    assert_eq!(class_a.literal(), None);",
          "    assert_eq!(class_a.to_byte_class(), None);"
        ],
        "code": [
          "{",
          "    let mut class_a = ClassUnicode::empty();",
          "    let class_b = ClassUnicode::empty();",
          "    ",
          "    class_a.symmetric_difference(&class_b);",
          "    assert_eq!(class_a.ranges(), &[]);",
          "    assert!(class_a.is_ascii());",
          "    assert_eq!(class_a.minimum_len(), None);",
          "    assert_eq!(class_a.maximum_len(), None);",
          "    assert_eq!(class_a.literal(), None);",
          "    assert_eq!(class_a.to_byte_class(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_a = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: '\\u{0000}', end: '\\u{FFFF}' },",
          "    ]);",
          "    let class_b = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: '\\u{0000}', end: '\\u{0000}' },",
          "    ]);",
          "    ",
          "    class_a.symmetric_difference(&class_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_a.ranges(), &[ClassUnicodeRange { start: '\\u{0001}', end: '\\u{FFFF}' }]);",
          "    assert!(class_a.is_ascii() == false);",
          "    assert!(class_a.minimum_len().is_none());",
          "    assert!(class_a.maximum_len().is_none());",
          "    assert!(class_a.literal().is_none());",
          "    assert!(class_a.to_byte_class().is_none());"
        ],
        "code": [
          "{",
          "    let mut class_a = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: '\\u{0000}', end: '\\u{FFFF}' },",
          "    ]);",
          "    let class_b = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: '\\u{0000}', end: '\\u{0000}' },",
          "    ]);",
          "    ",
          "    class_a.symmetric_difference(&class_b);",
          "    assert_eq!(class_a.ranges(), &[ClassUnicodeRange { start: '\\u{0001}', end: '\\u{FFFF}' }]);",
          "    assert!(class_a.is_ascii() == false);",
          "    assert!(class_a.minimum_len().is_none());",
          "    assert!(class_a.maximum_len().is_none());",
          "    assert!(class_a.literal().is_none());",
          "    assert!(class_a.to_byte_class().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_a = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'x', end: 'x' },",
          "    ]);",
          "    let class_b = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'y', end: 'y' },",
          "    ]);",
          "    ",
          "    class_a.symmetric_difference(&class_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_a.ranges(), &[ClassUnicodeRange { start: 'x', end: 'x' }, ClassUnicodeRange { start: 'y', end: 'y' }]);",
          "    assert_eq!(class_a.is_ascii(), true);",
          "    assert_eq!(class_a.minimum_len(), Some(1));",
          "    assert_eq!(class_a.maximum_len(), Some(1));",
          "    assert_eq!(class_a.literal(), None);",
          "    assert!(class_a.iter().count() == 2);",
          "    class_a.symmetric_difference(&class_a);",
          "    assert_eq!(class_a.ranges(), &[ClassUnicodeRange { start: 'y', end: 'y' }]);",
          "    assert_eq!(class_b.maximum_len(), Some(1));",
          "    assert_eq!(class_b.minimum_len(), Some(1));",
          "    class_a.symmetric_difference(&ClassUnicode::empty());",
          "    assert_eq!(class_a.ranges(), &[ClassUnicodeRange { start: 'y', end: 'y' }]);",
          "    class_b.symmetric_difference(&class_a);",
          "    assert_eq!(class_b.ranges(), &[ClassUnicodeRange { start: 'x', end: 'x' }]);"
        ],
        "code": [
          "{",
          "    let mut class_a = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'x', end: 'x' },",
          "    ]);",
          "    let class_b = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'y', end: 'y' },",
          "    ]);",
          "    ",
          "    class_a.symmetric_difference(&class_b);",
          "    assert_eq!(class_a.ranges(), &[ClassUnicodeRange { start: 'x', end: 'x' }, ClassUnicodeRange { start: 'y', end: 'y' }]);",
          "    assert_eq!(class_a.is_ascii(), true);",
          "    assert_eq!(class_a.minimum_len(), Some(1));",
          "    assert_eq!(class_a.maximum_len(), Some(1));",
          "    assert_eq!(class_a.literal(), None);",
          "    assert!(class_a.iter().count() == 2);",
          "    class_a.symmetric_difference(&class_a);",
          "    assert_eq!(class_a.ranges(), &[ClassUnicodeRange { start: 'y', end: 'y' }]);",
          "    assert_eq!(class_b.maximum_len(), Some(1));",
          "    assert_eq!(class_b.minimum_len(), Some(1));",
          "    class_a.symmetric_difference(&ClassUnicode::empty());",
          "    assert_eq!(class_a.ranges(), &[ClassUnicodeRange { start: 'y', end: 'y' }]);",
          "    class_b.symmetric_difference(&class_a);",
          "    assert_eq!(class_b.ranges(), &[ClassUnicodeRange { start: 'x', end: 'x' }]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_a = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'a', end: 'b' },",
          "    ]);",
          "    let class_b = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'c', end: 'd' },",
          "        ClassUnicodeRange { start: 'b', end: 'c' },",
          "    ]);",
          "    ",
          "    class_a.symmetric_difference(&class_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_a.ranges(), &[ClassUnicodeRange { start: 'a', end: 'b' }, ClassUnicodeRange { start: 'b', end: 'c' }, ClassUnicodeRange { start: 'c', end: 'd' }]);",
          "    assert_eq!(class_b.ranges(), &[ClassUnicodeRange { start: 'c', end: 'd' }, ClassUnicodeRange { start: 'b', end: 'c' }]);"
        ],
        "code": [
          "{",
          "    let mut class_a = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'a', end: 'b' },",
          "    ]);",
          "    let class_b = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'c', end: 'd' },",
          "        ClassUnicodeRange { start: 'b', end: 'c' },",
          "    ]);",
          "    ",
          "    class_a.symmetric_difference(&class_b);",
          "    assert_eq!(class_a.ranges(), &[ClassUnicodeRange { start: 'a', end: 'b' }, ClassUnicodeRange { start: 'b', end: 'c' }, ClassUnicodeRange { start: 'c', end: 'd' }]);",
          "    assert_eq!(class_b.ranges(), &[ClassUnicodeRange { start: 'c', end: 'd' }, ClassUnicodeRange { start: 'b', end: 'c' }]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]