[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser::new(config, \"\");",
          "    parser.bump_and_bump_space();",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser::new(config, \"\");",
          "    assert_eq!(parser.bump_and_bump_space(), false);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser::new(config, \"\");",
          "    parser.bump_and_bump_space();",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser::new(config, \"\");",
          "    assert_eq!(parser.bump_and_bump_space(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser::new(config, \"   \");",
          "    parser.bump_and_bump_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.bump_and_bump_space(), false);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser::new(config, \"   \");",
          "    parser.bump_and_bump_space();",
          "    assert_eq!(parser.bump_and_bump_space(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser::new(config, \"(abc\");",
          "    parser.bump_and_bump_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.bump_and_bump_space(), false);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser::new(config, \"(abc\");",
          "    parser.bump_and_bump_space();",
          "    assert_eq!(parser.bump_and_bump_space(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 0, flags: Flags::default() };",
          "    let parser = Parser::new(config, \"(a(b(c)))\");",
          "    parser.bump_and_bump_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.bump_and_bump_space(), false);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 0, flags: Flags::default() };",
          "    let parser = Parser::new(config, \"(a(b(c)))\");",
          "    parser.bump_and_bump_space();",
          "    assert_eq!(parser.bump_and_bump_space(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]