[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"abc\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.pos.set(0);",
          "    parser.char.set(Some('a'));",
          "    parser.flags.borrow_mut().ignore_whitespace = true;",
          "    ",
          "    let result = parser.bump_and_bump_space();",
          "}"
        ],
        "oracle": [
          "    assert!(parser.bump());",
          "    assert!(parser.is_done() == false);",
          "    assert_eq!(result, true);",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert_eq!(parser.char.get(), Some('b'));",
          "    assert!(parser.flags.borrow().ignore_whitespace == true);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"abc\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.pos.set(0);",
          "    parser.char.set(Some('a'));",
          "    parser.flags.borrow_mut().ignore_whitespace = true;",
          "    ",
          "    let result = parser.bump_and_bump_space();",
          "    assert!(parser.bump());",
          "    assert!(parser.is_done() == false);",
          "    assert_eq!(result, true);",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert_eq!(parser.char.get(), Some('b'));",
          "    assert!(parser.flags.borrow().ignore_whitespace == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"  abc\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.pos.set(0);",
          "    parser.char.set(Some(' '));",
          "    parser.flags.borrow_mut().ignore_whitespace = true;",
          "    ",
          "    let result = parser.bump_and_bump_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.pos.get(), 0);",
          "    assert_eq!(parser.char.get(), Some(' '));",
          "    assert!(parser.flags.borrow().ignore_whitespace);",
          "    assert!(result);",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert_eq!(parser.char.get(), Some('a'));",
          "    assert!(!parser.is_done());"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"  abc\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.pos.set(0);",
          "    parser.char.set(Some(' '));",
          "    parser.flags.borrow_mut().ignore_whitespace = true;",
          "    ",
          "    let result = parser.bump_and_bump_space();",
          "    assert_eq!(parser.pos.get(), 0);",
          "    assert_eq!(parser.char.get(), Some(' '));",
          "    assert!(parser.flags.borrow().ignore_whitespace);",
          "    assert!(result);",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert_eq!(parser.char.get(), Some('a'));",
          "    assert!(!parser.is_done());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"   abc\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.pos.set(0);",
          "    parser.char.set(Some(' '));",
          "    parser.flags.borrow_mut().ignore_whitespace = true;",
          "    ",
          "    let result = parser.bump_and_bump_space();",
          "}"
        ],
        "oracle": [
          "    assert!(parser.bump());",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert_eq!(parser.char.get(), Some('a'));",
          "    assert!(!parser.is_done());",
          "    assert!(parser.flags.borrow().ignore_whitespace);",
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"   abc\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.pos.set(0);",
          "    parser.char.set(Some(' '));",
          "    parser.flags.borrow_mut().ignore_whitespace = true;",
          "    ",
          "    let result = parser.bump_and_bump_space();",
          "    assert!(parser.bump());",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert_eq!(parser.char.get(), Some('a'));",
          "    assert!(!parser.is_done());",
          "    assert!(parser.flags.borrow().ignore_whitespace);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"a\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.pos.set(0);",
          "    parser.char.set(Some('a'));",
          "    parser.flags.borrow_mut().ignore_whitespace = true;",
          "",
          "    let result = parser.bump_and_bump_space();",
          "}"
        ],
        "oracle": [
          "    assert!(parser.bump());",
          "    assert!(parser.pos.get() == 1);",
          "    assert!(parser.char.get() == None);",
          "    assert!(parser.flags.borrow().ignore_whitespace);",
          "    assert!(result);",
          "    assert!(!parser.is_done());"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"a\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.pos.set(0);",
          "    parser.char.set(Some('a'));",
          "    parser.flags.borrow_mut().ignore_whitespace = true;",
          "",
          "    let result = parser.bump_and_bump_space();",
          "    assert!(parser.bump());",
          "    assert!(parser.pos.get() == 1);",
          "    assert!(parser.char.get() == None);",
          "    assert!(parser.flags.borrow().ignore_whitespace);",
          "    assert!(result);",
          "    assert!(!parser.is_done());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]