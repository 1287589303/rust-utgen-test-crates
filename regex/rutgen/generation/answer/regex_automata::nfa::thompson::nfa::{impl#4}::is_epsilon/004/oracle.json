[
  {
    "uses": [
      "use regex_automata::util::primitives::StateID;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use regex_automata::util::primitives::{StateID};",
          "",
          "    let state = State::BinaryUnion {",
          "        alt1: StateID(SmallIndex(1)),",
          "        alt2: StateID(SmallIndex(2)),",
          "    };",
          "    state.is_epsilon();",
          "}"
        ],
        "oracle": [
          "    assert!(state.is_epsilon());"
        ],
        "code": [
          "{",
          "    use regex_automata::util::primitives::{StateID};",
          "",
          "    let state = State::BinaryUnion {",
          "        alt1: StateID(SmallIndex(1)),",
          "        alt2: StateID(SmallIndex(2)),",
          "    };",
          "    state.is_epsilon();",
          "    assert!(state.is_epsilon());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use regex_automata::util::primitives::{StateID};",
          "",
          "    let state = State::BinaryUnion {",
          "        alt1: StateID(SmallIndex(0)),",
          "        alt2: StateID(SmallIndex(0)),",
          "    };",
          "    state.is_epsilon();",
          "}"
        ],
        "oracle": [
          "    assert!(state.is_epsilon());"
        ],
        "code": [
          "{",
          "    use regex_automata::util::primitives::{StateID};",
          "",
          "    let state = State::BinaryUnion {",
          "        alt1: StateID(SmallIndex(0)),",
          "        alt2: StateID(SmallIndex(0)),",
          "    };",
          "    state.is_epsilon();",
          "    assert!(state.is_epsilon());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]