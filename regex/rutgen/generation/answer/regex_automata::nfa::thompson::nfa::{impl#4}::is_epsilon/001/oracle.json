[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Match {",
          "        pattern_id: PatternID(SmallIndex::default()),",
          "    };",
          "    state.is_epsilon();",
          "}"
        ],
        "oracle": [
          "    assert!(!state.is_epsilon());",
          "    let state_dense = State::Dense(DenseTransitions { transitions: Box::new([StateID::default(); 256]) });",
          "    assert!(!state_dense.is_epsilon());",
          "    let state_sparse = State::Sparse(SparseTransitions { transitions: Box::new([]) });",
          "    assert!(!state_sparse.is_epsilon());",
          "    let state_fail = State::Fail;",
          "    assert!(!state_fail.is_epsilon());",
          "    let state_byte_range = State::ByteRange { trans: Transition { start: b'a', end: b'z', next: StateID::default() } };",
          "    assert!(!state_byte_range.is_epsilon());"
        ],
        "code": [
          "{",
          "    let state = State::Match {",
          "        pattern_id: PatternID(SmallIndex::default()),",
          "    };",
          "    state.is_epsilon();",
          "    assert!(!state.is_epsilon());",
          "    let state_dense = State::Dense(DenseTransitions { transitions: Box::new([StateID::default(); 256]) });",
          "    assert!(!state_dense.is_epsilon());",
          "    let state_sparse = State::Sparse(SparseTransitions { transitions: Box::new([]) });",
          "    assert!(!state_sparse.is_epsilon());",
          "    let state_fail = State::Fail;",
          "    assert!(!state_fail.is_epsilon());",
          "    let state_byte_range = State::ByteRange { trans: Transition { start: b'a', end: b'z', next: StateID::default() } };",
          "    assert!(!state_byte_range.is_epsilon());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Dense(DenseTransitions {",
          "        transitions: Box::new([StateID(SmallIndex::default()); 256]),",
          "    });",
          "    state.is_epsilon();",
          "}"
        ],
        "oracle": [
          "    assert!(!state.is_epsilon());"
        ],
        "code": [
          "{",
          "    let state = State::Dense(DenseTransitions {",
          "        transitions: Box::new([StateID(SmallIndex::default()); 256]),",
          "    });",
          "    state.is_epsilon();",
          "    assert!(!state.is_epsilon());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Sparse(SparseTransitions {",
          "        transitions: Box::new([]),",
          "    });",
          "    state.is_epsilon();",
          "}"
        ],
        "oracle": [
          "    assert!(!state.is_epsilon());",
          "    let state = State::Dense(DenseTransitions {",
          "    transitions: Box::new([]),",
          "    });",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Match {",
          "    pattern_id: PatternID::ZERO,",
          "    };",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Fail;",
          "    assert!(!state.is_epsilon());",
          "    let state = State::ByteRange {",
          "    trans: Transition { start: b'a', end: b'z', next: StateID::ZERO },",
          "    };",
          "    assert!(!state.is_epsilon());"
        ],
        "code": [
          "{",
          "    let state = State::Sparse(SparseTransitions {",
          "        transitions: Box::new([]),",
          "    });",
          "    state.is_epsilon();",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Dense(DenseTransitions {",
          "    transitions: Box::new([]),",
          "    });",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Match {",
          "    pattern_id: PatternID::ZERO,",
          "    };",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Fail;",
          "    assert!(!state.is_epsilon());",
          "    let state = State::ByteRange {",
          "    trans: Transition { start: b'a', end: b'z', next: StateID::ZERO },",
          "    };",
          "    assert!(!state.is_epsilon());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::ByteRange {",
          "        trans: Transition { start: b'a', end: b'z', next: StateID(SmallIndex::default()) },",
          "    };",
          "    state.is_epsilon();",
          "}"
        ],
        "oracle": [
          "    assert!(!state.is_epsilon());"
        ],
        "code": [
          "{",
          "    let state = State::ByteRange {",
          "        trans: Transition { start: b'a', end: b'z', next: StateID(SmallIndex::default()) },",
          "    };",
          "    state.is_epsilon();",
          "    assert!(!state.is_epsilon());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Fail;",
          "    state.is_epsilon();",
          "}"
        ],
        "oracle": [
          "    assert!(!state.is_epsilon());",
          "    let state = State::Match { pattern_id: PatternID::ZERO };",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Dense(DenseTransitions { transitions: Box::new([StateID::ZERO; 256]) });",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Sparse(SparseTransitions { transitions: Box::new([]) });",
          "    assert!(!state.is_epsilon());",
          "    let state = State::ByteRange { trans: Transition { start: b'a', end: b'z', next: StateID::ZERO } };",
          "    assert!(!state.is_epsilon());"
        ],
        "code": [
          "{",
          "    let state = State::Fail;",
          "    state.is_epsilon();",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Match { pattern_id: PatternID::ZERO };",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Dense(DenseTransitions { transitions: Box::new([StateID::ZERO; 256]) });",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Sparse(SparseTransitions { transitions: Box::new([]) });",
          "    assert!(!state.is_epsilon());",
          "    let state = State::ByteRange { trans: Transition { start: b'a', end: b'z', next: StateID::ZERO } };",
          "    assert!(!state.is_epsilon());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]