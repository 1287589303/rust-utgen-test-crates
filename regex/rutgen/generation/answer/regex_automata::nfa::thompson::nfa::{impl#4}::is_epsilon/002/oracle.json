[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Fail;",
          "    state.is_epsilon();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.is_epsilon(), true);",
          "    let state = State::Dense(DenseTransitions { transitions: Box::new([StateID::ZERO; 256]) });",
          "    assert_eq!(state.is_epsilon(), false);",
          "    let state = State::Sparse(SparseTransitions { transitions: Box::new([]) });",
          "    assert_eq!(state.is_epsilon(), false);",
          "    let state = State::ByteRange { trans: Transition { start: b'a', end: b'z', next: StateID::ZERO } };",
          "    assert_eq!(state.is_epsilon(), false);",
          "    let state = State::Match { pattern_id: PatternID::ZERO };",
          "    assert_eq!(state.is_epsilon(), false);"
        ],
        "code": [
          "{",
          "    let state = State::Fail;",
          "    state.is_epsilon();",
          "    assert_eq!(state.is_epsilon(), true);",
          "    let state = State::Dense(DenseTransitions { transitions: Box::new([StateID::ZERO; 256]) });",
          "    assert_eq!(state.is_epsilon(), false);",
          "    let state = State::Sparse(SparseTransitions { transitions: Box::new([]) });",
          "    assert_eq!(state.is_epsilon(), false);",
          "    let state = State::ByteRange { trans: Transition { start: b'a', end: b'z', next: StateID::ZERO } };",
          "    assert_eq!(state.is_epsilon(), false);",
          "    let state = State::Match { pattern_id: PatternID::ZERO };",
          "    assert_eq!(state.is_epsilon(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transitions = Box::new([StateID::ZERO; 256]);",
          "    let state = State::Dense(DenseTransitions { transitions });",
          "    state.is_epsilon();",
          "}"
        ],
        "oracle": [
          "    assert!(!state.is_epsilon());"
        ],
        "code": [
          "{",
          "    let transitions = Box::new([StateID::ZERO; 256]);",
          "    let state = State::Dense(DenseTransitions { transitions });",
          "    state.is_epsilon();",
          "    assert!(!state.is_epsilon());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transitions = Box::new([Transition { start: 0, end: 255, next: StateID::ZERO }]);",
          "    let state = State::Sparse(SparseTransitions { transitions });",
          "    state.is_epsilon();",
          "}"
        ],
        "oracle": [
          "    assert!(!state.is_epsilon());  // Test with State::Sparse",
          "    let state = State::Dense(DenseTransitions { transitions: Box::new([StateID::ZERO; 256]) });",
          "    assert!(!state.is_epsilon());  // Test with State::Dense",
          "    let state = State::ByteRange { trans: Transition { start: b'a', end: b'z', next: StateID::ZERO } };",
          "    assert!(!state.is_epsilon());  // Test with State::ByteRange",
          "    let state = State::Fail;",
          "    assert!(!state.is_epsilon());  // Test with State::Fail",
          "    let state = State::Match { pattern_id: PatternID::ZERO };",
          "    assert!(!state.is_epsilon());  // Test with State::Match"
        ],
        "code": [
          "{",
          "    let transitions = Box::new([Transition { start: 0, end: 255, next: StateID::ZERO }]);",
          "    let state = State::Sparse(SparseTransitions { transitions });",
          "    state.is_epsilon();",
          "    assert!(!state.is_epsilon());  // Test with State::Sparse",
          "    let state = State::Dense(DenseTransitions { transitions: Box::new([StateID::ZERO; 256]) });",
          "    assert!(!state.is_epsilon());  // Test with State::Dense",
          "    let state = State::ByteRange { trans: Transition { start: b'a', end: b'z', next: StateID::ZERO } };",
          "    assert!(!state.is_epsilon());  // Test with State::ByteRange",
          "    let state = State::Fail;",
          "    assert!(!state.is_epsilon());  // Test with State::Fail",
          "    let state = State::Match { pattern_id: PatternID::ZERO };",
          "    assert!(!state.is_epsilon());  // Test with State::Match",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Match { pattern_id: PatternID::ZERO };",
          "    state.is_epsilon();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.is_epsilon(), false);"
        ],
        "code": [
          "{",
          "    let state = State::Match { pattern_id: PatternID::ZERO };",
          "    state.is_epsilon();",
          "    assert_eq!(state.is_epsilon(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]