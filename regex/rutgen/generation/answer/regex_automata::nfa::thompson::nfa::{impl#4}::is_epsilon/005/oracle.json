[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alternates: Box<[StateID]> = Box::new([StateID(SmallIndex::ZERO), StateID(SmallIndex(1))]);",
          "    let state = State::Union { alternates };",
          "    let result = state.is_epsilon();",
          "}"
        ],
        "oracle": [
          "    assert!(result);"
        ],
        "code": [
          "{",
          "    let alternates: Box<[StateID]> = Box::new([StateID(SmallIndex::ZERO), StateID(SmallIndex(1))]);",
          "    let state = State::Union { alternates };",
          "    let result = state.is_epsilon();",
          "    assert!(result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alternates: Box<[StateID]> = Box::new([StateID(SmallIndex(2)), StateID(SmallIndex(3)), StateID(SmallIndex(4))]);",
          "    let state = State::Union { alternates };",
          "    let result = state.is_epsilon();",
          "}"
        ],
        "oracle": [
          "    assert!(result);"
        ],
        "code": [
          "{",
          "    let alternates: Box<[StateID]> = Box::new([StateID(SmallIndex(2)), StateID(SmallIndex(3)), StateID(SmallIndex(4))]);",
          "    let state = State::Union { alternates };",
          "    let result = state.is_epsilon();",
          "    assert!(result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alternates: Box<[StateID]> = Box::new([StateID(SmallIndex(5))]);",
          "    let state = State::Union { alternates };",
          "    let result = state.is_epsilon();",
          "}"
        ],
        "oracle": [
          "    assert!(result);"
        ],
        "code": [
          "{",
          "    let alternates: Box<[StateID]> = Box::new([StateID(SmallIndex(5))]);",
          "    let state = State::Union { alternates };",
          "    let result = state.is_epsilon();",
          "    assert!(result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]