[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Sparse {",
          "        transitions: Box::new([]),",
          "    };",
          "    state.is_epsilon();",
          "}"
        ],
        "oracle": [
          "    assert!(!state.is_epsilon());",
          "    let state = State::Dense {",
          "    transitions: Box::new([]),",
          "    };",
          "    assert!(!state.is_epsilon());",
          "    let state = State::ByteRange {",
          "    trans: Transition { start: b'a', end: b'z', next: StateID::ZERO },",
          "    };",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Match {",
          "    pattern_id: PatternID::ZERO,",
          "    };",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Fail;",
          "    assert!(!state.is_epsilon());"
        ],
        "code": [
          "{",
          "    let state = State::Sparse {",
          "        transitions: Box::new([]),",
          "    };",
          "    state.is_epsilon();",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Dense {",
          "    transitions: Box::new([]),",
          "    };",
          "    assert!(!state.is_epsilon());",
          "    let state = State::ByteRange {",
          "    trans: Transition { start: b'a', end: b'z', next: StateID::ZERO },",
          "    };",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Match {",
          "    pattern_id: PatternID::ZERO,",
          "    };",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Fail;",
          "    assert!(!state.is_epsilon());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Dense {",
          "        transitions: Box::new([StateID::ZERO; 256]),",
          "    };",
          "    state.is_epsilon();",
          "}"
        ],
        "oracle": [
          "    assert!(!state.is_epsilon());",
          "    let state = State::Sparse { transitions: Box::new([]) };",
          "    assert!(!state.is_epsilon());",
          "    let state = State::ByteRange { trans: Transition { start: b'a', end: b'z', next: StateID::ZERO } };",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Match { pattern_id: PatternID::ZERO };",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Fail;",
          "    assert!(!state.is_epsilon());"
        ],
        "code": [
          "{",
          "    let state = State::Dense {",
          "        transitions: Box::new([StateID::ZERO; 256]),",
          "    };",
          "    state.is_epsilon();",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Sparse { transitions: Box::new([]) };",
          "    assert!(!state.is_epsilon());",
          "    let state = State::ByteRange { trans: Transition { start: b'a', end: b'z', next: StateID::ZERO } };",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Match { pattern_id: PatternID::ZERO };",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Fail;",
          "    assert!(!state.is_epsilon());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::ByteRange {",
          "        trans: Transition {",
          "            start: 0,",
          "            end: 255,",
          "            next: StateID::ZERO,",
          "        },",
          "    };",
          "    state.is_epsilon();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.is_epsilon(), false);",
          "    let state = State::Sparse { transitions: Box::new([]) };",
          "    assert_eq!(state.is_epsilon(), false);",
          "    let state = State::Dense { transitions: Box::new([StateID::ZERO; 256]) };",
          "    assert_eq!(state.is_epsilon(), false);",
          "    let state = State::Match { pattern_id: PatternID::ZERO };",
          "    assert_eq!(state.is_epsilon(), false);",
          "    let state = State::Fail;",
          "    assert_eq!(state.is_epsilon(), false);"
        ],
        "code": [
          "{",
          "    let state = State::ByteRange {",
          "        trans: Transition {",
          "            start: 0,",
          "            end: 255,",
          "            next: StateID::ZERO,",
          "        },",
          "    };",
          "    state.is_epsilon();",
          "    assert_eq!(state.is_epsilon(), false);",
          "    let state = State::Sparse { transitions: Box::new([]) };",
          "    assert_eq!(state.is_epsilon(), false);",
          "    let state = State::Dense { transitions: Box::new([StateID::ZERO; 256]) };",
          "    assert_eq!(state.is_epsilon(), false);",
          "    let state = State::Match { pattern_id: PatternID::ZERO };",
          "    assert_eq!(state.is_epsilon(), false);",
          "    let state = State::Fail;",
          "    assert_eq!(state.is_epsilon(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Match {",
          "        pattern_id: PatternID::ZERO,",
          "    };",
          "    state.is_epsilon();",
          "}"
        ],
        "oracle": [
          "    assert!(!state.is_epsilon());",
          "    let state = State::Sparse { transitions: Box::new([]) };",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Dense { transitions: Box::new([]) };",
          "    assert!(!state.is_epsilon());",
          "    let state = State::ByteRange { trans: Transition { start: b'a', end: b'z', next: StateID::ZERO } };",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Fail;",
          "    assert!(!state.is_epsilon());"
        ],
        "code": [
          "{",
          "    let state = State::Match {",
          "        pattern_id: PatternID::ZERO,",
          "    };",
          "    state.is_epsilon();",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Sparse { transitions: Box::new([]) };",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Dense { transitions: Box::new([]) };",
          "    assert!(!state.is_epsilon());",
          "    let state = State::ByteRange { trans: Transition { start: b'a', end: b'z', next: StateID::ZERO } };",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Fail;",
          "    assert!(!state.is_epsilon());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Fail;",
          "    state.is_epsilon();",
          "}"
        ],
        "oracle": [
          "    assert!(!state.is_epsilon());",
          "    let state = State::Dense(DenseTransitions { transitions: Box::new([StateID::ZERO; 256]) });",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Sparse(SparseTransitions { transitions: Box::new([Transition { start: 0, end: 0, next: StateID::ZERO }; 10]) });",
          "    assert!(!state.is_epsilon());",
          "    let state = State::ByteRange { trans: Transition { start: b'a', end: b'z', next: StateID::ZERO } };",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Match { pattern_id: PatternID::ZERO };",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Look { look: Look::Start, next: StateID::ZERO };",
          "    assert!(state.is_epsilon());",
          "    let state = State::Union { alternates: Box::new([StateID::ZERO, StateID::ONE]) };",
          "    assert!(state.is_epsilon());",
          "    let state = State::BinaryUnion { alt1: StateID::ZERO, alt2: StateID::ONE };",
          "    assert!(state.is_epsilon());",
          "    let state = State::Capture { next: StateID::ZERO, pattern_id: PatternID::ZERO, group_index: SmallIndex::ZERO, slot: SmallIndex::ZERO };",
          "    assert!(state.is_epsilon());"
        ],
        "code": [
          "{",
          "    let state = State::Fail;",
          "    state.is_epsilon();",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Dense(DenseTransitions { transitions: Box::new([StateID::ZERO; 256]) });",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Sparse(SparseTransitions { transitions: Box::new([Transition { start: 0, end: 0, next: StateID::ZERO }; 10]) });",
          "    assert!(!state.is_epsilon());",
          "    let state = State::ByteRange { trans: Transition { start: b'a', end: b'z', next: StateID::ZERO } };",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Match { pattern_id: PatternID::ZERO };",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Look { look: Look::Start, next: StateID::ZERO };",
          "    assert!(state.is_epsilon());",
          "    let state = State::Union { alternates: Box::new([StateID::ZERO, StateID::ONE]) };",
          "    assert!(state.is_epsilon());",
          "    let state = State::BinaryUnion { alt1: StateID::ZERO, alt2: StateID::ONE };",
          "    assert!(state.is_epsilon());",
          "    let state = State::Capture { next: StateID::ZERO, pattern_id: PatternID::ZERO, group_index: SmallIndex::ZERO, slot: SmallIndex::ZERO };",
          "    assert!(state.is_epsilon());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]