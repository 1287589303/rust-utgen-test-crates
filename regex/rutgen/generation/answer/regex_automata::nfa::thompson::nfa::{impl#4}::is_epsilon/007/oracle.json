[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Dense {",
          "        transitions: Box::new([StateID::DEFAULT; 256]),",
          "    };",
          "    state.is_epsilon();",
          "}"
        ],
        "oracle": [
          "    assert!(!state.is_epsilon());"
        ],
        "code": [
          "{",
          "    let state = State::Dense {",
          "        transitions: Box::new([StateID::DEFAULT; 256]),",
          "    };",
          "    state.is_epsilon();",
          "    assert!(!state.is_epsilon());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Sparse {",
          "        transitions: Box::new([",
          "            Transition { start: 0, end: 255, next: StateID::ZERO },",
          "        ]),",
          "    };",
          "    state.is_epsilon();",
          "}"
        ],
        "oracle": [
          "    assert!(!state.is_epsilon());"
        ],
        "code": [
          "{",
          "    let state = State::Sparse {",
          "        transitions: Box::new([",
          "            Transition { start: 0, end: 255, next: StateID::ZERO },",
          "        ]),",
          "    };",
          "    state.is_epsilon();",
          "    assert!(!state.is_epsilon());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::ByteRange {",
          "        trans: Transition { start: 0, end: 255, next: StateID::ZERO },",
          "    };",
          "    state.is_epsilon();",
          "}"
        ],
        "oracle": [
          "    assert!(!state.is_epsilon());"
        ],
        "code": [
          "{",
          "    let state = State::ByteRange {",
          "        trans: Transition { start: 0, end: 255, next: StateID::ZERO },",
          "    };",
          "    state.is_epsilon();",
          "    assert!(!state.is_epsilon());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Match {",
          "        pattern_id: PatternID::ZERO,",
          "    };",
          "    state.is_epsilon();",
          "}"
        ],
        "oracle": [
          "    assert!(!state.is_epsilon());",
          "    let state = State::Dense { transitions: Box::new([]) };",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Sparse { transitions: Box::new([]) };",
          "    assert!(!state.is_epsilon());",
          "    let state = State::ByteRange { trans: Transition { start: b'a', end: b'z', next: StateID::ZERO } };",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Fail;",
          "    assert!(!state.is_epsilon());"
        ],
        "code": [
          "{",
          "    let state = State::Match {",
          "        pattern_id: PatternID::ZERO,",
          "    };",
          "    state.is_epsilon();",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Dense { transitions: Box::new([]) };",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Sparse { transitions: Box::new([]) };",
          "    assert!(!state.is_epsilon());",
          "    let state = State::ByteRange { trans: Transition { start: b'a', end: b'z', next: StateID::ZERO } };",
          "    assert!(!state.is_epsilon());",
          "    let state = State::Fail;",
          "    assert!(!state.is_epsilon());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Fail;",
          "    state.is_epsilon();",
          "}"
        ],
        "oracle": [
          "    assert!(!state.is_epsilon());"
        ],
        "code": [
          "{",
          "    let state = State::Fail;",
          "    state.is_epsilon();",
          "    assert!(!state.is_epsilon());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]