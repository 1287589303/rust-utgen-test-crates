[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Look {",
          "        look: Look::Start,",
          "        next: StateID::default(),",
          "    };",
          "    state.is_epsilon();",
          "}"
        ],
        "oracle": [
          "    assert!(state.is_epsilon());"
        ],
        "code": [
          "{",
          "    let state = State::Look {",
          "        look: Look::Start,",
          "        next: StateID::default(),",
          "    };",
          "    state.is_epsilon();",
          "    assert!(state.is_epsilon());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Look {",
          "        look: Look::End,",
          "        next: StateID::default(),",
          "    };",
          "    state.is_epsilon();",
          "}"
        ],
        "oracle": [
          "    assert!(state.is_epsilon());"
        ],
        "code": [
          "{",
          "    let state = State::Look {",
          "        look: Look::End,",
          "        next: StateID::default(),",
          "    };",
          "    state.is_epsilon();",
          "    assert!(state.is_epsilon());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Look {",
          "        look: Look::StartLF,",
          "        next: StateID::default(),",
          "    };",
          "    state.is_epsilon();",
          "}"
        ],
        "oracle": [
          "    assert!(state.is_epsilon());"
        ],
        "code": [
          "{",
          "    let state = State::Look {",
          "        look: Look::StartLF,",
          "        next: StateID::default(),",
          "    };",
          "    state.is_epsilon();",
          "    assert!(state.is_epsilon());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Look {",
          "        look: Look::EndLF,",
          "        next: StateID::default(),",
          "    };",
          "    state.is_epsilon();",
          "}"
        ],
        "oracle": [
          "    assert!(state.is_epsilon());"
        ],
        "code": [
          "{",
          "    let state = State::Look {",
          "        look: Look::EndLF,",
          "        next: StateID::default(),",
          "    };",
          "    state.is_epsilon();",
          "    assert!(state.is_epsilon());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Look {",
          "        look: Look::WordAscii,",
          "        next: StateID::default(),",
          "    };",
          "    state.is_epsilon();",
          "}"
        ],
        "oracle": [
          "    assert!(state.is_epsilon());"
        ],
        "code": [
          "{",
          "    let state = State::Look {",
          "        look: Look::WordAscii,",
          "        next: StateID::default(),",
          "    };",
          "    state.is_epsilon();",
          "    assert!(state.is_epsilon());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Look {",
          "        look: Look::WordUnicode,",
          "        next: StateID::default(),",
          "    };",
          "    state.is_epsilon();",
          "}"
        ],
        "oracle": [
          "    assert!(state.is_epsilon());"
        ],
        "code": [
          "{",
          "    let state = State::Look {",
          "        look: Look::WordUnicode,",
          "        next: StateID::default(),",
          "    };",
          "    state.is_epsilon();",
          "    assert!(state.is_epsilon());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Look {",
          "        look: Look::WordStartAscii,",
          "        next: StateID::default(),",
          "    };",
          "    state.is_epsilon();",
          "}"
        ],
        "oracle": [
          "    assert!(state.is_epsilon());"
        ],
        "code": [
          "{",
          "    let state = State::Look {",
          "        look: Look::WordStartAscii,",
          "        next: StateID::default(),",
          "    };",
          "    state.is_epsilon();",
          "    assert!(state.is_epsilon());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Look {",
          "        look: Look::WordEndAscii,",
          "        next: StateID::default(),",
          "    };",
          "    state.is_epsilon();",
          "}"
        ],
        "oracle": [
          "    assert!(state.is_epsilon());"
        ],
        "code": [
          "{",
          "    let state = State::Look {",
          "        look: Look::WordEndAscii,",
          "        next: StateID::default(),",
          "    };",
          "    state.is_epsilon();",
          "    assert!(state.is_epsilon());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]