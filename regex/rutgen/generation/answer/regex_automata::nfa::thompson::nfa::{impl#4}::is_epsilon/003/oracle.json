[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Capture {",
          "        next: StateID::default(),",
          "        pattern_id: PatternID::default(),",
          "        group_index: SmallIndex::default(),",
          "        slot: SmallIndex::default(),",
          "    };",
          "    let _result = state.is_epsilon();",
          "}"
        ],
        "oracle": [
          "    assert!(state.is_epsilon());"
        ],
        "code": [
          "{",
          "    let state = State::Capture {",
          "        next: StateID::default(),",
          "        pattern_id: PatternID::default(),",
          "        group_index: SmallIndex::default(),",
          "        slot: SmallIndex::default(),",
          "    };",
          "    let _result = state.is_epsilon();",
          "    assert!(state.is_epsilon());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Capture {",
          "        next: StateID(SmallIndex(1)),",
          "        pattern_id: PatternID(SmallIndex(1)),",
          "        group_index: SmallIndex(2),",
          "        slot: SmallIndex(3),",
          "    };",
          "    let _result = state.is_epsilon();",
          "}"
        ],
        "oracle": [
          "    assert!(state.is_epsilon());"
        ],
        "code": [
          "{",
          "    let state = State::Capture {",
          "        next: StateID(SmallIndex(1)),",
          "        pattern_id: PatternID(SmallIndex(1)),",
          "        group_index: SmallIndex(2),",
          "        slot: SmallIndex(3),",
          "    };",
          "    let _result = state.is_epsilon();",
          "    assert!(state.is_epsilon());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]