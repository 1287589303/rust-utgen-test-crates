[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA::new(r\"\\w\").unwrap();",
          "    let mut cache = Cache::new(&dfa);",
          "    cache.reset(&dfa);",
          "    // Followed by calls to functions that depend on the reset cache.",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cache.clear_count(), 0);",
          "    assert_eq!(cache.memory_usage(), expected_memory_usage_after_reset);",
          "    assert!(cache.sparses.is_empty());",
          "    assert!(cache.states_to_id.is_empty());",
          "    assert!(cache.states.is_empty());",
          "    assert_eq!(cache.bytes_searched, 0);",
          "    assert!(cache.progress.is_none());",
          "    assert!(cache.state_saver == StateSaver::None);"
        ],
        "code": [
          "{",
          "    let dfa = DFA::new(r\"\\w\").unwrap();",
          "    let mut cache = Cache::new(&dfa);",
          "    cache.reset(&dfa);",
          "    // Followed by calls to functions that depend on the reset cache.",
          "    assert_eq!(cache.clear_count(), 0);",
          "    assert_eq!(cache.memory_usage(), expected_memory_usage_after_reset);",
          "    assert!(cache.sparses.is_empty());",
          "    assert!(cache.states_to_id.is_empty());",
          "    assert!(cache.states.is_empty());",
          "    assert_eq!(cache.bytes_searched, 0);",
          "    assert!(cache.progress.is_none());",
          "    assert!(cache.state_saver == StateSaver::None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa1 = DFA::new(r\"\\w\").unwrap();",
          "    let dfa2 = DFA::new(r\"\\W\").unwrap();",
          "    let mut cache = Cache::new(&dfa1);",
          "    cache.reset(&dfa2);",
          "    // Followed by calls to functions that depend on the reset cache.",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cache.clear_count(), 0);",
          "    assert!(cache.memory_usage() > 0);",
          "    assert!(cache.sparses.is_empty());",
          "    assert!(cache.states.is_empty());",
          "    assert!(cache.states_to_id.is_empty());",
          "    assert!(cache.bytes_searched == 0);",
          "    assert!(cache.progress.is_none());",
          "    assert!(cache.state_saver == StateSaver::None);",
          "    assert!(cache.trans.len() == MIN_STATES);",
          "    assert!(cache.starts.len() == MIN_STATES);",
          "    assert_ne!(cache.cache_capacity, 0);",
          "    assert!(cache.next_state_id().is_ok());",
          "    assert_eq!(cache.saved_state_id().0, 0);"
        ],
        "code": [
          "{",
          "    let dfa1 = DFA::new(r\"\\w\").unwrap();",
          "    let dfa2 = DFA::new(r\"\\W\").unwrap();",
          "    let mut cache = Cache::new(&dfa1);",
          "    cache.reset(&dfa2);",
          "    // Followed by calls to functions that depend on the reset cache.",
          "    assert_eq!(cache.clear_count(), 0);",
          "    assert!(cache.memory_usage() > 0);",
          "    assert!(cache.sparses.is_empty());",
          "    assert!(cache.states.is_empty());",
          "    assert!(cache.states_to_id.is_empty());",
          "    assert!(cache.bytes_searched == 0);",
          "    assert!(cache.progress.is_none());",
          "    assert!(cache.state_saver == StateSaver::None);",
          "    assert!(cache.trans.len() == MIN_STATES);",
          "    assert!(cache.starts.len() == MIN_STATES);",
          "    assert_ne!(cache.cache_capacity, 0);",
          "    assert!(cache.next_state_id().is_ok());",
          "    assert_eq!(cache.saved_state_id().0, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA::new(\"\").unwrap();",
          "    let mut cache = Cache::new(&dfa);",
          "    cache.reset(&dfa);",
          "    // Followed by calls to functions that depend on the reset cache.",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cache.clear_count(), 0);",
          "    assert_eq!(cache.memory_usage(), 0);",
          "    assert!(cache.progress.is_none());",
          "    assert!(cache.sparses.is_empty());",
          "    assert!(cache.states.is_empty());",
          "    assert!(cache.states_to_id.is_empty());",
          "    assert_eq!(cache.trans.len(), MIN_STATES);",
          "    assert_eq!(cache.starts.len(), MIN_STATES);",
          "    assert!(cache.stack.is_empty());",
          "    assert_eq!(cache.bytes_searched, 0);"
        ],
        "code": [
          "{",
          "    let dfa = DFA::new(\"\").unwrap();",
          "    let mut cache = Cache::new(&dfa);",
          "    cache.reset(&dfa);",
          "    // Followed by calls to functions that depend on the reset cache.",
          "    assert_eq!(cache.clear_count(), 0);",
          "    assert_eq!(cache.memory_usage(), 0);",
          "    assert!(cache.progress.is_none());",
          "    assert!(cache.sparses.is_empty());",
          "    assert!(cache.states.is_empty());",
          "    assert!(cache.states_to_id.is_empty());",
          "    assert_eq!(cache.trans.len(), MIN_STATES);",
          "    assert_eq!(cache.starts.len(), MIN_STATES);",
          "    assert!(cache.stack.is_empty());",
          "    assert_eq!(cache.bytes_searched, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA::new(r\"abcde\").unwrap();",
          "    let mut cache = Cache::new(&dfa);",
          "    cache.reset(&dfa);",
          "    // Followed by calls to functions that depend on the reset cache.",
          "}"
        ],
        "oracle": [
          "    assert!(dfa.is_valid());",
          "    assert_eq!(cache.clear_count(), 0);",
          "    assert_eq!(cache.memory_usage(), 0);",
          "    assert!(cache.progress.is_none());",
          "    assert!(cache.sparses.is_empty());",
          "    assert!(cache.states.is_empty());",
          "    assert!(cache.states_to_id.is_empty());",
          "    assert!(cache.stack.is_empty());",
          "    assert!(cache.dfa == &dfa);",
          "    assert!(cache.trans.iter().all(|&id| id == LazyStateID(0)));",
          "    assert!(cache.starts.iter().all(|&id| id == LazyStateID(0)));"
        ],
        "code": [
          "{",
          "    let dfa = DFA::new(r\"abcde\").unwrap();",
          "    let mut cache = Cache::new(&dfa);",
          "    cache.reset(&dfa);",
          "    // Followed by calls to functions that depend on the reset cache.",
          "    assert!(dfa.is_valid());",
          "    assert_eq!(cache.clear_count(), 0);",
          "    assert_eq!(cache.memory_usage(), 0);",
          "    assert!(cache.progress.is_none());",
          "    assert!(cache.sparses.is_empty());",
          "    assert!(cache.states.is_empty());",
          "    assert!(cache.states_to_id.is_empty());",
          "    assert!(cache.stack.is_empty());",
          "    assert!(cache.dfa == &dfa);",
          "    assert!(cache.trans.iter().all(|&id| id == LazyStateID(0)));",
          "    assert!(cache.starts.iter().all(|&id| id == LazyStateID(0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa1 = DFA::new(r\"abc\").unwrap();",
          "    let dfa2 = DFA::new(r\"def\").unwrap();",
          "    let inputs = vec![\"\", \"a\", \"abc\", \"abcdef\", \"abcdefg\"];",
          "    let mut cache = Cache::new(&dfa1);",
          "    ",
          "    for input in inputs {",
          "        cache.reset(&dfa1);",
          "        // Followed by calls to functions that depend on the reset cache.",
          "    }",
          "    ",
          "    cache.reset(&dfa2);",
          "    for input in inputs {",
          "        // Followed by calls to functions that depend on the reset cache for dfa2.",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cache.clear_count(), 0);",
          "    assert_eq!(cache.memory_usage(), initial_memory_usage);",
          "    assert!(cache.bytes_searched == 0);",
          "    cache.reset(&dfa1);",
          "    assert!(cache.progress.is_none());",
          "    assert_eq!(cache.clear_count(), 0);",
          "    cache.reset(&dfa2);",
          "    assert!(cache.progress.is_none());",
          "    assert_eq!(cache.clear_count(), 0);"
        ],
        "code": [
          "{",
          "    let dfa1 = DFA::new(r\"abc\").unwrap();",
          "    let dfa2 = DFA::new(r\"def\").unwrap();",
          "    let inputs = vec![\"\", \"a\", \"abc\", \"abcdef\", \"abcdefg\"];",
          "    let mut cache = Cache::new(&dfa1);",
          "    ",
          "    for input in inputs {",
          "        cache.reset(&dfa1);",
          "        // Followed by calls to functions that depend on the reset cache.",
          "    }",
          "    ",
          "    cache.reset(&dfa2);",
          "    for input in inputs {",
          "        // Followed by calls to functions that depend on the reset cache for dfa2.",
          "    }",
          "    assert_eq!(cache.clear_count(), 0);",
          "    assert_eq!(cache.memory_usage(), initial_memory_usage);",
          "    assert!(cache.bytes_searched == 0);",
          "    cache.reset(&dfa1);",
          "    assert!(cache.progress.is_none());",
          "    assert_eq!(cache.clear_count(), 0);",
          "    cache.reset(&dfa2);",
          "    assert!(cache.progress.is_none());",
          "    assert_eq!(cache.clear_count(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]