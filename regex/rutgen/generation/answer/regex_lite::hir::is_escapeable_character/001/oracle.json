[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let meta_chars = vec!['\\\\', '.', '+', '*', '?', '(', ')', '|', '[', ']', '{', '}', '^', '$', '#', '&', '-', '~'];",
          "    for c in meta_chars {",
          "        let _result = is_escapeable_character(c);",
          "    }",
          "}"
        ],
        "oracle": [
          "    true",
          "    true",
          "    true",
          "    true",
          "    true",
          "    true",
          "    true",
          "    true",
          "    true",
          "    true",
          "    true",
          "    true",
          "    true",
          "    true",
          "    true",
          "    true",
          "    true",
          "    true"
        ],
        "code": [
          "{",
          "    let meta_chars = vec!['\\\\', '.', '+', '*', '?', '(', ')', '|', '[', ']', '{', '}', '^', '$', '#', '&', '-', '~'];",
          "    for c in meta_chars {",
          "        let _result = is_escapeable_character(c);",
          "    }",
          "    true",
          "    true",
          "    true",
          "    true",
          "    true",
          "    true",
          "    true",
          "    true",
          "    true",
          "    true",
          "    true",
          "    true",
          "    true",
          "    true",
          "    true",
          "    true",
          "    true",
          "    true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let non_meta_chars = vec!['!', '@', '%', ',', ':', ';', '\"', '\\'', '/', '=', '^', '`', '<', '>'];",
          "    for c in non_meta_chars {",
          "        let _result = is_escapeable_character(c);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_escapeable_character('@'), true);",
          "    assert_eq!(is_escapeable_character('!'), true);",
          "    assert_eq!(is_escapeable_character('%'), true);",
          "    assert_eq!(is_escapeable_character(','), true);",
          "    assert_eq!(is_escapeable_character(':'), true);",
          "    assert_eq!(is_escapeable_character(';'), true);",
          "    assert_eq!(is_escapeable_character('\"'), true);",
          "    assert_eq!(is_escapeable_character('\\''), true);",
          "    assert_eq!(is_escapeable_character('/'), true);",
          "    assert_eq!(is_escapeable_character('='), true);",
          "    assert_eq!(is_escapeable_character('^'), true);",
          "    assert_eq!(is_escapeable_character('`'), true);"
        ],
        "code": [
          "{",
          "    let non_meta_chars = vec!['!', '@', '%', ',', ':', ';', '\"', '\\'', '/', '=', '^', '`', '<', '>'];",
          "    for c in non_meta_chars {",
          "        let _result = is_escapeable_character(c);",
          "    }",
          "    assert_eq!(is_escapeable_character('@'), true);",
          "    assert_eq!(is_escapeable_character('!'), true);",
          "    assert_eq!(is_escapeable_character('%'), true);",
          "    assert_eq!(is_escapeable_character(','), true);",
          "    assert_eq!(is_escapeable_character(':'), true);",
          "    assert_eq!(is_escapeable_character(';'), true);",
          "    assert_eq!(is_escapeable_character('\"'), true);",
          "    assert_eq!(is_escapeable_character('\\''), true);",
          "    assert_eq!(is_escapeable_character('/'), true);",
          "    assert_eq!(is_escapeable_character('='), true);",
          "    assert_eq!(is_escapeable_character('^'), true);",
          "    assert_eq!(is_escapeable_character('`'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]