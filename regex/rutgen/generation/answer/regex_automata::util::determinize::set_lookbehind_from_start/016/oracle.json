[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = StateBuilderMatches(vec![]);",
          "    let lineterm = b'\\r';",
          "",
          "    let lookset = LookSet::full(); // Assuming full means contains everything",
          "    let nfa = {",
          "        struct TestNFA {",
          "            reverse: bool,",
          "            lineterm: u8,",
          "            lookset: LookSet,",
          "        }",
          "",
          "        impl thompson::NFA for TestNFA {",
          "            fn is_reverse(&self) -> bool {",
          "                self.reverse",
          "            }",
          "",
          "            fn look_matcher(&self) -> &LookMatcher {",
          "                &LookMatcher { lineterm: DebugByte(lineterm) }",
          "            }",
          "",
          "            fn look_set_any(&self) -> LookSet {",
          "                self.lookset",
          "            }",
          "        }",
          "",
          "        TestNFA {",
          "            reverse: false,",
          "            lineterm,",
          "            lookset,",
          "        }",
          "    };",
          "",
          "    let start = Start::LineCR;",
          "",
          "    set_lookbehind_from_start(&nfa, &start, &mut builder);",
          "}"
        ],
        "oracle": [
          "    builder.set_look_have(|have| have.insert(Look::StartLF));",
          "    builder.set_is_half_crlf();",
          "    builder.set_look_have(|have| have.insert(Look::StartLF));",
          "    builder.set_look_have(|have| have.insert(Look::StartCRLF));",
          "    builder.set_look_have(|have| {",
          "    have.insert(Look::WordStartHalfAscii)",
          "    .insert(Look::WordStartHalfUnicode)",
          "    });",
          "    builder.set_look_have(|have| {",
          "    have.insert(Look::WordStartHalfAscii)",
          "    .insert(Look::WordStartHalfUnicode)",
          "    });",
          "    builder.set_is_half_crlf();",
          "    builder.set_look_have(|have| have.insert(Look::StartCRLF));",
          "    builder.set_is_half_crlf();"
        ],
        "code": [
          "{",
          "    let mut builder = StateBuilderMatches(vec![]);",
          "    let lineterm = b'\\r';",
          "",
          "    let lookset = LookSet::full(); // Assuming full means contains everything",
          "    let nfa = {",
          "        struct TestNFA {",
          "            reverse: bool,",
          "            lineterm: u8,",
          "            lookset: LookSet,",
          "        }",
          "",
          "        impl thompson::NFA for TestNFA {",
          "            fn is_reverse(&self) -> bool {",
          "                self.reverse",
          "            }",
          "",
          "            fn look_matcher(&self) -> &LookMatcher {",
          "                &LookMatcher { lineterm: DebugByte(lineterm) }",
          "            }",
          "",
          "            fn look_set_any(&self) -> LookSet {",
          "                self.lookset",
          "            }",
          "        }",
          "",
          "        TestNFA {",
          "            reverse: false,",
          "            lineterm,",
          "            lookset,",
          "        }",
          "    };",
          "",
          "    let start = Start::LineCR;",
          "",
          "    set_lookbehind_from_start(&nfa, &start, &mut builder);",
          "    builder.set_look_have(|have| have.insert(Look::StartLF));",
          "    builder.set_is_half_crlf();",
          "    builder.set_look_have(|have| have.insert(Look::StartLF));",
          "    builder.set_look_have(|have| have.insert(Look::StartCRLF));",
          "    builder.set_look_have(|have| {",
          "    have.insert(Look::WordStartHalfAscii)",
          "    .insert(Look::WordStartHalfUnicode)",
          "    });",
          "    builder.set_look_have(|have| {",
          "    have.insert(Look::WordStartHalfAscii)",
          "    .insert(Look::WordStartHalfUnicode)",
          "    });",
          "    builder.set_is_half_crlf();",
          "    builder.set_look_have(|have| have.insert(Look::StartCRLF));",
          "    builder.set_is_half_crlf();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]