[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = StateBuilderMatches(vec![0; 0]);",
          "    let nfa = {",
          "        let lm = LookMatcher::new();",
          "        let mut lookset = LookSet::full();",
          "        lookset.set_insert(Look::Start); // contains_anchor_haystack",
          "        lookset.set_insert(Look::StartLF); // contains_anchor_line",
          "        lookset.set_insert(Look::WordStartHalfAscii); // contains_word",
          "        lookset.set_insert(Look::WordStartHalfUnicode); // contains_word",
          "        let inner = Arc::new(Inner { look_matcher: lm, look_set_any: lookset, reverse: false });",
          "        NFA(inner)",
          "    };",
          "    let start = Start::Text;",
          "    set_lookbehind_from_start(&nfa, &start, &mut builder);",
          "}"
        ],
        "oracle": [
          "    builder.look_have.contains(Look::Start)",
          "    builder.look_have.contains(Look::StartLF)",
          "    builder.look_have.contains(Look::WordStartHalfAscii)",
          "    builder.look_have.contains(Look::WordStartHalfUnicode)",
          "    builder.is_from_word()"
        ],
        "code": [
          "{",
          "    let mut builder = StateBuilderMatches(vec![0; 0]);",
          "    let nfa = {",
          "        let lm = LookMatcher::new();",
          "        let mut lookset = LookSet::full();",
          "        lookset.set_insert(Look::Start); // contains_anchor_haystack",
          "        lookset.set_insert(Look::StartLF); // contains_anchor_line",
          "        lookset.set_insert(Look::WordStartHalfAscii); // contains_word",
          "        lookset.set_insert(Look::WordStartHalfUnicode); // contains_word",
          "        let inner = Arc::new(Inner { look_matcher: lm, look_set_any: lookset, reverse: false });",
          "        NFA(inner)",
          "    };",
          "    let start = Start::Text;",
          "    set_lookbehind_from_start(&nfa, &start, &mut builder);",
          "    builder.look_have.contains(Look::Start)",
          "    builder.look_have.contains(Look::StartLF)",
          "    builder.look_have.contains(Look::WordStartHalfAscii)",
          "    builder.look_have.contains(Look::WordStartHalfUnicode)",
          "    builder.is_from_word()",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = StateBuilderMatches(vec![0; 0]);",
          "    let nfa = {",
          "        let lm = LookMatcher::new();",
          "        let mut lookset = LookSet::full();",
          "        lookset.set_insert(Look::Start); // contains_anchor_haystack",
          "        lookset.set_insert(Look::StartLF); // contains_anchor_line",
          "        lookset.set_insert(Look::WordStartHalfAscii); // contains_word",
          "        lookset.set_insert(Look::WordStartHalfUnicode); // contains_word",
          "        let inner = Arc::new(Inner { look_matcher: lm, look_set_any: lookset, reverse: true });",
          "        NFA(inner)",
          "    };",
          "    let start = Start::Text;",
          "    set_lookbehind_from_start(&nfa, &start, &mut builder);",
          "}"
        ],
        "oracle": [
          "    builder.look_have.len() == 2",
          "    builder.look_have.contains(Look::Start)",
          "    builder.look_have.contains(Look::StartLF)",
          "    builder.look_have.contains(Look::WordStartHalfAscii)",
          "    builder.look_have.contains(Look::WordStartHalfUnicode)"
        ],
        "code": [
          "{",
          "    let mut builder = StateBuilderMatches(vec![0; 0]);",
          "    let nfa = {",
          "        let lm = LookMatcher::new();",
          "        let mut lookset = LookSet::full();",
          "        lookset.set_insert(Look::Start); // contains_anchor_haystack",
          "        lookset.set_insert(Look::StartLF); // contains_anchor_line",
          "        lookset.set_insert(Look::WordStartHalfAscii); // contains_word",
          "        lookset.set_insert(Look::WordStartHalfUnicode); // contains_word",
          "        let inner = Arc::new(Inner { look_matcher: lm, look_set_any: lookset, reverse: true });",
          "        NFA(inner)",
          "    };",
          "    let start = Start::Text;",
          "    set_lookbehind_from_start(&nfa, &start, &mut builder);",
          "    builder.look_have.len() == 2",
          "    builder.look_have.contains(Look::Start)",
          "    builder.look_have.contains(Look::StartLF)",
          "    builder.look_have.contains(Look::WordStartHalfAscii)",
          "    builder.look_have.contains(Look::WordStartHalfUnicode)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]