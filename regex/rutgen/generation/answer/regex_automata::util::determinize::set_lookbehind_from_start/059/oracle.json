[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = StateBuilderMatches::default();",
          "    let nfa = thompson::NFA::never_match();",
          "    let start = Start::LineLF;",
          "    ",
          "    // Setup LookSet to fulfill the preconditions",
          "    let mut lookset = LookSet::empty();",
          "    lookset.set_insert(Look::WordStartHalfAscii);",
          "    lookset.set_insert(Look::WordStartHalfUnicode);",
          "    ",
          "    // Mocking the NFA methods to return values per preconditions",
          "    let nfa_inner = NFA(Arc::new(Inner {",
          "        reverse: false,",
          "        look_matcher: LookMatcher::new(),",
          "        look_set_any: lookset,",
          "    }));",
          "    ",
          "    set_lookbehind_from_start(&nfa_inner, &start, &mut builder);",
          "}"
        ],
        "oracle": [
          "    builder.is_half_crlf(); // assert that builder indicates half CRLF is set",
          "    builder.look_have().contains(Look::WordStartHalfAscii); // assert that builder contains Look::WordStartHalfAscii",
          "    builder.look_have().contains(Look::WordStartHalfUnicode); // assert that builder contains Look::WordStartHalfUnicode"
        ],
        "code": [
          "{",
          "    let mut builder = StateBuilderMatches::default();",
          "    let nfa = thompson::NFA::never_match();",
          "    let start = Start::LineLF;",
          "    ",
          "    // Setup LookSet to fulfill the preconditions",
          "    let mut lookset = LookSet::empty();",
          "    lookset.set_insert(Look::WordStartHalfAscii);",
          "    lookset.set_insert(Look::WordStartHalfUnicode);",
          "    ",
          "    // Mocking the NFA methods to return values per preconditions",
          "    let nfa_inner = NFA(Arc::new(Inner {",
          "        reverse: false,",
          "        look_matcher: LookMatcher::new(),",
          "        look_set_any: lookset,",
          "    }));",
          "    ",
          "    set_lookbehind_from_start(&nfa_inner, &start, &mut builder);",
          "    builder.is_half_crlf(); // assert that builder indicates half CRLF is set",
          "    builder.look_have().contains(Look::WordStartHalfAscii); // assert that builder contains Look::WordStartHalfAscii",
          "    builder.look_have().contains(Look::WordStartHalfUnicode); // assert that builder contains Look::WordStartHalfUnicode",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = StateBuilderMatches::default();",
          "    let nfa = thompson::NFA::never_match();",
          "    let start = Start::LineLF;",
          "",
          "    // Setup LookSet again to fulfill the preconditions",
          "    let mut lookset = LookSet::empty();",
          "    lookset.set_insert(Look::WordStartHalfAscii);",
          "    lookset.set_insert(Look::WordStartHalfUnicode);",
          "",
          "    // Mocking the NFA methods to return values per preconditions",
          "    let nfa_inner = NFA(Arc::new(Inner {",
          "        reverse: false,",
          "        look_matcher: LookMatcher::new(),",
          "        look_set_any: lookset,",
          "    }));",
          "",
          "    set_lookbehind_from_start(&nfa_inner, &start, &mut builder);",
          "}"
        ],
        "oracle": [
          "    builder.look_have.is_empty()  // Validate that no look-behind assertions were added for Start::LineLF",
          "    builder.has_look_half_crlf()  // Validate that the state is not marked as half CRLF",
          "    builder.is_from_word()  // Validate that the state is marked as coming from a word byte due to the lookset containing word assertions",
          "    builder.contains_look(Look::WordStartHalfAscii)  // Validate that WordStartHalfAscii was inserted into the look-have set",
          "    builder.contains_look(Look::WordStartHalfUnicode)  // Validate that WordStartHalfUnicode was inserted into the look-have set"
        ],
        "code": [
          "{",
          "    let mut builder = StateBuilderMatches::default();",
          "    let nfa = thompson::NFA::never_match();",
          "    let start = Start::LineLF;",
          "",
          "    // Setup LookSet again to fulfill the preconditions",
          "    let mut lookset = LookSet::empty();",
          "    lookset.set_insert(Look::WordStartHalfAscii);",
          "    lookset.set_insert(Look::WordStartHalfUnicode);",
          "",
          "    // Mocking the NFA methods to return values per preconditions",
          "    let nfa_inner = NFA(Arc::new(Inner {",
          "        reverse: false,",
          "        look_matcher: LookMatcher::new(),",
          "        look_set_any: lookset,",
          "    }));",
          "",
          "    set_lookbehind_from_start(&nfa_inner, &start, &mut builder);",
          "    builder.look_have.is_empty()  // Validate that no look-behind assertions were added for Start::LineLF",
          "    builder.has_look_half_crlf()  // Validate that the state is not marked as half CRLF",
          "    builder.is_from_word()  // Validate that the state is marked as coming from a word byte due to the lookset containing word assertions",
          "    builder.contains_look(Look::WordStartHalfAscii)  // Validate that WordStartHalfAscii was inserted into the look-have set",
          "    builder.contains_look(Look::WordStartHalfUnicode)  // Validate that WordStartHalfUnicode was inserted into the look-have set",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]