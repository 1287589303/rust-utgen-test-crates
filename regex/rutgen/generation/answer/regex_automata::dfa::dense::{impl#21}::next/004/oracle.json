[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let stride = 4;",
          "    let table = vec![StateID::default(); stride * 3]; // Need length greater than 2 * stride",
          "    let start_map = StartByteMap::default();",
          "    let kind = StartKind::Both;",
          "    let start_table = StartTable {",
          "        table,",
          "        kind,",
          "        start_map,",
          "        stride,",
          "        pattern_len: Some(2),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let mut iter = StartStateIter {",
          "        st: start_table,",
          "        i: stride, // This will trigger the case where `i == self.st.stride`",
          "    };",
          "",
          "    let result = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some((table[stride], Anchored::Yes, Start::WordByte)));",
          "    assert_eq!(iter.i, stride + 1);",
          "    assert_eq!(table.len(), stride * 3);",
          "    assert!(matches!(start_table.kind, StartKind::Both));",
          "    assert!(start_table.pattern_len.is_some());",
          "    assert!(start_table.universal_start_unanchored.is_none());",
          "    assert!(start_table.universal_start_anchored.is_none());"
        ],
        "code": [
          "{",
          "    let stride = 4;",
          "    let table = vec![StateID::default(); stride * 3]; // Need length greater than 2 * stride",
          "    let start_map = StartByteMap::default();",
          "    let kind = StartKind::Both;",
          "    let start_table = StartTable {",
          "        table,",
          "        kind,",
          "        start_map,",
          "        stride,",
          "        pattern_len: Some(2),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let mut iter = StartStateIter {",
          "        st: start_table,",
          "        i: stride, // This will trigger the case where `i == self.st.stride`",
          "    };",
          "",
          "    let result = iter.next();",
          "    assert_eq!(result, Some((table[stride], Anchored::Yes, Start::WordByte)));",
          "    assert_eq!(iter.i, stride + 1);",
          "    assert_eq!(table.len(), stride * 3);",
          "    assert!(matches!(start_table.kind, StartKind::Both));",
          "    assert!(start_table.pattern_len.is_some());",
          "    assert!(start_table.universal_start_unanchored.is_none());",
          "    assert!(start_table.universal_start_anchored.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let stride = 4;",
          "    let table = vec![StateID::default(); stride * 3]; // Need length greater than 2 * stride",
          "    let start_map = StartByteMap::default();",
          "    let kind = StartKind::Both;",
          "    let start_table = StartTable {",
          "        table,",
          "        kind,",
          "        start_map,",
          "        stride,",
          "        pattern_len: Some(2),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let mut iter = StartStateIter {",
          "        st: start_table,",
          "        i: 2 * stride, // This will trigger the case where `i == (2 * self.st.stride)`",
          "    };",
          "",
          "    let result = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some((table[2 * stride], Anchored::Pattern(PatternID::new(0).unwrap()), Start::from_usize(0).unwrap())));",
          "    assert_eq!(iter.i, 2 * stride + 1);",
          "    assert!(iter.next().is_some());",
          "    assert_eq!(iter.i, 2 * stride + 1);",
          "    assert_eq!(result, Some((table[2 * stride], Anchored::Pattern(PatternID::new(0).unwrap()), Start::from_usize(0).unwrap())));",
          "    assert!(matches!(result, Some((_, Anchored::Pattern(_), _))));"
        ],
        "code": [
          "{",
          "    let stride = 4;",
          "    let table = vec![StateID::default(); stride * 3]; // Need length greater than 2 * stride",
          "    let start_map = StartByteMap::default();",
          "    let kind = StartKind::Both;",
          "    let start_table = StartTable {",
          "        table,",
          "        kind,",
          "        start_map,",
          "        stride,",
          "        pattern_len: Some(2),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let mut iter = StartStateIter {",
          "        st: start_table,",
          "        i: 2 * stride, // This will trigger the case where `i == (2 * self.st.stride)`",
          "    };",
          "",
          "    let result = iter.next();",
          "    assert_eq!(result, Some((table[2 * stride], Anchored::Pattern(PatternID::new(0).unwrap()), Start::from_usize(0).unwrap())));",
          "    assert_eq!(iter.i, 2 * stride + 1);",
          "    assert!(iter.next().is_some());",
          "    assert_eq!(iter.i, 2 * stride + 1);",
          "    assert_eq!(result, Some((table[2 * stride], Anchored::Pattern(PatternID::new(0).unwrap()), Start::from_usize(0).unwrap())));",
          "    assert!(matches!(result, Some((_, Anchored::Pattern(_), _))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]