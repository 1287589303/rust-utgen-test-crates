[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::default();",
          "    let result = config.get_shrink();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    let config = Config::default().shrink(true);",
          "    let result = config.get_shrink();",
          "    assert_eq!(result, true);",
          "    let config = Config::default().shrink(false);",
          "    let result = config.get_shrink();",
          "    assert_eq!(result, false);",
          "    let config = Config::default().shrink(Some(true));",
          "    let result = config.get_shrink();",
          "    assert_eq!(result, true);",
          "    let config = Config::default().shrink(Some(false));",
          "    let result = config.get_shrink();",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let config = Config::default();",
          "    let result = config.get_shrink();",
          "    assert_eq!(result, false);",
          "    let config = Config::default().shrink(true);",
          "    let result = config.get_shrink();",
          "    assert_eq!(result, true);",
          "    let config = Config::default().shrink(false);",
          "    let result = config.get_shrink();",
          "    assert_eq!(result, false);",
          "    let config = Config::default().shrink(Some(true));",
          "    let result = config.get_shrink();",
          "    assert_eq!(result, true);",
          "    let config = Config::default().shrink(Some(false));",
          "    let result = config.get_shrink();",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::default().shrink(true);",
          "    let result = config.get_shrink();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    ",
          "    let config = Config::default().shrink(false);",
          "    let result = config.get_shrink();",
          "    assert_eq!(result, false);",
          "    ",
          "    let config = Config::default().shrink(None);",
          "    let result = config.get_shrink();",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let config = Config::default().shrink(true);",
          "    let result = config.get_shrink();",
          "    assert_eq!(result, true);",
          "    ",
          "    let config = Config::default().shrink(false);",
          "    let result = config.get_shrink();",
          "    assert_eq!(result, false);",
          "    ",
          "    let config = Config::default().shrink(None);",
          "    let result = config.get_shrink();",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::default().shrink(false);",
          "    let result = config.get_shrink();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    let config = Config::default().shrink(true);",
          "    let result = config.get_shrink();",
          "    assert_eq!(result, true);",
          "    let config = Config::default();",
          "    let result = config.get_shrink();",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let config = Config::default().shrink(false);",
          "    let result = config.get_shrink();",
          "    assert_eq!(result, false);",
          "    let config = Config::default().shrink(true);",
          "    let result = config.get_shrink();",
          "    assert_eq!(result, true);",
          "    let config = Config::default();",
          "    let result = config.get_shrink();",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]