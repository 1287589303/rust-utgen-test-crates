[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        stride2: 0,",
          "        ..Default::default()",
          "    };",
          "    let _result = dfa.stride();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.stride(), 1 << 0);",
          "    dfa.stride2 = 1;",
          "    assert_eq!(dfa.stride(), 1 << 1);",
          "    dfa.stride2 = 2;",
          "    assert_eq!(dfa.stride(), 1 << 2);",
          "    dfa.stride2 = 3;",
          "    assert_eq!(dfa.stride(), 1 << 3);",
          "    dfa.stride2 = 8;",
          "    assert_eq!(dfa.stride(), 1 << 8);",
          "    dfa.stride2 = 10;",
          "    assert_eq!(dfa.stride(), 1 << 10);"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        stride2: 0,",
          "        ..Default::default()",
          "    };",
          "    let _result = dfa.stride();",
          "    assert_eq!(dfa.stride(), 1 << 0);",
          "    dfa.stride2 = 1;",
          "    assert_eq!(dfa.stride(), 1 << 1);",
          "    dfa.stride2 = 2;",
          "    assert_eq!(dfa.stride(), 1 << 2);",
          "    dfa.stride2 = 3;",
          "    assert_eq!(dfa.stride(), 1 << 3);",
          "    dfa.stride2 = 8;",
          "    assert_eq!(dfa.stride(), 1 << 8);",
          "    dfa.stride2 = 10;",
          "    assert_eq!(dfa.stride(), 1 << 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        stride2: 1,",
          "        ..Default::default()",
          "    };",
          "    let _result = dfa.stride();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.stride(), 2);"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        stride2: 1,",
          "        ..Default::default()",
          "    };",
          "    let _result = dfa.stride();",
          "    assert_eq!(dfa.stride(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        stride2: 2,",
          "        ..Default::default()",
          "    };",
          "    let _result = dfa.stride();",
          "}"
        ],
        "oracle": [
          "    let dfa = DFA { stride2: 2, ..Default::default() };",
          "    assert_eq!(dfa.stride(), 4);",
          "    let dfa = DFA { stride2: 3, ..Default::default() };",
          "    assert_eq!(dfa.stride(), 8);",
          "    let dfa = DFA { stride2: 4, ..Default::default() };",
          "    assert_eq!(dfa.stride(), 16);",
          "    let dfa = DFA { stride2: 0, ..Default::default() };",
          "    assert_eq!(dfa.stride(), 1);",
          "    let dfa = DFA { stride2: 5, ..Default::default() };",
          "    assert_eq!(dfa.stride(), 32);"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        stride2: 2,",
          "        ..Default::default()",
          "    };",
          "    let _result = dfa.stride();",
          "    let dfa = DFA { stride2: 2, ..Default::default() };",
          "    assert_eq!(dfa.stride(), 4);",
          "    let dfa = DFA { stride2: 3, ..Default::default() };",
          "    assert_eq!(dfa.stride(), 8);",
          "    let dfa = DFA { stride2: 4, ..Default::default() };",
          "    assert_eq!(dfa.stride(), 16);",
          "    let dfa = DFA { stride2: 0, ..Default::default() };",
          "    assert_eq!(dfa.stride(), 1);",
          "    let dfa = DFA { stride2: 5, ..Default::default() };",
          "    assert_eq!(dfa.stride(), 32);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        stride2: 3,",
          "        ..Default::default()",
          "    };",
          "    let _result = dfa.stride();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.stride(), 1 << 3);"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        stride2: 3,",
          "        ..Default::default()",
          "    };",
          "    let _result = dfa.stride();",
          "    assert_eq!(dfa.stride(), 1 << 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        stride2: 4,",
          "        ..Default::default()",
          "    };",
          "    let _result = dfa.stride();",
          "}"
        ],
        "oracle": [
          "    let dfa = DFA { stride2: 4, ..Default::default() }; assert_eq!(dfa.stride(), 16);",
          "    let dfa = DFA { stride2: 0, ..Default::default() }; assert_eq!(dfa.stride(), 1);",
          "    let dfa = DFA { stride2: 1, ..Default::default() }; assert_eq!(dfa.stride(), 2);",
          "    let dfa = DFA { stride2: 5, ..Default::default() }; assert_eq!(dfa.stride(), 32);",
          "    let dfa = DFA { stride2: 10, ..Default::default() }; assert_eq!(dfa.stride(), 1024);",
          "    let dfa = DFA { stride2: 8, ..Default::default() }; assert_eq!(dfa.stride(), 256);",
          "    let dfa = DFA { stride2: 3, ..Default::default() }; assert_eq!(dfa.stride(), 8);",
          "    let dfa = DFA { stride2: 2, ..Default::default() }; assert_eq!(dfa.stride(), 4);",
          "    let dfa = DFA { stride2: 7, ..Default::default() }; assert_eq!(dfa.stride(), 128);",
          "    let dfa = DFA { stride2: 6, ..Default::default() }; assert_eq!(dfa.stride(), 64);"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        stride2: 4,",
          "        ..Default::default()",
          "    };",
          "    let _result = dfa.stride();",
          "    let dfa = DFA { stride2: 4, ..Default::default() }; assert_eq!(dfa.stride(), 16);",
          "    let dfa = DFA { stride2: 0, ..Default::default() }; assert_eq!(dfa.stride(), 1);",
          "    let dfa = DFA { stride2: 1, ..Default::default() }; assert_eq!(dfa.stride(), 2);",
          "    let dfa = DFA { stride2: 5, ..Default::default() }; assert_eq!(dfa.stride(), 32);",
          "    let dfa = DFA { stride2: 10, ..Default::default() }; assert_eq!(dfa.stride(), 1024);",
          "    let dfa = DFA { stride2: 8, ..Default::default() }; assert_eq!(dfa.stride(), 256);",
          "    let dfa = DFA { stride2: 3, ..Default::default() }; assert_eq!(dfa.stride(), 8);",
          "    let dfa = DFA { stride2: 2, ..Default::default() }; assert_eq!(dfa.stride(), 4);",
          "    let dfa = DFA { stride2: 7, ..Default::default() }; assert_eq!(dfa.stride(), 128);",
          "    let dfa = DFA { stride2: 6, ..Default::default() }; assert_eq!(dfa.stride(), 64);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        stride2: 5,",
          "        ..Default::default()",
          "    };",
          "    let _result = dfa.stride();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.stride(), 32);"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        stride2: 5,",
          "        ..Default::default()",
          "    };",
          "    let _result = dfa.stride();",
          "    assert_eq!(dfa.stride(), 32);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        stride2: 6,",
          "        ..Default::default()",
          "    };",
          "    let _result = dfa.stride();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.stride(), 64);"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        stride2: 6,",
          "        ..Default::default()",
          "    };",
          "    let _result = dfa.stride();",
          "    assert_eq!(dfa.stride(), 64);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        stride2: 7,",
          "        ..Default::default()",
          "    };",
          "    let _result = dfa.stride();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.stride(), 1 << 7);"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        stride2: 7,",
          "        ..Default::default()",
          "    };",
          "    let _result = dfa.stride();",
          "    assert_eq!(dfa.stride(), 1 << 7);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        stride2: 8,",
          "        ..Default::default()",
          "    };",
          "    let _result = dfa.stride();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.stride(), 256);"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        stride2: 8,",
          "        ..Default::default()",
          "    };",
          "    let _result = dfa.stride();",
          "    assert_eq!(dfa.stride(), 256);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        stride2: 9,",
          "        ..Default::default()",
          "    };",
          "    let _result = dfa.stride();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.stride(), 1 << 9);"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        stride2: 9,",
          "        ..Default::default()",
          "    };",
          "    let _result = dfa.stride();",
          "    assert_eq!(dfa.stride(), 1 << 9);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]