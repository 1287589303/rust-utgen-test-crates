[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range1 = ClassRange { start: 'a', end: 'c' };",
          "    let range2 = ClassRange { start: 'b', end: 'd' };",
          "    let result = range1.union(&range2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(ClassRange { start: 'a', end: 'd' }));"
        ],
        "code": [
          "{",
          "    let range1 = ClassRange { start: 'a', end: 'c' };",
          "    let range2 = ClassRange { start: 'b', end: 'd' };",
          "    let result = range1.union(&range2);",
          "    assert_eq!(result, Some(ClassRange { start: 'a', end: 'd' }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range1 = ClassRange { start: '1', end: '3' };",
          "    let range2 = ClassRange { start: '3', end: '5' };",
          "    let result = range1.union(&range2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(ClassRange { start: '1', end: '5' }));"
        ],
        "code": [
          "{",
          "    let range1 = ClassRange { start: '1', end: '3' };",
          "    let range2 = ClassRange { start: '3', end: '5' };",
          "    let result = range1.union(&range2);",
          "    assert_eq!(result, Some(ClassRange { start: '1', end: '5' }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range1 = ClassRange { start: 'x', end: 'x' };",
          "    let range2 = ClassRange { start: 'x', end: 'y' };",
          "    let result = range1.union(&range2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(ClassRange { start: 'x', end: 'y' }));"
        ],
        "code": [
          "{",
          "    let range1 = ClassRange { start: 'x', end: 'x' };",
          "    let range2 = ClassRange { start: 'x', end: 'y' };",
          "    let result = range1.union(&range2);",
          "    assert_eq!(result, Some(ClassRange { start: 'x', end: 'y' }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range1 = ClassRange { start: 'y', end: 'y' };",
          "    let range2 = ClassRange { start: 'z', end: 'z' };",
          "    let result = range1.union(&range2);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    let expected = ClassRange { start: 'y', end: 'z' };",
          "    assert_eq!(result.unwrap(), expected);"
        ],
        "code": [
          "{",
          "    let range1 = ClassRange { start: 'y', end: 'y' };",
          "    let range2 = ClassRange { start: 'z', end: 'z' };",
          "    let result = range1.union(&range2);",
          "    assert!(result.is_some());",
          "    let expected = ClassRange { start: 'y', end: 'z' };",
          "    assert_eq!(result.unwrap(), expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range1 = ClassRange { start: 'a', end: 'e' };",
          "    let range2 = ClassRange { start: 'b', end: 'd' };",
          "    let result = range1.union(&range2);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), ClassRange { start: 'a', end: 'e' });"
        ],
        "code": [
          "{",
          "    let range1 = ClassRange { start: 'a', end: 'e' };",
          "    let range2 = ClassRange { start: 'b', end: 'd' };",
          "    let result = range1.union(&range2);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), ClassRange { start: 'a', end: 'e' });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range1 = ClassRange { start: 'a', end: 'a' };",
          "    let range2 = ClassRange { start: 'a', end: 'a' };",
          "    let result = range1.union(&range2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(ClassRange { start: 'a', end: 'a' }));",
          "    let range1 = ClassRange { start: 'a', end: 'b' };",
          "    let range2 = ClassRange { start: 'b', end: 'c' };",
          "    let result = range1.union(&range2);",
          "    assert_eq!(result, Some(ClassRange { start: 'a', end: 'c' }));",
          "    let range1 = ClassRange { start: 'x', end: 'z' };",
          "    let range2 = ClassRange { start: 'a', end: 'w' };",
          "    let result = range1.union(&range2);",
          "    assert_eq!(result, Some(ClassRange { start: 'a', end: 'z' }));",
          "    let range1 = ClassRange { start: 'm', end: 'n' };",
          "    let range2 = ClassRange { start: 'n', end: 'o' };",
          "    let result = range1.union(&range2);",
          "    assert_eq!(result, Some(ClassRange { start: 'm', end: 'o' }));"
        ],
        "code": [
          "{",
          "    let range1 = ClassRange { start: 'a', end: 'a' };",
          "    let range2 = ClassRange { start: 'a', end: 'a' };",
          "    let result = range1.union(&range2);",
          "    assert_eq!(result, Some(ClassRange { start: 'a', end: 'a' }));",
          "    let range1 = ClassRange { start: 'a', end: 'b' };",
          "    let range2 = ClassRange { start: 'b', end: 'c' };",
          "    let result = range1.union(&range2);",
          "    assert_eq!(result, Some(ClassRange { start: 'a', end: 'c' }));",
          "    let range1 = ClassRange { start: 'x', end: 'z' };",
          "    let range2 = ClassRange { start: 'a', end: 'w' };",
          "    let result = range1.union(&range2);",
          "    assert_eq!(result, Some(ClassRange { start: 'a', end: 'z' }));",
          "    let range1 = ClassRange { start: 'm', end: 'n' };",
          "    let range2 = ClassRange { start: 'n', end: 'o' };",
          "    let result = range1.union(&range2);",
          "    assert_eq!(result, Some(ClassRange { start: 'm', end: 'o' }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range1 = ClassRange { start: 'A', end: 'Z' };",
          "    let range2 = ClassRange { start: 'Z', end: 'Z' };",
          "    let result = range1.union(&range2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(ClassRange { start: 'A', end: 'Z' }));"
        ],
        "code": [
          "{",
          "    let range1 = ClassRange { start: 'A', end: 'Z' };",
          "    let range2 = ClassRange { start: 'Z', end: 'Z' };",
          "    let result = range1.union(&range2);",
          "    assert_eq!(result, Some(ClassRange { start: 'A', end: 'Z' }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]