[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_set = StateSet::empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state_set, StateSet { ids: Rc::new(RefCell::new(vec![])) });"
        ],
        "code": [
          "{",
          "    let state_set = StateSet::empty();",
          "    assert_eq!(state_set, StateSet { ids: Rc::new(RefCell::new(vec![])) });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_set = StateSet::empty();",
          "    let ids = state_set.ids.borrow();",
          "    assert!(ids.is_empty());",
          "}"
        ],
        "oracle": [
          "    let state_set = StateSet::empty();",
          "    let ids = state_set.ids.borrow();",
          "    assert_eq!(ids.len(), 0);",
          "    assert!(state_set.is_empty());",
          "    assert_eq!(state_set.len(), 0);",
          "    assert_eq!(state_set.deep_clone(), state_set);"
        ],
        "code": [
          "{",
          "    let state_set = StateSet::empty();",
          "    let ids = state_set.ids.borrow();",
          "    assert!(ids.is_empty());",
          "    let state_set = StateSet::empty();",
          "    let ids = state_set.ids.borrow();",
          "    assert_eq!(ids.len(), 0);",
          "    assert!(state_set.is_empty());",
          "    assert_eq!(state_set.len(), 0);",
          "    assert_eq!(state_set.deep_clone(), state_set);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]