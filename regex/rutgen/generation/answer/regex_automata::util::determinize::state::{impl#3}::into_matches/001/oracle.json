[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_builder_empty = StateBuilderEmpty::new();",
          "    let state_builder_matches = state_builder_empty.into_matches();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state_builder_matches.0.len(), 9);",
          "    assert_eq!(state_builder_matches.0[0], 0);",
          "    assert_eq!(state_builder_matches.0[1], 0);",
          "    assert_eq!(state_builder_matches.0[2], 0);",
          "    assert_eq!(state_builder_matches.0[3], 0);",
          "    assert_eq!(state_builder_matches.0[4], 0);",
          "    assert_eq!(state_builder_matches.0[5], 0);",
          "    assert_eq!(state_builder_matches.0[6], 0);",
          "    assert_eq!(state_builder_matches.0[7], 0);",
          "    assert_eq!(state_builder_matches.0[8], 0);"
        ],
        "code": [
          "{",
          "    let state_builder_empty = StateBuilderEmpty::new();",
          "    let state_builder_matches = state_builder_empty.into_matches();",
          "    assert_eq!(state_builder_matches.0.len(), 9);",
          "    assert_eq!(state_builder_matches.0[0], 0);",
          "    assert_eq!(state_builder_matches.0[1], 0);",
          "    assert_eq!(state_builder_matches.0[2], 0);",
          "    assert_eq!(state_builder_matches.0[3], 0);",
          "    assert_eq!(state_builder_matches.0[4], 0);",
          "    assert_eq!(state_builder_matches.0[5], 0);",
          "    assert_eq!(state_builder_matches.0[6], 0);",
          "    assert_eq!(state_builder_matches.0[7], 0);",
          "    assert_eq!(state_builder_matches.0[8], 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut state_builder_empty = StateBuilderEmpty(vec![1, 2, 3]);",
          "    let state_builder_matches = state_builder_empty.into_matches();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state_builder_matches.0.len(), 12);",
          "    assert_eq!(state_builder_matches.0[9], 0);",
          "    assert_eq!(state_builder_matches.0[10], 0);",
          "    assert_eq!(state_builder_matches.0[11], 0);",
          "    assert_eq!(state_builder_empty.capacity(), 3);",
          "    assert!(state_builder_empty.0.is_empty());"
        ],
        "code": [
          "{",
          "    let mut state_builder_empty = StateBuilderEmpty(vec![1, 2, 3]);",
          "    let state_builder_matches = state_builder_empty.into_matches();",
          "    assert_eq!(state_builder_matches.0.len(), 12);",
          "    assert_eq!(state_builder_matches.0[9], 0);",
          "    assert_eq!(state_builder_matches.0[10], 0);",
          "    assert_eq!(state_builder_matches.0[11], 0);",
          "    assert_eq!(state_builder_empty.capacity(), 3);",
          "    assert!(state_builder_empty.0.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_builder_empty = StateBuilderEmpty(vec![0; 5]);",
          "    let state_builder_matches = state_builder_empty.into_matches();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state_builder_matches.0.len(), 14);",
          "    assert_eq!(state_builder_matches.0[5], 0);",
          "    assert_eq!(state_builder_matches.0[6], 0);",
          "    assert_eq!(state_builder_matches.0[7], 0);",
          "    assert_eq!(state_builder_matches.0[8], 0);",
          "    assert_eq!(state_builder_matches.0[9], 0);",
          "    assert_eq!(state_builder_matches.0[10], 0);",
          "    assert_eq!(state_builder_matches.0[11], 0);",
          "    assert_eq!(state_builder_matches.0[12], 0);",
          "    assert_eq!(state_builder_matches.0[13], 0);",
          "    assert_eq!(state_builder_matches.0[0..5], vec![0, 0, 0, 0, 0]);"
        ],
        "code": [
          "{",
          "    let state_builder_empty = StateBuilderEmpty(vec![0; 5]);",
          "    let state_builder_matches = state_builder_empty.into_matches();",
          "    assert_eq!(state_builder_matches.0.len(), 14);",
          "    assert_eq!(state_builder_matches.0[5], 0);",
          "    assert_eq!(state_builder_matches.0[6], 0);",
          "    assert_eq!(state_builder_matches.0[7], 0);",
          "    assert_eq!(state_builder_matches.0[8], 0);",
          "    assert_eq!(state_builder_matches.0[9], 0);",
          "    assert_eq!(state_builder_matches.0[10], 0);",
          "    assert_eq!(state_builder_matches.0[11], 0);",
          "    assert_eq!(state_builder_matches.0[12], 0);",
          "    assert_eq!(state_builder_matches.0[13], 0);",
          "    assert_eq!(state_builder_matches.0[0..5], vec![0, 0, 0, 0, 0]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]