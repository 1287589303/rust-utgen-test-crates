[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [
      "struct MockPrefilter {",
      "    is_fast: bool,",
      "}",
      "",
      "impl PrefilterI for MockPrefilter {",
      "    fn find(&self, _: &[u8], _: Span) -> Option<Span> { None }",
      "    fn prefix(&self, _: &[u8], _: Span) -> Option<Span> { None }",
      "    fn memory_usage(&self) -> usize { 0 }",
      "    fn max_needle_len(&self) -> usize { 0 }",
      "    fn is_fast(&self) -> bool { self.is_fast }",
      "}"
    ],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let prefilter = Prefilter {",
          "        #[cfg(not(feature = \"alloc\"))]",
          "        _unused: (),",
          "        #[cfg(feature = \"alloc\")]",
          "        pre: Arc::new(MockPrefilter { is_fast: true }),",
          "        #[cfg(feature = \"alloc\")]",
          "        is_fast: true,",
          "        #[cfg(feature = \"alloc\")]",
          "        max_needle_len: 10,",
          "    };",
          "    ",
          "    let strategy = ReverseSuffix {",
          "        core: Core {",
          "            info: RegexInfo::default(),",
          "            pre: Some(prefilter),",
          "            nfa: NFA::default(),",
          "            nfarev: None,",
          "            pikevm: wrappers::PikeVM::default(),",
          "            backtrack: wrappers::BoundedBacktracker::default(),",
          "            onepass: wrappers::OnePass::default(),",
          "            hybrid: wrappers::Hybrid::default(),",
          "            dfa: wrappers::DFA::default(),",
          "        },",
          "        pre: Prefilter::default(), // Just to satisfy struct initialization.",
          "    };",
          "",
          "    strategy.is_accelerated();",
          "}"
        ],
        "oracle": [
          "    assert!(strategy.is_accelerated() == true);",
          "    let prefilter = Prefilter { pre: Arc::new(MockPrefilter { is_fast: false }), is_fast: false, max_needle_len: 10 };",
          "    let strategy = ReverseSuffix { core: Core { info: RegexInfo::default(), pre: Some(prefilter), nfa: NFA::default(), nfarev: None, pikevm: wrappers::PikeVM::default(), backtrack: wrappers::BoundedBacktracker::default(), onepass: wrappers::OnePass::default(), hybrid: wrappers::Hybrid::default(), dfa: wrappers::DFA::default() }, pre: Prefilter::default() };",
          "    assert!(strategy.is_accelerated() == false);",
          "    let prefilter = Prefilter { pre: Arc::new(MockPrefilter { is_fast: true }), is_fast: true, max_needle_len: 0 };",
          "    let strategy = ReverseSuffix { core: Core { info: RegexInfo::default(), pre: Some(prefilter), nfa: NFA::default(), nfarev: None, pikevm: wrappers::PikeVM::default(), backtrack: wrappers::BoundedBacktracker::default(), onepass: wrappers::OnePass::default(), hybrid: wrappers::Hybrid::default(), dfa: wrappers::DFA::default() }, pre: Prefilter::default() };",
          "    assert!(strategy.is_accelerated() == true);",
          "    let prefilter = Prefilter { pre: Arc::new(MockPrefilter { is_fast: false }), is_fast: false, max_needle_len: 0 };",
          "    let strategy = ReverseSuffix { core: Core { info: RegexInfo::default(), pre: Some(prefilter), nfa: NFA::default(), nfarev: None, pikevm: wrappers::PikeVM::default(), backtrack: wrappers::BoundedBacktracker::default(), onepass: wrappers::OnePass::default(), hybrid: wrappers::Hybrid::default(), dfa: wrappers::DFA::default() }, pre: Prefilter::default() };",
          "    assert!(strategy.is_accelerated() == false);"
        ],
        "code": [
          "{",
          "    let prefilter = Prefilter {",
          "        #[cfg(not(feature = \"alloc\"))]",
          "        _unused: (),",
          "        #[cfg(feature = \"alloc\")]",
          "        pre: Arc::new(MockPrefilter { is_fast: true }),",
          "        #[cfg(feature = \"alloc\")]",
          "        is_fast: true,",
          "        #[cfg(feature = \"alloc\")]",
          "        max_needle_len: 10,",
          "    };",
          "    ",
          "    let strategy = ReverseSuffix {",
          "        core: Core {",
          "            info: RegexInfo::default(),",
          "            pre: Some(prefilter),",
          "            nfa: NFA::default(),",
          "            nfarev: None,",
          "            pikevm: wrappers::PikeVM::default(),",
          "            backtrack: wrappers::BoundedBacktracker::default(),",
          "            onepass: wrappers::OnePass::default(),",
          "            hybrid: wrappers::Hybrid::default(),",
          "            dfa: wrappers::DFA::default(),",
          "        },",
          "        pre: Prefilter::default(), // Just to satisfy struct initialization.",
          "    };",
          "",
          "    strategy.is_accelerated();",
          "    assert!(strategy.is_accelerated() == true);",
          "    let prefilter = Prefilter { pre: Arc::new(MockPrefilter { is_fast: false }), is_fast: false, max_needle_len: 10 };",
          "    let strategy = ReverseSuffix { core: Core { info: RegexInfo::default(), pre: Some(prefilter), nfa: NFA::default(), nfarev: None, pikevm: wrappers::PikeVM::default(), backtrack: wrappers::BoundedBacktracker::default(), onepass: wrappers::OnePass::default(), hybrid: wrappers::Hybrid::default(), dfa: wrappers::DFA::default() }, pre: Prefilter::default() };",
          "    assert!(strategy.is_accelerated() == false);",
          "    let prefilter = Prefilter { pre: Arc::new(MockPrefilter { is_fast: true }), is_fast: true, max_needle_len: 0 };",
          "    let strategy = ReverseSuffix { core: Core { info: RegexInfo::default(), pre: Some(prefilter), nfa: NFA::default(), nfarev: None, pikevm: wrappers::PikeVM::default(), backtrack: wrappers::BoundedBacktracker::default(), onepass: wrappers::OnePass::default(), hybrid: wrappers::Hybrid::default(), dfa: wrappers::DFA::default() }, pre: Prefilter::default() };",
          "    assert!(strategy.is_accelerated() == true);",
          "    let prefilter = Prefilter { pre: Arc::new(MockPrefilter { is_fast: false }), is_fast: false, max_needle_len: 0 };",
          "    let strategy = ReverseSuffix { core: Core { info: RegexInfo::default(), pre: Some(prefilter), nfa: NFA::default(), nfarev: None, pikevm: wrappers::PikeVM::default(), backtrack: wrappers::BoundedBacktracker::default(), onepass: wrappers::OnePass::default(), hybrid: wrappers::Hybrid::default(), dfa: wrappers::DFA::default() }, pre: Prefilter::default() };",
          "    assert!(strategy.is_accelerated() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let prefilter = Prefilter {",
          "        #[cfg(not(feature = \"alloc\"))]",
          "        _unused: (),",
          "        #[cfg(feature = \"alloc\")]",
          "        pre: Arc::new(MockPrefilter { is_fast: false }),",
          "        #[cfg(feature = \"alloc\")]",
          "        is_fast: false,",
          "        #[cfg(feature = \"alloc\")]",
          "        max_needle_len: 10,",
          "    };",
          "    ",
          "    let strategy = ReverseSuffix {",
          "        core: Core {",
          "            info: RegexInfo::default(),",
          "            pre: Some(prefilter),",
          "            nfa: NFA::default(),",
          "            nfarev: None,",
          "            pikevm: wrappers::PikeVM::default(),",
          "            backtrack: wrappers::BoundedBacktracker::default(),",
          "            onepass: wrappers::OnePass::default(),",
          "            hybrid: wrappers::Hybrid::default(),",
          "            dfa: wrappers::DFA::default(),",
          "        },",
          "        pre: Prefilter::default(), // Just to satisfy struct initialization.",
          "    };",
          "",
          "    strategy.is_accelerated();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(strategy.is_accelerated(), false);",
          "    ",
          "    let prefilter_fast = Prefilter {",
          "    #[cfg(not(feature = \"alloc\"))]",
          "    _unused: (),",
          "    #[cfg(feature = \"alloc\")]",
          "    pre: Arc::new(MockPrefilter { is_fast: true }),",
          "    #[cfg(feature = \"alloc\")]",
          "    is_fast: true,",
          "    #[cfg(feature = \"alloc\")]",
          "    max_needle_len: 10,",
          "    };",
          "    ",
          "    let strategy_fast = ReverseSuffix {",
          "    core: Core {",
          "    info: RegexInfo::default(),",
          "    pre: Some(prefilter_fast),",
          "    nfa: NFA::default(),",
          "    nfarev: None,",
          "    pikevm: wrappers::PikeVM::default(),",
          "    backtrack: wrappers::BoundedBacktracker::default(),",
          "    onepass: wrappers::OnePass::default(),",
          "    hybrid: wrappers::Hybrid::default(),",
          "    dfa: wrappers::DFA::default(),",
          "    },",
          "    pre: Prefilter::default(),",
          "    };",
          "    ",
          "    assert_eq!(strategy_fast.is_accelerated(), true);"
        ],
        "code": [
          "{",
          "    let prefilter = Prefilter {",
          "        #[cfg(not(feature = \"alloc\"))]",
          "        _unused: (),",
          "        #[cfg(feature = \"alloc\")]",
          "        pre: Arc::new(MockPrefilter { is_fast: false }),",
          "        #[cfg(feature = \"alloc\")]",
          "        is_fast: false,",
          "        #[cfg(feature = \"alloc\")]",
          "        max_needle_len: 10,",
          "    };",
          "    ",
          "    let strategy = ReverseSuffix {",
          "        core: Core {",
          "            info: RegexInfo::default(),",
          "            pre: Some(prefilter),",
          "            nfa: NFA::default(),",
          "            nfarev: None,",
          "            pikevm: wrappers::PikeVM::default(),",
          "            backtrack: wrappers::BoundedBacktracker::default(),",
          "            onepass: wrappers::OnePass::default(),",
          "            hybrid: wrappers::Hybrid::default(),",
          "            dfa: wrappers::DFA::default(),",
          "        },",
          "        pre: Prefilter::default(), // Just to satisfy struct initialization.",
          "    };",
          "",
          "    strategy.is_accelerated();",
          "    assert_eq!(strategy.is_accelerated(), false);",
          "    ",
          "    let prefilter_fast = Prefilter {",
          "    #[cfg(not(feature = \"alloc\"))]",
          "    _unused: (),",
          "    #[cfg(feature = \"alloc\")]",
          "    pre: Arc::new(MockPrefilter { is_fast: true }),",
          "    #[cfg(feature = \"alloc\")]",
          "    is_fast: true,",
          "    #[cfg(feature = \"alloc\")]",
          "    max_needle_len: 10,",
          "    };",
          "    ",
          "    let strategy_fast = ReverseSuffix {",
          "    core: Core {",
          "    info: RegexInfo::default(),",
          "    pre: Some(prefilter_fast),",
          "    nfa: NFA::default(),",
          "    nfarev: None,",
          "    pikevm: wrappers::PikeVM::default(),",
          "    backtrack: wrappers::BoundedBacktracker::default(),",
          "    onepass: wrappers::OnePass::default(),",
          "    hybrid: wrappers::Hybrid::default(),",
          "    dfa: wrappers::DFA::default(),",
          "    },",
          "    pre: Prefilter::default(),",
          "    };",
          "    ",
          "    assert_eq!(strategy_fast.is_accelerated(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]