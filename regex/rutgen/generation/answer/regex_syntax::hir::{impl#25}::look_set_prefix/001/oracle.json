[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let properties_i = PropertiesI {",
          "        minimum_len: None,",
          "        maximum_len: None,",
          "        look_set: LookSet { bits: 0 },",
          "        look_set_prefix: LookSet { bits: 0 },",
          "        look_set_suffix: LookSet { bits: 0 },",
          "        look_set_prefix_any: LookSet { bits: 0 },",
          "        look_set_suffix_any: LookSet { bits: 0 },",
          "        utf8: true,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: None,",
          "        literal: false,",
          "        alternation_literal: false,",
          "    };",
          "    let properties = Properties(Box::new(properties_i));",
          "    let _result = properties.look_set_prefix();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, LookSet { bits: 0 });",
          "    assert!(properties.is_utf8());",
          "    assert!(properties.minimum_len().is_none());",
          "    assert!(properties.maximum_len().is_none());",
          "    assert_eq!(properties.explicit_captures_len(), 0);",
          "    assert!(properties.static_explicit_captures_len().is_none());",
          "    assert!(!properties.is_literal());",
          "    assert!(!properties.is_alternation_literal());",
          "    assert_eq!(properties.memory_usage(), 64);"
        ],
        "code": [
          "{",
          "    let properties_i = PropertiesI {",
          "        minimum_len: None,",
          "        maximum_len: None,",
          "        look_set: LookSet { bits: 0 },",
          "        look_set_prefix: LookSet { bits: 0 },",
          "        look_set_suffix: LookSet { bits: 0 },",
          "        look_set_prefix_any: LookSet { bits: 0 },",
          "        look_set_suffix_any: LookSet { bits: 0 },",
          "        utf8: true,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: None,",
          "        literal: false,",
          "        alternation_literal: false,",
          "    };",
          "    let properties = Properties(Box::new(properties_i));",
          "    let _result = properties.look_set_prefix();",
          "    assert_eq!(_result, LookSet { bits: 0 });",
          "    assert!(properties.is_utf8());",
          "    assert!(properties.minimum_len().is_none());",
          "    assert!(properties.maximum_len().is_none());",
          "    assert_eq!(properties.explicit_captures_len(), 0);",
          "    assert!(properties.static_explicit_captures_len().is_none());",
          "    assert!(!properties.is_literal());",
          "    assert!(!properties.is_alternation_literal());",
          "    assert_eq!(properties.memory_usage(), 64);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let properties_i = PropertiesI {",
          "        minimum_len: None,",
          "        maximum_len: None,",
          "        look_set: LookSet { bits: u32::MAX },",
          "        look_set_prefix: LookSet { bits: u32::MAX },",
          "        look_set_suffix: LookSet { bits: u32::MAX },",
          "        look_set_prefix_any: LookSet { bits: u32::MAX },",
          "        look_set_suffix_any: LookSet { bits: u32::MAX },",
          "        utf8: false,",
          "        explicit_captures_len: 100,",
          "        static_explicit_captures_len: Some(50),",
          "        literal: true,",
          "        alternation_literal: true,",
          "    };",
          "    let properties = Properties(Box::new(properties_i));",
          "    let _result = properties.look_set_prefix();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(properties.look_set_prefix(), LookSet { bits: u32::MAX });",
          "    assert!(matches!(properties.look_set_prefix(), LookSet { bits: 0b11111111111111111111111111111111 }));",
          "    assert_ne!(properties.look_set_prefix(), LookSet { bits: 0 });",
          "    assert!(properties.look_set_prefix().bits != 0);",
          "    assert!(properties.look_set_prefix().bits == u32::MAX);",
          "    assert!(properties.look_set_prefix().bits > 0);",
          "    assert!(properties.look_set_prefix().bits < u32::MAX + 1);"
        ],
        "code": [
          "{",
          "    let properties_i = PropertiesI {",
          "        minimum_len: None,",
          "        maximum_len: None,",
          "        look_set: LookSet { bits: u32::MAX },",
          "        look_set_prefix: LookSet { bits: u32::MAX },",
          "        look_set_suffix: LookSet { bits: u32::MAX },",
          "        look_set_prefix_any: LookSet { bits: u32::MAX },",
          "        look_set_suffix_any: LookSet { bits: u32::MAX },",
          "        utf8: false,",
          "        explicit_captures_len: 100,",
          "        static_explicit_captures_len: Some(50),",
          "        literal: true,",
          "        alternation_literal: true,",
          "    };",
          "    let properties = Properties(Box::new(properties_i));",
          "    let _result = properties.look_set_prefix();",
          "    assert_eq!(properties.look_set_prefix(), LookSet { bits: u32::MAX });",
          "    assert!(matches!(properties.look_set_prefix(), LookSet { bits: 0b11111111111111111111111111111111 }));",
          "    assert_ne!(properties.look_set_prefix(), LookSet { bits: 0 });",
          "    assert!(properties.look_set_prefix().bits != 0);",
          "    assert!(properties.look_set_prefix().bits == u32::MAX);",
          "    assert!(properties.look_set_prefix().bits > 0);",
          "    assert!(properties.look_set_prefix().bits < u32::MAX + 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let properties_i = PropertiesI {",
          "        minimum_len: Some(0),",
          "        maximum_len: Some(10),",
          "        look_set: LookSet { bits: 7 },",
          "        look_set_prefix: LookSet { bits: 7 },",
          "        look_set_suffix: LookSet { bits: 7 },",
          "        look_set_prefix_any: LookSet { bits: 7 },",
          "        look_set_suffix_any: LookSet { bits: 7 },",
          "        utf8: true,",
          "        explicit_captures_len: 5,",
          "        static_explicit_captures_len: None,",
          "        literal: false,",
          "        alternation_literal: true,",
          "    };",
          "    let properties = Properties(Box::new(properties_i));",
          "    let _result = properties.look_set_prefix();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(properties.look_set_prefix(), LookSet { bits: 7 });",
          "    assert_eq!(properties.0.look_set_prefix, LookSet { bits: 7 });",
          "    assert!(properties.is_literal() == false);",
          "    assert!(properties.is_alternation_literal() == true);",
          "    assert_eq!(properties.minimum_len(), Some(0));",
          "    assert_eq!(properties.maximum_len(), Some(10));",
          "    assert!(properties.is_utf8() == true);"
        ],
        "code": [
          "{",
          "    let properties_i = PropertiesI {",
          "        minimum_len: Some(0),",
          "        maximum_len: Some(10),",
          "        look_set: LookSet { bits: 7 },",
          "        look_set_prefix: LookSet { bits: 7 },",
          "        look_set_suffix: LookSet { bits: 7 },",
          "        look_set_prefix_any: LookSet { bits: 7 },",
          "        look_set_suffix_any: LookSet { bits: 7 },",
          "        utf8: true,",
          "        explicit_captures_len: 5,",
          "        static_explicit_captures_len: None,",
          "        literal: false,",
          "        alternation_literal: true,",
          "    };",
          "    let properties = Properties(Box::new(properties_i));",
          "    let _result = properties.look_set_prefix();",
          "    assert_eq!(properties.look_set_prefix(), LookSet { bits: 7 });",
          "    assert_eq!(properties.0.look_set_prefix, LookSet { bits: 7 });",
          "    assert!(properties.is_literal() == false);",
          "    assert!(properties.is_alternation_literal() == true);",
          "    assert_eq!(properties.minimum_len(), Some(0));",
          "    assert_eq!(properties.maximum_len(), Some(10));",
          "    assert!(properties.is_utf8() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let properties_i = PropertiesI {",
          "        minimum_len: Some(5),",
          "        maximum_len: Some(10),",
          "        look_set: LookSet { bits: 1 << 2 },",
          "        look_set_prefix: LookSet { bits: 1 << 2 },",
          "        look_set_suffix: LookSet { bits: 1 << 2 },",
          "        look_set_prefix_any: LookSet { bits: 1 << 2 },",
          "        look_set_suffix_any: LookSet { bits: 1 << 2 },",
          "        utf8: false,",
          "        explicit_captures_len: 10,",
          "        static_explicit_captures_len: Some(5),",
          "        literal: true,",
          "        alternation_literal: false,",
          "    };",
          "    let properties = Properties(Box::new(properties_i));",
          "    let _result = properties.look_set_prefix();",
          "}"
        ],
        "oracle": [
          "    let properties_i = PropertiesI { minimum_len: Some(5), maximum_len: Some(10), look_set: LookSet { bits: 1 << 2 }, look_set_prefix: LookSet { bits: 1 << 2 }, look_set_suffix: LookSet { bits: 1 << 2 }, look_set_prefix_any: LookSet { bits: 1 << 2 }, look_set_suffix_any: LookSet { bits: 1 << 2 }, utf8: false, explicit_captures_len: 10, static_explicit_captures_len: Some(5), literal: true, alternation_literal: false, };",
          "    let properties = Properties(Box::new(properties_i));",
          "    assert_eq!(properties.look_set_prefix(), LookSet { bits: 1 << 2 });"
        ],
        "code": [
          "{",
          "    let properties_i = PropertiesI {",
          "        minimum_len: Some(5),",
          "        maximum_len: Some(10),",
          "        look_set: LookSet { bits: 1 << 2 },",
          "        look_set_prefix: LookSet { bits: 1 << 2 },",
          "        look_set_suffix: LookSet { bits: 1 << 2 },",
          "        look_set_prefix_any: LookSet { bits: 1 << 2 },",
          "        look_set_suffix_any: LookSet { bits: 1 << 2 },",
          "        utf8: false,",
          "        explicit_captures_len: 10,",
          "        static_explicit_captures_len: Some(5),",
          "        literal: true,",
          "        alternation_literal: false,",
          "    };",
          "    let properties = Properties(Box::new(properties_i));",
          "    let _result = properties.look_set_prefix();",
          "    let properties_i = PropertiesI { minimum_len: Some(5), maximum_len: Some(10), look_set: LookSet { bits: 1 << 2 }, look_set_prefix: LookSet { bits: 1 << 2 }, look_set_suffix: LookSet { bits: 1 << 2 }, look_set_prefix_any: LookSet { bits: 1 << 2 }, look_set_suffix_any: LookSet { bits: 1 << 2 }, utf8: false, explicit_captures_len: 10, static_explicit_captures_len: Some(5), literal: true, alternation_literal: false, };",
          "    let properties = Properties(Box::new(properties_i));",
          "    assert_eq!(properties.look_set_prefix(), LookSet { bits: 1 << 2 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let properties_i = PropertiesI {",
          "        minimum_len: None,",
          "        maximum_len: Some(20),",
          "        look_set: LookSet { bits: 2 },",
          "        look_set_prefix: LookSet { bits: 2 },",
          "        look_set_suffix: LookSet { bits: 2 },",
          "        look_set_prefix_any: LookSet { bits: 2 },",
          "        look_set_suffix_any: LookSet { bits: 2 },",
          "        utf8: true,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: None,",
          "        literal: false,",
          "        alternation_literal: false,",
          "    };",
          "    let properties = Properties(Box::new(properties_i));",
          "    let _result = properties.look_set_prefix();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(properties.look_set_prefix(), LookSet { bits: 2 });"
        ],
        "code": [
          "{",
          "    let properties_i = PropertiesI {",
          "        minimum_len: None,",
          "        maximum_len: Some(20),",
          "        look_set: LookSet { bits: 2 },",
          "        look_set_prefix: LookSet { bits: 2 },",
          "        look_set_suffix: LookSet { bits: 2 },",
          "        look_set_prefix_any: LookSet { bits: 2 },",
          "        look_set_suffix_any: LookSet { bits: 2 },",
          "        utf8: true,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: None,",
          "        literal: false,",
          "        alternation_literal: false,",
          "    };",
          "    let properties = Properties(Box::new(properties_i));",
          "    let _result = properties.look_set_prefix();",
          "    assert_eq!(properties.look_set_prefix(), LookSet { bits: 2 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]