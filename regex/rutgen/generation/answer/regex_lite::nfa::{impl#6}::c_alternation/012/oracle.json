[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::empty() };",
          "    let pattern = String::from(\"a|b\");",
          "    let compiler = Compiler::new(config, pattern);",
          "",
          "    let _ = compiler.add(State::Char { target: 1, ch: 'a' }).unwrap();",
          "    let _ = compiler.add(State::Char { target: 2, ch: 'b' }).unwrap();",
          "    ",
          "    let thompson_ref_a = ThompsonRef { start: 0, end: 1 };",
          "    let thompson_ref_b = ThompsonRef { start: 1, end: 2 };",
          "    ",
          "    let results = vec![",
          "        Ok(thompson_ref_a),",
          "        Ok(thompson_ref_b),",
          "    ];",
          "    ",
          "    let result_iter = results.into_iter();",
          "",
          "    let _ = compiler.c_alternation(result_iter).unwrap();",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 10, flags: Flags::empty() };",
          "    let pattern = String::from(\"a|b\");",
          "    let compiler = Compiler::new(config, pattern);",
          "    let _ = compiler.add(State::Char { target: 1, ch: 'a' }).unwrap();",
          "    let _ = compiler.add(State::Char { target: 2, ch: 'b' }).unwrap();",
          "    let thompson_ref_a = ThompsonRef { start: 0, end: 1 };",
          "    let thompson_ref_b = ThompsonRef { start: 1, end: 2 };",
          "    let results = vec![",
          "    Ok(thompson_ref_a),",
          "    Ok(thompson_ref_b),",
          "    ];",
          "    let result_iter = results.into_iter();",
          "    let result = compiler.c_alternation(result_iter).unwrap();",
          "    assert_eq!(result.start, splits);",
          "    assert_eq!(result.end, end);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::empty() };",
          "    let pattern = String::from(\"a|b\");",
          "    let compiler = Compiler::new(config, pattern);",
          "",
          "    let _ = compiler.add(State::Char { target: 1, ch: 'a' }).unwrap();",
          "    let _ = compiler.add(State::Char { target: 2, ch: 'b' }).unwrap();",
          "    ",
          "    let thompson_ref_a = ThompsonRef { start: 0, end: 1 };",
          "    let thompson_ref_b = ThompsonRef { start: 1, end: 2 };",
          "    ",
          "    let results = vec![",
          "        Ok(thompson_ref_a),",
          "        Ok(thompson_ref_b),",
          "    ];",
          "    ",
          "    let result_iter = results.into_iter();",
          "",
          "    let _ = compiler.c_alternation(result_iter).unwrap();",
          "    let config = Config { nest_limit: 10, flags: Flags::empty() };",
          "    let pattern = String::from(\"a|b\");",
          "    let compiler = Compiler::new(config, pattern);",
          "    let _ = compiler.add(State::Char { target: 1, ch: 'a' }).unwrap();",
          "    let _ = compiler.add(State::Char { target: 2, ch: 'b' }).unwrap();",
          "    let thompson_ref_a = ThompsonRef { start: 0, end: 1 };",
          "    let thompson_ref_b = ThompsonRef { start: 1, end: 2 };",
          "    let results = vec![",
          "    Ok(thompson_ref_a),",
          "    Ok(thompson_ref_b),",
          "    ];",
          "    let result_iter = results.into_iter();",
          "    let result = compiler.c_alternation(result_iter).unwrap();",
          "    assert_eq!(result.start, splits);",
          "    assert_eq!(result.end, end);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::empty() };",
          "    let pattern = String::from(\"a|b|c\");",
          "    let compiler = Compiler::new(config, pattern);",
          "",
          "    let _ = compiler.add(State::Char { target: 1, ch: 'a' }).unwrap();",
          "    let _ = compiler.add(State::Char { target: 2, ch: 'b' }).unwrap();",
          "    let _ = compiler.add(State::Char { target: 3, ch: 'c' }).unwrap();",
          "",
          "    let thompson_ref_a = ThompsonRef { start: 0, end: 1 };",
          "    let thompson_ref_b = ThompsonRef { start: 1, end: 2 };",
          "    let thompson_ref_c = ThompsonRef { start: 2, end: 3 };",
          "    ",
          "    let results = vec![",
          "        Ok(thompson_ref_a),",
          "        Ok(thompson_ref_b),",
          "        Ok(thompson_ref_c),",
          "    ];",
          "    ",
          "    let result_iter = results.into_iter();",
          "",
          "    let _ = compiler.c_alternation(result_iter).unwrap();",
          "}"
        ],
        "oracle": [
          "    let result_iter = results.into_iter();",
          "    assert!(result_iter.next().is_some());",
          "    let first = result_iter.next().unwrap().unwrap();",
          "    assert!(result_iter.next().is_some());",
          "    let second = result_iter.next().unwrap().unwrap();",
          "    assert!(compiler.add(State::Splits { targets: vec![], reverse: false }).is_ok());",
          "    assert!(compiler.add_empty().is_ok());",
          "    assert!(compiler.patch(splits, first.start).is_ok());",
          "    assert!(compiler.patch(first.end, end).is_ok());",
          "    assert!(compiler.patch(splits, second.start).is_ok());",
          "    assert!(compiler.patch(second.end, end).is_ok());",
          "    assert!(result_iter.next().is_none());",
          "    let result = compiler.c_alternation(result_iter).unwrap();",
          "    assert_eq!(result, Ok(ThompsonRef { start: splits, end }));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::empty() };",
          "    let pattern = String::from(\"a|b|c\");",
          "    let compiler = Compiler::new(config, pattern);",
          "",
          "    let _ = compiler.add(State::Char { target: 1, ch: 'a' }).unwrap();",
          "    let _ = compiler.add(State::Char { target: 2, ch: 'b' }).unwrap();",
          "    let _ = compiler.add(State::Char { target: 3, ch: 'c' }).unwrap();",
          "",
          "    let thompson_ref_a = ThompsonRef { start: 0, end: 1 };",
          "    let thompson_ref_b = ThompsonRef { start: 1, end: 2 };",
          "    let thompson_ref_c = ThompsonRef { start: 2, end: 3 };",
          "    ",
          "    let results = vec![",
          "        Ok(thompson_ref_a),",
          "        Ok(thompson_ref_b),",
          "        Ok(thompson_ref_c),",
          "    ];",
          "    ",
          "    let result_iter = results.into_iter();",
          "",
          "    let _ = compiler.c_alternation(result_iter).unwrap();",
          "    let result_iter = results.into_iter();",
          "    assert!(result_iter.next().is_some());",
          "    let first = result_iter.next().unwrap().unwrap();",
          "    assert!(result_iter.next().is_some());",
          "    let second = result_iter.next().unwrap().unwrap();",
          "    assert!(compiler.add(State::Splits { targets: vec![], reverse: false }).is_ok());",
          "    assert!(compiler.add_empty().is_ok());",
          "    assert!(compiler.patch(splits, first.start).is_ok());",
          "    assert!(compiler.patch(first.end, end).is_ok());",
          "    assert!(compiler.patch(splits, second.start).is_ok());",
          "    assert!(compiler.patch(second.end, end).is_ok());",
          "    assert!(result_iter.next().is_none());",
          "    let result = compiler.c_alternation(result_iter).unwrap();",
          "    assert_eq!(result, Ok(ThompsonRef { start: splits, end }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::empty() };",
          "    let pattern = String::from(\"x|y\");",
          "    let compiler = Compiler::new(config, pattern);",
          "",
          "    let _ = compiler.add(State::Char { target: 1, ch: 'x' }).unwrap();",
          "    let _ = compiler.add(State::Char { target: 2, ch: 'y' }).unwrap();",
          "",
          "    let thompson_ref_x = ThompsonRef { start: 0, end: 1 };",
          "    let thompson_ref_y = ThompsonRef { start: 1, end: 2 };",
          "    ",
          "    let results = vec![",
          "        Ok(thompson_ref_x),",
          "        Ok(thompson_ref_y),",
          "    ];",
          "    ",
          "    let result_iter = results.into_iter();",
          "",
          "    let _ = compiler.c_alternation(result_iter).unwrap();",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 10, flags: Flags::empty() };",
          "    let pattern = String::from(\"x|y\");",
          "    let compiler = Compiler::new(config, pattern);",
          "    ",
          "    let _ = compiler.add(State::Char { target: 1, ch: 'x' }).unwrap();",
          "    let _ = compiler.add(State::Char { target: 2, ch: 'y' }).unwrap();",
          "    ",
          "    let thompson_ref_x = ThompsonRef { start: 0, end: 1 };",
          "    let thompson_ref_y = ThompsonRef { start: 1, end: 2 };",
          "    ",
          "    let results = vec![",
          "    Ok(thompson_ref_x),",
          "    Ok(thompson_ref_y),",
          "    ];",
          "    ",
          "    let result_iter = results.into_iter();",
          "    ",
          "    let result = compiler.c_alternation(result_iter).unwrap();",
          "    assert!(result.start > 0);",
          "    assert!(result.end > result.start);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::empty() };",
          "    let pattern = String::from(\"x|y\");",
          "    let compiler = Compiler::new(config, pattern);",
          "",
          "    let _ = compiler.add(State::Char { target: 1, ch: 'x' }).unwrap();",
          "    let _ = compiler.add(State::Char { target: 2, ch: 'y' }).unwrap();",
          "",
          "    let thompson_ref_x = ThompsonRef { start: 0, end: 1 };",
          "    let thompson_ref_y = ThompsonRef { start: 1, end: 2 };",
          "    ",
          "    let results = vec![",
          "        Ok(thompson_ref_x),",
          "        Ok(thompson_ref_y),",
          "    ];",
          "    ",
          "    let result_iter = results.into_iter();",
          "",
          "    let _ = compiler.c_alternation(result_iter).unwrap();",
          "    let config = Config { nest_limit: 10, flags: Flags::empty() };",
          "    let pattern = String::from(\"x|y\");",
          "    let compiler = Compiler::new(config, pattern);",
          "    ",
          "    let _ = compiler.add(State::Char { target: 1, ch: 'x' }).unwrap();",
          "    let _ = compiler.add(State::Char { target: 2, ch: 'y' }).unwrap();",
          "    ",
          "    let thompson_ref_x = ThompsonRef { start: 0, end: 1 };",
          "    let thompson_ref_y = ThompsonRef { start: 1, end: 2 };",
          "    ",
          "    let results = vec![",
          "    Ok(thompson_ref_x),",
          "    Ok(thompson_ref_y),",
          "    ];",
          "    ",
          "    let result_iter = results.into_iter();",
          "    ",
          "    let result = compiler.c_alternation(result_iter).unwrap();",
          "    assert!(result.start > 0);",
          "    assert!(result.end > result.start);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]