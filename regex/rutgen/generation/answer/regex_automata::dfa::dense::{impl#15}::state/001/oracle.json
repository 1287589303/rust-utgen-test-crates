[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let stride2 = 1;",
          "    let table = vec![StateID(0)];",
          "    let classes = ByteClasses([0; 256]);",
          "    let valid_id = StateID(0);",
          "    let transition_table = TransitionTable { table, classes, stride2 };",
          "    let state = transition_table.state(valid_id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.id, valid_id);",
          "    assert_eq!(state.stride2, stride2);",
          "    assert_eq!(state.transitions, &transition_table.table()[0..transition_table.alphabet_len()]);"
        ],
        "code": [
          "{",
          "    let stride2 = 1;",
          "    let table = vec![StateID(0)];",
          "    let classes = ByteClasses([0; 256]);",
          "    let valid_id = StateID(0);",
          "    let transition_table = TransitionTable { table, classes, stride2 };",
          "    let state = transition_table.state(valid_id);",
          "    assert_eq!(state.id, valid_id);",
          "    assert_eq!(state.stride2, stride2);",
          "    assert_eq!(state.transitions, &transition_table.table()[0..transition_table.alphabet_len()]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let stride2 = 2;",
          "    let table = vec![StateID(0), StateID(1), StateID(2)];",
          "    let classes = ByteClasses([0; 256]);",
          "    let valid_id = StateID(0);",
          "    let transition_table = TransitionTable { table, classes, stride2 };",
          "    let state = transition_table.state(valid_id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.id, valid_id);",
          "    assert_eq!(state.stride2, stride2);",
          "    assert_eq!(state.transitions.len(), transition_table.alphabet_len());",
          "    assert_eq!(state.transitions, &transition_table.table()[0..transition_table.alphabet_len()]);",
          "    assert!(transition_table.is_valid(valid_id));",
          "    assert_eq!(transition_table.len(), 3);"
        ],
        "code": [
          "{",
          "    let stride2 = 2;",
          "    let table = vec![StateID(0), StateID(1), StateID(2)];",
          "    let classes = ByteClasses([0; 256]);",
          "    let valid_id = StateID(0);",
          "    let transition_table = TransitionTable { table, classes, stride2 };",
          "    let state = transition_table.state(valid_id);",
          "    assert_eq!(state.id, valid_id);",
          "    assert_eq!(state.stride2, stride2);",
          "    assert_eq!(state.transitions.len(), transition_table.alphabet_len());",
          "    assert_eq!(state.transitions, &transition_table.table()[0..transition_table.alphabet_len()]);",
          "    assert!(transition_table.is_valid(valid_id));",
          "    assert_eq!(transition_table.len(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let stride2 = 3;",
          "    let table = vec![StateID(0), StateID(1), StateID(2), StateID(3), StateID(4), StateID(5)];",
          "    let classes = ByteClasses([0; 256]);",
          "    let valid_id = StateID(0);",
          "    let transition_table = TransitionTable { table, classes, stride2 };",
          "    let state = transition_table.state(valid_id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.id, valid_id);",
          "    assert_eq!(state.stride2, stride2);",
          "    assert_eq!(state.transitions.len(), transition_table.alphabet_len());",
          "    assert!(transition_table.is_valid(valid_id));"
        ],
        "code": [
          "{",
          "    let stride2 = 3;",
          "    let table = vec![StateID(0), StateID(1), StateID(2), StateID(3), StateID(4), StateID(5)];",
          "    let classes = ByteClasses([0; 256]);",
          "    let valid_id = StateID(0);",
          "    let transition_table = TransitionTable { table, classes, stride2 };",
          "    let state = transition_table.state(valid_id);",
          "    assert_eq!(state.id, valid_id);",
          "    assert_eq!(state.stride2, stride2);",
          "    assert_eq!(state.transitions.len(), transition_table.alphabet_len());",
          "    assert!(transition_table.is_valid(valid_id));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let stride2 = 4;",
          "    let table = vec![StateID(0), StateID(1), StateID(2), StateID(3), StateID(4), StateID(5), StateID(6), StateID(7)];",
          "    let classes = ByteClasses([0; 256]);",
          "    let valid_id = StateID(0);",
          "    let transition_table = TransitionTable { table, classes, stride2 };",
          "    let state = transition_table.state(valid_id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.id, valid_id);",
          "    assert_eq!(state.stride2, stride2);",
          "    assert_eq!(state.transitions.len(), transition_table.alphabet_len());",
          "    assert!(transition_table.is_valid(valid_id));"
        ],
        "code": [
          "{",
          "    let stride2 = 4;",
          "    let table = vec![StateID(0), StateID(1), StateID(2), StateID(3), StateID(4), StateID(5), StateID(6), StateID(7)];",
          "    let classes = ByteClasses([0; 256]);",
          "    let valid_id = StateID(0);",
          "    let transition_table = TransitionTable { table, classes, stride2 };",
          "    let state = transition_table.state(valid_id);",
          "    assert_eq!(state.id, valid_id);",
          "    assert_eq!(state.stride2, stride2);",
          "    assert_eq!(state.transitions.len(), transition_table.alphabet_len());",
          "    assert!(transition_table.is_valid(valid_id));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let stride2 = 9;",
          "    let table = vec![StateID(0), StateID(1), StateID(2), StateID(3), StateID(4), StateID(5), StateID(6), StateID(7), StateID(8), StateID(9)];",
          "    let classes = ByteClasses([0; 256]);",
          "    let valid_id = StateID(0);",
          "    let transition_table = TransitionTable { table, classes, stride2 };",
          "    let state = transition_table.state(valid_id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.id, valid_id);",
          "    assert_eq!(state.stride2, stride2);",
          "    assert_eq!(state.transitions, &transition_table.table()[0..transition_table.alphabet_len()]);"
        ],
        "code": [
          "{",
          "    let stride2 = 9;",
          "    let table = vec![StateID(0), StateID(1), StateID(2), StateID(3), StateID(4), StateID(5), StateID(6), StateID(7), StateID(8), StateID(9)];",
          "    let classes = ByteClasses([0; 256]);",
          "    let valid_id = StateID(0);",
          "    let transition_table = TransitionTable { table, classes, stride2 };",
          "    let state = transition_table.state(valid_id);",
          "    assert_eq!(state.id, valid_id);",
          "    assert_eq!(state.stride2, stride2);",
          "    assert_eq!(state.transitions, &transition_table.table()[0..transition_table.alphabet_len()]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]