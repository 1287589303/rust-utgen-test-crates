[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ranges = vec![",
          "        ClassUnicodeRange { start: 'a', end: 'z' },",
          "    ];",
          "    let class_unicode = ClassUnicode::new(ranges);",
          "    class_unicode.maximum_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_unicode.maximum_len(), Some(1));"
        ],
        "code": [
          "{",
          "    let ranges = vec![",
          "        ClassUnicodeRange { start: 'a', end: 'z' },",
          "    ];",
          "    let class_unicode = ClassUnicode::new(ranges);",
          "    class_unicode.maximum_len();",
          "    assert_eq!(class_unicode.maximum_len(), Some(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ranges = vec![",
          "        ClassUnicodeRange { start: '中', end: '文' }, // Valid range containing CJK characters",
          "    ];",
          "    let class_unicode = ClassUnicode::new(ranges);",
          "    class_unicode.maximum_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_unicode.maximum_len(), Some(3));"
        ],
        "code": [
          "{",
          "    let ranges = vec![",
          "        ClassUnicodeRange { start: '中', end: '文' }, // Valid range containing CJK characters",
          "    ];",
          "    let class_unicode = ClassUnicode::new(ranges);",
          "    class_unicode.maximum_len();",
          "    assert_eq!(class_unicode.maximum_len(), Some(3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ranges = vec![",
          "        ClassUnicodeRange { start: '\\u{10000}', end: '\\u{10FFFF}' }, // Valid range for Supplementary characters",
          "    ];",
          "    let class_unicode = ClassUnicode::new(ranges);",
          "    class_unicode.maximum_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_unicode.maximum_len(), Some(4));",
          "    assert_eq!(class_unicode.ranges().len(), 1);",
          "    assert_eq!(class_unicode.ranges()[0].start, '\\u{10000}');",
          "    assert_eq!(class_unicode.ranges()[0].end, '\\u{10FFFF}');",
          "    assert!(class_unicode.ranges().last().is_some());",
          "    assert!(class_unicode.is_ascii() == false);"
        ],
        "code": [
          "{",
          "    let ranges = vec![",
          "        ClassUnicodeRange { start: '\\u{10000}', end: '\\u{10FFFF}' }, // Valid range for Supplementary characters",
          "    ];",
          "    let class_unicode = ClassUnicode::new(ranges);",
          "    class_unicode.maximum_len();",
          "    assert_eq!(class_unicode.maximum_len(), Some(4));",
          "    assert_eq!(class_unicode.ranges().len(), 1);",
          "    assert_eq!(class_unicode.ranges()[0].start, '\\u{10000}');",
          "    assert_eq!(class_unicode.ranges()[0].end, '\\u{10FFFF}');",
          "    assert!(class_unicode.ranges().last().is_some());",
          "    assert!(class_unicode.is_ascii() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ranges = vec![",
          "        ClassUnicodeRange { start: 'A', end: 'Z' },",
          "        ClassUnicodeRange { start: '0', end: '9' }, // Various valid ranges",
          "    ];",
          "    let class_unicode = ClassUnicode::new(ranges);",
          "    class_unicode.maximum_len();",
          "}"
        ],
        "oracle": [
          "    let ranges = vec![ClassUnicodeRange { start: 'A', end: 'Z' }, ClassUnicodeRange { start: '0', end: '9' }];",
          "    let class_unicode = ClassUnicode::new(ranges);",
          "    let result = class_unicode.maximum_len();",
          "    assert_eq!(result, Some(1));",
          "    ",
          "    let ranges = vec![ClassUnicodeRange { start: 'a', end: 'z' }, ClassUnicodeRange { start: 'A', end: 'Z' }];",
          "    let class_unicode = ClassUnicode::new(ranges);",
          "    let result = class_unicode.maximum_len();",
          "    assert_eq!(result, Some(1));",
          "    ",
          "    let ranges = vec![ClassUnicodeRange { start: 'A', end: 'A' }];",
          "    let class_unicode = ClassUnicode::new(ranges);",
          "    let result = class_unicode.maximum_len();",
          "    assert_eq!(result, Some(1));",
          "    ",
          "    let ranges = vec![ClassUnicodeRange { start: ' ', end: ' ' }, ClassUnicodeRange { start: '\\n', end: '\\n' }];",
          "    let class_unicode = ClassUnicode::new(ranges);",
          "    let result = class_unicode.maximum_len();",
          "    assert_eq!(result, Some(1));",
          "    ",
          "    let ranges: Vec<ClassUnicodeRange> = vec![];",
          "    let class_unicode = ClassUnicode::new(ranges);",
          "    let result = class_unicode.maximum_len();",
          "    assert_eq!(result, None);",
          "    ",
          "    let ranges = vec![ClassUnicodeRange { start: '\\u{1F600}', end: '\\u{1F600}' }];",
          "    let class_unicode = ClassUnicode::new(ranges);",
          "    let result = class_unicode.maximum_len();",
          "    assert_eq!(result, Some(4));",
          "    ",
          "    let ranges = vec![ClassUnicodeRange { start: '\\u{10000}', end: '\\u{10000}' }];",
          "    let class_unicode = ClassUnicode::new(ranges);",
          "    let result = class_unicode.maximum_len();",
          "    assert_eq!(result, Some(4));",
          "    ",
          "    let ranges = vec![ClassUnicodeRange { start: 'A', end: 'Z' }, ClassUnicodeRange { start: '0', end: '9' }, ClassUnicodeRange { start: '©', end: '©' }];",
          "    let class_unicode = ClassUnicode::new(ranges);",
          "    let result = class_unicode.maximum_len();",
          "    assert_eq!(result, Some(2));"
        ],
        "code": [
          "{",
          "    let ranges = vec![",
          "        ClassUnicodeRange { start: 'A', end: 'Z' },",
          "        ClassUnicodeRange { start: '0', end: '9' }, // Various valid ranges",
          "    ];",
          "    let class_unicode = ClassUnicode::new(ranges);",
          "    class_unicode.maximum_len();",
          "    let ranges = vec![ClassUnicodeRange { start: 'A', end: 'Z' }, ClassUnicodeRange { start: '0', end: '9' }];",
          "    let class_unicode = ClassUnicode::new(ranges);",
          "    let result = class_unicode.maximum_len();",
          "    assert_eq!(result, Some(1));",
          "    ",
          "    let ranges = vec![ClassUnicodeRange { start: 'a', end: 'z' }, ClassUnicodeRange { start: 'A', end: 'Z' }];",
          "    let class_unicode = ClassUnicode::new(ranges);",
          "    let result = class_unicode.maximum_len();",
          "    assert_eq!(result, Some(1));",
          "    ",
          "    let ranges = vec![ClassUnicodeRange { start: 'A', end: 'A' }];",
          "    let class_unicode = ClassUnicode::new(ranges);",
          "    let result = class_unicode.maximum_len();",
          "    assert_eq!(result, Some(1));",
          "    ",
          "    let ranges = vec![ClassUnicodeRange { start: ' ', end: ' ' }, ClassUnicodeRange { start: '\\n', end: '\\n' }];",
          "    let class_unicode = ClassUnicode::new(ranges);",
          "    let result = class_unicode.maximum_len();",
          "    assert_eq!(result, Some(1));",
          "    ",
          "    let ranges: Vec<ClassUnicodeRange> = vec![];",
          "    let class_unicode = ClassUnicode::new(ranges);",
          "    let result = class_unicode.maximum_len();",
          "    assert_eq!(result, None);",
          "    ",
          "    let ranges = vec![ClassUnicodeRange { start: '\\u{1F600}', end: '\\u{1F600}' }];",
          "    let class_unicode = ClassUnicode::new(ranges);",
          "    let result = class_unicode.maximum_len();",
          "    assert_eq!(result, Some(4));",
          "    ",
          "    let ranges = vec![ClassUnicodeRange { start: '\\u{10000}', end: '\\u{10000}' }];",
          "    let class_unicode = ClassUnicode::new(ranges);",
          "    let result = class_unicode.maximum_len();",
          "    assert_eq!(result, Some(4));",
          "    ",
          "    let ranges = vec![ClassUnicodeRange { start: 'A', end: 'Z' }, ClassUnicodeRange { start: '0', end: '9' }, ClassUnicodeRange { start: '©', end: '©' }];",
          "    let class_unicode = ClassUnicode::new(ranges);",
          "    let result = class_unicode.maximum_len();",
          "    assert_eq!(result, Some(2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ranges = vec![",
          "        ClassUnicodeRange { start: '\\u{0000}', end: '\\u{007F}' }, // Includes ASCII characters",
          "    ];",
          "    let class_unicode = ClassUnicode::new(ranges);",
          "    class_unicode.maximum_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_unicode.maximum_len(), Some(1));"
        ],
        "code": [
          "{",
          "    let ranges = vec![",
          "        ClassUnicodeRange { start: '\\u{0000}', end: '\\u{007F}' }, // Includes ASCII characters",
          "    ];",
          "    let class_unicode = ClassUnicode::new(ranges);",
          "    class_unicode.maximum_len();",
          "    assert_eq!(class_unicode.maximum_len(), Some(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]