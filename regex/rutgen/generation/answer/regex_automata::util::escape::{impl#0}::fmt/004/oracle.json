[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let debug_byte = DebugByte(b' ');",
          "    let mut output = core::fmt::Formatter::new();",
          "    let _ = debug_byte.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{:?}\", DebugByte(b' ')), \"' '\");",
          "    let debug_byte = DebugByte(b'a');",
          "    let mut output = core::fmt::Formatter::new();",
          "    let _ = debug_byte.fmt(&mut output);",
          "    assert_eq!(output.to_string(), \"\\\\x61\");",
          "    let debug_byte = DebugByte(b'Z');",
          "    let mut output = core::fmt::Formatter::new();",
          "    let _ = debug_byte.fmt(&mut output);",
          "    assert_eq!(output.to_string(), \"\\\\x5a\");",
          "    let debug_byte = DebugByte(b'\\n');",
          "    let mut output = core::fmt::Formatter::new();",
          "    let _ = debug_byte.fmt(&mut output);",
          "    assert_eq!(output.to_string(), \"\\\\n\");",
          "    let debug_byte = DebugByte(b'\\x1F');",
          "    let mut output = core::fmt::Formatter::new();",
          "    let _ = debug_byte.fmt(&mut output);",
          "    assert_eq!(output.to_string(), \"\\\\x1f\");"
        ],
        "code": [
          "{",
          "    let debug_byte = DebugByte(b' ');",
          "    let mut output = core::fmt::Formatter::new();",
          "    let _ = debug_byte.fmt(&mut output);",
          "    assert_eq!(format!(\"{:?}\", DebugByte(b' ')), \"' '\");",
          "    let debug_byte = DebugByte(b'a');",
          "    let mut output = core::fmt::Formatter::new();",
          "    let _ = debug_byte.fmt(&mut output);",
          "    assert_eq!(output.to_string(), \"\\\\x61\");",
          "    let debug_byte = DebugByte(b'Z');",
          "    let mut output = core::fmt::Formatter::new();",
          "    let _ = debug_byte.fmt(&mut output);",
          "    assert_eq!(output.to_string(), \"\\\\x5a\");",
          "    let debug_byte = DebugByte(b'\\n');",
          "    let mut output = core::fmt::Formatter::new();",
          "    let _ = debug_byte.fmt(&mut output);",
          "    assert_eq!(output.to_string(), \"\\\\n\");",
          "    let debug_byte = DebugByte(b'\\x1F');",
          "    let mut output = core::fmt::Formatter::new();",
          "    let _ = debug_byte.fmt(&mut output);",
          "    assert_eq!(output.to_string(), \"\\\\x1f\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let control_chars = [b'\\x00', b'\\x01', b'\\x02', b'\\x0A', b'\\x1F'];",
          "    for &byte in &control_chars {",
          "        let debug_byte = DebugByte(byte);",
          "        let mut output = core::fmt::Formatter::new();",
          "        let _ = debug_byte.fmt(&mut output);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output.to_string(), \"' '\"); // Precondition: self.0 == b' ' is true",
          "    assert_eq!(output.to_string(), \"\\\\x00\"); // Precondition: (i, mut b) in core::ascii::escape_default(self.0).enumerate() is true",
          "    assert_eq!(output.to_string(), \"\\\\x01\"); // Precondition: (i, mut b) in core::ascii::escape_default(self.0).enumerate() is true",
          "    assert_eq!(output.to_string(), \"\\\\x02\"); // Precondition: (i, mut b) in core::ascii::escape_default(self.0).enumerate() is true",
          "    assert_eq!(output.to_string(), \"\\\\n\"); // Precondition: (i, mut b) in core::ascii::escape_default(self.0).enumerate() is true",
          "    assert_eq!(output.to_string(), \"\\\\x1f\"); // Precondition: (i, mut b) in core::ascii::escape_default(self.0).enumerate() is true",
          "    assert_eq!(output.to_string(), \"\\\\xAB\"); // Precondition: i >= 2 is true and b'a' <= b false",
          "    assert_eq!(output.to_string(), \"\\\\xAB\"); // Precondition: (i, mut b) in core::ascii::escape_default(self.0).enumerate() is false"
        ],
        "code": [
          "{",
          "    let control_chars = [b'\\x00', b'\\x01', b'\\x02', b'\\x0A', b'\\x1F'];",
          "    for &byte in &control_chars {",
          "        let debug_byte = DebugByte(byte);",
          "        let mut output = core::fmt::Formatter::new();",
          "        let _ = debug_byte.fmt(&mut output);",
          "    }",
          "    assert_eq!(output.to_string(), \"' '\"); // Precondition: self.0 == b' ' is true",
          "    assert_eq!(output.to_string(), \"\\\\x00\"); // Precondition: (i, mut b) in core::ascii::escape_default(self.0).enumerate() is true",
          "    assert_eq!(output.to_string(), \"\\\\x01\"); // Precondition: (i, mut b) in core::ascii::escape_default(self.0).enumerate() is true",
          "    assert_eq!(output.to_string(), \"\\\\x02\"); // Precondition: (i, mut b) in core::ascii::escape_default(self.0).enumerate() is true",
          "    assert_eq!(output.to_string(), \"\\\\n\"); // Precondition: (i, mut b) in core::ascii::escape_default(self.0).enumerate() is true",
          "    assert_eq!(output.to_string(), \"\\\\x1f\"); // Precondition: (i, mut b) in core::ascii::escape_default(self.0).enumerate() is true",
          "    assert_eq!(output.to_string(), \"\\\\xAB\"); // Precondition: i >= 2 is true and b'a' <= b false",
          "    assert_eq!(output.to_string(), \"\\\\xAB\"); // Precondition: (i, mut b) in core::ascii::escape_default(self.0).enumerate() is false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let regular_ascii = [b'\\x21', b'\\x22', b'\\x23', b'\\x24', b'\\x7F'];",
          "    for &byte in &regular_ascii {",
          "        let debug_byte = DebugByte(byte);",
          "        let mut output = core::fmt::Formatter::new();",
          "        let _ = debug_byte.fmt(&mut output);",
          "    }",
          "}"
        ],
        "oracle": [
          "    DebugByte(b' ') fmt() should return \"' '\"",
          "    DebugByte(b'!') fmt() should not trigger special case for ASCII space",
          "    DebugByte(b'\\x00') fmt() should return \"\\x00\"",
          "    DebugByte(b'\\x7F') fmt() should return \"\\x7F\"",
          "    DebugByte(b'A') fmt() should return \"A\"",
          "    DebugByte(b'\\x1F') fmt() should return \"\\x1f\""
        ],
        "code": [
          "{",
          "    let regular_ascii = [b'\\x21', b'\\x22', b'\\x23', b'\\x24', b'\\x7F'];",
          "    for &byte in &regular_ascii {",
          "        let debug_byte = DebugByte(byte);",
          "        let mut output = core::fmt::Formatter::new();",
          "        let _ = debug_byte.fmt(&mut output);",
          "    }",
          "    DebugByte(b' ') fmt() should return \"' '\"",
          "    DebugByte(b'!') fmt() should not trigger special case for ASCII space",
          "    DebugByte(b'\\x00') fmt() should return \"\\x00\"",
          "    DebugByte(b'\\x7F') fmt() should return \"\\x7F\"",
          "    DebugByte(b'A') fmt() should return \"A\"",
          "    DebugByte(b'\\x1F') fmt() should return \"\\x1f\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]