[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = DebugByte(b' ');",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    byte.fmt(&mut formatter).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.as_str(), \"' '\");",
          "    assert!(formatter.was_written());",
          "    assert_eq!(formatter.bytes_written(), 3);"
        ],
        "code": [
          "{",
          "    let byte = DebugByte(b' ');",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    byte.fmt(&mut formatter).unwrap();",
          "    assert_eq!(formatter.as_str(), \"' '\");",
          "    assert!(formatter.was_written());",
          "    assert_eq!(formatter.bytes_written(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = DebugByte(0x00);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    byte.fmt(&mut formatter).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"' '\");"
        ],
        "code": [
          "{",
          "    let byte = DebugByte(0x00);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    byte.fmt(&mut formatter).unwrap();",
          "    assert_eq!(formatter.to_string(), \"' '\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = DebugByte(b'A');",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    byte.fmt(&mut formatter).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte.0, b'A');",
          "    assert!(formatter.is_empty());",
          "    assert!(core::str::from_utf8(&[0x41]).is_ok());",
          "    assert_eq!(formatter.to_string(), \"A\");",
          "    assert_eq!(byte.fmt(&mut core::fmt::Formatter::new()), Ok(()));",
          "    assert_eq!(byte.fmt(&mut formatter).unwrap(), core::fmt::Result::Ok(()));"
        ],
        "code": [
          "{",
          "    let byte = DebugByte(b'A');",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    byte.fmt(&mut formatter).unwrap();",
          "    assert_eq!(byte.0, b'A');",
          "    assert!(formatter.is_empty());",
          "    assert!(core::str::from_utf8(&[0x41]).is_ok());",
          "    assert_eq!(formatter.to_string(), \"A\");",
          "    assert_eq!(byte.fmt(&mut core::fmt::Formatter::new()), Ok(()));",
          "    assert_eq!(byte.fmt(&mut formatter).unwrap(), core::fmt::Result::Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = DebugByte(0xFF);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    byte.fmt(&mut formatter).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.buffer(), \"0xFF\");",
          "    assert_eq!(byte.0, 0xFF);",
          "    assert!(formatter.is_empty() == false);"
        ],
        "code": [
          "{",
          "    let byte = DebugByte(0xFF);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    byte.fmt(&mut formatter).unwrap();",
          "    assert_eq!(formatter.buffer(), \"0xFF\");",
          "    assert_eq!(byte.0, 0xFF);",
          "    assert!(formatter.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]