[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let builder = Builder::new();",
          "    let patterns: Vec<&str> = vec![];",
          "    let _ = builder.build_many(&patterns);",
          "}"
        ],
        "oracle": [
          "    assert!(builder.build_many(&patterns).is_err());"
        ],
        "code": [
          "{",
          "    let builder = Builder::new();",
          "    let patterns: Vec<&str> = vec![];",
          "    let _ = builder.build_many(&patterns);",
          "    assert!(builder.build_many(&patterns).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let builder = Builder::new();",
          "    let patterns = vec![String::new()];",
          "    let _ = builder.build_many(&patterns);",
          "}"
        ],
        "oracle": [
          "    assert!(builder.build_many(&patterns).is_err());",
          "    assert!(matches!(builder.build_many(&patterns), Err(BuildError { kind: _ })));"
        ],
        "code": [
          "{",
          "    let builder = Builder::new();",
          "    let patterns = vec![String::new()];",
          "    let _ = builder.build_many(&patterns);",
          "    assert!(builder.build_many(&patterns).is_err());",
          "    assert!(matches!(builder.build_many(&patterns), Err(BuildError { kind: _ })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let builder = Builder::new();",
          "    let patterns = vec![\"*\", \"a|\", \"??\"];",
          "    let _ = builder.build_many(&patterns);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.build_many(&patterns).is_err(), true);",
          "    assert_eq!(builder.build_many(&patterns).unwrap_err().kind, BuildErrorKind::Syntax);",
          "    assert_eq!(builder.build_many(&patterns).is_err(), true);",
          "    assert!(matches!(builder.build_many(&patterns), Err(BuildError { kind: BuildErrorKind::Syntax, .. })));",
          "    assert!(builder.build_many(&patterns).is_err());",
          "    assert!(builder.build_many(&patterns).unwrap_err().kind == BuildErrorKind::Syntax);"
        ],
        "code": [
          "{",
          "    let builder = Builder::new();",
          "    let patterns = vec![\"*\", \"a|\", \"??\"];",
          "    let _ = builder.build_many(&patterns);",
          "    assert_eq!(builder.build_many(&patterns).is_err(), true);",
          "    assert_eq!(builder.build_many(&patterns).unwrap_err().kind, BuildErrorKind::Syntax);",
          "    assert_eq!(builder.build_many(&patterns).is_err(), true);",
          "    assert!(matches!(builder.build_many(&patterns), Err(BuildError { kind: BuildErrorKind::Syntax, .. })));",
          "    assert!(builder.build_many(&patterns).is_err());",
          "    assert!(builder.build_many(&patterns).unwrap_err().kind == BuildErrorKind::Syntax);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let builder = Builder::new();",
          "    let patterns = vec![\"a\", \"b*\", \".*\"];",
          "    let _ = builder.build_many(&patterns);",
          "}"
        ],
        "oracle": [
          "    assert!(builder.build_many(&patterns).is_err());",
          "    assert!(builder.build_many(&patterns).is_err());"
        ],
        "code": [
          "{",
          "    let builder = Builder::new();",
          "    let patterns = vec![\"a\", \"b*\", \".*\"];",
          "    let _ = builder.build_many(&patterns);",
          "    assert!(builder.build_many(&patterns).is_err());",
          "    assert!(builder.build_many(&patterns).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]