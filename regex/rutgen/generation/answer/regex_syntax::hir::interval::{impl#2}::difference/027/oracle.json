[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, PartialOrd, Eq)]",
          "    struct TestBound(u32);",
          "",
          "    impl Bound for TestBound {",
          "        fn decrement(&self) -> Self {",
          "            TestBound(self.0 - 1)",
          "        }",
          "",
          "        fn increment(&self) -> Self {",
          "            TestBound(self.0 + 1)",
          "        }",
          "    }",
          "",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, PartialOrd, Eq)]",
          "    struct TestInterval {",
          "        lower: TestBound,",
          "        upper: TestBound,",
          "    }",
          "",
          "    impl Interval for TestInterval {",
          "        type Bound = TestBound;",
          "",
          "        fn lower(&self) -> Self::Bound {",
          "            self.lower",
          "        }",
          "",
          "        fn upper(&self) -> Self::Bound {",
          "            self.upper",
          "        }",
          "",
          "        fn set_lower(&mut self, bound: Self::Bound) {",
          "            self.lower = bound;",
          "        }",
          "",
          "        fn set_upper(&mut self, bound: Self::Bound) {",
          "            self.upper = bound;",
          "        }",
          "",
          "        fn case_fold_simple(&self, _intervals: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> {",
          "            Ok(())",
          "        }",
          "",
          "        fn is_contiguous(&self, other: &Self) -> bool {",
          "            self.upper >= other.lower && self.lower <= other.upper",
          "        }",
          "",
          "        fn is_intersection_empty(&self, other: &Self) -> bool {",
          "            self.upper < other.lower || self.lower > other.upper",
          "        }",
          "",
          "        fn is_subset(&self, other: &Self) -> bool {",
          "            self.lower >= other.lower && self.upper <= other.upper",
          "        }",
          "",
          "        fn difference(&self, other: &Self) -> (Option<Self>, Option<Self>) {",
          "            if self.is_subset(other) {",
          "                return (None, None);",
          "            }",
          "            let mut result = (None, None);",
          "            if other.lower > self.lower {",
          "                result.0 = Some(TestInterval {",
          "                    lower: self.lower,",
          "                    upper: other.lower.decrement(),",
          "                });",
          "            }",
          "            if other.upper < self.upper {",
          "                result.1 = Some(TestInterval {",
          "                    lower: other.upper.increment(),",
          "                    upper: self.upper,",
          "                });",
          "            }",
          "            result",
          "        }",
          "    }",
          "",
          "    let mut interval_set_a = IntervalSet::new(vec![TestInterval {",
          "        lower: TestBound(5),",
          "        upper: TestBound(10),",
          "    }]);",
          "    ",
          "    let interval_set_b = IntervalSet::new(vec![TestInterval {",
          "        lower: TestBound(10),",
          "        upper: TestBound(15),",
          "    }]);",
          "",
          "    interval_set_a.difference(&interval_set_b);",
          "}"
        ],
        "oracle": [
          "    assert!(interval_set_a.ranges.len() > 0);",
          "    assert!(interval_set_b.ranges.len() > 0);",
          "    assert!(a < drain_end);",
          "    assert!(b < interval_set_b.ranges.len());",
          "    assert!(interval_set_b.ranges[b].upper() == interval_set_a.ranges[a].lower());",
          "    assert!(interval_set_a.ranges[a].upper() == interval_set_b.ranges[b].lower());",
          "    assert!(!interval_set_a.ranges[a].is_intersection_empty(&interval_set_b.ranges[b]));",
          "    assert!(b < interval_set_b.ranges.len());",
          "    assert!(!range.is_intersection_empty(&interval_set_b.ranges[b]));",
          "    assert!(matches!(range.difference(&interval_set_b.ranges[b]), (Some(_), None)));",
          "    assert!(other.ranges[b].upper() > old_range.upper());",
          "    assert!(a == drain_end);",
          "    assert!(a == drain_end);",
          "    assert!(!self.folded);"
        ],
        "code": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, PartialOrd, Eq)]",
          "    struct TestBound(u32);",
          "",
          "    impl Bound for TestBound {",
          "        fn decrement(&self) -> Self {",
          "            TestBound(self.0 - 1)",
          "        }",
          "",
          "        fn increment(&self) -> Self {",
          "            TestBound(self.0 + 1)",
          "        }",
          "    }",
          "",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, PartialOrd, Eq)]",
          "    struct TestInterval {",
          "        lower: TestBound,",
          "        upper: TestBound,",
          "    }",
          "",
          "    impl Interval for TestInterval {",
          "        type Bound = TestBound;",
          "",
          "        fn lower(&self) -> Self::Bound {",
          "            self.lower",
          "        }",
          "",
          "        fn upper(&self) -> Self::Bound {",
          "            self.upper",
          "        }",
          "",
          "        fn set_lower(&mut self, bound: Self::Bound) {",
          "            self.lower = bound;",
          "        }",
          "",
          "        fn set_upper(&mut self, bound: Self::Bound) {",
          "            self.upper = bound;",
          "        }",
          "",
          "        fn case_fold_simple(&self, _intervals: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> {",
          "            Ok(())",
          "        }",
          "",
          "        fn is_contiguous(&self, other: &Self) -> bool {",
          "            self.upper >= other.lower && self.lower <= other.upper",
          "        }",
          "",
          "        fn is_intersection_empty(&self, other: &Self) -> bool {",
          "            self.upper < other.lower || self.lower > other.upper",
          "        }",
          "",
          "        fn is_subset(&self, other: &Self) -> bool {",
          "            self.lower >= other.lower && self.upper <= other.upper",
          "        }",
          "",
          "        fn difference(&self, other: &Self) -> (Option<Self>, Option<Self>) {",
          "            if self.is_subset(other) {",
          "                return (None, None);",
          "            }",
          "            let mut result = (None, None);",
          "            if other.lower > self.lower {",
          "                result.0 = Some(TestInterval {",
          "                    lower: self.lower,",
          "                    upper: other.lower.decrement(),",
          "                });",
          "            }",
          "            if other.upper < self.upper {",
          "                result.1 = Some(TestInterval {",
          "                    lower: other.upper.increment(),",
          "                    upper: self.upper,",
          "                });",
          "            }",
          "            result",
          "        }",
          "    }",
          "",
          "    let mut interval_set_a = IntervalSet::new(vec![TestInterval {",
          "        lower: TestBound(5),",
          "        upper: TestBound(10),",
          "    }]);",
          "    ",
          "    let interval_set_b = IntervalSet::new(vec![TestInterval {",
          "        lower: TestBound(10),",
          "        upper: TestBound(15),",
          "    }]);",
          "",
          "    interval_set_a.difference(&interval_set_b);",
          "    assert!(interval_set_a.ranges.len() > 0);",
          "    assert!(interval_set_b.ranges.len() > 0);",
          "    assert!(a < drain_end);",
          "    assert!(b < interval_set_b.ranges.len());",
          "    assert!(interval_set_b.ranges[b].upper() == interval_set_a.ranges[a].lower());",
          "    assert!(interval_set_a.ranges[a].upper() == interval_set_b.ranges[b].lower());",
          "    assert!(!interval_set_a.ranges[a].is_intersection_empty(&interval_set_b.ranges[b]));",
          "    assert!(b < interval_set_b.ranges.len());",
          "    assert!(!range.is_intersection_empty(&interval_set_b.ranges[b]));",
          "    assert!(matches!(range.difference(&interval_set_b.ranges[b]), (Some(_), None)));",
          "    assert!(other.ranges[b].upper() > old_range.upper());",
          "    assert!(a == drain_end);",
          "    assert!(a == drain_end);",
          "    assert!(!self.folded);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, PartialOrd, Eq)]",
          "    struct TestBound(u32);",
          "",
          "    impl Bound for TestBound {",
          "        fn decrement(&self) -> Self {",
          "            TestBound(self.0 - 1)",
          "        }",
          "",
          "        fn increment(&self) -> Self {",
          "            TestBound(self.0 + 1)",
          "        }",
          "    }",
          "",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, PartialOrd, Eq)]",
          "    struct TestInterval {",
          "        lower: TestBound,",
          "        upper: TestBound,",
          "    }",
          "",
          "    impl Interval for TestInterval {",
          "        type Bound = TestBound;",
          "",
          "        fn lower(&self) -> Self::Bound {",
          "            self.lower",
          "        }",
          "",
          "        fn upper(&self) -> Self::Bound {",
          "            self.upper",
          "        }",
          "",
          "        fn set_lower(&mut self, bound: Self::Bound) {",
          "            self.lower = bound;",
          "        }",
          "",
          "        fn set_upper(&mut self, bound: Self::Bound) {",
          "            self.upper = bound;",
          "        }",
          "",
          "        fn case_fold_simple(&self, _intervals: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> {",
          "            Ok(())",
          "        }",
          "",
          "        fn is_contiguous(&self, other: &Self) -> bool {",
          "            self.upper >= other.lower && self.lower <= other.upper",
          "        }",
          "",
          "        fn is_intersection_empty(&self, other: &Self) -> bool {",
          "            self.upper < other.lower || self.lower > other.upper",
          "        }",
          "",
          "        fn is_subset(&self, other: &Self) -> bool {",
          "            self.lower >= other.lower && self.upper <= other.upper",
          "        }",
          "",
          "        fn difference(&self, other: &Self) -> (Option<Self>, Option<Self>) {",
          "            if self.is_subset(other) {",
          "                return (None, None);",
          "            }",
          "            let mut result = (None, None);",
          "            if other.lower > self.lower {",
          "                result.0 = Some(TestInterval {",
          "                    lower: self.lower,",
          "                    upper: other.lower.decrement(),",
          "                });",
          "            }",
          "            if other.upper < self.upper {",
          "                result.1 = Some(TestInterval {",
          "                    lower: other.upper.increment(),",
          "                    upper: self.upper,",
          "                });",
          "            }",
          "            result",
          "        }",
          "    }",
          "",
          "    let mut interval_set_a = IntervalSet::new(vec![",
          "        TestInterval {",
          "            lower: TestBound(5),",
          "            upper: TestBound(10),",
          "        },",
          "        TestInterval {",
          "            lower: TestBound(15),",
          "            upper: TestBound(20),",
          "        },",
          "    ]);",
          "    ",
          "    let interval_set_b = IntervalSet::new(vec![TestInterval {",
          "        lower: TestBound(10),",
          "        upper: TestBound(15),",
          "    }]);",
          "",
          "    interval_set_a.difference(&interval_set_b);",
          "}"
        ],
        "oracle": [
          "    assert!(!interval_set_a.ranges.is_empty());",
          "    assert!(!interval_set_b.ranges.is_empty());",
          "    let drain_end = interval_set_a.ranges.len();",
          "    assert!(drain_end > 0);",
          "    assert!(interval_set_b.ranges.len() > 0);",
          "    assert!(interval_set_a.ranges[0].upper() == interval_set_b.ranges[0].lower());",
          "    assert!(interval_set_a.ranges[1].upper() == interval_set_b.ranges[1].lower());",
          "    assert!(!interval_set_a.ranges[0].is_intersection_empty(&interval_set_b.ranges[0]));",
          "    assert!(range_a.is_intersection_empty(&interval_set_b.ranges[0]) == false);",
          "    assert!(range_a.difference(&interval_set_b.ranges[0]) == (Some(TestInterval { lower: TestBound(5), upper: TestBound(9) }), None));",
          "    assert!(interval_set_b.ranges[0].upper() > old_range.upper());",
          "    assert!(a == drain_end);",
          "    assert!(a == drain_end);",
          "    assert!(!interval_set_a.folded);"
        ],
        "code": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, PartialOrd, Eq)]",
          "    struct TestBound(u32);",
          "",
          "    impl Bound for TestBound {",
          "        fn decrement(&self) -> Self {",
          "            TestBound(self.0 - 1)",
          "        }",
          "",
          "        fn increment(&self) -> Self {",
          "            TestBound(self.0 + 1)",
          "        }",
          "    }",
          "",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, PartialOrd, Eq)]",
          "    struct TestInterval {",
          "        lower: TestBound,",
          "        upper: TestBound,",
          "    }",
          "",
          "    impl Interval for TestInterval {",
          "        type Bound = TestBound;",
          "",
          "        fn lower(&self) -> Self::Bound {",
          "            self.lower",
          "        }",
          "",
          "        fn upper(&self) -> Self::Bound {",
          "            self.upper",
          "        }",
          "",
          "        fn set_lower(&mut self, bound: Self::Bound) {",
          "            self.lower = bound;",
          "        }",
          "",
          "        fn set_upper(&mut self, bound: Self::Bound) {",
          "            self.upper = bound;",
          "        }",
          "",
          "        fn case_fold_simple(&self, _intervals: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> {",
          "            Ok(())",
          "        }",
          "",
          "        fn is_contiguous(&self, other: &Self) -> bool {",
          "            self.upper >= other.lower && self.lower <= other.upper",
          "        }",
          "",
          "        fn is_intersection_empty(&self, other: &Self) -> bool {",
          "            self.upper < other.lower || self.lower > other.upper",
          "        }",
          "",
          "        fn is_subset(&self, other: &Self) -> bool {",
          "            self.lower >= other.lower && self.upper <= other.upper",
          "        }",
          "",
          "        fn difference(&self, other: &Self) -> (Option<Self>, Option<Self>) {",
          "            if self.is_subset(other) {",
          "                return (None, None);",
          "            }",
          "            let mut result = (None, None);",
          "            if other.lower > self.lower {",
          "                result.0 = Some(TestInterval {",
          "                    lower: self.lower,",
          "                    upper: other.lower.decrement(),",
          "                });",
          "            }",
          "            if other.upper < self.upper {",
          "                result.1 = Some(TestInterval {",
          "                    lower: other.upper.increment(),",
          "                    upper: self.upper,",
          "                });",
          "            }",
          "            result",
          "        }",
          "    }",
          "",
          "    let mut interval_set_a = IntervalSet::new(vec![",
          "        TestInterval {",
          "            lower: TestBound(5),",
          "            upper: TestBound(10),",
          "        },",
          "        TestInterval {",
          "            lower: TestBound(15),",
          "            upper: TestBound(20),",
          "        },",
          "    ]);",
          "    ",
          "    let interval_set_b = IntervalSet::new(vec![TestInterval {",
          "        lower: TestBound(10),",
          "        upper: TestBound(15),",
          "    }]);",
          "",
          "    interval_set_a.difference(&interval_set_b);",
          "    assert!(!interval_set_a.ranges.is_empty());",
          "    assert!(!interval_set_b.ranges.is_empty());",
          "    let drain_end = interval_set_a.ranges.len();",
          "    assert!(drain_end > 0);",
          "    assert!(interval_set_b.ranges.len() > 0);",
          "    assert!(interval_set_a.ranges[0].upper() == interval_set_b.ranges[0].lower());",
          "    assert!(interval_set_a.ranges[1].upper() == interval_set_b.ranges[1].lower());",
          "    assert!(!interval_set_a.ranges[0].is_intersection_empty(&interval_set_b.ranges[0]));",
          "    assert!(range_a.is_intersection_empty(&interval_set_b.ranges[0]) == false);",
          "    assert!(range_a.difference(&interval_set_b.ranges[0]) == (Some(TestInterval { lower: TestBound(5), upper: TestBound(9) }), None));",
          "    assert!(interval_set_b.ranges[0].upper() > old_range.upper());",
          "    assert!(a == drain_end);",
          "    assert!(a == drain_end);",
          "    assert!(!interval_set_a.folded);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, PartialOrd, Eq)]",
          "    struct TestBound(u32);",
          "",
          "    impl Bound for TestBound {",
          "        fn decrement(&self) -> Self {",
          "            TestBound(self.0 - 1)",
          "        }",
          "",
          "        fn increment(&self) -> Self {",
          "            TestBound(self.0 + 1)",
          "        }",
          "    }",
          "",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, PartialOrd, Eq)]",
          "    struct TestInterval {",
          "        lower: TestBound,",
          "        upper: TestBound,",
          "    }",
          "",
          "    impl Interval for TestInterval {",
          "        type Bound = TestBound;",
          "",
          "        fn lower(&self) -> Self::Bound {",
          "            self.lower",
          "        }",
          "",
          "        fn upper(&self) -> Self::Bound {",
          "            self.upper",
          "        }",
          "",
          "        fn set_lower(&mut self, bound: Self::Bound) {",
          "            self.lower = bound;",
          "        }",
          "",
          "        fn set_upper(&mut self, bound: Self::Bound) {",
          "            self.upper = bound;",
          "        }",
          "",
          "        fn case_fold_simple(&self, _intervals: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> {",
          "            Ok(())",
          "        }",
          "",
          "        fn is_contiguous(&self, other: &Self) -> bool {",
          "            self.upper >= other.lower && self.lower <= other.upper",
          "        }",
          "",
          "        fn is_intersection_empty(&self, other: &Self) -> bool {",
          "            self.upper < other.lower || self.lower > other.upper",
          "        }",
          "",
          "        fn is_subset(&self, other: &Self) -> bool {",
          "            self.lower >= other.lower && self.upper <= other.upper",
          "        }",
          "",
          "        fn difference(&self, other: &Self) -> (Option<Self>, Option<Self>) {",
          "            if self.is_subset(other) {",
          "                return (None, None);",
          "            }",
          "            let mut result = (None, None);",
          "            if other.lower > self.lower {",
          "                result.0 = Some(TestInterval {",
          "                    lower: self.lower,",
          "                    upper: other.lower.decrement(),",
          "                });",
          "            }",
          "            if other.upper < self.upper {",
          "                result.1 = Some(TestInterval {",
          "                    lower: other.upper.increment(),",
          "                    upper: self.upper,",
          "                });",
          "            }",
          "            result",
          "        }",
          "    }",
          "",
          "    let mut interval_set_a = IntervalSet::new(vec![TestInterval {",
          "        lower: TestBound(1),",
          "        upper: TestBound(5),",
          "    }]);",
          "    ",
          "    let interval_set_b = IntervalSet::new(vec![TestInterval {",
          "        lower: TestBound(6),",
          "        upper: TestBound(10),",
          "    }]);",
          "",
          "    interval_set_a.difference(&interval_set_b);",
          "}"
        ],
        "oracle": [
          "    assert!(!interval_set_a.ranges.is_empty());",
          "    assert!(!interval_set_b.ranges.is_empty());",
          "    let drain_end = interval_set_a.ranges.len();",
          "    let (a, b) = (0, 0);",
          "    assert!(a < drain_end);",
          "    assert!(b < interval_set_b.ranges.len());",
          "    assert_eq!(interval_set_b.ranges[b].upper(), interval_set_a.ranges[a].lower());",
          "    assert_eq!(interval_set_a.ranges[a].upper(), interval_set_b.ranges[b].lower());",
          "    assert!(!interval_set_a.ranges[a].is_intersection_empty(&interval_set_b.ranges[b]));",
          "    assert!(b < interval_set_b.ranges.len());",
          "    assert!(!range.is_intersection_empty(&interval_set_b.ranges[b]));",
          "    assert_eq!(range.difference(&interval_set_b.ranges[b]), (Some(TestInterval { lower: TestBound(1), upper: TestBound(5) }), None));",
          "    assert!(other.ranges[b].upper() > old_range.upper());",
          "    assert_eq!(a, drain_end);",
          "    assert_eq!(a, drain_end);",
          "    assert!(!self.folded);"
        ],
        "code": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, PartialOrd, Eq)]",
          "    struct TestBound(u32);",
          "",
          "    impl Bound for TestBound {",
          "        fn decrement(&self) -> Self {",
          "            TestBound(self.0 - 1)",
          "        }",
          "",
          "        fn increment(&self) -> Self {",
          "            TestBound(self.0 + 1)",
          "        }",
          "    }",
          "",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, PartialOrd, Eq)]",
          "    struct TestInterval {",
          "        lower: TestBound,",
          "        upper: TestBound,",
          "    }",
          "",
          "    impl Interval for TestInterval {",
          "        type Bound = TestBound;",
          "",
          "        fn lower(&self) -> Self::Bound {",
          "            self.lower",
          "        }",
          "",
          "        fn upper(&self) -> Self::Bound {",
          "            self.upper",
          "        }",
          "",
          "        fn set_lower(&mut self, bound: Self::Bound) {",
          "            self.lower = bound;",
          "        }",
          "",
          "        fn set_upper(&mut self, bound: Self::Bound) {",
          "            self.upper = bound;",
          "        }",
          "",
          "        fn case_fold_simple(&self, _intervals: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> {",
          "            Ok(())",
          "        }",
          "",
          "        fn is_contiguous(&self, other: &Self) -> bool {",
          "            self.upper >= other.lower && self.lower <= other.upper",
          "        }",
          "",
          "        fn is_intersection_empty(&self, other: &Self) -> bool {",
          "            self.upper < other.lower || self.lower > other.upper",
          "        }",
          "",
          "        fn is_subset(&self, other: &Self) -> bool {",
          "            self.lower >= other.lower && self.upper <= other.upper",
          "        }",
          "",
          "        fn difference(&self, other: &Self) -> (Option<Self>, Option<Self>) {",
          "            if self.is_subset(other) {",
          "                return (None, None);",
          "            }",
          "            let mut result = (None, None);",
          "            if other.lower > self.lower {",
          "                result.0 = Some(TestInterval {",
          "                    lower: self.lower,",
          "                    upper: other.lower.decrement(),",
          "                });",
          "            }",
          "            if other.upper < self.upper {",
          "                result.1 = Some(TestInterval {",
          "                    lower: other.upper.increment(),",
          "                    upper: self.upper,",
          "                });",
          "            }",
          "            result",
          "        }",
          "    }",
          "",
          "    let mut interval_set_a = IntervalSet::new(vec![TestInterval {",
          "        lower: TestBound(1),",
          "        upper: TestBound(5),",
          "    }]);",
          "    ",
          "    let interval_set_b = IntervalSet::new(vec![TestInterval {",
          "        lower: TestBound(6),",
          "        upper: TestBound(10),",
          "    }]);",
          "",
          "    interval_set_a.difference(&interval_set_b);",
          "    assert!(!interval_set_a.ranges.is_empty());",
          "    assert!(!interval_set_b.ranges.is_empty());",
          "    let drain_end = interval_set_a.ranges.len();",
          "    let (a, b) = (0, 0);",
          "    assert!(a < drain_end);",
          "    assert!(b < interval_set_b.ranges.len());",
          "    assert_eq!(interval_set_b.ranges[b].upper(), interval_set_a.ranges[a].lower());",
          "    assert_eq!(interval_set_a.ranges[a].upper(), interval_set_b.ranges[b].lower());",
          "    assert!(!interval_set_a.ranges[a].is_intersection_empty(&interval_set_b.ranges[b]));",
          "    assert!(b < interval_set_b.ranges.len());",
          "    assert!(!range.is_intersection_empty(&interval_set_b.ranges[b]));",
          "    assert_eq!(range.difference(&interval_set_b.ranges[b]), (Some(TestInterval { lower: TestBound(1), upper: TestBound(5) }), None));",
          "    assert!(other.ranges[b].upper() > old_range.upper());",
          "    assert_eq!(a, drain_end);",
          "    assert_eq!(a, drain_end);",
          "    assert!(!self.folded);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]