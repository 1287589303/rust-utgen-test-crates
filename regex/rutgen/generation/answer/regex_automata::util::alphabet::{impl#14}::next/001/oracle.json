[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct BitSet([bool; 256]);",
          "    impl BitSet {",
          "        fn contains(&self, byte: u8) -> bool {",
          "            let bucket = byte / 128;",
          "            let bit = byte % 128;",
          "            self.0[usize::from(bucket)] & (1 << bit) > 0",
          "        }",
          "    }",
          "",
          "    let mut bit_set = BitSet([false; 256]);",
          "    bit_set.0[1] = 0b11111111; // Set all bits for range 128 to 255",
          "",
          "    let byte_set = ByteSet {",
          "        bits: bit_set,",
          "    };",
          "",
          "    let mut iter = ByteSetRangeIter {",
          "        set: &byte_set,",
          "        b: 255,",
          "    };",
          "",
          "    let result = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some((255, 255)));",
          "    assert_eq!(iter.b, 256);"
        ],
        "code": [
          "{",
          "    struct BitSet([bool; 256]);",
          "    impl BitSet {",
          "        fn contains(&self, byte: u8) -> bool {",
          "            let bucket = byte / 128;",
          "            let bit = byte % 128;",
          "            self.0[usize::from(bucket)] & (1 << bit) > 0",
          "        }",
          "    }",
          "",
          "    let mut bit_set = BitSet([false; 256]);",
          "    bit_set.0[1] = 0b11111111; // Set all bits for range 128 to 255",
          "",
          "    let byte_set = ByteSet {",
          "        bits: bit_set,",
          "    };",
          "",
          "    let mut iter = ByteSetRangeIter {",
          "        set: &byte_set,",
          "        b: 255,",
          "    };",
          "",
          "    let result = iter.next();",
          "    assert_eq!(result, Some((255, 255)));",
          "    assert_eq!(iter.b, 256);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct BitSet([bool; 256]);",
          "    impl BitSet {",
          "        fn contains(&self, byte: u8) -> bool {",
          "            let bucket = byte / 128;",
          "            let bit = byte % 128;",
          "            self.0[usize::from(bucket)] & (1 << bit) > 0",
          "        }",
          "    }",
          "",
          "    let mut bit_set = BitSet([false; 256]);",
          "    bit_set.0[1] = 0b11111111; // Set all bits for range 128 to 255",
          "",
          "    let byte_set = ByteSet {",
          "        bits: bit_set,",
          "    };",
          "",
          "    let mut iter = ByteSetRangeIter {",
          "        set: &byte_set,",
          "        b: 255,",
          "    };",
          "",
          "    // Call next and unpack result",
          "    let result = iter.next();",
          "}"
        ],
        "oracle": [
          "    let expected = Some((255, 255));",
          "    assert_eq!(result, expected);",
          "    assert_eq!(iter.b, 256);",
          "    assert!(byte_set.contains(255));",
          "    assert!(!byte_set.contains(256));"
        ],
        "code": [
          "{",
          "    struct BitSet([bool; 256]);",
          "    impl BitSet {",
          "        fn contains(&self, byte: u8) -> bool {",
          "            let bucket = byte / 128;",
          "            let bit = byte % 128;",
          "            self.0[usize::from(bucket)] & (1 << bit) > 0",
          "        }",
          "    }",
          "",
          "    let mut bit_set = BitSet([false; 256]);",
          "    bit_set.0[1] = 0b11111111; // Set all bits for range 128 to 255",
          "",
          "    let byte_set = ByteSet {",
          "        bits: bit_set,",
          "    };",
          "",
          "    let mut iter = ByteSetRangeIter {",
          "        set: &byte_set,",
          "        b: 255,",
          "    };",
          "",
          "    // Call next and unpack result",
          "    let result = iter.next();",
          "    let expected = Some((255, 255));",
          "    assert_eq!(result, expected);",
          "    assert_eq!(iter.b, 256);",
          "    assert!(byte_set.contains(255));",
          "    assert!(!byte_set.contains(256));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]