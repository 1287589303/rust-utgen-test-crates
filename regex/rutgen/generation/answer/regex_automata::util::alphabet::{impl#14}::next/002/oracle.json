[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockBitSet {",
          "        bits: [bool; 256],",
          "    }",
          "",
          "    impl MockBitSet {",
          "        fn new() -> Self {",
          "            let mut bits = [false; 256];",
          "            for i in 0..255 {",
          "                bits[i] = true;",
          "            }",
          "            bits[255] = true; // contains 255",
          "            MockBitSet { bits }",
          "        }",
          "",
          "        fn contains(&self, byte: u8) -> bool {",
          "            self.bits[usize::from(byte)]",
          "        }",
          "    }",
          "",
          "    let bitset = MockBitSet::new();",
          "    let mut byte_set = ByteSet { bits: bitset };",
          "    let mut iter = ByteSetRangeIter { set: &byte_set, b: 255 };",
          "",
          "    let result = iter.next(); // expects Some((254, 255))",
          "",
          "    // function call only, no assert",
          "    let _ = result;",
          "}"
        ],
        "oracle": [
          "    let mock_bitset_new = MockBitSet::new();",
          "    let mock_bitset_contains_255 = mock_bitset_new.contains(255);",
          "    let byte_set_contains_255 = byte_set.contains(255);",
          "    let byte_set_iter_b_equals_255 = iter.b == 255;",
          "    let result_next = iter.next();",
          "    let expected_next_value = Some((254, 255));",
          "    assert_eq!(result_next, expected_next_value);"
        ],
        "code": [
          "{",
          "    struct MockBitSet {",
          "        bits: [bool; 256],",
          "    }",
          "",
          "    impl MockBitSet {",
          "        fn new() -> Self {",
          "            let mut bits = [false; 256];",
          "            for i in 0..255 {",
          "                bits[i] = true;",
          "            }",
          "            bits[255] = true; // contains 255",
          "            MockBitSet { bits }",
          "        }",
          "",
          "        fn contains(&self, byte: u8) -> bool {",
          "            self.bits[usize::from(byte)]",
          "        }",
          "    }",
          "",
          "    let bitset = MockBitSet::new();",
          "    let mut byte_set = ByteSet { bits: bitset };",
          "    let mut iter = ByteSetRangeIter { set: &byte_set, b: 255 };",
          "",
          "    let result = iter.next(); // expects Some((254, 255))",
          "",
          "    // function call only, no assert",
          "    let _ = result;",
          "    let mock_bitset_new = MockBitSet::new();",
          "    let mock_bitset_contains_255 = mock_bitset_new.contains(255);",
          "    let byte_set_contains_255 = byte_set.contains(255);",
          "    let byte_set_iter_b_equals_255 = iter.b == 255;",
          "    let result_next = iter.next();",
          "    let expected_next_value = Some((254, 255));",
          "    assert_eq!(result_next, expected_next_value);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockBitSet {",
          "        bits: [bool; 256],",
          "    }",
          "",
          "    impl MockBitSet {",
          "        fn new() -> Self {",
          "            let mut bits = [false; 256];",
          "            for i in 0..254 {",
          "                bits[i] = true; // contains 0-253",
          "            }",
          "            bits[255] = false; // does not contain 255",
          "            MockBitSet { bits }",
          "        }",
          "",
          "        fn contains(&self, byte: u8) -> bool {",
          "            self.bits[usize::from(byte)]",
          "        }",
          "    }",
          "",
          "    let bitset = MockBitSet::new();",
          "    let mut byte_set = ByteSet { bits: bitset };",
          "    let mut iter = ByteSetRangeIter { set: &byte_set, b: 255 };",
          "",
          "    let result = iter.next(); // expects Some((254, 255))",
          "",
          "    // function call only, no assert",
          "    let _ = result;",
          "}"
        ],
        "oracle": [
          "    let bitset = MockBitSet::new();",
          "    let mut byte_set = ByteSet { bits: bitset };",
          "    let mut iter = ByteSetRangeIter { set: &byte_set, b: 255 };",
          "    let result = iter.next();",
          "    assert_eq!(result, Some((254, 255)));",
          "    iter.b = 1;",
          "    let result = iter.next();",
          "    assert_eq!(result, Some((1, 253)));",
          "    iter.b = 255;",
          "    let result = iter.next();",
          "    assert_eq!(result, Some((254, 254)));",
          "    iter.b = 255;",
          "    let result = iter.next();",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    struct MockBitSet {",
          "        bits: [bool; 256],",
          "    }",
          "",
          "    impl MockBitSet {",
          "        fn new() -> Self {",
          "            let mut bits = [false; 256];",
          "            for i in 0..254 {",
          "                bits[i] = true; // contains 0-253",
          "            }",
          "            bits[255] = false; // does not contain 255",
          "            MockBitSet { bits }",
          "        }",
          "",
          "        fn contains(&self, byte: u8) -> bool {",
          "            self.bits[usize::from(byte)]",
          "        }",
          "    }",
          "",
          "    let bitset = MockBitSet::new();",
          "    let mut byte_set = ByteSet { bits: bitset };",
          "    let mut iter = ByteSetRangeIter { set: &byte_set, b: 255 };",
          "",
          "    let result = iter.next(); // expects Some((254, 255))",
          "",
          "    // function call only, no assert",
          "    let _ = result;",
          "    let bitset = MockBitSet::new();",
          "    let mut byte_set = ByteSet { bits: bitset };",
          "    let mut iter = ByteSetRangeIter { set: &byte_set, b: 255 };",
          "    let result = iter.next();",
          "    assert_eq!(result, Some((254, 255)));",
          "    iter.b = 1;",
          "    let result = iter.next();",
          "    assert_eq!(result, Some((1, 253)));",
          "    iter.b = 255;",
          "    let result = iter.next();",
          "    assert_eq!(result, Some((254, 254)));",
          "    iter.b = 255;",
          "    let result = iter.next();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]