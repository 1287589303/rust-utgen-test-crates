[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: 0, end: 0 };",
          "    let offset = 0;",
          "    span.contains(offset);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(span.is_empty(), true);",
          "    assert_eq!(span.contains(offset), false);",
          "    assert!(span.start > offset);",
          "    assert!(offset > span.end);"
        ],
        "code": [
          "{",
          "    let span = Span { start: 0, end: 0 };",
          "    let offset = 0;",
          "    span.contains(offset);",
          "    assert_eq!(span.is_empty(), true);",
          "    assert_eq!(span.contains(offset), false);",
          "    assert!(span.start > offset);",
          "    assert!(offset > span.end);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: 0, end: 0 };",
          "    let offset = 0;",
          "    span.contains(offset);",
          "}"
        ],
        "oracle": [
          "    assert!(span.is_empty());",
          "    assert_eq!(span.contains(offset), false);",
          "    assert!(span.start >= span.end);",
          "    assert!(span.start <= offset);",
          "    assert!(offset <= span.end);"
        ],
        "code": [
          "{",
          "    let span = Span { start: 0, end: 0 };",
          "    let offset = 0;",
          "    span.contains(offset);",
          "    assert!(span.is_empty());",
          "    assert_eq!(span.contains(offset), false);",
          "    assert!(span.start >= span.end);",
          "    assert!(span.start <= offset);",
          "    assert!(offset <= span.end);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: 0, end: 0 };",
          "    let offset = 0;",
          "    span.contains(offset);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(span.is_empty(), true);",
          "    assert_eq!(span.contains(offset), false);",
          "    assert!(span.contains(offset) == (offset >= span.start && offset < span.end));",
          "    assert!(span.contains(offset) == false);"
        ],
        "code": [
          "{",
          "    let span = Span { start: 0, end: 0 };",
          "    let offset = 0;",
          "    span.contains(offset);",
          "    assert_eq!(span.is_empty(), true);",
          "    assert_eq!(span.contains(offset), false);",
          "    assert!(span.contains(offset) == (offset >= span.start && offset < span.end));",
          "    assert!(span.contains(offset) == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: 0, end: 0 };",
          "    let offset = 1;",
          "    span.contains(offset);",
          "}"
        ],
        "oracle": [
          "    assert!(span.is_empty());",
          "    assert!(!span.contains(offset));"
        ],
        "code": [
          "{",
          "    let span = Span { start: 0, end: 0 };",
          "    let offset = 1;",
          "    span.contains(offset);",
          "    assert!(span.is_empty());",
          "    assert!(!span.contains(offset));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: 0, end: 0 };",
          "    let offset = usize::MAX;",
          "    span.contains(offset);",
          "}"
        ],
        "oracle": [
          "    assert!(span.is_empty());",
          "    assert!(span.contains(offset) == false);"
        ],
        "code": [
          "{",
          "    let span = Span { start: 0, end: 0 };",
          "    let offset = usize::MAX;",
          "    span.contains(offset);",
          "    assert!(span.is_empty());",
          "    assert!(span.contains(offset) == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]