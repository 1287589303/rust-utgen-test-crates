[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: 1, end: 5 };",
          "    let _ = span.contains(1);",
          "    let _ = span.contains(2);",
          "    let _ = span.contains(3);",
          "    let _ = span.contains(4);",
          "}"
        ],
        "oracle": [
          "    let span = Span { start: 1, end: 5 }; assert_eq!(span.contains(1), true);",
          "    let span = Span { start: 1, end: 5 }; assert_eq!(span.contains(2), true);",
          "    let span = Span { start: 1, end: 5 }; assert_eq!(span.contains(3), true);",
          "    let span = Span { start: 1, end: 5 }; assert_eq!(span.contains(4), true);",
          "    let span = Span { start: 1, end: 5 }; assert_eq!(span.contains(0), false);",
          "    let span = Span { start: 1, end: 5 }; assert_eq!(span.contains(5), false);",
          "    let span = Span { start: 3, end: 3 }; assert_eq!(span.contains(3), false);",
          "    let span = Span { start: 10, end: 15 }; assert_eq!(span.contains(5), false);",
          "    let span = Span { start: 5, end: 10 }; assert_eq!(span.contains(5), true);"
        ],
        "code": [
          "{",
          "    let span = Span { start: 1, end: 5 };",
          "    let _ = span.contains(1);",
          "    let _ = span.contains(2);",
          "    let _ = span.contains(3);",
          "    let _ = span.contains(4);",
          "    let span = Span { start: 1, end: 5 }; assert_eq!(span.contains(1), true);",
          "    let span = Span { start: 1, end: 5 }; assert_eq!(span.contains(2), true);",
          "    let span = Span { start: 1, end: 5 }; assert_eq!(span.contains(3), true);",
          "    let span = Span { start: 1, end: 5 }; assert_eq!(span.contains(4), true);",
          "    let span = Span { start: 1, end: 5 }; assert_eq!(span.contains(0), false);",
          "    let span = Span { start: 1, end: 5 }; assert_eq!(span.contains(5), false);",
          "    let span = Span { start: 3, end: 3 }; assert_eq!(span.contains(3), false);",
          "    let span = Span { start: 10, end: 15 }; assert_eq!(span.contains(5), false);",
          "    let span = Span { start: 5, end: 10 }; assert_eq!(span.contains(5), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: 5, end: 5 };",
          "    let _ = span.contains(5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(span.is_empty(), true);",
          "    assert_eq!(span.contains(5), false);",
          "    assert_eq!(span.contains(4), false);",
          "    assert_eq!(span.contains(6), false);"
        ],
        "code": [
          "{",
          "    let span = Span { start: 5, end: 5 };",
          "    let _ = span.contains(5);",
          "    assert_eq!(span.is_empty(), true);",
          "    assert_eq!(span.contains(5), false);",
          "    assert_eq!(span.contains(4), false);",
          "    assert_eq!(span.contains(6), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: 10, end: 15 };",
          "    let _ = span.contains(16);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(span.contains(16), false);"
        ],
        "code": [
          "{",
          "    let span = Span { start: 10, end: 15 };",
          "    let _ = span.contains(16);",
          "    assert_eq!(span.contains(16), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: 0, end: 0 };",
          "    let _ = span.contains(0);",
          "    let _ = span.contains(1);",
          "}"
        ],
        "oracle": [
          "    let span = Span { start: 0, end: 10 }; assert!(span.contains(0) == true);",
          "    let span = Span { start: 0, end: 10 }; assert!(span.contains(5) == true);",
          "    let span = Span { start: 0, end: 10 }; assert!(span.contains(10) == false);",
          "    let span = Span { start: 5, end: 10 }; assert!(span.contains(5) == true);",
          "    let span = Span { start: 5, end: 10 }; assert!(span.contains(0) == false);",
          "    let span = Span { start: 5, end: 10 }; assert!(span.contains(10) == false);",
          "    let span = Span { start: 1, end: 5 }; assert!(span.contains(3) == true);",
          "    let span = Span { start: 1, end: 5 }; assert!(span.contains(1) == true);",
          "    let span = Span { start: 1, end: 5 }; assert!(span.contains(5) == false);",
          "    let span = Span { start: 10, end: 10 }; assert!(span.contains(10) == false);",
          "    let span = Span { start: 1, end: 5 }; assert!(span.contains(0) == false);"
        ],
        "code": [
          "{",
          "    let span = Span { start: 0, end: 0 };",
          "    let _ = span.contains(0);",
          "    let _ = span.contains(1);",
          "    let span = Span { start: 0, end: 10 }; assert!(span.contains(0) == true);",
          "    let span = Span { start: 0, end: 10 }; assert!(span.contains(5) == true);",
          "    let span = Span { start: 0, end: 10 }; assert!(span.contains(10) == false);",
          "    let span = Span { start: 5, end: 10 }; assert!(span.contains(5) == true);",
          "    let span = Span { start: 5, end: 10 }; assert!(span.contains(0) == false);",
          "    let span = Span { start: 5, end: 10 }; assert!(span.contains(10) == false);",
          "    let span = Span { start: 1, end: 5 }; assert!(span.contains(3) == true);",
          "    let span = Span { start: 1, end: 5 }; assert!(span.contains(1) == true);",
          "    let span = Span { start: 1, end: 5 }; assert!(span.contains(5) == false);",
          "    let span = Span { start: 10, end: 10 }; assert!(span.contains(10) == false);",
          "    let span = Span { start: 1, end: 5 }; assert!(span.contains(0) == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: 100, end: 200 };",
          "    let _ = span.contains(99);",
          "}"
        ],
        "oracle": [
          "    assert!(!span.is_empty());",
          "    assert!(span.start <= 99);",
          "    assert!(99 <= span.end);",
          "    assert_eq!(span.contains(99), false);"
        ],
        "code": [
          "{",
          "    let span = Span { start: 100, end: 200 };",
          "    let _ = span.contains(99);",
          "    assert!(!span.is_empty());",
          "    assert!(span.start <= 99);",
          "    assert!(99 <= span.end);",
          "    assert_eq!(span.contains(99), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: 100, end: 200 };",
          "    let _ = span.contains(100);",
          "}"
        ],
        "oracle": [
          "    let span = Span { start: 100, end: 200 };",
          "    assert!(span.contains(100) == true);",
          "    let span = Span { start: 100, end: 200 };",
          "    assert!(span.contains(200) == false);",
          "    let span = Span { start: 100, end: 200 };",
          "    assert!(span.contains(99) == false);",
          "    let span = Span { start: 100, end: 100 };",
          "    assert!(span.contains(100) == false);",
          "    let span = Span { start: 200, end: 300 };",
          "    assert!(span.contains(200) == true);",
          "    let span = Span { start: 200, end: 300 };",
          "    assert!(span.contains(250) == true);",
          "    let span = Span { start: 200, end: 300 };",
          "    assert!(span.contains(300) == false);",
          "    let span = Span { start: 200, end: 300 };",
          "    assert!(span.contains(199) == false);",
          "    let span = Span { start: 150, end: 250 };",
          "    assert!(span.contains(150) == true);"
        ],
        "code": [
          "{",
          "    let span = Span { start: 100, end: 200 };",
          "    let _ = span.contains(100);",
          "    let span = Span { start: 100, end: 200 };",
          "    assert!(span.contains(100) == true);",
          "    let span = Span { start: 100, end: 200 };",
          "    assert!(span.contains(200) == false);",
          "    let span = Span { start: 100, end: 200 };",
          "    assert!(span.contains(99) == false);",
          "    let span = Span { start: 100, end: 100 };",
          "    assert!(span.contains(100) == false);",
          "    let span = Span { start: 200, end: 300 };",
          "    assert!(span.contains(200) == true);",
          "    let span = Span { start: 200, end: 300 };",
          "    assert!(span.contains(250) == true);",
          "    let span = Span { start: 200, end: 300 };",
          "    assert!(span.contains(300) == false);",
          "    let span = Span { start: 200, end: 300 };",
          "    assert!(span.contains(199) == false);",
          "    let span = Span { start: 150, end: 250 };",
          "    assert!(span.contains(150) == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: 100, end: 200 };",
          "    let _ = span.contains(200);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(span.contains(150), true);",
          "    assert_eq!(span.contains(100), true);",
          "    assert_eq!(span.contains(199), true);",
          "    assert_eq!(span.contains(99), false);",
          "    assert_eq!(span.contains(200), false);",
          "    assert_eq!(span.is_empty(), false);",
          "    assert_eq!(span.len(), 100);",
          "    assert_eq!(span.range(), 100..200);"
        ],
        "code": [
          "{",
          "    let span = Span { start: 100, end: 200 };",
          "    let _ = span.contains(200);",
          "    assert_eq!(span.contains(150), true);",
          "    assert_eq!(span.contains(100), true);",
          "    assert_eq!(span.contains(199), true);",
          "    assert_eq!(span.contains(99), false);",
          "    assert_eq!(span.contains(200), false);",
          "    assert_eq!(span.is_empty(), false);",
          "    assert_eq!(span.len(), 100);",
          "    assert_eq!(span.range(), 100..200);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: 100, end: 200 };",
          "    let _ = span.contains(201);",
          "}"
        ],
        "oracle": [
          "    assert!(!span.is_empty());",
          "    assert!(span.start <= 201);",
          "    assert!(201 <= span.end);",
          "    assert_eq!(span.contains(201), false);",
          "    assert_eq!(span.contains(100), true);",
          "    assert_eq!(span.contains(150), true);",
          "    assert_eq!(span.contains(99), false);"
        ],
        "code": [
          "{",
          "    let span = Span { start: 100, end: 200 };",
          "    let _ = span.contains(201);",
          "    assert!(!span.is_empty());",
          "    assert!(span.start <= 201);",
          "    assert!(201 <= span.end);",
          "    assert_eq!(span.contains(201), false);",
          "    assert_eq!(span.contains(100), true);",
          "    assert_eq!(span.contains(150), true);",
          "    assert_eq!(span.contains(99), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]