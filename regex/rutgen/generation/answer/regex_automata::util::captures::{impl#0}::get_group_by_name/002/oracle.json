[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::new(vec![Some(\"first\"), Some(\"last\")]).unwrap();",
          "    let captures = Captures {",
          "        group_info,",
          "        pid: Some(PatternID(SmallIndex(0))),",
          "        slots: vec![Some(NonMaxUsize::new(0).unwrap()), Some(NonMaxUsize::new(5).unwrap())],",
          "    };",
          "    let result = captures.get_group_by_name(\"middle\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::new(vec![Some(\"first\"), Some(\"last\")]).unwrap();",
          "    let captures = Captures {",
          "        group_info,",
          "        pid: Some(PatternID(SmallIndex(0))),",
          "        slots: vec![Some(NonMaxUsize::new(0).unwrap()), Some(NonMaxUsize::new(5).unwrap())],",
          "    };",
          "    let result = captures.get_group_by_name(\"middle\");",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::new(vec![Some(\"first\"), Some(\"last\")]).unwrap();",
          "    let captures = Captures {",
          "        group_info,",
          "        pid: Some(PatternID(SmallIndex(0))),",
          "        slots: vec![Some(NonMaxUsize::new(0).unwrap()), Some(NonMaxUsize::new(5).unwrap())],",
          "    };",
          "    let result_first = captures.get_group_by_name(\"first\");",
          "    let result_last = captures.get_group_by_name(\"last\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Some(Span { start: 0, end: 5 }), result_first);",
          "    assert_eq!(Some(Span { start: 5, end: 17 }), result_last);",
          "    assert_eq!(None, captures.get_group_by_name(\"middle\"));"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::new(vec![Some(\"first\"), Some(\"last\")]).unwrap();",
          "    let captures = Captures {",
          "        group_info,",
          "        pid: Some(PatternID(SmallIndex(0))),",
          "        slots: vec![Some(NonMaxUsize::new(0).unwrap()), Some(NonMaxUsize::new(5).unwrap())],",
          "    };",
          "    let result_first = captures.get_group_by_name(\"first\");",
          "    let result_last = captures.get_group_by_name(\"last\");",
          "    assert_eq!(Some(Span { start: 0, end: 5 }), result_first);",
          "    assert_eq!(Some(Span { start: 5, end: 17 }), result_last);",
          "    assert_eq!(None, captures.get_group_by_name(\"middle\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::empty();",
          "    let captures = Captures {",
          "        group_info,",
          "        pid: None,",
          "        slots: Vec::new(),",
          "    };",
          "    let result = captures.get_group_by_name(\"first\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::empty();",
          "    let captures = Captures {",
          "        group_info,",
          "        pid: None,",
          "        slots: Vec::new(),",
          "    };",
          "    let result = captures.get_group_by_name(\"first\");",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]