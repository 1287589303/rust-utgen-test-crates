[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut input = Input::new(&b\"foobar\"[..]);",
          "    input.set_span(6..6);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(input.get_range(), 6..6);",
          "    assert!(input.get_span().start == 6);",
          "    assert!(input.get_span().end == 6);",
          "    assert!(input.is_done());",
          "    assert!(input.haystack() == b\"foobar\");"
        ],
        "code": [
          "{",
          "    let mut input = Input::new(&b\"foobar\"[..]);",
          "    input.set_span(6..6);",
          "    assert_eq!(input.get_range(), 6..6);",
          "    assert!(input.get_span().start == 6);",
          "    assert!(input.get_span().end == 6);",
          "    assert!(input.is_done());",
          "    assert!(input.haystack() == b\"foobar\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut input = Input::new(&b\"foobar\"[..]);",
          "    input.set_span(5..6);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(input.get_span(), Span { start: 5, end: 6 });",
          "    assert!(input.is_done());",
          "    assert!(input.is_char_boundary(5));",
          "    assert!(!input.is_char_boundary(4));",
          "    assert_eq!(input.get_range(), 5..6);"
        ],
        "code": [
          "{",
          "    let mut input = Input::new(&b\"foobar\"[..]);",
          "    input.set_span(5..6);",
          "    assert_eq!(input.get_span(), Span { start: 5, end: 6 });",
          "    assert!(input.is_done());",
          "    assert!(input.is_char_boundary(5));",
          "    assert!(!input.is_char_boundary(4));",
          "    assert_eq!(input.get_range(), 5..6);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut input = Input::new(&b\"foobar\"[..]);",
          "    input.set_span(6..7);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(input.get_range(), 6..7);",
          "    assert_eq!(input.get_span(), Span { start: 6, end: 7 });",
          "    assert!(!input.is_done());",
          "    assert!(input.is_char_boundary(6));"
        ],
        "code": [
          "{",
          "    let mut input = Input::new(&b\"foobar\"[..]);",
          "    input.set_span(6..7);",
          "    assert_eq!(input.get_range(), 6..7);",
          "    assert_eq!(input.get_span(), Span { start: 6, end: 7 });",
          "    assert!(!input.is_done());",
          "    assert!(input.is_char_boundary(6));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]