[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer = String::new();",
          "    let mut writer = Writer { wtr: &mut buffer };",
          "    let ast = ast::RepetitionRange::Bounded(0, 0);",
          "    writer.fmt_repetition_range(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    let mut buffer = String::new();",
          "    let mut writer = Writer { wtr: &mut buffer };",
          "    let ast = ast::RepetitionRange::Bounded(0, 0);",
          "    writer.fmt_repetition_range(&ast).unwrap();",
          "    assert_eq!(buffer, \"{{0,0}}\");",
          "    ",
          "    buffer.clear();",
          "    let ast = ast::RepetitionRange::Bounded(1, 5);",
          "    writer.fmt_repetition_range(&ast).unwrap();",
          "    assert_eq!(buffer, \"{{1,5}}\");",
          "    ",
          "    buffer.clear();",
          "    let ast = ast::RepetitionRange::Bounded(2, 10);",
          "    writer.fmt_repetition_range(&ast).unwrap();",
          "    assert_eq!(buffer, \"{{2,10}}\");"
        ],
        "code": [
          "{",
          "    let mut buffer = String::new();",
          "    let mut writer = Writer { wtr: &mut buffer };",
          "    let ast = ast::RepetitionRange::Bounded(0, 0);",
          "    writer.fmt_repetition_range(&ast).unwrap();",
          "    let mut buffer = String::new();",
          "    let mut writer = Writer { wtr: &mut buffer };",
          "    let ast = ast::RepetitionRange::Bounded(0, 0);",
          "    writer.fmt_repetition_range(&ast).unwrap();",
          "    assert_eq!(buffer, \"{{0,0}}\");",
          "    ",
          "    buffer.clear();",
          "    let ast = ast::RepetitionRange::Bounded(1, 5);",
          "    writer.fmt_repetition_range(&ast).unwrap();",
          "    assert_eq!(buffer, \"{{1,5}}\");",
          "    ",
          "    buffer.clear();",
          "    let ast = ast::RepetitionRange::Bounded(2, 10);",
          "    writer.fmt_repetition_range(&ast).unwrap();",
          "    assert_eq!(buffer, \"{{2,10}}\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer = String::new();",
          "    let mut writer = Writer { wtr: &mut buffer };",
          "    let ast = ast::RepetitionRange::Bounded(0, 10);",
          "    writer.fmt_repetition_range(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer, \"{{0,10}}\");"
        ],
        "code": [
          "{",
          "    let mut buffer = String::new();",
          "    let mut writer = Writer { wtr: &mut buffer };",
          "    let ast = ast::RepetitionRange::Bounded(0, 10);",
          "    writer.fmt_repetition_range(&ast).unwrap();",
          "    assert_eq!(buffer, \"{{0,10}}\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer = String::new();",
          "    let mut writer = Writer { wtr: &mut buffer };",
          "    let ast = ast::RepetitionRange::Bounded(1, 1);",
          "    writer.fmt_repetition_range(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    write!(self.wtr, \"{{1,1}}\") == Ok(())",
          "    assert_eq!(buffer, \"{{1,1}}\")"
        ],
        "code": [
          "{",
          "    let mut buffer = String::new();",
          "    let mut writer = Writer { wtr: &mut buffer };",
          "    let ast = ast::RepetitionRange::Bounded(1, 1);",
          "    writer.fmt_repetition_range(&ast).unwrap();",
          "    write!(self.wtr, \"{{1,1}}\") == Ok(())",
          "    assert_eq!(buffer, \"{{1,1}}\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer = String::new();",
          "    let mut writer = Writer { wtr: &mut buffer };",
          "    let ast = ast::RepetitionRange::Bounded(2, 3);",
          "    writer.fmt_repetition_range(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    write!(self.wtr, \"{{{},{}}}\", 2, 3) == Ok(())",
          "    buffer == \"{{2,3}}\""
        ],
        "code": [
          "{",
          "    let mut buffer = String::new();",
          "    let mut writer = Writer { wtr: &mut buffer };",
          "    let ast = ast::RepetitionRange::Bounded(2, 3);",
          "    writer.fmt_repetition_range(&ast).unwrap();",
          "    write!(self.wtr, \"{{{},{}}}\", 2, 3) == Ok(())",
          "    buffer == \"{{2,3}}\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer = String::new();",
          "    let mut writer = Writer { wtr: &mut buffer };",
          "    let ast = ast::RepetitionRange::Bounded(10, 10);",
          "    writer.fmt_repetition_range(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    writer.wtr.should_equal(\"{{10,10}}\")"
        ],
        "code": [
          "{",
          "    let mut buffer = String::new();",
          "    let mut writer = Writer { wtr: &mut buffer };",
          "    let ast = ast::RepetitionRange::Bounded(10, 10);",
          "    writer.fmt_repetition_range(&ast).unwrap();",
          "    writer.wtr.should_equal(\"{{10,10}}\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]