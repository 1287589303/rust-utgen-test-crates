[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = \"Hello, world!\";",
          "    let start = 0;",
          "    let end = haystack.len();",
          "    let m = Match::new(haystack, start, end);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(m.haystack, \"Hello, world!\");",
          "    assert_eq!(m.start(), 0);",
          "    assert_eq!(m.end(), haystack.len());",
          "    assert!(!m.is_empty());",
          "    assert_eq!(m.len(), haystack.len());",
          "    assert_eq!(m.range(), 0..haystack.len());",
          "    assert_eq!(m.as_str(), \"Hello, world!\");"
        ],
        "code": [
          "{",
          "    let haystack = \"Hello, world!\";",
          "    let start = 0;",
          "    let end = haystack.len();",
          "    let m = Match::new(haystack, start, end);",
          "    assert_eq!(m.haystack, \"Hello, world!\");",
          "    assert_eq!(m.start(), 0);",
          "    assert_eq!(m.end(), haystack.len());",
          "    assert!(!m.is_empty());",
          "    assert_eq!(m.len(), haystack.len());",
          "    assert_eq!(m.range(), 0..haystack.len());",
          "    assert_eq!(m.as_str(), \"Hello, world!\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = \"Test string\";",
          "    let start = 5;",
          "    let end = start;",
          "    let m = Match::new(haystack, start, end);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(m.haystack, \"Test string\");",
          "    assert_eq!(m.start(), 5);",
          "    assert_eq!(m.end(), 5);",
          "    assert!(m.is_empty());",
          "    assert_eq!(m.len(), 0);",
          "    assert_eq!(m.range(), 5..5);",
          "    assert_eq!(m.as_str(), \"\");"
        ],
        "code": [
          "{",
          "    let haystack = \"Test string\";",
          "    let start = 5;",
          "    let end = start;",
          "    let m = Match::new(haystack, start, end);",
          "    assert_eq!(m.haystack, \"Test string\");",
          "    assert_eq!(m.start(), 5);",
          "    assert_eq!(m.end(), 5);",
          "    assert!(m.is_empty());",
          "    assert_eq!(m.len(), 0);",
          "    assert_eq!(m.range(), 5..5);",
          "    assert_eq!(m.as_str(), \"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = \"Another test\";",
          "    let start = 8;",
          "    let end = 5; // intentionally invalid",
          "    let m = Match::new(haystack, start, end);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(m.haystack, \"Another test\");",
          "    assert_eq!(m.start(), 8);",
          "    assert_eq!(m.end(), 5);",
          "    assert!(m.is_empty());",
          "    assert_eq!(m.len(), 0);",
          "    assert_eq!(m.range(), 8..5);",
          "    assert_eq!(m.as_str(), \"\");"
        ],
        "code": [
          "{",
          "    let haystack = \"Another test\";",
          "    let start = 8;",
          "    let end = 5; // intentionally invalid",
          "    let m = Match::new(haystack, start, end);",
          "    assert_eq!(m.haystack, \"Another test\");",
          "    assert_eq!(m.start(), 8);",
          "    assert_eq!(m.end(), 5);",
          "    assert!(m.is_empty());",
          "    assert_eq!(m.len(), 0);",
          "    assert_eq!(m.range(), 8..5);",
          "    assert_eq!(m.as_str(), \"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = \"Boundary test\";",
          "    let start = haystack.len();",
          "    let end = start;",
          "    let m = Match::new(haystack, start, end);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(m.haystack, haystack);",
          "    assert_eq!(m.start(), start);",
          "    assert_eq!(m.end(), end);",
          "    assert!(m.is_empty());",
          "    assert_eq!(m.len(), 0);",
          "    assert_eq!(m.range(), start..end);",
          "    assert_eq!(m.as_str(), \"\");"
        ],
        "code": [
          "{",
          "    let haystack = \"Boundary test\";",
          "    let start = haystack.len();",
          "    let end = start;",
          "    let m = Match::new(haystack, start, end);",
          "    assert_eq!(m.haystack, haystack);",
          "    assert_eq!(m.start(), start);",
          "    assert_eq!(m.end(), end);",
          "    assert!(m.is_empty());",
          "    assert_eq!(m.len(), 0);",
          "    assert_eq!(m.range(), start..end);",
          "    assert_eq!(m.as_str(), \"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = \"Another boundary\";",
          "    let start = 0;",
          "    let end = haystack.len();",
          "    let m = Match::new(haystack, start, end);",
          "}"
        ],
        "oracle": [
          "    m.haystack == \"Another boundary\"",
          "    m.start() == 0",
          "    m.end() == haystack.len()",
          "    m.is_empty() == false",
          "    m.len() == end - start",
          "    m.range() == 0..end",
          "    m.as_str() == \"Another boundary\""
        ],
        "code": [
          "{",
          "    let haystack = \"Another boundary\";",
          "    let start = 0;",
          "    let end = haystack.len();",
          "    let m = Match::new(haystack, start, end);",
          "    m.haystack == \"Another boundary\"",
          "    m.start() == 0",
          "    m.end() == haystack.len()",
          "    m.is_empty() == false",
          "    m.len() == end - start",
          "    m.range() == 0..end",
          "    m.as_str() == \"Another boundary\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = \"\";",
          "    let start = 0;",
          "    let end = 0;",
          "    let m = Match::new(haystack, start, end);",
          "}"
        ],
        "oracle": [
          "    m.haystack == \"\"",
          "    m.start() == 0",
          "    m.end() == 0",
          "    m.is_empty() == true",
          "    m.len() == 0",
          "    m.range() == 0..0",
          "    m.as_str() == \"\""
        ],
        "code": [
          "{",
          "    let haystack = \"\";",
          "    let start = 0;",
          "    let end = 0;",
          "    let m = Match::new(haystack, start, end);",
          "    m.haystack == \"\"",
          "    m.start() == 0",
          "    m.end() == 0",
          "    m.is_empty() == true",
          "    m.len() == 0",
          "    m.range() == 0..0",
          "    m.as_str() == \"\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]