[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let normalized_value = \"some_script_value\";",
          "    let result = canonical_script(normalized_value);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Error::PropertyValueNotFound));"
        ],
        "code": [
          "{",
          "    let normalized_value = \"some_script_value\";",
          "    let result = canonical_script(normalized_value);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Error::PropertyValueNotFound));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let normalized_value = \"\";",
          "    let result = canonical_script(normalized_value);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err() || result.is_none());"
        ],
        "code": [
          "{",
          "    let normalized_value = \"\";",
          "    let result = canonical_script(normalized_value);",
          "    assert!(result.is_err() || result.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let normalized_value = \"invalid_script\";",
          "    let result = canonical_script(normalized_value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(Error::PropertyValueNotFound));",
          "    assert!(result.is_err());",
          "    assert!(matches!(result, Err(Error::PropertyValueNotFound)));",
          "    assert!(result.is_none());",
          "    assert!(result.unwrap_err() == Error::PropertyValueNotFound);"
        ],
        "code": [
          "{",
          "    let normalized_value = \"invalid_script\";",
          "    let result = canonical_script(normalized_value);",
          "    assert_eq!(result, Err(Error::PropertyValueNotFound));",
          "    assert!(result.is_err());",
          "    assert!(matches!(result, Err(Error::PropertyValueNotFound)));",
          "    assert!(result.is_none());",
          "    assert!(result.unwrap_err() == Error::PropertyValueNotFound);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let normalized_value = \"totally_not_a_script\";",
          "    let result = canonical_script(normalized_value);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Error::PropertyNotFound));",
          "    assert!(result.is_ok() == false);",
          "    assert!(result.unwrap_err() == Error::PropertyNotFound);",
          "    assert!(result == Err(Error::PropertyValueNotFound));",
          "    assert!(result.is_none());"
        ],
        "code": [
          "{",
          "    let normalized_value = \"totally_not_a_script\";",
          "    let result = canonical_script(normalized_value);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Error::PropertyNotFound));",
          "    assert!(result.is_ok() == false);",
          "    assert!(result.unwrap_err() == Error::PropertyNotFound);",
          "    assert!(result == Err(Error::PropertyValueNotFound));",
          "    assert!(result.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]