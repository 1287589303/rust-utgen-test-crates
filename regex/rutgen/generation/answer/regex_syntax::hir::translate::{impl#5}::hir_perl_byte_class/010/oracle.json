[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        flags: Flags,",
          "        translator: Translator,",
          "    }",
          "",
          "    impl Visitor for TestVisitor {",
          "        type Output = ();",
          "        type Err = Error;",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(())",
          "        }",
          "",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let flags = Flags { unicode: Some(false), ..Flags::default() };",
          "    let translator = Translator { flags: Cell::new(flags), utf8: false, stack: RefCell::new(vec![]), line_terminator: b'\\n' };",
          "",
          "    let ast_class = ast::ClassPerl { ",
          "        span: Span { start: 0, end: 1 }, ",
          "        kind: ast::ClassPerlKind::Space, ",
          "        negated: true ",
          "    };",
          "",
          "    let translator_i = TranslatorI::new(&translator, \"pattern\");",
          "",
          "    let _ = translator_i.hir_perl_byte_class(&ast_class);",
          "}"
        ],
        "oracle": [
          "    assert!(!self.flags().unicode());",
          "    let ast_class = ast::ClassPerl { span: Span { start: 0, end: 1 }, kind: ast::ClassPerlKind::Space, negated: true };",
          "    self.trans().utf8 == false;",
          "    let result = translator_i.hir_perl_byte_class(&ast_class);",
          "    assert_eq!(result.is_ok(), true);"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        flags: Flags,",
          "        translator: Translator,",
          "    }",
          "",
          "    impl Visitor for TestVisitor {",
          "        type Output = ();",
          "        type Err = Error;",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(())",
          "        }",
          "",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let flags = Flags { unicode: Some(false), ..Flags::default() };",
          "    let translator = Translator { flags: Cell::new(flags), utf8: false, stack: RefCell::new(vec![]), line_terminator: b'\\n' };",
          "",
          "    let ast_class = ast::ClassPerl { ",
          "        span: Span { start: 0, end: 1 }, ",
          "        kind: ast::ClassPerlKind::Space, ",
          "        negated: true ",
          "    };",
          "",
          "    let translator_i = TranslatorI::new(&translator, \"pattern\");",
          "",
          "    let _ = translator_i.hir_perl_byte_class(&ast_class);",
          "    assert!(!self.flags().unicode());",
          "    let ast_class = ast::ClassPerl { span: Span { start: 0, end: 1 }, kind: ast::ClassPerlKind::Space, negated: true };",
          "    self.trans().utf8 == false;",
          "    let result = translator_i.hir_perl_byte_class(&ast_class);",
          "    assert_eq!(result.is_ok(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]