[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        translator: Translator,",
          "        span: Span,",
          "    }",
          "",
          "    impl Visitor for TestVisitor {",
          "        type Output = ();",
          "        type Err = Error;",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(())",
          "        }",
          "",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            case_insensitive: None,",
          "            multi_line: None,",
          "            dot_matches_new_line: None,",
          "            swap_greed: None,",
          "            unicode: Some(false),",
          "            crlf: None,",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let span = Span { start: Position::default(), end: Position::default() };",
          "    ",
          "    let ast_class = ClassPerl {",
          "        span,",
          "        kind: ClassPerlKind::Digit,",
          "        negated: false,",
          "    };",
          "",
          "    let visitor = TestVisitor { translator, span };",
          "    let result = visitor.translator.hir_perl_byte_class(&ast_class);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(visitor.translator.error(span, ErrorKind::InvalidUtf8)));"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        translator: Translator,",
          "        span: Span,",
          "    }",
          "",
          "    impl Visitor for TestVisitor {",
          "        type Output = ();",
          "        type Err = Error;",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(())",
          "        }",
          "",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            case_insensitive: None,",
          "            multi_line: None,",
          "            dot_matches_new_line: None,",
          "            swap_greed: None,",
          "            unicode: Some(false),",
          "            crlf: None,",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let span = Span { start: Position::default(), end: Position::default() };",
          "    ",
          "    let ast_class = ClassPerl {",
          "        span,",
          "        kind: ClassPerlKind::Digit,",
          "        negated: false,",
          "    };",
          "",
          "    let visitor = TestVisitor { translator, span };",
          "    let result = visitor.translator.hir_perl_byte_class(&ast_class);",
          "    assert_eq!(result, Err(visitor.translator.error(span, ErrorKind::InvalidUtf8)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]