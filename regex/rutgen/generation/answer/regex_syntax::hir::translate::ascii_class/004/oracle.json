[
  {
    "uses": [
      "use crate::ast::ClassAsciiKind;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "",
          "    let kind = ClassAsciiKind::Space;",
          "    let result = ascii_class(&kind).collect::<Vec<(u8, u8)>>();",
          "    // Call result here for testing purposes",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, vec![(b'\\t', b'\\t'), (b'\\n', b'\\n'), (b'\\x0B', b'\\x0B'), (b'\\x0C', b'\\x0C'), (b'\\r', b'\\r'), (b' ', b' ')]);"
        ],
        "code": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "",
          "    let kind = ClassAsciiKind::Space;",
          "    let result = ascii_class(&kind).collect::<Vec<(u8, u8)>>();",
          "    // Call result here for testing purposes",
          "    assert_eq!(result, vec![(b'\\t', b'\\t'), (b'\\n', b'\\n'), (b'\\x0B', b'\\x0B'), (b'\\x0C', b'\\x0C'), (b'\\r', b'\\r'), (b' ', b' ')]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "",
          "    let kind = ClassAsciiKind::Space;",
          "    let result = ascii_class(&kind).collect::<Vec<(u8, u8)>>();",
          "    // Call result here for testing purposes",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, vec![(b'\\t', b'\\t'), (b'\\n', b'\\n'), (b'\\x0B', b'\\x0B'), (b'\\x0C', b'\\x0C'), (b'\\r', b'\\r'), (b' ', b' ')]);"
        ],
        "code": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "",
          "    let kind = ClassAsciiKind::Space;",
          "    let result = ascii_class(&kind).collect::<Vec<(u8, u8)>>();",
          "    // Call result here for testing purposes",
          "    assert_eq!(result, vec![(b'\\t', b'\\t'), (b'\\n', b'\\n'), (b'\\x0B', b'\\x0B'), (b'\\x0C', b'\\x0C'), (b'\\r', b'\\r'), (b' ', b' ')]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]