[
  {
    "uses": [
      "use crate::ast::ClassAsciiKind;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "    ",
          "    let kind = ClassAsciiKind::Xdigit;",
          "    let iterator = ascii_class(&kind);",
          "    let result: Vec<(u8, u8)> = iterator.collect();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, vec![(b'0', b'9'), (b'A', b'F'), (b'a', b'f')]);"
        ],
        "code": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "    ",
          "    let kind = ClassAsciiKind::Xdigit;",
          "    let iterator = ascii_class(&kind);",
          "    let result: Vec<(u8, u8)> = iterator.collect();",
          "    assert_eq!(result, vec![(b'0', b'9'), (b'A', b'F'), (b'a', b'f')]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "    ",
          "    let kind = ClassAsciiKind::Xdigit;",
          "    let iterator = ascii_class(&kind);",
          "    let result: Vec<(u8, u8)> = iterator.collect();",
          "}"
        ],
        "oracle": [
          "    let expected_result = vec![(b'0', b'9'), (b'A', b'F'), (b'a', b'f')];",
          "    assert_eq!(result, expected_result);"
        ],
        "code": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "    ",
          "    let kind = ClassAsciiKind::Xdigit;",
          "    let iterator = ascii_class(&kind);",
          "    let result: Vec<(u8, u8)> = iterator.collect();",
          "    let expected_result = vec![(b'0', b'9'), (b'A', b'F'), (b'a', b'f')];",
          "    assert_eq!(result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]