[
  {
    "uses": [
      "use crate::ast::ClassAsciiKind;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "    ",
          "    let kind = ClassAsciiKind::Print;",
          "    let result: Vec<(u8, u8)> = ascii_class(&kind).collect();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, vec![(b' ', b'~')]);"
        ],
        "code": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "    ",
          "    let kind = ClassAsciiKind::Print;",
          "    let result: Vec<(u8, u8)> = ascii_class(&kind).collect();",
          "    assert_eq!(result, vec![(b' ', b'~')]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "    ",
          "    let kind = ClassAsciiKind::Alnum;",
          "    let result: Vec<(u8, u8)> = ascii_class(&kind).collect();",
          "}"
        ],
        "oracle": [
          "    let kind = ClassAsciiKind::Alnum;",
          "    let expected_result = vec![(b'0', b'9'), (b'A', b'Z'), (b'a', b'z')];",
          "    assert_eq!(result, expected_result);",
          "    ",
          "    let kind = ClassAsciiKind::Alpha;",
          "    let expected_result = vec![(b'A', b'Z'), (b'a', b'z')];",
          "    assert_eq!(result, expected_result);",
          "    ",
          "    let kind = ClassAsciiKind::Ascii;",
          "    let expected_result = vec![(b'\\x00', b'\\x7F')];",
          "    assert_eq!(result, expected_result);",
          "    ",
          "    let kind = ClassAsciiKind::Blank;",
          "    let expected_result = vec![(b'\\t', b'\\t'), (b' ', b' ')];",
          "    assert_eq!(result, expected_result);",
          "    ",
          "    let kind = ClassAsciiKind::Cntrl;",
          "    let expected_result = vec![(b'\\x00', b'\\x1F'), (b'\\x7F', b'\\x7F')];",
          "    assert_eq!(result, expected_result);",
          "    ",
          "    let kind = ClassAsciiKind::Digit;",
          "    let expected_result = vec![(b'0', b'9')];",
          "    assert_eq!(result, expected_result);",
          "    ",
          "    let kind = ClassAsciiKind::Graph;",
          "    let expected_result = vec![(b'!', b'~')];",
          "    assert_eq!(result, expected_result);",
          "    ",
          "    let kind = ClassAsciiKind::Lower;",
          "    let expected_result = vec![(b'a', b'z')];",
          "    assert_eq!(result, expected_result);",
          "    ",
          "    let kind = ClassAsciiKind::Print;",
          "    let expected_result = vec![(b' ', b'~')];",
          "    assert_eq!(result, expected_result);",
          "    ",
          "    let kind = ClassAsciiKind::Punct;",
          "    let expected_result = vec![(b'!', b'/'), (b':', b'@'), (b'[', b'`'), (b'{', b'~')];",
          "    assert_eq!(result, expected_result);",
          "    ",
          "    let kind = ClassAsciiKind::Space;",
          "    let expected_result = vec![(b'\\t', b'\\t'), (b'\\n', b'\\n'), (b'\\x0B', b'\\x0B'), (b'\\x0C', b'\\x0C'), (b'\\r', b'\\r'), (b' ', b' ')];",
          "    assert_eq!(result, expected_result);",
          "    ",
          "    let kind = ClassAsciiKind::Upper;",
          "    let expected_result = vec![(b'A', b'Z')];",
          "    assert_eq!(result, expected_result);",
          "    ",
          "    let kind = ClassAsciiKind::Word;",
          "    let expected_result = vec![(b'0', b'9'), (b'A', b'Z'), (b'_', b'_'), (b'a', b'z')];",
          "    assert_eq!(result, expected_result);",
          "    ",
          "    let kind = ClassAsciiKind::Xdigit;",
          "    let expected_result = vec![(b'0', b'9'), (b'A', b'F'), (b'a', b'f')];",
          "    assert_eq!(result, expected_result);"
        ],
        "code": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "    ",
          "    let kind = ClassAsciiKind::Alnum;",
          "    let result: Vec<(u8, u8)> = ascii_class(&kind).collect();",
          "    let kind = ClassAsciiKind::Alnum;",
          "    let expected_result = vec![(b'0', b'9'), (b'A', b'Z'), (b'a', b'z')];",
          "    assert_eq!(result, expected_result);",
          "    ",
          "    let kind = ClassAsciiKind::Alpha;",
          "    let expected_result = vec![(b'A', b'Z'), (b'a', b'z')];",
          "    assert_eq!(result, expected_result);",
          "    ",
          "    let kind = ClassAsciiKind::Ascii;",
          "    let expected_result = vec![(b'\\x00', b'\\x7F')];",
          "    assert_eq!(result, expected_result);",
          "    ",
          "    let kind = ClassAsciiKind::Blank;",
          "    let expected_result = vec![(b'\\t', b'\\t'), (b' ', b' ')];",
          "    assert_eq!(result, expected_result);",
          "    ",
          "    let kind = ClassAsciiKind::Cntrl;",
          "    let expected_result = vec![(b'\\x00', b'\\x1F'), (b'\\x7F', b'\\x7F')];",
          "    assert_eq!(result, expected_result);",
          "    ",
          "    let kind = ClassAsciiKind::Digit;",
          "    let expected_result = vec![(b'0', b'9')];",
          "    assert_eq!(result, expected_result);",
          "    ",
          "    let kind = ClassAsciiKind::Graph;",
          "    let expected_result = vec![(b'!', b'~')];",
          "    assert_eq!(result, expected_result);",
          "    ",
          "    let kind = ClassAsciiKind::Lower;",
          "    let expected_result = vec![(b'a', b'z')];",
          "    assert_eq!(result, expected_result);",
          "    ",
          "    let kind = ClassAsciiKind::Print;",
          "    let expected_result = vec![(b' ', b'~')];",
          "    assert_eq!(result, expected_result);",
          "    ",
          "    let kind = ClassAsciiKind::Punct;",
          "    let expected_result = vec![(b'!', b'/'), (b':', b'@'), (b'[', b'`'), (b'{', b'~')];",
          "    assert_eq!(result, expected_result);",
          "    ",
          "    let kind = ClassAsciiKind::Space;",
          "    let expected_result = vec![(b'\\t', b'\\t'), (b'\\n', b'\\n'), (b'\\x0B', b'\\x0B'), (b'\\x0C', b'\\x0C'), (b'\\r', b'\\r'), (b' ', b' ')];",
          "    assert_eq!(result, expected_result);",
          "    ",
          "    let kind = ClassAsciiKind::Upper;",
          "    let expected_result = vec![(b'A', b'Z')];",
          "    assert_eq!(result, expected_result);",
          "    ",
          "    let kind = ClassAsciiKind::Word;",
          "    let expected_result = vec![(b'0', b'9'), (b'A', b'Z'), (b'_', b'_'), (b'a', b'z')];",
          "    assert_eq!(result, expected_result);",
          "    ",
          "    let kind = ClassAsciiKind::Xdigit;",
          "    let expected_result = vec![(b'0', b'9'), (b'A', b'F'), (b'a', b'f')];",
          "    assert_eq!(result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "    ",
          "    let kind = ClassAsciiKind::Alpha;",
          "    let result: Vec<(u8, u8)> = ascii_class(&kind).collect();",
          "}"
        ],
        "oracle": [
          "    let kind = ClassAsciiKind::Alnum; assert_eq!(result, vec![(b'0', b'9'), (b'A', b'Z'), (b'a', b'z')]);",
          "    let kind = ClassAsciiKind::Alpha; assert_eq!(result, vec![(b'A', b'Z'), (b'a', b'z')]);",
          "    let kind = ClassAsciiKind::Ascii; assert_eq!(result, vec![(b'\\x00', b'\\x7F')]);",
          "    let kind = ClassAsciiKind::Blank; assert_eq!(result, vec![(b'\\t', b'\\t'), (b' ', b' ')]);",
          "    let kind = ClassAsciiKind::Cntrl; assert_eq!(result, vec![(b'\\x00', b'\\x1F'), (b'\\x7F', b'\\x7F')]);",
          "    let kind = ClassAsciiKind::Digit; assert_eq!(result, vec![(b'0', b'9')]);",
          "    let kind = ClassAsciiKind::Graph; assert_eq!(result, vec![(b'!', b'~')]);",
          "    let kind = ClassAsciiKind::Lower; assert_eq!(result, vec![(b'a', b'z')]);",
          "    let kind = ClassAsciiKind::Print; assert_eq!(result, vec![(b' ', b'~')]);",
          "    let kind = ClassAsciiKind::Punct; assert_eq!(result, vec![(b'!', b'/'), (b':', b'@'), (b'[', b'`'), (b'{', b'~')]);",
          "    let kind = ClassAsciiKind::Space; assert_eq!(result, vec![(b'\\t', b'\\t'), (b'\\n', b'\\n'), (b'\\x0B', b'\\x0B'), (b'\\x0C', b'\\x0C'), (b'\\r', b'\\r'), (b' ', b' ')]);",
          "    let kind = ClassAsciiKind::Upper; assert_eq!(result, vec![(b'A', b'Z')]);",
          "    let kind = ClassAsciiKind::Word; assert_eq!(result, vec![(b'0', b'9'), (b'A', b'Z'), (b'_', b'_'), (b'a', b'z')]);",
          "    let kind = ClassAsciiKind::Xdigit; assert_eq!(result, vec![(b'0', b'9'), (b'A', b'F'), (b'a', b'f')]);"
        ],
        "code": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "    ",
          "    let kind = ClassAsciiKind::Alpha;",
          "    let result: Vec<(u8, u8)> = ascii_class(&kind).collect();",
          "    let kind = ClassAsciiKind::Alnum; assert_eq!(result, vec![(b'0', b'9'), (b'A', b'Z'), (b'a', b'z')]);",
          "    let kind = ClassAsciiKind::Alpha; assert_eq!(result, vec![(b'A', b'Z'), (b'a', b'z')]);",
          "    let kind = ClassAsciiKind::Ascii; assert_eq!(result, vec![(b'\\x00', b'\\x7F')]);",
          "    let kind = ClassAsciiKind::Blank; assert_eq!(result, vec![(b'\\t', b'\\t'), (b' ', b' ')]);",
          "    let kind = ClassAsciiKind::Cntrl; assert_eq!(result, vec![(b'\\x00', b'\\x1F'), (b'\\x7F', b'\\x7F')]);",
          "    let kind = ClassAsciiKind::Digit; assert_eq!(result, vec![(b'0', b'9')]);",
          "    let kind = ClassAsciiKind::Graph; assert_eq!(result, vec![(b'!', b'~')]);",
          "    let kind = ClassAsciiKind::Lower; assert_eq!(result, vec![(b'a', b'z')]);",
          "    let kind = ClassAsciiKind::Print; assert_eq!(result, vec![(b' ', b'~')]);",
          "    let kind = ClassAsciiKind::Punct; assert_eq!(result, vec![(b'!', b'/'), (b':', b'@'), (b'[', b'`'), (b'{', b'~')]);",
          "    let kind = ClassAsciiKind::Space; assert_eq!(result, vec![(b'\\t', b'\\t'), (b'\\n', b'\\n'), (b'\\x0B', b'\\x0B'), (b'\\x0C', b'\\x0C'), (b'\\r', b'\\r'), (b' ', b' ')]);",
          "    let kind = ClassAsciiKind::Upper; assert_eq!(result, vec![(b'A', b'Z')]);",
          "    let kind = ClassAsciiKind::Word; assert_eq!(result, vec![(b'0', b'9'), (b'A', b'Z'), (b'_', b'_'), (b'a', b'z')]);",
          "    let kind = ClassAsciiKind::Xdigit; assert_eq!(result, vec![(b'0', b'9'), (b'A', b'F'), (b'a', b'f')]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "    ",
          "    let kind = ClassAsciiKind::Ascii;",
          "    let result: Vec<(u8, u8)> = ascii_class(&kind).collect();",
          "}"
        ],
        "oracle": [
          "    let kind = ClassAsciiKind::Ascii;",
          "    let expected_result: Vec<(u8, u8)> = vec![(b'\\x00', b'\\x7F')];",
          "    assert_eq!(result, expected_result);",
          "    let kind = ClassAsciiKind::Print;",
          "    let expected_result: Vec<(u8, u8)> = vec![(b' ', b'~')];",
          "    assert_eq!(result, expected_result);"
        ],
        "code": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "    ",
          "    let kind = ClassAsciiKind::Ascii;",
          "    let result: Vec<(u8, u8)> = ascii_class(&kind).collect();",
          "    let kind = ClassAsciiKind::Ascii;",
          "    let expected_result: Vec<(u8, u8)> = vec![(b'\\x00', b'\\x7F')];",
          "    assert_eq!(result, expected_result);",
          "    let kind = ClassAsciiKind::Print;",
          "    let expected_result: Vec<(u8, u8)> = vec![(b' ', b'~')];",
          "    assert_eq!(result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "    ",
          "    let kind = ClassAsciiKind::Blank;",
          "    let result: Vec<(u8, u8)> = ascii_class(&kind).collect();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, vec![(b'\\t', b'\\t'), (b' ', b' ')]);",
          "    let kind = ClassAsciiKind::Print;",
          "    result = ascii_class(&kind).collect();",
          "    assert_eq!(result, vec![(b' ', b'~')]);"
        ],
        "code": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "    ",
          "    let kind = ClassAsciiKind::Blank;",
          "    let result: Vec<(u8, u8)> = ascii_class(&kind).collect();",
          "    assert_eq!(result, vec![(b'\\t', b'\\t'), (b' ', b' ')]);",
          "    let kind = ClassAsciiKind::Print;",
          "    result = ascii_class(&kind).collect();",
          "    assert_eq!(result, vec![(b' ', b'~')]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "    ",
          "    let kind = ClassAsciiKind::Cntrl;",
          "    let result: Vec<(u8, u8)> = ascii_class(&kind).collect();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, vec![(0x00, 0x1F), (0x7F, 0x7F)]);"
        ],
        "code": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "    ",
          "    let kind = ClassAsciiKind::Cntrl;",
          "    let result: Vec<(u8, u8)> = ascii_class(&kind).collect();",
          "    assert_eq!(result, vec![(0x00, 0x1F), (0x7F, 0x7F)]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "    ",
          "    let kind = ClassAsciiKind::Digit;",
          "    let result: Vec<(u8, u8)> = ascii_class(&kind).collect();",
          "}"
        ],
        "oracle": [
          "    let kind = ClassAsciiKind::Print;",
          "    let expected = vec![(b' ', b'~')];",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "    ",
          "    let kind = ClassAsciiKind::Digit;",
          "    let result: Vec<(u8, u8)> = ascii_class(&kind).collect();",
          "    let kind = ClassAsciiKind::Print;",
          "    let expected = vec![(b' ', b'~')];",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "    ",
          "    let kind = ClassAsciiKind::Graph;",
          "    let result: Vec<(u8, u8)> = ascii_class(&kind).collect();",
          "}"
        ],
        "oracle": [
          "    result.assert_eq(vec![(b'!', b'~')]);"
        ],
        "code": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "    ",
          "    let kind = ClassAsciiKind::Graph;",
          "    let result: Vec<(u8, u8)> = ascii_class(&kind).collect();",
          "    result.assert_eq(vec![(b'!', b'~')]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "    ",
          "    let kind = ClassAsciiKind::Lower;",
          "    let result: Vec<(u8, u8)> = ascii_class(&kind).collect();",
          "}"
        ],
        "oracle": [
          "    result[0] == (b'a', b'z')",
          "    result.len() == 1"
        ],
        "code": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "    ",
          "    let kind = ClassAsciiKind::Lower;",
          "    let result: Vec<(u8, u8)> = ascii_class(&kind).collect();",
          "    result[0] == (b'a', b'z')",
          "    result.len() == 1",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "    ",
          "    let kind = ClassAsciiKind::Punct;",
          "    let result: Vec<(u8, u8)> = ascii_class(&kind).collect();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, vec![(b'!', b'/'), (b':', b'@'), (b'[', b'`'), (b'{', b'~')]);"
        ],
        "code": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "    ",
          "    let kind = ClassAsciiKind::Punct;",
          "    let result: Vec<(u8, u8)> = ascii_class(&kind).collect();",
          "    assert_eq!(result, vec![(b'!', b'/'), (b':', b'@'), (b'[', b'`'), (b'{', b'~')]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "    ",
          "    let kind = ClassAsciiKind::Space;",
          "    let result: Vec<(u8, u8)> = ascii_class(&kind).collect();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, vec![(b'\\t', b'\\t'), (b'\\n', b'\\n'), (b'\\x0B', b'\\x0B'), (b'\\x0C', b'\\x0C'), (b'\\r', b'\\r'), (b' ', b' ')]);"
        ],
        "code": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "    ",
          "    let kind = ClassAsciiKind::Space;",
          "    let result: Vec<(u8, u8)> = ascii_class(&kind).collect();",
          "    assert_eq!(result, vec![(b'\\t', b'\\t'), (b'\\n', b'\\n'), (b'\\x0B', b'\\x0B'), (b'\\x0C', b'\\x0C'), (b'\\r', b'\\r'), (b' ', b' ')]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "    ",
          "    let kind = ClassAsciiKind::Upper;",
          "    let result: Vec<(u8, u8)> = ascii_class(&kind).collect();",
          "}"
        ],
        "oracle": [
          "    let expected_result_upper: Vec<(u8, u8)> = vec![(b'A', b'Z')];",
          "    assert_eq!(result, expected_result_upper);",
          "    ",
          "    let kind = ClassAsciiKind::Print;",
          "    let result: Vec<(u8, u8)> = ascii_class(&kind).collect();",
          "    let expected_result_print: Vec<(u8, u8)> = vec![(b' ', b'~')];",
          "    assert_eq!(result, expected_result_print);"
        ],
        "code": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "    ",
          "    let kind = ClassAsciiKind::Upper;",
          "    let result: Vec<(u8, u8)> = ascii_class(&kind).collect();",
          "    let expected_result_upper: Vec<(u8, u8)> = vec![(b'A', b'Z')];",
          "    assert_eq!(result, expected_result_upper);",
          "    ",
          "    let kind = ClassAsciiKind::Print;",
          "    let result: Vec<(u8, u8)> = ascii_class(&kind).collect();",
          "    let expected_result_print: Vec<(u8, u8)> = vec![(b' ', b'~')];",
          "    assert_eq!(result, expected_result_print);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "    ",
          "    let kind = ClassAsciiKind::Word;",
          "    let result: Vec<(u8, u8)> = ascii_class(&kind).collect();",
          "}"
        ],
        "oracle": [
          "    let kind = ClassAsciiKind::Word;",
          "    let expected_result: Vec<(u8, u8)> = vec![(b'0', b'9'), (b'A', b'Z'), (b'_', b'_'), (b'a', b'z')];",
          "    assert_eq!(result, expected_result);"
        ],
        "code": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "    ",
          "    let kind = ClassAsciiKind::Word;",
          "    let result: Vec<(u8, u8)> = ascii_class(&kind).collect();",
          "    let kind = ClassAsciiKind::Word;",
          "    let expected_result: Vec<(u8, u8)> = vec![(b'0', b'9'), (b'A', b'Z'), (b'_', b'_'), (b'a', b'z')];",
          "    assert_eq!(result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "    ",
          "    let kind = ClassAsciiKind::Xdigit;",
          "    let result: Vec<(u8, u8)> = ascii_class(&kind).collect();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, vec![(b'0', b'9'), (b'A', b'F'), (b'a', b'f')])",
          "    let kind = ClassAsciiKind::Print;",
          "    let result: Vec<(u8, u8)> = ascii_class(&kind).collect();",
          "    assert_eq!(result, vec![(b' ', b'~')])"
        ],
        "code": [
          "{",
          "    use crate::ast::ClassAsciiKind;",
          "    ",
          "    let kind = ClassAsciiKind::Xdigit;",
          "    let result: Vec<(u8, u8)> = ascii_class(&kind).collect();",
          "    assert_eq!(result, vec![(b'0', b'9'), (b'A', b'F'), (b'a', b'f')])",
          "    let kind = ClassAsciiKind::Print;",
          "    let result: Vec<(u8, u8)> = ascii_class(&kind).collect();",
          "    assert_eq!(result, vec![(b' ', b'~')])",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]