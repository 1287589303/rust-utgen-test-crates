[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[];",
          "    let what: &'static str = \"test_empty_slice\";",
          "    let result = try_read_state_id(slice, what);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(DeserializeError::buffer_too_small(\"test_empty_slice\")));"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[];",
          "    let what: &'static str = \"test_empty_slice\";",
          "    let result = try_read_state_id(slice, what);",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(DeserializeError::buffer_too_small(\"test_empty_slice\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[0u8];",
          "    let what: &'static str = \"test_one_byte_slice\";",
          "    let result = try_read_state_id(slice, what);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(DeserializeError::buffer_too_small(what)));"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[0u8];",
          "    let what: &'static str = \"test_one_byte_slice\";",
          "    let result = try_read_state_id(slice, what);",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(DeserializeError::buffer_too_small(what)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[0u8, 1u8];",
          "    let what: &'static str = \"test_two_bytes_slice\";",
          "    let result = try_read_state_id(slice, what);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), DeserializeError::buffer_too_small(\"test_two_bytes_slice\"));"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[0u8, 1u8];",
          "    let what: &'static str = \"test_two_bytes_slice\";",
          "    let result = try_read_state_id(slice, what);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), DeserializeError::buffer_too_small(\"test_two_bytes_slice\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[0u8; StateID::SIZE - 1];",
          "    let what: &'static str = \"test_max_before_size_slice\";",
          "    let result = try_read_state_id(slice, what);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    match result {",
          "    Err(DeserializeError::buffer_too_small(msg)) => assert_eq!(msg, \"test_max_before_size_slice\"),",
          "    _ => panic!(\"Expected buffer_too_small error\"),",
          "    }"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[0u8; StateID::SIZE - 1];",
          "    let what: &'static str = \"test_max_before_size_slice\";",
          "    let result = try_read_state_id(slice, what);",
          "    assert!(result.is_err());",
          "    match result {",
          "    Err(DeserializeError::buffer_too_small(msg)) => assert_eq!(msg, \"test_max_before_size_slice\"),",
          "    _ => panic!(\"Expected buffer_too_small error\"),",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]