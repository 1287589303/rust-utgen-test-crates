[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut cache = Cache {",
          "        starts: vec![LazyStateID(0); 8],",
          "        ..Default::default()",
          "    };",
          "    ",
          "    let dfa = DFA {",
          "        config: Config {",
          "            starts_for_each_pattern: Some(true),",
          "            ..Default::default()",
          "        },",
          "        ..Default::default()",
          "    };",
          "    ",
          "    let mut lazy = Lazy {",
          "        dfa: &dfa,",
          "        cache: &mut cache,",
          "    };",
          "",
          "    let anchored = Anchored::Yes;",
          "    let start = Start::from_usize(0).unwrap();",
          "    let id = LazyStateID(0);",
          "    ",
          "    lazy.set_start_state(anchored, start, id);",
          "}"
        ],
        "oracle": [
          "    assert!(self.as_ref().is_valid(LazyStateID(0)));",
          "    assert_eq!(lazy.cache.starts[Start::len() + Start::from_usize(0).unwrap().as_usize()], LazyStateID(0));"
        ],
        "code": [
          "{",
          "    let mut cache = Cache {",
          "        starts: vec![LazyStateID(0); 8],",
          "        ..Default::default()",
          "    };",
          "    ",
          "    let dfa = DFA {",
          "        config: Config {",
          "            starts_for_each_pattern: Some(true),",
          "            ..Default::default()",
          "        },",
          "        ..Default::default()",
          "    };",
          "    ",
          "    let mut lazy = Lazy {",
          "        dfa: &dfa,",
          "        cache: &mut cache,",
          "    };",
          "",
          "    let anchored = Anchored::Yes;",
          "    let start = Start::from_usize(0).unwrap();",
          "    let id = LazyStateID(0);",
          "    ",
          "    lazy.set_start_state(anchored, start, id);",
          "    assert!(self.as_ref().is_valid(LazyStateID(0)));",
          "    assert_eq!(lazy.cache.starts[Start::len() + Start::from_usize(0).unwrap().as_usize()], LazyStateID(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut cache = Cache {",
          "        starts: vec![LazyStateID(0); 8],",
          "        ..Default::default()",
          "    };",
          "    ",
          "    let dfa = DFA {",
          "        config: Config {",
          "            starts_for_each_pattern: Some(true),",
          "            ..Default::default()",
          "        },",
          "        ..Default::default()",
          "    };",
          "    ",
          "    let mut lazy = Lazy {",
          "        dfa: &dfa,",
          "        cache: &mut cache,",
          "    };",
          "",
          "    let anchored = Anchored::Pattern(PatternID(0));",
          "    let start = Start::from_usize(0).unwrap();",
          "    let id = LazyStateID(1);",
          "    ",
          "    lazy.set_start_state(anchored, start, id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cache.starts[1], LazyStateID(1));",
          "    assert!(lazy.as_ref().is_valid(id));",
          "    assert!(lazy.cache.starts.len() >= 8);",
          "    assert_eq!(dfa.get_config().get_starts_for_each_pattern(), true);",
          "    assert_eq!(start.as_usize(), 0);",
          "    assert!(anchored == Anchored::Pattern(PatternID(0)));",
          "    assert!(cache.starts[1] != LazyStateID(0));",
          "    assert!(lazy.cache.starts[1] == id);",
          "    assert!(lazy.cache.starts[1].as_usize() == 1);",
          "    assert!(lazy.cache.starts.len() > 0);"
        ],
        "code": [
          "{",
          "    let mut cache = Cache {",
          "        starts: vec![LazyStateID(0); 8],",
          "        ..Default::default()",
          "    };",
          "    ",
          "    let dfa = DFA {",
          "        config: Config {",
          "            starts_for_each_pattern: Some(true),",
          "            ..Default::default()",
          "        },",
          "        ..Default::default()",
          "    };",
          "    ",
          "    let mut lazy = Lazy {",
          "        dfa: &dfa,",
          "        cache: &mut cache,",
          "    };",
          "",
          "    let anchored = Anchored::Pattern(PatternID(0));",
          "    let start = Start::from_usize(0).unwrap();",
          "    let id = LazyStateID(1);",
          "    ",
          "    lazy.set_start_state(anchored, start, id);",
          "    assert_eq!(cache.starts[1], LazyStateID(1));",
          "    assert!(lazy.as_ref().is_valid(id));",
          "    assert!(lazy.cache.starts.len() >= 8);",
          "    assert_eq!(dfa.get_config().get_starts_for_each_pattern(), true);",
          "    assert_eq!(start.as_usize(), 0);",
          "    assert!(anchored == Anchored::Pattern(PatternID(0)));",
          "    assert!(cache.starts[1] != LazyStateID(0));",
          "    assert!(lazy.cache.starts[1] == id);",
          "    assert!(lazy.cache.starts[1].as_usize() == 1);",
          "    assert!(lazy.cache.starts.len() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut cache = Cache {",
          "        starts: vec![LazyStateID(0); 8],",
          "        ..Default::default()",
          "    };",
          "    ",
          "    let dfa = DFA {",
          "        config: Config {",
          "            starts_for_each_pattern: Some(true),",
          "            ..Default::default()",
          "        },",
          "        ..Default::default()",
          "    };",
          "    ",
          "    let mut lazy = Lazy {",
          "        dfa: &dfa,",
          "        cache: &mut cache,",
          "    };",
          "",
          "    let anchored = Anchored::Yes;",
          "    let start = Start::from_usize(5).unwrap();",
          "    let id = LazyStateID(7);",
          "    ",
          "    lazy.set_start_state(anchored, start, id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lazy.cache.starts[6], LazyStateID(7));",
          "    assert!(lazy.as_ref().is_valid(LazyStateID(7)));",
          "    assert_eq!(lazy.dfa.get_config().get_starts_for_each_pattern(), true);"
        ],
        "code": [
          "{",
          "    let mut cache = Cache {",
          "        starts: vec![LazyStateID(0); 8],",
          "        ..Default::default()",
          "    };",
          "    ",
          "    let dfa = DFA {",
          "        config: Config {",
          "            starts_for_each_pattern: Some(true),",
          "            ..Default::default()",
          "        },",
          "        ..Default::default()",
          "    };",
          "    ",
          "    let mut lazy = Lazy {",
          "        dfa: &dfa,",
          "        cache: &mut cache,",
          "    };",
          "",
          "    let anchored = Anchored::Yes;",
          "    let start = Start::from_usize(5).unwrap();",
          "    let id = LazyStateID(7);",
          "    ",
          "    lazy.set_start_state(anchored, start, id);",
          "    assert_eq!(lazy.cache.starts[6], LazyStateID(7));",
          "    assert!(lazy.as_ref().is_valid(LazyStateID(7)));",
          "    assert_eq!(lazy.dfa.get_config().get_starts_for_each_pattern(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]