[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let properties = Properties(Box::new(PropertiesI {",
          "        minimum_len: None,",
          "        maximum_len: None,",
          "        look_set: LookSet::new(),",
          "        look_set_prefix: LookSet::new(),",
          "        look_set_suffix: LookSet::new(),",
          "        look_set_prefix_any: LookSet::new(),",
          "        look_set_suffix_any: LookSet::new(),",
          "        utf8: false,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: None,",
          "        literal: false,",
          "        alternation_literal: false,",
          "    }));",
          "    ",
          "    let _result = properties.maximum_len();",
          "}"
        ],
        "oracle": [
          "    properties.maximum_len(); // should return None for properties with maximum_len: None",
          "    ",
          "    let properties_with_max_len = Properties(Box::new(PropertiesI {",
          "    minimum_len: None,",
          "    maximum_len: Some(5),",
          "    look_set: LookSet::new(),",
          "    look_set_prefix: LookSet::new(),",
          "    look_set_suffix: LookSet::new(),",
          "    look_set_prefix_any: LookSet::new(),",
          "    look_set_suffix_any: LookSet::new(),",
          "    utf8: false,",
          "    explicit_captures_len: 0,",
          "    static_explicit_captures_len: None,",
          "    literal: false,",
          "    alternation_literal: false,",
          "    }));",
          "    ",
          "    properties_with_max_len.maximum_len(); // should return Some(5)",
          "    ",
          "    let properties_matching_nothing = Properties(Box::new(PropertiesI {",
          "    minimum_len: None,",
          "    maximum_len: None,",
          "    look_set: LookSet::new(),",
          "    look_set_prefix: LookSet::new(),",
          "    look_set_suffix: LookSet::new(),",
          "    look_set_prefix_any: LookSet::new(),",
          "    look_set_suffix_any: LookSet::new(),",
          "    utf8: false,",
          "    explicit_captures_len: 0,",
          "    static_explicit_captures_len: None,",
          "    literal: false,",
          "    alternation_literal: false,",
          "    }));",
          "    ",
          "    properties_matching_nothing.maximum_len(); // should return None for matches nothing",
          "    ",
          "    let properties_with_upper_bound = Properties(Box::new(PropertiesI {",
          "    minimum_len: None,",
          "    maximum_len: Some(10),",
          "    look_set: LookSet::new(),",
          "    look_set_prefix: LookSet::new(),",
          "    look_set_suffix: LookSet::new(),",
          "    look_set_prefix_any: LookSet::new(),",
          "    look_set_suffix_any: LookSet::new(),",
          "    utf8: false,",
          "    explicit_captures_len: 0,",
          "    static_explicit_captures_len: None,",
          "    literal: false,",
          "    alternation_literal: false,",
          "    }));",
          "    ",
          "    properties_with_upper_bound.maximum_len(); // should return Some(10) for defined upper bound"
        ],
        "code": [
          "{",
          "    let properties = Properties(Box::new(PropertiesI {",
          "        minimum_len: None,",
          "        maximum_len: None,",
          "        look_set: LookSet::new(),",
          "        look_set_prefix: LookSet::new(),",
          "        look_set_suffix: LookSet::new(),",
          "        look_set_prefix_any: LookSet::new(),",
          "        look_set_suffix_any: LookSet::new(),",
          "        utf8: false,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: None,",
          "        literal: false,",
          "        alternation_literal: false,",
          "    }));",
          "    ",
          "    let _result = properties.maximum_len();",
          "    properties.maximum_len(); // should return None for properties with maximum_len: None",
          "    ",
          "    let properties_with_max_len = Properties(Box::new(PropertiesI {",
          "    minimum_len: None,",
          "    maximum_len: Some(5),",
          "    look_set: LookSet::new(),",
          "    look_set_prefix: LookSet::new(),",
          "    look_set_suffix: LookSet::new(),",
          "    look_set_prefix_any: LookSet::new(),",
          "    look_set_suffix_any: LookSet::new(),",
          "    utf8: false,",
          "    explicit_captures_len: 0,",
          "    static_explicit_captures_len: None,",
          "    literal: false,",
          "    alternation_literal: false,",
          "    }));",
          "    ",
          "    properties_with_max_len.maximum_len(); // should return Some(5)",
          "    ",
          "    let properties_matching_nothing = Properties(Box::new(PropertiesI {",
          "    minimum_len: None,",
          "    maximum_len: None,",
          "    look_set: LookSet::new(),",
          "    look_set_prefix: LookSet::new(),",
          "    look_set_suffix: LookSet::new(),",
          "    look_set_prefix_any: LookSet::new(),",
          "    look_set_suffix_any: LookSet::new(),",
          "    utf8: false,",
          "    explicit_captures_len: 0,",
          "    static_explicit_captures_len: None,",
          "    literal: false,",
          "    alternation_literal: false,",
          "    }));",
          "    ",
          "    properties_matching_nothing.maximum_len(); // should return None for matches nothing",
          "    ",
          "    let properties_with_upper_bound = Properties(Box::new(PropertiesI {",
          "    minimum_len: None,",
          "    maximum_len: Some(10),",
          "    look_set: LookSet::new(),",
          "    look_set_prefix: LookSet::new(),",
          "    look_set_suffix: LookSet::new(),",
          "    look_set_prefix_any: LookSet::new(),",
          "    look_set_suffix_any: LookSet::new(),",
          "    utf8: false,",
          "    explicit_captures_len: 0,",
          "    static_explicit_captures_len: None,",
          "    literal: false,",
          "    alternation_literal: false,",
          "    }));",
          "    ",
          "    properties_with_upper_bound.maximum_len(); // should return Some(10) for defined upper bound",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let properties = Properties(Box::new(PropertiesI {",
          "        minimum_len: None,",
          "        maximum_len: Some(0),",
          "        look_set: LookSet::new(),",
          "        look_set_prefix: LookSet::new(),",
          "        look_set_suffix: LookSet::new(),",
          "        look_set_prefix_any: LookSet::new(),",
          "        look_set_suffix_any: LookSet::new(),",
          "        utf8: false,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: None,",
          "        literal: false,",
          "        alternation_literal: false,",
          "    }));",
          "    ",
          "    let _result = properties.maximum_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(0));",
          "    ",
          "    let properties = Properties(Box::new(PropertiesI {",
          "    minimum_len: None,",
          "    maximum_len: None,",
          "    look_set: LookSet::new(),",
          "    look_set_prefix: LookSet::new(),",
          "    look_set_suffix: LookSet::new(),",
          "    look_set_prefix_any: LookSet::new(),",
          "    look_set_suffix_any: LookSet::new(),",
          "    utf8: false,",
          "    explicit_captures_len: 0,",
          "    static_explicit_captures_len: None,",
          "    literal: false,",
          "    alternation_literal: false,",
          "    }));",
          "    ",
          "    let _result = properties.maximum_len();",
          "    assert_eq!(_result, None);",
          "    ",
          "    let properties = Properties(Box::new(PropertiesI {",
          "    minimum_len: None,",
          "    maximum_len: Some(5),",
          "    look_set: LookSet::new(),",
          "    look_set_prefix: LookSet::new(),",
          "    look_set_suffix: LookSet::new(),",
          "    look_set_prefix_any: LookSet::new(),",
          "    look_set_suffix_any: LookSet::new(),",
          "    utf8: true,",
          "    explicit_captures_len: 0,",
          "    static_explicit_captures_len: None,",
          "    literal: false,",
          "    alternation_literal: false,",
          "    }));",
          "    ",
          "    let _result = properties.maximum_len();",
          "    assert_eq!(_result, Some(5));"
        ],
        "code": [
          "{",
          "    let properties = Properties(Box::new(PropertiesI {",
          "        minimum_len: None,",
          "        maximum_len: Some(0),",
          "        look_set: LookSet::new(),",
          "        look_set_prefix: LookSet::new(),",
          "        look_set_suffix: LookSet::new(),",
          "        look_set_prefix_any: LookSet::new(),",
          "        look_set_suffix_any: LookSet::new(),",
          "        utf8: false,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: None,",
          "        literal: false,",
          "        alternation_literal: false,",
          "    }));",
          "    ",
          "    let _result = properties.maximum_len();",
          "    assert_eq!(_result, Some(0));",
          "    ",
          "    let properties = Properties(Box::new(PropertiesI {",
          "    minimum_len: None,",
          "    maximum_len: None,",
          "    look_set: LookSet::new(),",
          "    look_set_prefix: LookSet::new(),",
          "    look_set_suffix: LookSet::new(),",
          "    look_set_prefix_any: LookSet::new(),",
          "    look_set_suffix_any: LookSet::new(),",
          "    utf8: false,",
          "    explicit_captures_len: 0,",
          "    static_explicit_captures_len: None,",
          "    literal: false,",
          "    alternation_literal: false,",
          "    }));",
          "    ",
          "    let _result = properties.maximum_len();",
          "    assert_eq!(_result, None);",
          "    ",
          "    let properties = Properties(Box::new(PropertiesI {",
          "    minimum_len: None,",
          "    maximum_len: Some(5),",
          "    look_set: LookSet::new(),",
          "    look_set_prefix: LookSet::new(),",
          "    look_set_suffix: LookSet::new(),",
          "    look_set_prefix_any: LookSet::new(),",
          "    look_set_suffix_any: LookSet::new(),",
          "    utf8: true,",
          "    explicit_captures_len: 0,",
          "    static_explicit_captures_len: None,",
          "    literal: false,",
          "    alternation_literal: false,",
          "    }));",
          "    ",
          "    let _result = properties.maximum_len();",
          "    assert_eq!(_result, Some(5));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let properties = Properties(Box::new(PropertiesI {",
          "        minimum_len: None,",
          "        maximum_len: Some(1),",
          "        look_set: LookSet::new(),",
          "        look_set_prefix: LookSet::new(),",
          "        look_set_suffix: LookSet::new(),",
          "        look_set_prefix_any: LookSet::new(),",
          "        look_set_suffix_any: LookSet::new(),",
          "        utf8: false,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: None,",
          "        literal: false,",
          "        alternation_literal: false,",
          "    }));",
          "    ",
          "    let _result = properties.maximum_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(1));",
          "    let properties_empty = Properties(Box::new(PropertiesI {",
          "    minimum_len: None,",
          "    maximum_len: None,",
          "    look_set: LookSet::new(),",
          "    look_set_prefix: LookSet::new(),",
          "    look_set_suffix: LookSet::new(),",
          "    look_set_prefix_any: LookSet::new(),",
          "    look_set_suffix_any: LookSet::new(),",
          "    utf8: false,",
          "    explicit_captures_len: 0,",
          "    static_explicit_captures_len: None,",
          "    literal: false,",
          "    alternation_literal: false,",
          "    }));",
          "    let _result_empty = properties_empty.maximum_len();",
          "    assert_eq!(_result_empty, None);",
          "    let properties_no_match = Properties(Box::new(PropertiesI {",
          "    minimum_len: None,",
          "    maximum_len: None,",
          "    look_set: LookSet::new(),",
          "    look_set_prefix: LookSet::new(),",
          "    look_set_suffix: LookSet::new(),",
          "    look_set_prefix_any: LookSet::new(),",
          "    look_set_suffix_any: LookSet::new(),",
          "    utf8: false,",
          "    explicit_captures_len: 0,",
          "    static_explicit_captures_len: None,",
          "    literal: false,",
          "    alternation_literal: false,",
          "    }));",
          "    let _result_no_match = properties_no_match.maximum_len();",
          "    assert_eq!(_result_no_match, None);",
          "    let properties_upper_bound = Properties(Box::new(PropertiesI {",
          "    minimum_len: Some(1),",
          "    maximum_len: None,",
          "    look_set: LookSet::new(),",
          "    look_set_prefix: LookSet::new(),",
          "    look_set_suffix: LookSet::new(),",
          "    look_set_prefix_any: LookSet::new(),",
          "    look_set_suffix_any: LookSet::new(),",
          "    utf8: true,",
          "    explicit_captures_len: 1,",
          "    static_explicit_captures_len: Some(1),",
          "    literal: true,",
          "    alternation_literal: false,",
          "    }));",
          "    let _result_upper_bound = properties_upper_bound.maximum_len();",
          "    assert_eq!(_result_upper_bound, None);"
        ],
        "code": [
          "{",
          "    let properties = Properties(Box::new(PropertiesI {",
          "        minimum_len: None,",
          "        maximum_len: Some(1),",
          "        look_set: LookSet::new(),",
          "        look_set_prefix: LookSet::new(),",
          "        look_set_suffix: LookSet::new(),",
          "        look_set_prefix_any: LookSet::new(),",
          "        look_set_suffix_any: LookSet::new(),",
          "        utf8: false,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: None,",
          "        literal: false,",
          "        alternation_literal: false,",
          "    }));",
          "    ",
          "    let _result = properties.maximum_len();",
          "    assert_eq!(_result, Some(1));",
          "    let properties_empty = Properties(Box::new(PropertiesI {",
          "    minimum_len: None,",
          "    maximum_len: None,",
          "    look_set: LookSet::new(),",
          "    look_set_prefix: LookSet::new(),",
          "    look_set_suffix: LookSet::new(),",
          "    look_set_prefix_any: LookSet::new(),",
          "    look_set_suffix_any: LookSet::new(),",
          "    utf8: false,",
          "    explicit_captures_len: 0,",
          "    static_explicit_captures_len: None,",
          "    literal: false,",
          "    alternation_literal: false,",
          "    }));",
          "    let _result_empty = properties_empty.maximum_len();",
          "    assert_eq!(_result_empty, None);",
          "    let properties_no_match = Properties(Box::new(PropertiesI {",
          "    minimum_len: None,",
          "    maximum_len: None,",
          "    look_set: LookSet::new(),",
          "    look_set_prefix: LookSet::new(),",
          "    look_set_suffix: LookSet::new(),",
          "    look_set_prefix_any: LookSet::new(),",
          "    look_set_suffix_any: LookSet::new(),",
          "    utf8: false,",
          "    explicit_captures_len: 0,",
          "    static_explicit_captures_len: None,",
          "    literal: false,",
          "    alternation_literal: false,",
          "    }));",
          "    let _result_no_match = properties_no_match.maximum_len();",
          "    assert_eq!(_result_no_match, None);",
          "    let properties_upper_bound = Properties(Box::new(PropertiesI {",
          "    minimum_len: Some(1),",
          "    maximum_len: None,",
          "    look_set: LookSet::new(),",
          "    look_set_prefix: LookSet::new(),",
          "    look_set_suffix: LookSet::new(),",
          "    look_set_prefix_any: LookSet::new(),",
          "    look_set_suffix_any: LookSet::new(),",
          "    utf8: true,",
          "    explicit_captures_len: 1,",
          "    static_explicit_captures_len: Some(1),",
          "    literal: true,",
          "    alternation_literal: false,",
          "    }));",
          "    let _result_upper_bound = properties_upper_bound.maximum_len();",
          "    assert_eq!(_result_upper_bound, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let properties = Properties(Box::new(PropertiesI {",
          "        minimum_len: None,",
          "        maximum_len: Some(usize::MAX),",
          "        look_set: LookSet::new(),",
          "        look_set_prefix: LookSet::new(),",
          "        look_set_suffix: LookSet::new(),",
          "        look_set_prefix_any: LookSet::new(),",
          "        look_set_suffix_any: LookSet::new(),",
          "        utf8: false,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: None,",
          "        literal: false,",
          "        alternation_literal: false,",
          "    }));",
          "    ",
          "    let _result = properties.maximum_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(properties.maximum_len(), Some(usize::MAX));",
          "    ",
          "    let properties_empty = Properties(Box::new(PropertiesI {",
          "    minimum_len: None,",
          "    maximum_len: None,",
          "    look_set: LookSet::new(),",
          "    look_set_prefix: LookSet::new(),",
          "    look_set_suffix: LookSet::new(),",
          "    look_set_prefix_any: LookSet::new(),",
          "    look_set_suffix_any: LookSet::new(),",
          "    utf8: false,",
          "    explicit_captures_len: 0,",
          "    static_explicit_captures_len: None,",
          "    literal: false,",
          "    alternation_literal: false,",
          "    }));",
          "    assert_eq!(properties_empty.maximum_len(), None);",
          "    ",
          "    let properties_no_upper_bound = Properties(Box::new(PropertiesI {",
          "    minimum_len: None,",
          "    maximum_len: None,",
          "    look_set: LookSet::new(),",
          "    look_set_prefix: LookSet::new(),",
          "    look_set_suffix: LookSet::new(),",
          "    look_set_prefix_any: LookSet::new(),",
          "    look_set_suffix_any: LookSet::new(),",
          "    utf8: true,",
          "    explicit_captures_len: 0,",
          "    static_explicit_captures_len: None,",
          "    literal: false,",
          "    alternation_literal: false,",
          "    }));",
          "    assert_eq!(properties_no_upper_bound.maximum_len(), None);",
          "    ",
          "    let properties_fixed_length = Properties(Box::new(PropertiesI {",
          "    minimum_len: Some(3),",
          "    maximum_len: Some(5),",
          "    look_set: LookSet::new(),",
          "    look_set_prefix: LookSet::new(),",
          "    look_set_suffix: LookSet::new(),",
          "    look_set_prefix_any: LookSet::new(),",
          "    look_set_suffix_any: LookSet::new(),",
          "    utf8: false,",
          "    explicit_captures_len: 0,",
          "    static_explicit_captures_len: None,",
          "    literal: false,",
          "    alternation_literal: false,",
          "    }));",
          "    assert_eq!(properties_fixed_length.maximum_len(), Some(5));"
        ],
        "code": [
          "{",
          "    let properties = Properties(Box::new(PropertiesI {",
          "        minimum_len: None,",
          "        maximum_len: Some(usize::MAX),",
          "        look_set: LookSet::new(),",
          "        look_set_prefix: LookSet::new(),",
          "        look_set_suffix: LookSet::new(),",
          "        look_set_prefix_any: LookSet::new(),",
          "        look_set_suffix_any: LookSet::new(),",
          "        utf8: false,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: None,",
          "        literal: false,",
          "        alternation_literal: false,",
          "    }));",
          "    ",
          "    let _result = properties.maximum_len();",
          "    assert_eq!(properties.maximum_len(), Some(usize::MAX));",
          "    ",
          "    let properties_empty = Properties(Box::new(PropertiesI {",
          "    minimum_len: None,",
          "    maximum_len: None,",
          "    look_set: LookSet::new(),",
          "    look_set_prefix: LookSet::new(),",
          "    look_set_suffix: LookSet::new(),",
          "    look_set_prefix_any: LookSet::new(),",
          "    look_set_suffix_any: LookSet::new(),",
          "    utf8: false,",
          "    explicit_captures_len: 0,",
          "    static_explicit_captures_len: None,",
          "    literal: false,",
          "    alternation_literal: false,",
          "    }));",
          "    assert_eq!(properties_empty.maximum_len(), None);",
          "    ",
          "    let properties_no_upper_bound = Properties(Box::new(PropertiesI {",
          "    minimum_len: None,",
          "    maximum_len: None,",
          "    look_set: LookSet::new(),",
          "    look_set_prefix: LookSet::new(),",
          "    look_set_suffix: LookSet::new(),",
          "    look_set_prefix_any: LookSet::new(),",
          "    look_set_suffix_any: LookSet::new(),",
          "    utf8: true,",
          "    explicit_captures_len: 0,",
          "    static_explicit_captures_len: None,",
          "    literal: false,",
          "    alternation_literal: false,",
          "    }));",
          "    assert_eq!(properties_no_upper_bound.maximum_len(), None);",
          "    ",
          "    let properties_fixed_length = Properties(Box::new(PropertiesI {",
          "    minimum_len: Some(3),",
          "    maximum_len: Some(5),",
          "    look_set: LookSet::new(),",
          "    look_set_prefix: LookSet::new(),",
          "    look_set_suffix: LookSet::new(),",
          "    look_set_prefix_any: LookSet::new(),",
          "    look_set_suffix_any: LookSet::new(),",
          "    utf8: false,",
          "    explicit_captures_len: 0,",
          "    static_explicit_captures_len: None,",
          "    literal: false,",
          "    alternation_literal: false,",
          "    }));",
          "    assert_eq!(properties_fixed_length.maximum_len(), Some(5));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let properties = Properties(Box::new(PropertiesI {",
          "        minimum_len: None,",
          "        maximum_len: Some(10),",
          "        look_set: LookSet::new(),",
          "        look_set_prefix: LookSet::new(),",
          "        look_set_suffix: LookSet::new(),",
          "        look_set_prefix_any: LookSet::new(),",
          "        look_set_suffix_any: LookSet::new(),",
          "        utf8: true,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: None,",
          "        literal: false,",
          "        alternation_literal: true,",
          "    }));",
          "    ",
          "    let _result = properties.maximum_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(10));",
          "    ",
          "    let properties_empty = Properties(Box::new(PropertiesI {",
          "    minimum_len: None,",
          "    maximum_len: None,",
          "    look_set: LookSet::new(),",
          "    look_set_prefix: LookSet::new(),",
          "    look_set_suffix: LookSet::new(),",
          "    look_set_prefix_any: LookSet::new(),",
          "    look_set_suffix_any: LookSet::new(),",
          "    utf8: true,",
          "    explicit_captures_len: 0,",
          "    static_explicit_captures_len: None,",
          "    literal: false,",
          "    alternation_literal: true,",
          "    }));",
          "    assert_eq!(properties_empty.maximum_len(), None);",
          "    ",
          "    let properties_unbounded = Properties(Box::new(PropertiesI {",
          "    minimum_len: None,",
          "    maximum_len: None,",
          "    look_set: LookSet::new(),",
          "    look_set_prefix: LookSet::new(),",
          "    look_set_suffix: LookSet::new(),",
          "    look_set_prefix_any: LookSet::new(),",
          "    look_set_suffix_any: LookSet::new(),",
          "    utf8: true,",
          "    explicit_captures_len: 0,",
          "    static_explicit_captures_len: None,",
          "    literal: false,",
          "    alternation_literal: false,",
          "    }));",
          "    assert_eq!(properties_unbounded.maximum_len(), None);",
          "    ",
          "    let properties_literal = Properties(Box::new(PropertiesI {",
          "    minimum_len: Some(5),",
          "    maximum_len: Some(5),",
          "    look_set: LookSet::new(),",
          "    look_set_prefix: LookSet::new(),",
          "    look_set_suffix: LookSet::new(),",
          "    look_set_prefix_any: LookSet::new(),",
          "    look_set_suffix_any: LookSet::new(),",
          "    utf8: false,",
          "    explicit_captures_len: 0,",
          "    static_explicit_captures_len: Some(5),",
          "    literal: true,",
          "    alternation_literal: false,",
          "    }));",
          "    assert_eq!(properties_literal.maximum_len(), Some(5));"
        ],
        "code": [
          "{",
          "    let properties = Properties(Box::new(PropertiesI {",
          "        minimum_len: None,",
          "        maximum_len: Some(10),",
          "        look_set: LookSet::new(),",
          "        look_set_prefix: LookSet::new(),",
          "        look_set_suffix: LookSet::new(),",
          "        look_set_prefix_any: LookSet::new(),",
          "        look_set_suffix_any: LookSet::new(),",
          "        utf8: true,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: None,",
          "        literal: false,",
          "        alternation_literal: true,",
          "    }));",
          "    ",
          "    let _result = properties.maximum_len();",
          "    assert_eq!(_result, Some(10));",
          "    ",
          "    let properties_empty = Properties(Box::new(PropertiesI {",
          "    minimum_len: None,",
          "    maximum_len: None,",
          "    look_set: LookSet::new(),",
          "    look_set_prefix: LookSet::new(),",
          "    look_set_suffix: LookSet::new(),",
          "    look_set_prefix_any: LookSet::new(),",
          "    look_set_suffix_any: LookSet::new(),",
          "    utf8: true,",
          "    explicit_captures_len: 0,",
          "    static_explicit_captures_len: None,",
          "    literal: false,",
          "    alternation_literal: true,",
          "    }));",
          "    assert_eq!(properties_empty.maximum_len(), None);",
          "    ",
          "    let properties_unbounded = Properties(Box::new(PropertiesI {",
          "    minimum_len: None,",
          "    maximum_len: None,",
          "    look_set: LookSet::new(),",
          "    look_set_prefix: LookSet::new(),",
          "    look_set_suffix: LookSet::new(),",
          "    look_set_prefix_any: LookSet::new(),",
          "    look_set_suffix_any: LookSet::new(),",
          "    utf8: true,",
          "    explicit_captures_len: 0,",
          "    static_explicit_captures_len: None,",
          "    literal: false,",
          "    alternation_literal: false,",
          "    }));",
          "    assert_eq!(properties_unbounded.maximum_len(), None);",
          "    ",
          "    let properties_literal = Properties(Box::new(PropertiesI {",
          "    minimum_len: Some(5),",
          "    maximum_len: Some(5),",
          "    look_set: LookSet::new(),",
          "    look_set_prefix: LookSet::new(),",
          "    look_set_suffix: LookSet::new(),",
          "    look_set_prefix_any: LookSet::new(),",
          "    look_set_suffix_any: LookSet::new(),",
          "    utf8: false,",
          "    explicit_captures_len: 0,",
          "    static_explicit_captures_len: Some(5),",
          "    literal: true,",
          "    alternation_literal: false,",
          "    }));",
          "    assert_eq!(properties_literal.maximum_len(), Some(5));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let properties = Properties(Box::new(PropertiesI {",
          "        minimum_len: None,",
          "        maximum_len: None,",
          "        look_set: LookSet::new(),",
          "        look_set_prefix: LookSet::new(),",
          "        look_set_suffix: LookSet::new(),",
          "        look_set_prefix_any: LookSet::new(),",
          "        look_set_suffix_any: LookSet::new(),",
          "        utf8: false,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: None,",
          "        literal: true,",
          "        alternation_literal: false,",
          "    }));",
          "    ",
          "    let _result = properties.maximum_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(properties.maximum_len(), None);"
        ],
        "code": [
          "{",
          "    let properties = Properties(Box::new(PropertiesI {",
          "        minimum_len: None,",
          "        maximum_len: None,",
          "        look_set: LookSet::new(),",
          "        look_set_prefix: LookSet::new(),",
          "        look_set_suffix: LookSet::new(),",
          "        look_set_prefix_any: LookSet::new(),",
          "        look_set_suffix_any: LookSet::new(),",
          "        utf8: false,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: None,",
          "        literal: true,",
          "        alternation_literal: false,",
          "    }));",
          "    ",
          "    let _result = properties.maximum_len();",
          "    assert_eq!(properties.maximum_len(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]