[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let scalar_range = ScalarRange { start: 0x41, end: 0x41 }; // 'A' to 'A'",
          "    let mut start_buffer = [0u8; MAX_UTF8_BYTES];",
          "    let mut end_buffer = [0u8; MAX_UTF8_BYTES];",
          "    let _ = scalar_range.encode(&mut start_buffer, &mut end_buffer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start_buffer, [0x41, 0, 0, 0]);",
          "    assert_eq!(end_buffer, [0x41, 0, 0, 0]);",
          "    assert_eq!(scalar_range.encode(&mut start_buffer, &mut end_buffer), 1);"
        ],
        "code": [
          "{",
          "    let scalar_range = ScalarRange { start: 0x41, end: 0x41 }; // 'A' to 'A'",
          "    let mut start_buffer = [0u8; MAX_UTF8_BYTES];",
          "    let mut end_buffer = [0u8; MAX_UTF8_BYTES];",
          "    let _ = scalar_range.encode(&mut start_buffer, &mut end_buffer);",
          "    assert_eq!(start_buffer, [0x41, 0, 0, 0]);",
          "    assert_eq!(end_buffer, [0x41, 0, 0, 0]);",
          "    assert_eq!(scalar_range.encode(&mut start_buffer, &mut end_buffer), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let scalar_range = ScalarRange { start: 0x20AC, end: 0x20AC }; // '€' to '€'",
          "    let mut start_buffer = [0u8; MAX_UTF8_BYTES];",
          "    let mut end_buffer = [0u8; MAX_UTF8_BYTES];",
          "    let _ = scalar_range.encode(&mut start_buffer, &mut end_buffer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start_buffer, [0xE2, 0x82, 0xAC, 0x00]);",
          "    assert_eq!(end_buffer, [0xE2, 0x82, 0xAC, 0x00]);",
          "    assert_eq!(_ , 3);"
        ],
        "code": [
          "{",
          "    let scalar_range = ScalarRange { start: 0x20AC, end: 0x20AC }; // '€' to '€'",
          "    let mut start_buffer = [0u8; MAX_UTF8_BYTES];",
          "    let mut end_buffer = [0u8; MAX_UTF8_BYTES];",
          "    let _ = scalar_range.encode(&mut start_buffer, &mut end_buffer);",
          "    assert_eq!(start_buffer, [0xE2, 0x82, 0xAC, 0x00]);",
          "    assert_eq!(end_buffer, [0xE2, 0x82, 0xAC, 0x00]);",
          "    assert_eq!(_ , 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let scalar_range = ScalarRange { start: 0x10000, end: 0x10000 }; // U+10000 to U+10000",
          "    let mut start_buffer = [0u8; MAX_UTF8_BYTES];",
          "    let mut end_buffer = [0u8; MAX_UTF8_BYTES];",
          "    let _ = scalar_range.encode(&mut start_buffer, &mut end_buffer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start_buffer, [0xF0, 0x90, 0x80, 0x80]);",
          "    assert_eq!(end_buffer, [0xF0, 0x90, 0x80, 0x80]);",
          "    assert_eq!(_, 4);",
          "    assert!(start_buffer.len() >= MAX_UTF8_BYTES);",
          "    assert!(end_buffer.len() >= MAX_UTF8_BYTES);",
          "    assert!(scalar_range.is_valid());",
          "    assert!(scalar_range.as_ascii().is_none());",
          "    assert!(!scalar_range.is_ascii());"
        ],
        "code": [
          "{",
          "    let scalar_range = ScalarRange { start: 0x10000, end: 0x10000 }; // U+10000 to U+10000",
          "    let mut start_buffer = [0u8; MAX_UTF8_BYTES];",
          "    let mut end_buffer = [0u8; MAX_UTF8_BYTES];",
          "    let _ = scalar_range.encode(&mut start_buffer, &mut end_buffer);",
          "    assert_eq!(start_buffer, [0xF0, 0x90, 0x80, 0x80]);",
          "    assert_eq!(end_buffer, [0xF0, 0x90, 0x80, 0x80]);",
          "    assert_eq!(_, 4);",
          "    assert!(start_buffer.len() >= MAX_UTF8_BYTES);",
          "    assert!(end_buffer.len() >= MAX_UTF8_BYTES);",
          "    assert!(scalar_range.is_valid());",
          "    assert!(scalar_range.as_ascii().is_none());",
          "    assert!(!scalar_range.is_ascii());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let scalar_range = ScalarRange { start: 0x7F, end: 0x7F }; // '\\u{7F}' to '\\u{7F}'",
          "    let mut start_buffer = [0u8; MAX_UTF8_BYTES];",
          "    let mut end_buffer = [0u8; MAX_UTF8_BYTES];",
          "    let _ = scalar_range.encode(&mut start_buffer, &mut end_buffer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start_buffer, [0x7F, 0, 0, 0]);",
          "    assert_eq!(end_buffer, [0x7F, 0, 0, 0]);",
          "    assert!(scalar_range.encode(&mut start_buffer, &mut end_buffer) <= MAX_UTF8_BYTES);",
          "    assert!(scalar_range.encode(&mut start_buffer, &mut end_buffer) > 0);",
          "    assert!(scalar_range.is_valid());",
          "    assert!(scalar_range.is_ascii());",
          "    assert_eq!(scalar_range.split(), None);",
          "    assert_eq!(scalar_range.as_ascii(), Some(Utf8Range { start: 0x7F, end: 0x7F }));",
          "    assert_eq!(scalar_range.start, scalar_range.end);"
        ],
        "code": [
          "{",
          "    let scalar_range = ScalarRange { start: 0x7F, end: 0x7F }; // '\\u{7F}' to '\\u{7F}'",
          "    let mut start_buffer = [0u8; MAX_UTF8_BYTES];",
          "    let mut end_buffer = [0u8; MAX_UTF8_BYTES];",
          "    let _ = scalar_range.encode(&mut start_buffer, &mut end_buffer);",
          "    assert_eq!(start_buffer, [0x7F, 0, 0, 0]);",
          "    assert_eq!(end_buffer, [0x7F, 0, 0, 0]);",
          "    assert!(scalar_range.encode(&mut start_buffer, &mut end_buffer) <= MAX_UTF8_BYTES);",
          "    assert!(scalar_range.encode(&mut start_buffer, &mut end_buffer) > 0);",
          "    assert!(scalar_range.is_valid());",
          "    assert!(scalar_range.is_ascii());",
          "    assert_eq!(scalar_range.split(), None);",
          "    assert_eq!(scalar_range.as_ascii(), Some(Utf8Range { start: 0x7F, end: 0x7F }));",
          "    assert_eq!(scalar_range.start, scalar_range.end);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let scalar_range = ScalarRange { start: 0x10FFFF, end: 0x10FFFF }; // U+10FFFF to U+10FFFF",
          "    let mut start_buffer = [0u8; MAX_UTF8_BYTES];",
          "    let mut end_buffer = [0u8; MAX_UTF8_BYTES];",
          "    let _ = scalar_range.encode(&mut start_buffer, &mut end_buffer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start_buffer, [0xF4, 0x8F, 0xBF, 0xBF]);",
          "    assert_eq!(end_buffer, [0xF4, 0x8F, 0xBF, 0xBF]);",
          "    assert!(scalar_range.encode(&mut start_buffer, &mut end_buffer) > 0);",
          "    assert!(scalar_range.encode(&mut start_buffer, &mut end_buffer) <= MAX_UTF8_BYTES);"
        ],
        "code": [
          "{",
          "    let scalar_range = ScalarRange { start: 0x10FFFF, end: 0x10FFFF }; // U+10FFFF to U+10FFFF",
          "    let mut start_buffer = [0u8; MAX_UTF8_BYTES];",
          "    let mut end_buffer = [0u8; MAX_UTF8_BYTES];",
          "    let _ = scalar_range.encode(&mut start_buffer, &mut end_buffer);",
          "    assert_eq!(start_buffer, [0xF4, 0x8F, 0xBF, 0xBF]);",
          "    assert_eq!(end_buffer, [0xF4, 0x8F, 0xBF, 0xBF]);",
          "    assert!(scalar_range.encode(&mut start_buffer, &mut end_buffer) > 0);",
          "    assert!(scalar_range.encode(&mut start_buffer, &mut end_buffer) <= MAX_UTF8_BYTES);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]