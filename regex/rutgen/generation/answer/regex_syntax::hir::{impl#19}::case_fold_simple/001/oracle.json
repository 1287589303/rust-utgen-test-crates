[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let range = ClassBytesRange::new(b'\\0', b'@');",
          "    range.case_fold_simple(&mut ranges).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(ranges.len(), 0);",
          "    let range = ClassBytesRange::new(b'!', b'@');",
          "    assert!(range.case_fold_simple(&mut ranges).is_ok());",
          "    assert_eq!(ranges.len(), 0);",
          "    let range = ClassBytesRange::new(b'0', b'9');",
          "    assert!(range.case_fold_simple(&mut ranges).is_ok());",
          "    assert_eq!(ranges.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let range = ClassBytesRange::new(b'\\0', b'@');",
          "    range.case_fold_simple(&mut ranges).unwrap();",
          "    assert_eq!(ranges.len(), 0);",
          "    let range = ClassBytesRange::new(b'!', b'@');",
          "    assert!(range.case_fold_simple(&mut ranges).is_ok());",
          "    assert_eq!(ranges.len(), 0);",
          "    let range = ClassBytesRange::new(b'0', b'9');",
          "    assert!(range.case_fold_simple(&mut ranges).is_ok());",
          "    assert_eq!(ranges.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let range = ClassBytesRange::new(b'|', b'\\xFF');",
          "    range.case_fold_simple(&mut ranges).unwrap();",
          "}"
        ],
        "oracle": [
          "    let mut ranges = Vec::new();",
          "    let range = ClassBytesRange::new(b'|', b'\\xFF');",
          "    assert_eq!(range.case_fold_simple(&mut ranges), Ok(()));",
          "    assert!(ranges.is_empty());"
        ],
        "code": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let range = ClassBytesRange::new(b'|', b'\\xFF');",
          "    range.case_fold_simple(&mut ranges).unwrap();",
          "    let mut ranges = Vec::new();",
          "    let range = ClassBytesRange::new(b'|', b'\\xFF');",
          "    assert_eq!(range.case_fold_simple(&mut ranges), Ok(()));",
          "    assert!(ranges.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let range = ClassBytesRange::new(b'[', b'`');",
          "    range.case_fold_simple(&mut ranges).unwrap();",
          "}"
        ],
        "oracle": [
          "    let mut ranges = Vec::new();",
          "    let range = ClassBytesRange::new(b'[', b'`');",
          "    assert_eq!(range.case_fold_simple(&mut ranges), Ok(()));",
          "    assert!(ranges.is_empty());"
        ],
        "code": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let range = ClassBytesRange::new(b'[', b'`');",
          "    range.case_fold_simple(&mut ranges).unwrap();",
          "    let mut ranges = Vec::new();",
          "    let range = ClassBytesRange::new(b'[', b'`');",
          "    assert_eq!(range.case_fold_simple(&mut ranges), Ok(()));",
          "    assert!(ranges.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let range = ClassBytesRange::new(b'Z', b'Z');",
          "    range.case_fold_simple(&mut ranges).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(ranges.len(), 0);",
          "    assert_eq!(ranges.capacity(), 0);",
          "    assert!(ClassBytesRange::new(b'a', b'z').is_intersection_empty(&range));",
          "    assert!(ClassBytesRange::new(b'A', b'Z').is_intersection_empty(&range));",
          "    assert!(matches!(range.case_fold_simple(&mut ranges), Ok(())));"
        ],
        "code": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let range = ClassBytesRange::new(b'Z', b'Z');",
          "    range.case_fold_simple(&mut ranges).unwrap();",
          "    assert_eq!(ranges.len(), 0);",
          "    assert_eq!(ranges.capacity(), 0);",
          "    assert!(ClassBytesRange::new(b'a', b'z').is_intersection_empty(&range));",
          "    assert!(ClassBytesRange::new(b'A', b'Z').is_intersection_empty(&range));",
          "    assert!(matches!(range.case_fold_simple(&mut ranges), Ok(())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]