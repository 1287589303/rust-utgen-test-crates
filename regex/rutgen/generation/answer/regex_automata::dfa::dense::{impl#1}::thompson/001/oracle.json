[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = thompson::Config {",
          "        reverse: Some(true),",
          "        shrink: Some(true),",
          "        ..Default::default()",
          "    };",
          "    builder.thompson(config);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.thompson(config).thompson.config.reverse, Some(true));",
          "    assert_eq!(builder.thompson(config).thompson.config.shrink, Some(true));"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = thompson::Config {",
          "        reverse: Some(true),",
          "        shrink: Some(true),",
          "        ..Default::default()",
          "    };",
          "    builder.thompson(config);",
          "    assert_eq!(builder.thompson(config).thompson.config.reverse, Some(true));",
          "    assert_eq!(builder.thompson(config).thompson.config.shrink, Some(true));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = thompson::Config {",
          "        reverse: Some(true),",
          "        shrink: Some(false),",
          "        ..Default::default()",
          "    };",
          "    builder.thompson(config);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.thompson.config.reverse, Some(true));",
          "    assert_eq!(builder.thompson.config.shrink, Some(false));",
          "    assert_eq!(builder.thompson.thompson_state.borrow().config.reverse, Some(true));",
          "    assert_eq!(builder.thompson.thompson_state.borrow().config.shrink, Some(false));",
          "    assert!(builder.thompson.thompson_state.borrow().is_configured());",
          "    assert!(builder.thompson.thompson_state.borrow().validate().is_ok());",
          "    assert!(builder.thompson.build(\"pattern\").is_ok());"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = thompson::Config {",
          "        reverse: Some(true),",
          "        shrink: Some(false),",
          "        ..Default::default()",
          "    };",
          "    builder.thompson(config);",
          "    assert_eq!(builder.thompson.config.reverse, Some(true));",
          "    assert_eq!(builder.thompson.config.shrink, Some(false));",
          "    assert_eq!(builder.thompson.thompson_state.borrow().config.reverse, Some(true));",
          "    assert_eq!(builder.thompson.thompson_state.borrow().config.shrink, Some(false));",
          "    assert!(builder.thompson.thompson_state.borrow().is_configured());",
          "    assert!(builder.thompson.thompson_state.borrow().validate().is_ok());",
          "    assert!(builder.thompson.build(\"pattern\").is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = thompson::Config {",
          "        reverse: Some(false),",
          "        shrink: Some(true),",
          "        ..Default::default()",
          "    };",
          "    builder.thompson(config);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.thompson.config.reverse, Some(false));",
          "    assert_eq!(builder.thompson.config.shrink, Some(true));"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = thompson::Config {",
          "        reverse: Some(false),",
          "        shrink: Some(true),",
          "        ..Default::default()",
          "    };",
          "    builder.thompson(config);",
          "    assert_eq!(builder.thompson.config.reverse, Some(false));",
          "    assert_eq!(builder.thompson.config.shrink, Some(true));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = thompson::Config {",
          "        reverse: Some(false),",
          "        shrink: Some(false),",
          "        ..Default::default()",
          "    };",
          "    builder.thompson(config);",
          "}"
        ],
        "oracle": [
          "    let builder = Builder::new();",
          "    let config = thompson::Config {",
          "    reverse: Some(false),",
          "    shrink: Some(false),",
          "    ..Default::default()",
          "    };",
          "    let result = builder.thompson(config);",
          "    assert_eq!(result, &mut builder);"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = thompson::Config {",
          "        reverse: Some(false),",
          "        shrink: Some(false),",
          "        ..Default::default()",
          "    };",
          "    builder.thompson(config);",
          "    let builder = Builder::new();",
          "    let config = thompson::Config {",
          "    reverse: Some(false),",
          "    shrink: Some(false),",
          "    ..Default::default()",
          "    };",
          "    let result = builder.thompson(config);",
          "    assert_eq!(result, &mut builder);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = thompson::Config {",
          "        dfa_size_limit: Some(500),",
          "        ..Default::default()",
          "    };",
          "    builder.thompson(config);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.thompson(config), &mut builder);",
          "    assert!(builder.thompson.thompson.dfa_size_limit == Some(500));",
          "    assert!(builder.thompson.thompson.config.dfa_size_limit.is_none());",
          "    assert!(builder.thompson.thompson.config.reverse.is_none());",
          "    assert!(builder.thompson.thompson.config.shrink.is_none());",
          "    assert!(builder.thompson.thompson.config.utf8.is_none());"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = thompson::Config {",
          "        dfa_size_limit: Some(500),",
          "        ..Default::default()",
          "    };",
          "    builder.thompson(config);",
          "    assert_eq!(builder.thompson(config), &mut builder);",
          "    assert!(builder.thompson.thompson.dfa_size_limit == Some(500));",
          "    assert!(builder.thompson.thompson.config.dfa_size_limit.is_none());",
          "    assert!(builder.thompson.thompson.config.reverse.is_none());",
          "    assert!(builder.thompson.thompson.config.shrink.is_none());",
          "    assert!(builder.thompson.thompson.config.utf8.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = thompson::Config {",
          "        determinize_size_limit: Some(750),",
          "        ..Default::default()",
          "    };",
          "    builder.thompson(config);",
          "}"
        ],
        "oracle": [
          "    builder.thompson(thompson::Config { determinize_size_limit: Some(750), ..Default::default() }) == &mut builder",
          "    builder.thompson(thompson::Config { determinize_size_limit: None, ..Default::default() }) == &mut builder",
          "    builder.thompson(thompson::Config { determinize_size_limit: Some(0), ..Default::default() }) == &mut builder",
          "    builder.thompson(thompson::Config { determinize_size_limit: Some(1000), ..Default::default() }) == &mut builder",
          "    builder.thompson(thompson::Config { determinize_size_limit: Some(500), ..Default::default() }) == &mut builder"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = thompson::Config {",
          "        determinize_size_limit: Some(750),",
          "        ..Default::default()",
          "    };",
          "    builder.thompson(config);",
          "    builder.thompson(thompson::Config { determinize_size_limit: Some(750), ..Default::default() }) == &mut builder",
          "    builder.thompson(thompson::Config { determinize_size_limit: None, ..Default::default() }) == &mut builder",
          "    builder.thompson(thompson::Config { determinize_size_limit: Some(0), ..Default::default() }) == &mut builder",
          "    builder.thompson(thompson::Config { determinize_size_limit: Some(1000), ..Default::default() }) == &mut builder",
          "    builder.thompson(thompson::Config { determinize_size_limit: Some(500), ..Default::default() }) == &mut builder",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = thompson::Config {",
          "        unicode: Some(true),",
          "        ..Default::default()",
          "    };",
          "    builder.thompson(config);",
          "}"
        ],
        "oracle": [
          "    builder.thompson(thompson::Config { unicode: Some(true), ..Default::default() }) == &mut builder"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = thompson::Config {",
          "        unicode: Some(true),",
          "        ..Default::default()",
          "    };",
          "    builder.thompson(config);",
          "    builder.thompson(thompson::Config { unicode: Some(true), ..Default::default() }) == &mut builder",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = thompson::Config {",
          "        unicode: Some(false),",
          "        ..Default::default()",
          "    };",
          "    builder.thompson(config);",
          "}"
        ],
        "oracle": [
          "    assert!(builder.thompson(config).is_some());",
          "    assert_eq!(builder.thompson(config).thompson.config.unicode, Some(false));",
          "    assert_eq!(builder.thompson(config).thompson.config.reverse, None);",
          "    assert_eq!(builder.thompson(config).thompson.config.shrink, None);"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = thompson::Config {",
          "        unicode: Some(false),",
          "        ..Default::default()",
          "    };",
          "    builder.thompson(config);",
          "    assert!(builder.thompson(config).is_some());",
          "    assert_eq!(builder.thompson(config).thompson.config.unicode, Some(false));",
          "    assert_eq!(builder.thompson(config).thompson.config.reverse, None);",
          "    assert_eq!(builder.thompson(config).thompson.config.shrink, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]