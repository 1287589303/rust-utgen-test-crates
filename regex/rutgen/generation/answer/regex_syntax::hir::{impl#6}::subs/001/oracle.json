[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let subs = vec![",
          "        Hir {",
          "            kind: HirKind::Literal(Literal {",
          "                bytes: vec![b'a', b'b', b'c'],",
          "                exact: true,",
          "            }),",
          "            props: Properties::default(),",
          "        },",
          "        Hir {",
          "            kind: HirKind::Literal(Literal {",
          "                bytes: vec![b'd', b'e', b'f'],",
          "                exact: true,",
          "            }),",
          "            props: Properties::default(),",
          "        },",
          "    ];",
          "    let alternation = HirKind::Alternation(subs);",
          "    alternation.subs();",
          "}"
        ],
        "oracle": [
          "    let subs = alternation.subs();",
          "    assert_eq!(subs.len(), 2);",
          "    assert_eq!(subs[0].kind, HirKind::Literal(Literal { bytes: vec![b'a', b'b', b'c'], exact: true }));",
          "    assert_eq!(subs[1].kind, HirKind::Literal(Literal { bytes: vec![b'd', b'e', b'f'], exact: true }));",
          "    assert!(subs.iter().all(|sub| matches!(sub.kind, HirKind::Literal(_))));",
          "    assert!(subs.iter().any(|sub| matches!(sub.kind, HirKind::Literal(Literal { bytes, .. }) if bytes == &[b'a', b'b', b'c'])));",
          "    assert!(subs.iter().any(|sub| matches!(sub.kind, HirKind::Literal(Literal { bytes, .. }) if bytes == &[b'd', b'e', b'f'])));"
        ],
        "code": [
          "{",
          "    let subs = vec![",
          "        Hir {",
          "            kind: HirKind::Literal(Literal {",
          "                bytes: vec![b'a', b'b', b'c'],",
          "                exact: true,",
          "            }),",
          "            props: Properties::default(),",
          "        },",
          "        Hir {",
          "            kind: HirKind::Literal(Literal {",
          "                bytes: vec![b'd', b'e', b'f'],",
          "                exact: true,",
          "            }),",
          "            props: Properties::default(),",
          "        },",
          "    ];",
          "    let alternation = HirKind::Alternation(subs);",
          "    alternation.subs();",
          "    let subs = alternation.subs();",
          "    assert_eq!(subs.len(), 2);",
          "    assert_eq!(subs[0].kind, HirKind::Literal(Literal { bytes: vec![b'a', b'b', b'c'], exact: true }));",
          "    assert_eq!(subs[1].kind, HirKind::Literal(Literal { bytes: vec![b'd', b'e', b'f'], exact: true }));",
          "    assert!(subs.iter().all(|sub| matches!(sub.kind, HirKind::Literal(_))));",
          "    assert!(subs.iter().any(|sub| matches!(sub.kind, HirKind::Literal(Literal { bytes, .. }) if bytes == &[b'a', b'b', b'c'])));",
          "    assert!(subs.iter().any(|sub| matches!(sub.kind, HirKind::Literal(Literal { bytes, .. }) if bytes == &[b'd', b'e', b'f'])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let subs = vec![",
          "        Hir {",
          "            kind: HirKind::Repetition(Repetition {",
          "                min: 1,",
          "                max: Some(3),",
          "                greedy: true,",
          "                sub: Box::new(Hir {",
          "                    kind: HirKind::Literal(Literal {",
          "                        bytes: vec![b'x', b'y'],",
          "                        exact: false,",
          "                    }),",
          "                    props: Properties::default(),",
          "                }),",
          "            }),",
          "            props: Properties::default(),",
          "        },",
          "        Hir {",
          "            kind: HirKind::Repetition(Repetition {",
          "                min: 0,",
          "                max: None,",
          "                greedy: false,",
          "                sub: Box::new(Hir {",
          "                    kind: HirKind::Class(Class::Unicode(ClassUnicode::new())),",
          "                    props: Properties::default(),",
          "                }),",
          "            }),",
          "            props: Properties::default(),",
          "        },",
          "    ];",
          "    let alternation = HirKind::Alternation(subs);",
          "    alternation.subs();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(alternation.subs().len(), 2);",
          "    assert!(matches!(alternation.subs()[0].kind, HirKind::Repetition(_)));",
          "    assert!(matches!(alternation.subs()[1].kind, HirKind::Repetition(_)));",
          "    assert_eq!(alternation.subs()[0].props, Properties::default());",
          "    assert_eq!(alternation.subs()[1].props, Properties::default());"
        ],
        "code": [
          "{",
          "    let subs = vec![",
          "        Hir {",
          "            kind: HirKind::Repetition(Repetition {",
          "                min: 1,",
          "                max: Some(3),",
          "                greedy: true,",
          "                sub: Box::new(Hir {",
          "                    kind: HirKind::Literal(Literal {",
          "                        bytes: vec![b'x', b'y'],",
          "                        exact: false,",
          "                    }),",
          "                    props: Properties::default(),",
          "                }),",
          "            }),",
          "            props: Properties::default(),",
          "        },",
          "        Hir {",
          "            kind: HirKind::Repetition(Repetition {",
          "                min: 0,",
          "                max: None,",
          "                greedy: false,",
          "                sub: Box::new(Hir {",
          "                    kind: HirKind::Class(Class::Unicode(ClassUnicode::new())),",
          "                    props: Properties::default(),",
          "                }),",
          "            }),",
          "            props: Properties::default(),",
          "        },",
          "    ];",
          "    let alternation = HirKind::Alternation(subs);",
          "    alternation.subs();",
          "    assert_eq!(alternation.subs().len(), 2);",
          "    assert!(matches!(alternation.subs()[0].kind, HirKind::Repetition(_)));",
          "    assert!(matches!(alternation.subs()[1].kind, HirKind::Repetition(_)));",
          "    assert_eq!(alternation.subs()[0].props, Properties::default());",
          "    assert_eq!(alternation.subs()[1].props, Properties::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let subs = vec![",
          "        Hir {",
          "            kind: HirKind::Literal(Literal {",
          "                bytes: vec![b'1', b'2', b'3'],",
          "                exact: true,",
          "            }),",
          "            props: Properties::default(),",
          "        },",
          "        Hir {",
          "            kind: HirKind::Capture(Capture {",
          "                index: 0,",
          "                name: None,",
          "                sub: Box::new(Hir {",
          "                    kind: HirKind::Concat(vec![",
          "                        Hir {",
          "                            kind: HirKind::Literal(Literal {",
          "                                bytes: vec![b'a', b'b'],",
          "                                exact: true,",
          "                            }),",
          "                            props: Properties::default(),",
          "                        },",
          "                        Hir {",
          "                            kind: HirKind::Class(Class::Bytes(ClassBytes::new())),",
          "                            props: Properties::default(),",
          "                        },",
          "                    ]),",
          "                    props: Properties::default(),",
          "                }),",
          "            }),",
          "            props: Properties::default(),",
          "        },",
          "    ];",
          "    let alternation = HirKind::Alternation(subs);",
          "    alternation.subs();",
          "}"
        ],
        "oracle": [
          "    let subs = vec![Hir { kind: HirKind::Literal(Literal { bytes: vec![b'1', b'2', b'3'], exact: true }), props: Properties::default() }, Hir { kind: HirKind::Capture(Capture { index: 0, name: None, sub: Box::new(Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal { bytes: vec![b'a', b'b'], exact: true }), props: Properties::default() }, Hir { kind: HirKind::Class(Class::Bytes(ClassBytes::new())), props: Properties::default() }]), props: Properties::default() }) }), props: Properties::default() }]; let alternation = HirKind::Alternation(subs); assert_eq!(alternation.subs(), &subs);"
        ],
        "code": [
          "{",
          "    let subs = vec![",
          "        Hir {",
          "            kind: HirKind::Literal(Literal {",
          "                bytes: vec![b'1', b'2', b'3'],",
          "                exact: true,",
          "            }),",
          "            props: Properties::default(),",
          "        },",
          "        Hir {",
          "            kind: HirKind::Capture(Capture {",
          "                index: 0,",
          "                name: None,",
          "                sub: Box::new(Hir {",
          "                    kind: HirKind::Concat(vec![",
          "                        Hir {",
          "                            kind: HirKind::Literal(Literal {",
          "                                bytes: vec![b'a', b'b'],",
          "                                exact: true,",
          "                            }),",
          "                            props: Properties::default(),",
          "                        },",
          "                        Hir {",
          "                            kind: HirKind::Class(Class::Bytes(ClassBytes::new())),",
          "                            props: Properties::default(),",
          "                        },",
          "                    ]),",
          "                    props: Properties::default(),",
          "                }),",
          "            }),",
          "            props: Properties::default(),",
          "        },",
          "    ];",
          "    let alternation = HirKind::Alternation(subs);",
          "    alternation.subs();",
          "    let subs = vec![Hir { kind: HirKind::Literal(Literal { bytes: vec![b'1', b'2', b'3'], exact: true }), props: Properties::default() }, Hir { kind: HirKind::Capture(Capture { index: 0, name: None, sub: Box::new(Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal { bytes: vec![b'a', b'b'], exact: true }), props: Properties::default() }, Hir { kind: HirKind::Class(Class::Bytes(ClassBytes::new())), props: Properties::default() }]), props: Properties::default() }) }), props: Properties::default() }]; let alternation = HirKind::Alternation(subs); assert_eq!(alternation.subs(), &subs);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let subs: Vec<Hir> = vec![];",
          "    let alternation = HirKind::Alternation(subs);",
          "    alternation.subs();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(alternation.subs(), &[]);"
        ],
        "code": [
          "{",
          "    let subs: Vec<Hir> = vec![];",
          "    let alternation = HirKind::Alternation(subs);",
          "    alternation.subs();",
          "    assert_eq!(alternation.subs(), &[]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]