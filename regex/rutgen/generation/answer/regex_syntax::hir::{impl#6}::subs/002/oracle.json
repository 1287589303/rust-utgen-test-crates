[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub1 = Hir {",
          "        kind: HirKind::Literal(Literal(vec![b'a'])),",
          "        props: Properties::default(),",
          "    };",
          "    let sub2 = Hir {",
          "        kind: HirKind::Literal(Literal(vec![b'b'])),",
          "        props: Properties::default(),",
          "    };",
          "    let subs = vec![sub1, sub2];",
          "",
          "    let kind = HirKind::Concat(subs.clone());",
          "    let hir = Hir {",
          "        kind,",
          "        props: Properties::default(),",
          "    };",
          "    ",
          "    let _ = hir.subs();",
          "}"
        ],
        "oracle": [
          "    let sub1 = Hir { kind: HirKind::Literal(Literal(vec![b'a'])), props: Properties::default() };",
          "    let sub2 = Hir { kind: HirKind::Literal(Literal(vec![b'b'])), props: Properties::default() };",
          "    let subs = vec![sub1.clone(), sub2.clone()];",
          "    let kind = HirKind::Concat(subs);",
          "    let hir = Hir { kind, props: Properties::default() };",
          "    let result = hir.subs();",
          "    assert_eq!(result, &subs);"
        ],
        "code": [
          "{",
          "    let sub1 = Hir {",
          "        kind: HirKind::Literal(Literal(vec![b'a'])),",
          "        props: Properties::default(),",
          "    };",
          "    let sub2 = Hir {",
          "        kind: HirKind::Literal(Literal(vec![b'b'])),",
          "        props: Properties::default(),",
          "    };",
          "    let subs = vec![sub1, sub2];",
          "",
          "    let kind = HirKind::Concat(subs.clone());",
          "    let hir = Hir {",
          "        kind,",
          "        props: Properties::default(),",
          "    };",
          "    ",
          "    let _ = hir.subs();",
          "    let sub1 = Hir { kind: HirKind::Literal(Literal(vec![b'a'])), props: Properties::default() };",
          "    let sub2 = Hir { kind: HirKind::Literal(Literal(vec![b'b'])), props: Properties::default() };",
          "    let subs = vec![sub1.clone(), sub2.clone()];",
          "    let kind = HirKind::Concat(subs);",
          "    let hir = Hir { kind, props: Properties::default() };",
          "    let result = hir.subs();",
          "    assert_eq!(result, &subs);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub1 = Hir {",
          "        kind: HirKind::Literal(Literal(vec![b'c'])),",
          "        props: Properties::default(),",
          "    };",
          "    let sub2 = Hir {",
          "        kind: HirKind::Literal(Literal(vec![b'd'])),",
          "        props: Properties::default(),",
          "    };",
          "    let sub3 = Hir {",
          "        kind: HirKind::Literal(Literal(vec![b'e'])),",
          "        props: Properties::default(),",
          "    };",
          "    let subs = vec![sub1, sub2, sub3];",
          "",
          "    let kind = HirKind::Concat(subs.clone());",
          "    let hir = Hir {",
          "        kind,",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let _ = hir.subs();",
          "}"
        ],
        "oracle": [
          "    let sub1 = Hir { kind: HirKind::Literal(Literal(vec![b'c'])), props: Properties::default() };",
          "    let sub2 = Hir { kind: HirKind::Literal(Literal(vec![b'd'])), props: Properties::default() };",
          "    let sub3 = Hir { kind: HirKind::Literal(Literal(vec![b'e'])), props: Properties::default() };",
          "    let subs = vec![sub1, sub2, sub3];",
          "    let kind = HirKind::Concat(subs.clone());",
          "    let hir = Hir { kind, props: Properties::default() };",
          "    let result = hir.subs();",
          "    assert_eq!(result, &subs);"
        ],
        "code": [
          "{",
          "    let sub1 = Hir {",
          "        kind: HirKind::Literal(Literal(vec![b'c'])),",
          "        props: Properties::default(),",
          "    };",
          "    let sub2 = Hir {",
          "        kind: HirKind::Literal(Literal(vec![b'd'])),",
          "        props: Properties::default(),",
          "    };",
          "    let sub3 = Hir {",
          "        kind: HirKind::Literal(Literal(vec![b'e'])),",
          "        props: Properties::default(),",
          "    };",
          "    let subs = vec![sub1, sub2, sub3];",
          "",
          "    let kind = HirKind::Concat(subs.clone());",
          "    let hir = Hir {",
          "        kind,",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let _ = hir.subs();",
          "    let sub1 = Hir { kind: HirKind::Literal(Literal(vec![b'c'])), props: Properties::default() };",
          "    let sub2 = Hir { kind: HirKind::Literal(Literal(vec![b'd'])), props: Properties::default() };",
          "    let sub3 = Hir { kind: HirKind::Literal(Literal(vec![b'e'])), props: Properties::default() };",
          "    let subs = vec![sub1, sub2, sub3];",
          "    let kind = HirKind::Concat(subs.clone());",
          "    let hir = Hir { kind, props: Properties::default() };",
          "    let result = hir.subs();",
          "    assert_eq!(result, &subs);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub1 = Hir {",
          "        kind: HirKind::Literal(Literal(vec![b'f'])),",
          "        props: Properties::default(),",
          "    };",
          "    let sub2 = Hir {",
          "        kind: HirKind::Literal(Literal(vec![])),",
          "        props: Properties::default(),",
          "    };",
          "    let subs = vec![sub1, sub2];",
          "",
          "    let kind = HirKind::Concat(subs.clone());",
          "    let hir = Hir {",
          "        kind,",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let _ = hir.subs();",
          "}"
        ],
        "oracle": [
          "    let sub1 = Hir { kind: HirKind::Literal(Literal(vec![b'f'])), props: Properties::default() };",
          "    let sub2 = Hir { kind: HirKind::Literal(Literal(vec![])), props: Properties::default() };",
          "    let subs = vec![sub1.clone(), sub2.clone()];",
          "    let kind = HirKind::Concat(subs.clone());",
          "    let hir = Hir { kind, props: Properties::default() };",
          "    assert_eq!(hir.subs(), &subs);"
        ],
        "code": [
          "{",
          "    let sub1 = Hir {",
          "        kind: HirKind::Literal(Literal(vec![b'f'])),",
          "        props: Properties::default(),",
          "    };",
          "    let sub2 = Hir {",
          "        kind: HirKind::Literal(Literal(vec![])),",
          "        props: Properties::default(),",
          "    };",
          "    let subs = vec![sub1, sub2];",
          "",
          "    let kind = HirKind::Concat(subs.clone());",
          "    let hir = Hir {",
          "        kind,",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let _ = hir.subs();",
          "    let sub1 = Hir { kind: HirKind::Literal(Literal(vec![b'f'])), props: Properties::default() };",
          "    let sub2 = Hir { kind: HirKind::Literal(Literal(vec![])), props: Properties::default() };",
          "    let subs = vec![sub1.clone(), sub2.clone()];",
          "    let kind = HirKind::Concat(subs.clone());",
          "    let hir = Hir { kind, props: Properties::default() };",
          "    assert_eq!(hir.subs(), &subs);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]