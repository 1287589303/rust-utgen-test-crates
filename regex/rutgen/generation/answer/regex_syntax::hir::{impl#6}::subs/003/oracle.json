[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub_hir = Hir {",
          "        kind: HirKind::Literal(Literal(Box::new(b\"test\".to_vec()))),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let capture = Capture {",
          "        index: 0,",
          "        name: Some(Box::from(\"name\")),",
          "        sub: Box::new(sub_hir),",
          "    };",
          "",
          "    let hir_capture = Hir {",
          "        kind: HirKind::Capture(capture),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let _subs = hir_capture.subs();",
          "}"
        ],
        "oracle": [
          "    let sub_hir = Hir { kind: HirKind::Literal(Literal(Box::new(b\"test\".to_vec()))), props: Properties::default() };",
          "    let capture = Capture { index: 0, name: Some(Box::from(\"name\")), sub: Box::new(sub_hir) };",
          "    let hir_capture = Hir { kind: HirKind::Capture(capture), props: Properties::default() };",
          "    let subs_result = hir_capture.subs();",
          "    assert_eq!(subs_result.len(), 1);",
          "    assert_eq!(subs_result[0].kind, HirKind::Literal(Literal(Box::new(b\"test\".to_vec()))));"
        ],
        "code": [
          "{",
          "    let sub_hir = Hir {",
          "        kind: HirKind::Literal(Literal(Box::new(b\"test\".to_vec()))),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let capture = Capture {",
          "        index: 0,",
          "        name: Some(Box::from(\"name\")),",
          "        sub: Box::new(sub_hir),",
          "    };",
          "",
          "    let hir_capture = Hir {",
          "        kind: HirKind::Capture(capture),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let _subs = hir_capture.subs();",
          "    let sub_hir = Hir { kind: HirKind::Literal(Literal(Box::new(b\"test\".to_vec()))), props: Properties::default() };",
          "    let capture = Capture { index: 0, name: Some(Box::from(\"name\")), sub: Box::new(sub_hir) };",
          "    let hir_capture = Hir { kind: HirKind::Capture(capture), props: Properties::default() };",
          "    let subs_result = hir_capture.subs();",
          "    assert_eq!(subs_result.len(), 1);",
          "    assert_eq!(subs_result[0].kind, HirKind::Literal(Literal(Box::new(b\"test\".to_vec()))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub_hir_1 = Hir {",
          "        kind: HirKind::Literal(Literal(Box::new(b\"first\".to_vec()))),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let sub_hir_2 = Hir {",
          "        kind: HirKind::Literal(Literal(Box::new(b\"second\".to_vec()))),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let capture = Capture {",
          "        index: 1,",
          "        name: None,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Concat(vec![sub_hir_1, sub_hir_2]),",
          "            props: Properties::default(),",
          "        }),",
          "    };",
          "",
          "    let hir_capture = Hir {",
          "        kind: HirKind::Capture(capture),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let _subs = hir_capture.subs();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(*hir_capture.subs(), vec![Hir {",
          "    kind: HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal(Box::new(b\"first\".to_vec()))),",
          "    props: Properties::default(),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Literal(Literal(Box::new(b\"second\".to_vec()))),",
          "    props: Properties::default(),",
          "    }",
          "    ]),",
          "    props: Properties::default(),",
          "    }]);"
        ],
        "code": [
          "{",
          "    let sub_hir_1 = Hir {",
          "        kind: HirKind::Literal(Literal(Box::new(b\"first\".to_vec()))),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let sub_hir_2 = Hir {",
          "        kind: HirKind::Literal(Literal(Box::new(b\"second\".to_vec()))),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let capture = Capture {",
          "        index: 1,",
          "        name: None,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Concat(vec![sub_hir_1, sub_hir_2]),",
          "            props: Properties::default(),",
          "        }),",
          "    };",
          "",
          "    let hir_capture = Hir {",
          "        kind: HirKind::Capture(capture),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let _subs = hir_capture.subs();",
          "    assert_eq!(*hir_capture.subs(), vec![Hir {",
          "    kind: HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal(Box::new(b\"first\".to_vec()))),",
          "    props: Properties::default(),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Literal(Literal(Box::new(b\"second\".to_vec()))),",
          "    props: Properties::default(),",
          "    }",
          "    ]),",
          "    props: Properties::default(),",
          "    }]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]