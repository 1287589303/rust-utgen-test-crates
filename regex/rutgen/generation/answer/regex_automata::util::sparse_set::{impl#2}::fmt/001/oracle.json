[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sparse_set = SparseSet::new(0);",
          "    let _ = format!(\"{:?}\", sparse_set);",
          "}"
        ],
        "oracle": [
          "    let sparse_set = SparseSet::new(0);",
          "    assert_eq!(sparse_set.len(), 0);",
          "    assert!(sparse_set.is_empty());",
          "    assert_eq!(format!(\"{:?}\", sparse_set), \"SparseSet([])\");",
          "    sparse_set.clear();",
          "    assert_eq!(sparse_set.capacity(), 0);"
        ],
        "code": [
          "{",
          "    let sparse_set = SparseSet::new(0);",
          "    let _ = format!(\"{:?}\", sparse_set);",
          "    let sparse_set = SparseSet::new(0);",
          "    assert_eq!(sparse_set.len(), 0);",
          "    assert!(sparse_set.is_empty());",
          "    assert_eq!(format!(\"{:?}\", sparse_set), \"SparseSet([])\");",
          "    sparse_set.clear();",
          "    assert_eq!(sparse_set.capacity(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sparse_set = SparseSet::new(1);",
          "    let state_id = StateID(0);",
          "    sparse_set.insert(state_id);",
          "    let _ = format!(\"{:?}\", sparse_set);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sparse_set.len(), 1);",
          "    assert_eq!(sparse_set.capacity(), 1);",
          "    assert!(sparse_set.contains(state_id));",
          "    assert!(!sparse_set.is_empty());",
          "    assert_eq!(format!(\"{:?}\", sparse_set), \"SparseSet([StateID(0)])\");"
        ],
        "code": [
          "{",
          "    let mut sparse_set = SparseSet::new(1);",
          "    let state_id = StateID(0);",
          "    sparse_set.insert(state_id);",
          "    let _ = format!(\"{:?}\", sparse_set);",
          "    assert_eq!(sparse_set.len(), 1);",
          "    assert_eq!(sparse_set.capacity(), 1);",
          "    assert!(sparse_set.contains(state_id));",
          "    assert!(!sparse_set.is_empty());",
          "    assert_eq!(format!(\"{:?}\", sparse_set), \"SparseSet([StateID(0)])\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let capacity = 256; // Example capacity",
          "    let mut sparse_set = SparseSet::new(capacity);",
          "    for i in 0..capacity {",
          "        let state_id = StateID(i);",
          "        sparse_set.insert(state_id);",
          "    }",
          "    let _ = format!(\"{:?}\", sparse_set);",
          "}"
        ],
        "oracle": [
          "    let capacity = 256;",
          "    let mut sparse_set = SparseSet::new(capacity);",
          "    assert_eq!(sparse_set.len(), 0);",
          "    assert_eq!(sparse_set.capacity(), capacity);",
          "    assert!(sparse_set.is_empty());",
          "    for i in 0..capacity {",
          "    let state_id = StateID(i);",
          "    assert!(sparse_set.insert(state_id));",
          "    assert!(sparse_set.contains(state_id));",
          "    }",
          "    assert_eq!(sparse_set.len(), capacity);",
          "    assert!(!sparse_set.is_empty());",
          "    let formatted_output = format!(\"{:?}\", sparse_set);",
          "    assert!(formatted_output.contains(\"SparseSet\"));",
          "    assert!(formatted_output.contains(\"StateID\"));",
          "    sparse_set.clear();",
          "    assert_eq!(sparse_set.len(), 0);",
          "    assert!(sparse_set.is_empty());"
        ],
        "code": [
          "{",
          "    let capacity = 256; // Example capacity",
          "    let mut sparse_set = SparseSet::new(capacity);",
          "    for i in 0..capacity {",
          "        let state_id = StateID(i);",
          "        sparse_set.insert(state_id);",
          "    }",
          "    let _ = format!(\"{:?}\", sparse_set);",
          "    let capacity = 256;",
          "    let mut sparse_set = SparseSet::new(capacity);",
          "    assert_eq!(sparse_set.len(), 0);",
          "    assert_eq!(sparse_set.capacity(), capacity);",
          "    assert!(sparse_set.is_empty());",
          "    for i in 0..capacity {",
          "    let state_id = StateID(i);",
          "    assert!(sparse_set.insert(state_id));",
          "    assert!(sparse_set.contains(state_id));",
          "    }",
          "    assert_eq!(sparse_set.len(), capacity);",
          "    assert!(!sparse_set.is_empty());",
          "    let formatted_output = format!(\"{:?}\", sparse_set);",
          "    assert!(formatted_output.contains(\"SparseSet\"));",
          "    assert!(formatted_output.contains(\"StateID\"));",
          "    sparse_set.clear();",
          "    assert_eq!(sparse_set.len(), 0);",
          "    assert!(sparse_set.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let capacity = StateID::MAX as usize + 1; // Assuming StateID::MAX is defined",
          "    let mut sparse_set = SparseSet::new(capacity);",
          "    for i in 0..StateID::MAX as usize {",
          "        let state_id = StateID(i);",
          "        sparse_set.insert(state_id);",
          "    }",
          "    let _ = format!(\"{:?}\", sparse_set);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(SparseSet::new(StateID::MAX as usize + 1).len(), 0);",
          "    assert!(SparseSet::new(StateID::MAX as usize + 1).is_empty());",
          "    let mut sparse_set = SparseSet::new(StateID::MAX as usize + 1);",
          "    for i in 0..StateID::MAX as usize {",
          "    let state_id = StateID(i);",
          "    assert!(sparse_set.insert(state_id));",
          "    }",
          "    assert_eq!(sparse_set.len(), StateID::MAX as usize);",
          "    assert_eq!(format!(\"{:?}\", sparse_set), format!(\"{:?}\", sparse_set.iter().collect::<Vec<_>>()));",
          "    assert!(!sparse_set.is_empty());",
          "    assert_eq!(sparse_set.capacity(), StateID::MAX as usize + 1);",
          "    sparse_set.clear();",
          "    assert_eq!(sparse_set.len(), 0);",
          "    assert!(sparse_set.is_empty());"
        ],
        "code": [
          "{",
          "    let capacity = StateID::MAX as usize + 1; // Assuming StateID::MAX is defined",
          "    let mut sparse_set = SparseSet::new(capacity);",
          "    for i in 0..StateID::MAX as usize {",
          "        let state_id = StateID(i);",
          "        sparse_set.insert(state_id);",
          "    }",
          "    let _ = format!(\"{:?}\", sparse_set);",
          "    assert_eq!(SparseSet::new(StateID::MAX as usize + 1).len(), 0);",
          "    assert!(SparseSet::new(StateID::MAX as usize + 1).is_empty());",
          "    let mut sparse_set = SparseSet::new(StateID::MAX as usize + 1);",
          "    for i in 0..StateID::MAX as usize {",
          "    let state_id = StateID(i);",
          "    assert!(sparse_set.insert(state_id));",
          "    }",
          "    assert_eq!(sparse_set.len(), StateID::MAX as usize);",
          "    assert_eq!(format!(\"{:?}\", sparse_set), format!(\"{:?}\", sparse_set.iter().collect::<Vec<_>>()));",
          "    assert!(!sparse_set.is_empty());",
          "    assert_eq!(sparse_set.capacity(), StateID::MAX as usize + 1);",
          "    sparse_set.clear();",
          "    assert_eq!(sparse_set.len(), 0);",
          "    assert!(sparse_set.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]