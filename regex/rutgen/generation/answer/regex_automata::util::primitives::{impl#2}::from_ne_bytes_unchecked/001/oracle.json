[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: [u8; 4] = [0, 0, 0, 0];",
          "    let result = SmallIndex::from_ne_bytes_unchecked(bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.as_usize(), 0);",
          "    assert_eq!(result.as_u32(), 0);",
          "    assert_eq!(result.as_i32(), 0);",
          "    assert_eq!(result.to_ne_bytes(), [0, 0, 0, 0]);",
          "    assert_eq!(result, SmallIndex::ZERO);"
        ],
        "code": [
          "{",
          "    let bytes: [u8; 4] = [0, 0, 0, 0];",
          "    let result = SmallIndex::from_ne_bytes_unchecked(bytes);",
          "    assert_eq!(result.as_usize(), 0);",
          "    assert_eq!(result.as_u32(), 0);",
          "    assert_eq!(result.as_i32(), 0);",
          "    assert_eq!(result.to_ne_bytes(), [0, 0, 0, 0]);",
          "    assert_eq!(result, SmallIndex::ZERO);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: [u8; 4] = [255, 255, 255, 255];",
          "    let result = SmallIndex::from_ne_bytes_unchecked(bytes);",
          "}"
        ],
        "oracle": [
          "    let bytes: [u8; 4] = [255, 255, 255, 255];",
          "    let result: SmallIndex = SmallIndex::new_unchecked(core::u32::MAX as usize);",
          "    assert_eq!(result, SmallIndex::from_ne_bytes_unchecked(bytes));",
          "    assert_eq!(result.as_usize(), core::u32::MAX as usize);"
        ],
        "code": [
          "{",
          "    let bytes: [u8; 4] = [255, 255, 255, 255];",
          "    let result = SmallIndex::from_ne_bytes_unchecked(bytes);",
          "    let bytes: [u8; 4] = [255, 255, 255, 255];",
          "    let result: SmallIndex = SmallIndex::new_unchecked(core::u32::MAX as usize);",
          "    assert_eq!(result, SmallIndex::from_ne_bytes_unchecked(bytes));",
          "    assert_eq!(result.as_usize(), core::u32::MAX as usize);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: [u8; 4] = [0, 1, 2, 3];",
          "    let result = SmallIndex::from_ne_bytes_unchecked(bytes);",
          "}"
        ],
        "oracle": [
          "    let bytes: [u8; 4] = [0, 1, 2, 3];",
          "    let expected_value = SmallIndex::new_unchecked(0u32.from_ne_bytes(bytes).as_usize());",
          "    assert_eq!(result, expected_value);",
          "    let bytes: [u8; 4] = [255, 255, 255, 255];",
          "    let expected_value = SmallIndex::new_unchecked(0u32.from_ne_bytes(bytes).as_usize());",
          "    assert_eq!(result, expected_value);",
          "    let bytes: [u8; 4] = [0, 0, 0, 0];",
          "    let expected_value = SmallIndex::new_unchecked(0u32.from_ne_bytes(bytes).as_usize());",
          "    assert_eq!(result, expected_value);",
          "    let bytes: [u8; 4] = [128, 0, 0, 0];",
          "    let expected_value = SmallIndex::new_unchecked(0u32.from_ne_bytes(bytes).as_usize());",
          "    assert_eq!(result, expected_value);"
        ],
        "code": [
          "{",
          "    let bytes: [u8; 4] = [0, 1, 2, 3];",
          "    let result = SmallIndex::from_ne_bytes_unchecked(bytes);",
          "    let bytes: [u8; 4] = [0, 1, 2, 3];",
          "    let expected_value = SmallIndex::new_unchecked(0u32.from_ne_bytes(bytes).as_usize());",
          "    assert_eq!(result, expected_value);",
          "    let bytes: [u8; 4] = [255, 255, 255, 255];",
          "    let expected_value = SmallIndex::new_unchecked(0u32.from_ne_bytes(bytes).as_usize());",
          "    assert_eq!(result, expected_value);",
          "    let bytes: [u8; 4] = [0, 0, 0, 0];",
          "    let expected_value = SmallIndex::new_unchecked(0u32.from_ne_bytes(bytes).as_usize());",
          "    assert_eq!(result, expected_value);",
          "    let bytes: [u8; 4] = [128, 0, 0, 0];",
          "    let expected_value = SmallIndex::new_unchecked(0u32.from_ne_bytes(bytes).as_usize());",
          "    assert_eq!(result, expected_value);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: [u8; 4] = [127, 0, 0, 1];",
          "    let result = SmallIndex::from_ne_bytes_unchecked(bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.as_usize(), 16843009);",
          "    assert_eq!(result.as_u32(), 16843009);",
          "    assert_eq!(result.as_i32(), 16843009);",
          "    assert_eq!(result.to_ne_bytes(), [127, 0, 0, 1]);"
        ],
        "code": [
          "{",
          "    let bytes: [u8; 4] = [127, 0, 0, 1];",
          "    let result = SmallIndex::from_ne_bytes_unchecked(bytes);",
          "    assert_eq!(result.as_usize(), 16843009);",
          "    assert_eq!(result.as_u32(), 16843009);",
          "    assert_eq!(result.as_i32(), 16843009);",
          "    assert_eq!(result.to_ne_bytes(), [127, 0, 0, 1]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: [u8; 4] = [0, 0, 255, 255];",
          "    let result = SmallIndex::from_ne_bytes_unchecked(bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.as_usize(), 65535);",
          "    assert_eq!(result.as_u32(), 65535);",
          "    assert_eq!(result.as_i32(), 65535);",
          "    assert_eq!(result.to_ne_bytes(), [0, 0, 255, 255]);"
        ],
        "code": [
          "{",
          "    let bytes: [u8; 4] = [0, 0, 255, 255];",
          "    let result = SmallIndex::from_ne_bytes_unchecked(bytes);",
          "    assert_eq!(result.as_usize(), 65535);",
          "    assert_eq!(result.as_u32(), 65535);",
          "    assert_eq!(result.as_i32(), 65535);",
          "    assert_eq!(result.to_ne_bytes(), [0, 0, 255, 255]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]