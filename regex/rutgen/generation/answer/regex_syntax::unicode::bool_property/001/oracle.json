[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let canonical_name: &'static str = \"Decimal_Number\";",
          "    let result = bool_property(canonical_name);",
          "}"
        ],
        "oracle": [
          "    result.is_ok();",
          "    let class_unicode = result.unwrap();",
          "    assert_eq!(class_unicode, expected_class_unicode);",
          "    assert!(matches!(result, Ok(_)));",
          "    assert_ne!(result, Err(Error::PropertyNotFound));"
        ],
        "code": [
          "{",
          "    let canonical_name: &'static str = \"Decimal_Number\";",
          "    let result = bool_property(canonical_name);",
          "    result.is_ok();",
          "    let class_unicode = result.unwrap();",
          "    assert_eq!(class_unicode, expected_class_unicode);",
          "    assert!(matches!(result, Ok(_)));",
          "    assert_ne!(result, Err(Error::PropertyNotFound));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let canonical_name: &'static str = \"Non_Existent_Property\";",
          "    let result = bool_property(canonical_name);",
          "}"
        ],
        "oracle": [
          "    let canonical_name: &'static str = \"Decimal_Number\";",
          "    let result = bool_property(canonical_name);",
          "    assert!(result.is_ok());",
          "    let class_unicode = result.unwrap();",
          "    assert_eq!(class_unicode, hir_class(DECIMAL_NUMBER));"
        ],
        "code": [
          "{",
          "    let canonical_name: &'static str = \"Non_Existent_Property\";",
          "    let result = bool_property(canonical_name);",
          "    let canonical_name: &'static str = \"Decimal_Number\";",
          "    let result = bool_property(canonical_name);",
          "    assert!(result.is_ok());",
          "    let class_unicode = result.unwrap();",
          "    assert_eq!(class_unicode, hir_class(DECIMAL_NUMBER));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]