[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lit = Literal(vec![b'a']).len();",
          "    let seq = Seq {",
          "        literals: Some(vec![lit]),",
          "    };",
          "    seq.max_literal_len();",
          "}"
        ],
        "oracle": [
          "    seq.literals = Some(vec![Literal(vec![b'a'])]);",
          "    assert_eq!(seq.max_literal_len(), Some(1));",
          "    ",
          "    seq.literals = Some(vec![Literal(vec![b'a', b'b'])]);",
          "    assert_eq!(seq.max_literal_len(), Some(2));",
          "    ",
          "    seq.literals = Some(vec![Literal(vec![b'a']), Literal(vec![b'b', b'c'])]);",
          "    assert_eq!(seq.max_literal_len(), Some(3));",
          "    ",
          "    seq.literals = Some(vec![Literal(vec![])]);",
          "    assert_eq!(seq.max_literal_len(), Some(0));",
          "    ",
          "    seq.literals = None;",
          "    assert_eq!(seq.max_literal_len(), None);",
          "    ",
          "    seq.literals = Some(vec![Literal(vec![b'x', b'y', b'z']), Literal(vec![b'1', b'2'])]);",
          "    assert_eq!(seq.max_literal_len(), Some(3));"
        ],
        "code": [
          "{",
          "    let lit = Literal(vec![b'a']).len();",
          "    let seq = Seq {",
          "        literals: Some(vec![lit]),",
          "    };",
          "    seq.max_literal_len();",
          "    seq.literals = Some(vec![Literal(vec![b'a'])]);",
          "    assert_eq!(seq.max_literal_len(), Some(1));",
          "    ",
          "    seq.literals = Some(vec![Literal(vec![b'a', b'b'])]);",
          "    assert_eq!(seq.max_literal_len(), Some(2));",
          "    ",
          "    seq.literals = Some(vec![Literal(vec![b'a']), Literal(vec![b'b', b'c'])]);",
          "    assert_eq!(seq.max_literal_len(), Some(3));",
          "    ",
          "    seq.literals = Some(vec![Literal(vec![])]);",
          "    assert_eq!(seq.max_literal_len(), Some(0));",
          "    ",
          "    seq.literals = None;",
          "    assert_eq!(seq.max_literal_len(), None);",
          "    ",
          "    seq.literals = Some(vec![Literal(vec![b'x', b'y', b'z']), Literal(vec![b'1', b'2'])]);",
          "    assert_eq!(seq.max_literal_len(), Some(3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lit1 = Literal(vec![b'a', b'b']).len();",
          "    let lit2 = Literal(vec![b'c']).len();",
          "    let lit3 = Literal(vec![b'd', b'e', b'f']).len();",
          "    let seq = Seq {",
          "        literals: Some(vec![lit1, lit2, lit3]),",
          "    };",
          "    seq.max_literal_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq.max_literal_len(), Some(3));",
          "    assert_eq!(seq.literals().unwrap().len(), 3);",
          "    assert_eq!(seq.literals().unwrap()[0].len(), 2);",
          "    assert_eq!(seq.literals().unwrap()[1].len(), 1);",
          "    assert_eq!(seq.literals().unwrap()[2].len(), 3);",
          "    seq.literals = Some(vec![]);",
          "    assert_eq!(seq.max_literal_len(), None);",
          "    seq.literals = None;",
          "    assert_eq!(seq.max_literal_len(), None);",
          "    seq.literals = Some(vec![Literal(vec![b'a'])]);",
          "    assert_eq!(seq.max_literal_len(), Some(1));"
        ],
        "code": [
          "{",
          "    let lit1 = Literal(vec![b'a', b'b']).len();",
          "    let lit2 = Literal(vec![b'c']).len();",
          "    let lit3 = Literal(vec![b'd', b'e', b'f']).len();",
          "    let seq = Seq {",
          "        literals: Some(vec![lit1, lit2, lit3]),",
          "    };",
          "    seq.max_literal_len();",
          "    assert_eq!(seq.max_literal_len(), Some(3));",
          "    assert_eq!(seq.literals().unwrap().len(), 3);",
          "    assert_eq!(seq.literals().unwrap()[0].len(), 2);",
          "    assert_eq!(seq.literals().unwrap()[1].len(), 1);",
          "    assert_eq!(seq.literals().unwrap()[2].len(), 3);",
          "    seq.literals = Some(vec![]);",
          "    assert_eq!(seq.max_literal_len(), None);",
          "    seq.literals = None;",
          "    assert_eq!(seq.max_literal_len(), None);",
          "    seq.literals = Some(vec![Literal(vec![b'a'])]);",
          "    assert_eq!(seq.max_literal_len(), Some(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lit1 = Literal(vec![b'a']).len();",
          "    let lit2 = Literal(vec![b'b', b'c', b'd']).len();",
          "    let lit3 = Literal(vec![b'e']).len();",
          "    let seq = Seq {",
          "        literals: Some(vec![lit1, lit2, lit3]),",
          "    };",
          "    seq.max_literal_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq.max_literal_len(), Some(3));",
          "    seq.literals = Some(vec![Literal(vec![b'a']).len(), Literal(vec![b'b', b'c', b'd']).len(), Literal(vec![b'e']).len()]);",
          "    assert_eq!(seq.max_literal_len(), Some(3));",
          "    seq.literals = Some(vec![Literal(vec![b'a']).len(), Literal(vec![b'b']).len()]);",
          "    assert_eq!(seq.max_literal_len(), Some(2));",
          "    seq.literals = Some(vec![Literal(vec![]).len()]);",
          "    assert_eq!(seq.max_literal_len(), Some(0));",
          "    seq.literals = Some(vec![]);",
          "    assert_eq!(seq.max_literal_len(), None);",
          "    seq.literals = None;",
          "    assert_eq!(seq.max_literal_len(), None);"
        ],
        "code": [
          "{",
          "    let lit1 = Literal(vec![b'a']).len();",
          "    let lit2 = Literal(vec![b'b', b'c', b'd']).len();",
          "    let lit3 = Literal(vec![b'e']).len();",
          "    let seq = Seq {",
          "        literals: Some(vec![lit1, lit2, lit3]),",
          "    };",
          "    seq.max_literal_len();",
          "    assert_eq!(seq.max_literal_len(), Some(3));",
          "    seq.literals = Some(vec![Literal(vec![b'a']).len(), Literal(vec![b'b', b'c', b'd']).len(), Literal(vec![b'e']).len()]);",
          "    assert_eq!(seq.max_literal_len(), Some(3));",
          "    seq.literals = Some(vec![Literal(vec![b'a']).len(), Literal(vec![b'b']).len()]);",
          "    assert_eq!(seq.max_literal_len(), Some(2));",
          "    seq.literals = Some(vec![Literal(vec![]).len()]);",
          "    assert_eq!(seq.max_literal_len(), Some(0));",
          "    seq.literals = Some(vec![]);",
          "    assert_eq!(seq.max_literal_len(), None);",
          "    seq.literals = None;",
          "    assert_eq!(seq.max_literal_len(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let seq = Seq {",
          "        literals: Some(vec![]),",
          "    };",
          "    seq.max_literal_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq.max_literal_len(), None);",
          "    ",
          "    let seq = Seq {",
          "    literals: Some(vec![Literal(Box::from(\"a\".as_bytes())), Literal(Box::from(\"abc\".as_bytes()))]),",
          "    };",
          "    assert_eq!(seq.max_literal_len(), Some(3));",
          "    ",
          "    let seq = Seq {",
          "    literals: Some(vec![Literal(Box::from(\"abcd\".as_bytes())), Literal(Box::from(\"ab\".as_bytes()))]),",
          "    };",
          "    assert_eq!(seq.max_literal_len(), Some(4));",
          "    ",
          "    let seq = Seq {",
          "    literals: Some(vec![Literal(Box::from(\"\".as_bytes())), Literal(Box::from(\"xyz\".as_bytes()))]),",
          "    };",
          "    assert_eq!(seq.max_literal_len(), Some(3));",
          "    ",
          "    let seq = Seq {",
          "    literals: Some(vec![Literal(Box::from(\"longer\".as_bytes())), Literal(Box::from(\"short\".as_bytes())), Literal(Box::from(\"medium\".as_bytes()))]),",
          "    };",
          "    assert_eq!(seq.max_literal_len(), Some(7));"
        ],
        "code": [
          "{",
          "    let seq = Seq {",
          "        literals: Some(vec![]),",
          "    };",
          "    seq.max_literal_len();",
          "    assert_eq!(seq.max_literal_len(), None);",
          "    ",
          "    let seq = Seq {",
          "    literals: Some(vec![Literal(Box::from(\"a\".as_bytes())), Literal(Box::from(\"abc\".as_bytes()))]),",
          "    };",
          "    assert_eq!(seq.max_literal_len(), Some(3));",
          "    ",
          "    let seq = Seq {",
          "    literals: Some(vec![Literal(Box::from(\"abcd\".as_bytes())), Literal(Box::from(\"ab\".as_bytes()))]),",
          "    };",
          "    assert_eq!(seq.max_literal_len(), Some(4));",
          "    ",
          "    let seq = Seq {",
          "    literals: Some(vec![Literal(Box::from(\"\".as_bytes())), Literal(Box::from(\"xyz\".as_bytes()))]),",
          "    };",
          "    assert_eq!(seq.max_literal_len(), Some(3));",
          "    ",
          "    let seq = Seq {",
          "    literals: Some(vec![Literal(Box::from(\"longer\".as_bytes())), Literal(Box::from(\"short\".as_bytes())), Literal(Box::from(\"medium\".as_bytes()))]),",
          "    };",
          "    assert_eq!(seq.max_literal_len(), Some(7));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lit1 = Literal(vec![b'a'; 100]).len();",
          "    let lit2 = Literal(vec![b'b'; 200]).len();",
          "    let seq = Seq {",
          "        literals: Some(vec![lit1, lit2]),",
          "    };",
          "    seq.max_literal_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq.max_literal_len(), Some(200));",
          "    seq.literals = Some(vec![Literal(vec![b'a'; 100])]);",
          "    assert_eq!(seq.max_literal_len(), Some(100));",
          "    seq.literals = Some(vec![Literal(vec![b'c'; 50]), Literal(vec![b'd'; 75])]);",
          "    assert_eq!(seq.max_literal_len(), Some(75));",
          "    seq.literals = Some(vec![Literal(vec![b'e'; 0])]);",
          "    assert_eq!(seq.max_literal_len(), Some(0));",
          "    seq.literals = None;",
          "    assert_eq!(seq.max_literal_len(), None);"
        ],
        "code": [
          "{",
          "    let lit1 = Literal(vec![b'a'; 100]).len();",
          "    let lit2 = Literal(vec![b'b'; 200]).len();",
          "    let seq = Seq {",
          "        literals: Some(vec![lit1, lit2]),",
          "    };",
          "    seq.max_literal_len();",
          "    assert_eq!(seq.max_literal_len(), Some(200));",
          "    seq.literals = Some(vec![Literal(vec![b'a'; 100])]);",
          "    assert_eq!(seq.max_literal_len(), Some(100));",
          "    seq.literals = Some(vec![Literal(vec![b'c'; 50]), Literal(vec![b'd'; 75])]);",
          "    assert_eq!(seq.max_literal_len(), Some(75));",
          "    seq.literals = Some(vec![Literal(vec![b'e'; 0])]);",
          "    assert_eq!(seq.max_literal_len(), Some(0));",
          "    seq.literals = None;",
          "    assert_eq!(seq.max_literal_len(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]