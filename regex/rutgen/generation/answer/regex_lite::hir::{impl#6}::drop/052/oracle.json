[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Char('a'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = std::mem::drop(hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.kind(), &HirKind::Char('a'));",
          "    assert!(!hir.is_start_anchored());",
          "    assert!(!hir.is_match_empty());",
          "    assert_eq!(hir.static_explicit_captures_len(), None);"
        ],
        "code": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Char('a'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = std::mem::drop(hir);",
          "    assert_eq!(hir.kind(), &HirKind::Char('a'));",
          "    assert!(!hir.is_start_anchored());",
          "    assert!(!hir.is_match_empty());",
          "    assert_eq!(hir.static_explicit_captures_len(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Look;",
          "    impl Look {",
          "        fn new() -> Self { Look }",
          "    }",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Look(Look::new()),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = std::mem::drop(hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.kind(), &HirKind::Look(Look::new()));",
          "    assert!(!hir.is_start_anchored());",
          "    assert!(!hir.is_match_empty());",
          "    assert_eq!(hir.static_explicit_captures_len(), None);"
        ],
        "code": [
          "{",
          "    struct Look;",
          "    impl Look {",
          "        fn new() -> Self { Look }",
          "    }",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Look(Look::new()),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = std::mem::drop(hir);",
          "    assert_eq!(hir.kind(), &HirKind::Look(Look::new()));",
          "    assert!(!hir.is_start_anchored());",
          "    assert!(!hir.is_match_empty());",
          "    assert_eq!(hir.static_explicit_captures_len(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Class;",
          "    impl Class {",
          "        fn new() -> Self { Class }",
          "    }",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Class(Class::new()),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = std::mem::drop(hir);",
          "}"
        ],
        "oracle": [
          "    let hir_kind_empty = HirKind::Empty;",
          "    let hir_kind_char = HirKind::Char('a');",
          "    let hir_kind_class = HirKind::Class(Class::new());",
          "    let hir_kind_look = HirKind::Look(Look);",
          "    ",
          "    let hir_empty = Hir { kind: hir_kind_empty, is_start_anchored: false, is_match_empty: true, static_explicit_captures_len: Some(0) };",
          "    let hir_char = Hir { kind: hir_kind_char, is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let hir_class = Hir { kind: hir_kind_class, is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let hir_look = Hir { kind: hir_kind_look, is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    ",
          "    assert_eq!(hir_empty.is_match_empty(), true);",
          "    assert_eq!(hir_char.is_match_empty(), false);",
          "    assert_eq!(hir_class.is_match_empty(), false);",
          "    assert_eq!(hir_look.is_match_empty(), false);",
          "    ",
          "    let hir_capture = HirKind::Capture(Capture { index: 0, name: None, sub: Box::new(hir_char) });",
          "    let hir_repetition = HirKind::Repetition(Repetition { min: 1, max: Some(1), greedy: true, sub: Box::new(hir_class) });",
          "    ",
          "    assert!(matches!(hirChar.kind(), HirKind::Char(_)));",
          "    assert!(matches!(hirLook.kind(), HirKind::Look(_)));",
          "    assert!(matches!(hirClass.kind(), HirKind::Class(_)));",
          "    assert!(matches!(hirCapture.kind(), HirKind::Capture(_)));",
          "    assert!(matches!(hirRepetition.kind(), HirKind::Repetition(_)));",
          "    ",
          "    assert!(matches!(hir_empty.kind(), HirKind::Empty));",
          "    assert!(matches!(hir_empty.kind().subs(), &[]));",
          "    assert!(matches!(hir_char.kind().subs(), &[]));",
          "    assert!(matches!(hir_class.kind().subs(), &[]));",
          "    assert!(matches!(hir_look.kind().subs(), &[]));",
          "    assert!(matches!(hir_capture.kind().subs(), &[Hir::char('a')]));",
          "    assert!(matches!(hir_repetition.kind().subs(), &[Hir::class(Class::new())]));"
        ],
        "code": [
          "{",
          "    struct Class;",
          "    impl Class {",
          "        fn new() -> Self { Class }",
          "    }",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Class(Class::new()),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = std::mem::drop(hir);",
          "    let hir_kind_empty = HirKind::Empty;",
          "    let hir_kind_char = HirKind::Char('a');",
          "    let hir_kind_class = HirKind::Class(Class::new());",
          "    let hir_kind_look = HirKind::Look(Look);",
          "    ",
          "    let hir_empty = Hir { kind: hir_kind_empty, is_start_anchored: false, is_match_empty: true, static_explicit_captures_len: Some(0) };",
          "    let hir_char = Hir { kind: hir_kind_char, is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let hir_class = Hir { kind: hir_kind_class, is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let hir_look = Hir { kind: hir_kind_look, is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    ",
          "    assert_eq!(hir_empty.is_match_empty(), true);",
          "    assert_eq!(hir_char.is_match_empty(), false);",
          "    assert_eq!(hir_class.is_match_empty(), false);",
          "    assert_eq!(hir_look.is_match_empty(), false);",
          "    ",
          "    let hir_capture = HirKind::Capture(Capture { index: 0, name: None, sub: Box::new(hir_char) });",
          "    let hir_repetition = HirKind::Repetition(Repetition { min: 1, max: Some(1), greedy: true, sub: Box::new(hir_class) });",
          "    ",
          "    assert!(matches!(hirChar.kind(), HirKind::Char(_)));",
          "    assert!(matches!(hirLook.kind(), HirKind::Look(_)));",
          "    assert!(matches!(hirClass.kind(), HirKind::Class(_)));",
          "    assert!(matches!(hirCapture.kind(), HirKind::Capture(_)));",
          "    assert!(matches!(hirRepetition.kind(), HirKind::Repetition(_)));",
          "    ",
          "    assert!(matches!(hir_empty.kind(), HirKind::Empty));",
          "    assert!(matches!(hir_empty.kind().subs(), &[]));",
          "    assert!(matches!(hir_char.kind().subs(), &[]));",
          "    assert!(matches!(hir_class.kind().subs(), &[]));",
          "    assert!(matches!(hir_look.kind().subs(), &[]));",
          "    assert!(matches!(hir_capture.kind().subs(), &[Hir::char('a')]));",
          "    assert!(matches!(hir_repetition.kind().subs(), &[Hir::class(Class::new())]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Empty,",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: Some(0),",
          "    };",
          "    let _ = std::mem::drop(hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.kind(), &HirKind::Empty);",
          "    assert!(!hir.is_start_anchored());",
          "    assert!(hir.is_match_empty());",
          "    assert_eq!(hir.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Empty,",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: Some(0),",
          "    };",
          "    let _ = std::mem::drop(hir);",
          "    assert_eq!(hir.kind(), &HirKind::Empty);",
          "    assert!(!hir.is_start_anchored());",
          "    assert!(hir.is_match_empty());",
          "    assert_eq!(hir.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]