[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir::empty();",
          "    drop(&mut hir.clone());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.kind(), HirKind::Empty);",
          "    assert!(hir.is_match_empty());",
          "    assert!(!hir.is_start_anchored());",
          "    assert_eq!(hir.static_explicit_captures_len(), Some(0));",
          "    assert!(hir.kind().subs().is_empty());",
          "    assert!(matches!(hir.kind(), HirKind::Empty));"
        ],
        "code": [
          "{",
          "    let hir = Hir::empty();",
          "    drop(&mut hir.clone());",
          "    assert_eq!(hir.kind(), HirKind::Empty);",
          "    assert!(hir.is_match_empty());",
          "    assert!(!hir.is_start_anchored());",
          "    assert_eq!(hir.static_explicit_captures_len(), Some(0));",
          "    assert!(hir.kind().subs().is_empty());",
          "    assert!(matches!(hir.kind(), HirKind::Empty));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir::char('a');",
          "    drop(&mut hir.clone());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.kind(), HirKind::Char('a'));",
          "    assert!(hir.is_start_anchored());",
          "    assert!(hir.is_match_empty());",
          "    assert_eq!(hir.static_explicit_captures_len(), Some(0));",
          "    assert_eq!(hir.kind(), HirKind::Empty);",
          "    assert!(hir.kind().subs().is_empty());"
        ],
        "code": [
          "{",
          "    let hir = Hir::char('a');",
          "    drop(&mut hir.clone());",
          "    assert_eq!(hir.kind(), HirKind::Char('a'));",
          "    assert!(hir.is_start_anchored());",
          "    assert!(hir.is_match_empty());",
          "    assert_eq!(hir.static_explicit_captures_len(), Some(0));",
          "    assert_eq!(hir.kind(), HirKind::Empty);",
          "    assert!(hir.kind().subs().is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockClass;",
          "    let class_instance = MockClass;",
          "    let hir = Hir::class(class_instance);",
          "    drop(&mut hir.clone());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.kind(), HirKind::Class(MockClass));",
          "    assert!(hir.is_empty());",
          "    assert!(hir.is_start_anchored());",
          "    assert!(hir.is_match_empty());",
          "    assert_eq!(hir.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    struct MockClass;",
          "    let class_instance = MockClass;",
          "    let hir = Hir::class(class_instance);",
          "    drop(&mut hir.clone());",
          "    assert_eq!(hir.kind(), HirKind::Class(MockClass));",
          "    assert!(hir.is_empty());",
          "    assert!(hir.is_start_anchored());",
          "    assert!(hir.is_match_empty());",
          "    assert_eq!(hir.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockLook;",
          "    let look_instance = MockLook;",
          "    let hir = Hir::look(look_instance);",
          "    drop(&mut hir.clone());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.kind(), &HirKind::Look(MockLook));",
          "    assert_eq!(hir.is_start_anchored(), false);",
          "    assert_eq!(hir.is_match_empty(), true);",
          "    assert_eq!(hir.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    struct MockLook;",
          "    let look_instance = MockLook;",
          "    let hir = Hir::look(look_instance);",
          "    drop(&mut hir.clone());",
          "    assert_eq!(hir.kind(), &HirKind::Look(MockLook));",
          "    assert_eq!(hir.is_start_anchored(), false);",
          "    assert_eq!(hir.is_match_empty(), true);",
          "    assert_eq!(hir.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]