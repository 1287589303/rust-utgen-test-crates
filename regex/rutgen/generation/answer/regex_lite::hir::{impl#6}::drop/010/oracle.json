[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_alternation = HirKind::Alternation(vec![]);",
          "    let hir = Hir {",
          "        kind: empty_alternation,",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: Some(0),",
          "    };",
          "    let _ = hir; // Calls drop on hir",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.kind(), &HirKind::Alternation(vec![]));",
          "    assert!(hir.is_start_anchored() == false);",
          "    assert!(hir.is_match_empty() == true);",
          "    assert_eq!(hir.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let empty_alternation = HirKind::Alternation(vec![]);",
          "    let hir = Hir {",
          "        kind: empty_alternation,",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: Some(0),",
          "    };",
          "    let _ = hir; // Calls drop on hir",
          "    assert_eq!(hir.kind(), &HirKind::Alternation(vec![]));",
          "    assert!(hir.is_start_anchored() == false);",
          "    assert!(hir.is_match_empty() == true);",
          "    assert_eq!(hir.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_concat = HirKind::Concat(vec![]);",
          "    let sub_hir = Hir {",
          "        kind: empty_concat,",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: Some(0),",
          "    };",
          "    ",
          "    let alternation_hir = HirKind::Alternation(vec![sub_hir]);",
          "    let hir = Hir {",
          "        kind: alternation_hir,",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: Some(0),",
          "    };",
          "    let _ = hir; // Calls drop on hir",
          "}"
        ],
        "oracle": [
          "    let empty_concat = HirKind::Concat(vec![]);",
          "    let sub_hir = Hir {",
          "    kind: empty_concat,",
          "    is_start_anchored: false,",
          "    is_match_empty: true,",
          "    static_explicit_captures_len: Some(0),",
          "    };",
          "    let alternation_hir = HirKind::Alternation(vec![sub_hir]);",
          "    let hir = Hir {",
          "    kind: alternation_hir,",
          "    is_start_anchored: false,",
          "    is_match_empty: true,",
          "    static_explicit_captures_len: Some(0),",
          "    };",
          "    assert_eq!(hir.is_match_empty(), true);",
          "    assert_eq!(hir.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let empty_concat = HirKind::Concat(vec![]);",
          "    let sub_hir = Hir {",
          "        kind: empty_concat,",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: Some(0),",
          "    };",
          "    ",
          "    let alternation_hir = HirKind::Alternation(vec![sub_hir]);",
          "    let hir = Hir {",
          "        kind: alternation_hir,",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: Some(0),",
          "    };",
          "    let _ = hir; // Calls drop on hir",
          "    let empty_concat = HirKind::Concat(vec![]);",
          "    let sub_hir = Hir {",
          "    kind: empty_concat,",
          "    is_start_anchored: false,",
          "    is_match_empty: true,",
          "    static_explicit_captures_len: Some(0),",
          "    };",
          "    let alternation_hir = HirKind::Alternation(vec![sub_hir]);",
          "    let hir = Hir {",
          "    kind: alternation_hir,",
          "    is_start_anchored: false,",
          "    is_match_empty: true,",
          "    static_explicit_captures_len: Some(0),",
          "    };",
          "    assert_eq!(hir.is_match_empty(), true);",
          "    assert_eq!(hir.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_capture = Capture {",
          "        index: 0,",
          "        name: None,",
          "        sub: Box::new(Hir::empty()),",
          "    };",
          "    ",
          "    let capture_hir = HirKind::Capture(empty_capture);",
          "    let alternation_hir = HirKind::Alternation(vec![Hir {",
          "        kind: capture_hir,",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: Some(0),",
          "    }]);",
          "    ",
          "    let hir = Hir {",
          "        kind: alternation_hir,",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: Some(0),",
          "    };",
          "    let _ = hir; // Calls drop on hir",
          "}"
        ],
        "oracle": [
          "    let empty_capture = Capture { index: 0, name: None, sub: Box::new(Hir::empty()) };",
          "    let capture_hir = HirKind::Capture(empty_capture);",
          "    let alternation_hir = HirKind::Alternation(vec![Hir { kind: capture_hir, is_start_anchored: false, is_match_empty: true, static_explicit_captures_len: Some(0), }]);",
          "    let hir = Hir { kind: alternation_hir, is_start_anchored: false, is_match_empty: true, static_explicit_captures_len: Some(0), };",
          "    assert_eq!(hir.kind(), &HirKind::Alternation(vec![Hir { kind: HirKind::Capture(empty_capture), is_start_anchored: false, is_match_empty: true, static_explicit_captures_len: Some(0), }]));",
          "    assert!(matches!(hir.kind(), HirKind::Alternation(ref x) if x.is_empty()));",
          "    assert!(hir.is_match_empty());"
        ],
        "code": [
          "{",
          "    let empty_capture = Capture {",
          "        index: 0,",
          "        name: None,",
          "        sub: Box::new(Hir::empty()),",
          "    };",
          "    ",
          "    let capture_hir = HirKind::Capture(empty_capture);",
          "    let alternation_hir = HirKind::Alternation(vec![Hir {",
          "        kind: capture_hir,",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: Some(0),",
          "    }]);",
          "    ",
          "    let hir = Hir {",
          "        kind: alternation_hir,",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: Some(0),",
          "    };",
          "    let _ = hir; // Calls drop on hir",
          "    let empty_capture = Capture { index: 0, name: None, sub: Box::new(Hir::empty()) };",
          "    let capture_hir = HirKind::Capture(empty_capture);",
          "    let alternation_hir = HirKind::Alternation(vec![Hir { kind: capture_hir, is_start_anchored: false, is_match_empty: true, static_explicit_captures_len: Some(0), }]);",
          "    let hir = Hir { kind: alternation_hir, is_start_anchored: false, is_match_empty: true, static_explicit_captures_len: Some(0), };",
          "    assert_eq!(hir.kind(), &HirKind::Alternation(vec![Hir { kind: HirKind::Capture(empty_capture), is_start_anchored: false, is_match_empty: true, static_explicit_captures_len: Some(0), }]));",
          "    assert!(matches!(hir.kind(), HirKind::Alternation(ref x) if x.is_empty()));",
          "    assert!(hir.is_match_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_repetition = Repetition {",
          "        min: 0,",
          "        max: None,",
          "        greedy: true,",
          "        sub: Box::new(Hir::empty()),",
          "    };",
          "    ",
          "    let repetition_hir = HirKind::Repetition(empty_repetition);",
          "    let alternation_hir = HirKind::Alternation(vec![Hir {",
          "        kind: repetition_hir,",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: Some(0),",
          "    }]);",
          "    ",
          "    let hir = Hir {",
          "        kind: alternation_hir,",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: Some(0),",
          "    };",
          "    let _ = hir; // Calls drop on hir",
          "}"
        ],
        "oracle": [
          "    let empty_repetition = Repetition { min: 0, max: None, greedy: true, sub: Box::new(Hir::empty()) };",
          "    let repetition_hir = HirKind::Repetition(empty_repetition);",
          "    let alternation_hir = HirKind::Alternation(vec![Hir { kind: repetition_hir, is_start_anchored: false, is_match_empty: true, static_explicit_captures_len: Some(0) }]);",
          "    let hir = Hir { kind: alternation_hir, is_start_anchored: false, is_match_empty: true, static_explicit_captures_len: Some(0) };",
          "    assert_eq!(hir.kind(), &HirKind::Alternation(vec![Hir { kind: repetition_hir, is_start_anchored: false, is_match_empty: true, static_explicit_captures_len: Some(0) }]));",
          "    assert!(if let HirKind::Alternation(ref subs) = hir.kind() { subs.is_empty() } else { false });",
          "    assert!(hir.is_start_anchored() == false);",
          "    assert!(hir.is_match_empty() == true);",
          "    assert_eq!(hir.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let empty_repetition = Repetition {",
          "        min: 0,",
          "        max: None,",
          "        greedy: true,",
          "        sub: Box::new(Hir::empty()),",
          "    };",
          "    ",
          "    let repetition_hir = HirKind::Repetition(empty_repetition);",
          "    let alternation_hir = HirKind::Alternation(vec![Hir {",
          "        kind: repetition_hir,",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: Some(0),",
          "    }]);",
          "    ",
          "    let hir = Hir {",
          "        kind: alternation_hir,",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: Some(0),",
          "    };",
          "    let _ = hir; // Calls drop on hir",
          "    let empty_repetition = Repetition { min: 0, max: None, greedy: true, sub: Box::new(Hir::empty()) };",
          "    let repetition_hir = HirKind::Repetition(empty_repetition);",
          "    let alternation_hir = HirKind::Alternation(vec![Hir { kind: repetition_hir, is_start_anchored: false, is_match_empty: true, static_explicit_captures_len: Some(0) }]);",
          "    let hir = Hir { kind: alternation_hir, is_start_anchored: false, is_match_empty: true, static_explicit_captures_len: Some(0) };",
          "    assert_eq!(hir.kind(), &HirKind::Alternation(vec![Hir { kind: repetition_hir, is_start_anchored: false, is_match_empty: true, static_explicit_captures_len: Some(0) }]));",
          "    assert!(if let HirKind::Alternation(ref subs) = hir.kind() { subs.is_empty() } else { false });",
          "    assert!(hir.is_start_anchored() == false);",
          "    assert!(hir.is_match_empty() == true);",
          "    assert_eq!(hir.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]