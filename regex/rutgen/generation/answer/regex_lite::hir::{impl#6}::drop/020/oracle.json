[
  {
    "uses": [
      "use crate::HirKind;",
      "use crate::Hir;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::Hir;",
          "    use crate::HirKind;",
          "",
          "    let hir_concat_empty = Hir {",
          "        kind: HirKind::Concat(vec![]),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let mut hir_instance = hir_concat_empty;",
          "    std::mem::drop(hir_instance);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir_instance.kind(), HirKind::Concat(vec![]));",
          "    assert!(!hir_instance.is_start_anchored());",
          "    assert!(!hir_instance.is_match_empty());",
          "    assert_eq!(hir_instance.static_explicit_captures_len(), None);"
        ],
        "code": [
          "{",
          "    use crate::Hir;",
          "    use crate::HirKind;",
          "",
          "    let hir_concat_empty = Hir {",
          "        kind: HirKind::Concat(vec![]),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let mut hir_instance = hir_concat_empty;",
          "    std::mem::drop(hir_instance);",
          "    assert_eq!(hir_instance.kind(), HirKind::Concat(vec![]));",
          "    assert!(!hir_instance.is_start_anchored());",
          "    assert!(!hir_instance.is_match_empty());",
          "    assert_eq!(hir_instance.static_explicit_captures_len(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::Hir;",
          "    use crate::HirKind;",
          "",
          "    let hir_concat_empty = Hir {",
          "        kind: HirKind::Concat(vec![]),",
          "        is_start_anchored: true,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let mut hir_instance = hir_concat_empty;",
          "    std::mem::drop(hir_instance);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir_instance.kind(), &HirKind::Concat(vec![]));",
          "    assert!(hir_instance.is_start_anchored());",
          "    assert!(!hir_instance.is_match_empty());",
          "    assert_eq!(hir_instance.static_explicit_captures_len(), None);"
        ],
        "code": [
          "{",
          "    use crate::Hir;",
          "    use crate::HirKind;",
          "",
          "    let hir_concat_empty = Hir {",
          "        kind: HirKind::Concat(vec![]),",
          "        is_start_anchored: true,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let mut hir_instance = hir_concat_empty;",
          "    std::mem::drop(hir_instance);",
          "    assert_eq!(hir_instance.kind(), &HirKind::Concat(vec![]));",
          "    assert!(hir_instance.is_start_anchored());",
          "    assert!(!hir_instance.is_match_empty());",
          "    assert_eq!(hir_instance.static_explicit_captures_len(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::Hir;",
          "    use crate::HirKind;",
          "",
          "    let hir_concat_empty = Hir {",
          "        kind: HirKind::Concat(vec![]),",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: Some(0),",
          "    };",
          "",
          "    let mut hir_instance = hir_concat_empty;",
          "    std::mem::drop(hir_instance);",
          "}"
        ],
        "oracle": [
          "    assert!(hir_instance.kind() == HirKind::Concat(vec![]));",
          "    assert!(hir_instance.is_start_anchored() == false);",
          "    assert!(hir_instance.is_match_empty() == true);",
          "    assert!(hir_instance.static_explicit_captures_len() == Some(0));"
        ],
        "code": [
          "{",
          "    use crate::Hir;",
          "    use crate::HirKind;",
          "",
          "    let hir_concat_empty = Hir {",
          "        kind: HirKind::Concat(vec![]),",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: Some(0),",
          "    };",
          "",
          "    let mut hir_instance = hir_concat_empty;",
          "    std::mem::drop(hir_instance);",
          "    assert!(hir_instance.kind() == HirKind::Concat(vec![]));",
          "    assert!(hir_instance.is_start_anchored() == false);",
          "    assert!(hir_instance.is_match_empty() == true);",
          "    assert!(hir_instance.static_explicit_captures_len() == Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]