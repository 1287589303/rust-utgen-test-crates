[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub_hir = Hir::char('a'); // non-empty sub-expression",
          "    let repetition = Repetition {",
          "        min: 1,",
          "        max: Some(3),",
          "        greedy: true,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "",
          "    let concat_hirs = vec![",
          "        Hir::char('b'),",
          "        Hir::char('c'),",
          "    ];",
          "    let kind = HirKind::Repetition(repetition);",
          "    let hir = Hir {",
          "        kind,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let concat_kind = HirKind::Concat(concat_hirs);",
          "    let mut stack = vec![hir];",
          "",
          "    while let Some(mut expr) = stack.pop() {",
          "        if let HirKind::Repetition(ref mut r) = expr.kind {",
          "            if !r.sub.kind.subs().is_empty() {",
          "                stack.push(Hir::concat(vec![])); // add an empty concat to allow further processing",
          "            }",
          "        }",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.kind(), &HirKind::Repetition(Repetition { min: 1, max: Some(3), greedy: true, sub: Box::new(Hir::char('a')) }));",
          "    assert!(!hir.is_match_empty());",
          "    assert!(hir.is_start_anchored() == false);",
          "    assert_eq!(hir.static_explicit_captures_len(), None);",
          "    assert_eq!(hir.kind.subs().len(), 0);",
          "    assert_eq!(stack.len(), 1);",
          "    assert_eq!(stack.pop().unwrap().kind, HirKind::Repetition(Repetition { min: 1, max: Some(3), greedy: true, sub: Box::new(Hir::char('a')) }));",
          "    assert_eq!(expr.kind, HirKind::Concat(concat_hirs));",
          "    assert!(!expr.kind.subs().is_empty());",
          "    assert!(stack.len() > 0);",
          "    assert_eq!(stack.pop().unwrap().kind(), &HirKind::Concat(concat_hirs));"
        ],
        "code": [
          "{",
          "    let sub_hir = Hir::char('a'); // non-empty sub-expression",
          "    let repetition = Repetition {",
          "        min: 1,",
          "        max: Some(3),",
          "        greedy: true,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "",
          "    let concat_hirs = vec![",
          "        Hir::char('b'),",
          "        Hir::char('c'),",
          "    ];",
          "    let kind = HirKind::Repetition(repetition);",
          "    let hir = Hir {",
          "        kind,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let concat_kind = HirKind::Concat(concat_hirs);",
          "    let mut stack = vec![hir];",
          "",
          "    while let Some(mut expr) = stack.pop() {",
          "        if let HirKind::Repetition(ref mut r) = expr.kind {",
          "            if !r.sub.kind.subs().is_empty() {",
          "                stack.push(Hir::concat(vec![])); // add an empty concat to allow further processing",
          "            }",
          "        }",
          "    }",
          "    assert_eq!(hir.kind(), &HirKind::Repetition(Repetition { min: 1, max: Some(3), greedy: true, sub: Box::new(Hir::char('a')) }));",
          "    assert!(!hir.is_match_empty());",
          "    assert!(hir.is_start_anchored() == false);",
          "    assert_eq!(hir.static_explicit_captures_len(), None);",
          "    assert_eq!(hir.kind.subs().len(), 0);",
          "    assert_eq!(stack.len(), 1);",
          "    assert_eq!(stack.pop().unwrap().kind, HirKind::Repetition(Repetition { min: 1, max: Some(3), greedy: true, sub: Box::new(Hir::char('a')) }));",
          "    assert_eq!(expr.kind, HirKind::Concat(concat_hirs));",
          "    assert!(!expr.kind.subs().is_empty());",
          "    assert!(stack.len() > 0);",
          "    assert_eq!(stack.pop().unwrap().kind(), &HirKind::Concat(concat_hirs));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub_hir = Hir::char('x'); // non-empty sub-expression",
          "    let repetition = Repetition {",
          "        min: 1,",
          "        max: Some(2),",
          "        greedy: true,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "",
          "    let mut concat_hirs = Vec::new();",
          "    for i in 0..10 {",
          "        concat_hirs.push(Hir::char('y')); // create a larger concat",
          "    }",
          "    let kind = HirKind::Repetition(repetition);",
          "    let hir = Hir {",
          "        kind,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let concat_kind = HirKind::Concat(concat_hirs);",
          "    let mut stack = vec![hir];",
          "",
          "    while let Some(mut expr) = stack.pop() {",
          "        if let HirKind::Repetition(ref mut r) = expr.kind {",
          "            if !r.sub.kind.subs().is_empty() {",
          "                stack.push(Hir::concat(vec![])); // add an empty concat to allow further processing",
          "            }",
          "        }",
          "    }",
          "}"
        ],
        "oracle": [
          "    HirKind::Repetition(Repetition { min: 1, max: Some(2), greedy: true, sub: Box::new(Hir::char('x')) }) == *self.kind()",
          "    HirKind::Repetition(Repetition { min: 1, max: Some(2), greedy: true, sub: Box::new(Hir::char('x')) }).sub.kind.subs().is_empty() == false",
          "    let mut stack = vec![Hir { kind: HirKind::Repetition(Repetition { min: 1, max: Some(2), greedy: true, sub: Box::new(Hir::char('x')) }), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }];",
          "    let Some(mut expr) = stack.pop();",
          "    HirKind::Concat(vec![Hir::char('y'), Hir::char('y'), Hir::char('y'), Hir::char('y'), Hir::char('y'), Hir::char('y'), Hir::char('y'), Hir::char('y'), Hir::char('y'), Hir::char('y')]) == expr.kind",
          "    let Some(mut expr) = stack.pop();"
        ],
        "code": [
          "{",
          "    let sub_hir = Hir::char('x'); // non-empty sub-expression",
          "    let repetition = Repetition {",
          "        min: 1,",
          "        max: Some(2),",
          "        greedy: true,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "",
          "    let mut concat_hirs = Vec::new();",
          "    for i in 0..10 {",
          "        concat_hirs.push(Hir::char('y')); // create a larger concat",
          "    }",
          "    let kind = HirKind::Repetition(repetition);",
          "    let hir = Hir {",
          "        kind,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let concat_kind = HirKind::Concat(concat_hirs);",
          "    let mut stack = vec![hir];",
          "",
          "    while let Some(mut expr) = stack.pop() {",
          "        if let HirKind::Repetition(ref mut r) = expr.kind {",
          "            if !r.sub.kind.subs().is_empty() {",
          "                stack.push(Hir::concat(vec![])); // add an empty concat to allow further processing",
          "            }",
          "        }",
          "    }",
          "    HirKind::Repetition(Repetition { min: 1, max: Some(2), greedy: true, sub: Box::new(Hir::char('x')) }) == *self.kind()",
          "    HirKind::Repetition(Repetition { min: 1, max: Some(2), greedy: true, sub: Box::new(Hir::char('x')) }).sub.kind.subs().is_empty() == false",
          "    let mut stack = vec![Hir { kind: HirKind::Repetition(Repetition { min: 1, max: Some(2), greedy: true, sub: Box::new(Hir::char('x')) }), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }];",
          "    let Some(mut expr) = stack.pop();",
          "    HirKind::Concat(vec![Hir::char('y'), Hir::char('y'), Hir::char('y'), Hir::char('y'), Hir::char('y'), Hir::char('y'), Hir::char('y'), Hir::char('y'), Hir::char('y'), Hir::char('y')]) == expr.kind",
          "    let Some(mut expr) = stack.pop();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]