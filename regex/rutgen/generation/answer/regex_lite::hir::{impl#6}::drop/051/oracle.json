[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let class = Class::new(/* initialize with appropriate non-empty representation */);",
          "    let hir = Hir {",
          "        kind: HirKind::Class(class),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    drop(hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.is_start_anchored(), false);",
          "    assert_eq!(hir.is_match_empty(), false);",
          "    assert_eq!(hir.static_explicit_captures_len(), None);"
        ],
        "code": [
          "{",
          "    let class = Class::new(/* initialize with appropriate non-empty representation */);",
          "    let hir = Hir {",
          "        kind: HirKind::Class(class),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    drop(hir);",
          "    assert_eq!(hir.is_start_anchored(), false);",
          "    assert_eq!(hir.is_match_empty(), false);",
          "    assert_eq!(hir.static_explicit_captures_len(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Char('a'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    drop(hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.is_start_anchored(), false);",
          "    assert_eq!(hir.is_match_empty(), false);",
          "    assert_eq!(hir.static_explicit_captures_len(), None);",
          "    assert_eq!(hir.kind(), &HirKind::Char('a'));"
        ],
        "code": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Char('a'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    drop(hir);",
          "    assert_eq!(hir.is_start_anchored(), false);",
          "    assert_eq!(hir.is_match_empty(), false);",
          "    assert_eq!(hir.static_explicit_captures_len(), None);",
          "    assert_eq!(hir.kind(), &HirKind::Char('a'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::new(/* initialize with appropriate representation */);",
          "    let hir = Hir {",
          "        kind: HirKind::Look(look),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    drop(hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.is_start_anchored(), false);",
          "    assert_eq!(hir.is_match_empty(), false);",
          "    assert_eq!(hir.static_explicit_captures_len(), None);",
          "    assert_eq!(hir.kind(), &HirKind::Look(look));"
        ],
        "code": [
          "{",
          "    let look = Look::new(/* initialize with appropriate representation */);",
          "    let hir = Hir {",
          "        kind: HirKind::Look(look),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    drop(hir);",
          "    assert_eq!(hir.is_start_anchored(), false);",
          "    assert_eq!(hir.is_match_empty(), false);",
          "    assert_eq!(hir.static_explicit_captures_len(), None);",
          "    assert_eq!(hir.kind(), &HirKind::Look(look));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Empty,",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: Some(0),",
          "    };",
          "    drop(hir);",
          "}"
        ],
        "oracle": [
          "    let hir_empty = Hir { kind: HirKind::Empty, is_start_anchored: false, is_match_empty: true, static_explicit_captures_len: Some(0) }; drop(&mut hir_empty); assert!(hir_empty.is_match_empty());",
          "    let hir_char = Hir { kind: HirKind::Char('a'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; drop(&mut hir_char); assert!(hir_char.is_match_empty());",
          "    let hir_class = Hir { kind: HirKind::Class(Class::new()), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; drop(&mut hir_class); assert!(hir_class.is_match_empty());",
          "    let hir_look = Hir { kind: HirKind::Look(Look::new()), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; drop(&mut hir_look); assert!(hir_look.is_match_empty());",
          "    let capture = Capture { index: 0, name: None, sub: Box::new(hir_char.clone()) }; let hir_capture = Hir { kind: HirKind::Capture(capture), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; drop(&mut hir_capture); assert_eq!(hir_capture.static_explicit_captures_len(), None);",
          "    let repetition = Repetition { min: 1, max: None, greedy: true, sub: Box::new(hir_class.clone()) }; let hir_repetition = Hir { kind: HirKind::Repetition(repetition), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; drop(&mut hir_repetition); assert!(hir_repetition.is_match_empty());",
          "    let concat_hir = Hir { kind: HirKind::Concat(vec![hir_char.clone(), hir_class.clone()]), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; drop(&mut concat_hir); assert!(concat_hir.is_match_empty());",
          "    let alternation_hir = Hir { kind: HirKind::Alternation(vec![hir_look.clone(), hir_capture.clone()]), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; drop(&mut alternation_hir); assert!(alternation_hir.is_match_empty());"
        ],
        "code": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Empty,",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: Some(0),",
          "    };",
          "    drop(hir);",
          "    let hir_empty = Hir { kind: HirKind::Empty, is_start_anchored: false, is_match_empty: true, static_explicit_captures_len: Some(0) }; drop(&mut hir_empty); assert!(hir_empty.is_match_empty());",
          "    let hir_char = Hir { kind: HirKind::Char('a'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; drop(&mut hir_char); assert!(hir_char.is_match_empty());",
          "    let hir_class = Hir { kind: HirKind::Class(Class::new()), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; drop(&mut hir_class); assert!(hir_class.is_match_empty());",
          "    let hir_look = Hir { kind: HirKind::Look(Look::new()), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; drop(&mut hir_look); assert!(hir_look.is_match_empty());",
          "    let capture = Capture { index: 0, name: None, sub: Box::new(hir_char.clone()) }; let hir_capture = Hir { kind: HirKind::Capture(capture), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; drop(&mut hir_capture); assert_eq!(hir_capture.static_explicit_captures_len(), None);",
          "    let repetition = Repetition { min: 1, max: None, greedy: true, sub: Box::new(hir_class.clone()) }; let hir_repetition = Hir { kind: HirKind::Repetition(repetition), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; drop(&mut hir_repetition); assert!(hir_repetition.is_match_empty());",
          "    let concat_hir = Hir { kind: HirKind::Concat(vec![hir_char.clone(), hir_class.clone()]), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; drop(&mut concat_hir); assert!(concat_hir.is_match_empty());",
          "    let alternation_hir = Hir { kind: HirKind::Alternation(vec![hir_look.clone(), hir_capture.clone()]), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; drop(&mut alternation_hir); assert!(alternation_hir.is_match_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]