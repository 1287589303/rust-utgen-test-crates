[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_hir = Hir::empty();",
          "    let repetition = Repetition {",
          "        min: 0,",
          "        max: None,",
          "        greedy: true,",
          "        sub: Box::new(empty_hir),",
          "    };",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = drop(&mut hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.kind, HirKind::Repetition(Repetition { min: 0, max: None, greedy: true, sub: Box::new(empty_hir) }));",
          "    assert!(hir.is_start_anchored == false);",
          "    assert!(hir.is_match_empty == false);",
          "    assert!(hir.static_explicit_captures_len.is_none());"
        ],
        "code": [
          "{",
          "    let empty_hir = Hir::empty();",
          "    let repetition = Repetition {",
          "        min: 0,",
          "        max: None,",
          "        greedy: true,",
          "        sub: Box::new(empty_hir),",
          "    };",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = drop(&mut hir);",
          "    assert_eq!(hir.kind, HirKind::Repetition(Repetition { min: 0, max: None, greedy: true, sub: Box::new(empty_hir) }));",
          "    assert!(hir.is_start_anchored == false);",
          "    assert!(hir.is_match_empty == false);",
          "    assert!(hir.static_explicit_captures_len.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_hir = Hir::empty();",
          "    let repetition = Repetition {",
          "        min: 1,",
          "        max: None,",
          "        greedy: true,",
          "        sub: Box::new(empty_hir),",
          "    };",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = drop(&mut hir);",
          "}"
        ],
        "oracle": [
          "    let mut stack = vec![mem::replace(&mut hir, Hir::empty())];",
          "    assert!(stack.is_empty());",
          "    assert!(hir.is_start_anchored == false);",
          "    assert!(hir.is_match_empty == false);",
          "    assert!(hir.static_explicit_captures_len.is_none());",
          "    assert_eq!(hir.kind(), &HirKind::Repetition(repetition));",
          "    assert!(repetition.sub.kind.subs().is_empty() == true);"
        ],
        "code": [
          "{",
          "    let empty_hir = Hir::empty();",
          "    let repetition = Repetition {",
          "        min: 1,",
          "        max: None,",
          "        greedy: true,",
          "        sub: Box::new(empty_hir),",
          "    };",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = drop(&mut hir);",
          "    let mut stack = vec![mem::replace(&mut hir, Hir::empty())];",
          "    assert!(stack.is_empty());",
          "    assert!(hir.is_start_anchored == false);",
          "    assert!(hir.is_match_empty == false);",
          "    assert!(hir.static_explicit_captures_len.is_none());",
          "    assert_eq!(hir.kind(), &HirKind::Repetition(repetition));",
          "    assert!(repetition.sub.kind.subs().is_empty() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_hir = Hir::empty();",
          "    let repetition = Repetition {",
          "        min: 0,",
          "        max: Some(5),",
          "        greedy: false,",
          "        sub: Box::new(empty_hir),",
          "    };",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = drop(&mut hir);",
          "}"
        ],
        "oracle": [
          "    let empty_hir = Hir::empty();",
          "    let repetition = Repetition { min: 0, max: Some(5), greedy: false, sub: Box::new(empty_hir) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let _ = drop(&mut hir);",
          "    assert!(hir.is_match_empty() == true);",
          "    assert!(hir.static_explicit_captures_len() == None);"
        ],
        "code": [
          "{",
          "    let empty_hir = Hir::empty();",
          "    let repetition = Repetition {",
          "        min: 0,",
          "        max: Some(5),",
          "        greedy: false,",
          "        sub: Box::new(empty_hir),",
          "    };",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = drop(&mut hir);",
          "    let empty_hir = Hir::empty();",
          "    let repetition = Repetition { min: 0, max: Some(5), greedy: false, sub: Box::new(empty_hir) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let _ = drop(&mut hir);",
          "    assert!(hir.is_match_empty() == true);",
          "    assert!(hir.static_explicit_captures_len() == None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]