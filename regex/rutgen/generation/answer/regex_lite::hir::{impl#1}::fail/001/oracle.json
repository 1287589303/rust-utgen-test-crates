[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Hir::fail();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind(), &HirKind::Class(Class { ranges: vec![] }));",
          "    assert!(!result.is_start_anchored());",
          "    assert!(!result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let result = Hir::fail();",
          "    assert_eq!(result.kind(), &HirKind::Class(Class { ranges: vec![] }));",
          "    assert!(!result.is_start_anchored());",
          "    assert!(!result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Hir::fail();",
          "    let _is_start_anchored = result.is_start_anchored();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind(), &HirKind::Class(Class { ranges: vec![] }));",
          "    assert!(!result.is_start_anchored());",
          "    assert!(!result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let result = Hir::fail();",
          "    let _is_start_anchored = result.is_start_anchored();",
          "    assert_eq!(result.kind(), &HirKind::Class(Class { ranges: vec![] }));",
          "    assert!(!result.is_start_anchored());",
          "    assert!(!result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Hir::fail();",
          "    let _is_match_empty = result.is_match_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind(), &HirKind::Class(Class { ranges: vec![] }));",
          "    assert!(!result.is_start_anchored());",
          "    assert!(!result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let result = Hir::fail();",
          "    let _is_match_empty = result.is_match_empty();",
          "    assert_eq!(result.kind(), &HirKind::Class(Class { ranges: vec![] }));",
          "    assert!(!result.is_start_anchored());",
          "    assert!(!result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Hir::fail();",
          "    let _static_explicit_captures_len = result.static_explicit_captures_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind(), &HirKind::Class(Class { ranges: vec![] }));",
          "    assert!(!result.is_start_anchored());",
          "    assert!(!result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let result = Hir::fail();",
          "    let _static_explicit_captures_len = result.static_explicit_captures_len();",
          "    assert_eq!(result.kind(), &HirKind::Class(Class { ranges: vec![] }));",
          "    assert!(!result.is_start_anchored());",
          "    assert!(!result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]