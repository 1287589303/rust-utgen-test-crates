[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_utf8(), false);",
          "    assert_eq!(config.get_reverse(), false);",
          "    assert_eq!(config.get_nfa_size_limit(), None);",
          "    assert_eq!(config.get_shrink(), false);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
          "    assert_eq!(config.get_look_matcher().lineterm, DebugByte::default());",
          "    assert_eq!(config.get_unanchored_prefix(), false);"
        ],
        "code": [
          "{",
          "    let config = Config::new();",
          "    assert_eq!(config.get_utf8(), false);",
          "    assert_eq!(config.get_reverse(), false);",
          "    assert_eq!(config.get_nfa_size_limit(), None);",
          "    assert_eq!(config.get_shrink(), false);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
          "    assert_eq!(config.get_look_matcher().lineterm, DebugByte::default());",
          "    assert_eq!(config.get_unanchored_prefix(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().utf8(true);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_utf8(), true);"
        ],
        "code": [
          "{",
          "    let config = Config::new().utf8(true);",
          "    assert_eq!(config.get_utf8(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().utf8(false);",
          "}"
        ],
        "oracle": [
          "    config = Config::new();",
          "    assert_eq!(config.get_utf8(), false);",
          "    assert_eq!(config.get_reverse(), false);",
          "    assert_eq!(config.get_nfa_size_limit(), None);",
          "    assert_eq!(config.get_shrink(), false);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
          "    assert_eq!(config.get_look_matcher(), LookMatcher { lineterm: DebugByte::default() });",
          "    assert_eq!(config.get_unanchored_prefix(), false);"
        ],
        "code": [
          "{",
          "    let config = Config::new().utf8(false);",
          "    config = Config::new();",
          "    assert_eq!(config.get_utf8(), false);",
          "    assert_eq!(config.get_reverse(), false);",
          "    assert_eq!(config.get_nfa_size_limit(), None);",
          "    assert_eq!(config.get_shrink(), false);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
          "    assert_eq!(config.get_look_matcher(), LookMatcher { lineterm: DebugByte::default() });",
          "    assert_eq!(config.get_unanchored_prefix(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().reverse(true);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_reverse(), true);",
          "    assert_eq!(config.get_utf8(), false);",
          "    assert_eq!(config.get_nfa_size_limit(), None);",
          "    assert_eq!(config.get_shrink(), false);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(config.get_look_matcher().lineterm, DebugByte::default());",
          "    assert_eq!(config.get_unanchored_prefix(), false);"
        ],
        "code": [
          "{",
          "    let config = Config::new().reverse(true);",
          "    assert_eq!(config.get_reverse(), true);",
          "    assert_eq!(config.get_utf8(), false);",
          "    assert_eq!(config.get_nfa_size_limit(), None);",
          "    assert_eq!(config.get_shrink(), false);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(config.get_look_matcher().lineterm, DebugByte::default());",
          "    assert_eq!(config.get_unanchored_prefix(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().reverse(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_reverse(), false);",
          "    assert_eq!(config.get_utf8(), false); // default value",
          "    assert_eq!(config.get_nfa_size_limit(), None); // default value",
          "    assert_eq!(config.get_shrink(), false); // default value",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::None); // default value",
          "    assert_eq!(config.get_look_matcher(), LookMatcher { lineterm: DebugByte::default() }); // default value",
          "    assert_eq!(config.get_unanchored_prefix(), false); // default value in test cfg context"
        ],
        "code": [
          "{",
          "    let config = Config::new().reverse(false);",
          "    assert_eq!(config.get_reverse(), false);",
          "    assert_eq!(config.get_utf8(), false); // default value",
          "    assert_eq!(config.get_nfa_size_limit(), None); // default value",
          "    assert_eq!(config.get_shrink(), false); // default value",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::None); // default value",
          "    assert_eq!(config.get_look_matcher(), LookMatcher { lineterm: DebugByte::default() }); // default value",
          "    assert_eq!(config.get_unanchored_prefix(), false); // default value in test cfg context",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().nfa_size_limit(None);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_nfa_size_limit(), None);",
          "    assert_eq!(config.get_utf8(), false);",
          "    assert_eq!(config.get_reverse(), false);",
          "    assert_eq!(config.get_shrink(), false);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(config.get_look_matcher(), LookMatcher { lineterm: DebugByte });",
          "    assert_eq!(config.get_unanchored_prefix(), false);"
        ],
        "code": [
          "{",
          "    let config = Config::new().nfa_size_limit(None);",
          "    assert_eq!(config.get_nfa_size_limit(), None);",
          "    assert_eq!(config.get_utf8(), false);",
          "    assert_eq!(config.get_reverse(), false);",
          "    assert_eq!(config.get_shrink(), false);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(config.get_look_matcher(), LookMatcher { lineterm: DebugByte });",
          "    assert_eq!(config.get_unanchored_prefix(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().nfa_size_limit(Some(0));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_nfa_size_limit(), Some(0));",
          "    assert!(config.get_utf8() == false);",
          "    assert!(config.get_reverse() == false);",
          "    assert!(config.get_shrink() == false);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
          "    assert_eq!(config.get_look_matcher().lineterm, DebugByte::default());",
          "    assert!(config.get_unanchored_prefix() == false);",
          "    assert!(config.get_captures() == false);"
        ],
        "code": [
          "{",
          "    let config = Config::new().nfa_size_limit(Some(0));",
          "    assert_eq!(config.get_nfa_size_limit(), Some(0));",
          "    assert!(config.get_utf8() == false);",
          "    assert!(config.get_reverse() == false);",
          "    assert!(config.get_shrink() == false);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
          "    assert_eq!(config.get_look_matcher().lineterm, DebugByte::default());",
          "    assert!(config.get_unanchored_prefix() == false);",
          "    assert!(config.get_captures() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().nfa_size_limit(Some(1));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_nfa_size_limit(), Some(1));",
          "    assert!(config.get_utf8() == false);",
          "    assert!(config.get_reverse() == false);",
          "    assert!(config.get_shrink() == false);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(config.get_look_matcher().lineterm, DebugByte::default());",
          "    assert!(config.get_unanchored_prefix() == false);"
        ],
        "code": [
          "{",
          "    let config = Config::new().nfa_size_limit(Some(1));",
          "    assert_eq!(config.get_nfa_size_limit(), Some(1));",
          "    assert!(config.get_utf8() == false);",
          "    assert!(config.get_reverse() == false);",
          "    assert!(config.get_shrink() == false);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(config.get_look_matcher().lineterm, DebugByte::default());",
          "    assert!(config.get_unanchored_prefix() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().nfa_size_limit(Some(1000));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_nfa_size_limit(), Some(1000));",
          "    assert!(config.get_utf8() == false);",
          "    assert!(config.get_reverse() == false);",
          "    assert!(config.get_shrink() == false);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(config.get_look_matcher().lineterm, DebugByte::default());",
          "    #[cfg(test)] assert!(config.get_unanchored_prefix() == false);"
        ],
        "code": [
          "{",
          "    let config = Config::new().nfa_size_limit(Some(1000));",
          "    assert_eq!(config.get_nfa_size_limit(), Some(1000));",
          "    assert!(config.get_utf8() == false);",
          "    assert!(config.get_reverse() == false);",
          "    assert!(config.get_shrink() == false);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(config.get_look_matcher().lineterm, DebugByte::default());",
          "    #[cfg(test)] assert!(config.get_unanchored_prefix() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().shrink(true);",
          "}"
        ],
        "oracle": [
          "    let config = Config::new();",
          "    assert_eq!(config.get_shrink(), false);",
          "    let config = Config::new().shrink(true);",
          "    assert_eq!(config.get_shrink(), true);",
          "    let config = Config::new().shrink(false);",
          "    assert_eq!(config.get_shrink(), false);"
        ],
        "code": [
          "{",
          "    let config = Config::new().shrink(true);",
          "    let config = Config::new();",
          "    assert_eq!(config.get_shrink(), false);",
          "    let config = Config::new().shrink(true);",
          "    assert_eq!(config.get_shrink(), true);",
          "    let config = Config::new().shrink(false);",
          "    assert_eq!(config.get_shrink(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().shrink(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Config::new().shrink(false).get_shrink(), false);",
          "    assert!(Config::new().get_utf8().is_none());",
          "    assert!(!Config::new().get_reverse());",
          "    assert_eq!(Config::new().get_nfa_size_limit(), None);",
          "    assert_eq!(Config::new().get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(Config::new().get_look_matcher(), LookMatcher { lineterm: DebugByte::default() });",
          "    assert!(!Config::new().get_unanchored_prefix());"
        ],
        "code": [
          "{",
          "    let config = Config::new().shrink(false);",
          "    assert_eq!(Config::new().shrink(false).get_shrink(), false);",
          "    assert!(Config::new().get_utf8().is_none());",
          "    assert!(!Config::new().get_reverse());",
          "    assert_eq!(Config::new().get_nfa_size_limit(), None);",
          "    assert_eq!(Config::new().get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(Config::new().get_look_matcher(), LookMatcher { lineterm: DebugByte::default() });",
          "    assert!(!Config::new().get_unanchored_prefix());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().which_captures(WhichCaptures::All);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(config.get_utf8(), false);",
          "    assert_eq!(config.get_reverse(), false);",
          "    assert_eq!(config.get_nfa_size_limit(), None);",
          "    assert_eq!(config.get_shrink(), false);",
          "    assert_eq!(config.get_look_matcher(), LookMatcher { lineterm: DebugByte });",
          "    assert_eq!(config.get_unanchored_prefix(), false);"
        ],
        "code": [
          "{",
          "    let config = Config::new().which_captures(WhichCaptures::All);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(config.get_utf8(), false);",
          "    assert_eq!(config.get_reverse(), false);",
          "    assert_eq!(config.get_nfa_size_limit(), None);",
          "    assert_eq!(config.get_shrink(), false);",
          "    assert_eq!(config.get_look_matcher(), LookMatcher { lineterm: DebugByte });",
          "    assert_eq!(config.get_unanchored_prefix(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().which_captures(WhichCaptures::Implicit);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_which_captures(), WhichCaptures::Implicit);",
          "    assert!(config.get_utf8().is_none());",
          "    assert!(!config.get_reverse());",
          "    assert!(config.get_nfa_size_limit().is_none());",
          "    assert!(!config.get_shrink());",
          "    assert_eq!(config.get_look_matcher().lineterm, DebugByte::default());",
          "    assert!(!config.get_unanchored_prefix());"
        ],
        "code": [
          "{",
          "    let config = Config::new().which_captures(WhichCaptures::Implicit);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::Implicit);",
          "    assert!(config.get_utf8().is_none());",
          "    assert!(!config.get_reverse());",
          "    assert!(config.get_nfa_size_limit().is_none());",
          "    assert!(!config.get_shrink());",
          "    assert_eq!(config.get_look_matcher().lineterm, DebugByte::default());",
          "    assert!(!config.get_unanchored_prefix());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().which_captures(WhichCaptures::None);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
          "    assert!(config.get_utf8().is_none());",
          "    assert!(!config.get_reverse());",
          "    assert_eq!(config.get_nfa_size_limit(), None);",
          "    assert!(!config.get_shrink());",
          "    assert_eq!(config.get_look_matcher().lineterm, DebugByte::default());",
          "    assert!(!config.get_unanchored_prefix());"
        ],
        "code": [
          "{",
          "    let config = Config::new().which_captures(WhichCaptures::None);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
          "    assert!(config.get_utf8().is_none());",
          "    assert!(!config.get_reverse());",
          "    assert_eq!(config.get_nfa_size_limit(), None);",
          "    assert!(!config.get_shrink());",
          "    assert_eq!(config.get_look_matcher().lineterm, DebugByte::default());",
          "    assert!(!config.get_unanchored_prefix());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_matcher = LookMatcher { lineterm: DebugByte };",
          "    let config = Config::new().look_matcher(look_matcher);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_look_matcher(), look_matcher);",
          "    assert_eq!(config.get_utf8(), false);",
          "    assert_eq!(config.get_reverse(), false);",
          "    assert_eq!(config.get_nfa_size_limit(), None);",
          "    assert_eq!(config.get_shrink(), false);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(config.get_unanchored_prefix(), false);"
        ],
        "code": [
          "{",
          "    let look_matcher = LookMatcher { lineterm: DebugByte };",
          "    let config = Config::new().look_matcher(look_matcher);",
          "    assert_eq!(config.get_look_matcher(), look_matcher);",
          "    assert_eq!(config.get_utf8(), false);",
          "    assert_eq!(config.get_reverse(), false);",
          "    assert_eq!(config.get_nfa_size_limit(), None);",
          "    assert_eq!(config.get_shrink(), false);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(config.get_unanchored_prefix(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().unanchored_prefix(true);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_utf8(), false);",
          "    assert_eq!(config.get_reverse(), false);",
          "    assert_eq!(config.get_nfa_size_limit(), None);",
          "    assert_eq!(config.get_shrink(), false);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(config.get_look_matcher(), LookMatcher { lineterm: DebugByte });",
          "    assert_eq!(config.get_unanchored_prefix(), true);"
        ],
        "code": [
          "{",
          "    let config = Config::new().unanchored_prefix(true);",
          "    assert_eq!(config.get_utf8(), false);",
          "    assert_eq!(config.get_reverse(), false);",
          "    assert_eq!(config.get_nfa_size_limit(), None);",
          "    assert_eq!(config.get_shrink(), false);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(config.get_look_matcher(), LookMatcher { lineterm: DebugByte });",
          "    assert_eq!(config.get_unanchored_prefix(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().unanchored_prefix(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_utf8(), false);",
          "    assert_eq!(config.get_reverse(), false);",
          "    assert_eq!(config.get_nfa_size_limit(), None);",
          "    assert_eq!(config.get_shrink(), false);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
          "    assert_eq!(config.get_look_matcher().lineterm, DebugByte::default());",
          "    assert_eq!(config.get_unanchored_prefix(), false);"
        ],
        "code": [
          "{",
          "    let config = Config::new().unanchored_prefix(false);",
          "    assert_eq!(config.get_utf8(), false);",
          "    assert_eq!(config.get_reverse(), false);",
          "    assert_eq!(config.get_nfa_size_limit(), None);",
          "    assert_eq!(config.get_shrink(), false);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
          "    assert_eq!(config.get_look_matcher().lineterm, DebugByte::default());",
          "    assert_eq!(config.get_unanchored_prefix(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]