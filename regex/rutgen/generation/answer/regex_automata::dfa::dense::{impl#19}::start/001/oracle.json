[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: Vec<u32> = vec![0; 16]; // sufficient size to avoid index panic",
          "    let stride = 4;",
          "    let kind = StartKind::Both;",
          "    let start_map = StartByteMap { map: [Start::NonWordByte; 256] };",
          "    let pattern_len = Some(stride);",
          "    let universal_start_unanchored = None;",
          "    let universal_start_anchored = None;",
          "",
          "    let start_table = StartTable {",
          "        table,",
          "        kind,",
          "        start_map,",
          "        stride,",
          "        pattern_len,",
          "        universal_start_unanchored,",
          "        universal_start_anchored,",
          "    };",
          "",
          "    let pid = PatternID(4.into()); // pid.as_usize() == len, where len = stride",
          "    let anchored = Anchored::Pattern(pid);",
          "    let start = Start::WordByte; // arbitrary choice",
          "",
          "    let _result = start_table.start(anchored, start);",
          "}"
        ],
        "oracle": [
          "    let table: Vec<u32> = vec![0; 16];",
          "    let stride = 4;",
          "    let kind = StartKind::Both;",
          "    let start_map = StartByteMap { map: [Start::NonWordByte; 256] };",
          "    let pattern_len = Some(stride);",
          "    let universal_start_unanchored = None;",
          "    let universal_start_anchored = None;",
          "    ",
          "    let start_table = StartTable {",
          "    table,",
          "    kind,",
          "    start_map,",
          "    stride,",
          "    pattern_len,",
          "    universal_start_unanchored,",
          "    universal_start_anchored,",
          "    };",
          "    ",
          "    let pid = PatternID(4.into());",
          "    let anchored = Anchored::Pattern(pid);",
          "    let start = Start::WordByte;",
          "    ",
          "    let result = start_table.start(anchored, start);",
          "    assert_eq!(result, Ok(DEAD));"
        ],
        "code": [
          "{",
          "    let table: Vec<u32> = vec![0; 16]; // sufficient size to avoid index panic",
          "    let stride = 4;",
          "    let kind = StartKind::Both;",
          "    let start_map = StartByteMap { map: [Start::NonWordByte; 256] };",
          "    let pattern_len = Some(stride);",
          "    let universal_start_unanchored = None;",
          "    let universal_start_anchored = None;",
          "",
          "    let start_table = StartTable {",
          "        table,",
          "        kind,",
          "        start_map,",
          "        stride,",
          "        pattern_len,",
          "        universal_start_unanchored,",
          "        universal_start_anchored,",
          "    };",
          "",
          "    let pid = PatternID(4.into()); // pid.as_usize() == len, where len = stride",
          "    let anchored = Anchored::Pattern(pid);",
          "    let start = Start::WordByte; // arbitrary choice",
          "",
          "    let _result = start_table.start(anchored, start);",
          "    let table: Vec<u32> = vec![0; 16];",
          "    let stride = 4;",
          "    let kind = StartKind::Both;",
          "    let start_map = StartByteMap { map: [Start::NonWordByte; 256] };",
          "    let pattern_len = Some(stride);",
          "    let universal_start_unanchored = None;",
          "    let universal_start_anchored = None;",
          "    ",
          "    let start_table = StartTable {",
          "    table,",
          "    kind,",
          "    start_map,",
          "    stride,",
          "    pattern_len,",
          "    universal_start_unanchored,",
          "    universal_start_anchored,",
          "    };",
          "    ",
          "    let pid = PatternID(4.into());",
          "    let anchored = Anchored::Pattern(pid);",
          "    let start = Start::WordByte;",
          "    ",
          "    let result = start_table.start(anchored, start);",
          "    assert_eq!(result, Ok(DEAD));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: Vec<u32> = vec![0; 16]; // sufficient size to avoid index panic",
          "    let stride = 4;",
          "    let kind = StartKind::Both;",
          "    let start_map = StartByteMap { map: [Start::NonWordByte; 256] };",
          "    let pattern_len = Some(stride);",
          "    let universal_start_unanchored = None;",
          "    let universal_start_anchored = None;",
          "",
          "    let start_table = StartTable {",
          "        table,",
          "        kind,",
          "        start_map,",
          "        stride,",
          "        pattern_len,",
          "        universal_start_unanchored,",
          "        universal_start_anchored,",
          "    };",
          "",
          "    let pid = PatternID(5.into()); // pid.as_usize() exceeds len",
          "    let anchored = Anchored::Pattern(pid);",
          "    let start = Start::WordByte; // arbitrary choice",
          "",
          "    let _result = start_table.start(anchored, start);",
          "}"
        ],
        "oracle": [
          "    let table: Vec<u32> = vec![0; 16];",
          "    let stride = 4;",
          "    let kind = StartKind::Both;",
          "    let start_map = StartByteMap { map: [Start::NonWordByte; 256] };",
          "    let pattern_len = Some(stride);",
          "    let universal_start_unanchored = None;",
          "    let universal_start_anchored = None;",
          "    ",
          "    let start_table = StartTable {",
          "    table,",
          "    kind,",
          "    start_map,",
          "    stride,",
          "    pattern_len,",
          "    universal_start_unanchored,",
          "    universal_start_anchored,",
          "    };",
          "    ",
          "    let pid = PatternID(4.into()); // pid.as_usize() == len",
          "    let anchored = Anchored::Pattern(pid);",
          "    let start = Start::WordByte;",
          "    ",
          "    let result = start_table.start(anchored, start);",
          "    assert_eq!(result, Ok(DEAD));"
        ],
        "code": [
          "{",
          "    let table: Vec<u32> = vec![0; 16]; // sufficient size to avoid index panic",
          "    let stride = 4;",
          "    let kind = StartKind::Both;",
          "    let start_map = StartByteMap { map: [Start::NonWordByte; 256] };",
          "    let pattern_len = Some(stride);",
          "    let universal_start_unanchored = None;",
          "    let universal_start_anchored = None;",
          "",
          "    let start_table = StartTable {",
          "        table,",
          "        kind,",
          "        start_map,",
          "        stride,",
          "        pattern_len,",
          "        universal_start_unanchored,",
          "        universal_start_anchored,",
          "    };",
          "",
          "    let pid = PatternID(5.into()); // pid.as_usize() exceeds len",
          "    let anchored = Anchored::Pattern(pid);",
          "    let start = Start::WordByte; // arbitrary choice",
          "",
          "    let _result = start_table.start(anchored, start);",
          "    let table: Vec<u32> = vec![0; 16];",
          "    let stride = 4;",
          "    let kind = StartKind::Both;",
          "    let start_map = StartByteMap { map: [Start::NonWordByte; 256] };",
          "    let pattern_len = Some(stride);",
          "    let universal_start_unanchored = None;",
          "    let universal_start_anchored = None;",
          "    ",
          "    let start_table = StartTable {",
          "    table,",
          "    kind,",
          "    start_map,",
          "    stride,",
          "    pattern_len,",
          "    universal_start_unanchored,",
          "    universal_start_anchored,",
          "    };",
          "    ",
          "    let pid = PatternID(4.into()); // pid.as_usize() == len",
          "    let anchored = Anchored::Pattern(pid);",
          "    let start = Start::WordByte;",
          "    ",
          "    let result = start_table.start(anchored, start);",
          "    assert_eq!(result, Ok(DEAD));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]