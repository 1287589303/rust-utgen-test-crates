[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table = StartTable {",
          "        table: vec![0; 8],",
          "        kind: StartKind::Unanchored,",
          "        start_map: StartByteMap { map: [Start::NonWordByte; 256] },",
          "        stride: 4,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let result = table.start(Anchored::Yes, Start::Text);",
          "}"
        ],
        "oracle": [
          "    let table = StartTable { table: vec![0; 8], kind: StartKind::Unanchored, start_map: StartByteMap { map: [Start::NonWordByte; 256] }, stride: 4, pattern_len: Some(1), universal_start_unanchored: None, universal_start_anchored: None };",
          "    let result = table.start(Anchored::Yes, Start::Text);",
          "    assert_eq!(result, Err(StartError::unsupported_anchored(Anchored::Yes)));"
        ],
        "code": [
          "{",
          "    let table = StartTable {",
          "        table: vec![0; 8],",
          "        kind: StartKind::Unanchored,",
          "        start_map: StartByteMap { map: [Start::NonWordByte; 256] },",
          "        stride: 4,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let result = table.start(Anchored::Yes, Start::Text);",
          "    let table = StartTable { table: vec![0; 8], kind: StartKind::Unanchored, start_map: StartByteMap { map: [Start::NonWordByte; 256] }, stride: 4, pattern_len: Some(1), universal_start_unanchored: None, universal_start_anchored: None };",
          "    let result = table.start(Anchored::Yes, Start::Text);",
          "    assert_eq!(result, Err(StartError::unsupported_anchored(Anchored::Yes)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table = StartTable {",
          "        table: vec![0; 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::NonWordByte; 256] },",
          "        stride: 4,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let result = table.start(Anchored::Yes, Start::WordByte);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), StartError::unsupported_anchored(Anchored::Yes));"
        ],
        "code": [
          "{",
          "    let table = StartTable {",
          "        table: vec![0; 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::NonWordByte; 256] },",
          "        stride: 4,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let result = table.start(Anchored::Yes, Start::WordByte);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), StartError::unsupported_anchored(Anchored::Yes));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]