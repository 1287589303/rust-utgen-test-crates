[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let stride = 4;",
          "    let pattern_len = Some(2);",
          "    let start_table = StartTable {",
          "        table: vec![StateID(0), StateID(1), StateID(2), StateID(3), StateID(4)],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::Text; 256] },",
          "        stride,",
          "        pattern_len,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let anchored = Anchored::Yes;",
          "    let start = Start::from_usize(2).unwrap();",
          "    ",
          "    let _result = start_table.start(anchored, start);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(StateID(6)));",
          "    assert!(matches!(_result, Ok(_)));",
          "    assert_ne!(_result, Err(StartError::UnsupportedAnchored { .. }));"
        ],
        "code": [
          "{",
          "    let stride = 4;",
          "    let pattern_len = Some(2);",
          "    let start_table = StartTable {",
          "        table: vec![StateID(0), StateID(1), StateID(2), StateID(3), StateID(4)],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::Text; 256] },",
          "        stride,",
          "        pattern_len,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let anchored = Anchored::Yes;",
          "    let start = Start::from_usize(2).unwrap();",
          "    ",
          "    let _result = start_table.start(anchored, start);",
          "    assert_eq!(_result, Ok(StateID(6)));",
          "    assert!(matches!(_result, Ok(_)));",
          "    assert_ne!(_result, Err(StartError::UnsupportedAnchored { .. }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let stride = 4;",
          "    let pattern_len = Some(3);",
          "    let start_table = StartTable {",
          "        table: vec![StateID(0), StateID(1), StateID(2), StateID(3), StateID(4), StateID(5), StateID(6), StateID(7)],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::Text; 256] },",
          "        stride,",
          "        pattern_len,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let anchored = Anchored::Pattern(PatternID(1));",
          "    let start = Start::from_usize(0).unwrap();",
          "",
          "    let _result = start_table.start(anchored, start);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(StateID(4)));",
          "    assert!(matches!(_result, Ok(_)));",
          "    assert!(start_table.kind.has_anchored());",
          "    assert!(matches!(anchored, Anchored::Pattern(_)));",
          "    assert_eq!(start_table.pattern_len, Some(3));",
          "    assert_eq!(start_table.stride, 4);",
          "    assert_eq!(start_table.table.len(), 8);",
          "    assert_eq!(start_table.table()[4], StateID(4));",
          "    assert!(start_table.universal_start_anchored.is_none());",
          "    assert!(start_table.universal_start_unanchored.is_none());",
          "    assert_eq!(start.as_usize(), 0);"
        ],
        "code": [
          "{",
          "    let stride = 4;",
          "    let pattern_len = Some(3);",
          "    let start_table = StartTable {",
          "        table: vec![StateID(0), StateID(1), StateID(2), StateID(3), StateID(4), StateID(5), StateID(6), StateID(7)],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::Text; 256] },",
          "        stride,",
          "        pattern_len,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let anchored = Anchored::Pattern(PatternID(1));",
          "    let start = Start::from_usize(0).unwrap();",
          "",
          "    let _result = start_table.start(anchored, start);",
          "    assert_eq!(_result, Ok(StateID(4)));",
          "    assert!(matches!(_result, Ok(_)));",
          "    assert!(start_table.kind.has_anchored());",
          "    assert!(matches!(anchored, Anchored::Pattern(_)));",
          "    assert_eq!(start_table.pattern_len, Some(3));",
          "    assert_eq!(start_table.stride, 4);",
          "    assert_eq!(start_table.table.len(), 8);",
          "    assert_eq!(start_table.table()[4], StateID(4));",
          "    assert!(start_table.universal_start_anchored.is_none());",
          "    assert!(start_table.universal_start_unanchored.is_none());",
          "    assert_eq!(start.as_usize(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let stride = 4;",
          "    let pattern_len = Some(3);",
          "    let start_table = StartTable {",
          "        table: vec![StateID(0), StateID(1), StateID(2), StateID(3)],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::Text; 256] },",
          "        stride,",
          "        pattern_len,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let anchored = Anchored::Pattern(PatternID(5));",
          "    let start = Start::from_usize(1).unwrap();",
          "",
          "    let _result = start_table.start(anchored, start);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(StateID(7)));",
          "    assert!(matches!(_result, Ok(_)));",
          "    let anchored = Anchored::Yes;",
          "    let start = Start::from_usize(0).unwrap();",
          "    assert_eq!(start_table.start(anchored, start).unwrap(), StateID(4));",
          "    assert_eq!(start_table.start(anchored, Start::from_usize(3).unwrap()), Ok(StateID(7)));",
          "    assert_eq!(start_table.start(anchored, Start::from_usize(2).unwrap()), Ok(StateID(6)));",
          "    assert!(start_table.start(anchored, Start::from_usize(5).expect(\"valid start\")).is_ok());",
          "    assert!(start_table.table()[4] == StateID(1));",
          "    assert!(start_table.table()[5] == StateID(2));",
          "    assert!(start_table.has_anchored());",
          "    assert!(start_table.start(anchored, start).is_ok());",
          "    assert_eq!(start_table.pattern_len, Some(3));"
        ],
        "code": [
          "{",
          "    let stride = 4;",
          "    let pattern_len = Some(3);",
          "    let start_table = StartTable {",
          "        table: vec![StateID(0), StateID(1), StateID(2), StateID(3)],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::Text; 256] },",
          "        stride,",
          "        pattern_len,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let anchored = Anchored::Pattern(PatternID(5));",
          "    let start = Start::from_usize(1).unwrap();",
          "",
          "    let _result = start_table.start(anchored, start);",
          "    assert_eq!(_result, Ok(StateID(7)));",
          "    assert!(matches!(_result, Ok(_)));",
          "    let anchored = Anchored::Yes;",
          "    let start = Start::from_usize(0).unwrap();",
          "    assert_eq!(start_table.start(anchored, start).unwrap(), StateID(4));",
          "    assert_eq!(start_table.start(anchored, Start::from_usize(3).unwrap()), Ok(StateID(7)));",
          "    assert_eq!(start_table.start(anchored, Start::from_usize(2).unwrap()), Ok(StateID(6)));",
          "    assert!(start_table.start(anchored, Start::from_usize(5).expect(\"valid start\")).is_ok());",
          "    assert!(start_table.table()[4] == StateID(1));",
          "    assert!(start_table.table()[5] == StateID(2));",
          "    assert!(start_table.has_anchored());",
          "    assert!(start_table.start(anchored, start).is_ok());",
          "    assert_eq!(start_table.pattern_len, Some(3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]