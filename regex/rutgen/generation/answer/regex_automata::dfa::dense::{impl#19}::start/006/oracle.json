[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start = Start::from_usize(0).unwrap();",
          "    let anchored = Anchored::No;",
          "    ",
          "    let table = vec![StateID(0), StateID(1), StateID(2), StateID(3), StateID(4), StateID(5), StateID(6), StateID(7)];",
          "    ",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::Text; 256] },",
          "        stride: 4,",
          "        pattern_len: Some(2),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let result = start_table.start(anchored, start);",
          "}"
        ],
        "oracle": [
          "    let start = Start::from_usize(0).unwrap();",
          "    let anchored = Anchored::No;",
          "    let table = vec![StateID(0), StateID(1), StateID(2), StateID(3), StateID(4), StateID(5), StateID(6), StateID(7)];",
          "    let start_table = StartTable {",
          "    table,",
          "    kind: StartKind::Both,",
          "    start_map: StartByteMap { map: [Start::Text; 256] },",
          "    stride: 4,",
          "    pattern_len: Some(2),",
          "    universal_start_unanchored: None,",
          "    universal_start_anchored: None,",
          "    };",
          "    let result = start_table.start(anchored, start);",
          "    let expected = Ok(StateID(0));",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let start = Start::from_usize(0).unwrap();",
          "    let anchored = Anchored::No;",
          "    ",
          "    let table = vec![StateID(0), StateID(1), StateID(2), StateID(3), StateID(4), StateID(5), StateID(6), StateID(7)];",
          "    ",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::Text; 256] },",
          "        stride: 4,",
          "        pattern_len: Some(2),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let result = start_table.start(anchored, start);",
          "    let start = Start::from_usize(0).unwrap();",
          "    let anchored = Anchored::No;",
          "    let table = vec![StateID(0), StateID(1), StateID(2), StateID(3), StateID(4), StateID(5), StateID(6), StateID(7)];",
          "    let start_table = StartTable {",
          "    table,",
          "    kind: StartKind::Both,",
          "    start_map: StartByteMap { map: [Start::Text; 256] },",
          "    stride: 4,",
          "    pattern_len: Some(2),",
          "    universal_start_unanchored: None,",
          "    universal_start_anchored: None,",
          "    };",
          "    let result = start_table.start(anchored, start);",
          "    let expected = Ok(StateID(0));",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start = Start::from_usize(1).unwrap();",
          "    let anchored = Anchored::No;",
          "",
          "    let table = vec![StateID(8), StateID(9), StateID(10), StateID(11), StateID(12), StateID(13), StateID(14), StateID(15)];",
          "",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::Text; 256] },",
          "        stride: 4,",
          "        pattern_len: Some(2),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let result = start_table.start(anchored, start);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(StateID(9)));",
          "    assert!(start_table.kind.has_unanchored());",
          "    assert_eq!(start.as_usize(), 1);",
          "    assert_eq!(start_table.table(), &[StateID(8), StateID(9), StateID(10), StateID(11), StateID(12), StateID(13), StateID(14), StateID(15)]);",
          "    assert!(matches!(anchored, Anchored::No));"
        ],
        "code": [
          "{",
          "    let start = Start::from_usize(1).unwrap();",
          "    let anchored = Anchored::No;",
          "",
          "    let table = vec![StateID(8), StateID(9), StateID(10), StateID(11), StateID(12), StateID(13), StateID(14), StateID(15)];",
          "",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::Text; 256] },",
          "        stride: 4,",
          "        pattern_len: Some(2),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let result = start_table.start(anchored, start);",
          "    assert_eq!(result, Ok(StateID(9)));",
          "    assert!(start_table.kind.has_unanchored());",
          "    assert_eq!(start.as_usize(), 1);",
          "    assert_eq!(start_table.table(), &[StateID(8), StateID(9), StateID(10), StateID(11), StateID(12), StateID(13), StateID(14), StateID(15)]);",
          "    assert!(matches!(anchored, Anchored::No));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]