[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let stride = 8;",
          "    let pattern_len = Some(5);",
          "    let table = vec![StateID(0), StateID(1), StateID(2), StateID(3), StateID(4), StateID(5), StateID(6), StateID(7), StateID(8), StateID(9), StateID(10)];",
          "",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::Text; 256] },",
          "        stride,",
          "        pattern_len,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let pid = PatternID(2);",
          "    let result = start_table.start(Anchored::Pattern(pid), Start::from_usize(0).unwrap());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(StateID(18)));"
        ],
        "code": [
          "{",
          "    let stride = 8;",
          "    let pattern_len = Some(5);",
          "    let table = vec![StateID(0), StateID(1), StateID(2), StateID(3), StateID(4), StateID(5), StateID(6), StateID(7), StateID(8), StateID(9), StateID(10)];",
          "",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::Text; 256] },",
          "        stride,",
          "        pattern_len,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let pid = PatternID(2);",
          "    let result = start_table.start(Anchored::Pattern(pid), Start::from_usize(0).unwrap());",
          "    assert_eq!(result, Ok(StateID(18)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let stride = 8;",
          "    let pattern_len = Some(5);",
          "    let table = vec![StateID(0), StateID(1), StateID(2), StateID(3), StateID(4), StateID(5), StateID(6), StateID(7), StateID(8), StateID(9), StateID(10)];",
          "",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::Text; 256] },",
          "        stride,",
          "        pattern_len,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let pid = PatternID(1);",
          "    let result = start_table.start(Anchored::Pattern(pid), Start::from_usize(4).unwrap());",
          "}"
        ],
        "oracle": [
          "    let stride = 8;",
          "    let pattern_len = Some(5);",
          "    let table = vec![StateID(0), StateID(1), StateID(2), StateID(3), StateID(4), StateID(5), StateID(6), StateID(7), StateID(8), StateID(9), StateID(10)];",
          "    let start_table = StartTable { table, kind: StartKind::Both, start_map: StartByteMap { map: [Start::Text; 256] }, stride, pattern_len, universal_start_unanchored: None, universal_start_anchored: None };",
          "    let pid = PatternID(1);",
          "    let result = start_table.start(Anchored::Pattern(pid), Start::from_usize(4).unwrap());",
          "    assert_eq!(result, Ok(StateID(4)));",
          "    pid = PatternID(0);",
          "    let result = start_table.start(Anchored::Pattern(pid), Start::from_usize(4).unwrap());",
          "    assert_eq!(result, Ok(StateID(2)));",
          "    pid = PatternID(3);",
          "    let result = start_table.start(Anchored::Pattern(pid), Start::from_usize(4).unwrap());",
          "    assert_eq!(result, Ok(StateID(6)));",
          "    pid = PatternID(4);",
          "    let result = start_table.start(Anchored::Pattern(pid), Start::from_usize(4).unwrap());",
          "    assert_ne!(result, Ok(StateID(4)));"
        ],
        "code": [
          "{",
          "    let stride = 8;",
          "    let pattern_len = Some(5);",
          "    let table = vec![StateID(0), StateID(1), StateID(2), StateID(3), StateID(4), StateID(5), StateID(6), StateID(7), StateID(8), StateID(9), StateID(10)];",
          "",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::Text; 256] },",
          "        stride,",
          "        pattern_len,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let pid = PatternID(1);",
          "    let result = start_table.start(Anchored::Pattern(pid), Start::from_usize(4).unwrap());",
          "    let stride = 8;",
          "    let pattern_len = Some(5);",
          "    let table = vec![StateID(0), StateID(1), StateID(2), StateID(3), StateID(4), StateID(5), StateID(6), StateID(7), StateID(8), StateID(9), StateID(10)];",
          "    let start_table = StartTable { table, kind: StartKind::Both, start_map: StartByteMap { map: [Start::Text; 256] }, stride, pattern_len, universal_start_unanchored: None, universal_start_anchored: None };",
          "    let pid = PatternID(1);",
          "    let result = start_table.start(Anchored::Pattern(pid), Start::from_usize(4).unwrap());",
          "    assert_eq!(result, Ok(StateID(4)));",
          "    pid = PatternID(0);",
          "    let result = start_table.start(Anchored::Pattern(pid), Start::from_usize(4).unwrap());",
          "    assert_eq!(result, Ok(StateID(2)));",
          "    pid = PatternID(3);",
          "    let result = start_table.start(Anchored::Pattern(pid), Start::from_usize(4).unwrap());",
          "    assert_eq!(result, Ok(StateID(6)));",
          "    pid = PatternID(4);",
          "    let result = start_table.start(Anchored::Pattern(pid), Start::from_usize(4).unwrap());",
          "    assert_ne!(result, Ok(StateID(4)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let stride = 8;",
          "    let pattern_len = Some(5);",
          "    let table = vec![StateID(0), StateID(1), StateID(2), StateID(3), StateID(4), StateID(5), StateID(6), StateID(7), StateID(8), StateID(9), StateID(10)];",
          "",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::Text; 256] },",
          "        stride,",
          "        pattern_len,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let pid = PatternID(4);",
          "    let result = start_table.start(Anchored::Pattern(pid), Start::from_usize(2).unwrap());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(StateID(20)));",
          "    assert_eq!(start_table.pattern_len, Some(5));",
          "    assert!(start_table.kind.has_anchored());",
          "    assert!(start_table.kind.has_unanchored());",
          "    assert!(pid.as_usize() < start_table.pattern_len.unwrap());",
          "    assert!(start_table.table()[20] == StateID(4));",
          "    assert!(start_table.start(Anchored::Pattern(PatternID(0)), Start::from_usize(0).unwrap()).is_ok());",
          "    assert!(start_table.start(Anchored::Pattern(PatternID(3)), Start::from_usize(1).unwrap()).is_ok());"
        ],
        "code": [
          "{",
          "    let stride = 8;",
          "    let pattern_len = Some(5);",
          "    let table = vec![StateID(0), StateID(1), StateID(2), StateID(3), StateID(4), StateID(5), StateID(6), StateID(7), StateID(8), StateID(9), StateID(10)];",
          "",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::Text; 256] },",
          "        stride,",
          "        pattern_len,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let pid = PatternID(4);",
          "    let result = start_table.start(Anchored::Pattern(pid), Start::from_usize(2).unwrap());",
          "    assert_eq!(result, Ok(StateID(20)));",
          "    assert_eq!(start_table.pattern_len, Some(5));",
          "    assert!(start_table.kind.has_anchored());",
          "    assert!(start_table.kind.has_unanchored());",
          "    assert!(pid.as_usize() < start_table.pattern_len.unwrap());",
          "    assert!(start_table.table()[20] == StateID(4));",
          "    assert!(start_table.start(Anchored::Pattern(PatternID(0)), Start::from_usize(0).unwrap()).is_ok());",
          "    assert!(start_table.start(Anchored::Pattern(PatternID(3)), Start::from_usize(1).unwrap()).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]