[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mode = Anchored::No;",
          "    let error = MatchError::unsupported_anchored(mode);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(error.kind(), &MatchErrorKind::UnsupportedAnchored { mode: Anchored::No });",
          "    assert!(matches!(error.kind(), MatchErrorKind::UnsupportedAnchored { .. }));"
        ],
        "code": [
          "{",
          "    let mode = Anchored::No;",
          "    let error = MatchError::unsupported_anchored(mode);",
          "    assert_eq!(error.kind(), &MatchErrorKind::UnsupportedAnchored { mode: Anchored::No });",
          "    assert!(matches!(error.kind(), MatchErrorKind::UnsupportedAnchored { .. }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mode = Anchored::Yes;",
          "    let error = MatchError::unsupported_anchored(mode);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(error.kind(), &MatchErrorKind::UnsupportedAnchored { mode });"
        ],
        "code": [
          "{",
          "    let mode = Anchored::Yes;",
          "    let error = MatchError::unsupported_anchored(mode);",
          "    assert_eq!(error.kind(), &MatchErrorKind::UnsupportedAnchored { mode });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Clone, Copy, Debug, Eq, PartialEq)]",
          "    struct DummyPatternID(u32);",
          "    ",
          "    let mode = Anchored::Pattern(DummyPatternID(1));",
          "    let error = MatchError::unsupported_anchored(mode);",
          "}"
        ],
        "oracle": [
          "    MatchError::unsupported_anchored(Anchored::No);",
          "    MatchError::unsupported_anchored(Anchored::Yes);",
          "    MatchError::unsupported_anchored(Anchored::Pattern(DummyPatternID(0)));",
          "    MatchError::unsupported_anchored(Anchored::Pattern(DummyPatternID(2)));",
          "    MatchError::unsupported_anchored(Anchored::Pattern(DummyPatternID(u32::MAX)));"
        ],
        "code": [
          "{",
          "    #[derive(Clone, Copy, Debug, Eq, PartialEq)]",
          "    struct DummyPatternID(u32);",
          "    ",
          "    let mode = Anchored::Pattern(DummyPatternID(1));",
          "    let error = MatchError::unsupported_anchored(mode);",
          "    MatchError::unsupported_anchored(Anchored::No);",
          "    MatchError::unsupported_anchored(Anchored::Yes);",
          "    MatchError::unsupported_anchored(Anchored::Pattern(DummyPatternID(0)));",
          "    MatchError::unsupported_anchored(Anchored::Pattern(DummyPatternID(2)));",
          "    MatchError::unsupported_anchored(Anchored::Pattern(DummyPatternID(u32::MAX)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    #[derive(Clone, Copy, Debug, Eq, PartialEq)]",
          "    struct DummyPatternID(u32);",
          "    ",
          "    let mode = Anchored::Pattern(DummyPatternID(u32::MAX));",
          "    let error = MatchError::unsupported_anchored(mode);",
          "}"
        ],
        "oracle": [
          "    MatchError::unsupported_anchored(Anchored::Pattern(DummyPatternID(u32::MAX)));"
        ],
        "code": [
          "{",
          "    #[derive(Clone, Copy, Debug, Eq, PartialEq)]",
          "    struct DummyPatternID(u32);",
          "    ",
          "    let mode = Anchored::Pattern(DummyPatternID(u32::MAX));",
          "    let error = MatchError::unsupported_anchored(mode);",
          "    MatchError::unsupported_anchored(Anchored::Pattern(DummyPatternID(u32::MAX)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]