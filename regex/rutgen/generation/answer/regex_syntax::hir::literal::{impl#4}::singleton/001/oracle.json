[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lit = Literal(Box::from(b\"\".to_vec()));",
          "    let result = Seq::singleton(lit);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.literals().unwrap().len(), 1);",
          "    assert_eq!(result.literals().unwrap()[0], lit);",
          "    assert!(result.literals().is_some());"
        ],
        "code": [
          "{",
          "    let lit = Literal(Box::from(b\"\".to_vec()));",
          "    let result = Seq::singleton(lit);",
          "    assert_eq!(result.literals().unwrap().len(), 1);",
          "    assert_eq!(result.literals().unwrap()[0], lit);",
          "    assert!(result.literals().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lit = Literal(Box::from(b\"abc\".to_vec()));",
          "    let result = Seq::singleton(lit);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.literals(), Some(&[lit]));"
        ],
        "code": [
          "{",
          "    let lit = Literal(Box::from(b\"abc\".to_vec()));",
          "    let result = Seq::singleton(lit);",
          "    assert_eq!(result.literals(), Some(&[lit]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lit = Literal(Box::from(b\"\\xE2\\x82\\xAC\".to_vec())); // Euro Sign",
          "    let result = Seq::singleton(lit);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.literals(), Some(&[lit]));"
        ],
        "code": [
          "{",
          "    let lit = Literal(Box::from(b\"\\xE2\\x82\\xAC\".to_vec())); // Euro Sign",
          "    let result = Seq::singleton(lit);",
          "    assert_eq!(result.literals(), Some(&[lit]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lit = Literal(Box::from(b\"exact\".to_vec()));",
          "    let result = Seq::singleton(lit);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.literals(), Some(&[lit]));"
        ],
        "code": [
          "{",
          "    let lit = Literal(Box::from(b\"exact\".to_vec()));",
          "    let result = Seq::singleton(lit);",
          "    assert_eq!(result.literals(), Some(&[lit]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lit = Literal(Box::from(b\"inexact\".to_vec()));",
          "    let result = Seq::singleton(lit);",
          "}"
        ],
        "oracle": [
          "    let lit = Literal(Box::from(b\"inexact\".to_vec()));",
          "    assert_eq!(result.literals(), Some(&[lit]));",
          "    assert!(!result.is_empty());",
          "    assert!(result.len().is_some());",
          "    assert_eq!(result.len().unwrap(), 1);",
          "    assert!(result.is_finite());",
          "    assert!(result.is_exact());"
        ],
        "code": [
          "{",
          "    let lit = Literal(Box::from(b\"inexact\".to_vec()));",
          "    let result = Seq::singleton(lit);",
          "    let lit = Literal(Box::from(b\"inexact\".to_vec()));",
          "    assert_eq!(result.literals(), Some(&[lit]));",
          "    assert!(!result.is_empty());",
          "    assert!(result.len().is_some());",
          "    assert_eq!(result.len().unwrap(), 1);",
          "    assert!(result.is_finite());",
          "    assert!(result.is_exact());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]