[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut range = ClassBytesRange::default();",
          "    range.set_upper(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(range.end, 0);"
        ],
        "code": [
          "{",
          "    let mut range = ClassBytesRange::default();",
          "    range.set_upper(0);",
          "    assert_eq!(range.end, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut range = ClassBytesRange::default();",
          "    range.set_upper(255);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(range.upper(), 255);",
          "    assert_eq!(range.lower(), 0);",
          "    assert!(range.start <= range.end);",
          "    assert!(range.end >= range.start);",
          "    assert_eq!(range, ClassBytesRange { start: 0, end: 255 });"
        ],
        "code": [
          "{",
          "    let mut range = ClassBytesRange::default();",
          "    range.set_upper(255);",
          "    assert_eq!(range.upper(), 255);",
          "    assert_eq!(range.lower(), 0);",
          "    assert!(range.start <= range.end);",
          "    assert!(range.end >= range.start);",
          "    assert_eq!(range, ClassBytesRange { start: 0, end: 255 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut range = ClassBytesRange { start: 10, end: 20 };",
          "    range.set_upper(25);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(range.end, 25);"
        ],
        "code": [
          "{",
          "    let mut range = ClassBytesRange { start: 10, end: 20 };",
          "    range.set_upper(25);",
          "    assert_eq!(range.end, 25);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut range = ClassBytesRange { start: 10, end: 20 };",
          "    range.set_upper(15);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(range.end, 15);",
          "    assert_eq!(range.start, 10);"
        ],
        "code": [
          "{",
          "    let mut range = ClassBytesRange { start: 10, end: 20 };",
          "    range.set_upper(15);",
          "    assert_eq!(range.end, 15);",
          "    assert_eq!(range.start, 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut range = ClassBytesRange { start: 10, end: 20 };",
          "    range.set_upper(20);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(range.end, 20);"
        ],
        "code": [
          "{",
          "    let mut range = ClassBytesRange { start: 10, end: 20 };",
          "    range.set_upper(20);",
          "    assert_eq!(range.end, 20);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]