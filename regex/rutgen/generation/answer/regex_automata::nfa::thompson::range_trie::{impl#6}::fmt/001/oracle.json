[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition = Transition {",
          "        range: Utf8Range {",
          "            start: 0, // valid byte range start",
          "            end: 0,   // end equals start",
          "        },",
          "        next_id: StateID::new_unchecked(1), // valid StateID",
          "    };",
          "    let mut buffer = String::new();",
          "    let _ = transition.fmt(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"{:02X} => {:02X}\", 0, 1)",
          "    assert_eq!(buffer, \"00 => 01\");"
        ],
        "code": [
          "{",
          "    let transition = Transition {",
          "        range: Utf8Range {",
          "            start: 0, // valid byte range start",
          "            end: 0,   // end equals start",
          "        },",
          "        next_id: StateID::new_unchecked(1), // valid StateID",
          "    };",
          "    let mut buffer = String::new();",
          "    let _ = transition.fmt(&mut buffer);",
          "    write!(f, \"{:02X} => {:02X}\", 0, 1)",
          "    assert_eq!(buffer, \"00 => 01\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition = Transition {",
          "        range: Utf8Range {",
          "            start: 127, // valid byte range start",
          "            end: 127,   // end equals start",
          "        },",
          "        next_id: StateID::new_unchecked(100), // valid StateID",
          "    };",
          "    let mut buffer = String::new();",
          "    let _ = transition.fmt(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"{:02X} => {:02X}\", 0x7F, 100);",
          "    assert_eq!(buffer, \"7F => 64\");"
        ],
        "code": [
          "{",
          "    let transition = Transition {",
          "        range: Utf8Range {",
          "            start: 127, // valid byte range start",
          "            end: 127,   // end equals start",
          "        },",
          "        next_id: StateID::new_unchecked(100), // valid StateID",
          "    };",
          "    let mut buffer = String::new();",
          "    let _ = transition.fmt(&mut buffer);",
          "    write!(f, \"{:02X} => {:02X}\", 0x7F, 100);",
          "    assert_eq!(buffer, \"7F => 64\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition = Transition {",
          "        range: Utf8Range {",
          "            start: 255, // valid byte range start",
          "            end: 255,   // end equals start",
          "        },",
          "        next_id: StateID::new_unchecked(255), // valid StateID",
          "    };",
          "    let mut buffer = String::new();",
          "    let _ = transition.fmt(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer, \"FF => FF\");"
        ],
        "code": [
          "{",
          "    let transition = Transition {",
          "        range: Utf8Range {",
          "            start: 255, // valid byte range start",
          "            end: 255,   // end equals start",
          "        },",
          "        next_id: StateID::new_unchecked(255), // valid StateID",
          "    };",
          "    let mut buffer = String::new();",
          "    let _ = transition.fmt(&mut buffer);",
          "    assert_eq!(buffer, \"FF => FF\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]