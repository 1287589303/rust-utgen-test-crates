[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition = Transition {",
          "        range: Utf8Range { start: 0x30, end: 0x39 }, // Valid UTF-8 range for digits '0' to '9'",
          "        next_id: StateID::new_unchecked(2), // Valid StateID",
          "    };",
          "    let mut output = String::new();",
          "    let _ = transition.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"{:02X}-{:02X} => {:02X}\", 0x30, 0x39, 2);"
        ],
        "code": [
          "{",
          "    let transition = Transition {",
          "        range: Utf8Range { start: 0x30, end: 0x39 }, // Valid UTF-8 range for digits '0' to '9'",
          "        next_id: StateID::new_unchecked(2), // Valid StateID",
          "    };",
          "    let mut output = String::new();",
          "    let _ = transition.fmt(&mut output);",
          "    write!(f, \"{:02X}-{:02X} => {:02X}\", 0x30, 0x39, 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition = Transition {",
          "        range: Utf8Range { start: 0x41, end: 0x5A }, // Valid UTF-8 range for uppercase 'A' to 'Z'",
          "        next_id: StateID::new_unchecked(3), // Valid StateID",
          "    };",
          "    let mut output = String::new();",
          "    let _ = transition.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"41-5A => 03\");"
        ],
        "code": [
          "{",
          "    let transition = Transition {",
          "        range: Utf8Range { start: 0x41, end: 0x5A }, // Valid UTF-8 range for uppercase 'A' to 'Z'",
          "        next_id: StateID::new_unchecked(3), // Valid StateID",
          "    };",
          "    let mut output = String::new();",
          "    let _ = transition.fmt(&mut output);",
          "    assert_eq!(output, \"41-5A => 03\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition = Transition {",
          "        range: Utf8Range { start: 0xD7A3, end: 0xD7B2 }, // Valid UTF-8 range within surrogate code points",
          "        next_id: StateID::new_unchecked(4), // Valid StateID",
          "    };",
          "    let mut output = String::new();",
          "    let _ = transition.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"D7A3-D7B2 => 04\");"
        ],
        "code": [
          "{",
          "    let transition = Transition {",
          "        range: Utf8Range { start: 0xD7A3, end: 0xD7B2 }, // Valid UTF-8 range within surrogate code points",
          "        next_id: StateID::new_unchecked(4), // Valid StateID",
          "    };",
          "    let mut output = String::new();",
          "    let _ = transition.fmt(&mut output);",
          "    assert_eq!(output, \"D7A3-D7B2 => 04\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition = Transition {",
          "        range: Utf8Range { start: 0x00E0, end: 0x00E5 }, // Valid UTF-8 range for 'à' to 'ë'",
          "        next_id: StateID::new_unchecked(5), // Valid StateID",
          "    };",
          "    let mut output = String::new();",
          "    let _ = transition.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"{:02X}-{:02X} => {:02X}\", 0x00E0, 0x00E5, 5) == output.trim()"
        ],
        "code": [
          "{",
          "    let transition = Transition {",
          "        range: Utf8Range { start: 0x00E0, end: 0x00E5 }, // Valid UTF-8 range for 'à' to 'ë'",
          "        next_id: StateID::new_unchecked(5), // Valid StateID",
          "    };",
          "    let mut output = String::new();",
          "    let _ = transition.fmt(&mut output);",
          "    write!(f, \"{:02X}-{:02X} => {:02X}\", 0x00E0, 0x00E5, 5) == output.trim()",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]