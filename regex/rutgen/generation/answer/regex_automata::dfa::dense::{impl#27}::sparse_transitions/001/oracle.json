[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestState<'a> {",
          "        id: StateID,",
          "        stride2: usize,",
          "        transitions: &'a [StateID],",
          "    }",
          "",
          "    let state_id = StateID(SmallIndex::new(1));",
          "    let transitions = &[StateID(SmallIndex::new(2)), StateID(SmallIndex::new(3))];",
          "    let state = TestState {",
          "        id: state_id,",
          "        stride2: 2,",
          "        transitions,",
          "    };",
          "",
          "    let _result = state.sparse_transitions();",
          "}"
        ],
        "oracle": [
          "    _result.cur.is_none();",
          "    _result.dense.len() == 2;",
          "    _result.dense.it.len() == 2;",
          "    _result.dense.it.next().is_some();",
          "    _result.dense.it.next().unwrap().1 == &StateID(SmallIndex::new(2));",
          "    _result.dense.it.next().unwrap().1 == &StateID(SmallIndex::new(3));"
        ],
        "code": [
          "{",
          "    struct TestState<'a> {",
          "        id: StateID,",
          "        stride2: usize,",
          "        transitions: &'a [StateID],",
          "    }",
          "",
          "    let state_id = StateID(SmallIndex::new(1));",
          "    let transitions = &[StateID(SmallIndex::new(2)), StateID(SmallIndex::new(3))];",
          "    let state = TestState {",
          "        id: state_id,",
          "        stride2: 2,",
          "        transitions,",
          "    };",
          "",
          "    let _result = state.sparse_transitions();",
          "    _result.cur.is_none();",
          "    _result.dense.len() == 2;",
          "    _result.dense.it.len() == 2;",
          "    _result.dense.it.next().is_some();",
          "    _result.dense.it.next().unwrap().1 == &StateID(SmallIndex::new(2));",
          "    _result.dense.it.next().unwrap().1 == &StateID(SmallIndex::new(3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestState<'a> {",
          "        id: StateID,",
          "        stride2: usize,",
          "        transitions: &'a [StateID],",
          "    }",
          "",
          "    let state_id = StateID(SmallIndex::new(0));",
          "    let transitions = &[",
          "        StateID(SmallIndex::new(1)), // Non-dead transition",
          "        DEAD,                         // Dead transition",
          "        StateID(SmallIndex::new(3)),",
          "    ];",
          "    let state = TestState {",
          "        id: state_id,",
          "        stride2: 3,",
          "        transitions,",
          "    };",
          "",
          "    let _result = state.sparse_transitions();",
          "}"
        ],
        "oracle": [
          "    _result.cur.is_none();",
          "    _result.dense.len == 2;",
          "    _result.dense.it.clone().next().unwrap().1 == StateID(SmallIndex::new(1));",
          "    _result.dense.it.clone().nth(1).unwrap().1 == StateID(SmallIndex::new(3));"
        ],
        "code": [
          "{",
          "    struct TestState<'a> {",
          "        id: StateID,",
          "        stride2: usize,",
          "        transitions: &'a [StateID],",
          "    }",
          "",
          "    let state_id = StateID(SmallIndex::new(0));",
          "    let transitions = &[",
          "        StateID(SmallIndex::new(1)), // Non-dead transition",
          "        DEAD,                         // Dead transition",
          "        StateID(SmallIndex::new(3)),",
          "    ];",
          "    let state = TestState {",
          "        id: state_id,",
          "        stride2: 3,",
          "        transitions,",
          "    };",
          "",
          "    let _result = state.sparse_transitions();",
          "    _result.cur.is_none();",
          "    _result.dense.len == 2;",
          "    _result.dense.it.clone().next().unwrap().1 == StateID(SmallIndex::new(1));",
          "    _result.dense.it.clone().nth(1).unwrap().1 == StateID(SmallIndex::new(3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestState<'a> {",
          "        id: StateID,",
          "        stride2: usize,",
          "        transitions: &'a [StateID],",
          "    }",
          "",
          "    let state_id = StateID(SmallIndex::new(2));",
          "    let transitions = &[StateID(SmallIndex::new(3))]; // Single non-dead transition",
          "    let state = TestState {",
          "        id: state_id,",
          "        stride2: 1,",
          "        transitions,",
          "    };",
          "",
          "    let _result = state.sparse_transitions();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.cur, None);",
          "    assert_eq!(_result.dense.len, 1);",
          "    assert_eq!(_result.dense.it.clone().next(), Some((0, &StateID(SmallIndex::new(3)))));",
          "    assert_eq!(_result.dense.len, state.transitions.len());",
          "    assert!(state.sparse_transitions().dense.len > 0);"
        ],
        "code": [
          "{",
          "    struct TestState<'a> {",
          "        id: StateID,",
          "        stride2: usize,",
          "        transitions: &'a [StateID],",
          "    }",
          "",
          "    let state_id = StateID(SmallIndex::new(2));",
          "    let transitions = &[StateID(SmallIndex::new(3))]; // Single non-dead transition",
          "    let state = TestState {",
          "        id: state_id,",
          "        stride2: 1,",
          "        transitions,",
          "    };",
          "",
          "    let _result = state.sparse_transitions();",
          "    assert_eq!(_result.cur, None);",
          "    assert_eq!(_result.dense.len, 1);",
          "    assert_eq!(_result.dense.it.clone().next(), Some((0, &StateID(SmallIndex::new(3)))));",
          "    assert_eq!(_result.dense.len, state.transitions.len());",
          "    assert!(state.sparse_transitions().dense.len > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestState<'a> {",
          "        id: StateID,",
          "        stride2: usize,",
          "        transitions: &'a [StateID],",
          "    }",
          "",
          "    let state_id = StateID(SmallIndex::new(2));",
          "    let transitions: Vec<StateID> = vec![]; // No transitions",
          "    let state = TestState {",
          "        id: state_id,",
          "        stride2: 0,",
          "        transitions: transitions.as_slice(),",
          "    };",
          "",
          "    let _result = state.sparse_transitions();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.dense.len, 0);",
          "    assert_eq!(_result.cur, None);"
        ],
        "code": [
          "{",
          "    struct TestState<'a> {",
          "        id: StateID,",
          "        stride2: usize,",
          "        transitions: &'a [StateID],",
          "    }",
          "",
          "    let state_id = StateID(SmallIndex::new(2));",
          "    let transitions: Vec<StateID> = vec![]; // No transitions",
          "    let state = TestState {",
          "        id: state_id,",
          "        stride2: 0,",
          "        transitions: transitions.as_slice(),",
          "    };",
          "",
          "    let _result = state.sparse_transitions();",
          "    assert_eq!(_result.dense.len, 0);",
          "    assert_eq!(_result.cur, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]