[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet { bits: 0 };",
          "    look_set.set_insert(Look::Start);",
          "    look_set.contains_anchor_haystack();",
          "}"
        ],
        "oracle": [
          "    assert!(look_set.contains(Look::Start));",
          "    assert!(!look_set.contains(Look::End));",
          "    assert!(look_set.contains_anchor_haystack());",
          "    look_set.set_insert(Look::End);",
          "    assert!(look_set.contains(Look::End));",
          "    assert!(look_set.contains_anchor_haystack());",
          "    look_set.set_remove(Look::Start);",
          "    assert!(!look_set.contains(Look::Start));",
          "    assert!(look_set.contains(Look::End));",
          "    assert!(look_set.contains_anchor_haystack());",
          "    look_set.set_remove(Look::End);",
          "    assert!(!look_set.contains(Look::End));",
          "    assert!(!look_set.contains_anchor_haystack());"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet { bits: 0 };",
          "    look_set.set_insert(Look::Start);",
          "    look_set.contains_anchor_haystack();",
          "    assert!(look_set.contains(Look::Start));",
          "    assert!(!look_set.contains(Look::End));",
          "    assert!(look_set.contains_anchor_haystack());",
          "    look_set.set_insert(Look::End);",
          "    assert!(look_set.contains(Look::End));",
          "    assert!(look_set.contains_anchor_haystack());",
          "    look_set.set_remove(Look::Start);",
          "    assert!(!look_set.contains(Look::Start));",
          "    assert!(look_set.contains(Look::End));",
          "    assert!(look_set.contains_anchor_haystack());",
          "    look_set.set_remove(Look::End);",
          "    assert!(!look_set.contains(Look::End));",
          "    assert!(!look_set.contains_anchor_haystack());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet { bits: 0 };",
          "    look_set.set_insert(Look::Start);",
          "    look_set.set_insert(Look::End);",
          "    look_set.contains_anchor_haystack();",
          "}"
        ],
        "oracle": [
          "    look_set.set_insert(Look::Start);",
          "    look_set.set_insert(Look::End);",
          "    assert_eq!(look_set.contains_anchor_haystack(), true);",
          "    look_set.set_remove(Look::End);",
          "    assert_eq!(look_set.contains_anchor_haystack(), true);",
          "    look_set.set_remove(Look::Start);",
          "    assert_eq!(look_set.contains_anchor_haystack(), false);",
          "    look_set.set_insert(Look::End);",
          "    assert_eq!(look_set.contains_anchor_haystack(), true);",
          "    look_set.bits = 0;",
          "    assert_eq!(look_set.contains_anchor_haystack(), false);"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet { bits: 0 };",
          "    look_set.set_insert(Look::Start);",
          "    look_set.set_insert(Look::End);",
          "    look_set.contains_anchor_haystack();",
          "    look_set.set_insert(Look::Start);",
          "    look_set.set_insert(Look::End);",
          "    assert_eq!(look_set.contains_anchor_haystack(), true);",
          "    look_set.set_remove(Look::End);",
          "    assert_eq!(look_set.contains_anchor_haystack(), true);",
          "    look_set.set_remove(Look::Start);",
          "    assert_eq!(look_set.contains_anchor_haystack(), false);",
          "    look_set.set_insert(Look::End);",
          "    assert_eq!(look_set.contains_anchor_haystack(), true);",
          "    look_set.bits = 0;",
          "    assert_eq!(look_set.contains_anchor_haystack(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet { bits: 0 };",
          "    look_set.set_insert(Look::End);",
          "    look_set.contains_anchor_haystack();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.contains(Look::Start), true);",
          "    assert_eq!(look_set.contains(Look::End), true);",
          "    assert!(look_set.contains_anchor_haystack());"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet { bits: 0 };",
          "    look_set.set_insert(Look::End);",
          "    look_set.contains_anchor_haystack();",
          "    assert_eq!(look_set.contains(Look::Start), true);",
          "    assert_eq!(look_set.contains(Look::End), true);",
          "    assert!(look_set.contains_anchor_haystack());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: 0 };",
          "    look_set.contains_anchor_haystack();",
          "}"
        ],
        "oracle": [
          "    let look_set_with_start = LookSet { bits: Look::Start as u32 };",
          "    assert!(look_set_with_start.contains_anchor_haystack());",
          "    ",
          "    let look_set_with_end = LookSet { bits: Look::End as u32 };",
          "    assert!(look_set_with_end.contains_anchor_haystack());",
          "    ",
          "    let look_set_with_both = LookSet { bits: (Look::Start | Look::End) as u32 };",
          "    assert!(look_set_with_both.contains_anchor_haystack());",
          "    ",
          "    let look_set_empty = LookSet { bits: 0 };",
          "    assert!(!look_set_empty.contains_anchor_haystack());",
          "    ",
          "    let look_set_with_only_start_line = LookSet { bits: Look::StartLF as u32 };",
          "    assert!(!look_set_with_only_start_line.contains_anchor_haystack());",
          "    ",
          "    let look_set_with_only_end_line = LookSet { bits: Look::EndLF as u32 };",
          "    assert!(!look_set_with_only_end_line.contains_anchor_haystack());"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: 0 };",
          "    look_set.contains_anchor_haystack();",
          "    let look_set_with_start = LookSet { bits: Look::Start as u32 };",
          "    assert!(look_set_with_start.contains_anchor_haystack());",
          "    ",
          "    let look_set_with_end = LookSet { bits: Look::End as u32 };",
          "    assert!(look_set_with_end.contains_anchor_haystack());",
          "    ",
          "    let look_set_with_both = LookSet { bits: (Look::Start | Look::End) as u32 };",
          "    assert!(look_set_with_both.contains_anchor_haystack());",
          "    ",
          "    let look_set_empty = LookSet { bits: 0 };",
          "    assert!(!look_set_empty.contains_anchor_haystack());",
          "    ",
          "    let look_set_with_only_start_line = LookSet { bits: Look::StartLF as u32 };",
          "    assert!(!look_set_with_only_start_line.contains_anchor_haystack());",
          "    ",
          "    let look_set_with_only_end_line = LookSet { bits: Look::EndLF as u32 };",
          "    assert!(!look_set_with_only_end_line.contains_anchor_haystack());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]