[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStrategy {",
          "        core: Core,",
          "    }",
          "",
          "    impl Debug for TestStrategy {",
          "        fn fmt(&self, _: &mut core::fmt::Formatter) -> core::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let cache = Cache {",
          "        capmatches: Captures::new(),",
          "        pikevm: wrappers::PikeVMCache::new(),",
          "        backtrack: wrappers::BoundedBacktrackerCache::new(),",
          "        onepass: wrappers::OnePassCache::new(),",
          "        hybrid: wrappers::HybridCache::new(),",
          "        revhybrid: wrappers::ReverseHybridCache::new(),",
          "    };",
          "",
          "    let strategy = TestStrategy {",
          "        core: Core {",
          "            info: RegexInfo::new(),",
          "            pre: None,",
          "            nfa: NFA::new(),",
          "            nfarev: None,",
          "            pikevm: wrappers::PikeVM::new(),",
          "            backtrack: wrappers::BoundedBacktracker::new(),",
          "            onepass: wrappers::OnePass::new(),",
          "            hybrid: wrappers::Hybrid::new(),",
          "            dfa: wrappers::DFA::new(),",
          "        },",
          "    };",
          "",
          "    strategy.reset_cache(&mut cache);",
          "}"
        ],
        "oracle": [
          "    assert!(cache.capmatches.is_empty());",
          "    assert_eq!(cache.pikevm, wrappers::PikeVMCache::new());",
          "    assert_eq!(cache.backtrack, wrappers::BoundedBacktrackerCache::new());",
          "    assert_eq!(cache.onepass, wrappers::OnePassCache::new());",
          "    assert_eq!(cache.hybrid, wrappers::HybridCache::new());",
          "    assert_eq!(cache.revhybrid, wrappers::ReverseHybridCache::new());",
          "    assert!(strategy.core.nfa.is_empty());",
          "    assert!(strategy.core.nfarev.is_none());",
          "    assert_eq!(strategy.core.backtrack, wrappers::BoundedBacktracker::new());",
          "    assert_eq!(strategy.core.onepass, wrappers::OnePass::new());",
          "    assert_eq!(strategy.core.hybrid, wrappers::Hybrid::new());",
          "    assert_eq!(strategy.core.dfa, wrappers::DFA::new());"
        ],
        "code": [
          "{",
          "    struct TestStrategy {",
          "        core: Core,",
          "    }",
          "",
          "    impl Debug for TestStrategy {",
          "        fn fmt(&self, _: &mut core::fmt::Formatter) -> core::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let cache = Cache {",
          "        capmatches: Captures::new(),",
          "        pikevm: wrappers::PikeVMCache::new(),",
          "        backtrack: wrappers::BoundedBacktrackerCache::new(),",
          "        onepass: wrappers::OnePassCache::new(),",
          "        hybrid: wrappers::HybridCache::new(),",
          "        revhybrid: wrappers::ReverseHybridCache::new(),",
          "    };",
          "",
          "    let strategy = TestStrategy {",
          "        core: Core {",
          "            info: RegexInfo::new(),",
          "            pre: None,",
          "            nfa: NFA::new(),",
          "            nfarev: None,",
          "            pikevm: wrappers::PikeVM::new(),",
          "            backtrack: wrappers::BoundedBacktracker::new(),",
          "            onepass: wrappers::OnePass::new(),",
          "            hybrid: wrappers::Hybrid::new(),",
          "            dfa: wrappers::DFA::new(),",
          "        },",
          "    };",
          "",
          "    strategy.reset_cache(&mut cache);",
          "    assert!(cache.capmatches.is_empty());",
          "    assert_eq!(cache.pikevm, wrappers::PikeVMCache::new());",
          "    assert_eq!(cache.backtrack, wrappers::BoundedBacktrackerCache::new());",
          "    assert_eq!(cache.onepass, wrappers::OnePassCache::new());",
          "    assert_eq!(cache.hybrid, wrappers::HybridCache::new());",
          "    assert_eq!(cache.revhybrid, wrappers::ReverseHybridCache::new());",
          "    assert!(strategy.core.nfa.is_empty());",
          "    assert!(strategy.core.nfarev.is_none());",
          "    assert_eq!(strategy.core.backtrack, wrappers::BoundedBacktracker::new());",
          "    assert_eq!(strategy.core.onepass, wrappers::OnePass::new());",
          "    assert_eq!(strategy.core.hybrid, wrappers::Hybrid::new());",
          "    assert_eq!(strategy.core.dfa, wrappers::DFA::new());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStrategy {",
          "        core: Core,",
          "    }",
          "",
          "    impl Debug for TestStrategy {",
          "        fn fmt(&self, _: &mut core::fmt::Formatter) -> core::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut cache = Cache {",
          "        capmatches: Captures::new(),",
          "        pikevm: wrappers::PikeVMCache::new(),",
          "        backtrack: wrappers::BoundedBacktrackerCache::new(),",
          "        onepass: wrappers::OnePassCache::new(),",
          "        hybrid: wrappers::HybridCache::new(),",
          "        revhybrid: wrappers::ReverseHybridCache::new(),",
          "    };",
          "",
          "    let strategy = TestStrategy {",
          "        core: Core {",
          "            info: RegexInfo::new(),",
          "            pre: None,",
          "            nfa: NFA::new(),",
          "            nfarev: None,",
          "            pikevm: wrappers::PikeVM::new(),",
          "            backtrack: wrappers::BoundedBacktracker::new(),",
          "            onepass: wrappers::OnePass::new(),",
          "            hybrid: wrappers::Hybrid::new(),",
          "            dfa: wrappers::DFA::new(),",
          "        },",
          "    };",
          "",
          "    strategy.reset_cache(&mut cache);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cache.capmatches, Captures::new());",
          "    assert!(cache.pikevm.is_empty());",
          "    assert!(cache.backtrack.is_empty());",
          "    assert!(cache.onepass.is_empty());",
          "    assert!(cache.hybrid.is_empty());",
          "    assert!(cache.revhybrid.is_empty());"
        ],
        "code": [
          "{",
          "    struct TestStrategy {",
          "        core: Core,",
          "    }",
          "",
          "    impl Debug for TestStrategy {",
          "        fn fmt(&self, _: &mut core::fmt::Formatter) -> core::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut cache = Cache {",
          "        capmatches: Captures::new(),",
          "        pikevm: wrappers::PikeVMCache::new(),",
          "        backtrack: wrappers::BoundedBacktrackerCache::new(),",
          "        onepass: wrappers::OnePassCache::new(),",
          "        hybrid: wrappers::HybridCache::new(),",
          "        revhybrid: wrappers::ReverseHybridCache::new(),",
          "    };",
          "",
          "    let strategy = TestStrategy {",
          "        core: Core {",
          "            info: RegexInfo::new(),",
          "            pre: None,",
          "            nfa: NFA::new(),",
          "            nfarev: None,",
          "            pikevm: wrappers::PikeVM::new(),",
          "            backtrack: wrappers::BoundedBacktracker::new(),",
          "            onepass: wrappers::OnePass::new(),",
          "            hybrid: wrappers::Hybrid::new(),",
          "            dfa: wrappers::DFA::new(),",
          "        },",
          "    };",
          "",
          "    strategy.reset_cache(&mut cache);",
          "    assert_eq!(cache.capmatches, Captures::new());",
          "    assert!(cache.pikevm.is_empty());",
          "    assert!(cache.backtrack.is_empty());",
          "    assert!(cache.onepass.is_empty());",
          "    assert!(cache.hybrid.is_empty());",
          "    assert!(cache.revhybrid.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStrategy {",
          "        core: Core,",
          "    }",
          "",
          "    impl Debug for TestStrategy {",
          "        fn fmt(&self, _: &mut core::fmt::Formatter) -> core::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut cache = Cache {",
          "        capmatches: Captures::new(),",
          "        pikevm: wrappers::PikeVMCache::new(),",
          "        backtrack: wrappers::BoundedBacktrackerCache::new(),",
          "        onepass: wrappers::OnePassCache::new(),",
          "        hybrid: wrappers::HybridCache::new(),",
          "        revhybrid: wrappers::ReverseHybridCache::new(),",
          "    };",
          "",
          "    let strategy = TestStrategy {",
          "        core: Core {",
          "            info: RegexInfo::new(),",
          "            pre: None,",
          "            nfa: NFA::new(),",
          "            nfarev: None,",
          "            pikevm: wrappers::PikeVM::new(),",
          "            backtrack: wrappers::BoundedBacktracker::new(),",
          "            onepass: wrappers::OnePass::new(),",
          "            hybrid: wrappers::Hybrid::new(),",
          "            dfa: wrappers::DFA::new(),",
          "        },",
          "    };",
          "",
          "    strategy.reset_cache(&mut cache);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cache.capmatches, Captures::new());",
          "    assert_eq!(cache.pikevm, wrappers::PikeVMCache::new());",
          "    assert_eq!(cache.backtrack, wrappers::BoundedBacktrackerCache::new());",
          "    assert_eq!(cache.onepass, wrappers::OnePassCache::new());",
          "    assert_eq!(cache.hybrid, wrappers::HybridCache::new());",
          "    assert_eq!(cache.revhybrid, wrappers::ReverseHybridCache::new());"
        ],
        "code": [
          "{",
          "    struct TestStrategy {",
          "        core: Core,",
          "    }",
          "",
          "    impl Debug for TestStrategy {",
          "        fn fmt(&self, _: &mut core::fmt::Formatter) -> core::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut cache = Cache {",
          "        capmatches: Captures::new(),",
          "        pikevm: wrappers::PikeVMCache::new(),",
          "        backtrack: wrappers::BoundedBacktrackerCache::new(),",
          "        onepass: wrappers::OnePassCache::new(),",
          "        hybrid: wrappers::HybridCache::new(),",
          "        revhybrid: wrappers::ReverseHybridCache::new(),",
          "    };",
          "",
          "    let strategy = TestStrategy {",
          "        core: Core {",
          "            info: RegexInfo::new(),",
          "            pre: None,",
          "            nfa: NFA::new(),",
          "            nfarev: None,",
          "            pikevm: wrappers::PikeVM::new(),",
          "            backtrack: wrappers::BoundedBacktracker::new(),",
          "            onepass: wrappers::OnePass::new(),",
          "            hybrid: wrappers::Hybrid::new(),",
          "            dfa: wrappers::DFA::new(),",
          "        },",
          "    };",
          "",
          "    strategy.reset_cache(&mut cache);",
          "    assert_eq!(cache.capmatches, Captures::new());",
          "    assert_eq!(cache.pikevm, wrappers::PikeVMCache::new());",
          "    assert_eq!(cache.backtrack, wrappers::BoundedBacktrackerCache::new());",
          "    assert_eq!(cache.onepass, wrappers::OnePassCache::new());",
          "    assert_eq!(cache.hybrid, wrappers::HybridCache::new());",
          "    assert_eq!(cache.revhybrid, wrappers::ReverseHybridCache::new());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]