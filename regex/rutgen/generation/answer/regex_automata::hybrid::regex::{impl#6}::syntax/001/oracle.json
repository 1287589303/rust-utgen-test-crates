[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        case_insensitive: true,",
          "        multi_line: false,",
          "        dot_matches_new_line: false,",
          "        crlf: false,",
          "        line_terminator: 10,",
          "        swap_greed: false,",
          "        ignore_whitespace: false,",
          "        unicode: false,",
          "        utf8: true,",
          "        nest_limit: 100,",
          "        octal: false,",
          "    };",
          "    builder.syntax(config);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.case_insensitive, true);",
          "    assert_eq!(builder.multi_line, false);",
          "    assert_eq!(builder.dot_matches_new_line, false);",
          "    assert_eq!(builder.crlf, false);",
          "    assert_eq!(builder.line_terminator, 10);",
          "    assert_eq!(builder.swap_greed, false);",
          "    assert_eq!(builder.ignore_whitespace, false);",
          "    assert_eq!(builder.unicode, false);",
          "    assert_eq!(builder.utf8, true);",
          "    assert_eq!(builder.nest_limit, 100);",
          "    assert_eq!(builder.octal, false);",
          "    assert!(builder.syntax(config).is_some());"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        case_insensitive: true,",
          "        multi_line: false,",
          "        dot_matches_new_line: false,",
          "        crlf: false,",
          "        line_terminator: 10,",
          "        swap_greed: false,",
          "        ignore_whitespace: false,",
          "        unicode: false,",
          "        utf8: true,",
          "        nest_limit: 100,",
          "        octal: false,",
          "    };",
          "    builder.syntax(config);",
          "    assert_eq!(builder.case_insensitive, true);",
          "    assert_eq!(builder.multi_line, false);",
          "    assert_eq!(builder.dot_matches_new_line, false);",
          "    assert_eq!(builder.crlf, false);",
          "    assert_eq!(builder.line_terminator, 10);",
          "    assert_eq!(builder.swap_greed, false);",
          "    assert_eq!(builder.ignore_whitespace, false);",
          "    assert_eq!(builder.unicode, false);",
          "    assert_eq!(builder.utf8, true);",
          "    assert_eq!(builder.nest_limit, 100);",
          "    assert_eq!(builder.octal, false);",
          "    assert!(builder.syntax(config).is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        case_insensitive: false,",
          "        multi_line: true,",
          "        dot_matches_new_line: false,",
          "        crlf: true,",
          "        line_terminator: 13,",
          "        swap_greed: true,",
          "        ignore_whitespace: true,",
          "        unicode: true,",
          "        utf8: false,",
          "        nest_limit: 500,",
          "        octal: true,",
          "    };",
          "    builder.syntax(config);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.dfa.config.case_insensitive, false);",
          "    assert_eq!(builder.dfa.config.multi_line, true);",
          "    assert_eq!(builder.dfa.config.dot_matches_new_line, false);",
          "    assert_eq!(builder.dfa.config.crlf, true);",
          "    assert_eq!(builder.dfa.config.line_terminator, 13);",
          "    assert_eq!(builder.dfa.config.swap_greed, true);",
          "    assert_eq!(builder.dfa.config.ignore_whitespace, true);",
          "    assert_eq!(builder.dfa.config.unicode, true);",
          "    assert_eq!(builder.dfa.config.utf8, false);",
          "    assert_eq!(builder.dfa.config.nest_limit, 500);",
          "    assert_eq!(builder.dfa.config.octal, true);",
          "    assert!(builder.syntax(config) as *const _ == &mut builder as *mut _);"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        case_insensitive: false,",
          "        multi_line: true,",
          "        dot_matches_new_line: false,",
          "        crlf: true,",
          "        line_terminator: 13,",
          "        swap_greed: true,",
          "        ignore_whitespace: true,",
          "        unicode: true,",
          "        utf8: false,",
          "        nest_limit: 500,",
          "        octal: true,",
          "    };",
          "    builder.syntax(config);",
          "    assert_eq!(builder.dfa.config.case_insensitive, false);",
          "    assert_eq!(builder.dfa.config.multi_line, true);",
          "    assert_eq!(builder.dfa.config.dot_matches_new_line, false);",
          "    assert_eq!(builder.dfa.config.crlf, true);",
          "    assert_eq!(builder.dfa.config.line_terminator, 13);",
          "    assert_eq!(builder.dfa.config.swap_greed, true);",
          "    assert_eq!(builder.dfa.config.ignore_whitespace, true);",
          "    assert_eq!(builder.dfa.config.unicode, true);",
          "    assert_eq!(builder.dfa.config.utf8, false);",
          "    assert_eq!(builder.dfa.config.nest_limit, 500);",
          "    assert_eq!(builder.dfa.config.octal, true);",
          "    assert!(builder.syntax(config) as *const _ == &mut builder as *mut _);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        case_insensitive: true,",
          "        multi_line: true,",
          "        dot_matches_new_line: true,",
          "        crlf: false,",
          "        line_terminator: 255,",
          "        swap_greed: true,",
          "        ignore_whitespace: false,",
          "        unicode: true,",
          "        utf8: true,",
          "        nest_limit: 1,",
          "        octal: false,",
          "    };",
          "    builder.syntax(config);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.dfa.config.case_insensitive, true);",
          "    assert_eq!(builder.dfa.config.multi_line, true);",
          "    assert_eq!(builder.dfa.config.dot_matches_new_line, true);",
          "    assert_eq!(builder.dfa.config.crlf, false);",
          "    assert_eq!(builder.dfa.config.line_terminator, 255);",
          "    assert_eq!(builder.dfa.config.swap_greed, true);",
          "    assert_eq!(builder.dfa.config.ignore_whitespace, false);",
          "    assert_eq!(builder.dfa.config.unicode, true);",
          "    assert_eq!(builder.dfa.config.utf8, true);",
          "    assert_eq!(builder.dfa.config.nest_limit, 1);",
          "    assert_eq!(builder.dfa.config.octal, false);",
          "    assert!(std::ptr::eq(builder.syntax(config), &mut builder));"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        case_insensitive: true,",
          "        multi_line: true,",
          "        dot_matches_new_line: true,",
          "        crlf: false,",
          "        line_terminator: 255,",
          "        swap_greed: true,",
          "        ignore_whitespace: false,",
          "        unicode: true,",
          "        utf8: true,",
          "        nest_limit: 1,",
          "        octal: false,",
          "    };",
          "    builder.syntax(config);",
          "    assert_eq!(builder.dfa.config.case_insensitive, true);",
          "    assert_eq!(builder.dfa.config.multi_line, true);",
          "    assert_eq!(builder.dfa.config.dot_matches_new_line, true);",
          "    assert_eq!(builder.dfa.config.crlf, false);",
          "    assert_eq!(builder.dfa.config.line_terminator, 255);",
          "    assert_eq!(builder.dfa.config.swap_greed, true);",
          "    assert_eq!(builder.dfa.config.ignore_whitespace, false);",
          "    assert_eq!(builder.dfa.config.unicode, true);",
          "    assert_eq!(builder.dfa.config.utf8, true);",
          "    assert_eq!(builder.dfa.config.nest_limit, 1);",
          "    assert_eq!(builder.dfa.config.octal, false);",
          "    assert!(std::ptr::eq(builder.syntax(config), &mut builder));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        case_insensitive: false,",
          "        multi_line: false,",
          "        dot_matches_new_line: false,",
          "        crlf: false,",
          "        line_terminator: 0,",
          "        swap_greed: false,",
          "        ignore_whitespace: false,",
          "        unicode: false,",
          "        utf8: false,",
          "        nest_limit: 1000,",
          "        octal: false,",
          "    };",
          "    builder.syntax(config);",
          "}"
        ],
        "oracle": [
          "    builder.syntax(config).should_equal(&builder);",
          "    builder.syntax(config).should_be_type_of::<&mut Builder>();",
          "    builder.syntax(config).should_not_be_null();",
          "    builder.syntax(config).case_insensitive.should_be_false();",
          "    builder.syntax(config).multi_line.should_be_false();",
          "    builder.syntax(config).dot_matches_new_line.should_be_false();",
          "    builder.syntax(config).crlf.should_be_false();",
          "    builder.syntax(config).line_terminator.should_equal(0);",
          "    builder.syntax(config).swap_greed.should_be_false();",
          "    builder.syntax(config).ignore_whitespace.should_be_false();",
          "    builder.syntax(config).unicode.should_be_false();",
          "    builder.syntax(config).utf8.should_be_false();",
          "    builder.syntax(config).nest_limit.should_equal(1000);",
          "    builder.syntax(config).octal.should_be_false();"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        case_insensitive: false,",
          "        multi_line: false,",
          "        dot_matches_new_line: false,",
          "        crlf: false,",
          "        line_terminator: 0,",
          "        swap_greed: false,",
          "        ignore_whitespace: false,",
          "        unicode: false,",
          "        utf8: false,",
          "        nest_limit: 1000,",
          "        octal: false,",
          "    };",
          "    builder.syntax(config);",
          "    builder.syntax(config).should_equal(&builder);",
          "    builder.syntax(config).should_be_type_of::<&mut Builder>();",
          "    builder.syntax(config).should_not_be_null();",
          "    builder.syntax(config).case_insensitive.should_be_false();",
          "    builder.syntax(config).multi_line.should_be_false();",
          "    builder.syntax(config).dot_matches_new_line.should_be_false();",
          "    builder.syntax(config).crlf.should_be_false();",
          "    builder.syntax(config).line_terminator.should_equal(0);",
          "    builder.syntax(config).swap_greed.should_be_false();",
          "    builder.syntax(config).ignore_whitespace.should_be_false();",
          "    builder.syntax(config).unicode.should_be_false();",
          "    builder.syntax(config).utf8.should_be_false();",
          "    builder.syntax(config).nest_limit.should_equal(1000);",
          "    builder.syntax(config).octal.should_be_false();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]