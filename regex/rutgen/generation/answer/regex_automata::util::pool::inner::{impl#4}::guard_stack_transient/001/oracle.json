[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestType;",
          "    impl Send for TestType {}",
          "",
          "    let pool = Pool {",
          "        stack: Mutex::new(vec![Box::new(TestType)]),",
          "        create: || Box::new(TestType),",
          "    };",
          "",
          "    let value = Box::new(TestType);",
          "    let guard = pool.guard_stack_transient(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(guard.pool, &pool);",
          "    assert!(guard.value.is_some());",
          "    assert!(guard.discard);"
        ],
        "code": [
          "{",
          "    struct TestType;",
          "    impl Send for TestType {}",
          "",
          "    let pool = Pool {",
          "        stack: Mutex::new(vec![Box::new(TestType)]),",
          "        create: || Box::new(TestType),",
          "    };",
          "",
          "    let value = Box::new(TestType);",
          "    let guard = pool.guard_stack_transient(value);",
          "    assert_eq!(guard.pool, &pool);",
          "    assert!(guard.value.is_some());",
          "    assert!(guard.discard);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestType;",
          "    impl Send for TestType {}",
          "",
          "    let pool = Pool {",
          "        stack: Mutex::new(vec![]),",
          "        create: || Box::new(TestType),",
          "    };",
          "",
          "    let value = Box::new(TestType);",
          "    let guard = pool.guard_stack_transient(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(guard.pool, &pool);",
          "    assert!(guard.value.is_ok());",
          "    assert!(guard.discard);"
        ],
        "code": [
          "{",
          "    struct TestType;",
          "    impl Send for TestType {}",
          "",
          "    let pool = Pool {",
          "        stack: Mutex::new(vec![]),",
          "        create: || Box::new(TestType),",
          "    };",
          "",
          "    let value = Box::new(TestType);",
          "    let guard = pool.guard_stack_transient(value);",
          "    assert_eq!(guard.pool, &pool);",
          "    assert!(guard.value.is_ok());",
          "    assert!(guard.discard);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestType;",
          "    impl Send for TestType {}",
          "",
          "    let pool = Pool {",
          "        stack: Mutex::new((0..MAX_POOL_STACKS).map(|_| Box::new(TestType)).collect()),",
          "        create: || Box::new(TestType),",
          "    };",
          "",
          "    let value = Box::new(TestType);",
          "    let guard = pool.guard_stack_transient(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(guard.pool, &pool);",
          "    assert!(guard.value.is_some());",
          "    assert!(guard.discard);"
        ],
        "code": [
          "{",
          "    struct TestType;",
          "    impl Send for TestType {}",
          "",
          "    let pool = Pool {",
          "        stack: Mutex::new((0..MAX_POOL_STACKS).map(|_| Box::new(TestType)).collect()),",
          "        create: || Box::new(TestType),",
          "    };",
          "",
          "    let value = Box::new(TestType);",
          "    let guard = pool.guard_stack_transient(value);",
          "    assert_eq!(guard.pool, &pool);",
          "    assert!(guard.value.is_some());",
          "    assert!(guard.discard);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestType;",
          "    impl Send for TestType {}",
          "",
          "    let pool = Pool {",
          "        stack: Mutex::new(vec![Box::new(TestType)]),",
          "        create: || Box::new(TestType),",
          "    };",
          "",
          "    let value = Box::new(TestType);",
          "    let guard = pool.guard_stack_transient(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(guard.pool, &pool);",
          "    assert!(guard.value.is_some());",
          "    assert!(guard.value.unwrap().is_ok());",
          "    assert!(guard.discard);"
        ],
        "code": [
          "{",
          "    struct TestType;",
          "    impl Send for TestType {}",
          "",
          "    let pool = Pool {",
          "        stack: Mutex::new(vec![Box::new(TestType)]),",
          "        create: || Box::new(TestType),",
          "    };",
          "",
          "    let value = Box::new(TestType);",
          "    let guard = pool.guard_stack_transient(value);",
          "    assert_eq!(guard.pool, &pool);",
          "    assert!(guard.value.is_some());",
          "    assert!(guard.value.unwrap().is_ok());",
          "    assert!(guard.discard);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]