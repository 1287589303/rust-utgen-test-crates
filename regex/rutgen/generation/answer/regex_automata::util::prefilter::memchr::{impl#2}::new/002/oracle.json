[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = MatchKind::All;",
          "    let needles: [&[u8]; 2] = [&[b'a'], &[b'b']];",
          "    let result = Memchr2::new(kind, &needles);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), Memchr2(b'a', b'b'));"
        ],
        "code": [
          "{",
          "    let kind = MatchKind::All;",
          "    let needles: [&[u8]; 2] = [&[b'a'], &[b'b']];",
          "    let result = Memchr2::new(kind, &needles);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), Memchr2(b'a', b'b'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = MatchKind::LeftmostFirst;",
          "    let needles: [&[u8]; 2] = [&[b'c'], &[b'd']];",
          "    let result = Memchr2::new(kind, &needles);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    let memchr2_instance = result.unwrap();",
          "    assert_eq!(memchr2_instance.0, b'c');",
          "    assert_eq!(memchr2_instance.1, b'd');"
        ],
        "code": [
          "{",
          "    let kind = MatchKind::LeftmostFirst;",
          "    let needles: [&[u8]; 2] = [&[b'c'], &[b'd']];",
          "    let result = Memchr2::new(kind, &needles);",
          "    assert!(result.is_some());",
          "    let memchr2_instance = result.unwrap();",
          "    assert_eq!(memchr2_instance.0, b'c');",
          "    assert_eq!(memchr2_instance.1, b'd');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]