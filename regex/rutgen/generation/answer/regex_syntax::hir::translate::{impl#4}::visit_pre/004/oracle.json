[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ast = Ast::Alternation(Box::new(Alternation {",
          "        span: Span::new(0, 10),",
          "        asts: vec![",
          "            Box::new(Ast::Literal(Box::new(Literal::new(\"test1\")))),",
          "            Box::new(Ast::Literal(Box::new(Literal::new(\"test2\")))),",
          "        ],",
          "    }));",
          "    ",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    ",
          "    let mut visitor = TranslatorI::new(&translator, \"dummy_pattern\");",
          "    visitor.visit_pre(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    visitor.visit_pre(&ast).unwrap();",
          "    let ast = Ast::Alternation(Box::new(Alternation { span: Span::new(0, 10), asts: vec![Box::new(Ast::Literal(Box::new(Literal::new(\"test1\")))), Box::new(Ast::Literal(Box::new(Literal::new(\"test2\"))))]}));",
          "    assert_eq!(visitor.trans().stack.borrow().len(), 2);",
          "    assert!(matches!(visitor.trans().stack.borrow().last(), Some(HirFrame::AlternationBranch)));",
          "    assert!(matches!(visitor.trans().stack.borrow().get(1), Some(HirFrame::Alternation)));",
          "    assert_eq!(visitor.flags().unicode(), true);",
          "    assert_eq!(visitor.visit_pre(&ast).unwrap(), Ok(()));",
          "    assert_eq!(visitor.trans().stack.borrow().len(), 3);"
        ],
        "code": [
          "{",
          "    let ast = Ast::Alternation(Box::new(Alternation {",
          "        span: Span::new(0, 10),",
          "        asts: vec![",
          "            Box::new(Ast::Literal(Box::new(Literal::new(\"test1\")))),",
          "            Box::new(Ast::Literal(Box::new(Literal::new(\"test2\")))),",
          "        ],",
          "    }));",
          "    ",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    ",
          "    let mut visitor = TranslatorI::new(&translator, \"dummy_pattern\");",
          "    visitor.visit_pre(&ast).unwrap();",
          "    visitor.visit_pre(&ast).unwrap();",
          "    let ast = Ast::Alternation(Box::new(Alternation { span: Span::new(0, 10), asts: vec![Box::new(Ast::Literal(Box::new(Literal::new(\"test1\")))), Box::new(Ast::Literal(Box::new(Literal::new(\"test2\"))))]}));",
          "    assert_eq!(visitor.trans().stack.borrow().len(), 2);",
          "    assert!(matches!(visitor.trans().stack.borrow().last(), Some(HirFrame::AlternationBranch)));",
          "    assert!(matches!(visitor.trans().stack.borrow().get(1), Some(HirFrame::Alternation)));",
          "    assert_eq!(visitor.flags().unicode(), true);",
          "    assert_eq!(visitor.visit_pre(&ast).unwrap(), Ok(()));",
          "    assert_eq!(visitor.trans().stack.borrow().len(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ast = Ast::Alternation(Box::new(Alternation {",
          "        span: Span::new(0, 10),",
          "        asts: vec![",
          "            Box::new(Ast::Literal(Box::new(Literal::new(\"test1\")))),",
          "            Box::new(Ast::Empty(Box::new(Span::new(0, 0)))),",
          "        ],",
          "    }));",
          "    ",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    ",
          "    let mut visitor = TranslatorI::new(&translator, \"dummy_pattern\");",
          "    visitor.visit_pre(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    visitor.visit_pre(&ast).unwrap();",
          "    assert_eq!(visitor.trans().stack.borrow().len(), 2);",
          "    assert!(matches!(visitor.trans().stack.borrow().last(), Some(HirFrame::Alternation)));",
          "    assert!(matches!(visitor.trans().stack.borrow().get(visitor.trans().stack.borrow().len() - 2), Some(HirFrame::AlternationBranch)));"
        ],
        "code": [
          "{",
          "    let ast = Ast::Alternation(Box::new(Alternation {",
          "        span: Span::new(0, 10),",
          "        asts: vec![",
          "            Box::new(Ast::Literal(Box::new(Literal::new(\"test1\")))),",
          "            Box::new(Ast::Empty(Box::new(Span::new(0, 0)))),",
          "        ],",
          "    }));",
          "    ",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    ",
          "    let mut visitor = TranslatorI::new(&translator, \"dummy_pattern\");",
          "    visitor.visit_pre(&ast).unwrap();",
          "    visitor.visit_pre(&ast).unwrap();",
          "    assert_eq!(visitor.trans().stack.borrow().len(), 2);",
          "    assert!(matches!(visitor.trans().stack.borrow().last(), Some(HirFrame::Alternation)));",
          "    assert!(matches!(visitor.trans().stack.borrow().get(visitor.trans().stack.borrow().len() - 2), Some(HirFrame::AlternationBranch)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ast = Ast::Alternation(Box::new(Alternation {",
          "        span: Span::new(0, 20),",
          "        asts: vec![",
          "            Box::new(Ast::Literal(Box::new(Literal::new(\"abc\")))),",
          "            Box::new(Ast::Literal(Box::new(Literal::new(\"def\")))),",
          "            Box::new(Ast::Literal(Box::new(Literal::new(\"ghi\")))),",
          "        ],",
          "    }));",
          "    ",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    ",
          "    let mut visitor = TranslatorI::new(&translator, \"dummy_pattern\");",
          "    visitor.visit_pre(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    visitor.visit_pre(&ast).unwrap();",
          "    assert_eq!(visitor.trans().stack.borrow().len(), 2);",
          "    assert!(matches!(visitor.trans().stack.borrow().last(), Some(HirFrame::AlternationBranch)));",
          "    assert!(matches!(visitor.trans().stack.borrow().get(visitor.trans().stack.borrow().len() - 2), Some(HirFrame::Alternation)));",
          "    assert_eq!(visitor.trans().stack.borrow()[0], HirFrame::Alternation);"
        ],
        "code": [
          "{",
          "    let ast = Ast::Alternation(Box::new(Alternation {",
          "        span: Span::new(0, 20),",
          "        asts: vec![",
          "            Box::new(Ast::Literal(Box::new(Literal::new(\"abc\")))),",
          "            Box::new(Ast::Literal(Box::new(Literal::new(\"def\")))),",
          "            Box::new(Ast::Literal(Box::new(Literal::new(\"ghi\")))),",
          "        ],",
          "    }));",
          "    ",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    ",
          "    let mut visitor = TranslatorI::new(&translator, \"dummy_pattern\");",
          "    visitor.visit_pre(&ast).unwrap();",
          "    visitor.visit_pre(&ast).unwrap();",
          "    assert_eq!(visitor.trans().stack.borrow().len(), 2);",
          "    assert!(matches!(visitor.trans().stack.borrow().last(), Some(HirFrame::AlternationBranch)));",
          "    assert!(matches!(visitor.trans().stack.borrow().get(visitor.trans().stack.borrow().len() - 2), Some(HirFrame::Alternation)));",
          "    assert_eq!(visitor.trans().stack.borrow()[0], HirFrame::Alternation);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]