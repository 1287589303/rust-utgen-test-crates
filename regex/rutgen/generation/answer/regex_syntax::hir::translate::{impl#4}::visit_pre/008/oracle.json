[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        flags: Flags,",
          "        stack: RefCell<Vec<HirFrame>>,",
          "    }",
          "",
          "    impl TestVisitor {",
          "        fn new() -> Self {",
          "            Self {",
          "                flags: Flags {",
          "                    unicode: Some(false),",
          "                    ..Flags::default()",
          "                },",
          "                stack: RefCell::new(vec![]),",
          "            }",
          "        }",
          "",
          "        fn flags(&self) -> &Flags {",
          "            &self.flags",
          "        }",
          "",
          "        fn push(&self, frame: HirFrame) {",
          "            self.stack.borrow_mut().push(frame);",
          "        }",
          "    }",
          "",
          "    let mut visitor = TestVisitor::new();",
          "    let ast = Ast::ClassBracketed(ast::ClassBracketed::new(vec![]));",
          "    let _ = visitor.visit_pre(&ast);",
          "}"
        ],
        "oracle": [
          "    let test_visitor = TestVisitor::new();",
          "    let ast_class_bracketed = Ast::ClassBracketed(ast::ClassBracketed::new(vec![]));",
          "    assert_eq!(visitor.visit_pre(&ast_class_bracketed), Ok(()));",
          "    assert!(visitor.stack.borrow().last().is_some());",
          "    assert!(matches!(visitor.stack.borrow().last().unwrap(), HirFrame::ClassBytes(_)));",
          "    visitor.flags.unicode = Some(true);",
          "    assert_eq!(visitor.visit_pre(&ast_class_bracketed), Ok(()));",
          "    assert!(matches!(visitor.stack.borrow().last().unwrap(), HirFrame::ClassUnicode(_)));"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        flags: Flags,",
          "        stack: RefCell<Vec<HirFrame>>,",
          "    }",
          "",
          "    impl TestVisitor {",
          "        fn new() -> Self {",
          "            Self {",
          "                flags: Flags {",
          "                    unicode: Some(false),",
          "                    ..Flags::default()",
          "                },",
          "                stack: RefCell::new(vec![]),",
          "            }",
          "        }",
          "",
          "        fn flags(&self) -> &Flags {",
          "            &self.flags",
          "        }",
          "",
          "        fn push(&self, frame: HirFrame) {",
          "            self.stack.borrow_mut().push(frame);",
          "        }",
          "    }",
          "",
          "    let mut visitor = TestVisitor::new();",
          "    let ast = Ast::ClassBracketed(ast::ClassBracketed::new(vec![]));",
          "    let _ = visitor.visit_pre(&ast);",
          "    let test_visitor = TestVisitor::new();",
          "    let ast_class_bracketed = Ast::ClassBracketed(ast::ClassBracketed::new(vec![]));",
          "    assert_eq!(visitor.visit_pre(&ast_class_bracketed), Ok(()));",
          "    assert!(visitor.stack.borrow().last().is_some());",
          "    assert!(matches!(visitor.stack.borrow().last().unwrap(), HirFrame::ClassBytes(_)));",
          "    visitor.flags.unicode = Some(true);",
          "    assert_eq!(visitor.visit_pre(&ast_class_bracketed), Ok(()));",
          "    assert!(matches!(visitor.stack.borrow().last().unwrap(), HirFrame::ClassUnicode(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        flags: Flags,",
          "        stack: RefCell<Vec<HirFrame>>,",
          "    }",
          "",
          "    impl TestVisitor {",
          "        fn new() -> Self {",
          "            Self {",
          "                flags: Flags {",
          "                    unicode: Some(true),",
          "                    ..Flags::default()",
          "                },",
          "                stack: RefCell::new(vec![]),",
          "            }",
          "        }",
          "",
          "        fn flags(&self) -> &Flags {",
          "            &self.flags",
          "        }",
          "",
          "        fn push(&self, frame: HirFrame) {",
          "            self.stack.borrow_mut().push(frame);",
          "        }",
          "    }",
          "",
          "    let mut visitor = TestVisitor::new();",
          "    let ast = Ast::ClassBracketed(ast::ClassBracketed::new(vec![]));",
          "    let _ = visitor.visit_pre(&ast);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.stack.borrow().len(), 1);",
          "    assert!(matches!(visitor.stack.borrow().last(), Some(HirFrame::ClassUnicode(_))));",
          "    assert_eq!(visitor.flags().unicode(), Some(true));",
          "    assert_eq!(visitor.visit_pre(&Ast::ClassBracketed(ast::ClassBracketed::new(vec![]))).unwrap(), ());",
          "    assert_eq!(visitor.stack.borrow().len(), 1);",
          "    assert!(matches!(visitor.stack.borrow().last(), Some(HirFrame::ClassUnicode(_))));"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        flags: Flags,",
          "        stack: RefCell<Vec<HirFrame>>,",
          "    }",
          "",
          "    impl TestVisitor {",
          "        fn new() -> Self {",
          "            Self {",
          "                flags: Flags {",
          "                    unicode: Some(true),",
          "                    ..Flags::default()",
          "                },",
          "                stack: RefCell::new(vec![]),",
          "            }",
          "        }",
          "",
          "        fn flags(&self) -> &Flags {",
          "            &self.flags",
          "        }",
          "",
          "        fn push(&self, frame: HirFrame) {",
          "            self.stack.borrow_mut().push(frame);",
          "        }",
          "    }",
          "",
          "    let mut visitor = TestVisitor::new();",
          "    let ast = Ast::ClassBracketed(ast::ClassBracketed::new(vec![]));",
          "    let _ = visitor.visit_pre(&ast);",
          "    assert_eq!(visitor.stack.borrow().len(), 1);",
          "    assert!(matches!(visitor.stack.borrow().last(), Some(HirFrame::ClassUnicode(_))));",
          "    assert_eq!(visitor.flags().unicode(), Some(true));",
          "    assert_eq!(visitor.visit_pre(&Ast::ClassBracketed(ast::ClassBracketed::new(vec![]))).unwrap(), ());",
          "    assert_eq!(visitor.stack.borrow().len(), 1);",
          "    assert!(matches!(visitor.stack.borrow().last(), Some(HirFrame::ClassUnicode(_))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]