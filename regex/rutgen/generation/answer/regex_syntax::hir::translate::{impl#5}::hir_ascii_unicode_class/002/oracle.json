[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        flags: ast::Flags,",
          "    }",
          "",
          "    let ast = ast::ClassAscii {",
          "        span: Span { start: 0, end: 255 },",
          "        kind: ClassAsciiKind::Alnum,",
          "        negated: false,",
          "    };",
          "",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(ast.flags),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let translator_instance = TranslatorI::new(&translator, \"test\");",
          "",
          "    let _ = translator_instance.hir_ascii_unicode_class(&ast);",
          "}"
        ],
        "oracle": [
          "    let ast = ast::ClassAscii { span: Span { start: 0, end: 255 }, kind: ClassAsciiKind::Alnum, negated: false };",
          "    let translator = Translator { stack: RefCell::new(vec![]), flags: Cell::new(ast.flags), utf8: true, line_terminator: b'\\n' };",
          "    let translator_instance = TranslatorI::new(&translator, \"test\");",
          "    let result = translator_instance.hir_ascii_unicode_class(&ast);",
          "    assert!(result.is_ok());",
          "    let class_unicode = result.unwrap();",
          "    assert_eq!(class_unicode.set, expected_set);"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        flags: ast::Flags,",
          "    }",
          "",
          "    let ast = ast::ClassAscii {",
          "        span: Span { start: 0, end: 255 },",
          "        kind: ClassAsciiKind::Alnum,",
          "        negated: false,",
          "    };",
          "",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(ast.flags),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let translator_instance = TranslatorI::new(&translator, \"test\");",
          "",
          "    let _ = translator_instance.hir_ascii_unicode_class(&ast);",
          "    let ast = ast::ClassAscii { span: Span { start: 0, end: 255 }, kind: ClassAsciiKind::Alnum, negated: false };",
          "    let translator = Translator { stack: RefCell::new(vec![]), flags: Cell::new(ast.flags), utf8: true, line_terminator: b'\\n' };",
          "    let translator_instance = TranslatorI::new(&translator, \"test\");",
          "    let result = translator_instance.hir_ascii_unicode_class(&ast);",
          "    assert!(result.is_ok());",
          "    let class_unicode = result.unwrap();",
          "    assert_eq!(class_unicode.set, expected_set);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        flags: ast::Flags,",
          "    }",
          "",
          "    let ast = ast::ClassAscii {",
          "        span: Span { start: 0, end: 255 },",
          "        kind: ClassAsciiKind::Alpha,",
          "        negated: false,",
          "    };",
          "",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(ast.flags),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let translator_instance = TranslatorI::new(&translator, \"test\");",
          "",
          "    let _ = translator_instance.hir_ascii_unicode_class(&ast);",
          "}"
        ],
        "oracle": [
          "    let ast = ast::ClassAscii { span: Span { start: 0, end: 255 }, kind: ClassAsciiKind::Alpha, negated: false };",
          "    assert_eq!(translator_instance.hir_ascii_unicode_class(&ast), Ok(cls));",
          "    ",
          "    let ast_negated = ast::ClassAscii { span: Span { start: 0, end: 255 }, kind: ClassAsciiKind::Alpha, negated: true };",
          "    assert_eq!(translator_instance.hir_ascii_unicode_class(&ast_negated), Ok(cls));",
          "    ",
          "    let ast_digit = ast::ClassAscii { span: Span { start: 0, end: 255 }, kind: ClassAsciiKind::Digit, negated: false };",
          "    assert_eq!(translator_instance.hir_ascii_unicode_class(&ast_digit), Ok(cls));",
          "    ",
          "    let ast_special = ast::ClassAscii { span: Span { start: 0, end: 255 }, kind: ClassAsciiKind::Punct, negated: false };",
          "    assert_eq!(translator_instance.hir_ascii_unicode_class(&ast_special), Ok(cls));",
          "    ",
          "    let ast_empty = ast::ClassAscii { span: Span { start: 0, end: 0 }, kind: ClassAsciiKind::Alnum, negated: false };",
          "    assert_eq!(translator_instance.hir_ascii_unicode_class(&ast_empty), Ok(cls));"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        flags: ast::Flags,",
          "    }",
          "",
          "    let ast = ast::ClassAscii {",
          "        span: Span { start: 0, end: 255 },",
          "        kind: ClassAsciiKind::Alpha,",
          "        negated: false,",
          "    };",
          "",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(ast.flags),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let translator_instance = TranslatorI::new(&translator, \"test\");",
          "",
          "    let _ = translator_instance.hir_ascii_unicode_class(&ast);",
          "    let ast = ast::ClassAscii { span: Span { start: 0, end: 255 }, kind: ClassAsciiKind::Alpha, negated: false };",
          "    assert_eq!(translator_instance.hir_ascii_unicode_class(&ast), Ok(cls));",
          "    ",
          "    let ast_negated = ast::ClassAscii { span: Span { start: 0, end: 255 }, kind: ClassAsciiKind::Alpha, negated: true };",
          "    assert_eq!(translator_instance.hir_ascii_unicode_class(&ast_negated), Ok(cls));",
          "    ",
          "    let ast_digit = ast::ClassAscii { span: Span { start: 0, end: 255 }, kind: ClassAsciiKind::Digit, negated: false };",
          "    assert_eq!(translator_instance.hir_ascii_unicode_class(&ast_digit), Ok(cls));",
          "    ",
          "    let ast_special = ast::ClassAscii { span: Span { start: 0, end: 255 }, kind: ClassAsciiKind::Punct, negated: false };",
          "    assert_eq!(translator_instance.hir_ascii_unicode_class(&ast_special), Ok(cls));",
          "    ",
          "    let ast_empty = ast::ClassAscii { span: Span { start: 0, end: 0 }, kind: ClassAsciiKind::Alnum, negated: false };",
          "    assert_eq!(translator_instance.hir_ascii_unicode_class(&ast_empty), Ok(cls));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        flags: ast::Flags,",
          "    }",
          "",
          "    let ast = ast::ClassAscii {",
          "        span: Span { start: 0, end: 255 },",
          "        kind: ClassAsciiKind::Digit,",
          "        negated: false,",
          "    };",
          "",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(ast.flags),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let translator_instance = TranslatorI::new(&translator, \"test\");",
          "",
          "    let _ = translator_instance.hir_ascii_unicode_class(&ast);",
          "}"
        ],
        "oracle": [
          "    let ast = ast::ClassAscii { span: Span { start: 0, end: 255 }, kind: ClassAsciiKind::Digit, negated: false };",
          "    let translator = Translator { stack: RefCell::new(vec![]), flags: Cell::new(ast.flags), utf8: true, line_terminator: b'\\n' };",
          "    let translator_instance = TranslatorI::new(&translator, \"test\");",
          "    let result = translator_instance.hir_ascii_unicode_class(&ast);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().set, expected_class_unicode_set);",
          "    assert_eq!(result.unwrap().span, ast.span);"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        flags: ast::Flags,",
          "    }",
          "",
          "    let ast = ast::ClassAscii {",
          "        span: Span { start: 0, end: 255 },",
          "        kind: ClassAsciiKind::Digit,",
          "        negated: false,",
          "    };",
          "",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(ast.flags),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let translator_instance = TranslatorI::new(&translator, \"test\");",
          "",
          "    let _ = translator_instance.hir_ascii_unicode_class(&ast);",
          "    let ast = ast::ClassAscii { span: Span { start: 0, end: 255 }, kind: ClassAsciiKind::Digit, negated: false };",
          "    let translator = Translator { stack: RefCell::new(vec![]), flags: Cell::new(ast.flags), utf8: true, line_terminator: b'\\n' };",
          "    let translator_instance = TranslatorI::new(&translator, \"test\");",
          "    let result = translator_instance.hir_ascii_unicode_class(&ast);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().set, expected_class_unicode_set);",
          "    assert_eq!(result.unwrap().span, ast.span);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        flags: ast::Flags,",
          "    }",
          "",
          "    let ast = ast::ClassAscii {",
          "        span: Span { start: 0, end: 255 },",
          "        kind: ClassAsciiKind::Space,",
          "        negated: true,",
          "    };",
          "",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(ast.flags),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let translator_instance = TranslatorI::new(&translator, \"test\");",
          "",
          "    let _ = translator_instance.hir_ascii_unicode_class(&ast);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(translator_instance.hir_ascii_unicode_class(&ast).is_ok(), true);",
          "    assert!(translator_instance.flags().case_insensitive());",
          "    assert_eq!(ast.kind, ClassAsciiKind::Space);",
          "    assert_eq!(ast.negated, true);",
          "    assert_eq!(ast.span.start, 0);",
          "    assert_eq!(ast.span.end, 255);",
          "    assert_eq!(translator_instance.trans().utf8, true);",
          "    assert_eq!(translator_instance.trans().line_terminator, b'\\n');",
          "    assert_eq!(translator_instance.trans().stack.borrow().len(), 0);"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        flags: ast::Flags,",
          "    }",
          "",
          "    let ast = ast::ClassAscii {",
          "        span: Span { start: 0, end: 255 },",
          "        kind: ClassAsciiKind::Space,",
          "        negated: true,",
          "    };",
          "",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(ast.flags),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let translator_instance = TranslatorI::new(&translator, \"test\");",
          "",
          "    let _ = translator_instance.hir_ascii_unicode_class(&ast);",
          "    assert_eq!(translator_instance.hir_ascii_unicode_class(&ast).is_ok(), true);",
          "    assert!(translator_instance.flags().case_insensitive());",
          "    assert_eq!(ast.kind, ClassAsciiKind::Space);",
          "    assert_eq!(ast.negated, true);",
          "    assert_eq!(ast.span.start, 0);",
          "    assert_eq!(ast.span.end, 255);",
          "    assert_eq!(translator_instance.trans().utf8, true);",
          "    assert_eq!(translator_instance.trans().line_terminator, b'\\n');",
          "    assert_eq!(translator_instance.trans().stack.borrow().len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        flags: ast::Flags,",
          "    }",
          "",
          "    let ast = ast::ClassAscii {",
          "        span: Span { start: 0, end: 255 },",
          "        kind: ClassAsciiKind::Punct,",
          "        negated: false,",
          "    };",
          "",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(ast.flags),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let translator_instance = TranslatorI::new(&translator, \"test\");",
          "",
          "    let _ = translator_instance.hir_ascii_unicode_class(&ast);",
          "}"
        ],
        "oracle": [
          "    assert!(translator_instance.hir_ascii_unicode_class(&ast).is_ok());",
          "    assert_eq!(translator_instance.hir_ascii_unicode_class(&ast).unwrap().span, ast.span);",
          "    assert_eq!(translator_instance.hir_ascii_unicode_class(&ast).unwrap().kind, ClassAsciiKind::Punct);",
          "    assert!(!translator_instance.hir_ascii_unicode_class(&ast).unwrap().negated);"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        flags: ast::Flags,",
          "    }",
          "",
          "    let ast = ast::ClassAscii {",
          "        span: Span { start: 0, end: 255 },",
          "        kind: ClassAsciiKind::Punct,",
          "        negated: false,",
          "    };",
          "",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(ast.flags),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let translator_instance = TranslatorI::new(&translator, \"test\");",
          "",
          "    let _ = translator_instance.hir_ascii_unicode_class(&ast);",
          "    assert!(translator_instance.hir_ascii_unicode_class(&ast).is_ok());",
          "    assert_eq!(translator_instance.hir_ascii_unicode_class(&ast).unwrap().span, ast.span);",
          "    assert_eq!(translator_instance.hir_ascii_unicode_class(&ast).unwrap().kind, ClassAsciiKind::Punct);",
          "    assert!(!translator_instance.hir_ascii_unicode_class(&ast).unwrap().negated);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]