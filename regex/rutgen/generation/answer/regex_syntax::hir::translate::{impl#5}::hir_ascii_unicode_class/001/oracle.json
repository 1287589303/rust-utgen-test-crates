[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = ast::ClassAscii {",
          "        span,",
          "        kind: ClassAsciiKind::Alnum,",
          "        negated: true,",
          "    };",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let translator_i = TranslatorI::new(&translator, \"a1\");",
          "    let _ = translator_i.hir_ascii_unicode_class(&ast);",
          "}"
        ],
        "oracle": [
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = ast::ClassAscii {",
          "    span,",
          "    kind: ClassAsciiKind::Alnum,",
          "    negated: true,",
          "    };",
          "    let translator = Translator {",
          "    stack: RefCell::new(vec![]),",
          "    flags: Cell::new(Flags::default()),",
          "    utf8: true,",
          "    line_terminator: b'\\n',",
          "    };",
          "    let translator_i = TranslatorI::new(&translator, \"a1\");",
          "    let result = translator_i.hir_ascii_unicode_class(&ast);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = ast::ClassAscii {",
          "        span,",
          "        kind: ClassAsciiKind::Alnum,",
          "        negated: true,",
          "    };",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let translator_i = TranslatorI::new(&translator, \"a1\");",
          "    let _ = translator_i.hir_ascii_unicode_class(&ast);",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = ast::ClassAscii {",
          "    span,",
          "    kind: ClassAsciiKind::Alnum,",
          "    negated: true,",
          "    };",
          "    let translator = Translator {",
          "    stack: RefCell::new(vec![]),",
          "    flags: Cell::new(Flags::default()),",
          "    utf8: true,",
          "    line_terminator: b'\\n',",
          "    };",
          "    let translator_i = TranslatorI::new(&translator, \"a1\");",
          "    let result = translator_i.hir_ascii_unicode_class(&ast);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position(1), end: Position(2) };",
          "    let ast = ast::ClassAscii {",
          "        span,",
          "        kind: ClassAsciiKind::Alpha,",
          "        negated: true,",
          "    };",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let translator_i = TranslatorI::new(&translator, \"a1\");",
          "    let _ = translator_i.hir_ascii_unicode_class(&ast);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(translator_i.hir_ascii_unicode_class(&ast).is_err(), true);",
          "    assert_eq!(translator.stack.borrow().is_empty(), true);",
          "    assert_eq!(translator.flags.get().case_insensitive(), false);",
          "    assert_eq!(translator_i.trans(), &translator);",
          "    assert_eq!(ast.kind, ClassAsciiKind::Alpha);",
          "    assert_eq!(ast.negated, true);",
          "    assert_eq!(ast.span.start, Position(1));",
          "    assert_eq!(ast.span.end, Position(2));",
          "    assert_eq!(translator_i.unicode_fold_and_negate(&ast.span, ast.negated, &mut cls).is_err(), true);",
          "    assert_eq!(cls.set.is_empty(), true);"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position(1), end: Position(2) };",
          "    let ast = ast::ClassAscii {",
          "        span,",
          "        kind: ClassAsciiKind::Alpha,",
          "        negated: true,",
          "    };",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let translator_i = TranslatorI::new(&translator, \"a1\");",
          "    let _ = translator_i.hir_ascii_unicode_class(&ast);",
          "    assert_eq!(translator_i.hir_ascii_unicode_class(&ast).is_err(), true);",
          "    assert_eq!(translator.stack.borrow().is_empty(), true);",
          "    assert_eq!(translator.flags.get().case_insensitive(), false);",
          "    assert_eq!(translator_i.trans(), &translator);",
          "    assert_eq!(ast.kind, ClassAsciiKind::Alpha);",
          "    assert_eq!(ast.negated, true);",
          "    assert_eq!(ast.span.start, Position(1));",
          "    assert_eq!(ast.span.end, Position(2));",
          "    assert_eq!(translator_i.unicode_fold_and_negate(&ast.span, ast.negated, &mut cls).is_err(), true);",
          "    assert_eq!(cls.set.is_empty(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position(2), end: Position(3) };",
          "    let ast = ast::ClassAscii {",
          "        span,",
          "        kind: ClassAsciiKind::Digit,",
          "        negated: true,",
          "    };",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let translator_i = TranslatorI::new(&translator, \"1a\");",
          "    let _ = translator_i.hir_ascii_unicode_class(&ast);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(translator_i.hir_ascii_unicode_class(&ast).is_err(), true);",
          "    assert_eq!(translator_i.hir_ascii_unicode_class(&ast).unwrap_err().kind, ErrorKind::UnicodeCaseUnavailable);",
          "    assert!(translator.stack.borrow().is_empty());",
          "    assert!(!translator.flags.get().case_insensitive());",
          "    assert_eq!(translator_i.hir_ascii_unicode_class(&ast).unwrap().set, expected_class_unicode_set);",
          "    assert!(translator_i.hir_ascii_unicode_class(&ast).is_ok());",
          "    assert_eq!(translator_i.hir_ascii_unicode_class(&ast).unwrap().span, ast.span);",
          "    assert_eq!(translator_i.hir_ascii_unicode_class(&ast).unwrap().negated, ast.negated);"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position(2), end: Position(3) };",
          "    let ast = ast::ClassAscii {",
          "        span,",
          "        kind: ClassAsciiKind::Digit,",
          "        negated: true,",
          "    };",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let translator_i = TranslatorI::new(&translator, \"1a\");",
          "    let _ = translator_i.hir_ascii_unicode_class(&ast);",
          "    assert_eq!(translator_i.hir_ascii_unicode_class(&ast).is_err(), true);",
          "    assert_eq!(translator_i.hir_ascii_unicode_class(&ast).unwrap_err().kind, ErrorKind::UnicodeCaseUnavailable);",
          "    assert!(translator.stack.borrow().is_empty());",
          "    assert!(!translator.flags.get().case_insensitive());",
          "    assert_eq!(translator_i.hir_ascii_unicode_class(&ast).unwrap().set, expected_class_unicode_set);",
          "    assert!(translator_i.hir_ascii_unicode_class(&ast).is_ok());",
          "    assert_eq!(translator_i.hir_ascii_unicode_class(&ast).unwrap().span, ast.span);",
          "    assert_eq!(translator_i.hir_ascii_unicode_class(&ast).unwrap().negated, ast.negated);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = ast::ClassAscii {",
          "        span,",
          "        kind: ClassAsciiKind::Ascii,",
          "        negated: true,",
          "    };",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let translator_i = TranslatorI::new(&translator, \"byte\");",
          "    let _ = translator_i.hir_ascii_unicode_class(&ast);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(translator_i.hir_ascii_unicode_class(&ast).is_err(), true);",
          "    assert!(translator_i.hir_ascii_unicode_class(&ast).is_err());",
          "    assert!(translator_i.error(span.clone(), ErrorKind::UnicodeCaseUnavailable).span == span);",
          "    assert!(translator_i.hir_ascii_unicode_class(&ast).unwrap_err().kind == ErrorKind::UnicodeCaseUnavailable);"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = ast::ClassAscii {",
          "        span,",
          "        kind: ClassAsciiKind::Ascii,",
          "        negated: true,",
          "    };",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let translator_i = TranslatorI::new(&translator, \"byte\");",
          "    let _ = translator_i.hir_ascii_unicode_class(&ast);",
          "    assert_eq!(translator_i.hir_ascii_unicode_class(&ast).is_err(), true);",
          "    assert!(translator_i.hir_ascii_unicode_class(&ast).is_err());",
          "    assert!(translator_i.error(span.clone(), ErrorKind::UnicodeCaseUnavailable).span == span);",
          "    assert!(translator_i.hir_ascii_unicode_class(&ast).unwrap_err().kind == ErrorKind::UnicodeCaseUnavailable);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position(0), end: Position(0) };",
          "    let ast = ast::ClassAscii {",
          "        span,",
          "        kind: ClassAsciiKind::Space,",
          "        negated: false,",
          "    };",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let translator_i = TranslatorI::new(&translator, \"   \");",
          "    let _ = translator_i.hir_ascii_unicode_class(&ast);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(translator_i.hir_ascii_unicode_class(&ast).is_err(), true);",
          "    assert_eq!(translator_i.hir_ascii_unicode_class(&ast).unwrap_err().kind, ErrorKind::UnicodeCaseUnavailable);",
          "    assert_eq!(translator_i.flags().case_insensitive(), false);",
          "    assert_eq!(translator_i.unicode_fold_and_negate(&ast.span, ast.negated, &mut cls).is_err(), true);",
          "    assert!(translator_i.unicode_fold_and_negate(&ast.span, ast.negated, &mut cls).unwrap_err().kind == ErrorKind::UnicodeCaseUnavailable);",
          "    assert!(translator_i.hir_ascii_unicode_class(&ast).is_ok());"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position(0), end: Position(0) };",
          "    let ast = ast::ClassAscii {",
          "        span,",
          "        kind: ClassAsciiKind::Space,",
          "        negated: false,",
          "    };",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let translator_i = TranslatorI::new(&translator, \"   \");",
          "    let _ = translator_i.hir_ascii_unicode_class(&ast);",
          "    assert_eq!(translator_i.hir_ascii_unicode_class(&ast).is_err(), true);",
          "    assert_eq!(translator_i.hir_ascii_unicode_class(&ast).unwrap_err().kind, ErrorKind::UnicodeCaseUnavailable);",
          "    assert_eq!(translator_i.flags().case_insensitive(), false);",
          "    assert_eq!(translator_i.unicode_fold_and_negate(&ast.span, ast.negated, &mut cls).is_err(), true);",
          "    assert!(translator_i.unicode_fold_and_negate(&ast.span, ast.negated, &mut cls).unwrap_err().kind == ErrorKind::UnicodeCaseUnavailable);",
          "    assert!(translator_i.hir_ascii_unicode_class(&ast).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]