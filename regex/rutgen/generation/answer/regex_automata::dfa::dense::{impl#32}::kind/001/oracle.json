[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let err = BuildError {",
          "        kind: BuildErrorKind::NFA(nfa::thompson::BuildError {}),",
          "    };",
          "    let _result = err.kind();",
          "}"
        ],
        "oracle": [
          "    let err = BuildError { kind: BuildErrorKind::NFA(nfa::thompson::BuildError {}) }; assert_eq!(err.kind(), &BuildErrorKind::NFA(nfa::thompson::BuildError {}));",
          "    let err = BuildError { kind: BuildErrorKind::Unsupported(\"Unsupported feature\") }; assert_eq!(err.kind(), &BuildErrorKind::Unsupported(\"Unsupported feature\"));",
          "    let err = BuildError { kind: BuildErrorKind::TooManyStates { limit: 64 } }; assert_eq!(err.kind(), &BuildErrorKind::TooManyStates { limit: 64 });",
          "    let err = BuildError { kind: BuildErrorKind::ExceededSizeLimit { limit: 1024 } }; assert_eq!(err.kind(), &BuildErrorKind::ExceededSizeLimit { limit: 1024 });",
          "    let err = BuildError { kind: BuildErrorKind::TooManyPatterns { given: 10, limit: 5 } }; assert_eq!(err.kind(), &BuildErrorKind::TooManyPatterns { given: 10, limit: 5 });",
          "    let err = BuildError { kind: BuildErrorKind::InvalidCaptureIndex { index: 5 } }; assert_eq!(err.kind(), &BuildErrorKind::InvalidCaptureIndex { index: 5 });",
          "    let err = BuildError { kind: BuildErrorKind::Word(UnicodeWordBoundaryError {}) }; assert_eq!(err.kind(), &BuildErrorKind::Word(UnicodeWordBoundaryError {}));",
          "    let err = BuildError { kind: BuildErrorKind::Captures(captures::GroupInfoError {}) }; assert_eq!(err.kind(), &BuildErrorKind::Captures(captures::GroupInfoError {}));",
          "    let err = BuildError { kind: BuildErrorKind::TooManyStartStates }; assert_eq!(err.kind(), &BuildErrorKind::TooManyStartStates);",
          "    let err = BuildError { kind: BuildErrorKind::DFAExceededSizeLimit { limit: 8192 } }; assert_eq!(err.kind(), &BuildErrorKind::DFAExceededSizeLimit { limit: 8192 });",
          "    let err = BuildError { kind: BuildErrorKind::DeterminizeExceededSizeLimit { limit: 4096 } }; assert_eq!(err.kind(), &BuildErrorKind::DeterminizeExceededSizeLimit { limit: 4096 });"
        ],
        "code": [
          "{",
          "    let err = BuildError {",
          "        kind: BuildErrorKind::NFA(nfa::thompson::BuildError {}),",
          "    };",
          "    let _result = err.kind();",
          "    let err = BuildError { kind: BuildErrorKind::NFA(nfa::thompson::BuildError {}) }; assert_eq!(err.kind(), &BuildErrorKind::NFA(nfa::thompson::BuildError {}));",
          "    let err = BuildError { kind: BuildErrorKind::Unsupported(\"Unsupported feature\") }; assert_eq!(err.kind(), &BuildErrorKind::Unsupported(\"Unsupported feature\"));",
          "    let err = BuildError { kind: BuildErrorKind::TooManyStates { limit: 64 } }; assert_eq!(err.kind(), &BuildErrorKind::TooManyStates { limit: 64 });",
          "    let err = BuildError { kind: BuildErrorKind::ExceededSizeLimit { limit: 1024 } }; assert_eq!(err.kind(), &BuildErrorKind::ExceededSizeLimit { limit: 1024 });",
          "    let err = BuildError { kind: BuildErrorKind::TooManyPatterns { given: 10, limit: 5 } }; assert_eq!(err.kind(), &BuildErrorKind::TooManyPatterns { given: 10, limit: 5 });",
          "    let err = BuildError { kind: BuildErrorKind::InvalidCaptureIndex { index: 5 } }; assert_eq!(err.kind(), &BuildErrorKind::InvalidCaptureIndex { index: 5 });",
          "    let err = BuildError { kind: BuildErrorKind::Word(UnicodeWordBoundaryError {}) }; assert_eq!(err.kind(), &BuildErrorKind::Word(UnicodeWordBoundaryError {}));",
          "    let err = BuildError { kind: BuildErrorKind::Captures(captures::GroupInfoError {}) }; assert_eq!(err.kind(), &BuildErrorKind::Captures(captures::GroupInfoError {}));",
          "    let err = BuildError { kind: BuildErrorKind::TooManyStartStates }; assert_eq!(err.kind(), &BuildErrorKind::TooManyStartStates);",
          "    let err = BuildError { kind: BuildErrorKind::DFAExceededSizeLimit { limit: 8192 } }; assert_eq!(err.kind(), &BuildErrorKind::DFAExceededSizeLimit { limit: 8192 });",
          "    let err = BuildError { kind: BuildErrorKind::DeterminizeExceededSizeLimit { limit: 4096 } }; assert_eq!(err.kind(), &BuildErrorKind::DeterminizeExceededSizeLimit { limit: 4096 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let err = BuildError {",
          "        kind: BuildErrorKind::Word(look::UnicodeWordBoundaryError {}),",
          "    };",
          "    let _result = err.kind();",
          "}"
        ],
        "oracle": [
          "    let err = BuildError { kind: BuildErrorKind::Word(look::UnicodeWordBoundaryError {}) }; assert_eq!(err.kind(), &BuildErrorKind::Word(look::UnicodeWordBoundaryError {}));",
          "    let err = BuildError { kind: BuildErrorKind::NFA(nfa::thompson::BuildError::ExceedsLimit { limit: 100 }) }; assert_eq!(err.kind(), &BuildErrorKind::NFA(nfa::thompson::BuildError::ExceedsLimit { limit: 100 }));",
          "    let err = BuildError { kind: BuildErrorKind::TooManyStates { limit: 10 } }; assert_eq!(err.kind(), &BuildErrorKind::TooManyStates { limit: 10 });",
          "    let err = BuildError { kind: BuildErrorKind::TooManyPatterns { given: 12, limit: 10 } }; assert_eq!(err.kind(), &BuildErrorKind::TooManyPatterns { given: 12, limit: 10 });",
          "    let err = BuildError { kind: BuildErrorKind::Unsupported(\"feature\") }; assert_eq!(err.kind(), &BuildErrorKind::Unsupported(\"feature\"));",
          "    let err = BuildError { kind: BuildErrorKind::ExceededSizeLimit { limit: 2048 } }; assert_eq!(err.kind(), &BuildErrorKind::ExceededSizeLimit { limit: 2048 });"
        ],
        "code": [
          "{",
          "    let err = BuildError {",
          "        kind: BuildErrorKind::Word(look::UnicodeWordBoundaryError {}),",
          "    };",
          "    let _result = err.kind();",
          "    let err = BuildError { kind: BuildErrorKind::Word(look::UnicodeWordBoundaryError {}) }; assert_eq!(err.kind(), &BuildErrorKind::Word(look::UnicodeWordBoundaryError {}));",
          "    let err = BuildError { kind: BuildErrorKind::NFA(nfa::thompson::BuildError::ExceedsLimit { limit: 100 }) }; assert_eq!(err.kind(), &BuildErrorKind::NFA(nfa::thompson::BuildError::ExceedsLimit { limit: 100 }));",
          "    let err = BuildError { kind: BuildErrorKind::TooManyStates { limit: 10 } }; assert_eq!(err.kind(), &BuildErrorKind::TooManyStates { limit: 10 });",
          "    let err = BuildError { kind: BuildErrorKind::TooManyPatterns { given: 12, limit: 10 } }; assert_eq!(err.kind(), &BuildErrorKind::TooManyPatterns { given: 12, limit: 10 });",
          "    let err = BuildError { kind: BuildErrorKind::Unsupported(\"feature\") }; assert_eq!(err.kind(), &BuildErrorKind::Unsupported(\"feature\"));",
          "    let err = BuildError { kind: BuildErrorKind::ExceededSizeLimit { limit: 2048 } }; assert_eq!(err.kind(), &BuildErrorKind::ExceededSizeLimit { limit: 2048 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let err = BuildError {",
          "        kind: BuildErrorKind::TooManyStates { limit: 10 },",
          "    };",
          "    let _result = err.kind();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, &BuildErrorKind::TooManyStates { limit: 10 });"
        ],
        "code": [
          "{",
          "    let err = BuildError {",
          "        kind: BuildErrorKind::TooManyStates { limit: 10 },",
          "    };",
          "    let _result = err.kind();",
          "    assert_eq!(_result, &BuildErrorKind::TooManyStates { limit: 10 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let err = BuildError {",
          "        kind: BuildErrorKind::TooManyPatterns { given: 20, limit: 15 },",
          "    };",
          "    let _result = err.kind();",
          "}"
        ],
        "oracle": [
          "    let err = BuildError { kind: BuildErrorKind::TooManyPatterns { given: 20, limit: 15 } };",
          "    let result = err.kind();",
          "    assert!(matches!(result, &BuildErrorKind::TooManyPatterns { given: 20, limit: 15 }));",
          "    assert_eq!(result, &err.kind);"
        ],
        "code": [
          "{",
          "    let err = BuildError {",
          "        kind: BuildErrorKind::TooManyPatterns { given: 20, limit: 15 },",
          "    };",
          "    let _result = err.kind();",
          "    let err = BuildError { kind: BuildErrorKind::TooManyPatterns { given: 20, limit: 15 } };",
          "    let result = err.kind();",
          "    assert!(matches!(result, &BuildErrorKind::TooManyPatterns { given: 20, limit: 15 }));",
          "    assert_eq!(result, &err.kind);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let err = BuildError {",
          "        kind: BuildErrorKind::ExceededSizeLimit { limit: 1024 },",
          "    };",
          "    let _result = err.kind();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, &BuildErrorKind::ExceededSizeLimit { limit: 1024 });"
        ],
        "code": [
          "{",
          "    let err = BuildError {",
          "        kind: BuildErrorKind::ExceededSizeLimit { limit: 1024 },",
          "    };",
          "    let _result = err.kind();",
          "    assert_eq!(_result, &BuildErrorKind::ExceededSizeLimit { limit: 1024 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let err = BuildError {",
          "        kind: BuildErrorKind::InvalidCaptureIndex { index: 5 },",
          "    };",
          "    let _result = err.kind();",
          "}"
        ],
        "oracle": [
          "    let err = BuildError { kind: BuildErrorKind::InvalidCaptureIndex { index: 5 } };",
          "    let result = err.kind();",
          "    assert_eq!(result, &BuildErrorKind::InvalidCaptureIndex { index: 5 });",
          "    let err = BuildError { kind: BuildErrorKind::TooManyStates { given: 10, limit: 5 } };",
          "    let result = err.kind();",
          "    assert_eq!(result, &BuildErrorKind::TooManyStates { given: 10, limit: 5 });",
          "    let err = BuildError { kind: BuildErrorKind::TooManyPatterns { given: 6, limit: 5 } };",
          "    let result = err.kind();",
          "    assert_eq!(result, &BuildErrorKind::TooManyPatterns { given: 6, limit: 5 });",
          "    let err = BuildError { kind: BuildErrorKind::ExceededSizeLimit { limit: 1024 } };",
          "    let result = err.kind();",
          "    assert_eq!(result, &BuildErrorKind::ExceededSizeLimit { limit: 1024 });",
          "    let err = BuildError { kind: BuildErrorKind::Unsupported(\"Some feature\") };",
          "    let result = err.kind();",
          "    assert_eq!(result, &BuildErrorKind::Unsupported(\"Some feature\"));"
        ],
        "code": [
          "{",
          "    let err = BuildError {",
          "        kind: BuildErrorKind::InvalidCaptureIndex { index: 5 },",
          "    };",
          "    let _result = err.kind();",
          "    let err = BuildError { kind: BuildErrorKind::InvalidCaptureIndex { index: 5 } };",
          "    let result = err.kind();",
          "    assert_eq!(result, &BuildErrorKind::InvalidCaptureIndex { index: 5 });",
          "    let err = BuildError { kind: BuildErrorKind::TooManyStates { given: 10, limit: 5 } };",
          "    let result = err.kind();",
          "    assert_eq!(result, &BuildErrorKind::TooManyStates { given: 10, limit: 5 });",
          "    let err = BuildError { kind: BuildErrorKind::TooManyPatterns { given: 6, limit: 5 } };",
          "    let result = err.kind();",
          "    assert_eq!(result, &BuildErrorKind::TooManyPatterns { given: 6, limit: 5 });",
          "    let err = BuildError { kind: BuildErrorKind::ExceededSizeLimit { limit: 1024 } };",
          "    let result = err.kind();",
          "    assert_eq!(result, &BuildErrorKind::ExceededSizeLimit { limit: 1024 });",
          "    let err = BuildError { kind: BuildErrorKind::Unsupported(\"Some feature\") };",
          "    let result = err.kind();",
          "    assert_eq!(result, &BuildErrorKind::Unsupported(\"Some feature\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let err = BuildError {",
          "        kind: BuildErrorKind::Unsupported(\"unsupported feature\"),",
          "    };",
          "    let _result = err.kind();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, &BuildErrorKind::Unsupported(\"unsupported feature\"));"
        ],
        "code": [
          "{",
          "    let err = BuildError {",
          "        kind: BuildErrorKind::Unsupported(\"unsupported feature\"),",
          "    };",
          "    let _result = err.kind();",
          "    assert_eq!(_result, &BuildErrorKind::Unsupported(\"unsupported feature\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]