[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Utf8BoundedMap::new(1);",
          "    let key: Vec<Transition> = vec![];",
          "    let result = map.hash(&key);",
          "}"
        ],
        "oracle": [
          "    let mut map = Utf8BoundedMap::new(1);",
          "    let key: Vec<Transition> = vec![];",
          "    let result = map.hash(&key);",
          "    assert_eq!(result, 0);"
        ],
        "code": [
          "{",
          "    let mut map = Utf8BoundedMap::new(1);",
          "    let key: Vec<Transition> = vec![];",
          "    let result = map.hash(&key);",
          "    let mut map = Utf8BoundedMap::new(1);",
          "    let key: Vec<Transition> = vec![];",
          "    let result = map.hash(&key);",
          "    assert_eq!(result, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Utf8BoundedMap::new(1);",
          "    let key: Vec<Transition> = vec![Transition { start: 0, end: 0, next: StateID::default() }];",
          "    map.map.push(Utf8BoundedEntry::default());",
          "    let result = map.hash(&key);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0);"
        ],
        "code": [
          "{",
          "    let mut map = Utf8BoundedMap::new(1);",
          "    let key: Vec<Transition> = vec![Transition { start: 0, end: 0, next: StateID::default() }];",
          "    map.map.push(Utf8BoundedEntry::default());",
          "    let result = map.hash(&key);",
          "    assert_eq!(result, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Utf8BoundedMap::new(1);",
          "    let key: Vec<Transition> = vec![Transition { start: 255, end: 255, next: StateID::default() }];",
          "    map.map.push(Utf8BoundedEntry::default());",
          "    let result = map.hash(&key);",
          "}"
        ],
        "oracle": [
          "    let map = Utf8BoundedMap::new(1);",
          "    let key: Vec<Transition> = vec![];",
          "    let result = map.hash(&key);",
          "    assert_eq!(result, 0);",
          "    let key: Vec<Transition> = vec![Transition { start: 0, end: 0, next: StateID::default() }];",
          "    map.map.push(Utf8BoundedEntry::default());",
          "    let result = map.hash(&key);",
          "    assert_ne!(result, 0);"
        ],
        "code": [
          "{",
          "    let mut map = Utf8BoundedMap::new(1);",
          "    let key: Vec<Transition> = vec![Transition { start: 255, end: 255, next: StateID::default() }];",
          "    map.map.push(Utf8BoundedEntry::default());",
          "    let result = map.hash(&key);",
          "    let map = Utf8BoundedMap::new(1);",
          "    let key: Vec<Transition> = vec![];",
          "    let result = map.hash(&key);",
          "    assert_eq!(result, 0);",
          "    let key: Vec<Transition> = vec![Transition { start: 0, end: 0, next: StateID::default() }];",
          "    map.map.push(Utf8BoundedEntry::default());",
          "    let result = map.hash(&key);",
          "    assert_ne!(result, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Utf8BoundedMap::new(1);",
          "    let key: Vec<Transition> = vec![",
          "        Transition { start: 0, end: 1, next: StateID::default() },",
          "        Transition { start: 2, end: 3, next: StateID::default() }",
          "    ];",
          "    map.map.push(Utf8BoundedEntry::default());",
          "    let result = map.hash(&key);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, (INIT % 1) as usize);",
          "    assert_eq!(map.map.len(), 1);",
          "    assert_eq!(map.version, 0);",
          "    assert_eq!(map.map[0].version, 0);",
          "    assert_eq!(map.map[0].key.len(), 0);",
          "    assert_eq!(map.map[0].val, StateID::default());"
        ],
        "code": [
          "{",
          "    let mut map = Utf8BoundedMap::new(1);",
          "    let key: Vec<Transition> = vec![",
          "        Transition { start: 0, end: 1, next: StateID::default() },",
          "        Transition { start: 2, end: 3, next: StateID::default() }",
          "    ];",
          "    map.map.push(Utf8BoundedEntry::default());",
          "    let result = map.hash(&key);",
          "    assert_eq!(result, (INIT % 1) as usize);",
          "    assert_eq!(map.map.len(), 1);",
          "    assert_eq!(map.version, 0);",
          "    assert_eq!(map.map[0].version, 0);",
          "    assert_eq!(map.map[0].key.len(), 0);",
          "    assert_eq!(map.map[0].val, StateID::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Utf8BoundedMap::new(2);",
          "    let key: Vec<Transition> = vec![];",
          "    let result = map.hash(&key);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0);"
        ],
        "code": [
          "{",
          "    let mut map = Utf8BoundedMap::new(2);",
          "    let key: Vec<Transition> = vec![];",
          "    let result = map.hash(&key);",
          "    assert_eq!(result, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]