[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let memchr = Memchr(42);",
          "    let haystack = [42, 43, 44]; ",
          "    let span = Span { start: 0, end: 1 }; ",
          "    let result = memchr.prefix(&haystack, span);",
          "}"
        ],
        "oracle": [
          "    let memchr = Memchr(42);",
          "    let haystack = [42, 43, 44];",
          "    let span = Span { start: 0, end: 1 };",
          "    let result = memchr.prefix(&haystack, span);",
          "    assert_eq!(result, Some(Span { start: 0, end: 1 }));"
        ],
        "code": [
          "{",
          "    let memchr = Memchr(42);",
          "    let haystack = [42, 43, 44]; ",
          "    let span = Span { start: 0, end: 1 }; ",
          "    let result = memchr.prefix(&haystack, span);",
          "    let memchr = Memchr(42);",
          "    let haystack = [42, 43, 44];",
          "    let span = Span { start: 0, end: 1 };",
          "    let result = memchr.prefix(&haystack, span);",
          "    assert_eq!(result, Some(Span { start: 0, end: 1 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let memchr = Memchr(43);",
          "    let haystack = [42, 43, 44]; ",
          "    let span = Span { start: 1, end: 2 }; ",
          "    let result = memchr.prefix(&haystack, span);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Span { start: 1, end: 2 }));"
        ],
        "code": [
          "{",
          "    let memchr = Memchr(43);",
          "    let haystack = [42, 43, 44]; ",
          "    let span = Span { start: 1, end: 2 }; ",
          "    let result = memchr.prefix(&haystack, span);",
          "    assert_eq!(result, Some(Span { start: 1, end: 2 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let memchr = Memchr(44);",
          "    let haystack = [42, 43, 44]; ",
          "    let span = Span { start: 2, end: 3 }; ",
          "    let result = memchr.prefix(&haystack, span);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Span { start: 2, end: 3 }));"
        ],
        "code": [
          "{",
          "    let memchr = Memchr(44);",
          "    let haystack = [42, 43, 44]; ",
          "    let span = Span { start: 2, end: 3 }; ",
          "    let result = memchr.prefix(&haystack, span);",
          "    assert_eq!(result, Some(Span { start: 2, end: 3 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]