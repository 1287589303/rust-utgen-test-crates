[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = StateID(Default::default());",
          "    let unit_eoi = Unit::eoi(1);",
          "    let unit_next = unit_eoi;",
          "    let state_ids = vec![state_id];",
          "",
          "    let mut dense_iter = StateTransitionIter {",
          "        len: state_ids.len(),",
          "        it: state_ids.iter().enumerate(),",
          "    };",
          "",
          "    let mut iter = StateSparseTransitionIter {",
          "        dense: dense_iter,",
          "        cur: Some((unit_eoi, unit_eoi, state_id)),",
          "    };",
          "",
          "    let result = iter.next();",
          "}"
        ],
        "oracle": [
          "    let state_id = StateID(Default::default());",
          "    let unit_eoi = Unit::eoi(1);",
          "    let unit_next = unit_eoi;",
          "    let state_ids = vec![state_id];",
          "    ",
          "    let mut dense_iter = StateTransitionIter {",
          "    len: state_ids.len(),",
          "    it: state_ids.iter().enumerate(),",
          "    };",
          "    ",
          "    let mut iter = StateSparseTransitionIter {",
          "    dense: dense_iter,",
          "    cur: Some((unit_eoi, unit_eoi, state_id)),",
          "    };",
          "    ",
          "    let result = iter.next();",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let state_id = StateID(Default::default());",
          "    let unit_eoi = Unit::eoi(1);",
          "    let unit_next = unit_eoi;",
          "    let state_ids = vec![state_id];",
          "",
          "    let mut dense_iter = StateTransitionIter {",
          "        len: state_ids.len(),",
          "        it: state_ids.iter().enumerate(),",
          "    };",
          "",
          "    let mut iter = StateSparseTransitionIter {",
          "        dense: dense_iter,",
          "        cur: Some((unit_eoi, unit_eoi, state_id)),",
          "    };",
          "",
          "    let result = iter.next();",
          "    let state_id = StateID(Default::default());",
          "    let unit_eoi = Unit::eoi(1);",
          "    let unit_next = unit_eoi;",
          "    let state_ids = vec![state_id];",
          "    ",
          "    let mut dense_iter = StateTransitionIter {",
          "    len: state_ids.len(),",
          "    it: state_ids.iter().enumerate(),",
          "    };",
          "    ",
          "    let mut iter = StateSparseTransitionIter {",
          "    dense: dense_iter,",
          "    cur: Some((unit_eoi, unit_eoi, state_id)),",
          "    };",
          "    ",
          "    let result = iter.next();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = StateID(Default::default());",
          "    let unit_eoi = Unit::eoi(1);",
          "    let unit_next = unit_eoi;",
          "    let state_ids = vec![state_id];",
          "",
          "    let mut dense_iter = StateTransitionIter {",
          "        len: state_ids.len(),",
          "        it: state_ids.iter().enumerate(),",
          "    };",
          "",
          "    let mut iter = StateSparseTransitionIter {",
          "        dense: dense_iter,",
          "        cur: Some((unit_eoi, unit_eoi, state_id)),",
          "    };",
          "",
          "    let result = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let state_id = StateID(Default::default());",
          "    let unit_eoi = Unit::eoi(1);",
          "    let unit_next = unit_eoi;",
          "    let state_ids = vec![state_id];",
          "",
          "    let mut dense_iter = StateTransitionIter {",
          "        len: state_ids.len(),",
          "        it: state_ids.iter().enumerate(),",
          "    };",
          "",
          "    let mut iter = StateSparseTransitionIter {",
          "        dense: dense_iter,",
          "        cur: Some((unit_eoi, unit_eoi, state_id)),",
          "    };",
          "",
          "    let result = iter.next();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = StateID(Default::default());",
          "    let unit_a = Unit::u8(0);",
          "    let unit_b = Unit::u8(1);",
          "    let state_ids = vec![state_id];",
          "",
          "    let mut dense_iter = StateTransitionIter {",
          "        len: state_ids.len(),",
          "        it: state_ids.iter().enumerate(),",
          "    };",
          "",
          "    let mut iter = StateSparseTransitionIter {",
          "        dense: dense_iter,",
          "        cur: Some((unit_a, unit_b, state_id)),",
          "    };",
          "",
          "    let result = iter.next();",
          "}"
        ],
        "oracle": [
          "    let state_id = StateID(Default::default());",
          "    let unit_a = Unit::u8(0);",
          "    let unit_b = Unit::u8(1);",
          "    let state_ids = vec![state_id];",
          "    let mut dense_iter = StateTransitionIter { len: state_ids.len(), it: state_ids.iter().enumerate(), };",
          "    let mut iter = StateSparseTransitionIter { dense: dense_iter, cur: Some((unit_a, unit_b, state_id)), };",
          "    let result = iter.next();",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let state_id = StateID(Default::default());",
          "    let unit_a = Unit::u8(0);",
          "    let unit_b = Unit::u8(1);",
          "    let state_ids = vec![state_id];",
          "",
          "    let mut dense_iter = StateTransitionIter {",
          "        len: state_ids.len(),",
          "        it: state_ids.iter().enumerate(),",
          "    };",
          "",
          "    let mut iter = StateSparseTransitionIter {",
          "        dense: dense_iter,",
          "        cur: Some((unit_a, unit_b, state_id)),",
          "    };",
          "",
          "    let result = iter.next();",
          "    let state_id = StateID(Default::default());",
          "    let unit_a = Unit::u8(0);",
          "    let unit_b = Unit::u8(1);",
          "    let state_ids = vec![state_id];",
          "    let mut dense_iter = StateTransitionIter { len: state_ids.len(), it: state_ids.iter().enumerate(), };",
          "    let mut iter = StateSparseTransitionIter { dense: dense_iter, cur: Some((unit_a, unit_b, state_id)), };",
          "    let result = iter.next();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]