[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(None),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let concat: Vec<Hir> = vec![];",
          "",
          "    let _ = parser.parse_uncounted_repetition(concat);",
          "}"
        ],
        "oracle": [
          "    let concat: Vec<Hir> = vec![];",
          "    let result = parser.parse_uncounted_repetition(concat);",
          "    assert_eq!(result, Err(Error::new(ERR_UNCOUNTED_REP_SUB_MISSING)));"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(None),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let concat: Vec<Hir> = vec![];",
          "",
          "    let _ = parser.parse_uncounted_repetition(concat);",
          "    let concat: Vec<Hir> = vec![];",
          "    let result = parser.parse_uncounted_repetition(concat);",
          "    assert_eq!(result, Err(Error::new(ERR_UNCOUNTED_REP_SUB_MISSING)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]