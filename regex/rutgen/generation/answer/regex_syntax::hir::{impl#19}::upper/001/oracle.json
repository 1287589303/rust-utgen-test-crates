[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassBytesRange { start: 0, end: 0 };",
          "    let result = range.upper();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0);",
          "    let range = ClassBytesRange { start: 5, end: 10 };",
          "    let result = range.upper();",
          "    assert_eq!(result, 10);",
          "    let range = ClassBytesRange { start: 255, end: 255 };",
          "    let result = range.upper();",
          "    assert_eq!(result, 255);",
          "    let range = ClassBytesRange { start: 100, end: 200 };",
          "    let result = range.upper();",
          "    assert_eq!(result, 200);",
          "    let range = ClassBytesRange { start: 50, end: 100 };",
          "    let result = range.upper();",
          "    assert_eq!(result, 100);"
        ],
        "code": [
          "{",
          "    let range = ClassBytesRange { start: 0, end: 0 };",
          "    let result = range.upper();",
          "    assert_eq!(result, 0);",
          "    let range = ClassBytesRange { start: 5, end: 10 };",
          "    let result = range.upper();",
          "    assert_eq!(result, 10);",
          "    let range = ClassBytesRange { start: 255, end: 255 };",
          "    let result = range.upper();",
          "    assert_eq!(result, 255);",
          "    let range = ClassBytesRange { start: 100, end: 200 };",
          "    let result = range.upper();",
          "    assert_eq!(result, 200);",
          "    let range = ClassBytesRange { start: 50, end: 100 };",
          "    let result = range.upper();",
          "    assert_eq!(result, 100);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassBytesRange { start: 0, end: 1 };",
          "    let result = range.upper();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 1);"
        ],
        "code": [
          "{",
          "    let range = ClassBytesRange { start: 0, end: 1 };",
          "    let result = range.upper();",
          "    assert_eq!(result, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassBytesRange { start: 254, end: 254 };",
          "    let result = range.upper();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 254);"
        ],
        "code": [
          "{",
          "    let range = ClassBytesRange { start: 254, end: 254 };",
          "    let result = range.upper();",
          "    assert_eq!(result, 254);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassBytesRange { start: 255, end: 255 };",
          "    let result = range.upper();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 255);"
        ],
        "code": [
          "{",
          "    let range = ClassBytesRange { start: 255, end: 255 };",
          "    let result = range.upper();",
          "    assert_eq!(result, 255);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]