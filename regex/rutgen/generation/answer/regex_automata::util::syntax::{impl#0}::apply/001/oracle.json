[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = ParserBuilder::new();",
          "    let config = Config::new()",
          "        .case_insensitive(true)",
          "        .multi_line(true)",
          "        .dot_matches_new_line(true)",
          "        .crlf(true)",
          "        .line_terminator(255)",
          "        .swap_greed(true)",
          "        .ignore_whitespace(true)",
          "        .unicode(true)",
          "        .utf8(true)",
          "        .nest_limit(10)",
          "        .octal(true);",
          "    config.apply(&mut builder);",
          "}"
        ],
        "oracle": [
          "    assert!(builder.is_unicode());",
          "    assert!(builder.is_case_insensitive());",
          "    assert!(builder.is_multi_line());",
          "    assert!(builder.is_dot_matches_new_line());",
          "    assert!(builder.is_crlf());",
          "    assert_eq!(builder.get_line_terminator(), 255);",
          "    assert!(builder.is_swap_greed());",
          "    assert!(builder.is_ignore_whitespace());",
          "    assert!(builder.is_utf8());",
          "    assert_eq!(builder.get_nest_limit(), 10);",
          "    assert!(builder.is_octal());"
        ],
        "code": [
          "{",
          "    let mut builder = ParserBuilder::new();",
          "    let config = Config::new()",
          "        .case_insensitive(true)",
          "        .multi_line(true)",
          "        .dot_matches_new_line(true)",
          "        .crlf(true)",
          "        .line_terminator(255)",
          "        .swap_greed(true)",
          "        .ignore_whitespace(true)",
          "        .unicode(true)",
          "        .utf8(true)",
          "        .nest_limit(10)",
          "        .octal(true);",
          "    config.apply(&mut builder);",
          "    assert!(builder.is_unicode());",
          "    assert!(builder.is_case_insensitive());",
          "    assert!(builder.is_multi_line());",
          "    assert!(builder.is_dot_matches_new_line());",
          "    assert!(builder.is_crlf());",
          "    assert_eq!(builder.get_line_terminator(), 255);",
          "    assert!(builder.is_swap_greed());",
          "    assert!(builder.is_ignore_whitespace());",
          "    assert!(builder.is_utf8());",
          "    assert_eq!(builder.get_nest_limit(), 10);",
          "    assert!(builder.is_octal());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = ParserBuilder::new();",
          "    let config = Config::new()",
          "        .case_insensitive(false)",
          "        .multi_line(false)",
          "        .dot_matches_new_line(false)",
          "        .crlf(false)",
          "        .line_terminator(0)",
          "        .swap_greed(false)",
          "        .ignore_whitespace(false)",
          "        .unicode(false)",
          "        .utf8(false)",
          "        .nest_limit(0)",
          "        .octal(false);",
          "    config.apply(&mut builder);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.unicode, false);",
          "    assert_eq!(builder.case_insensitive, false);",
          "    assert_eq!(builder.multi_line, false);",
          "    assert_eq!(builder.dot_matches_new_line, false);",
          "    assert_eq!(builder.crlf, false);",
          "    assert_eq!(builder.line_terminator, 0);",
          "    assert_eq!(builder.swap_greed, false);",
          "    assert_eq!(builder.ignore_whitespace, false);",
          "    assert_eq!(builder.utf8, false);",
          "    assert_eq!(builder.nest_limit, 0);",
          "    assert_eq!(builder.octal, false);"
        ],
        "code": [
          "{",
          "    let mut builder = ParserBuilder::new();",
          "    let config = Config::new()",
          "        .case_insensitive(false)",
          "        .multi_line(false)",
          "        .dot_matches_new_line(false)",
          "        .crlf(false)",
          "        .line_terminator(0)",
          "        .swap_greed(false)",
          "        .ignore_whitespace(false)",
          "        .unicode(false)",
          "        .utf8(false)",
          "        .nest_limit(0)",
          "        .octal(false);",
          "    config.apply(&mut builder);",
          "    assert_eq!(builder.unicode, false);",
          "    assert_eq!(builder.case_insensitive, false);",
          "    assert_eq!(builder.multi_line, false);",
          "    assert_eq!(builder.dot_matches_new_line, false);",
          "    assert_eq!(builder.crlf, false);",
          "    assert_eq!(builder.line_terminator, 0);",
          "    assert_eq!(builder.swap_greed, false);",
          "    assert_eq!(builder.ignore_whitespace, false);",
          "    assert_eq!(builder.utf8, false);",
          "    assert_eq!(builder.nest_limit, 0);",
          "    assert_eq!(builder.octal, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = ParserBuilder::new();",
          "    ",
          "    let config_zero_nest_limit = Config::new()",
          "        .case_insensitive(true)",
          "        .multi_line(false)",
          "        .dot_matches_new_line(true)",
          "        .crlf(false)",
          "        .line_terminator(0)",
          "        .swap_greed(false)",
          "        .ignore_whitespace(true)",
          "        .unicode(false)",
          "        .utf8(true)",
          "        .nest_limit(0)",
          "        .octal(true);",
          "    config_zero_nest_limit.apply(&mut builder);",
          "",
          "    let config_max_nest_limit = Config::new()",
          "        .case_insensitive(false)",
          "        .multi_line(true)",
          "        .dot_matches_new_line(false)",
          "        .crlf(true)",
          "        .line_terminator(255)",
          "        .swap_greed(true)",
          "        .ignore_whitespace(false)",
          "        .unicode(true)",
          "        .utf8(false)",
          "        .nest_limit(10)",
          "        .octal(false);",
          "    config_max_nest_limit.apply(&mut builder);",
          "}"
        ],
        "oracle": [
          "    builder.unicode(false);",
          "    builder.case_insensitive(true);",
          "    builder.multi_line(false);",
          "    builder.dot_matches_new_line(true);",
          "    builder.crlf(false);",
          "    builder.line_terminator(0);",
          "    builder.swap_greed(false);",
          "    builder.ignore_whitespace(true);",
          "    builder.utf8(true);",
          "    builder.nest_limit(0);",
          "    builder.octal(true);",
          "    ",
          "    builder.unicode(true);",
          "    builder.case_insensitive(false);",
          "    builder.multi_line(true);",
          "    builder.dot_matches_new_line(false);",
          "    builder.crlf(true);",
          "    builder.line_terminator(255);",
          "    builder.swap_greed(true);",
          "    builder.ignore_whitespace(false);",
          "    builder.utf8(false);",
          "    builder.nest_limit(10);",
          "    builder.octal(false);"
        ],
        "code": [
          "{",
          "    let mut builder = ParserBuilder::new();",
          "    ",
          "    let config_zero_nest_limit = Config::new()",
          "        .case_insensitive(true)",
          "        .multi_line(false)",
          "        .dot_matches_new_line(true)",
          "        .crlf(false)",
          "        .line_terminator(0)",
          "        .swap_greed(false)",
          "        .ignore_whitespace(true)",
          "        .unicode(false)",
          "        .utf8(true)",
          "        .nest_limit(0)",
          "        .octal(true);",
          "    config_zero_nest_limit.apply(&mut builder);",
          "",
          "    let config_max_nest_limit = Config::new()",
          "        .case_insensitive(false)",
          "        .multi_line(true)",
          "        .dot_matches_new_line(false)",
          "        .crlf(true)",
          "        .line_terminator(255)",
          "        .swap_greed(true)",
          "        .ignore_whitespace(false)",
          "        .unicode(true)",
          "        .utf8(false)",
          "        .nest_limit(10)",
          "        .octal(false);",
          "    config_max_nest_limit.apply(&mut builder);",
          "    builder.unicode(false);",
          "    builder.case_insensitive(true);",
          "    builder.multi_line(false);",
          "    builder.dot_matches_new_line(true);",
          "    builder.crlf(false);",
          "    builder.line_terminator(0);",
          "    builder.swap_greed(false);",
          "    builder.ignore_whitespace(true);",
          "    builder.utf8(true);",
          "    builder.nest_limit(0);",
          "    builder.octal(true);",
          "    ",
          "    builder.unicode(true);",
          "    builder.case_insensitive(false);",
          "    builder.multi_line(true);",
          "    builder.dot_matches_new_line(false);",
          "    builder.crlf(true);",
          "    builder.line_terminator(255);",
          "    builder.swap_greed(true);",
          "    builder.ignore_whitespace(false);",
          "    builder.utf8(false);",
          "    builder.nest_limit(10);",
          "    builder.octal(false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]