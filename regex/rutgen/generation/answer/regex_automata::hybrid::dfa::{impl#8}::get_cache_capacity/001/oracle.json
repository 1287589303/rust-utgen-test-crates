[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new();",
          "    let capacity = config.get_cache_capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(capacity, 2 * (1 << 20));",
          "    let config_with_capacity = Config::new().cache_capacity(1024);",
          "    let capacity_with_custom_value = config_with_capacity.get_cache_capacity();",
          "    assert_eq!(capacity_with_custom_value, 1024);",
          "    let config_with_none_capacity = Config::new().cache_capacity(Option::None);",
          "    let capacity_with_none = config_with_none_capacity.get_cache_capacity();",
          "    assert_eq!(capacity_with_none, 2 * (1 << 20));"
        ],
        "code": [
          "{",
          "    let config = Config::new();",
          "    let capacity = config.get_cache_capacity();",
          "    assert_eq!(capacity, 2 * (1 << 20));",
          "    let config_with_capacity = Config::new().cache_capacity(1024);",
          "    let capacity_with_custom_value = config_with_capacity.get_cache_capacity();",
          "    assert_eq!(capacity_with_custom_value, 1024);",
          "    let config_with_none_capacity = Config::new().cache_capacity(Option::None);",
          "    let capacity_with_none = config_with_none_capacity.get_cache_capacity();",
          "    assert_eq!(capacity_with_none, 2 * (1 << 20));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().cache_capacity(0);",
          "    let capacity = config.get_cache_capacity();",
          "}"
        ],
        "oracle": [
          "    let config = Config::new().cache_capacity(0); assert_eq!(capacity, 2097152);",
          "    let config = Config::new(); assert_eq!(config.get_cache_capacity(), 2097152);",
          "    let config = Config::new().cache_capacity(1024); assert_eq!(config.get_cache_capacity(), 1024);",
          "    let config = Config::new().cache_capacity(2048); assert_eq!(config.get_cache_capacity(), 2048);",
          "    let config = Config::new().cache_capacity(1048576); assert_eq!(config.get_cache_capacity(), 1048576);"
        ],
        "code": [
          "{",
          "    let config = Config::new().cache_capacity(0);",
          "    let capacity = config.get_cache_capacity();",
          "    let config = Config::new().cache_capacity(0); assert_eq!(capacity, 2097152);",
          "    let config = Config::new(); assert_eq!(config.get_cache_capacity(), 2097152);",
          "    let config = Config::new().cache_capacity(1024); assert_eq!(config.get_cache_capacity(), 1024);",
          "    let config = Config::new().cache_capacity(2048); assert_eq!(config.get_cache_capacity(), 2048);",
          "    let config = Config::new().cache_capacity(1048576); assert_eq!(config.get_cache_capacity(), 1048576);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().cache_capacity(1);",
          "    let capacity = config.get_cache_capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(capacity, 1);",
          "    let config = Config::new().cache_capacity(0);",
          "    let capacity = config.get_cache_capacity();",
          "    assert_eq!(capacity, 2097152);",
          "    let config = Config::new().cache_capacity(1024);",
          "    let capacity = config.get_cache_capacity();",
          "    assert_eq!(capacity, 1024);",
          "    let config = Config::new();",
          "    let capacity = config.get_cache_capacity();",
          "    assert_eq!(capacity, 2097152);"
        ],
        "code": [
          "{",
          "    let config = Config::new().cache_capacity(1);",
          "    let capacity = config.get_cache_capacity();",
          "    assert_eq!(capacity, 1);",
          "    let config = Config::new().cache_capacity(0);",
          "    let capacity = config.get_cache_capacity();",
          "    assert_eq!(capacity, 2097152);",
          "    let config = Config::new().cache_capacity(1024);",
          "    let capacity = config.get_cache_capacity();",
          "    assert_eq!(capacity, 1024);",
          "    let config = Config::new();",
          "    let capacity = config.get_cache_capacity();",
          "    assert_eq!(capacity, 2097152);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().cache_capacity(2 * (1 << 20));",
          "    let capacity = config.get_cache_capacity();",
          "}"
        ],
        "oracle": [
          "    let config = Config::new().cache_capacity(2 * (1 << 20)); assert_eq!(config.get_cache_capacity(), 2 * (1 << 20));",
          "    let config = Config::new(); assert_eq!(config.get_cache_capacity(), 2 * (1 << 20));",
          "    let config = Config::new().cache_capacity(0); assert_eq!(config.get_cache_capacity(), 0);",
          "    let config = Config::new().cache_capacity(1024); assert_eq!(config.get_cache_capacity(), 1024);",
          "    let config = Config::new().cache_capacity(10 * (1 << 20)); assert_eq!(config.get_cache_capacity(), 10 * (1 << 20));"
        ],
        "code": [
          "{",
          "    let config = Config::new().cache_capacity(2 * (1 << 20));",
          "    let capacity = config.get_cache_capacity();",
          "    let config = Config::new().cache_capacity(2 * (1 << 20)); assert_eq!(config.get_cache_capacity(), 2 * (1 << 20));",
          "    let config = Config::new(); assert_eq!(config.get_cache_capacity(), 2 * (1 << 20));",
          "    let config = Config::new().cache_capacity(0); assert_eq!(config.get_cache_capacity(), 0);",
          "    let config = Config::new().cache_capacity(1024); assert_eq!(config.get_cache_capacity(), 1024);",
          "    let config = Config::new().cache_capacity(10 * (1 << 20)); assert_eq!(config.get_cache_capacity(), 10 * (1 << 20));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().cache_capacity(1048576);",
          "    let capacity = config.get_cache_capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(capacity, 1048576);",
          "    let config_default = Config::new();",
          "    let default_capacity = config_default.get_cache_capacity();",
          "    assert_eq!(default_capacity, 2097152);",
          "    let config_none = Config::new().cache_capacity(0);",
          "    let zero_capacity = config_none.get_cache_capacity();",
          "    assert_eq!(zero_capacity, 2097152);",
          "    let config_large = Config::new().cache_capacity(4294967296);",
          "    let large_capacity = config_large.get_cache_capacity();",
          "    assert_eq!(large_capacity, 4294967296);"
        ],
        "code": [
          "{",
          "    let config = Config::new().cache_capacity(1048576);",
          "    let capacity = config.get_cache_capacity();",
          "    assert_eq!(capacity, 1048576);",
          "    let config_default = Config::new();",
          "    let default_capacity = config_default.get_cache_capacity();",
          "    assert_eq!(default_capacity, 2097152);",
          "    let config_none = Config::new().cache_capacity(0);",
          "    let zero_capacity = config_none.get_cache_capacity();",
          "    assert_eq!(zero_capacity, 2097152);",
          "    let config_large = Config::new().cache_capacity(4294967296);",
          "    let large_capacity = config_large.get_cache_capacity();",
          "    assert_eq!(large_capacity, 4294967296);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]