[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special {",
          "        max: StateID(3),",
          "        quit_id: StateID(5),",
          "        min_match: StateID(4),",
          "        max_match: StateID(6),",
          "        min_accel: StateID(0),",
          "        max_accel: StateID(2),",
          "        min_start: StateID(1),",
          "        max_start: StateID(3),",
          "    };",
          "    let id = StateID(5);",
          "    special.is_match_state(id);",
          "}"
        ],
        "oracle": [
          "    assert!(!special.is_dead_state(StateID(5)));",
          "    assert!(special.min_match > StateID(5));",
          "    assert_eq!(special.is_match_state(StateID(5)), false);",
          "    assert_eq!(special.is_match_state(StateID(4)), true);",
          "    assert_eq!(special.is_match_state(StateID(6)), true);",
          "    assert_eq!(special.is_match_state(StateID(3)), false);",
          "    assert_eq!(special.is_match_state(StateID(7)), false);"
        ],
        "code": [
          "{",
          "    let special = Special {",
          "        max: StateID(3),",
          "        quit_id: StateID(5),",
          "        min_match: StateID(4),",
          "        max_match: StateID(6),",
          "        min_accel: StateID(0),",
          "        max_accel: StateID(2),",
          "        min_start: StateID(1),",
          "        max_start: StateID(3),",
          "    };",
          "    let id = StateID(5);",
          "    special.is_match_state(id);",
          "    assert!(!special.is_dead_state(StateID(5)));",
          "    assert!(special.min_match > StateID(5));",
          "    assert_eq!(special.is_match_state(StateID(5)), false);",
          "    assert_eq!(special.is_match_state(StateID(4)), true);",
          "    assert_eq!(special.is_match_state(StateID(6)), true);",
          "    assert_eq!(special.is_match_state(StateID(3)), false);",
          "    assert_eq!(special.is_match_state(StateID(7)), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special {",
          "        max: StateID(3),",
          "        quit_id: StateID(5),",
          "        min_match: StateID(1),",
          "        max_match: StateID(2),",
          "        min_accel: StateID(0),",
          "        max_accel: StateID(2),",
          "        min_start: StateID(1),",
          "        max_start: StateID(3),",
          "    };",
          "    let id = StateID(3);",
          "    special.is_match_state(id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(special.is_match_state(StateID(0)), false);",
          "    assert_eq!(special.is_match_state(StateID(1)), true);",
          "    assert_eq!(special.is_match_state(StateID(2)), true);",
          "    assert_eq!(special.is_match_state(StateID(3)), false);",
          "    assert_eq!(special.is_match_state(StateID(4)), false);",
          "    assert_eq!(special.is_match_state(StateID(5)), false);",
          "    assert_eq!(special.is_match_state(StateID(6)), false);"
        ],
        "code": [
          "{",
          "    let special = Special {",
          "        max: StateID(3),",
          "        quit_id: StateID(5),",
          "        min_match: StateID(1),",
          "        max_match: StateID(2),",
          "        min_accel: StateID(0),",
          "        max_accel: StateID(2),",
          "        min_start: StateID(1),",
          "        max_start: StateID(3),",
          "    };",
          "    let id = StateID(3);",
          "    special.is_match_state(id);",
          "    assert_eq!(special.is_match_state(StateID(0)), false);",
          "    assert_eq!(special.is_match_state(StateID(1)), true);",
          "    assert_eq!(special.is_match_state(StateID(2)), true);",
          "    assert_eq!(special.is_match_state(StateID(3)), false);",
          "    assert_eq!(special.is_match_state(StateID(4)), false);",
          "    assert_eq!(special.is_match_state(StateID(5)), false);",
          "    assert_eq!(special.is_match_state(StateID(6)), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]