[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = StateID(5);",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(1),",
          "        min_match: state_id,",
          "        max_match: StateID(10),",
          "        min_accel: StateID(2),",
          "        max_accel: StateID(3),",
          "        min_start: StateID(4),",
          "        max_start: StateID(8),",
          "    };",
          "    special.is_match_state(state_id);",
          "}"
        ],
        "oracle": [
          "    assert!(special.is_match_state(state_id));  // Validate state_id is a match state",
          "    assert!(!special.is_dead_state(state_id));    // Ensure state_id is not a dead state",
          "    assert_eq!(special.min_match, state_id);      // Validate min_match equals state_id",
          "    assert!(state_id <= special.max_match);       // Ensure state_id is less than or equal to max_match"
        ],
        "code": [
          "{",
          "    let state_id = StateID(5);",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(1),",
          "        min_match: state_id,",
          "        max_match: StateID(10),",
          "        min_accel: StateID(2),",
          "        max_accel: StateID(3),",
          "        min_start: StateID(4),",
          "        max_start: StateID(8),",
          "    };",
          "    special.is_match_state(state_id);",
          "    assert!(special.is_match_state(state_id));  // Validate state_id is a match state",
          "    assert!(!special.is_dead_state(state_id));    // Ensure state_id is not a dead state",
          "    assert_eq!(special.min_match, state_id);      // Validate min_match equals state_id",
          "    assert!(state_id <= special.max_match);       // Ensure state_id is less than or equal to max_match",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = StateID(7);",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(1),",
          "        min_match: StateID(5),",
          "        max_match: StateID(10),",
          "        min_accel: StateID(2),",
          "        max_accel: StateID(3),",
          "        min_start: StateID(4),",
          "        max_start: StateID(8),",
          "    };",
          "    special.is_match_state(state_id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(special.is_match_state(StateID(5)), true);",
          "    assert_eq!(special.is_match_state(StateID(6)), true);",
          "    assert_eq!(special.is_match_state(StateID(10)), true);",
          "    assert_eq!(special.is_match_state(StateID(4)), false);",
          "    assert_eq!(special.is_match_state(StateID(11)), false);",
          "    assert_eq!(special.is_match_state(DEAD), false);"
        ],
        "code": [
          "{",
          "    let state_id = StateID(7);",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(1),",
          "        min_match: StateID(5),",
          "        max_match: StateID(10),",
          "        min_accel: StateID(2),",
          "        max_accel: StateID(3),",
          "        min_start: StateID(4),",
          "        max_start: StateID(8),",
          "    };",
          "    special.is_match_state(state_id);",
          "    assert_eq!(special.is_match_state(StateID(5)), true);",
          "    assert_eq!(special.is_match_state(StateID(6)), true);",
          "    assert_eq!(special.is_match_state(StateID(10)), true);",
          "    assert_eq!(special.is_match_state(StateID(4)), false);",
          "    assert_eq!(special.is_match_state(StateID(11)), false);",
          "    assert_eq!(special.is_match_state(DEAD), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = StateID(10);",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(1),",
          "        min_match: StateID(5),",
          "        max_match: state_id,",
          "        min_accel: StateID(2),",
          "        max_accel: StateID(3),",
          "        min_start: StateID(4),",
          "        max_start: StateID(8),",
          "    };",
          "    special.is_match_state(state_id);",
          "}"
        ],
        "oracle": [
          "    assert!(!special.is_dead_state(state_id));",
          "    assert!(special.min_match <= state_id);",
          "    assert!(state_id <= special.max_match);",
          "    assert!(special.is_match_state(state_id) == true);"
        ],
        "code": [
          "{",
          "    let state_id = StateID(10);",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(1),",
          "        min_match: StateID(5),",
          "        max_match: state_id,",
          "        min_accel: StateID(2),",
          "        max_accel: StateID(3),",
          "        min_start: StateID(4),",
          "        max_start: StateID(8),",
          "    };",
          "    special.is_match_state(state_id);",
          "    assert!(!special.is_dead_state(state_id));",
          "    assert!(special.min_match <= state_id);",
          "    assert!(state_id <= special.max_match);",
          "    assert!(special.is_match_state(state_id) == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]