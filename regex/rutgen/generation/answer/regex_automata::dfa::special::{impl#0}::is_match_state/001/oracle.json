[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(1),",
          "        min_match: StateID(5),",
          "        max_match: StateID(10),",
          "        min_accel: StateID(2),",
          "        max_accel: StateID(8),",
          "        min_start: StateID(3),",
          "        max_start: StateID(9),",
          "    };",
          "    let id = StateID(DEAD);",
          "    special.is_match_state(id);",
          "}"
        ],
        "oracle": [
          "    assert!(special.is_dead_state(id));",
          "    assert!(special.min_match > id);",
          "    assert!(id > special.max_match);",
          "    assert_eq!(special.is_match_state(id), false);"
        ],
        "code": [
          "{",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(1),",
          "        min_match: StateID(5),",
          "        max_match: StateID(10),",
          "        min_accel: StateID(2),",
          "        max_accel: StateID(8),",
          "        min_start: StateID(3),",
          "        max_start: StateID(9),",
          "    };",
          "    let id = StateID(DEAD);",
          "    special.is_match_state(id);",
          "    assert!(special.is_dead_state(id));",
          "    assert!(special.min_match > id);",
          "    assert!(id > special.max_match);",
          "    assert_eq!(special.is_match_state(id), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(1),",
          "        min_match: StateID(5),",
          "        max_match: StateID(10),",
          "        min_accel: StateID(2),",
          "        max_accel: StateID(8),",
          "        min_start: StateID(3),",
          "        max_start: StateID(9),",
          "    };",
          "    let id = StateID(6);",
          "    special.is_match_state(id);",
          "}"
        ],
        "oracle": [
          "    assert!(!special.is_dead_state(id));",
          "    assert!(special.min_match <= id);",
          "    assert!(id <= special.max_match);",
          "    assert!(special.is_match_state(id) == true);"
        ],
        "code": [
          "{",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(1),",
          "        min_match: StateID(5),",
          "        max_match: StateID(10),",
          "        min_accel: StateID(2),",
          "        max_accel: StateID(8),",
          "        min_start: StateID(3),",
          "        max_start: StateID(9),",
          "    };",
          "    let id = StateID(6);",
          "    special.is_match_state(id);",
          "    assert!(!special.is_dead_state(id));",
          "    assert!(special.min_match <= id);",
          "    assert!(id <= special.max_match);",
          "    assert!(special.is_match_state(id) == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(1),",
          "        min_match: StateID(5),",
          "        max_match: StateID(10),",
          "        min_accel: StateID(2),",
          "        max_accel: StateID(8),",
          "        min_start: StateID(3),",
          "        max_start: StateID(9),",
          "    };",
          "    let id = StateID(5);",
          "    special.is_match_state(id);",
          "}"
        ],
        "oracle": [
          "    assert!(!special.is_dead_state(id));",
          "    assert!(special.min_match <= id);",
          "    assert!(id <= special.max_match);",
          "    assert!(special.is_match_state(StateID(5)));",
          "    assert!(!special.is_match_state(StateID(4)));",
          "    assert!(!special.is_match_state(StateID(11)));"
        ],
        "code": [
          "{",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(1),",
          "        min_match: StateID(5),",
          "        max_match: StateID(10),",
          "        min_accel: StateID(2),",
          "        max_accel: StateID(8),",
          "        min_start: StateID(3),",
          "        max_start: StateID(9),",
          "    };",
          "    let id = StateID(5);",
          "    special.is_match_state(id);",
          "    assert!(!special.is_dead_state(id));",
          "    assert!(special.min_match <= id);",
          "    assert!(id <= special.max_match);",
          "    assert!(special.is_match_state(StateID(5)));",
          "    assert!(!special.is_match_state(StateID(4)));",
          "    assert!(!special.is_match_state(StateID(11)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(1),",
          "        min_match: StateID(5),",
          "        max_match: StateID(10),",
          "        min_accel: StateID(2),",
          "        max_accel: StateID(8),",
          "        min_start: StateID(3),",
          "        max_start: StateID(9),",
          "    };",
          "    let id = StateID(10);",
          "    special.is_match_state(id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(special.is_match_state(StateID(10)), true);",
          "    assert_eq!(special.is_match_state(StateID(5)), true);",
          "    assert_eq!(special.is_match_state(StateID(6)), true);",
          "    assert_eq!(special.is_match_state(StateID(9)), true);",
          "    assert_eq!(special.is_match_state(StateID(4)), false);",
          "    assert_eq!(special.is_match_state(StateID(11)), false);",
          "    assert_eq!(special.is_match_state(StateID(0)), false);",
          "    assert_eq!(special.is_match_state(StateID(1)), false);",
          "    assert_eq!(special.is_match_state(StateID(2)), false);",
          "    assert_eq!(special.is_match_state(StateID(3)), false);",
          "    assert_eq!(special.is_match_state(DEAD), false);"
        ],
        "code": [
          "{",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(1),",
          "        min_match: StateID(5),",
          "        max_match: StateID(10),",
          "        min_accel: StateID(2),",
          "        max_accel: StateID(8),",
          "        min_start: StateID(3),",
          "        max_start: StateID(9),",
          "    };",
          "    let id = StateID(10);",
          "    special.is_match_state(id);",
          "    assert_eq!(special.is_match_state(StateID(10)), true);",
          "    assert_eq!(special.is_match_state(StateID(5)), true);",
          "    assert_eq!(special.is_match_state(StateID(6)), true);",
          "    assert_eq!(special.is_match_state(StateID(9)), true);",
          "    assert_eq!(special.is_match_state(StateID(4)), false);",
          "    assert_eq!(special.is_match_state(StateID(11)), false);",
          "    assert_eq!(special.is_match_state(StateID(0)), false);",
          "    assert_eq!(special.is_match_state(StateID(1)), false);",
          "    assert_eq!(special.is_match_state(StateID(2)), false);",
          "    assert_eq!(special.is_match_state(StateID(3)), false);",
          "    assert_eq!(special.is_match_state(DEAD), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(1),",
          "        min_match: StateID(5),",
          "        max_match: StateID(10),",
          "        min_accel: StateID(2),",
          "        max_accel: StateID(8),",
          "        min_start: StateID(3),",
          "        max_start: StateID(9),",
          "    };",
          "    let id = StateID(4);",
          "    special.is_match_state(id);",
          "}"
        ],
        "oracle": [
          "    assert!(!special.is_dead_state(id));",
          "    assert!(special.min_match <= id);",
          "    assert!(id <= special.max_match);",
          "    assert!(!special.is_match_state(StateID(4)));"
        ],
        "code": [
          "{",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(1),",
          "        min_match: StateID(5),",
          "        max_match: StateID(10),",
          "        min_accel: StateID(2),",
          "        max_accel: StateID(8),",
          "        min_start: StateID(3),",
          "        max_start: StateID(9),",
          "    };",
          "    let id = StateID(4);",
          "    special.is_match_state(id);",
          "    assert!(!special.is_dead_state(id));",
          "    assert!(special.min_match <= id);",
          "    assert!(id <= special.max_match);",
          "    assert!(!special.is_match_state(StateID(4)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(1),",
          "        min_match: StateID(5),",
          "        max_match: StateID(10),",
          "        min_accel: StateID(2),",
          "        max_accel: StateID(8),",
          "        min_start: StateID(3),",
          "        max_start: StateID(9),",
          "    };",
          "    let id = StateID(11);",
          "    special.is_match_state(id);",
          "}"
        ],
        "oracle": [
          "    assert!(!special.is_dead_state(id));",
          "    assert!(special.min_match <= id);",
          "    assert!(id <= special.max_match);",
          "    assert!(!special.is_match_state(StateID(4)));",
          "    assert!(special.is_match_state(StateID(5)));",
          "    assert!(special.is_match_state(StateID(10)));",
          "    assert!(!special.is_match_state(StateID(11)));"
        ],
        "code": [
          "{",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(1),",
          "        min_match: StateID(5),",
          "        max_match: StateID(10),",
          "        min_accel: StateID(2),",
          "        max_accel: StateID(8),",
          "        min_start: StateID(3),",
          "        max_start: StateID(9),",
          "    };",
          "    let id = StateID(11);",
          "    special.is_match_state(id);",
          "    assert!(!special.is_dead_state(id));",
          "    assert!(special.min_match <= id);",
          "    assert!(id <= special.max_match);",
          "    assert!(!special.is_match_state(StateID(4)));",
          "    assert!(special.is_match_state(StateID(5)));",
          "    assert!(special.is_match_state(StateID(10)));",
          "    assert!(!special.is_match_state(StateID(11)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]