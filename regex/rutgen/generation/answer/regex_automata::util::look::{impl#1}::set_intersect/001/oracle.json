[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set_a = LookSet::full();",
          "    let set_b = LookSet::empty();",
          "    set_a.set_intersect(set_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set_a.bits, 0);",
          "    assert!(set_a.is_empty());",
          "    assert_eq!(set_a.len(), 0);",
          "    assert!(!set_a.contains_anchor());",
          "    assert!(!set_a.contains_word());",
          "    assert!(set_a.contains_word_unicode());",
          "    assert!(set_a.contains_word_ascii());",
          "    assert_eq!(set_a.iter().count(), 0);"
        ],
        "code": [
          "{",
          "    let mut set_a = LookSet::full();",
          "    let set_b = LookSet::empty();",
          "    set_a.set_intersect(set_b);",
          "    assert_eq!(set_a.bits, 0);",
          "    assert!(set_a.is_empty());",
          "    assert_eq!(set_a.len(), 0);",
          "    assert!(!set_a.contains_anchor());",
          "    assert!(!set_a.contains_word());",
          "    assert!(set_a.contains_word_unicode());",
          "    assert!(set_a.contains_word_ascii());",
          "    assert_eq!(set_a.iter().count(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set_a = LookSet::empty();",
          "    let set_b = LookSet::full();",
          "    set_a.set_intersect(set_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set_a.len(), 0);",
          "    assert!(set_a.is_empty());",
          "    assert!(!set_a.contains_anchor());",
          "    assert!(!set_a.contains_word());",
          "    assert!(set_a.contains_anchor_haystack());",
          "    assert!(!set_a.contains_word_unicode());",
          "    assert!(!set_a.contains_word_ascii());",
          "    assert_eq!(set_a.bits, 0);"
        ],
        "code": [
          "{",
          "    let mut set_a = LookSet::empty();",
          "    let set_b = LookSet::full();",
          "    set_a.set_intersect(set_b);",
          "    assert_eq!(set_a.len(), 0);",
          "    assert!(set_a.is_empty());",
          "    assert!(!set_a.contains_anchor());",
          "    assert!(!set_a.contains_word());",
          "    assert!(set_a.contains_anchor_haystack());",
          "    assert!(!set_a.contains_word_unicode());",
          "    assert!(!set_a.contains_word_ascii());",
          "    assert_eq!(set_a.bits, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set_a = LookSet { bits: 0b1100 };",
          "    let set_b = LookSet { bits: 0b1010 };",
          "    set_a.set_intersect(set_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set_a.bits, 0b1000);"
        ],
        "code": [
          "{",
          "    let mut set_a = LookSet { bits: 0b1100 };",
          "    let set_b = LookSet { bits: 0b1010 };",
          "    set_a.set_intersect(set_b);",
          "    assert_eq!(set_a.bits, 0b1000);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set_a = LookSet { bits: 0b0001 };",
          "    let set_b = LookSet { bits: 0b1110 };",
          "    set_a.set_intersect(set_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set_a.bits, 0b0000);"
        ],
        "code": [
          "{",
          "    let mut set_a = LookSet { bits: 0b0001 };",
          "    let set_b = LookSet { bits: 0b1110 };",
          "    set_a.set_intersect(set_b);",
          "    assert_eq!(set_a.bits, 0b0000);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set_a = LookSet { bits: 0b1111 };",
          "    let set_b = LookSet { bits: 0b1111 };",
          "    set_a.set_intersect(set_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set_a.bits, 0b1111);",
          "    set_a.set_intersect(LookSet { bits: 0b0000 });",
          "    assert_eq!(set_a.bits, 0b0000);",
          "    set_a.set_intersect(LookSet { bits: 0b1010 });",
          "    assert_eq!(set_a.bits, 0b0000);",
          "    set_a.bits = 0b1111;",
          "    set_a.set_intersect(LookSet { bits: 0b1110 });",
          "    assert_eq!(set_a.bits, 0b1110);",
          "    set_a.set_intersect(LookSet { bits: 0b0001 });",
          "    assert_eq!(set_a.bits, 0b0000);",
          "    set_a.bits = 0b1100;",
          "    set_a.set_intersect(LookSet { bits: 0b1100 });",
          "    assert_eq!(set_a.bits, 0b1100);",
          "    set_a.set_intersect(LookSet { bits: 0b1111 });",
          "    assert_eq!(set_a.bits, 0b1100);"
        ],
        "code": [
          "{",
          "    let mut set_a = LookSet { bits: 0b1111 };",
          "    let set_b = LookSet { bits: 0b1111 };",
          "    set_a.set_intersect(set_b);",
          "    assert_eq!(set_a.bits, 0b1111);",
          "    set_a.set_intersect(LookSet { bits: 0b0000 });",
          "    assert_eq!(set_a.bits, 0b0000);",
          "    set_a.set_intersect(LookSet { bits: 0b1010 });",
          "    assert_eq!(set_a.bits, 0b0000);",
          "    set_a.bits = 0b1111;",
          "    set_a.set_intersect(LookSet { bits: 0b1110 });",
          "    assert_eq!(set_a.bits, 0b1110);",
          "    set_a.set_intersect(LookSet { bits: 0b0001 });",
          "    assert_eq!(set_a.bits, 0b0000);",
          "    set_a.bits = 0b1100;",
          "    set_a.set_intersect(LookSet { bits: 0b1100 });",
          "    assert_eq!(set_a.bits, 0b1100);",
          "    set_a.set_intersect(LookSet { bits: 0b1111 });",
          "    assert_eq!(set_a.bits, 0b1100);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set_a = LookSet { bits: 0b1010 };",
          "    let set_b = LookSet { bits: 0b0101 }; ",
          "    set_a.set_intersect(set_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set_a.bits, 0b0000);"
        ],
        "code": [
          "{",
          "    let mut set_a = LookSet { bits: 0b1010 };",
          "    let set_b = LookSet { bits: 0b0101 }; ",
          "    set_a.set_intersect(set_b);",
          "    assert_eq!(set_a.bits, 0b0000);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]