[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pid = PatternID(1);",
          "    let anchored = Anchored::Pattern(pid);",
          "    let result = anchored.pattern();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(pid));"
        ],
        "code": [
          "{",
          "    let pid = PatternID(1);",
          "    let anchored = Anchored::Pattern(pid);",
          "    let result = anchored.pattern();",
          "    assert_eq!(result, Some(pid));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pid = PatternID(42);",
          "    let anchored = Anchored::Pattern(pid);",
          "    let result = anchored.pattern();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(pid));"
        ],
        "code": [
          "{",
          "    let pid = PatternID(42);",
          "    let anchored = Anchored::Pattern(pid);",
          "    let result = anchored.pattern();",
          "    assert_eq!(result, Some(pid));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pid = PatternID(999);",
          "    let anchored = Anchored::Pattern(pid);",
          "    let result = anchored.pattern();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(pid));"
        ],
        "code": [
          "{",
          "    let pid = PatternID(999);",
          "    let anchored = Anchored::Pattern(pid);",
          "    let result = anchored.pattern();",
          "    assert_eq!(result, Some(pid));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]