[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_classes = ByteClasses::empty();",
          "    let unit = Unit(UnitKind::U8(0));",
          "    let _ = byte_classes.get_by_unit(unit);",
          "}"
        ],
        "oracle": [
          "    let mut byte_classes = ByteClasses::empty();",
          "    let unit = Unit(UnitKind::U8(0));",
          "    let result = byte_classes.get_by_unit(unit);",
          "    assert_eq!(result, 0);",
          "    let unit = Unit(UnitKind::U8(255));",
          "    let result = byte_classes.get_by_unit(unit);",
          "    assert_eq!(result, 0);",
          "    let unit = Unit(UnitKind::U8(128));",
          "    let result = byte_classes.get_by_unit(unit);",
          "    assert_eq!(result, 0);",
          "    let unit = Unit(UnitKind::U8(1));",
          "    let result = byte_classes.get_by_unit(unit);",
          "    assert_eq!(result, 0);"
        ],
        "code": [
          "{",
          "    let mut byte_classes = ByteClasses::empty();",
          "    let unit = Unit(UnitKind::U8(0));",
          "    let _ = byte_classes.get_by_unit(unit);",
          "    let mut byte_classes = ByteClasses::empty();",
          "    let unit = Unit(UnitKind::U8(0));",
          "    let result = byte_classes.get_by_unit(unit);",
          "    assert_eq!(result, 0);",
          "    let unit = Unit(UnitKind::U8(255));",
          "    let result = byte_classes.get_by_unit(unit);",
          "    assert_eq!(result, 0);",
          "    let unit = Unit(UnitKind::U8(128));",
          "    let result = byte_classes.get_by_unit(unit);",
          "    assert_eq!(result, 0);",
          "    let unit = Unit(UnitKind::U8(1));",
          "    let result = byte_classes.get_by_unit(unit);",
          "    assert_eq!(result, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_classes = ByteClasses::empty();",
          "    let unit = Unit(UnitKind::U8(255));",
          "    let _ = byte_classes.get_by_unit(unit);",
          "}"
        ],
        "oracle": [
          "    let mut byte_classes = ByteClasses::empty();",
          "    let unit_u8 = Unit(UnitKind::U8(0));",
          "    let expected_class_u8_0 = usize::from(byte_classes.get(0));",
          "    let result_u8_0 = byte_classes.get_by_unit(unit_u8);",
          "    assert_eq!(result_u8_0, expected_class_u8_0);",
          "    ",
          "    let unit_u8 = Unit(UnitKind::U8(127));",
          "    let expected_class_u8_127 = usize::from(byte_classes.get(127));",
          "    let result_u8_127 = byte_classes.get_by_unit(unit_u8);",
          "    assert_eq!(result_u8_127, expected_class_u8_127);",
          "    ",
          "    let unit_u8 = Unit(UnitKind::U8(255));",
          "    let expected_class_u8_255 = usize::from(byte_classes.get(255));",
          "    let result_u8_255 = byte_classes.get_by_unit(unit_u8);",
          "    assert_eq!(result_u8_255, expected_class_u8_255);",
          "    ",
          "    let unit_eoi = Unit(UnitKind::EOI(10));",
          "    let expected_class_eoi_10 = 10;",
          "    let result_eoi_10 = byte_classes.get_by_unit(unit_eoi);",
          "    assert_eq!(result_eoi_10, expected_class_eoi_10);"
        ],
        "code": [
          "{",
          "    let mut byte_classes = ByteClasses::empty();",
          "    let unit = Unit(UnitKind::U8(255));",
          "    let _ = byte_classes.get_by_unit(unit);",
          "    let mut byte_classes = ByteClasses::empty();",
          "    let unit_u8 = Unit(UnitKind::U8(0));",
          "    let expected_class_u8_0 = usize::from(byte_classes.get(0));",
          "    let result_u8_0 = byte_classes.get_by_unit(unit_u8);",
          "    assert_eq!(result_u8_0, expected_class_u8_0);",
          "    ",
          "    let unit_u8 = Unit(UnitKind::U8(127));",
          "    let expected_class_u8_127 = usize::from(byte_classes.get(127));",
          "    let result_u8_127 = byte_classes.get_by_unit(unit_u8);",
          "    assert_eq!(result_u8_127, expected_class_u8_127);",
          "    ",
          "    let unit_u8 = Unit(UnitKind::U8(255));",
          "    let expected_class_u8_255 = usize::from(byte_classes.get(255));",
          "    let result_u8_255 = byte_classes.get_by_unit(unit_u8);",
          "    assert_eq!(result_u8_255, expected_class_u8_255);",
          "    ",
          "    let unit_eoi = Unit(UnitKind::EOI(10));",
          "    let expected_class_eoi_10 = 10;",
          "    let result_eoi_10 = byte_classes.get_by_unit(unit_eoi);",
          "    assert_eq!(result_eoi_10, expected_class_eoi_10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_classes = ByteClasses::empty();",
          "    let unit = Unit(UnitKind::EOI(0));",
          "    let _ = byte_classes.get_by_unit(unit);",
          "}"
        ],
        "oracle": [
          "    let mut byte_classes = ByteClasses::empty();",
          "    let unit = Unit(UnitKind::U8(0));",
          "    assert_eq!(byte_classes.get_by_unit(unit), 0);",
          "    let unit = Unit(UnitKind::U8(255));",
          "    assert_eq!(byte_classes.get_by_unit(unit), 255);",
          "    let unit = Unit(UnitKind::U8(128));",
          "    byte_classes.set(128, 1);",
          "    assert_eq!(byte_classes.get_by_unit(unit), 1);",
          "    let unit = Unit(UnitKind::U8(64));",
          "    byte_classes.set(64, 2);",
          "    assert_eq!(byte_classes.get_by_unit(unit), 2);"
        ],
        "code": [
          "{",
          "    let mut byte_classes = ByteClasses::empty();",
          "    let unit = Unit(UnitKind::EOI(0));",
          "    let _ = byte_classes.get_by_unit(unit);",
          "    let mut byte_classes = ByteClasses::empty();",
          "    let unit = Unit(UnitKind::U8(0));",
          "    assert_eq!(byte_classes.get_by_unit(unit), 0);",
          "    let unit = Unit(UnitKind::U8(255));",
          "    assert_eq!(byte_classes.get_by_unit(unit), 255);",
          "    let unit = Unit(UnitKind::U8(128));",
          "    byte_classes.set(128, 1);",
          "    assert_eq!(byte_classes.get_by_unit(unit), 1);",
          "    let unit = Unit(UnitKind::U8(64));",
          "    byte_classes.set(64, 2);",
          "    assert_eq!(byte_classes.get_by_unit(unit), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_classes = ByteClasses::empty();",
          "    let unit = Unit(UnitKind::EOI(255));",
          "    let _ = byte_classes.get_by_unit(unit);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_classes.get_by_unit(Unit(UnitKind::U8(0))), expected_value_for_U8_0);",
          "    assert_eq!(byte_classes.get_by_unit(Unit(UnitKind::U8(255))), expected_value_for_U8_255);",
          "    assert_eq!(byte_classes.get_by_unit(Unit(UnitKind::U8(128))), expected_value_for_U8_128);",
          "    assert_eq!(byte_classes.get_by_unit(Unit(UnitKind::EOI(255))), 255);"
        ],
        "code": [
          "{",
          "    let mut byte_classes = ByteClasses::empty();",
          "    let unit = Unit(UnitKind::EOI(255));",
          "    let _ = byte_classes.get_by_unit(unit);",
          "    assert_eq!(byte_classes.get_by_unit(Unit(UnitKind::U8(0))), expected_value_for_U8_0);",
          "    assert_eq!(byte_classes.get_by_unit(Unit(UnitKind::U8(255))), expected_value_for_U8_255);",
          "    assert_eq!(byte_classes.get_by_unit(Unit(UnitKind::U8(128))), expected_value_for_U8_128);",
          "    assert_eq!(byte_classes.get_by_unit(Unit(UnitKind::EOI(255))), 255);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_classes = ByteClasses::empty();",
          "    let unit = Unit(UnitKind::U8(128));",
          "    let _ = byte_classes.get_by_unit(unit);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_classes.get_by_unit(Unit(UnitKind::U8(128))), 0);",
          "    assert_eq!(byte_classes.get_by_unit(Unit(UnitKind::U8(0))), 0);",
          "    assert_eq!(byte_classes.get_by_unit(Unit(UnitKind::U8(255))), 0);",
          "    assert_ne!(byte_classes.get_by_unit(Unit(UnitKind::U8(128))), byte_classes.get_by_unit(Unit(UnitKind::U8(127)));",
          "    assert_ne!(byte_classes.get_by_unit(Unit(UnitKind::U8(128))), byte_classes.get_by_unit(Unit(UnitKind::U8(129)));"
        ],
        "code": [
          "{",
          "    let mut byte_classes = ByteClasses::empty();",
          "    let unit = Unit(UnitKind::U8(128));",
          "    let _ = byte_classes.get_by_unit(unit);",
          "    assert_eq!(byte_classes.get_by_unit(Unit(UnitKind::U8(128))), 0);",
          "    assert_eq!(byte_classes.get_by_unit(Unit(UnitKind::U8(0))), 0);",
          "    assert_eq!(byte_classes.get_by_unit(Unit(UnitKind::U8(255))), 0);",
          "    assert_ne!(byte_classes.get_by_unit(Unit(UnitKind::U8(128))), byte_classes.get_by_unit(Unit(UnitKind::U8(127)));",
          "    assert_ne!(byte_classes.get_by_unit(Unit(UnitKind::U8(128))), byte_classes.get_by_unit(Unit(UnitKind::U8(129)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_classes = ByteClasses::empty();",
          "    let unit = Unit(UnitKind::EOI(128));",
          "    let _ = byte_classes.get_by_unit(unit);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_classes.get_by_unit(Unit(UnitKind::U8(0))), 0);",
          "    assert_eq!(byte_classes.get_by_unit(Unit(UnitKind::U8(127))), 127);",
          "    assert_eq!(byte_classes.get_by_unit(Unit(UnitKind::U8(255))), 255);",
          "    assert_eq!(byte_classes.get_by_unit(Unit(UnitKind::U8(1))), 1);",
          "    assert_eq!(byte_classes.get_by_unit(Unit(UnitKind::U8(128))), 128);",
          "    assert_eq!(byte_classes.get_by_unit(Unit(UnitKind::EOI(128))), 128);",
          "    assert_eq!(byte_classes.get_by_unit(Unit(UnitKind::U8(128))), 128);"
        ],
        "code": [
          "{",
          "    let mut byte_classes = ByteClasses::empty();",
          "    let unit = Unit(UnitKind::EOI(128));",
          "    let _ = byte_classes.get_by_unit(unit);",
          "    assert_eq!(byte_classes.get_by_unit(Unit(UnitKind::U8(0))), 0);",
          "    assert_eq!(byte_classes.get_by_unit(Unit(UnitKind::U8(127))), 127);",
          "    assert_eq!(byte_classes.get_by_unit(Unit(UnitKind::U8(255))), 255);",
          "    assert_eq!(byte_classes.get_by_unit(Unit(UnitKind::U8(1))), 1);",
          "    assert_eq!(byte_classes.get_by_unit(Unit(UnitKind::U8(128))), 128);",
          "    assert_eq!(byte_classes.get_by_unit(Unit(UnitKind::EOI(128))), 128);",
          "    assert_eq!(byte_classes.get_by_unit(Unit(UnitKind::U8(128))), 128);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]