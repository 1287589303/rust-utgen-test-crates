[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"\\\\x1g\"; ",
          "    let position = Position { offset: 0, line: 1, column: 1 };",
          "    let span_start = position;",
          "    let span_end = Position { offset: 3, line: 1, column: 4 };",
          "    ",
          "    let parser = Parser {",
          "        pos: Cell::new(position),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 100,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern,",
          "    };",
          "",
          "    parser_i.parse_hex_digits(HexLiteralKind::X);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser_i.parse_hex_digits(HexLiteralKind::X), Err(parser_i.error(parser_i.span_char(), ast::ErrorKind::EscapeHexInvalidDigit)));"
        ],
        "code": [
          "{",
          "    let pattern = \"\\\\x1g\"; ",
          "    let position = Position { offset: 0, line: 1, column: 1 };",
          "    let span_start = position;",
          "    let span_end = Position { offset: 3, line: 1, column: 4 };",
          "    ",
          "    let parser = Parser {",
          "        pos: Cell::new(position),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 100,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern,",
          "    };",
          "",
          "    parser_i.parse_hex_digits(HexLiteralKind::X);",
          "    assert_eq!(parser_i.parse_hex_digits(HexLiteralKind::X), Err(parser_i.error(parser_i.span_char(), ast::ErrorKind::EscapeHexInvalidDigit)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"\\\\u1g2\"; ",
          "    let position = Position { offset: 0, line: 1, column: 1 };",
          "    let span_start = position;",
          "    let span_end = Position { offset: 4, line: 1, column: 5 };",
          "    ",
          "    let parser = Parser {",
          "        pos: Cell::new(position),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 100,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern,",
          "    };",
          "",
          "    parser_i.parse_hex_digits(HexLiteralKind::UnicodeShort);",
          "}"
        ],
        "oracle": [
          "    let result = parser_i.parse_hex_digits(HexLiteralKind::UnicodeShort);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind, ast::ErrorKind::EscapeHexInvalidDigit);"
        ],
        "code": [
          "{",
          "    let pattern = \"\\\\u1g2\"; ",
          "    let position = Position { offset: 0, line: 1, column: 1 };",
          "    let span_start = position;",
          "    let span_end = Position { offset: 4, line: 1, column: 5 };",
          "    ",
          "    let parser = Parser {",
          "        pos: Cell::new(position),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 100,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern,",
          "    };",
          "",
          "    parser_i.parse_hex_digits(HexLiteralKind::UnicodeShort);",
          "    let result = parser_i.parse_hex_digits(HexLiteralKind::UnicodeShort);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind, ast::ErrorKind::EscapeHexInvalidDigit);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"\\\\U1g2\"; ",
          "    let position = Position { offset: 0, line: 1, column: 1 };",
          "    let span_start = position;",
          "    let span_end = Position { offset: 4, line: 1, column: 5 };",
          "    ",
          "    let parser = Parser {",
          "        pos: Cell::new(position),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 100,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern,",
          "    };",
          "",
          "    parser_i.parse_hex_digits(HexLiteralKind::UnicodeLong);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser_i.parse_hex_digits(HexLiteralKind::UnicodeLong), Err(parser_i.error(parser_i.span_char(), ast::ErrorKind::EscapeHexInvalidDigit)));"
        ],
        "code": [
          "{",
          "    let pattern = \"\\\\U1g2\"; ",
          "    let position = Position { offset: 0, line: 1, column: 1 };",
          "    let span_start = position;",
          "    let span_end = Position { offset: 4, line: 1, column: 5 };",
          "    ",
          "    let parser = Parser {",
          "        pos: Cell::new(position),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 100,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern,",
          "    };",
          "",
          "    parser_i.parse_hex_digits(HexLiteralKind::UnicodeLong);",
          "    assert_eq!(parser_i.parse_hex_digits(HexLiteralKind::UnicodeLong), Err(parser_i.error(parser_i.span_char(), ast::ErrorKind::EscapeHexInvalidDigit)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]