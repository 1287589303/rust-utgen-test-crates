[
  {
    "uses": [
      "use crate::dfa::automaton::Automaton;",
      "use crate::dfa::dense::ByteClasses;",
      "use crate::dfa::dense::DFA;",
      "use crate::dfa::dense::StateID;",
      "use crate::dfa::dense::Flags;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::dfa::dense::Flags;",
          "    use crate::{dfa::automaton::Automaton, dfa::dense::DFA, dfa::dense::StateID, dfa::dense::ByteClasses};",
          "    ",
          "    let flags = Flags {",
          "        has_empty: false,",
          "        is_utf8: false,",
          "        is_always_start_anchored: false,",
          "    };",
          "    ",
          "    let transitions = Transitions {",
          "        sparse: vec![],",
          "        classes: ByteClasses::default(),",
          "        state_len: 0,",
          "        pattern_len: 0,",
          "    };",
          "    ",
          "    let start_table = StartTable {",
          "        table: vec![],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap::default(),",
          "        stride: 0,",
          "        pattern_len: None,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    ",
          "    let dfa = DFA {",
          "        tt: transitions,",
          "        st: start_table,",
          "        special: Special {",
          "            max: StateID(0),",
          "            quit_id: StateID(0),",
          "            min_match: StateID(0),",
          "            max_match: StateID(0),",
          "            min_accel: StateID(0),",
          "            max_accel: StateID(0),",
          "            min_start: StateID(0),",
          "            max_start: StateID(0),",
          "        },",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags,",
          "    };",
          "    ",
          "    let _ = std::fmt::Debug::fmt(&dfa, &mut std::fmt::Formatter::new());",
          "}"
        ],
        "oracle": [
          "    writeln!(f, \"sparse::DFA(\")? is Ok",
          "    state in self.tt.states() is false",
          "    writeln!(f, \"\")? is Ok",
          "    (i, (start_id, anchored, sty)) in self.st.iter().enumerate() is false",
          "    writeln!(f, \"state length: {:?}\", self.tt.state_len)? is Ok",
          "    writeln!(f, \"pattern length: {:?}\", self.pattern_len())? is Ok",
          "    writeln!(f, \"flags: {:?}\", self.flags)? is Ok",
          "    writeln!(f, \")\")? is Ok",
          "    Ok(()) is returned"
        ],
        "code": [
          "{",
          "    use crate::dfa::dense::Flags;",
          "    use crate::{dfa::automaton::Automaton, dfa::dense::DFA, dfa::dense::StateID, dfa::dense::ByteClasses};",
          "    ",
          "    let flags = Flags {",
          "        has_empty: false,",
          "        is_utf8: false,",
          "        is_always_start_anchored: false,",
          "    };",
          "    ",
          "    let transitions = Transitions {",
          "        sparse: vec![],",
          "        classes: ByteClasses::default(),",
          "        state_len: 0,",
          "        pattern_len: 0,",
          "    };",
          "    ",
          "    let start_table = StartTable {",
          "        table: vec![],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap::default(),",
          "        stride: 0,",
          "        pattern_len: None,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    ",
          "    let dfa = DFA {",
          "        tt: transitions,",
          "        st: start_table,",
          "        special: Special {",
          "            max: StateID(0),",
          "            quit_id: StateID(0),",
          "            min_match: StateID(0),",
          "            max_match: StateID(0),",
          "            min_accel: StateID(0),",
          "            max_accel: StateID(0),",
          "            min_start: StateID(0),",
          "            max_start: StateID(0),",
          "        },",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags,",
          "    };",
          "    ",
          "    let _ = std::fmt::Debug::fmt(&dfa, &mut std::fmt::Formatter::new());",
          "    writeln!(f, \"sparse::DFA(\")? is Ok",
          "    state in self.tt.states() is false",
          "    writeln!(f, \"\")? is Ok",
          "    (i, (start_id, anchored, sty)) in self.st.iter().enumerate() is false",
          "    writeln!(f, \"state length: {:?}\", self.tt.state_len)? is Ok",
          "    writeln!(f, \"pattern length: {:?}\", self.pattern_len())? is Ok",
          "    writeln!(f, \"flags: {:?}\", self.flags)? is Ok",
          "    writeln!(f, \")\")? is Ok",
          "    Ok(()) is returned",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]