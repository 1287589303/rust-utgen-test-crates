[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let formatter = &mut fmt::Formatter::new();",
          "    let empty_transitions: Transitions<Vec<u8>> = Transitions {",
          "        sparse: vec![],",
          "        classes: ByteClasses::default(),",
          "        state_len: 1,",
          "        pattern_len: 0,",
          "    };",
          "    let empty_start_table: StartTable<Vec<u32>> = StartTable {",
          "        table: vec![0; 8],",
          "        kind: StartKind::NonWordByte,",
          "        start_map: StartByteMap::default(),",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let flags = Flags { has_empty: true, is_utf8: true, is_always_start_anchored: false };",
          "    let dfa = DFA {",
          "        tt: empty_transitions,",
          "        st: empty_start_table,",
          "        special: Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags,",
          "    };",
          "",
          "    let _ = dfa.fmt(formatter);",
          "}"
        ],
        "oracle": [
          "    writeln!(f, \"sparse::DFA(\")? == Ok(())",
          "    state in self.tt.states() == false",
          "    writeln!(f, \"\")? == Ok(())",
          "    (i, (start_id, anchored, sty)) in self.st.iter().enumerate() == true",
          "    i % self.st.stride == 0",
          "    writeln!(f, \"  {:?} => {:06?}\", sty, start_id.as_usize())? == Err(())"
        ],
        "code": [
          "{",
          "    let formatter = &mut fmt::Formatter::new();",
          "    let empty_transitions: Transitions<Vec<u8>> = Transitions {",
          "        sparse: vec![],",
          "        classes: ByteClasses::default(),",
          "        state_len: 1,",
          "        pattern_len: 0,",
          "    };",
          "    let empty_start_table: StartTable<Vec<u32>> = StartTable {",
          "        table: vec![0; 8],",
          "        kind: StartKind::NonWordByte,",
          "        start_map: StartByteMap::default(),",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let flags = Flags { has_empty: true, is_utf8: true, is_always_start_anchored: false };",
          "    let dfa = DFA {",
          "        tt: empty_transitions,",
          "        st: empty_start_table,",
          "        special: Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags,",
          "    };",
          "",
          "    let _ = dfa.fmt(formatter);",
          "    writeln!(f, \"sparse::DFA(\")? == Ok(())",
          "    state in self.tt.states() == false",
          "    writeln!(f, \"\")? == Ok(())",
          "    (i, (start_id, anchored, sty)) in self.st.iter().enumerate() == true",
          "    i % self.st.stride == 0",
          "    writeln!(f, \"  {:?} => {:06?}\", sty, start_id.as_usize())? == Err(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let formatter = &mut fmt::Formatter::new();",
          "    let transitions = Transitions {",
          "        sparse: vec![0; 1],",
          "        classes: ByteClasses::default(),",
          "        state_len: 1,",
          "        pattern_len: 0,",
          "    };",
          "    let start_table: StartTable<Vec<u32>> = StartTable {",
          "        table: vec![],",
          "        kind: StartKind::NonWordByte,",
          "        start_map: StartByteMap::default(),",
          "        stride: 0,",
          "        pattern_len: None,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let flags = Flags { has_empty: true, is_utf8: true, is_always_start_anchored: false };",
          "    let dfa = DFA {",
          "        tt: transitions,",
          "        st: start_table,",
          "        special: Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags,",
          "    };",
          "",
          "    let _ = dfa.fmt(formatter);",
          "}"
        ],
        "oracle": [
          "    assert!(writeln!(formatter, \"sparse::DFA(\").is_ok());",
          "    assert!(dfa.tt.states().is_empty());",
          "    assert!(writeln!(formatter, \"\").is_ok());",
          "    let mut iter = dfa.st.iter();",
          "    assert!(iter.next().is_some());",
          "    let (i, (start_id, anchored, sty)) = iter.next().unwrap();",
          "    assert!(i % dfa.st.stride == 0);",
          "    assert!(writeln!(formatter, \"  {:?} => {:06?}\", sty, start_id.as_usize()).is_err());"
        ],
        "code": [
          "{",
          "    let formatter = &mut fmt::Formatter::new();",
          "    let transitions = Transitions {",
          "        sparse: vec![0; 1],",
          "        classes: ByteClasses::default(),",
          "        state_len: 1,",
          "        pattern_len: 0,",
          "    };",
          "    let start_table: StartTable<Vec<u32>> = StartTable {",
          "        table: vec![],",
          "        kind: StartKind::NonWordByte,",
          "        start_map: StartByteMap::default(),",
          "        stride: 0,",
          "        pattern_len: None,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let flags = Flags { has_empty: true, is_utf8: true, is_always_start_anchored: false };",
          "    let dfa = DFA {",
          "        tt: transitions,",
          "        st: start_table,",
          "        special: Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags,",
          "    };",
          "",
          "    let _ = dfa.fmt(formatter);",
          "    assert!(writeln!(formatter, \"sparse::DFA(\").is_ok());",
          "    assert!(dfa.tt.states().is_empty());",
          "    assert!(writeln!(formatter, \"\").is_ok());",
          "    let mut iter = dfa.st.iter();",
          "    assert!(iter.next().is_some());",
          "    let (i, (start_id, anchored, sty)) = iter.next().unwrap();",
          "    assert!(i % dfa.st.stride == 0);",
          "    assert!(writeln!(formatter, \"  {:?} => {:06?}\", sty, start_id.as_usize()).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let formatter = &mut fmt::Formatter::new();",
          "    let transitions = Transitions {",
          "        sparse: vec![0; 4],",
          "        classes: ByteClasses::default(),",
          "        state_len: 1,",
          "        pattern_len: 0,",
          "    };",
          "    let start_table: StartTable<Vec<u32>> = StartTable {",
          "        table: vec![1u32; 8],",
          "        kind: StartKind::NonWordByte,",
          "        start_map: StartByteMap::default(),",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let flags = Flags { has_empty: true, is_utf8: false, is_always_start_anchored: false };",
          "    let dfa = DFA {",
          "        tt: transitions,",
          "        st: start_table,",
          "        special: Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags,",
          "    };",
          "",
          "    let _ = dfa.fmt(formatter);",
          "}"
        ],
        "oracle": [
          "    assert!(writeln!(formatter, \"sparse::DFA(\").is_ok());",
          "    assert_eq!(dfa.tt.states().count(), 0); // precondition for line 1077",
          "    assert!(writeln!(formatter, \"\").is_ok());",
          "    let (i, (start_id, anchored, sty)) = dfa.st.iter().enumerate().next().unwrap(); // precondition for line 1082",
          "    assert_eq!(i % dfa.st.stride, 0); // precondition for line 1083",
          "    assert!(writeln!(formatter, \"  {:?} => {:06?}\", sty, start_id.as_usize()).is_err()); // precondition for line 1094"
        ],
        "code": [
          "{",
          "    let formatter = &mut fmt::Formatter::new();",
          "    let transitions = Transitions {",
          "        sparse: vec![0; 4],",
          "        classes: ByteClasses::default(),",
          "        state_len: 1,",
          "        pattern_len: 0,",
          "    };",
          "    let start_table: StartTable<Vec<u32>> = StartTable {",
          "        table: vec![1u32; 8],",
          "        kind: StartKind::NonWordByte,",
          "        start_map: StartByteMap::default(),",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let flags = Flags { has_empty: true, is_utf8: false, is_always_start_anchored: false };",
          "    let dfa = DFA {",
          "        tt: transitions,",
          "        st: start_table,",
          "        special: Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags,",
          "    };",
          "",
          "    let _ = dfa.fmt(formatter);",
          "    assert!(writeln!(formatter, \"sparse::DFA(\").is_ok());",
          "    assert_eq!(dfa.tt.states().count(), 0); // precondition for line 1077",
          "    assert!(writeln!(formatter, \"\").is_ok());",
          "    let (i, (start_id, anchored, sty)) = dfa.st.iter().enumerate().next().unwrap(); // precondition for line 1082",
          "    assert_eq!(i % dfa.st.stride, 0); // precondition for line 1083",
          "    assert!(writeln!(formatter, \"  {:?} => {:06?}\", sty, start_id.as_usize()).is_err()); // precondition for line 1094",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]