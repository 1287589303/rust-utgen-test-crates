[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mapper = IndexMapper { stride2: 0 };",
          "    let state_id = mapper.to_state_id(0);",
          "    ",
          "    let mapper_1 = IndexMapper { stride2: 1 };",
          "    let state_id_1 = mapper_1.to_state_id(1);",
          "    ",
          "    let mapper_63 = IndexMapper { stride2: 63 };",
          "    let state_id_63 = mapper_63.to_state_id(1);",
          "    ",
          "    let mapper_large = IndexMapper { stride2: 63 };",
          "    let state_id_large = mapper_large.to_state_id((u64::MAX >> 1) as usize);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state_id, StateID::new_unchecked(0 << 0));",
          "    assert_eq!(state_id_1, StateID::new_unchecked(1 << 1));",
          "    assert_eq!(state_id_63, StateID::new_unchecked(1 << 63));",
          "    assert_eq!(state_id_large, StateID::new_unchecked((u64::MAX >> 1) as usize << 63));"
        ],
        "code": [
          "{",
          "    let mapper = IndexMapper { stride2: 0 };",
          "    let state_id = mapper.to_state_id(0);",
          "    ",
          "    let mapper_1 = IndexMapper { stride2: 1 };",
          "    let state_id_1 = mapper_1.to_state_id(1);",
          "    ",
          "    let mapper_63 = IndexMapper { stride2: 63 };",
          "    let state_id_63 = mapper_63.to_state_id(1);",
          "    ",
          "    let mapper_large = IndexMapper { stride2: 63 };",
          "    let state_id_large = mapper_large.to_state_id((u64::MAX >> 1) as usize);",
          "    assert_eq!(state_id, StateID::new_unchecked(0 << 0));",
          "    assert_eq!(state_id_1, StateID::new_unchecked(1 << 1));",
          "    assert_eq!(state_id_63, StateID::new_unchecked(1 << 63));",
          "    assert_eq!(state_id_large, StateID::new_unchecked((u64::MAX >> 1) as usize << 63));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mapper = IndexMapper { stride2: 0 };",
          "    let _state_id = mapper.to_state_id(u64::MAX as usize);",
          "}"
        ],
        "oracle": [
          "    let mapper = IndexMapper { stride2: 0 };",
          "    let state_id = mapper.to_state_id(0);",
          "    let state_id = mapper.to_state_id(1);",
          "    let state_id = mapper.to_state_id(usize::MAX);",
          "    let state_id = mapper.to_state_id(u32::MAX as usize);",
          "    let state_id = mapper.to_state_id(100);",
          "    let state_id = mapper.to_state_id(10);",
          "    let state_id = mapper.to_state_id(u16::MAX as usize);",
          "    let state_id = mapper.to_state_id(2);",
          "    let state_id = mapper.to_state_id(3);",
          "    let state_id = mapper.to_state_id(4);"
        ],
        "code": [
          "{",
          "    let mapper = IndexMapper { stride2: 0 };",
          "    let _state_id = mapper.to_state_id(u64::MAX as usize);",
          "    let mapper = IndexMapper { stride2: 0 };",
          "    let state_id = mapper.to_state_id(0);",
          "    let state_id = mapper.to_state_id(1);",
          "    let state_id = mapper.to_state_id(usize::MAX);",
          "    let state_id = mapper.to_state_id(u32::MAX as usize);",
          "    let state_id = mapper.to_state_id(100);",
          "    let state_id = mapper.to_state_id(10);",
          "    let state_id = mapper.to_state_id(u16::MAX as usize);",
          "    let state_id = mapper.to_state_id(2);",
          "    let state_id = mapper.to_state_id(3);",
          "    let state_id = mapper.to_state_id(4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mapper_3 = IndexMapper { stride2: 3 };",
          "    let state_id_3 = mapper_3.to_state_id(1);",
          "    ",
          "    let mapper_5 = IndexMapper { stride2: 5 };",
          "    let state_id_5 = mapper_5.to_state_id(2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state_id_3, StateID::new_unchecked(1 << 3));",
          "    assert_eq!(state_id_5, StateID::new_unchecked(2 << 5));"
        ],
        "code": [
          "{",
          "    let mapper_3 = IndexMapper { stride2: 3 };",
          "    let state_id_3 = mapper_3.to_state_id(1);",
          "    ",
          "    let mapper_5 = IndexMapper { stride2: 5 };",
          "    let state_id_5 = mapper_5.to_state_id(2);",
          "    assert_eq!(state_id_3, StateID::new_unchecked(1 << 3));",
          "    assert_eq!(state_id_5, StateID::new_unchecked(2 << 5));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]