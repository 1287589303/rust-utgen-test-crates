[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slots = Slots(0b11111111111111111111111111111111);",
          "    let result = slots.remove(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Slots(0b11111111111111111111111111111110));"
        ],
        "code": [
          "{",
          "    let slots = Slots(0b11111111111111111111111111111111);",
          "    let result = slots.remove(0);",
          "    assert_eq!(result, Slots(0b11111111111111111111111111111110));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slots = Slots(0b11111111111111111111111111111111);",
          "    let result = slots.remove(15);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Slots(0b11111111111111111111111111111101));"
        ],
        "code": [
          "{",
          "    let slots = Slots(0b11111111111111111111111111111111);",
          "    let result = slots.remove(15);",
          "    assert_eq!(result, Slots(0b11111111111111111111111111111101));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slots = Slots(0b11111111111111111111111111111111);",
          "    let result = slots.remove(31);",
          "}"
        ],
        "oracle": [
          "    let expected_result = Slots(0b11111111111111111111111111111110);",
          "    assert_eq!(result, expected_result);"
        ],
        "code": [
          "{",
          "    let slots = Slots(0b11111111111111111111111111111111);",
          "    let result = slots.remove(31);",
          "    let expected_result = Slots(0b11111111111111111111111111111110);",
          "    assert_eq!(result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slots = Slots(0b11111111111111111111111111111111);",
          "    let result = slots.remove(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Slots(0b11111111111111111111111111111110));",
          "    assert_eq!(result.is_empty(), false);",
          "    let result_1 = slots.remove(1);",
          "    assert_eq!(result_1, Slots(0b11111111111111111111111111111101));",
          "    let result_2 = slots.remove(31);",
          "    assert_eq!(result_2, Slots(0b01111111111111111111111111111111));",
          "    let result_3 = slots.remove(30);",
          "    assert_eq!(result_3, Slots(0b10111111111111111111111111111111));",
          "    assert!(std::panic::catch_unwind(|| { slots.remove(Slots::LIMIT); }).is_err());"
        ],
        "code": [
          "{",
          "    let slots = Slots(0b11111111111111111111111111111111);",
          "    let result = slots.remove(0);",
          "    assert_eq!(result, Slots(0b11111111111111111111111111111110));",
          "    assert_eq!(result.is_empty(), false);",
          "    let result_1 = slots.remove(1);",
          "    assert_eq!(result_1, Slots(0b11111111111111111111111111111101));",
          "    let result_2 = slots.remove(31);",
          "    assert_eq!(result_2, Slots(0b01111111111111111111111111111111));",
          "    let result_3 = slots.remove(30);",
          "    assert_eq!(result_3, Slots(0b10111111111111111111111111111111));",
          "    assert!(std::panic::catch_unwind(|| { slots.remove(Slots::LIMIT); }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slots = Slots(0b11111111111111111111111111111111);",
          "    let result = slots.remove(31);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Slots(0b11111111111111111111111111111110));",
          "    assert!(result.is_empty() == false);",
          "    assert!(result.iter().count() == 31);",
          "    assert!(result.0 == 0b11111111111111111111111111111110);"
        ],
        "code": [
          "{",
          "    let slots = Slots(0b11111111111111111111111111111111);",
          "    let result = slots.remove(31);",
          "    assert_eq!(result, Slots(0b11111111111111111111111111111110));",
          "    assert!(result.is_empty() == false);",
          "    assert!(result.iter().count() == 31);",
          "    assert!(result.0 == 0b11111111111111111111111111111110);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]