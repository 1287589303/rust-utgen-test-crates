[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pos1 = Position { offset: 5, line: 1, column: 1 };",
          "    let pos2 = Position { offset: 5, line: 2, column: 2 };",
          "    let _result = pos1.cmp(&pos2);",
          "}"
        ],
        "oracle": [
          "    _result should equal Ordering::Equal;",
          "    let pos1 = Position { offset: 3, line: 1, column: 1 };",
          "    let pos2 = Position { offset: 5, line: 2, column: 1 };",
          "    _result should equal Ordering::Less;",
          "    let pos1 = Position { offset: 7, line: 1, column: 1 };",
          "    let pos2 = Position { offset: 5, line: 2, column: 1 };",
          "    _result should equal Ordering::Greater;",
          "    let pos1 = Position { offset: 0, line: 1, column: 1 };",
          "    let pos2 = Position { offset: 0, line: 2, column: 1 };",
          "    _result should equal Ordering::Equal;",
          "    let pos1 = Position { offset: 10, line: 1, column: 1 };",
          "    let pos2 = Position { offset: 10, line: 1, column: 2 };",
          "    _result should equal Ordering::Equal;"
        ],
        "code": [
          "{",
          "    let pos1 = Position { offset: 5, line: 1, column: 1 };",
          "    let pos2 = Position { offset: 5, line: 2, column: 2 };",
          "    let _result = pos1.cmp(&pos2);",
          "    _result should equal Ordering::Equal;",
          "    let pos1 = Position { offset: 3, line: 1, column: 1 };",
          "    let pos2 = Position { offset: 5, line: 2, column: 1 };",
          "    _result should equal Ordering::Less;",
          "    let pos1 = Position { offset: 7, line: 1, column: 1 };",
          "    let pos2 = Position { offset: 5, line: 2, column: 1 };",
          "    _result should equal Ordering::Greater;",
          "    let pos1 = Position { offset: 0, line: 1, column: 1 };",
          "    let pos2 = Position { offset: 0, line: 2, column: 1 };",
          "    _result should equal Ordering::Equal;",
          "    let pos1 = Position { offset: 10, line: 1, column: 1 };",
          "    let pos2 = Position { offset: 10, line: 1, column: 2 };",
          "    _result should equal Ordering::Equal;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pos1 = Position { offset: 3, line: 1, column: 1 };",
          "    let pos2 = Position { offset: 5, line: 2, column: 2 };",
          "    let _result = pos1.cmp(&pos2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pos1.cmp(&pos2), Ordering::Less);",
          "    let pos3 = Position { offset: 5, line: 2, column: 2 };",
          "    assert_eq!(pos3.cmp(&pos2), Ordering::Equal);",
          "    let pos4 = Position { offset: 1, line: 0, column: 0 };",
          "    assert_eq!(pos4.cmp(&pos1), Ordering::Less);",
          "    let pos5 = Position { offset: 10, line: 3, column: 3 };",
          "    assert_eq!(pos5.cmp(&pos1), Ordering::Greater);",
          "    let pos6 = Position { offset: 3, line: 1, column: 2 };",
          "    assert!(pos1.cmp(&pos6) == Ordering::Less || pos1.cmp(&pos6) == Ordering::Equal);"
        ],
        "code": [
          "{",
          "    let pos1 = Position { offset: 3, line: 1, column: 1 };",
          "    let pos2 = Position { offset: 5, line: 2, column: 2 };",
          "    let _result = pos1.cmp(&pos2);",
          "    assert_eq!(pos1.cmp(&pos2), Ordering::Less);",
          "    let pos3 = Position { offset: 5, line: 2, column: 2 };",
          "    assert_eq!(pos3.cmp(&pos2), Ordering::Equal);",
          "    let pos4 = Position { offset: 1, line: 0, column: 0 };",
          "    assert_eq!(pos4.cmp(&pos1), Ordering::Less);",
          "    let pos5 = Position { offset: 10, line: 3, column: 3 };",
          "    assert_eq!(pos5.cmp(&pos1), Ordering::Greater);",
          "    let pos6 = Position { offset: 3, line: 1, column: 2 };",
          "    assert!(pos1.cmp(&pos6) == Ordering::Less || pos1.cmp(&pos6) == Ordering::Equal);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pos1 = Position { offset: 7, line: 1, column: 1 };",
          "    let pos2 = Position { offset: 5, line: 2, column: 2 };",
          "    let _result = pos1.cmp(&pos2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pos1.cmp(&pos2), Ordering::Greater);",
          "    assert_eq!(pos2.cmp(&pos1), Ordering::Less);",
          "    assert_eq!(pos1.cmp(&pos1), Ordering::Equal);",
          "    assert_eq!(pos2.cmp(&pos2), Ordering::Equal);",
          "    let pos3 = Position { offset: 5, line: 3, column: 1 };",
          "    assert_eq!(pos2.cmp(&pos3), Ordering::Equal);"
        ],
        "code": [
          "{",
          "    let pos1 = Position { offset: 7, line: 1, column: 1 };",
          "    let pos2 = Position { offset: 5, line: 2, column: 2 };",
          "    let _result = pos1.cmp(&pos2);",
          "    assert_eq!(pos1.cmp(&pos2), Ordering::Greater);",
          "    assert_eq!(pos2.cmp(&pos1), Ordering::Less);",
          "    assert_eq!(pos1.cmp(&pos1), Ordering::Equal);",
          "    assert_eq!(pos2.cmp(&pos2), Ordering::Equal);",
          "    let pos3 = Position { offset: 5, line: 3, column: 1 };",
          "    assert_eq!(pos2.cmp(&pos3), Ordering::Equal);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pos1 = Position { offset: 0, line: 1, column: 1 };",
          "    let pos2 = Position { offset: 1, line: 1, column: 1 };",
          "    let _result = pos1.cmp(&pos2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pos1.cmp(&pos2), Ordering::Less);",
          "    let pos3 = Position { offset: 1, line: 1, column: 1 };",
          "    assert_eq!(pos2.cmp(&pos3), Ordering::Equal);",
          "    let pos4 = Position { offset: 2, line: 1, column: 1 };",
          "    assert_eq!(pos3.cmp(&pos4), Ordering::Less);",
          "    assert_eq!(pos4.cmp(&pos1), Ordering::Greater);",
          "    let pos5 = Position { offset: 0, line: 2, column: 1 };",
          "    assert_eq!(pos1.cmp(&pos5), Ordering::Less);",
          "    let pos6 = Position { offset: 0, line: 1, column: 2 };",
          "    assert_eq!(pos1.cmp(&pos6), Ordering::Less);"
        ],
        "code": [
          "{",
          "    let pos1 = Position { offset: 0, line: 1, column: 1 };",
          "    let pos2 = Position { offset: 1, line: 1, column: 1 };",
          "    let _result = pos1.cmp(&pos2);",
          "    assert_eq!(pos1.cmp(&pos2), Ordering::Less);",
          "    let pos3 = Position { offset: 1, line: 1, column: 1 };",
          "    assert_eq!(pos2.cmp(&pos3), Ordering::Equal);",
          "    let pos4 = Position { offset: 2, line: 1, column: 1 };",
          "    assert_eq!(pos3.cmp(&pos4), Ordering::Less);",
          "    assert_eq!(pos4.cmp(&pos1), Ordering::Greater);",
          "    let pos5 = Position { offset: 0, line: 2, column: 1 };",
          "    assert_eq!(pos1.cmp(&pos5), Ordering::Less);",
          "    let pos6 = Position { offset: 0, line: 1, column: 2 };",
          "    assert_eq!(pos1.cmp(&pos6), Ordering::Less);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pos1 = Position { offset: usize::MAX, line: 1, column: 1 };",
          "    let pos2 = Position { offset: usize::MAX - 1, line: 2, column: 2 };",
          "    let _result = pos1.cmp(&pos2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pos1.cmp(&pos2), Ordering::Greater);",
          "    assert_eq!(pos2.cmp(&pos1), Ordering::Less);",
          "    assert_eq!(pos1.cmp(&pos1), Ordering::Equal);",
          "    assert_eq!(pos2.cmp(&pos2), Ordering::Equal);"
        ],
        "code": [
          "{",
          "    let pos1 = Position { offset: usize::MAX, line: 1, column: 1 };",
          "    let pos2 = Position { offset: usize::MAX - 1, line: 2, column: 2 };",
          "    let _result = pos1.cmp(&pos2);",
          "    assert_eq!(pos1.cmp(&pos2), Ordering::Greater);",
          "    assert_eq!(pos2.cmp(&pos1), Ordering::Less);",
          "    assert_eq!(pos1.cmp(&pos1), Ordering::Equal);",
          "    assert_eq!(pos2.cmp(&pos2), Ordering::Equal);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pos1 = Position { offset: 4, line: 2, column: 3 };",
          "    let pos2 = Position { offset: 4, line: 1, column: 2 };",
          "    let _result = pos1.cmp(&pos2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pos1.cmp(&pos2), Ordering::Equal);",
          "    let pos3 = Position { offset: 5, line: 1, column: 2 };",
          "    assert_eq!(pos1.cmp(&pos3), Ordering::Less);",
          "    let pos4 = Position { offset: 3, line: 1, column: 2 };",
          "    assert_eq!(pos1.cmp(&pos4), Ordering::Greater);",
          "    let pos5 = Position { offset: 0, line: 1, column: 1 };",
          "    assert_eq!(pos5.cmp(&pos1), Ordering::Less);",
          "    let pos6 = Position { offset: 100, line: 10, column: 50 };",
          "    assert_eq!(pos1.cmp(&pos6), Ordering::Less);",
          "    let pos7 = Position { offset: 4, line: 3, column: 1 };",
          "    assert_eq!(pos1.cmp(&pos7), Ordering::Equal);",
          "    let pos8 = Position { offset: 4, line: 0, column: 0 };",
          "    assert_eq!(pos1.cmp(&pos8), Ordering::Greater);"
        ],
        "code": [
          "{",
          "    let pos1 = Position { offset: 4, line: 2, column: 3 };",
          "    let pos2 = Position { offset: 4, line: 1, column: 2 };",
          "    let _result = pos1.cmp(&pos2);",
          "    assert_eq!(pos1.cmp(&pos2), Ordering::Equal);",
          "    let pos3 = Position { offset: 5, line: 1, column: 2 };",
          "    assert_eq!(pos1.cmp(&pos3), Ordering::Less);",
          "    let pos4 = Position { offset: 3, line: 1, column: 2 };",
          "    assert_eq!(pos1.cmp(&pos4), Ordering::Greater);",
          "    let pos5 = Position { offset: 0, line: 1, column: 1 };",
          "    assert_eq!(pos5.cmp(&pos1), Ordering::Less);",
          "    let pos6 = Position { offset: 100, line: 10, column: 50 };",
          "    assert_eq!(pos1.cmp(&pos6), Ordering::Less);",
          "    let pos7 = Position { offset: 4, line: 3, column: 1 };",
          "    assert_eq!(pos1.cmp(&pos7), Ordering::Equal);",
          "    let pos8 = Position { offset: 4, line: 0, column: 0 };",
          "    assert_eq!(pos1.cmp(&pos8), Ordering::Greater);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]