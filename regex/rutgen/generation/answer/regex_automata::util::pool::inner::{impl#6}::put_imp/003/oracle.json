[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Dummy {",
          "        value: i32,",
          "    }",
          "",
          "    let create_fn = || Box::new(Dummy { value: 42 });",
          "    let pool = Pool {",
          "        stack: Mutex::new(Vec::new()),",
          "        create: create_fn,",
          "    };",
          "    ",
          "    let mut guard = PoolGuard {",
          "        pool: &pool,",
          "        value: Some(Box::new(Dummy { value: 42 })),",
          "    };",
          "    ",
          "    guard.discard = true;",
          "",
          "    guard.put_imp();",
          "}"
        ],
        "oracle": [
          "    assert!(guard.value.is_none());",
          "    assert_eq!(pool.stack.lock().len(), 0);",
          "    assert_eq!(pool.stack.lock().get(0), None);",
          "    assert_eq!(pool.stack.lock().get(1), None);",
          "    assert_eq!(pool.stack.lock().len(), 0);"
        ],
        "code": [
          "{",
          "    struct Dummy {",
          "        value: i32,",
          "    }",
          "",
          "    let create_fn = || Box::new(Dummy { value: 42 });",
          "    let pool = Pool {",
          "        stack: Mutex::new(Vec::new()),",
          "        create: create_fn,",
          "    };",
          "    ",
          "    let mut guard = PoolGuard {",
          "        pool: &pool,",
          "        value: Some(Box::new(Dummy { value: 42 })),",
          "    };",
          "    ",
          "    guard.discard = true;",
          "",
          "    guard.put_imp();",
          "    assert!(guard.value.is_none());",
          "    assert_eq!(pool.stack.lock().len(), 0);",
          "    assert_eq!(pool.stack.lock().get(0), None);",
          "    assert_eq!(pool.stack.lock().get(1), None);",
          "    assert_eq!(pool.stack.lock().len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Dummy {",
          "        value: i32,",
          "    }",
          "",
          "    let create_fn = || Box::new(Dummy { value: 0 });",
          "    let pool = Pool {",
          "        stack: Mutex::new(Vec::new()),",
          "        create: create_fn,",
          "    };",
          "",
          "    let mut guard = PoolGuard {",
          "        pool: &pool,",
          "        value: Some(Box::new(Dummy { value: 0 })),",
          "    };",
          "",
          "    guard.discard = true;",
          "",
          "    guard.put_imp();",
          "}"
        ],
        "oracle": [
          "    assert!(guard.value.is_none());",
          "    assert_eq!(pool.stack.lock().unwrap().len(), 0);",
          "    assert_eq!(pool.stack.lock().unwrap().get(0), None);"
        ],
        "code": [
          "{",
          "    struct Dummy {",
          "        value: i32,",
          "    }",
          "",
          "    let create_fn = || Box::new(Dummy { value: 0 });",
          "    let pool = Pool {",
          "        stack: Mutex::new(Vec::new()),",
          "        create: create_fn,",
          "    };",
          "",
          "    let mut guard = PoolGuard {",
          "        pool: &pool,",
          "        value: Some(Box::new(Dummy { value: 0 })),",
          "    };",
          "",
          "    guard.discard = true;",
          "",
          "    guard.put_imp();",
          "    assert!(guard.value.is_none());",
          "    assert_eq!(pool.stack.lock().unwrap().len(), 0);",
          "    assert_eq!(pool.stack.lock().unwrap().get(0), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]