[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestObject {",
          "        value: i32,",
          "    }",
          "    ",
          "    let pool = Pool::new(|| Box::new(TestObject { value: 42 }));",
          "    let mut guard = pool.get();",
          "    guard.value = Ok(Box::new(TestObject { value: 42 }));",
          "    guard.discard = false;",
          "    guard.put_imp();",
          "}"
        ],
        "oracle": [
          "    assert!(guard.value.is_none());",
          "    assert_eq!(pool.stack.lock().len(), 1);",
          "    assert_eq!(pool.stack.lock().last().unwrap().value, 42);",
          "    assert_ne!(pool.owner.load(Ordering::Acquire), THREAD_ID_DROPPED);",
          "    assert!(self.value.is_none());",
          "    assert!(!self.discard);",
          "    assert_eq!(self.pool.stack.lock().len(), initial_size + 1);",
          "    assert_eq!(self.pool.owner.load(Ordering::Acquire), THREAD_ID);"
        ],
        "code": [
          "{",
          "    struct TestObject {",
          "        value: i32,",
          "    }",
          "    ",
          "    let pool = Pool::new(|| Box::new(TestObject { value: 42 }));",
          "    let mut guard = pool.get();",
          "    guard.value = Ok(Box::new(TestObject { value: 42 }));",
          "    guard.discard = false;",
          "    guard.put_imp();",
          "    assert!(guard.value.is_none());",
          "    assert_eq!(pool.stack.lock().len(), 1);",
          "    assert_eq!(pool.stack.lock().last().unwrap().value, 42);",
          "    assert_ne!(pool.owner.load(Ordering::Acquire), THREAD_ID_DROPPED);",
          "    assert!(self.value.is_none());",
          "    assert!(!self.discard);",
          "    assert_eq!(self.pool.stack.lock().len(), initial_size + 1);",
          "    assert_eq!(self.pool.owner.load(Ordering::Acquire), THREAD_ID);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestObject {",
          "        value: i32,",
          "    }",
          "    ",
          "    let pool = Pool::new(|| Box::new(TestObject { value: 99 }));",
          "    let mut guard = pool.get();",
          "    guard.value = Ok(Box::new(TestObject { value: 99 }));",
          "    guard.discard = false;",
          "    guard.put_imp();",
          "}"
        ],
        "oracle": [
          "    assert!(guard.value.is_none());",
          "    assert_eq!(pool.stack.lock().len(), 1);",
          "    assert_eq!(pool.stack.lock()[0].value, 99);",
          "    assert_eq!(pool.owner.load(Ordering::Acquire), THREAD_ID);"
        ],
        "code": [
          "{",
          "    struct TestObject {",
          "        value: i32,",
          "    }",
          "    ",
          "    let pool = Pool::new(|| Box::new(TestObject { value: 99 }));",
          "    let mut guard = pool.get();",
          "    guard.value = Ok(Box::new(TestObject { value: 99 }));",
          "    guard.discard = false;",
          "    guard.put_imp();",
          "    assert!(guard.value.is_none());",
          "    assert_eq!(pool.stack.lock().len(), 1);",
          "    assert_eq!(pool.stack.lock()[0].value, 99);",
          "    assert_eq!(pool.owner.load(Ordering::Acquire), THREAD_ID);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestObject {",
          "        value: i32,",
          "    }",
          "    ",
          "    let pool = Pool::new(|| Box::new(TestObject { value: 100 }));",
          "    let mut guard = pool.get();",
          "    guard.value = Ok(Box::new(TestObject { value: 100 }));",
          "    guard.discard = false;",
          "    guard.put_imp();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(guard.value(), &Ok(Box::new(TestObject { value: 100 })));",
          "    assert_eq!(pool.stack.lock().unwrap().len(), 1);",
          "    assert_ne!(guard.value(), &Err(THREAD_ID_DROPPED));",
          "    assert!(pool.owner.load(Ordering::Acquire) == THREAD_ID);",
          "    assert!(guard.discard == false);"
        ],
        "code": [
          "{",
          "    struct TestObject {",
          "        value: i32,",
          "    }",
          "    ",
          "    let pool = Pool::new(|| Box::new(TestObject { value: 100 }));",
          "    let mut guard = pool.get();",
          "    guard.value = Ok(Box::new(TestObject { value: 100 }));",
          "    guard.discard = false;",
          "    guard.put_imp();",
          "    assert_eq!(guard.value(), &Ok(Box::new(TestObject { value: 100 })));",
          "    assert_eq!(pool.stack.lock().unwrap().len(), 1);",
          "    assert_ne!(guard.value(), &Err(THREAD_ID_DROPPED));",
          "    assert!(pool.owner.load(Ordering::Acquire) == THREAD_ID);",
          "    assert!(guard.discard == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]