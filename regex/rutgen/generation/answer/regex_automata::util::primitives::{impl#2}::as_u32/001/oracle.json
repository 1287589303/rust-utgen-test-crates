[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let index = SmallIndex::new_unchecked(0);",
          "    let result = index.as_u32();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0);"
        ],
        "code": [
          "{",
          "    let index = SmallIndex::new_unchecked(0);",
          "    let result = index.as_u32();",
          "    assert_eq!(result, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let index = SmallIndex::new_unchecked(SmallIndex::MAX.as_usize() - 1);",
          "    let result = index.as_u32();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, SmallIndex::MAX.as_u32());"
        ],
        "code": [
          "{",
          "    let index = SmallIndex::new_unchecked(SmallIndex::MAX.as_usize() - 1);",
          "    let result = index.as_u32();",
          "    assert_eq!(result, SmallIndex::MAX.as_u32());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let usize_max = core::usize::MAX;",
          "    let index = SmallIndex::new_unchecked(if usize_max < SmallIndex::LIMIT { usize_max } else { SmallIndex::MAX.as_usize() - 1 });",
          "    let result = index.as_u32();",
          "}"
        ],
        "oracle": [
          "    let usize_max = core::usize::MAX;",
          "    let index = SmallIndex::new_unchecked(if usize_max < SmallIndex::LIMIT { usize_max } else { SmallIndex::MAX.as_usize() - 1 });",
          "    let expected = index.0;",
          "    assert_eq!(result, expected);",
          "    assert!(result <= core::u32::MAX);",
          "    assert!(result >= 0);",
          "    assert_eq!(result as usize, index.as_usize());"
        ],
        "code": [
          "{",
          "    let usize_max = core::usize::MAX;",
          "    let index = SmallIndex::new_unchecked(if usize_max < SmallIndex::LIMIT { usize_max } else { SmallIndex::MAX.as_usize() - 1 });",
          "    let result = index.as_u32();",
          "    let usize_max = core::usize::MAX;",
          "    let index = SmallIndex::new_unchecked(if usize_max < SmallIndex::LIMIT { usize_max } else { SmallIndex::MAX.as_usize() - 1 });",
          "    let expected = index.0;",
          "    assert_eq!(result, expected);",
          "    assert!(result <= core::u32::MAX);",
          "    assert!(result >= 0);",
          "    assert_eq!(result as usize, index.as_usize());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]