[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut vec = Vec::<u8>::with_capacity(0);",
          "    let mut repr_vec = ReprVec(&mut vec);",
          "    repr_vec.set_is_from_word();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(vec![0, 0, 0, 0], *repr_vec.0);",
          "    repr_vec.set_is_from_word();",
          "    assert_eq!(vec![4, 0, 0, 0], *repr_vec.0);",
          "    assert_eq!(repr_vec.0[0] & (1 << 2) != 0, true);"
        ],
        "code": [
          "{",
          "    let mut vec = Vec::<u8>::with_capacity(0);",
          "    let mut repr_vec = ReprVec(&mut vec);",
          "    repr_vec.set_is_from_word();",
          "    assert_eq!(vec![0, 0, 0, 0], *repr_vec.0);",
          "    repr_vec.set_is_from_word();",
          "    assert_eq!(vec![4, 0, 0, 0], *repr_vec.0);",
          "    assert_eq!(repr_vec.0[0] & (1 << 2) != 0, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut vec = vec![0u8; 1];",
          "    let mut repr_vec = ReprVec(&mut vec);",
          "    repr_vec.set_is_from_word();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(vec[0], 4);"
        ],
        "code": [
          "{",
          "    let mut vec = vec![0u8; 1];",
          "    let mut repr_vec = ReprVec(&mut vec);",
          "    repr_vec.set_is_from_word();",
          "    assert_eq!(vec[0], 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut vec = vec![0u8; 2];",
          "    let mut repr_vec = ReprVec(&mut vec);",
          "    repr_vec.set_is_from_word();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(vec[0], 4);"
        ],
        "code": [
          "{",
          "    let mut vec = vec![0u8; 2];",
          "    let mut repr_vec = ReprVec(&mut vec);",
          "    repr_vec.set_is_from_word();",
          "    assert_eq!(vec[0], 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut vec = vec![0u8; 10];",
          "    let mut repr_vec = ReprVec(&mut vec);",
          "    repr_vec.set_is_from_word();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(vec[0] & (1 << 2) != 0, true);"
        ],
        "code": [
          "{",
          "    let mut vec = vec![0u8; 10];",
          "    let mut repr_vec = ReprVec(&mut vec);",
          "    repr_vec.set_is_from_word();",
          "    assert_eq!(vec[0] & (1 << 2) != 0, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]