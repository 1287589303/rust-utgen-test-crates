[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir1 = Hir {",
          "        kind: HirKind::Literal(Literal::from_string(\"abc\")),",
          "        props: Properties::literal(&Literal::from_string(\"abc\")),",
          "    };",
          "    let hir2 = Hir {",
          "        kind: HirKind::Literal(Literal::from_string(\"def\")),",
          "        props: Properties::literal(&Literal::from_string(\"def\")),",
          "    };",
          "    let hir3 = Hir {",
          "        kind: HirKind::Literal(Literal::from_string(\"ghi\")),",
          "        props: Properties::literal(&Literal::from_string(\"ghi\")),",
          "    };",
          "    let alts = vec![hir1, hir2, hir3];",
          "    ",
          "    let _ = Properties::alternation(&alts);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Properties::alternation(&vec![Hir { kind: HirKind::Literal(Literal::from_string(\"abc\")), props: Properties::literal(&Literal::from_string(\"abc\")) }, Hir { kind: HirKind::Literal(Literal::from_string(\"def\")), props: Properties::literal(&Literal::from_string(\"def\")) }, Hir { kind: HirKind::Literal(Literal::from_string(\"ghi\")), props: Properties::literal(&Literal::from_string(\"ghi\")) }]), expected_properties_value);"
        ],
        "code": [
          "{",
          "    let hir1 = Hir {",
          "        kind: HirKind::Literal(Literal::from_string(\"abc\")),",
          "        props: Properties::literal(&Literal::from_string(\"abc\")),",
          "    };",
          "    let hir2 = Hir {",
          "        kind: HirKind::Literal(Literal::from_string(\"def\")),",
          "        props: Properties::literal(&Literal::from_string(\"def\")),",
          "    };",
          "    let hir3 = Hir {",
          "        kind: HirKind::Literal(Literal::from_string(\"ghi\")),",
          "        props: Properties::literal(&Literal::from_string(\"ghi\")),",
          "    };",
          "    let alts = vec![hir1, hir2, hir3];",
          "    ",
          "    let _ = Properties::alternation(&alts);",
          "    assert_eq!(Properties::alternation(&vec![Hir { kind: HirKind::Literal(Literal::from_string(\"abc\")), props: Properties::literal(&Literal::from_string(\"abc\")) }, Hir { kind: HirKind::Literal(Literal::from_string(\"def\")), props: Properties::literal(&Literal::from_string(\"def\")) }, Hir { kind: HirKind::Literal(Literal::from_string(\"ghi\")), props: Properties::literal(&Literal::from_string(\"ghi\")) }]), expected_properties_value);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir1 = Hir {",
          "        kind: HirKind::Literal(Literal::from_string(\"a\")),",
          "        props: Properties {",
          "            minimum_len: Some(1),",
          "            maximum_len: Some(1),",
          "            ..Properties::empty()",
          "        },",
          "    };",
          "    let hir2 = Hir {",
          "        kind: HirKind::Literal(Literal::from_string(\"abc\")),",
          "        props: Properties {",
          "            minimum_len: Some(3),",
          "            maximum_len: Some(3),",
          "            ..Properties::empty()",
          "        },",
          "    };",
          "    let alts = vec![hir1, hir2];",
          "",
          "    let _ = Properties::alternation(&alts);",
          "}"
        ],
        "oracle": [
          "    let hir1 = Hir { kind: HirKind::Literal(Literal::from_string(\"a\")), props: Properties { minimum_len: Some(1), maximum_len: Some(1), ..Properties::empty() }};",
          "    let hir2 = Hir { kind: HirKind::Literal(Literal::from_string(\"abc\")), props: Properties { minimum_len: Some(3), maximum_len: Some(3), ..Properties::empty() }};",
          "    let alts = vec![hir1, hir2];",
          "    let result = Properties::alternation(&alts);",
          "    assert_eq!(result.minimum_len, Some(1));",
          "    assert_eq!(result.maximum_len, Some(3));",
          "    assert!(result.literal);",
          "    assert!(!result.alternation_literal);",
          "    assert_eq!(result.explicit_captures_len, 0);",
          "    assert_eq!(result.static_explicit_captures_len, None);",
          "    assert!(result.utf8);",
          "    assert_eq!(result.look_set_prefix, LookSet::default());",
          "    assert_eq!(result.look_set_suffix, LookSet::default());",
          "    assert_eq!(result.look_set_prefix_any, LookSet::default());",
          "    assert_eq!(result.look_set_suffix_any, LookSet::default());"
        ],
        "code": [
          "{",
          "    let hir1 = Hir {",
          "        kind: HirKind::Literal(Literal::from_string(\"a\")),",
          "        props: Properties {",
          "            minimum_len: Some(1),",
          "            maximum_len: Some(1),",
          "            ..Properties::empty()",
          "        },",
          "    };",
          "    let hir2 = Hir {",
          "        kind: HirKind::Literal(Literal::from_string(\"abc\")),",
          "        props: Properties {",
          "            minimum_len: Some(3),",
          "            maximum_len: Some(3),",
          "            ..Properties::empty()",
          "        },",
          "    };",
          "    let alts = vec![hir1, hir2];",
          "",
          "    let _ = Properties::alternation(&alts);",
          "    let hir1 = Hir { kind: HirKind::Literal(Literal::from_string(\"a\")), props: Properties { minimum_len: Some(1), maximum_len: Some(1), ..Properties::empty() }};",
          "    let hir2 = Hir { kind: HirKind::Literal(Literal::from_string(\"abc\")), props: Properties { minimum_len: Some(3), maximum_len: Some(3), ..Properties::empty() }};",
          "    let alts = vec![hir1, hir2];",
          "    let result = Properties::alternation(&alts);",
          "    assert_eq!(result.minimum_len, Some(1));",
          "    assert_eq!(result.maximum_len, Some(3));",
          "    assert!(result.literal);",
          "    assert!(!result.alternation_literal);",
          "    assert_eq!(result.explicit_captures_len, 0);",
          "    assert_eq!(result.static_explicit_captures_len, None);",
          "    assert!(result.utf8);",
          "    assert_eq!(result.look_set_prefix, LookSet::default());",
          "    assert_eq!(result.look_set_suffix, LookSet::default());",
          "    assert_eq!(result.look_set_prefix_any, LookSet::default());",
          "    assert_eq!(result.look_set_suffix_any, LookSet::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir1 = Hir {",
          "        kind: HirKind::Class(Class::new(vec!['a', 'b', 'c'])),",
          "        props: Properties {",
          "            utf8: true,",
          "            ..Properties::empty()",
          "        },",
          "    };",
          "    let hir2 = Hir {",
          "        kind: HirKind::Class(Class::new(vec!['1', '2', '3'])),",
          "        props: Properties {",
          "            utf8: false,",
          "            ..Properties::empty()",
          "        },",
          "    };",
          "    let alts = vec![hir1, hir2];",
          "",
          "    let _ = Properties::alternation(&alts);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(alts.len(), 2);",
          "    assert_eq!(alts[0].props.utf8, true);",
          "    assert_eq!(alts[1].props.utf8, false);",
          "    assert_eq!(alts[0].kind, HirKind::Class(Class::new(vec!['a', 'b', 'c'])));",
          "    assert_eq!(alts[1].kind, HirKind::Class(Class::new(vec!['1', '2', '3'])));"
        ],
        "code": [
          "{",
          "    let hir1 = Hir {",
          "        kind: HirKind::Class(Class::new(vec!['a', 'b', 'c'])),",
          "        props: Properties {",
          "            utf8: true,",
          "            ..Properties::empty()",
          "        },",
          "    };",
          "    let hir2 = Hir {",
          "        kind: HirKind::Class(Class::new(vec!['1', '2', '3'])),",
          "        props: Properties {",
          "            utf8: false,",
          "            ..Properties::empty()",
          "        },",
          "    };",
          "    let alts = vec![hir1, hir2];",
          "",
          "    let _ = Properties::alternation(&alts);",
          "    assert_eq!(alts.len(), 2);",
          "    assert_eq!(alts[0].props.utf8, true);",
          "    assert_eq!(alts[1].props.utf8, false);",
          "    assert_eq!(alts[0].kind, HirKind::Class(Class::new(vec!['a', 'b', 'c'])));",
          "    assert_eq!(alts[1].kind, HirKind::Class(Class::new(vec!['1', '2', '3'])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir1 = Hir {",
          "        kind: HirKind::Literal(Literal::from_string(\"abc\")),",
          "        props: Properties {",
          "            literal: true,",
          "            alternation_literal: false,",
          "            ..Properties::empty()",
          "        },",
          "    };",
          "    let hir2 = Hir {",
          "        kind: HirKind::Literal(Literal::from_string(\"def\")),",
          "        props: Properties {",
          "            literal: false,",
          "            alternation_literal: true,",
          "            ..Properties::empty()",
          "        },",
          "    };",
          "    let alts = vec![hir1, hir2];",
          "",
          "    let _ = Properties::alternation(&alts);",
          "}"
        ],
        "oracle": [
          "    let hir1 = Hir { kind: HirKind::Literal(Literal::from_string(\"abc\")), props: Properties { literal: true, alternation_literal: false, ..Properties::empty() } };",
          "    let hir2 = Hir { kind: HirKind::Literal(Literal::from_string(\"def\")), props: Properties { literal: false, alternation_literal: true, ..Properties::empty() } };",
          "    let alts = vec![hir1.clone(), hir2.clone()];",
          "    let result = Properties::alternation(&alts);",
          "    assert_eq!(result.literal, false);",
          "    assert_eq!(result.alternation_literal, true);",
          "    let alts_single = vec![hir1.clone()];",
          "    let result_single = Properties::alternation(&alts_single);",
          "    assert_eq!(result_single.literal, true);",
          "    assert_eq!(result_single.alternation_literal, false);",
          "    let alts_empty = vec![];",
          "    let result_empty = Properties::alternation(&alts_empty);",
          "    assert_eq!(result_empty.literal, false);",
          "    assert_eq!(result_empty.alternation_literal, false);"
        ],
        "code": [
          "{",
          "    let hir1 = Hir {",
          "        kind: HirKind::Literal(Literal::from_string(\"abc\")),",
          "        props: Properties {",
          "            literal: true,",
          "            alternation_literal: false,",
          "            ..Properties::empty()",
          "        },",
          "    };",
          "    let hir2 = Hir {",
          "        kind: HirKind::Literal(Literal::from_string(\"def\")),",
          "        props: Properties {",
          "            literal: false,",
          "            alternation_literal: true,",
          "            ..Properties::empty()",
          "        },",
          "    };",
          "    let alts = vec![hir1, hir2];",
          "",
          "    let _ = Properties::alternation(&alts);",
          "    let hir1 = Hir { kind: HirKind::Literal(Literal::from_string(\"abc\")), props: Properties { literal: true, alternation_literal: false, ..Properties::empty() } };",
          "    let hir2 = Hir { kind: HirKind::Literal(Literal::from_string(\"def\")), props: Properties { literal: false, alternation_literal: true, ..Properties::empty() } };",
          "    let alts = vec![hir1.clone(), hir2.clone()];",
          "    let result = Properties::alternation(&alts);",
          "    assert_eq!(result.literal, false);",
          "    assert_eq!(result.alternation_literal, true);",
          "    let alts_single = vec![hir1.clone()];",
          "    let result_single = Properties::alternation(&alts_single);",
          "    assert_eq!(result_single.literal, true);",
          "    assert_eq!(result_single.alternation_literal, false);",
          "    let alts_empty = vec![];",
          "    let result_empty = Properties::alternation(&alts_empty);",
          "    assert_eq!(result_empty.literal, false);",
          "    assert_eq!(result_empty.alternation_literal, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alts: Vec<Hir> = vec![];",
          "    ",
          "    let _ = Properties::alternation(&alts);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Properties::alternation(&vec![]).minimum_len, None);",
          "    assert_eq!(Properties::alternation(&vec![]).maximum_len, None);",
          "    assert_eq!(Properties::alternation(&vec![]).look_set, LookSet::default());",
          "    assert_eq!(Properties::alternation(&vec![]).look_set_prefix, LookSet::default());",
          "    assert_eq!(Properties::alternation(&vec![]).look_set_suffix, LookSet::default());",
          "    assert_eq!(Properties::alternation(&vec![]).look_set_prefix_any, LookSet::default());",
          "    assert_eq!(Properties::alternation(&vec![]).look_set_suffix_any, LookSet::default());",
          "    assert_eq!(Properties::alternation(&vec![]).utf8, false);",
          "    assert_eq!(Properties::alternation(&vec![]).explicit_captures_len, 0);",
          "    assert_eq!(Properties::alternation(&vec![]).static_explicit_captures_len, None);",
          "    assert_eq!(Properties::alternation(&vec![]).literal, false);",
          "    assert_eq!(Properties::alternation(&vec![]).alternation_literal, false);"
        ],
        "code": [
          "{",
          "    let alts: Vec<Hir> = vec![];",
          "    ",
          "    let _ = Properties::alternation(&alts);",
          "    assert_eq!(Properties::alternation(&vec![]).minimum_len, None);",
          "    assert_eq!(Properties::alternation(&vec![]).maximum_len, None);",
          "    assert_eq!(Properties::alternation(&vec![]).look_set, LookSet::default());",
          "    assert_eq!(Properties::alternation(&vec![]).look_set_prefix, LookSet::default());",
          "    assert_eq!(Properties::alternation(&vec![]).look_set_suffix, LookSet::default());",
          "    assert_eq!(Properties::alternation(&vec![]).look_set_prefix_any, LookSet::default());",
          "    assert_eq!(Properties::alternation(&vec![]).look_set_suffix_any, LookSet::default());",
          "    assert_eq!(Properties::alternation(&vec![]).utf8, false);",
          "    assert_eq!(Properties::alternation(&vec![]).explicit_captures_len, 0);",
          "    assert_eq!(Properties::alternation(&vec![]).static_explicit_captures_len, None);",
          "    assert_eq!(Properties::alternation(&vec![]).literal, false);",
          "    assert_eq!(Properties::alternation(&vec![]).alternation_literal, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]