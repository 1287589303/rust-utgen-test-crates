[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[0x00, 0x00, 0x00, 0x00];",
          "    let result = read_endianness_check(slice);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    match result {",
          "    Err(DeserializeError::endian_mismatch(0xFEFF, n)) => assert_eq!(n, 0x00000000),",
          "    _ => panic!(\"Expected endian mismatch error\"),",
          "    }"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[0x00, 0x00, 0x00, 0x00];",
          "    let result = read_endianness_check(slice);",
          "    assert!(result.is_err());",
          "    match result {",
          "    Err(DeserializeError::endian_mismatch(0xFEFF, n)) => assert_eq!(n, 0x00000000),",
          "    _ => panic!(\"Expected endian mismatch error\"),",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[0xFF, 0xFE, 0xFF, 0xFF];",
          "    let result = read_endianness_check(slice);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), DeserializeError::endian_mismatch(0xFEFF, 0xFFFF_FFFF));"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[0xFF, 0xFE, 0xFF, 0xFF];",
          "    let result = read_endianness_check(slice);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), DeserializeError::endian_mismatch(0xFEFF, 0xFFFF_FFFF));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[0x01, 0x02, 0x03];",
          "    let result = read_endianness_check(slice);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    if let Err(ref e) = result {",
          "    match e {",
          "    DeserializeError::EndianMismatch { expected, found } => {",
          "    assert_eq!(*expected, 0xFEFF);",
          "    assert_eq!(*found, 0x03020100);",
          "    },",
          "    _ => panic!(\"Unexpected error type\")",
          "    }",
          "    }"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[0x01, 0x02, 0x03];",
          "    let result = read_endianness_check(slice);",
          "    assert!(result.is_err());",
          "    if let Err(ref e) = result {",
          "    match e {",
          "    DeserializeError::EndianMismatch { expected, found } => {",
          "    assert_eq!(*expected, 0xFEFF);",
          "    assert_eq!(*found, 0x03020100);",
          "    },",
          "    _ => panic!(\"Unexpected error type\")",
          "    }",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[0x01, 0x02, 0x03, 0x04];",
          "    let result = read_endianness_check(slice);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    if let Err(ref e) = result {",
          "    match e {",
          "    DeserializeError(DeserializeErrorKind::EndianMismatch { expected, found }) => {",
          "    assert_eq!(*expected, 0xFEFF);",
          "    assert_eq!(*found, 0x01020304);",
          "    },",
          "    _ => panic!(\"Expected EndianMismatch error\"),",
          "    }",
          "    }"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[0x01, 0x02, 0x03, 0x04];",
          "    let result = read_endianness_check(slice);",
          "    assert!(result.is_err());",
          "    if let Err(ref e) = result {",
          "    match e {",
          "    DeserializeError(DeserializeErrorKind::EndianMismatch { expected, found }) => {",
          "    assert_eq!(*expected, 0xFEFF);",
          "    assert_eq!(*found, 0x01020304);",
          "    },",
          "    _ => panic!(\"Expected EndianMismatch error\"),",
          "    }",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]