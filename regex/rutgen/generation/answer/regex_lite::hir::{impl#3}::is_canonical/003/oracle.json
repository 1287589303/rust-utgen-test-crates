[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ranges = vec![",
          "        ClassRange { start: 'a', end: 'b' },",
          "        ClassRange { start: 'c', end: 'd' },",
          "        ClassRange { start: 'e', end: 'f' },",
          "    ];",
          "    let class = Class::new(ranges);",
          "    class.is_canonical();",
          "}"
        ],
        "oracle": [
          "    assert!(class.is_canonical());"
        ],
        "code": [
          "{",
          "    let ranges = vec![",
          "        ClassRange { start: 'a', end: 'b' },",
          "        ClassRange { start: 'c', end: 'd' },",
          "        ClassRange { start: 'e', end: 'f' },",
          "    ];",
          "    let class = Class::new(ranges);",
          "    class.is_canonical();",
          "    assert!(class.is_canonical());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ranges = vec![",
          "        ClassRange { start: '1', end: '2' },",
          "        ClassRange { start: '4', end: '5' },",
          "        ClassRange { start: '7', end: '8' },",
          "    ];",
          "    let class = Class::new(ranges);",
          "    class.is_canonical();",
          "}"
        ],
        "oracle": [
          "    let ranges = vec![ClassRange { start: '1', end: '2' }, ClassRange { start: '4', end: '5' }, ClassRange { start: '7', end: '8' }];",
          "    let class = Class::new(ranges);",
          "    assert!(class.is_canonical() == true);"
        ],
        "code": [
          "{",
          "    let ranges = vec![",
          "        ClassRange { start: '1', end: '2' },",
          "        ClassRange { start: '4', end: '5' },",
          "        ClassRange { start: '7', end: '8' },",
          "    ];",
          "    let class = Class::new(ranges);",
          "    class.is_canonical();",
          "    let ranges = vec![ClassRange { start: '1', end: '2' }, ClassRange { start: '4', end: '5' }, ClassRange { start: '7', end: '8' }];",
          "    let class = Class::new(ranges);",
          "    assert!(class.is_canonical() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ranges = vec![",
          "        ClassRange { start: 'A', end: 'A' },",
          "        ClassRange { start: 'C', end: 'C' },",
          "        ClassRange { start: 'E', end: 'E' },",
          "    ];",
          "    let class = Class::new(ranges);",
          "    class.is_canonical();",
          "}"
        ],
        "oracle": [
          "    assert!(class.is_canonical());",
          "    let ranges_empty = vec![];",
          "    let class_empty = Class::new(ranges_empty);",
          "    assert!(class_empty.is_canonical());",
          "    let ranges_one_element = vec![ClassRange { start: 'A', end: 'A' }];",
          "    let class_one = Class::new(ranges_one_element);",
          "    assert!(class_one.is_canonical());"
        ],
        "code": [
          "{",
          "    let ranges = vec![",
          "        ClassRange { start: 'A', end: 'A' },",
          "        ClassRange { start: 'C', end: 'C' },",
          "        ClassRange { start: 'E', end: 'E' },",
          "    ];",
          "    let class = Class::new(ranges);",
          "    class.is_canonical();",
          "    assert!(class.is_canonical());",
          "    let ranges_empty = vec![];",
          "    let class_empty = Class::new(ranges_empty);",
          "    assert!(class_empty.is_canonical());",
          "    let ranges_one_element = vec![ClassRange { start: 'A', end: 'A' }];",
          "    let class_one = Class::new(ranges_one_element);",
          "    assert!(class_one.is_canonical());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ranges = vec![",
          "        ClassRange { start: '!', end: '!' },",
          "        ClassRange { start: '#', end: '#' },",
          "        ClassRange { start: '%', end: '%' },",
          "    ];",
          "    let class = Class::new(ranges);",
          "    class.is_canonical();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class.is_canonical(), true);"
        ],
        "code": [
          "{",
          "    let ranges = vec![",
          "        ClassRange { start: '!', end: '!' },",
          "        ClassRange { start: '#', end: '#' },",
          "        ClassRange { start: '%', end: '%' },",
          "    ];",
          "    let class = Class::new(ranges);",
          "    class.is_canonical();",
          "    assert_eq!(class.is_canonical(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ranges = vec![",
          "        ClassRange { start: 'a', end: 'a' },",
          "        ClassRange { start: 'z', end: 'z' },",
          "        ClassRange { start: '{', end: '{' },",
          "    ];",
          "    let class = Class::new(ranges);",
          "    class.is_canonical();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class.is_canonical(), true);"
        ],
        "code": [
          "{",
          "    let ranges = vec![",
          "        ClassRange { start: 'a', end: 'a' },",
          "        ClassRange { start: 'z', end: 'z' },",
          "        ClassRange { start: '{', end: '{' },",
          "    ];",
          "    let class = Class::new(ranges);",
          "    class.is_canonical();",
          "    assert_eq!(class.is_canonical(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]