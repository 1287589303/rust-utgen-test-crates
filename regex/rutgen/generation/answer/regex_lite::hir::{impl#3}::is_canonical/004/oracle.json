[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'b' },",
          "        ClassRange { start: 'c', end: 'd' },",
          "    ]);",
          "    class.is_canonical();",
          "}"
        ],
        "oracle": [
          "    assert!(class.is_canonical());"
        ],
        "code": [
          "{",
          "    let class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'b' },",
          "        ClassRange { start: 'c', end: 'd' },",
          "    ]);",
          "    class.is_canonical();",
          "    assert!(class.is_canonical());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let class = Class::new(vec![",
          "        ClassRange { start: 'e', end: 'f' },",
          "        ClassRange { start: 'g', end: 'h' },",
          "    ]);",
          "    class.is_canonical();",
          "}"
        ],
        "oracle": [
          "    assert!(class.is_canonical() == true);"
        ],
        "code": [
          "{",
          "    let class = Class::new(vec![",
          "        ClassRange { start: 'e', end: 'f' },",
          "        ClassRange { start: 'g', end: 'h' },",
          "    ]);",
          "    class.is_canonical();",
          "    assert!(class.is_canonical() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let class = Class::new(vec![",
          "        ClassRange { start: 'i', end: 'j' },",
          "        ClassRange { start: 'k', end: 'l' },",
          "        ClassRange { start: 'm', end: 'n' },",
          "    ]);",
          "    class.is_canonical();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class.is_canonical(), true);"
        ],
        "code": [
          "{",
          "    let class = Class::new(vec![",
          "        ClassRange { start: 'i', end: 'j' },",
          "        ClassRange { start: 'k', end: 'l' },",
          "        ClassRange { start: 'm', end: 'n' },",
          "    ]);",
          "    class.is_canonical();",
          "    assert_eq!(class.is_canonical(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let class = Class::new(vec![",
          "        ClassRange { start: 'o', end: 'p' },",
          "        ClassRange { start: 'q', end: 'r' },",
          "    ]);",
          "    class.is_canonical();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class.is_canonical(), true);"
        ],
        "code": [
          "{",
          "    let class = Class::new(vec![",
          "        ClassRange { start: 'o', end: 'p' },",
          "        ClassRange { start: 'q', end: 'r' },",
          "    ]);",
          "    class.is_canonical();",
          "    assert_eq!(class.is_canonical(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]