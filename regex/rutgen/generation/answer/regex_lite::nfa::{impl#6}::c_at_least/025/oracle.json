[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"abc\";",
          "    let compiler = Compiler::new(config, pattern.to_string());",
          "    let hir = Hir::parse(config, pattern).expect(\"Failed to parse Hir\");",
          "",
          "    let _ = compiler.c_at_least(&hir, true, 0);",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"abc\";",
          "    let compiler = Compiler::new(config, pattern.to_string());",
          "    let hir = Hir::parse(config, pattern).expect(\"Failed to parse Hir\");",
          "    let result = compiler.c_at_least(&hir, true, 0);",
          "    assert_eq!(result.is_ok(), true);",
          "    let _ = compiler.c_at_least(&hir, false, 1);",
          "    assert!(result.is_ok());",
          "    let _ = compiler.c_at_least(&hir, true, 2);",
          "    assert!(result.is_ok());",
          "    let result_prefix = compiler.c_exactly(&hir, 1);",
          "    assert!(result_prefix.is_ok());",
          "    let result_last = compiler.c(&hir);",
          "    assert!(result_last.is_ok());",
          "    let result_splits = compiler.add(State::Splits { targets: vec![], reverse: false });",
          "    assert!(result_splits.is_ok());",
          "    let result_patch_prefix = compiler.patch(1, 2);",
          "    assert!(result_patch_prefix.is_ok());",
          "    let result_patch_last = compiler.patch(2, 3);",
          "    assert!(result_patch_last.is_err());"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"abc\";",
          "    let compiler = Compiler::new(config, pattern.to_string());",
          "    let hir = Hir::parse(config, pattern).expect(\"Failed to parse Hir\");",
          "",
          "    let _ = compiler.c_at_least(&hir, true, 0);",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"abc\";",
          "    let compiler = Compiler::new(config, pattern.to_string());",
          "    let hir = Hir::parse(config, pattern).expect(\"Failed to parse Hir\");",
          "    let result = compiler.c_at_least(&hir, true, 0);",
          "    assert_eq!(result.is_ok(), true);",
          "    let _ = compiler.c_at_least(&hir, false, 1);",
          "    assert!(result.is_ok());",
          "    let _ = compiler.c_at_least(&hir, true, 2);",
          "    assert!(result.is_ok());",
          "    let result_prefix = compiler.c_exactly(&hir, 1);",
          "    assert!(result_prefix.is_ok());",
          "    let result_last = compiler.c(&hir);",
          "    assert!(result_last.is_ok());",
          "    let result_splits = compiler.add(State::Splits { targets: vec![], reverse: false });",
          "    assert!(result_splits.is_ok());",
          "    let result_patch_prefix = compiler.patch(1, 2);",
          "    assert!(result_patch_prefix.is_ok());",
          "    let result_patch_last = compiler.patch(2, 3);",
          "    assert!(result_patch_last.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"a\";",
          "    let compiler = Compiler::new(config, pattern.to_string());",
          "    let hir = Hir::parse(config, pattern).expect(\"Failed to parse Hir\");",
          "",
          "    let _ = compiler.c_at_least(&hir, false, 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(compiler.c_at_least(&hir, false, 0).is_ok(), true);  // Precondition: n == 0 is true",
          "    assert_eq!(compiler.c_at_least(&hir, false, 1).is_ok(), true);  // Precondition: n == 1 is true",
          "    assert!(self.c_exactly(&hir, 0).is_ok());  // Precondition: self.c_exactly(hir, n - 1)? is Ok/Some",
          "    assert!(self.c(&hir).is_ok());  // Precondition: self.c(hir)? is Ok/Some",
          "    assert!(self.add(State::Splits { targets: vec![], reverse: false }).is_ok());  // Precondition: self.add(State::Splits { targets: vec![], reverse: !greedy })? is Ok/Some",
          "    assert!(self.patch(prefix.end, last.start).is_ok());  // Precondition: self.patch(prefix.end, last.start)? is Ok/Some",
          "    assert!(self.patch(last.end, splits).is_err());  // Precondition: self.patch(last.end, splits)? is Err/None"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"a\";",
          "    let compiler = Compiler::new(config, pattern.to_string());",
          "    let hir = Hir::parse(config, pattern).expect(\"Failed to parse Hir\");",
          "",
          "    let _ = compiler.c_at_least(&hir, false, 1);",
          "    assert_eq!(compiler.c_at_least(&hir, false, 0).is_ok(), true);  // Precondition: n == 0 is true",
          "    assert_eq!(compiler.c_at_least(&hir, false, 1).is_ok(), true);  // Precondition: n == 1 is true",
          "    assert!(self.c_exactly(&hir, 0).is_ok());  // Precondition: self.c_exactly(hir, n - 1)? is Ok/Some",
          "    assert!(self.c(&hir).is_ok());  // Precondition: self.c(hir)? is Ok/Some",
          "    assert!(self.add(State::Splits { targets: vec![], reverse: false }).is_ok());  // Precondition: self.add(State::Splits { targets: vec![], reverse: !greedy })? is Ok/Some",
          "    assert!(self.patch(prefix.end, last.start).is_ok());  // Precondition: self.patch(prefix.end, last.start)? is Ok/Some",
          "    assert!(self.patch(last.end, splits).is_err());  // Precondition: self.patch(last.end, splits)? is Err/None",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"ab\";",
          "    let compiler = Compiler::new(config, pattern.to_string());",
          "    let hir = Hir::parse(config, pattern).expect(\"Failed to parse Hir\");",
          "  ",
          "    let _ = compiler.c_at_least(&hir, true, 2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(compiler.c_at_least(&hir, true, 0).is_ok(), true);",
          "    assert_eq!(compiler.c_at_least(&hir, true, 1).is_ok(), true);",
          "    assert!(matches!(compiler.c_exactly(&hir, 1), Ok(_)));",
          "    assert!(matches!(compiler.c(&hir), Ok(_)));",
          "    assert!(matches!(compiler.add(State::Splits { targets: vec![], reverse: false }), Ok(_)));",
          "    assert!(matches!(compiler.patch(1, 2), Err(_)));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"ab\";",
          "    let compiler = Compiler::new(config, pattern.to_string());",
          "    let hir = Hir::parse(config, pattern).expect(\"Failed to parse Hir\");",
          "  ",
          "    let _ = compiler.c_at_least(&hir, true, 2);",
          "    assert_eq!(compiler.c_at_least(&hir, true, 0).is_ok(), true);",
          "    assert_eq!(compiler.c_at_least(&hir, true, 1).is_ok(), true);",
          "    assert!(matches!(compiler.c_exactly(&hir, 1), Ok(_)));",
          "    assert!(matches!(compiler.c(&hir), Ok(_)));",
          "    assert!(matches!(compiler.add(State::Splits { targets: vec![], reverse: false }), Ok(_)));",
          "    assert!(matches!(compiler.patch(1, 2), Err(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"xyz\";",
          "    let compiler = Compiler::new(config, pattern.to_string());",
          "    let hir = Hir::parse(config, pattern).expect(\"Failed to parse Hir\");",
          "",
          "    let _ = compiler.c_at_least(&hir, false, u32::MAX);",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"xyz\";",
          "    let compiler = Compiler::new(config, pattern.to_string());",
          "    let hir = Hir::parse(config, pattern).expect(\"Failed to parse Hir\");",
          "    let result = compiler.c_at_least(&hir, false, 0);",
          "    assert!(result.is_ok());",
          "    let result = compiler.c_at_least(&hir, false, 1);",
          "    assert!(result.is_ok());",
          "    let result = compiler.c_at_least(&hir, false, 2);",
          "    let prefix = compiler.c_exactly(&hir, 1).expect(\"Expected to compile exactly\");",
          "    let last = compiler.c(&hir).expect(\"Expected to compile\");",
          "    let result = compiler.add(State::Splits { targets: vec![], reverse: false });",
          "    assert!(result.is_ok());",
          "    let result = compiler.patch(prefix.end, last.start);",
          "    assert!(result.is_ok());",
          "    let result = compiler.patch(last.end, StateID::MAX);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"xyz\";",
          "    let compiler = Compiler::new(config, pattern.to_string());",
          "    let hir = Hir::parse(config, pattern).expect(\"Failed to parse Hir\");",
          "",
          "    let _ = compiler.c_at_least(&hir, false, u32::MAX);",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"xyz\";",
          "    let compiler = Compiler::new(config, pattern.to_string());",
          "    let hir = Hir::parse(config, pattern).expect(\"Failed to parse Hir\");",
          "    let result = compiler.c_at_least(&hir, false, 0);",
          "    assert!(result.is_ok());",
          "    let result = compiler.c_at_least(&hir, false, 1);",
          "    assert!(result.is_ok());",
          "    let result = compiler.c_at_least(&hir, false, 2);",
          "    let prefix = compiler.c_exactly(&hir, 1).expect(\"Expected to compile exactly\");",
          "    let last = compiler.c(&hir).expect(\"Expected to compile\");",
          "    let result = compiler.add(State::Splits { targets: vec![], reverse: false });",
          "    assert!(result.is_ok());",
          "    let result = compiler.patch(prefix.end, last.start);",
          "    assert!(result.is_ok());",
          "    let result = compiler.patch(last.end, StateID::MAX);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]