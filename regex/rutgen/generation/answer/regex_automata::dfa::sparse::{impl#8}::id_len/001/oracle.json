[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestTransitions(Vec<u8>);",
          "    ",
          "    let transitions = TestTransitions(vec![0; 10]);",
          "    let result = transitions.id_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, StateID::SIZE);",
          "    assert!(result.is::<usize>());",
          "    assert!(result > 0);",
          "    assert_eq!(transitions.id_len(), StateID::SIZE);",
          "    assert!(transitions.id_len() <= size_of::<StateID>());"
        ],
        "code": [
          "{",
          "    struct TestTransitions(Vec<u8>);",
          "    ",
          "    let transitions = TestTransitions(vec![0; 10]);",
          "    let result = transitions.id_len();",
          "    assert_eq!(result, StateID::SIZE);",
          "    assert!(result.is::<usize>());",
          "    assert!(result > 0);",
          "    assert_eq!(transitions.id_len(), StateID::SIZE);",
          "    assert!(transitions.id_len() <= size_of::<StateID>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestTransitions(Vec<u8>);",
          "    ",
          "    let transitions = TestTransitions(vec![0; 10]);",
          "    let result = transitions.id_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, StateID::SIZE);"
        ],
        "code": [
          "{",
          "    struct TestTransitions(Vec<u8>);",
          "    ",
          "    let transitions = TestTransitions(vec![0; 10]);",
          "    let result = transitions.id_len();",
          "    assert_eq!(result, StateID::SIZE);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestTransitions(Vec<u8>);",
          "    ",
          "    let transitions = TestTransitions(vec![0; 10]);",
          "    let result = transitions.id_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, StateID::SIZE);"
        ],
        "code": [
          "{",
          "    struct TestTransitions(Vec<u8>);",
          "    ",
          "    let transitions = TestTransitions(vec![0; 10]);",
          "    let result = transitions.id_len();",
          "    assert_eq!(result, StateID::SIZE);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]