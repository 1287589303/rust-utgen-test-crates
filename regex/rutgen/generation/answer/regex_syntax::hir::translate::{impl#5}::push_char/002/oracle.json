[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut translator = Translator { ",
          "        stack: RefCell::new(vec![HirFrame::Literal(vec![])]) ,",
          "        flags: Cell::new(Flags::default()), ",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    ",
          "    let translator_i = TranslatorI::new(&translator, \"test\");",
          "    translator_i.push_char('a');",
          "    translator_i.push_char('a');",
          "}"
        ],
        "oracle": [
          "    translator_i.trans().stack.borrow_mut().last().unwrap().as_literal().unwrap().len() == 2",
          "    translator_i.trans().stack.borrow_mut().last().unwrap().as_literal().unwrap()[0] == 'a' as u8",
          "    translator_i.trans().stack.borrow_mut().last().unwrap().as_literal().unwrap()[1] == 'a' as u8"
        ],
        "code": [
          "{",
          "    let mut translator = Translator { ",
          "        stack: RefCell::new(vec![HirFrame::Literal(vec![])]) ,",
          "        flags: Cell::new(Flags::default()), ",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    ",
          "    let translator_i = TranslatorI::new(&translator, \"test\");",
          "    translator_i.push_char('a');",
          "    translator_i.push_char('a');",
          "    translator_i.trans().stack.borrow_mut().last().unwrap().as_literal().unwrap().len() == 2",
          "    translator_i.trans().stack.borrow_mut().last().unwrap().as_literal().unwrap()[0] == 'a' as u8",
          "    translator_i.trans().stack.borrow_mut().last().unwrap().as_literal().unwrap()[1] == 'a' as u8",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut translator = Translator { ",
          "        stack: RefCell::new(vec![HirFrame::Literal(vec![])]) ,",
          "        flags: Cell::new(Flags::default()), ",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let translator_i = TranslatorI::new(&translator, \"test\");",
          "    translator_i.push_char('中');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(translator.stack.borrow().len(), 1);",
          "    assert_matches!(translator.stack.borrow().last(), Some(HirFrame::Literal(literal)) => assert_eq!(literal.as_slice(), b\"\\xe4\\xb8\\xad\"));",
          "    assert_eq!(translator_i.trans().stack.borrow().len(), 1);",
          "    assert_eq!(translator_i.trans().stack.borrow().last().unwrap(), &HirFrame::Literal(vec![0xe4, 0xb8, 0xad]));",
          "    assert!(translator.stack.borrow().last().unwrap().is_literal());"
        ],
        "code": [
          "{",
          "    let mut translator = Translator { ",
          "        stack: RefCell::new(vec![HirFrame::Literal(vec![])]) ,",
          "        flags: Cell::new(Flags::default()), ",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let translator_i = TranslatorI::new(&translator, \"test\");",
          "    translator_i.push_char('中');",
          "    assert_eq!(translator.stack.borrow().len(), 1);",
          "    assert_matches!(translator.stack.borrow().last(), Some(HirFrame::Literal(literal)) => assert_eq!(literal.as_slice(), b\"\\xe4\\xb8\\xad\"));",
          "    assert_eq!(translator_i.trans().stack.borrow().len(), 1);",
          "    assert_eq!(translator_i.trans().stack.borrow().last().unwrap(), &HirFrame::Literal(vec![0xe4, 0xb8, 0xad]));",
          "    assert!(translator.stack.borrow().last().unwrap().is_literal());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut translator = Translator { ",
          "        stack: RefCell::new(vec![HirFrame::Literal(vec![])]) ,",
          "        flags: Cell::new(Flags::default()), ",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let translator_i = TranslatorI::new(&translator, \"test\");",
          "    translator_i.push_char('a');",
          "    translator_i.push_char('b');",
          "    translator_i.push_char('中');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(translator.stack.borrow().len(), 1);",
          "    assert!(matches!(translator.stack.borrow().last(), Some(HirFrame::Literal(ref literal)) if literal == &vec![97, 98, 228, مله, 189]));",
          "    assert!(translator.stack.borrow().iter().all(|frame| matches!(frame, HirFrame::Literal(_))));",
          "    assert_eq!(translator.stack.borrow_mut().last_mut().unwrap().as_literal().len(), 5);",
          "    assert_eq!(translator.stack.borrow_mut().last_mut().unwrap().as_literal(), &vec![97, 98, 228, 189]);"
        ],
        "code": [
          "{",
          "    let mut translator = Translator { ",
          "        stack: RefCell::new(vec![HirFrame::Literal(vec![])]) ,",
          "        flags: Cell::new(Flags::default()), ",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let translator_i = TranslatorI::new(&translator, \"test\");",
          "    translator_i.push_char('a');",
          "    translator_i.push_char('b');",
          "    translator_i.push_char('中');",
          "    assert_eq!(translator.stack.borrow().len(), 1);",
          "    assert!(matches!(translator.stack.borrow().last(), Some(HirFrame::Literal(ref literal)) if literal == &vec![97, 98, 228, مله, 189]));",
          "    assert!(translator.stack.borrow().iter().all(|frame| matches!(frame, HirFrame::Literal(_))));",
          "    assert_eq!(translator.stack.borrow_mut().last_mut().unwrap().as_literal().len(), 5);",
          "    assert_eq!(translator.stack.borrow_mut().last_mut().unwrap().as_literal(), &vec![97, 98, 228, 189]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]