[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sparse_set = SparseSet::new(0);",
          "    let length = sparse_set.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(length, 0);"
        ],
        "code": [
          "{",
          "    let sparse_set = SparseSet::new(0);",
          "    let length = sparse_set.len();",
          "    assert_eq!(length, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sparse_set = SparseSet::new(10);",
          "    sparse_set.insert(StateID(1));",
          "    sparse_set.insert(StateID(2));",
          "    let length = sparse_set.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(length, 2);",
          "    assert_eq!(sparse_set.len(), length);",
          "    sparse_set.clear();",
          "    assert_eq!(sparse_set.len(), 0);",
          "    sparse_set.insert(StateID(3));",
          "    assert_eq!(sparse_set.len(), 1);"
        ],
        "code": [
          "{",
          "    let mut sparse_set = SparseSet::new(10);",
          "    sparse_set.insert(StateID(1));",
          "    sparse_set.insert(StateID(2));",
          "    let length = sparse_set.len();",
          "    assert_eq!(length, 2);",
          "    assert_eq!(sparse_set.len(), length);",
          "    sparse_set.clear();",
          "    assert_eq!(sparse_set.len(), 0);",
          "    sparse_set.insert(StateID(3));",
          "    assert_eq!(sparse_set.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sparse_set = SparseSet::new(10);",
          "    sparse_set.insert(StateID(1));",
          "    sparse_set.insert(StateID(2));",
          "    sparse_set.clear();",
          "    let length = sparse_set.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(length, 0);"
        ],
        "code": [
          "{",
          "    let mut sparse_set = SparseSet::new(10);",
          "    sparse_set.insert(StateID(1));",
          "    sparse_set.insert(StateID(2));",
          "    sparse_set.clear();",
          "    let length = sparse_set.len();",
          "    assert_eq!(length, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sparse_set = SparseSet::new(5);",
          "    sparse_set.insert(StateID(0));",
          "    sparse_set.insert(StateID(4));",
          "    let length = sparse_set.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(length, 2);"
        ],
        "code": [
          "{",
          "    let mut sparse_set = SparseSet::new(5);",
          "    sparse_set.insert(StateID(0));",
          "    sparse_set.insert(StateID(4));",
          "    let length = sparse_set.len();",
          "    assert_eq!(length, 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sparse_set = SparseSet::new(StateID::MAX.0 + 1);",
          "    for i in 0..=StateID::MAX.0 {",
          "        sparse_set.insert(StateID(i));",
          "    }",
          "    let length = sparse_set.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(length, StateID::MAX.0 + 1);"
        ],
        "code": [
          "{",
          "    let mut sparse_set = SparseSet::new(StateID::MAX.0 + 1);",
          "    for i in 0..=StateID::MAX.0 {",
          "        sparse_set.insert(StateID(i));",
          "    }",
          "    let length = sparse_set.len();",
          "    assert_eq!(length, StateID::MAX.0 + 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]