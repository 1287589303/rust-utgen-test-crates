[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_len: u32 = 1;",
          "    let stride2: u32 = 0;",
          "    let byte_classes: [u8; 256] = [0; 256];",
          "    let mut slice: [u8; 512] = [0; 512];",
          "",
          "    slice[0..4].copy_from_slice(&state_len.to_le_bytes());",
          "    slice[4..8].copy_from_slice(&stride2.to_le_bytes());",
          "    slice[8..264].copy_from_slice(&byte_classes);",
          "",
          "    let result = unsafe { from_bytes_unchecked(&mut slice) };",
          "    assert!(result.is_err());",
          "}"
        ],
        "oracle": [
          "    unsafe fn from_bytes_unchecked(slice: &mut [u8]) -> Result<(TransitionTable<&[u32]>, usize), DeserializeError> { ... }",
          "    ",
          "    let state_len: u32 = 1;",
          "    let stride2: u32 = 0;",
          "    let byte_classes: [u8; 256] = [0; 256];",
          "    ",
          "    slice[0..4].copy_from_slice(&state_len.to_le_bytes());",
          "    slice[4..8].copy_from_slice(&stride2.to_le_bytes());",
          "    slice[8..264].copy_from_slice(&byte_classes);",
          "    ",
          "    let result = unsafe { from_bytes_unchecked(&mut slice) };",
          "    assert_eq!(result, Err(DeserializeError::generic(\"dense DFA has invalid stride2 (too small)\")));"
        ],
        "code": [
          "{",
          "    let state_len: u32 = 1;",
          "    let stride2: u32 = 0;",
          "    let byte_classes: [u8; 256] = [0; 256];",
          "    let mut slice: [u8; 512] = [0; 512];",
          "",
          "    slice[0..4].copy_from_slice(&state_len.to_le_bytes());",
          "    slice[4..8].copy_from_slice(&stride2.to_le_bytes());",
          "    slice[8..264].copy_from_slice(&byte_classes);",
          "",
          "    let result = unsafe { from_bytes_unchecked(&mut slice) };",
          "    assert!(result.is_err());",
          "    unsafe fn from_bytes_unchecked(slice: &mut [u8]) -> Result<(TransitionTable<&[u32]>, usize), DeserializeError> { ... }",
          "    ",
          "    let state_len: u32 = 1;",
          "    let stride2: u32 = 0;",
          "    let byte_classes: [u8; 256] = [0; 256];",
          "    ",
          "    slice[0..4].copy_from_slice(&state_len.to_le_bytes());",
          "    slice[4..8].copy_from_slice(&stride2.to_le_bytes());",
          "    slice[8..264].copy_from_slice(&byte_classes);",
          "    ",
          "    let result = unsafe { from_bytes_unchecked(&mut slice) };",
          "    assert_eq!(result, Err(DeserializeError::generic(\"dense DFA has invalid stride2 (too small)\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_len: u32 = 1;",
          "    let stride2: u32 = 9;",
          "    let byte_classes: [u8; 256] = [0; 256];",
          "    let mut slice: [u8; 512] = [0; 512];",
          "",
          "    slice[0..4].copy_from_slice(&state_len.to_le_bytes());",
          "    slice[4..8].copy_from_slice(&stride2.to_le_bytes());",
          "    slice[8..264].copy_from_slice(&byte_classes);",
          "",
          "    let result = unsafe { from_bytes_unchecked(&mut slice) };",
          "    assert!(result.is_err());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(DeserializeError::generic(\"dense DFA has invalid stride2 (too small)\")));"
        ],
        "code": [
          "{",
          "    let state_len: u32 = 1;",
          "    let stride2: u32 = 9;",
          "    let byte_classes: [u8; 256] = [0; 256];",
          "    let mut slice: [u8; 512] = [0; 512];",
          "",
          "    slice[0..4].copy_from_slice(&state_len.to_le_bytes());",
          "    slice[4..8].copy_from_slice(&stride2.to_le_bytes());",
          "    slice[8..264].copy_from_slice(&byte_classes);",
          "",
          "    let result = unsafe { from_bytes_unchecked(&mut slice) };",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(DeserializeError::generic(\"dense DFA has invalid stride2 (too small)\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]