[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let r1 = SplitRange::Old(Utf8Range { start: 1, end: 2 });",
          "    let split = Split::parts1(r1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(split.len, 1);",
          "    assert_eq!(split.partitions[0], r1);",
          "    assert_eq!(split.partitions[1], SplitRange::Old(Utf8Range { start: 0, end: 0 }));",
          "    assert_eq!(split.partitions[2], SplitRange::Old(Utf8Range { start: 0, end: 0 }));"
        ],
        "code": [
          "{",
          "    let r1 = SplitRange::Old(Utf8Range { start: 1, end: 2 });",
          "    let split = Split::parts1(r1);",
          "    assert_eq!(split.len, 1);",
          "    assert_eq!(split.partitions[0], r1);",
          "    assert_eq!(split.partitions[1], SplitRange::Old(Utf8Range { start: 0, end: 0 }));",
          "    assert_eq!(split.partitions[2], SplitRange::Old(Utf8Range { start: 0, end: 0 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let r1 = SplitRange::Old(Utf8Range { start: 2, end: 2 });",
          "    let split = Split::parts1(r1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(split.len, 1);",
          "    assert_eq!(split.partitions[0], SplitRange::Old(Utf8Range { start: 2, end: 2 }));",
          "    assert_eq!(split.partitions[1], SplitRange::Old(Utf8Range { start: 0, end: 0 }));",
          "    assert_eq!(split.partitions[2], SplitRange::Old(Utf8Range { start: 0, end: 0 }));"
        ],
        "code": [
          "{",
          "    let r1 = SplitRange::Old(Utf8Range { start: 2, end: 2 });",
          "    let split = Split::parts1(r1);",
          "    assert_eq!(split.len, 1);",
          "    assert_eq!(split.partitions[0], SplitRange::Old(Utf8Range { start: 2, end: 2 }));",
          "    assert_eq!(split.partitions[1], SplitRange::Old(Utf8Range { start: 0, end: 0 }));",
          "    assert_eq!(split.partitions[2], SplitRange::Old(Utf8Range { start: 0, end: 0 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let r1 = SplitRange::Old(Utf8Range { start: 3, end: 2 });",
          "    let split = Split::parts1(r1);",
          "}"
        ],
        "oracle": [
          "    let expected_split = Split { partitions: [SplitRange::Old(Utf8Range { start: 3, end: 2 }), SplitRange::Old(Utf8Range { start: 0, end: 0 }), SplitRange::Old(Utf8Range { start: 0, end: 0 })], len: 1 };",
          "    assert_eq!(split, expected_split);"
        ],
        "code": [
          "{",
          "    let r1 = SplitRange::Old(Utf8Range { start: 3, end: 2 });",
          "    let split = Split::parts1(r1);",
          "    let expected_split = Split { partitions: [SplitRange::Old(Utf8Range { start: 3, end: 2 }), SplitRange::Old(Utf8Range { start: 0, end: 0 }), SplitRange::Old(Utf8Range { start: 0, end: 0 })], len: 1 };",
          "    assert_eq!(split, expected_split);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]