[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA::new_many(&[\"^a\", \"^b\"]).unwrap();",
          "    let pid = PatternID::must(0);",
          "    let _result = nfa.start_pattern(pid);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(nfa.start_pattern(PatternID::must(0)), Some(nfa.start_anchored()));",
          "    assert_ne!(nfa.start_pattern(PatternID::must(0)), nfa.start_pattern(PatternID::must(1)));",
          "    assert_eq!(nfa.start_pattern(PatternID::must(1)), Some(nfa.start_anchored()));",
          "    assert_eq!(nfa.start_pattern(PatternID::must(2)), None);"
        ],
        "code": [
          "{",
          "    let nfa = NFA::new_many(&[\"^a\", \"^b\"]).unwrap();",
          "    let pid = PatternID::must(0);",
          "    let _result = nfa.start_pattern(pid);",
          "    assert_eq!(nfa.start_pattern(PatternID::must(0)), Some(nfa.start_anchored()));",
          "    assert_ne!(nfa.start_pattern(PatternID::must(0)), nfa.start_pattern(PatternID::must(1)));",
          "    assert_eq!(nfa.start_pattern(PatternID::must(1)), Some(nfa.start_anchored()));",
          "    assert_eq!(nfa.start_pattern(PatternID::must(2)), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA::new_many(&[\"^a\", \"^b\"]).unwrap();",
          "    let pid = PatternID::must(1);",
          "    let _result = nfa.start_pattern(pid);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(nfa.start_pattern(PatternID::must(0)), Some(nfa.start_anchored()));",
          "    assert_ne!(nfa.start_pattern(PatternID::must(0)), nfa.start_pattern(PatternID::must(1)));",
          "    assert_eq!(nfa.start_pattern(PatternID::must(2)), None);",
          "    assert!(nfa.start_pattern(PatternID::must(1)).is_some());",
          "    assert!(nfa.start_pattern(PatternID::must(0)).is_some());",
          "    assert!(nfa.start_pattern(PatternID::must(3)).is_none());"
        ],
        "code": [
          "{",
          "    let nfa = NFA::new_many(&[\"^a\", \"^b\"]).unwrap();",
          "    let pid = PatternID::must(1);",
          "    let _result = nfa.start_pattern(pid);",
          "    assert_eq!(nfa.start_pattern(PatternID::must(0)), Some(nfa.start_anchored()));",
          "    assert_ne!(nfa.start_pattern(PatternID::must(0)), nfa.start_pattern(PatternID::must(1)));",
          "    assert_eq!(nfa.start_pattern(PatternID::must(2)), None);",
          "    assert!(nfa.start_pattern(PatternID::must(1)).is_some());",
          "    assert!(nfa.start_pattern(PatternID::must(0)).is_some());",
          "    assert!(nfa.start_pattern(PatternID::must(3)).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA::new_many(&[\"^a\", \"^b\"]).unwrap();",
          "    let pid = PatternID::must(2);",
          "    let _result = nfa.start_pattern(pid);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(nfa.start_pattern(PatternID::must(0)), Some(nfa.start_anchored()));",
          "    assert_eq!(nfa.start_pattern(PatternID::must(1)), Some(nfa.start_anchored()));",
          "    assert_eq!(nfa.start_pattern(PatternID::must(2)), None);",
          "    assert_ne!(nfa.start_pattern(PatternID::must(0)), nfa.start_pattern(PatternID::must(1)));",
          "    assert!(nfa.pattern_len() >= 2);",
          "    assert!(nfa.start_pattern(PatternID::must(0)).is_some());",
          "    assert!(nfa.start_pattern(PatternID::must(1)).is_some());"
        ],
        "code": [
          "{",
          "    let nfa = NFA::new_many(&[\"^a\", \"^b\"]).unwrap();",
          "    let pid = PatternID::must(2);",
          "    let _result = nfa.start_pattern(pid);",
          "    assert_eq!(nfa.start_pattern(PatternID::must(0)), Some(nfa.start_anchored()));",
          "    assert_eq!(nfa.start_pattern(PatternID::must(1)), Some(nfa.start_anchored()));",
          "    assert_eq!(nfa.start_pattern(PatternID::must(2)), None);",
          "    assert_ne!(nfa.start_pattern(PatternID::must(0)), nfa.start_pattern(PatternID::must(1)));",
          "    assert!(nfa.pattern_len() >= 2);",
          "    assert!(nfa.start_pattern(PatternID::must(0)).is_some());",
          "    assert!(nfa.start_pattern(PatternID::must(1)).is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]