[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let err = look::UnicodeWordBoundaryError(());",
          "    let result = BuildError::word(err);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind(), &BuildErrorKind::Word(err));",
          "    assert!(matches!(result, BuildError { kind: BuildErrorKind::Word(_) }));",
          "    assert!(result.size_limit().is_none());"
        ],
        "code": [
          "{",
          "    let err = look::UnicodeWordBoundaryError(());",
          "    let result = BuildError::word(err);",
          "    assert_eq!(result.kind(), &BuildErrorKind::Word(err));",
          "    assert!(matches!(result, BuildError { kind: BuildErrorKind::Word(_) }));",
          "    assert!(result.size_limit().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let err = look::UnicodeWordBoundaryError(());",
          "    let result = BuildError::word(err);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind(), &BuildErrorKind::Word(look::UnicodeWordBoundaryError(())));",
          "    assert!(result.size_limit().is_none());",
          "    assert!(matches!(result.kind(), BuildErrorKind::Word(_)));",
          "    assert!(matches!(result.kind(), BuildErrorKind::Word(look::UnicodeWordBoundaryError(_))));",
          "    assert!(result.kind().is::<BuildErrorKind>());"
        ],
        "code": [
          "{",
          "    let err = look::UnicodeWordBoundaryError(());",
          "    let result = BuildError::word(err);",
          "    assert_eq!(result.kind(), &BuildErrorKind::Word(look::UnicodeWordBoundaryError(())));",
          "    assert!(result.size_limit().is_none());",
          "    assert!(matches!(result.kind(), BuildErrorKind::Word(_)));",
          "    assert!(matches!(result.kind(), BuildErrorKind::Word(look::UnicodeWordBoundaryError(_))));",
          "    assert!(result.kind().is::<BuildErrorKind>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let err = look::UnicodeWordBoundaryError(());",
          "    let result = BuildError::word(err);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind(), &BuildErrorKind::Word(look::UnicodeWordBoundaryError(())));"
        ],
        "code": [
          "{",
          "    let err = look::UnicodeWordBoundaryError(());",
          "    let result = BuildError::word(err);",
          "    assert_eq!(result.kind(), &BuildErrorKind::Word(look::UnicodeWordBoundaryError(())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]