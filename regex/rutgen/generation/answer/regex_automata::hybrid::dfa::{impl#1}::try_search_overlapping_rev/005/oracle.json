[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA::builder()",
          "        .configure(DFA::config().match_kind(MatchKind::All))",
          "        .thompson(thompson::Config::new().reverse(true))",
          "        .build_many(&[\"valid_pattern\"])?;",
          "    let mut cache = dfa.create_cache();",
          "    let input = Input::new(\"valid UTF-8 input\");",
          "    let mut state = OverlappingState::start();",
          "",
          "    let result = dfa.try_search_overlapping_rev(&mut cache, &input, &mut state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_ok(), false);",
          "    assert_eq!(state.get_match().is_none(), true);",
          "    assert_eq!(self.get_nfa().has_empty(), false);"
        ],
        "code": [
          "{",
          "    let dfa = DFA::builder()",
          "        .configure(DFA::config().match_kind(MatchKind::All))",
          "        .thompson(thompson::Config::new().reverse(true))",
          "        .build_many(&[\"valid_pattern\"])?;",
          "    let mut cache = dfa.create_cache();",
          "    let input = Input::new(\"valid UTF-8 input\");",
          "    let mut state = OverlappingState::start();",
          "",
          "    let result = dfa.try_search_overlapping_rev(&mut cache, &input, &mut state);",
          "    assert_eq!(result.is_ok(), false);",
          "    assert_eq!(state.get_match().is_none(), true);",
          "    assert_eq!(self.get_nfa().has_empty(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA::builder()",
          "        .configure(DFA::config().match_kind(MatchKind::All))",
          "        .thompson(thompson::Config::new().reverse(true))",
          "        .build_many(&[\"another_pattern\"])?;",
          "    let mut cache = dfa.create_cache();",
          "    let input = Input::new(\"no match here\");",
          "    let mut state = OverlappingState::start();",
          "",
          "    let result = dfa.try_search_overlapping_rev(&mut cache, &input, &mut state);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert!(state.get_match().is_none());",
          "    assert!(cache.bytes_searched == 0);",
          "    assert!(!state.rev_eoi);",
          "    assert!(state.at == 0);"
        ],
        "code": [
          "{",
          "    let dfa = DFA::builder()",
          "        .configure(DFA::config().match_kind(MatchKind::All))",
          "        .thompson(thompson::Config::new().reverse(true))",
          "        .build_many(&[\"another_pattern\"])?;",
          "    let mut cache = dfa.create_cache();",
          "    let input = Input::new(\"no match here\");",
          "    let mut state = OverlappingState::start();",
          "",
          "    let result = dfa.try_search_overlapping_rev(&mut cache, &input, &mut state);",
          "    assert!(result.is_ok());",
          "    assert!(state.get_match().is_none());",
          "    assert!(cache.bytes_searched == 0);",
          "    assert!(!state.rev_eoi);",
          "    assert!(state.at == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA::builder()",
          "        .configure(DFA::config().match_kind(MatchKind::All))",
          "        .thompson(thompson::Config::new().reverse(true))",
          "        .build_many(&[\"yet_another_pattern\"])?;",
          "    let mut cache = dfa.create_cache();",
          "    let input = Input::new(\"more valid UTF-8 input\");",
          "    let mut state = OverlappingState::start();",
          "",
          "    let result = dfa.try_search_overlapping_rev(&mut cache, &input, &mut state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_ok(), false);",
          "    assert_eq!(state.get_match().is_none(), true);",
          "    assert_eq!(cache.bytes_searched, 0);",
          "    assert_eq!(state.at, 0);",
          "    assert_eq!(state.rev_eoi, false);",
          "    assert_eq!(state.id.is_none(), true);",
          "    assert_eq!(state.next_match_index.is_none(), true);"
        ],
        "code": [
          "{",
          "    let dfa = DFA::builder()",
          "        .configure(DFA::config().match_kind(MatchKind::All))",
          "        .thompson(thompson::Config::new().reverse(true))",
          "        .build_many(&[\"yet_another_pattern\"])?;",
          "    let mut cache = dfa.create_cache();",
          "    let input = Input::new(\"more valid UTF-8 input\");",
          "    let mut state = OverlappingState::start();",
          "",
          "    let result = dfa.try_search_overlapping_rev(&mut cache, &input, &mut state);",
          "    assert_eq!(result.is_ok(), false);",
          "    assert_eq!(state.get_match().is_none(), true);",
          "    assert_eq!(cache.bytes_searched, 0);",
          "    assert_eq!(state.at, 0);",
          "    assert_eq!(state.rev_eoi, false);",
          "    assert_eq!(state.id.is_none(), true);",
          "    assert_eq!(state.next_match_index.is_none(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]