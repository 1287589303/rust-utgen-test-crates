[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ScalarRange { start: 0, end: 127 };",
          "    range.is_ascii();",
          "}"
        ],
        "oracle": [
          "    assert!(range.is_valid());",
          "    assert!(range.end <= 0x7f);",
          "    assert_eq!(range.is_ascii(), true);"
        ],
        "code": [
          "{",
          "    let range = ScalarRange { start: 0, end: 127 };",
          "    range.is_ascii();",
          "    assert!(range.is_valid());",
          "    assert!(range.end <= 0x7f);",
          "    assert_eq!(range.is_ascii(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ScalarRange { start: 10, end: 50 };",
          "    range.is_ascii();",
          "}"
        ],
        "oracle": [
          "    assert!(range.is_valid());",
          "    assert!(range.end <= 0x7f);"
        ],
        "code": [
          "{",
          "    let range = ScalarRange { start: 10, end: 50 };",
          "    range.is_ascii();",
          "    assert!(range.is_valid());",
          "    assert!(range.end <= 0x7f);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ScalarRange { start: 60, end: 100 };",
          "    range.is_ascii();",
          "}"
        ],
        "oracle": [
          "    assert!(range.is_valid());",
          "    assert!(range.end <= 0x7f);",
          "    assert_eq!(range.is_ascii(), true);"
        ],
        "code": [
          "{",
          "    let range = ScalarRange { start: 60, end: 100 };",
          "    range.is_ascii();",
          "    assert!(range.is_valid());",
          "    assert!(range.end <= 0x7f);",
          "    assert_eq!(range.is_ascii(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ScalarRange { start: 0x7f, end: 0x7f };",
          "    range.is_ascii();",
          "}"
        ],
        "oracle": [
          "    assert!(range.is_valid());",
          "    assert!(range.end <= 0x7f);",
          "    assert_eq!(range.is_ascii(), true);"
        ],
        "code": [
          "{",
          "    let range = ScalarRange { start: 0x7f, end: 0x7f };",
          "    range.is_ascii();",
          "    assert!(range.is_valid());",
          "    assert!(range.end <= 0x7f);",
          "    assert_eq!(range.is_ascii(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ScalarRange { start: 1, end: 1 };",
          "    range.is_ascii();",
          "}"
        ],
        "oracle": [
          "    assert!(range.is_valid());",
          "    assert!(range.end <= 0x7f);",
          "    assert_eq!(range.is_ascii(), true);"
        ],
        "code": [
          "{",
          "    let range = ScalarRange { start: 1, end: 1 };",
          "    range.is_ascii();",
          "    assert!(range.is_valid());",
          "    assert!(range.end <= 0x7f);",
          "    assert_eq!(range.is_ascii(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]