[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let valid_range = ClassUnicodeRange { start: 'a', end: 'z' };",
          "    let interval_set = IntervalSet::new(vec![valid_range]);",
          "    let mut class_unicode = ClassUnicode { set: interval_set };",
          "    let _ = class_unicode.try_case_fold_simple();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_unicode.ranges().len(), 2);",
          "    assert!(class_unicode.ranges().contains(&ClassUnicodeRange { start: 'a', end: 'z' }));",
          "    assert!(class_unicode.ranges().contains(&ClassUnicodeRange { start: 'A', end: 'Z' }));",
          "    assert!(class_unicode.set.folded);",
          "    assert!(class_unicode.set.is_canonical());"
        ],
        "code": [
          "{",
          "    let valid_range = ClassUnicodeRange { start: 'a', end: 'z' };",
          "    let interval_set = IntervalSet::new(vec![valid_range]);",
          "    let mut class_unicode = ClassUnicode { set: interval_set };",
          "    let _ = class_unicode.try_case_fold_simple();",
          "    assert_eq!(class_unicode.ranges().len(), 2);",
          "    assert!(class_unicode.ranges().contains(&ClassUnicodeRange { start: 'a', end: 'z' }));",
          "    assert!(class_unicode.ranges().contains(&ClassUnicodeRange { start: 'A', end: 'Z' }));",
          "    assert!(class_unicode.set.folded);",
          "    assert!(class_unicode.set.is_canonical());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let interval_set = IntervalSet { ranges: vec![], folded: false };",
          "    let mut class_unicode = ClassUnicode { set: interval_set };",
          "    let _ = class_unicode.try_case_fold_simple();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_unicode.set.folded, true);",
          "    assert!(class_unicode.set.ranges.is_empty());",
          "    assert_eq!(class_unicode.try_case_fold_simple(), Err(CaseFoldError(())));",
          "    assert!(class_unicode.try_case_fold_simple().is_err());"
        ],
        "code": [
          "{",
          "    let interval_set = IntervalSet { ranges: vec![], folded: false };",
          "    let mut class_unicode = ClassUnicode { set: interval_set };",
          "    let _ = class_unicode.try_case_fold_simple();",
          "    assert_eq!(class_unicode.set.folded, true);",
          "    assert!(class_unicode.set.ranges.is_empty());",
          "    assert_eq!(class_unicode.try_case_fold_simple(), Err(CaseFoldError(())));",
          "    assert!(class_unicode.try_case_fold_simple().is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]