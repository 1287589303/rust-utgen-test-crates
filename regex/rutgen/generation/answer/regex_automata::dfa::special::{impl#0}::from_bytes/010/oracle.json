[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = vec![0; 8 * std::mem::size_of::<StateID>()];",
          "    let _ = Special::from_bytes(&bytes);",
          "}"
        ],
        "oracle": [
          "    assert!(Special::from_bytes(&vec![0; 8 * std::mem::size_of::<StateID>()]).is_ok());",
          "    assert!(wire::check_slice_len(&vec![0; 8 * std::mem::size_of::<StateID>()], 8 * StateID::SIZE, \"special states\").is_ok());",
          "    assert!(wire::try_read_state_id(&bytes, \"special max id\").is_ok());",
          "    assert!(wire::try_read_state_id(&bytes, \"special quit id\").is_ok());",
          "    assert!(wire::try_read_state_id(&bytes, \"special min match id\").is_ok());",
          "    assert!(wire::try_read_state_id(&bytes, \"special max match id\").is_ok());",
          "    assert!(wire::try_read_state_id(&bytes, \"special min accel id\").is_ok());",
          "    assert!(wire::try_read_state_id(&bytes, \"special max accel id\").is_ok());",
          "    assert!(wire::try_read_state_id(&bytes, \"special min start id\").is_ok());",
          "    assert!(wire::try_read_state_id(&bytes, \"special max start id\").is_ok());",
          "    assert!(Special::validate(&special).is_err());"
        ],
        "code": [
          "{",
          "    let bytes = vec![0; 8 * std::mem::size_of::<StateID>()];",
          "    let _ = Special::from_bytes(&bytes);",
          "    assert!(Special::from_bytes(&vec![0; 8 * std::mem::size_of::<StateID>()]).is_ok());",
          "    assert!(wire::check_slice_len(&vec![0; 8 * std::mem::size_of::<StateID>()], 8 * StateID::SIZE, \"special states\").is_ok());",
          "    assert!(wire::try_read_state_id(&bytes, \"special max id\").is_ok());",
          "    assert!(wire::try_read_state_id(&bytes, \"special quit id\").is_ok());",
          "    assert!(wire::try_read_state_id(&bytes, \"special min match id\").is_ok());",
          "    assert!(wire::try_read_state_id(&bytes, \"special max match id\").is_ok());",
          "    assert!(wire::try_read_state_id(&bytes, \"special min accel id\").is_ok());",
          "    assert!(wire::try_read_state_id(&bytes, \"special max accel id\").is_ok());",
          "    assert!(wire::try_read_state_id(&bytes, \"special min start id\").is_ok());",
          "    assert!(wire::try_read_state_id(&bytes, \"special max start id\").is_ok());",
          "    assert!(Special::validate(&special).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes = vec![0; 8 * std::mem::size_of::<StateID>()];",
          "    bytes[0..std::mem::size_of::<StateID>()].copy_from_slice(&0u32.to_ne_bytes()); // max",
          "    bytes[std::mem::size_of::<StateID>()..2 * std::mem::size_of::<StateID>()].copy_from_slice(&1u32.to_ne_bytes()); // quit_id",
          "    bytes[2 * std::mem::size_of::<StateID>()..3 * std::mem::size_of::<StateID>()].copy_from_slice(&2u32.to_ne_bytes()); // min_match",
          "    bytes[3 * std::mem::size_of::<StateID>()..4 * std::mem::size_of::<StateID>()].copy_from_slice(&2u32.to_ne_bytes()); // max_match",
          "    bytes[4 * std::mem::size_of::<StateID>()..5 * std::mem::size_of::<StateID>()].copy_from_slice(&3u32.to_ne_bytes()); // min_accel",
          "    bytes[5 * std::mem::size_of::<StateID>()..6 * std::mem::size_of::<StateID>()].copy_from_slice(&4u32.to_ne_bytes()); // max_accel",
          "    bytes[6 * std::mem::size_of::<StateID>()..7 * std::mem::size_of::<StateID>()].copy_from_slice(&5u32.to_ne_bytes()); // min_start",
          "    bytes[7 * std::mem::size_of::<StateID>()..8 * std::mem::size_of::<StateID>()].copy_from_slice(&6u32.to_ne_bytes()); // max_start",
          "    let _ = Special::from_bytes(&bytes);",
          "}"
        ],
        "oracle": [
          "    assert!(wire::check_slice_len(&bytes, 8 * StateID::SIZE, \"special states\").is_ok());",
          "    assert!(Special::from_bytes(&bytes).is_ok());",
          "    assert!(Special::from_bytes(&bytes).unwrap().1 == 8 * StateID::SIZE);",
          "    assert!(Special::from_bytes(&bytes).unwrap().0.validate().is_err());",
          "    assert!(Special::from_bytes(&bytes).unwrap().0.max == StateID(0));",
          "    assert!(Special::from_bytes(&bytes).unwrap().0.quit_id == StateID(1));",
          "    assert!(Special::from_bytes(&bytes).unwrap().0.min_match == StateID(2));",
          "    assert!(Special::from_bytes(&bytes).unwrap().0.max_match == StateID(2));",
          "    assert!(Special::from_bytes(&bytes).unwrap().0.min_accel == StateID(3));",
          "    assert!(Special::from_bytes(&bytes).unwrap().0.max_accel == StateID(4));",
          "    assert!(Special::from_bytes(&bytes).unwrap().0.min_start == StateID(5));",
          "    assert!(Special::from_bytes(&bytes).unwrap().0.max_start == StateID(6));"
        ],
        "code": [
          "{",
          "    let mut bytes = vec![0; 8 * std::mem::size_of::<StateID>()];",
          "    bytes[0..std::mem::size_of::<StateID>()].copy_from_slice(&0u32.to_ne_bytes()); // max",
          "    bytes[std::mem::size_of::<StateID>()..2 * std::mem::size_of::<StateID>()].copy_from_slice(&1u32.to_ne_bytes()); // quit_id",
          "    bytes[2 * std::mem::size_of::<StateID>()..3 * std::mem::size_of::<StateID>()].copy_from_slice(&2u32.to_ne_bytes()); // min_match",
          "    bytes[3 * std::mem::size_of::<StateID>()..4 * std::mem::size_of::<StateID>()].copy_from_slice(&2u32.to_ne_bytes()); // max_match",
          "    bytes[4 * std::mem::size_of::<StateID>()..5 * std::mem::size_of::<StateID>()].copy_from_slice(&3u32.to_ne_bytes()); // min_accel",
          "    bytes[5 * std::mem::size_of::<StateID>()..6 * std::mem::size_of::<StateID>()].copy_from_slice(&4u32.to_ne_bytes()); // max_accel",
          "    bytes[6 * std::mem::size_of::<StateID>()..7 * std::mem::size_of::<StateID>()].copy_from_slice(&5u32.to_ne_bytes()); // min_start",
          "    bytes[7 * std::mem::size_of::<StateID>()..8 * std::mem::size_of::<StateID>()].copy_from_slice(&6u32.to_ne_bytes()); // max_start",
          "    let _ = Special::from_bytes(&bytes);",
          "    assert!(wire::check_slice_len(&bytes, 8 * StateID::SIZE, \"special states\").is_ok());",
          "    assert!(Special::from_bytes(&bytes).is_ok());",
          "    assert!(Special::from_bytes(&bytes).unwrap().1 == 8 * StateID::SIZE);",
          "    assert!(Special::from_bytes(&bytes).unwrap().0.validate().is_err());",
          "    assert!(Special::from_bytes(&bytes).unwrap().0.max == StateID(0));",
          "    assert!(Special::from_bytes(&bytes).unwrap().0.quit_id == StateID(1));",
          "    assert!(Special::from_bytes(&bytes).unwrap().0.min_match == StateID(2));",
          "    assert!(Special::from_bytes(&bytes).unwrap().0.max_match == StateID(2));",
          "    assert!(Special::from_bytes(&bytes).unwrap().0.min_accel == StateID(3));",
          "    assert!(Special::from_bytes(&bytes).unwrap().0.max_accel == StateID(4));",
          "    assert!(Special::from_bytes(&bytes).unwrap().0.min_start == StateID(5));",
          "    assert!(Special::from_bytes(&bytes).unwrap().0.max_start == StateID(6));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes = vec![0; 8 * std::mem::size_of::<StateID>()];",
          "    bytes[0..std::mem::size_of::<StateID>()].copy_from_slice(&3u32.to_ne_bytes()); // max",
          "    bytes[std::mem::size_of::<StateID>()..2 * std::mem::size_of::<StateID>()].copy_from_slice(&2u32.to_ne_bytes()); // quit_id",
          "    bytes[2 * std::mem::size_of::<StateID>()..3 * std::mem::size_of::<StateID>()].copy_from_slice(&1u32.to_ne_bytes()); // min_match",
          "    bytes[3 * std::mem::size_of::<StateID>()..4 * std::mem::size_of::<StateID>()].copy_from_slice(&4u32.to_ne_bytes()); // max_match",
          "    bytes[4 * std::mem::size_of::<StateID>()..5 * std::mem::size_of::<StateID>()].copy_from_slice(&5u32.to_ne_bytes()); // min_accel",
          "    bytes[5 * std::mem::size_of::<StateID>()..6 * std::mem::size_of::<StateID>()].copy_from_slice(&6u32.to_ne_bytes()); // max_accel",
          "    bytes[6 * std::mem::size_of::<StateID>()..7 * std::mem::size_of::<StateID>()].copy_from_slice(&7u32.to_ne_bytes()); // min_start",
          "    bytes[7 * std::mem::size_of::<StateID>()..8 * std::mem::size_of::<StateID>()].copy_from_slice(&8u32.to_ne_bytes()); // max_start",
          "    let _ = Special::from_bytes(&bytes);",
          "}"
        ],
        "oracle": [
          "    assert!(wire::check_slice_len(&bytes, 8 * StateID::SIZE, \"special states\").is_ok());",
          "    let special_result = Special::from_bytes(&bytes);",
          "    assert!(special_result.is_err());"
        ],
        "code": [
          "{",
          "    let mut bytes = vec![0; 8 * std::mem::size_of::<StateID>()];",
          "    bytes[0..std::mem::size_of::<StateID>()].copy_from_slice(&3u32.to_ne_bytes()); // max",
          "    bytes[std::mem::size_of::<StateID>()..2 * std::mem::size_of::<StateID>()].copy_from_slice(&2u32.to_ne_bytes()); // quit_id",
          "    bytes[2 * std::mem::size_of::<StateID>()..3 * std::mem::size_of::<StateID>()].copy_from_slice(&1u32.to_ne_bytes()); // min_match",
          "    bytes[3 * std::mem::size_of::<StateID>()..4 * std::mem::size_of::<StateID>()].copy_from_slice(&4u32.to_ne_bytes()); // max_match",
          "    bytes[4 * std::mem::size_of::<StateID>()..5 * std::mem::size_of::<StateID>()].copy_from_slice(&5u32.to_ne_bytes()); // min_accel",
          "    bytes[5 * std::mem::size_of::<StateID>()..6 * std::mem::size_of::<StateID>()].copy_from_slice(&6u32.to_ne_bytes()); // max_accel",
          "    bytes[6 * std::mem::size_of::<StateID>()..7 * std::mem::size_of::<StateID>()].copy_from_slice(&7u32.to_ne_bytes()); // min_start",
          "    bytes[7 * std::mem::size_of::<StateID>()..8 * std::mem::size_of::<StateID>()].copy_from_slice(&8u32.to_ne_bytes()); // max_start",
          "    let _ = Special::from_bytes(&bytes);",
          "    assert!(wire::check_slice_len(&bytes, 8 * StateID::SIZE, \"special states\").is_ok());",
          "    let special_result = Special::from_bytes(&bytes);",
          "    assert!(special_result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes = vec![0; 8 * std::mem::size_of::<StateID>()];",
          "    bytes[0..std::mem::size_of::<StateID>()].copy_from_slice(&3u32.to_ne_bytes()); // max",
          "    bytes[std::mem::size_of::<StateID>()..2 * std::mem::size_of::<StateID>()].copy_from_slice(&2u32.to_ne_bytes()); // quit_id",
          "    bytes[2 * std::mem::size_of::<StateID>()..3 * std::mem::size_of::<StateID>()].copy_from_slice(&5u32.to_ne_bytes()); // min_match",
          "    bytes[3 * std::mem::size_of::<StateID>()..4 * std::mem::size_of::<StateID>()].copy_from_slice(&3u32.to_ne_bytes()); // max_match",
          "    bytes[4 * std::mem::size_of::<StateID>()..5 * std::mem::size_of::<StateID>()].copy_from_slice(&2u32.to_ne_bytes()); // min_accel",
          "    bytes[5 * std::mem::size_of::<StateID>()..6 * std::mem::size_of::<StateID>()].copy_from_slice(&4u32.to_ne_bytes()); // max_accel",
          "    bytes[6 * std::mem::size_of::<StateID>()..7 * std::mem::size_of::<StateID>()].copy_from_slice(&5u32.to_ne_bytes()); // min_start",
          "    bytes[7 * std::mem::size_of::<StateID>()..8 * std::mem::size_of::<StateID>()].copy_from_slice(&6u32.to_ne_bytes()); // max_start",
          "    let result = Special::from_bytes(&bytes);",
          "    assert!(result.is_err());",
          "}"
        ],
        "oracle": [
          "    wire::check_slice_len(&bytes, 8 * StateID::SIZE, \"special states\").is_ok();",
          "    let max_result = read_id(\"special max id\").is_ok();",
          "    let quit_id_result = read_id(\"special quit id\").is_ok();",
          "    let min_match_result = read_id(\"special min match id\").is_ok();",
          "    let max_match_result = read_id(\"special max match id\").is_ok();",
          "    let min_accel_result = read_id(\"special min accel id\").is_ok();",
          "    let max_accel_result = read_id(\"special max accel id\").is_ok();",
          "    let min_start_result = read_id(\"special min start id\").is_ok();",
          "    let max_start_result = read_id(\"special max start id\").is_ok();",
          "    let validate_result = special.validate().is_err();"
        ],
        "code": [
          "{",
          "    let mut bytes = vec![0; 8 * std::mem::size_of::<StateID>()];",
          "    bytes[0..std::mem::size_of::<StateID>()].copy_from_slice(&3u32.to_ne_bytes()); // max",
          "    bytes[std::mem::size_of::<StateID>()..2 * std::mem::size_of::<StateID>()].copy_from_slice(&2u32.to_ne_bytes()); // quit_id",
          "    bytes[2 * std::mem::size_of::<StateID>()..3 * std::mem::size_of::<StateID>()].copy_from_slice(&5u32.to_ne_bytes()); // min_match",
          "    bytes[3 * std::mem::size_of::<StateID>()..4 * std::mem::size_of::<StateID>()].copy_from_slice(&3u32.to_ne_bytes()); // max_match",
          "    bytes[4 * std::mem::size_of::<StateID>()..5 * std::mem::size_of::<StateID>()].copy_from_slice(&2u32.to_ne_bytes()); // min_accel",
          "    bytes[5 * std::mem::size_of::<StateID>()..6 * std::mem::size_of::<StateID>()].copy_from_slice(&4u32.to_ne_bytes()); // max_accel",
          "    bytes[6 * std::mem::size_of::<StateID>()..7 * std::mem::size_of::<StateID>()].copy_from_slice(&5u32.to_ne_bytes()); // min_start",
          "    bytes[7 * std::mem::size_of::<StateID>()..8 * std::mem::size_of::<StateID>()].copy_from_slice(&6u32.to_ne_bytes()); // max_start",
          "    let result = Special::from_bytes(&bytes);",
          "    assert!(result.is_err());",
          "    wire::check_slice_len(&bytes, 8 * StateID::SIZE, \"special states\").is_ok();",
          "    let max_result = read_id(\"special max id\").is_ok();",
          "    let quit_id_result = read_id(\"special quit id\").is_ok();",
          "    let min_match_result = read_id(\"special min match id\").is_ok();",
          "    let max_match_result = read_id(\"special max match id\").is_ok();",
          "    let min_accel_result = read_id(\"special min accel id\").is_ok();",
          "    let max_accel_result = read_id(\"special max accel id\").is_ok();",
          "    let min_start_result = read_id(\"special min start id\").is_ok();",
          "    let max_start_result = read_id(\"special max start id\").is_ok();",
          "    let validate_result = special.validate().is_err();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes = vec![0; 8 * std::mem::size_of::<StateID>()];",
          "    bytes[0..std::mem::size_of::<StateID>()].copy_from_slice(&3u32.to_ne_bytes()); // max",
          "    bytes[std::mem::size_of::<StateID>()..2 * std::mem::size_of::<StateID>()].copy_from_slice(&4u32.to_ne_bytes()); // quit_id",
          "    bytes[2 * std::mem::size_of::<StateID>()..3 * std::mem::size_of::<StateID>()].copy_from_slice(&2u32.to_ne_bytes()); // min_match",
          "    bytes[3 * std::mem::size_of::<StateID>()..4 * std::mem::size_of::<StateID>()].copy_from_slice(&5u32.to_ne_bytes()); // max_match",
          "    bytes[4 * std::mem::size_of::<StateID>()..5 * std::mem::size_of::<StateID>()].copy_from_slice(&1u32.to_ne_bytes()); // min_accel",
          "    bytes[5 * std::mem::size_of::<StateID>()..6 * std::mem::size_of::<StateID>()].copy_from_slice(&2u32.to_ne_bytes()); // max_accel",
          "    bytes[6 * std::mem::size_of::<StateID>()..7 * std::mem::size_of::<StateID>()].copy_from_slice(&3u32.to_ne_bytes()); // min_start",
          "    bytes[7 * std::mem::size_of::<StateID>()..8 * std::mem::size_of::<StateID>()].copy_from_slice(&4u32.to_ne_bytes()); // max_start",
          "    let result = Special::from_bytes(&bytes);",
          "    assert!(result.is_err());",
          "}"
        ],
        "oracle": [
          "    assert!(Special::from_bytes(&vec![0; 8 * std::mem::size_of::<StateID>()]).is_ok());",
          "    assert!(Special::from_bytes(&[3u32.to_ne_bytes(), 4u32.to_ne_bytes(), 2u32.to_ne_bytes(), 5u32.to_ne_bytes(), 1u32.to_ne_bytes(), 2u32.to_ne_bytes(), 3u32.to_ne_bytes(), 4u32.to_ne_bytes()].concat()).is_err());",
          "    assert!(Special::from_bytes(&[3u32.to_ne_bytes(), 4u32.to_ne_bytes(), 2u32.to_ne_bytes(), 5u32.to_ne_bytes(), 1u32.to_ne_bytes(), 2u32.to_ne_bytes(), 3u32.to_ne_bytes(), 0u32.to_ne_bytes()].concat()).is_err());",
          "    assert!(Special::from_bytes(&[3u32.to_ne_bytes(), 4u32.to_ne_bytes(), 6u32.to_ne_bytes(), 5u32.to_ne_bytes(), 1u32.to_ne_bytes(), 2u32.to_ne_bytes(), 3u32.to_ne_bytes(), 4u32.to_ne_bytes()].concat()).is_err());",
          "    assert!(Special::from_bytes(&[3u32.to_ne_bytes(), 4u32.to_ne_bytes(), 2u32.to_ne_bytes(), 4u32.to_ne_bytes(), 1u32.to_ne_bytes(), 2u32.to_ne_bytes(), 3u32.to_ne_bytes(), 4u32.to_ne_bytes()].concat()).is_err());",
          "    assert!(Special::from_bytes(&[3u32.to_ne_bytes(), 4u32.to_ne_bytes(), 2u32.to_ne_bytes(), 5u32.to_ne_bytes(), 2u32.to_ne_bytes(), 2u32.to_ne_bytes(), 3u32.to_ne_bytes(), 4u32.to_ne_bytes()].concat()).is_err());",
          "    assert!(Special::from_bytes(&[3u32.to_ne_bytes(), 4u32.to_ne_bytes(), 2u32.to_ne_bytes(), 5u32.to_ne_bytes(), 1u32.to_ne_bytes(), 2u32.to_ne_bytes(), 3u32.to_ne_bytes(), 5u32.to_ne_bytes()].concat()).is_err());"
        ],
        "code": [
          "{",
          "    let mut bytes = vec![0; 8 * std::mem::size_of::<StateID>()];",
          "    bytes[0..std::mem::size_of::<StateID>()].copy_from_slice(&3u32.to_ne_bytes()); // max",
          "    bytes[std::mem::size_of::<StateID>()..2 * std::mem::size_of::<StateID>()].copy_from_slice(&4u32.to_ne_bytes()); // quit_id",
          "    bytes[2 * std::mem::size_of::<StateID>()..3 * std::mem::size_of::<StateID>()].copy_from_slice(&2u32.to_ne_bytes()); // min_match",
          "    bytes[3 * std::mem::size_of::<StateID>()..4 * std::mem::size_of::<StateID>()].copy_from_slice(&5u32.to_ne_bytes()); // max_match",
          "    bytes[4 * std::mem::size_of::<StateID>()..5 * std::mem::size_of::<StateID>()].copy_from_slice(&1u32.to_ne_bytes()); // min_accel",
          "    bytes[5 * std::mem::size_of::<StateID>()..6 * std::mem::size_of::<StateID>()].copy_from_slice(&2u32.to_ne_bytes()); // max_accel",
          "    bytes[6 * std::mem::size_of::<StateID>()..7 * std::mem::size_of::<StateID>()].copy_from_slice(&3u32.to_ne_bytes()); // min_start",
          "    bytes[7 * std::mem::size_of::<StateID>()..8 * std::mem::size_of::<StateID>()].copy_from_slice(&4u32.to_ne_bytes()); // max_start",
          "    let result = Special::from_bytes(&bytes);",
          "    assert!(result.is_err());",
          "    assert!(Special::from_bytes(&vec![0; 8 * std::mem::size_of::<StateID>()]).is_ok());",
          "    assert!(Special::from_bytes(&[3u32.to_ne_bytes(), 4u32.to_ne_bytes(), 2u32.to_ne_bytes(), 5u32.to_ne_bytes(), 1u32.to_ne_bytes(), 2u32.to_ne_bytes(), 3u32.to_ne_bytes(), 4u32.to_ne_bytes()].concat()).is_err());",
          "    assert!(Special::from_bytes(&[3u32.to_ne_bytes(), 4u32.to_ne_bytes(), 2u32.to_ne_bytes(), 5u32.to_ne_bytes(), 1u32.to_ne_bytes(), 2u32.to_ne_bytes(), 3u32.to_ne_bytes(), 0u32.to_ne_bytes()].concat()).is_err());",
          "    assert!(Special::from_bytes(&[3u32.to_ne_bytes(), 4u32.to_ne_bytes(), 6u32.to_ne_bytes(), 5u32.to_ne_bytes(), 1u32.to_ne_bytes(), 2u32.to_ne_bytes(), 3u32.to_ne_bytes(), 4u32.to_ne_bytes()].concat()).is_err());",
          "    assert!(Special::from_bytes(&[3u32.to_ne_bytes(), 4u32.to_ne_bytes(), 2u32.to_ne_bytes(), 4u32.to_ne_bytes(), 1u32.to_ne_bytes(), 2u32.to_ne_bytes(), 3u32.to_ne_bytes(), 4u32.to_ne_bytes()].concat()).is_err());",
          "    assert!(Special::from_bytes(&[3u32.to_ne_bytes(), 4u32.to_ne_bytes(), 2u32.to_ne_bytes(), 5u32.to_ne_bytes(), 2u32.to_ne_bytes(), 2u32.to_ne_bytes(), 3u32.to_ne_bytes(), 4u32.to_ne_bytes()].concat()).is_err());",
          "    assert!(Special::from_bytes(&[3u32.to_ne_bytes(), 4u32.to_ne_bytes(), 2u32.to_ne_bytes(), 5u32.to_ne_bytes(), 1u32.to_ne_bytes(), 2u32.to_ne_bytes(), 3u32.to_ne_bytes(), 5u32.to_ne_bytes()].concat()).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]