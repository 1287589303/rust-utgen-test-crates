[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: Vec<u8> = vec![0u8; 8 * std::mem::size_of::<StateID>()]; // Instantiate with enough size",
          "    let result = Special::from_bytes(&slice);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let (special, nread) = result.unwrap();",
          "    assert_eq!(nread, 8 * std::mem::size_of::<StateID>());",
          "    assert_eq!(special.max, StateID(0));",
          "    assert_eq!(special.quit_id, StateID(0));",
          "    assert_eq!(special.min_match, StateID(0));",
          "    assert_eq!(special.max_match, StateID(0));",
          "    assert_eq!(special.min_accel, StateID(0));",
          "    assert_eq!(special.max_accel, StateID(0));",
          "    assert_eq!(special.min_start, StateID(0));",
          "    assert_eq!(special.max_start, StateID(0));"
        ],
        "code": [
          "{",
          "    let slice: Vec<u8> = vec![0u8; 8 * std::mem::size_of::<StateID>()]; // Instantiate with enough size",
          "    let result = Special::from_bytes(&slice);",
          "    assert!(result.is_ok());",
          "    let (special, nread) = result.unwrap();",
          "    assert_eq!(nread, 8 * std::mem::size_of::<StateID>());",
          "    assert_eq!(special.max, StateID(0));",
          "    assert_eq!(special.quit_id, StateID(0));",
          "    assert_eq!(special.min_match, StateID(0));",
          "    assert_eq!(special.max_match, StateID(0));",
          "    assert_eq!(special.min_accel, StateID(0));",
          "    assert_eq!(special.max_accel, StateID(0));",
          "    assert_eq!(special.min_start, StateID(0));",
          "    assert_eq!(special.max_start, StateID(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let slice: Vec<u8> = {",
          "        let mut data = vec![0u8; 8 * std::mem::size_of::<StateID>()];",
          "        data[16..24].copy_from_slice(&[0xFF; 8]); // Set up invalid min_match",
          "        data",
          "    };",
          "    let result = Special::from_bytes(&slice);",
          "}"
        ],
        "oracle": [
          "    assert!(Special::from_bytes(&slice).is_err());"
        ],
        "code": [
          "{",
          "    let slice: Vec<u8> = {",
          "        let mut data = vec![0u8; 8 * std::mem::size_of::<StateID>()];",
          "        data[16..24].copy_from_slice(&[0xFF; 8]); // Set up invalid min_match",
          "        data",
          "    };",
          "    let result = Special::from_bytes(&slice);",
          "    assert!(Special::from_bytes(&slice).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]