[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: [u8; 8 * std::mem::size_of::<StateID>()] = [",
          "        // fill with valid encoded StateID values",
          "        1, 0, 0, 0, 0, 0, 0, 0, // max",
          "        2, 0, 0, 0, 0, 0, 0, 0, // quit_id",
          "        3, 0, 0, 0, 0, 0, 0, 0, // min_match",
          "        4, 0, 0, 0, 0, 0, 0, 0, // max_match",
          "        5, 0, 0, 0, 0, 0, 0, 0, // min_accel",
          "        6, 0, 0, 0, 0, 0, 0, 0, // max_accel",
          "        7, 0, 0, 0, 0, 0, 0, 0, // min_start",
          "        8, 0, 0, 0, 0, 0, 0, 0, // max_start",
          "    ];",
          "    ",
          "    let result = from_bytes(&slice);",
          "}"
        ],
        "oracle": [
          "    assert!(wire::check_slice_len(&slice, 8 * StateID::SIZE, \"special states\").is_ok());",
          "    let (special, nread) = result.unwrap();",
          "    assert!(read_id(\"special max id\").is_ok());",
          "    assert!(read_id(\"special quit id\").is_ok());",
          "    assert!(read_id(\"special min match id\").is_ok());",
          "    assert!(read_id(\"special max match id\").is_ok());",
          "    assert!(read_id(\"special min accel id\").is_ok());",
          "    assert!(read_id(\"special max accel id\").is_ok());",
          "    assert!(read_id(\"special min start id\").is_ok());",
          "    assert!(read_id(\"special max start id\").is_ok());",
          "    assert!(special.validate().is_ok());",
          "    assert_eq!(nread, special.write_to_len());",
          "    assert_eq!(result, Ok((special, nread)));"
        ],
        "code": [
          "{",
          "    let slice: [u8; 8 * std::mem::size_of::<StateID>()] = [",
          "        // fill with valid encoded StateID values",
          "        1, 0, 0, 0, 0, 0, 0, 0, // max",
          "        2, 0, 0, 0, 0, 0, 0, 0, // quit_id",
          "        3, 0, 0, 0, 0, 0, 0, 0, // min_match",
          "        4, 0, 0, 0, 0, 0, 0, 0, // max_match",
          "        5, 0, 0, 0, 0, 0, 0, 0, // min_accel",
          "        6, 0, 0, 0, 0, 0, 0, 0, // max_accel",
          "        7, 0, 0, 0, 0, 0, 0, 0, // min_start",
          "        8, 0, 0, 0, 0, 0, 0, 0, // max_start",
          "    ];",
          "    ",
          "    let result = from_bytes(&slice);",
          "    assert!(wire::check_slice_len(&slice, 8 * StateID::SIZE, \"special states\").is_ok());",
          "    let (special, nread) = result.unwrap();",
          "    assert!(read_id(\"special max id\").is_ok());",
          "    assert!(read_id(\"special quit id\").is_ok());",
          "    assert!(read_id(\"special min match id\").is_ok());",
          "    assert!(read_id(\"special max match id\").is_ok());",
          "    assert!(read_id(\"special min accel id\").is_ok());",
          "    assert!(read_id(\"special max accel id\").is_ok());",
          "    assert!(read_id(\"special min start id\").is_ok());",
          "    assert!(read_id(\"special max start id\").is_ok());",
          "    assert!(special.validate().is_ok());",
          "    assert_eq!(nread, special.write_to_len());",
          "    assert_eq!(result, Ok((special, nread)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: [u8; 8 * std::mem::size_of::<StateID>()] = [",
          "        // fill with valid StateIDs, ensuring the dead state is appropriately represented",
          "        1, 0, 0, 0, 0, 0, 0, 0, // max",
          "        0, 0, 0, 0, 0, 0, 0, 0, // quit_id (dead state)",
          "        0, 0, 0, 0, 0, 0, 0, 0, // min_match (dead state)",
          "        3, 0, 0, 0, 0, 0, 0, 0, // max_match",
          "        4, 0, 0, 0, 0, 0, 0, 0, // min_accel",
          "        5, 0, 0, 0, 0, 0, 0, 0, // max_accel",
          "        6, 0, 0, 0, 0, 0, 0, 0, // min_start",
          "        7, 0, 0, 0, 0, 0, 0, 0, // max_start",
          "    ];",
          "   ",
          "    let result = from_bytes(&slice);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok((special, nread)));",
          "    assert!(result.is_ok());",
          "    assert!(wire::check_slice_len(&slice, 8 * StateID::SIZE, \"special states\").is_ok());",
          "    assert!(read_id(\"special max id\").is_ok());",
          "    assert!(read_id(\"special quit id\").is_ok());",
          "    assert!(read_id(\"special min match id\").is_ok());",
          "    assert!(read_id(\"special max match id\").is_ok());",
          "    assert!(read_id(\"special min accel id\").is_ok());",
          "    assert!(read_id(\"special max accel id\").is_ok());",
          "    assert!(read_id(\"special min start id\").is_ok());",
          "    assert!(read_id(\"special max start id\").is_ok());",
          "    assert!(special.validate().is_ok());",
          "    assert_eq!(nread, special.write_to_len());",
          "    assert_eq!(special.min_match, DEAD);",
          "    assert_eq!(special.max_match, 3);",
          "    assert_eq!(special.min_accel, 4);",
          "    assert_eq!(special.max_accel, 5);",
          "    assert_eq!(special.min_start, 6);",
          "    assert_eq!(special.max_start, 7);",
          "    assert_eq!(special.max, 1);",
          "    assert_eq!(special.quit_id, DEAD);"
        ],
        "code": [
          "{",
          "    let slice: [u8; 8 * std::mem::size_of::<StateID>()] = [",
          "        // fill with valid StateIDs, ensuring the dead state is appropriately represented",
          "        1, 0, 0, 0, 0, 0, 0, 0, // max",
          "        0, 0, 0, 0, 0, 0, 0, 0, // quit_id (dead state)",
          "        0, 0, 0, 0, 0, 0, 0, 0, // min_match (dead state)",
          "        3, 0, 0, 0, 0, 0, 0, 0, // max_match",
          "        4, 0, 0, 0, 0, 0, 0, 0, // min_accel",
          "        5, 0, 0, 0, 0, 0, 0, 0, // max_accel",
          "        6, 0, 0, 0, 0, 0, 0, 0, // min_start",
          "        7, 0, 0, 0, 0, 0, 0, 0, // max_start",
          "    ];",
          "   ",
          "    let result = from_bytes(&slice);",
          "    assert_eq!(result, Ok((special, nread)));",
          "    assert!(result.is_ok());",
          "    assert!(wire::check_slice_len(&slice, 8 * StateID::SIZE, \"special states\").is_ok());",
          "    assert!(read_id(\"special max id\").is_ok());",
          "    assert!(read_id(\"special quit id\").is_ok());",
          "    assert!(read_id(\"special min match id\").is_ok());",
          "    assert!(read_id(\"special max match id\").is_ok());",
          "    assert!(read_id(\"special min accel id\").is_ok());",
          "    assert!(read_id(\"special max accel id\").is_ok());",
          "    assert!(read_id(\"special min start id\").is_ok());",
          "    assert!(read_id(\"special max start id\").is_ok());",
          "    assert!(special.validate().is_ok());",
          "    assert_eq!(nread, special.write_to_len());",
          "    assert_eq!(special.min_match, DEAD);",
          "    assert_eq!(special.max_match, 3);",
          "    assert_eq!(special.min_accel, 4);",
          "    assert_eq!(special.max_accel, 5);",
          "    assert_eq!(special.min_start, 6);",
          "    assert_eq!(special.max_start, 7);",
          "    assert_eq!(special.max, 1);",
          "    assert_eq!(special.quit_id, DEAD);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: [u8; 8 * std::mem::size_of::<StateID>()] = [",
          "        // All StateIDs are equal to satisfy validate conditions",
          "        1, 0, 0, 0, 0, 0, 0, 0, // max",
          "        1, 0, 0, 0, 0, 0, 0, 0, // quit_id",
          "        1, 0, 0, 0, 0, 0, 0, 0, // min_match",
          "        1, 0, 0, 0, 0, 0, 0, 0, // max_match",
          "        1, 0, 0, 0, 0, 0, 0, 0, // min_accel",
          "        1, 0, 0, 0, 0, 0, 0, 0, // max_accel",
          "        1, 0, 0, 0, 0, 0, 0, 0, // min_start",
          "        1, 0, 0, 0, 0, 0, 0, 0, // max_start",
          "    ];",
          "",
          "    let result = from_bytes(&slice);",
          "}"
        ],
        "oracle": [
          "    assert!(wire::check_slice_len(&slice, 8 * StateID::SIZE, \"special states\").is_ok());",
          "    let (special, nread) = from_bytes(&slice).unwrap();",
          "    assert_eq!(nread, special.write_to_len());",
          "    assert!(special.validate().is_ok());",
          "    assert_eq!(special.max, special.quit_id);",
          "    assert_eq!(special.min_match, special.max_match);",
          "    assert_eq!(special.min_accel, special.max_accel);",
          "    assert_eq!(special.min_start, special.max_start);"
        ],
        "code": [
          "{",
          "    let slice: [u8; 8 * std::mem::size_of::<StateID>()] = [",
          "        // All StateIDs are equal to satisfy validate conditions",
          "        1, 0, 0, 0, 0, 0, 0, 0, // max",
          "        1, 0, 0, 0, 0, 0, 0, 0, // quit_id",
          "        1, 0, 0, 0, 0, 0, 0, 0, // min_match",
          "        1, 0, 0, 0, 0, 0, 0, 0, // max_match",
          "        1, 0, 0, 0, 0, 0, 0, 0, // min_accel",
          "        1, 0, 0, 0, 0, 0, 0, 0, // max_accel",
          "        1, 0, 0, 0, 0, 0, 0, 0, // min_start",
          "        1, 0, 0, 0, 0, 0, 0, 0, // max_start",
          "    ];",
          "",
          "    let result = from_bytes(&slice);",
          "    assert!(wire::check_slice_len(&slice, 8 * StateID::SIZE, \"special states\").is_ok());",
          "    let (special, nread) = from_bytes(&slice).unwrap();",
          "    assert_eq!(nread, special.write_to_len());",
          "    assert!(special.validate().is_ok());",
          "    assert_eq!(special.max, special.quit_id);",
          "    assert_eq!(special.min_match, special.max_match);",
          "    assert_eq!(special.min_accel, special.max_accel);",
          "    assert_eq!(special.min_start, special.max_start);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: [u8; 8 * std::mem::size_of::<StateID>()] = [",
          "        // Test with the maximum possible StateID values",
          "        u8::MAX, 0, 0, 0, 0, 0, 0, 0, // max",
          "        u8::MAX - 1, 0, 0, 0, 0, 0, 0, 0, // quit_id",
          "        u8::MAX - 2, 0, 0, 0, 0, 0, 0, 0, // min_match",
          "        u8::MAX - 3, 0, 0, 0, 0, 0, 0, 0, // max_match",
          "        u8::MAX - 4, 0, 0, 0, 0, 0, 0, 0, // min_accel",
          "        u8::MAX - 5, 0, 0, 0, 0, 0, 0, 0, // max_accel",
          "        u8::MAX - 6, 0, 0, 0, 0, 0, 0, 0, // min_start",
          "        u8::MAX - 7, 0, 0, 0, 0, 0, 0, 0, // max_start",
          "    ];",
          "    ",
          "    let result = from_bytes(&slice);",
          "}"
        ],
        "oracle": [
          "    let slice: [u8; 8 * std::mem::size_of::<StateID>()] = [",
          "    u8::MAX, 0, 0, 0, 0, 0, 0, 0,",
          "    u8::MAX - 1, 0, 0, 0, 0, 0, 0, 0,",
          "    u8::MAX - 2, 0, 0, 0, 0, 0, 0, 0,",
          "    u8::MAX - 3, 0, 0, 0, 0, 0, 0, 0,",
          "    u8::MAX - 4, 0, 0, 0, 0, 0, 0, 0,",
          "    u8::MAX - 5, 0, 0, 0, 0, 0, 0, 0,",
          "    u8::MAX - 6, 0, 0, 0, 0, 0, 0, 0,",
          "    u8::MAX - 7, 0, 0, 0, 0, 0, 0, 0,",
          "    ];",
          "    ",
          "    let result = from_bytes(&slice);",
          "    assert!(result.is_ok());",
          "    ",
          "    let (special, nread) = result.unwrap();",
          "    assert_eq!(nread, special.write_to_len());",
          "    assert!(special.validate().is_ok());",
          "    ",
          "    assert_eq!(special.max, StateID(u8::MAX.into()));",
          "    assert_eq!(special.quit_id, StateID((u8::MAX - 1).into()));",
          "    assert_eq!(special.min_match, StateID((u8::MAX - 2).into()));",
          "    assert_eq!(special.max_match, StateID((u8::MAX - 3).into()));",
          "    assert_eq!(special.min_accel, StateID((u8::MAX - 4).into()));",
          "    assert_eq!(special.max_accel, StateID((u8::MAX - 5).into()));",
          "    assert_eq!(special.min_start, StateID((u8::MAX - 6).into()));",
          "    assert_eq!(special.max_start, StateID((u8::MAX - 7).into()));"
        ],
        "code": [
          "{",
          "    let slice: [u8; 8 * std::mem::size_of::<StateID>()] = [",
          "        // Test with the maximum possible StateID values",
          "        u8::MAX, 0, 0, 0, 0, 0, 0, 0, // max",
          "        u8::MAX - 1, 0, 0, 0, 0, 0, 0, 0, // quit_id",
          "        u8::MAX - 2, 0, 0, 0, 0, 0, 0, 0, // min_match",
          "        u8::MAX - 3, 0, 0, 0, 0, 0, 0, 0, // max_match",
          "        u8::MAX - 4, 0, 0, 0, 0, 0, 0, 0, // min_accel",
          "        u8::MAX - 5, 0, 0, 0, 0, 0, 0, 0, // max_accel",
          "        u8::MAX - 6, 0, 0, 0, 0, 0, 0, 0, // min_start",
          "        u8::MAX - 7, 0, 0, 0, 0, 0, 0, 0, // max_start",
          "    ];",
          "    ",
          "    let result = from_bytes(&slice);",
          "    let slice: [u8; 8 * std::mem::size_of::<StateID>()] = [",
          "    u8::MAX, 0, 0, 0, 0, 0, 0, 0,",
          "    u8::MAX - 1, 0, 0, 0, 0, 0, 0, 0,",
          "    u8::MAX - 2, 0, 0, 0, 0, 0, 0, 0,",
          "    u8::MAX - 3, 0, 0, 0, 0, 0, 0, 0,",
          "    u8::MAX - 4, 0, 0, 0, 0, 0, 0, 0,",
          "    u8::MAX - 5, 0, 0, 0, 0, 0, 0, 0,",
          "    u8::MAX - 6, 0, 0, 0, 0, 0, 0, 0,",
          "    u8::MAX - 7, 0, 0, 0, 0, 0, 0, 0,",
          "    ];",
          "    ",
          "    let result = from_bytes(&slice);",
          "    assert!(result.is_ok());",
          "    ",
          "    let (special, nread) = result.unwrap();",
          "    assert_eq!(nread, special.write_to_len());",
          "    assert!(special.validate().is_ok());",
          "    ",
          "    assert_eq!(special.max, StateID(u8::MAX.into()));",
          "    assert_eq!(special.quit_id, StateID((u8::MAX - 1).into()));",
          "    assert_eq!(special.min_match, StateID((u8::MAX - 2).into()));",
          "    assert_eq!(special.max_match, StateID((u8::MAX - 3).into()));",
          "    assert_eq!(special.min_accel, StateID((u8::MAX - 4).into()));",
          "    assert_eq!(special.max_accel, StateID((u8::MAX - 5).into()));",
          "    assert_eq!(special.min_start, StateID((u8::MAX - 6).into()));",
          "    assert_eq!(special.max_start, StateID((u8::MAX - 7).into()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]