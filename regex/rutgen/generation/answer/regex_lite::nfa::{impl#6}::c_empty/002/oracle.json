[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, size_limit: Some(100) };",
          "    let pattern = String::from(\"\");",
          "    let compiler = Compiler::new(config, pattern);",
          "    ",
          "    let result = compiler.c_empty();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, size_limit: Some(100) };",
          "    let pattern = String::from(\"\");",
          "    let compiler = Compiler::new(config, pattern);",
          "    ",
          "    let result = compiler.c_empty();",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 5, size_limit: None };",
          "    let pattern = String::from(\"\");",
          "    let compiler = Compiler::new(config, pattern);",
          "    ",
          "    let result = compiler.c_empty();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 5, size_limit: None };",
          "    let pattern = String::from(\"\");",
          "    let compiler = Compiler::new(config, pattern);",
          "    ",
          "    let result = compiler.c_empty();",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 20, size_limit: Some(1000) };",
          "    let pattern = String::from(\"a+b*c?d\");",
          "    let compiler = Compiler::new(config, pattern);",
          "    ",
          "    let result = compiler.c_empty();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);",
          "    assert!(thompson_ref.start > 0);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 20, size_limit: Some(1000) };",
          "    let pattern = String::from(\"a+b*c?d\");",
          "    let compiler = Compiler::new(config, pattern);",
          "    ",
          "    let result = compiler.c_empty();",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);",
          "    assert!(thompson_ref.start > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 3, size_limit: Some(50) };",
          "    let pattern = String::from(\"abc\");",
          "    let compiler = Compiler::new(config, pattern);",
          "    ",
          "    let result = compiler.c_empty();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 3, size_limit: Some(50) };",
          "    let pattern = String::from(\"abc\");",
          "    let compiler = Compiler::new(config, pattern);",
          "    ",
          "    let result = compiler.c_empty();",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]