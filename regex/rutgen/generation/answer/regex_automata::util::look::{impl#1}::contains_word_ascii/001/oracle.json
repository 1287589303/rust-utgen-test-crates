[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: 1 << 6 }; // Look::WordAscii",
          "    look_set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    let look_set = LookSet { bits: 1 << 6 }; // Expect true for Look::WordAscii",
          "    assert!(look_set.contains_word_ascii());",
          "    ",
          "    let look_set = LookSet { bits: (1 << 6) | (1 << 7) }; // Look::WordAsciiNegate",
          "    assert!(look_set.contains_word_ascii());",
          "    ",
          "    let look_set = LookSet { bits: (1 << 6) | (1 << 10) }; // Look::WordStartAscii",
          "    assert!(look_set.contains_word_ascii());",
          "    ",
          "    let look_set = LookSet { bits: (1 << 6) | (1 << 11) }; // Look::WordEndAscii",
          "    assert!(look_set.contains_word_ascii());",
          "    ",
          "    let look_set = LookSet { bits: (1 << 6) | (1 << 14) }; // Look::WordStartHalfAscii",
          "    assert!(look_set.contains_word_ascii());",
          "    ",
          "    let look_set = LookSet { bits: (1 << 6) | (1 << 15) }; // Look::WordEndHalfAscii",
          "    assert!(look_set.contains_word_ascii());"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: 1 << 6 }; // Look::WordAscii",
          "    look_set.contains_word_ascii();",
          "    let look_set = LookSet { bits: 1 << 6 }; // Expect true for Look::WordAscii",
          "    assert!(look_set.contains_word_ascii());",
          "    ",
          "    let look_set = LookSet { bits: (1 << 6) | (1 << 7) }; // Look::WordAsciiNegate",
          "    assert!(look_set.contains_word_ascii());",
          "    ",
          "    let look_set = LookSet { bits: (1 << 6) | (1 << 10) }; // Look::WordStartAscii",
          "    assert!(look_set.contains_word_ascii());",
          "    ",
          "    let look_set = LookSet { bits: (1 << 6) | (1 << 11) }; // Look::WordEndAscii",
          "    assert!(look_set.contains_word_ascii());",
          "    ",
          "    let look_set = LookSet { bits: (1 << 6) | (1 << 14) }; // Look::WordStartHalfAscii",
          "    assert!(look_set.contains_word_ascii());",
          "    ",
          "    let look_set = LookSet { bits: (1 << 6) | (1 << 15) }; // Look::WordEndHalfAscii",
          "    assert!(look_set.contains_word_ascii());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: 1 << 7 }; // Look::WordAsciiNegate",
          "    look_set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    assert!(look_set.contains(Look::WordAscii) || look_set.contains(Look::WordAsciiNegate) || look_set.contains(Look::WordStartAscii) || look_set.contains(Look::WordEndAscii) || look_set.contains(Look::WordStartHalfAscii) || look_set.contains(Look::WordEndHalfAscii));"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: 1 << 7 }; // Look::WordAsciiNegate",
          "    look_set.contains_word_ascii();",
          "    assert!(look_set.contains(Look::WordAscii) || look_set.contains(Look::WordAsciiNegate) || look_set.contains(Look::WordStartAscii) || look_set.contains(Look::WordEndAscii) || look_set.contains(Look::WordStartHalfAscii) || look_set.contains(Look::WordEndHalfAscii));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: 1 << 10 }; // Look::WordStartAscii",
          "    look_set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.contains_word_ascii(), true); // Check if contains WordStartAscii",
          "    let look_set = LookSet { bits: 1 << 6 }; // Look::WordAscii",
          "    assert_eq!(look_set.contains_word_ascii(), true); // Check if contains WordAscii",
          "    let look_set = LookSet { bits: (1 << 7) | (1 << 10) }; // Look::WordAsciiNegate | Look::WordStartAscii",
          "    assert_eq!(look_set.contains_word_ascii(), true); // Check if contains WordAsciiNegate and WordStartAscii",
          "    let look_set = LookSet { bits: (1 << 11) }; // Look::WordEndAscii",
          "    assert_eq!(look_set.contains_word_ascii(), true); // Check if contains WordEndAscii",
          "    let look_set = LookSet { bits: (1 << 14) }; // Look::WordStartHalfAscii",
          "    assert_eq!(look_set.contains_word_ascii(), true); // Check if contains WordStartHalfAscii",
          "    let look_set = LookSet { bits: (1 << 15) }; // Look::WordEndHalfAscii",
          "    assert_eq!(look_set.contains_word_ascii(), true); // Check if contains WordEndHalfAscii",
          "    let look_set = LookSet { bits: 0 }; // No assertions set",
          "    assert_eq!(look_set.contains_word_ascii(), false); // Verify contains_word_ascii returns false"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: 1 << 10 }; // Look::WordStartAscii",
          "    look_set.contains_word_ascii();",
          "    assert_eq!(look_set.contains_word_ascii(), true); // Check if contains WordStartAscii",
          "    let look_set = LookSet { bits: 1 << 6 }; // Look::WordAscii",
          "    assert_eq!(look_set.contains_word_ascii(), true); // Check if contains WordAscii",
          "    let look_set = LookSet { bits: (1 << 7) | (1 << 10) }; // Look::WordAsciiNegate | Look::WordStartAscii",
          "    assert_eq!(look_set.contains_word_ascii(), true); // Check if contains WordAsciiNegate and WordStartAscii",
          "    let look_set = LookSet { bits: (1 << 11) }; // Look::WordEndAscii",
          "    assert_eq!(look_set.contains_word_ascii(), true); // Check if contains WordEndAscii",
          "    let look_set = LookSet { bits: (1 << 14) }; // Look::WordStartHalfAscii",
          "    assert_eq!(look_set.contains_word_ascii(), true); // Check if contains WordStartHalfAscii",
          "    let look_set = LookSet { bits: (1 << 15) }; // Look::WordEndHalfAscii",
          "    assert_eq!(look_set.contains_word_ascii(), true); // Check if contains WordEndHalfAscii",
          "    let look_set = LookSet { bits: 0 }; // No assertions set",
          "    assert_eq!(look_set.contains_word_ascii(), false); // Verify contains_word_ascii returns false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: 1 << 11 }; // Look::WordEndAscii",
          "    look_set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    assert!(look_set.contains_word_ascii() == true);",
          "    let look_set = LookSet { bits: 1 << 6 }; // Look::WordAscii",
          "    assert!(look_set.contains_word_ascii() == true);",
          "    let look_set = LookSet { bits: 1 << 7 }; // Look::WordAsciiNegate",
          "    assert!(look_set.contains_word_ascii() == true);",
          "    let look_set = LookSet { bits: 1 << 10 }; // Look::WordStartAscii",
          "    assert!(look_set.contains_word_ascii() == true);",
          "    let look_set = LookSet { bits: 1 << 11 }; // Look::WordEndAscii",
          "    assert!(look_set.contains_word_ascii() == true);",
          "    let look_set = LookSet { bits: 1 << 14 }; // Look::WordStartHalfAscii",
          "    assert!(look_set.contains_word_ascii() == true);",
          "    let look_set = LookSet { bits: 1 << 15 }; // Look::WordEndHalfAscii",
          "    assert!(look_set.contains_word_ascii() == true);",
          "    let look_set = LookSet { bits: (1 << 6) | (1 << 11) }; // Look::WordAscii | Look::WordEndAscii",
          "    assert!(look_set.contains_word_ascii() == true);",
          "    let look_set = LookSet { bits: 0 }; // No assertions",
          "    assert!(look_set.contains_word_ascii() == false);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: 1 << 11 }; // Look::WordEndAscii",
          "    look_set.contains_word_ascii();",
          "    assert!(look_set.contains_word_ascii() == true);",
          "    let look_set = LookSet { bits: 1 << 6 }; // Look::WordAscii",
          "    assert!(look_set.contains_word_ascii() == true);",
          "    let look_set = LookSet { bits: 1 << 7 }; // Look::WordAsciiNegate",
          "    assert!(look_set.contains_word_ascii() == true);",
          "    let look_set = LookSet { bits: 1 << 10 }; // Look::WordStartAscii",
          "    assert!(look_set.contains_word_ascii() == true);",
          "    let look_set = LookSet { bits: 1 << 11 }; // Look::WordEndAscii",
          "    assert!(look_set.contains_word_ascii() == true);",
          "    let look_set = LookSet { bits: 1 << 14 }; // Look::WordStartHalfAscii",
          "    assert!(look_set.contains_word_ascii() == true);",
          "    let look_set = LookSet { bits: 1 << 15 }; // Look::WordEndHalfAscii",
          "    assert!(look_set.contains_word_ascii() == true);",
          "    let look_set = LookSet { bits: (1 << 6) | (1 << 11) }; // Look::WordAscii | Look::WordEndAscii",
          "    assert!(look_set.contains_word_ascii() == true);",
          "    let look_set = LookSet { bits: 0 }; // No assertions",
          "    assert!(look_set.contains_word_ascii() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: 1 << 14 }; // Look::WordStartHalfAscii",
          "    look_set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    assert!(look_set.contains(Look::WordAscii) == false);",
          "    assert!(look_set.contains(Look::WordAsciiNegate) == false);",
          "    assert!(look_set.contains(Look::WordStartAscii) == false);",
          "    assert!(look_set.contains(Look::WordEndAscii) == false);",
          "    assert!(look_set.contains(Look::WordStartHalfAscii) == true);",
          "    assert!(look_set.contains(Look::WordEndHalfAscii) == false);",
          "    assert!(look_set.contains_word_ascii() == true);",
          "    ",
          "    let look_set = LookSet { bits: (1 << 6) | (1 << 7) }; // Look::WordAscii and Look::WordAsciiNegate",
          "    assert!(look_set.contains_word_ascii() == true);",
          "    ",
          "    let look_set = LookSet { bits: (1 << 12) | (1 << 13) }; // Look::WordStartUnicode and Look::WordEndUnicode",
          "    assert!(look_set.contains_word_ascii() == false);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: 1 << 14 }; // Look::WordStartHalfAscii",
          "    look_set.contains_word_ascii();",
          "    assert!(look_set.contains(Look::WordAscii) == false);",
          "    assert!(look_set.contains(Look::WordAsciiNegate) == false);",
          "    assert!(look_set.contains(Look::WordStartAscii) == false);",
          "    assert!(look_set.contains(Look::WordEndAscii) == false);",
          "    assert!(look_set.contains(Look::WordStartHalfAscii) == true);",
          "    assert!(look_set.contains(Look::WordEndHalfAscii) == false);",
          "    assert!(look_set.contains_word_ascii() == true);",
          "    ",
          "    let look_set = LookSet { bits: (1 << 6) | (1 << 7) }; // Look::WordAscii and Look::WordAsciiNegate",
          "    assert!(look_set.contains_word_ascii() == true);",
          "    ",
          "    let look_set = LookSet { bits: (1 << 12) | (1 << 13) }; // Look::WordStartUnicode and Look::WordEndUnicode",
          "    assert!(look_set.contains_word_ascii() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: 1 << 15 }; // Look::WordEndHalfAscii",
          "    look_set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    let look_set = LookSet { bits: 1 << 6 }; // Look::WordAscii",
          "    assert!(look_set.contains_word_ascii() == true);",
          "    ",
          "    let look_set = LookSet { bits: 1 << 7 }; // Look::WordAsciiNegate",
          "    assert!(look_set.contains_word_ascii() == true);",
          "    ",
          "    let look_set = LookSet { bits: 1 << 10 }; // Look::WordStartAscii",
          "    assert!(look_set.contains_word_ascii() == true);",
          "    ",
          "    let look_set = LookSet { bits: 1 << 11 }; // Look::WordEndAscii",
          "    assert!(look_set.contains_word_ascii() == true);",
          "    ",
          "    let look_set = LookSet { bits: 1 << 14 }; // Look::WordStartHalfAscii",
          "    assert!(look_set.contains_word_ascii() == true);",
          "    ",
          "    let look_set = LookSet { bits: 1 << 15 }; // Look::WordEndHalfAscii",
          "    assert!(look_set.contains_word_ascii() == true);",
          "    ",
          "    let look_set = LookSet { bits: 0 }; // No word boundaries",
          "    assert!(look_set.contains_word_ascii() == false);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: 1 << 15 }; // Look::WordEndHalfAscii",
          "    look_set.contains_word_ascii();",
          "    let look_set = LookSet { bits: 1 << 6 }; // Look::WordAscii",
          "    assert!(look_set.contains_word_ascii() == true);",
          "    ",
          "    let look_set = LookSet { bits: 1 << 7 }; // Look::WordAsciiNegate",
          "    assert!(look_set.contains_word_ascii() == true);",
          "    ",
          "    let look_set = LookSet { bits: 1 << 10 }; // Look::WordStartAscii",
          "    assert!(look_set.contains_word_ascii() == true);",
          "    ",
          "    let look_set = LookSet { bits: 1 << 11 }; // Look::WordEndAscii",
          "    assert!(look_set.contains_word_ascii() == true);",
          "    ",
          "    let look_set = LookSet { bits: 1 << 14 }; // Look::WordStartHalfAscii",
          "    assert!(look_set.contains_word_ascii() == true);",
          "    ",
          "    let look_set = LookSet { bits: 1 << 15 }; // Look::WordEndHalfAscii",
          "    assert!(look_set.contains_word_ascii() == true);",
          "    ",
          "    let look_set = LookSet { bits: 0 }; // No word boundaries",
          "    assert!(look_set.contains_word_ascii() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]