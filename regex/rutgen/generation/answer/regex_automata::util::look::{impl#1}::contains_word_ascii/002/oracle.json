[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: 0b00000000000000000000000000000010 };",
          "    let _ = look_set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.contains(Look::WordAscii), false);",
          "    assert_eq!(look_set.contains(Look::WordAsciiNegate), true);",
          "    assert_eq!(look_set.contains(Look::WordStartAscii), false);",
          "    assert_eq!(look_set.contains(Look::WordEndAscii), false);",
          "    assert_eq!(look_set.contains(Look::WordStartHalfAscii), false);",
          "    assert_eq!(look_set.contains(Look::WordEndHalfAscii), false);",
          "    assert_eq!(look_set.contains_word_ascii(), true);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: 0b00000000000000000000000000000010 };",
          "    let _ = look_set.contains_word_ascii();",
          "    assert_eq!(look_set.contains(Look::WordAscii), false);",
          "    assert_eq!(look_set.contains(Look::WordAsciiNegate), true);",
          "    assert_eq!(look_set.contains(Look::WordStartAscii), false);",
          "    assert_eq!(look_set.contains(Look::WordEndAscii), false);",
          "    assert_eq!(look_set.contains(Look::WordStartHalfAscii), false);",
          "    assert_eq!(look_set.contains(Look::WordEndHalfAscii), false);",
          "    assert_eq!(look_set.contains_word_ascii(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: 0b00000000000000000000000000000100 };",
          "    let _ = look_set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.contains_word_ascii(), true);",
          "    assert!(look_set.contains(Look::WordAsciiNegate));",
          "    assert!(!look_set.contains(Look::WordAscii));",
          "    assert!(!look_set.contains(Look::WordStartAscii));",
          "    assert!(!look_set.contains(Look::WordEndAscii));",
          "    assert!(!look_set.contains(Look::WordStartHalfAscii));",
          "    assert!(!look_set.contains(Look::WordEndHalfAscii));"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: 0b00000000000000000000000000000100 };",
          "    let _ = look_set.contains_word_ascii();",
          "    assert_eq!(look_set.contains_word_ascii(), true);",
          "    assert!(look_set.contains(Look::WordAsciiNegate));",
          "    assert!(!look_set.contains(Look::WordAscii));",
          "    assert!(!look_set.contains(Look::WordStartAscii));",
          "    assert!(!look_set.contains(Look::WordEndAscii));",
          "    assert!(!look_set.contains(Look::WordStartHalfAscii));",
          "    assert!(!look_set.contains(Look::WordEndHalfAscii));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: 0b00000000000000000000000000001000 };",
          "    let _ = look_set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    let look_set = LookSet { bits: 0b00000000000000000000000000001000 };",
          "    assert_eq!(look_set.contains(Look::WordAscii), false);",
          "    assert_eq!(look_set.contains(Look::WordAsciiNegate), true);",
          "    assert_eq!(look_set.contains(Look::WordStartAscii), false);",
          "    assert_eq!(look_set.contains(Look::WordEndAscii), false);",
          "    assert_eq!(look_set.contains(Look::WordStartHalfAscii), false);",
          "    assert_eq!(look_set.contains(Look::WordEndHalfAscii), false);",
          "    assert_eq!(look_set.contains_word_ascii(), true);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: 0b00000000000000000000000000001000 };",
          "    let _ = look_set.contains_word_ascii();",
          "    let look_set = LookSet { bits: 0b00000000000000000000000000001000 };",
          "    assert_eq!(look_set.contains(Look::WordAscii), false);",
          "    assert_eq!(look_set.contains(Look::WordAsciiNegate), true);",
          "    assert_eq!(look_set.contains(Look::WordStartAscii), false);",
          "    assert_eq!(look_set.contains(Look::WordEndAscii), false);",
          "    assert_eq!(look_set.contains(Look::WordStartHalfAscii), false);",
          "    assert_eq!(look_set.contains(Look::WordEndHalfAscii), false);",
          "    assert_eq!(look_set.contains_word_ascii(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: 0b00000000000000000000000000010000 };",
          "    let _ = look_set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    let look_set = LookSet { bits: 0b00000000000000000000000000010000 }; // bits set to only Look::WordEndAscii",
          "    assert!(!look_set.contains(Look::WordAscii)); // precondition: contains WordAscii must be false",
          "    assert!(look_set.contains(Look::WordAsciiNegate)); // precondition: contains WordAsciiNegate must be true",
          "    assert!(look_set.contains_word_ascii()); // expected return value: should return true"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: 0b00000000000000000000000000010000 };",
          "    let _ = look_set.contains_word_ascii();",
          "    let look_set = LookSet { bits: 0b00000000000000000000000000010000 }; // bits set to only Look::WordEndAscii",
          "    assert!(!look_set.contains(Look::WordAscii)); // precondition: contains WordAscii must be false",
          "    assert!(look_set.contains(Look::WordAsciiNegate)); // precondition: contains WordAsciiNegate must be true",
          "    assert!(look_set.contains_word_ascii()); // expected return value: should return true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: 0b00000000000000000000100000000000 };",
          "    let _ = look_set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.contains_word_ascii(), true);",
          "    let look_set_with_word_ascii_negate = LookSet { bits: 0b00000000000000000001000000000000 };",
          "    assert_eq!(look_set_with_word_ascii_negate.contains_word_ascii(), true);",
          "    let look_set_only_word_ascii_negate = LookSet { bits: 0b00000000000000000000010000000000 };",
          "    assert_eq!(look_set_only_word_ascii_negate.contains_word_ascii(), true);",
          "    let look_set_no_word_boundaries = LookSet { bits: 0b00000000000000000000000000000000 };",
          "    assert_eq!(look_set_no_word_boundaries.contains_word_ascii(), false);",
          "    let look_set_with_word_start_ascii = LookSet { bits: 0b00000000000000000010000000000000 };",
          "    assert_eq!(look_set_with_word_start_ascii.contains_word_ascii(), true);",
          "    let look_set_with_word_end_ascii = LookSet { bits: 0b00000000000000000100000000000000 };",
          "    assert_eq!(look_set_with_word_end_ascii.contains_word_ascii(), true);",
          "    let look_set_with_start_half_ascii = LookSet { bits: 0b00000000000000001000000000000000 };",
          "    assert_eq!(look_set_with_start_half_ascii.contains_word_ascii(), true);",
          "    let look_set_with_end_half_ascii = LookSet { bits: 0b00000000000000010000000000000000 };",
          "    assert_eq!(look_set_with_end_half_ascii.contains_word_ascii(), true);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: 0b00000000000000000000100000000000 };",
          "    let _ = look_set.contains_word_ascii();",
          "    assert_eq!(look_set.contains_word_ascii(), true);",
          "    let look_set_with_word_ascii_negate = LookSet { bits: 0b00000000000000000001000000000000 };",
          "    assert_eq!(look_set_with_word_ascii_negate.contains_word_ascii(), true);",
          "    let look_set_only_word_ascii_negate = LookSet { bits: 0b00000000000000000000010000000000 };",
          "    assert_eq!(look_set_only_word_ascii_negate.contains_word_ascii(), true);",
          "    let look_set_no_word_boundaries = LookSet { bits: 0b00000000000000000000000000000000 };",
          "    assert_eq!(look_set_no_word_boundaries.contains_word_ascii(), false);",
          "    let look_set_with_word_start_ascii = LookSet { bits: 0b00000000000000000010000000000000 };",
          "    assert_eq!(look_set_with_word_start_ascii.contains_word_ascii(), true);",
          "    let look_set_with_word_end_ascii = LookSet { bits: 0b00000000000000000100000000000000 };",
          "    assert_eq!(look_set_with_word_end_ascii.contains_word_ascii(), true);",
          "    let look_set_with_start_half_ascii = LookSet { bits: 0b00000000000000001000000000000000 };",
          "    assert_eq!(look_set_with_start_half_ascii.contains_word_ascii(), true);",
          "    let look_set_with_end_half_ascii = LookSet { bits: 0b00000000000000010000000000000000 };",
          "    assert_eq!(look_set_with_end_half_ascii.contains_word_ascii(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]