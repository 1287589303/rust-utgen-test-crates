[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet {",
          "        bits: 1 << 11, // Only Look::WordEndAscii is set",
          "    };",
          "    let _ = look_set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.contains_word_ascii(), true);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet {",
          "        bits: 1 << 11, // Only Look::WordEndAscii is set",
          "    };",
          "    let _ = look_set.contains_word_ascii();",
          "    assert_eq!(look_set.contains_word_ascii(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet {",
          "        bits: (1 << 11) | (1 << 9), // Look::WordEndAscii and Look::WordUnicodeNegate are set",
          "    };",
          "    let _ = look_set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    let look_set = LookSet { bits: (1 << 11) | (1 << 9) }; // Look::WordEndAscii and Look::WordUnicodeNegate are set",
          "    assert!(look_set.contains_word_ascii());"
        ],
        "code": [
          "{",
          "    let look_set = LookSet {",
          "        bits: (1 << 11) | (1 << 9), // Look::WordEndAscii and Look::WordUnicodeNegate are set",
          "    };",
          "    let _ = look_set.contains_word_ascii();",
          "    let look_set = LookSet { bits: (1 << 11) | (1 << 9) }; // Look::WordEndAscii and Look::WordUnicodeNegate are set",
          "    assert!(look_set.contains_word_ascii());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet {",
          "        bits: 0b0000_0000_0000_0000, // No bits are set",
          "    };",
          "    let _ = look_set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.contains_word_ascii(), false);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet {",
          "        bits: 0b0000_0000_0000_0000, // No bits are set",
          "    };",
          "    let _ = look_set.contains_word_ascii();",
          "    assert_eq!(look_set.contains_word_ascii(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet {",
          "        bits: 1 << 16, // Only Look::WordStartHalfUnicode is set",
          "    };",
          "    let _ = look_set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.contains_word_ascii(), true);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet {",
          "        bits: 1 << 16, // Only Look::WordStartHalfUnicode is set",
          "    };",
          "    let _ = look_set.contains_word_ascii();",
          "    assert_eq!(look_set.contains_word_ascii(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet {",
          "        bits: 1 << 15, // Only Look::WordEndHalfAscii is set",
          "    };",
          "    let _ = look_set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.contains_word_ascii(), true);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet {",
          "        bits: 1 << 15, // Only Look::WordEndHalfAscii is set",
          "    };",
          "    let _ = look_set.contains_word_ascii();",
          "    assert_eq!(look_set.contains_word_ascii(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]