[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set = LookSet { bits: 0b0000000000000000 };",
          "    set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.contains_word_ascii(), false);"
        ],
        "code": [
          "{",
          "    let set = LookSet { bits: 0b0000000000000000 };",
          "    set.contains_word_ascii();",
          "    assert_eq!(set.contains_word_ascii(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set = LookSet { bits: 0b0000000000000000 };",
          "    set.insert(Look::WordAscii);",
          "    set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    let set = LookSet { bits: 0b0000000000000000 };",
          "    set.insert(Look::WordAsciiNegate);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    let set = LookSet { bits: 0b0000000000000000 };",
          "    set.insert(Look::WordStartAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    let set = LookSet { bits: 0b0000000000000000 };",
          "    set.insert(Look::WordEndAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    let set = LookSet { bits: 0b0000000000000000 };",
          "    set.insert(Look::WordStartHalfAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    let set = LookSet { bits: 0b0000000000000000 };",
          "    set.insert(Look::WordEndHalfAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    let set = LookSet { bits: 0b0000000000000000 };",
          "    assert_eq!(set.contains_word_ascii(), false);"
        ],
        "code": [
          "{",
          "    let set = LookSet { bits: 0b0000000000000000 };",
          "    set.insert(Look::WordAscii);",
          "    set.contains_word_ascii();",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    let set = LookSet { bits: 0b0000000000000000 };",
          "    set.insert(Look::WordAsciiNegate);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    let set = LookSet { bits: 0b0000000000000000 };",
          "    set.insert(Look::WordStartAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    let set = LookSet { bits: 0b0000000000000000 };",
          "    set.insert(Look::WordEndAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    let set = LookSet { bits: 0b0000000000000000 };",
          "    set.insert(Look::WordStartHalfAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    let set = LookSet { bits: 0b0000000000000000 };",
          "    set.insert(Look::WordEndHalfAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    let set = LookSet { bits: 0b0000000000000000 };",
          "    assert_eq!(set.contains_word_ascii(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set = LookSet { bits: 0b0000000000000000 };",
          "    set.insert(Look::WordAsciiNegate);",
          "    set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.contains(Look::WordAscii), false);",
          "    assert_eq!(set.contains(Look::WordAsciiNegate), true);",
          "    assert_eq!(set.contains(Look::WordStartAscii), false);",
          "    assert_eq!(set.contains(Look::WordEndAscii), false);",
          "    assert_eq!(set.contains(Look::WordStartHalfAscii), false);",
          "    assert_eq!(set.contains_word_ascii(), true);"
        ],
        "code": [
          "{",
          "    let set = LookSet { bits: 0b0000000000000000 };",
          "    set.insert(Look::WordAsciiNegate);",
          "    set.contains_word_ascii();",
          "    assert_eq!(set.contains(Look::WordAscii), false);",
          "    assert_eq!(set.contains(Look::WordAsciiNegate), true);",
          "    assert_eq!(set.contains(Look::WordStartAscii), false);",
          "    assert_eq!(set.contains(Look::WordEndAscii), false);",
          "    assert_eq!(set.contains(Look::WordStartHalfAscii), false);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set = LookSet { bits: 0b0000000000000000 };",
          "    set.insert(Look::WordStartAscii);",
          "    set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    assert!(set.is_empty());",
          "    assert!(!set.contains(Look::WordAscii));",
          "    assert!(!set.contains(Look::WordAsciiNegate));",
          "    assert!(set.contains(Look::WordStartAscii));",
          "    assert!(!set.contains(Look::WordEndAscii));",
          "    assert!(!set.contains(Look::WordStartHalfAscii));",
          "    assert!(!set.contains(Look::WordEndHalfAscii));",
          "    assert!(set.contains_word_ascii());",
          "    set.set_remove(Look::WordStartAscii);",
          "    assert!(!set.contains_word_ascii());",
          "    set.insert(Look::WordAscii);",
          "    assert!(set.contains_word_ascii());",
          "    set.remove(Look::WordAscii);",
          "    assert!(!set.contains_word_ascii());",
          "    set.insert(Look::WordAsciiNegate);",
          "    assert!(set.contains_word_ascii());"
        ],
        "code": [
          "{",
          "    let set = LookSet { bits: 0b0000000000000000 };",
          "    set.insert(Look::WordStartAscii);",
          "    set.contains_word_ascii();",
          "    assert!(set.is_empty());",
          "    assert!(!set.contains(Look::WordAscii));",
          "    assert!(!set.contains(Look::WordAsciiNegate));",
          "    assert!(set.contains(Look::WordStartAscii));",
          "    assert!(!set.contains(Look::WordEndAscii));",
          "    assert!(!set.contains(Look::WordStartHalfAscii));",
          "    assert!(!set.contains(Look::WordEndHalfAscii));",
          "    assert!(set.contains_word_ascii());",
          "    set.set_remove(Look::WordStartAscii);",
          "    assert!(!set.contains_word_ascii());",
          "    set.insert(Look::WordAscii);",
          "    assert!(set.contains_word_ascii());",
          "    set.remove(Look::WordAscii);",
          "    assert!(!set.contains_word_ascii());",
          "    set.insert(Look::WordAsciiNegate);",
          "    assert!(set.contains_word_ascii());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set = LookSet { bits: 0b0000000000000000 };",
          "    set.insert(Look::WordEndAscii);",
          "    set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    let set = LookSet { bits: 0b0000000000000000 };",
          "    assert_eq!(set.contains_word_ascii(), false);",
          "    set.insert(Look::WordAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.set_remove(&Look::WordAscii);",
          "    assert_eq!(set.contains_word_ascii(), false);",
          "    set.set_insert(Look::WordAsciiNegate);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.set_remove(&Look::WordAsciiNegate);",
          "    assert_eq!(set.contains_word_ascii(), false);",
          "    set.set_insert(Look::WordStartHalfAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.set_remove(&Look::WordStartHalfAscii);",
          "    assert_eq!(set.contains_word_ascii(), false);",
          "    set.set_insert(Look::WordEndHalfAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);"
        ],
        "code": [
          "{",
          "    let set = LookSet { bits: 0b0000000000000000 };",
          "    set.insert(Look::WordEndAscii);",
          "    set.contains_word_ascii();",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    let set = LookSet { bits: 0b0000000000000000 };",
          "    assert_eq!(set.contains_word_ascii(), false);",
          "    set.insert(Look::WordAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.set_remove(&Look::WordAscii);",
          "    assert_eq!(set.contains_word_ascii(), false);",
          "    set.set_insert(Look::WordAsciiNegate);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.set_remove(&Look::WordAsciiNegate);",
          "    assert_eq!(set.contains_word_ascii(), false);",
          "    set.set_insert(Look::WordStartHalfAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.set_remove(&Look::WordStartHalfAscii);",
          "    assert_eq!(set.contains_word_ascii(), false);",
          "    set.set_insert(Look::WordEndHalfAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set = LookSet { bits: 0b0000000000000000 };",
          "    set.insert(Look::WordStartHalfAscii);",
          "    set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    set.insert(Look::WordStartHalfAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.bits = 0b0000000000000000;",
          "    assert_eq!(set.contains_word_ascii(), false);",
          "    set.insert(Look::WordAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.remove(Look::WordAscii);",
          "    assert_eq!(set.contains_word_ascii(), false);",
          "    set.insert(Look::WordAsciiNegate);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.set_remove(&mut LookSet { bits: 0b00000000 });",
          "    assert_eq!(set.contains_word_ascii(), false);"
        ],
        "code": [
          "{",
          "    let set = LookSet { bits: 0b0000000000000000 };",
          "    set.insert(Look::WordStartHalfAscii);",
          "    set.contains_word_ascii();",
          "    set.insert(Look::WordStartHalfAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.bits = 0b0000000000000000;",
          "    assert_eq!(set.contains_word_ascii(), false);",
          "    set.insert(Look::WordAscii);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.remove(Look::WordAscii);",
          "    assert_eq!(set.contains_word_ascii(), false);",
          "    set.insert(Look::WordAsciiNegate);",
          "    assert_eq!(set.contains_word_ascii(), true);",
          "    set.set_remove(&mut LookSet { bits: 0b00000000 });",
          "    assert_eq!(set.contains_word_ascii(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set = LookSet { bits: 0b0000000000000000 };",
          "    set.insert(Look::WordEndHalfAscii);",
          "    set.contains_word_ascii();",
          "}"
        ],
        "oracle": [
          "    set.insert(Look::WordEndHalfAscii);",
          "    assert!(set.contains_word_ascii(), \"Expected contains_word_ascii to return true after inserting WordEndHalfAscii\");"
        ],
        "code": [
          "{",
          "    let set = LookSet { bits: 0b0000000000000000 };",
          "    set.insert(Look::WordEndHalfAscii);",
          "    set.contains_word_ascii();",
          "    set.insert(Look::WordEndHalfAscii);",
          "    assert!(set.contains_word_ascii(), \"Expected contains_word_ascii to return true after inserting WordEndHalfAscii\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]