[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"    # This is a comment\\nabc\";",
          "    let pos = Position { offset: 0, line: 1, column: 1 };",
          "    let parser = Parser {",
          "        pos: Cell::new(pos),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 0,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI::new(&parser, pattern);",
          "    parser_i.bump_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.comments.borrow().len(), 0);",
          "    assert_eq!(parser.pos.get().offset, 0);",
          "    assert_eq!(parser.pos.get().line, 1);",
          "    assert_eq!(parser.pos.get().column, 1);",
          "    assert_eq!(parser_i.pattern(), \"    # This is a comment\\nabc\");"
        ],
        "code": [
          "{",
          "    let pattern = \"    # This is a comment\\nabc\";",
          "    let pos = Position { offset: 0, line: 1, column: 1 };",
          "    let parser = Parser {",
          "        pos: Cell::new(pos),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 0,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI::new(&parser, pattern);",
          "    parser_i.bump_space();",
          "    assert_eq!(parser.comments.borrow().len(), 0);",
          "    assert_eq!(parser.pos.get().offset, 0);",
          "    assert_eq!(parser.pos.get().line, 1);",
          "    assert_eq!(parser.pos.get().column, 1);",
          "    assert_eq!(parser_i.pattern(), \"    # This is a comment\\nabc\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"abc   # Comment inside\\n    def\";",
          "    let pos = Position { offset: 3, line: 1, column: 4 };",
          "    let parser = Parser {",
          "        pos: Cell::new(pos),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 0,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI::new(&parser, pattern);",
          "    parser_i.bump_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser_i.pos().offset, 3);",
          "    assert_eq!(parser_i.pos().line, 1);",
          "    assert_eq!(parser_i.pos().column, 4);",
          "    assert_eq!(parser_i.comments.borrow().len(), 0);"
        ],
        "code": [
          "{",
          "    let pattern = \"abc   # Comment inside\\n    def\";",
          "    let pos = Position { offset: 3, line: 1, column: 4 };",
          "    let parser = Parser {",
          "        pos: Cell::new(pos),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 0,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI::new(&parser, pattern);",
          "    parser_i.bump_space();",
          "    assert_eq!(parser_i.pos().offset, 3);",
          "    assert_eq!(parser_i.pos().line, 1);",
          "    assert_eq!(parser_i.pos().column, 4);",
          "    assert_eq!(parser_i.comments.borrow().len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"abc # Last comment\\n\";",
          "    let pos = Position { offset: 10, line: 1, column: 10 };",
          "    let parser = Parser {",
          "        pos: Cell::new(pos),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 0,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI::new(&parser, pattern);",
          "    parser_i.bump_space();",
          "}"
        ],
        "oracle": [
          "    let pattern = \"abc # Last comment\\n\";",
          "    let pos = Position { offset: 10, line: 1, column: 10 };",
          "    let parser = Parser {",
          "    pos: Cell::new(pos),",
          "    capture_index: Cell::new(0),",
          "    nest_limit: 0,",
          "    octal: false,",
          "    initial_ignore_whitespace: false,",
          "    empty_min_range: false,",
          "    ignore_whitespace: Cell::new(false),",
          "    comments: RefCell::new(vec![]),",
          "    stack_group: RefCell::new(vec![]),",
          "    stack_class: RefCell::new(vec![]),",
          "    capture_names: RefCell::new(vec![]),",
          "    scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI::new(&parser, pattern);",
          "    parser_i.bump_space();",
          "    ",
          "    assert_eq!(parser.position(), pos);",
          "    assert!(parser.comments.borrow().is_empty());"
        ],
        "code": [
          "{",
          "    let pattern = \"abc # Last comment\\n\";",
          "    let pos = Position { offset: 10, line: 1, column: 10 };",
          "    let parser = Parser {",
          "        pos: Cell::new(pos),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 0,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI::new(&parser, pattern);",
          "    parser_i.bump_space();",
          "    let pattern = \"abc # Last comment\\n\";",
          "    let pos = Position { offset: 10, line: 1, column: 10 };",
          "    let parser = Parser {",
          "    pos: Cell::new(pos),",
          "    capture_index: Cell::new(0),",
          "    nest_limit: 0,",
          "    octal: false,",
          "    initial_ignore_whitespace: false,",
          "    empty_min_range: false,",
          "    ignore_whitespace: Cell::new(false),",
          "    comments: RefCell::new(vec![]),",
          "    stack_group: RefCell::new(vec![]),",
          "    stack_class: RefCell::new(vec![]),",
          "    capture_names: RefCell::new(vec![]),",
          "    scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI::new(&parser, pattern);",
          "    parser_i.bump_space();",
          "    ",
          "    assert_eq!(parser.position(), pos);",
          "    assert!(parser.comments.borrow().is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"   # Comment\\n   \\n   abc\";",
          "    let pos = Position { offset: 0, line: 1, column: 1 };",
          "    let parser = Parser {",
          "        pos: Cell::new(pos),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 0,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI::new(&parser, pattern);",
          "    parser_i.bump_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser_i.pos().offset, 0);",
          "    assert_eq!(parser_i.pos().line, 1);",
          "    assert_eq!(parser_i.pos().column, 1);",
          "    assert!(parser_i.parser().comments.borrow().is_empty());",
          "    assert_eq!(parser_i.pattern(), \"   # Comment\\n   \\n   abc\");",
          "    assert!(parser_i.is_eof() == false);"
        ],
        "code": [
          "{",
          "    let pattern = \"   # Comment\\n   \\n   abc\";",
          "    let pos = Position { offset: 0, line: 1, column: 1 };",
          "    let parser = Parser {",
          "        pos: Cell::new(pos),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 0,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI::new(&parser, pattern);",
          "    parser_i.bump_space();",
          "    assert_eq!(parser_i.pos().offset, 0);",
          "    assert_eq!(parser_i.pos().line, 1);",
          "    assert_eq!(parser_i.pos().column, 1);",
          "    assert!(parser_i.parser().comments.borrow().is_empty());",
          "    assert_eq!(parser_i.pattern(), \"   # Comment\\n   \\n   abc\");",
          "    assert!(parser_i.is_eof() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]