[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = Parser {",
          "        pos: Cell::new(Position { offset: 0, line: 1, column: 1 }),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 5,",
          "        octal: true,",
          "        initial_ignore_whitespace: true,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(true),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let input_pattern = \"    # this is a comment\\n   a\";",
          "    let parser_instance = ParserI::new(&parser, input_pattern);",
          "    ",
          "    parser_instance.bump_space();",
          "}"
        ],
        "oracle": [
          "    assert!(parser_instance.ignore_whitespace());",
          "    assert!(!parser_instance.is_eof());",
          "    assert!(parser_instance.char().is_whitespace());",
          "    assert!(parser_instance.is_eof());",
          "    assert_eq!(parser.comments.borrow().len(), 1);",
          "    assert_eq!(parser.comments.borrow()[0].comment, \" this is a comment\");",
          "    assert!(parser_instance.offset() > 0);",
          "    assert_eq!(parser_instance.char(), 'a');"
        ],
        "code": [
          "{",
          "    let parser = Parser {",
          "        pos: Cell::new(Position { offset: 0, line: 1, column: 1 }),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 5,",
          "        octal: true,",
          "        initial_ignore_whitespace: true,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(true),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let input_pattern = \"    # this is a comment\\n   a\";",
          "    let parser_instance = ParserI::new(&parser, input_pattern);",
          "    ",
          "    parser_instance.bump_space();",
          "    assert!(parser_instance.ignore_whitespace());",
          "    assert!(!parser_instance.is_eof());",
          "    assert!(parser_instance.char().is_whitespace());",
          "    assert!(parser_instance.is_eof());",
          "    assert_eq!(parser.comments.borrow().len(), 1);",
          "    assert_eq!(parser.comments.borrow()[0].comment, \" this is a comment\");",
          "    assert!(parser_instance.offset() > 0);",
          "    assert_eq!(parser_instance.char(), 'a');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = Parser {",
          "        pos: Cell::new(Position { offset: 0, line: 1, column: 1 }),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 5,",
          "        octal: true,",
          "        initial_ignore_whitespace: true,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(true),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let input_pattern = \"     # leading comments\\n   b\";",
          "    let parser_instance = ParserI::new(&parser, input_pattern);",
          "    ",
          "    parser_instance.bump_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.comments.borrow().len(), 1);",
          "    assert_eq!(parser.comments.borrow()[0].comment, \"leading comments\");",
          "    assert_eq!(parser_instance.offset(), 11);",
          "    assert_eq!(parser_instance.line(), 2);",
          "    assert_eq!(parser_instance.column(), 1);",
          "    assert!(parser_instance.is_eof() == false);",
          "    assert!(parser_instance.char().is_whitespace() == false);"
        ],
        "code": [
          "{",
          "    let parser = Parser {",
          "        pos: Cell::new(Position { offset: 0, line: 1, column: 1 }),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 5,",
          "        octal: true,",
          "        initial_ignore_whitespace: true,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(true),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let input_pattern = \"     # leading comments\\n   b\";",
          "    let parser_instance = ParserI::new(&parser, input_pattern);",
          "    ",
          "    parser_instance.bump_space();",
          "    assert_eq!(parser.comments.borrow().len(), 1);",
          "    assert_eq!(parser.comments.borrow()[0].comment, \"leading comments\");",
          "    assert_eq!(parser_instance.offset(), 11);",
          "    assert_eq!(parser_instance.line(), 2);",
          "    assert_eq!(parser_instance.column(), 1);",
          "    assert!(parser_instance.is_eof() == false);",
          "    assert!(parser_instance.char().is_whitespace() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = Parser {",
          "        pos: Cell::new(Position { offset: 0, line: 1, column: 1 }),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 5,",
          "        octal: true,",
          "        initial_ignore_whitespace: true,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(true),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let input_pattern = \" \\t\\r\\n   c\";",
          "    let parser_instance = ParserI::new(&parser, input_pattern);",
          "    ",
          "    parser_instance.bump_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser_instance.pos().offset, 6);",
          "    assert_eq!(parser_instance.pos().line, 1);",
          "    assert_eq!(parser_instance.pos().column, 2);",
          "    assert_eq!(parser_instance.comments.borrow().len(), 0);",
          "    assert_eq!(parser_instance.pattern(), \"c\");"
        ],
        "code": [
          "{",
          "    let parser = Parser {",
          "        pos: Cell::new(Position { offset: 0, line: 1, column: 1 }),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 5,",
          "        octal: true,",
          "        initial_ignore_whitespace: true,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(true),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let input_pattern = \" \\t\\r\\n   c\";",
          "    let parser_instance = ParserI::new(&parser, input_pattern);",
          "    ",
          "    parser_instance.bump_space();",
          "    assert_eq!(parser_instance.pos().offset, 6);",
          "    assert_eq!(parser_instance.pos().line, 1);",
          "    assert_eq!(parser_instance.pos().column, 2);",
          "    assert_eq!(parser_instance.comments.borrow().len(), 0);",
          "    assert_eq!(parser_instance.pattern(), \"c\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = Parser {",
          "        pos: Cell::new(Position { offset: 0, line: 1, column: 1 }),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 5,",
          "        octal: true,",
          "        initial_ignore_whitespace: true,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(true),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let input_pattern = \"  # comment only\\n# another comment\\n\";",
          "    let parser_instance = ParserI::new(&parser, input_pattern);",
          "    ",
          "    parser_instance.bump_space();",
          "}"
        ],
        "oracle": [
          "    assert!(parser_instance.ignore_whitespace() == true);",
          "    assert!(parser_instance.is_eof() == false);",
          "    assert!(parser_instance.char().is_whitespace() == true);",
          "    assert!(parser_instance.is_eof() == false);",
          "    assert_eq!(parser_instance.parser().comments.borrow().len(), 2);",
          "    assert_eq!(parser_instance.parser().comments.borrow()[0].comment, \" comment only\");",
          "    assert_eq!(parser_instance.parser().comments.borrow()[1].comment, \" another comment\");",
          "    assert!(parser_instance.offset() == 27);"
        ],
        "code": [
          "{",
          "    let parser = Parser {",
          "        pos: Cell::new(Position { offset: 0, line: 1, column: 1 }),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 5,",
          "        octal: true,",
          "        initial_ignore_whitespace: true,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(true),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let input_pattern = \"  # comment only\\n# another comment\\n\";",
          "    let parser_instance = ParserI::new(&parser, input_pattern);",
          "    ",
          "    parser_instance.bump_space();",
          "    assert!(parser_instance.ignore_whitespace() == true);",
          "    assert!(parser_instance.is_eof() == false);",
          "    assert!(parser_instance.char().is_whitespace() == true);",
          "    assert!(parser_instance.is_eof() == false);",
          "    assert_eq!(parser_instance.parser().comments.borrow().len(), 2);",
          "    assert_eq!(parser_instance.parser().comments.borrow()[0].comment, \" comment only\");",
          "    assert_eq!(parser_instance.parser().comments.borrow()[1].comment, \" another comment\");",
          "    assert!(parser_instance.offset() == 27);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]