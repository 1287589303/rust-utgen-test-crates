[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestExtractor {",
          "        limit_class: usize,",
          "    }",
          "",
          "    impl Extractor {",
          "        pub fn class_over_limit_bytes(&self, cls: &ClassBytes) -> bool {",
          "            false",
          "        }",
          "        ",
          "        pub fn enforce_literal_len(&self, seq: &mut Seq) {}",
          "    }",
          "",
          "    let extractor = TestExtractor { limit_class: 1 };",
          "    let cls = ClassBytes::empty();",
          "    ",
          "    let result = extractor.extract_class_bytes(&cls);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_finite());",
          "    assert_eq!(result.len(), Some(0));",
          "    assert!(result.is_empty());",
          "    assert_eq!(result.literals(), Some(&[]));",
          "    assert!(result.is_exact());",
          "    assert!(!result.is_inexact());",
          "    assert_eq!(result.max_literal_len(), None);",
          "    assert_eq!(result.min_literal_len(), None);"
        ],
        "code": [
          "{",
          "    struct TestExtractor {",
          "        limit_class: usize,",
          "    }",
          "",
          "    impl Extractor {",
          "        pub fn class_over_limit_bytes(&self, cls: &ClassBytes) -> bool {",
          "            false",
          "        }",
          "        ",
          "        pub fn enforce_literal_len(&self, seq: &mut Seq) {}",
          "    }",
          "",
          "    let extractor = TestExtractor { limit_class: 1 };",
          "    let cls = ClassBytes::empty();",
          "    ",
          "    let result = extractor.extract_class_bytes(&cls);",
          "    assert!(result.is_finite());",
          "    assert_eq!(result.len(), Some(0));",
          "    assert!(result.is_empty());",
          "    assert_eq!(result.literals(), Some(&[]));",
          "    assert!(result.is_exact());",
          "    assert!(!result.is_inexact());",
          "    assert_eq!(result.max_literal_len(), None);",
          "    assert_eq!(result.min_literal_len(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestExtractor {",
          "        limit_class: usize,",
          "    }",
          "",
          "    impl Extractor {",
          "        pub fn class_over_limit_bytes(&self, cls: &ClassBytes) -> bool {",
          "            false",
          "        }",
          "        ",
          "        pub fn enforce_literal_len(&self, seq: &mut Seq) {}",
          "    }",
          "",
          "    let extractor = TestExtractor { limit_class: 3 };",
          "    let range = ClassBytesRange::new(0, 5);",
          "    let cls = ClassBytes::new(vec![range]);",
          "",
          "    let result = extractor.extract_class_bytes(&cls);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_finite());",
          "    assert_eq!(result.len(), Some(6));",
          "    assert_eq!(result.literals().unwrap().len(), 6);",
          "    assert!(result.literals().unwrap().iter().all(|lit| lit.bytes == vec![0, 1, 2, 3, 4, 5]));"
        ],
        "code": [
          "{",
          "    struct TestExtractor {",
          "        limit_class: usize,",
          "    }",
          "",
          "    impl Extractor {",
          "        pub fn class_over_limit_bytes(&self, cls: &ClassBytes) -> bool {",
          "            false",
          "        }",
          "        ",
          "        pub fn enforce_literal_len(&self, seq: &mut Seq) {}",
          "    }",
          "",
          "    let extractor = TestExtractor { limit_class: 3 };",
          "    let range = ClassBytesRange::new(0, 5);",
          "    let cls = ClassBytes::new(vec![range]);",
          "",
          "    let result = extractor.extract_class_bytes(&cls);",
          "    assert!(result.is_finite());",
          "    assert_eq!(result.len(), Some(6));",
          "    assert_eq!(result.literals().unwrap().len(), 6);",
          "    assert!(result.literals().unwrap().iter().all(|lit| lit.bytes == vec![0, 1, 2, 3, 4, 5]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestExtractor {",
          "        limit_class: usize,",
          "    }",
          "",
          "    impl Extractor {",
          "        pub fn class_over_limit_bytes(&self, cls: &ClassBytes) -> bool {",
          "            false",
          "        }",
          "        ",
          "        pub fn enforce_literal_len(&self, seq: &mut Seq) {}",
          "    }",
          "",
          "    let extractor = TestExtractor { limit_class: 10 };",
          "    let ranges = vec![",
          "        ClassBytesRange::new(1, 3),",
          "        ClassBytesRange::new(5, 7),",
          "    ];",
          "    let cls = ClassBytes::new(ranges);",
          "",
          "    let result = extractor.extract_class_bytes(&cls);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_finite(), true);",
          "    assert!(result.literals().is_some());",
          "    assert_eq!(result.len(), Some(6));",
          "    assert_eq!(result.literals().unwrap().len(), 6);",
          "    assert_eq!(result.literals().unwrap()[0], Literal::from(1));",
          "    assert_eq!(result.literals().unwrap()[1], Literal::from(2));",
          "    assert_eq!(result.literals().unwrap()[2], Literal::from(3));",
          "    assert_eq!(result.literals().unwrap()[3], Literal::from(5));",
          "    assert_eq!(result.literals().unwrap()[4], Literal::from(6));",
          "    assert_eq!(result.literals().unwrap()[5], Literal::from(7));"
        ],
        "code": [
          "{",
          "    struct TestExtractor {",
          "        limit_class: usize,",
          "    }",
          "",
          "    impl Extractor {",
          "        pub fn class_over_limit_bytes(&self, cls: &ClassBytes) -> bool {",
          "            false",
          "        }",
          "        ",
          "        pub fn enforce_literal_len(&self, seq: &mut Seq) {}",
          "    }",
          "",
          "    let extractor = TestExtractor { limit_class: 10 };",
          "    let ranges = vec![",
          "        ClassBytesRange::new(1, 3),",
          "        ClassBytesRange::new(5, 7),",
          "    ];",
          "    let cls = ClassBytes::new(ranges);",
          "",
          "    let result = extractor.extract_class_bytes(&cls);",
          "    assert_eq!(result.is_finite(), true);",
          "    assert!(result.literals().is_some());",
          "    assert_eq!(result.len(), Some(6));",
          "    assert_eq!(result.literals().unwrap().len(), 6);",
          "    assert_eq!(result.literals().unwrap()[0], Literal::from(1));",
          "    assert_eq!(result.literals().unwrap()[1], Literal::from(2));",
          "    assert_eq!(result.literals().unwrap()[2], Literal::from(3));",
          "    assert_eq!(result.literals().unwrap()[3], Literal::from(5));",
          "    assert_eq!(result.literals().unwrap()[4], Literal::from(6));",
          "    assert_eq!(result.literals().unwrap()[5], Literal::from(7));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestExtractor {",
          "        limit_class: usize,",
          "    }",
          "",
          "    impl Extractor {",
          "        pub fn class_over_limit_bytes(&self, cls: &ClassBytes) -> bool {",
          "            false",
          "        }",
          "        ",
          "        pub fn enforce_literal_len(&self, seq: &mut Seq) {}",
          "    }",
          "",
          "    let extractor = TestExtractor { limit_class: 256 };",
          "    let range = ClassBytesRange::new(0, 255);",
          "    let cls = ClassBytes::new(vec![range]);",
          "",
          "    let result = extractor.extract_class_bytes(&cls);",
          "}"
        ],
        "oracle": [
          "    let extractor = TestExtractor { limit_class: 256 };",
          "    let range = ClassBytesRange::new(0, 255);",
          "    let cls = ClassBytes::new(vec![range]);",
          "    let result = extractor.extract_class_bytes(&cls);",
          "    assert!(result.is_finite());",
          "    assert_eq!(result.len(), Some(256));",
          "    assert_eq!(result.literals().unwrap().len(), 256);",
          "    assert_eq!(result.literals().unwrap()[0].bytes, vec![0]);",
          "    assert_eq!(result.literals().unwrap()[255].bytes, vec![255]);"
        ],
        "code": [
          "{",
          "    struct TestExtractor {",
          "        limit_class: usize,",
          "    }",
          "",
          "    impl Extractor {",
          "        pub fn class_over_limit_bytes(&self, cls: &ClassBytes) -> bool {",
          "            false",
          "        }",
          "        ",
          "        pub fn enforce_literal_len(&self, seq: &mut Seq) {}",
          "    }",
          "",
          "    let extractor = TestExtractor { limit_class: 256 };",
          "    let range = ClassBytesRange::new(0, 255);",
          "    let cls = ClassBytes::new(vec![range]);",
          "",
          "    let result = extractor.extract_class_bytes(&cls);",
          "    let extractor = TestExtractor { limit_class: 256 };",
          "    let range = ClassBytesRange::new(0, 255);",
          "    let cls = ClassBytes::new(vec![range]);",
          "    let result = extractor.extract_class_bytes(&cls);",
          "    assert!(result.is_finite());",
          "    assert_eq!(result.len(), Some(256));",
          "    assert_eq!(result.literals().unwrap().len(), 256);",
          "    assert_eq!(result.literals().unwrap()[0].bytes, vec![0]);",
          "    assert_eq!(result.literals().unwrap()[255].bytes, vec![255]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]