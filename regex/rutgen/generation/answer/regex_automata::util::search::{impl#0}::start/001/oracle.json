[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Input::new(b\"foobar\");",
          "    let _ = input.start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(0, input.start());",
          "    ",
          "    let input = Input::new(b\"foobar\").span(2..4);",
          "    assert_eq!(2, input.start());"
        ],
        "code": [
          "{",
          "    let input = Input::new(b\"foobar\");",
          "    let _ = input.start();",
          "    assert_eq!(0, input.start());",
          "    ",
          "    let input = Input::new(b\"foobar\").span(2..4);",
          "    assert_eq!(2, input.start());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Input::new(b\"foobar\").span(2..4);",
          "    let _ = input.start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(input.start(), 2);",
          "    assert_eq!(Input::new(b\"foobar\").start(), 0);",
          "    assert_eq!(Input::new(b\"foobar\").span(5..7).start(), 5);",
          "    assert_eq!(Input::new(b\"foobar\").span(0..1).start(), 0);",
          "    assert_eq!(Input::new(b\"foobar\").span(3..3).start(), 3);",
          "    assert_eq!(Input::new(b\"\").span(0..0).start(), 0);",
          "    assert!(input.start() <= input.end());"
        ],
        "code": [
          "{",
          "    let input = Input::new(b\"foobar\").span(2..4);",
          "    let _ = input.start();",
          "    assert_eq!(input.start(), 2);",
          "    assert_eq!(Input::new(b\"foobar\").start(), 0);",
          "    assert_eq!(Input::new(b\"foobar\").span(5..7).start(), 5);",
          "    assert_eq!(Input::new(b\"foobar\").span(0..1).start(), 0);",
          "    assert_eq!(Input::new(b\"foobar\").span(3..3).start(), 3);",
          "    assert_eq!(Input::new(b\"\").span(0..0).start(), 0);",
          "    assert!(input.start() <= input.end());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Input::new(b\"foobar\").span(0..0);",
          "    let _ = input.start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(0, input.start());",
          "    let input = Input::new(b\"foobar\").span(2..4);",
          "    assert_eq!(2, input.start());",
          "    let input = Input::new(b\"foobar\").span(0..1);",
          "    assert_eq!(0, input.start());",
          "    let input = Input::new(b\"foobar\").span(3..5);",
          "    assert_eq!(3, input.start());",
          "    let input = Input::new(b\"foobar\").span(0..6);",
          "    assert_eq!(0, input.start());",
          "    let input = Input::new(b\"foobar\").span(5..5);",
          "    assert_eq!(5, input.start());",
          "    let input = Input::new(b\"\").span(0..0);",
          "    assert_eq!(0, input.start());",
          "    let input = Input::new(b\"abc\").span(1..2);",
          "    assert_eq!(1, input.start());"
        ],
        "code": [
          "{",
          "    let input = Input::new(b\"foobar\").span(0..0);",
          "    let _ = input.start();",
          "    assert_eq!(0, input.start());",
          "    let input = Input::new(b\"foobar\").span(2..4);",
          "    assert_eq!(2, input.start());",
          "    let input = Input::new(b\"foobar\").span(0..1);",
          "    assert_eq!(0, input.start());",
          "    let input = Input::new(b\"foobar\").span(3..5);",
          "    assert_eq!(3, input.start());",
          "    let input = Input::new(b\"foobar\").span(0..6);",
          "    assert_eq!(0, input.start());",
          "    let input = Input::new(b\"foobar\").span(5..5);",
          "    assert_eq!(5, input.start());",
          "    let input = Input::new(b\"\").span(0..0);",
          "    assert_eq!(0, input.start());",
          "    let input = Input::new(b\"abc\").span(1..2);",
          "    assert_eq!(1, input.start());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Input::new(b\"foobar\").span(0..6);",
          "    let _ = input.start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(0, input.start());",
          "    let input = Input::new(b\"foobar\").span(2..4);",
          "    assert_eq!(2, input.start());",
          "    let input = Input::new(b\"foobar\").span(4..6);",
          "    assert_eq!(4, input.start());",
          "    let input = Input::new(b\"\").span(0..0);",
          "    assert_eq!(0, input.start());",
          "    let input = Input::new(b\"test\").span(0..4);",
          "    assert_eq!(0, input.start());",
          "    let input = Input::new(b\"test\").span(1..3);",
          "    assert_eq!(1, input.start());",
          "    let input = Input::new(b\"test\").span(3..4);",
          "    assert_eq!(3, input.start());",
          "    let input = Input::new(b\"example\").span(7..7);",
          "    assert_eq!(7, input.start());",
          "    let input = Input::new(b\"example\").span(5..7);",
          "    assert_eq!(5, input.start());"
        ],
        "code": [
          "{",
          "    let input = Input::new(b\"foobar\").span(0..6);",
          "    let _ = input.start();",
          "    assert_eq!(0, input.start());",
          "    let input = Input::new(b\"foobar\").span(2..4);",
          "    assert_eq!(2, input.start());",
          "    let input = Input::new(b\"foobar\").span(4..6);",
          "    assert_eq!(4, input.start());",
          "    let input = Input::new(b\"\").span(0..0);",
          "    assert_eq!(0, input.start());",
          "    let input = Input::new(b\"test\").span(0..4);",
          "    assert_eq!(0, input.start());",
          "    let input = Input::new(b\"test\").span(1..3);",
          "    assert_eq!(1, input.start());",
          "    let input = Input::new(b\"test\").span(3..4);",
          "    assert_eq!(3, input.start());",
          "    let input = Input::new(b\"example\").span(7..7);",
          "    assert_eq!(7, input.start());",
          "    let input = Input::new(b\"example\").span(5..7);",
          "    assert_eq!(5, input.start());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Input::new(b\"foobar\").anchored(Anchored::Yes);",
          "    let _ = input.start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(0, Input::new(b\"foobar\").start());",
          "    assert_eq!(2, Input::new(b\"foobar\").span(2..4).start());",
          "    assert_eq!(0, Input::new(b\"foobar\").span(0..6).start());",
          "    assert_eq!(3, Input::new(b\"foobar\").span(3..5).start());",
          "    assert_eq!(1, Input::new(b\"foobar\").span(1..3).start());",
          "    assert_eq!(0, Input::new(b\"\").span(0..0).start());",
          "    assert_eq!(0, Input::new(b\"abc\").anchored(Anchored::No).start());"
        ],
        "code": [
          "{",
          "    let input = Input::new(b\"foobar\").anchored(Anchored::Yes);",
          "    let _ = input.start();",
          "    assert_eq!(0, Input::new(b\"foobar\").start());",
          "    assert_eq!(2, Input::new(b\"foobar\").span(2..4).start());",
          "    assert_eq!(0, Input::new(b\"foobar\").span(0..6).start());",
          "    assert_eq!(3, Input::new(b\"foobar\").span(3..5).start());",
          "    assert_eq!(1, Input::new(b\"foobar\").span(1..3).start());",
          "    assert_eq!(0, Input::new(b\"\").span(0..0).start());",
          "    assert_eq!(0, Input::new(b\"abc\").anchored(Anchored::No).start());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Input::new(b\"foobar\").anchored(Anchored::No);",
          "    let _ = input.start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(0, input.start());",
          "    let input = Input::new(b\"foobar\").span(2..4);",
          "    assert_eq!(2, input.start());",
          "    let input = Input::new(b\"foobar\").span(0..6);",
          "    assert_eq!(0, input.start());",
          "    let input = Input::new(b\"foobar\").anchored(Anchored::Yes).span(1..3);",
          "    assert_eq!(1, input.start());",
          "    let input = Input::new(b\"\").span(0..0);",
          "    assert_eq!(0, input.start());",
          "    let input = Input::new(b\"test string\").span(5..10);",
          "    assert_eq!(5, input.start());"
        ],
        "code": [
          "{",
          "    let input = Input::new(b\"foobar\").anchored(Anchored::No);",
          "    let _ = input.start();",
          "    assert_eq!(0, input.start());",
          "    let input = Input::new(b\"foobar\").span(2..4);",
          "    assert_eq!(2, input.start());",
          "    let input = Input::new(b\"foobar\").span(0..6);",
          "    assert_eq!(0, input.start());",
          "    let input = Input::new(b\"foobar\").anchored(Anchored::Yes).span(1..3);",
          "    assert_eq!(1, input.start());",
          "    let input = Input::new(b\"\").span(0..0);",
          "    assert_eq!(0, input.start());",
          "    let input = Input::new(b\"test string\").span(5..10);",
          "    assert_eq!(5, input.start());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Input::new(b\"foobar\").anchored(Anchored::Pattern(PatternID(1)));",
          "    let _ = input.start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(input.start(), 0);",
          "    let input_span = input.span(2..4);",
          "    assert_eq!(input_span.start(), 2);",
          "    assert_eq!(input.start(), input.get_span().start);",
          "    assert_eq!(input.start(), input.get_range().start);",
          "    assert!(input.start() <= input.end());",
          "    assert!(input.is_done() || input.start() > input.end());"
        ],
        "code": [
          "{",
          "    let input = Input::new(b\"foobar\").anchored(Anchored::Pattern(PatternID(1)));",
          "    let _ = input.start();",
          "    assert_eq!(input.start(), 0);",
          "    let input_span = input.span(2..4);",
          "    assert_eq!(input_span.start(), 2);",
          "    assert_eq!(input.start(), input.get_span().start);",
          "    assert_eq!(input.start(), input.get_range().start);",
          "    assert!(input.start() <= input.end());",
          "    assert!(input.is_done() || input.start() > input.end());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Input::new(b\"foobar\").earliest(true);",
          "    let _ = input.start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(input.start(), 0);",
          "    let input = Input::new(b\"foobar\").span(2..4);",
          "    assert_eq!(input.start(), 2);",
          "    let input = Input::new(b\"foobar\").span(0..6);",
          "    assert_eq!(input.start(), 0);",
          "    let input = Input::new(b\"foobar\").span(3..5);",
          "    assert_eq!(input.start(), 3);",
          "    let input = Input::new(b\"foobar\").span(5..5);",
          "    assert_eq!(input.start(), 5);"
        ],
        "code": [
          "{",
          "    let input = Input::new(b\"foobar\").earliest(true);",
          "    let _ = input.start();",
          "    assert_eq!(input.start(), 0);",
          "    let input = Input::new(b\"foobar\").span(2..4);",
          "    assert_eq!(input.start(), 2);",
          "    let input = Input::new(b\"foobar\").span(0..6);",
          "    assert_eq!(input.start(), 0);",
          "    let input = Input::new(b\"foobar\").span(3..5);",
          "    assert_eq!(input.start(), 3);",
          "    let input = Input::new(b\"foobar\").span(5..5);",
          "    assert_eq!(input.start(), 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Input::new(b\"foobar\").earliest(false);",
          "    let _ = input.start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(0, input.start());",
          "    let input = Input::new(b\"foobar\").span(2..4);",
          "    assert_eq!(2, input.start());",
          "    let input = Input::new(b\"foobar\").span(0..6);",
          "    assert_eq!(0, input.start());",
          "    let input = Input::new(b\"foobar\").span(3..3);",
          "    assert_eq!(3, input.start());",
          "    let input = Input::new(b\"foo\").span(1..3);",
          "    assert_eq!(1, input.start());",
          "    let input = Input::new(b\"\").span(0..0);",
          "    assert_eq!(0, input.start());"
        ],
        "code": [
          "{",
          "    let input = Input::new(b\"foobar\").earliest(false);",
          "    let _ = input.start();",
          "    assert_eq!(0, input.start());",
          "    let input = Input::new(b\"foobar\").span(2..4);",
          "    assert_eq!(2, input.start());",
          "    let input = Input::new(b\"foobar\").span(0..6);",
          "    assert_eq!(0, input.start());",
          "    let input = Input::new(b\"foobar\").span(3..3);",
          "    assert_eq!(3, input.start());",
          "    let input = Input::new(b\"foo\").span(1..3);",
          "    assert_eq!(1, input.start());",
          "    let input = Input::new(b\"\").span(0..0);",
          "    assert_eq!(0, input.start());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Input::new(b\"\").span(0..0);",
          "    let _ = input.start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(0, input.start());",
          "    let input = Input::new(b\"foobar\");",
          "    assert_eq!(0, input.start());",
          "    let input = Input::new(b\"foobar\").span(2..4);",
          "    assert_eq!(2, input.start());",
          "    let input = Input::new(b\"example\").span(1..5);",
          "    assert_eq!(1, input.start());",
          "    let input = Input::new(b\"test\").span(0..4);",
          "    assert_eq!(0, input.start());",
          "    let input = Input::new(b\"\").span(0..0);",
          "    assert_eq!(0, input.start());",
          "    let input = Input::new(b\"rust\").span(3..4);",
          "    assert_eq!(3, input.start());",
          "    let input = Input::new(b\"\").span(0..1);",
          "    assert_eq!(0, input.start());",
          "    let input = Input::new(b\"hello world\").span(5..11);",
          "    assert_eq!(5, input.start());",
          "    let input = Input::new(b\"abc\").span(0..3);",
          "    assert_eq!(0, input.start());"
        ],
        "code": [
          "{",
          "    let input = Input::new(b\"\").span(0..0);",
          "    let _ = input.start();",
          "    assert_eq!(0, input.start());",
          "    let input = Input::new(b\"foobar\");",
          "    assert_eq!(0, input.start());",
          "    let input = Input::new(b\"foobar\").span(2..4);",
          "    assert_eq!(2, input.start());",
          "    let input = Input::new(b\"example\").span(1..5);",
          "    assert_eq!(1, input.start());",
          "    let input = Input::new(b\"test\").span(0..4);",
          "    assert_eq!(0, input.start());",
          "    let input = Input::new(b\"\").span(0..0);",
          "    assert_eq!(0, input.start());",
          "    let input = Input::new(b\"rust\").span(3..4);",
          "    assert_eq!(3, input.start());",
          "    let input = Input::new(b\"\").span(0..1);",
          "    assert_eq!(0, input.start());",
          "    let input = Input::new(b\"hello world\").span(5..11);",
          "    assert_eq!(5, input.start());",
          "    let input = Input::new(b\"abc\").span(0..3);",
          "    assert_eq!(0, input.start());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]