[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"abc # comment\\n xyz\";",
          "    let parser = Parser {",
          "        pos: Cell::new(Position::new(0, 0)),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: true,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(true),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI::new(&parser, pattern);",
          "    let result = parser_i.peek_space();",
          "}"
        ],
        "oracle": [
          "    let pattern = \"abc # comment\\n xyz\";",
          "    let parser = Parser {",
          "    pos: Cell::new(Position::new(0, 0)),",
          "    capture_index: Cell::new(0),",
          "    nest_limit: 10,",
          "    octal: true,",
          "    initial_ignore_whitespace: false,",
          "    empty_min_range: false,",
          "    ignore_whitespace: Cell::new(true),",
          "    comments: RefCell::new(vec![]),",
          "    stack_group: RefCell::new(vec![]),",
          "    stack_class: RefCell::new(vec![]),",
          "    capture_names: RefCell::new(vec![]),",
          "    scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI::new(&parser, pattern);",
          "    assert_eq!(parser_i.peek_space(), Some('x'));"
        ],
        "code": [
          "{",
          "    let pattern = \"abc # comment\\n xyz\";",
          "    let parser = Parser {",
          "        pos: Cell::new(Position::new(0, 0)),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: true,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(true),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI::new(&parser, pattern);",
          "    let result = parser_i.peek_space();",
          "    let pattern = \"abc # comment\\n xyz\";",
          "    let parser = Parser {",
          "    pos: Cell::new(Position::new(0, 0)),",
          "    capture_index: Cell::new(0),",
          "    nest_limit: 10,",
          "    octal: true,",
          "    initial_ignore_whitespace: false,",
          "    empty_min_range: false,",
          "    ignore_whitespace: Cell::new(true),",
          "    comments: RefCell::new(vec![]),",
          "    stack_group: RefCell::new(vec![]),",
          "    stack_class: RefCell::new(vec![]),",
          "    capture_names: RefCell::new(vec![]),",
          "    scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI::new(&parser, pattern);",
          "    assert_eq!(parser_i.peek_space(), Some('x'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"abc # comment\\nxyz\";",
          "    let parser = Parser {",
          "        pos: Cell::new(Position::new(0, 0)),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: true,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(true),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI::new(&parser, pattern);",
          "    let result = parser_i.peek_space();",
          "}"
        ],
        "oracle": [
          "    assert!(parser_i.ignore_whitespace() == true);",
          "    assert!(!parser_i.is_eof());",
          "    assert_eq!(parser_i.pattern().chars().nth(parser_i.offset() + parser_i.char().len_utf8()).unwrap(), '#');",
          "    assert_eq!(parser_i.offset(), 0);",
          "    assert_eq!(parser_i.peek_space(), Some('x'));"
        ],
        "code": [
          "{",
          "    let pattern = \"abc # comment\\nxyz\";",
          "    let parser = Parser {",
          "        pos: Cell::new(Position::new(0, 0)),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: true,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(true),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI::new(&parser, pattern);",
          "    let result = parser_i.peek_space();",
          "    assert!(parser_i.ignore_whitespace() == true);",
          "    assert!(!parser_i.is_eof());",
          "    assert_eq!(parser_i.pattern().chars().nth(parser_i.offset() + parser_i.char().len_utf8()).unwrap(), '#');",
          "    assert_eq!(parser_i.offset(), 0);",
          "    assert_eq!(parser_i.peek_space(), Some('x'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"def # sample function\\nabc\";",
          "    let parser = Parser {",
          "        pos: Cell::new(Position::new(0, 0)),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: true,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(true),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI::new(&parser, pattern);",
          "    let result = parser_i.peek_space();",
          "}"
        ],
        "oracle": [
          "    parser_i.ignore_whitespace() == true",
          "    parser_i.is_eof() == false",
          "    let start = parser_i.offset() + parser_i.char().len_utf8();",
          "    for (i, c) in parser_i.pattern()[start..].char_indices() {",
          "    assert!(c.is_whitespace() == false);",
          "    assert!(in_comment == false);",
          "    assert!(c == '#');",
          "    in_comment = true;",
          "    assert!(in_comment == true);",
          "    assert!(c == '\\n' == false);",
          "    }",
          "    assert!(start < parser_i.pattern().len());"
        ],
        "code": [
          "{",
          "    let pattern = \"def # sample function\\nabc\";",
          "    let parser = Parser {",
          "        pos: Cell::new(Position::new(0, 0)),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: true,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(true),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI::new(&parser, pattern);",
          "    let result = parser_i.peek_space();",
          "    parser_i.ignore_whitespace() == true",
          "    parser_i.is_eof() == false",
          "    let start = parser_i.offset() + parser_i.char().len_utf8();",
          "    for (i, c) in parser_i.pattern()[start..].char_indices() {",
          "    assert!(c.is_whitespace() == false);",
          "    assert!(in_comment == false);",
          "    assert!(c == '#');",
          "    in_comment = true;",
          "    assert!(in_comment == true);",
          "    assert!(c == '\\n' == false);",
          "    }",
          "    assert!(start < parser_i.pattern().len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]