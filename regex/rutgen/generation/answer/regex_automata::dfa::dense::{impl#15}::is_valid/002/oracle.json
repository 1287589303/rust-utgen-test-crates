[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition_table = TransitionTable {",
          "        table: vec![0; 10],  // Length 10",
          "        classes: ByteClasses([0; 256]),",
          "        stride2: 4,  // Stride of 16",
          "    };",
          "    let id = transition_table.to_state_id(10);  // id == self.table().len()",
          "    transition_table.is_valid(id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(transition_table.is_valid(transition_table.to_state_id(10)), false);"
        ],
        "code": [
          "{",
          "    let transition_table = TransitionTable {",
          "        table: vec![0; 10],  // Length 10",
          "        classes: ByteClasses([0; 256]),",
          "        stride2: 4,  // Stride of 16",
          "    };",
          "    let id = transition_table.to_state_id(10);  // id == self.table().len()",
          "    transition_table.is_valid(id);",
          "    assert_eq!(transition_table.is_valid(transition_table.to_state_id(10)), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition_table = TransitionTable {",
          "        table: vec![0; 10],  // Length 10",
          "        classes: ByteClasses([0; 256]),",
          "        stride2: 4,  // Stride of 16",
          "    };",
          "    let id = transition_table.to_state_id(3);  // 3 is not a multiple of 16",
          "    transition_table.is_valid(id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(transition_table.is_valid(transition_table.to_state_id(10)), false);  // id == self.table().len()",
          "    assert_eq!(transition_table.is_valid(transition_table.to_state_id(3)), false);  // id is not a multiple of stride",
          "    assert!(transition_table.table().len() == 10);  // table length check for precondition",
          "    assert!(transition_table.stride() == 16);  // stride check for validation",
          "    assert_eq!(transition_table.is_valid(transition_table.to_state_id(0)), true);  // valid offset for initial state",
          "    assert_eq!(transition_table.is_valid(transition_table.to_state_id(16)), true);  // valid offset, multiple of stride"
        ],
        "code": [
          "{",
          "    let transition_table = TransitionTable {",
          "        table: vec![0; 10],  // Length 10",
          "        classes: ByteClasses([0; 256]),",
          "        stride2: 4,  // Stride of 16",
          "    };",
          "    let id = transition_table.to_state_id(3);  // 3 is not a multiple of 16",
          "    transition_table.is_valid(id);",
          "    assert_eq!(transition_table.is_valid(transition_table.to_state_id(10)), false);  // id == self.table().len()",
          "    assert_eq!(transition_table.is_valid(transition_table.to_state_id(3)), false);  // id is not a multiple of stride",
          "    assert!(transition_table.table().len() == 10);  // table length check for precondition",
          "    assert!(transition_table.stride() == 16);  // stride check for validation",
          "    assert_eq!(transition_table.is_valid(transition_table.to_state_id(0)), true);  // valid offset for initial state",
          "    assert_eq!(transition_table.is_valid(transition_table.to_state_id(16)), true);  // valid offset, multiple of stride",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]