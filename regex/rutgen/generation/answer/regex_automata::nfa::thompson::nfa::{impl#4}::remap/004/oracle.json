[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut state = State::BinaryUnion {",
          "        alt1: StateID(SmallIndex(1)),",
          "        alt2: StateID(SmallIndex(2)),",
          "    };",
          "    let remap = [",
          "        StateID(SmallIndex(0)),",
          "        StateID(SmallIndex(3)),",
          "        StateID(SmallIndex(4)),",
          "        StateID(SmallIndex(5)),",
          "    ];",
          "    state.remap(&remap);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.alt1, StateID(SmallIndex(3)));",
          "    assert_eq!(state.alt2, StateID(SmallIndex(4)));"
        ],
        "code": [
          "{",
          "    let mut state = State::BinaryUnion {",
          "        alt1: StateID(SmallIndex(1)),",
          "        alt2: StateID(SmallIndex(2)),",
          "    };",
          "    let remap = [",
          "        StateID(SmallIndex(0)),",
          "        StateID(SmallIndex(3)),",
          "        StateID(SmallIndex(4)),",
          "        StateID(SmallIndex(5)),",
          "    ];",
          "    state.remap(&remap);",
          "    assert_eq!(state.alt1, StateID(SmallIndex(3)));",
          "    assert_eq!(state.alt2, StateID(SmallIndex(4)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut state = State::BinaryUnion {",
          "        alt1: StateID(SmallIndex(254)),",
          "        alt2: StateID(SmallIndex(255)),",
          "    };",
          "    let remap = [",
          "        StateID(SmallIndex(0)),",
          "        StateID(SmallIndex(1)),",
          "        StateID(SmallIndex(2)),",
          "        // ... (up to 255)",
          "        StateID(SmallIndex(254)),",
          "        StateID(SmallIndex(255)),",
          "    ];",
          "    state.remap(&remap);",
          "}"
        ],
        "oracle": [
          "    state.remap(&remap);",
          "    assert_eq!(state, State::BinaryUnion {",
          "    alt1: StateID(SmallIndex(254)),",
          "    alt2: StateID(SmallIndex(255)),",
          "    });",
          "    remap[StateID(SmallIndex(254))] = StateID(SmallIndex(1));",
          "    remap[StateID(SmallIndex(255))] = StateID(SmallIndex(2));",
          "    state.remap(&remap);",
          "    assert_eq!(state, State::BinaryUnion {",
          "    alt1: StateID(SmallIndex(1)),",
          "    alt2: StateID(SmallIndex(2)),",
          "    });",
          "    remap[StateID(SmallIndex(254))] = StateID(SmallIndex(0));",
          "    state.remap(&remap);",
          "    assert_eq!(state, State::BinaryUnion {",
          "    alt1: StateID(SmallIndex(0)),",
          "    alt2: StateID(SmallIndex(2)),",
          "    });",
          "    remap[StateID(SmallIndex(255))] = StateID(SmallIndex(1));",
          "    state.remap(&remap);",
          "    assert_eq!(state, State::BinaryUnion {",
          "    alt1: StateID(SmallIndex(0)),",
          "    alt2: StateID(SmallIndex(1)),",
          "    });"
        ],
        "code": [
          "{",
          "    let mut state = State::BinaryUnion {",
          "        alt1: StateID(SmallIndex(254)),",
          "        alt2: StateID(SmallIndex(255)),",
          "    };",
          "    let remap = [",
          "        StateID(SmallIndex(0)),",
          "        StateID(SmallIndex(1)),",
          "        StateID(SmallIndex(2)),",
          "        // ... (up to 255)",
          "        StateID(SmallIndex(254)),",
          "        StateID(SmallIndex(255)),",
          "    ];",
          "    state.remap(&remap);",
          "    state.remap(&remap);",
          "    assert_eq!(state, State::BinaryUnion {",
          "    alt1: StateID(SmallIndex(254)),",
          "    alt2: StateID(SmallIndex(255)),",
          "    });",
          "    remap[StateID(SmallIndex(254))] = StateID(SmallIndex(1));",
          "    remap[StateID(SmallIndex(255))] = StateID(SmallIndex(2));",
          "    state.remap(&remap);",
          "    assert_eq!(state, State::BinaryUnion {",
          "    alt1: StateID(SmallIndex(1)),",
          "    alt2: StateID(SmallIndex(2)),",
          "    });",
          "    remap[StateID(SmallIndex(254))] = StateID(SmallIndex(0));",
          "    state.remap(&remap);",
          "    assert_eq!(state, State::BinaryUnion {",
          "    alt1: StateID(SmallIndex(0)),",
          "    alt2: StateID(SmallIndex(2)),",
          "    });",
          "    remap[StateID(SmallIndex(255))] = StateID(SmallIndex(1));",
          "    state.remap(&remap);",
          "    assert_eq!(state, State::BinaryUnion {",
          "    alt1: StateID(SmallIndex(0)),",
          "    alt2: StateID(SmallIndex(1)),",
          "    });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut state = State::BinaryUnion {",
          "        alt1: StateID(SmallIndex(0)),",
          "        alt2: StateID(SmallIndex(1)),",
          "    };",
          "    let remap = [",
          "        StateID(SmallIndex(0)),",
          "        StateID(SmallIndex(2)),",
          "        StateID(SmallIndex(3)),",
          "        // ... (up to 255)",
          "    ];",
          "    state.remap(&remap);",
          "}"
        ],
        "oracle": [
          "    let mut state = State::BinaryUnion { alt1: StateID(SmallIndex(0)), alt2: StateID(SmallIndex(1)) };",
          "    let remap = [StateID(SmallIndex(0)), StateID(SmallIndex(2)), StateID(SmallIndex(3))];",
          "    state.remap(&remap);",
          "    assert_eq!(state, State::BinaryUnion { alt1: StateID(SmallIndex(0)), alt2: StateID(SmallIndex(2)) });",
          "    ",
          "    let mut state = State::BinaryUnion { alt1: StateID(SmallIndex(2)), alt2: StateID(SmallIndex(3)) };",
          "    let remap = [StateID(SmallIndex(1)), StateID(SmallIndex(4)), StateID(SmallIndex(5))];",
          "    state.remap(&remap);",
          "    assert_eq!(state, State::BinaryUnion { alt1: StateID(SmallIndex(4)), alt2: StateID(SmallIndex(5)) });",
          "    ",
          "    let mut state = State::BinaryUnion { alt1: StateID(SmallIndex(10)), alt2: StateID(SmallIndex(20)) };",
          "    let remap = [StateID(SmallIndex(10)), StateID(SmallIndex(30)), StateID(SmallIndex(40))];",
          "    state.remap(&remap);",
          "    assert_eq!(state, State::BinaryUnion { alt1: StateID(SmallIndex(30)), alt2: StateID(SmallIndex(20)) });",
          "    ",
          "    let mut state = State::BinaryUnion { alt1: StateID(SmallIndex(100)), alt2: StateID(SmallIndex(200)) };",
          "    let remap = [StateID(SmallIndex(99)), StateID(SmallIndex(101)), StateID(SmallIndex(199))];",
          "    state.remap(&remap);",
          "    assert_eq!(state, State::BinaryUnion { alt1: StateID(SmallIndex(101)), alt2: StateID(SmallIndex(200)) });",
          "    ",
          "    let mut state = State::BinaryUnion { alt1: StateID(SmallIndex(3)), alt2: StateID(SmallIndex(4)) };",
          "    let remap = [StateID(SmallIndex(2)), StateID(SmallIndex(5)), StateID(SmallIndex(6))];",
          "    state.remap(&remap);",
          "    assert_eq!(state, State::BinaryUnion { alt1: StateID(SmallIndex(5)), alt2: StateID(SmallIndex(6)) });"
        ],
        "code": [
          "{",
          "    let mut state = State::BinaryUnion {",
          "        alt1: StateID(SmallIndex(0)),",
          "        alt2: StateID(SmallIndex(1)),",
          "    };",
          "    let remap = [",
          "        StateID(SmallIndex(0)),",
          "        StateID(SmallIndex(2)),",
          "        StateID(SmallIndex(3)),",
          "        // ... (up to 255)",
          "    ];",
          "    state.remap(&remap);",
          "    let mut state = State::BinaryUnion { alt1: StateID(SmallIndex(0)), alt2: StateID(SmallIndex(1)) };",
          "    let remap = [StateID(SmallIndex(0)), StateID(SmallIndex(2)), StateID(SmallIndex(3))];",
          "    state.remap(&remap);",
          "    assert_eq!(state, State::BinaryUnion { alt1: StateID(SmallIndex(0)), alt2: StateID(SmallIndex(2)) });",
          "    ",
          "    let mut state = State::BinaryUnion { alt1: StateID(SmallIndex(2)), alt2: StateID(SmallIndex(3)) };",
          "    let remap = [StateID(SmallIndex(1)), StateID(SmallIndex(4)), StateID(SmallIndex(5))];",
          "    state.remap(&remap);",
          "    assert_eq!(state, State::BinaryUnion { alt1: StateID(SmallIndex(4)), alt2: StateID(SmallIndex(5)) });",
          "    ",
          "    let mut state = State::BinaryUnion { alt1: StateID(SmallIndex(10)), alt2: StateID(SmallIndex(20)) };",
          "    let remap = [StateID(SmallIndex(10)), StateID(SmallIndex(30)), StateID(SmallIndex(40))];",
          "    state.remap(&remap);",
          "    assert_eq!(state, State::BinaryUnion { alt1: StateID(SmallIndex(30)), alt2: StateID(SmallIndex(20)) });",
          "    ",
          "    let mut state = State::BinaryUnion { alt1: StateID(SmallIndex(100)), alt2: StateID(SmallIndex(200)) };",
          "    let remap = [StateID(SmallIndex(99)), StateID(SmallIndex(101)), StateID(SmallIndex(199))];",
          "    state.remap(&remap);",
          "    assert_eq!(state, State::BinaryUnion { alt1: StateID(SmallIndex(101)), alt2: StateID(SmallIndex(200)) });",
          "    ",
          "    let mut state = State::BinaryUnion { alt1: StateID(SmallIndex(3)), alt2: StateID(SmallIndex(4)) };",
          "    let remap = [StateID(SmallIndex(2)), StateID(SmallIndex(5)), StateID(SmallIndex(6))];",
          "    state.remap(&remap);",
          "    assert_eq!(state, State::BinaryUnion { alt1: StateID(SmallIndex(5)), alt2: StateID(SmallIndex(6)) });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut state = State::BinaryUnion {",
          "        alt1: StateID(SmallIndex(5)),",
          "        alt2: StateID(SmallIndex(10)),",
          "    };",
          "    let remap = [",
          "        StateID(SmallIndex(0)),",
          "        StateID(SmallIndex(1)),",
          "        StateID(SmallIndex(2)),",
          "        // ... (only creating a short array)",
          "    ];",
          "    state.remap(&remap);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state, State::BinaryUnion { alt1: StateID(SmallIndex(0)), alt2: StateID(SmallIndex(10)) });",
          "    assert_eq!(state.is_epsilon(), false);",
          "    assert_eq!(state.memory_usage(), expected_memory_usage);"
        ],
        "code": [
          "{",
          "    let mut state = State::BinaryUnion {",
          "        alt1: StateID(SmallIndex(5)),",
          "        alt2: StateID(SmallIndex(10)),",
          "    };",
          "    let remap = [",
          "        StateID(SmallIndex(0)),",
          "        StateID(SmallIndex(1)),",
          "        StateID(SmallIndex(2)),",
          "        // ... (only creating a short array)",
          "    ];",
          "    state.remap(&remap);",
          "    assert_eq!(state, State::BinaryUnion { alt1: StateID(SmallIndex(0)), alt2: StateID(SmallIndex(10)) });",
          "    assert_eq!(state.is_epsilon(), false);",
          "    assert_eq!(state.memory_usage(), expected_memory_usage);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]