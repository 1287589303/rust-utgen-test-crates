[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut state = State::Capture {",
          "        next: StateID(SmallIndex(1)),",
          "        pattern_id: PatternID(SmallIndex(0)),",
          "        group_index: SmallIndex(0),",
          "        slot: SmallIndex(0),",
          "    };",
          "",
          "    let remap = vec![StateID(SmallIndex(0)), StateID(SmallIndex(2))];",
          "",
          "    state.remap(&remap);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.next, StateID(SmallIndex(2)));"
        ],
        "code": [
          "{",
          "    let mut state = State::Capture {",
          "        next: StateID(SmallIndex(1)),",
          "        pattern_id: PatternID(SmallIndex(0)),",
          "        group_index: SmallIndex(0),",
          "        slot: SmallIndex(0),",
          "    };",
          "",
          "    let remap = vec![StateID(SmallIndex(0)), StateID(SmallIndex(2))];",
          "",
          "    state.remap(&remap);",
          "    assert_eq!(state.next, StateID(SmallIndex(2)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut state = State::Capture {",
          "        next: StateID(SmallIndex(0)),",
          "        pattern_id: PatternID(SmallIndex(1)),",
          "        group_index: SmallIndex(0),",
          "        slot: SmallIndex(1),",
          "    };",
          "",
          "    let remap = vec![",
          "        StateID(SmallIndex(5)),",
          "        StateID(SmallIndex(1)),",
          "        StateID(SmallIndex(4)),",
          "    ];",
          "",
          "    state.remap(&remap);",
          "}"
        ],
        "oracle": [
          "    let mut state = State::Capture { next: StateID(SmallIndex(0)), pattern_id: PatternID(SmallIndex(1)), group_index: SmallIndex(0), slot: SmallIndex(1) };",
          "    let remap = vec![StateID(SmallIndex(5)), StateID(SmallIndex(1)), StateID(SmallIndex(4))];",
          "    state.remap(&remap);",
          "    assert_eq!(state, State::Capture { next: StateID(SmallIndex(5)), pattern_id: PatternID(SmallIndex(1)), group_index: SmallIndex(0), slot: SmallIndex(1) });"
        ],
        "code": [
          "{",
          "    let mut state = State::Capture {",
          "        next: StateID(SmallIndex(0)),",
          "        pattern_id: PatternID(SmallIndex(1)),",
          "        group_index: SmallIndex(0),",
          "        slot: SmallIndex(1),",
          "    };",
          "",
          "    let remap = vec![",
          "        StateID(SmallIndex(5)),",
          "        StateID(SmallIndex(1)),",
          "        StateID(SmallIndex(4)),",
          "    ];",
          "",
          "    state.remap(&remap);",
          "    let mut state = State::Capture { next: StateID(SmallIndex(0)), pattern_id: PatternID(SmallIndex(1)), group_index: SmallIndex(0), slot: SmallIndex(1) };",
          "    let remap = vec![StateID(SmallIndex(5)), StateID(SmallIndex(1)), StateID(SmallIndex(4))];",
          "    state.remap(&remap);",
          "    assert_eq!(state, State::Capture { next: StateID(SmallIndex(5)), pattern_id: PatternID(SmallIndex(1)), group_index: SmallIndex(0), slot: SmallIndex(1) });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut state = State::Capture {",
          "        next: StateID(SmallIndex(3)),",
          "        pattern_id: PatternID(SmallIndex(2)),",
          "        group_index: SmallIndex(1),",
          "        slot: SmallIndex(0),",
          "    };",
          "",
          "    let remap = vec![",
          "        StateID(SmallIndex(1)),",
          "        StateID(SmallIndex(4)),",
          "        StateID(SmallIndex(2)),",
          "        StateID(SmallIndex(3)),",
          "    ];",
          "",
          "    state.remap(&remap);",
          "}"
        ],
        "oracle": [
          "    let mut state = State::Capture { next: StateID(SmallIndex(3)), pattern_id: PatternID(SmallIndex(2)), group_index: SmallIndex(1), slot: SmallIndex(0) };",
          "    let remap = vec![StateID(SmallIndex(1)), StateID(SmallIndex(4)), StateID(SmallIndex(2)), StateID(SmallIndex(3))];",
          "    state.remap(&remap);",
          "    assert_eq!(state, State::Capture { next: StateID(SmallIndex(3)), pattern_id: PatternID(SmallIndex(2)), group_index: SmallIndex(1), slot: SmallIndex(0) });"
        ],
        "code": [
          "{",
          "    let mut state = State::Capture {",
          "        next: StateID(SmallIndex(3)),",
          "        pattern_id: PatternID(SmallIndex(2)),",
          "        group_index: SmallIndex(1),",
          "        slot: SmallIndex(0),",
          "    };",
          "",
          "    let remap = vec![",
          "        StateID(SmallIndex(1)),",
          "        StateID(SmallIndex(4)),",
          "        StateID(SmallIndex(2)),",
          "        StateID(SmallIndex(3)),",
          "    ];",
          "",
          "    state.remap(&remap);",
          "    let mut state = State::Capture { next: StateID(SmallIndex(3)), pattern_id: PatternID(SmallIndex(2)), group_index: SmallIndex(1), slot: SmallIndex(0) };",
          "    let remap = vec![StateID(SmallIndex(1)), StateID(SmallIndex(4)), StateID(SmallIndex(2)), StateID(SmallIndex(3))];",
          "    state.remap(&remap);",
          "    assert_eq!(state, State::Capture { next: StateID(SmallIndex(3)), pattern_id: PatternID(SmallIndex(2)), group_index: SmallIndex(1), slot: SmallIndex(0) });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut state = State::Capture {",
          "        next: StateID(SmallIndex(0)),",
          "        pattern_id: PatternID(SmallIndex(3)),",
          "        group_index: SmallIndex(0),",
          "        slot: SmallIndex(1),",
          "    };",
          "",
          "    let remap: Vec<StateID> = vec![];",
          "",
          "    state.remap(&remap);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state, State::Capture { next: StateID(SmallIndex(0)), pattern_id: PatternID(SmallIndex(3)), group_index: SmallIndex(0), slot: SmallIndex(1) });",
          "    ",
          "    assert!(matches!(state, State::Capture { next, .. }) && next == StateID(SmallIndex(0)));",
          "    ",
          "    let expected_next_state = StateID(SmallIndex(0));",
          "    assert_eq!(state, State::Capture { next: expected_next_state, pattern_id: PatternID(SmallIndex(3)), group_index: SmallIndex(0), slot: SmallIndex(1) });"
        ],
        "code": [
          "{",
          "    let mut state = State::Capture {",
          "        next: StateID(SmallIndex(0)),",
          "        pattern_id: PatternID(SmallIndex(3)),",
          "        group_index: SmallIndex(0),",
          "        slot: SmallIndex(1),",
          "    };",
          "",
          "    let remap: Vec<StateID> = vec![];",
          "",
          "    state.remap(&remap);",
          "    assert_eq!(state, State::Capture { next: StateID(SmallIndex(0)), pattern_id: PatternID(SmallIndex(3)), group_index: SmallIndex(0), slot: SmallIndex(1) });",
          "    ",
          "    assert!(matches!(state, State::Capture { next, .. }) && next == StateID(SmallIndex(0)));",
          "    ",
          "    let expected_next_state = StateID(SmallIndex(0));",
          "    assert_eq!(state, State::Capture { next: expected_next_state, pattern_id: PatternID(SmallIndex(3)), group_index: SmallIndex(0), slot: SmallIndex(1) });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]