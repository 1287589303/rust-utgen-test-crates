[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut state = State::Match { pattern_id: PatternID(SmallIndex(0)) };",
          "    let remap: Vec<StateID> = (0..256).map(|i| StateID(SmallIndex(i))).collect();",
          "    state.remap(&remap);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state, State::Match { pattern_id: PatternID(SmallIndex(0)) });",
          "    assert_eq!(remap.len(), 256);",
          "    assert_eq!(remap[0], StateID(SmallIndex(0)));",
          "    assert_eq!(remap[255], StateID(SmallIndex(255)));",
          "    assert!(state.is_epsilon() == false);",
          "    assert!(state.memory_usage() > 0);"
        ],
        "code": [
          "{",
          "    let mut state = State::Match { pattern_id: PatternID(SmallIndex(0)) };",
          "    let remap: Vec<StateID> = (0..256).map(|i| StateID(SmallIndex(i))).collect();",
          "    state.remap(&remap);",
          "    assert_eq!(state, State::Match { pattern_id: PatternID(SmallIndex(0)) });",
          "    assert_eq!(remap.len(), 256);",
          "    assert_eq!(remap[0], StateID(SmallIndex(0)));",
          "    assert_eq!(remap[255], StateID(SmallIndex(255)));",
          "    assert!(state.is_epsilon() == false);",
          "    assert!(state.memory_usage() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut state = State::Match { pattern_id: PatternID(SmallIndex(1)) };",
          "    let remap: Vec<StateID> = Vec::new();",
          "    state.remap(&remap);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state, State::Match { pattern_id: PatternID(SmallIndex(1)) });",
          "    assert!(state.is_epsilon(), false);",
          "    assert_eq!(state.memory_usage(), 0);",
          "    assert_eq!(state, State::Match { pattern_id: PatternID(SmallIndex(1)) });"
        ],
        "code": [
          "{",
          "    let mut state = State::Match { pattern_id: PatternID(SmallIndex(1)) };",
          "    let remap: Vec<StateID> = Vec::new();",
          "    state.remap(&remap);",
          "    assert_eq!(state, State::Match { pattern_id: PatternID(SmallIndex(1)) });",
          "    assert!(state.is_epsilon(), false);",
          "    assert_eq!(state.memory_usage(), 0);",
          "    assert_eq!(state, State::Match { pattern_id: PatternID(SmallIndex(1)) });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut state = State::Match { pattern_id: PatternID(SmallIndex(2)) };",
          "    let remap: Vec<StateID> = (0..256).map(|i| StateID(SmallIndex(255 - i))).collect();",
          "    state.remap(&remap);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state, State::Match { pattern_id: PatternID(SmallIndex(2)) });",
          "    assert_eq!(state.memory_usage(), expected_memory_usage);",
          "    assert!(state.is_epsilon() == false);",
          "    assert!(matches!(state, State::Match { .. }));",
          "    assert_eq!(state.remap(&remap), expected_state_after_remap);",
          "    assert!(state != State::Match { pattern_id: PatternID(SmallIndex(0)) });",
          "    assert!(state != State::Match { pattern_id: PatternID(SmallIndex(1)) });",
          "    assert_eq!(remap.len(), 256);",
          "    assert!(remap.iter().all(|id| id.0.0 < 256));"
        ],
        "code": [
          "{",
          "    let mut state = State::Match { pattern_id: PatternID(SmallIndex(2)) };",
          "    let remap: Vec<StateID> = (0..256).map(|i| StateID(SmallIndex(255 - i))).collect();",
          "    state.remap(&remap);",
          "    assert_eq!(state, State::Match { pattern_id: PatternID(SmallIndex(2)) });",
          "    assert_eq!(state.memory_usage(), expected_memory_usage);",
          "    assert!(state.is_epsilon() == false);",
          "    assert!(matches!(state, State::Match { .. }));",
          "    assert_eq!(state.remap(&remap), expected_state_after_remap);",
          "    assert!(state != State::Match { pattern_id: PatternID(SmallIndex(0)) });",
          "    assert!(state != State::Match { pattern_id: PatternID(SmallIndex(1)) });",
          "    assert_eq!(remap.len(), 256);",
          "    assert!(remap.iter().all(|id| id.0.0 < 256));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]