[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id_next = StateID(SmallIndex(1));",
          "    let remap: Vec<StateID> = vec![StateID(SmallIndex(0)), StateID(SmallIndex(2)), StateID(SmallIndex(3))];",
          "    ",
          "    let mut state = State::Look {",
          "        look: Look::Start,",
          "        next: state_id_next,",
          "    };",
          "",
          "    state.remap(&remap);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.next, StateID(SmallIndex(2)));"
        ],
        "code": [
          "{",
          "    let state_id_next = StateID(SmallIndex(1));",
          "    let remap: Vec<StateID> = vec![StateID(SmallIndex(0)), StateID(SmallIndex(2)), StateID(SmallIndex(3))];",
          "    ",
          "    let mut state = State::Look {",
          "        look: Look::Start,",
          "        next: state_id_next,",
          "    };",
          "",
          "    state.remap(&remap);",
          "    assert_eq!(state.next, StateID(SmallIndex(2)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id_next = StateID(SmallIndex(2));",
          "    let remap: Vec<StateID> = vec![StateID(SmallIndex(0)), StateID(SmallIndex(1))];",
          "    ",
          "    let mut state = State::Look {",
          "        look: Look::End,",
          "        next: state_id_next,",
          "    };",
          "",
          "    state.remap(&remap);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state, State::Look { look: Look::End, next: StateID(SmallIndex(1)) });"
        ],
        "code": [
          "{",
          "    let state_id_next = StateID(SmallIndex(2));",
          "    let remap: Vec<StateID> = vec![StateID(SmallIndex(0)), StateID(SmallIndex(1))];",
          "    ",
          "    let mut state = State::Look {",
          "        look: Look::End,",
          "        next: state_id_next,",
          "    };",
          "",
          "    state.remap(&remap);",
          "    assert_eq!(state, State::Look { look: Look::End, next: StateID(SmallIndex(1)) });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let state_id_next = StateID(SmallIndex(5));",
          "    let remap: Vec<StateID> = vec![StateID(SmallIndex(0)), StateID(SmallIndex(1)), StateID(SmallIndex(2))];",
          "    ",
          "    let mut state = State::Look {",
          "        look: Look::StartLF,",
          "        next: state_id_next,",
          "    };",
          "",
          "    state.remap(&remap);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.next, StateID(SmallIndex(1)));"
        ],
        "code": [
          "{",
          "    let state_id_next = StateID(SmallIndex(5));",
          "    let remap: Vec<StateID> = vec![StateID(SmallIndex(0)), StateID(SmallIndex(1)), StateID(SmallIndex(2))];",
          "    ",
          "    let mut state = State::Look {",
          "        look: Look::StartLF,",
          "        next: state_id_next,",
          "    };",
          "",
          "    state.remap(&remap);",
          "    assert_eq!(state.next, StateID(SmallIndex(1)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]