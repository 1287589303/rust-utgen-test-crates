[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id_0 = StateID(SmallIndex(0));",
          "    let state_id_1 = StateID(SmallIndex(1));",
          "    ",
          "    let mut state = State::Union {",
          "        alternates: Box::new([state_id_0]),",
          "    };",
          "    ",
          "    let remap = [state_id_1];",
          "    ",
          "    state.remap(&remap);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state, State::Union { alternates: Box::new([state_id_1]) });"
        ],
        "code": [
          "{",
          "    let state_id_0 = StateID(SmallIndex(0));",
          "    let state_id_1 = StateID(SmallIndex(1));",
          "    ",
          "    let mut state = State::Union {",
          "        alternates: Box::new([state_id_0]),",
          "    };",
          "    ",
          "    let remap = [state_id_1];",
          "    ",
          "    state.remap(&remap);",
          "    assert_eq!(state, State::Union { alternates: Box::new([state_id_1]) });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id_0 = StateID(SmallIndex(0));",
          "    let state_id_1 = StateID(SmallIndex(1));",
          "    let state_id_2 = StateID(SmallIndex(2));",
          "    ",
          "    let mut state = State::Union {",
          "        alternates: Box::new([state_id_0, state_id_1]),",
          "    };",
          "    ",
          "    let remap = [state_id_2, state_id_1];",
          "    ",
          "    state.remap(&remap);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state, State::Union { alternates: Box::new([state_id_2, state_id_1]) });",
          "    assert_eq!(state_id_0, StateID(SmallIndex(0)));",
          "    assert_eq!(state_id_1, StateID(SmallIndex(1)));",
          "    assert_eq!(state_id_2, StateID(SmallIndex(2)));",
          "    assert!(matches!(state, State::Union { ref alternates } if alternates.len() == 2));",
          "    assert!(matches!(state, State::Union { ref mut alternates } if alternates[0] == state_id_2));",
          "    assert!(matches!(state, State::Union { ref mut alternates } if alternates[1] == state_id_1));"
        ],
        "code": [
          "{",
          "    let state_id_0 = StateID(SmallIndex(0));",
          "    let state_id_1 = StateID(SmallIndex(1));",
          "    let state_id_2 = StateID(SmallIndex(2));",
          "    ",
          "    let mut state = State::Union {",
          "        alternates: Box::new([state_id_0, state_id_1]),",
          "    };",
          "    ",
          "    let remap = [state_id_2, state_id_1];",
          "    ",
          "    state.remap(&remap);",
          "    assert_eq!(state, State::Union { alternates: Box::new([state_id_2, state_id_1]) });",
          "    assert_eq!(state_id_0, StateID(SmallIndex(0)));",
          "    assert_eq!(state_id_1, StateID(SmallIndex(1)));",
          "    assert_eq!(state_id_2, StateID(SmallIndex(2)));",
          "    assert!(matches!(state, State::Union { ref alternates } if alternates.len() == 2));",
          "    assert!(matches!(state, State::Union { ref mut alternates } if alternates[0] == state_id_2));",
          "    assert!(matches!(state, State::Union { ref mut alternates } if alternates[1] == state_id_1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut state = State::Union {",
          "        alternates: Box::new([]),",
          "    };",
          "    ",
          "    let remap: &[StateID] = &[];",
          "    ",
          "    state.remap(remap);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state, State::Union { alternates: Box::new([]) });",
          "    assert!(state.is_epsilon() == false);",
          "    assert!(state.memory_usage() > 0);",
          "    assert!(state.remap(&[]) == ());",
          "    assert!(matches!(state, State::Union { alternates }));"
        ],
        "code": [
          "{",
          "    let mut state = State::Union {",
          "        alternates: Box::new([]),",
          "    };",
          "    ",
          "    let remap: &[StateID] = &[];",
          "    ",
          "    state.remap(remap);",
          "    assert_eq!(state, State::Union { alternates: Box::new([]) });",
          "    assert!(state.is_epsilon() == false);",
          "    assert!(state.memory_usage() > 0);",
          "    assert!(state.remap(&[]) == ());",
          "    assert!(matches!(state, State::Union { alternates }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let state_id_0 = StateID(SmallIndex(0));",
          "    ",
          "    let mut state = State::Union {",
          "        alternates: Box::new([state_id_0]),",
          "    };",
          "    ",
          "    let remap = []; // Empty remap, invalid for a single alternate",
          "    ",
          "    state.remap(&remap);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.is_epsilon(), false);",
          "    assert_eq!(state.memory_usage(), expected_memory_usage);",
          "    assert!(matches!(state, State::Union { alternates }) && alternates.len() == 1);",
          "    assert!(matches!(state, State::Union { alternates }));",
          "    assert!(state.remap(&remap).is_err());",
          "    assert!(state.remap(&remap).is_some());",
          "    assert_eq!(state.remap(&[state_id_0]), expected_state);",
          "    assert!(state.remap(&remap).is_ok() && state.next == StateID(SmallIndex(0)));"
        ],
        "code": [
          "{",
          "    let state_id_0 = StateID(SmallIndex(0));",
          "    ",
          "    let mut state = State::Union {",
          "        alternates: Box::new([state_id_0]),",
          "    };",
          "    ",
          "    let remap = []; // Empty remap, invalid for a single alternate",
          "    ",
          "    state.remap(&remap);",
          "    assert_eq!(state.is_epsilon(), false);",
          "    assert_eq!(state.memory_usage(), expected_memory_usage);",
          "    assert!(matches!(state, State::Union { alternates }) && alternates.len() == 1);",
          "    assert!(matches!(state, State::Union { alternates }));",
          "    assert!(state.remap(&remap).is_err());",
          "    assert!(state.remap(&remap).is_some());",
          "    assert_eq!(state.remap(&[state_id_0]), expected_state);",
          "    assert!(state.remap(&remap).is_ok() && state.next == StateID(SmallIndex(0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]