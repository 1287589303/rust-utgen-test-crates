[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sparse_set = SparseSet::new(10);",
          "    sparse_set.resize(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sparse_set.capacity(), 0);",
          "    assert_eq!(sparse_set.len(), 0);",
          "    assert!(sparse_set.is_empty());",
          "    assert_eq!(sparse_set.dense.len(), 0);",
          "    assert_eq!(sparse_set.sparse.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut sparse_set = SparseSet::new(10);",
          "    sparse_set.resize(0);",
          "    assert_eq!(sparse_set.capacity(), 0);",
          "    assert_eq!(sparse_set.len(), 0);",
          "    assert!(sparse_set.is_empty());",
          "    assert_eq!(sparse_set.dense.len(), 0);",
          "    assert_eq!(sparse_set.sparse.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut sparse_set = SparseSet::new(10);",
          "    sparse_set.resize(StateID::LIMIT + 1);",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| {",
          "    let mut sparse_set = SparseSet::new(10);",
          "    sparse_set.resize(StateID::LIMIT + 1);",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    let mut sparse_set = SparseSet::new(10);",
          "    sparse_set.resize(StateID::LIMIT + 1);",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let mut sparse_set = SparseSet::new(10);",
          "    sparse_set.resize(StateID::LIMIT + 1);",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sparse_set = SparseSet::new(10);",
          "    sparse_set.resize(StateID::LIMIT);",
          "}"
        ],
        "oracle": [
          "    assert!(sparse_set.capacity() == StateID::LIMIT);",
          "    assert!(sparse_set.len() == 0);",
          "    assert!(sparse_set.is_empty() == true);",
          "    assert!(sparse_set.dense.len() == StateID::LIMIT);",
          "    assert!(sparse_set.sparse.len() == StateID::LIMIT);"
        ],
        "code": [
          "{",
          "    let mut sparse_set = SparseSet::new(10);",
          "    sparse_set.resize(StateID::LIMIT);",
          "    assert!(sparse_set.capacity() == StateID::LIMIT);",
          "    assert!(sparse_set.len() == 0);",
          "    assert!(sparse_set.is_empty() == true);",
          "    assert!(sparse_set.dense.len() == StateID::LIMIT);",
          "    assert!(sparse_set.sparse.len() == StateID::LIMIT);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sparse_set = SparseSet::new(10);",
          "    sparse_set.resize(StateID::LIMIT / 2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sparse_set.capacity(), StateID::LIMIT / 2);",
          "    assert_eq!(sparse_set.len(), 0);",
          "    assert!(sparse_set.is_empty());"
        ],
        "code": [
          "{",
          "    let mut sparse_set = SparseSet::new(10);",
          "    sparse_set.resize(StateID::LIMIT / 2);",
          "    assert_eq!(sparse_set.capacity(), StateID::LIMIT / 2);",
          "    assert_eq!(sparse_set.len(), 0);",
          "    assert!(sparse_set.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sparse_set = SparseSet::new(10);",
          "    sparse_set.resize(10);",
          "}"
        ],
        "oracle": [
          "    sparse_set.resize(StateID::LIMIT);",
          "    assert_eq!(sparse_set.capacity(), StateID::LIMIT);",
          "    assert!(sparse_set.is_empty());",
          "    sparse_set.resize(StateID::LIMIT);",
          "    assert_eq!(sparse_set.len(), 0);",
          "    assert_eq!(sparse_set.memory_usage(), expected_memory_usage);"
        ],
        "code": [
          "{",
          "    let mut sparse_set = SparseSet::new(10);",
          "    sparse_set.resize(10);",
          "    sparse_set.resize(StateID::LIMIT);",
          "    assert_eq!(sparse_set.capacity(), StateID::LIMIT);",
          "    assert!(sparse_set.is_empty());",
          "    sparse_set.resize(StateID::LIMIT);",
          "    assert_eq!(sparse_set.len(), 0);",
          "    assert_eq!(sparse_set.memory_usage(), expected_memory_usage);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]