[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_ranges = vec![ClassBytesRange::new(0x00, 0x7F)];",
          "    let class_bytes = ClassBytes::new(byte_ranges);",
          "    let class = Class::Bytes(class_bytes);",
          "    class.is_utf8();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class.is_utf8(), true);"
        ],
        "code": [
          "{",
          "    let byte_ranges = vec![ClassBytesRange::new(0x00, 0x7F)];",
          "    let class_bytes = ClassBytes::new(byte_ranges);",
          "    let class = Class::Bytes(class_bytes);",
          "    class.is_utf8();",
          "    assert_eq!(class.is_utf8(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_ranges = vec![",
          "        ClassBytesRange::new(0x20, 0x7F),",
          "        ClassBytesRange::new(0x00, 0x1F),",
          "    ];",
          "    let class_bytes = ClassBytes::new(byte_ranges);",
          "    let class = Class::Bytes(class_bytes);",
          "    class.is_utf8();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class.is_utf8(), true);"
        ],
        "code": [
          "{",
          "    let byte_ranges = vec![",
          "        ClassBytesRange::new(0x20, 0x7F),",
          "        ClassBytesRange::new(0x00, 0x1F),",
          "    ];",
          "    let class_bytes = ClassBytes::new(byte_ranges);",
          "    let class = Class::Bytes(class_bytes);",
          "    class.is_utf8();",
          "    assert_eq!(class.is_utf8(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let class_bytes = ClassBytes::empty();",
          "    let class = Class::Bytes(class_bytes);",
          "    class.is_utf8();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class.is_utf8(), true);"
        ],
        "code": [
          "{",
          "    let class_bytes = ClassBytes::empty();",
          "    let class = Class::Bytes(class_bytes);",
          "    class.is_utf8();",
          "    assert_eq!(class.is_utf8(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]