[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\b\\w{3}\\b\").unwrap();",
          "    let hay = b\"The fox jumps over the lazy dog.\";",
          "    let _ = re.is_match(hay);",
          "}"
        ],
        "oracle": [
          "    assert!(re.is_match(b\"The fox jumps over the lazy dog.\"));",
          "    assert!(!re.is_match(b\"The quick brown.\"));",
          "    assert!(re.is_match(b\"a b c\"));",
          "    assert!(!re.is_match(b\"ab cd ef\"));",
          "    assert!(re.is_match(b\"one two three\"));",
          "    assert!(!re.is_match(b\"12345 67890\"));"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\b\\w{3}\\b\").unwrap();",
          "    let hay = b\"The fox jumps over the lazy dog.\";",
          "    let _ = re.is_match(hay);",
          "    assert!(re.is_match(b\"The fox jumps over the lazy dog.\"));",
          "    assert!(!re.is_match(b\"The quick brown.\"));",
          "    assert!(re.is_match(b\"a b c\"));",
          "    assert!(!re.is_match(b\"ab cd ef\"));",
          "    assert!(re.is_match(b\"one two three\"));",
          "    assert!(!re.is_match(b\"12345 67890\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\b\\w{5}\\b\").unwrap();",
          "    let hay = b\"It is a sunny day.\";",
          "    let _ = re.is_match(hay);",
          "}"
        ],
        "oracle": [
          "    assert!(re.is_match(b\"It is a sunny day.\"));",
          "    assert!(!re.is_match(b\"It sunny day.\"));",
          "    assert!(re.is_match(b\"There are five alpha words.\"));",
          "    assert!(!re.is_match(b\"Short.\"));",
          "    assert!(re.is_match(b\"Hello world\"));",
          "    assert!(!re.is_match(b\"\"));",
          "    assert!(!re.is_match(b\"ing\"));",
          "    assert!(re.is_match(b\"This is five.\"));",
          "    assert!(!re.is_match(b\"ten\"));"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\b\\w{5}\\b\").unwrap();",
          "    let hay = b\"It is a sunny day.\";",
          "    let _ = re.is_match(hay);",
          "    assert!(re.is_match(b\"It is a sunny day.\"));",
          "    assert!(!re.is_match(b\"It sunny day.\"));",
          "    assert!(re.is_match(b\"There are five alpha words.\"));",
          "    assert!(!re.is_match(b\"Short.\"));",
          "    assert!(re.is_match(b\"Hello world\"));",
          "    assert!(!re.is_match(b\"\"));",
          "    assert!(!re.is_match(b\"ing\"));",
          "    assert!(re.is_match(b\"This is five.\"));",
          "    assert!(!re.is_match(b\"ten\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\b\\w{3}\\b\").unwrap();",
          "    let hay: &[u8] = b\"\";",
          "    let _ = re.is_match(hay);",
          "}"
        ],
        "oracle": [
          "    assert!(!re.is_match(b\"\"));",
          "    assert!(re.is_match(b\"foo\"));",
          "    assert!(!re.is_match(b\"fo\"));",
          "    assert!(re.is_match(b\"bar\"));",
          "    assert!(!re.is_match(b\"abc def ghi\"));",
          "    assert!(re.is_match(b\"cat\"));",
          "    assert!(!re.is_match(b\"1a 2b 3c\"));",
          "    assert!(re.is_match(b\"abc xyz\"));",
          "    assert!(!re.is_match(b\"abcd\"));",
          "    assert!(!re.is_match(b\"   \"));",
          "    assert!(re.is_match(b\"the\"));",
          "    assert!(!re.is_match(b\"abcde fghij klmno pqrst\"));",
          "    assert!(re.is_match(b\"123 word\"));",
          "    assert!(re.is_match(b\"yes\"));",
          "    assert!(!re.is_match(b\"foobarbaz\"));"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\b\\w{3}\\b\").unwrap();",
          "    let hay: &[u8] = b\"\";",
          "    let _ = re.is_match(hay);",
          "    assert!(!re.is_match(b\"\"));",
          "    assert!(re.is_match(b\"foo\"));",
          "    assert!(!re.is_match(b\"fo\"));",
          "    assert!(re.is_match(b\"bar\"));",
          "    assert!(!re.is_match(b\"abc def ghi\"));",
          "    assert!(re.is_match(b\"cat\"));",
          "    assert!(!re.is_match(b\"1a 2b 3c\"));",
          "    assert!(re.is_match(b\"abc xyz\"));",
          "    assert!(!re.is_match(b\"abcd\"));",
          "    assert!(!re.is_match(b\"   \"));",
          "    assert!(re.is_match(b\"the\"));",
          "    assert!(!re.is_match(b\"abcde fghij klmno pqrst\"));",
          "    assert!(re.is_match(b\"123 word\"));",
          "    assert!(re.is_match(b\"yes\"));",
          "    assert!(!re.is_match(b\"foobarbaz\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\w+\").unwrap();",
          "    let hay = b\"Hello, world! @2023.\";",
          "    let _ = re.is_match(hay);",
          "}"
        ],
        "oracle": [
          "    assert!(re.is_match(b\"Hello, world! @2023.\"));",
          "    assert!(!re.is_match(b\"\" ));",
          "    assert!(re.is_match(b\"word123\"));",
          "    assert!(!re.is_match(b\"12345\"));",
          "    assert!(re.is_match(b\"The quick brown fox jumps over the lazy dog.\"));",
          "    assert!(!re.is_match(b\"!!!\"));",
          "    assert!(re.is_match(b\"VariableName_1\"));",
          "    assert!(!re.is_match(b\"###########\"));",
          "    assert!(re.is_match(b\"sample_word_123\"));",
          "    assert!(!re.is_match(b\" \"));"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\w+\").unwrap();",
          "    let hay = b\"Hello, world! @2023.\";",
          "    let _ = re.is_match(hay);",
          "    assert!(re.is_match(b\"Hello, world! @2023.\"));",
          "    assert!(!re.is_match(b\"\" ));",
          "    assert!(re.is_match(b\"word123\"));",
          "    assert!(!re.is_match(b\"12345\"));",
          "    assert!(re.is_match(b\"The quick brown fox jumps over the lazy dog.\"));",
          "    assert!(!re.is_match(b\"!!!\"));",
          "    assert!(re.is_match(b\"VariableName_1\"));",
          "    assert!(!re.is_match(b\"###########\"));",
          "    assert!(re.is_match(b\"sample_word_123\"));",
          "    assert!(!re.is_match(b\" \"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\w{5}\").unwrap();",
          "    let hay = \"こんにちは世界\".as_bytes();",
          "    let _ = re.is_match(hay);",
          "}"
        ],
        "oracle": [
          "    assert!(re.is_match(b\"hello\"));",
          "    assert!(!re.is_match(b\"hi\"));",
          "    assert!(re.is_match(b\"こんにちは世界\"));",
          "    assert!(re.is_match(b\"abcde12345\"));",
          "    assert!(!re.is_match(b\"\"));",
          "    assert!(re.is_match(b\"       hello   \"));",
          "    assert!(re.is_match(b\"abc def ghi\"));",
          "    assert!(!re.is_match(b\"1234\"));",
          "    assert!(re.is_match(b\"abcde\"));",
          "    assert!(!re.is_match(b\"abcdeabcdeabcdeabcde\"));"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\w{5}\").unwrap();",
          "    let hay = \"こんにちは世界\".as_bytes();",
          "    let _ = re.is_match(hay);",
          "    assert!(re.is_match(b\"hello\"));",
          "    assert!(!re.is_match(b\"hi\"));",
          "    assert!(re.is_match(b\"こんにちは世界\"));",
          "    assert!(re.is_match(b\"abcde12345\"));",
          "    assert!(!re.is_match(b\"\"));",
          "    assert!(re.is_match(b\"       hello   \"));",
          "    assert!(re.is_match(b\"abc def ghi\"));",
          "    assert!(!re.is_match(b\"1234\"));",
          "    assert!(re.is_match(b\"abcde\"));",
          "    assert!(!re.is_match(b\"abcdeabcdeabcdeabcde\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\b\\w{37}\\b\").unwrap();",
          "    let hay = b\"The quick brown fox jumps over the lazy dog which is one very special dog.\";",
          "    let _ = re.is_match(hay);",
          "}"
        ],
        "oracle": [
          "    assert!(re.is_match(b\"The quick brown fox jumps over the lazy dog which is one very special dog.\"));",
          "    assert!(!re.is_match(b\"shortword\"));",
          "    assert!(re.is_match(b\"exactlythirteenchars\"));",
          "    assert!(!re.is_match(b\"thequickbrownfo\"));",
          "    assert!(re.is_match(b\"sixteencharacterslongtoo\"));",
          "    assert!(!re.is_match(b\"\"));",
          "    assert!(!re.is_match(b\" \"));",
          "    assert!(re.is_match(b\"onewordwithexactlythirtysevenlettersinnumberseven\"));",
          "    assert!(!re.is_match(b\"wordwithnoevenclosecount\"));",
          "    assert!(re.is_match(b\"anotherlongwordthatequals37characters\"));"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\b\\w{37}\\b\").unwrap();",
          "    let hay = b\"The quick brown fox jumps over the lazy dog which is one very special dog.\";",
          "    let _ = re.is_match(hay);",
          "    assert!(re.is_match(b\"The quick brown fox jumps over the lazy dog which is one very special dog.\"));",
          "    assert!(!re.is_match(b\"shortword\"));",
          "    assert!(re.is_match(b\"exactlythirteenchars\"));",
          "    assert!(!re.is_match(b\"thequickbrownfo\"));",
          "    assert!(re.is_match(b\"sixteencharacterslongtoo\"));",
          "    assert!(!re.is_match(b\"\"));",
          "    assert!(!re.is_match(b\" \"));",
          "    assert!(re.is_match(b\"onewordwithexactlythirtysevenlettersinnumberseven\"));",
          "    assert!(!re.is_match(b\"wordwithnoevenclosecount\"));",
          "    assert!(re.is_match(b\"anotherlongwordthatequals37characters\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\w{50}\").unwrap();",
          "    let hay = b\"A\"*1000; // 1000 bytes with repeated 'A'",
          "    let _ = re.is_match(hay);",
          "}"
        ],
        "oracle": [
          "    assert!(re.is_match(b\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"));",
          "    assert!(!re.is_match(b\"ABC\"));",
          "    assert!(re.is_match(b\"A\"*50));",
          "    assert!(!re.is_match(b\"A\"*49));",
          "    assert!(!re.is_match(b\"\"));",
          "    assert!(re.is_match(b\"A\"*500));",
          "    assert!(!re.is_match(b\"B\"*1000));",
          "    assert!(re.is_match(b\"A\"*1000));",
          "    assert!(!re.is_match(b\"A\"*1000 + b\"B\"));",
          "    assert!(re.is_match(b\"A\"*50 + b\"B\" + b\"A\"*50));"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\w{50}\").unwrap();",
          "    let hay = b\"A\"*1000; // 1000 bytes with repeated 'A'",
          "    let _ = re.is_match(hay);",
          "    assert!(re.is_match(b\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"));",
          "    assert!(!re.is_match(b\"ABC\"));",
          "    assert!(re.is_match(b\"A\"*50));",
          "    assert!(!re.is_match(b\"A\"*49));",
          "    assert!(!re.is_match(b\"\"));",
          "    assert!(re.is_match(b\"A\"*500));",
          "    assert!(!re.is_match(b\"B\"*1000));",
          "    assert!(re.is_match(b\"A\"*1000));",
          "    assert!(!re.is_match(b\"A\"*1000 + b\"B\"));",
          "    assert!(re.is_match(b\"A\"*50 + b\"B\" + b\"A\"*50));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\w{50}\").unwrap();",
          "    let hay = b\"This is a test string with no pattern match here.\";",
          "    let _ = re.is_match(hay);",
          "}"
        ],
        "oracle": [
          "    assert!(!re.is_match(hay));"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\w{50}\").unwrap();",
          "    let hay = b\"This is a test string with no pattern match here.\";",
          "    let _ = re.is_match(hay);",
          "    assert!(!re.is_match(hay));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]