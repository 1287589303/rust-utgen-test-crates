[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = StateID(0);",
          "    let match_index = 0;",
          "    ",
          "    let transition_table = TransitionTable {",
          "        table: vec![],",
          "        classes: ByteClasses::default(),",
          "        stride2: 0,",
          "    };",
          "",
          "    let ms = MatchStates {",
          "        slices: vec![],",
          "        pattern_ids: vec![],",
          "        pattern_len: 1,",
          "    };",
          "",
          "    let dfa = DFA {",
          "        tt: transition_table,",
          "        st: StartTable {",
          "            table: vec![],",
          "            kind: StartKind::Both,",
          "            start_map: StartByteMap::default(),",
          "            stride: 0,",
          "            pattern_len: Some(1),",
          "            universal_start_unanchored: None,",
          "            universal_start_anchored: None,",
          "        },",
          "        ms,",
          "        special: Special {",
          "            max: StateID(0),",
          "            quit_id: StateID(0),",
          "            min_match: StateID(0),",
          "            max_match: StateID(0),",
          "            min_accel: StateID(0),",
          "            max_accel: StateID(0),",
          "            min_start: StateID(0),",
          "            max_start: StateID(0),",
          "        },",
          "        accels: Accels {",
          "            accels: vec![],",
          "        },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags: Flags {",
          "            has_empty: false,",
          "            is_utf8: false,",
          "            is_always_start_anchored: false,",
          "        },",
          "    };",
          "",
          "    dfa.match_pattern(state_id, match_index);",
          "}"
        ],
        "oracle": [
          "    let state_id = StateID(0);",
          "    let match_index = 0;",
          "    assert_eq!(dfa.match_pattern(state_id, match_index), PatternID::ZERO);"
        ],
        "code": [
          "{",
          "    let state_id = StateID(0);",
          "    let match_index = 0;",
          "    ",
          "    let transition_table = TransitionTable {",
          "        table: vec![],",
          "        classes: ByteClasses::default(),",
          "        stride2: 0,",
          "    };",
          "",
          "    let ms = MatchStates {",
          "        slices: vec![],",
          "        pattern_ids: vec![],",
          "        pattern_len: 1,",
          "    };",
          "",
          "    let dfa = DFA {",
          "        tt: transition_table,",
          "        st: StartTable {",
          "            table: vec![],",
          "            kind: StartKind::Both,",
          "            start_map: StartByteMap::default(),",
          "            stride: 0,",
          "            pattern_len: Some(1),",
          "            universal_start_unanchored: None,",
          "            universal_start_anchored: None,",
          "        },",
          "        ms,",
          "        special: Special {",
          "            max: StateID(0),",
          "            quit_id: StateID(0),",
          "            min_match: StateID(0),",
          "            max_match: StateID(0),",
          "            min_accel: StateID(0),",
          "            max_accel: StateID(0),",
          "            min_start: StateID(0),",
          "            max_start: StateID(0),",
          "        },",
          "        accels: Accels {",
          "            accels: vec![],",
          "        },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags: Flags {",
          "            has_empty: false,",
          "            is_utf8: false,",
          "            is_always_start_anchored: false,",
          "        },",
          "    };",
          "",
          "    dfa.match_pattern(state_id, match_index);",
          "    let state_id = StateID(0);",
          "    let match_index = 0;",
          "    assert_eq!(dfa.match_pattern(state_id, match_index), PatternID::ZERO);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = StateID(0);",
          "    let match_index = 0;",
          "",
          "    let transition_table = TransitionTable {",
          "        table: vec![],",
          "        classes: ByteClasses::default(),",
          "        stride2: 0,",
          "    };",
          "",
          "    let ms = MatchStates {",
          "        slices: vec![],",
          "        pattern_ids: vec![PatternID(0)],",
          "        pattern_len: 1,",
          "    };",
          "",
          "    let dfa = DFA {",
          "        tt: transition_table,",
          "        st: StartTable {",
          "            table: vec![],",
          "            kind: StartKind::Both,",
          "            start_map: StartByteMap::default(),",
          "            stride: 0,",
          "            pattern_len: Some(1),",
          "            universal_start_unanchored: None,",
          "            universal_start_anchored: None,",
          "        },",
          "        ms,",
          "        special: Special {",
          "            max: StateID(0),",
          "            quit_id: StateID(0),",
          "            min_match: StateID(0),",
          "            max_match: StateID(0),",
          "            min_accel: StateID(0),",
          "            max_accel: StateID(0),",
          "            min_start: StateID(0),",
          "            max_start: StateID(0),",
          "        },",
          "        accels: Accels {",
          "            accels: vec![],",
          "        },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags: Flags {",
          "            has_empty: false,",
          "            is_utf8: false,",
          "            is_always_start_anchored: false,",
          "        },",
          "    };",
          "",
          "    dfa.match_pattern(state_id, match_index);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.ms.pattern_len, 1);",
          "    assert_eq!(dfa.match_pattern(state_id, match_index), PatternID(0));",
          "    assert!(dfa.ms.pattern_id(0, 0) == PatternID(0));",
          "    assert!(dfa.match_state_index(state_id) == 0);",
          "    assert!(dfa.tt.stride2 == 0);",
          "    assert!(dfa.special.min_match == StateID(0));",
          "    assert!(dfa.special.max_match == StateID(0));",
          "    assert!(dfa.ms.slices.len() == 0);",
          "    assert!(dfa.ms.pattern_ids.len() == 1);",
          "    assert!(dfa.flags.has_empty == false);",
          "    assert!(dfa.flags.is_utf8 == false);",
          "    assert!(dfa.flags.is_always_start_anchored == false);"
        ],
        "code": [
          "{",
          "    let state_id = StateID(0);",
          "    let match_index = 0;",
          "",
          "    let transition_table = TransitionTable {",
          "        table: vec![],",
          "        classes: ByteClasses::default(),",
          "        stride2: 0,",
          "    };",
          "",
          "    let ms = MatchStates {",
          "        slices: vec![],",
          "        pattern_ids: vec![PatternID(0)],",
          "        pattern_len: 1,",
          "    };",
          "",
          "    let dfa = DFA {",
          "        tt: transition_table,",
          "        st: StartTable {",
          "            table: vec![],",
          "            kind: StartKind::Both,",
          "            start_map: StartByteMap::default(),",
          "            stride: 0,",
          "            pattern_len: Some(1),",
          "            universal_start_unanchored: None,",
          "            universal_start_anchored: None,",
          "        },",
          "        ms,",
          "        special: Special {",
          "            max: StateID(0),",
          "            quit_id: StateID(0),",
          "            min_match: StateID(0),",
          "            max_match: StateID(0),",
          "            min_accel: StateID(0),",
          "            max_accel: StateID(0),",
          "            min_start: StateID(0),",
          "            max_start: StateID(0),",
          "        },",
          "        accels: Accels {",
          "            accels: vec![],",
          "        },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags: Flags {",
          "            has_empty: false,",
          "            is_utf8: false,",
          "            is_always_start_anchored: false,",
          "        },",
          "    };",
          "",
          "    dfa.match_pattern(state_id, match_index);",
          "    assert_eq!(dfa.ms.pattern_len, 1);",
          "    assert_eq!(dfa.match_pattern(state_id, match_index), PatternID(0));",
          "    assert!(dfa.ms.pattern_id(0, 0) == PatternID(0));",
          "    assert!(dfa.match_state_index(state_id) == 0);",
          "    assert!(dfa.tt.stride2 == 0);",
          "    assert!(dfa.special.min_match == StateID(0));",
          "    assert!(dfa.special.max_match == StateID(0));",
          "    assert!(dfa.ms.slices.len() == 0);",
          "    assert!(dfa.ms.pattern_ids.len() == 1);",
          "    assert!(dfa.flags.has_empty == false);",
          "    assert!(dfa.flags.is_utf8 == false);",
          "    assert!(dfa.flags.is_always_start_anchored == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]