[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = StateID(SmallIndex(1));",
          "    let state = State::UnionReverse { alternates: vec![state_id] };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.memory_usage(), 1 * mem::size_of::<StateID>());"
        ],
        "code": [
          "{",
          "    let state_id = StateID(SmallIndex(1));",
          "    let state = State::UnionReverse { alternates: vec![state_id] };",
          "    let _ = state.memory_usage();",
          "    assert_eq!(state.memory_usage(), 1 * mem::size_of::<StateID>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_ids = vec![StateID(SmallIndex(1)), StateID(SmallIndex(2)), StateID(SmallIndex(3))];",
          "    let state = State::UnionReverse { alternates: state_ids };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    let state_ids = vec![StateID(SmallIndex(1)), StateID(SmallIndex(2)), StateID(SmallIndex(3))];",
          "    let state = State::UnionReverse { alternates: state_ids };",
          "    let expected_memory_usage = state.alternates.len() * mem::size_of::<StateID>();",
          "    assert_eq!(state.memory_usage(), expected_memory_usage);"
        ],
        "code": [
          "{",
          "    let state_ids = vec![StateID(SmallIndex(1)), StateID(SmallIndex(2)), StateID(SmallIndex(3))];",
          "    let state = State::UnionReverse { alternates: state_ids };",
          "    let _ = state.memory_usage();",
          "    let state_ids = vec![StateID(SmallIndex(1)), StateID(SmallIndex(2)), StateID(SmallIndex(3))];",
          "    let state = State::UnionReverse { alternates: state_ids };",
          "    let expected_memory_usage = state.alternates.len() * mem::size_of::<StateID>();",
          "    assert_eq!(state.memory_usage(), expected_memory_usage);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_ids: Vec<StateID> = (0..100).map(|i| StateID(SmallIndex(i))).collect();",
          "    let state = State::UnionReverse { alternates: state_ids };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.memory_usage(), 100 * mem::size_of::<StateID>());"
        ],
        "code": [
          "{",
          "    let state_ids: Vec<StateID> = (0..100).map(|i| StateID(SmallIndex(i))).collect();",
          "    let state = State::UnionReverse { alternates: state_ids };",
          "    let _ = state.memory_usage();",
          "    assert_eq!(state.memory_usage(), 100 * mem::size_of::<StateID>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_ids = vec![StateID(SmallIndex(1)), StateID(SmallIndex(2))];",
          "    let state = State::UnionReverse { alternates: state_ids };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    let state_ids = vec![StateID(SmallIndex(1)), StateID(SmallIndex(2))];",
          "    let state = State::UnionReverse { alternates: state_ids };",
          "    assert_eq!(state.memory_usage(), state.alternates.len() * mem::size_of::<StateID>());"
        ],
        "code": [
          "{",
          "    let state_ids = vec![StateID(SmallIndex(1)), StateID(SmallIndex(2))];",
          "    let state = State::UnionReverse { alternates: state_ids };",
          "    let _ = state.memory_usage();",
          "    let state_ids = vec![StateID(SmallIndex(1)), StateID(SmallIndex(2))];",
          "    let state = State::UnionReverse { alternates: state_ids };",
          "    assert_eq!(state.memory_usage(), state.alternates.len() * mem::size_of::<StateID>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]