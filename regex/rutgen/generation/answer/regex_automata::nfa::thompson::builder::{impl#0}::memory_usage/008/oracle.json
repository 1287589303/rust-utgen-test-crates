[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transitions = vec![Transition { byte: 0x61, next: StateID(SmallIndex(0)) }];",
          "    let state = State::Sparse { transitions };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.memory_usage(), transitions.len() * mem::size_of::<Transition>());"
        ],
        "code": [
          "{",
          "    let transitions = vec![Transition { byte: 0x61, next: StateID(SmallIndex(0)) }];",
          "    let state = State::Sparse { transitions };",
          "    let _ = state.memory_usage();",
          "    assert_eq!(state.memory_usage(), transitions.len() * mem::size_of::<Transition>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transitions = vec![",
          "        Transition { byte: 0x61, next: StateID(SmallIndex(0)) },",
          "        Transition { byte: 0x62, next: StateID(SmallIndex(1)) },",
          "    ];",
          "    let state = State::Sparse { transitions };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.memory_usage(), 2 * mem::size_of::<Transition>());"
        ],
        "code": [
          "{",
          "    let transitions = vec![",
          "        Transition { byte: 0x61, next: StateID(SmallIndex(0)) },",
          "        Transition { byte: 0x62, next: StateID(SmallIndex(1)) },",
          "    ];",
          "    let state = State::Sparse { transitions };",
          "    let _ = state.memory_usage();",
          "    assert_eq!(state.memory_usage(), 2 * mem::size_of::<Transition>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transitions = (0..1000)",
          "        .map(|i| Transition { byte: i as u8, next: StateID(SmallIndex(i as u32)) })",
          "        .collect::<Vec<_>>();",
          "    let state = State::Sparse { transitions };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    let transitions = (0..1000).map(|i| Transition { byte: i as u8, next: StateID(SmallIndex(i as u32)) }).collect::<Vec<_>>();",
          "    let state = State::Sparse { transitions };",
          "    let expected_memory_usage = transitions.len() * mem::size_of::<Transition>();",
          "    assert_eq!(state.memory_usage(), expected_memory_usage);"
        ],
        "code": [
          "{",
          "    let transitions = (0..1000)",
          "        .map(|i| Transition { byte: i as u8, next: StateID(SmallIndex(i as u32)) })",
          "        .collect::<Vec<_>>();",
          "    let state = State::Sparse { transitions };",
          "    let _ = state.memory_usage();",
          "    let transitions = (0..1000).map(|i| Transition { byte: i as u8, next: StateID(SmallIndex(i as u32)) }).collect::<Vec<_>>();",
          "    let state = State::Sparse { transitions };",
          "    let expected_memory_usage = transitions.len() * mem::size_of::<Transition>();",
          "    assert_eq!(state.memory_usage(), expected_memory_usage);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]