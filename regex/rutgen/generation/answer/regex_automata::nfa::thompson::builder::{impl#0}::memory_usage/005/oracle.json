[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::CaptureEnd {",
          "        pattern_id: PatternID(SmallIndex(0)),",
          "        group_index: SmallIndex(0),",
          "        next: StateID(SmallIndex(0)),",
          "    };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.memory_usage(), 0);",
          "    assert!(matches!(state, State::CaptureEnd { .. }));",
          "    assert!(matches!(state, State::ByteRange { .. }) || matches!(state, State::Empty { .. }) || matches!(state, State::Look { .. }) || matches!(state, State::CaptureEnd { .. }) || matches!(state, State::Match { .. }) || matches!(state, State::Fail) || matches!(state, State::CaptureStart { .. }));"
        ],
        "code": [
          "{",
          "    let state = State::CaptureEnd {",
          "        pattern_id: PatternID(SmallIndex(0)),",
          "        group_index: SmallIndex(0),",
          "        next: StateID(SmallIndex(0)),",
          "    };",
          "    let _ = state.memory_usage();",
          "    assert_eq!(state.memory_usage(), 0);",
          "    assert!(matches!(state, State::CaptureEnd { .. }));",
          "    assert!(matches!(state, State::ByteRange { .. }) || matches!(state, State::Empty { .. }) || matches!(state, State::Look { .. }) || matches!(state, State::CaptureEnd { .. }) || matches!(state, State::Match { .. }) || matches!(state, State::Fail) || matches!(state, State::CaptureStart { .. }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::ByteRange {",
          "        trans: Transition {",
          "            start: 0,",
          "            end: 255,",
          "            next: StateID(SmallIndex(0)),",
          "        },",
          "    };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Empty { next: StateID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Look { look: Look::Start, next: StateID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::CaptureEnd { pattern_id: PatternID(SmallIndex(0)), group_index: SmallIndex(0), next: StateID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Match { pattern_id: PatternID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Fail;",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::CaptureStart { pattern_id: PatternID(SmallIndex(0)), group_index: SmallIndex(0), next: StateID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);"
        ],
        "code": [
          "{",
          "    let state = State::ByteRange {",
          "        trans: Transition {",
          "            start: 0,",
          "            end: 255,",
          "            next: StateID(SmallIndex(0)),",
          "        },",
          "    };",
          "    let _ = state.memory_usage();",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Empty { next: StateID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Look { look: Look::Start, next: StateID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::CaptureEnd { pattern_id: PatternID(SmallIndex(0)), group_index: SmallIndex(0), next: StateID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Match { pattern_id: PatternID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Fail;",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::CaptureStart { pattern_id: PatternID(SmallIndex(0)), group_index: SmallIndex(0), next: StateID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Empty {",
          "        next: StateID(SmallIndex(0)),",
          "    };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    let state = State::CaptureEnd {",
          "    pattern_id: PatternID(SmallIndex(1)),",
          "    group_index: SmallIndex(1),",
          "    next: StateID(SmallIndex(0)),",
          "    };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    ",
          "    let state = State::ByteRange {",
          "    trans: Transition { start: 97, end: 122, next: StateID(SmallIndex(2)) },",
          "    };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    ",
          "    let state = State::Look {",
          "    look: Look::Start,",
          "    next: StateID(SmallIndex(0)),",
          "    };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    ",
          "    let state = State::Match {",
          "    pattern_id: PatternID(SmallIndex(3)),",
          "    };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    ",
          "    let state = State::Fail;",
          "    assert_eq!(state.memory_usage(), 0);"
        ],
        "code": [
          "{",
          "    let state = State::Empty {",
          "        next: StateID(SmallIndex(0)),",
          "    };",
          "    let _ = state.memory_usage();",
          "    let state = State::CaptureEnd {",
          "    pattern_id: PatternID(SmallIndex(1)),",
          "    group_index: SmallIndex(1),",
          "    next: StateID(SmallIndex(0)),",
          "    };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    ",
          "    let state = State::ByteRange {",
          "    trans: Transition { start: 97, end: 122, next: StateID(SmallIndex(2)) },",
          "    };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    ",
          "    let state = State::Look {",
          "    look: Look::Start,",
          "    next: StateID(SmallIndex(0)),",
          "    };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    ",
          "    let state = State::Match {",
          "    pattern_id: PatternID(SmallIndex(3)),",
          "    };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    ",
          "    let state = State::Fail;",
          "    assert_eq!(state.memory_usage(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Look {",
          "        look: Look::Start,",
          "        next: StateID(SmallIndex(0)),",
          "    };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.memory_usage(), 0);"
        ],
        "code": [
          "{",
          "    let state = State::Look {",
          "        look: Look::Start,",
          "        next: StateID(SmallIndex(0)),",
          "    };",
          "    let _ = state.memory_usage();",
          "    assert_eq!(state.memory_usage(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Match {",
          "        pattern_id: PatternID(SmallIndex(0)),",
          "    };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Empty { next: StateID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Fail;",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::CaptureEnd { pattern_id: PatternID(SmallIndex(1)), group_index: SmallIndex(0), next: StateID(SmallIndex(2)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::CaptureStart { pattern_id: PatternID(SmallIndex(1)), group_index: SmallIndex(0), next: StateID(SmallIndex(2)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Look { look: Look::Start, next: StateID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::ByteRange { trans: Transition { byte: 0, next: StateID(SmallIndex(1)) } };",
          "    assert_eq!(state.memory_usage(), 0);"
        ],
        "code": [
          "{",
          "    let state = State::Match {",
          "        pattern_id: PatternID(SmallIndex(0)),",
          "    };",
          "    let _ = state.memory_usage();",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Empty { next: StateID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Fail;",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::CaptureEnd { pattern_id: PatternID(SmallIndex(1)), group_index: SmallIndex(0), next: StateID(SmallIndex(2)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::CaptureStart { pattern_id: PatternID(SmallIndex(1)), group_index: SmallIndex(0), next: StateID(SmallIndex(2)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Look { look: Look::Start, next: StateID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::ByteRange { trans: Transition { byte: 0, next: StateID(SmallIndex(1)) } };",
          "    assert_eq!(state.memory_usage(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Fail;",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.memory_usage(), 0);"
        ],
        "code": [
          "{",
          "    let state = State::Fail;",
          "    let _ = state.memory_usage();",
          "    assert_eq!(state.memory_usage(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::CaptureStart {",
          "        pattern_id: PatternID(SmallIndex(0)),",
          "        group_index: SmallIndex(0),",
          "        next: StateID(SmallIndex(0)),",
          "    };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.memory_usage(), 0);"
        ],
        "code": [
          "{",
          "    let state = State::CaptureStart {",
          "        pattern_id: PatternID(SmallIndex(0)),",
          "        group_index: SmallIndex(0),",
          "        next: StateID(SmallIndex(0)),",
          "    };",
          "    let _ = state.memory_usage();",
          "    assert_eq!(state.memory_usage(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]