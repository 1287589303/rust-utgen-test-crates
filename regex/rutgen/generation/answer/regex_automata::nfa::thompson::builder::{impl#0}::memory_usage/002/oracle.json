[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Empty { next: StateID(SmallIndex(0)) };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.memory_usage(), 0);",
          "    ",
          "    let state = State::ByteRange { trans: Transition { byte: 0, next: StateID(SmallIndex(0)) } };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    ",
          "    let state = State::Look { look: Look::Start, next: StateID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    ",
          "    let state = State::CaptureEnd { pattern_id: PatternID(SmallIndex(0)), group_index: SmallIndex(0), next: StateID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    ",
          "    let state = State::Match { pattern_id: PatternID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    ",
          "    let state = State::Fail;",
          "    assert_eq!(state.memory_usage(), 0);"
        ],
        "code": [
          "{",
          "    let state = State::Empty { next: StateID(SmallIndex(0)) };",
          "    let _ = state.memory_usage();",
          "    assert_eq!(state.memory_usage(), 0);",
          "    ",
          "    let state = State::ByteRange { trans: Transition { byte: 0, next: StateID(SmallIndex(0)) } };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    ",
          "    let state = State::Look { look: Look::Start, next: StateID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    ",
          "    let state = State::CaptureEnd { pattern_id: PatternID(SmallIndex(0)), group_index: SmallIndex(0), next: StateID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    ",
          "    let state = State::Match { pattern_id: PatternID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    ",
          "    let state = State::Fail;",
          "    assert_eq!(state.memory_usage(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Fail;",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    let state = State::Fail; assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Empty { next: StateID(SmallIndex(0)) }; assert_eq!(state.memory_usage(), 0);",
          "    let state = State::ByteRange { trans: Transition { start: 0, end: 255, next: StateID(SmallIndex(0)) }}; assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Look { look: Look::Start, next: StateID(SmallIndex(0)) }; assert_eq!(state.memory_usage(), 0);",
          "    let state = State::CaptureStart { pattern_id: PatternID(SmallIndex(0)), group_index: SmallIndex(0), next: StateID(SmallIndex(0)) }; assert_eq!(state.memory_usage(), 0);",
          "    let state = State::CaptureEnd { pattern_id: PatternID(SmallIndex(0)), group_index: SmallIndex(0), next: StateID(SmallIndex(0)) }; assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Match { pattern_id: PatternID(SmallIndex(0)) }; assert_eq!(state.memory_usage(), 0);"
        ],
        "code": [
          "{",
          "    let state = State::Fail;",
          "    let _ = state.memory_usage();",
          "    let state = State::Fail; assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Empty { next: StateID(SmallIndex(0)) }; assert_eq!(state.memory_usage(), 0);",
          "    let state = State::ByteRange { trans: Transition { start: 0, end: 255, next: StateID(SmallIndex(0)) }}; assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Look { look: Look::Start, next: StateID(SmallIndex(0)) }; assert_eq!(state.memory_usage(), 0);",
          "    let state = State::CaptureStart { pattern_id: PatternID(SmallIndex(0)), group_index: SmallIndex(0), next: StateID(SmallIndex(0)) }; assert_eq!(state.memory_usage(), 0);",
          "    let state = State::CaptureEnd { pattern_id: PatternID(SmallIndex(0)), group_index: SmallIndex(0), next: StateID(SmallIndex(0)) }; assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Match { pattern_id: PatternID(SmallIndex(0)) }; assert_eq!(state.memory_usage(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition = Transition { start: 0, end: 255, next: StateID(SmallIndex(1)) };",
          "    let state = State::ByteRange { trans: transition };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    let state_fail = State::Fail;",
          "    assert_eq!(state_fail.memory_usage(), 0);",
          "    ",
          "    let state_empty = State::Empty { next: StateID(SmallIndex(1)) };",
          "    assert_eq!(state_empty.memory_usage(), 0);",
          "    ",
          "    let transition_look = Transition { byte: 0, next: StateID(SmallIndex(2)) };",
          "    let state_look = State::Look { look: Look::Start, next: StateID(SmallIndex(2)) };",
          "    assert_eq!(state_look.memory_usage(), 0);",
          "    ",
          "    let transition_capture_start = Transition { byte: 0, next: StateID(SmallIndex(3)) };",
          "    let state_capture_start = State::CaptureStart { pattern_id: PatternID(SmallIndex(1)), group_index: SmallIndex(0), next: StateID(SmallIndex(3)) };",
          "    assert_eq!(state_capture_start.memory_usage(), 0);",
          "    ",
          "    let transition_capture_end = Transition { byte: 0, next: StateID(SmallIndex(4)) };",
          "    let state_capture_end = State::CaptureEnd { pattern_id: PatternID(SmallIndex(1)), group_index: SmallIndex(0), next: StateID(SmallIndex(4)) };",
          "    assert_eq!(state_capture_end.memory_usage(), 0);",
          "    ",
          "    let state_match = State::Match { pattern_id: PatternID(SmallIndex(5)) };",
          "    assert_eq!(state_match.memory_usage(), 0);"
        ],
        "code": [
          "{",
          "    let transition = Transition { start: 0, end: 255, next: StateID(SmallIndex(1)) };",
          "    let state = State::ByteRange { trans: transition };",
          "    let _ = state.memory_usage();",
          "    let state_fail = State::Fail;",
          "    assert_eq!(state_fail.memory_usage(), 0);",
          "    ",
          "    let state_empty = State::Empty { next: StateID(SmallIndex(1)) };",
          "    assert_eq!(state_empty.memory_usage(), 0);",
          "    ",
          "    let transition_look = Transition { byte: 0, next: StateID(SmallIndex(2)) };",
          "    let state_look = State::Look { look: Look::Start, next: StateID(SmallIndex(2)) };",
          "    assert_eq!(state_look.memory_usage(), 0);",
          "    ",
          "    let transition_capture_start = Transition { byte: 0, next: StateID(SmallIndex(3)) };",
          "    let state_capture_start = State::CaptureStart { pattern_id: PatternID(SmallIndex(1)), group_index: SmallIndex(0), next: StateID(SmallIndex(3)) };",
          "    assert_eq!(state_capture_start.memory_usage(), 0);",
          "    ",
          "    let transition_capture_end = Transition { byte: 0, next: StateID(SmallIndex(4)) };",
          "    let state_capture_end = State::CaptureEnd { pattern_id: PatternID(SmallIndex(1)), group_index: SmallIndex(0), next: StateID(SmallIndex(4)) };",
          "    assert_eq!(state_capture_end.memory_usage(), 0);",
          "    ",
          "    let state_match = State::Match { pattern_id: PatternID(SmallIndex(5)) };",
          "    assert_eq!(state_match.memory_usage(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Look { look: Look::Start, next: StateID(SmallIndex(0)) };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Empty { next: StateID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Fail;",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::CaptureStart { pattern_id: PatternID(SmallIndex(0)), group_index: SmallIndex(0), next: StateID(SmallIndex(1)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::CaptureEnd { pattern_id: PatternID(SmallIndex(0)), group_index: SmallIndex(0), next: StateID(SmallIndex(1)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Match { pattern_id: PatternID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::ByteRange { trans: Transition { start: 0x00, end: 0xFF, next: StateID(SmallIndex(1)) } };",
          "    assert_eq!(state.memory_usage(), 0);"
        ],
        "code": [
          "{",
          "    let state = State::Look { look: Look::Start, next: StateID(SmallIndex(0)) };",
          "    let _ = state.memory_usage();",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Empty { next: StateID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Fail;",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::CaptureStart { pattern_id: PatternID(SmallIndex(0)), group_index: SmallIndex(0), next: StateID(SmallIndex(1)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::CaptureEnd { pattern_id: PatternID(SmallIndex(0)), group_index: SmallIndex(0), next: StateID(SmallIndex(1)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Match { pattern_id: PatternID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::ByteRange { trans: Transition { start: 0x00, end: 0xFF, next: StateID(SmallIndex(1)) } };",
          "    assert_eq!(state.memory_usage(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::CaptureStart { pattern_id: PatternID(SmallIndex(0)), group_index: SmallIndex(0), next: StateID(SmallIndex(1)) };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    self.memory_usage() == 0;",
          "    self.memory_usage() == 0;  // When matching State::Empty",
          "    self.memory_usage() == 0;  // When matching State::ByteRange",
          "    self.memory_usage() == 0;  // When matching State::Look",
          "    self.memory_usage() == 0;  // When matching State::CaptureEnd",
          "    self.memory_usage() == 0;  // When matching State::Match",
          "    self.memory_usage() == 0;  // When matching State::Fail",
          "    self.memory_usage() == 0;  // When matching State::CaptureStart"
        ],
        "code": [
          "{",
          "    let state = State::CaptureStart { pattern_id: PatternID(SmallIndex(0)), group_index: SmallIndex(0), next: StateID(SmallIndex(1)) };",
          "    let _ = state.memory_usage();",
          "    self.memory_usage() == 0;",
          "    self.memory_usage() == 0;  // When matching State::Empty",
          "    self.memory_usage() == 0;  // When matching State::ByteRange",
          "    self.memory_usage() == 0;  // When matching State::Look",
          "    self.memory_usage() == 0;  // When matching State::CaptureEnd",
          "    self.memory_usage() == 0;  // When matching State::Match",
          "    self.memory_usage() == 0;  // When matching State::Fail",
          "    self.memory_usage() == 0;  // When matching State::CaptureStart",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::CaptureEnd { pattern_id: PatternID(SmallIndex(0)), group_index: SmallIndex(0), next: StateID(SmallIndex(1)) };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.memory_usage(), 0);"
        ],
        "code": [
          "{",
          "    let state = State::CaptureEnd { pattern_id: PatternID(SmallIndex(0)), group_index: SmallIndex(0), next: StateID(SmallIndex(1)) };",
          "    let _ = state.memory_usage();",
          "    assert_eq!(state.memory_usage(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Match { pattern_id: PatternID(SmallIndex(0)) };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Fail;",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Empty { next: StateID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Look { look: Look::Start, next: StateID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::CaptureEnd { pattern_id: PatternID(SmallIndex(0)), group_index: SmallIndex(0), next: StateID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::CaptureStart { pattern_id: PatternID(SmallIndex(0)), group_index: SmallIndex(0), next: StateID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::ByteRange { trans: Transition { start: 0, end: 0, next: StateID(SmallIndex(0)) } };",
          "    assert_eq!(state.memory_usage(), 0);"
        ],
        "code": [
          "{",
          "    let state = State::Match { pattern_id: PatternID(SmallIndex(0)) };",
          "    let _ = state.memory_usage();",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Fail;",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Empty { next: StateID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Look { look: Look::Start, next: StateID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::CaptureEnd { pattern_id: PatternID(SmallIndex(0)), group_index: SmallIndex(0), next: StateID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::CaptureStart { pattern_id: PatternID(SmallIndex(0)), group_index: SmallIndex(0), next: StateID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::ByteRange { trans: Transition { start: 0, end: 0, next: StateID(SmallIndex(0)) } };",
          "    assert_eq!(state.memory_usage(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]