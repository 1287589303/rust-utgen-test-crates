[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = r\"(\\w)(\\d)?(\\w)\";",
          "    let re = regex_lite::Regex::new(pattern).unwrap();",
          "    let caps = re.captures(\"XYZ123\").unwrap();",
          "    let _ = caps.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(caps.len(), 4);",
          "    assert!(caps.len() > 0);",
          "    assert_eq!(caps.len(), re.pikevm.nfa().group_len());",
          "    assert_eq!(caps.len(), captures.iter().count());",
          "    assert_eq!(caps.len(), 1 + re.captures(\"XYZ123\").unwrap().static_explicit_captures_len.unwrap_or(0));"
        ],
        "code": [
          "{",
          "    let pattern = r\"(\\w)(\\d)?(\\w)\";",
          "    let re = regex_lite::Regex::new(pattern).unwrap();",
          "    let caps = re.captures(\"XYZ123\").unwrap();",
          "    let _ = caps.len();",
          "    assert_eq!(caps.len(), 4);",
          "    assert!(caps.len() > 0);",
          "    assert_eq!(caps.len(), re.pikevm.nfa().group_len());",
          "    assert_eq!(caps.len(), captures.iter().count());",
          "    assert_eq!(caps.len(), 1 + re.captures(\"XYZ123\").unwrap().static_explicit_captures_len.unwrap_or(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = r\"(\\w+)\";",
          "    let re = regex_lite::Regex::new(pattern).unwrap();",
          "    let caps = re.captures(\"A\").unwrap();",
          "    let _ = caps.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(caps.len(), 2);",
          "    assert!(caps.len() > 0);",
          "    assert_ne!(caps.len(), 0);",
          "    assert_eq!(caps.len(), 2);",
          "    let caps_empty = re.captures(\"\").unwrap();",
          "    assert_eq!(caps_empty.len(), 1);",
          "    let caps_multiple = re.captures(\"AB12\").unwrap();",
          "    assert_eq!(caps_multiple.len(), 3);"
        ],
        "code": [
          "{",
          "    let pattern = r\"(\\w+)\";",
          "    let re = regex_lite::Regex::new(pattern).unwrap();",
          "    let caps = re.captures(\"A\").unwrap();",
          "    let _ = caps.len();",
          "    assert_eq!(caps.len(), 2);",
          "    assert!(caps.len() > 0);",
          "    assert_ne!(caps.len(), 0);",
          "    assert_eq!(caps.len(), 2);",
          "    let caps_empty = re.captures(\"\").unwrap();",
          "    assert_eq!(caps_empty.len(), 1);",
          "    let caps_multiple = re.captures(\"AB12\").unwrap();",
          "    assert_eq!(caps_multiple.len(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = r\"()\";",
          "    let re = regex_lite::Regex::new(pattern).unwrap();",
          "    let caps = re.captures(\"A\").unwrap();",
          "    let _ = caps.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(caps.len(), 1);",
          "    assert_eq!(caps.len(), 0);",
          "    let pattern = r\"(\\w)\";",
          "    let caps = re.captures(\"Z\").unwrap();",
          "    assert_eq!(caps.len(), 2);",
          "    let pattern = r\"(\\w)(\\d)\";",
          "    let caps = re.captures(\"A1\").unwrap();",
          "    assert_eq!(caps.len(), 3);",
          "    let pattern = r\"(\\w)(\\d)?\";",
          "    let caps = re.captures(\"B\").unwrap();",
          "    assert_eq!(caps.len(), 3);",
          "    let pattern = r\"(\\w)(\\d)?(X)\";",
          "    let caps = re.captures(\"B1X\").unwrap();",
          "    assert_eq!(caps.len(), 4);",
          "    let caps = re.captures(\"\").unwrap();",
          "    assert_eq!(caps.len(), 1);"
        ],
        "code": [
          "{",
          "    let pattern = r\"()\";",
          "    let re = regex_lite::Regex::new(pattern).unwrap();",
          "    let caps = re.captures(\"A\").unwrap();",
          "    let _ = caps.len();",
          "    assert_eq!(caps.len(), 1);",
          "    assert_eq!(caps.len(), 0);",
          "    let pattern = r\"(\\w)\";",
          "    let caps = re.captures(\"Z\").unwrap();",
          "    assert_eq!(caps.len(), 2);",
          "    let pattern = r\"(\\w)(\\d)\";",
          "    let caps = re.captures(\"A1\").unwrap();",
          "    assert_eq!(caps.len(), 3);",
          "    let pattern = r\"(\\w)(\\d)?\";",
          "    let caps = re.captures(\"B\").unwrap();",
          "    assert_eq!(caps.len(), 3);",
          "    let pattern = r\"(\\w)(\\d)?(X)\";",
          "    let caps = re.captures(\"B1X\").unwrap();",
          "    assert_eq!(caps.len(), 4);",
          "    let caps = re.captures(\"\").unwrap();",
          "    assert_eq!(caps.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = r\"(\\d*)(\\w*)\";",
          "    let re = regex_lite::Regex::new(pattern).unwrap();",
          "    let caps = re.captures(\"12\").unwrap();",
          "    let _ = caps.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(caps.len(), 3);"
        ],
        "code": [
          "{",
          "    let pattern = r\"(\\d*)(\\w*)\";",
          "    let re = regex_lite::Regex::new(pattern).unwrap();",
          "    let caps = re.captures(\"12\").unwrap();",
          "    let _ = caps.len();",
          "    assert_eq!(caps.len(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = r\"(\\w*)\";",
          "    let re = regex_lite::Regex::new(pattern).unwrap();",
          "    let caps = re.captures(\"\").unwrap();",
          "    let _ = caps.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(caps.len(), 1);",
          "    let pattern = r\"(\\w)(\\d)?(\\w)\";",
          "    let re = regex_lite::Regex::new(pattern).unwrap();",
          "    let caps = re.captures(\"AZ\").unwrap();",
          "    assert_eq!(caps.len(), 4);",
          "    let caps = re.captures(\"A1B\").unwrap();",
          "    assert_eq!(caps.len(), 4);",
          "    let caps = re.captures(\"123\").unwrap();",
          "    assert_eq!(caps.len(), 4);",
          "    let caps = re.captures(\"ABC\").unwrap();",
          "    assert_eq!(caps.len(), 4);",
          "    let caps = re.captures(\"A\").unwrap();",
          "    assert_eq!(caps.len(), 4);"
        ],
        "code": [
          "{",
          "    let pattern = r\"(\\w*)\";",
          "    let re = regex_lite::Regex::new(pattern).unwrap();",
          "    let caps = re.captures(\"\").unwrap();",
          "    let _ = caps.len();",
          "    assert_eq!(caps.len(), 1);",
          "    let pattern = r\"(\\w)(\\d)?(\\w)\";",
          "    let re = regex_lite::Regex::new(pattern).unwrap();",
          "    let caps = re.captures(\"AZ\").unwrap();",
          "    assert_eq!(caps.len(), 4);",
          "    let caps = re.captures(\"A1B\").unwrap();",
          "    assert_eq!(caps.len(), 4);",
          "    let caps = re.captures(\"123\").unwrap();",
          "    assert_eq!(caps.len(), 4);",
          "    let caps = re.captures(\"ABC\").unwrap();",
          "    assert_eq!(caps.len(), 4);",
          "    let caps = re.captures(\"A\").unwrap();",
          "    assert_eq!(caps.len(), 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]