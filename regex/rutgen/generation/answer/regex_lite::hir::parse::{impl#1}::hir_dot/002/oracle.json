[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            case_insensitive: false,",
          "            multi_line: false,",
          "            dot_matches_new_line: false,",
          "            swap_greed: false,",
          "            crlf: true,",
          "            ignore_whitespace: false,",
          "        },",
          "    };",
          "    let pattern = \"...\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('\\x00')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags {",
          "            case_insensitive: false,",
          "            multi_line: false,",
          "            dot_matches_new_line: false,",
          "            swap_greed: false,",
          "            crlf: true,",
          "            ignore_whitespace: false,",
          "        }),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let _ = parser.hir_dot();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.flags().dot_matches_new_line, false);",
          "    assert_eq!(parser.flags().crlf, true);",
          "    let result = parser.hir_dot();",
          "    assert!(matches!(result.kind(), HirKind::Class(_)));",
          "    let class = if let HirKind::Class(class) = result.kind() { class } else { panic!(\"Expected HirKind::Class\") };",
          "    let expected_ranges = vec![",
          "    ClassRange { start: '\\x00', end: '\\x09' },",
          "    ClassRange { start: '\\x0B', end: '\\x0C' },",
          "    ClassRange { start: '\\x0E', end: '\\u{10FFFF}' },",
          "    ];",
          "    assert_eq!(class.ranges, expected_ranges);"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            case_insensitive: false,",
          "            multi_line: false,",
          "            dot_matches_new_line: false,",
          "            swap_greed: false,",
          "            crlf: true,",
          "            ignore_whitespace: false,",
          "        },",
          "    };",
          "    let pattern = \"...\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('\\x00')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags {",
          "            case_insensitive: false,",
          "            multi_line: false,",
          "            dot_matches_new_line: false,",
          "            swap_greed: false,",
          "            crlf: true,",
          "            ignore_whitespace: false,",
          "        }),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let _ = parser.hir_dot();",
          "    assert_eq!(parser.flags().dot_matches_new_line, false);",
          "    assert_eq!(parser.flags().crlf, true);",
          "    let result = parser.hir_dot();",
          "    assert!(matches!(result.kind(), HirKind::Class(_)));",
          "    let class = if let HirKind::Class(class) = result.kind() { class } else { panic!(\"Expected HirKind::Class\") };",
          "    let expected_ranges = vec![",
          "    ClassRange { start: '\\x00', end: '\\x09' },",
          "    ClassRange { start: '\\x0B', end: '\\x0C' },",
          "    ClassRange { start: '\\x0E', end: '\\u{10FFFF}' },",
          "    ];",
          "    assert_eq!(class.ranges, expected_ranges);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            case_insensitive: false,",
          "            multi_line: false,",
          "            dot_matches_new_line: false,",
          "            swap_greed: false,",
          "            crlf: true,",
          "            ignore_whitespace: false,",
          "        },",
          "    };",
          "    let pattern = \"...\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(1),",
          "        char: Cell::new(Some('\\u{10FFFF}')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags {",
          "            case_insensitive: false,",
          "            multi_line: false,",
          "            dot_matches_new_line: false,",
          "            swap_greed: false,",
          "            crlf: true,",
          "            ignore_whitespace: false,",
          "        }),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let _ = parser.hir_dot();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.hir_dot(), Hir::class(hir::Class::new([",
          "    hir::ClassRange { start: '\\x00', end: '\\x09' },",
          "    hir::ClassRange { start: '\\x0B', end: '\\x0C' },",
          "    hir::ClassRange { start: '\\x0E', end: '\\u{10FFFF}' },",
          "    ])));"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            case_insensitive: false,",
          "            multi_line: false,",
          "            dot_matches_new_line: false,",
          "            swap_greed: false,",
          "            crlf: true,",
          "            ignore_whitespace: false,",
          "        },",
          "    };",
          "    let pattern = \"...\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(1),",
          "        char: Cell::new(Some('\\u{10FFFF}')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags {",
          "            case_insensitive: false,",
          "            multi_line: false,",
          "            dot_matches_new_line: false,",
          "            swap_greed: false,",
          "            crlf: true,",
          "            ignore_whitespace: false,",
          "        }),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let _ = parser.hir_dot();",
          "    assert_eq!(parser.hir_dot(), Hir::class(hir::Class::new([",
          "    hir::ClassRange { start: '\\x00', end: '\\x09' },",
          "    hir::ClassRange { start: '\\x0B', end: '\\x0C' },",
          "    hir::ClassRange { start: '\\x0E', end: '\\u{10FFFF}' },",
          "    ])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]