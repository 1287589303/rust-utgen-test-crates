[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags { dot_matches_new_line: true, crlf: false, ..Flags::default() } };",
          "    let parser = Parser { config, pattern: \"\", depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(None), capture_index: Cell::new(0), flags: RefCell::new(config.flags), capture_names: RefCell::new(vec![]) };",
          "    let _result = parser.hir_dot();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.kind(), &HirKind::Class(Class::new(vec![ClassRange { start: '\\x00', end: '\\u{10FFFF}' }])));",
          "    assert!(_result.is_start_anchored());",
          "    assert!(_result.is_match_empty());",
          "    assert_eq!(_result.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags { dot_matches_new_line: true, crlf: false, ..Flags::default() } };",
          "    let parser = Parser { config, pattern: \"\", depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(None), capture_index: Cell::new(0), flags: RefCell::new(config.flags), capture_names: RefCell::new(vec![]) };",
          "    let _result = parser.hir_dot();",
          "    assert_eq!(_result.kind(), &HirKind::Class(Class::new(vec![ClassRange { start: '\\x00', end: '\\u{10FFFF}' }])));",
          "    assert!(_result.is_start_anchored());",
          "    assert!(_result.is_match_empty());",
          "    assert_eq!(_result.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags { dot_matches_new_line: true, crlf: false, ..Flags::default() } };",
          "    let parser = Parser { config, pattern: \"\", depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(None), capture_index: Cell::new(0), flags: RefCell::new(config.flags), capture_names: RefCell::new(vec![]) };",
          "    let _result = parser.hir_dot();",
          "}"
        ],
        "oracle": [
          "    assert!(_result.is_start_anchored() == false);",
          "    assert!(_result.is_match_empty() == false);",
          "    assert_eq!(_result.static_explicit_captures_len(), Some(0));",
          "    assert!(_result.kind() == &HirKind::Class(Class::new(vec![ClassRange { start: '\\x00', end: '\\u{10FFFF}' }])));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags { dot_matches_new_line: true, crlf: false, ..Flags::default() } };",
          "    let parser = Parser { config, pattern: \"\", depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(None), capture_index: Cell::new(0), flags: RefCell::new(config.flags), capture_names: RefCell::new(vec![]) };",
          "    let _result = parser.hir_dot();",
          "    assert!(_result.is_start_anchored() == false);",
          "    assert!(_result.is_match_empty() == false);",
          "    assert_eq!(_result.static_explicit_captures_len(), Some(0));",
          "    assert!(_result.kind() == &HirKind::Class(Class::new(vec![ClassRange { start: '\\x00', end: '\\u{10FFFF}' }])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags { dot_matches_new_line: true, crlf: false, ignore_whitespace: false, multi_line: false, case_insensitive: false, swap_greed: false } };",
          "    let parser = Parser { config, pattern: \"\", depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(None), capture_index: Cell::new(0), flags: RefCell::new(config.flags), capture_names: RefCell::new(vec![]) };",
          "    let _result = parser.hir_dot();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.kind(), HirKind::Class(Class::new(vec![ClassRange { start: '\\x00', end: '\\u{10FFFF}' }])));",
          "    assert!(_result.is_start_anchored() == false);",
          "    assert!(_result.is_match_empty() == false);",
          "    assert_eq!(_result.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags { dot_matches_new_line: true, crlf: false, ignore_whitespace: false, multi_line: false, case_insensitive: false, swap_greed: false } };",
          "    let parser = Parser { config, pattern: \"\", depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(None), capture_index: Cell::new(0), flags: RefCell::new(config.flags), capture_names: RefCell::new(vec![]) };",
          "    let _result = parser.hir_dot();",
          "    assert_eq!(_result.kind(), HirKind::Class(Class::new(vec![ClassRange { start: '\\x00', end: '\\u{10FFFF}' }])));",
          "    assert!(_result.is_start_anchored() == false);",
          "    assert!(_result.is_match_empty() == false);",
          "    assert_eq!(_result.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]