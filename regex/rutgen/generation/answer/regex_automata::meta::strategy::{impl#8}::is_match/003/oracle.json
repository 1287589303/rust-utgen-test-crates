[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let core_info = RegexInfo::default();",
          "    let prefilter = Prefilter::default();",
          "    let nfa = NFA::default();",
          "    let pikevm = wrappers::PikeVM::default();",
          "    let backtrack = wrappers::BoundedBacktracker::default();",
          "    let onepass = wrappers::OnePass::default();",
          "    let hybrid = wrappers::Hybrid::default();",
          "    let dfa = wrappers::DFA::default();",
          "    ",
          "    let core = Core {",
          "        info: core_info,",
          "        pre: Some(prefilter.clone()),",
          "        nfa,",
          "        nfarev: None,",
          "        pikevm,",
          "        backtrack,",
          "        onepass,",
          "        hybrid,",
          "        dfa,",
          "    };",
          "    ",
          "    let strategy = ReverseSuffix { core, pre: prefilter };",
          "    ",
          "    let haystack: &[u8] = b\"\";",
          "    let input = Input::new(haystack).anchored(Anchored::No).span(0..0); // no match case",
          "    let mut cache = strategy.create_cache();",
          "",
          "    strategy",
          "        .try_search_half_start(&mut cache, &input)",
          "        .expect_err(\"expected quadratic error\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(strategy.is_match(&mut cache, &input), false);",
          "    let retry_error = strategy.try_search_half_start(&mut cache, &input);",
          "    match retry_error {",
          "    Err(RetryError::Quadratic(_)) => {},",
          "    Err(RetryError::Fail(_)) => {},",
          "    _ => panic!(\"Expected a RetryError\"),",
          "    }",
          "    let half_match_result = strategy.try_search_half_start(&mut cache, &input).unwrap();",
          "    assert!(half_match_result.is_none());",
          "    assert_eq!(strategy.is_match(&mut cache, &input), false);"
        ],
        "code": [
          "{",
          "    let core_info = RegexInfo::default();",
          "    let prefilter = Prefilter::default();",
          "    let nfa = NFA::default();",
          "    let pikevm = wrappers::PikeVM::default();",
          "    let backtrack = wrappers::BoundedBacktracker::default();",
          "    let onepass = wrappers::OnePass::default();",
          "    let hybrid = wrappers::Hybrid::default();",
          "    let dfa = wrappers::DFA::default();",
          "    ",
          "    let core = Core {",
          "        info: core_info,",
          "        pre: Some(prefilter.clone()),",
          "        nfa,",
          "        nfarev: None,",
          "        pikevm,",
          "        backtrack,",
          "        onepass,",
          "        hybrid,",
          "        dfa,",
          "    };",
          "    ",
          "    let strategy = ReverseSuffix { core, pre: prefilter };",
          "    ",
          "    let haystack: &[u8] = b\"\";",
          "    let input = Input::new(haystack).anchored(Anchored::No).span(0..0); // no match case",
          "    let mut cache = strategy.create_cache();",
          "",
          "    strategy",
          "        .try_search_half_start(&mut cache, &input)",
          "        .expect_err(\"expected quadratic error\");",
          "    assert_eq!(strategy.is_match(&mut cache, &input), false);",
          "    let retry_error = strategy.try_search_half_start(&mut cache, &input);",
          "    match retry_error {",
          "    Err(RetryError::Quadratic(_)) => {},",
          "    Err(RetryError::Fail(_)) => {},",
          "    _ => panic!(\"Expected a RetryError\"),",
          "    }",
          "    let half_match_result = strategy.try_search_half_start(&mut cache, &input).unwrap();",
          "    assert!(half_match_result.is_none());",
          "    assert_eq!(strategy.is_match(&mut cache, &input), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let core_info = RegexInfo::default();",
          "    let prefilter = Prefilter::default();",
          "    let nfa = NFA::default();",
          "    let pikevm = wrappers::PikeVM::default();",
          "    let backtrack = wrappers::BoundedBacktracker::default();",
          "    let onepass = wrappers::OnePass::default();",
          "    let hybrid = wrappers::Hybrid::default();",
          "    let dfa = wrappers::DFA::default();",
          "",
          "    let core = Core {",
          "        info: core_info,",
          "        pre: Some(prefilter.clone()),",
          "        nfa,",
          "        nfarev: None,",
          "        pikevm,",
          "        backtrack,",
          "        onepass,",
          "        hybrid,",
          "        dfa,",
          "    };",
          "",
          "    let strategy = ReverseSuffix { core, pre: prefilter };",
          "",
          "    let haystack: &[u8] = b\"\";",
          "    let input = Input::new(haystack).anchored(Anchored::No).span(0..0); // no match case",
          "    let mut cache = strategy.create_cache();",
          "",
          "    strategy",
          "        .try_search_half_start(&mut cache, &input)",
          "        .expect_err(\"expected failed error\");",
          "}"
        ],
        "oracle": [
          "    assert!(!input.get_anchored().is_anchored());",
          "    let result = strategy.try_search_half_start(&mut cache, &input);",
          "    assert!(matches!(result, Err(RetryError::Quadratic(_)) | Err(RetryError::Fail(_))));",
          "    let input_half_match = strategy.try_search_half_start(&mut cache, &input);",
          "    assert!(input_half_match.is_err());",
          "    let input_half_match_none = strategy.try_search_half_start(&mut cache, &input);",
          "    assert!(input_half_match_none.is_ok());",
          "    assert!(input_half_match_none.unwrap().is_none());",
          "    let input_half_match_some = strategy.try_search_half_start(&mut cache, &input);",
          "    assert!(input_half_match_some.is_ok());",
          "    assert!(input_half_match_some.unwrap().is_some());"
        ],
        "code": [
          "{",
          "    let core_info = RegexInfo::default();",
          "    let prefilter = Prefilter::default();",
          "    let nfa = NFA::default();",
          "    let pikevm = wrappers::PikeVM::default();",
          "    let backtrack = wrappers::BoundedBacktracker::default();",
          "    let onepass = wrappers::OnePass::default();",
          "    let hybrid = wrappers::Hybrid::default();",
          "    let dfa = wrappers::DFA::default();",
          "",
          "    let core = Core {",
          "        info: core_info,",
          "        pre: Some(prefilter.clone()),",
          "        nfa,",
          "        nfarev: None,",
          "        pikevm,",
          "        backtrack,",
          "        onepass,",
          "        hybrid,",
          "        dfa,",
          "    };",
          "",
          "    let strategy = ReverseSuffix { core, pre: prefilter };",
          "",
          "    let haystack: &[u8] = b\"\";",
          "    let input = Input::new(haystack).anchored(Anchored::No).span(0..0); // no match case",
          "    let mut cache = strategy.create_cache();",
          "",
          "    strategy",
          "        .try_search_half_start(&mut cache, &input)",
          "        .expect_err(\"expected failed error\");",
          "    assert!(!input.get_anchored().is_anchored());",
          "    let result = strategy.try_search_half_start(&mut cache, &input);",
          "    assert!(matches!(result, Err(RetryError::Quadratic(_)) | Err(RetryError::Fail(_))));",
          "    let input_half_match = strategy.try_search_half_start(&mut cache, &input);",
          "    assert!(input_half_match.is_err());",
          "    let input_half_match_none = strategy.try_search_half_start(&mut cache, &input);",
          "    assert!(input_half_match_none.is_ok());",
          "    assert!(input_half_match_none.unwrap().is_none());",
          "    let input_half_match_some = strategy.try_search_half_start(&mut cache, &input);",
          "    assert!(input_half_match_some.is_ok());",
          "    assert!(input_half_match_some.unwrap().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let core_info = RegexInfo::default();",
          "    let prefilter = Prefilter::default();",
          "    let nfa = NFA::default();",
          "    let pikevm = wrappers::PikeVM::default();",
          "    let backtrack = wrappers::BoundedBacktracker::default();",
          "    let onepass = wrappers::OnePass::default();",
          "    let hybrid = wrappers::Hybrid::default();",
          "    let dfa = wrappers::DFA::default();",
          "",
          "    let core = Core {",
          "        info: core_info,",
          "        pre: Some(prefilter.clone()),",
          "        nfa,",
          "        nfarev: None,",
          "        pikevm,",
          "        backtrack,",
          "        onepass,",
          "        hybrid,",
          "        dfa,",
          "    };",
          "",
          "    let strategy = ReverseSuffix { core, pre: prefilter };",
          "",
          "    let haystack: &[u8] = b\"test haystack\";",
          "    let input = Input::new(haystack).anchored(Anchored::No).span(0..haystack.len());",
          "    let mut cache = strategy.create_cache();",
          "",
          "    let result = strategy.try_search_half_start(&mut cache, &input);",
          "    match result {",
          "        Ok(Some(_)) => {},",
          "        _ => panic!(\"Expected half match found\")",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(strategy.is_match(&mut cache, &input), false);",
          "    let result = strategy.try_search_half_start(&mut cache, &input);",
          "    assert!(matches!(result, Err(RetryError::Quadratic(_))));",
          "    assert!(matches!(result, Ok(None)));",
          "    assert!(matches!(result, Ok(Some(_))));"
        ],
        "code": [
          "{",
          "    let core_info = RegexInfo::default();",
          "    let prefilter = Prefilter::default();",
          "    let nfa = NFA::default();",
          "    let pikevm = wrappers::PikeVM::default();",
          "    let backtrack = wrappers::BoundedBacktracker::default();",
          "    let onepass = wrappers::OnePass::default();",
          "    let hybrid = wrappers::Hybrid::default();",
          "    let dfa = wrappers::DFA::default();",
          "",
          "    let core = Core {",
          "        info: core_info,",
          "        pre: Some(prefilter.clone()),",
          "        nfa,",
          "        nfarev: None,",
          "        pikevm,",
          "        backtrack,",
          "        onepass,",
          "        hybrid,",
          "        dfa,",
          "    };",
          "",
          "    let strategy = ReverseSuffix { core, pre: prefilter };",
          "",
          "    let haystack: &[u8] = b\"test haystack\";",
          "    let input = Input::new(haystack).anchored(Anchored::No).span(0..haystack.len());",
          "    let mut cache = strategy.create_cache();",
          "",
          "    let result = strategy.try_search_half_start(&mut cache, &input);",
          "    match result {",
          "        Ok(Some(_)) => {},",
          "        _ => panic!(\"Expected half match found\")",
          "    }",
          "    assert_eq!(strategy.is_match(&mut cache, &input), false);",
          "    let result = strategy.try_search_half_start(&mut cache, &input);",
          "    assert!(matches!(result, Err(RetryError::Quadratic(_))));",
          "    assert!(matches!(result, Ok(None)));",
          "    assert!(matches!(result, Ok(Some(_))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]