[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = b\"example\";",
          "    let span = Span::new(0, haystack.len());",
          "    let input = Input::new(haystack).span(span).anchored(Anchored::No);",
          "    ",
          "    let core = Core {",
          "        info: RegexInfo::default(),",
          "        pre: None,",
          "        nfa: NFA::default(),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::default(),",
          "        dfa: wrappers::DFA::default(),",
          "    };",
          "    ",
          "    let prefilter = Prefilter::default();",
          "    let reverse_suffix = ReverseSuffix {",
          "        core,",
          "        pre: prefilter,",
          "    };",
          "    ",
          "    let mut cache = Cache::default();",
          "",
          "    reverse_suffix.is_match(&mut cache, &input);",
          "}"
        ],
        "oracle": [
          "    reverse_suffix.is_match(&mut cache, &input) == false;"
        ],
        "code": [
          "{",
          "    let haystack = b\"example\";",
          "    let span = Span::new(0, haystack.len());",
          "    let input = Input::new(haystack).span(span).anchored(Anchored::No);",
          "    ",
          "    let core = Core {",
          "        info: RegexInfo::default(),",
          "        pre: None,",
          "        nfa: NFA::default(),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::default(),",
          "        dfa: wrappers::DFA::default(),",
          "    };",
          "    ",
          "    let prefilter = Prefilter::default();",
          "    let reverse_suffix = ReverseSuffix {",
          "        core,",
          "        pre: prefilter,",
          "    };",
          "    ",
          "    let mut cache = Cache::default();",
          "",
          "    reverse_suffix.is_match(&mut cache, &input);",
          "    reverse_suffix.is_match(&mut cache, &input) == false;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = b\"test\";",
          "    let span = Span::new(0, haystack.len());",
          "    let input = Input::new(haystack).span(span).anchored(Anchored::No);",
          "    ",
          "    let core = Core {",
          "        info: RegexInfo::default(),",
          "        pre: None,",
          "        nfa: NFA::default(),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::default(),",
          "        dfa: wrappers::DFA::default(),",
          "    };",
          "    ",
          "    let prefilter = Prefilter::default();",
          "    let reverse_suffix = ReverseSuffix {",
          "        core,",
          "        pre: prefilter,",
          "    };",
          "    ",
          "    let mut cache = Cache::default();",
          "",
          "    reverse_suffix.is_match(&mut cache, &input);",
          "}"
        ],
        "oracle": [
          "    let haystack = b\"test\";",
          "    let span = Span::new(0, haystack.len());",
          "    let input = Input::new(haystack).span(span).anchored(Anchored::No);",
          "    let core = Core {",
          "    info: RegexInfo::default(),",
          "    pre: None,",
          "    nfa: NFA::default(),",
          "    nfarev: None,",
          "    pikevm: wrappers::PikeVM::default(),",
          "    backtrack: wrappers::BoundedBacktracker::default(),",
          "    onepass: wrappers::OnePass::default(),",
          "    hybrid: wrappers::Hybrid::default(),",
          "    dfa: wrappers::DFA::default(),",
          "    };",
          "    let prefilter = Prefilter::default();",
          "    let reverse_suffix = ReverseSuffix {",
          "    core,",
          "    pre: prefilter,",
          "    };",
          "    let mut cache = Cache::default();",
          "    let result = reverse_suffix.is_match(&mut cache, &input);",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let haystack = b\"test\";",
          "    let span = Span::new(0, haystack.len());",
          "    let input = Input::new(haystack).span(span).anchored(Anchored::No);",
          "    ",
          "    let core = Core {",
          "        info: RegexInfo::default(),",
          "        pre: None,",
          "        nfa: NFA::default(),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::default(),",
          "        dfa: wrappers::DFA::default(),",
          "    };",
          "    ",
          "    let prefilter = Prefilter::default();",
          "    let reverse_suffix = ReverseSuffix {",
          "        core,",
          "        pre: prefilter,",
          "    };",
          "    ",
          "    let mut cache = Cache::default();",
          "",
          "    reverse_suffix.is_match(&mut cache, &input);",
          "    let haystack = b\"test\";",
          "    let span = Span::new(0, haystack.len());",
          "    let input = Input::new(haystack).span(span).anchored(Anchored::No);",
          "    let core = Core {",
          "    info: RegexInfo::default(),",
          "    pre: None,",
          "    nfa: NFA::default(),",
          "    nfarev: None,",
          "    pikevm: wrappers::PikeVM::default(),",
          "    backtrack: wrappers::BoundedBacktracker::default(),",
          "    onepass: wrappers::OnePass::default(),",
          "    hybrid: wrappers::Hybrid::default(),",
          "    dfa: wrappers::DFA::default(),",
          "    };",
          "    let prefilter = Prefilter::default();",
          "    let reverse_suffix = ReverseSuffix {",
          "    core,",
          "    pre: prefilter,",
          "    };",
          "    let mut cache = Cache::default();",
          "    let result = reverse_suffix.is_match(&mut cache, &input);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]