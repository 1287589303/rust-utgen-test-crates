[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub_hir1 = Hir {",
          "        kind: HirKind::Literal(Literal::from(\"a\")),",
          "        props: Properties::default(),",
          "    };",
          "    let sub_hir2 = Hir {",
          "        kind: HirKind::Literal(Literal::from(\"b\")),",
          "        props: Properties::default(),",
          "    };",
          "    let hir = Hir {",
          "        kind: HirKind::Concat(vec![sub_hir1.clone(), sub_hir2.clone()]),",
          "        props: Properties::default(),",
          "    };",
          "    ",
          "    let mut visitor = HeapVisitor::new();",
          "    visitor.induct(&hir);",
          "}"
        ],
        "oracle": [
          "    let sub_hir1 = Hir { kind: HirKind::Literal(Literal::from(\"a\")), props: Properties::default() };",
          "    let sub_hir2 = Hir { kind: HirKind::Literal(Literal::from(\"b\")), props: Properties::default() };",
          "    let hir = Hir { kind: HirKind::Concat(vec![sub_hir1.clone(), sub_hir2.clone()]), props: Properties::default() };",
          "    let mut visitor = HeapVisitor::new();",
          "    let result = visitor.induct(&hir);",
          "    assert!(result.is_some());",
          "    assert_eq!(result, Some(Frame::Concat { head: &hir.kind().as_concat().unwrap()[0], tail: &hir.kind().as_concat().unwrap()[1..] }));"
        ],
        "code": [
          "{",
          "    let sub_hir1 = Hir {",
          "        kind: HirKind::Literal(Literal::from(\"a\")),",
          "        props: Properties::default(),",
          "    };",
          "    let sub_hir2 = Hir {",
          "        kind: HirKind::Literal(Literal::from(\"b\")),",
          "        props: Properties::default(),",
          "    };",
          "    let hir = Hir {",
          "        kind: HirKind::Concat(vec![sub_hir1.clone(), sub_hir2.clone()]),",
          "        props: Properties::default(),",
          "    };",
          "    ",
          "    let mut visitor = HeapVisitor::new();",
          "    visitor.induct(&hir);",
          "    let sub_hir1 = Hir { kind: HirKind::Literal(Literal::from(\"a\")), props: Properties::default() };",
          "    let sub_hir2 = Hir { kind: HirKind::Literal(Literal::from(\"b\")), props: Properties::default() };",
          "    let hir = Hir { kind: HirKind::Concat(vec![sub_hir1.clone(), sub_hir2.clone()]), props: Properties::default() };",
          "    let mut visitor = HeapVisitor::new();",
          "    let result = visitor.induct(&hir);",
          "    assert!(result.is_some());",
          "    assert_eq!(result, Some(Frame::Concat { head: &hir.kind().as_concat().unwrap()[0], tail: &hir.kind().as_concat().unwrap()[1..] }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub_hir1 = Hir {",
          "        kind: HirKind::Literal(Literal::from(\"x\")),",
          "        props: Properties::default(),",
          "    };",
          "    let sub_hir2 = Hir {",
          "        kind: HirKind::Literal(Literal::from(\"y\")),",
          "        props: Properties::default(),",
          "    };",
          "    let sub_hir3 = Hir {",
          "        kind: HirKind::Literal(Literal::from(\"z\")),",
          "        props: Properties::default(),",
          "    };",
          "    let hir = Hir {",
          "        kind: HirKind::Concat(vec![sub_hir1.clone(), sub_hir2.clone(), sub_hir3.clone()]),",
          "        props: Properties::default(),",
          "    };",
          "    ",
          "    let mut visitor = HeapVisitor::new();",
          "    visitor.induct(&hir);",
          "}"
        ],
        "oracle": [
          "    let mut visitor = HeapVisitor::new();",
          "    let sub_hir1 = Hir {",
          "    kind: HirKind::Literal(Literal::from(\"x\")),",
          "    props: Properties::default(),",
          "    };",
          "    let sub_hir2 = Hir {",
          "    kind: HirKind::Literal(Literal::from(\"y\")),",
          "    props: Properties::default(),",
          "    };",
          "    let sub_hir3 = Hir {",
          "    kind: HirKind::Literal(Literal::from(\"z\")),",
          "    props: Properties::default(),",
          "    };",
          "    let hir = Hir {",
          "    kind: HirKind::Concat(vec![sub_hir1.clone(), sub_hir2.clone(), sub_hir3.clone()]),",
          "    props: Properties::default(),",
          "    };",
          "    ",
          "    assert_eq!(visitor.induct(&hir), Some(Frame::Concat { head: &hir.kind().concat()[0], tail: &hir.kind().concat()[1..] }));"
        ],
        "code": [
          "{",
          "    let sub_hir1 = Hir {",
          "        kind: HirKind::Literal(Literal::from(\"x\")),",
          "        props: Properties::default(),",
          "    };",
          "    let sub_hir2 = Hir {",
          "        kind: HirKind::Literal(Literal::from(\"y\")),",
          "        props: Properties::default(),",
          "    };",
          "    let sub_hir3 = Hir {",
          "        kind: HirKind::Literal(Literal::from(\"z\")),",
          "        props: Properties::default(),",
          "    };",
          "    let hir = Hir {",
          "        kind: HirKind::Concat(vec![sub_hir1.clone(), sub_hir2.clone(), sub_hir3.clone()]),",
          "        props: Properties::default(),",
          "    };",
          "    ",
          "    let mut visitor = HeapVisitor::new();",
          "    visitor.induct(&hir);",
          "    let mut visitor = HeapVisitor::new();",
          "    let sub_hir1 = Hir {",
          "    kind: HirKind::Literal(Literal::from(\"x\")),",
          "    props: Properties::default(),",
          "    };",
          "    let sub_hir2 = Hir {",
          "    kind: HirKind::Literal(Literal::from(\"y\")),",
          "    props: Properties::default(),",
          "    };",
          "    let sub_hir3 = Hir {",
          "    kind: HirKind::Literal(Literal::from(\"z\")),",
          "    props: Properties::default(),",
          "    };",
          "    let hir = Hir {",
          "    kind: HirKind::Concat(vec![sub_hir1.clone(), sub_hir2.clone(), sub_hir3.clone()]),",
          "    props: Properties::default(),",
          "    };",
          "    ",
          "    assert_eq!(visitor.induct(&hir), Some(Frame::Concat { head: &hir.kind().concat()[0], tail: &hir.kind().concat()[1..] }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub_hir1 = Hir {",
          "        kind: HirKind::Literal(Literal::from(\"1\")),",
          "        props: Properties::default(),",
          "    };",
          "    let sub_hir2 = Hir {",
          "        kind: HirKind::Literal(Literal::from(\"2\")),",
          "        props: Properties::default(),",
          "    };",
          "    let sub_hir3 = Hir {",
          "        kind: HirKind::Literal(Literal::from(\"3\")),",
          "        props: Properties::default(),",
          "    };",
          "    let hir = Hir {",
          "        kind: HirKind::Concat(vec![sub_hir1.clone(), sub_hir2.clone(), sub_hir3.clone()]),",
          "        props: Properties::default(),",
          "    };",
          "    ",
          "    let mut visitor = HeapVisitor::new();",
          "    visitor.induct(&hir);",
          "}"
        ],
        "oracle": [
          "    let sub_hir1 = Hir { kind: HirKind::Literal(Literal::from(\"1\")), props: Properties::default() };",
          "    let sub_hir2 = Hir { kind: HirKind::Literal(Literal::from(\"2\")), props: Properties::default() };",
          "    let sub_hir3 = Hir { kind: HirKind::Literal(Literal::from(\"3\")), props: Properties::default() };",
          "    let hir = Hir { kind: HirKind::Concat(vec![sub_hir1.clone(), sub_hir2.clone(), sub_hir3.clone()]), props: Properties::default() };",
          "    ",
          "    assert_eq!(visitor.induct(&hir), Some(Frame::Concat { head: &hir.kind().as_concat().unwrap()[0], tail: &hir.kind().as_concat().unwrap()[1..] }));"
        ],
        "code": [
          "{",
          "    let sub_hir1 = Hir {",
          "        kind: HirKind::Literal(Literal::from(\"1\")),",
          "        props: Properties::default(),",
          "    };",
          "    let sub_hir2 = Hir {",
          "        kind: HirKind::Literal(Literal::from(\"2\")),",
          "        props: Properties::default(),",
          "    };",
          "    let sub_hir3 = Hir {",
          "        kind: HirKind::Literal(Literal::from(\"3\")),",
          "        props: Properties::default(),",
          "    };",
          "    let hir = Hir {",
          "        kind: HirKind::Concat(vec![sub_hir1.clone(), sub_hir2.clone(), sub_hir3.clone()]),",
          "        props: Properties::default(),",
          "    };",
          "    ",
          "    let mut visitor = HeapVisitor::new();",
          "    visitor.induct(&hir);",
          "    let sub_hir1 = Hir { kind: HirKind::Literal(Literal::from(\"1\")), props: Properties::default() };",
          "    let sub_hir2 = Hir { kind: HirKind::Literal(Literal::from(\"2\")), props: Properties::default() };",
          "    let sub_hir3 = Hir { kind: HirKind::Literal(Literal::from(\"3\")), props: Properties::default() };",
          "    let hir = Hir { kind: HirKind::Concat(vec![sub_hir1.clone(), sub_hir2.clone(), sub_hir3.clone()]), props: Properties::default() };",
          "    ",
          "    assert_eq!(visitor.induct(&hir), Some(Frame::Concat { head: &hir.kind().as_concat().unwrap()[0], tail: &hir.kind().as_concat().unwrap()[1..] }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]