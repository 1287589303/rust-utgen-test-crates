[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Empty,",
          "        props: Properties::default(),",
          "    };",
          "    let mut visitor = HeapVisitor::new();",
          "    let result = visitor.induct(&hir);",
          "}"
        ],
        "oracle": [
          "    let hir = Hir { kind: HirKind::Empty, props: Properties::default() };",
          "    let mut visitor = HeapVisitor::new();",
          "    let result = visitor.induct(&hir);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Empty,",
          "        props: Properties::default(),",
          "    };",
          "    let mut visitor = HeapVisitor::new();",
          "    let result = visitor.induct(&hir);",
          "    let hir = Hir { kind: HirKind::Empty, props: Properties::default() };",
          "    let mut visitor = HeapVisitor::new();",
          "    let result = visitor.induct(&hir);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Literal(Literal::from(\"test\")),",
          "        props: Properties::default(),",
          "    };",
          "    let mut visitor = HeapVisitor::new();",
          "    let result = visitor.induct(&hir);",
          "}"
        ],
        "oracle": [
          "    let hir = Hir { kind: HirKind::Literal(Literal::from(\"test\")), props: Properties::default() };",
          "    let mut visitor = HeapVisitor::new();",
          "    let result = visitor.induct(&hir);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Literal(Literal::from(\"test\")),",
          "        props: Properties::default(),",
          "    };",
          "    let mut visitor = HeapVisitor::new();",
          "    let result = visitor.induct(&hir);",
          "    let hir = Hir { kind: HirKind::Literal(Literal::from(\"test\")), props: Properties::default() };",
          "    let mut visitor = HeapVisitor::new();",
          "    let result = visitor.induct(&hir);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]