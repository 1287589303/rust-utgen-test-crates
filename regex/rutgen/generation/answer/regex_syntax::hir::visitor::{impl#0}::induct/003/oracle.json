[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub_expression1 = Hir {",
          "        kind: HirKind::Literal(Literal::new(\"test1\")),",
          "        props: Properties::default(),",
          "    };",
          "    let sub_expression2 = Hir {",
          "        kind: HirKind::Literal(Literal::new(\"test2\")),",
          "        props: Properties::default(),",
          "    };",
          "    let alternation_hir = Hir {",
          "        kind: HirKind::Alternation(vec![sub_expression1.clone(), sub_expression2.clone()]),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = HeapVisitor::new();",
          "    let result = visitor.induct(&alternation_hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Frame::Alternation { head: &alternation_hir.kind().as_alternation().unwrap()[0], tail: &alternation_hir.kind().as_alternation().unwrap()[1..] }));"
        ],
        "code": [
          "{",
          "    let sub_expression1 = Hir {",
          "        kind: HirKind::Literal(Literal::new(\"test1\")),",
          "        props: Properties::default(),",
          "    };",
          "    let sub_expression2 = Hir {",
          "        kind: HirKind::Literal(Literal::new(\"test2\")),",
          "        props: Properties::default(),",
          "    };",
          "    let alternation_hir = Hir {",
          "        kind: HirKind::Alternation(vec![sub_expression1.clone(), sub_expression2.clone()]),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = HeapVisitor::new();",
          "    let result = visitor.induct(&alternation_hir);",
          "    assert_eq!(result, Some(Frame::Alternation { head: &alternation_hir.kind().as_alternation().unwrap()[0], tail: &alternation_hir.kind().as_alternation().unwrap()[1..] }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub_expression1 = Hir {",
          "        kind: HirKind::Literal(Literal::new(\"alpha\")),",
          "        props: Properties::default(),",
          "    };",
          "    let sub_expression2 = Hir {",
          "        kind: HirKind::Literal(Literal::new(\"beta\")),",
          "        props: Properties::default(),",
          "    };",
          "    let sub_expression3 = Hir {",
          "        kind: HirKind::Literal(Literal::new(\"gamma\")),",
          "        props: Properties::default(),",
          "    };",
          "    let alternation_hir = Hir {",
          "        kind: HirKind::Alternation(vec![sub_expression1, sub_expression2, sub_expression3]),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = HeapVisitor::new();",
          "    let result = visitor.induct(&alternation_hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Frame::Alternation { head: &alternation_hir.kind().alternation().unwrap()[0], tail: &alternation_hir.kind().alternation().unwrap()[1..] }));"
        ],
        "code": [
          "{",
          "    let sub_expression1 = Hir {",
          "        kind: HirKind::Literal(Literal::new(\"alpha\")),",
          "        props: Properties::default(),",
          "    };",
          "    let sub_expression2 = Hir {",
          "        kind: HirKind::Literal(Literal::new(\"beta\")),",
          "        props: Properties::default(),",
          "    };",
          "    let sub_expression3 = Hir {",
          "        kind: HirKind::Literal(Literal::new(\"gamma\")),",
          "        props: Properties::default(),",
          "    };",
          "    let alternation_hir = Hir {",
          "        kind: HirKind::Alternation(vec![sub_expression1, sub_expression2, sub_expression3]),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = HeapVisitor::new();",
          "    let result = visitor.induct(&alternation_hir);",
          "    assert_eq!(result, Some(Frame::Alternation { head: &alternation_hir.kind().alternation().unwrap()[0], tail: &alternation_hir.kind().alternation().unwrap()[1..] }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub_expression1 = Hir {",
          "        kind: HirKind::Literal(Literal::new(\"one\")),",
          "        props: Properties::default(),",
          "    };",
          "    let sub_expression2 = Hir {",
          "        kind: HirKind::Literal(Literal::new(\"two\")),",
          "        props: Properties::default(),",
          "    };",
          "    let alternation_hir = Hir {",
          "        kind: HirKind::Alternation(vec![sub_expression1, sub_expression2]),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = HeapVisitor::new();",
          "    let result = visitor.induct(&alternation_hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Frame::Alternation { head: &alternation_hir.kind().as_alternation()[0], tail: &alternation_hir.kind().as_alternation()[1..] }));"
        ],
        "code": [
          "{",
          "    let sub_expression1 = Hir {",
          "        kind: HirKind::Literal(Literal::new(\"one\")),",
          "        props: Properties::default(),",
          "    };",
          "    let sub_expression2 = Hir {",
          "        kind: HirKind::Literal(Literal::new(\"two\")),",
          "        props: Properties::default(),",
          "    };",
          "    let alternation_hir = Hir {",
          "        kind: HirKind::Alternation(vec![sub_expression1, sub_expression2]),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = HeapVisitor::new();",
          "    let result = visitor.induct(&alternation_hir);",
          "    assert_eq!(result, Some(Frame::Alternation { head: &alternation_hir.kind().as_alternation()[0], tail: &alternation_hir.kind().as_alternation()[1..] }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]