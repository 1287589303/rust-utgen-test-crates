[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ids: &[StateID] = &[0, 1, 2];",
          "    let mut iter = SparseSetIter(ids.iter());",
          "    let result1 = iter.next();",
          "    let result2 = iter.next();",
          "    let result3 = iter.next();",
          "}"
        ],
        "oracle": [
          "    let ids: &[StateID] = &[0, 1, 2];",
          "    let mut iter = SparseSetIter(ids.iter());",
          "    assert_eq!(result1, Some(0));",
          "    assert_eq!(result2, Some(1));",
          "    assert_eq!(result3, Some(2));",
          "    assert_eq!(iter.next(), None);"
        ],
        "code": [
          "{",
          "    let ids: &[StateID] = &[0, 1, 2];",
          "    let mut iter = SparseSetIter(ids.iter());",
          "    let result1 = iter.next();",
          "    let result2 = iter.next();",
          "    let result3 = iter.next();",
          "    let ids: &[StateID] = &[0, 1, 2];",
          "    let mut iter = SparseSetIter(ids.iter());",
          "    assert_eq!(result1, Some(0));",
          "    assert_eq!(result2, Some(1));",
          "    assert_eq!(result3, Some(2));",
          "    assert_eq!(iter.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ids: &[StateID] = &[];",
          "    let mut iter = SparseSetIter(ids.iter());",
          "    let result = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);",
          "    ",
          "    let ids: &[StateID] = &[StateID(1), StateID(2)];",
          "    let mut iter = SparseSetIter(ids.iter());",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(StateID(1)));",
          "    ",
          "    let mut iter = SparseSetIter(ids.iter());",
          "    iter.next(); // consume the first element",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(StateID(2)));",
          "    ",
          "    let ids: &[StateID] = &[StateID(3)];",
          "    let mut iter = SparseSetIter(ids.iter());",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(StateID(3)));",
          "    ",
          "    let ids: &[StateID] = &[StateID(4), StateID(5), StateID(6)];",
          "    let mut iter = SparseSetIter(ids.iter());",
          "    iter.next(); // consume first",
          "    iter.next(); // consume second",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(StateID(6)));",
          "    ",
          "    let ids: &[StateID] = &[];",
          "    let mut iter = SparseSetIter(ids.iter());",
          "    iter.next(); // attempt to consume from an empty iterator",
          "    let result = iter.next();",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let ids: &[StateID] = &[];",
          "    let mut iter = SparseSetIter(ids.iter());",
          "    let result = iter.next();",
          "    assert_eq!(result, None);",
          "    ",
          "    let ids: &[StateID] = &[StateID(1), StateID(2)];",
          "    let mut iter = SparseSetIter(ids.iter());",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(StateID(1)));",
          "    ",
          "    let mut iter = SparseSetIter(ids.iter());",
          "    iter.next(); // consume the first element",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(StateID(2)));",
          "    ",
          "    let ids: &[StateID] = &[StateID(3)];",
          "    let mut iter = SparseSetIter(ids.iter());",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(StateID(3)));",
          "    ",
          "    let ids: &[StateID] = &[StateID(4), StateID(5), StateID(6)];",
          "    let mut iter = SparseSetIter(ids.iter());",
          "    iter.next(); // consume first",
          "    iter.next(); // consume second",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(StateID(6)));",
          "    ",
          "    let ids: &[StateID] = &[];",
          "    let mut iter = SparseSetIter(ids.iter());",
          "    iter.next(); // attempt to consume from an empty iterator",
          "    let result = iter.next();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]