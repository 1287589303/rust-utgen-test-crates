[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let min_accel = StateID(1);",
          "    let max_accel = StateID(5);",
          "    let stride = 2;",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(0),",
          "        min_match: StateID(0),",
          "        max_match: StateID(0),",
          "        min_accel,",
          "        max_accel,",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "    let result = special.accel_len(stride);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, (5.as_usize() - 1.as_usize() + stride) / stride);"
        ],
        "code": [
          "{",
          "    let min_accel = StateID(1);",
          "    let max_accel = StateID(5);",
          "    let stride = 2;",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(0),",
          "        min_match: StateID(0),",
          "        max_match: StateID(0),",
          "        min_accel,",
          "        max_accel,",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "    let result = special.accel_len(stride);",
          "    assert_eq!(result, (5.as_usize() - 1.as_usize() + stride) / stride);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let min_accel = StateID(2);",
          "    let max_accel = StateID(2);",
          "    let stride = 1;",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(0),",
          "        min_match: StateID(0),",
          "        max_match: StateID(0),",
          "        min_accel,",
          "        max_accel,",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "    let result = special.accel_len(stride);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, (max_accel.as_usize() - min_accel.as_usize() + stride) / stride);",
          "    assert_eq!(result, (2 - 2 + 1) / 1);",
          "    assert_eq!(result, 1);",
          "    assert!(special.accels());"
        ],
        "code": [
          "{",
          "    let min_accel = StateID(2);",
          "    let max_accel = StateID(2);",
          "    let stride = 1;",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(0),",
          "        min_match: StateID(0),",
          "        max_match: StateID(0),",
          "        min_accel,",
          "        max_accel,",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "    let result = special.accel_len(stride);",
          "    assert_eq!(result, (max_accel.as_usize() - min_accel.as_usize() + stride) / stride);",
          "    assert_eq!(result, (2 - 2 + 1) / 1);",
          "    assert_eq!(result, 1);",
          "    assert!(special.accels());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let min_accel = StateID(1);",
          "    let max_accel = StateID(10);",
          "    let stride = 10;",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(0),",
          "        min_match: StateID(0),",
          "        max_match: StateID(0),",
          "        min_accel,",
          "        max_accel,",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "    let result = special.accel_len(stride);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, (max_accel.as_usize() - min_accel.as_usize() + stride) / stride);"
        ],
        "code": [
          "{",
          "    let min_accel = StateID(1);",
          "    let max_accel = StateID(10);",
          "    let stride = 10;",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(0),",
          "        min_match: StateID(0),",
          "        max_match: StateID(0),",
          "        min_accel,",
          "        max_accel,",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "    let result = special.accel_len(stride);",
          "    assert_eq!(result, (max_accel.as_usize() - min_accel.as_usize() + stride) / stride);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let min_accel = StateID(3);",
          "    let max_accel = StateID(9);",
          "    let stride = 3;",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(0),",
          "        min_match: StateID(0),",
          "        max_match: StateID(0),",
          "        min_accel,",
          "        max_accel,",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "    let result = special.accel_len(stride);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, (max_accel.as_usize() - min_accel.as_usize() + stride) / stride);"
        ],
        "code": [
          "{",
          "    let min_accel = StateID(3);",
          "    let max_accel = StateID(9);",
          "    let stride = 3;",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(0),",
          "        min_match: StateID(0),",
          "        max_match: StateID(0),",
          "        min_accel,",
          "        max_accel,",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "    let result = special.accel_len(stride);",
          "    assert_eq!(result, (max_accel.as_usize() - min_accel.as_usize() + stride) / stride);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]