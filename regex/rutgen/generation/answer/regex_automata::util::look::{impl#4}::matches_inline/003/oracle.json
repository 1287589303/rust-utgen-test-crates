[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[0x61, 0x62, 0x63, 0x20]; // \"abc \"",
          "    let at = 3; // position after 'c'",
          "    let result = matcher.matches_inline(Look::WordEndHalfAscii, haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[0x61, 0x62, 0x63, 0x20]; // \"abc \"",
          "    let at = 3; // position after 'c'",
          "    let result = matcher.matches_inline(Look::WordEndHalfAscii, haystack, at);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[]; // empty haystack",
          "    let at = 0; // position at the start of an empty haystack",
          "    let result = matcher.matches_inline(Look::WordEndHalfAscii, haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[]; // empty haystack",
          "    let at = 0; // position at the start of an empty haystack",
          "    let result = matcher.matches_inline(Look::WordEndHalfAscii, haystack, at);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[0x61]; // \"a\"",
          "    let at = 1; // position at the end of a single character",
          "    let result = matcher.matches_inline(Look::WordEndHalfAscii, haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert!(matcher.matches_inline(Look::WordEndHalfAscii, haystack, at));"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[0x61]; // \"a\"",
          "    let at = 1; // position at the end of a single character",
          "    let result = matcher.matches_inline(Look::WordEndHalfAscii, haystack, at);",
          "    assert!(matcher.matches_inline(Look::WordEndHalfAscii, haystack, at));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[0x20, 0x61]; // \" a\"",
          "    let at = 1; // position at 'a'",
          "    let result = matcher.matches_inline(Look::WordEndHalfAscii, haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[0x20, 0x61]; // \" a\"",
          "    let at = 1; // position at 'a'",
          "    let result = matcher.matches_inline(Look::WordEndHalfAscii, haystack, at);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[0x61, 0x20]; // \"a \"",
          "    let at = 0; // position at 'a'",
          "    let result = matcher.matches_inline(Look::WordEndHalfAscii, haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[0x61, 0x20]; // \"a \"",
          "    let at = 0; // position at 'a'",
          "    let result = matcher.matches_inline(Look::WordEndHalfAscii, haystack, at);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]