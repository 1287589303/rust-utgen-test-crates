[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\" hello\"; // non-word character before",
          "    let result = matcher.matches_inline(Look::WordStartHalfAscii, haystack, 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\" hello\"; // non-word character before",
          "    let result = matcher.matches_inline(Look::WordStartHalfAscii, haystack, 0);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\",hello\"; // non-word character before",
          "    let result = matcher.matches_inline(Look::WordStartHalfAscii, haystack, 1);",
          "}"
        ],
        "oracle": [
          "    assert!(result == true);"
        ],
        "code": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\",hello\"; // non-word character before",
          "    let result = matcher.matches_inline(Look::WordStartHalfAscii, haystack, 1);",
          "    assert!(result == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"\"; // empty haystack",
          "    let result = matcher.matches_inline(Look::WordStartHalfAscii, haystack, 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"\"; // empty haystack",
          "    let result = matcher.matches_inline(Look::WordStartHalfAscii, haystack, 0);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]