[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"hello world\";",
          "    let at = haystack.len(); // at should be at the end",
          "    matcher.matches_inline(Look::WordEndHalfUnicode, haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(matcher.matches_inline(Look::WordEndHalfUnicode, haystack, at), true);"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"hello world\";",
          "    let at = haystack.len(); // at should be at the end",
          "    matcher.matches_inline(Look::WordEndHalfUnicode, haystack, at);",
          "    assert_eq!(matcher.matches_inline(Look::WordEndHalfUnicode, haystack, at), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"\";",
          "    let at = 0; // test at the start of an empty haystack",
          "    matcher.matches_inline(Look::WordEndHalfUnicode, haystack, at);",
          "}"
        ],
        "oracle": [
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"\";",
          "    let at = 0;",
          "    assert!(matcher.matches_inline(Look::WordEndHalfUnicode, haystack, at));"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"\";",
          "    let at = 0; // test at the start of an empty haystack",
          "    matcher.matches_inline(Look::WordEndHalfUnicode, haystack, at);",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"\";",
          "    let at = 0;",
          "    assert!(matcher.matches_inline(Look::WordEndHalfUnicode, haystack, at));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"a\"; // single ASCII character",
          "    let at = 1; // test at the end, should be a half-word boundary",
          "    matcher.matches_inline(Look::WordEndHalfUnicode, haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert!(matcher.matches_inline(Look::WordEndHalfUnicode, haystack, at));"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"a\"; // single ASCII character",
          "    let at = 1; // test at the end, should be a half-word boundary",
          "    matcher.matches_inline(Look::WordEndHalfUnicode, haystack, at);",
          "    assert!(matcher.matches_inline(Look::WordEndHalfUnicode, haystack, at));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = \"你好世界\".as_bytes(); // valid Unicode characters",
          "    let at = haystack.len(); // at should be at the end",
          "    matcher.matches_inline(Look::WordEndHalfUnicode, haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert!(matcher.matches_inline(Look::WordEndHalfUnicode, haystack, at));"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = \"你好世界\".as_bytes(); // valid Unicode characters",
          "    let at = haystack.len(); // at should be at the end",
          "    matcher.matches_inline(Look::WordEndHalfUnicode, haystack, at);",
          "    assert!(matcher.matches_inline(Look::WordEndHalfUnicode, haystack, at));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]