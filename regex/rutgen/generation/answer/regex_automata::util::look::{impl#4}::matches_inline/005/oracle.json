[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: Vec<u8> = b\"hello world\".to_vec();",
          "    let matcher = LookMatcher::new();",
          "    let at = 11; // Point at the end of the \"world\"",
          "    matcher.matches_inline(Look::WordEndUnicode, &haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(matcher.matches_inline(Look::WordEndUnicode, &haystack, at), true);"
        ],
        "code": [
          "{",
          "    let haystack: Vec<u8> = b\"hello world\".to_vec();",
          "    let matcher = LookMatcher::new();",
          "    let at = 11; // Point at the end of the \"world\"",
          "    matcher.matches_inline(Look::WordEndUnicode, &haystack, at);",
          "    assert_eq!(matcher.matches_inline(Look::WordEndUnicode, &haystack, at), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: Vec<u8> = b\"hello world\".to_vec();",
          "    let matcher = LookMatcher::new();",
          "    let at = 5; // Point at a boundary before \" \"",
          "    matcher.matches_inline(Look::WordEndUnicode, &haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert!(matcher.matches_inline(Look::WordEndUnicode, &haystack, at) == true);",
          "    assert!(matcher.matches_inline(Look::WordEndUnicode, &haystack, at + 1) == false);",
          "    assert!(matcher.matches_inline(Look::WordEndUnicode, &haystack, 0) == false);",
          "    assert!(matcher.matches_inline(Look::WordEndUnicode, &haystack, haystack.len()) == false);",
          "    assert!(matcher.matches_inline(Look::WordEndUnicode, &haystack, haystack.len() - 1) == true);"
        ],
        "code": [
          "{",
          "    let haystack: Vec<u8> = b\"hello world\".to_vec();",
          "    let matcher = LookMatcher::new();",
          "    let at = 5; // Point at a boundary before \" \"",
          "    matcher.matches_inline(Look::WordEndUnicode, &haystack, at);",
          "    assert!(matcher.matches_inline(Look::WordEndUnicode, &haystack, at) == true);",
          "    assert!(matcher.matches_inline(Look::WordEndUnicode, &haystack, at + 1) == false);",
          "    assert!(matcher.matches_inline(Look::WordEndUnicode, &haystack, 0) == false);",
          "    assert!(matcher.matches_inline(Look::WordEndUnicode, &haystack, haystack.len()) == false);",
          "    assert!(matcher.matches_inline(Look::WordEndUnicode, &haystack, haystack.len() - 1) == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: Vec<u8> = b\"hello\".to_vec();",
          "    let matcher = LookMatcher::new();",
          "    let at = 5; // Point at the end of \"hello\"",
          "    matcher.matches_inline(Look::WordEndUnicode, &haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(matcher.matches_inline(Look::WordEndUnicode, &haystack, at), true);"
        ],
        "code": [
          "{",
          "    let haystack: Vec<u8> = b\"hello\".to_vec();",
          "    let matcher = LookMatcher::new();",
          "    let at = 5; // Point at the end of \"hello\"",
          "    matcher.matches_inline(Look::WordEndUnicode, &haystack, at);",
          "    assert_eq!(matcher.matches_inline(Look::WordEndUnicode, &haystack, at), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let haystack: Vec<u8> = b\"hello\".to_vec();",
          "    let matcher = LookMatcher::new();",
          "    let at = 6; // Out of bounds",
          "    matcher.matches_inline(Look::WordEndUnicode, &haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(matcher.matches_inline(Look::WordEndUnicode, &haystack, 6), false);",
          "    assert!(std::panic::catch_unwind(|| {",
          "    matcher.matches_inline(Look::WordEndUnicode, &haystack, at);",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    let haystack: Vec<u8> = b\"hello\".to_vec();",
          "    let matcher = LookMatcher::new();",
          "    let at = 6; // Out of bounds",
          "    matcher.matches_inline(Look::WordEndUnicode, &haystack, at);",
          "    assert_eq!(matcher.matches_inline(Look::WordEndUnicode, &haystack, 6), false);",
          "    assert!(std::panic::catch_unwind(|| {",
          "    matcher.matches_inline(Look::WordEndUnicode, &haystack, at);",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]