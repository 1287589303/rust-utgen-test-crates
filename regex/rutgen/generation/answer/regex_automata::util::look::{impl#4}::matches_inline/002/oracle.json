[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    matcher.set_line_terminator(b'\\n');",
          "    let haystack: &[u8] = b\"word\";",
          "    let result = matcher.matches_inline(Look::WordStartHalfUnicode, haystack, 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    assert_eq!(matcher.get_line_terminator(), b'\\n');",
          "    assert!(matcher.matches_inline(Look::WordStartHalfUnicode, haystack, 0));",
          "    assert!(!matcher.matches_inline(Look::WordEndHalfUnicode, haystack, 0));",
          "    assert!(!matcher.matches_inline(Look::WordStartHalfUnicode, haystack, 1));"
        ],
        "code": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    matcher.set_line_terminator(b'\\n');",
          "    let haystack: &[u8] = b\"word\";",
          "    let result = matcher.matches_inline(Look::WordStartHalfUnicode, haystack, 0);",
          "    assert_eq!(result, true);",
          "    assert_eq!(matcher.get_line_terminator(), b'\\n');",
          "    assert!(matcher.matches_inline(Look::WordStartHalfUnicode, haystack, 0));",
          "    assert!(!matcher.matches_inline(Look::WordEndHalfUnicode, haystack, 0));",
          "    assert!(!matcher.matches_inline(Look::WordStartHalfUnicode, haystack, 1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    matcher.set_line_terminator(b'\\n');",
          "    let haystack: &[u8] = b\" test\";",
          "    let result = matcher.matches_inline(Look::WordStartHalfUnicode, haystack, 1);",
          "}"
        ],
        "oracle": [
          "    assert!(result);"
        ],
        "code": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    matcher.set_line_terminator(b'\\n');",
          "    let haystack: &[u8] = b\" test\";",
          "    let result = matcher.matches_inline(Look::WordStartHalfUnicode, haystack, 1);",
          "    assert!(result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    matcher.set_line_terminator(b'\\n');",
          "    let haystack: &[u8] = b\"test \";",
          "    let result = matcher.matches_inline(Look::WordStartHalfUnicode, haystack, 4);",
          "}"
        ],
        "oracle": [
          "    assert!(matcher.is_word_start_half_unicode(haystack, 4).unwrap());"
        ],
        "code": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    matcher.set_line_terminator(b'\\n');",
          "    let haystack: &[u8] = b\"test \";",
          "    let result = matcher.matches_inline(Look::WordStartHalfUnicode, haystack, 4);",
          "    assert!(matcher.is_word_start_half_unicode(haystack, 4).unwrap());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    matcher.set_line_terminator(b'\\n');",
          "    let haystack: &[u8] = b\"\";",
          "    let result = matcher.matches_inline(Look::WordStartHalfUnicode, haystack, 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    matcher.set_line_terminator(b'\\n');",
          "    let haystack: &[u8] = b\"\";",
          "    let result = matcher.matches_inline(Look::WordStartHalfUnicode, haystack, 0);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    matcher.set_line_terminator(b'\\n');",
          "    let haystack: &[u8] = b\"word\";",
          "    let _result = matcher.matches_inline(Look::WordStartHalfUnicode, haystack, 5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(matcher.get_line_terminator(), b'\\n');",
          "    assert!(matcher.matches_inline(Look::WordStartHalfUnicode, b\"word\", 0));",
          "    assert!(matcher.matches_inline(Look::WordStartHalfUnicode, b\"word\", 1));",
          "    assert!(matcher.matches_inline(Look::WordStartHalfUnicode, b\"word\", 2));",
          "    assert!(matcher.matches_inline(Look::WordStartHalfUnicode, b\"word\", 3));",
          "    assert!(matcher.matches_inline(Look::WordStartHalfUnicode, b\"word\", 4));",
          "    #[should_panic]",
          "    matcher.matches_inline(Look::WordStartHalfUnicode, b\"word\", 5);"
        ],
        "code": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    matcher.set_line_terminator(b'\\n');",
          "    let haystack: &[u8] = b\"word\";",
          "    let _result = matcher.matches_inline(Look::WordStartHalfUnicode, haystack, 5);",
          "    assert_eq!(matcher.get_line_terminator(), b'\\n');",
          "    assert!(matcher.matches_inline(Look::WordStartHalfUnicode, b\"word\", 0));",
          "    assert!(matcher.matches_inline(Look::WordStartHalfUnicode, b\"word\", 1));",
          "    assert!(matcher.matches_inline(Look::WordStartHalfUnicode, b\"word\", 2));",
          "    assert!(matcher.matches_inline(Look::WordStartHalfUnicode, b\"word\", 3));",
          "    assert!(matcher.matches_inline(Look::WordStartHalfUnicode, b\"word\", 4));",
          "    #[should_panic]",
          "    matcher.matches_inline(Look::WordStartHalfUnicode, b\"word\", 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]