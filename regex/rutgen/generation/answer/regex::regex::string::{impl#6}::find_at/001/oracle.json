[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = \"eschew\";",
          "    let _ = re.find_at(hay, 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(re.find_at(hay, 0).map(|m| m.start()), Some(2));",
          "    assert_eq!(re.find_at(hay, 0).map(|m| m.end()), Some(6));",
          "    assert_eq!(re.find_at(hay, 2), None);",
          "    assert!(std::panic::catch_unwind(|| { re.find_at(hay, hay.len() + 1); }).is_err());",
          "    assert_eq!(re.find_at(hay, hay.len()), None);",
          "    assert_eq!(re.find_at(\"\", 0), None);",
          "    assert_eq!(re.find_at(hay, 1), Some(Match::new(hay, 2, 6)));"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = \"eschew\";",
          "    let _ = re.find_at(hay, 0);",
          "    assert_eq!(re.find_at(hay, 0).map(|m| m.start()), Some(2));",
          "    assert_eq!(re.find_at(hay, 0).map(|m| m.end()), Some(6));",
          "    assert_eq!(re.find_at(hay, 2), None);",
          "    assert!(std::panic::catch_unwind(|| { re.find_at(hay, hay.len() + 1); }).is_err());",
          "    assert_eq!(re.find_at(hay, hay.len()), None);",
          "    assert_eq!(re.find_at(\"\", 0), None);",
          "    assert_eq!(re.find_at(hay, 1), Some(Match::new(hay, 2, 6)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = \"eschew\";",
          "    let _ = re.find_at(hay, 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(re.find_at(hay, 0).map(|m| m.start()), Some(2));",
          "    assert_eq!(re.find_at(hay, 1).map(|m| m.start()), Some(2));",
          "    assert_eq!(re.find_at(hay, 2).map(|m| m.start()), None);",
          "    assert_eq!(re.find_at(hay, 3).map(|m| m.start()), None);",
          "    assert_eq!(re.find_at(hay, hay.len()).is_none(), true);",
          "    assert_panics!(re.find_at(hay, hay.len() + 1));"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = \"eschew\";",
          "    let _ = re.find_at(hay, 1);",
          "    assert_eq!(re.find_at(hay, 0).map(|m| m.start()), Some(2));",
          "    assert_eq!(re.find_at(hay, 1).map(|m| m.start()), Some(2));",
          "    assert_eq!(re.find_at(hay, 2).map(|m| m.start()), None);",
          "    assert_eq!(re.find_at(hay, 3).map(|m| m.start()), None);",
          "    assert_eq!(re.find_at(hay, hay.len()).is_none(), true);",
          "    assert_panics!(re.find_at(hay, hay.len() + 1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = \"eschew\";",
          "    let _ = re.find_at(hay, hay.len());",
          "}"
        ],
        "oracle": [
          "    assert!(re.find_at(hay, hay.len()).is_none());"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = \"eschew\";",
          "    let _ = re.find_at(hay, hay.len());",
          "    assert!(re.find_at(hay, hay.len()).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = \"eschew\";",
          "    let _ = re.find_at(hay, hay.len() + 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(re.find_at(hay, hay.len() + 1), None);",
          "    assert_eq!(re.find_at(hay, 2), None);",
          "    assert_eq!(re.find_at(hay, 0).map(|m| m.start()), Some(0));",
          "    assert_eq!(re.find_at(hay, 1).map(|m| m.start()), Some(2));",
          "    assert!(re.find_at(hay, 0).is_some());",
          "    assert!(re.find_at(hay, 3).is_none());",
          "    assert!(re.find_at(hay, hay.len()).is_none());",
          "    assert!(std::panic::catch_unwind(|| { re.find_at(hay, hay.len() + 1); }).is_err());",
          "    assert!(std::panic::catch_unwind(|| { re.find_at(hay, usize::MAX); }).is_err());"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let hay = \"eschew\";",
          "    let _ = re.find_at(hay, hay.len() + 1);",
          "    assert_eq!(re.find_at(hay, hay.len() + 1), None);",
          "    assert_eq!(re.find_at(hay, 2), None);",
          "    assert_eq!(re.find_at(hay, 0).map(|m| m.start()), Some(0));",
          "    assert_eq!(re.find_at(hay, 1).map(|m| m.start()), Some(2));",
          "    assert!(re.find_at(hay, 0).is_some());",
          "    assert!(re.find_at(hay, 3).is_none());",
          "    assert!(re.find_at(hay, hay.len()).is_none());",
          "    assert!(std::panic::catch_unwind(|| { re.find_at(hay, hay.len() + 1); }).is_err());",
          "    assert!(std::panic::catch_unwind(|| { re.find_at(hay, usize::MAX); }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]