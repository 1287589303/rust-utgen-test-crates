[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::default()",
          "        .which_captures(WhichCaptures::Implicit)",
          "        .utf8(true);",
          "    let builder = Builder { config, ..Default::default() };",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config,",
          "        builder: RefCell::new(builder),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: vec![] }),",
          "    };",
          "",
          "    let index = 1; // index > 0",
          "    let name = Some(\"test_capture\");",
          "    let expr = Hir::default(); // Construct a valid Hir instance here.",
          "",
          "    let result = compiler.c_cap(index, name, &expr);",
          "}"
        ],
        "oracle": [
          "    let config = Config::default().which_captures(WhichCaptures::Implicit);",
          "    let index = 1;",
          "    let name = Some(\"test_capture\");",
          "    let expr = Hir::default();",
          "    let result = compiler.c_cap(index, name, &expr).unwrap();",
          "    assert_eq!(result.start, expected_start);",
          "    assert_eq!(result.end, expected_end);",
          "    assert!(result.start != result.end);",
          "    assert!(compiler.builder.borrow().captures[index as usize].is_some());",
          "    assert_eq!(compiler.config.get_which_captures(), WhichCaptures::Implicit);",
          "    assert!(compiler.config.get_utf8());"
        ],
        "code": [
          "{",
          "    let config = Config::default()",
          "        .which_captures(WhichCaptures::Implicit)",
          "        .utf8(true);",
          "    let builder = Builder { config, ..Default::default() };",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config,",
          "        builder: RefCell::new(builder),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: vec![] }),",
          "    };",
          "",
          "    let index = 1; // index > 0",
          "    let name = Some(\"test_capture\");",
          "    let expr = Hir::default(); // Construct a valid Hir instance here.",
          "",
          "    let result = compiler.c_cap(index, name, &expr);",
          "    let config = Config::default().which_captures(WhichCaptures::Implicit);",
          "    let index = 1;",
          "    let name = Some(\"test_capture\");",
          "    let expr = Hir::default();",
          "    let result = compiler.c_cap(index, name, &expr).unwrap();",
          "    assert_eq!(result.start, expected_start);",
          "    assert_eq!(result.end, expected_end);",
          "    assert!(result.start != result.end);",
          "    assert!(compiler.builder.borrow().captures[index as usize].is_some());",
          "    assert_eq!(compiler.config.get_which_captures(), WhichCaptures::Implicit);",
          "    assert!(compiler.config.get_utf8());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::default()",
          "        .which_captures(WhichCaptures::Implicit)",
          "        .utf8(true);",
          "    let builder = Builder { config, ..Default::default() };",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config,",
          "        builder: RefCell::new(builder),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap { version: 1, capacity: 0, map: vec![] }),",
          "    };",
          "",
          "    let index = 2; // index > 0",
          "    let name = Some(\"another_capture\");",
          "    let expr = Hir::default(); // Construct a valid Hir instance here.",
          "",
          "    let result = compiler.c_cap(index, name, &expr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_ok(), true);",
          "    let thompson_ref = result.unwrap();",
          "    assert!(thompson_ref.start > StateID(0));",
          "    assert!(thompson_ref.end > StateID(0));",
          "    assert!(self.builder.borrow().captures[index as usize].is_some());",
          "    assert_eq!(self.builder.borrow().captures[index as usize].unwrap(), Some(Arc::from(\"another_capture\")));"
        ],
        "code": [
          "{",
          "    let config = Config::default()",
          "        .which_captures(WhichCaptures::Implicit)",
          "        .utf8(true);",
          "    let builder = Builder { config, ..Default::default() };",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config,",
          "        builder: RefCell::new(builder),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap { version: 1, capacity: 0, map: vec![] }),",
          "    };",
          "",
          "    let index = 2; // index > 0",
          "    let name = Some(\"another_capture\");",
          "    let expr = Hir::default(); // Construct a valid Hir instance here.",
          "",
          "    let result = compiler.c_cap(index, name, &expr);",
          "    assert_eq!(result.is_ok(), true);",
          "    let thompson_ref = result.unwrap();",
          "    assert!(thompson_ref.start > StateID(0));",
          "    assert!(thompson_ref.end > StateID(0));",
          "    assert!(self.builder.borrow().captures[index as usize].is_some());",
          "    assert_eq!(self.builder.borrow().captures[index as usize].unwrap(), Some(Arc::from(\"another_capture\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::default()",
          "        .which_captures(WhichCaptures::Implicit)",
          "        .utf8(true);",
          "    let builder = Builder { config, ..Default::default() };",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config,",
          "        builder: RefCell::new(builder),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap { version: 2, capacity: 0, map: vec![] }),",
          "    };",
          "",
          "    let index = 3; // index > 0",
          "    let name = Some(\"valid_capture\");",
          "    let expr = Hir::default(); // Construct a valid Hir instance here.",
          "",
          "    let result = compiler.c_cap(index, name, &expr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_ok(), true);",
          "    let thompson_ref = result.unwrap();",
          "    assert!(thompson_ref.start != StateID::ZERO);",
          "    assert!(thompson_ref.end != StateID::ZERO);",
          "    assert!(compiler.builder.borrow_mut().captures[index as usize].is_some());",
          "    assert_eq!(compiler.builder.borrow_mut().captures[index as usize].as_ref().unwrap().as_ref(), Some(Arc::from(name.unwrap())));",
          "    assert!(compiler.builder.borrow_mut().memory_states > 0);"
        ],
        "code": [
          "{",
          "    let config = Config::default()",
          "        .which_captures(WhichCaptures::Implicit)",
          "        .utf8(true);",
          "    let builder = Builder { config, ..Default::default() };",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config,",
          "        builder: RefCell::new(builder),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap { version: 2, capacity: 0, map: vec![] }),",
          "    };",
          "",
          "    let index = 3; // index > 0",
          "    let name = Some(\"valid_capture\");",
          "    let expr = Hir::default(); // Construct a valid Hir instance here.",
          "",
          "    let result = compiler.c_cap(index, name, &expr);",
          "    assert_eq!(result.is_ok(), true);",
          "    let thompson_ref = result.unwrap();",
          "    assert!(thompson_ref.start != StateID::ZERO);",
          "    assert!(thompson_ref.end != StateID::ZERO);",
          "    assert!(compiler.builder.borrow_mut().captures[index as usize].is_some());",
          "    assert_eq!(compiler.builder.borrow_mut().captures[index as usize].as_ref().unwrap().as_ref(), Some(Arc::from(name.unwrap())));",
          "    assert!(compiler.builder.borrow_mut().memory_states > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]