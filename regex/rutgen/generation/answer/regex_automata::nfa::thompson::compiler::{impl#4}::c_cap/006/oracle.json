[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = ParserBuilder::new();",
          "    let config = Config::default().which_captures(WhichCaptures::All);",
          "    let builder = RefCell::new(Builder::default());",
          "    let utf8_state = RefCell::new(Utf8State {",
          "        compiled: Utf8BoundedMap::default(),",
          "        uncompiled: Vec::new(),",
          "    });",
          "    let trie_state = RefCell::new(RangeTrie::default());",
          "    let utf8_suffix = RefCell::new(Utf8SuffixMap {",
          "        version: 0,",
          "        capacity: 0,",
          "        map: Vec::new(),",
          "    });",
          "",
          "    let compiler = Compiler {",
          "        parser,",
          "        config,",
          "        builder,",
          "        utf8_state,",
          "        trie_state,",
          "        utf8_suffix,",
          "    };",
          "",
          "    let index = 0;",
          "    let name = Some(\"capture_name\");",
          "    let expr = &Hir::Literal(hir::Literal(b\"test\".to_vec()));",
          "",
          "    let result = compiler.c_cap(index, name, expr);",
          "}"
        ],
        "oracle": [
          "    let config = Config::default().which_captures(WhichCaptures::All);",
          "    let result = compiler.c_cap(index, name, expr);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert!(thompson_ref.start == expected_start_id);",
          "    assert!(thompson_ref.end == expected_end_id);",
          "    assert!(self.config.get_which_captures() == WhichCaptures::All);",
          "    assert!(self.add_capture_start(index, name).is_ok());",
          "    assert!(self.c(expr).is_ok());",
          "    assert!(self.add_capture_end(index).is_ok());",
          "    assert!(self.patch(start, inner.start).is_ok());",
          "    assert!(self.patch(inner.end, end).is_ok());"
        ],
        "code": [
          "{",
          "    let parser = ParserBuilder::new();",
          "    let config = Config::default().which_captures(WhichCaptures::All);",
          "    let builder = RefCell::new(Builder::default());",
          "    let utf8_state = RefCell::new(Utf8State {",
          "        compiled: Utf8BoundedMap::default(),",
          "        uncompiled: Vec::new(),",
          "    });",
          "    let trie_state = RefCell::new(RangeTrie::default());",
          "    let utf8_suffix = RefCell::new(Utf8SuffixMap {",
          "        version: 0,",
          "        capacity: 0,",
          "        map: Vec::new(),",
          "    });",
          "",
          "    let compiler = Compiler {",
          "        parser,",
          "        config,",
          "        builder,",
          "        utf8_state,",
          "        trie_state,",
          "        utf8_suffix,",
          "    };",
          "",
          "    let index = 0;",
          "    let name = Some(\"capture_name\");",
          "    let expr = &Hir::Literal(hir::Literal(b\"test\".to_vec()));",
          "",
          "    let result = compiler.c_cap(index, name, expr);",
          "    let config = Config::default().which_captures(WhichCaptures::All);",
          "    let result = compiler.c_cap(index, name, expr);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert!(thompson_ref.start == expected_start_id);",
          "    assert!(thompson_ref.end == expected_end_id);",
          "    assert!(self.config.get_which_captures() == WhichCaptures::All);",
          "    assert!(self.add_capture_start(index, name).is_ok());",
          "    assert!(self.c(expr).is_ok());",
          "    assert!(self.add_capture_end(index).is_ok());",
          "    assert!(self.patch(start, inner.start).is_ok());",
          "    assert!(self.patch(inner.end, end).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = ParserBuilder::new();",
          "    let config = Config::default().which_captures(WhichCaptures::All);",
          "    let builder = RefCell::new(Builder::default());",
          "    let utf8_state = RefCell::new(Utf8State {",
          "        compiled: Utf8BoundedMap::default(),",
          "        uncompiled: Vec::new(),",
          "    });",
          "    let trie_state = RefCell::new(RangeTrie::default());",
          "    let utf8_suffix = RefCell::new(Utf8SuffixMap {",
          "        version: 0,",
          "        capacity: 0,",
          "        map: Vec::new(),",
          "    });",
          "",
          "    let compiler = Compiler {",
          "        parser,",
          "        config,",
          "        builder,",
          "        utf8_state,",
          "        trie_state,",
          "        utf8_suffix,",
          "    };",
          "",
          "    let index = 0;",
          "    let name = Some(\"example_capture\");",
          "    let expr = &Hir::Class(hir::Class::Bytes(hir::ClassBytes::new(vec![b'a', b'b'])));",
          "",
          "    let result = compiler.c_cap(index, name, expr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(compiler.config.get_which_captures(), WhichCaptures::All);",
          "    assert!(compiler.add_capture_start(index, name).is_ok());",
          "    assert!(compiler.c(expr).is_ok());",
          "    assert!(compiler.add_capture_end(index).is_ok());",
          "    assert!(compiler.patch(start, inner.start).is_ok());",
          "    assert!(compiler.patch(inner.end, end).is_ok());",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert!(thompson_ref.start.is_valid());",
          "    assert!(thompson_ref.end.is_valid());"
        ],
        "code": [
          "{",
          "    let parser = ParserBuilder::new();",
          "    let config = Config::default().which_captures(WhichCaptures::All);",
          "    let builder = RefCell::new(Builder::default());",
          "    let utf8_state = RefCell::new(Utf8State {",
          "        compiled: Utf8BoundedMap::default(),",
          "        uncompiled: Vec::new(),",
          "    });",
          "    let trie_state = RefCell::new(RangeTrie::default());",
          "    let utf8_suffix = RefCell::new(Utf8SuffixMap {",
          "        version: 0,",
          "        capacity: 0,",
          "        map: Vec::new(),",
          "    });",
          "",
          "    let compiler = Compiler {",
          "        parser,",
          "        config,",
          "        builder,",
          "        utf8_state,",
          "        trie_state,",
          "        utf8_suffix,",
          "    };",
          "",
          "    let index = 0;",
          "    let name = Some(\"example_capture\");",
          "    let expr = &Hir::Class(hir::Class::Bytes(hir::ClassBytes::new(vec![b'a', b'b'])));",
          "",
          "    let result = compiler.c_cap(index, name, expr);",
          "    assert_eq!(compiler.config.get_which_captures(), WhichCaptures::All);",
          "    assert!(compiler.add_capture_start(index, name).is_ok());",
          "    assert!(compiler.c(expr).is_ok());",
          "    assert!(compiler.add_capture_end(index).is_ok());",
          "    assert!(compiler.patch(start, inner.start).is_ok());",
          "    assert!(compiler.patch(inner.end, end).is_ok());",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert!(thompson_ref.start.is_valid());",
          "    assert!(thompson_ref.end.is_valid());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]