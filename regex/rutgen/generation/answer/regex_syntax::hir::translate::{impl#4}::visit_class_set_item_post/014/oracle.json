[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockTranslator {",
          "        flags: Flags,",
          "        stack: RefCell<Vec<HirFrame>>,",
          "    }",
          "",
          "    impl MockTranslator {",
          "        fn new() -> Self {",
          "            Self {",
          "                flags: Flags { unicode: Some(false), ..Default::default() },",
          "                stack: RefCell::new(Vec::new()),",
          "            }",
          "        }",
          "",
          "        fn pop(&self) -> Option<HirFrame> {",
          "            self.stack.borrow_mut().pop()",
          "        }",
          "",
          "        fn push(&self, frame: HirFrame) {",
          "            self.stack.borrow_mut().push(frame);",
          "        }",
          "",
          "        fn flags(&self) -> &Flags {",
          "            &self.flags",
          "        }",
          "",
          "        fn hir_ascii_byte_class(&self, _x: &ast::ClassAscii) -> Result<hir::ClassBytes, Error> {",
          "            Err(Error::PropertyNotFound)",
          "        }",
          "    }",
          "",
          "    let translator = MockTranslator::new();",
          "    let mut visitor = TranslatorI::new(&translator, \"\");",
          "    ",
          "    let ast = ast::ClassSetItem::Ascii(ast::ClassAscii { kind: ast::ClassAsciiKind::Digit, span: Span { start: Position(0), end: Position(0) } });",
          "",
          "    visitor.push(HirFrame::ClassBytes(hir::ClassBytes::new(vec![])));",
          "",
          "    let _ = visitor.visit_class_set_item_post(&ast);",
          "}"
        ],
        "oracle": [
          "    assert!(visitor.pop().is_some());",
          "    assert_eq!(visitor.stack.borrow().len(), 1);",
          "    assert!(matches!(visitor.pop().unwrap(), HirFrame::ClassBytes(_)));",
          "    assert!(visitor.stack.borrow().is_empty());",
          "    assert_eq!(translator.stack.borrow().len(), 1);",
          "    assert!(matches!(translator.pop(), None));",
          "    assert_eq!(translator.flags.unicode, Some(false));"
        ],
        "code": [
          "{",
          "    struct MockTranslator {",
          "        flags: Flags,",
          "        stack: RefCell<Vec<HirFrame>>,",
          "    }",
          "",
          "    impl MockTranslator {",
          "        fn new() -> Self {",
          "            Self {",
          "                flags: Flags { unicode: Some(false), ..Default::default() },",
          "                stack: RefCell::new(Vec::new()),",
          "            }",
          "        }",
          "",
          "        fn pop(&self) -> Option<HirFrame> {",
          "            self.stack.borrow_mut().pop()",
          "        }",
          "",
          "        fn push(&self, frame: HirFrame) {",
          "            self.stack.borrow_mut().push(frame);",
          "        }",
          "",
          "        fn flags(&self) -> &Flags {",
          "            &self.flags",
          "        }",
          "",
          "        fn hir_ascii_byte_class(&self, _x: &ast::ClassAscii) -> Result<hir::ClassBytes, Error> {",
          "            Err(Error::PropertyNotFound)",
          "        }",
          "    }",
          "",
          "    let translator = MockTranslator::new();",
          "    let mut visitor = TranslatorI::new(&translator, \"\");",
          "    ",
          "    let ast = ast::ClassSetItem::Ascii(ast::ClassAscii { kind: ast::ClassAsciiKind::Digit, span: Span { start: Position(0), end: Position(0) } });",
          "",
          "    visitor.push(HirFrame::ClassBytes(hir::ClassBytes::new(vec![])));",
          "",
          "    let _ = visitor.visit_class_set_item_post(&ast);",
          "    assert!(visitor.pop().is_some());",
          "    assert_eq!(visitor.stack.borrow().len(), 1);",
          "    assert!(matches!(visitor.pop().unwrap(), HirFrame::ClassBytes(_)));",
          "    assert!(visitor.stack.borrow().is_empty());",
          "    assert_eq!(translator.stack.borrow().len(), 1);",
          "    assert!(matches!(translator.pop(), None));",
          "    assert_eq!(translator.flags.unicode, Some(false));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]