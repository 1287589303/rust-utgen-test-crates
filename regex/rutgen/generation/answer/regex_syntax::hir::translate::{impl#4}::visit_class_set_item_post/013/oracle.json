[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        translator: Translator,",
          "    }",
          "",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(true),",
          "            ..Flags::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let mut visitor = TestVisitor { translator };",
          "",
          "    let ast = ast::ClassSetItem::Ascii(ast::ClassAscii {",
          "        span: Span {",
          "            start: Position(0),",
          "            end: Position(1),",
          "        },",
          "        kind: ast::ClassAsciiKind::Alpha,",
          "        negated: false,",
          "    });",
          "",
          "    visitor.translator.stack.borrow_mut().push(HirFrame::ClassUnicode(hir::ClassUnicode::new(vec![])));",
          "",
          "    let result = visitor.translator.visit_class_set_item_post(&ast);",
          "    result.unwrap();",
          "}"
        ],
        "oracle": [
          "    let mut visitor = TestVisitor { translator };",
          "    let ast = ast::ClassSetItem::Ascii(ast::ClassAscii {",
          "    span: Span {",
          "    start: Position(0),",
          "    end: Position(1),",
          "    },",
          "    kind: ast::ClassAsciiKind::Alpha,",
          "    negated: false,",
          "    });",
          "    visitor.translator.stack.borrow_mut().push(HirFrame::ClassUnicode(hir::ClassUnicode::new(vec![])));",
          "    let result = visitor.translator.visit_class_set_item_post(&ast);",
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        translator: Translator,",
          "    }",
          "",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(true),",
          "            ..Flags::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let mut visitor = TestVisitor { translator };",
          "",
          "    let ast = ast::ClassSetItem::Ascii(ast::ClassAscii {",
          "        span: Span {",
          "            start: Position(0),",
          "            end: Position(1),",
          "        },",
          "        kind: ast::ClassAsciiKind::Alpha,",
          "        negated: false,",
          "    });",
          "",
          "    visitor.translator.stack.borrow_mut().push(HirFrame::ClassUnicode(hir::ClassUnicode::new(vec![])));",
          "",
          "    let result = visitor.translator.visit_class_set_item_post(&ast);",
          "    result.unwrap();",
          "    let mut visitor = TestVisitor { translator };",
          "    let ast = ast::ClassSetItem::Ascii(ast::ClassAscii {",
          "    span: Span {",
          "    start: Position(0),",
          "    end: Position(1),",
          "    },",
          "    kind: ast::ClassAsciiKind::Alpha,",
          "    negated: false,",
          "    });",
          "    visitor.translator.stack.borrow_mut().push(HirFrame::ClassUnicode(hir::ClassUnicode::new(vec![])));",
          "    let result = visitor.translator.visit_class_set_item_post(&ast);",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        translator: Translator,",
          "    }",
          "",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(true),",
          "            ..Flags::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let mut visitor = TestVisitor { translator };",
          "",
          "    let ast = ast::ClassSetItem::Ascii(ast::ClassAscii {",
          "        span: Span {",
          "            start: Position(0),",
          "            end: Position(1),",
          "        },",
          "        kind: ast::ClassAsciiKind::Digit,",
          "        negated: false,",
          "    });",
          "",
          "    visitor.translator.stack.borrow_mut().push(HirFrame::ClassUnicode(hir::ClassUnicode::new(vec![])));",
          "",
          "    let result = visitor.translator.visit_class_set_item_post(&ast);",
          "    result.unwrap();",
          "}"
        ],
        "oracle": [
          "    visitor.translator.flags.set(Flags { unicode: Some(true), ..Flags::default() });",
          "    let ast = ast::ClassSetItem::Ascii(ast::ClassAscii {",
          "    span: Span { start: Position(0), end: Position(1) },",
          "    kind: ast::ClassAsciiKind::Digit,",
          "    negated: false,",
          "    });",
          "    assert_eq!(visitor.translator.visit_class_set_item_post(&ast), Ok(()));",
          "    let frame = visitor.translator.stack.borrow().last().unwrap();",
          "    assert!(matches!(frame, HirFrame::ClassUnicode(_)));",
          "    let cls = if let HirFrame::ClassUnicode(c) = frame { c } else { panic!() };",
          "    assert!(!cls.is_empty());"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        translator: Translator,",
          "    }",
          "",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(true),",
          "            ..Flags::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let mut visitor = TestVisitor { translator };",
          "",
          "    let ast = ast::ClassSetItem::Ascii(ast::ClassAscii {",
          "        span: Span {",
          "            start: Position(0),",
          "            end: Position(1),",
          "        },",
          "        kind: ast::ClassAsciiKind::Digit,",
          "        negated: false,",
          "    });",
          "",
          "    visitor.translator.stack.borrow_mut().push(HirFrame::ClassUnicode(hir::ClassUnicode::new(vec![])));",
          "",
          "    let result = visitor.translator.visit_class_set_item_post(&ast);",
          "    result.unwrap();",
          "    visitor.translator.flags.set(Flags { unicode: Some(true), ..Flags::default() });",
          "    let ast = ast::ClassSetItem::Ascii(ast::ClassAscii {",
          "    span: Span { start: Position(0), end: Position(1) },",
          "    kind: ast::ClassAsciiKind::Digit,",
          "    negated: false,",
          "    });",
          "    assert_eq!(visitor.translator.visit_class_set_item_post(&ast), Ok(()));",
          "    let frame = visitor.translator.stack.borrow().last().unwrap();",
          "    assert!(matches!(frame, HirFrame::ClassUnicode(_)));",
          "    let cls = if let HirFrame::ClassUnicode(c) = frame { c } else { panic!() };",
          "    assert!(!cls.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]