[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(true),",
          "            ..Flags::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let class_set_item = ast::ClassSetItem::Literal(Literal {",
          "        span: Span {",
          "            start: Position::default(),",
          "            end: Position::default(),",
          "        },",
          "        kind: LiteralKind::Character,",
          "        c: 'a',",
          "    });",
          "",
          "    let mut visitor = TranslatorI::new(&translator, \"\");",
          "",
          "    visitor.push(HirFrame::ClassUnicode(ClassUnicode::empty()));",
          "",
          "    let result = visitor.visit_class_set_item_post(&class_set_item);",
          "",
          "    assert!(result.is_ok());",
          "}"
        ],
        "oracle": [
          "    visitor.flags().unicode() == true",
          "    visitor.pop().unwrap().unwrap_class_unicode().ranges().len() == 1",
          "    visitor.pop().unwrap().unwrap_class_unicode().ranges()[0].start() == 'a'",
          "    visitor.pop().unwrap().unwrap_class_unicode().ranges()[0].end() == 'a'"
        ],
        "code": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(true),",
          "            ..Flags::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let class_set_item = ast::ClassSetItem::Literal(Literal {",
          "        span: Span {",
          "            start: Position::default(),",
          "            end: Position::default(),",
          "        },",
          "        kind: LiteralKind::Character,",
          "        c: 'a',",
          "    });",
          "",
          "    let mut visitor = TranslatorI::new(&translator, \"\");",
          "",
          "    visitor.push(HirFrame::ClassUnicode(ClassUnicode::empty()));",
          "",
          "    let result = visitor.visit_class_set_item_post(&class_set_item);",
          "",
          "    assert!(result.is_ok());",
          "    visitor.flags().unicode() == true",
          "    visitor.pop().unwrap().unwrap_class_unicode().ranges().len() == 1",
          "    visitor.pop().unwrap().unwrap_class_unicode().ranges()[0].start() == 'a'",
          "    visitor.pop().unwrap().unwrap_class_unicode().ranges()[0].end() == 'a'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(true),",
          "            ..Flags::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let class_set_item = ast::ClassSetItem::Literal(Literal {",
          "        span: Span {",
          "            start: Position::default(),",
          "            end: Position::default(),",
          "        },",
          "        kind: LiteralKind::Character,",
          "        c: 'b',",
          "    });",
          "",
          "    let mut visitor = TranslatorI::new(&translator, \"\");",
          "",
          "    visitor.push(HirFrame::ClassUnicode(ClassUnicode::empty()));",
          "",
          "    let result = visitor.visit_class_set_item_post(&class_set_item);",
          "",
          "    assert!(result.is_ok());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.pop().unwrap().unwrap_class_unicode().ranges(), vec![ClassUnicodeRange::new('b', 'b')]);",
          "    assert!(visitor.pop().is_none());",
          "    assert!(visitor.flags().unicode());",
          "    assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(true),",
          "            ..Flags::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let class_set_item = ast::ClassSetItem::Literal(Literal {",
          "        span: Span {",
          "            start: Position::default(),",
          "            end: Position::default(),",
          "        },",
          "        kind: LiteralKind::Character,",
          "        c: 'b',",
          "    });",
          "",
          "    let mut visitor = TranslatorI::new(&translator, \"\");",
          "",
          "    visitor.push(HirFrame::ClassUnicode(ClassUnicode::empty()));",
          "",
          "    let result = visitor.visit_class_set_item_post(&class_set_item);",
          "",
          "    assert!(result.is_ok());",
          "    assert_eq!(visitor.pop().unwrap().unwrap_class_unicode().ranges(), vec![ClassUnicodeRange::new('b', 'b')]);",
          "    assert!(visitor.pop().is_none());",
          "    assert!(visitor.flags().unicode());",
          "    assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(true),",
          "            ..Flags::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let class_set_item = ast::ClassSetItem::Literal(Literal {",
          "        span: Span {",
          "            start: Position::default(),",
          "            end: Position::default(),",
          "        },",
          "        kind: LiteralKind::Character,",
          "        c: 'z',",
          "    });",
          "",
          "    let mut visitor = TranslatorI::new(&translator, \"\");",
          "",
          "    visitor.push(HirFrame::ClassUnicode(ClassUnicode::empty()));",
          "",
          "    let result = visitor.visit_class_set_item_post(&class_set_item);",
          "",
          "    assert!(result.is_ok());",
          "}"
        ],
        "oracle": [
          "    visitor.flags().unicode();",
          "    visitor.visit_class_set_item_post(&class_set_item);",
          "    let mut cls = visitor.pop().unwrap().unwrap_class_unicode();",
          "    cls.push(hir::ClassUnicodeRange::new('z', 'z'));",
          "    visitor.push(HirFrame::ClassUnicode(cls));",
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(true),",
          "            ..Flags::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let class_set_item = ast::ClassSetItem::Literal(Literal {",
          "        span: Span {",
          "            start: Position::default(),",
          "            end: Position::default(),",
          "        },",
          "        kind: LiteralKind::Character,",
          "        c: 'z',",
          "    });",
          "",
          "    let mut visitor = TranslatorI::new(&translator, \"\");",
          "",
          "    visitor.push(HirFrame::ClassUnicode(ClassUnicode::empty()));",
          "",
          "    let result = visitor.visit_class_set_item_post(&class_set_item);",
          "",
          "    assert!(result.is_ok());",
          "    visitor.flags().unicode();",
          "    visitor.visit_class_set_item_post(&class_set_item);",
          "    let mut cls = visitor.pop().unwrap().unwrap_class_unicode();",
          "    cls.push(hir::ClassUnicodeRange::new('z', 'z'));",
          "    visitor.push(HirFrame::ClassUnicode(cls));",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]