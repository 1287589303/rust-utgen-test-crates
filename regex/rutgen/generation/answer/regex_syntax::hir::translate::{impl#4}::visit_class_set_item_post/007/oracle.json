[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ast = ast::ClassSetItem::Perl(ast::ClassPerl {",
          "        span: Span { start: Position::default(), end: Position::default() },",
          "        kind: ast::ClassPerlKind::Digit,",
          "        negated: false,",
          "    });",
          "",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags { unicode: Some(true), ..Flags::default() }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let mut visitor = TranslatorI::new(&translator, \"pattern\");",
          "    ",
          "    let _ = visitor.visit_class_set_item_post(&ast);",
          "}"
        ],
        "oracle": [
          "    let ast = ast::ClassSetItem::Perl(ast::ClassPerl { span: Span { start: Position::default(), end: Position::default() }, kind: ast::ClassPerlKind::Digit, negated: false });",
          "    let translator = Translator { stack: RefCell::new(vec![]), flags: Cell::new(Flags { unicode: Some(true), ..Flags::default() }), utf8: true, line_terminator: b'\\n' };",
          "    let mut visitor = TranslatorI::new(&translator, \"pattern\");",
          "    let result = visitor.visit_class_set_item_post(&ast);",
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    let ast = ast::ClassSetItem::Perl(ast::ClassPerl {",
          "        span: Span { start: Position::default(), end: Position::default() },",
          "        kind: ast::ClassPerlKind::Digit,",
          "        negated: false,",
          "    });",
          "",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags { unicode: Some(true), ..Flags::default() }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let mut visitor = TranslatorI::new(&translator, \"pattern\");",
          "    ",
          "    let _ = visitor.visit_class_set_item_post(&ast);",
          "    let ast = ast::ClassSetItem::Perl(ast::ClassPerl { span: Span { start: Position::default(), end: Position::default() }, kind: ast::ClassPerlKind::Digit, negated: false });",
          "    let translator = Translator { stack: RefCell::new(vec![]), flags: Cell::new(Flags { unicode: Some(true), ..Flags::default() }), utf8: true, line_terminator: b'\\n' };",
          "    let mut visitor = TranslatorI::new(&translator, \"pattern\");",
          "    let result = visitor.visit_class_set_item_post(&ast);",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ast = ast::ClassSetItem::Perl(ast::ClassPerl {",
          "        span: Span { start: Position::default(), end: Position::default() },",
          "        kind: ast::ClassPerlKind::Word,",
          "        negated: true,",
          "    });",
          "",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags { unicode: Some(true), ..Flags::default() }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let mut visitor = TranslatorI::new(&translator, \"pattern\");",
          "    ",
          "    let _ = visitor.visit_class_set_item_post(&ast);",
          "}"
        ],
        "oracle": [
          "    self.flags().unicode() == true",
          "    self.hir_perl_unicode_class(x).is_ok()",
          "    visitor.pop().unwrap().unwrap_class_unicode().union(xcls);",
          "    visitor.push(HirFrame::ClassUnicode(cls));",
          "    Ok(())"
        ],
        "code": [
          "{",
          "    let ast = ast::ClassSetItem::Perl(ast::ClassPerl {",
          "        span: Span { start: Position::default(), end: Position::default() },",
          "        kind: ast::ClassPerlKind::Word,",
          "        negated: true,",
          "    });",
          "",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags { unicode: Some(true), ..Flags::default() }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let mut visitor = TranslatorI::new(&translator, \"pattern\");",
          "    ",
          "    let _ = visitor.visit_class_set_item_post(&ast);",
          "    self.flags().unicode() == true",
          "    self.hir_perl_unicode_class(x).is_ok()",
          "    visitor.pop().unwrap().unwrap_class_unicode().union(xcls);",
          "    visitor.push(HirFrame::ClassUnicode(cls));",
          "    Ok(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ast = ast::ClassSetItem::Perl(ast::ClassPerl {",
          "        span: Span { start: Position::default(), end: Position::default() },",
          "        kind: ast::ClassPerlKind::Space,",
          "        negated: false,",
          "    });",
          "",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags { unicode: Some(true), ..Flags::default() }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let mut visitor = TranslatorI::new(&translator, \"pattern\");",
          "    ",
          "    let _ = visitor.visit_class_set_item_post(&ast);",
          "}"
        ],
        "oracle": [
          "    let ast = ast::ClassSetItem::Perl(ast::ClassPerl { span: Span { start: Position::default(), end: Position::default() }, kind: ast::ClassPerlKind::Space, negated: false });",
          "    let translator = Translator { stack: RefCell::new(vec![]), flags: Cell::new(Flags { unicode: Some(true), ..Flags::default() }), utf8: true, line_terminator: b'\\n' };",
          "    let mut visitor = TranslatorI::new(&translator, \"pattern\");",
          "    let result = visitor.visit_class_set_item_post(&ast);",
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    let ast = ast::ClassSetItem::Perl(ast::ClassPerl {",
          "        span: Span { start: Position::default(), end: Position::default() },",
          "        kind: ast::ClassPerlKind::Space,",
          "        negated: false,",
          "    });",
          "",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags { unicode: Some(true), ..Flags::default() }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let mut visitor = TranslatorI::new(&translator, \"pattern\");",
          "    ",
          "    let _ = visitor.visit_class_set_item_post(&ast);",
          "    let ast = ast::ClassSetItem::Perl(ast::ClassPerl { span: Span { start: Position::default(), end: Position::default() }, kind: ast::ClassPerlKind::Space, negated: false });",
          "    let translator = Translator { stack: RefCell::new(vec![]), flags: Cell::new(Flags { unicode: Some(true), ..Flags::default() }), utf8: true, line_terminator: b'\\n' };",
          "    let mut visitor = TranslatorI::new(&translator, \"pattern\");",
          "    let result = visitor.visit_class_set_item_post(&ast);",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]