[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(Vec::new()),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    ",
          "    let mut visitor = TranslatorI::new(&translator, \".*\");",
          "    let ast_union = ast::ClassSetItem::Union(ast::ClassSetUnion::empty());",
          "",
          "    visitor.visit_class_set_item_post(&ast_union).unwrap();",
          "}"
        ],
        "oracle": [
          "    visitor.visit_class_set_item_post(&ast_union).unwrap();",
          "    assert_eq!(visitor.trans().stack.borrow().len(), 0);"
        ],
        "code": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(Vec::new()),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    ",
          "    let mut visitor = TranslatorI::new(&translator, \".*\");",
          "    let ast_union = ast::ClassSetItem::Union(ast::ClassSetUnion::empty());",
          "",
          "    visitor.visit_class_set_item_post(&ast_union).unwrap();",
          "    visitor.visit_class_set_item_post(&ast_union).unwrap();",
          "    assert_eq!(visitor.trans().stack.borrow().len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(Vec::new()),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let mut visitor = TranslatorI::new(&translator, \".*\");",
          "    let lit_1 = Literal { span: Span { start: Position::default(), end: Position::default() }, kind: LiteralKind::Character, c: 'a' };",
          "    let lit_2 = Literal { span: Span { start: Position::default(), end: Position::default() }, kind: LiteralKind::Character, c: 'b' };",
          "",
          "    let class_set_item = ast::ClassSetItem::Union(ast::ClassSetUnion::new(vec![",
          "        ast::ClassSetItem::Literal(lit_1),",
          "        ast::ClassSetItem::Literal(lit_2),",
          "    ]));",
          "",
          "    visitor.visit_class_set_item_post(&class_set_item).unwrap();",
          "}"
        ],
        "oracle": [
          "    visitor.visit_class_set_item_post(&ast::ClassSetItem::Union(vec![ast::ClassSetItem::Literal(lit_1), ast::ClassSetItem::Literal(lit_2)])).unwrap();",
          "    assert_eq!(visitor.trans().stack.borrow().len(), 0);",
          "    assert!(visitor.pop().is_none());",
          "    assert!(visitor.flags().unicode());",
          "    assert!(matches!(visitor.trans().stack.borrow()[..], []));",
          "    assert_eq!(visitor.visit_class_set_item_post(&class_set_item), Ok(()));"
        ],
        "code": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(Vec::new()),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let mut visitor = TranslatorI::new(&translator, \".*\");",
          "    let lit_1 = Literal { span: Span { start: Position::default(), end: Position::default() }, kind: LiteralKind::Character, c: 'a' };",
          "    let lit_2 = Literal { span: Span { start: Position::default(), end: Position::default() }, kind: LiteralKind::Character, c: 'b' };",
          "",
          "    let class_set_item = ast::ClassSetItem::Union(ast::ClassSetUnion::new(vec![",
          "        ast::ClassSetItem::Literal(lit_1),",
          "        ast::ClassSetItem::Literal(lit_2),",
          "    ]));",
          "",
          "    visitor.visit_class_set_item_post(&class_set_item).unwrap();",
          "    visitor.visit_class_set_item_post(&ast::ClassSetItem::Union(vec![ast::ClassSetItem::Literal(lit_1), ast::ClassSetItem::Literal(lit_2)])).unwrap();",
          "    assert_eq!(visitor.trans().stack.borrow().len(), 0);",
          "    assert!(visitor.pop().is_none());",
          "    assert!(visitor.flags().unicode());",
          "    assert!(matches!(visitor.trans().stack.borrow()[..], []));",
          "    assert_eq!(visitor.visit_class_set_item_post(&class_set_item), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]