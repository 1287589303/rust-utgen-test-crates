[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags { unicode: Some(true), ..Default::default() }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    ",
          "    // Create a unicode range `A` to `Z`",
          "    let start_literal = Literal {",
          "        span: Span { start: Position(0), end: Position(1) },",
          "        kind: LiteralKind::Char,",
          "        c: 'A',",
          "    };",
          "    ",
          "    let end_literal = Literal {",
          "        span: Span { start: Position(1), end: Position(2) },",
          "        kind: LiteralKind::Char,",
          "        c: 'Z',",
          "    };",
          "    ",
          "    let class_set_item_range = ast::ClassSetItem::Range(ClassSetRange {",
          "        span: Span { start: Position(0), end: Position(2) },",
          "        start: start_literal,",
          "        end: end_literal,",
          "    });",
          "    ",
          "    // Push two elements to the stack",
          "    translator.stack.borrow_mut().push(HirFrame::ClassUnicode(ClassUnicode::new(vec![])));",
          "    translator.stack.borrow_mut().push(HirFrame::ClassUnicode(ClassUnicode::new(vec![])));",
          "    ",
          "    let visitor = TranslatorI::new(&translator, \"pattern\");",
          "    ",
          "    visitor.visit_class_set_item_post(&class_set_item_range).unwrap();",
          "}"
        ],
        "oracle": [
          "    visitor.flags().unicode() == true",
          "    visitor.pop().unwrap().unwrap_class_unicode().ranges().len() == 1",
          "    visitor.pop().unwrap().unwrap_class_unicode().ranges()[0].start() == 'A'",
          "    visitor.pop().unwrap().unwrap_class_unicode().ranges()[0].end() == 'Z'",
          "    Ok(()) == visitor.visit_class_set_item_post(&class_set_item_range)"
        ],
        "code": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags { unicode: Some(true), ..Default::default() }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    ",
          "    // Create a unicode range `A` to `Z`",
          "    let start_literal = Literal {",
          "        span: Span { start: Position(0), end: Position(1) },",
          "        kind: LiteralKind::Char,",
          "        c: 'A',",
          "    };",
          "    ",
          "    let end_literal = Literal {",
          "        span: Span { start: Position(1), end: Position(2) },",
          "        kind: LiteralKind::Char,",
          "        c: 'Z',",
          "    };",
          "    ",
          "    let class_set_item_range = ast::ClassSetItem::Range(ClassSetRange {",
          "        span: Span { start: Position(0), end: Position(2) },",
          "        start: start_literal,",
          "        end: end_literal,",
          "    });",
          "    ",
          "    // Push two elements to the stack",
          "    translator.stack.borrow_mut().push(HirFrame::ClassUnicode(ClassUnicode::new(vec![])));",
          "    translator.stack.borrow_mut().push(HirFrame::ClassUnicode(ClassUnicode::new(vec![])));",
          "    ",
          "    let visitor = TranslatorI::new(&translator, \"pattern\");",
          "    ",
          "    visitor.visit_class_set_item_post(&class_set_item_range).unwrap();",
          "    visitor.flags().unicode() == true",
          "    visitor.pop().unwrap().unwrap_class_unicode().ranges().len() == 1",
          "    visitor.pop().unwrap().unwrap_class_unicode().ranges()[0].start() == 'A'",
          "    visitor.pop().unwrap().unwrap_class_unicode().ranges()[0].end() == 'Z'",
          "    Ok(()) == visitor.visit_class_set_item_post(&class_set_item_range)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]