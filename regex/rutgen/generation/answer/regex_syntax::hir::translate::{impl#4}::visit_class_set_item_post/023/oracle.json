[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    ",
          "    let pattern = \"\";",
          "    let mut visitor = TranslatorI::new(&translator, pattern);",
          "    ",
          "    let span = Span { start: 0, end: 0 };",
          "    let empty_class_set_item = ast::ClassSetItem::Empty(span);",
          "    ",
          "    visitor.visit_class_set_item_post(&empty_class_set_item).unwrap();",
          "}"
        ],
        "oracle": [
          "    visitor.visit_class_set_item_post(&empty_class_set_item).unwrap();",
          "    assert!(visitor.trans().stack.borrow().is_empty());",
          "    assert_eq!(visitor.finish().unwrap(), Ok(()));"
        ],
        "code": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    ",
          "    let pattern = \"\";",
          "    let mut visitor = TranslatorI::new(&translator, pattern);",
          "    ",
          "    let span = Span { start: 0, end: 0 };",
          "    let empty_class_set_item = ast::ClassSetItem::Empty(span);",
          "    ",
          "    visitor.visit_class_set_item_post(&empty_class_set_item).unwrap();",
          "    visitor.visit_class_set_item_post(&empty_class_set_item).unwrap();",
          "    assert!(visitor.trans().stack.borrow().is_empty());",
          "    assert_eq!(visitor.finish().unwrap(), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]