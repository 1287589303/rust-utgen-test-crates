[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transitions = Transitions {",
          "        sparse: vec![0u8; 20],",
          "        classes: ByteClasses::empty(),",
          "        state_len: 5,",
          "        pattern_len: 3,",
          "    };",
          "",
          "    let nwrite = transitions.write_to_len();",
          "    let mut dst = vec![0u8; nwrite];",
          "",
          "    let result = transitions.write_to::<Endian>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(nwrite));",
          "    assert_eq!(dst.len(), nwrite);",
          "    assert!(dst.iter().all(|&x| x == 0));",
          "    assert!(transitions.classes.write_to(&mut dst).is_ok());",
          "    assert_eq!(transitions.state_len, 5);",
          "    assert_eq!(transitions.pattern_len, 3);",
          "    assert_eq!(transitions.sparse.len(), 20);"
        ],
        "code": [
          "{",
          "    let transitions = Transitions {",
          "        sparse: vec![0u8; 20],",
          "        classes: ByteClasses::empty(),",
          "        state_len: 5,",
          "        pattern_len: 3,",
          "    };",
          "",
          "    let nwrite = transitions.write_to_len();",
          "    let mut dst = vec![0u8; nwrite];",
          "",
          "    let result = transitions.write_to::<Endian>(&mut dst);",
          "    assert_eq!(result, Ok(nwrite));",
          "    assert_eq!(dst.len(), nwrite);",
          "    assert!(dst.iter().all(|&x| x == 0));",
          "    assert!(transitions.classes.write_to(&mut dst).is_ok());",
          "    assert_eq!(transitions.state_len, 5);",
          "    assert_eq!(transitions.pattern_len, 3);",
          "    assert_eq!(transitions.sparse.len(), 20);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct FailByteClasses;",
          "    impl ByteClasses {",
          "        pub fn write_to(&self, _: &mut [u8]) -> Result<usize, SerializeError> {",
          "            Err(SerializeError::buffer_too_small(\"byte class map\"))",
          "        }",
          "    }",
          "",
          "    let transitions = Transitions {",
          "        sparse: vec![0u8; 20],",
          "        classes: FailByteClasses,",
          "        state_len: 5,",
          "        pattern_len: 3,",
          "    };",
          "",
          "    let nwrite = transitions.write_to_len();",
          "    let mut dst = vec![0u8; nwrite];",
          "",
          "    let result = transitions.write_to::<Endian>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));",
          "    assert_eq!(dst.len(), nwrite);",
          "    assert_eq!(transitions.state_len, 5);",
          "    assert_eq!(transitions.pattern_len, 3);",
          "    assert_eq!(transitions.sparse.len(), 20);",
          "    assert!(dst.iter().all(|&b| b == 0));"
        ],
        "code": [
          "{",
          "    struct FailByteClasses;",
          "    impl ByteClasses {",
          "        pub fn write_to(&self, _: &mut [u8]) -> Result<usize, SerializeError> {",
          "            Err(SerializeError::buffer_too_small(\"byte class map\"))",
          "        }",
          "    }",
          "",
          "    let transitions = Transitions {",
          "        sparse: vec![0u8; 20],",
          "        classes: FailByteClasses,",
          "        state_len: 5,",
          "        pattern_len: 3,",
          "    };",
          "",
          "    let nwrite = transitions.write_to_len();",
          "    let mut dst = vec![0u8; nwrite];",
          "",
          "    let result = transitions.write_to::<Endian>(&mut dst);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));",
          "    assert_eq!(dst.len(), nwrite);",
          "    assert_eq!(transitions.state_len, 5);",
          "    assert_eq!(transitions.pattern_len, 3);",
          "    assert_eq!(transitions.sparse.len(), 20);",
          "    assert!(dst.iter().all(|&b| b == 0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]