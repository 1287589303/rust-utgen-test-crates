[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Clone)]",
          "    struct TestEndian;",
          "    impl Endian for TestEndian {",
          "        fn write_u32(_: u32, dst: &mut [u8]) {",
          "            dst[0..4].copy_from_slice(&u32::to_le_bytes(_) );",
          "        }",
          "    }",
          "",
          "    let sparse_data: &[u8] = &[0u8; 64]; // example byte slice",
          "    let classes = ByteClasses::singletons();",
          "    let transitions = Transitions {",
          "        sparse: sparse_data,",
          "        classes,",
          "        state_len: 4,",
          "        pattern_len: 2,",
          "    };",
          "",
          "    let mut buffer = vec![0u8; transitions.write_to_len()];",
          "    let result = transitions.write_to::<TestEndian>(&mut buffer).unwrap();",
          "    ",
          "    assert_eq!(result, buffer.len());",
          "}"
        ],
        "oracle": [
          "    assert!(buffer.len() == transitions.write_to_len());",
          "    assert!(transitions.classes.write_to(&mut buffer[4..]).is_ok());",
          "    assert!(transitions.sparse.len() > 0);",
          "    assert!(transitions.state(StateID(0)).write_to::<TestEndian>(&mut buffer[8..]).is_ok());",
          "    assert!(transitions.state(StateID(transitions.sparse.len() as usize - 1)).write_to::<TestEndian>(&mut buffer[buffer.len() - 4..]).is_ok());",
          "    assert_eq!(transitions.write_to::<TestEndian>(&mut buffer).unwrap(), transitions.write_to_len());"
        ],
        "code": [
          "{",
          "    #[derive(Clone)]",
          "    struct TestEndian;",
          "    impl Endian for TestEndian {",
          "        fn write_u32(_: u32, dst: &mut [u8]) {",
          "            dst[0..4].copy_from_slice(&u32::to_le_bytes(_) );",
          "        }",
          "    }",
          "",
          "    let sparse_data: &[u8] = &[0u8; 64]; // example byte slice",
          "    let classes = ByteClasses::singletons();",
          "    let transitions = Transitions {",
          "        sparse: sparse_data,",
          "        classes,",
          "        state_len: 4,",
          "        pattern_len: 2,",
          "    };",
          "",
          "    let mut buffer = vec![0u8; transitions.write_to_len()];",
          "    let result = transitions.write_to::<TestEndian>(&mut buffer).unwrap();",
          "    ",
          "    assert_eq!(result, buffer.len());",
          "    assert!(buffer.len() == transitions.write_to_len());",
          "    assert!(transitions.classes.write_to(&mut buffer[4..]).is_ok());",
          "    assert!(transitions.sparse.len() > 0);",
          "    assert!(transitions.state(StateID(0)).write_to::<TestEndian>(&mut buffer[8..]).is_ok());",
          "    assert!(transitions.state(StateID(transitions.sparse.len() as usize - 1)).write_to::<TestEndian>(&mut buffer[buffer.len() - 4..]).is_ok());",
          "    assert_eq!(transitions.write_to::<TestEndian>(&mut buffer).unwrap(), transitions.write_to_len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Clone)]",
          "    struct TestEndian;",
          "    impl Endian for TestEndian {",
          "        fn write_u32(_: u32, dst: &mut [u8]) {",
          "            dst[0..4].copy_from_slice(&u32::to_le_bytes(_) );",
          "        }",
          "    }",
          "",
          "    let sparse_data: &[u8] = &[0u8; 64]; // example byte slice",
          "    let classes = ByteClasses::singletons();",
          "    let transitions = Transitions {",
          "        sparse: sparse_data,",
          "        classes,",
          "        state_len: 4,",
          "        pattern_len: 2,",
          "    };",
          "",
          "    let mut buffer = vec![0u8; transitions.write_to_len()];",
          "    let result = transitions.write_to::<TestEndian>(&mut buffer).unwrap();",
          "",
          "    assert_eq!(result, buffer.len());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer.len(), transitions.write_to_len());",
          "    assert!(result.is_ok());",
          "    assert!(self.classes.write_to(&mut buffer[4..]).is_ok());",
          "    assert!(id.as_usize() < transitions.sparse.len());",
          "    assert!(state.write_to::<E>(&mut buffer[dst.len()..]).is_ok());",
          "    assert_eq!(id.as_usize(), transitions.sparse.len());"
        ],
        "code": [
          "{",
          "    #[derive(Clone)]",
          "    struct TestEndian;",
          "    impl Endian for TestEndian {",
          "        fn write_u32(_: u32, dst: &mut [u8]) {",
          "            dst[0..4].copy_from_slice(&u32::to_le_bytes(_) );",
          "        }",
          "    }",
          "",
          "    let sparse_data: &[u8] = &[0u8; 64]; // example byte slice",
          "    let classes = ByteClasses::singletons();",
          "    let transitions = Transitions {",
          "        sparse: sparse_data,",
          "        classes,",
          "        state_len: 4,",
          "        pattern_len: 2,",
          "    };",
          "",
          "    let mut buffer = vec![0u8; transitions.write_to_len()];",
          "    let result = transitions.write_to::<TestEndian>(&mut buffer).unwrap();",
          "",
          "    assert_eq!(result, buffer.len());",
          "    assert_eq!(buffer.len(), transitions.write_to_len());",
          "    assert!(result.is_ok());",
          "    assert!(self.classes.write_to(&mut buffer[4..]).is_ok());",
          "    assert!(id.as_usize() < transitions.sparse.len());",
          "    assert!(state.write_to::<E>(&mut buffer[dst.len()..]).is_ok());",
          "    assert_eq!(id.as_usize(), transitions.sparse.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]