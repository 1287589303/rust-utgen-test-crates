[
  {
    "uses": [
      "use crate::dfa::dense::Flags;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::dfa::dense::Flags;",
          "",
          "    let transitions = Transitions {",
          "        sparse: vec![0; 10],",
          "        classes: ByteClasses::empty(),",
          "        state_len: 1,",
          "        pattern_len: 0,",
          "    };",
          "",
          "    let buffer_size = transitions.write_to_len() - 1; // One less than needed",
          "    let mut dst = vec![0; buffer_size];",
          "",
          "    let result = transitions.write_to::<Flags>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"sparse transition table\")));"
        ],
        "code": [
          "{",
          "    use crate::dfa::dense::Flags;",
          "",
          "    let transitions = Transitions {",
          "        sparse: vec![0; 10],",
          "        classes: ByteClasses::empty(),",
          "        state_len: 1,",
          "        pattern_len: 0,",
          "    };",
          "",
          "    let buffer_size = transitions.write_to_len() - 1; // One less than needed",
          "    let mut dst = vec![0; buffer_size];",
          "",
          "    let result = transitions.write_to::<Flags>(&mut dst);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"sparse transition table\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::dfa::dense::Flags;",
          "",
          "    let transitions = Transitions {",
          "        sparse: vec![0; 20],",
          "        classes: ByteClasses::empty(),",
          "        state_len: 5,",
          "        pattern_len: 2,",
          "    };",
          "",
          "    let buffer_size = transitions.write_to_len() - 1; // One less than needed",
          "    let mut dst = vec![0; buffer_size];",
          "",
          "    let result = transitions.write_to::<Flags>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"sparse transition table\")));"
        ],
        "code": [
          "{",
          "    use crate::dfa::dense::Flags;",
          "",
          "    let transitions = Transitions {",
          "        sparse: vec![0; 20],",
          "        classes: ByteClasses::empty(),",
          "        state_len: 5,",
          "        pattern_len: 2,",
          "    };",
          "",
          "    let buffer_size = transitions.write_to_len() - 1; // One less than needed",
          "    let mut dst = vec![0; buffer_size];",
          "",
          "    let result = transitions.write_to::<Flags>(&mut dst);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"sparse transition table\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::dfa::dense::Flags;",
          "",
          "    let transitions = Transitions {",
          "        sparse: vec![],",
          "        classes: ByteClasses::empty(),",
          "        state_len: 1,",
          "        pattern_len: 0,",
          "    };",
          "",
          "    let buffer_size = transitions.write_to_len() - 1; // One less than needed",
          "    let mut dst = vec![0; buffer_size];",
          "",
          "    let result = transitions.write_to::<Flags>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"sparse transition table\")));"
        ],
        "code": [
          "{",
          "    use crate::dfa::dense::Flags;",
          "",
          "    let transitions = Transitions {",
          "        sparse: vec![],",
          "        classes: ByteClasses::empty(),",
          "        state_len: 1,",
          "        pattern_len: 0,",
          "    };",
          "",
          "    let buffer_size = transitions.write_to_len() - 1; // One less than needed",
          "    let mut dst = vec![0; buffer_size];",
          "",
          "    let result = transitions.write_to::<Flags>(&mut dst);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"sparse transition table\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]