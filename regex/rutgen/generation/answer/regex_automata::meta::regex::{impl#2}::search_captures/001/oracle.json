[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let regex = Regex::new(r\"[a-z][a-z0-9]{5}\").unwrap();",
          "    let mut captures = Captures {",
          "        group_info: GroupInfo::default(),",
          "        pid: None,",
          "        slots: vec![Some(NonMaxUsize(NonZeroUsize::new(0).unwrap())); 2],",
          "    };",
          "    let haystack: &[u8] = b\"abc123\";",
          "    let input = Input {",
          "        haystack,",
          "        span: Span::new(0..6),",
          "        anchored: Anchored::No,",
          "        earliest: false,",
          "    };",
          "    regex.search_captures(&input, &mut captures);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(captures.pid.is_some(), true);",
          "    assert_eq!(captures.slots.len(), 2);",
          "    assert_eq!(captures.slots(), &[Some(NonMaxUsize(NonZeroUsize::new(0).unwrap())), None]);",
          "    assert_eq!(captures.slots_mut(), &mut [Some(NonMaxUsize(NonZeroUsize::new(0).unwrap())), None]);",
          "    assert_eq!(captures.slots().iter().filter(|&&x| x.is_some()).count(), 1);"
        ],
        "code": [
          "{",
          "    let regex = Regex::new(r\"[a-z][a-z0-9]{5}\").unwrap();",
          "    let mut captures = Captures {",
          "        group_info: GroupInfo::default(),",
          "        pid: None,",
          "        slots: vec![Some(NonMaxUsize(NonZeroUsize::new(0).unwrap())); 2],",
          "    };",
          "    let haystack: &[u8] = b\"abc123\";",
          "    let input = Input {",
          "        haystack,",
          "        span: Span::new(0..6),",
          "        anchored: Anchored::No,",
          "        earliest: false,",
          "    };",
          "    regex.search_captures(&input, &mut captures);",
          "    assert_eq!(captures.pid.is_some(), true);",
          "    assert_eq!(captures.slots.len(), 2);",
          "    assert_eq!(captures.slots(), &[Some(NonMaxUsize(NonZeroUsize::new(0).unwrap())), None]);",
          "    assert_eq!(captures.slots_mut(), &mut [Some(NonMaxUsize(NonZeroUsize::new(0).unwrap())), None]);",
          "    assert_eq!(captures.slots().iter().filter(|&&x| x.is_some()).count(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let regex = Regex::new(r\"[0-9]{3}\").unwrap();",
          "    let mut captures = Captures {",
          "        group_info: GroupInfo::default(),",
          "        pid: None,",
          "        slots: vec![None; 2],",
          "    };",
          "    let haystack: &[u8] = b\"abc\";",
          "    let input = Input {",
          "        haystack,",
          "        span: Span::new(0..3),",
          "        anchored: Anchored::No,",
          "        earliest: false,",
          "    };",
          "    regex.search_captures(&input, &mut captures);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(captures.pid, None);",
          "    assert!(captures.slots().iter().all(|slot| slot.is_none()));",
          "    assert_eq!(captures.slots.len(), 2);",
          "    assert_eq!(captures.slots()[0], None);",
          "    assert_eq!(captures.slots()[1], None);"
        ],
        "code": [
          "{",
          "    let regex = Regex::new(r\"[0-9]{3}\").unwrap();",
          "    let mut captures = Captures {",
          "        group_info: GroupInfo::default(),",
          "        pid: None,",
          "        slots: vec![None; 2],",
          "    };",
          "    let haystack: &[u8] = b\"abc\";",
          "    let input = Input {",
          "        haystack,",
          "        span: Span::new(0..3),",
          "        anchored: Anchored::No,",
          "        earliest: false,",
          "    };",
          "    regex.search_captures(&input, &mut captures);",
          "    assert_eq!(captures.pid, None);",
          "    assert!(captures.slots().iter().all(|slot| slot.is_none()));",
          "    assert_eq!(captures.slots.len(), 2);",
          "    assert_eq!(captures.slots()[0], None);",
          "    assert_eq!(captures.slots()[1], None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let regex = Regex::new(r\"foo[a-z]{3}\").unwrap();",
          "    let mut captures = Captures {",
          "        group_info: GroupInfo::default(),",
          "        pid: None,",
          "        slots: vec![Some(NonMaxUsize(NonZeroUsize::new(0).unwrap())); 2],",
          "    };",
          "    let haystack: &[u8] = b\"foobar\";",
          "    let input = Input {",
          "        haystack,",
          "        span: Span::new(0..6),",
          "        anchored: Anchored::Pattern(PatternID::must(0)),",
          "        earliest: false,",
          "    };",
          "    regex.search_captures(&input, &mut captures);",
          "}"
        ],
        "oracle": [
          "    let expected_pattern_id = Some(PatternID::must(0));",
          "    assert_eq!(expected_pattern_id, captures.pid);",
          "    let expected_slots = vec![Some(NonMaxUsize(NonZeroUsize::new(0).unwrap())), Some(NonMaxUsize(NonZeroUsize::new(3).unwrap()))];",
          "    assert_eq!(expected_slots, captures.slots());",
          "    assert!(captures.slots()[0].is_some());",
          "    assert!(captures.slots()[1].is_some());",
          "    let expected_match = Some(Match::must(0, 0..6));",
          "    assert_eq!(expected_match, captures.get_match());",
          "    assert!(captures.get_match().is_some());",
          "    captures.clear();",
          "    assert!(captures.pid.is_none());",
          "    assert_eq!(captures.slots(), &vec![None, None]);",
          "    assert!(!captures.is_match());"
        ],
        "code": [
          "{",
          "    let regex = Regex::new(r\"foo[a-z]{3}\").unwrap();",
          "    let mut captures = Captures {",
          "        group_info: GroupInfo::default(),",
          "        pid: None,",
          "        slots: vec![Some(NonMaxUsize(NonZeroUsize::new(0).unwrap())); 2],",
          "    };",
          "    let haystack: &[u8] = b\"foobar\";",
          "    let input = Input {",
          "        haystack,",
          "        span: Span::new(0..6),",
          "        anchored: Anchored::Pattern(PatternID::must(0)),",
          "        earliest: false,",
          "    };",
          "    regex.search_captures(&input, &mut captures);",
          "    let expected_pattern_id = Some(PatternID::must(0));",
          "    assert_eq!(expected_pattern_id, captures.pid);",
          "    let expected_slots = vec![Some(NonMaxUsize(NonZeroUsize::new(0).unwrap())), Some(NonMaxUsize(NonZeroUsize::new(3).unwrap()))];",
          "    assert_eq!(expected_slots, captures.slots());",
          "    assert!(captures.slots()[0].is_some());",
          "    assert!(captures.slots()[1].is_some());",
          "    let expected_match = Some(Match::must(0, 0..6));",
          "    assert_eq!(expected_match, captures.get_match());",
          "    assert!(captures.get_match().is_some());",
          "    captures.clear();",
          "    assert!(captures.pid.is_none());",
          "    assert_eq!(captures.slots(), &vec![None, None]);",
          "    assert!(!captures.is_match());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let regex = Regex::new(r\"[a-z]{3}\").unwrap();",
          "    let mut captures = Captures {",
          "        group_info: GroupInfo::default(),",
          "        pid: None,",
          "        slots: vec![None; 2],",
          "    };",
          "    let haystack: &[u8] = b\"\";",
          "    let input = Input {",
          "        haystack,",
          "        span: Span::new(0..0),",
          "        anchored: Anchored::No,",
          "        earliest: false,",
          "    };",
          "    regex.search_captures(&input, &mut captures);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(captures.pid, None);",
          "    assert_eq!(captures.slots(), &vec![None, None]);",
          "    assert!(!captures.is_match());",
          "    assert_eq!(captures.get_match(), None);",
          "    assert_eq!(regex.search_slots(&input, captures.slots_mut()), None);"
        ],
        "code": [
          "{",
          "    let regex = Regex::new(r\"[a-z]{3}\").unwrap();",
          "    let mut captures = Captures {",
          "        group_info: GroupInfo::default(),",
          "        pid: None,",
          "        slots: vec![None; 2],",
          "    };",
          "    let haystack: &[u8] = b\"\";",
          "    let input = Input {",
          "        haystack,",
          "        span: Span::new(0..0),",
          "        anchored: Anchored::No,",
          "        earliest: false,",
          "    };",
          "    regex.search_captures(&input, &mut captures);",
          "    assert_eq!(captures.pid, None);",
          "    assert_eq!(captures.slots(), &vec![None, None]);",
          "    assert!(!captures.is_match());",
          "    assert_eq!(captures.get_match(), None);",
          "    assert_eq!(regex.search_slots(&input, captures.slots_mut()), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let regex = Regex::new_many(&[\"foo\", \"bar\"]).unwrap();",
          "    let mut captures = Captures {",
          "        group_info: GroupInfo::default(),",
          "        pid: None,",
          "        slots: vec![Some(NonMaxUsize(NonZeroUsize::new(0).unwrap())); 2],",
          "    };",
          "    let haystack: &[u8] = b\"foobar\";",
          "    let input = Input {",
          "        haystack,",
          "        span: Span::new(0..6),",
          "        anchored: Anchored::No,",
          "        earliest: false,",
          "    };",
          "    regex.search_captures(&input, &mut captures);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(captures.pid, None);",
          "    assert_eq!(captures.slots.len(), 2);",
          "    assert!(captures.slots()[0].is_some());",
          "    assert!(captures.slots()[1].is_none());",
          "    assert_eq!(captures.slots()[0], Some(NonMaxUsize(NonZeroUsize::new(0).unwrap())));",
          "    assert!(captures.slots()[1].is_none());",
          "    assert!(captures.slots().iter().all(|&slot| slot.is_some() || slot.is_none()));",
          "    assert!(caps.is_match());",
          "    assert!(regex.search(&input).is_some());",
          "    assert_eq!(regex.search_half(&input), None);",
          "    assert_eq!(captures.slots_mut().len(), 2);",
          "    captures.clear();",
          "    assert!(captures.slots().iter().all(|&slot| slot.is_none()));"
        ],
        "code": [
          "{",
          "    let regex = Regex::new_many(&[\"foo\", \"bar\"]).unwrap();",
          "    let mut captures = Captures {",
          "        group_info: GroupInfo::default(),",
          "        pid: None,",
          "        slots: vec![Some(NonMaxUsize(NonZeroUsize::new(0).unwrap())); 2],",
          "    };",
          "    let haystack: &[u8] = b\"foobar\";",
          "    let input = Input {",
          "        haystack,",
          "        span: Span::new(0..6),",
          "        anchored: Anchored::No,",
          "        earliest: false,",
          "    };",
          "    regex.search_captures(&input, &mut captures);",
          "    assert_eq!(captures.pid, None);",
          "    assert_eq!(captures.slots.len(), 2);",
          "    assert!(captures.slots()[0].is_some());",
          "    assert!(captures.slots()[1].is_none());",
          "    assert_eq!(captures.slots()[0], Some(NonMaxUsize(NonZeroUsize::new(0).unwrap())));",
          "    assert!(captures.slots()[1].is_none());",
          "    assert!(captures.slots().iter().all(|&slot| slot.is_some() || slot.is_none()));",
          "    assert!(caps.is_match());",
          "    assert!(regex.search(&input).is_some());",
          "    assert_eq!(regex.search_half(&input), None);",
          "    assert_eq!(captures.slots_mut().len(), 2);",
          "    captures.clear();",
          "    assert!(captures.slots().iter().all(|&slot| slot.is_none()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]