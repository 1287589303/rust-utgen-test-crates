[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_class = Class::Bytes(ClassBytes::new(vec![",
          "        ClassBytesRange::new(0x00, 0x01), // Single byte range",
          "        ClassBytesRange::new(0x50, 0x51), // Another single byte range",
          "    ]));",
          "    let _ = byte_class.minimum_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_class.minimum_len(), Some(1));"
        ],
        "code": [
          "{",
          "    let byte_class = Class::Bytes(ClassBytes::new(vec![",
          "        ClassBytesRange::new(0x00, 0x01), // Single byte range",
          "        ClassBytesRange::new(0x50, 0x51), // Another single byte range",
          "    ]));",
          "    let _ = byte_class.minimum_len();",
          "    assert_eq!(byte_class.minimum_len(), Some(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_class = Class::Bytes(ClassBytes::empty());",
          "    let _ = byte_class.minimum_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(None, byte_class.minimum_len());"
        ],
        "code": [
          "{",
          "    let byte_class = Class::Bytes(ClassBytes::empty());",
          "    let _ = byte_class.minimum_len();",
          "    assert_eq!(None, byte_class.minimum_len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_class = Class::Bytes(ClassBytes::new(vec![",
          "        ClassBytesRange::new(0x10, 0x1F), // Range covering multiple bytes",
          "        ClassBytesRange::new(0x20, 0x20), // Single byte",
          "    ]));",
          "    let _ = byte_class.minimum_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_class.minimum_len(), Some(1));"
        ],
        "code": [
          "{",
          "    let byte_class = Class::Bytes(ClassBytes::new(vec![",
          "        ClassBytesRange::new(0x10, 0x1F), // Range covering multiple bytes",
          "        ClassBytesRange::new(0x20, 0x20), // Single byte",
          "    ]));",
          "    let _ = byte_class.minimum_len();",
          "    assert_eq!(byte_class.minimum_len(), Some(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_class = Class::Bytes(ClassBytes::new(vec![",
          "        ClassBytesRange::new(0xFF, 0xFF), // Only one byte",
          "    ]));",
          "    let _ = byte_class.minimum_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_class.minimum_len(), Some(1));"
        ],
        "code": [
          "{",
          "    let byte_class = Class::Bytes(ClassBytes::new(vec![",
          "        ClassBytesRange::new(0xFF, 0xFF), // Only one byte",
          "    ]));",
          "    let _ = byte_class.minimum_len();",
          "    assert_eq!(byte_class.minimum_len(), Some(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_class = Class::Bytes(ClassBytes::new(vec![",
          "        ClassBytesRange::new(0x01, 0x7E), // Standard ASCII range",
          "        ClassBytesRange::new(0x80, 0xFF), // Non-ASCII byte range",
          "    ]));",
          "    let _ = byte_class.minimum_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_class.minimum_len(), Some(1));"
        ],
        "code": [
          "{",
          "    let byte_class = Class::Bytes(ClassBytes::new(vec![",
          "        ClassBytesRange::new(0x01, 0x7E), // Standard ASCII range",
          "        ClassBytesRange::new(0x80, 0xFF), // Non-ASCII byte range",
          "    ]));",
          "    let _ = byte_class.minimum_len();",
          "    assert_eq!(byte_class.minimum_len(), Some(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]