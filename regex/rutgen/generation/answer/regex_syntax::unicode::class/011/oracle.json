[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::Binary(\"Decimal_Number\");",
          "    let _result = class(query);",
          "}"
        ],
        "oracle": [
          "    let query = ClassQuery::Binary(\"Decimal_Number\"); assert_eq!(class(query), Ok(hir::ClassUnicode::empty()));",
          "    let query = ClassQuery::Script(\"Latin\"); assert!(class(query).is_ok());",
          "    let query = ClassQuery::ByValue { property_name: \"Age\", property_value: \"V1_1\" }; assert!(class(query).is_ok());",
          "    let query = ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"Control\" }; assert!(class(query).is_ok());",
          "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" }; assert!(class(query).is_ok());",
          "    let query = ClassQuery::Binary(\"Non_Existent_Property\"); assert_eq!(class(query), Err(Error::PropertyNotFound));",
          "    let query = ClassQuery::ByValue { property_name: \"Script_Extensions\", property_value: \"Latin_Extended\" }; assert!(class(query).is_ok());",
          "    let query = ClassQuery::ByValue { property_name: \"Sentence_Break\", property_value: \"Other\" }; assert!(class(query).is_ok());"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::Binary(\"Decimal_Number\");",
          "    let _result = class(query);",
          "    let query = ClassQuery::Binary(\"Decimal_Number\"); assert_eq!(class(query), Ok(hir::ClassUnicode::empty()));",
          "    let query = ClassQuery::Script(\"Latin\"); assert!(class(query).is_ok());",
          "    let query = ClassQuery::ByValue { property_name: \"Age\", property_value: \"V1_1\" }; assert!(class(query).is_ok());",
          "    let query = ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"Control\" }; assert!(class(query).is_ok());",
          "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" }; assert!(class(query).is_ok());",
          "    let query = ClassQuery::Binary(\"Non_Existent_Property\"); assert_eq!(class(query), Err(Error::PropertyNotFound));",
          "    let query = ClassQuery::ByValue { property_name: \"Script_Extensions\", property_value: \"Latin_Extended\" }; assert!(class(query).is_ok());",
          "    let query = ClassQuery::ByValue { property_name: \"Sentence_Break\", property_value: \"Other\" }; assert!(class(query).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::Script(\"Latin\");",
          "    let _result = class(query);",
          "}"
        ],
        "oracle": [
          "    let query = ClassQuery::Binary(\"Decimal_Number\");",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().ranges().len(), expected_length);",
          "    ",
          "    let query = ClassQuery::Binary(\"White_Space\");",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().ranges().len(), expected_length);",
          "    ",
          "    let query = ClassQuery::Script(\"Greek\");",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().ranges().len(), expected_length);",
          "    ",
          "    let query = ClassQuery::Script(\"Cyrillic\");",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().ranges().len(), expected_length);",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"Age\", property_value: \"V1_1\" };",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().ranges().len(), expected_length);",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"Script_Extensions\", property_value: \"Latin\" };",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().ranges().len(), expected_length);",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"Control\" };",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().ranges().len(), expected_length);",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"Sentence_Break\", property_value: \"Upper\" };",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().ranges().len(), expected_length);",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"Word_Break\", property_value: \"ALetter\" };",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().ranges().len(), expected_length);"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::Script(\"Latin\");",
          "    let _result = class(query);",
          "    let query = ClassQuery::Binary(\"Decimal_Number\");",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().ranges().len(), expected_length);",
          "    ",
          "    let query = ClassQuery::Binary(\"White_Space\");",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().ranges().len(), expected_length);",
          "    ",
          "    let query = ClassQuery::Script(\"Greek\");",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().ranges().len(), expected_length);",
          "    ",
          "    let query = ClassQuery::Script(\"Cyrillic\");",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().ranges().len(), expected_length);",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"Age\", property_value: \"V1_1\" };",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().ranges().len(), expected_length);",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"Script_Extensions\", property_value: \"Latin\" };",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().ranges().len(), expected_length);",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"Control\" };",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().ranges().len(), expected_length);",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"Sentence_Break\", property_value: \"Upper\" };",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().ranges().len(), expected_length);",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"Word_Break\", property_value: \"ALetter\" };",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().ranges().len(), expected_length);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Age\",",
          "        property_value: \"V1_1\",",
          "    };",
          "    let _result = class(query);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class(ClassQuery::Binary(\"Decimal_Number\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::Binary(\"White_Space\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::Binary(\"Non_Existent_Property\")).is_err(), true);",
          "    assert_eq!(class(ClassQuery::Script(\"Latin\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::Script(\"Non_Existent_Script\")).is_err(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Age\", property_value: \"V2_0\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Script_Extensions\", property_value: \"Latin\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"Any\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Sentence_Break\", property_value: \"Any\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Word_Break\", property_value: \"Any\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Non_Existent_Property\", property_value: \"Any\" }).is_err(), true);",
          "    assert_eq!(class(ClassQuery::OneLetter('A')).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::OneLetter('z')).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::OneLetter('1')).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::OneLetter('!')).is_ok(), true);"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Age\",",
          "        property_value: \"V1_1\",",
          "    };",
          "    let _result = class(query);",
          "    assert_eq!(class(ClassQuery::Binary(\"Decimal_Number\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::Binary(\"White_Space\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::Binary(\"Non_Existent_Property\")).is_err(), true);",
          "    assert_eq!(class(ClassQuery::Script(\"Latin\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::Script(\"Non_Existent_Script\")).is_err(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Age\", property_value: \"V2_0\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Script_Extensions\", property_value: \"Latin\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"Any\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Sentence_Break\", property_value: \"Any\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Word_Break\", property_value: \"Any\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Non_Existent_Property\", property_value: \"Any\" }).is_err(), true);",
          "    assert_eq!(class(ClassQuery::OneLetter('A')).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::OneLetter('z')).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::OneLetter('1')).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::OneLetter('!')).is_ok(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Script_Extensions\",",
          "        property_value: \"Latin\",",
          "    };",
          "    let _result = class(query);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class(ClassQuery::Binary(\"Decimal_Number\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::Binary(\"White_Space\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::Script(\"Latin\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Age\", property_value: \"V1_1\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Script_Extensions\", property_value: \"Latin\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"Any\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Sentence_Break\", property_value: \"Any\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Word_Break\", property_value: \"Any\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Dummy\", property_value: \"Value\" }).is_err(), true);"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Script_Extensions\",",
          "        property_value: \"Latin\",",
          "    };",
          "    let _result = class(query);",
          "    assert_eq!(class(ClassQuery::Binary(\"Decimal_Number\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::Binary(\"White_Space\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::Script(\"Latin\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Age\", property_value: \"V1_1\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Script_Extensions\", property_value: \"Latin\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"Any\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Sentence_Break\", property_value: \"Any\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Word_Break\", property_value: \"Any\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Dummy\", property_value: \"Value\" }).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Grapheme_Cluster_Break\",",
          "        property_value: \"CR\",",
          "    };",
          "    let _result = class(query);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class(ClassQuery::Binary(\"Decimal_Number\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::Script(\"Latin\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::Script(\"Greek\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Age\", property_value: \"V1_1\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Script_Extensions\", property_value: \"Latin\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"CR\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Sentence_Break\", property_value: \"CR\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Word_Break\", property_value: \"CR\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Non_Existent_Property\", property_value: \"Value\" }).is_err(), true);"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Grapheme_Cluster_Break\",",
          "        property_value: \"CR\",",
          "    };",
          "    let _result = class(query);",
          "    assert_eq!(class(ClassQuery::Binary(\"Decimal_Number\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::Script(\"Latin\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::Script(\"Greek\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Age\", property_value: \"V1_1\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Script_Extensions\", property_value: \"Latin\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"CR\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Sentence_Break\", property_value: \"CR\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Word_Break\", property_value: \"CR\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Non_Existent_Property\", property_value: \"Value\" }).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Sentence_Break\",",
          "        property_value: \"Other\",",
          "    };",
          "    let _result = class(query);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class(ClassQuery::Binary(\"Decimal_Number\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::Binary(\"White_Space\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::Binary(\"Non_Existent_Property\")).is_err(), true);",
          "    ",
          "    assert_eq!(class(ClassQuery::Script(\"Latin\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::Script(\"Cyrillic\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::Script(\"Non_Existent_Script\")).is_err(), true);",
          "    ",
          "    assert_eq!(class(ClassQuery::ByValue {",
          "    property_name: \"Sentence_Break\",",
          "    property_value: \"Other\",",
          "    }).is_ok(), true);"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Sentence_Break\",",
          "        property_value: \"Other\",",
          "    };",
          "    let _result = class(query);",
          "    assert_eq!(class(ClassQuery::Binary(\"Decimal_Number\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::Binary(\"White_Space\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::Binary(\"Non_Existent_Property\")).is_err(), true);",
          "    ",
          "    assert_eq!(class(ClassQuery::Script(\"Latin\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::Script(\"Cyrillic\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::Script(\"Non_Existent_Script\")).is_err(), true);",
          "    ",
          "    assert_eq!(class(ClassQuery::ByValue {",
          "    property_name: \"Sentence_Break\",",
          "    property_value: \"Other\",",
          "    }).is_ok(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Word_Break\",",
          "        property_value: \"AL\",",
          "    };",
          "    let _result = class(query);",
          "}"
        ],
        "oracle": [
          "    let query = ClassQuery::Binary(\"Decimal_Number\");",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    let query = ClassQuery::Binary(\"White_Space\");",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    let query = ClassQuery::Script(\"Latin\");",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    let query = ClassQuery::ByValue { property_name: \"Age\", property_value: \"V1_1\" };",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    let query = ClassQuery::ByValue { property_name: \"Script_Extensions\", property_value: \"Latn\" };",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    let query = ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"CR\" };",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    let query = ClassQuery::ByValue { property_name: \"Sentence_Break\", property_value: \"AL\" };",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    let query = ClassQuery::ByValue { property_name: \"Word_Break\", property_value: \"AL\" };",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    let query = ClassQuery::OneLetter('A');",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    let query = ClassQuery::Binary(\"Unknown_Property\");",
          "    let result = class(query);",
          "    assert!(result.is_err());",
          "    let query = ClassQuery::ByValue { property_name: \"Unknown_Property\", property_value: \"Value\" };",
          "    let result = class(query);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Word_Break\",",
          "        property_value: \"AL\",",
          "    };",
          "    let _result = class(query);",
          "    let query = ClassQuery::Binary(\"Decimal_Number\");",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    let query = ClassQuery::Binary(\"White_Space\");",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    let query = ClassQuery::Script(\"Latin\");",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    let query = ClassQuery::ByValue { property_name: \"Age\", property_value: \"V1_1\" };",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    let query = ClassQuery::ByValue { property_name: \"Script_Extensions\", property_value: \"Latn\" };",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    let query = ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"CR\" };",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    let query = ClassQuery::ByValue { property_name: \"Sentence_Break\", property_value: \"AL\" };",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    let query = ClassQuery::ByValue { property_name: \"Word_Break\", property_value: \"AL\" };",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    let query = ClassQuery::OneLetter('A');",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    let query = ClassQuery::Binary(\"Unknown_Property\");",
          "    let result = class(query);",
          "    assert!(result.is_err());",
          "    let query = ClassQuery::ByValue { property_name: \"Unknown_Property\", property_value: \"Value\" };",
          "    let result = class(query);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]