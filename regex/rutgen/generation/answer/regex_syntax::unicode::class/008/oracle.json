[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::Binary(\"Decimal_Number\");",
          "    let _ = class(query);",
          "}"
        ],
        "oracle": [
          "    let query = ClassQuery::Binary('D');",
          "    let query = ClassQuery::Binary('W');",
          "    let query = ClassQuery::ByValue { property_name: \"Sentence_Break\", property_value: \"Grapheme\"; };",
          "    let query = ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"Any\"; };",
          "    let query = ClassQuery::ByValue { property_name: \"Sentence_Break\", property_value: \"Line\"; };",
          "    let query = ClassQuery::ByValue { property_name: \"Word_Break\", property_value: \"Any\"; };"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::Binary(\"Decimal_Number\");",
          "    let _ = class(query);",
          "    let query = ClassQuery::Binary('D');",
          "    let query = ClassQuery::Binary('W');",
          "    let query = ClassQuery::ByValue { property_name: \"Sentence_Break\", property_value: \"Grapheme\"; };",
          "    let query = ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"Any\"; };",
          "    let query = ClassQuery::ByValue { property_name: \"Sentence_Break\", property_value: \"Line\"; };",
          "    let query = ClassQuery::ByValue { property_name: \"Word_Break\", property_value: \"Any\"; };",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Sentence_Break\",",
          "        property_value: \"Any\",",
          "    };",
          "    let _ = class(query);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class(ClassQuery::Binary(\"Decimal_Number\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::Binary(\"White_Space\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Sentence_Break\", property_value: \"Any\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Word_Break\", property_value: \"Any\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"Any\" }).is_err(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Script_Extensions\", property_value: \"Latin\" }).is_err(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Age\", property_value: \"V1_1\" }).is_err(), true);"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Sentence_Break\",",
          "        property_value: \"Any\",",
          "    };",
          "    let _ = class(query);",
          "    assert_eq!(class(ClassQuery::Binary(\"Decimal_Number\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::Binary(\"White_Space\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Sentence_Break\", property_value: \"Any\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Word_Break\", property_value: \"Any\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"Any\" }).is_err(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Script_Extensions\", property_value: \"Latin\" }).is_err(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Age\", property_value: \"V1_1\" }).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]