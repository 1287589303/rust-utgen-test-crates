[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::Binary(\"Decimal_Number\");",
          "    let _ = class(query);",
          "}"
        ],
        "oracle": [
          "    let query = ClassQuery::Binary(\"Decimal_Number\");",
          "    assert!(class(query).is_ok());",
          "    ",
          "    let query = ClassQuery::ByValue {",
          "    property_name: \"Grapheme_Cluster_Break\",",
          "    property_value: \"Any\",",
          "    };",
          "    assert!(class(query).is_ok());",
          "    ",
          "    let query = ClassQuery::ByValue {",
          "    property_name: \"Word_Break\",",
          "    property_value: \"Any\",",
          "    };",
          "    assert!(class(query).is_ok());",
          "    ",
          "    let query = ClassQuery::ByValue {",
          "    property_name: \"Script_Extensions\",",
          "    property_value: \"Latin\",",
          "    };",
          "    assert!(class(query).is_ok());",
          "    ",
          "    let query = ClassQuery::ByValue {",
          "    property_name: \"Sentence_Break\",",
          "    property_value: \"Any\",",
          "    };",
          "    assert!(class(query).is_ok());",
          "    ",
          "    let query = ClassQuery::ByValue {",
          "    property_name: \"Age\",",
          "    property_value: \"V10_0\",",
          "    };",
          "    assert!(class(query).is_err());",
          "    ",
          "    let query = ClassQuery::ByValue {",
          "    property_name: \"Script_Extensions\",",
          "    property_value: \"Cyrillic\",",
          "    };",
          "    assert!(class(query).is_err());",
          "    ",
          "    let query = ClassQuery::ByValue {",
          "    property_name: \"Grapheme_Cluster_Break\",",
          "    property_value: \"Any\",",
          "    };",
          "    assert!(class(query).is_ok());"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::Binary(\"Decimal_Number\");",
          "    let _ = class(query);",
          "    let query = ClassQuery::Binary(\"Decimal_Number\");",
          "    assert!(class(query).is_ok());",
          "    ",
          "    let query = ClassQuery::ByValue {",
          "    property_name: \"Grapheme_Cluster_Break\",",
          "    property_value: \"Any\",",
          "    };",
          "    assert!(class(query).is_ok());",
          "    ",
          "    let query = ClassQuery::ByValue {",
          "    property_name: \"Word_Break\",",
          "    property_value: \"Any\",",
          "    };",
          "    assert!(class(query).is_ok());",
          "    ",
          "    let query = ClassQuery::ByValue {",
          "    property_name: \"Script_Extensions\",",
          "    property_value: \"Latin\",",
          "    };",
          "    assert!(class(query).is_ok());",
          "    ",
          "    let query = ClassQuery::ByValue {",
          "    property_name: \"Sentence_Break\",",
          "    property_value: \"Any\",",
          "    };",
          "    assert!(class(query).is_ok());",
          "    ",
          "    let query = ClassQuery::ByValue {",
          "    property_name: \"Age\",",
          "    property_value: \"V10_0\",",
          "    };",
          "    assert!(class(query).is_err());",
          "    ",
          "    let query = ClassQuery::ByValue {",
          "    property_name: \"Script_Extensions\",",
          "    property_value: \"Cyrillic\",",
          "    };",
          "    assert!(class(query).is_err());",
          "    ",
          "    let query = ClassQuery::ByValue {",
          "    property_name: \"Grapheme_Cluster_Break\",",
          "    property_value: \"Any\",",
          "    };",
          "    assert!(class(query).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Grapheme_Cluster_Break\",",
          "        property_value: \"Break_Any\",",
          "    };",
          "    let _ = class(query);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class(ClassQuery::Binary(\"Decimal_Number\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::Binary(\"White_Space\")).is_ok(), true);",
          "    assert!(class(ClassQuery::ByValue {",
          "    property_name: \"Grapheme_Cluster_Break\",",
          "    property_value: \"Break_Any\"",
          "    }).is_ok());",
          "    assert!(class(ClassQuery::ByValue {",
          "    property_name: \"Sentence_Break\",",
          "    property_value: \"Break_Any\"",
          "    }).is_ok());",
          "    assert!(class(ClassQuery::ByValue {",
          "    property_name: \"Word_Break\",",
          "    property_value: \"Break_Any\"",
          "    }).is_ok());",
          "    assert!(class(ClassQuery::ByValue {",
          "    property_name: \"Script_Extensions\",",
          "    property_value: \"Latin\"",
          "    }).is_ok());",
          "    assert!(class(ClassQuery::ByValue {",
          "    property_name: \"Age\",",
          "    property_value: \"V1_1\"",
          "    }).is_err());",
          "    assert!(class(ClassQuery::ByValue {",
          "    property_name: \"Script_Extensions\",",
          "    property_value: \"Unknown\"",
          "    }).is_err());",
          "    assert!(class(ClassQuery::ByValue {",
          "    property_name: \"Grapheme_Cluster_Break\",",
          "    property_value: \"Unknown\"",
          "    }).is_err());",
          "    assert!(class(ClassQuery::OneLetter('a')).is_ok());"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Grapheme_Cluster_Break\",",
          "        property_value: \"Break_Any\",",
          "    };",
          "    let _ = class(query);",
          "    assert_eq!(class(ClassQuery::Binary(\"Decimal_Number\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::Binary(\"White_Space\")).is_ok(), true);",
          "    assert!(class(ClassQuery::ByValue {",
          "    property_name: \"Grapheme_Cluster_Break\",",
          "    property_value: \"Break_Any\"",
          "    }).is_ok());",
          "    assert!(class(ClassQuery::ByValue {",
          "    property_name: \"Sentence_Break\",",
          "    property_value: \"Break_Any\"",
          "    }).is_ok());",
          "    assert!(class(ClassQuery::ByValue {",
          "    property_name: \"Word_Break\",",
          "    property_value: \"Break_Any\"",
          "    }).is_ok());",
          "    assert!(class(ClassQuery::ByValue {",
          "    property_name: \"Script_Extensions\",",
          "    property_value: \"Latin\"",
          "    }).is_ok());",
          "    assert!(class(ClassQuery::ByValue {",
          "    property_name: \"Age\",",
          "    property_value: \"V1_1\"",
          "    }).is_err());",
          "    assert!(class(ClassQuery::ByValue {",
          "    property_name: \"Script_Extensions\",",
          "    property_value: \"Unknown\"",
          "    }).is_err());",
          "    assert!(class(ClassQuery::ByValue {",
          "    property_name: \"Grapheme_Cluster_Break\",",
          "    property_value: \"Unknown\"",
          "    }).is_err());",
          "    assert!(class(ClassQuery::OneLetter('a')).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Word_Break\",",
          "        property_value: \"Break_Symbols\",",
          "    };",
          "    let _ = class(query);",
          "}"
        ],
        "oracle": [
          "    let query = ClassQuery::Binary('A');",
          "    let query = ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"Any\" };",
          "    let query = ClassQuery::ByValue { property_name: \"Word_Break\", property_value: \"N\" };",
          "    let query = ClassQuery::ByValue { property_name: \"Script_Extensions\", property_value: \"Latin\" };",
          "    let err = class(ClassQuery::ByValue { property_name: \"Age\", property_value: \"V12_0\" }).unwrap_err();",
          "    let result = class(ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"Single_Char\" }).unwrap();",
          "    let err = class(ClassQuery::ByValue { property_name: \"Script_Extensions\", property_value: \"X\" }).unwrap_err();",
          "    let result = class(ClassQuery::ByValue { property_name: \"Word_Break\", property_value: \"All\" }).unwrap();",
          "    let result = class(ClassQuery::ByValue { property_name: \"Sentence_Break\", property_value: \"Any\" }).unwrap();",
          "    let err = class(ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"Invalid\" }).unwrap_err();",
          "    let _ = class(ClassQuery::ByValue { property_name: \"Script_Extensions\", property_value: \"Greek\" });",
          "    let _ = class(ClassQuery::ByValue { property_name: \"Age\", property_value: \"V10_0\" });",
          "    let matches = class(ClassQuery::ByValue { property_name: \"Word_Break\", property_value: \"All\" }).is_ok();",
          "    let matches = class(ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"Control\" }).is_err();"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Word_Break\",",
          "        property_value: \"Break_Symbols\",",
          "    };",
          "    let _ = class(query);",
          "    let query = ClassQuery::Binary('A');",
          "    let query = ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"Any\" };",
          "    let query = ClassQuery::ByValue { property_name: \"Word_Break\", property_value: \"N\" };",
          "    let query = ClassQuery::ByValue { property_name: \"Script_Extensions\", property_value: \"Latin\" };",
          "    let err = class(ClassQuery::ByValue { property_name: \"Age\", property_value: \"V12_0\" }).unwrap_err();",
          "    let result = class(ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"Single_Char\" }).unwrap();",
          "    let err = class(ClassQuery::ByValue { property_name: \"Script_Extensions\", property_value: \"X\" }).unwrap_err();",
          "    let result = class(ClassQuery::ByValue { property_name: \"Word_Break\", property_value: \"All\" }).unwrap();",
          "    let result = class(ClassQuery::ByValue { property_name: \"Sentence_Break\", property_value: \"Any\" }).unwrap();",
          "    let err = class(ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"Invalid\" }).unwrap_err();",
          "    let _ = class(ClassQuery::ByValue { property_name: \"Script_Extensions\", property_value: \"Greek\" });",
          "    let _ = class(ClassQuery::ByValue { property_name: \"Age\", property_value: \"V10_0\" });",
          "    let matches = class(ClassQuery::ByValue { property_name: \"Word_Break\", property_value: \"All\" }).is_ok();",
          "    let matches = class(ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"Control\" }).is_err();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Sentence_Break\",",
          "        property_value: \"Break_After\",",
          "    };",
          "    let _ = class(query);",
          "}"
        ],
        "oracle": [
          "    class(ClassQuery::Binary('D')) // Tests Binary property with valid character",
          "    class(ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"Break_After\" }) // Tests valid Grapheme Cluster Break",
          "    class(ClassQuery::ByValue { property_name: \"Word_Break\", property_value: \"Break_Before\" }) // Tests valid Word Break",
          "    class(ClassQuery::ByValue { property_name: \"Script_Extensions\", property_value: \"Latin\" }) // Tests valid Script Extensions",
          "    class(ClassQuery::ByValue { property_name: \"Age\", property_value: \"V1_1\" }) // Valid Age property - should return Err(Error::PropertyNotFound)",
          "    class(ClassQuery::ByValue { property_name: \"Sentence_Break\", property_value: \"Break_After\" }) // Valid Sentence Break property - should return specific behavior",
          "    class(ClassQuery::Binary(\"Decimal_Number\")) // Tests Binary property for Decimal_Number",
          "    class(ClassQuery::GeneralCategory(\"Letter\")) // Tests valid general category",
          "    class(ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"Break_Before\" }) // Tests valid Grapheme Cluster Break",
          "    class(ClassQuery::ByValue { property_name: \"Script_Extensions\", property_value: \"Egyptian_Hieroglyphs\" }) // Tests valid Script Extensions with different value",
          "    class(ClassQuery::ByValue { property_name: \"Age\", property_value: \"V3_0\" }) // Tested with a valid Age property but expects error",
          "    class(ClassQuery::OneLetter('L')) // Tests single letter class query",
          "    class(ClassQuery::Binary(\"White_Space\")) // Tests Binary property for White Space",
          "    class(ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"Break_After\" }) // Re-testing valid Grapheme Cluster Break for comprehensive check"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Sentence_Break\",",
          "        property_value: \"Break_After\",",
          "    };",
          "    let _ = class(query);",
          "    class(ClassQuery::Binary('D')) // Tests Binary property with valid character",
          "    class(ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"Break_After\" }) // Tests valid Grapheme Cluster Break",
          "    class(ClassQuery::ByValue { property_name: \"Word_Break\", property_value: \"Break_Before\" }) // Tests valid Word Break",
          "    class(ClassQuery::ByValue { property_name: \"Script_Extensions\", property_value: \"Latin\" }) // Tests valid Script Extensions",
          "    class(ClassQuery::ByValue { property_name: \"Age\", property_value: \"V1_1\" }) // Valid Age property - should return Err(Error::PropertyNotFound)",
          "    class(ClassQuery::ByValue { property_name: \"Sentence_Break\", property_value: \"Break_After\" }) // Valid Sentence Break property - should return specific behavior",
          "    class(ClassQuery::Binary(\"Decimal_Number\")) // Tests Binary property for Decimal_Number",
          "    class(ClassQuery::GeneralCategory(\"Letter\")) // Tests valid general category",
          "    class(ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"Break_Before\" }) // Tests valid Grapheme Cluster Break",
          "    class(ClassQuery::ByValue { property_name: \"Script_Extensions\", property_value: \"Egyptian_Hieroglyphs\" }) // Tests valid Script Extensions with different value",
          "    class(ClassQuery::ByValue { property_name: \"Age\", property_value: \"V3_0\" }) // Tested with a valid Age property but expects error",
          "    class(ClassQuery::OneLetter('L')) // Tests single letter class query",
          "    class(ClassQuery::Binary(\"White_Space\")) // Tests Binary property for White Space",
          "    class(ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"Break_After\" }) // Re-testing valid Grapheme Cluster Break for comprehensive check",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]