[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::Binary(\"White_Space\");",
          "    let result = class(query);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(class(hir_class(&[('\\u{0009}', '\\u{000A}')])));",
          "    assert!(result.is_ok());",
          "    ",
          "    let query = ClassQuery::ByValue {",
          "    property_name: \"Age\",",
          "    property_value: \"V1_1\"",
          "    };",
          "    let result = class(query);",
          "    assert_eq!(result, Ok(class(hir_class(ages(\"V1_1\").unwrap()))));",
          "    ",
          "    let query = ClassQuery::ByValue {",
          "    property_name: \"Grapheme_Cluster_Break\",",
          "    property_value: \"Control\"",
          "    };",
          "    let result = class(query);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Error::PropertyValueNotFound));",
          "    ",
          "    let query = ClassQuery::ByValue {",
          "    property_name: \"Word_Break\",",
          "    property_value: \"XX\"",
          "    };",
          "    let result = class(query);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Error::PropertyValueNotFound));",
          "    ",
          "    let query = ClassQuery::ByValue {",
          "    property_name: \"Script_Extensions\",",
          "    property_value: \"Zinh\"",
          "    };",
          "    let result = class(query);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Error::PropertyValueNotFound));",
          "    ",
          "    let query = ClassQuery::ByValue {",
          "    property_name: \"Sentence_Break\",",
          "    property_value: \"None\"",
          "    };",
          "    let result = class(query);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Error::PropertyValueNotFound));"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::Binary(\"White_Space\");",
          "    let result = class(query);",
          "    assert_eq!(result, Ok(class(hir_class(&[('\\u{0009}', '\\u{000A}')])));",
          "    assert!(result.is_ok());",
          "    ",
          "    let query = ClassQuery::ByValue {",
          "    property_name: \"Age\",",
          "    property_value: \"V1_1\"",
          "    };",
          "    let result = class(query);",
          "    assert_eq!(result, Ok(class(hir_class(ages(\"V1_1\").unwrap()))));",
          "    ",
          "    let query = ClassQuery::ByValue {",
          "    property_name: \"Grapheme_Cluster_Break\",",
          "    property_value: \"Control\"",
          "    };",
          "    let result = class(query);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Error::PropertyValueNotFound));",
          "    ",
          "    let query = ClassQuery::ByValue {",
          "    property_name: \"Word_Break\",",
          "    property_value: \"XX\"",
          "    };",
          "    let result = class(query);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Error::PropertyValueNotFound));",
          "    ",
          "    let query = ClassQuery::ByValue {",
          "    property_name: \"Script_Extensions\",",
          "    property_value: \"Zinh\"",
          "    };",
          "    let result = class(query);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Error::PropertyValueNotFound));",
          "    ",
          "    let query = ClassQuery::ByValue {",
          "    property_name: \"Sentence_Break\",",
          "    property_value: \"None\"",
          "    };",
          "    let result = class(query);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Error::PropertyValueNotFound));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Age\",",
          "        property_value: \"V1_1\",",
          "    };",
          "    let result = class(query);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(result.unwrap().ranges().is_empty());",
          "    assert_eq!(result.unwrap().minimum_len(), None);",
          "    assert_eq!(result.unwrap().maximum_len(), None);"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Age\",",
          "        property_value: \"V1_1\",",
          "    };",
          "    let result = class(query);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(result.unwrap().ranges().is_empty());",
          "    assert_eq!(result.unwrap().minimum_len(), None);",
          "    assert_eq!(result.unwrap().maximum_len(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Age\",",
          "        property_value: \"V2_0\",",
          "    };",
          "    let result = class(query);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), hir::ClassUnicode::empty());"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Age\",",
          "        property_value: \"V2_0\",",
          "    };",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), hir::ClassUnicode::empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Grapheme_Cluster_Break\",",
          "        property_value: \"Extend\",",
          "    };",
          "    let result = class(query);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(result.as_ref().unwrap().ranges().is_empty());"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Grapheme_Cluster_Break\",",
          "        property_value: \"Extend\",",
          "    };",
          "    let result = class(query);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(result.as_ref().unwrap().ranges().is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Word_Break\",",
          "        property_value: \"CR\",",
          "    };",
          "    let result = class(query);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(result.unwrap().ranges().len() > 0);",
          "    assert_eq!(result.unwrap().to_byte_class(), None);",
          "    assert_eq!(result.unwrap().maximum_len(), None);",
          "    assert_eq!(result.unwrap().minimum_len(), Some(1));",
          "    assert_eq!(result.unwrap().literal(), None);",
          "    assert_eq!(result.unwrap().is_ascii(), false);"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Word_Break\",",
          "        property_value: \"CR\",",
          "    };",
          "    let result = class(query);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(result.unwrap().ranges().len() > 0);",
          "    assert_eq!(result.unwrap().to_byte_class(), None);",
          "    assert_eq!(result.unwrap().maximum_len(), None);",
          "    assert_eq!(result.unwrap().minimum_len(), Some(1));",
          "    assert_eq!(result.unwrap().literal(), None);",
          "    assert_eq!(result.unwrap().is_ascii(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Script_Extensions\",",
          "        property_value: \"Latin\",",
          "    };",
          "    let result = class(query);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(result.unwrap().ranges().len() > 0);",
          "    let query = ClassQuery::Binary(\"Decimal_Number\");",
          "    let result = class(query);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(result.unwrap().ranges().len() > 0);",
          "    let query = ClassQuery::ByValue { property_name: \"Age\", property_value: \"V1_1\" };",
          "    let result = class(query);",
          "    assert_eq!(result.is_ok(), true);",
          "    let query = ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"Control\" };",
          "    let result = class(query);",
          "    assert_eq!(result.is_ok(), true);",
          "    let query = ClassQuery::ByValue { property_name: \"Sentence_Break\", property_value: \"CR\" };",
          "    let result = class(query);",
          "    assert_eq!(result.is_ok(), true);",
          "    let query = ClassQuery::ByValue { property_name: \"Word_Break\", property_value: \"Other\" };",
          "    let result = class(query);",
          "    assert_eq!(result.is_ok(), true);"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Script_Extensions\",",
          "        property_value: \"Latin\",",
          "    };",
          "    let result = class(query);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(result.unwrap().ranges().len() > 0);",
          "    let query = ClassQuery::Binary(\"Decimal_Number\");",
          "    let result = class(query);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(result.unwrap().ranges().len() > 0);",
          "    let query = ClassQuery::ByValue { property_name: \"Age\", property_value: \"V1_1\" };",
          "    let result = class(query);",
          "    assert_eq!(result.is_ok(), true);",
          "    let query = ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"Control\" };",
          "    let result = class(query);",
          "    assert_eq!(result.is_ok(), true);",
          "    let query = ClassQuery::ByValue { property_name: \"Sentence_Break\", property_value: \"CR\" };",
          "    let result = class(query);",
          "    assert_eq!(result.is_ok(), true);",
          "    let query = ClassQuery::ByValue { property_name: \"Word_Break\", property_value: \"Other\" };",
          "    let result = class(query);",
          "    assert_eq!(result.is_ok(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Sentence_Break\",",
          "        property_value: \"Sentence_Terminal\",",
          "    };",
          "    let result = class(query);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(result.unwrap().ranges().is_empty());",
          "    assert_eq!(result.unwrap().minimum_len().unwrap(), 0);",
          "    assert_eq!(result.unwrap().maximum_len().unwrap(), usize::MAX);"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Sentence_Break\",",
          "        property_value: \"Sentence_Terminal\",",
          "    };",
          "    let result = class(query);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(result.unwrap().ranges().is_empty());",
          "    assert_eq!(result.unwrap().minimum_len().unwrap(), 0);",
          "    assert_eq!(result.unwrap().maximum_len().unwrap(), usize::MAX);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]