[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::Binary(\"Invalid_Property_Name\");",
          "    let _ = class(query);",
          "}"
        ],
        "oracle": [
          "    let query = ClassQuery::ByValue { property_name: \"Invalid_Property_Name\", property_value: \"Some_Value\" }; assert_eq!(class(query), Err(Error::PropertyNotFound));",
          "    let query = ClassQuery::OneLetter('A'); assert_eq!(class(query), Err(Error::PropertyNotFound));",
          "    let query = ClassQuery::Binary(\"Another_Invalid_Name\"); assert_eq!(class(query), Err(Error::PropertyNotFound));",
          "    let query = ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"Some_Value\" }; assert_eq!(class(query), Err(Error::PropertyNotFound));",
          "    let query = ClassQuery::ByValue { property_name: \"Word_Break\", property_value: \"Some_Value\" }; assert_eq!(class(query), Err(Error::PropertyNotFound));",
          "    let query = ClassQuery::ByValue { property_name: \"Script_Extensions\", property_value: \"Some_Value\" }; assert_eq!(class(query), Err(Error::PropertyNotFound));",
          "    let query = ClassQuery::ByValue { property_name: \"Sentence_Break\", property_value: \"Some_Value\" }; assert_eq!(class(query), Err(Error::PropertyNotFound));",
          "    let query = ClassQuery::ByValue { property_name: \"Age\", property_value: \"Some_Value\" }; assert_eq!(class(query), Err(Error::PropertyNotFound));",
          "    let query = ClassQuery::Script(\"Invalid_Script_Name\"); assert_eq!(class(query), Err(Error::PropertyNotFound));",
          "    let query = ClassQuery::GeneralCategory(\"Invalid_Category_Name\"); assert_eq!(class(query), Err(Error::PropertyNotFound));"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::Binary(\"Invalid_Property_Name\");",
          "    let _ = class(query);",
          "    let query = ClassQuery::ByValue { property_name: \"Invalid_Property_Name\", property_value: \"Some_Value\" }; assert_eq!(class(query), Err(Error::PropertyNotFound));",
          "    let query = ClassQuery::OneLetter('A'); assert_eq!(class(query), Err(Error::PropertyNotFound));",
          "    let query = ClassQuery::Binary(\"Another_Invalid_Name\"); assert_eq!(class(query), Err(Error::PropertyNotFound));",
          "    let query = ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"Some_Value\" }; assert_eq!(class(query), Err(Error::PropertyNotFound));",
          "    let query = ClassQuery::ByValue { property_name: \"Word_Break\", property_value: \"Some_Value\" }; assert_eq!(class(query), Err(Error::PropertyNotFound));",
          "    let query = ClassQuery::ByValue { property_name: \"Script_Extensions\", property_value: \"Some_Value\" }; assert_eq!(class(query), Err(Error::PropertyNotFound));",
          "    let query = ClassQuery::ByValue { property_name: \"Sentence_Break\", property_value: \"Some_Value\" }; assert_eq!(class(query), Err(Error::PropertyNotFound));",
          "    let query = ClassQuery::ByValue { property_name: \"Age\", property_value: \"Some_Value\" }; assert_eq!(class(query), Err(Error::PropertyNotFound));",
          "    let query = ClassQuery::Script(\"Invalid_Script_Name\"); assert_eq!(class(query), Err(Error::PropertyNotFound));",
          "    let query = ClassQuery::GeneralCategory(\"Invalid_Category_Name\"); assert_eq!(class(query), Err(Error::PropertyNotFound));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::OneLetter('∫'); // A character that does not correspond to any known binary property",
          "    let _ = class(query);",
          "}"
        ],
        "oracle": [
          "    let query = ClassQuery::OneLetter('∫'); // query matches Binary(name) is false",
          "    let _ = class(query); // expected return value: Err(Error::PropertyNotFound)"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::OneLetter('∫'); // A character that does not correspond to any known binary property",
          "    let _ = class(query);",
          "    let query = ClassQuery::OneLetter('∫'); // query matches Binary(name) is false",
          "    let _ = class(query); // expected return value: Err(Error::PropertyNotFound)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Invalid_Property\",",
          "        property_value: \"Some_Value\",",
          "    };",
          "    let _ = class(query);",
          "}"
        ],
        "oracle": [
          "    let query = ClassQuery::ByValue { property_name: \"Invalid_Property\", property_value: \"Some_Value\" };",
          "    let result = class(query);",
          "    assert_eq!(result, Err(Error::PropertyNotFound));"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Invalid_Property\",",
          "        property_value: \"Some_Value\",",
          "    };",
          "    let _ = class(query);",
          "    let query = ClassQuery::ByValue { property_name: \"Invalid_Property\", property_value: \"Some_Value\" };",
          "    let result = class(query);",
          "    assert_eq!(result, Err(Error::PropertyNotFound));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]