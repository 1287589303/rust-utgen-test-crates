[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::OneLetter('A');",
          "    let _result = class(query);",
          "}"
        ],
        "oracle": [
          "    let query = ClassQuery::Binary(\"Decimal_Number\"); let result = class(query); assert!(result.is_ok()); assert_eq!(result.unwrap(), expeced_value_for_decimal_number);",
          "    ",
          "    let query = ClassQuery::Binary(\"White_Space\"); let result = class(query); assert!(result.is_ok()); assert_eq!(result.unwrap(), expected_value_for_white_space);",
          "    ",
          "    let query = ClassQuery::GeneralCategory(\"Lu\"); let result = class(query); assert!(result.is_ok()); assert_eq!(result.unwrap(), expected_value_for_general_category);"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::OneLetter('A');",
          "    let _result = class(query);",
          "    let query = ClassQuery::Binary(\"Decimal_Number\"); let result = class(query); assert!(result.is_ok()); assert_eq!(result.unwrap(), expeced_value_for_decimal_number);",
          "    ",
          "    let query = ClassQuery::Binary(\"White_Space\"); let result = class(query); assert!(result.is_ok()); assert_eq!(result.unwrap(), expected_value_for_white_space);",
          "    ",
          "    let query = ClassQuery::GeneralCategory(\"Lu\"); let result = class(query); assert!(result.is_ok()); assert_eq!(result.unwrap(), expected_value_for_general_category);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::Binary(\"Decimal_Number\");",
          "    let _result = class(query);",
          "}"
        ],
        "oracle": [
          "    let query = ClassQuery::Binary(\"Decimal_Number\");",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    let hir_class_unicode = result.unwrap();",
          "    assert_eq!(hir_class_unicode, expected_hir_class_for_decimal_number);",
          "    ",
          "    let query = ClassQuery::GeneralCategory(\"Letter\");",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    let hir_class_unicode = result.unwrap();",
          "    assert_eq!(hir_class_unicode, expected_hir_class_for_letter);",
          "    ",
          "    let query = ClassQuery::Script(\"Latin\");",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    let hir_class_unicode = result.unwrap();",
          "    assert_eq!(hir_class_unicode, expected_hir_class_for_latin);"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::Binary(\"Decimal_Number\");",
          "    let _result = class(query);",
          "    let query = ClassQuery::Binary(\"Decimal_Number\");",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    let hir_class_unicode = result.unwrap();",
          "    assert_eq!(hir_class_unicode, expected_hir_class_for_decimal_number);",
          "    ",
          "    let query = ClassQuery::GeneralCategory(\"Letter\");",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    let hir_class_unicode = result.unwrap();",
          "    assert_eq!(hir_class_unicode, expected_hir_class_for_letter);",
          "    ",
          "    let query = ClassQuery::Script(\"Latin\");",
          "    let result = class(query);",
          "    assert!(result.is_ok());",
          "    let hir_class_unicode = result.unwrap();",
          "    assert_eq!(hir_class_unicode, expected_hir_class_for_latin);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::Binary(\"White_Space\");",
          "    let _result = class(query);",
          "}"
        ],
        "oracle": [
          "    result = class(ClassQuery::Binary(\"White_Space\"));",
          "    assert!(result.is_ok());",
          "    let hir_class_unicode = result.unwrap();",
          "    assert_eq!(hir_class_unicode, expected_hir_class_unicode);",
          "    ",
          "    result = class(ClassQuery::Binary(\"Decimal_Number\"));",
          "    assert!(result.is_ok());",
          "    let hir_class_unicode = result.unwrap();",
          "    assert_eq!(hir_class_unicode, expected_hir_class_unicode);",
          "    ",
          "    result = class(ClassQuery::GeneralCategory(\"Letter\"));",
          "    assert!(result.is_ok());",
          "    let hir_class_unicode = result.unwrap();",
          "    assert_eq!(hir_class_unicode, expected_hir_class_unicode);",
          "    ",
          "    result = class(ClassQuery::GeneralCategory(\"Number\"));",
          "    assert!(result.is_ok());",
          "    let hir_class_unicode = result.unwrap();",
          "    assert_eq!(hir_class_unicode, expected_hir_class_unicode);"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::Binary(\"White_Space\");",
          "    let _result = class(query);",
          "    result = class(ClassQuery::Binary(\"White_Space\"));",
          "    assert!(result.is_ok());",
          "    let hir_class_unicode = result.unwrap();",
          "    assert_eq!(hir_class_unicode, expected_hir_class_unicode);",
          "    ",
          "    result = class(ClassQuery::Binary(\"Decimal_Number\"));",
          "    assert!(result.is_ok());",
          "    let hir_class_unicode = result.unwrap();",
          "    assert_eq!(hir_class_unicode, expected_hir_class_unicode);",
          "    ",
          "    result = class(ClassQuery::GeneralCategory(\"Letter\"));",
          "    assert!(result.is_ok());",
          "    let hir_class_unicode = result.unwrap();",
          "    assert_eq!(hir_class_unicode, expected_hir_class_unicode);",
          "    ",
          "    result = class(ClassQuery::GeneralCategory(\"Number\"));",
          "    assert!(result.is_ok());",
          "    let hir_class_unicode = result.unwrap();",
          "    assert_eq!(hir_class_unicode, expected_hir_class_unicode);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Age\",",
          "        property_value: \"V1_1\",",
          "    };",
          "    let _result = class(query);",
          "}"
        ],
        "oracle": [
          "    result = class(ClassQuery::Binary(\"Decimal_Number\")); // Expected: Ok(hir::ClassUnicode)",
          "    result = class(ClassQuery::GeneralCategory(\"ASCII\")); // Expected: Ok(hir::ClassUnicode) with the range [('\\0', '\\x7F')]",
          "    result = class(ClassQuery::Script(\"Latin\")); // Expected: Ok(hir::ClassUnicode) if supported, else Err(Error::PropertyNotFound)"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Age\",",
          "        property_value: \"V1_1\",",
          "    };",
          "    let _result = class(query);",
          "    result = class(ClassQuery::Binary(\"Decimal_Number\")); // Expected: Ok(hir::ClassUnicode)",
          "    result = class(ClassQuery::GeneralCategory(\"ASCII\")); // Expected: Ok(hir::ClassUnicode) with the range [('\\0', '\\x7F')]",
          "    result = class(ClassQuery::Script(\"Latin\")); // Expected: Ok(hir::ClassUnicode) if supported, else Err(Error::PropertyNotFound)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Script_Extensions\",",
          "        property_value: \"Arabic\",",
          "    };",
          "    let _result = class(query);",
          "}"
        ],
        "oracle": [
          "    class(ClassQuery::Binary(\"Decimal_Number\")).unwrap();",
          "    class(ClassQuery::GeneralCategory(\"Letter\")).unwrap();",
          "    class(ClassQuery::ByValue { property_name: \"Script_Extensions\", property_value: \"Arabic\" }).unwrap();",
          "    class(ClassQuery::ByValue { property_name: \"Age\", property_value: \"V12_0\" }).unwrap();",
          "    class(ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"Control\" }).unwrap();",
          "    class(ClassQuery::ByValue { property_name: \"Sentence_Break\", property_value: \"CR\" }).unwrap();",
          "    class(ClassQuery::ByValue { property_name: \"Word_Break\", property_value: \"MidLetter\" }).unwrap();"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Script_Extensions\",",
          "        property_value: \"Arabic\",",
          "    };",
          "    let _result = class(query);",
          "    class(ClassQuery::Binary(\"Decimal_Number\")).unwrap();",
          "    class(ClassQuery::GeneralCategory(\"Letter\")).unwrap();",
          "    class(ClassQuery::ByValue { property_name: \"Script_Extensions\", property_value: \"Arabic\" }).unwrap();",
          "    class(ClassQuery::ByValue { property_name: \"Age\", property_value: \"V12_0\" }).unwrap();",
          "    class(ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"Control\" }).unwrap();",
          "    class(ClassQuery::ByValue { property_name: \"Sentence_Break\", property_value: \"CR\" }).unwrap();",
          "    class(ClassQuery::ByValue { property_name: \"Word_Break\", property_value: \"MidLetter\" }).unwrap();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Grapheme_Cluster_Break\",",
          "        property_value: \"CR\",",
          "    };",
          "    let _result = class(query);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class(ClassQuery::Binary(\"Decimal_Number\")), Ok(hir::ClassUnicode::new(vec![/*expected range for Decimal_Number*/])));",
          "    assert_eq!(class(ClassQuery::GeneralCategory(\"Whitespace\")), Ok(hir::ClassUnicode::new(vec![/*expected range for Whitespace*/])));",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Age\", property_value: \"V1_1\" }), Ok(hir::ClassUnicode::new(vec![/*expected range for Age V1_1*/])));",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" }), Ok(hir::ClassUnicode::new(vec![/*expected range for Script Latin*/])));",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Script_Extensions\", property_value: \"Latin\" }), Ok(hir::ClassUnicode::new(vec![/*expected range for Script_Extensions Latin*/])));",
          "    assert!(matches!(class(ClassQuery::ByValue { property_name: \"NonExistentProperty\", property_value: \"Value\" }), Err(Error::PropertyNotFound)));"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Grapheme_Cluster_Break\",",
          "        property_value: \"CR\",",
          "    };",
          "    let _result = class(query);",
          "    assert_eq!(class(ClassQuery::Binary(\"Decimal_Number\")), Ok(hir::ClassUnicode::new(vec![/*expected range for Decimal_Number*/])));",
          "    assert_eq!(class(ClassQuery::GeneralCategory(\"Whitespace\")), Ok(hir::ClassUnicode::new(vec![/*expected range for Whitespace*/])));",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Age\", property_value: \"V1_1\" }), Ok(hir::ClassUnicode::new(vec![/*expected range for Age V1_1*/])));",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" }), Ok(hir::ClassUnicode::new(vec![/*expected range for Script Latin*/])));",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Script_Extensions\", property_value: \"Latin\" }), Ok(hir::ClassUnicode::new(vec![/*expected range for Script_Extensions Latin*/])));",
          "    assert!(matches!(class(ClassQuery::ByValue { property_name: \"NonExistentProperty\", property_value: \"Value\" }), Err(Error::PropertyNotFound)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Sentence_Break\",",
          "        property_value: \"CR\",",
          "    };",
          "    let _result = class(query);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class(ClassQuery::OneLetter('A')).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::Binary(\"Decimal_Number\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::Binary(\"White_Space\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Age\", property_value: \"V1_1\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Script_Extensions\", property_value: \"Latin\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"CR\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Sentence_Break\", property_value: \"CR\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Word_Break\", property_value: \"CR\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::Binary(\"Unknown_Property\")).is_err(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Unknown_Property\", property_value: \"value\" }).is_err(), true);"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Sentence_Break\",",
          "        property_value: \"CR\",",
          "    };",
          "    let _result = class(query);",
          "    assert_eq!(class(ClassQuery::OneLetter('A')).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::Binary(\"Decimal_Number\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::Binary(\"White_Space\")).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Age\", property_value: \"V1_1\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Script_Extensions\", property_value: \"Latin\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"CR\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Sentence_Break\", property_value: \"CR\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Word_Break\", property_value: \"CR\" }).is_ok(), true);",
          "    assert_eq!(class(ClassQuery::Binary(\"Unknown_Property\")).is_err(), true);",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Unknown_Property\", property_value: \"value\" }).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Word_Break\",",
          "        property_value: \"CR\",",
          "    };",
          "    let _result = class(query);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class(ClassQuery::OneLetter('A')), Ok(...));",
          "    assert_eq!(class(ClassQuery::Binary(\"Decimal_Number\")), Ok(...));",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Age\", property_value: \"V1_1\" }), Ok(...));",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Script_Extensions\", property_value: \"Latn\" }), Ok(...));",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"CR\" }), Ok(...));",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Sentence_Break\", property_value: \"CR\" }), Ok(...));",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Word_Break\", property_value: \"CR\" }), Ok(...));",
          "    assert!(matches!(class(ClassQuery::Binary(\"Non_Existent\")), Err(Error::PropertyNotFound)));",
          "    assert!(matches!(class(ClassQuery::ByValue { property_name: \"Non_Existent\", property_value: \"CR\" }), Err(Error::PropertyNotFound)));",
          "    assert!(matches!(class(ClassQuery::OneLetter('@')), Ok(...)));",
          "    assert!(matches!(class(ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"Letter\" }), Ok(...)));",
          "    assert!(matches!(class(ClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" }), Ok(...)));"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Word_Break\",",
          "        property_value: \"CR\",",
          "    };",
          "    let _result = class(query);",
          "    assert_eq!(class(ClassQuery::OneLetter('A')), Ok(...));",
          "    assert_eq!(class(ClassQuery::Binary(\"Decimal_Number\")), Ok(...));",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Age\", property_value: \"V1_1\" }), Ok(...));",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Script_Extensions\", property_value: \"Latn\" }), Ok(...));",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Grapheme_Cluster_Break\", property_value: \"CR\" }), Ok(...));",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Sentence_Break\", property_value: \"CR\" }), Ok(...));",
          "    assert_eq!(class(ClassQuery::ByValue { property_name: \"Word_Break\", property_value: \"CR\" }), Ok(...));",
          "    assert!(matches!(class(ClassQuery::Binary(\"Non_Existent\")), Err(Error::PropertyNotFound)));",
          "    assert!(matches!(class(ClassQuery::ByValue { property_name: \"Non_Existent\", property_value: \"CR\" }), Err(Error::PropertyNotFound)));",
          "    assert!(matches!(class(ClassQuery::OneLetter('@')), Ok(...)));",
          "    assert!(matches!(class(ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"Letter\" }), Ok(...)));",
          "    assert!(matches!(class(ClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" }), Ok(...)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]