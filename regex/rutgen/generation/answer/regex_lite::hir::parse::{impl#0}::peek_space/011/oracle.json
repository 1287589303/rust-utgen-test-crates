[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            ignore_whitespace: false,",
          "            ..Default::default()",
          "        },",
          "    };",
          "    let pattern = \"abc # this is a comment\\n\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.peek_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.peek_space(), Some('a'));",
          "    assert_eq!(parser.pos(), 0);",
          "    assert_eq!(parser.flags().ignore_whitespace, false);",
          "    assert!(!parser.is_done());",
          "    assert_eq!(parser.char(), 'a');"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            ignore_whitespace: false,",
          "            ..Default::default()",
          "        },",
          "    };",
          "    let pattern = \"abc # this is a comment\\n\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.peek_space();",
          "    assert_eq!(parser.peek_space(), Some('a'));",
          "    assert_eq!(parser.pos(), 0);",
          "    assert_eq!(parser.flags().ignore_whitespace, false);",
          "    assert!(!parser.is_done());",
          "    assert_eq!(parser.char(), 'a');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            ignore_whitespace: false,",
          "            ..Default::default()",
          "        },",
          "    };",
          "    let pattern = \"    def # a comment\\n\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.peek_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.peek_space(), Some('d'));",
          "    assert_eq!(parser.pos(), 0);",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.char.get(), Some(' '));"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            ignore_whitespace: false,",
          "            ..Default::default()",
          "        },",
          "    };",
          "    let pattern = \"    def # a comment\\n\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.peek_space();",
          "    assert_eq!(parser.peek_space(), Some('d'));",
          "    assert_eq!(parser.pos(), 0);",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.char.get(), Some(' '));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            ignore_whitespace: false,",
          "            ..Default::default()",
          "        },",
          "    };",
          "    let pattern = \"\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.peek_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.peek_space(), None);"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            ignore_whitespace: false,",
          "            ..Default::default()",
          "        },",
          "    };",
          "    let pattern = \"\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.peek_space();",
          "    assert_eq!(parser.peek_space(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 1,",
          "        flags: Flags {",
          "            ignore_whitespace: false,",
          "            ..Default::default()",
          "        },",
          "    };",
          "    let pattern = \"(a # comment)\\n\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.peek_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.peek_space(), Some('('));",
          "    assert_eq!(parser.pos(), 0);",
          "    assert!(!parser.is_done());",
          "    assert_eq!(parser.flags().ignore_whitespace, false);"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 1,",
          "        flags: Flags {",
          "            ignore_whitespace: false,",
          "            ..Default::default()",
          "        },",
          "    };",
          "    let pattern = \"(a # comment)\\n\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.peek_space();",
          "    assert_eq!(parser.peek_space(), Some('('));",
          "    assert_eq!(parser.pos(), 0);",
          "    assert!(!parser.is_done());",
          "    assert_eq!(parser.flags().ignore_whitespace, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            ignore_whitespace: false,",
          "            ..Default::default()",
          "        },",
          "    };",
          "    let pattern = \"(capture1)# comment\\n(capture2)\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.peek_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.peek_space(), Some('('));",
          "    assert_eq!(parser.pos(), 0);",
          "    assert_eq!(parser.char(), '(');"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            ignore_whitespace: false,",
          "            ..Default::default()",
          "        },",
          "    };",
          "    let pattern = \"(capture1)# comment\\n(capture2)\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.peek_space();",
          "    assert_eq!(parser.peek_space(), Some('('));",
          "    assert_eq!(parser.pos(), 0);",
          "    assert_eq!(parser.char(), '(');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]