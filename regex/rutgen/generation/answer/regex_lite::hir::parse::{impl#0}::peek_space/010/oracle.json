[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: None, nest_limit: 10, flags: Flags { ignore_whitespace: true, ..Default::default() } };",
          "    let pattern = \"a b c\";",
          "    let parser = Parser::new(config, pattern);",
          "    let _ = parser.peek_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.peek_space(), Some('a'));",
          "    assert_eq!(parser.pos(), 0);",
          "    assert!(parser.flags().ignore_whitespace);",
          "    assert!(!parser.is_done());"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: None, nest_limit: 10, flags: Flags { ignore_whitespace: true, ..Default::default() } };",
          "    let pattern = \"a b c\";",
          "    let parser = Parser::new(config, pattern);",
          "    let _ = parser.peek_space();",
          "    assert_eq!(parser.peek_space(), Some('a'));",
          "    assert_eq!(parser.pos(), 0);",
          "    assert!(parser.flags().ignore_whitespace);",
          "    assert!(!parser.is_done());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: None, nest_limit: 10, flags: Flags { ignore_whitespace: true, ..Default::default() } };",
          "    let pattern = \"   a b c\"; // Starts with whitespace, but 'a' is non-whitespace",
          "    let parser = Parser::new(config, pattern);",
          "    parser.pos.set(0); // Set position to 0",
          "    let _ = parser.peek_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.peek_space(), Some('a'));"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: None, nest_limit: 10, flags: Flags { ignore_whitespace: true, ..Default::default() } };",
          "    let pattern = \"   a b c\"; // Starts with whitespace, but 'a' is non-whitespace",
          "    let parser = Parser::new(config, pattern);",
          "    parser.pos.set(0); // Set position to 0",
          "    let _ = parser.peek_space();",
          "    assert_eq!(parser.peek_space(), Some('a'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: None, nest_limit: 10, flags: Flags { ignore_whitespace: true, ..Default::default() } };",
          "    let pattern = \"a   b c\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.pos.set(1); // Set position after 'a'",
          "    let _ = parser.peek_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.peek_space(), Some('b'));",
          "    assert_eq!(parser.pos(), 1);",
          "    assert_eq!(parser.flags().ignore_whitespace, true);",
          "    assert!(!parser.is_done());",
          "    assert_eq!(parser.pattern(), \"a   b c\");",
          "    assert_eq!(parser.char().len_utf8(), 1);"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: None, nest_limit: 10, flags: Flags { ignore_whitespace: true, ..Default::default() } };",
          "    let pattern = \"a   b c\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.pos.set(1); // Set position after 'a'",
          "    let _ = parser.peek_space();",
          "    assert_eq!(parser.peek_space(), Some('b'));",
          "    assert_eq!(parser.pos(), 1);",
          "    assert_eq!(parser.flags().ignore_whitespace, true);",
          "    assert!(!parser.is_done());",
          "    assert_eq!(parser.pattern(), \"a   b c\");",
          "    assert_eq!(parser.char().len_utf8(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: None, nest_limit: 10, flags: Flags { ignore_whitespace: true, ..Default::default() } };",
          "    let pattern = \"abc def\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.pos.set(3); // Set position after 'abc'",
          "    let _ = parser.peek_space();",
          "}"
        ],
        "oracle": [
          "    let config = Config { size_limit: None, nest_limit: 10, flags: Flags { ignore_whitespace: true, ..Default::default() } };",
          "    let pattern = \"abc def\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.pos.set(3); // Set position after 'abc'",
          "    let result = parser.peek_space();",
          "    assert_eq!(result, Some('d')); // Expecting next non-whitespace character after 'abc' is 'd'"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: None, nest_limit: 10, flags: Flags { ignore_whitespace: true, ..Default::default() } };",
          "    let pattern = \"abc def\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.pos.set(3); // Set position after 'abc'",
          "    let _ = parser.peek_space();",
          "    let config = Config { size_limit: None, nest_limit: 10, flags: Flags { ignore_whitespace: true, ..Default::default() } };",
          "    let pattern = \"abc def\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.pos.set(3); // Set position after 'abc'",
          "    let result = parser.peek_space();",
          "    assert_eq!(result, Some('d')); // Expecting next non-whitespace character after 'abc' is 'd'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]