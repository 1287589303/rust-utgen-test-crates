[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 5,",
          "        flags: Flags {",
          "            ignore_whitespace: true,",
          "            ..Default::default()",
          "        },",
          "    };",
          "    let pattern = \"abc# comment\\nxyz\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('a')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(config.flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.peek_space();",
          "}"
        ],
        "oracle": [
          "    assert!(!parser.is_done());",
          "    assert!(parser.flags().ignore_whitespace);",
          "    assert_eq!(parser.pattern(), \"abc# comment\\nxyz\");",
          "    assert_eq!(parser.pos(), 0);",
          "    assert_eq!(parser.char(), 'a');",
          "    assert_eq!(parser.peek_space(), Some('x'));",
          "    assert!(parser.capture_index.get() == 0);",
          "    assert!(parser.depth.get() == 0);",
          "    assert_eq!(parser.capture_names.borrow().len(), 0);"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 5,",
          "        flags: Flags {",
          "            ignore_whitespace: true,",
          "            ..Default::default()",
          "        },",
          "    };",
          "    let pattern = \"abc# comment\\nxyz\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('a')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(config.flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.peek_space();",
          "    assert!(!parser.is_done());",
          "    assert!(parser.flags().ignore_whitespace);",
          "    assert_eq!(parser.pattern(), \"abc# comment\\nxyz\");",
          "    assert_eq!(parser.pos(), 0);",
          "    assert_eq!(parser.char(), 'a');",
          "    assert_eq!(parser.peek_space(), Some('x'));",
          "    assert!(parser.capture_index.get() == 0);",
          "    assert!(parser.depth.get() == 0);",
          "    assert_eq!(parser.capture_names.borrow().len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 5,",
          "        flags: Flags {",
          "            ignore_whitespace: true,",
          "            ..Default::default()",
          "        },",
          "    };",
          "    let pattern = \"def# starts comment\\nghi\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(3),",
          "        char: Cell::new(Some('d')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(config.flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.peek_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some('g'));"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 5,",
          "        flags: Flags {",
          "            ignore_whitespace: true,",
          "            ..Default::default()",
          "        },",
          "    };",
          "    let pattern = \"def# starts comment\\nghi\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(3),",
          "        char: Cell::new(Some('d')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(config.flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.peek_space();",
          "    assert_eq!(_result, Some('g'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 5,",
          "        flags: Flags {",
          "            ignore_whitespace: true,",
          "            ..Default::default()",
          "        },",
          "    };",
          "    let pattern = \"xyz# comment end\\nabc\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(20),",
          "        char: Cell::new(Some('a')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(config.flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.peek_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.peek_space(), Some('a'));",
          "    assert_eq!(parser.pos.get(), 20);",
          "    assert_eq!(parser.flags().ignore_whitespace, true);",
          "    assert!(!parser.is_done());",
          "    assert_eq!(parser.pattern(), \"xyz# comment end\\nabc\");",
          "    assert_eq!(parser.char.get(), Some('a'));",
          "    assert_eq!(parser.capture_index.get(), 0);"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 5,",
          "        flags: Flags {",
          "            ignore_whitespace: true,",
          "            ..Default::default()",
          "        },",
          "    };",
          "    let pattern = \"xyz# comment end\\nabc\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(20),",
          "        char: Cell::new(Some('a')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(config.flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.peek_space();",
          "    assert_eq!(parser.peek_space(), Some('a'));",
          "    assert_eq!(parser.pos.get(), 20);",
          "    assert_eq!(parser.flags().ignore_whitespace, true);",
          "    assert!(!parser.is_done());",
          "    assert_eq!(parser.pattern(), \"xyz# comment end\\nabc\");",
          "    assert_eq!(parser.char.get(), Some('a'));",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]