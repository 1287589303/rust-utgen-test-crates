[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        size_limit: None,",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            ignore_whitespace: true,",
          "            ..Default::default()",
          "        }",
          "    };",
          "    let pattern = \"a*b+c\";",
          "    let parser = Parser::new(config, pattern);",
          "    let result = parser.peek_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some('b'));",
          "    assert!(parser.pos() > 0);",
          "    assert!(parser.char().is_alphabetic());",
          "    assert!(parser.is_done() == false);",
          "    assert!(parser.flags().ignore_whitespace == true);",
          "    assert!(!parser.pattern().chars().all(|c| c.is_whitespace()));"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        size_limit: None,",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            ignore_whitespace: true,",
          "            ..Default::default()",
          "        }",
          "    };",
          "    let pattern = \"a*b+c\";",
          "    let parser = Parser::new(config, pattern);",
          "    let result = parser.peek_space();",
          "    assert_eq!(result, Some('b'));",
          "    assert!(parser.pos() > 0);",
          "    assert!(parser.char().is_alphabetic());",
          "    assert!(parser.is_done() == false);",
          "    assert!(parser.flags().ignore_whitespace == true);",
          "    assert!(!parser.pattern().chars().all(|c| c.is_whitespace()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        size_limit: None,",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            ignore_whitespace: true,",
          "            ..Default::default()",
          "        }",
          "    };",
          "    let pattern = \"abc#this is a comment\";",
          "    let parser = Parser::new(config, pattern);",
          "    let result = parser.peek_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some('a'));",
          "    assert_eq!(parser.pos(), 0);",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.char.get(), Some('a'));",
          "    assert!(parser.flags().ignore_whitespace);",
          "    assert!(!parser.is_done());"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        size_limit: None,",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            ignore_whitespace: true,",
          "            ..Default::default()",
          "        }",
          "    };",
          "    let pattern = \"abc#this is a comment\";",
          "    let parser = Parser::new(config, pattern);",
          "    let result = parser.peek_space();",
          "    assert_eq!(result, Some('a'));",
          "    assert_eq!(parser.pos(), 0);",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.char.get(), Some('a'));",
          "    assert!(parser.flags().ignore_whitespace);",
          "    assert!(!parser.is_done());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        size_limit: None,",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            ignore_whitespace: true,",
          "            ..Default::default()",
          "        }",
          "    };",
          "    let pattern = \"   d+e\";",
          "    let parser = Parser::new(config, pattern);",
          "    let result = parser.peek_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some('d'));",
          "    assert!(parser.pos() > 0);",
          "    assert!(!parser.is_done());",
          "    assert!(!parser.pattern().chars().nth(parser.pos()).unwrap().is_whitespace());",
          "    assert!(!parser.pattern().contains('#'));",
          "    assert!(parser.pattern()[parser.pos()..].contains(|c| !c.is_whitespace()));"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        size_limit: None,",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            ignore_whitespace: true,",
          "            ..Default::default()",
          "        }",
          "    };",
          "    let pattern = \"   d+e\";",
          "    let parser = Parser::new(config, pattern);",
          "    let result = parser.peek_space();",
          "    assert_eq!(result, Some('d'));",
          "    assert!(parser.pos() > 0);",
          "    assert!(!parser.is_done());",
          "    assert!(!parser.pattern().chars().nth(parser.pos()).unwrap().is_whitespace());",
          "    assert!(!parser.pattern().contains('#'));",
          "    assert!(parser.pattern()[parser.pos()..].contains(|c| !c.is_whitespace()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        size_limit: None,",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            ignore_whitespace: true,",
          "            ..Default::default()",
          "        }",
          "    };",
          "    let pattern = \"xyz123\";",
          "    let parser = Parser::new(config, pattern);",
          "    let result = parser.peek_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some('x'));",
          "    assert_eq!(parser.pos(), 0);",
          "    assert!(parser.is_done() == false);",
          "    assert!(parser.flags().ignore_whitespace == true);",
          "    assert!(parser.pattern().chars().count() > 0);",
          "    assert!(parser.peek_space().is_some());",
          "    assert!(parser.peek().is_some());"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        size_limit: None,",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            ignore_whitespace: true,",
          "            ..Default::default()",
          "        }",
          "    };",
          "    let pattern = \"xyz123\";",
          "    let parser = Parser::new(config, pattern);",
          "    let result = parser.peek_space();",
          "    assert_eq!(result, Some('x'));",
          "    assert_eq!(parser.pos(), 0);",
          "    assert!(parser.is_done() == false);",
          "    assert!(parser.flags().ignore_whitespace == true);",
          "    assert!(parser.pattern().chars().count() > 0);",
          "    assert!(parser.peek_space().is_some());",
          "    assert!(parser.peek().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]