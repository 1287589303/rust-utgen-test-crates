[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags { ignore_whitespace: true, ..Default::default() } };",
          "    let pattern = \"abc # this is a comment\\nxyz\";",
          "    let parser = Parser::new(config, pattern);",
          "    let _ = parser.peek_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.peek_space(), Some('x'));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags { ignore_whitespace: true, ..Default::default() } };",
          "    let pattern = \"abc # this is a comment\\nxyz\";",
          "    let parser = Parser::new(config, pattern);",
          "    let _ = parser.peek_space();",
          "    assert_eq!(parser.peek_space(), Some('x'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags { ignore_whitespace: true, ..Default::default() } };",
          "    let pattern = \"abc xyz\";",
          "    let parser = Parser::new(config, pattern);",
          "    let _ = parser.peek_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.flags().ignore_whitespace, true);",
          "    assert_eq!(parser.is_done(), false);",
          "    assert!(parser.pattern().chars().next().is_some());",
          "    assert!(!parser.pattern().chars().next().unwrap().is_whitespace());",
          "    assert!(!in_comment);",
          "    assert_eq!(ch, '#');",
          "    assert!(in_comment);",
          "    assert_ne!(ch, '\\n');",
          "    assert!(!parser.pattern().chars().any(|ch| ch.is_whitespace()));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags { ignore_whitespace: true, ..Default::default() } };",
          "    let pattern = \"abc xyz\";",
          "    let parser = Parser::new(config, pattern);",
          "    let _ = parser.peek_space();",
          "    assert_eq!(parser.flags().ignore_whitespace, true);",
          "    assert_eq!(parser.is_done(), false);",
          "    assert!(parser.pattern().chars().next().is_some());",
          "    assert!(!parser.pattern().chars().next().unwrap().is_whitespace());",
          "    assert!(!in_comment);",
          "    assert_eq!(ch, '#');",
          "    assert!(in_comment);",
          "    assert_ne!(ch, '\\n');",
          "    assert!(!parser.pattern().chars().any(|ch| ch.is_whitespace()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags { ignore_whitespace: true, ..Default::default() } };",
          "    let pattern = \"abc # comment 1\\n# comment 2\\nxyz\";",
          "    let parser = Parser::new(config, pattern);",
          "    let _ = parser.peek_space();",
          "}"
        ],
        "oracle": [
          "    self.flags().ignore_whitespace == true",
          "    self.is_done() == false",
          "    parser.pattern() == \"abc # comment 1\\n# comment 2\\nxyz\"",
          "    parser.pos() == 0",
          "    parser.char() == 'a'",
          "    parser.peek() == Some('b')",
          "    parser.peek_space() == Some('b')",
          "    parser.bump_space() == false",
          "    parser.bump() == true",
          "    parser.bump_if(\"#\") == false",
          "    parser.peek_space() == Some('b')",
          "    parser.pos() == 1",
          "    parser.char() == 'b'",
          "    parser.peek_space() == Some('c')"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags { ignore_whitespace: true, ..Default::default() } };",
          "    let pattern = \"abc # comment 1\\n# comment 2\\nxyz\";",
          "    let parser = Parser::new(config, pattern);",
          "    let _ = parser.peek_space();",
          "    self.flags().ignore_whitespace == true",
          "    self.is_done() == false",
          "    parser.pattern() == \"abc # comment 1\\n# comment 2\\nxyz\"",
          "    parser.pos() == 0",
          "    parser.char() == 'a'",
          "    parser.peek() == Some('b')",
          "    parser.peek_space() == Some('b')",
          "    parser.bump_space() == false",
          "    parser.bump() == true",
          "    parser.bump_if(\"#\") == false",
          "    parser.peek_space() == Some('b')",
          "    parser.pos() == 1",
          "    parser.char() == 'b'",
          "    parser.peek_space() == Some('c')",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags { ignore_whitespace: true, ..Default::default() } };",
          "    let pattern = \"abc \\n# comment\\n xyz\";",
          "    let parser = Parser::new(config, pattern);",
          "    let _ = parser.peek_space();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.peek_space(), Some('x'));",
          "    assert_eq!(parser.pos(), 6);",
          "    assert!(!parser.is_done());",
          "    assert_eq!(parser.flags().ignore_whitespace, true);",
          "    assert!(parser.pattern().len() > 0);",
          "    assert!(parser.char().is_some());"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags { ignore_whitespace: true, ..Default::default() } };",
          "    let pattern = \"abc \\n# comment\\n xyz\";",
          "    let parser = Parser::new(config, pattern);",
          "    let _ = parser.peek_space();",
          "    assert_eq!(parser.peek_space(), Some('x'));",
          "    assert_eq!(parser.pos(), 6);",
          "    assert!(!parser.is_done());",
          "    assert_eq!(parser.flags().ignore_whitespace, true);",
          "    assert!(parser.pattern().len() > 0);",
          "    assert!(parser.char().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags { ignore_whitespace: true, ..Default::default() } };",
          "    let pattern = \"abc # comment\\n #another comment\\nxyz\";",
          "    let parser = Parser::new(config, pattern);",
          "    let _ = parser.peek_space();",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 10, flags: Flags { ignore_whitespace: true, ..Default::default() } };",
          "    let pattern = \"abc # comment\\n #another comment\\nxyz\";",
          "    let parser = Parser::new(config, pattern);",
          "    assert_eq!(parser.peek_space(), Some('x'));",
          "    let config = Config { nest_limit: 10, flags: Flags { ignore_whitespace: true, ..Default::default() } };",
          "    let pattern = \"abc#xyz\";",
          "    let parser = Parser::new(config, pattern);",
          "    assert_eq!(parser.peek_space(), Some('x'));",
          "    let config = Config { nest_limit: 10, flags: Flags { ignore_whitespace: true, ..Default::default() } };",
          "    let pattern = \"#abc\\nxyz\";",
          "    let parser = Parser::new(config, pattern);",
          "    assert_eq!(parser.peek_space(), Some('x'));",
          "    let config = Config { nest_limit: 10, flags: Flags { ignore_whitespace: true, ..Default::default() } };",
          "    let pattern = \"abc # comment\\n   \";",
          "    let parser = Parser::new(config, pattern);",
          "    assert_eq!(parser.peek_space(), None);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags { ignore_whitespace: true, ..Default::default() } };",
          "    let pattern = \"abc # comment\\n #another comment\\nxyz\";",
          "    let parser = Parser::new(config, pattern);",
          "    let _ = parser.peek_space();",
          "    let config = Config { nest_limit: 10, flags: Flags { ignore_whitespace: true, ..Default::default() } };",
          "    let pattern = \"abc # comment\\n #another comment\\nxyz\";",
          "    let parser = Parser::new(config, pattern);",
          "    assert_eq!(parser.peek_space(), Some('x'));",
          "    let config = Config { nest_limit: 10, flags: Flags { ignore_whitespace: true, ..Default::default() } };",
          "    let pattern = \"abc#xyz\";",
          "    let parser = Parser::new(config, pattern);",
          "    assert_eq!(parser.peek_space(), Some('x'));",
          "    let config = Config { nest_limit: 10, flags: Flags { ignore_whitespace: true, ..Default::default() } };",
          "    let pattern = \"#abc\\nxyz\";",
          "    let parser = Parser::new(config, pattern);",
          "    assert_eq!(parser.peek_space(), Some('x'));",
          "    let config = Config { nest_limit: 10, flags: Flags { ignore_whitespace: true, ..Default::default() } };",
          "    let pattern = \"abc # comment\\n   \";",
          "    let parser = Parser::new(config, pattern);",
          "    assert_eq!(parser.peek_space(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]