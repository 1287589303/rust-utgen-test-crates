[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let utf8_sequence = Utf8Sequence::One(Utf8Range { start: 0, end: 0 });",
          "    let mut iter = utf8_sequence.into_iter();",
          "    let _ = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.len(), 1);",
          "    assert!(iter.next().is_some());",
          "    assert_eq!(iter.next(), None);",
          "    assert_eq!(utf8_sequence.as_slice().len(), 1);",
          "    assert_eq!(utf8_sequence.as_slice()[0].start, 0);",
          "    assert_eq!(utf8_sequence.as_slice()[0].end, 0);",
          "    iter.reverse();",
          "    assert_eq!(iter.next().unwrap().start, 0);",
          "    assert_eq!(iter.next().unwrap().end, 0);"
        ],
        "code": [
          "{",
          "    let utf8_sequence = Utf8Sequence::One(Utf8Range { start: 0, end: 0 });",
          "    let mut iter = utf8_sequence.into_iter();",
          "    let _ = iter.next();",
          "    assert_eq!(iter.len(), 1);",
          "    assert!(iter.next().is_some());",
          "    assert_eq!(iter.next(), None);",
          "    assert_eq!(utf8_sequence.as_slice().len(), 1);",
          "    assert_eq!(utf8_sequence.as_slice()[0].start, 0);",
          "    assert_eq!(utf8_sequence.as_slice()[0].end, 0);",
          "    iter.reverse();",
          "    assert_eq!(iter.next().unwrap().start, 0);",
          "    assert_eq!(iter.next().unwrap().end, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let utf8_sequence = Utf8Sequence::Two([",
          "        Utf8Range { start: 1, end: 1 },",
          "        Utf8Range { start: 2, end: 2 },",
          "    ]);",
          "    let mut iter = utf8_sequence.into_iter();",
          "    let _ = iter.next();",
          "    let _ = iter.next();",
          "}"
        ],
        "oracle": [
          "    utf8_sequence.as_slice() == &[Utf8Range { start: 1, end: 1 }, Utf8Range { start: 2, end: 2 }]",
          "    iter.next().is_some() == true",
          "    iter.next().is_some() == false"
        ],
        "code": [
          "{",
          "    let utf8_sequence = Utf8Sequence::Two([",
          "        Utf8Range { start: 1, end: 1 },",
          "        Utf8Range { start: 2, end: 2 },",
          "    ]);",
          "    let mut iter = utf8_sequence.into_iter();",
          "    let _ = iter.next();",
          "    let _ = iter.next();",
          "    utf8_sequence.as_slice() == &[Utf8Range { start: 1, end: 1 }, Utf8Range { start: 2, end: 2 }]",
          "    iter.next().is_some() == true",
          "    iter.next().is_some() == false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let utf8_sequence = Utf8Sequence::Three([",
          "        Utf8Range { start: 1, end: 1 },",
          "        Utf8Range { start: 2, end: 2 },",
          "        Utf8Range { start: 3, end: 3 },",
          "    ]);",
          "    let mut iter = utf8_sequence.into_iter();",
          "    let _ = iter.next();",
          "    let _ = iter.next();",
          "    let _ = iter.next();",
          "}"
        ],
        "oracle": [
          "    utf8_sequence.as_slice().len() == 3",
          "    utf8_sequence.as_slice()[0].start == 1",
          "    utf8_sequence.as_slice()[0].end == 1",
          "    utf8_sequence.as_slice()[1].start == 2",
          "    utf8_sequence.as_slice()[1].end == 2",
          "    utf8_sequence.as_slice()[2].start == 3",
          "    utf8_sequence.as_slice()[2].end == 3",
          "    iter.len() == 3",
          "    iter.next().is_some() == true",
          "    iter.next().is_some() == true",
          "    iter.next().is_some() == true",
          "    iter.next().is_none() == true"
        ],
        "code": [
          "{",
          "    let utf8_sequence = Utf8Sequence::Three([",
          "        Utf8Range { start: 1, end: 1 },",
          "        Utf8Range { start: 2, end: 2 },",
          "        Utf8Range { start: 3, end: 3 },",
          "    ]);",
          "    let mut iter = utf8_sequence.into_iter();",
          "    let _ = iter.next();",
          "    let _ = iter.next();",
          "    let _ = iter.next();",
          "    utf8_sequence.as_slice().len() == 3",
          "    utf8_sequence.as_slice()[0].start == 1",
          "    utf8_sequence.as_slice()[0].end == 1",
          "    utf8_sequence.as_slice()[1].start == 2",
          "    utf8_sequence.as_slice()[1].end == 2",
          "    utf8_sequence.as_slice()[2].start == 3",
          "    utf8_sequence.as_slice()[2].end == 3",
          "    iter.len() == 3",
          "    iter.next().is_some() == true",
          "    iter.next().is_some() == true",
          "    iter.next().is_some() == true",
          "    iter.next().is_none() == true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let utf8_sequence = Utf8Sequence::Four([",
          "        Utf8Range { start: 1, end: 1 },",
          "        Utf8Range { start: 2, end: 2 },",
          "        Utf8Range { start: 3, end: 3 },",
          "        Utf8Range { start: 4, end: 4 },",
          "    ]);",
          "    let mut iter = utf8_sequence.into_iter();",
          "    let _ = iter.next();",
          "    let _ = iter.next();",
          "    let _ = iter.next();",
          "    let _ = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(utf8_sequence.len(), 4);",
          "    assert_eq!(iter.next().map(|r| r.start), Some(&1));",
          "    assert_eq!(iter.next().map(|r| r.start), Some(&2));",
          "    assert_eq!(iter.next().map(|r| r.start), Some(&3));",
          "    assert_eq!(iter.next().map(|r| r.start), Some(&4));",
          "    assert_eq!(iter.next(), None);"
        ],
        "code": [
          "{",
          "    let utf8_sequence = Utf8Sequence::Four([",
          "        Utf8Range { start: 1, end: 1 },",
          "        Utf8Range { start: 2, end: 2 },",
          "        Utf8Range { start: 3, end: 3 },",
          "        Utf8Range { start: 4, end: 4 },",
          "    ]);",
          "    let mut iter = utf8_sequence.into_iter();",
          "    let _ = iter.next();",
          "    let _ = iter.next();",
          "    let _ = iter.next();",
          "    let _ = iter.next();",
          "    assert_eq!(utf8_sequence.len(), 4);",
          "    assert_eq!(iter.next().map(|r| r.start), Some(&1));",
          "    assert_eq!(iter.next().map(|r| r.start), Some(&2));",
          "    assert_eq!(iter.next().map(|r| r.start), Some(&3));",
          "    assert_eq!(iter.next().map(|r| r.start), Some(&4));",
          "    assert_eq!(iter.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let utf8_sequence = Utf8Sequence::One(Utf8Range { start: 0, end: 0 });",
          "    let mut iter: core::slice::Iter<'_, Utf8Range> = utf8_sequence.as_slice().iter();",
          "    assert!(iter.next().is_some());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.len(), 1);",
          "    assert_eq!(iter.next().unwrap(), &Utf8Range { start: 0, end: 0 });",
          "    assert!(iter.next().is_none());",
          "    let utf8_sequence_two = Utf8Sequence::Two([Utf8Range { start: 1, end: 1 }, Utf8Range { start: 2, end: 2 }]);",
          "    let mut iter_two = utf8_sequence_two.as_slice().iter();",
          "    assert!(iter_two.next().is_some());",
          "    assert_eq!(iter_two.len(), 2);",
          "    assert_eq!(iter_two.next().unwrap(), &Utf8Range { start: 1, end: 1 });",
          "    assert!(iter_two.next().is_some());",
          "    assert_eq!(iter_two.len(), 1);",
          "    assert_eq!(iter_two.next().unwrap(), &Utf8Range { start: 2, end: 2 });",
          "    assert!(iter_two.next().is_none());"
        ],
        "code": [
          "{",
          "    let utf8_sequence = Utf8Sequence::One(Utf8Range { start: 0, end: 0 });",
          "    let mut iter: core::slice::Iter<'_, Utf8Range> = utf8_sequence.as_slice().iter();",
          "    assert!(iter.next().is_some());",
          "    assert_eq!(iter.len(), 1);",
          "    assert_eq!(iter.next().unwrap(), &Utf8Range { start: 0, end: 0 });",
          "    assert!(iter.next().is_none());",
          "    let utf8_sequence_two = Utf8Sequence::Two([Utf8Range { start: 1, end: 1 }, Utf8Range { start: 2, end: 2 }]);",
          "    let mut iter_two = utf8_sequence_two.as_slice().iter();",
          "    assert!(iter_two.next().is_some());",
          "    assert_eq!(iter_two.len(), 2);",
          "    assert_eq!(iter_two.next().unwrap(), &Utf8Range { start: 1, end: 1 });",
          "    assert!(iter_two.next().is_some());",
          "    assert_eq!(iter_two.len(), 1);",
          "    assert_eq!(iter_two.next().unwrap(), &Utf8Range { start: 2, end: 2 });",
          "    assert!(iter_two.next().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]