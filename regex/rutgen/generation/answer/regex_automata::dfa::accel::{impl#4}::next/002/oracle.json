[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct AccelArray {",
          "        data: [AccelTy; 2],",
          "    }",
          "",
          "    impl AsRef<[AccelTy]> for AccelArray {",
          "        fn as_ref(&self) -> &[AccelTy] {",
          "            &self.data",
          "        }",
          "    }",
          "    ",
          "    let accels = Accels { accels: AccelArray { data: [1, 2] } };",
          "    let mut iter = IterAccels { accels: &accels, i: 0 };",
          "    let result = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Accel { bytes: [/* values for first Accel */] }));",
          "    assert_eq!(iter.i, 1);"
        ],
        "code": [
          "{",
          "    struct AccelArray {",
          "        data: [AccelTy; 2],",
          "    }",
          "",
          "    impl AsRef<[AccelTy]> for AccelArray {",
          "        fn as_ref(&self) -> &[AccelTy] {",
          "            &self.data",
          "        }",
          "    }",
          "    ",
          "    let accels = Accels { accels: AccelArray { data: [1, 2] } };",
          "    let mut iter = IterAccels { accels: &accels, i: 0 };",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(Accel { bytes: [/* values for first Accel */] }));",
          "    assert_eq!(iter.i, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct AccelArray {",
          "        data: [AccelTy; 3],",
          "    }",
          "",
          "    impl AsRef<[AccelTy]> for AccelArray {",
          "        fn as_ref(&self) -> &[AccelTy] {",
          "            &self.data",
          "        }",
          "    }",
          "    ",
          "    let accels = Accels { accels: AccelArray { data: [10, 20, 30] } };",
          "    let mut iter = IterAccels { accels: &accels, i: 1 };",
          "    let result = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Accel::from_slice(&[10, 0, 0, 0, 0, 0, 0, 0]).expect(\"Valid Accel\")));",
          "    assert_eq!(iter.i, 2);",
          "    assert!(iter.next().is_some());",
          "    assert_eq!(iter.i, 3);",
          "    assert!(iter.next().is_none());"
        ],
        "code": [
          "{",
          "    struct AccelArray {",
          "        data: [AccelTy; 3],",
          "    }",
          "",
          "    impl AsRef<[AccelTy]> for AccelArray {",
          "        fn as_ref(&self) -> &[AccelTy] {",
          "            &self.data",
          "        }",
          "    }",
          "    ",
          "    let accels = Accels { accels: AccelArray { data: [10, 20, 30] } };",
          "    let mut iter = IterAccels { accels: &accels, i: 1 };",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(Accel::from_slice(&[10, 0, 0, 0, 0, 0, 0, 0]).expect(\"Valid Accel\")));",
          "    assert_eq!(iter.i, 2);",
          "    assert!(iter.next().is_some());",
          "    assert_eq!(iter.i, 3);",
          "    assert!(iter.next().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct AccelArray {",
          "        data: [AccelTy; 1],",
          "    }",
          "",
          "    impl AsRef<[AccelTy]> for AccelArray {",
          "        fn as_ref(&self) -> &[AccelTy] {",
          "            &self.data",
          "        }",
          "    }",
          "    ",
          "    let accels = Accels { accels: AccelArray { data: [100] } };",
          "    let mut iter = IterAccels { accels: &accels, i: 0 };",
          "    let result = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().bytes, [0, 0, 0, 0, 0, 0, 0, 0]);"
        ],
        "code": [
          "{",
          "    struct AccelArray {",
          "        data: [AccelTy; 1],",
          "    }",
          "",
          "    impl AsRef<[AccelTy]> for AccelArray {",
          "        fn as_ref(&self) -> &[AccelTy] {",
          "            &self.data",
          "        }",
          "    }",
          "    ",
          "    let accels = Accels { accels: AccelArray { data: [100] } };",
          "    let mut iter = IterAccels { accels: &accels, i: 0 };",
          "    let result = iter.next();",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().bytes, [0, 0, 0, 0, 0, 0, 0, 0]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]