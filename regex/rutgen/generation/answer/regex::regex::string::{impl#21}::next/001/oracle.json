[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = \"Rust programming language\";",
          "    let pattern = regex::Regex::new(r\"\\s+\").unwrap(); // split on whitespace",
          "    let it = pattern.split(haystack);",
          "    let mut split = Split { haystack, it };",
          "    let _ = split.next();",
          "}"
        ],
        "oracle": [
          "    let haystack = \"Rust programming language\";",
          "    let pattern = regex::Regex::new(r\"\\s+\").unwrap();",
          "    let it = pattern.split(haystack);",
          "    let mut split = Split { haystack, it };",
          "    assert_eq!(split.next(), Some(\"Rust\"));",
          "    let _ = split.next(); // advance the iterator",
          "    assert_eq!(split.next(), Some(\"programming\"));",
          "    let _ = split.next(); // advance the iterator",
          "    assert_eq!(split.next(), Some(\"language\"));",
          "    let _ = split.next(); // advance the iterator",
          "    assert_eq!(split.next(), None); // no more elements"
        ],
        "code": [
          "{",
          "    let haystack = \"Rust programming language\";",
          "    let pattern = regex::Regex::new(r\"\\s+\").unwrap(); // split on whitespace",
          "    let it = pattern.split(haystack);",
          "    let mut split = Split { haystack, it };",
          "    let _ = split.next();",
          "    let haystack = \"Rust programming language\";",
          "    let pattern = regex::Regex::new(r\"\\s+\").unwrap();",
          "    let it = pattern.split(haystack);",
          "    let mut split = Split { haystack, it };",
          "    assert_eq!(split.next(), Some(\"Rust\"));",
          "    let _ = split.next(); // advance the iterator",
          "    assert_eq!(split.next(), Some(\"programming\"));",
          "    let _ = split.next(); // advance the iterator",
          "    assert_eq!(split.next(), Some(\"language\"));",
          "    let _ = split.next(); // advance the iterator",
          "    assert_eq!(split.next(), None); // no more elements",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = \"\"; // empty haystack",
          "    let pattern = regex::Regex::new(r\"\\s+\").unwrap(); ",
          "    let it = pattern.split(haystack);",
          "    let mut split = Split { haystack, it };",
          "    let _ = split.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(split.next(), None);"
        ],
        "code": [
          "{",
          "    let haystack = \"\"; // empty haystack",
          "    let pattern = regex::Regex::new(r\"\\s+\").unwrap(); ",
          "    let it = pattern.split(haystack);",
          "    let mut split = Split { haystack, it };",
          "    let _ = split.next();",
          "    assert_eq!(split.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = \"Rust\"; // single word without spaces",
          "    let pattern = regex::Regex::new(r\"\\s+\").unwrap(); ",
          "    let it = pattern.split(haystack);",
          "    let mut split = Split { haystack, it };",
          "    let _ = split.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(split.haystack, \"Rust\");",
          "    assert!(split.it.next().is_none());",
          "    assert_eq!(split.next(), None);",
          "    split.next();",
          "    assert_eq!(split.next(), None);",
          "    assert_eq!(split.next(), None);"
        ],
        "code": [
          "{",
          "    let haystack = \"Rust\"; // single word without spaces",
          "    let pattern = regex::Regex::new(r\"\\s+\").unwrap(); ",
          "    let it = pattern.split(haystack);",
          "    let mut split = Split { haystack, it };",
          "    let _ = split.next();",
          "    assert_eq!(split.haystack, \"Rust\");",
          "    assert!(split.it.next().is_none());",
          "    assert_eq!(split.next(), None);",
          "    split.next();",
          "    assert_eq!(split.next(), None);",
          "    assert_eq!(split.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = \"a\".repeat(1_000_000); // maximum length edge case",
          "    let pattern = regex::Regex::new(r\"a\").unwrap(); // split on 'a'",
          "    let it = pattern.split(&haystack);",
          "    let mut split = Split { haystack: &haystack, it };",
          "    let _ = split.next();",
          "}"
        ],
        "oracle": [
          "    assert!(split.next().is_some());",
          "    assert_eq!(split.next(), Some(\"\"));",
          "    assert_eq!(split.next(), Some(\"\"));",
          "    assert_eq!(split.next(), None);",
          "    assert_eq!(split.haystack.len(), 1_000_000);",
          "    assert_eq!(split.haystack.chars().filter(|&c| c == 'a').count(), 1_000_000);",
          "    assert_eq!(split.it.next().is_some(), true);",
          "    assert_eq!(split.it.next().unwrap(), 0..1_000_000);",
          "    assert_eq!(split.it.len(), 1_000_001);"
        ],
        "code": [
          "{",
          "    let haystack = \"a\".repeat(1_000_000); // maximum length edge case",
          "    let pattern = regex::Regex::new(r\"a\").unwrap(); // split on 'a'",
          "    let it = pattern.split(&haystack);",
          "    let mut split = Split { haystack: &haystack, it };",
          "    let _ = split.next();",
          "    assert!(split.next().is_some());",
          "    assert_eq!(split.next(), Some(\"\"));",
          "    assert_eq!(split.next(), Some(\"\"));",
          "    assert_eq!(split.next(), None);",
          "    assert_eq!(split.haystack.len(), 1_000_000);",
          "    assert_eq!(split.haystack.chars().filter(|&c| c == 'a').count(), 1_000_000);",
          "    assert_eq!(split.it.next().is_some(), true);",
          "    assert_eq!(split.it.next().unwrap(), 0..1_000_000);",
          "    assert_eq!(split.it.len(), 1_000_001);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = \"start mid end\"; ",
          "    let pattern = regex::Regex::new(r\"\\s+\").unwrap(); ",
          "    let it = pattern.split(haystack);",
          "    let mut split = Split { haystack, it };",
          "    let _ = split.next(); // should handle boundary spans correctly",
          "    let _ = split.next(); // second span",
          "    let _ = split.next(); // third span",
          "}"
        ],
        "oracle": [
          "    assert_eq!(split.next(), Some(\"start\")); // first span",
          "    assert_eq!(split.next(), Some(\"mid\")); // second span",
          "    assert_eq!(split.next(), Some(\"end\")); // third span",
          "    assert_eq!(split.next(), None); // no more spans, should return None"
        ],
        "code": [
          "{",
          "    let haystack = \"start mid end\"; ",
          "    let pattern = regex::Regex::new(r\"\\s+\").unwrap(); ",
          "    let it = pattern.split(haystack);",
          "    let mut split = Split { haystack, it };",
          "    let _ = split.next(); // should handle boundary spans correctly",
          "    let _ = split.next(); // second span",
          "    let _ = split.next(); // third span",
          "    assert_eq!(split.next(), Some(\"start\")); // first span",
          "    assert_eq!(split.next(), Some(\"mid\")); // second span",
          "    assert_eq!(split.next(), Some(\"end\")); // third span",
          "    assert_eq!(split.next(), None); // no more spans, should return None",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]