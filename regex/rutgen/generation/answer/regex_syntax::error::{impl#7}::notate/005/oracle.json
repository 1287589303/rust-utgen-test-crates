[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"\";",
          "    let line_number_width = 0;",
          "    let by_line = vec![vec![]];",
          "    let multi_line = vec![];",
          "    let spans = Spans {",
          "        pattern,",
          "        line_number_width,",
          "        by_line,",
          "        multi_line,",
          "    };",
          "    spans.notate();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(spans.notate(), \"    \\n\");"
        ],
        "code": [
          "{",
          "    let pattern = \"\";",
          "    let line_number_width = 0;",
          "    let by_line = vec![vec![]];",
          "    let multi_line = vec![];",
          "    let spans = Spans {",
          "        pattern,",
          "        line_number_width,",
          "        by_line,",
          "        multi_line,",
          "    };",
          "    spans.notate();",
          "    assert_eq!(spans.notate(), \"    \\n\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"This is a test.\";",
          "    let line_number_width = 0;",
          "    let by_line = vec![vec![]];",
          "    let multi_line = vec![];",
          "    let spans = Spans {",
          "        pattern,",
          "        line_number_width,",
          "        by_line,",
          "        multi_line,",
          "    };",
          "    spans.notate();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(spans.notate(), \"    This is a test.\\n\");"
        ],
        "code": [
          "{",
          "    let pattern = \"This is a test.\";",
          "    let line_number_width = 0;",
          "    let by_line = vec![vec![]];",
          "    let multi_line = vec![];",
          "    let spans = Spans {",
          "        pattern,",
          "        line_number_width,",
          "        by_line,",
          "        multi_line,",
          "    };",
          "    spans.notate();",
          "    assert_eq!(spans.notate(), \"    This is a test.\\n\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"Line one.\\nLine two.\\nLine three.\";",
          "    let line_number_width = 0;",
          "    let by_line = vec![vec![], vec![], vec![]];",
          "    let multi_line = vec![];",
          "    let spans = Spans {",
          "        pattern,",
          "        line_number_width,",
          "        by_line,",
          "        multi_line,",
          "    };",
          "    spans.notate();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(spans.notate(), \"    Line one.\\n    Line two.\\n    Line three.\\n\");",
          "    assert!(spans.notate().contains(\"Line one.\"));",
          "    assert!(spans.notate().contains(\"Line two.\"));",
          "    assert!(spans.notate().contains(\"Line three.\"));",
          "    assert!(!spans.notate().contains(\"^\"));",
          "    assert_eq!(spans.line_number_width, 0);",
          "    assert_eq!(spans.by_line.len(), 3);",
          "    assert!(spans.multi_line.is_empty());"
        ],
        "code": [
          "{",
          "    let pattern = \"Line one.\\nLine two.\\nLine three.\";",
          "    let line_number_width = 0;",
          "    let by_line = vec![vec![], vec![], vec![]];",
          "    let multi_line = vec![];",
          "    let spans = Spans {",
          "        pattern,",
          "        line_number_width,",
          "        by_line,",
          "        multi_line,",
          "    };",
          "    spans.notate();",
          "    assert_eq!(spans.notate(), \"    Line one.\\n    Line two.\\n    Line three.\\n\");",
          "    assert!(spans.notate().contains(\"Line one.\"));",
          "    assert!(spans.notate().contains(\"Line two.\"));",
          "    assert!(spans.notate().contains(\"Line three.\"));",
          "    assert!(!spans.notate().contains(\"^\"));",
          "    assert_eq!(spans.line_number_width, 0);",
          "    assert_eq!(spans.by_line.len(), 3);",
          "    assert!(spans.multi_line.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]