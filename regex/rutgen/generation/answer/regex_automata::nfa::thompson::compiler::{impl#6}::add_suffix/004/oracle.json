[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::default();",
          "    let mut state = Utf8State {",
          "        compiled: Utf8BoundedMap::default(),",
          "        uncompiled: vec![Utf8Node {",
          "            trans: vec![],",
          "            last: None,",
          "        }],",
          "    };",
          "    ",
          "    let mut compiler = Utf8Compiler::new(&mut builder, &mut state).unwrap();",
          "",
          "    let ranges = vec![",
          "        Utf8Range { start: 65, end: 90 }, // A-Z",
          "    ];",
          "",
          "    state.uncompiled.push(Utf8Node {",
          "        trans: vec![],",
          "        last: Some(Utf8LastTransition { start: 0, end: 0 }),",
          "    });",
          "",
          "    compiler.add_suffix(&ranges);",
          "}"
        ],
        "oracle": [
          "    assert!(self.state.uncompiled.len() > 0);",
          "    assert!(self.state.uncompiled.last().unwrap().last.is_some());",
          "    assert_eq!(self.state.uncompiled.last().unwrap().last.as_ref().unwrap().start, 65);",
          "    assert_eq!(self.state.uncompiled.last().unwrap().last.as_ref().unwrap().end, 90);",
          "    assert_eq!(self.state.uncompiled.len(), 2);",
          "    assert!(self.state.uncompiled[0].last.is_none());"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::default();",
          "    let mut state = Utf8State {",
          "        compiled: Utf8BoundedMap::default(),",
          "        uncompiled: vec![Utf8Node {",
          "            trans: vec![],",
          "            last: None,",
          "        }],",
          "    };",
          "    ",
          "    let mut compiler = Utf8Compiler::new(&mut builder, &mut state).unwrap();",
          "",
          "    let ranges = vec![",
          "        Utf8Range { start: 65, end: 90 }, // A-Z",
          "    ];",
          "",
          "    state.uncompiled.push(Utf8Node {",
          "        trans: vec![],",
          "        last: Some(Utf8LastTransition { start: 0, end: 0 }),",
          "    });",
          "",
          "    compiler.add_suffix(&ranges);",
          "    assert!(self.state.uncompiled.len() > 0);",
          "    assert!(self.state.uncompiled.last().unwrap().last.is_some());",
          "    assert_eq!(self.state.uncompiled.last().unwrap().last.as_ref().unwrap().start, 65);",
          "    assert_eq!(self.state.uncompiled.last().unwrap().last.as_ref().unwrap().end, 90);",
          "    assert_eq!(self.state.uncompiled.len(), 2);",
          "    assert!(self.state.uncompiled[0].last.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::default();",
          "    let mut state = Utf8State {",
          "        compiled: Utf8BoundedMap::default(),",
          "        uncompiled: vec![",
          "            Utf8Node {",
          "                trans: vec![],",
          "                last: None,",
          "            },",
          "            Utf8Node {",
          "                trans: vec![],",
          "                last: Some(Utf8LastTransition { start: 0, end: 0 }),",
          "            },",
          "        ],",
          "    };",
          "",
          "    let mut compiler = Utf8Compiler::new(&mut builder, &mut state).unwrap();",
          "",
          "    let ranges = vec![",
          "        Utf8Range { start: 10, end: 20 },",
          "        Utf8Range { start: 30, end: 40 },",
          "    ];",
          "",
          "    compiler.add_suffix(&ranges);",
          "}"
        ],
        "oracle": [
          "    assert!(compiler.state.uncompiled[1].last.is_some());",
          "    assert_eq!(compiler.state.uncompiled.len(), 3);",
          "    assert_eq!(compiler.state.uncompiled[2].last.unwrap().start, 30);",
          "    assert_eq!(compiler.state.uncompiled[2].last.unwrap().end, 40);",
          "    assert_eq!(compiler.state.uncompiled[1].last.unwrap().start, 0);",
          "    assert_eq!(compiler.state.uncompiled[1].last.unwrap().end, 0);"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::default();",
          "    let mut state = Utf8State {",
          "        compiled: Utf8BoundedMap::default(),",
          "        uncompiled: vec![",
          "            Utf8Node {",
          "                trans: vec![],",
          "                last: None,",
          "            },",
          "            Utf8Node {",
          "                trans: vec![],",
          "                last: Some(Utf8LastTransition { start: 0, end: 0 }),",
          "            },",
          "        ],",
          "    };",
          "",
          "    let mut compiler = Utf8Compiler::new(&mut builder, &mut state).unwrap();",
          "",
          "    let ranges = vec![",
          "        Utf8Range { start: 10, end: 20 },",
          "        Utf8Range { start: 30, end: 40 },",
          "    ];",
          "",
          "    compiler.add_suffix(&ranges);",
          "    assert!(compiler.state.uncompiled[1].last.is_some());",
          "    assert_eq!(compiler.state.uncompiled.len(), 3);",
          "    assert_eq!(compiler.state.uncompiled[2].last.unwrap().start, 30);",
          "    assert_eq!(compiler.state.uncompiled[2].last.unwrap().end, 40);",
          "    assert_eq!(compiler.state.uncompiled[1].last.unwrap().start, 0);",
          "    assert_eq!(compiler.state.uncompiled[1].last.unwrap().end, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]