[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Start::from_usize(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Start::NonWordByte));",
          "    let result = Start::from_usize(1);",
          "    assert_eq!(result, Some(Start::WordByte));",
          "    let result = Start::from_usize(2);",
          "    assert_eq!(result, Some(Start::Text));",
          "    let result = Start::from_usize(3);",
          "    assert_eq!(result, Some(Start::LineLF));",
          "    let result = Start::from_usize(4);",
          "    assert_eq!(result, Some(Start::LineCR));",
          "    let result = Start::from_usize(5);",
          "    assert_eq!(result, Some(Start::CustomLineTerminator));",
          "    let result = Start::from_usize(6);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let result = Start::from_usize(0);",
          "    assert_eq!(result, Some(Start::NonWordByte));",
          "    let result = Start::from_usize(1);",
          "    assert_eq!(result, Some(Start::WordByte));",
          "    let result = Start::from_usize(2);",
          "    assert_eq!(result, Some(Start::Text));",
          "    let result = Start::from_usize(3);",
          "    assert_eq!(result, Some(Start::LineLF));",
          "    let result = Start::from_usize(4);",
          "    assert_eq!(result, Some(Start::LineCR));",
          "    let result = Start::from_usize(5);",
          "    assert_eq!(result, Some(Start::CustomLineTerminator));",
          "    let result = Start::from_usize(6);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Start::from_usize(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Start::from_usize(0), Some(Start::NonWordByte));",
          "    assert_eq!(Start::from_usize(1), Some(Start::WordByte));",
          "    assert_eq!(Start::from_usize(2), Some(Start::Text));",
          "    assert_eq!(Start::from_usize(3), Some(Start::LineLF));",
          "    assert_eq!(Start::from_usize(4), Some(Start::LineCR));",
          "    assert_eq!(Start::from_usize(5), Some(Start::CustomLineTerminator));",
          "    assert_eq!(Start::from_usize(6), None);",
          "    assert_eq!(Start::from_usize(usize::MAX), None);"
        ],
        "code": [
          "{",
          "    let result = Start::from_usize(1);",
          "    assert_eq!(Start::from_usize(0), Some(Start::NonWordByte));",
          "    assert_eq!(Start::from_usize(1), Some(Start::WordByte));",
          "    assert_eq!(Start::from_usize(2), Some(Start::Text));",
          "    assert_eq!(Start::from_usize(3), Some(Start::LineLF));",
          "    assert_eq!(Start::from_usize(4), Some(Start::LineCR));",
          "    assert_eq!(Start::from_usize(5), Some(Start::CustomLineTerminator));",
          "    assert_eq!(Start::from_usize(6), None);",
          "    assert_eq!(Start::from_usize(usize::MAX), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Start::from_usize(2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Start::from_usize(0), Some(Start::NonWordByte));",
          "    assert_eq!(Start::from_usize(1), Some(Start::WordByte));",
          "    assert_eq!(Start::from_usize(2), Some(Start::Text));",
          "    assert_eq!(Start::from_usize(3), Some(Start::LineLF));",
          "    assert_eq!(Start::from_usize(4), Some(Start::LineCR));",
          "    assert_eq!(Start::from_usize(5), Some(Start::CustomLineTerminator));",
          "    assert_eq!(Start::from_usize(6), None);"
        ],
        "code": [
          "{",
          "    let result = Start::from_usize(2);",
          "    assert_eq!(Start::from_usize(0), Some(Start::NonWordByte));",
          "    assert_eq!(Start::from_usize(1), Some(Start::WordByte));",
          "    assert_eq!(Start::from_usize(2), Some(Start::Text));",
          "    assert_eq!(Start::from_usize(3), Some(Start::LineLF));",
          "    assert_eq!(Start::from_usize(4), Some(Start::LineCR));",
          "    assert_eq!(Start::from_usize(5), Some(Start::CustomLineTerminator));",
          "    assert_eq!(Start::from_usize(6), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Start::from_usize(3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Start::from_usize(0), Some(Start::NonWordByte));",
          "    assert_eq!(Start::from_usize(1), Some(Start::WordByte));",
          "    assert_eq!(Start::from_usize(2), Some(Start::Text));",
          "    assert_eq!(Start::from_usize(3), Some(Start::LineLF));",
          "    assert_eq!(Start::from_usize(4), Some(Start::LineCR));",
          "    assert_eq!(Start::from_usize(5), Some(Start::CustomLineTerminator));",
          "    assert_eq!(Start::from_usize(6), None);",
          "    assert_eq!(Start::from_usize(usize::MAX), None);"
        ],
        "code": [
          "{",
          "    let result = Start::from_usize(3);",
          "    assert_eq!(Start::from_usize(0), Some(Start::NonWordByte));",
          "    assert_eq!(Start::from_usize(1), Some(Start::WordByte));",
          "    assert_eq!(Start::from_usize(2), Some(Start::Text));",
          "    assert_eq!(Start::from_usize(3), Some(Start::LineLF));",
          "    assert_eq!(Start::from_usize(4), Some(Start::LineCR));",
          "    assert_eq!(Start::from_usize(5), Some(Start::CustomLineTerminator));",
          "    assert_eq!(Start::from_usize(6), None);",
          "    assert_eq!(Start::from_usize(usize::MAX), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Start::from_usize(4);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Start::LineCR));",
          "    let result = Start::from_usize(5);",
          "    assert_eq!(result, Some(Start::CustomLineTerminator));",
          "    let result = Start::from_usize(3);",
          "    assert_eq!(result, Some(Start::LineLF));",
          "    let result = Start::from_usize(2);",
          "    assert_eq!(result, Some(Start::Text));",
          "    let result = Start::from_usize(1);",
          "    assert_eq!(result, Some(Start::WordByte));",
          "    let result = Start::from_usize(0);",
          "    assert_eq!(result, Some(Start::NonWordByte));",
          "    let result = Start::from_usize(6);",
          "    assert_eq!(result, None));"
        ],
        "code": [
          "{",
          "    let result = Start::from_usize(4);",
          "    assert_eq!(result, Some(Start::LineCR));",
          "    let result = Start::from_usize(5);",
          "    assert_eq!(result, Some(Start::CustomLineTerminator));",
          "    let result = Start::from_usize(3);",
          "    assert_eq!(result, Some(Start::LineLF));",
          "    let result = Start::from_usize(2);",
          "    assert_eq!(result, Some(Start::Text));",
          "    let result = Start::from_usize(1);",
          "    assert_eq!(result, Some(Start::WordByte));",
          "    let result = Start::from_usize(0);",
          "    assert_eq!(result, Some(Start::NonWordByte));",
          "    let result = Start::from_usize(6);",
          "    assert_eq!(result, None));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Start::from_usize(5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Start::from_usize(0), Some(Start::NonWordByte));",
          "    assert_eq!(Start::from_usize(1), Some(Start::WordByte));",
          "    assert_eq!(Start::from_usize(2), Some(Start::Text));",
          "    assert_eq!(Start::from_usize(3), Some(Start::LineLF));",
          "    assert_eq!(Start::from_usize(4), Some(Start::LineCR));",
          "    assert_eq!(Start::from_usize(5), Some(Start::CustomLineTerminator));",
          "    assert_eq!(Start::from_usize(6), None);",
          "    assert_eq!(Start::from_usize(usize::MAX), None);"
        ],
        "code": [
          "{",
          "    let result = Start::from_usize(5);",
          "    assert_eq!(Start::from_usize(0), Some(Start::NonWordByte));",
          "    assert_eq!(Start::from_usize(1), Some(Start::WordByte));",
          "    assert_eq!(Start::from_usize(2), Some(Start::Text));",
          "    assert_eq!(Start::from_usize(3), Some(Start::LineLF));",
          "    assert_eq!(Start::from_usize(4), Some(Start::LineCR));",
          "    assert_eq!(Start::from_usize(5), Some(Start::CustomLineTerminator));",
          "    assert_eq!(Start::from_usize(6), None);",
          "    assert_eq!(Start::from_usize(usize::MAX), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Start::from_usize(6);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Start::from_usize(0), Some(Start::NonWordByte));",
          "    assert_eq!(Start::from_usize(1), Some(Start::WordByte));",
          "    assert_eq!(Start::from_usize(2), Some(Start::Text));",
          "    assert_eq!(Start::from_usize(3), Some(Start::LineLF));",
          "    assert_eq!(Start::from_usize(4), Some(Start::LineCR));",
          "    assert_eq!(Start::from_usize(5), Some(Start::CustomLineTerminator));",
          "    assert_eq!(Start::from_usize(6), None);"
        ],
        "code": [
          "{",
          "    let result = Start::from_usize(6);",
          "    assert_eq!(Start::from_usize(0), Some(Start::NonWordByte));",
          "    assert_eq!(Start::from_usize(1), Some(Start::WordByte));",
          "    assert_eq!(Start::from_usize(2), Some(Start::Text));",
          "    assert_eq!(Start::from_usize(3), Some(Start::LineLF));",
          "    assert_eq!(Start::from_usize(4), Some(Start::LineCR));",
          "    assert_eq!(Start::from_usize(5), Some(Start::CustomLineTerminator));",
          "    assert_eq!(Start::from_usize(6), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]