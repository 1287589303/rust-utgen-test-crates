[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let n = 2;",
          "    let result = Start::from_usize(n);",
          "}"
        ],
        "oracle": [
          "    let n = 2;",
          "    let expected = Some(Start::Text);",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let n = 2;",
          "    let result = Start::from_usize(n);",
          "    let n = 2;",
          "    let expected = Some(Start::Text);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let n = 0;",
          "    let result = Start::from_usize(n);",
          "}"
        ],
        "oracle": [
          "    let n = 0;",
          "    let result = Start::from_usize(n);",
          "    assert_eq!(result, None);",
          "    ",
          "    let n = 1;",
          "    let result = Start::from_usize(n);",
          "    assert_eq!(result, Some(Start::WordByte));",
          "    ",
          "    let n = 2;",
          "    let result = Start::from_usize(n);",
          "    assert_eq!(result, Some(Start::Text));",
          "    ",
          "    let n = 3;",
          "    let result = Start::from_usize(n);",
          "    assert_eq!(result, Some(Start::LineLF));",
          "    ",
          "    let n = 4;",
          "    let result = Start::from_usize(n);",
          "    assert_eq!(result, Some(Start::LineCR));",
          "    ",
          "    let n = 5;",
          "    let result = Start::from_usize(n);",
          "    assert_eq!(result, Some(Start::CustomLineTerminator));",
          "    ",
          "    let n = 6;",
          "    let result = Start::from_usize(n);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let n = 0;",
          "    let result = Start::from_usize(n);",
          "    let n = 0;",
          "    let result = Start::from_usize(n);",
          "    assert_eq!(result, None);",
          "    ",
          "    let n = 1;",
          "    let result = Start::from_usize(n);",
          "    assert_eq!(result, Some(Start::WordByte));",
          "    ",
          "    let n = 2;",
          "    let result = Start::from_usize(n);",
          "    assert_eq!(result, Some(Start::Text));",
          "    ",
          "    let n = 3;",
          "    let result = Start::from_usize(n);",
          "    assert_eq!(result, Some(Start::LineLF));",
          "    ",
          "    let n = 4;",
          "    let result = Start::from_usize(n);",
          "    assert_eq!(result, Some(Start::LineCR));",
          "    ",
          "    let n = 5;",
          "    let result = Start::from_usize(n);",
          "    assert_eq!(result, Some(Start::CustomLineTerminator));",
          "    ",
          "    let n = 6;",
          "    let result = Start::from_usize(n);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let n = 1;",
          "    let result = Start::from_usize(n);",
          "}"
        ],
        "oracle": [
          "    let n = 2;",
          "    let expected = Some(Start::Text);",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let n = 1;",
          "    let result = Start::from_usize(n);",
          "    let n = 2;",
          "    let expected = Some(Start::Text);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let n = 3;",
          "    let result = Start::from_usize(n);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Start::Text));"
        ],
        "code": [
          "{",
          "    let n = 3;",
          "    let result = Start::from_usize(n);",
          "    assert_eq!(result, Some(Start::Text));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let n = 4;",
          "    let result = Start::from_usize(n);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Start::Text));"
        ],
        "code": [
          "{",
          "    let n = 4;",
          "    let result = Start::from_usize(n);",
          "    assert_eq!(result, Some(Start::Text));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let n = 5;",
          "    let result = Start::from_usize(n);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);",
          "    let n = 2;",
          "    let result = Start::from_usize(n);",
          "    assert_eq!(result, Some(Start::Text));"
        ],
        "code": [
          "{",
          "    let n = 5;",
          "    let result = Start::from_usize(n);",
          "    assert_eq!(result, None);",
          "    let n = 2;",
          "    let result = Start::from_usize(n);",
          "    assert_eq!(result, Some(Start::Text));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let n = 6;",
          "    let result = Start::from_usize(n);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let n = 6;",
          "    let result = Start::from_usize(n);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]