[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let self_value = PatternEpsilons(0);",
          "    let epsilons_value = Epsilons(0);",
          "    let result = self_value.set_epsilons(epsilons_value);",
          "}"
        ],
        "oracle": [
          "    let self_value = PatternEpsilons(0);",
          "    let epsilons_value = Epsilons(0);",
          "    let expected = PatternEpsilons((self_value.0 & PatternEpsilons::PATTERN_ID_MASK) | (u64::from(epsilons_value.0) & PatternEpsilons::EPSILONS_MASK));",
          "    assert_eq!(result, expected);",
          "    ",
          "    let self_value = PatternEpsilons(0xFFFFFC00_00000000);",
          "    let epsilons_value = Epsilons(0x00000000_FFFFFFFFFF);",
          "    let expected = PatternEpsilons((self_value.0 & PatternEpsilons::PATTERN_ID_MASK) | (u64::from(epsilons_value.0) & PatternEpsilons::EPSILONS_MASK));",
          "    assert_eq!(result, expected);",
          "    ",
          "    let self_value = PatternEpsilons(0x12345678_90ABCDEF);",
          "    let epsilons_value = Epsilons(0x00000000_00000001);",
          "    let expected = PatternEpsilons((self_value.0 & PatternEpsilons::PATTERN_ID_MASK) | (u64::from(epsilons_value.0) & PatternEpsilons::EPSILONS_MASK));",
          "    assert_eq!(result, expected);",
          "    ",
          "    let self_value = PatternEpsilons(0xFFFFFFFFFFFFFFFF);",
          "    let epsilons_value = Epsilons(0x00000000_00000000);",
          "    let expected = PatternEpsilons((self_value.0 & PatternEpsilons::PATTERN_ID_MASK) | (u64::from(epsilons_value.0) & PatternEpsilons::EPSILONS_MASK));",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let self_value = PatternEpsilons(0);",
          "    let epsilons_value = Epsilons(0);",
          "    let result = self_value.set_epsilons(epsilons_value);",
          "    let self_value = PatternEpsilons(0);",
          "    let epsilons_value = Epsilons(0);",
          "    let expected = PatternEpsilons((self_value.0 & PatternEpsilons::PATTERN_ID_MASK) | (u64::from(epsilons_value.0) & PatternEpsilons::EPSILONS_MASK));",
          "    assert_eq!(result, expected);",
          "    ",
          "    let self_value = PatternEpsilons(0xFFFFFC00_00000000);",
          "    let epsilons_value = Epsilons(0x00000000_FFFFFFFFFF);",
          "    let expected = PatternEpsilons((self_value.0 & PatternEpsilons::PATTERN_ID_MASK) | (u64::from(epsilons_value.0) & PatternEpsilons::EPSILONS_MASK));",
          "    assert_eq!(result, expected);",
          "    ",
          "    let self_value = PatternEpsilons(0x12345678_90ABCDEF);",
          "    let epsilons_value = Epsilons(0x00000000_00000001);",
          "    let expected = PatternEpsilons((self_value.0 & PatternEpsilons::PATTERN_ID_MASK) | (u64::from(epsilons_value.0) & PatternEpsilons::EPSILONS_MASK));",
          "    assert_eq!(result, expected);",
          "    ",
          "    let self_value = PatternEpsilons(0xFFFFFFFFFFFFFFFF);",
          "    let epsilons_value = Epsilons(0x00000000_00000000);",
          "    let expected = PatternEpsilons((self_value.0 & PatternEpsilons::PATTERN_ID_MASK) | (u64::from(epsilons_value.0) & PatternEpsilons::EPSILONS_MASK));",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let self_value = PatternEpsilons(0xFFFFFC00_00000000);",
          "    let epsilons_value = Epsilons(0);",
          "    let result = self_value.set_epsilons(epsilons_value);",
          "}"
        ],
        "oracle": [
          "    result == PatternEpsilons(0xFFFFFC00_00000000)",
          "    result pattern_id() == Some(PatternID(0))",
          "    result.epsilons() == Epsilons(0)",
          "    result.is_empty() == false",
          "    self_value.is_empty() == false",
          "    epsilons_value.0 == 0",
          "    self_value.0 == 0xFFFFFC00_00000000"
        ],
        "code": [
          "{",
          "    let self_value = PatternEpsilons(0xFFFFFC00_00000000);",
          "    let epsilons_value = Epsilons(0);",
          "    let result = self_value.set_epsilons(epsilons_value);",
          "    result == PatternEpsilons(0xFFFFFC00_00000000)",
          "    result pattern_id() == Some(PatternID(0))",
          "    result.epsilons() == Epsilons(0)",
          "    result.is_empty() == false",
          "    self_value.is_empty() == false",
          "    epsilons_value.0 == 0",
          "    self_value.0 == 0xFFFFFC00_00000000",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let self_value = PatternEpsilons(0);",
          "    let epsilons_value = Epsilons(0x000003FF_FFFFFFFF);",
          "    let result = self_value.set_epsilons(epsilons_value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, PatternEpsilons(0x000003FF_FFFFFFFF));",
          "    assert_eq!(result.epsilons().0, 0x000003FF_FFFFFFFF);",
          "    assert_eq!(result.pattern_id(), Some(PatternID(0)));",
          "    assert!(!result.is_empty());"
        ],
        "code": [
          "{",
          "    let self_value = PatternEpsilons(0);",
          "    let epsilons_value = Epsilons(0x000003FF_FFFFFFFF);",
          "    let result = self_value.set_epsilons(epsilons_value);",
          "    assert_eq!(result, PatternEpsilons(0x000003FF_FFFFFFFF));",
          "    assert_eq!(result.epsilons().0, 0x000003FF_FFFFFFFF);",
          "    assert_eq!(result.pattern_id(), Some(PatternID(0)));",
          "    assert!(!result.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let self_value = PatternEpsilons(0x7FFFFFFF_FFFFFFFF);",
          "    let epsilons_value = Epsilons(0x1FFFFFFF);",
          "    let result = self_value.set_epsilons(epsilons_value);",
          "}"
        ],
        "oracle": [
          "    let self_value = PatternEpsilons(0x7FFFFFFF_FFFFFFFF);",
          "    let epsilons_value = Epsilons(0x1FFFFFFF);",
          "    let expected = PatternEpsilons(",
          "    (self_value.0 & PatternEpsilons::PATTERN_ID_MASK)",
          "    | (u64::from(epsilons_value.0) & PatternEpsilons::EPSILONS_MASK)",
          "    );",
          "    assert_eq!(result, expected);",
          "    ",
          "    let self_value = PatternEpsilons(0x00000000_00000000);",
          "    let epsilons_value = Epsilons(0x00000000);",
          "    let expected = PatternEpsilons(",
          "    (self_value.0 & PatternEpsilons::PATTERN_ID_MASK)",
          "    | (u64::from(epsilons_value.0) & PatternEpsilons::EPSILONS_MASK)",
          "    );",
          "    assert_eq!(result, expected);",
          "    ",
          "    let self_value = PatternEpsilons(0xFFFFFFFF_FFFFFFFF);",
          "    let epsilons_value = Epsilons(0x0);",
          "    let expected = PatternEpsilons(",
          "    (self_value.0 & PatternEpsilons::PATTERN_ID_MASK)",
          "    | (u64::from(epsilons_value.0) & PatternEpsilons::EPSILONS_MASK)",
          "    );",
          "    assert_eq!(result, expected);",
          "    ",
          "    let self_value = PatternEpsilons(0x3FFFFFFFFFFFFFFF);",
          "    let epsilons_value = Epsilons(0xFFFFFFFF);",
          "    let expected = PatternEpsilons(",
          "    (self_value.0 & PatternEpsilons::PATTERN_ID_MASK)",
          "    | (u64::from(epsilons_value.0) & PatternEpsilons::EPSILONS_MASK)",
          "    );",
          "    assert_eq!(result, expected);",
          "    ",
          "    let self_value = PatternEpsilons(0xFFFFFFFF_FFFFFFFF);",
          "    let epsilons_value = Epsilons(0x1);",
          "    let expected = PatternEpsilons(",
          "    (self_value.0 & PatternEpsilons::PATTERN_ID_MASK)",
          "    | (u64::from(epsilons_value.0) & PatternEpsilons::EPSILONS_MASK)",
          "    );",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let self_value = PatternEpsilons(0x7FFFFFFF_FFFFFFFF);",
          "    let epsilons_value = Epsilons(0x1FFFFFFF);",
          "    let result = self_value.set_epsilons(epsilons_value);",
          "    let self_value = PatternEpsilons(0x7FFFFFFF_FFFFFFFF);",
          "    let epsilons_value = Epsilons(0x1FFFFFFF);",
          "    let expected = PatternEpsilons(",
          "    (self_value.0 & PatternEpsilons::PATTERN_ID_MASK)",
          "    | (u64::from(epsilons_value.0) & PatternEpsilons::EPSILONS_MASK)",
          "    );",
          "    assert_eq!(result, expected);",
          "    ",
          "    let self_value = PatternEpsilons(0x00000000_00000000);",
          "    let epsilons_value = Epsilons(0x00000000);",
          "    let expected = PatternEpsilons(",
          "    (self_value.0 & PatternEpsilons::PATTERN_ID_MASK)",
          "    | (u64::from(epsilons_value.0) & PatternEpsilons::EPSILONS_MASK)",
          "    );",
          "    assert_eq!(result, expected);",
          "    ",
          "    let self_value = PatternEpsilons(0xFFFFFFFF_FFFFFFFF);",
          "    let epsilons_value = Epsilons(0x0);",
          "    let expected = PatternEpsilons(",
          "    (self_value.0 & PatternEpsilons::PATTERN_ID_MASK)",
          "    | (u64::from(epsilons_value.0) & PatternEpsilons::EPSILONS_MASK)",
          "    );",
          "    assert_eq!(result, expected);",
          "    ",
          "    let self_value = PatternEpsilons(0x3FFFFFFFFFFFFFFF);",
          "    let epsilons_value = Epsilons(0xFFFFFFFF);",
          "    let expected = PatternEpsilons(",
          "    (self_value.0 & PatternEpsilons::PATTERN_ID_MASK)",
          "    | (u64::from(epsilons_value.0) & PatternEpsilons::EPSILONS_MASK)",
          "    );",
          "    assert_eq!(result, expected);",
          "    ",
          "    let self_value = PatternEpsilons(0xFFFFFFFF_FFFFFFFF);",
          "    let epsilons_value = Epsilons(0x1);",
          "    let expected = PatternEpsilons(",
          "    (self_value.0 & PatternEpsilons::PATTERN_ID_MASK)",
          "    | (u64::from(epsilons_value.0) & PatternEpsilons::EPSILONS_MASK)",
          "    );",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let self_value = PatternEpsilons(0xFFFFFC00_00000000);",
          "    let epsilons_value = Epsilons(0x000003FF_FFFFFFFF);",
          "    let result = self_value.set_epsilons(epsilons_value);",
          "}"
        ],
        "oracle": [
          "    let expected_result = PatternEpsilons(0xFFFFFC00_000003FF);",
          "    assert_eq!(result, expected_result);",
          "    assert!(!result.is_empty());",
          "    assert_eq!(result.pattern_id_unchecked(), self_value.pattern_id_unchecked());",
          "    assert_eq!(result.epsilons().0, epsilons_value.0);",
          "    assert_eq!(result.0 & PatternEpsilons::PATTERN_ID_MASK, self_value.0 & PatternEpsilons::PATTERN_ID_MASK);",
          "    assert_eq!(result.0 & PatternEpsilons::EPSILONS_MASK, u64::from(epsilons_value.0) & PatternEpsilons::EPSILONS_MASK);"
        ],
        "code": [
          "{",
          "    let self_value = PatternEpsilons(0xFFFFFC00_00000000);",
          "    let epsilons_value = Epsilons(0x000003FF_FFFFFFFF);",
          "    let result = self_value.set_epsilons(epsilons_value);",
          "    let expected_result = PatternEpsilons(0xFFFFFC00_000003FF);",
          "    assert_eq!(result, expected_result);",
          "    assert!(!result.is_empty());",
          "    assert_eq!(result.pattern_id_unchecked(), self_value.pattern_id_unchecked());",
          "    assert_eq!(result.epsilons().0, epsilons_value.0);",
          "    assert_eq!(result.0 & PatternEpsilons::PATTERN_ID_MASK, self_value.0 & PatternEpsilons::PATTERN_ID_MASK);",
          "    assert_eq!(result.0 & PatternEpsilons::EPSILONS_MASK, u64::from(epsilons_value.0) & PatternEpsilons::EPSILONS_MASK);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]