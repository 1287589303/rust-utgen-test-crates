[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().nest_limit(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_nest_limit(), 0);",
          "    let config = Config::new().nest_limit(5);",
          "    assert_eq!(config.get_nest_limit(), 5);",
          "    let config = Config::new().nest_limit(10);",
          "    assert_eq!(config.get_nest_limit(), 10);",
          "    let config = Config::new().nest_limit(u32::MAX);",
          "    assert_eq!(config.get_nest_limit(), u32::MAX);",
          "    let config = Config::new().nest_limit(0).nest_limit(3);",
          "    assert_eq!(config.get_nest_limit(), 3);"
        ],
        "code": [
          "{",
          "    let config = Config::new().nest_limit(0);",
          "    assert_eq!(config.get_nest_limit(), 0);",
          "    let config = Config::new().nest_limit(5);",
          "    assert_eq!(config.get_nest_limit(), 5);",
          "    let config = Config::new().nest_limit(10);",
          "    assert_eq!(config.get_nest_limit(), 10);",
          "    let config = Config::new().nest_limit(u32::MAX);",
          "    assert_eq!(config.get_nest_limit(), u32::MAX);",
          "    let config = Config::new().nest_limit(0).nest_limit(3);",
          "    assert_eq!(config.get_nest_limit(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().nest_limit(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_nest_limit(), 1);",
          "    assert_eq!(config.nest_limit, 1);",
          "    let config_high_limit = Config::new().nest_limit(5);",
          "    assert_eq!(config_high_limit.get_nest_limit(), 5);",
          "    assert_eq!(config_high_limit.nest_limit, 5);",
          "    let config_zero_limit = Config::new().nest_limit(0);",
          "    assert_eq!(config_zero_limit.get_nest_limit(), 0);",
          "    assert_eq!(config_zero_limit.nest_limit, 0);",
          "    let config_large_limit = Config::new().nest_limit(u32::MAX);",
          "    assert_eq!(config_large_limit.get_nest_limit(), u32::MAX);",
          "    assert_eq!(config_large_limit.nest_limit, u32::MAX);",
          "    assert_ne!(config.nest_limit, config_high_limit.nest_limit);",
          "    assert_ne!(config_low_limit, config_zero_limit);"
        ],
        "code": [
          "{",
          "    let config = Config::new().nest_limit(1);",
          "    assert_eq!(config.get_nest_limit(), 1);",
          "    assert_eq!(config.nest_limit, 1);",
          "    let config_high_limit = Config::new().nest_limit(5);",
          "    assert_eq!(config_high_limit.get_nest_limit(), 5);",
          "    assert_eq!(config_high_limit.nest_limit, 5);",
          "    let config_zero_limit = Config::new().nest_limit(0);",
          "    assert_eq!(config_zero_limit.get_nest_limit(), 0);",
          "    assert_eq!(config_zero_limit.nest_limit, 0);",
          "    let config_large_limit = Config::new().nest_limit(u32::MAX);",
          "    assert_eq!(config_large_limit.get_nest_limit(), u32::MAX);",
          "    assert_eq!(config_large_limit.nest_limit, u32::MAX);",
          "    assert_ne!(config.nest_limit, config_high_limit.nest_limit);",
          "    assert_ne!(config_low_limit, config_zero_limit);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().nest_limit(10);",
          "}"
        ],
        "oracle": [
          "    let config = Config::new().nest_limit(10);",
          "    assert_eq!(config.get_nest_limit(), 10);",
          "    let config = Config::new().nest_limit(0);",
          "    assert_eq!(config.get_nest_limit(), 0);",
          "    let config = Config::new().nest_limit(5);",
          "    assert_eq!(config.get_nest_limit(), 5);",
          "    let config = Config::new().nest_limit(u32::MAX);",
          "    assert_eq!(config.get_nest_limit(), u32::MAX);"
        ],
        "code": [
          "{",
          "    let config = Config::new().nest_limit(10);",
          "    let config = Config::new().nest_limit(10);",
          "    assert_eq!(config.get_nest_limit(), 10);",
          "    let config = Config::new().nest_limit(0);",
          "    assert_eq!(config.get_nest_limit(), 0);",
          "    let config = Config::new().nest_limit(5);",
          "    assert_eq!(config.get_nest_limit(), 5);",
          "    let config = Config::new().nest_limit(u32::MAX);",
          "    assert_eq!(config.get_nest_limit(), u32::MAX);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().nest_limit(50);",
          "}"
        ],
        "oracle": [
          "    self.nest_limit == 50",
          "    self.nest_limit != 0",
          "    self.nest_limit > 0",
          "    self.nest_limit <= 50",
          "    self.nest_limit >= 0"
        ],
        "code": [
          "{",
          "    let config = Config::new().nest_limit(50);",
          "    self.nest_limit == 50",
          "    self.nest_limit != 0",
          "    self.nest_limit > 0",
          "    self.nest_limit <= 50",
          "    self.nest_limit >= 0",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().nest_limit(100);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_nest_limit(), 100);"
        ],
        "code": [
          "{",
          "    let config = Config::new().nest_limit(100);",
          "    assert_eq!(config.get_nest_limit(), 100);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().nest_limit(1000);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_nest_limit(), 1000);",
          "    let config_zero = Config::new().nest_limit(0);",
          "    assert_eq!(config_zero.get_nest_limit(), 0);",
          "    let config_large = Config::new().nest_limit(u32::MAX);",
          "    assert_eq!(config_large.get_nest_limit(), u32::MAX);",
          "    let config_negative_limit = Config::new().nest_limit(usize::MAX as u32);",
          "    assert_eq!(config_negative_limit.get_nest_limit(), usize::MAX as u32);"
        ],
        "code": [
          "{",
          "    let config = Config::new().nest_limit(1000);",
          "    assert_eq!(config.get_nest_limit(), 1000);",
          "    let config_zero = Config::new().nest_limit(0);",
          "    assert_eq!(config_zero.get_nest_limit(), 0);",
          "    let config_large = Config::new().nest_limit(u32::MAX);",
          "    assert_eq!(config_large.get_nest_limit(), u32::MAX);",
          "    let config_negative_limit = Config::new().nest_limit(usize::MAX as u32);",
          "    assert_eq!(config_negative_limit.get_nest_limit(), usize::MAX as u32);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]