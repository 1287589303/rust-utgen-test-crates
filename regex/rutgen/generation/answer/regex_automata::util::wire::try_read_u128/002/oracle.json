[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[0u8; 16]; // 16 bytes of data",
          "    let what: &'static str = \"test_value\";",
          "    let result = try_read_u128(slice, what);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), (0, 16));"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[0u8; 16]; // 16 bytes of data",
          "    let what: &'static str = \"test_value\";",
          "    let result = try_read_u128(slice, what);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), (0, 16));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]; // 16 bytes of data",
          "    let what: &'static str = \"non_empty_data\";",
          "    let result = try_read_u128(slice, what);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok((read_u128(slice), size_of::<u128>()));"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]; // 16 bytes of data",
          "    let what: &'static str = \"non_empty_data\";",
          "    let result = try_read_u128(slice, what);",
          "    assert_eq!(result, Ok((read_u128(slice), size_of::<u128>()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]; // 16 bytes of data ",
          "    let what: &'static str = \"high_value\";",
          "    let result = try_read_u128(slice, what);",
          "}"
        ],
        "oracle": [
          "    result.is_ok();",
          "    assert_eq!(result, Ok((u128::from_ne_bytes([255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]), size_of::<u128>())));",
          "    assert_eq!(result.unwrap().1, size_of::<u128>());"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]; // 16 bytes of data ",
          "    let what: &'static str = \"high_value\";",
          "    let result = try_read_u128(slice, what);",
          "    result.is_ok();",
          "    assert_eq!(result, Ok((u128::from_ne_bytes([255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]), size_of::<u128>())));",
          "    assert_eq!(result.unwrap().1, size_of::<u128>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]