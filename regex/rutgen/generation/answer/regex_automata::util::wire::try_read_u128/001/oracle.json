[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[];",
          "    let what: &'static str = \"empty_slice\";",
          "    let _ = try_read_u128(slice, what);",
          "}"
        ],
        "oracle": [
          "    assert!(try_read_u128(slice, what).is_err());",
          "    assert_eq!(try_read_u128(slice, what).unwrap_err().0, DeserializeError::buffer_too_small(what));",
          "    assert_eq!(try_read_u128(slice, what).unwrap_err().0, \"empty_slice\");",
          "    assert_eq!(try_read_u128(slice, what).is_ok(), false);",
          "    assert_eq!(try_read_u128(slice, what).err().unwrap().0, DeserializeError::buffer_too_small(what));"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[];",
          "    let what: &'static str = \"empty_slice\";",
          "    let _ = try_read_u128(slice, what);",
          "    assert!(try_read_u128(slice, what).is_err());",
          "    assert_eq!(try_read_u128(slice, what).unwrap_err().0, DeserializeError::buffer_too_small(what));",
          "    assert_eq!(try_read_u128(slice, what).unwrap_err().0, \"empty_slice\");",
          "    assert_eq!(try_read_u128(slice, what).is_ok(), false);",
          "    assert_eq!(try_read_u128(slice, what).err().unwrap().0, DeserializeError::buffer_too_small(what));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[0x01];",
          "    let what: &'static str = \"one_byte\";",
          "    let _ = try_read_u128(slice, what);",
          "}"
        ],
        "oracle": [
          "    assert!(try_read_u128(slice, what).is_err());",
          "    assert_eq!(try_read_u128(slice, what).unwrap_err().0, DeserializeErrorKind::BufferTooSmall);",
          "    assert_eq!(try_read_u128(slice, what).unwrap_err().0.get_description(), \"Buffer too small for 'one_byte'\");",
          "    assert!(try_read_u128(slice, what).is_err());"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[0x01];",
          "    let what: &'static str = \"one_byte\";",
          "    let _ = try_read_u128(slice, what);",
          "    assert!(try_read_u128(slice, what).is_err());",
          "    assert_eq!(try_read_u128(slice, what).unwrap_err().0, DeserializeErrorKind::BufferTooSmall);",
          "    assert_eq!(try_read_u128(slice, what).unwrap_err().0.get_description(), \"Buffer too small for 'one_byte'\");",
          "    assert!(try_read_u128(slice, what).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[0; 15];",
          "    let what: &'static str = \"fifteen_bytes\";",
          "    let _ = try_read_u128(slice, what);",
          "}"
        ],
        "oracle": [
          "    assert!(try_read_u128(slice, what).is_err());",
          "    assert_eq!(try_read_u128(slice, what).unwrap_err().0, \"buffer_too_small(fifteen_bytes)\");",
          "    assert_eq!(try_read_u128(slice, what).unwrap_err().1, DeserializeErrorKind::BufferTooSmall);"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[0; 15];",
          "    let what: &'static str = \"fifteen_bytes\";",
          "    let _ = try_read_u128(slice, what);",
          "    assert!(try_read_u128(slice, what).is_err());",
          "    assert_eq!(try_read_u128(slice, what).unwrap_err().0, \"buffer_too_small(fifteen_bytes)\");",
          "    assert_eq!(try_read_u128(slice, what).unwrap_err().1, DeserializeErrorKind::BufferTooSmall);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[0; 7];",
          "    let what: &'static str = \"seven_bytes\";",
          "    let _ = try_read_u128(slice, what);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(try_read_u128(slice, what), Err(_)));"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[0; 7];",
          "    let what: &'static str = \"seven_bytes\";",
          "    let _ = try_read_u128(slice, what);",
          "    assert!(matches!(try_read_u128(slice, what), Err(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[0; 14];",
          "    let what: &'static str = \"fourteen_bytes\";",
          "    let _ = try_read_u128(slice, what);",
          "}"
        ],
        "oracle": [
          "    assert!(try_read_u128(slice, what).is_err());",
          "    assert_eq!(try_read_u128(slice, what).unwrap_err().0, DeserializeErrorKind::BufferTooSmall);",
          "    assert!(try_read_u128(slice, what).unwrap_err().0.to_string().contains(\"fourteen_bytes\"));"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[0; 14];",
          "    let what: &'static str = \"fourteen_bytes\";",
          "    let _ = try_read_u128(slice, what);",
          "    assert!(try_read_u128(slice, what).is_err());",
          "    assert_eq!(try_read_u128(slice, what).unwrap_err().0, DeserializeErrorKind::BufferTooSmall);",
          "    assert!(try_read_u128(slice, what).unwrap_err().0.to_string().contains(\"fourteen_bytes\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[0; 2];",
          "    let what: &'static str = \"two_bytes\";",
          "    let _ = try_read_u128(slice, what);",
          "}"
        ],
        "oracle": [
          "    assert!(try_read_u128(slice, what).is_err());",
          "    assert_eq!(try_read_u128(slice, what).unwrap_err().0, DeserializeErrorKind::BufferTooSmall);",
          "    assert!(matches!(try_read_u128(slice, what).unwrap_err(), DeserializeError(_)));"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[0; 2];",
          "    let what: &'static str = \"two_bytes\";",
          "    let _ = try_read_u128(slice, what);",
          "    assert!(try_read_u128(slice, what).is_err());",
          "    assert_eq!(try_read_u128(slice, what).unwrap_err().0, DeserializeErrorKind::BufferTooSmall);",
          "    assert!(matches!(try_read_u128(slice, what).unwrap_err(), DeserializeError(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]