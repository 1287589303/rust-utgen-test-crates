[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: 5, end: 7 };",
          "    let offset = 0;",
          "    let result = span.offset(offset);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Span { start: 5 + 0, end: 7 + 0 });",
          "    assert_eq!(result.start, 5);",
          "    assert_eq!(result.end, 7);",
          "    ",
          "    let offset = 2;",
          "    let result = span.offset(offset);",
          "    assert_eq!(result, Span { start: 5 + 2, end: 7 + 2 });",
          "    assert_eq!(result.start, 7);",
          "    assert_eq!(result.end, 9);",
          "    ",
          "    let offset = 10;",
          "    let result = span.offset(offset);",
          "    assert_eq!(result, Span { start: 5 + 10, end: 7 + 10 });",
          "    assert_eq!(result.start, 15);",
          "    assert_eq!(result.end, 17);"
        ],
        "code": [
          "{",
          "    let span = Span { start: 5, end: 7 };",
          "    let offset = 0;",
          "    let result = span.offset(offset);",
          "    assert_eq!(result, Span { start: 5 + 0, end: 7 + 0 });",
          "    assert_eq!(result.start, 5);",
          "    assert_eq!(result.end, 7);",
          "    ",
          "    let offset = 2;",
          "    let result = span.offset(offset);",
          "    assert_eq!(result, Span { start: 5 + 2, end: 7 + 2 });",
          "    assert_eq!(result.start, 7);",
          "    assert_eq!(result.end, 9);",
          "    ",
          "    let offset = 10;",
          "    let result = span.offset(offset);",
          "    assert_eq!(result, Span { start: 5 + 10, end: 7 + 10 });",
          "    assert_eq!(result.start, 15);",
          "    assert_eq!(result.end, 17);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: 3, end: 8 };",
          "    let offset = 2;",
          "    let result = span.offset(offset);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.start, 5);",
          "    assert_eq!(result.end, 10);",
          "    assert_eq!(result, Span { start: 5, end: 10 });",
          "    assert!(result.contains(5));",
          "    assert!(result.contains(9));",
          "    assert!(!result.contains(4));",
          "    assert!(!result.contains(10));",
          "    assert_eq!(result.len(), 5);",
          "    assert!(!result.is_empty());"
        ],
        "code": [
          "{",
          "    let span = Span { start: 3, end: 8 };",
          "    let offset = 2;",
          "    let result = span.offset(offset);",
          "    assert_eq!(result.start, 5);",
          "    assert_eq!(result.end, 10);",
          "    assert_eq!(result, Span { start: 5, end: 10 });",
          "    assert!(result.contains(5));",
          "    assert!(result.contains(9));",
          "    assert!(!result.contains(4));",
          "    assert!(!result.contains(10));",
          "    assert_eq!(result.len(), 5);",
          "    assert!(!result.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: 0, end: 10 };",
          "    let offset = 5;",
          "    let result = span.offset(offset);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.start, 5);",
          "    assert_eq!(result.end, 15);",
          "    assert_eq!(result, Span { start: 5, end: 15 });",
          "    ",
          "    let span = Span { start: 1, end: 5 };",
          "    let offset = 10;",
          "    let result = span.offset(offset);",
          "    assert_eq!(result.start, 11);",
          "    assert_eq!(result.end, 15);",
          "    assert_eq!(result, Span { start: 11, end: 15 });",
          "    ",
          "    let span = Span { start: 0, end: 0 };",
          "    let offset = 3;",
          "    let result = span.offset(offset);",
          "    assert_eq!(result.start, 3);",
          "    assert_eq!(result.end, 3);",
          "    assert_eq!(result, Span { start: 3, end: 3 });",
          "    ",
          "    let span = Span { start: 10, end: 20 };",
          "    let offset = 0;",
          "    let result = span.offset(offset);",
          "    assert_eq!(result.start, 10);",
          "    assert_eq!(result.end, 20);",
          "    assert_eq!(result, Span { start: 10, end: 20 });",
          "    ",
          "    let span = Span { start: usize::MAX - 5, end: usize::MAX };",
          "    let offset = 1;",
          "    let result = span.offset(offset);",
          "    assert_eq!(result.start, usize::MAX - 4);",
          "    assert_eq!(result.end, usize::MAX + 1);",
          "    assert_eq!(result, Span { start: usize::MAX - 4, end: usize::MAX + 1 });"
        ],
        "code": [
          "{",
          "    let span = Span { start: 0, end: 10 };",
          "    let offset = 5;",
          "    let result = span.offset(offset);",
          "    assert_eq!(result.start, 5);",
          "    assert_eq!(result.end, 15);",
          "    assert_eq!(result, Span { start: 5, end: 15 });",
          "    ",
          "    let span = Span { start: 1, end: 5 };",
          "    let offset = 10;",
          "    let result = span.offset(offset);",
          "    assert_eq!(result.start, 11);",
          "    assert_eq!(result.end, 15);",
          "    assert_eq!(result, Span { start: 11, end: 15 });",
          "    ",
          "    let span = Span { start: 0, end: 0 };",
          "    let offset = 3;",
          "    let result = span.offset(offset);",
          "    assert_eq!(result.start, 3);",
          "    assert_eq!(result.end, 3);",
          "    assert_eq!(result, Span { start: 3, end: 3 });",
          "    ",
          "    let span = Span { start: 10, end: 20 };",
          "    let offset = 0;",
          "    let result = span.offset(offset);",
          "    assert_eq!(result.start, 10);",
          "    assert_eq!(result.end, 20);",
          "    assert_eq!(result, Span { start: 10, end: 20 });",
          "    ",
          "    let span = Span { start: usize::MAX - 5, end: usize::MAX };",
          "    let offset = 1;",
          "    let result = span.offset(offset);",
          "    assert_eq!(result.start, usize::MAX - 4);",
          "    assert_eq!(result.end, usize::MAX + 1);",
          "    assert_eq!(result, Span { start: usize::MAX - 4, end: usize::MAX + 1 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: 1, end: 2 };",
          "    let offset = 10;",
          "    let result = span.offset(offset);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.start, 11);",
          "    assert_eq!(result.end, 12);",
          "    assert_eq!(result.start, span.start + offset);",
          "    assert_eq!(result.end, span.end + offset);",
          "    assert!(result.start > span.start);",
          "    assert!(result.end > span.end);",
          "    assert!(result.start < result.end);"
        ],
        "code": [
          "{",
          "    let span = Span { start: 1, end: 2 };",
          "    let offset = 10;",
          "    let result = span.offset(offset);",
          "    assert_eq!(result.start, 11);",
          "    assert_eq!(result.end, 12);",
          "    assert_eq!(result.start, span.start + offset);",
          "    assert_eq!(result.end, span.end + offset);",
          "    assert!(result.start > span.start);",
          "    assert!(result.end > span.end);",
          "    assert!(result.start < result.end);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: 9, end: 10 };",
          "    let offset = 0;",
          "    let result = span.offset(offset);",
          "}"
        ],
        "oracle": [
          "    let span = Span { start: 9, end: 10 };",
          "    let offset = 0;",
          "    let expected = Span { start: 9 + offset, end: 10 + offset };",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let span = Span { start: 9, end: 10 };",
          "    let offset = 0;",
          "    let result = span.offset(offset);",
          "    let span = Span { start: 9, end: 10 };",
          "    let offset = 0;",
          "    let expected = Span { start: 9 + offset, end: 10 + offset };",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: 2, end: 6 };",
          "    let offset = 4;",
          "    let result = span.offset(offset);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.start, 6);",
          "    assert_eq!(result.end, 10);",
          "    assert_eq!(result, Span { start: 6, end: 10 });",
          "    assert!(result.start > span.start);",
          "    assert!(result.end > span.end);"
        ],
        "code": [
          "{",
          "    let span = Span { start: 2, end: 6 };",
          "    let offset = 4;",
          "    let result = span.offset(offset);",
          "    assert_eq!(result.start, 6);",
          "    assert_eq!(result.end, 10);",
          "    assert_eq!(result, Span { start: 6, end: 10 });",
          "    assert!(result.start > span.start);",
          "    assert!(result.end > span.end);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]