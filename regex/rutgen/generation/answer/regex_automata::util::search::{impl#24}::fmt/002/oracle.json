[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 0x1; ",
          "    let offset = 10; ",
          "    let match_error = MatchError::quit(byte, offset);",
          "    let _ = format!(\"{}\", match_error);",
          "}"
        ],
        "oracle": [
          "    let match_error = MatchError::unsupported_anchored(Anchored::Pattern(PatternID(1)));",
          "    let _ = format!(\"{}\", match_error);",
          "    let match_error = MatchError::unsupported_anchored(Anchored::No);",
          "    let _ = format!(\"{}\", match_error);",
          "    let match_error = MatchError::unsupported_anchored(Anchored::Yes);",
          "    let _ = format!(\"{}\", match_error);",
          "    let match_error = MatchError::gave_up(15);",
          "    let _ = format!(\"{}\", match_error);"
        ],
        "code": [
          "{",
          "    let byte = 0x1; ",
          "    let offset = 10; ",
          "    let match_error = MatchError::quit(byte, offset);",
          "    let _ = format!(\"{}\", match_error);",
          "    let match_error = MatchError::unsupported_anchored(Anchored::Pattern(PatternID(1)));",
          "    let _ = format!(\"{}\", match_error);",
          "    let match_error = MatchError::unsupported_anchored(Anchored::No);",
          "    let _ = format!(\"{}\", match_error);",
          "    let match_error = MatchError::unsupported_anchored(Anchored::Yes);",
          "    let _ = format!(\"{}\", match_error);",
          "    let match_error = MatchError::gave_up(15);",
          "    let _ = format!(\"{}\", match_error);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let offset = 20; ",
          "    let match_error = MatchError::gave_up(offset);",
          "    let _ = format!(\"{}\", match_error);",
          "}"
        ],
        "oracle": [
          "    let match_error_quit = MatchError::quit(0xFF, 10); assert_eq!(format!(\"{}\", match_error_quit), \"quit search after observing byte DebugByte(255) at offset 10\");",
          "    let match_error_gave_up = MatchError::gave_up(15); assert_eq!(format!(\"{}\", match_error_gave_up), \"gave up searching at offset 15\");",
          "    let match_error_haystack_too_long = MatchError::haystack_too_long(1000); assert_eq!(format!(\"{}\", match_error_haystack_too_long), \"haystack of length 1000 is too long\");",
          "    let match_error_unsupported_anchored_yes = MatchError::unsupported_anchored(Anchored::Yes); assert_eq!(format!(\"{}\", match_error_unsupported_anchored_yes), \"anchored searches are not supported or enabled\");",
          "    let match_error_unsupported_anchored_no = MatchError::unsupported_anchored(Anchored::No); assert_eq!(format!(\"{}\", match_error_unsupported_anchored_no), \"unanchored searches are not supported or enabled\");",
          "    let match_error_supported_pattern = MatchError::unsupported_anchored(Anchored::Pattern(PatternID(SmallIndex(5)))); assert_eq!(format!(\"{}\", match_error_supported_pattern), \"anchored searches for a specific pattern (5) are not supported or enabled\");"
        ],
        "code": [
          "{",
          "    let offset = 20; ",
          "    let match_error = MatchError::gave_up(offset);",
          "    let _ = format!(\"{}\", match_error);",
          "    let match_error_quit = MatchError::quit(0xFF, 10); assert_eq!(format!(\"{}\", match_error_quit), \"quit search after observing byte DebugByte(255) at offset 10\");",
          "    let match_error_gave_up = MatchError::gave_up(15); assert_eq!(format!(\"{}\", match_error_gave_up), \"gave up searching at offset 15\");",
          "    let match_error_haystack_too_long = MatchError::haystack_too_long(1000); assert_eq!(format!(\"{}\", match_error_haystack_too_long), \"haystack of length 1000 is too long\");",
          "    let match_error_unsupported_anchored_yes = MatchError::unsupported_anchored(Anchored::Yes); assert_eq!(format!(\"{}\", match_error_unsupported_anchored_yes), \"anchored searches are not supported or enabled\");",
          "    let match_error_unsupported_anchored_no = MatchError::unsupported_anchored(Anchored::No); assert_eq!(format!(\"{}\", match_error_unsupported_anchored_no), \"unanchored searches are not supported or enabled\");",
          "    let match_error_supported_pattern = MatchError::unsupported_anchored(Anchored::Pattern(PatternID(SmallIndex(5)))); assert_eq!(format!(\"{}\", match_error_supported_pattern), \"anchored searches for a specific pattern (5) are not supported or enabled\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let length = 1000; ",
          "    let match_error = MatchError::haystack_too_long(length);",
          "    let _ = format!(\"{}\", match_error);",
          "}"
        ],
        "oracle": [
          "    let match_error_quit = MatchError::quit(0xFF, 5);",
          "    assert_eq!(format!(\"{}\", match_error_quit), \"quit search after observing byte DebugByte(255) at offset 5\");",
          "    let match_error_gave_up = MatchError::gave_up(10);",
          "    assert_eq!(format!(\"{}\", match_error_gave_up), \"gave up searching at offset 10\");",
          "    let match_error_haystack_too_long = MatchError::haystack_too_long(1500);",
          "    assert_eq!(format!(\"{}\", match_error_haystack_too_long), \"haystack of length 1500 is too long\");",
          "    let match_error_unsupported_anchored_yes = MatchError::unsupported_anchored(Anchored::Yes);",
          "    assert_eq!(format!(\"{}\", match_error_unsupported_anchored_yes), \"anchored searches are not supported or enabled\");",
          "    let match_error_unsupported_anchored_no = MatchError::unsupported_anchored(Anchored::No);",
          "    assert_eq!(format!(\"{}\", match_error_unsupported_anchored_no), \"unanchored searches are not supported or enabled\");",
          "    let match_error_unsupported_anchored_pattern = MatchError::unsupported_anchored(Anchored::Pattern(PatternID(3)));",
          "    assert_eq!(format!(\"{}\", match_error_unsupported_anchored_pattern), \"anchored searches for a specific pattern (3) are not supported or enabled\");"
        ],
        "code": [
          "{",
          "    let length = 1000; ",
          "    let match_error = MatchError::haystack_too_long(length);",
          "    let _ = format!(\"{}\", match_error);",
          "    let match_error_quit = MatchError::quit(0xFF, 5);",
          "    assert_eq!(format!(\"{}\", match_error_quit), \"quit search after observing byte DebugByte(255) at offset 5\");",
          "    let match_error_gave_up = MatchError::gave_up(10);",
          "    assert_eq!(format!(\"{}\", match_error_gave_up), \"gave up searching at offset 10\");",
          "    let match_error_haystack_too_long = MatchError::haystack_too_long(1500);",
          "    assert_eq!(format!(\"{}\", match_error_haystack_too_long), \"haystack of length 1500 is too long\");",
          "    let match_error_unsupported_anchored_yes = MatchError::unsupported_anchored(Anchored::Yes);",
          "    assert_eq!(format!(\"{}\", match_error_unsupported_anchored_yes), \"anchored searches are not supported or enabled\");",
          "    let match_error_unsupported_anchored_no = MatchError::unsupported_anchored(Anchored::No);",
          "    assert_eq!(format!(\"{}\", match_error_unsupported_anchored_no), \"unanchored searches are not supported or enabled\");",
          "    let match_error_unsupported_anchored_pattern = MatchError::unsupported_anchored(Anchored::Pattern(PatternID(3)));",
          "    assert_eq!(format!(\"{}\", match_error_unsupported_anchored_pattern), \"anchored searches for a specific pattern (3) are not supported or enabled\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mode = Anchored::Yes; ",
          "    let match_error = MatchError::unsupported_anchored(mode);",
          "    let _ = format!(\"{}\", match_error);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"anchored searches are not supported or enabled\");",
          "    write!(f, \"gave up searching at offset {}\", 0);",
          "    write!(f, \"haystack of length {} is too long\", 100);",
          "    write!(f, \"quit search after observing byte {:?} at offset {}\", DebugByte(255), 10);",
          "    write!(f, \"unanchored searches are not supported or enabled\");",
          "    write!(f, \"anchored searches for a specific pattern ({}) are not supported or enabled\", 5);",
          "    let match_error = MatchError::unsupported_anchored(Anchored::Pattern(PatternID(SmallIndex(1))));",
          "    let match_error = MatchError::gave_up(15);",
          "    let match_error = MatchError::haystack_too_long(1200);",
          "    let match_error = MatchError::quit(128, 5);"
        ],
        "code": [
          "{",
          "    let mode = Anchored::Yes; ",
          "    let match_error = MatchError::unsupported_anchored(mode);",
          "    let _ = format!(\"{}\", match_error);",
          "    write!(f, \"anchored searches are not supported or enabled\");",
          "    write!(f, \"gave up searching at offset {}\", 0);",
          "    write!(f, \"haystack of length {} is too long\", 100);",
          "    write!(f, \"quit search after observing byte {:?} at offset {}\", DebugByte(255), 10);",
          "    write!(f, \"unanchored searches are not supported or enabled\");",
          "    write!(f, \"anchored searches for a specific pattern ({}) are not supported or enabled\", 5);",
          "    let match_error = MatchError::unsupported_anchored(Anchored::Pattern(PatternID(SmallIndex(1))));",
          "    let match_error = MatchError::gave_up(15);",
          "    let match_error = MatchError::haystack_too_long(1200);",
          "    let match_error = MatchError::quit(128, 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mode = Anchored::No; ",
          "    let match_error = MatchError::unsupported_anchored(mode);",
          "    let _ = format!(\"{}\", match_error);",
          "}"
        ],
        "oracle": [
          "    let mode = Anchored::Yes; let match_error = MatchError::unsupported_anchored(mode); let _ = format!(\"{}\", match_error);",
          "    let mode = Anchored::Pattern(PatternID(1)); let match_error = MatchError::unsupported_anchored(mode); let _ = format!(\"{}\", match_error);",
          "    let offset = 5; let match_error = MatchError::gave_up(offset); let _ = format!(\"{}\", match_error);",
          "    let len = 100; let match_error = MatchError::haystack_too_long(len); let _ = format!(\"{}\", match_error);",
          "    let byte = 0xFF; let offset = 10; let match_error = MatchError::quit(byte, offset); let _ = format!(\"{}\", match_error);",
          "    let mode = Anchored::No; let match_error = MatchError::unsupported_anchored(mode); let _ = format!(\"{}\", match_error);",
          "    let mode = Anchored::Yes; let match_error = MatchError::unsupported_anchored(mode); let _ = format!(\"{}\", match_error);",
          "    let mode = Anchored::Pattern(PatternID(2)); let match_error = MatchError::unsupported_anchored(mode); let _ = format!(\"{}\", match_error);"
        ],
        "code": [
          "{",
          "    let mode = Anchored::No; ",
          "    let match_error = MatchError::unsupported_anchored(mode);",
          "    let _ = format!(\"{}\", match_error);",
          "    let mode = Anchored::Yes; let match_error = MatchError::unsupported_anchored(mode); let _ = format!(\"{}\", match_error);",
          "    let mode = Anchored::Pattern(PatternID(1)); let match_error = MatchError::unsupported_anchored(mode); let _ = format!(\"{}\", match_error);",
          "    let offset = 5; let match_error = MatchError::gave_up(offset); let _ = format!(\"{}\", match_error);",
          "    let len = 100; let match_error = MatchError::haystack_too_long(len); let _ = format!(\"{}\", match_error);",
          "    let byte = 0xFF; let offset = 10; let match_error = MatchError::quit(byte, offset); let _ = format!(\"{}\", match_error);",
          "    let mode = Anchored::No; let match_error = MatchError::unsupported_anchored(mode); let _ = format!(\"{}\", match_error);",
          "    let mode = Anchored::Yes; let match_error = MatchError::unsupported_anchored(mode); let _ = format!(\"{}\", match_error);",
          "    let mode = Anchored::Pattern(PatternID(2)); let match_error = MatchError::unsupported_anchored(mode); let _ = format!(\"{}\", match_error);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pid = PatternID(0); ",
          "    let mode = Anchored::Pattern(pid); ",
          "    let match_error = MatchError::unsupported_anchored(mode);",
          "    let _ = format!(\"{}\", match_error);",
          "}"
        ],
        "oracle": [
          "    let pid = PatternID(0);",
          "    let mode = Anchored::Pattern(pid);",
          "    let match_error = MatchError::unsupported_anchored(mode);",
          "    assert_eq!(format!(\"{}\", match_error), \"anchored searches for a specific pattern (0) are not supported or enabled\");",
          "    ",
          "    let mode_no = Anchored::No;",
          "    let match_error_no = MatchError::unsupported_anchored(mode_no);",
          "    assert_eq!(format!(\"{}\", match_error_no), \"unanchored searches are not supported or enabled\");",
          "    ",
          "    let mode_yes = Anchored::Yes;",
          "    let match_error_yes = MatchError::unsupported_anchored(mode_yes);",
          "    assert_eq!(format!(\"{}\", match_error_yes), \"anchored searches are not supported or enabled\");",
          "    ",
          "    let offset = 5;",
          "    let match_error_gave_up = MatchError::gave_up(offset);",
          "    assert_eq!(format!(\"{}\", match_error_gave_up), \"gave up searching at offset 5\");",
          "    ",
          "    let len = 100;",
          "    let match_error_haystack_too_long = MatchError::haystack_too_long(len);",
          "    assert_eq!(format!(\"{}\", match_error_haystack_too_long), \"haystack of length 100 is too long\");"
        ],
        "code": [
          "{",
          "    let pid = PatternID(0); ",
          "    let mode = Anchored::Pattern(pid); ",
          "    let match_error = MatchError::unsupported_anchored(mode);",
          "    let _ = format!(\"{}\", match_error);",
          "    let pid = PatternID(0);",
          "    let mode = Anchored::Pattern(pid);",
          "    let match_error = MatchError::unsupported_anchored(mode);",
          "    assert_eq!(format!(\"{}\", match_error), \"anchored searches for a specific pattern (0) are not supported or enabled\");",
          "    ",
          "    let mode_no = Anchored::No;",
          "    let match_error_no = MatchError::unsupported_anchored(mode_no);",
          "    assert_eq!(format!(\"{}\", match_error_no), \"unanchored searches are not supported or enabled\");",
          "    ",
          "    let mode_yes = Anchored::Yes;",
          "    let match_error_yes = MatchError::unsupported_anchored(mode_yes);",
          "    assert_eq!(format!(\"{}\", match_error_yes), \"anchored searches are not supported or enabled\");",
          "    ",
          "    let offset = 5;",
          "    let match_error_gave_up = MatchError::gave_up(offset);",
          "    assert_eq!(format!(\"{}\", match_error_gave_up), \"gave up searching at offset 5\");",
          "    ",
          "    let len = 100;",
          "    let match_error_haystack_too_long = MatchError::haystack_too_long(len);",
          "    assert_eq!(format!(\"{}\", match_error_haystack_too_long), \"haystack of length 100 is too long\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]