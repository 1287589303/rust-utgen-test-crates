[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_epsilons = PatternEpsilons(1); // Valid pattern ID",
          "    let result = pattern_epsilons.pattern_id();",
          "}"
        ],
        "oracle": [
          "    let pattern_epsilons = PatternEpsilons(1); // Valid pattern ID",
          "    let result = pattern_epsilons.pattern_id();",
          "    assert_eq!(result, Some(PatternID::new_unchecked(1.as_usize())));"
        ],
        "code": [
          "{",
          "    let pattern_epsilons = PatternEpsilons(1); // Valid pattern ID",
          "    let result = pattern_epsilons.pattern_id();",
          "    let pattern_epsilons = PatternEpsilons(1); // Valid pattern ID",
          "    let result = pattern_epsilons.pattern_id();",
          "    assert_eq!(result, Some(PatternID::new_unchecked(1.as_usize())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_epsilons = PatternEpsilons(0); // Minimum value, should return Some",
          "    let result = pattern_epsilons.pattern_id();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().as_usize(), 0);"
        ],
        "code": [
          "{",
          "    let pattern_epsilons = PatternEpsilons(0); // Minimum value, should return Some",
          "    let result = pattern_epsilons.pattern_id();",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().as_usize(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_epsilons = PatternEpsilons(PatternEpsilons::PATTERN_ID_LIMIT - 1); // Just below the limit, should return Some",
          "    let result = pattern_epsilons.pattern_id();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().as_usize(), (PatternEpsilons::PATTERN_ID_LIMIT - 1).as_usize());"
        ],
        "code": [
          "{",
          "    let pattern_epsilons = PatternEpsilons(PatternEpsilons::PATTERN_ID_LIMIT - 1); // Just below the limit, should return Some",
          "    let result = pattern_epsilons.pattern_id();",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().as_usize(), (PatternEpsilons::PATTERN_ID_LIMIT - 1).as_usize());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_epsilons = PatternEpsilons(4194303); // Maximum valid value, should return Some",
          "    let result = pattern_epsilons.pattern_id();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(PatternID::new_unchecked(4194303 >> PatternEpsilons::PATTERN_ID_SHIFT)));"
        ],
        "code": [
          "{",
          "    let pattern_epsilons = PatternEpsilons(4194303); // Maximum valid value, should return Some",
          "    let result = pattern_epsilons.pattern_id();",
          "    assert_eq!(result, Some(PatternID::new_unchecked(4194303 >> PatternEpsilons::PATTERN_ID_SHIFT)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]