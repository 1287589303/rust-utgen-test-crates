[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { /* initialize span fields */ };",
          "    let kind = ClassSetBinaryOpKind { /* initialize kind fields */ };",
          "    ",
          "    let lhs = Box::new(ClassSet::Item(ClassSetItem::Literal(Literal { /* initialize literal fields */ })));",
          "    let rhs = Box::new(ClassSet::Item(ClassSetItem::Range(ClassSetRange { /* initialize range fields */ })));",
          "    ",
          "    let binary_op = ClassSetBinaryOp {",
          "        span,",
          "        kind,",
          "        lhs,",
          "        rhs,",
          "    };",
          "    ",
          "    let ast = ClassSet::BinaryOp(binary_op);",
          "    ",
          "    let result = ClassInduct::from_set(&ast);",
          "}"
        ],
        "oracle": [
          "    let span = Span { /* initialize span fields */ };",
          "    let kind = ClassSetBinaryOpKind { /* initialize kind fields */ };",
          "    let lhs = Box::new(ClassSet::Item(ClassSetItem::Literal(Literal { /* initialize literal fields */ })));",
          "    let rhs = Box::new(ClassSet::Item(ClassSetItem::Range(ClassSetRange { /* initialize range fields */ })));",
          "    let binary_op = ClassSetBinaryOp { span, kind, lhs, rhs };",
          "    let ast = ClassSet::BinaryOp(binary_op);",
          "    let result = ClassInduct::from_set(&ast);",
          "    assert_eq!(result, ClassInduct::BinaryOp(op));"
        ],
        "code": [
          "{",
          "    let span = Span { /* initialize span fields */ };",
          "    let kind = ClassSetBinaryOpKind { /* initialize kind fields */ };",
          "    ",
          "    let lhs = Box::new(ClassSet::Item(ClassSetItem::Literal(Literal { /* initialize literal fields */ })));",
          "    let rhs = Box::new(ClassSet::Item(ClassSetItem::Range(ClassSetRange { /* initialize range fields */ })));",
          "    ",
          "    let binary_op = ClassSetBinaryOp {",
          "        span,",
          "        kind,",
          "        lhs,",
          "        rhs,",
          "    };",
          "    ",
          "    let ast = ClassSet::BinaryOp(binary_op);",
          "    ",
          "    let result = ClassInduct::from_set(&ast);",
          "    let span = Span { /* initialize span fields */ };",
          "    let kind = ClassSetBinaryOpKind { /* initialize kind fields */ };",
          "    let lhs = Box::new(ClassSet::Item(ClassSetItem::Literal(Literal { /* initialize literal fields */ })));",
          "    let rhs = Box::new(ClassSet::Item(ClassSetItem::Range(ClassSetRange { /* initialize range fields */ })));",
          "    let binary_op = ClassSetBinaryOp { span, kind, lhs, rhs };",
          "    let ast = ClassSet::BinaryOp(binary_op);",
          "    let result = ClassInduct::from_set(&ast);",
          "    assert_eq!(result, ClassInduct::BinaryOp(op));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { /* initialize span fields */ };",
          "    let kind = ClassSetBinaryOpKind { /* initialize kind fields */ };",
          "    ",
          "    let lhs = Box::new(ClassSet::Item(ClassSetItem::Empty(span.clone())));",
          "    let rhs = Box::new(ClassSet::Item(ClassSetItem::Empty(span.clone())));",
          "    ",
          "    let binary_op = ClassSetBinaryOp {",
          "        span,",
          "        kind,",
          "        lhs,",
          "        rhs,",
          "    };",
          "    ",
          "    let ast = ClassSet::BinaryOp(binary_op);",
          "    ",
          "    let result = ClassInduct::from_set(&ast);",
          "}"
        ],
        "oracle": [
          "    let span = Span { /* initialize span fields */ };",
          "    let kind = ClassSetBinaryOpKind { /* initialize kind fields */ };",
          "    let lhs = Box::new(ClassSet::Item(ClassSetItem::Empty(span.clone())));",
          "    let rhs = Box::new(ClassSet::Item(ClassSetItem::Empty(span.clone())));",
          "    let binary_op = ClassSetBinaryOp { span, kind, lhs, rhs };",
          "    let ast = ClassSet::BinaryOp(binary_op);",
          "    let result = ClassInduct::from_set(&ast);",
          "    assert_eq!(result, ClassInduct::BinaryOp(&binary_op));"
        ],
        "code": [
          "{",
          "    let span = Span { /* initialize span fields */ };",
          "    let kind = ClassSetBinaryOpKind { /* initialize kind fields */ };",
          "    ",
          "    let lhs = Box::new(ClassSet::Item(ClassSetItem::Empty(span.clone())));",
          "    let rhs = Box::new(ClassSet::Item(ClassSetItem::Empty(span.clone())));",
          "    ",
          "    let binary_op = ClassSetBinaryOp {",
          "        span,",
          "        kind,",
          "        lhs,",
          "        rhs,",
          "    };",
          "    ",
          "    let ast = ClassSet::BinaryOp(binary_op);",
          "    ",
          "    let result = ClassInduct::from_set(&ast);",
          "    let span = Span { /* initialize span fields */ };",
          "    let kind = ClassSetBinaryOpKind { /* initialize kind fields */ };",
          "    let lhs = Box::new(ClassSet::Item(ClassSetItem::Empty(span.clone())));",
          "    let rhs = Box::new(ClassSet::Item(ClassSetItem::Empty(span.clone())));",
          "    let binary_op = ClassSetBinaryOp { span, kind, lhs, rhs };",
          "    let ast = ClassSet::BinaryOp(binary_op);",
          "    let result = ClassInduct::from_set(&ast);",
          "    assert_eq!(result, ClassInduct::BinaryOp(&binary_op));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]