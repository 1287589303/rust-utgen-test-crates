[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyAst;",
          "    struct DummyClassSet;",
          "",
          "    let lhs = Box::new(DummyClassSet);",
          "    let rhs = Box::new(DummyClassSet);",
          "    ",
          "    let binary_op = ClassSetBinaryOp {",
          "        span: Span::default(),",
          "        kind: ClassSetBinaryOpKind::Difference,",
          "        lhs,",
          "        rhs,",
          "    };",
          "",
          "    let class_induct = ClassInduct::BinaryOp(&binary_op);",
          "",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = class_induct.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_induct.fmt(&mut formatter).unwrap(), \"BinaryOp(Difference)\");"
        ],
        "code": [
          "{",
          "    struct DummyAst;",
          "    struct DummyClassSet;",
          "",
          "    let lhs = Box::new(DummyClassSet);",
          "    let rhs = Box::new(DummyClassSet);",
          "    ",
          "    let binary_op = ClassSetBinaryOp {",
          "        span: Span::default(),",
          "        kind: ClassSetBinaryOpKind::Difference,",
          "        lhs,",
          "        rhs,",
          "    };",
          "",
          "    let class_induct = ClassInduct::BinaryOp(&binary_op);",
          "",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = class_induct.fmt(&mut formatter);",
          "    assert_eq!(class_induct.fmt(&mut formatter).unwrap(), \"BinaryOp(Difference)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]