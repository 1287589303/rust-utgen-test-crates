[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockSpan;",
          "    ",
          "    let empty_item = ast::ClassSetItem::Empty(MockSpan);",
          "    let class_induct = ClassInduct::Item(&empty_item);",
          "    let mut output = core::fmt::Formatter::new();",
          "    ",
          "    class_induct.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_induct.fmt(&mut output).is_ok(), true);",
          "    assert_eq!(output.to_string(), \"Item(Empty)\");"
        ],
        "code": [
          "{",
          "    struct MockSpan;",
          "    ",
          "    let empty_item = ast::ClassSetItem::Empty(MockSpan);",
          "    let class_induct = ClassInduct::Item(&empty_item);",
          "    let mut output = core::fmt::Formatter::new();",
          "    ",
          "    class_induct.fmt(&mut output);",
          "    assert_eq!(class_induct.fmt(&mut output).is_ok(), true);",
          "    assert_eq!(output.to_string(), \"Item(Empty)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockSpan;",
          "    ",
          "    let literal_item = ast::ClassSetItem::Literal(MockLiteral);",
          "    let class_induct = ClassInduct::Item(&literal_item);",
          "    let mut output = core::fmt::Formatter::new();",
          "    ",
          "    class_induct.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_induct.fmt(&mut output), \"Item(Literal)\");",
          "    let empty_item = ast::ClassSetItem::Empty(MockSpan);",
          "    let class_induct_empty = ClassInduct::Item(&empty_item);",
          "    assert_eq!(class_induct_empty.fmt(&mut output), \"Item(Empty)\");",
          "    let range_item = ast::ClassSetItem::Range(MockRange);",
          "    let class_induct_range = ClassInduct::Item(&range_item);",
          "    assert_eq!(class_induct_range.fmt(&mut output), \"Item(Range)\");",
          "    let ascii_item = ast::ClassSetItem::Ascii(MockAscii);",
          "    let class_induct_ascii = ClassInduct::Item(&ascii_item);",
          "    assert_eq!(class_induct_ascii.fmt(&mut output), \"Item(Ascii)\");",
          "    let perl_item = ast::ClassSetItem::Perl(MockPerl);",
          "    let class_induct_perl = ClassInduct::Item(&perl_item);",
          "    assert_eq!(class_induct_perl.fmt(&mut output), \"Item(Perl)\");",
          "    let unicode_item = ast::ClassSetItem::Unicode(MockUnicode);",
          "    let class_induct_unicode = ClassInduct::Item(&unicode_item);",
          "    assert_eq!(class_induct_unicode.fmt(&mut output), \"Item(Unicode)\");",
          "    let bracketed_item = ast::ClassSetItem::Bracketed(MockBracketed);",
          "    let class_induct_bracketed = ClassInduct::Item(&bracketed_item);",
          "    assert_eq!(class_induct_bracketed.fmt(&mut output), \"Item(Bracketed)\");",
          "    let union_item = ast::ClassSetItem::Union(MockUnion);",
          "    let class_induct_union = ClassInduct::Item(&union_item);",
          "    assert_eq!(class_induct_union.fmt(&mut output), \"Item(Union)\");"
        ],
        "code": [
          "{",
          "    struct MockSpan;",
          "    ",
          "    let literal_item = ast::ClassSetItem::Literal(MockLiteral);",
          "    let class_induct = ClassInduct::Item(&literal_item);",
          "    let mut output = core::fmt::Formatter::new();",
          "    ",
          "    class_induct.fmt(&mut output);",
          "    assert_eq!(class_induct.fmt(&mut output), \"Item(Literal)\");",
          "    let empty_item = ast::ClassSetItem::Empty(MockSpan);",
          "    let class_induct_empty = ClassInduct::Item(&empty_item);",
          "    assert_eq!(class_induct_empty.fmt(&mut output), \"Item(Empty)\");",
          "    let range_item = ast::ClassSetItem::Range(MockRange);",
          "    let class_induct_range = ClassInduct::Item(&range_item);",
          "    assert_eq!(class_induct_range.fmt(&mut output), \"Item(Range)\");",
          "    let ascii_item = ast::ClassSetItem::Ascii(MockAscii);",
          "    let class_induct_ascii = ClassInduct::Item(&ascii_item);",
          "    assert_eq!(class_induct_ascii.fmt(&mut output), \"Item(Ascii)\");",
          "    let perl_item = ast::ClassSetItem::Perl(MockPerl);",
          "    let class_induct_perl = ClassInduct::Item(&perl_item);",
          "    assert_eq!(class_induct_perl.fmt(&mut output), \"Item(Perl)\");",
          "    let unicode_item = ast::ClassSetItem::Unicode(MockUnicode);",
          "    let class_induct_unicode = ClassInduct::Item(&unicode_item);",
          "    assert_eq!(class_induct_unicode.fmt(&mut output), \"Item(Unicode)\");",
          "    let bracketed_item = ast::ClassSetItem::Bracketed(MockBracketed);",
          "    let class_induct_bracketed = ClassInduct::Item(&bracketed_item);",
          "    assert_eq!(class_induct_bracketed.fmt(&mut output), \"Item(Bracketed)\");",
          "    let union_item = ast::ClassSetItem::Union(MockUnion);",
          "    let class_induct_union = ClassInduct::Item(&union_item);",
          "    assert_eq!(class_induct_union.fmt(&mut output), \"Item(Union)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockSpan;",
          "    ",
          "    let range_item = ast::ClassSetItem::Range(MockRange);",
          "    let class_induct = ClassInduct::Item(&range_item);",
          "    let mut output = core::fmt::Formatter::new();",
          "    ",
          "    class_induct.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_induct.fmt(&mut output), Ok(()));",
          "    assert_eq!(output.to_string(), \"Item(Range)\");"
        ],
        "code": [
          "{",
          "    struct MockSpan;",
          "    ",
          "    let range_item = ast::ClassSetItem::Range(MockRange);",
          "    let class_induct = ClassInduct::Item(&range_item);",
          "    let mut output = core::fmt::Formatter::new();",
          "    ",
          "    class_induct.fmt(&mut output);",
          "    assert_eq!(class_induct.fmt(&mut output), Ok(()));",
          "    assert_eq!(output.to_string(), \"Item(Range)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]