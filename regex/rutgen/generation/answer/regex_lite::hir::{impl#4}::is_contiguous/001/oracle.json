[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range1 = ClassRange { start: 'a', end: 'c' };",
          "    let range2 = ClassRange { start: 'b', end: 'd' };",
          "    range1.is_contiguous(&range2);",
          "}"
        ],
        "oracle": [
          "    assert!(range1.is_contiguous(&range2) == true);",
          "    let range3 = ClassRange { start: 'd', end: 'f' };",
          "    assert!(range1.is_contiguous(&range3) == false);",
          "    let range4 = ClassRange { start: 'c', end: 'c' };",
          "    assert!(range1.is_contiguous(&range4) == true);",
          "    let range5 = ClassRange { start: 'e', end: 'g' };",
          "    assert!(range2.is_contiguous(&range5) == false);",
          "    let range6 = ClassRange { start: 'a', end: 'a' };",
          "    assert!(range1.is_contiguous(&range6) == true);",
          "    let range7 = ClassRange { start: 'c', end: 'e' };",
          "    assert!(range1.is_contiguous(&range7) == false);",
          "    let range8 = ClassRange { start: 'c', end: 'e' };",
          "    assert!(range4.is_contiguous(&range8) == true);",
          "    let range9 = ClassRange { start: 'x', end: 'y' };",
          "    assert!(range1.is_contiguous(&range9) == false);"
        ],
        "code": [
          "{",
          "    let range1 = ClassRange { start: 'a', end: 'c' };",
          "    let range2 = ClassRange { start: 'b', end: 'd' };",
          "    range1.is_contiguous(&range2);",
          "    assert!(range1.is_contiguous(&range2) == true);",
          "    let range3 = ClassRange { start: 'd', end: 'f' };",
          "    assert!(range1.is_contiguous(&range3) == false);",
          "    let range4 = ClassRange { start: 'c', end: 'c' };",
          "    assert!(range1.is_contiguous(&range4) == true);",
          "    let range5 = ClassRange { start: 'e', end: 'g' };",
          "    assert!(range2.is_contiguous(&range5) == false);",
          "    let range6 = ClassRange { start: 'a', end: 'a' };",
          "    assert!(range1.is_contiguous(&range6) == true);",
          "    let range7 = ClassRange { start: 'c', end: 'e' };",
          "    assert!(range1.is_contiguous(&range7) == false);",
          "    let range8 = ClassRange { start: 'c', end: 'e' };",
          "    assert!(range4.is_contiguous(&range8) == true);",
          "    let range9 = ClassRange { start: 'x', end: 'y' };",
          "    assert!(range1.is_contiguous(&range9) == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range1 = ClassRange { start: 'e', end: 'g' };",
          "    let range2 = ClassRange { start: 'h', end: 'h' };",
          "    range1.is_contiguous(&range2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(range1.is_contiguous(&range2), true);",
          "    ",
          "    let range3 = ClassRange { start: 'g', end: 'j' };",
          "    assert_eq!(range1.is_contiguous(&range3), true);",
          "    ",
          "    let range4 = ClassRange { start: 'i', end: 'k' };",
          "    assert_eq!(range1.is_contiguous(&range4), false);",
          "    ",
          "    let range5 = ClassRange { start: 'a', end: 'd' };",
          "    assert_eq!(range1.is_contiguous(&range5), false);",
          "    ",
          "    let range6 = ClassRange { start: 'g', end: 'g' };",
          "    assert_eq!(range1.is_contiguous(&range6), true);"
        ],
        "code": [
          "{",
          "    let range1 = ClassRange { start: 'e', end: 'g' };",
          "    let range2 = ClassRange { start: 'h', end: 'h' };",
          "    range1.is_contiguous(&range2);",
          "    assert_eq!(range1.is_contiguous(&range2), true);",
          "    ",
          "    let range3 = ClassRange { start: 'g', end: 'j' };",
          "    assert_eq!(range1.is_contiguous(&range3), true);",
          "    ",
          "    let range4 = ClassRange { start: 'i', end: 'k' };",
          "    assert_eq!(range1.is_contiguous(&range4), false);",
          "    ",
          "    let range5 = ClassRange { start: 'a', end: 'd' };",
          "    assert_eq!(range1.is_contiguous(&range5), false);",
          "    ",
          "    let range6 = ClassRange { start: 'g', end: 'g' };",
          "    assert_eq!(range1.is_contiguous(&range6), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range1 = ClassRange { start: 'i', end: 'k' };",
          "    let range2 = ClassRange { start: 'm', end: 'p' };",
          "    range1.is_contiguous(&range2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(range1.is_contiguous(&range2), false);",
          "    let range3 = ClassRange { start: 'k', end: 'm' };",
          "    assert_eq!(range1.is_contiguous(&range3), true);",
          "    let range4 = ClassRange { start: 'k', end: 'l' };",
          "    assert_eq!(range1.is_contiguous(&range4), true);",
          "    let range5 = ClassRange { start: 'a', end: 'c' };",
          "    assert_eq!(range1.is_contiguous(&range5), false);",
          "    let range6 = ClassRange { start: 'j', end: 'j' };",
          "    assert_eq!(range1.is_contiguous(&range6), true);",
          "    let range7 = ClassRange { start: 'i', end: 'k' };",
          "    assert_eq!(range1.is_contiguous(&range7), true);",
          "    let range8 = ClassRange { start: 'k', end: 'n' };",
          "    assert_eq!(range1.is_contiguous(&range8), false);",
          "    let range9 = ClassRange { start: 'a', end: 'z' };",
          "    assert_eq!(range1.is_contiguous(&range9), true);"
        ],
        "code": [
          "{",
          "    let range1 = ClassRange { start: 'i', end: 'k' };",
          "    let range2 = ClassRange { start: 'm', end: 'p' };",
          "    range1.is_contiguous(&range2);",
          "    assert_eq!(range1.is_contiguous(&range2), false);",
          "    let range3 = ClassRange { start: 'k', end: 'm' };",
          "    assert_eq!(range1.is_contiguous(&range3), true);",
          "    let range4 = ClassRange { start: 'k', end: 'l' };",
          "    assert_eq!(range1.is_contiguous(&range4), true);",
          "    let range5 = ClassRange { start: 'a', end: 'c' };",
          "    assert_eq!(range1.is_contiguous(&range5), false);",
          "    let range6 = ClassRange { start: 'j', end: 'j' };",
          "    assert_eq!(range1.is_contiguous(&range6), true);",
          "    let range7 = ClassRange { start: 'i', end: 'k' };",
          "    assert_eq!(range1.is_contiguous(&range7), true);",
          "    let range8 = ClassRange { start: 'k', end: 'n' };",
          "    assert_eq!(range1.is_contiguous(&range8), false);",
          "    let range9 = ClassRange { start: 'a', end: 'z' };",
          "    assert_eq!(range1.is_contiguous(&range9), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range1 = ClassRange { start: 'x', end: 'x' };",
          "    let range2 = ClassRange { start: 'x', end: 'x' };",
          "    range1.is_contiguous(&range2);",
          "}"
        ],
        "oracle": [
          "    assert!(range1.is_contiguous(&range2) == true);",
          "    let range3 = ClassRange { start: 'a', end: 'c' };",
          "    let range4 = ClassRange { start: 'c', end: 'e' };",
          "    assert!(range3.is_contiguous(&range4) == true);",
          "    let range5 = ClassRange { start: 'a', end: 'b' };",
          "    let range6 = ClassRange { start: 'c', end: 'd' };",
          "    assert!(range5.is_contiguous(&range6) == false);",
          "    let range7 = ClassRange { start: 'f', end: 'h' };",
          "    let range8 = ClassRange { start: 'g', end: 'j' };",
          "    assert!(range7.is_contiguous(&range8) == true);",
          "    let range9 = ClassRange { start: '1', end: '3' };",
          "    let range10 = ClassRange { start: '3', end: '5' };",
          "    assert!(range9.is_contiguous(&range10) == true);",
          "    let range11 = ClassRange { start: '0', end: '2' };",
          "    let range12 = ClassRange { start: '4', end: '6' };",
          "    assert!(range11.is_contiguous(&range12) == false);"
        ],
        "code": [
          "{",
          "    let range1 = ClassRange { start: 'x', end: 'x' };",
          "    let range2 = ClassRange { start: 'x', end: 'x' };",
          "    range1.is_contiguous(&range2);",
          "    assert!(range1.is_contiguous(&range2) == true);",
          "    let range3 = ClassRange { start: 'a', end: 'c' };",
          "    let range4 = ClassRange { start: 'c', end: 'e' };",
          "    assert!(range3.is_contiguous(&range4) == true);",
          "    let range5 = ClassRange { start: 'a', end: 'b' };",
          "    let range6 = ClassRange { start: 'c', end: 'd' };",
          "    assert!(range5.is_contiguous(&range6) == false);",
          "    let range7 = ClassRange { start: 'f', end: 'h' };",
          "    let range8 = ClassRange { start: 'g', end: 'j' };",
          "    assert!(range7.is_contiguous(&range8) == true);",
          "    let range9 = ClassRange { start: '1', end: '3' };",
          "    let range10 = ClassRange { start: '3', end: '5' };",
          "    assert!(range9.is_contiguous(&range10) == true);",
          "    let range11 = ClassRange { start: '0', end: '2' };",
          "    let range12 = ClassRange { start: '4', end: '6' };",
          "    assert!(range11.is_contiguous(&range12) == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range1 = ClassRange { start: 'x', end: 'y' };",
          "    let range2 = ClassRange { start: 'y', end: 'y' };",
          "    range1.is_contiguous(&range2);",
          "}"
        ],
        "oracle": [
          "    assert!(range1.is_contiguous(&range2) == true);",
          "    ",
          "    let range3 = ClassRange { start: 'a', end: 'b' };",
          "    let range4 = ClassRange { start: 'c', end: 'd' };",
          "    assert!(range3.is_contiguous(&range4) == false);",
          "    ",
          "    let range5 = ClassRange { start: 'a', end: 'd' };",
          "    let range6 = ClassRange { start: 'b', end: 'c' };",
          "    assert!(range5.is_contiguous(&range6) == true);",
          "    ",
          "    let range7 = ClassRange { start: 'm', end: 'n' };",
          "    let range8 = ClassRange { start: 'n', end: 'p' };",
          "    assert!(range7.is_contiguous(&range8) == true);",
          "    ",
          "    let range9 = ClassRange { start: '1', end: '5' };",
          "    let range10 = ClassRange { start: '5', end: '5' };",
          "    assert!(range9.is_contiguous(&range10) == true);",
          "    ",
          "    let range11 = ClassRange { start: 'A', end: 'C' };",
          "    let range12 = ClassRange { start: 'D', end: 'F' };",
          "    assert!(range11.is_contiguous(&range12) == false);",
          "    ",
          "    let range13 = ClassRange { start: 'x', end: 'z' };",
          "    let range14 = ClassRange { start: 'y', end: 'y' };",
          "    assert!(range13.is_contiguous(&range14) == true);",
          "    ",
          "    let range15 = ClassRange { start: 'A', end: 'B' };",
          "    let range16 = ClassRange { start: 'a', end: 'b' };",
          "    assert!(range15.is_contiguous(&range16) == false);"
        ],
        "code": [
          "{",
          "    let range1 = ClassRange { start: 'x', end: 'y' };",
          "    let range2 = ClassRange { start: 'y', end: 'y' };",
          "    range1.is_contiguous(&range2);",
          "    assert!(range1.is_contiguous(&range2) == true);",
          "    ",
          "    let range3 = ClassRange { start: 'a', end: 'b' };",
          "    let range4 = ClassRange { start: 'c', end: 'd' };",
          "    assert!(range3.is_contiguous(&range4) == false);",
          "    ",
          "    let range5 = ClassRange { start: 'a', end: 'd' };",
          "    let range6 = ClassRange { start: 'b', end: 'c' };",
          "    assert!(range5.is_contiguous(&range6) == true);",
          "    ",
          "    let range7 = ClassRange { start: 'm', end: 'n' };",
          "    let range8 = ClassRange { start: 'n', end: 'p' };",
          "    assert!(range7.is_contiguous(&range8) == true);",
          "    ",
          "    let range9 = ClassRange { start: '1', end: '5' };",
          "    let range10 = ClassRange { start: '5', end: '5' };",
          "    assert!(range9.is_contiguous(&range10) == true);",
          "    ",
          "    let range11 = ClassRange { start: 'A', end: 'C' };",
          "    let range12 = ClassRange { start: 'D', end: 'F' };",
          "    assert!(range11.is_contiguous(&range12) == false);",
          "    ",
          "    let range13 = ClassRange { start: 'x', end: 'z' };",
          "    let range14 = ClassRange { start: 'y', end: 'y' };",
          "    assert!(range13.is_contiguous(&range14) == true);",
          "    ",
          "    let range15 = ClassRange { start: 'A', end: 'B' };",
          "    let range16 = ClassRange { start: 'a', end: 'b' };",
          "    assert!(range15.is_contiguous(&range16) == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range1 = ClassRange { start: 'a', end: 'a' };",
          "    let range2 = ClassRange { start: 'a', end: 'b' };",
          "    range1.is_contiguous(&range2);",
          "}"
        ],
        "oracle": [
          "    assert!(range1.is_contiguous(&range2)); // Expect true for overlapping ranges 'a' to 'b'",
          "    ",
          "    let range3 = ClassRange { start: 'b', end: 'b' };",
          "    assert!(range2.is_contiguous(&range3)); // Expect true for adjacent ranges 'a' to 'b' and 'b' to 'b'",
          "    ",
          "    let range4 = ClassRange { start: 'c', end: 'c' };",
          "    assert!(!range1.is_contiguous(&range4)); // Expect false for non-contiguous ranges 'a' to 'a' and 'c' to 'c'",
          "    ",
          "    let range5 = ClassRange { start: 'e', end: 'g' };",
          "    let range6 = ClassRange { start: 'g', end: 'g' };",
          "    assert!(range5.is_contiguous(&range6)); // Expect true for adjacent ranges 'e' to 'g' and 'g' to 'g'",
          "    ",
          "    let range7 = ClassRange { start: 'x', end: 'z' };",
          "    let range8 = ClassRange { start: 'a', end: 'w' };",
          "    assert!(!range7.is_contiguous(&range8)); // Expect false for non-contiguous ranges 'x' to 'z' and 'a' to 'w'",
          "    ",
          "    let range9 = ClassRange { start: '1', end: '1' };",
          "    let range10 = ClassRange { start: '1', end: '2' };",
          "    assert!(range9.is_contiguous(&range10)); // Expect true for overlapping ranges '1' to '1' and '1' to '2'"
        ],
        "code": [
          "{",
          "    let range1 = ClassRange { start: 'a', end: 'a' };",
          "    let range2 = ClassRange { start: 'a', end: 'b' };",
          "    range1.is_contiguous(&range2);",
          "    assert!(range1.is_contiguous(&range2)); // Expect true for overlapping ranges 'a' to 'b'",
          "    ",
          "    let range3 = ClassRange { start: 'b', end: 'b' };",
          "    assert!(range2.is_contiguous(&range3)); // Expect true for adjacent ranges 'a' to 'b' and 'b' to 'b'",
          "    ",
          "    let range4 = ClassRange { start: 'c', end: 'c' };",
          "    assert!(!range1.is_contiguous(&range4)); // Expect false for non-contiguous ranges 'a' to 'a' and 'c' to 'c'",
          "    ",
          "    let range5 = ClassRange { start: 'e', end: 'g' };",
          "    let range6 = ClassRange { start: 'g', end: 'g' };",
          "    assert!(range5.is_contiguous(&range6)); // Expect true for adjacent ranges 'e' to 'g' and 'g' to 'g'",
          "    ",
          "    let range7 = ClassRange { start: 'x', end: 'z' };",
          "    let range8 = ClassRange { start: 'a', end: 'w' };",
          "    assert!(!range7.is_contiguous(&range8)); // Expect false for non-contiguous ranges 'x' to 'z' and 'a' to 'w'",
          "    ",
          "    let range9 = ClassRange { start: '1', end: '1' };",
          "    let range10 = ClassRange { start: '1', end: '2' };",
          "    assert!(range9.is_contiguous(&range10)); // Expect true for overlapping ranges '1' to '1' and '1' to '2'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]