[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let captures = Captures::all(group_info.clone());",
          "    let haystack = \"On 14-03-2010, I became a Tenneessee lamb.\";",
          "    let replacement = \"year=$year, month=$month, day=$day\";",
          "    let _result = captures.interpolate_string(haystack, replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(captures.interpolate_string(haystack, replacement), \"year=2010, month=03, day=14\");",
          "    let haystack_2 = \"On 2010-03-14, I became a Tenneessee lamb.\";",
          "    assert_eq!(captures.interpolate_string(haystack_2, replacement), \"year=2010, month=03, day=14\");",
          "    let empty_haystack = \"\";",
          "    assert_eq!(captures.interpolate_string(empty_haystack, replacement), \"year=, month=, day=\");",
          "    let null_replacement = \"\";",
          "    assert_eq!(captures.interpolate_string(haystack, null_replacement), \"\");",
          "    let haystack_no_matches = \"This text has no dates.\";",
          "    assert_eq!(captures.interpolate_string(haystack_no_matches, replacement), \"year=, month=, day=\");"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let captures = Captures::all(group_info.clone());",
          "    let haystack = \"On 14-03-2010, I became a Tenneessee lamb.\";",
          "    let replacement = \"year=$year, month=$month, day=$day\";",
          "    let _result = captures.interpolate_string(haystack, replacement);",
          "    assert_eq!(captures.interpolate_string(haystack, replacement), \"year=2010, month=03, day=14\");",
          "    let haystack_2 = \"On 2010-03-14, I became a Tenneessee lamb.\";",
          "    assert_eq!(captures.interpolate_string(haystack_2, replacement), \"year=2010, month=03, day=14\");",
          "    let empty_haystack = \"\";",
          "    assert_eq!(captures.interpolate_string(empty_haystack, replacement), \"year=, month=, day=\");",
          "    let null_replacement = \"\";",
          "    assert_eq!(captures.interpolate_string(haystack, null_replacement), \"\");",
          "    let haystack_no_matches = \"This text has no dates.\";",
          "    assert_eq!(captures.interpolate_string(haystack_no_matches, replacement), \"year=, month=, day=\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let captures = Captures::all(group_info.clone());",
          "    let haystack = \"On 2010-03-14, I became a Tenneessee lamb.\";",
          "    let replacement = \"year=$year, month=$month, day=$day\";",
          "    let _result = captures.interpolate_string(haystack, replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(captures.interpolate_string(haystack, replacement), \"year=2010, month=03, day=14\");"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let captures = Captures::all(group_info.clone());",
          "    let haystack = \"On 2010-03-14, I became a Tenneessee lamb.\";",
          "    let replacement = \"year=$year, month=$month, day=$day\";",
          "    let _result = captures.interpolate_string(haystack, replacement);",
          "    assert_eq!(captures.interpolate_string(haystack, replacement), \"year=2010, month=03, day=14\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let captures = Captures::all(group_info.clone());",
          "    let haystack = \"\";",
          "    let replacement = \"year=$year, month=$month, day=$day\";",
          "    let _result = captures.interpolate_string(haystack, replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(captures.interpolate_string(\"\", \"year=$year, month=$month, day=$day\"), \"year=, month=, day=\");",
          "    let group_info = GroupInfo::default();",
          "    let captures = Captures::all(group_info.clone());",
          "    let haystack = \"On 14-03-2010, I became a Tenneessee lamb.\";",
          "    let replacement = \"year=$year, month=$month, day=$day\";",
          "    assert_eq!(captures.interpolate_string(haystack, replacement), \"year=, month=, day=\");",
          "    let haystack = \"On 2010-03-14, I became a Tenneessee lamb.\";",
          "    assert_eq!(captures.interpolate_string(haystack, replacement), \"year=, month=, day=\");"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let captures = Captures::all(group_info.clone());",
          "    let haystack = \"\";",
          "    let replacement = \"year=$year, month=$month, day=$day\";",
          "    let _result = captures.interpolate_string(haystack, replacement);",
          "    assert_eq!(captures.interpolate_string(\"\", \"year=$year, month=$month, day=$day\"), \"year=, month=, day=\");",
          "    let group_info = GroupInfo::default();",
          "    let captures = Captures::all(group_info.clone());",
          "    let haystack = \"On 14-03-2010, I became a Tenneessee lamb.\";",
          "    let replacement = \"year=$year, month=$month, day=$day\";",
          "    assert_eq!(captures.interpolate_string(haystack, replacement), \"year=, month=, day=\");",
          "    let haystack = \"On 2010-03-14, I became a Tenneessee lamb.\";",
          "    assert_eq!(captures.interpolate_string(haystack, replacement), \"year=, month=, day=\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let captures = Captures::all(group_info.clone());",
          "    let haystack = \"Invalid date 14-30-2010\";",
          "    let replacement = \"year=$year, month=$month, day=$day\";",
          "    let _result = captures.interpolate_string(haystack, replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, \"year=, month=, day=\");",
          "    assert_eq!(_result.len(), 22);",
          "    assert!(_result.contains(\"year=\"));",
          "    assert!(_result.contains(\"month=\"));",
          "    assert!(_result.contains(\"day=\"));",
          "    assert!(captures.is_match() == false);",
          "    assert!(captures.pattern().is_none());",
          "    assert_eq!(captures.group_len(), 0);"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let captures = Captures::all(group_info.clone());",
          "    let haystack = \"Invalid date 14-30-2010\";",
          "    let replacement = \"year=$year, month=$month, day=$day\";",
          "    let _result = captures.interpolate_string(haystack, replacement);",
          "    assert_eq!(_result, \"year=, month=, day=\");",
          "    assert_eq!(_result.len(), 22);",
          "    assert!(_result.contains(\"year=\"));",
          "    assert!(_result.contains(\"month=\"));",
          "    assert!(_result.contains(\"day=\"));",
          "    assert!(captures.is_match() == false);",
          "    assert!(captures.pattern().is_none());",
          "    assert_eq!(captures.group_len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let captures = Captures::all(group_info.clone());",
          "    let haystack = \"Text with date 08-09-2021 found.\";",
          "    let replacement = \"day=$day, month=$month\";",
          "    let _result = captures.interpolate_string(haystack, replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(captures.interpolate_string(haystack, replacement), \"day=, month=\");",
          "    assert_eq!(captures.interpolate_string(haystack, \"No match here\"), \"No match here\");",
          "    assert_eq!(captures.interpolate_string(\"No captures\", \"Test: $missing\"), \"Test: \");",
          "    assert_eq!(captures.interpolate_string(haystack, \"Date: $day-$month-$year\"), \"Date: -\");",
          "    assert_eq!(captures.interpolate_string(\"\", replacement), \"day=, month=\");",
          "    assert_eq!(captures.interpolate_string(haystack, \"\"), \"\");",
          "    assert_eq!(captures.interpolate_string(\"Nothing to see here\", \"No captures $wrong\"), \"No captures \");"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let captures = Captures::all(group_info.clone());",
          "    let haystack = \"Text with date 08-09-2021 found.\";",
          "    let replacement = \"day=$day, month=$month\";",
          "    let _result = captures.interpolate_string(haystack, replacement);",
          "    assert_eq!(captures.interpolate_string(haystack, replacement), \"day=, month=\");",
          "    assert_eq!(captures.interpolate_string(haystack, \"No match here\"), \"No match here\");",
          "    assert_eq!(captures.interpolate_string(\"No captures\", \"Test: $missing\"), \"Test: \");",
          "    assert_eq!(captures.interpolate_string(haystack, \"Date: $day-$month-$year\"), \"Date: -\");",
          "    assert_eq!(captures.interpolate_string(\"\", replacement), \"day=, month=\");",
          "    assert_eq!(captures.interpolate_string(haystack, \"\"), \"\");",
          "    assert_eq!(captures.interpolate_string(\"Nothing to see here\", \"No captures $wrong\"), \"No captures \");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let captures = Captures::all(group_info.clone());",
          "    let haystack = \"On 14-03-2010.\";",
          "    let replacement = \"\";",
          "    let _result = captures.interpolate_string(haystack, replacement);",
          "}"
        ],
        "oracle": [
          "    let group_info = GroupInfo::default();",
          "    let captures = Captures::all(group_info.clone());",
          "    let haystack = \"On 14-03-2010.\";",
          "    let replacement = \"\";",
          "    let result = captures.interpolate_string(haystack, replacement);",
          "    assert_eq!(result, \"\");"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let captures = Captures::all(group_info.clone());",
          "    let haystack = \"On 14-03-2010.\";",
          "    let replacement = \"\";",
          "    let _result = captures.interpolate_string(haystack, replacement);",
          "    let group_info = GroupInfo::default();",
          "    let captures = Captures::all(group_info.clone());",
          "    let haystack = \"On 14-03-2010.\";",
          "    let replacement = \"\";",
          "    let result = captures.interpolate_string(haystack, replacement);",
          "    assert_eq!(result, \"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]