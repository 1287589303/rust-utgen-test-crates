[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let accels = Accels { accels: &[0u32; 0] }; // Empty array",
          "    let owned = accels.to_owned();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(owned.accels.as_ref(), &[]);",
          "    assert_eq!(owned.len(), 0);",
          "    assert!(std::mem::size_of_val(&owned.accels) > 0);",
          "    assert_eq!(owned.memory_usage(), ACCEL_TY_SIZE);",
          "    assert!(owned.validate().is_ok());",
          "    assert_eq!(owned.write_to_len(), 4);"
        ],
        "code": [
          "{",
          "    let accels = Accels { accels: &[0u32; 0] }; // Empty array",
          "    let owned = accels.to_owned();",
          "    assert_eq!(owned.accels.as_ref(), &[]);",
          "    assert_eq!(owned.len(), 0);",
          "    assert!(std::mem::size_of_val(&owned.accels) > 0);",
          "    assert_eq!(owned.memory_usage(), ACCEL_TY_SIZE);",
          "    assert!(owned.validate().is_ok());",
          "    assert_eq!(owned.write_to_len(), 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let accels = Accels { accels: &[42u32] }; // Array with one element",
          "    let owned = accels.to_owned();",
          "}"
        ],
        "oracle": [
          "    let accels = Accels { accels: &[42u32] };",
          "    let owned = accels.to_owned();",
          "    assert_eq!(owned.accels, vec![42u32]);",
          "    assert_eq!(owned.accels.len(), 1);",
          "    assert_eq!(owned.accels.as_ref()[0], 42u32);",
          "    assert!(owned.accels.is_empty() == false);",
          "    assert!(std::mem::size_of_val(&owned.accels) > 0);"
        ],
        "code": [
          "{",
          "    let accels = Accels { accels: &[42u32] }; // Array with one element",
          "    let owned = accels.to_owned();",
          "    let accels = Accels { accels: &[42u32] };",
          "    let owned = accels.to_owned();",
          "    assert_eq!(owned.accels, vec![42u32]);",
          "    assert_eq!(owned.accels.len(), 1);",
          "    assert_eq!(owned.accels.as_ref()[0], 42u32);",
          "    assert!(owned.accels.is_empty() == false);",
          "    assert!(std::mem::size_of_val(&owned.accels) > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let accels = Accels { accels: &[1u32, 2, 3, 4, 5, 6, 7, 8] }; // Array with maximum capacity",
          "    let owned = accels.to_owned();",
          "}"
        ],
        "oracle": [
          "    let accels = Accels { accels: &[1u32, 2, 3, 4, 5, 6, 7, 8] };",
          "    let owned = accels.to_owned();",
          "    assert_eq!(owned.accels, vec![1u32, 2, 3, 4, 5, 6, 7, 8]);",
          "    assert_eq!(owned.len(), 8);",
          "    assert_eq!(owned.write_to_len(), ACCEL_LEN + 8 * ACCEL_TY_SIZE);",
          "    assert!(owned.validate().is_ok());",
          "    assert_eq!(owned.memory_usage(), core::mem::size_of::<AccelTy>() * 8 + core::mem::size_of::<usize>());"
        ],
        "code": [
          "{",
          "    let accels = Accels { accels: &[1u32, 2, 3, 4, 5, 6, 7, 8] }; // Array with maximum capacity",
          "    let owned = accels.to_owned();",
          "    let accels = Accels { accels: &[1u32, 2, 3, 4, 5, 6, 7, 8] };",
          "    let owned = accels.to_owned();",
          "    assert_eq!(owned.accels, vec![1u32, 2, 3, 4, 5, 6, 7, 8]);",
          "    assert_eq!(owned.len(), 8);",
          "    assert_eq!(owned.write_to_len(), ACCEL_LEN + 8 * ACCEL_TY_SIZE);",
          "    assert!(owned.validate().is_ok());",
          "    assert_eq!(owned.memory_usage(), core::mem::size_of::<AccelTy>() * 8 + core::mem::size_of::<usize>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]