[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Look::WordStartAscii;",
          "    let _result = input.reversed();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(input.reversed(), Look::WordEndAscii);"
        ],
        "code": [
          "{",
          "    let input = Look::WordStartAscii;",
          "    let _result = input.reversed();",
          "    assert_eq!(input.reversed(), Look::WordEndAscii);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Look::WordEndAscii;",
          "    let _result = input.reversed();",
          "}"
        ],
        "oracle": [
          "    let input = Look::WordStartAscii;",
          "    let expected = Look::WordEndAscii;",
          "    let result = input.reversed();",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let input = Look::WordEndAscii;",
          "    let _result = input.reversed();",
          "    let input = Look::WordStartAscii;",
          "    let expected = Look::WordEndAscii;",
          "    let result = input.reversed();",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Look::WordStartUnicode;",
          "    let _result = input.reversed();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
          "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
          "    assert_eq!(Look::Start.reversed(), Look::End);",
          "    assert_eq!(Look::End.reversed(), Look::Start);",
          "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
          "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
          "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
          "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
          "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
          "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
          "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
          "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
          "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
          "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
          "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
          "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
          "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
          "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
        ],
        "code": [
          "{",
          "    let input = Look::WordStartUnicode;",
          "    let _result = input.reversed();",
          "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
          "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
          "    assert_eq!(Look::Start.reversed(), Look::End);",
          "    assert_eq!(Look::End.reversed(), Look::Start);",
          "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
          "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
          "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
          "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
          "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
          "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
          "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
          "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
          "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
          "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
          "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
          "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
          "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
          "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Look::WordEndUnicode;",
          "    let _result = input.reversed();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);"
        ],
        "code": [
          "{",
          "    let input = Look::WordEndUnicode;",
          "    let _result = input.reversed();",
          "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Look::WordStartHalfAscii;",
          "    let _result = input.reversed();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(input.reversed(), Look::WordEndHalfAscii);"
        ],
        "code": [
          "{",
          "    let input = Look::WordStartHalfAscii;",
          "    let _result = input.reversed();",
          "    assert_eq!(input.reversed(), Look::WordEndHalfAscii);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Look::WordEndHalfAscii;",
          "    let _result = input.reversed();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
          "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);"
        ],
        "code": [
          "{",
          "    let input = Look::WordEndHalfAscii;",
          "    let _result = input.reversed();",
          "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
          "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Look::WordStartHalfUnicode;",
          "    let _result = input.reversed();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
          "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
          "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
          "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
          "    assert_eq!(Look::Start.reversed(), Look::End);",
          "    assert_eq!(Look::End.reversed(), Look::Start);",
          "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
          "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
          "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
          "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);"
        ],
        "code": [
          "{",
          "    let input = Look::WordStartHalfUnicode;",
          "    let _result = input.reversed();",
          "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
          "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
          "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
          "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
          "    assert_eq!(Look::Start.reversed(), Look::End);",
          "    assert_eq!(Look::End.reversed(), Look::Start);",
          "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
          "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
          "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
          "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Look::WordEndHalfUnicode;",
          "    let _result = input.reversed();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
          "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
          "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
          "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
          "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
          "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
          "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
          "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
          "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
          "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
          "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
          "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);"
        ],
        "code": [
          "{",
          "    let input = Look::WordEndHalfUnicode;",
          "    let _result = input.reversed();",
          "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
          "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
          "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
          "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
          "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
          "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
          "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
          "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
          "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
          "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
          "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
          "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]