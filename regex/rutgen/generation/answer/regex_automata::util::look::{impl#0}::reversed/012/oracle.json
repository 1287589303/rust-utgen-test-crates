[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordAscii;",
          "    let result = look.reversed();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Look::WordAscii);"
        ],
        "code": [
          "{",
          "    let look = Look::WordAscii;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::WordAscii);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordAsciiNegate;",
          "    let result = look.reversed();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Look::WordAsciiNegate);",
          "    let look = Look::WordUnicode;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::WordUnicode);",
          "    let look = Look::WordAscii;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::WordAscii);",
          "    let look = Look::Start;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::End);",
          "    let look = Look::End;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::Start);",
          "    let look = Look::StartLF;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::EndLF);",
          "    let look = Look::EndLF;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::StartLF);",
          "    let look = Look::StartCRLF;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::EndCRLF);",
          "    let look = Look::EndCRLF;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::StartCRLF);",
          "    let look = Look::WordStartAscii;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::WordEndAscii);",
          "    let look = Look::WordEndAscii;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::WordStartAscii);",
          "    let look = Look::WordStartUnicode;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::WordEndUnicode);",
          "    let look = Look::WordEndUnicode;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::WordStartUnicode);",
          "    let look = Look::WordStartHalfAscii;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::WordEndHalfAscii);",
          "    let look = Look::WordEndHalfAscii;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::WordStartHalfAscii);",
          "    let look = Look::WordStartHalfUnicode;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::WordEndHalfUnicode);",
          "    let look = Look::WordEndHalfUnicode;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::WordStartHalfUnicode);"
        ],
        "code": [
          "{",
          "    let look = Look::WordAsciiNegate;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::WordAsciiNegate);",
          "    let look = Look::WordUnicode;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::WordUnicode);",
          "    let look = Look::WordAscii;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::WordAscii);",
          "    let look = Look::Start;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::End);",
          "    let look = Look::End;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::Start);",
          "    let look = Look::StartLF;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::EndLF);",
          "    let look = Look::EndLF;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::StartLF);",
          "    let look = Look::StartCRLF;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::EndCRLF);",
          "    let look = Look::EndCRLF;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::StartCRLF);",
          "    let look = Look::WordStartAscii;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::WordEndAscii);",
          "    let look = Look::WordEndAscii;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::WordStartAscii);",
          "    let look = Look::WordStartUnicode;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::WordEndUnicode);",
          "    let look = Look::WordEndUnicode;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::WordStartUnicode);",
          "    let look = Look::WordStartHalfAscii;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::WordEndHalfAscii);",
          "    let look = Look::WordEndHalfAscii;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::WordStartHalfAscii);",
          "    let look = Look::WordStartHalfUnicode;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::WordEndHalfUnicode);",
          "    let look = Look::WordEndHalfUnicode;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::WordStartHalfUnicode);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordUnicode;",
          "    let result = look.reversed();",
          "}"
        ],
        "oracle": [
          "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
          "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
          "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
          "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
          "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
          "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
          "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
          "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
          "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
          "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
          "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
          "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
          "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
          "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
          "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
          "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
          "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
          "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
        ],
        "code": [
          "{",
          "    let look = Look::WordUnicode;",
          "    let result = look.reversed();",
          "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
          "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
          "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
          "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
          "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
          "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
          "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
          "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
          "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
          "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
          "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
          "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
          "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
          "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
          "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
          "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
          "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
          "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordUnicodeNegate;",
          "    let result = look.reversed();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Look::WordUnicodeNegate);"
        ],
        "code": [
          "{",
          "    let look = Look::WordUnicodeNegate;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::WordUnicodeNegate);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]