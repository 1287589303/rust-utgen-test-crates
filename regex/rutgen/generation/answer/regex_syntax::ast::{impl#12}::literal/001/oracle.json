[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let e = Literal {",
          "        bytes: vec![],",
          "        exact: true,",
          "    };",
          "    let _result = Ast::literal(e);",
          "}"
        ],
        "oracle": [
          "    let e = Literal { bytes: vec![], exact: true }; assert_eq!(_result, Ast::Literal(Box::new(e)));",
          "    let e = Literal { bytes: vec![97], exact: false }; assert_eq!(_result, Ast::Literal(Box::new(e)));",
          "    let e = Literal { bytes: vec![98, 99], exact: true }; assert_eq!(_result, Ast::Literal(Box::new(e)));",
          "    let e = Literal { bytes: vec![0, 1, 2], exact: false }; assert_eq!(_result, Ast::Literal(Box::new(e)));",
          "    let e = Literal { bytes: vec![255], exact: true }; assert_eq!(_result, Ast::Literal(Box::new(e)));"
        ],
        "code": [
          "{",
          "    let e = Literal {",
          "        bytes: vec![],",
          "        exact: true,",
          "    };",
          "    let _result = Ast::literal(e);",
          "    let e = Literal { bytes: vec![], exact: true }; assert_eq!(_result, Ast::Literal(Box::new(e)));",
          "    let e = Literal { bytes: vec![97], exact: false }; assert_eq!(_result, Ast::Literal(Box::new(e)));",
          "    let e = Literal { bytes: vec![98, 99], exact: true }; assert_eq!(_result, Ast::Literal(Box::new(e)));",
          "    let e = Literal { bytes: vec![0, 1, 2], exact: false }; assert_eq!(_result, Ast::Literal(Box::new(e)));",
          "    let e = Literal { bytes: vec![255], exact: true }; assert_eq!(_result, Ast::Literal(Box::new(e)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let e = Literal {",
          "        bytes: vec![],",
          "        exact: false,",
          "    };",
          "    let _result = Ast::literal(e);",
          "}"
        ],
        "oracle": [
          "    let e = Literal { bytes: vec![], exact: false }; assert_eq!(_result, Ast::Literal(Box::new(e)));",
          "    let e = Literal { bytes: vec![b'a', b'b', b'c'], exact: true }; assert_eq!(_result, Ast::Literal(Box::new(e)));",
          "    let e = Literal { bytes: vec![b'\\\\', b'n'], exact: false }; assert_eq!(_result, Ast::Literal(Box::new(e)));",
          "    let e = Literal { bytes: vec![b'1', b'2', b'3'], exact: true }; assert_eq!(_result, Ast::Literal(Box::new(e)));",
          "    let e = Literal { bytes: vec![b'!'], exact: false }; assert_eq!(_result, Ast::Literal(Box::new(e)));"
        ],
        "code": [
          "{",
          "    let e = Literal {",
          "        bytes: vec![],",
          "        exact: false,",
          "    };",
          "    let _result = Ast::literal(e);",
          "    let e = Literal { bytes: vec![], exact: false }; assert_eq!(_result, Ast::Literal(Box::new(e)));",
          "    let e = Literal { bytes: vec![b'a', b'b', b'c'], exact: true }; assert_eq!(_result, Ast::Literal(Box::new(e)));",
          "    let e = Literal { bytes: vec![b'\\\\', b'n'], exact: false }; assert_eq!(_result, Ast::Literal(Box::new(e)));",
          "    let e = Literal { bytes: vec![b'1', b'2', b'3'], exact: true }; assert_eq!(_result, Ast::Literal(Box::new(e)));",
          "    let e = Literal { bytes: vec![b'!'], exact: false }; assert_eq!(_result, Ast::Literal(Box::new(e)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let e = Literal {",
          "        bytes: vec![b'a'],",
          "        exact: true,",
          "    };",
          "    let _result = Ast::literal(e);",
          "}"
        ],
        "oracle": [
          "    let expected = Ast::Literal(Box::new(Literal { bytes: vec![b'a'], exact: true }));",
          "    assert_eq!(_result, expected);"
        ],
        "code": [
          "{",
          "    let e = Literal {",
          "        bytes: vec![b'a'],",
          "        exact: true,",
          "    };",
          "    let _result = Ast::literal(e);",
          "    let expected = Ast::Literal(Box::new(Literal { bytes: vec![b'a'], exact: true }));",
          "    assert_eq!(_result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let e = Literal {",
          "        bytes: vec![b'a'],",
          "        exact: false,",
          "    };",
          "    let _result = Ast::literal(e);",
          "}"
        ],
        "oracle": [
          "    .assert_eq!(_result, Ast::Literal(Box::new(Literal { bytes: vec![b'a'], exact: false })));"
        ],
        "code": [
          "{",
          "    let e = Literal {",
          "        bytes: vec![b'a'],",
          "        exact: false,",
          "    };",
          "    let _result = Ast::literal(e);",
          "    .assert_eq!(_result, Ast::Literal(Box::new(Literal { bytes: vec![b'a'], exact: false })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let e = Literal {",
          "        bytes: vec![b'a', b'b', b'c'],",
          "        exact: true,",
          "    };",
          "    let _result = Ast::literal(e);",
          "}"
        ],
        "oracle": [
          "    let e = Literal { bytes: vec![b'a', b'b', b'c'], exact: true };",
          "    let expected = Ast::Literal(Box::new(e.clone()));",
          "    assert_eq!(Ast::literal(e), expected);"
        ],
        "code": [
          "{",
          "    let e = Literal {",
          "        bytes: vec![b'a', b'b', b'c'],",
          "        exact: true,",
          "    };",
          "    let _result = Ast::literal(e);",
          "    let e = Literal { bytes: vec![b'a', b'b', b'c'], exact: true };",
          "    let expected = Ast::Literal(Box::new(e.clone()));",
          "    assert_eq!(Ast::literal(e), expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let e = Literal {",
          "        bytes: vec![b'a', b'b', b'c'],",
          "        exact: false,",
          "    };",
          "    let _result = Ast::literal(e);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ast::Literal(Box::new(Literal { bytes: vec![b'a', b'b', b'c'], exact: false })));"
        ],
        "code": [
          "{",
          "    let e = Literal {",
          "        bytes: vec![b'a', b'b', b'c'],",
          "        exact: false,",
          "    };",
          "    let _result = Ast::literal(e);",
          "    assert_eq!(_result, Ast::Literal(Box::new(Literal { bytes: vec![b'a', b'b', b'c'], exact: false })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let e = Literal {",
          "        bytes: (0..=255).map(|i| i as u8).collect(),",
          "        exact: true,",
          "    };",
          "    let _result = Ast::literal(e);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ast::Literal(Box::new(Literal { bytes: (0..=255).map(|i| i as u8).collect(), exact: true })));"
        ],
        "code": [
          "{",
          "    let e = Literal {",
          "        bytes: (0..=255).map(|i| i as u8).collect(),",
          "        exact: true,",
          "    };",
          "    let _result = Ast::literal(e);",
          "    assert_eq!(_result, Ast::Literal(Box::new(Literal { bytes: (0..=255).map(|i| i as u8).collect(), exact: true })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let e = Literal {",
          "        bytes: (0..=255).map(|i| i as u8).collect(),",
          "        exact: false,",
          "    };",
          "    let _result = Ast::literal(e);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ast::Literal(Box::new(Literal { bytes: (0..=255).map(|i| i as u8).collect(), exact: false })));"
        ],
        "code": [
          "{",
          "    let e = Literal {",
          "        bytes: (0..=255).map(|i| i as u8).collect(),",
          "        exact: false,",
          "    };",
          "    let _result = Ast::literal(e);",
          "    assert_eq!(_result, Ast::Literal(Box::new(Literal { bytes: (0..=255).map(|i| i as u8).collect(), exact: false })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let e = Literal {",
          "        bytes: vec![b' '], ",
          "        exact: true,",
          "    };",
          "    let _result = Ast::literal(e);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ast::Literal(Box::new(Literal { bytes: vec![b' '], exact: true })));"
        ],
        "code": [
          "{",
          "    let e = Literal {",
          "        bytes: vec![b' '], ",
          "        exact: true,",
          "    };",
          "    let _result = Ast::literal(e);",
          "    assert_eq!(_result, Ast::Literal(Box::new(Literal { bytes: vec![b' '], exact: true })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]