[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"(?<abc>\";",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_group();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, ERR_UNCLOSED_GROUP_NAME);"
        ],
        "code": [
          "{",
          "    let pattern = \"(?<abc>\";",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_group();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, ERR_UNCLOSED_GROUP_NAME);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"(?)\";",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_group();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(Error::new(ERR_UNCLOSED_GROUP_QUESTION)));",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.flags.borrow().case_insensitive == false);",
          "    assert!(parser.flags.borrow().multi_line == false);",
          "    assert!(parser.flags.borrow().dot_matches_new_line == false);",
          "    assert!(parser.flags.borrow().swap_greed == false);",
          "    assert!(parser.flags.borrow().crlf == false);",
          "    assert!(parser.flags.borrow().ignore_whitespace == false);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert_eq!(parser.depth.get(), 0);"
        ],
        "code": [
          "{",
          "    let pattern = \"(?)\";",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_group();",
          "    assert_eq!(result, Err(Error::new(ERR_UNCLOSED_GROUP_QUESTION)));",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.flags.borrow().case_insensitive == false);",
          "    assert!(parser.flags.borrow().multi_line == false);",
          "    assert!(parser.flags.borrow().dot_matches_new_line == false);",
          "    assert!(parser.flags.borrow().swap_greed == false);",
          "    assert!(parser.flags.borrow().crlf == false);",
          "    assert!(parser.flags.borrow().ignore_whitespace == false);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert_eq!(parser.depth.get(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"(?<name>abc)\";",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_group();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(Error::new(ERR_MISSING_GROUP_NAME)));",
          "    assert_eq!(parser.pos.get(), pattern.len());",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.flags.borrow(), &Flags::default());",
          "    assert_eq!(parser.char.get(), None);"
        ],
        "code": [
          "{",
          "    let pattern = \"(?<name>abc)\";",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_group();",
          "    assert_eq!(result, Err(Error::new(ERR_MISSING_GROUP_NAME)));",
          "    assert_eq!(parser.pos.get(), pattern.len());",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.flags.borrow(), &Flags::default());",
          "    assert_eq!(parser.char.get(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]