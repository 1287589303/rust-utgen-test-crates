[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"(?<name>some_pattern)\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let result = parser.parse_group();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Some(Hir::capture(Capture { index: 0, name: Some(Box::from(\"name\")), sub: Box::new(Hir::empty()) })));"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"(?<name>some_pattern)\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let result = parser.parse_group();",
          "    assert_eq!(result, Ok(Some(Hir::capture(Capture { index: 0, name: Some(Box::from(\"name\")), sub: Box::new(Hir::empty()) })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"(?i)\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let result = parser.parse_group();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let capture = result.unwrap();",
          "    assert!(capture.is_some());",
          "    let cap = capture.unwrap();",
          "    assert_eq!(cap.kind(), HirKind::Capture(hir::Capture { index: /* expected index */, name: Some(Box::from(/* expected name */)), sub: /* expected sub */ }));",
          "    assert_eq!(cap.is_start_anchored(), false);",
          "    assert_eq!(cap.is_match_empty(), false);",
          "    assert_eq!(cap.static_explicit_captures_len(), None);"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"(?i)\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let result = parser.parse_group();",
          "    assert!(result.is_ok());",
          "    let capture = result.unwrap();",
          "    assert!(capture.is_some());",
          "    let cap = capture.unwrap();",
          "    assert_eq!(cap.kind(), HirKind::Capture(hir::Capture { index: /* expected index */, name: Some(Box::from(/* expected name */)), sub: /* expected sub */ }));",
          "    assert_eq!(cap.is_start_anchored(), false);",
          "    assert_eq!(cap.is_match_empty(), false);",
          "    assert_eq!(cap.static_explicit_captures_len(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"(some_pattern)\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let result = parser.parse_group();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Some(Hir::capture(Capture { index: 0, name: Some(Box::from(\"some_pattern\")), sub: Box::new(Hir::empty()) } ))));"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"(some_pattern)\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let result = parser.parse_group();",
          "    assert_eq!(result, Ok(Some(Hir::capture(Capture { index: 0, name: Some(Box::from(\"some_pattern\")), sub: Box::new(Hir::empty()) } ))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"(?P<name>sub_pattern)\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let result = parser.parse_group();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Some(Hir::capture(hir::Capture { index: expected_index, name: Some(Box::from(\"name\")), sub: Box::new(expected_hir) } ))));"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"(?P<name>sub_pattern)\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let result = parser.parse_group();",
          "    assert_eq!(result, Ok(Some(Hir::capture(hir::Capture { index: expected_index, name: Some(Box::from(\"name\")), sub: Box::new(expected_hir) } ))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]