[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"(abc)\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.parse_group();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(Some(Hir::capture(hir::Capture { index: 0, name: None, sub: Box::new(Hir::concat(vec![Hir::char('a'), Hir::char('b'), Hir::char('c')])) })));"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"(abc)\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.parse_group();",
          "    assert_eq!(_result, Ok(Some(Hir::capture(hir::Capture { index: 0, name: None, sub: Box::new(Hir::concat(vec![Hir::char('a'), Hir::char('b'), Hir::char('c')])) })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"(?P<name>abc)\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(1),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.parse_group();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(Some(Hir::capture(Capture { index: 1, name: Some(Box::from(\"name\")), sub: Box::new(Hir::concat(vec![Hir::char('a'), Hir::char('b'), Hir::char('c')])) })))));"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"(?P<name>abc)\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(1),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.parse_group();",
          "    assert_eq!(_result, Ok(Some(Hir::capture(Capture { index: 1, name: Some(Box::from(\"name\")), sub: Box::new(Hir::concat(vec![Hir::char('a'), Hir::char('b'), Hir::char('c')])) })))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"(abc|def)\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.parse_group();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(Some(Hir::capture(hir::Capture { index: 0, name: None, sub: Box::new(<sub_expression>) }))));",
          "    self.bump_and_bump_space();",
          "    assert!(self.char() != Some(')'));",
          "    assert!(!self.is_lookaround_prefix());",
          "    assert!(!self.bump_if(\"?P<\"));",
          "    assert!(!self.bump_if(\"?<\"));",
          "    assert!(!self.bump_if(\"?\"));",
          "    assert_eq!(self.next_capture_index().unwrap(), 0);",
          "    assert!(self.parse_inner().is_ok());"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"(abc|def)\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.parse_group();",
          "    assert_eq!(_result, Ok(Some(Hir::capture(hir::Capture { index: 0, name: None, sub: Box::new(<sub_expression>) }))));",
          "    self.bump_and_bump_space();",
          "    assert!(self.char() != Some(')'));",
          "    assert!(!self.is_lookaround_prefix());",
          "    assert!(!self.bump_if(\"?P<\"));",
          "    assert!(!self.bump_if(\"?<\"));",
          "    assert!(!self.bump_if(\"?\"));",
          "    assert_eq!(self.next_capture_index().unwrap(), 0);",
          "    assert!(self.parse_inner().is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]