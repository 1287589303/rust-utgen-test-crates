[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new();",
          "    let result = config.hybrid(true);",
          "}"
        ],
        "oracle": [
          "    assert!(result.hybrid.is_some() && result.hybrid.unwrap() == true);"
        ],
        "code": [
          "{",
          "    let config = Config::new();",
          "    let result = config.hybrid(true);",
          "    assert!(result.hybrid.is_some() && result.hybrid.unwrap() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new();",
          "    let result = config.hybrid(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.hybrid, Some(false));",
          "    assert_eq!(result.get_hybrid(), false);",
          "    assert_eq!(result.get_match_kind(), MatchKind::All);",
          "    assert_eq!(result.get_utf8_empty(), false);",
          "    assert_eq!(result.get_auto_prefilter(), false);",
          "    assert_eq!(result.get_prefilter(), None);",
          "    assert_eq!(result.get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(result.get_nfa_size_limit(), None);",
          "    assert_eq!(result.get_onepass_size_limit(), None);",
          "    assert_eq!(result.get_hybrid_cache_capacity(), 0);",
          "    assert_eq!(result.get_dfa_size_limit(), None);",
          "    assert_eq!(result.get_dfa_state_limit(), None);",
          "    assert_eq!(result.get_byte_classes(), false);",
          "    assert_eq!(result.get_line_terminator(), 0);",
          "    assert_eq!(result.get_dfa(), false);",
          "    assert_eq!(result.get_onepass(), false);",
          "    assert_eq!(result.get_backtrack(), false);"
        ],
        "code": [
          "{",
          "    let config = Config::new();",
          "    let result = config.hybrid(false);",
          "    assert_eq!(result.hybrid, Some(false));",
          "    assert_eq!(result.get_hybrid(), false);",
          "    assert_eq!(result.get_match_kind(), MatchKind::All);",
          "    assert_eq!(result.get_utf8_empty(), false);",
          "    assert_eq!(result.get_auto_prefilter(), false);",
          "    assert_eq!(result.get_prefilter(), None);",
          "    assert_eq!(result.get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(result.get_nfa_size_limit(), None);",
          "    assert_eq!(result.get_onepass_size_limit(), None);",
          "    assert_eq!(result.get_hybrid_cache_capacity(), 0);",
          "    assert_eq!(result.get_dfa_size_limit(), None);",
          "    assert_eq!(result.get_dfa_state_limit(), None);",
          "    assert_eq!(result.get_byte_classes(), false);",
          "    assert_eq!(result.get_line_terminator(), 0);",
          "    assert_eq!(result.get_dfa(), false);",
          "    assert_eq!(result.get_onepass(), false);",
          "    assert_eq!(result.get_backtrack(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]