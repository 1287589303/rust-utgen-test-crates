[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_matcher = LookMatcher::new();",
          "    look_matcher.set_line_terminator(b'x');",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "}"
        ],
        "oracle": [
          "    let mut look_matcher = LookMatcher::new();",
          "    look_matcher.set_line_terminator(b'x');",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
          "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
          "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
          "    for byte in b'0'..=b'9' { assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte); }",
          "    for byte in b'A'..=b'Z' { assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte); }",
          "    for byte in b'a'..=b'z' { assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte); }",
          "    assert_eq!(start_byte_map.map[usize::from(b'x')], Start::CustomLineTerminator);",
          "    assert_eq!(start_byte_map.map[usize::from(b'y')], Start::NonWordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'z')], Start::WordByte);"
        ],
        "code": [
          "{",
          "    let mut look_matcher = LookMatcher::new();",
          "    look_matcher.set_line_terminator(b'x');",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "    let mut look_matcher = LookMatcher::new();",
          "    look_matcher.set_line_terminator(b'x');",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
          "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
          "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
          "    for byte in b'0'..=b'9' { assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte); }",
          "    for byte in b'A'..=b'Z' { assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte); }",
          "    for byte in b'a'..=b'z' { assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte); }",
          "    assert_eq!(start_byte_map.map[usize::from(b'x')], Start::CustomLineTerminator);",
          "    assert_eq!(start_byte_map.map[usize::from(b'y')], Start::NonWordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'z')], Start::WordByte);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_matcher = LookMatcher::new();",
          "    look_matcher.set_line_terminator(b'x');",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "}"
        ],
        "oracle": [
          "    start_byte_map.map[usize::from(b'\\n')] == Start::LineLF",
          "    start_byte_map.map[usize::from(b'\\r')] == Start::LineCR",
          "    start_byte_map.map[usize::from(b'_')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'0')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'1')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'2')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'3')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'4')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'5')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'6')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'7')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'8')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'9')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'A')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'B')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'C')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'D')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'E')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'F')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'G')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'H')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'I')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'J')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'K')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'L')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'M')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'N')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'O')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'P')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'Q')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'R')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'S')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'T')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'U')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'V')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'W')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'X')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'Y')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'Z')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'a')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'b')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'c')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'd')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'e')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'f')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'g')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'h')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'i')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'j')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'k')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'l')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'm')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'n')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'o')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'p')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'q')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'r')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b's')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b't')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'u')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'v')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'w')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'x')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'y')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'z')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'x')] == Start::CustomLineTerminator"
        ],
        "code": [
          "{",
          "    let mut look_matcher = LookMatcher::new();",
          "    look_matcher.set_line_terminator(b'x');",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "    start_byte_map.map[usize::from(b'\\n')] == Start::LineLF",
          "    start_byte_map.map[usize::from(b'\\r')] == Start::LineCR",
          "    start_byte_map.map[usize::from(b'_')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'0')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'1')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'2')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'3')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'4')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'5')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'6')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'7')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'8')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'9')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'A')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'B')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'C')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'D')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'E')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'F')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'G')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'H')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'I')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'J')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'K')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'L')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'M')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'N')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'O')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'P')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'Q')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'R')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'S')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'T')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'U')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'V')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'W')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'X')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'Y')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'Z')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'a')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'b')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'c')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'd')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'e')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'f')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'g')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'h')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'i')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'j')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'k')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'l')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'm')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'n')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'o')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'p')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'q')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'r')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b's')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b't')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'u')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'v')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'w')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'x')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'y')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'z')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'x')] == Start::CustomLineTerminator",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_matcher = LookMatcher::new();",
          "    look_matcher.set_line_terminator(b'x');",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "}"
        ],
        "oracle": [
          "    let mut look_matcher = LookMatcher::new();",
          "    look_matcher.set_line_terminator(b'x');",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
          "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
          "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
          "    for byte in b'0'..=b'9' {",
          "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
          "    }",
          "    for byte in b'A'..=b'Z' {",
          "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
          "    }",
          "    for byte in b'a'..=b'z' {",
          "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
          "    }",
          "    assert_eq!(start_byte_map.map[usize::from(b'x')], Start::CustomLineTerminator);"
        ],
        "code": [
          "{",
          "    let mut look_matcher = LookMatcher::new();",
          "    look_matcher.set_line_terminator(b'x');",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "    let mut look_matcher = LookMatcher::new();",
          "    look_matcher.set_line_terminator(b'x');",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
          "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
          "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
          "    for byte in b'0'..=b'9' {",
          "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
          "    }",
          "    for byte in b'A'..=b'Z' {",
          "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
          "    }",
          "    for byte in b'a'..=b'z' {",
          "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
          "    }",
          "    assert_eq!(start_byte_map.map[usize::from(b'x')], Start::CustomLineTerminator);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_matcher = LookMatcher::new();",
          "    look_matcher.set_line_terminator(b'x');",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
          "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
          "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'0')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'1')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'2')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'3')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'4')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'5')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'6')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'7')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'8')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'9')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'A')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'B')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'C')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'D')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'E')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'F')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'G')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'H')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'I')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'J')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'K')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'L')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'M')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'N')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'O')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'P')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'Q')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'R')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'S')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'T')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'U')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'V')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'W')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'X')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'Y')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'Z')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'a')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'b')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'c')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'd')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'e')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'f')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'g')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'h')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'i')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'j')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'k')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'l')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'm')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'n')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'o')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'p')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'q')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'r')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b's')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b't')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'u')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'v')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'w')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'x')], Start::CustomLineTerminator);",
          "    assert_eq!(start_byte_map.map[usize::from(b'y')], Start::NonWordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'z')], Start::WordByte);"
        ],
        "code": [
          "{",
          "    let mut look_matcher = LookMatcher::new();",
          "    look_matcher.set_line_terminator(b'x');",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
          "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
          "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'0')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'1')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'2')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'3')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'4')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'5')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'6')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'7')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'8')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'9')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'A')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'B')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'C')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'D')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'E')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'F')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'G')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'H')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'I')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'J')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'K')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'L')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'M')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'N')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'O')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'P')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'Q')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'R')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'S')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'T')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'U')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'V')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'W')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'X')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'Y')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'Z')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'a')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'b')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'c')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'd')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'e')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'f')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'g')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'h')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'i')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'j')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'k')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'l')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'm')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'n')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'o')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'p')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'q')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'r')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b's')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b't')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'u')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'v')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'w')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'x')], Start::CustomLineTerminator);",
          "    assert_eq!(start_byte_map.map[usize::from(b'y')], Start::NonWordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'z')], Start::WordByte);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_matcher = LookMatcher::new();",
          "    look_matcher.set_line_terminator(b'x');",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "}"
        ],
        "oracle": [
          "    let mut look_matcher = LookMatcher::new();",
          "    look_matcher.set_line_terminator(b'x');",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
          "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
          "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
          "    for byte in b'0'..=b'9' { assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte); }",
          "    for byte in b'A'..=b'Z' { assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte); }",
          "    for byte in b'a'..=b'z' { assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte); }",
          "    assert_eq!(start_byte_map.map[usize::from(b'x')], Start::CustomLineTerminator);"
        ],
        "code": [
          "{",
          "    let mut look_matcher = LookMatcher::new();",
          "    look_matcher.set_line_terminator(b'x');",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "    let mut look_matcher = LookMatcher::new();",
          "    look_matcher.set_line_terminator(b'x');",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
          "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
          "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
          "    for byte in b'0'..=b'9' { assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte); }",
          "    for byte in b'A'..=b'Z' { assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte); }",
          "    for byte in b'a'..=b'z' { assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte); }",
          "    assert_eq!(start_byte_map.map[usize::from(b'x')], Start::CustomLineTerminator);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_matcher = LookMatcher::new();",
          "    look_matcher.set_line_terminator(b'x');",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "}"
        ],
        "oracle": [
          "    let look_matcher = LookMatcher::new();",
          "    look_matcher.set_line_terminator(b'x');",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
          "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
          "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
          "    for byte in b'0'..=b'9' {",
          "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
          "    }",
          "    for byte in b'A'..=b'Z' {",
          "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
          "    }",
          "    for byte in b'a'..=b'z' {",
          "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
          "    }",
          "    assert_eq!(start_byte_map.map[usize::from(b'x')], Start::CustomLineTerminator);",
          "    for byte in [b'\\n', b'\\r', b'_', b'0', b'A', b'a'].iter() {",
          "    assert_ne!(start_byte_map.map[usize::from(*byte)], Start::CustomLineTerminator);",
          "    }"
        ],
        "code": [
          "{",
          "    let mut look_matcher = LookMatcher::new();",
          "    look_matcher.set_line_terminator(b'x');",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "    let look_matcher = LookMatcher::new();",
          "    look_matcher.set_line_terminator(b'x');",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
          "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
          "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
          "    for byte in b'0'..=b'9' {",
          "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
          "    }",
          "    for byte in b'A'..=b'Z' {",
          "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
          "    }",
          "    for byte in b'a'..=b'z' {",
          "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
          "    }",
          "    assert_eq!(start_byte_map.map[usize::from(b'x')], Start::CustomLineTerminator);",
          "    for byte in [b'\\n', b'\\r', b'_', b'0', b'A', b'a'].iter() {",
          "    assert_ne!(start_byte_map.map[usize::from(*byte)], Start::CustomLineTerminator);",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_matcher = LookMatcher::new();",
          "    look_matcher.set_line_terminator(b'\\r');",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
          "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
          "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'0')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'9')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'A')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'Z')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'a')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'z')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
          "    assert_ne!(start_byte_map.map[usize::from(b'\\r')], Start::CustomLineTerminator);"
        ],
        "code": [
          "{",
          "    let mut look_matcher = LookMatcher::new();",
          "    look_matcher.set_line_terminator(b'\\r');",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
          "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
          "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'0')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'9')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'A')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'Z')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'a')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'z')], Start::WordByte);",
          "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
          "    assert_ne!(start_byte_map.map[usize::from(b'\\r')], Start::CustomLineTerminator);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_matcher = LookMatcher::new();",
          "    look_matcher.set_line_terminator(b'\\n');",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "}"
        ],
        "oracle": [
          "    start_byte_map.map[usize::from(b'\\n')] == Start::LineLF",
          "    start_byte_map.map[usize::from(b'\\r')] == Start::LineCR",
          "    start_byte_map.map[usize::from(b'_')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'0')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'1')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'2')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'3')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'4')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'5')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'6')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'7')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'8')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'9')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'A')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'B')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'C')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'D')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'E')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'F')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'G')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'H')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'I')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'J')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'K')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'L')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'M')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'N')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'O')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'P')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'Q')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'R')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'S')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'T')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'U')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'V')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'W')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'X')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'Y')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'Z')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'a')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'b')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'c')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'd')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'e')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'f')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'g')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'h')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'i')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'j')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'k')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'l')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'm')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'n')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'o')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'p')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'q')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'r')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b's')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b't')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'u')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'v')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'w')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'x')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'y')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'z')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'!')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'@')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'#')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'$')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'%')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'^')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'&')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'*')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'(')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b')')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'-')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'+')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'=')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'[')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b']')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'{')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'}')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b';')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b':')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'\\\"')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'\\'')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'<')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'>')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b',')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'.')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'/')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'\\\\')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b' ')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'\\t')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(0)] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(255)] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(lineterm)] == Start::CustomLineTerminator"
        ],
        "code": [
          "{",
          "    let mut look_matcher = LookMatcher::new();",
          "    look_matcher.set_line_terminator(b'\\n');",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "    start_byte_map.map[usize::from(b'\\n')] == Start::LineLF",
          "    start_byte_map.map[usize::from(b'\\r')] == Start::LineCR",
          "    start_byte_map.map[usize::from(b'_')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'0')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'1')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'2')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'3')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'4')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'5')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'6')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'7')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'8')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'9')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'A')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'B')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'C')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'D')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'E')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'F')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'G')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'H')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'I')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'J')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'K')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'L')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'M')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'N')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'O')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'P')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'Q')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'R')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'S')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'T')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'U')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'V')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'W')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'X')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'Y')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'Z')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'a')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'b')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'c')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'd')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'e')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'f')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'g')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'h')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'i')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'j')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'k')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'l')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'm')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'n')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'o')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'p')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'q')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'r')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b's')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b't')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'u')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'v')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'w')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'x')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'y')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'z')] == Start::WordByte",
          "    start_byte_map.map[usize::from(b'!')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'@')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'#')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'$')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'%')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'^')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'&')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'*')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'(')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b')')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'-')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'+')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'=')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'[')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b']')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'{')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'}')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b';')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b':')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'\\\"')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'\\'')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'<')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'>')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b',')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'.')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'/')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'\\\\')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b' ')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(b'\\t')] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(0)] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(255)] == Start::NonWordByte",
          "    start_byte_map.map[usize::from(lineterm)] == Start::CustomLineTerminator",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_matcher = LookMatcher::new();",
          "    look_matcher.set_line_terminator(b'x');",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "}"
        ],
        "oracle": [
          "    let look_matcher = LookMatcher::new();",
          "    look_matcher.set_line_terminator(b'\\n');",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
          "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
          "    look_matcher.set_line_terminator(b'\\r');",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
          "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
          "    look_matcher.set_line_terminator(b'_');",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "    for byte in b'0'..=b'9' {",
          "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
          "    }",
          "    for byte in b'A'..=b'Z' {",
          "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
          "    }",
          "    for byte in b'a'..=b'z' {",
          "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
          "    }",
          "    look_matcher.set_line_terminator(b'x');",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "    assert_eq!(start_byte_map.map[usize::from(b'x')], Start::CustomLineTerminator);"
        ],
        "code": [
          "{",
          "    let mut look_matcher = LookMatcher::new();",
          "    look_matcher.set_line_terminator(b'x');",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "    let look_matcher = LookMatcher::new();",
          "    look_matcher.set_line_terminator(b'\\n');",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
          "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
          "    look_matcher.set_line_terminator(b'\\r');",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
          "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
          "    look_matcher.set_line_terminator(b'_');",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "    for byte in b'0'..=b'9' {",
          "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
          "    }",
          "    for byte in b'A'..=b'Z' {",
          "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
          "    }",
          "    for byte in b'a'..=b'z' {",
          "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
          "    }",
          "    look_matcher.set_line_terminator(b'x');",
          "    let start_byte_map = StartByteMap::new(&look_matcher);",
          "    assert_eq!(start_byte_map.map[usize::from(b'x')], Start::CustomLineTerminator);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]