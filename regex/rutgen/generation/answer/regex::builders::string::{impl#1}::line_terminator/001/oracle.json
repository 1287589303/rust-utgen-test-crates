[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = RegexSetBuilder::new([r\"^foo$\"])",
          "        .line_terminator(b'\\n')",
          "        .build()",
          "        .unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(RegexSetBuilder::new([r\"^foo$\"]).line_terminator(b'\\n').build().is_ok());",
          "    assert!(RegexSetBuilder::new([r\"^foo$\"]).line_terminator(b'\\x00').build().is_ok());",
          "    assert!(RegexSetBuilder::new([r\".\"]).line_terminator(b'\\n').build().unwrap().is_match(\"\\n\"));",
          "    assert!(!RegexSetBuilder::new([r\".\"]).line_terminator(b'\\n').build().unwrap().is_match(\"\\x00\"));",
          "    assert!(RegexSetBuilder::new([r\".\"]).line_terminator(0x80).build().is_err());",
          "    assert!(RegexSetBuilder::new([r\"a\"]).line_terminator(0x80).build().is_ok());"
        ],
        "code": [
          "{",
          "    let re = RegexSetBuilder::new([r\"^foo$\"])",
          "        .line_terminator(b'\\n')",
          "        .build()",
          "        .unwrap();",
          "    assert!(RegexSetBuilder::new([r\"^foo$\"]).line_terminator(b'\\n').build().is_ok());",
          "    assert!(RegexSetBuilder::new([r\"^foo$\"]).line_terminator(b'\\x00').build().is_ok());",
          "    assert!(RegexSetBuilder::new([r\".\"]).line_terminator(b'\\n').build().unwrap().is_match(\"\\n\"));",
          "    assert!(!RegexSetBuilder::new([r\".\"]).line_terminator(b'\\n').build().unwrap().is_match(\"\\x00\"));",
          "    assert!(RegexSetBuilder::new([r\".\"]).line_terminator(0x80).build().is_err());",
          "    assert!(RegexSetBuilder::new([r\"a\"]).line_terminator(0x80).build().is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = RegexSetBuilder::new([r\"a\"])",
          "        .line_terminator(0x80)",
          "        .build()",
          "        .unwrap();",
          "}"
        ],
        "oracle": [
          "    self.line_terminator(0x80).is_ok()",
          "    self.line_terminator(0x00).is_ok()",
          "    self.line_terminator(b'\\n').is_ok()",
          "    self.line_terminator(b'\\x00').is_ok()",
          "    self.line_terminator(0x80).is_err()",
          "    self.line_terminator(0xFF).is_err()",
          "    self.line_terminator(0x01).is_ok()",
          "    self.line_terminator(0x7F).is_ok()",
          "    self.line_terminator(b'\\r').is_ok()"
        ],
        "code": [
          "{",
          "    let re = RegexSetBuilder::new([r\"a\"])",
          "        .line_terminator(0x80)",
          "        .build()",
          "        .unwrap();",
          "    self.line_terminator(0x80).is_ok()",
          "    self.line_terminator(0x00).is_ok()",
          "    self.line_terminator(b'\\n').is_ok()",
          "    self.line_terminator(b'\\x00').is_ok()",
          "    self.line_terminator(0x80).is_err()",
          "    self.line_terminator(0xFF).is_err()",
          "    self.line_terminator(0x01).is_ok()",
          "    self.line_terminator(0x7F).is_ok()",
          "    self.line_terminator(b'\\r').is_ok()",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = RegexSetBuilder::new([r\".\"])",
          "        .line_terminator(0x80)",
          "        .build();",
          "    assert!(result.is_err());",
          "}"
        ],
        "oracle": [
          "    self.line_terminator(0x80) == self",
          "    RegexSetBuilder::new([r\".\"]).line_terminator(0x80).build().is_err() == true",
          "    self.line_terminator(0x00) == self",
          "    RegexSetBuilder::new([r\"^foo$\"]).multi_line(true).line_terminator(b'\\x00').build().is_ok() == true",
          "    self.line_terminator(b'\\x00') == self",
          "    RegexSetBuilder::new([r\".\"]).line_terminator(b'\\x00').build().is_ok() == true",
          "    self.line_terminator(0x7F) == self",
          "    RegexSetBuilder::new([r\"a\"]).line_terminator(0x7F).build().is_ok() == true",
          "    self.line_terminator(0x01) == self",
          "    RegexSetBuilder::new([r\"^bar$\"]).multi_line(true).line_terminator(0x01).build().is_ok() == true"
        ],
        "code": [
          "{",
          "    let result = RegexSetBuilder::new([r\".\"])",
          "        .line_terminator(0x80)",
          "        .build();",
          "    assert!(result.is_err());",
          "    self.line_terminator(0x80) == self",
          "    RegexSetBuilder::new([r\".\"]).line_terminator(0x80).build().is_err() == true",
          "    self.line_terminator(0x00) == self",
          "    RegexSetBuilder::new([r\"^foo$\"]).multi_line(true).line_terminator(b'\\x00').build().is_ok() == true",
          "    self.line_terminator(b'\\x00') == self",
          "    RegexSetBuilder::new([r\".\"]).line_terminator(b'\\x00').build().is_ok() == true",
          "    self.line_terminator(0x7F) == self",
          "    RegexSetBuilder::new([r\"a\"]).line_terminator(0x7F).build().is_ok() == true",
          "    self.line_terminator(0x01) == self",
          "    RegexSetBuilder::new([r\"^bar$\"]).multi_line(true).line_terminator(0x01).build().is_ok() == true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = RegexSetBuilder::new([r\".\"])",
          "        .line_terminator(0)",
          "        .build()",
          "        .unwrap();",
          "}"
        ],
        "oracle": [
          "    let re = RegexSetBuilder::new([r\".\"]).line_terminator(0).build().is_ok();",
          "    let re = RegexSetBuilder::new([r\".\"]).line_terminator(b'\\n').build().unwrap();",
          "    let re = RegexSetBuilder::new([r\"^foo$\"]).multi_line(true).line_terminator(b'\\x00').build().unwrap();",
          "    let re = RegexSetBuilder::new([r\".\"]).line_terminator(b'\\x00').build().unwrap();",
          "    assert!(re.is_match(\"\\x00foo\\x00\"));",
          "    let re_err = RegexSetBuilder::new([r\".\"]).line_terminator(0x80).build();",
          "    assert!(re_err.is_err());",
          "    let re_ok = RegexSetBuilder::new([r\"a\"]).line_terminator(0x80).build();",
          "    assert!(re_ok.is_ok());"
        ],
        "code": [
          "{",
          "    let re = RegexSetBuilder::new([r\".\"])",
          "        .line_terminator(0)",
          "        .build()",
          "        .unwrap();",
          "    let re = RegexSetBuilder::new([r\".\"]).line_terminator(0).build().is_ok();",
          "    let re = RegexSetBuilder::new([r\".\"]).line_terminator(b'\\n').build().unwrap();",
          "    let re = RegexSetBuilder::new([r\"^foo$\"]).multi_line(true).line_terminator(b'\\x00').build().unwrap();",
          "    let re = RegexSetBuilder::new([r\".\"]).line_terminator(b'\\x00').build().unwrap();",
          "    assert!(re.is_match(\"\\x00foo\\x00\"));",
          "    let re_err = RegexSetBuilder::new([r\".\"]).line_terminator(0x80).build();",
          "    assert!(re_err.is_err());",
          "    let re_ok = RegexSetBuilder::new([r\"a\"]).line_terminator(0x80).build();",
          "    assert!(re_ok.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = RegexSetBuilder::new([r\".\"])",
          "        .line_terminator(0x00)",
          "        .build()",
          "        .unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(re.is_match(\"\\n\"));",
          "    assert!(!re.is_match(\"\\x00\"));",
          "    let re_err = RegexSetBuilder::new([r\".\"])",
          "    .line_terminator(0x80)",
          "    .build();",
          "    assert!(re_err.is_err());",
          "    let re_ok = RegexSetBuilder::new([r\"a\"])",
          "    .line_terminator(0x80)",
          "    .build();",
          "    assert!(re_ok.is_ok());"
        ],
        "code": [
          "{",
          "    let re = RegexSetBuilder::new([r\".\"])",
          "        .line_terminator(0x00)",
          "        .build()",
          "        .unwrap();",
          "    assert!(re.is_match(\"\\n\"));",
          "    assert!(!re.is_match(\"\\x00\"));",
          "    let re_err = RegexSetBuilder::new([r\".\"])",
          "    .line_terminator(0x80)",
          "    .build();",
          "    assert!(re_err.is_err());",
          "    let re_ok = RegexSetBuilder::new([r\"a\"])",
          "    .line_terminator(0x80)",
          "    .build();",
          "    assert!(re_ok.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = RegexSetBuilder::new([r\".\"])",
          "        .line_terminator(0xFF)",
          "        .build();",
          "    assert!(result.is_err());",
          "}"
        ],
        "oracle": [
          "    let result = RegexSetBuilder::new([r\".\"]).line_terminator(0xFF).build(); assert!(result.is_err());",
          "    let result = RegexSetBuilder::new([r\"a\"]).line_terminator(0x80).build(); assert!(result.is_ok());",
          "    let re = RegexSetBuilder::new([r\"^foo$\"]).multi_line(true).line_terminator(b'\\x00').build().unwrap(); let hay = \"\\x00foo\\x00\"; assert!(re.is_match(hay));",
          "    let re = RegexSetBuilder::new([r\".\"]).line_terminator(b'\\x00').build().unwrap(); assert!(re.is_match(\"\\n\")); assert!(!re.is_match(\"\\x00\"));"
        ],
        "code": [
          "{",
          "    let result = RegexSetBuilder::new([r\".\"])",
          "        .line_terminator(0xFF)",
          "        .build();",
          "    assert!(result.is_err());",
          "    let result = RegexSetBuilder::new([r\".\"]).line_terminator(0xFF).build(); assert!(result.is_err());",
          "    let result = RegexSetBuilder::new([r\"a\"]).line_terminator(0x80).build(); assert!(result.is_ok());",
          "    let re = RegexSetBuilder::new([r\"^foo$\"]).multi_line(true).line_terminator(b'\\x00').build().unwrap(); let hay = \"\\x00foo\\x00\"; assert!(re.is_match(hay));",
          "    let re = RegexSetBuilder::new([r\".\"]).line_terminator(b'\\x00').build().unwrap(); assert!(re.is_match(\"\\n\")); assert!(!re.is_match(\"\\x00\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]