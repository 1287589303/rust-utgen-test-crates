[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition_table = TransitionTable {",
          "        table: vec![0, 1, 2, 3, 4],",
          "        classes: ByteClasses::default(),",
          "        stride2: 1,",
          "    };",
          "    let dfa = DFA {",
          "        tt: transition_table,",
          "        st: StartTable {",
          "            table: vec![],",
          "            kind: StartKind::Both,",
          "            start_map: StartByteMap::default(),",
          "            stride: 0,",
          "            pattern_len: None,",
          "            universal_start_unanchored: None,",
          "            universal_start_anchored: None,",
          "        },",
          "        ms: MatchStates {",
          "            slices: vec![],",
          "            pattern_ids: vec![],",
          "            pattern_len: 0,",
          "        },",
          "        special: Special::default(),",
          "        accels: Accels { accels: vec![] },",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags::default(),",
          "    };",
          "",
          "    let state_id = StateID(0);",
          "    dfa.to_index(state_id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.to_index(StateID(0)), 0);",
          "    assert_eq!(dfa.to_index(StateID(1)), 1);",
          "    assert_eq!(dfa.to_index(StateID(2)), 2);",
          "    assert_eq!(dfa.to_index(StateID(3)), 3);",
          "    assert_eq!(dfa.to_index(StateID(4)), 4);"
        ],
        "code": [
          "{",
          "    let transition_table = TransitionTable {",
          "        table: vec![0, 1, 2, 3, 4],",
          "        classes: ByteClasses::default(),",
          "        stride2: 1,",
          "    };",
          "    let dfa = DFA {",
          "        tt: transition_table,",
          "        st: StartTable {",
          "            table: vec![],",
          "            kind: StartKind::Both,",
          "            start_map: StartByteMap::default(),",
          "            stride: 0,",
          "            pattern_len: None,",
          "            universal_start_unanchored: None,",
          "            universal_start_anchored: None,",
          "        },",
          "        ms: MatchStates {",
          "            slices: vec![],",
          "            pattern_ids: vec![],",
          "            pattern_len: 0,",
          "        },",
          "        special: Special::default(),",
          "        accels: Accels { accels: vec![] },",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags::default(),",
          "    };",
          "",
          "    let state_id = StateID(0);",
          "    dfa.to_index(state_id);",
          "    assert_eq!(dfa.to_index(StateID(0)), 0);",
          "    assert_eq!(dfa.to_index(StateID(1)), 1);",
          "    assert_eq!(dfa.to_index(StateID(2)), 2);",
          "    assert_eq!(dfa.to_index(StateID(3)), 3);",
          "    assert_eq!(dfa.to_index(StateID(4)), 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition_table = TransitionTable {",
          "        table: vec![0, 1, 2, 3, 4],",
          "        classes: ByteClasses::default(),",
          "        stride2: 1,",
          "    };",
          "    let dfa = DFA {",
          "        tt: transition_table,",
          "        st: StartTable {",
          "            table: vec![],",
          "            kind: StartKind::Both,",
          "            start_map: StartByteMap::default(),",
          "            stride: 0,",
          "            pattern_len: None,",
          "            universal_start_unanchored: None,",
          "            universal_start_anchored: None,",
          "        },",
          "        ms: MatchStates {",
          "            slices: vec![],",
          "            pattern_ids: vec![],",
          "            pattern_len: 0,",
          "        },",
          "        special: Special::default(),",
          "        accels: Accels { accels: vec![] },",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags::default(),",
          "    };",
          "",
          "    let state_id = StateID(4);",
          "    dfa.to_index(state_id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.to_index(StateID(0)), 0);",
          "    assert_eq!(dfa.to_index(StateID(1)), 1);",
          "    assert_eq!(dfa.to_index(StateID(2)), 2);",
          "    assert_eq!(dfa.to_index(StateID(3)), 3);",
          "    assert_eq!(dfa.to_index(StateID(4)), 4);"
        ],
        "code": [
          "{",
          "    let transition_table = TransitionTable {",
          "        table: vec![0, 1, 2, 3, 4],",
          "        classes: ByteClasses::default(),",
          "        stride2: 1,",
          "    };",
          "    let dfa = DFA {",
          "        tt: transition_table,",
          "        st: StartTable {",
          "            table: vec![],",
          "            kind: StartKind::Both,",
          "            start_map: StartByteMap::default(),",
          "            stride: 0,",
          "            pattern_len: None,",
          "            universal_start_unanchored: None,",
          "            universal_start_anchored: None,",
          "        },",
          "        ms: MatchStates {",
          "            slices: vec![],",
          "            pattern_ids: vec![],",
          "            pattern_len: 0,",
          "        },",
          "        special: Special::default(),",
          "        accels: Accels { accels: vec![] },",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags::default(),",
          "    };",
          "",
          "    let state_id = StateID(4);",
          "    dfa.to_index(state_id);",
          "    assert_eq!(dfa.to_index(StateID(0)), 0);",
          "    assert_eq!(dfa.to_index(StateID(1)), 1);",
          "    assert_eq!(dfa.to_index(StateID(2)), 2);",
          "    assert_eq!(dfa.to_index(StateID(3)), 3);",
          "    assert_eq!(dfa.to_index(StateID(4)), 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition_table = TransitionTable {",
          "        table: vec![0, 1, 2, 3, 4],",
          "        classes: ByteClasses::default(),",
          "        stride2: 1,",
          "    };",
          "    let dfa = DFA {",
          "        tt: transition_table,",
          "        st: StartTable {",
          "            table: vec![],",
          "            kind: StartKind::Both,",
          "            start_map: StartByteMap::default(),",
          "            stride: 0,",
          "            pattern_len: None,",
          "            universal_start_unanchored: None,",
          "            universal_start_anchored: None,",
          "        },",
          "        ms: MatchStates {",
          "            slices: vec![],",
          "            pattern_ids: vec![],",
          "            pattern_len: 0,",
          "        },",
          "        special: Special::default(),",
          "        accels: Accels { accels: vec![] },",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags::default(),",
          "    };",
          "",
          "    let state_id = StateID(5);",
          "    dfa.to_index(state_id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.to_index(StateID(0)), 0);",
          "    assert_eq!(dfa.to_index(StateID(1)), 1);",
          "    assert_eq!(dfa.to_index(StateID(2)), 2);",
          "    assert_eq!(dfa.to_index(StateID(3)), 3);",
          "    assert_eq!(dfa.to_index(StateID(4)), 4);",
          "    assert_eq!(dfa.to_index(StateID(5)), 5);"
        ],
        "code": [
          "{",
          "    let transition_table = TransitionTable {",
          "        table: vec![0, 1, 2, 3, 4],",
          "        classes: ByteClasses::default(),",
          "        stride2: 1,",
          "    };",
          "    let dfa = DFA {",
          "        tt: transition_table,",
          "        st: StartTable {",
          "            table: vec![],",
          "            kind: StartKind::Both,",
          "            start_map: StartByteMap::default(),",
          "            stride: 0,",
          "            pattern_len: None,",
          "            universal_start_unanchored: None,",
          "            universal_start_anchored: None,",
          "        },",
          "        ms: MatchStates {",
          "            slices: vec![],",
          "            pattern_ids: vec![],",
          "            pattern_len: 0,",
          "        },",
          "        special: Special::default(),",
          "        accels: Accels { accels: vec![] },",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags::default(),",
          "    };",
          "",
          "    let state_id = StateID(5);",
          "    dfa.to_index(state_id);",
          "    assert_eq!(dfa.to_index(StateID(0)), 0);",
          "    assert_eq!(dfa.to_index(StateID(1)), 1);",
          "    assert_eq!(dfa.to_index(StateID(2)), 2);",
          "    assert_eq!(dfa.to_index(StateID(3)), 3);",
          "    assert_eq!(dfa.to_index(StateID(4)), 4);",
          "    assert_eq!(dfa.to_index(StateID(5)), 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition_table = TransitionTable {",
          "        table: vec![0, 1, 2, 3, 4],",
          "        classes: ByteClasses::default(),",
          "        stride2: 1,",
          "    };",
          "    let dfa = DFA {",
          "        tt: transition_table,",
          "        st: StartTable {",
          "            table: vec![],",
          "            kind: StartKind::Both,",
          "            start_map: StartByteMap::default(),",
          "            stride: 0,",
          "            pattern_len: None,",
          "            universal_start_unanchored: None,",
          "            universal_start_anchored: None,",
          "        },",
          "        ms: MatchStates {",
          "            slices: vec![],",
          "            pattern_ids: vec![],",
          "            pattern_len: 0,",
          "        },",
          "        special: Special::default(),",
          "        accels: Accels { accels: vec![] },",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags::default(),",
          "    };",
          "",
          "    let state_id = StateID(2);",
          "    dfa.to_index(state_id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.to_index(StateID(0)), 0);",
          "    assert_eq!(dfa.to_index(StateID(1)), 1);",
          "    assert_eq!(dfa.to_index(StateID(2)), 2);",
          "    assert_eq!(dfa.to_index(StateID(3)), 3);",
          "    assert_eq!(dfa.to_index(StateID(4)), 4);"
        ],
        "code": [
          "{",
          "    let transition_table = TransitionTable {",
          "        table: vec![0, 1, 2, 3, 4],",
          "        classes: ByteClasses::default(),",
          "        stride2: 1,",
          "    };",
          "    let dfa = DFA {",
          "        tt: transition_table,",
          "        st: StartTable {",
          "            table: vec![],",
          "            kind: StartKind::Both,",
          "            start_map: StartByteMap::default(),",
          "            stride: 0,",
          "            pattern_len: None,",
          "            universal_start_unanchored: None,",
          "            universal_start_anchored: None,",
          "        },",
          "        ms: MatchStates {",
          "            slices: vec![],",
          "            pattern_ids: vec![],",
          "            pattern_len: 0,",
          "        },",
          "        special: Special::default(),",
          "        accels: Accels { accels: vec![] },",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags::default(),",
          "    };",
          "",
          "    let state_id = StateID(2);",
          "    dfa.to_index(state_id);",
          "    assert_eq!(dfa.to_index(StateID(0)), 0);",
          "    assert_eq!(dfa.to_index(StateID(1)), 1);",
          "    assert_eq!(dfa.to_index(StateID(2)), 2);",
          "    assert_eq!(dfa.to_index(StateID(3)), 3);",
          "    assert_eq!(dfa.to_index(StateID(4)), 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]