[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Literal(Vec<u8>);",
          "    let hirs = vec![Hir { kind: HirKind::Literal(Literal(vec![])), props: Properties {} }];",
          "    let result = singleton_chars(&hirs);",
          "}"
        ],
        "oracle": [
          "    let hirs_empty_literal = vec![Hir { kind: HirKind::Literal(Literal(vec![])), props: Properties {} }];",
          "    assert_eq!(singleton_chars(&hirs_empty_literal), None);",
          "    ",
          "    let hirs_invalid_utf8 = vec![Hir { kind: HirKind::Literal(Literal(vec![0xFF])), props: Properties {} }];",
          "    assert_eq!(singleton_chars(&hirs_invalid_utf8), None);",
          "    ",
          "    let hirs_mismatched_length = vec![Hir { kind: HirKind::Literal(Literal(vec![0xE2, 0x82, 0xAC, 0x00])), props: Properties {} }];",
          "    assert_eq!(singleton_chars(&hirs_mismatched_length), None);",
          "    ",
          "    let hirs_non_literal = vec![Hir { kind: HirKind::Class(Class { /* initialize as needed */ }), props: Properties {} }];",
          "    assert_eq!(singleton_chars(&hirs_non_literal), None);"
        ],
        "code": [
          "{",
          "    struct Literal(Vec<u8>);",
          "    let hirs = vec![Hir { kind: HirKind::Literal(Literal(vec![])), props: Properties {} }];",
          "    let result = singleton_chars(&hirs);",
          "    let hirs_empty_literal = vec![Hir { kind: HirKind::Literal(Literal(vec![])), props: Properties {} }];",
          "    assert_eq!(singleton_chars(&hirs_empty_literal), None);",
          "    ",
          "    let hirs_invalid_utf8 = vec![Hir { kind: HirKind::Literal(Literal(vec![0xFF])), props: Properties {} }];",
          "    assert_eq!(singleton_chars(&hirs_invalid_utf8), None);",
          "    ",
          "    let hirs_mismatched_length = vec![Hir { kind: HirKind::Literal(Literal(vec![0xE2, 0x82, 0xAC, 0x00])), props: Properties {} }];",
          "    assert_eq!(singleton_chars(&hirs_mismatched_length), None);",
          "    ",
          "    let hirs_non_literal = vec![Hir { kind: HirKind::Class(Class { /* initialize as needed */ }), props: Properties {} }];",
          "    assert_eq!(singleton_chars(&hirs_non_literal), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Literal(Vec<u8>);",
          "    let hirs = vec![Hir { kind: HirKind::Literal(Literal(vec![0xFF])), props: Properties {} }];",
          "    let result = singleton_chars(&hirs);",
          "}"
        ],
        "oracle": [
          "    let hirs = vec![Hir { kind: HirKind::Literal(Literal(vec![0xFF])), props: Properties {} }];",
          "    let result = singleton_chars(&hirs);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    struct Literal(Vec<u8>);",
          "    let hirs = vec![Hir { kind: HirKind::Literal(Literal(vec![0xFF])), props: Properties {} }];",
          "    let result = singleton_chars(&hirs);",
          "    let hirs = vec![Hir { kind: HirKind::Literal(Literal(vec![0xFF])), props: Properties {} }];",
          "    let result = singleton_chars(&hirs);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Literal(Vec<u8>);",
          "    let hirs = vec![Hir { kind: HirKind::Literal(Literal(vec![0xC2, 0xA9])), props: Properties {} }];",
          "    let result = singleton_chars(&hirs);",
          "}"
        ],
        "oracle": [
          "    let hirs_none_utf8 = vec![Hir { kind: HirKind::Literal(Literal(vec![0xC2, 0xA9, 0xC2])), props: Properties {} }];",
          "    assert_eq!(singleton_chars(&hirs_none_utf8), None);",
          "    ",
          "    let hirs_none_not_literal = vec![Hir { kind: HirKind::Class(Class::new()), props: Properties {} }];",
          "    assert_eq!(singleton_chars(&hirs_none_not_literal), None);",
          "    ",
          "    let hirs_none_invalid_length = vec![Hir { kind: HirKind::Literal(Literal(vec![0xC2])), props: Properties {} }];",
          "    assert_eq!(singleton_chars(&hirs_none_invalid_length), None);",
          "    ",
          "    let hirs_none_invalid_utf8 = vec![Hir { kind: HirKind::Literal(Literal(vec![0xFF])), props: Properties {} }];",
          "    assert_eq!(singleton_chars(&hirs_none_invalid_utf8), None);",
          "    ",
          "    let hirs_none_mismatched_length = vec![Hir { kind: HirKind::Literal(Literal(vec![0xE2, 0x82, 0xAC])), props: Properties {} }];",
          "    assert_eq!(singleton_chars(&hirs_none_mismatched_length), None);"
        ],
        "code": [
          "{",
          "    struct Literal(Vec<u8>);",
          "    let hirs = vec![Hir { kind: HirKind::Literal(Literal(vec![0xC2, 0xA9])), props: Properties {} }];",
          "    let result = singleton_chars(&hirs);",
          "    let hirs_none_utf8 = vec![Hir { kind: HirKind::Literal(Literal(vec![0xC2, 0xA9, 0xC2])), props: Properties {} }];",
          "    assert_eq!(singleton_chars(&hirs_none_utf8), None);",
          "    ",
          "    let hirs_none_not_literal = vec![Hir { kind: HirKind::Class(Class::new()), props: Properties {} }];",
          "    assert_eq!(singleton_chars(&hirs_none_not_literal), None);",
          "    ",
          "    let hirs_none_invalid_length = vec![Hir { kind: HirKind::Literal(Literal(vec![0xC2])), props: Properties {} }];",
          "    assert_eq!(singleton_chars(&hirs_none_invalid_length), None);",
          "    ",
          "    let hirs_none_invalid_utf8 = vec![Hir { kind: HirKind::Literal(Literal(vec![0xFF])), props: Properties {} }];",
          "    assert_eq!(singleton_chars(&hirs_none_invalid_utf8), None);",
          "    ",
          "    let hirs_none_mismatched_length = vec![Hir { kind: HirKind::Literal(Literal(vec![0xE2, 0x82, 0xAC])), props: Properties {} }];",
          "    assert_eq!(singleton_chars(&hirs_none_mismatched_length), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]