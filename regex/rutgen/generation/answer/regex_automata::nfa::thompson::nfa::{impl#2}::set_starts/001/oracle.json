[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut inner = Inner::default();",
          "    let start_anchored = StateID(SmallIndex(2));",
          "    let start_unanchored = StateID(SmallIndex(2));",
          "    let start_pattern = vec![StateID(SmallIndex(0)), StateID(SmallIndex(1))];",
          "    inner.set_starts(start_anchored, start_unanchored, &start_pattern);",
          "}"
        ],
        "oracle": [
          "    inner.start_anchored == start_anchored",
          "    inner.start_unanchored == start_unanchored",
          "    inner.start_pattern == start_pattern"
        ],
        "code": [
          "{",
          "    let mut inner = Inner::default();",
          "    let start_anchored = StateID(SmallIndex(2));",
          "    let start_unanchored = StateID(SmallIndex(2));",
          "    let start_pattern = vec![StateID(SmallIndex(0)), StateID(SmallIndex(1))];",
          "    inner.set_starts(start_anchored, start_unanchored, &start_pattern);",
          "    inner.start_anchored == start_anchored",
          "    inner.start_unanchored == start_unanchored",
          "    inner.start_pattern == start_pattern",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut inner = Inner::default();",
          "    let start_anchored = StateID(SmallIndex(1));",
          "    let start_unanchored = StateID(SmallIndex(3));",
          "    let start_pattern = vec![StateID(SmallIndex(0))];",
          "    inner.set_starts(start_anchored, start_unanchored, &start_pattern);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(inner.start_anchored, StateID(SmallIndex(1)));",
          "    assert_eq!(inner.start_unanchored, StateID(SmallIndex(3)));",
          "    assert_eq!(inner.start_pattern, vec![StateID(SmallIndex(0))]);"
        ],
        "code": [
          "{",
          "    let mut inner = Inner::default();",
          "    let start_anchored = StateID(SmallIndex(1));",
          "    let start_unanchored = StateID(SmallIndex(3));",
          "    let start_pattern = vec![StateID(SmallIndex(0))];",
          "    inner.set_starts(start_anchored, start_unanchored, &start_pattern);",
          "    assert_eq!(inner.start_anchored, StateID(SmallIndex(1)));",
          "    assert_eq!(inner.start_unanchored, StateID(SmallIndex(3)));",
          "    assert_eq!(inner.start_pattern, vec![StateID(SmallIndex(0))]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut inner = Inner::default();",
          "    let start_anchored = StateID(SmallIndex(0));",
          "    let start_unanchored = StateID(SmallIndex(1));",
          "    let start_pattern = (0..256).map(|i| StateID(SmallIndex(i))).collect::<Vec<_>>(); // assuming max_states = 256",
          "    inner.set_starts(start_anchored, start_unanchored, &start_pattern);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(inner.start_anchored, StateID(SmallIndex(0)));",
          "    assert_eq!(inner.start_unanchored, StateID(SmallIndex(1)));",
          "    assert_eq!(inner.start_pattern.len(), 256);",
          "    assert_eq!(inner.start_pattern[0], StateID(SmallIndex(0)));",
          "    assert_eq!(inner.start_pattern[1], StateID(SmallIndex(1)));",
          "    assert_eq!(inner.start_pattern[255], StateID(SmallIndex(255)));"
        ],
        "code": [
          "{",
          "    let mut inner = Inner::default();",
          "    let start_anchored = StateID(SmallIndex(0));",
          "    let start_unanchored = StateID(SmallIndex(1));",
          "    let start_pattern = (0..256).map(|i| StateID(SmallIndex(i))).collect::<Vec<_>>(); // assuming max_states = 256",
          "    inner.set_starts(start_anchored, start_unanchored, &start_pattern);",
          "    assert_eq!(inner.start_anchored, StateID(SmallIndex(0)));",
          "    assert_eq!(inner.start_unanchored, StateID(SmallIndex(1)));",
          "    assert_eq!(inner.start_pattern.len(), 256);",
          "    assert_eq!(inner.start_pattern[0], StateID(SmallIndex(0)));",
          "    assert_eq!(inner.start_pattern[1], StateID(SmallIndex(1)));",
          "    assert_eq!(inner.start_pattern[255], StateID(SmallIndex(255)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut inner = Inner::default();",
          "    let start_anchored = StateID(SmallIndex(0));",
          "    let start_unanchored = StateID(SmallIndex(1));",
          "    let start_pattern: Vec<StateID> = vec![]; // empty slice",
          "    inner.set_starts(start_anchored, start_unanchored, &start_pattern);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(inner.start_anchored, StateID(SmallIndex(0)));",
          "    assert_eq!(inner.start_unanchored, StateID(SmallIndex(1)));",
          "    assert!(inner.start_pattern.is_empty());"
        ],
        "code": [
          "{",
          "    let mut inner = Inner::default();",
          "    let start_anchored = StateID(SmallIndex(0));",
          "    let start_unanchored = StateID(SmallIndex(1));",
          "    let start_pattern: Vec<StateID> = vec![]; // empty slice",
          "    inner.set_starts(start_anchored, start_unanchored, &start_pattern);",
          "    assert_eq!(inner.start_anchored, StateID(SmallIndex(0)));",
          "    assert_eq!(inner.start_unanchored, StateID(SmallIndex(1)));",
          "    assert!(inner.start_pattern.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]