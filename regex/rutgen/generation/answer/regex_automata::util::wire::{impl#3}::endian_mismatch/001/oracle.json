[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let expected: u32 = 0;",
          "    let found: u32 = 0;",
          "    let result = DeserializeError::endian_mismatch(expected, found);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, DeserializeError(DeserializeErrorKind::EndianMismatch { expected: 0, found: 0 }));"
        ],
        "code": [
          "{",
          "    let expected: u32 = 0;",
          "    let found: u32 = 0;",
          "    let result = DeserializeError::endian_mismatch(expected, found);",
          "    assert_eq!(result, DeserializeError(DeserializeErrorKind::EndianMismatch { expected: 0, found: 0 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let expected: u32 = u32::MAX;",
          "    let found: u32 = u32::MAX;",
          "    let result = DeserializeError::endian_mismatch(expected, found);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, DeserializeError(DeserializeErrorKind::EndianMismatch { expected: u32::MAX, found: u32::MAX }));"
        ],
        "code": [
          "{",
          "    let expected: u32 = u32::MAX;",
          "    let found: u32 = u32::MAX;",
          "    let result = DeserializeError::endian_mismatch(expected, found);",
          "    assert_eq!(result, DeserializeError(DeserializeErrorKind::EndianMismatch { expected: u32::MAX, found: u32::MAX }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let expected: u32 = 0;",
          "    let found: u32 = u32::MAX;",
          "    let result = DeserializeError::endian_mismatch(expected, found);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, DeserializeError(DeserializeErrorKind::EndianMismatch { expected: 0, found: u32::MAX }));"
        ],
        "code": [
          "{",
          "    let expected: u32 = 0;",
          "    let found: u32 = u32::MAX;",
          "    let result = DeserializeError::endian_mismatch(expected, found);",
          "    assert_eq!(result, DeserializeError(DeserializeErrorKind::EndianMismatch { expected: 0, found: u32::MAX }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let expected: u32 = u32::MAX;",
          "    let found: u32 = 0;",
          "    let result = DeserializeError::endian_mismatch(expected, found);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(result, DeserializeError(DeserializeErrorKind::EndianMismatch { expected, found }) if expected == u32::MAX && found == 0));"
        ],
        "code": [
          "{",
          "    let expected: u32 = u32::MAX;",
          "    let found: u32 = 0;",
          "    let result = DeserializeError::endian_mismatch(expected, found);",
          "    assert!(matches!(result, DeserializeError(DeserializeErrorKind::EndianMismatch { expected, found }) if expected == u32::MAX && found == 0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let expected: u32 = 123456;",
          "    let found: u32 = 654321;",
          "    let result = DeserializeError::endian_mismatch(expected, found);",
          "}"
        ],
        "oracle": [
          "    let expected: u32 = 123456;",
          "    let found: u32 = 654321;",
          "    let result = DeserializeError::endian_mismatch(expected, found);",
          "    assert!(matches!(result, DeserializeError(DeserializeErrorKind::EndianMismatch { expected: 123456, found: 654321 })));",
          "    assert_eq!(result.0, DeserializeErrorKind::EndianMismatch { expected, found });"
        ],
        "code": [
          "{",
          "    let expected: u32 = 123456;",
          "    let found: u32 = 654321;",
          "    let result = DeserializeError::endian_mismatch(expected, found);",
          "    let expected: u32 = 123456;",
          "    let found: u32 = 654321;",
          "    let result = DeserializeError::endian_mismatch(expected, found);",
          "    assert!(matches!(result, DeserializeError(DeserializeErrorKind::EndianMismatch { expected: 123456, found: 654321 })));",
          "    assert_eq!(result.0, DeserializeErrorKind::EndianMismatch { expected, found });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]