[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = DFA::builder()",
          "        .configure(DFA::config().starts_for_each_pattern(true))",
          "        .build_many(&[\"[a-z]+\", \"[0-9]+\"]).unwrap();",
          "    let (mut cache, mut caps) = (re.create_cache(), re.create_captures());",
          "    let haystack = \"123abc\";",
          "    let input = Input::new(haystack).anchored(Anchored::Yes);",
          "    re.try_search(&mut cache, &input, &mut caps).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(re.try_search(&mut cache, &input, &mut caps).is_ok());",
          "    assert_eq!(caps.slots().len(), expected_slot_length);",
          "    assert_eq!(caps.get_match(), None);"
        ],
        "code": [
          "{",
          "    let re = DFA::builder()",
          "        .configure(DFA::config().starts_for_each_pattern(true))",
          "        .build_many(&[\"[a-z]+\", \"[0-9]+\"]).unwrap();",
          "    let (mut cache, mut caps) = (re.create_cache(), re.create_captures());",
          "    let haystack = \"123abc\";",
          "    let input = Input::new(haystack).anchored(Anchored::Yes);",
          "    re.try_search(&mut cache, &input, &mut caps).unwrap();",
          "    assert!(re.try_search(&mut cache, &input, &mut caps).is_ok());",
          "    assert_eq!(caps.slots().len(), expected_slot_length);",
          "    assert_eq!(caps.get_match(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = DFA::builder()",
          "        .configure(DFA::config().starts_for_each_pattern(true))",
          "        .build_many(&[\"[a-z]+\", \"[0-9]+\"]).unwrap();",
          "    let (mut cache, mut caps) = (re.create_cache(), re.create_captures());",
          "    let haystack = \"123abc\";",
          "    let input = Input::new(haystack).anchored(Anchored::Pattern(PatternID::must(1))); // pattern for digits",
          "    re.try_search(&mut cache, &input, &mut caps).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(caps.get_match(), None);",
          "    assert!(caps.slots().iter().all(|&slot| slot.is_none()));",
          "    assert_eq!(caps.pid, Some(PatternID::must(1)));",
          "    assert!(matches!(re.try_search_slots(&mut cache, &input, caps.slots_mut()), Ok(Some(PatternID::must(1)))));",
          "    assert!(re.try_search_slots(&mut cache, &input, caps.slots_mut()).is_ok());"
        ],
        "code": [
          "{",
          "    let re = DFA::builder()",
          "        .configure(DFA::config().starts_for_each_pattern(true))",
          "        .build_many(&[\"[a-z]+\", \"[0-9]+\"]).unwrap();",
          "    let (mut cache, mut caps) = (re.create_cache(), re.create_captures());",
          "    let haystack = \"123abc\";",
          "    let input = Input::new(haystack).anchored(Anchored::Pattern(PatternID::must(1))); // pattern for digits",
          "    re.try_search(&mut cache, &input, &mut caps).unwrap();",
          "    assert_eq!(caps.get_match(), None);",
          "    assert!(caps.slots().iter().all(|&slot| slot.is_none()));",
          "    assert_eq!(caps.pid, Some(PatternID::must(1)));",
          "    assert!(matches!(re.try_search_slots(&mut cache, &input, caps.slots_mut()), Ok(Some(PatternID::must(1)))));",
          "    assert!(re.try_search_slots(&mut cache, &input, caps.slots_mut()).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = DFA::builder()",
          "        .configure(DFA::config().starts_for_each_pattern(true))",
          "        .build_many(&[\"a+\"]).unwrap();",
          "    let (mut cache, mut caps) = (re.create_cache(), re.create_captures());",
          "    caps.clear(); // start with cleared captures",
          "    let haystack = \"aaa\";",
          "    let input = Input::new(haystack).anchored(Anchored::Yes);",
          "    re.try_search(&mut cache, &input, &mut caps).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(re.try_search_slots(&mut cache, &input, caps.slots_mut()).is_ok());",
          "    assert_eq!(caps.pid, Some(PatternID::must(0)));",
          "    assert!(caps.slots().iter().all(|slot| slot.is_none()));"
        ],
        "code": [
          "{",
          "    let re = DFA::builder()",
          "        .configure(DFA::config().starts_for_each_pattern(true))",
          "        .build_many(&[\"a+\"]).unwrap();",
          "    let (mut cache, mut caps) = (re.create_cache(), re.create_captures());",
          "    caps.clear(); // start with cleared captures",
          "    let haystack = \"aaa\";",
          "    let input = Input::new(haystack).anchored(Anchored::Yes);",
          "    re.try_search(&mut cache, &input, &mut caps).unwrap();",
          "    assert!(re.try_search_slots(&mut cache, &input, caps.slots_mut()).is_ok());",
          "    assert_eq!(caps.pid, Some(PatternID::must(0)));",
          "    assert!(caps.slots().iter().all(|slot| slot.is_none()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = DFA::builder()",
          "        .configure(DFA::config().starts_for_each_pattern(true))",
          "        .build_many(&[\"ab\"]).unwrap();",
          "    let (mut cache, mut caps) = (re.create_cache(), re.create_captures());",
          "    let haystack = \"ab\";",
          "    let input = Input::new(haystack).anchored(Anchored::Yes);",
          "    re.try_search(&mut cache, &input, &mut caps).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(re.try_search(&mut cache, &input, &mut caps).is_ok());",
          "    assert_eq!(caps.pid, Some(PatternID::must(0)));",
          "    assert!(!caps.slots().is_empty());",
          "    assert_eq!(caps.slots()[0], Some(NonMaxUsize::new(0).unwrap()));"
        ],
        "code": [
          "{",
          "    let re = DFA::builder()",
          "        .configure(DFA::config().starts_for_each_pattern(true))",
          "        .build_many(&[\"ab\"]).unwrap();",
          "    let (mut cache, mut caps) = (re.create_cache(), re.create_captures());",
          "    let haystack = \"ab\";",
          "    let input = Input::new(haystack).anchored(Anchored::Yes);",
          "    re.try_search(&mut cache, &input, &mut caps).unwrap();",
          "    assert!(re.try_search(&mut cache, &input, &mut caps).is_ok());",
          "    assert_eq!(caps.pid, Some(PatternID::must(0)));",
          "    assert!(!caps.slots().is_empty());",
          "    assert_eq!(caps.slots()[0], Some(NonMaxUsize::new(0).unwrap()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = DFA::builder()",
          "        .configure(DFA::config().starts_for_each_pattern(true))",
          "        .build_many(&[\"a+\", \"b+\"]).unwrap();",
          "    let (mut cache, mut caps) = (re.create_cache(), re.create_captures());",
          "    let haystack = \"aaabbb\";",
          "    let input = Input::new(haystack).anchored(Anchored::Yes);",
          "    re.try_search(&mut cache, &input, &mut caps).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(re.try_search(&mut cache, &input, &mut caps).is_ok(), true);",
          "    assert!(caps.slots().iter().all(|&slot| slot.is_none()));",
          "    assert_eq!(caps.pid, None);",
          "    assert_eq!(caps.slots(), vec![None, None]);",
          "    assert_eq!(input.haystack, b\"aaabbb\");",
          "    assert_eq!(input.anchored, Anchored::Yes);",
          "    assert_eq!(re.find(&mut cache, &input).is_some(), true);",
          "    assert!(matches!(re.try_search_slots(&mut cache, &input, caps.slots_mut()), Ok(Some(_))));"
        ],
        "code": [
          "{",
          "    let re = DFA::builder()",
          "        .configure(DFA::config().starts_for_each_pattern(true))",
          "        .build_many(&[\"a+\", \"b+\"]).unwrap();",
          "    let (mut cache, mut caps) = (re.create_cache(), re.create_captures());",
          "    let haystack = \"aaabbb\";",
          "    let input = Input::new(haystack).anchored(Anchored::Yes);",
          "    re.try_search(&mut cache, &input, &mut caps).unwrap();",
          "    assert_eq!(re.try_search(&mut cache, &input, &mut caps).is_ok(), true);",
          "    assert!(caps.slots().iter().all(|&slot| slot.is_none()));",
          "    assert_eq!(caps.pid, None);",
          "    assert_eq!(caps.slots(), vec![None, None]);",
          "    assert_eq!(input.haystack, b\"aaabbb\");",
          "    assert_eq!(input.anchored, Anchored::Yes);",
          "    assert_eq!(re.find(&mut cache, &input).is_some(), true);",
          "    assert!(matches!(re.try_search_slots(&mut cache, &input, caps.slots_mut()), Ok(Some(_))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]