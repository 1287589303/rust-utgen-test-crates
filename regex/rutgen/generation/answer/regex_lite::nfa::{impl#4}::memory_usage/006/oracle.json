[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Ranges {",
          "        target: 1,",
          "        ranges: vec![],",
          "    };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.memory_usage(), 0);",
          "    state = State::Ranges { target: 1, ranges: vec![('a', 'z')] };",
          "    assert_eq!(state.memory_usage(), size_of::<(char, char)>());",
          "    state = State::Ranges { target: 2, ranges: vec![('a', 'b'), ('c', 'd')] };",
          "    assert_eq!(state.memory_usage(), 2 * size_of::<(char, char)>());",
          "    state = State::Ranges { target: 3, ranges: vec![('x', 'y'), ('z', 'z'), ('m', 'n')] };",
          "    assert_eq!(state.memory_usage(), 3 * size_of::<(char, char)>());",
          "    state = State::Ranges { target: 4, ranges: vec![('a', 'z'), ('0', '9'), ('A', 'Z')] };",
          "    assert_eq!(state.memory_usage(), 3 * size_of::<(char, char)>());"
        ],
        "code": [
          "{",
          "    let state = State::Ranges {",
          "        target: 1,",
          "        ranges: vec![],",
          "    };",
          "    let _ = state.memory_usage();",
          "    assert_eq!(state.memory_usage(), 0);",
          "    state = State::Ranges { target: 1, ranges: vec![('a', 'z')] };",
          "    assert_eq!(state.memory_usage(), size_of::<(char, char)>());",
          "    state = State::Ranges { target: 2, ranges: vec![('a', 'b'), ('c', 'd')] };",
          "    assert_eq!(state.memory_usage(), 2 * size_of::<(char, char)>());",
          "    state = State::Ranges { target: 3, ranges: vec![('x', 'y'), ('z', 'z'), ('m', 'n')] };",
          "    assert_eq!(state.memory_usage(), 3 * size_of::<(char, char)>());",
          "    state = State::Ranges { target: 4, ranges: vec![('a', 'z'), ('0', '9'), ('A', 'Z')] };",
          "    assert_eq!(state.memory_usage(), 3 * size_of::<(char, char)>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Ranges {",
          "        target: 1,",
          "        ranges: vec![('a', 'b')],",
          "    };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.memory_usage(), 1 * size_of::<(char, char)>());"
        ],
        "code": [
          "{",
          "    let state = State::Ranges {",
          "        target: 1,",
          "        ranges: vec![('a', 'b')],",
          "    };",
          "    let _ = state.memory_usage();",
          "    assert_eq!(state.memory_usage(), 1 * size_of::<(char, char)>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Ranges {",
          "        target: 1,",
          "        ranges: vec![('a', 'b'), ('c', 'd'), ('e', 'f')],",
          "    };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.memory_usage(), 3 * size_of::<(char, char)>());"
        ],
        "code": [
          "{",
          "    let state = State::Ranges {",
          "        target: 1,",
          "        ranges: vec![('a', 'b'), ('c', 'd'), ('e', 'f')],",
          "    };",
          "    let _ = state.memory_usage();",
          "    assert_eq!(state.memory_usage(), 3 * size_of::<(char, char)>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Ranges {",
          "        target: 1,",
          "        ranges: vec![('\\u{0000}', '\\u{007F}'), ('\\u{0080}', '\\u{FFFF}')],",
          "    };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    let state = State::Ranges { target: 1, ranges: vec![('\\u{0000}', '\\u{007F}'), ('\\u{0080}', '\\u{FFFF}')] };",
          "    assert_eq!(state.memory_usage(), 2 * size_of::<(char, char)>());",
          "    let state = State::Ranges { target: 1, ranges: vec![('a', 'z')] };",
          "    assert_eq!(state.memory_usage(), 1 * size_of::<(char, char)>());",
          "    let state = State::Ranges { target: 1, ranges: vec![] };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Ranges { target: 1, ranges: vec![('A', 'Z'), ('a', 'z'), ('0', '9')] };",
          "    assert_eq!(state.memory_usage(), 3 * size_of::<(char, char)>());",
          "    let state = State::Ranges { target: 1, ranges: vec![('\\u{10000}', '\\u{10FFFF}')] };",
          "    assert_eq!(state.memory_usage(), 1 * size_of::<(char, char)>());"
        ],
        "code": [
          "{",
          "    let state = State::Ranges {",
          "        target: 1,",
          "        ranges: vec![('\\u{0000}', '\\u{007F}'), ('\\u{0080}', '\\u{FFFF}')],",
          "    };",
          "    let _ = state.memory_usage();",
          "    let state = State::Ranges { target: 1, ranges: vec![('\\u{0000}', '\\u{007F}'), ('\\u{0080}', '\\u{FFFF}')] };",
          "    assert_eq!(state.memory_usage(), 2 * size_of::<(char, char)>());",
          "    let state = State::Ranges { target: 1, ranges: vec![('a', 'z')] };",
          "    assert_eq!(state.memory_usage(), 1 * size_of::<(char, char)>());",
          "    let state = State::Ranges { target: 1, ranges: vec![] };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Ranges { target: 1, ranges: vec![('A', 'Z'), ('a', 'z'), ('0', '9')] };",
          "    assert_eq!(state.memory_usage(), 3 * size_of::<(char, char)>());",
          "    let state = State::Ranges { target: 1, ranges: vec![('\\u{10000}', '\\u{10FFFF}')] };",
          "    assert_eq!(state.memory_usage(), 1 * size_of::<(char, char)>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]