[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Splits {",
          "        targets: vec![],",
          "        reverse: false,",
          "    };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.memory_usage(), 0);"
        ],
        "code": [
          "{",
          "    let state = State::Splits {",
          "        targets: vec![],",
          "        reverse: false,",
          "    };",
          "    let _ = state.memory_usage();",
          "    assert_eq!(state.memory_usage(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Splits {",
          "        targets: vec![0],",
          "        reverse: true,",
          "    };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    let state = State::Splits { targets: vec![0], reverse: true };",
          "    assert_eq!(state.memory_usage(), 4);"
        ],
        "code": [
          "{",
          "    let state = State::Splits {",
          "        targets: vec![0],",
          "        reverse: true,",
          "    };",
          "    let _ = state.memory_usage();",
          "    let state = State::Splits { targets: vec![0], reverse: true };",
          "    assert_eq!(state.memory_usage(), 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Splits {",
          "        targets: vec![0, 1, 2],",
          "        reverse: false,",
          "    };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    let state = State::Splits { targets: vec![0, 1, 2], reverse: false };",
          "    assert_eq!(state.memory_usage(), 3 * size_of::<StateID>());"
        ],
        "code": [
          "{",
          "    let state = State::Splits {",
          "        targets: vec![0, 1, 2],",
          "        reverse: false,",
          "    };",
          "    let _ = state.memory_usage();",
          "    let state = State::Splits { targets: vec![0, 1, 2], reverse: false };",
          "    assert_eq!(state.memory_usage(), 3 * size_of::<StateID>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Splits {",
          "        targets: vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9],",
          "        reverse: true,",
          "    };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.memory_usage(), 10 * size_of::<StateID>());"
        ],
        "code": [
          "{",
          "    let state = State::Splits {",
          "        targets: vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9],",
          "        reverse: true,",
          "    };",
          "    let _ = state.memory_usage();",
          "    assert_eq!(state.memory_usage(), 10 * size_of::<StateID>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Splits {",
          "        targets: (0..100).collect(),",
          "        reverse: false,",
          "    };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.memory_usage(), 100 * size_of::<StateID>());"
        ],
        "code": [
          "{",
          "    let state = State::Splits {",
          "        targets: (0..100).collect(),",
          "        reverse: false,",
          "    };",
          "    let _ = state.memory_usage();",
          "    assert_eq!(state.memory_usage(), 100 * size_of::<StateID>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Splits {",
          "        targets: (0..1000).collect(),",
          "        reverse: true,",
          "    };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    let state = State::Splits { targets: vec![1, 2, 3], reverse: false }; assert_eq!(state.memory_usage(), 3 * size_of::<StateID>());",
          "    let state = State::Splits { targets: vec![], reverse: true }; assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Splits { targets: (0..500).collect(), reverse: true }; assert_eq!(state.memory_usage(), 500 * size_of::<StateID>());",
          "    let state = State::Splits { targets: (1..100).collect(), reverse: false }; assert_eq!(state.memory_usage(), 99 * size_of::<StateID>());",
          "    let state = State::Splits { targets: vec![10, 20], reverse: true }; assert_eq!(state.memory_usage(), 2 * size_of::<StateID>());",
          "    let state = State::Splits { targets: (0..10000).collect(), reverse: false }; assert_eq!(state.memory_usage(), 10000 * size_of::<StateID>());",
          "    let state = State::Splits { targets: vec![7], reverse: true }; assert_eq!(state.memory_usage(), 1 * size_of::<StateID>());"
        ],
        "code": [
          "{",
          "    let state = State::Splits {",
          "        targets: (0..1000).collect(),",
          "        reverse: true,",
          "    };",
          "    let _ = state.memory_usage();",
          "    let state = State::Splits { targets: vec![1, 2, 3], reverse: false }; assert_eq!(state.memory_usage(), 3 * size_of::<StateID>());",
          "    let state = State::Splits { targets: vec![], reverse: true }; assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Splits { targets: (0..500).collect(), reverse: true }; assert_eq!(state.memory_usage(), 500 * size_of::<StateID>());",
          "    let state = State::Splits { targets: (1..100).collect(), reverse: false }; assert_eq!(state.memory_usage(), 99 * size_of::<StateID>());",
          "    let state = State::Splits { targets: vec![10, 20], reverse: true }; assert_eq!(state.memory_usage(), 2 * size_of::<StateID>());",
          "    let state = State::Splits { targets: (0..10000).collect(), reverse: false }; assert_eq!(state.memory_usage(), 10000 * size_of::<StateID>());",
          "    let state = State::Splits { targets: vec![7], reverse: true }; assert_eq!(state.memory_usage(), 1 * size_of::<StateID>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]