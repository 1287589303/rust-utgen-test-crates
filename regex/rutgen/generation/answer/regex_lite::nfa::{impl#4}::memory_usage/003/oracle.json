[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Capture { target: 1, slot: 0 };",
          "    let _ = state.memory_usage(); // Expected return value/type: 0",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.memory_usage(), 0);"
        ],
        "code": [
          "{",
          "    let state = State::Capture { target: 1, slot: 0 };",
          "    let _ = state.memory_usage(); // Expected return value/type: 0",
          "    assert_eq!(state.memory_usage(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Match;",
          "    let _ = state.memory_usage(); // Expected return value/type: 0",
          "}"
        ],
        "oracle": [
          "    let state = State::Capture { target: 0, slot: 0 };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Match;",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Char { target: 0, ch: 'a' };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Fail;",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Goto { target: 0, look: None };",
          "    assert_eq!(state.memory_usage(), 0);"
        ],
        "code": [
          "{",
          "    let state = State::Match;",
          "    let _ = state.memory_usage(); // Expected return value/type: 0",
          "    let state = State::Capture { target: 0, slot: 0 };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Match;",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Char { target: 0, ch: 'a' };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Fail;",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Goto { target: 0, look: None };",
          "    assert_eq!(state.memory_usage(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Char { target: 1, ch: 'a' };",
          "    let _ = state.memory_usage(); // Expected return value/type: 0",
          "}"
        ],
        "oracle": [
          "    let state_capture = State::Capture { target: 1, slot: 0 };",
          "    assert_eq!(state_capture.memory_usage(), 0);",
          "    ",
          "    let state_match = State::Match;",
          "    assert_eq!(state_match.memory_usage(), 0);",
          "    ",
          "    let state_fail = State::Fail;",
          "    assert_eq!(state_fail.memory_usage(), 0);",
          "    ",
          "    let state_goto = State::Goto { target: 2, look: None };",
          "    assert_eq!(state_goto.memory_usage(), 0);"
        ],
        "code": [
          "{",
          "    let state = State::Char { target: 1, ch: 'a' };",
          "    let _ = state.memory_usage(); // Expected return value/type: 0",
          "    let state_capture = State::Capture { target: 1, slot: 0 };",
          "    assert_eq!(state_capture.memory_usage(), 0);",
          "    ",
          "    let state_match = State::Match;",
          "    assert_eq!(state_match.memory_usage(), 0);",
          "    ",
          "    let state_fail = State::Fail;",
          "    assert_eq!(state_fail.memory_usage(), 0);",
          "    ",
          "    let state_goto = State::Goto { target: 2, look: None };",
          "    assert_eq!(state_goto.memory_usage(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Fail;",
          "    let _ = state.memory_usage(); // Expected return value/type: 0",
          "}"
        ],
        "oracle": [
          "    let state = State::Capture { target: 1, slot: 2 };",
          "    let result = state.memory_usage();",
          "    assert_eq!(result, 0);",
          "    ",
          "    let state = State::Match;",
          "    let result = state.memory_usage();",
          "    assert_eq!(result, 0);",
          "    ",
          "    let state = State::Char { target: 1, ch: 'a' };",
          "    let result = state.memory_usage();",
          "    assert_eq!(result, 0);",
          "    ",
          "    let state = State::Goto { target: 2, look: None };",
          "    let result = state.memory_usage();",
          "    assert_eq!(result, 0);",
          "    ",
          "    let state = State::Fail;",
          "    let result = state.memory_usage();",
          "    assert_eq!(result, 0);"
        ],
        "code": [
          "{",
          "    let state = State::Fail;",
          "    let _ = state.memory_usage(); // Expected return value/type: 0",
          "    let state = State::Capture { target: 1, slot: 2 };",
          "    let result = state.memory_usage();",
          "    assert_eq!(result, 0);",
          "    ",
          "    let state = State::Match;",
          "    let result = state.memory_usage();",
          "    assert_eq!(result, 0);",
          "    ",
          "    let state = State::Char { target: 1, ch: 'a' };",
          "    let result = state.memory_usage();",
          "    assert_eq!(result, 0);",
          "    ",
          "    let state = State::Goto { target: 2, look: None };",
          "    let result = state.memory_usage();",
          "    assert_eq!(result, 0);",
          "    ",
          "    let state = State::Fail;",
          "    let result = state.memory_usage();",
          "    assert_eq!(result, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Goto { target: 1, look: None };",
          "    let _ = state.memory_usage(); // Expected return value/type: 0",
          "}"
        ],
        "oracle": [
          "    State::Capture { target: 1, slot: 0 }.memory_usage(); // Expected return value/type: 0",
          "    State::Match.memory_usage(); // Expected return value/type: 0",
          "    State::Char { target: 1, ch: 'a' }.memory_usage(); // Expected return value/type: 0",
          "    State::Fail.memory_usage(); // Expected return value/type: 0",
          "    State::Goto { target: 1, look: None }.memory_usage(); // Expected return value/type: 0"
        ],
        "code": [
          "{",
          "    let state = State::Goto { target: 1, look: None };",
          "    let _ = state.memory_usage(); // Expected return value/type: 0",
          "    State::Capture { target: 1, slot: 0 }.memory_usage(); // Expected return value/type: 0",
          "    State::Match.memory_usage(); // Expected return value/type: 0",
          "    State::Char { target: 1, ch: 'a' }.memory_usage(); // Expected return value/type: 0",
          "    State::Fail.memory_usage(); // Expected return value/type: 0",
          "    State::Goto { target: 1, look: None }.memory_usage(); // Expected return value/type: 0",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]