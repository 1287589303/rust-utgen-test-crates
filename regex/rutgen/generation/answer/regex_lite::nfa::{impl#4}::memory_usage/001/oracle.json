[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Match;",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.memory_usage(), 0);",
          "    assert!(matches!(state, State::Match | State::Char { .. } | State::Fail { .. } | State::Capture { .. } | State::Goto { .. }));",
          "    state = State::Char { target: 1, ch: 'a' };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    state = State::Fail;",
          "    assert_eq!(state.memory_usage(), 0);",
          "    state = State::Capture { target: 1, slot: 0 };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    state = State::Goto { target: 1, look: None };",
          "    assert_eq!(state.memory_usage(), 0);"
        ],
        "code": [
          "{",
          "    let state = State::Match;",
          "    let _ = state.memory_usage();",
          "    assert_eq!(state.memory_usage(), 0);",
          "    assert!(matches!(state, State::Match | State::Char { .. } | State::Fail { .. } | State::Capture { .. } | State::Goto { .. }));",
          "    state = State::Char { target: 1, ch: 'a' };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    state = State::Fail;",
          "    assert_eq!(state.memory_usage(), 0);",
          "    state = State::Capture { target: 1, slot: 0 };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    state = State::Goto { target: 1, look: None };",
          "    assert_eq!(state.memory_usage(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Char { target: 0, ch: 'a' };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Goto { target: 0, look: None };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Capture { target: 0, slot: 1 };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Fail;",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Match;",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Splits { targets: vec![1, 2, 3], reverse: false };",
          "    assert_eq!(state.memory_usage(), size_of::<StateID>() * 3);",
          "    let state = State::Ranges { target: 0, ranges: vec![('a', 'z'), ('0', '9')] };",
          "    assert_eq!(state.memory_usage(), size_of::<(char, char)>() * 2);"
        ],
        "code": [
          "{",
          "    let state = State::Char { target: 0, ch: 'a' };",
          "    let _ = state.memory_usage();",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Goto { target: 0, look: None };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Capture { target: 0, slot: 1 };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Fail;",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Match;",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Splits { targets: vec![1, 2, 3], reverse: false };",
          "    assert_eq!(state.memory_usage(), size_of::<StateID>() * 3);",
          "    let state = State::Ranges { target: 0, ranges: vec![('a', 'z'), ('0', '9')] };",
          "    assert_eq!(state.memory_usage(), size_of::<(char, char)>() * 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Goto { target: 0, look: None };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Capture { target: 0, slot: 1 };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Char { target: 0, ch: 'a' };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Fail;",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Match;",
          "    assert_eq!(state.memory_usage(), 0);"
        ],
        "code": [
          "{",
          "    let state = State::Goto { target: 0, look: None };",
          "    let _ = state.memory_usage();",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Capture { target: 0, slot: 1 };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Char { target: 0, ch: 'a' };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Fail;",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Match;",
          "    assert_eq!(state.memory_usage(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Capture { target: 0, slot: 0 };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    let state = State::Match; assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Char { target: 0, ch: 'a' }; assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Fail; assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Capture { target: 0, slot: 0 }; assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Goto { target: 0, look: None }; assert_eq!(state.memory_usage(), 0);"
        ],
        "code": [
          "{",
          "    let state = State::Capture { target: 0, slot: 0 };",
          "    let _ = state.memory_usage();",
          "    let state = State::Match; assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Char { target: 0, ch: 'a' }; assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Fail; assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Capture { target: 0, slot: 0 }; assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Goto { target: 0, look: None }; assert_eq!(state.memory_usage(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Fail;",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Char { target: 1, ch: 'a' };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Goto { target: 1, look: None };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Capture { target: 1, slot: 0 };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Match;",
          "    assert_eq!(state.memory_usage(), 0);"
        ],
        "code": [
          "{",
          "    let state = State::Fail;",
          "    let _ = state.memory_usage();",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Char { target: 1, ch: 'a' };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Goto { target: 1, look: None };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Capture { target: 1, slot: 0 };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Match;",
          "    assert_eq!(state.memory_usage(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]