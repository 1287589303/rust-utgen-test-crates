[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet::empty();",
          "    let mut output = core::fmt::Formatter::new();",
          "    let _ = look_set.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output.to_string(), \"∅\");"
        ],
        "code": [
          "{",
          "    let look_set = LookSet::empty();",
          "    let mut output = core::fmt::Formatter::new();",
          "    let _ = look_set.fmt(&mut output);",
          "    assert_eq!(output.to_string(), \"∅\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet::singleton(Look::Start);",
          "    let mut output = core::fmt::Formatter::new();",
          "    let _ = look_set.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    let look_set = LookSet::empty();",
          "    let mut output = core::fmt::Formatter::new();",
          "    assert_eq!(look_set.fmt(&mut output), Ok(()));",
          "    assert_eq!(output.to_string(), \"∅\");"
        ],
        "code": [
          "{",
          "    let look_set = LookSet::singleton(Look::Start);",
          "    let mut output = core::fmt::Formatter::new();",
          "    let _ = look_set.fmt(&mut output);",
          "    let look_set = LookSet::empty();",
          "    let mut output = core::fmt::Formatter::new();",
          "    assert_eq!(look_set.fmt(&mut output), Ok(()));",
          "    assert_eq!(output.to_string(), \"∅\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet::full();",
          "    let mut output = core::fmt::Formatter::new();",
          "    let _ = look_set.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output.to_string(), \"∅\");"
        ],
        "code": [
          "{",
          "    let look_set = LookSet::full();",
          "    let mut output = core::fmt::Formatter::new();",
          "    let _ = look_set.fmt(&mut output);",
          "    assert_eq!(output.to_string(), \"∅\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]