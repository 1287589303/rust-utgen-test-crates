[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet::singleton(Look::Start);",
          "    let mut output = core::fmt::Formatter::default();",
          "    let _ = look_set.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.len(), 1);",
          "    assert!(!look_set.is_empty());",
          "    assert!(look_set.contains(Look::Start));",
          "    assert_eq!(output.to_string(), \"A\");",
          "    assert!(output.is_ok());"
        ],
        "code": [
          "{",
          "    let look_set = LookSet::singleton(Look::Start);",
          "    let mut output = core::fmt::Formatter::default();",
          "    let _ = look_set.fmt(&mut output);",
          "    assert_eq!(look_set.len(), 1);",
          "    assert!(!look_set.is_empty());",
          "    assert!(look_set.contains(Look::Start));",
          "    assert_eq!(output.to_string(), \"A\");",
          "    assert!(output.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set = look_set.insert(Look::End);",
          "    look_set = look_set.insert(Look::WordAscii);",
          "    let mut output = core::fmt::Formatter::default();",
          "    let _ = look_set.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    assert!(!look_set.is_empty());",
          "    assert!(look_set.contains(Look::End));",
          "    assert!(look_set.contains(Look::WordAscii));",
          "    assert_eq!(look_set.fmt(&mut output), Ok(()));",
          "    assert_eq!(output.to_string(), \"z b\");"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set = look_set.insert(Look::End);",
          "    look_set = look_set.insert(Look::WordAscii);",
          "    let mut output = core::fmt::Formatter::default();",
          "    let _ = look_set.fmt(&mut output);",
          "    assert!(!look_set.is_empty());",
          "    assert!(look_set.contains(Look::End));",
          "    assert!(look_set.contains(Look::WordAscii));",
          "    assert_eq!(look_set.fmt(&mut output), Ok(()));",
          "    assert_eq!(output.to_string(), \"z b\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet::full();",
          "    let mut output = core::fmt::Formatter::default();",
          "    let _ = look_set.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    assert!(look_set.len() > 0);",
          "    assert!(!look_set.is_empty());",
          "    assert_eq!(_ , Ok(()));",
          "    assert!(output.has_written());",
          "    assert_eq!(output.content(), \"Az^$rR bB𝛃𝚩< >〈 〉◁▷◀▶\");"
        ],
        "code": [
          "{",
          "    let look_set = LookSet::full();",
          "    let mut output = core::fmt::Formatter::default();",
          "    let _ = look_set.fmt(&mut output);",
          "    assert!(look_set.len() > 0);",
          "    assert!(!look_set.is_empty());",
          "    assert_eq!(_ , Ok(()));",
          "    assert!(output.has_written());",
          "    assert_eq!(output.content(), \"Az^$rR bB𝛃𝚩< >〈 〉◁▷◀▶\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]