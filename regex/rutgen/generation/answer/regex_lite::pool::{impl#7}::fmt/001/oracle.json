[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let create_fn: CachePoolFn = Box::new(|| pikevm::Cache::new());",
          "    let pool = Pool {",
          "        stack: Mutex::new(vec![Box::new(pikevm::Cache::new())]),",
          "        create: create_fn,",
          "    };",
          "    let guard = PoolGuard {",
          "        pool: &pool,",
          "        value: Some(Box::new(pikevm::Cache::new())),",
          "    };",
          "    let mut formatter = core::fmt::Formatter::default();",
          "    guard.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.contents(), \"PoolGuard { pool: &Pool { ... }, value: Some(...) }\");",
          "    assert!(guard.value.is_some());",
          "    assert!(pool.stack.lock().unwrap().len() == 1);",
          "    assert!(formatter.field(\"pool\").is_some());",
          "    assert!(formatter.field(\"value\").is_some());"
        ],
        "code": [
          "{",
          "    let create_fn: CachePoolFn = Box::new(|| pikevm::Cache::new());",
          "    let pool = Pool {",
          "        stack: Mutex::new(vec![Box::new(pikevm::Cache::new())]),",
          "        create: create_fn,",
          "    };",
          "    let guard = PoolGuard {",
          "        pool: &pool,",
          "        value: Some(Box::new(pikevm::Cache::new())),",
          "    };",
          "    let mut formatter = core::fmt::Formatter::default();",
          "    guard.fmt(&mut formatter);",
          "    assert_eq!(formatter.contents(), \"PoolGuard { pool: &Pool { ... }, value: Some(...) }\");",
          "    assert!(guard.value.is_some());",
          "    assert!(pool.stack.lock().unwrap().len() == 1);",
          "    assert!(formatter.field(\"pool\").is_some());",
          "    assert!(formatter.field(\"value\").is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let create_fn: CachePoolFn = Box::new(|| pikevm::Cache::new());",
          "    let pool = Pool {",
          "        stack: Mutex::new(vec![]),",
          "        create: create_fn,",
          "    };",
          "    let guard = PoolGuard {",
          "        pool: &pool,",
          "        value: None,",
          "    };",
          "    let mut formatter = core::fmt::Formatter::default();",
          "    guard.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"PoolGuard { pool: &Pool { stack: Mutex { .. }, create: Box<dyn Fn() -> pikevm::Cache + Send + Sync + UnwindSafe + RefUnwindSafe> }, value: None } }\");",
          "    assert_eq!(guard.value.is_none(), true);",
          "    assert_eq!(guard.pool.create, create_fn);",
          "    assert!(formatter.fields().any(|f| f.name() == \"pool\"));",
          "    assert!(formatter.fields().any(|f| f.name() == \"value\"));"
        ],
        "code": [
          "{",
          "    let create_fn: CachePoolFn = Box::new(|| pikevm::Cache::new());",
          "    let pool = Pool {",
          "        stack: Mutex::new(vec![]),",
          "        create: create_fn,",
          "    };",
          "    let guard = PoolGuard {",
          "        pool: &pool,",
          "        value: None,",
          "    };",
          "    let mut formatter = core::fmt::Formatter::default();",
          "    guard.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"PoolGuard { pool: &Pool { stack: Mutex { .. }, create: Box<dyn Fn() -> pikevm::Cache + Send + Sync + UnwindSafe + RefUnwindSafe> }, value: None } }\");",
          "    assert_eq!(guard.value.is_none(), true);",
          "    assert_eq!(guard.pool.create, create_fn);",
          "    assert!(formatter.fields().any(|f| f.name() == \"pool\"));",
          "    assert!(formatter.fields().any(|f| f.name() == \"value\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let create_fn: CachePoolFn = Box::new(|| pikevm::Cache::new());",
          "    let pool = Pool {",
          "        stack: Mutex::new(vec![]),",
          "        create: create_fn,",
          "    };",
          "    let guard = PoolGuard {",
          "        pool: &pool,",
          "        value: Some(Box::new(pikevm::Cache::new())),",
          "    };",
          "    let mut formatter = core::fmt::Formatter::default();",
          "    guard.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(guard.value.is_some(), true);",
          "    assert_eq!(formatter.debug_struct_called, true);",
          "    assert_eq!(formatter.fields.len(), 2);",
          "    assert_eq!(formatter.fields[0].name, \"pool\");",
          "    assert_eq!(formatter.fields[1].name, \"value\");",
          "    assert!(formatter.fields[1].value.is_some());",
          "    assert!(guard.value.is_some());",
          "    assert_eq!(pool.stack.lock().unwrap().len(), 0);"
        ],
        "code": [
          "{",
          "    let create_fn: CachePoolFn = Box::new(|| pikevm::Cache::new());",
          "    let pool = Pool {",
          "        stack: Mutex::new(vec![]),",
          "        create: create_fn,",
          "    };",
          "    let guard = PoolGuard {",
          "        pool: &pool,",
          "        value: Some(Box::new(pikevm::Cache::new())),",
          "    };",
          "    let mut formatter = core::fmt::Formatter::default();",
          "    guard.fmt(&mut formatter);",
          "    assert_eq!(guard.value.is_some(), true);",
          "    assert_eq!(formatter.debug_struct_called, true);",
          "    assert_eq!(formatter.fields.len(), 2);",
          "    assert_eq!(formatter.fields[0].name, \"pool\");",
          "    assert_eq!(formatter.fields[1].name, \"value\");",
          "    assert!(formatter.fields[1].value.is_some());",
          "    assert!(guard.value.is_some());",
          "    assert_eq!(pool.stack.lock().unwrap().len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]