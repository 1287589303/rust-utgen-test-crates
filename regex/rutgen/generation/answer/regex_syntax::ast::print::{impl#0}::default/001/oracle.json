[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let builder = PrinterBuilder::default();",
          "    let _printer = builder.build();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(PrinterBuilder::default()._priv, ());",
          "    assert!(matches!(PrinterBuilder::default(), PrinterBuilder { _priv: () }));"
        ],
        "code": [
          "{",
          "    let builder = PrinterBuilder::default();",
          "    let _printer = builder.build();",
          "    assert_eq!(PrinterBuilder::default()._priv, ());",
          "    assert!(matches!(PrinterBuilder::default(), PrinterBuilder { _priv: () }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let builder = PrinterBuilder::new();",
          "    let _printer = builder.build();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(PrinterBuilder::default(), PrinterBuilder::new());",
          "    assert!(PrinterBuilder::new()._priv.is_some());",
          "    assert_ne!(PrinterBuilder::default(), PrinterBuilder::new());",
          "    assert!(PrinterBuilder::new() != PrinterBuilder::new());",
          "    assert!(std::mem::size_of::<PrinterBuilder>() > 0);"
        ],
        "code": [
          "{",
          "    let builder = PrinterBuilder::new();",
          "    let _printer = builder.build();",
          "    assert_eq!(PrinterBuilder::default(), PrinterBuilder::new());",
          "    assert!(PrinterBuilder::new()._priv.is_some());",
          "    assert_ne!(PrinterBuilder::default(), PrinterBuilder::new());",
          "    assert!(PrinterBuilder::new() != PrinterBuilder::new());",
          "    assert!(std::mem::size_of::<PrinterBuilder>() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]