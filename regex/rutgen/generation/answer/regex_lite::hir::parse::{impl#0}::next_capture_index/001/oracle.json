[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"any pattern\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.capture_index.set(0);",
          "    let _ = parser.next_capture_index();",
          "}"
        ],
        "oracle": [
          "    parser.capture_index.set(u32::MAX);",
          "    let result = parser.next_capture_index();",
          "    assert_eq!(result, Err(Error::new(ERR_TOO_MANY_CAPTURES)));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"any pattern\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.capture_index.set(0);",
          "    let _ = parser.next_capture_index();",
          "    parser.capture_index.set(u32::MAX);",
          "    let result = parser.next_capture_index();",
          "    assert_eq!(result, Err(Error::new(ERR_TOO_MANY_CAPTURES)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"any pattern\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.capture_index.set(1);",
          "    let _ = parser.next_capture_index();",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"any pattern\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.capture_index.set(u32::MAX);",
          "    let result = parser.next_capture_index();",
          "    assert_eq!(result, Err(Error::new(ERR_TOO_MANY_CAPTURES)));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"any pattern\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.capture_index.set(1);",
          "    let _ = parser.next_capture_index();",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"any pattern\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.capture_index.set(u32::MAX);",
          "    let result = parser.next_capture_index();",
          "    assert_eq!(result, Err(Error::new(ERR_TOO_MANY_CAPTURES)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"any pattern\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.capture_index.set(u32::MAX);",
          "    let _ = parser.next_capture_index();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.next_capture_index(), Err(Error::new(ERR_TOO_MANY_CAPTURES)));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"any pattern\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.capture_index.set(u32::MAX);",
          "    let _ = parser.next_capture_index();",
          "    assert_eq!(parser.next_capture_index(), Err(Error::new(ERR_TOO_MANY_CAPTURES)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]