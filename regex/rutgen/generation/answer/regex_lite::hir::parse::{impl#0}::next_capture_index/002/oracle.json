[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"a\";",
          "    let mut parser = Parser::new(config, pattern);",
          "    parser.capture_index.set(0);",
          "    let result = parser.next_capture_index();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(1));",
          "    parser.capture_index.set(u32::MAX);",
          "    let result = parser.next_capture_index();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_TOO_MANY_CAPTURES);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"a\";",
          "    let mut parser = Parser::new(config, pattern);",
          "    parser.capture_index.set(0);",
          "    let result = parser.next_capture_index();",
          "    assert_eq!(result, Ok(1));",
          "    parser.capture_index.set(u32::MAX);",
          "    let result = parser.next_capture_index();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_TOO_MANY_CAPTURES);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"a\";",
          "    let mut parser = Parser::new(config, pattern);",
          "    parser.capture_index.set(u32::MAX - 1);",
          "    let result = parser.next_capture_index();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), u32::MAX);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"a\";",
          "    let mut parser = Parser::new(config, pattern);",
          "    parser.capture_index.set(u32::MAX - 1);",
          "    let result = parser.next_capture_index();",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), u32::MAX);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"a\";",
          "    let mut parser = Parser::new(config, pattern);",
          "    parser.capture_index.set(1234);",
          "    let result = parser.next_capture_index();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(1235));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"a\";",
          "    let mut parser = Parser::new(config, pattern);",
          "    parser.capture_index.set(1234);",
          "    let result = parser.next_capture_index();",
          "    assert_eq!(result, Ok(1235));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]