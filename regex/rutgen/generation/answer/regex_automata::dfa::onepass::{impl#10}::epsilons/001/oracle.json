[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition = Transition(0);",
          "    let result = transition.epsilons();",
          "}"
        ],
        "oracle": [
          "    let transition = Transition(0);",
          "    assert_eq!(result, Epsilons(0));",
          "    let transition = Transition(1);",
          "    assert_eq!(result, Epsilons(1));",
          "    let transition = Transition(0xFFFFFFFFFFFFFFFF);",
          "    assert_eq!(result, Epsilons(0x000003FF_FFFFFFFF));",
          "    let transition = Transition(0x000003FF_FFFFFFFF);",
          "    assert_eq!(result, Epsilons(0x000003FF_FFFFFFFF));",
          "    let transition = Transition(0x123456789ABCDEF0);",
          "    assert_eq!(result, Epsilons(0x000003FF_FFFFFFFF));"
        ],
        "code": [
          "{",
          "    let transition = Transition(0);",
          "    let result = transition.epsilons();",
          "    let transition = Transition(0);",
          "    assert_eq!(result, Epsilons(0));",
          "    let transition = Transition(1);",
          "    assert_eq!(result, Epsilons(1));",
          "    let transition = Transition(0xFFFFFFFFFFFFFFFF);",
          "    assert_eq!(result, Epsilons(0x000003FF_FFFFFFFF));",
          "    let transition = Transition(0x000003FF_FFFFFFFF);",
          "    assert_eq!(result, Epsilons(0x000003FF_FFFFFFFF));",
          "    let transition = Transition(0x123456789ABCDEF0);",
          "    assert_eq!(result, Epsilons(0x000003FF_FFFFFFFF));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition = Transition(1);",
          "    let result = transition.epsilons();",
          "}"
        ],
        "oracle": [
          "    let transition = Transition(1);",
          "    let expected = Epsilons(1 & Transition::INFO_MASK);",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let transition = Transition(1);",
          "    let result = transition.epsilons();",
          "    let transition = Transition(1);",
          "    let expected = Epsilons(1 & Transition::INFO_MASK);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition = Transition(0x7FFFFFFFFFFFFFFF);",
          "    let result = transition.epsilons();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Epsilons(0x3FF_FFFFFFFF));"
        ],
        "code": [
          "{",
          "    let transition = Transition(0x7FFFFFFFFFFFFFFF);",
          "    let result = transition.epsilons();",
          "    assert_eq!(result, Epsilons(0x3FF_FFFFFFFF));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition = Transition(0xFFFFFFFFFFFFFFFF);",
          "    let result = transition.epsilons();",
          "}"
        ],
        "oracle": [
          "    let transition = Transition(0x0000000000000000); assert_eq!(result, Epsilons(0x0000000000000000));",
          "    let transition = Transition(0x000000003FFFFFFF); assert_eq!(result, Epsilons(0x000000003FFFFFFF));",
          "    let transition = Transition(0x00000000FFFFFFFF); assert_eq!(result, Epsilons(0x00000000FFFFFFFF));",
          "    let transition = Transition(0xFFFFFFFFFFFFFFFE); assert_eq!(result, Epsilons(0x0000000000000000));",
          "    let transition = Transition(0x7FFFFFFFFFFFFFFF); assert_eq!(result, Epsilons(0x000000003FFFFFFF));",
          "    let transition = Transition(0x000003FFFFFFFFFF); assert_eq!(result, Epsilons(0x000003FFFFFFFFFF));",
          "    let transition = Transition(0x0000000000000001); assert_eq!(result, Epsilons(0x0000000000000001));",
          "    let transition = Transition(0x00000000FFFFFFFE); assert_eq!(result, Epsilons(0x0000000000000000));"
        ],
        "code": [
          "{",
          "    let transition = Transition(0xFFFFFFFFFFFFFFFF);",
          "    let result = transition.epsilons();",
          "    let transition = Transition(0x0000000000000000); assert_eq!(result, Epsilons(0x0000000000000000));",
          "    let transition = Transition(0x000000003FFFFFFF); assert_eq!(result, Epsilons(0x000000003FFFFFFF));",
          "    let transition = Transition(0x00000000FFFFFFFF); assert_eq!(result, Epsilons(0x00000000FFFFFFFF));",
          "    let transition = Transition(0xFFFFFFFFFFFFFFFE); assert_eq!(result, Epsilons(0x0000000000000000));",
          "    let transition = Transition(0x7FFFFFFFFFFFFFFF); assert_eq!(result, Epsilons(0x000000003FFFFFFF));",
          "    let transition = Transition(0x000003FFFFFFFFFF); assert_eq!(result, Epsilons(0x000003FFFFFFFFFF));",
          "    let transition = Transition(0x0000000000000001); assert_eq!(result, Epsilons(0x0000000000000001));",
          "    let transition = Transition(0x00000000FFFFFFFE); assert_eq!(result, Epsilons(0x0000000000000000));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition = Transition(Transition::INFO_MASK);",
          "    let result = transition.epsilons();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Epsilons(Transition::INFO_MASK & Transition::INFO_MASK));",
          "    assert!(result.0 == Transition::INFO_MASK & Transition::INFO_MASK);",
          "    assert!(result.0 & !Transition::INFO_MASK == 0);",
          "    assert_eq!(result.0, Epsilons(0x000003FF_FFFFFFFF.0));",
          "    assert!(result == Epsilons(result.0));"
        ],
        "code": [
          "{",
          "    let transition = Transition(Transition::INFO_MASK);",
          "    let result = transition.epsilons();",
          "    assert_eq!(result, Epsilons(Transition::INFO_MASK & Transition::INFO_MASK));",
          "    assert!(result.0 == Transition::INFO_MASK & Transition::INFO_MASK);",
          "    assert!(result.0 & !Transition::INFO_MASK == 0);",
          "    assert_eq!(result.0, Epsilons(0x000003FF_FFFFFFFF.0));",
          "    assert!(result == Epsilons(result.0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition = Transition(Transition::INFO_MASK + 1);",
          "    let result = transition.epsilons();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Epsilons(Transition::INFO_MASK));"
        ],
        "code": [
          "{",
          "    let transition = Transition(Transition::INFO_MASK + 1);",
          "    let result = transition.epsilons();",
          "    assert_eq!(result, Epsilons(Transition::INFO_MASK));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]