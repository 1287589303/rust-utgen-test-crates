[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = RegexSetBuilder::new([\"foo.bar\"]);",
          "    let re = builder.dot_matches_new_line(true).build().unwrap();",
          "    let hay = b\"foo\\nbar\";",
          "    re.is_match(hay);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.dot_matches_new_line(true), &mut builder);",
          "    assert_eq!(builder.dot_matches_new_line(false), &mut builder);",
          "    let re_1 = builder.dot_matches_new_line(true).build().unwrap();",
          "    let re_2 = builder.dot_matches_new_line(false).build().unwrap();",
          "    assert!(re_1.is_match(b\"foo\\nbar\"));",
          "    assert!(!re_2.is_match(b\"foo\\nbar\"));",
          "    builder.dot_matches_new_line(false);",
          "    let re_3 = builder.build().unwrap();",
          "    assert!(!re_3.is_match(b\"foo\\nbar\"));",
          "    builder.dot_matches_new_line(true);",
          "    let re_4 = builder.build().unwrap();",
          "    assert!(re_4.is_match(b\"foo\\nbar\"));"
        ],
        "code": [
          "{",
          "    let mut builder = RegexSetBuilder::new([\"foo.bar\"]);",
          "    let re = builder.dot_matches_new_line(true).build().unwrap();",
          "    let hay = b\"foo\\nbar\";",
          "    re.is_match(hay);",
          "    assert_eq!(builder.dot_matches_new_line(true), &mut builder);",
          "    assert_eq!(builder.dot_matches_new_line(false), &mut builder);",
          "    let re_1 = builder.dot_matches_new_line(true).build().unwrap();",
          "    let re_2 = builder.dot_matches_new_line(false).build().unwrap();",
          "    assert!(re_1.is_match(b\"foo\\nbar\"));",
          "    assert!(!re_2.is_match(b\"foo\\nbar\"));",
          "    builder.dot_matches_new_line(false);",
          "    let re_3 = builder.build().unwrap();",
          "    assert!(!re_3.is_match(b\"foo\\nbar\"));",
          "    builder.dot_matches_new_line(true);",
          "    let re_4 = builder.build().unwrap();",
          "    assert!(re_4.is_match(b\"foo\\nbar\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = RegexSetBuilder::new([\"foo.bar\"]);",
          "    let re = builder.dot_matches_new_line(false).build().unwrap();",
          "    let hay = b\"foo\\nbar\";",
          "    re.is_match(hay);",
          "}"
        ],
        "oracle": [
          "    let mut builder = RegexSetBuilder::new([\"foo.bar\"]);",
          "    let re = builder.dot_matches_new_line(false).build().unwrap();",
          "    let result = re.is_match(b\"foo\\nbar\");",
          "    assert!(!result);"
        ],
        "code": [
          "{",
          "    let mut builder = RegexSetBuilder::new([\"foo.bar\"]);",
          "    let re = builder.dot_matches_new_line(false).build().unwrap();",
          "    let hay = b\"foo\\nbar\";",
          "    re.is_match(hay);",
          "    let mut builder = RegexSetBuilder::new([\"foo.bar\"]);",
          "    let re = builder.dot_matches_new_line(false).build().unwrap();",
          "    let result = re.is_match(b\"foo\\nbar\");",
          "    assert!(!result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = RegexSetBuilder::new([\"foo.bar\", \"baz.qux\"]);",
          "    let re = builder.dot_matches_new_line(true).build().unwrap();",
          "    let hay = b\"foo\\nbar baz\\nqux\";",
          "    re.is_match(hay);",
          "}"
        ],
        "oracle": [
          "    let builder = RegexSetBuilder::new([\"foo.bar\", \"baz.qux\"]);",
          "    let re = builder.dot_matches_new_line(true).build().unwrap();",
          "    assert!(re.is_match(b\"foo\\nbar baz\\nqux\"));",
          "    let builder = RegexSetBuilder::new([\"foo.bar\", \"baz.qux\"]);",
          "    let re = builder.dot_matches_new_line(false).build().unwrap();",
          "    assert!(!re.is_match(b\"foo\\nbar baz\\nqux\"));",
          "    let builder = RegexSetBuilder::new([\"a.b\"]);",
          "    let re = builder.dot_matches_new_line(true).build().unwrap();",
          "    assert!(re.is_match(b\"a\\nb\"));",
          "    let builder = RegexSetBuilder::new([\"a.b\"]);",
          "    let re = builder.dot_matches_new_line(false).build().unwrap();",
          "    assert!(!re.is_match(b\"a\\nb\"));"
        ],
        "code": [
          "{",
          "    let mut builder = RegexSetBuilder::new([\"foo.bar\", \"baz.qux\"]);",
          "    let re = builder.dot_matches_new_line(true).build().unwrap();",
          "    let hay = b\"foo\\nbar baz\\nqux\";",
          "    re.is_match(hay);",
          "    let builder = RegexSetBuilder::new([\"foo.bar\", \"baz.qux\"]);",
          "    let re = builder.dot_matches_new_line(true).build().unwrap();",
          "    assert!(re.is_match(b\"foo\\nbar baz\\nqux\"));",
          "    let builder = RegexSetBuilder::new([\"foo.bar\", \"baz.qux\"]);",
          "    let re = builder.dot_matches_new_line(false).build().unwrap();",
          "    assert!(!re.is_match(b\"foo\\nbar baz\\nqux\"));",
          "    let builder = RegexSetBuilder::new([\"a.b\"]);",
          "    let re = builder.dot_matches_new_line(true).build().unwrap();",
          "    assert!(re.is_match(b\"a\\nb\"));",
          "    let builder = RegexSetBuilder::new([\"a.b\"]);",
          "    let re = builder.dot_matches_new_line(false).build().unwrap();",
          "    assert!(!re.is_match(b\"a\\nb\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = RegexSetBuilder::new([\"\"]);",
          "    let re = builder.dot_matches_new_line(false).build().unwrap();",
          "    let hay = b\"\";",
          "    re.is_match(hay);",
          "}"
        ],
        "oracle": [
          "    let mut builder = RegexSetBuilder::new([\"\"]);",
          "    builder.dot_matches_new_line(false);",
          "    let re = builder.build().unwrap();",
          "    let hay = b\"\";",
          "    assert!(!re.is_match(hay));",
          "    ",
          "    let mut builder2 = RegexSetBuilder::new([\"foo.bar\"]);",
          "    builder2.dot_matches_new_line(false);",
          "    let re2 = builder2.build().unwrap();",
          "    let hay2 = b\"foo\\nbar\";",
          "    assert!(!re2.is_match(hay2));",
          "    ",
          "    let mut builder3 = RegexSetBuilder::new([\"foo.bar\"]);",
          "    builder3.dot_matches_new_line(true);",
          "    let re3 = builder3.build().unwrap();",
          "    let hay3 = b\"foo\\nbar\";",
          "    assert!(re3.is_match(hay3));"
        ],
        "code": [
          "{",
          "    let mut builder = RegexSetBuilder::new([\"\"]);",
          "    let re = builder.dot_matches_new_line(false).build().unwrap();",
          "    let hay = b\"\";",
          "    re.is_match(hay);",
          "    let mut builder = RegexSetBuilder::new([\"\"]);",
          "    builder.dot_matches_new_line(false);",
          "    let re = builder.build().unwrap();",
          "    let hay = b\"\";",
          "    assert!(!re.is_match(hay));",
          "    ",
          "    let mut builder2 = RegexSetBuilder::new([\"foo.bar\"]);",
          "    builder2.dot_matches_new_line(false);",
          "    let re2 = builder2.build().unwrap();",
          "    let hay2 = b\"foo\\nbar\";",
          "    assert!(!re2.is_match(hay2));",
          "    ",
          "    let mut builder3 = RegexSetBuilder::new([\"foo.bar\"]);",
          "    builder3.dot_matches_new_line(true);",
          "    let re3 = builder3.build().unwrap();",
          "    let hay3 = b\"foo\\nbar\";",
          "    assert!(re3.is_match(hay3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = RegexSetBuilder::new([\"foo\\nbar\"]);",
          "    let re = builder.dot_matches_new_line(true).build().unwrap();",
          "    let hay = b\"foo\\nbar\";",
          "    re.is_match(hay);",
          "}"
        ],
        "oracle": [
          "    let mut builder = RegexSetBuilder::new([\"foo\\nbar\"]);",
          "    assert_eq!(builder.dot_matches_new_line(true).builder.syntaxc.dot_matches_new_line, true);",
          "    let re = builder.build().unwrap();",
          "    assert!(re.is_match(b\"foo\\nbar\"));",
          "    assert!(!re.is_match(b\"foobar\"));"
        ],
        "code": [
          "{",
          "    let mut builder = RegexSetBuilder::new([\"foo\\nbar\"]);",
          "    let re = builder.dot_matches_new_line(true).build().unwrap();",
          "    let hay = b\"foo\\nbar\";",
          "    re.is_match(hay);",
          "    let mut builder = RegexSetBuilder::new([\"foo\\nbar\"]);",
          "    assert_eq!(builder.dot_matches_new_line(true).builder.syntaxc.dot_matches_new_line, true);",
          "    let re = builder.build().unwrap();",
          "    assert!(re.is_match(b\"foo\\nbar\"));",
          "    assert!(!re.is_match(b\"foobar\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = RegexSetBuilder::new([\"foo\\nbar\"]);",
          "    let re = builder.dot_matches_new_line(false).build().unwrap();",
          "    let hay = b\"foo\\nbar\";",
          "    re.is_match(hay);",
          "}"
        ],
        "oracle": [
          "    let mut builder = RegexSetBuilder::new([\"foo\\nbar\"]);",
          "    let re = builder.dot_matches_new_line(false).build().unwrap();",
          "    let hay = b\"foo\\nbar\";",
          "    assert!(!re.is_match(hay));"
        ],
        "code": [
          "{",
          "    let mut builder = RegexSetBuilder::new([\"foo\\nbar\"]);",
          "    let re = builder.dot_matches_new_line(false).build().unwrap();",
          "    let hay = b\"foo\\nbar\";",
          "    re.is_match(hay);",
          "    let mut builder = RegexSetBuilder::new([\"foo\\nbar\"]);",
          "    let re = builder.dot_matches_new_line(false).build().unwrap();",
          "    let hay = b\"foo\\nbar\";",
          "    assert!(!re.is_match(hay));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]