[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct FormatterMock;",
          "    impl core::fmt::Write for FormatterMock {",
          "        fn write_str(&mut self, _: &str) -> core::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut formatter = FormatterMock;",
          "    let error_kind = ErrorKind::EscapeHexEmpty;",
          "    let _ = error_kind.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(error_kind.fmt(&mut formatter).unwrap(), ());",
          "    ",
          "    let expected_message = \"hexadecimal literal empty\";",
          "    assert_eq!(formatter.write_str(expected_message).is_ok(), true);",
          "    ",
          "    let error_kind = ErrorKind::EscapeHexInvalid;",
          "    assert_eq!(error_kind.fmt(&mut formatter).unwrap(), ());",
          "    ",
          "    let expected_message_invalid = \"hexadecimal literal is not a Unicode scalar value\";",
          "    assert_eq!(formatter.write_str(expected_message_invalid).is_ok(), true);"
        ],
        "code": [
          "{",
          "    struct FormatterMock;",
          "    impl core::fmt::Write for FormatterMock {",
          "        fn write_str(&mut self, _: &str) -> core::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut formatter = FormatterMock;",
          "    let error_kind = ErrorKind::EscapeHexEmpty;",
          "    let _ = error_kind.fmt(&mut formatter);",
          "    assert_eq!(error_kind.fmt(&mut formatter).unwrap(), ());",
          "    ",
          "    let expected_message = \"hexadecimal literal empty\";",
          "    assert_eq!(formatter.write_str(expected_message).is_ok(), true);",
          "    ",
          "    let error_kind = ErrorKind::EscapeHexInvalid;",
          "    assert_eq!(error_kind.fmt(&mut formatter).unwrap(), ());",
          "    ",
          "    let expected_message_invalid = \"hexadecimal literal is not a Unicode scalar value\";",
          "    assert_eq!(formatter.write_str(expected_message_invalid).is_ok(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct FormatterMock;",
          "    impl core::fmt::Write for FormatterMock {",
          "        fn write_str(&mut self, _: &str) -> core::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut formatter = FormatterMock;",
          "    let error_kind = ErrorKind::EscapeHexInvalid;",
          "    let _ = error_kind.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(error_kind.fmt(&mut formatter).is_ok(), true);",
          "    assert!(formatter.write_str(\"hexadecimal literal is not a Unicode scalar value\").is_ok());"
        ],
        "code": [
          "{",
          "    struct FormatterMock;",
          "    impl core::fmt::Write for FormatterMock {",
          "        fn write_str(&mut self, _: &str) -> core::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut formatter = FormatterMock;",
          "    let error_kind = ErrorKind::EscapeHexInvalid;",
          "    let _ = error_kind.fmt(&mut formatter);",
          "    assert_eq!(error_kind.fmt(&mut formatter).is_ok(), true);",
          "    assert!(formatter.write_str(\"hexadecimal literal is not a Unicode scalar value\").is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]