[
  {
    "uses": [
      "use core::fmt::Formatter;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use core::fmt::Formatter;",
          "    let error_kind = regex_syntax::ErrorKind::ClassRangeLiteral;",
          "    let mut formatter = Formatter::new();",
          "    let _ = error_kind.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"invalid range boundary, must be a literal\");"
        ],
        "code": [
          "{",
          "    use core::fmt::Formatter;",
          "    let error_kind = regex_syntax::ErrorKind::ClassRangeLiteral;",
          "    let mut formatter = Formatter::new();",
          "    let _ = error_kind.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"invalid range boundary, must be a literal\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use core::fmt::Formatter;",
          "    let error_kind = regex_syntax::ErrorKind::ClassRangeLiteral;",
          "    let mut formatter = Formatter::new();",
          "    let _ = error_kind.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"invalid range boundary, must be a literal\")"
        ],
        "code": [
          "{",
          "    use core::fmt::Formatter;",
          "    let error_kind = regex_syntax::ErrorKind::ClassRangeLiteral;",
          "    let mut formatter = Formatter::new();",
          "    let _ = error_kind.fmt(&mut formatter);",
          "    write!(f, \"invalid range boundary, must be a literal\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]