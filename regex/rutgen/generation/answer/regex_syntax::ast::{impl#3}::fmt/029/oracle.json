[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = ErrorKind::DecimalEmpty;",
          "    let mut buffer = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"decimal literal empty\") == Ok(());",
          "    write!(f, \"decimal literal empty\") == Err(core::fmt::Error);",
          "    let error = ErrorKind::DecimalEmpty;",
          "    let buffer = core::fmt::Formatter::new();",
          "    assert_eq!(error.fmt(&mut buffer), Ok(()));",
          "    let error = ErrorKind::DecimalEmpty;",
          "    let buffer = core::fmt::Formatter::new();",
          "    assert_ne!(error.fmt(&mut buffer), Err(core::fmt::Error));"
        ],
        "code": [
          "{",
          "    let error = ErrorKind::DecimalEmpty;",
          "    let mut buffer = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut buffer);",
          "    write!(f, \"decimal literal empty\") == Ok(());",
          "    write!(f, \"decimal literal empty\") == Err(core::fmt::Error);",
          "    let error = ErrorKind::DecimalEmpty;",
          "    let buffer = core::fmt::Formatter::new();",
          "    assert_eq!(error.fmt(&mut buffer), Ok(()));",
          "    let error = ErrorKind::DecimalEmpty;",
          "    let buffer = core::fmt::Formatter::new();",
          "    assert_ne!(error.fmt(&mut buffer), Err(core::fmt::Error));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = ErrorKind::DecimalEmpty;",
          "    let mut buffer1 = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut buffer1);",
          "    ",
          "    let mut buffer2 = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut buffer2);",
          "}"
        ],
        "oracle": [
          "    let error = ErrorKind::DecimalEmpty;",
          "    let mut buffer1 = core::fmt::Formatter::new();",
          "    assert_eq!(error.fmt(&mut buffer1).to_string(), \"decimal literal empty\");",
          "    let mut buffer2 = core::fmt::Formatter::new();",
          "    assert_eq!(error.fmt(&mut buffer2).to_string(), \"decimal literal empty\");"
        ],
        "code": [
          "{",
          "    let error = ErrorKind::DecimalEmpty;",
          "    let mut buffer1 = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut buffer1);",
          "    ",
          "    let mut buffer2 = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut buffer2);",
          "    let error = ErrorKind::DecimalEmpty;",
          "    let mut buffer1 = core::fmt::Formatter::new();",
          "    assert_eq!(error.fmt(&mut buffer1).to_string(), \"decimal literal empty\");",
          "    let mut buffer2 = core::fmt::Formatter::new();",
          "    assert_eq!(error.fmt(&mut buffer2).to_string(), \"decimal literal empty\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]