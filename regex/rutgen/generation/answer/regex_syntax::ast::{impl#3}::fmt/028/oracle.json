[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = ErrorKind::DecimalInvalid;",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"decimal literal invalid\") == Ok(());",
          "    write!(f, \"decimal literal invalid\") is invoked with a DecimalInvalid error."
        ],
        "code": [
          "{",
          "    let error = ErrorKind::DecimalInvalid;",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "    write!(f, \"decimal literal invalid\") == Ok(());",
          "    write!(f, \"decimal literal invalid\") is invoked with a DecimalInvalid error.",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = ErrorKind::DecimalEmpty;",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.formatted_output(), \"decimal literal empty\");"
        ],
        "code": [
          "{",
          "    let error = ErrorKind::DecimalEmpty;",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "    assert_eq!(formatter.formatted_output(), \"decimal literal empty\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]