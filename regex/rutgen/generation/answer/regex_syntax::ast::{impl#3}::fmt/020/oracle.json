[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let original = Span { start: Position(0), end: Position(1) };",
          "    let error_kind = ErrorKind::FlagRepeatedNegation { original };",
          "    let _ = format!(\"{}\", error_kind);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"flag negation operator repeated\")"
        ],
        "code": [
          "{",
          "    let original = Span { start: Position(0), end: Position(1) };",
          "    let error_kind = ErrorKind::FlagRepeatedNegation { original };",
          "    let _ = format!(\"{}\", error_kind);",
          "    write!(f, \"flag negation operator repeated\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let original = Span { start: Position(1), end: Position(1) };",
          "    let error_kind = ErrorKind::FlagRepeatedNegation { original };",
          "    let _ = format!(\"{}\", error_kind);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"flag negation operator repeated\")"
        ],
        "code": [
          "{",
          "    let original = Span { start: Position(1), end: Position(1) };",
          "    let error_kind = ErrorKind::FlagRepeatedNegation { original };",
          "    let _ = format!(\"{}\", error_kind);",
          "    write!(f, \"flag negation operator repeated\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let original = Span { start: Position(0), end: Position(0) };",
          "    let error_kind = ErrorKind::FlagRepeatedNegation { original };",
          "    let _ = format!(\"{}\", error_kind);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"flag negation operator repeated\")"
        ],
        "code": [
          "{",
          "    let original = Span { start: Position(0), end: Position(0) };",
          "    let error_kind = ErrorKind::FlagRepeatedNegation { original };",
          "    let _ = format!(\"{}\", error_kind);",
          "    write!(f, \"flag negation operator repeated\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let original = Span { start: Position(u32::MAX - 1), end: Position(u32::MAX) };",
          "    let error_kind = ErrorKind::FlagRepeatedNegation { original };",
          "    let _ = format!(\"{}\", error_kind);",
          "}"
        ],
        "oracle": [
          "    let original = Span { start: Position(u32::MAX - 1), end: Position(u32::MAX) };",
          "    let error_kind = ErrorKind::FlagRepeatedNegation { original };",
          "    assert_eq!(format!(\"{}\", error_kind), \"flag negation operator repeated\");"
        ],
        "code": [
          "{",
          "    let original = Span { start: Position(u32::MAX - 1), end: Position(u32::MAX) };",
          "    let error_kind = ErrorKind::FlagRepeatedNegation { original };",
          "    let _ = format!(\"{}\", error_kind);",
          "    let original = Span { start: Position(u32::MAX - 1), end: Position(u32::MAX) };",
          "    let error_kind = ErrorKind::FlagRepeatedNegation { original };",
          "    assert_eq!(format!(\"{}\", error_kind), \"flag negation operator repeated\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let original = Span { start: Position(u32::MAX), end: Position(u32::MAX) };",
          "    let error_kind = ErrorKind::FlagRepeatedNegation { original };",
          "    let _ = format!(\"{}\", error_kind);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"flag negation operator repeated\")"
        ],
        "code": [
          "{",
          "    let original = Span { start: Position(u32::MAX), end: Position(u32::MAX) };",
          "    let error_kind = ErrorKind::FlagRepeatedNegation { original };",
          "    let _ = format!(\"{}\", error_kind);",
          "    write!(f, \"flag negation operator repeated\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]