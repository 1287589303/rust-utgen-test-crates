[
  {
    "uses": [
      "use core::fmt::Formatter;",
      "use crate::ast::ErrorKind;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::ast::ErrorKind;",
          "    use core::fmt::Formatter;",
          "",
          "    struct TestFormatter;",
          "    ",
          "    impl core::fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> core::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let error = ErrorKind::RepetitionCountDecimalEmpty;",
          "    let mut formatter = TestFormatter;",
          "",
          "    let _ = error.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter, \"repetition quantifier expects a valid decimal\");"
        ],
        "code": [
          "{",
          "    use crate::ast::ErrorKind;",
          "    use core::fmt::Formatter;",
          "",
          "    struct TestFormatter;",
          "    ",
          "    impl core::fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> core::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let error = ErrorKind::RepetitionCountDecimalEmpty;",
          "    let mut formatter = TestFormatter;",
          "",
          "    let _ = error.fmt(&mut formatter);",
          "    assert_eq!(formatter, \"repetition quantifier expects a valid decimal\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::ast::ErrorKind;",
          "    use core::fmt::Formatter;",
          "",
          "    struct TestFormatter;",
          "    ",
          "    impl core::fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> core::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let error = ErrorKind::RepetitionCountDecimalEmpty;",
          "    let mut formatter = TestFormatter;",
          "",
          "    let _ = error.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{}\", ErrorKind::RepetitionCountDecimalEmpty), \"repetition quantifier expects a valid decimal\");"
        ],
        "code": [
          "{",
          "    use crate::ast::ErrorKind;",
          "    use core::fmt::Formatter;",
          "",
          "    struct TestFormatter;",
          "    ",
          "    impl core::fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> core::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let error = ErrorKind::RepetitionCountDecimalEmpty;",
          "    let mut formatter = TestFormatter;",
          "",
          "    let _ = error.fmt(&mut formatter);",
          "    assert_eq!(format!(\"{}\", ErrorKind::RepetitionCountDecimalEmpty), \"repetition quantifier expects a valid decimal\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]