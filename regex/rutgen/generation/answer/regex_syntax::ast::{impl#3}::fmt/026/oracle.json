[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error_kind = ErrorKind::EscapeHexInvalid;",
          "    let mut buffer = core::fmt::Formatter::new();",
          "    let _ = error_kind.fmt(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    write!(buffer, \"hexadecimal literal is not a Unicode scalar value\")",
          "    assert_eq!(buffer.to_string(), \"hexadecimal literal is not a Unicode scalar value\");",
          "    write!(buffer, \"unrecognized escape sequence\")",
          "    assert_ne!(buffer.to_string(), \"unrecognized escape sequence\");"
        ],
        "code": [
          "{",
          "    let error_kind = ErrorKind::EscapeHexInvalid;",
          "    let mut buffer = core::fmt::Formatter::new();",
          "    let _ = error_kind.fmt(&mut buffer);",
          "    write!(buffer, \"hexadecimal literal is not a Unicode scalar value\")",
          "    assert_eq!(buffer.to_string(), \"hexadecimal literal is not a Unicode scalar value\");",
          "    write!(buffer, \"unrecognized escape sequence\")",
          "    assert_ne!(buffer.to_string(), \"unrecognized escape sequence\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error_kind = ErrorKind::EscapeHexInvalid;",
          "    let result = format!(\"{}\", error_kind);",
          "    let expected = \"hexadecimal literal is not a Unicode scalar value\";",
          "    let _ = result; ",
          "}"
        ],
        "oracle": [
          "    let error_kind = ErrorKind::EscapeHexInvalid;",
          "    let result = format!(\"{}\", error_kind);",
          "    assert_eq!(result, \"hexadecimal literal is not a Unicode scalar value\");"
        ],
        "code": [
          "{",
          "    let error_kind = ErrorKind::EscapeHexInvalid;",
          "    let result = format!(\"{}\", error_kind);",
          "    let expected = \"hexadecimal literal is not a Unicode scalar value\";",
          "    let _ = result; ",
          "    let error_kind = ErrorKind::EscapeHexInvalid;",
          "    let result = format!(\"{}\", error_kind);",
          "    assert_eq!(result, \"hexadecimal literal is not a Unicode scalar value\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error_kind = ErrorKind::EscapeHexInvalid;",
          "    let result = format!(\"{:?}\", error_kind);",
          "    let _ = result; ",
          "}"
        ],
        "oracle": [
          "    let error_kind = ErrorKind::EscapeHexInvalid;",
          "    let result = format!(\"{}\", error_kind);",
          "    assert_eq!(result, \"hexadecimal literal is not a Unicode scalar value\");"
        ],
        "code": [
          "{",
          "    let error_kind = ErrorKind::EscapeHexInvalid;",
          "    let result = format!(\"{:?}\", error_kind);",
          "    let _ = result; ",
          "    let error_kind = ErrorKind::EscapeHexInvalid;",
          "    let result = format!(\"{}\", error_kind);",
          "    assert_eq!(result, \"hexadecimal literal is not a Unicode scalar value\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]