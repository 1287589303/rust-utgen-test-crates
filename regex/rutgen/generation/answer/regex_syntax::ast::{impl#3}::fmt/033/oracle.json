[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = ErrorKind::ClassEscapeInvalid;",
          "    let mut output = core::fmt::Formatter::default();",
          "    error.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    output.contains(\"invalid escape sequence found in character class\") == true"
        ],
        "code": [
          "{",
          "    let error = ErrorKind::ClassEscapeInvalid;",
          "    let mut output = core::fmt::Formatter::default();",
          "    error.fmt(&mut output);",
          "    output.contains(\"invalid escape sequence found in character class\") == true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = ErrorKind::ClassEscapeInvalid;",
          "    let mut output = core::fmt::Formatter::default();",
          "    error.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    write!(output, \"invalid escape sequence found in character class\") == error.to_string()",
          "    write!(output, \"invalid escape sequence found in character class\").is_ok()",
          "    assert_eq!(error.fmt(&mut output), Ok(()))",
          "    assert_eq!(error.to_string(), \"invalid escape sequence found in character class\")",
          "    let output_string = format!(\"{}\", error);",
          "    assert_eq!(output_string, \"invalid escape sequence found in character class\")"
        ],
        "code": [
          "{",
          "    let error = ErrorKind::ClassEscapeInvalid;",
          "    let mut output = core::fmt::Formatter::default();",
          "    error.fmt(&mut output);",
          "    write!(output, \"invalid escape sequence found in character class\") == error.to_string()",
          "    write!(output, \"invalid escape sequence found in character class\").is_ok()",
          "    assert_eq!(error.fmt(&mut output), Ok(()))",
          "    assert_eq!(error.to_string(), \"invalid escape sequence found in character class\")",
          "    let output_string = format!(\"{}\", error);",
          "    assert_eq!(output_string, \"invalid escape sequence found in character class\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = ErrorKind::ClassEscapeInvalid;",
          "    let mut output = core::fmt::Formatter::default();",
          "    error.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"invalid escape sequence found in character class\")"
        ],
        "code": [
          "{",
          "    let error = ErrorKind::ClassEscapeInvalid;",
          "    let mut output = core::fmt::Formatter::default();",
          "    error.fmt(&mut output);",
          "    write!(f, \"invalid escape sequence found in character class\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = ErrorKind::ClassEscapeInvalid;",
          "    let mut output = core::fmt::Formatter::default();",
          "    error.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    write!(output, \"invalid escape sequence found in character class\") == error.fmt(&mut output);",
          "    assert_eq!(output, \"invalid escape sequence found in character class\");"
        ],
        "code": [
          "{",
          "    let error = ErrorKind::ClassEscapeInvalid;",
          "    let mut output = core::fmt::Formatter::default();",
          "    error.fmt(&mut output);",
          "    write!(output, \"invalid escape sequence found in character class\") == error.fmt(&mut output);",
          "    assert_eq!(output, \"invalid escape sequence found in character class\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]