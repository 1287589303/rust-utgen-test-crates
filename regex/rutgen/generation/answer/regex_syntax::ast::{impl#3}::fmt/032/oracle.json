[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = ErrorKind::ClassRangeInvalid;",
          "    let _ = core::fmt::write(&mut core::fmt::Formatter::new(), |f| error.fmt(f));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{}\", ErrorKind::ClassRangeInvalid), \"invalid character class range, \\n the start must be <= the end\");"
        ],
        "code": [
          "{",
          "    let error = ErrorKind::ClassRangeInvalid;",
          "    let _ = core::fmt::write(&mut core::fmt::Formatter::new(), |f| error.fmt(f));",
          "    assert_eq!(format!(\"{}\", ErrorKind::ClassRangeInvalid), \"invalid character class range, \\n the start must be <= the end\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = ErrorKind::ClassRangeInvalid;",
          "    let _ = core::fmt::write(&mut core::fmt::Formatter::new(), |f| error.fmt(f));",
          "}"
        ],
        "oracle": [
          "    write!(f, \"invalid character class range, the start must be <= the end\")"
        ],
        "code": [
          "{",
          "    let error = ErrorKind::ClassRangeInvalid;",
          "    let _ = core::fmt::write(&mut core::fmt::Formatter::new(), |f| error.fmt(f));",
          "    write!(f, \"invalid character class range, the start must be <= the end\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]