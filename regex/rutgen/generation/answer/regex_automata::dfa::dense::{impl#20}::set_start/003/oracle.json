[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut start_table = StartTable {",
          "        table: vec![StateID(0); 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::NonWordByte; 256] },",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let anchored = Anchored::Yes;",
          "    let start = Start::NonWordByte;",
          "    let id = StateID(0);",
          "    start_table.set_start(anchored, start, id);",
          "}"
        ],
        "oracle": [
          "    let anchored = Anchored::Yes;",
          "    let start = Start::NonWordByte;",
          "    let id = StateID(0);",
          "    start_table.set_start(anchored, start, id);",
          "    assert_eq!(start_table.table[0], id);",
          "    assert_eq!(start_table.table[1], StateID(0));",
          "    assert_eq!(start_table.table[2], StateID(0));",
          "    assert_eq!(start_table.table[3], StateID(0));",
          "    assert_eq!(start_table.table[4], StateID(0));",
          "    assert_eq!(start_table.table[5], StateID(0));",
          "    assert_eq!(start_table.table[6], StateID(0));",
          "    assert_eq!(start_table.table[7], StateID(0));"
        ],
        "code": [
          "{",
          "    let mut start_table = StartTable {",
          "        table: vec![StateID(0); 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::NonWordByte; 256] },",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let anchored = Anchored::Yes;",
          "    let start = Start::NonWordByte;",
          "    let id = StateID(0);",
          "    start_table.set_start(anchored, start, id);",
          "    let anchored = Anchored::Yes;",
          "    let start = Start::NonWordByte;",
          "    let id = StateID(0);",
          "    start_table.set_start(anchored, start, id);",
          "    assert_eq!(start_table.table[0], id);",
          "    assert_eq!(start_table.table[1], StateID(0));",
          "    assert_eq!(start_table.table[2], StateID(0));",
          "    assert_eq!(start_table.table[3], StateID(0));",
          "    assert_eq!(start_table.table[4], StateID(0));",
          "    assert_eq!(start_table.table[5], StateID(0));",
          "    assert_eq!(start_table.table[6], StateID(0));",
          "    assert_eq!(start_table.table[7], StateID(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut start_table = StartTable {",
          "        table: vec![StateID(0); 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::WordByte; 256] },",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let anchored = Anchored::Yes;",
          "    let start = Start::WordByte;",
          "    let id = StateID(1);",
          "    start_table.set_start(anchored, start, id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start_table.table[1], StateID(1));",
          "    assert_eq!(start_table.table[0], StateID(0));",
          "    assert!(start_table.pattern_len.is_some());",
          "    start_table.set_start(Anchored::Yes, Start::LineLF, StateID(2));",
          "    assert_eq!(start_table.table[2], StateID(2));",
          "    start_table.set_start(Anchored::Yes, Start::Text, StateID(3));",
          "    assert_eq!(start_table.table[3], StateID(3));",
          "    start_table.set_start(Anchored::Yes, Start::NonWordByte, StateID(4));",
          "    assert_eq!(start_table.table[0], StateID(4));"
        ],
        "code": [
          "{",
          "    let mut start_table = StartTable {",
          "        table: vec![StateID(0); 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::WordByte; 256] },",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let anchored = Anchored::Yes;",
          "    let start = Start::WordByte;",
          "    let id = StateID(1);",
          "    start_table.set_start(anchored, start, id);",
          "    assert_eq!(start_table.table[1], StateID(1));",
          "    assert_eq!(start_table.table[0], StateID(0));",
          "    assert!(start_table.pattern_len.is_some());",
          "    start_table.set_start(Anchored::Yes, Start::LineLF, StateID(2));",
          "    assert_eq!(start_table.table[2], StateID(2));",
          "    start_table.set_start(Anchored::Yes, Start::Text, StateID(3));",
          "    assert_eq!(start_table.table[3], StateID(3));",
          "    start_table.set_start(Anchored::Yes, Start::NonWordByte, StateID(4));",
          "    assert_eq!(start_table.table[0], StateID(4));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut start_table = StartTable {",
          "        table: vec![StateID(0); 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::Text; 256] },",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let anchored = Anchored::Yes;",
          "    let start = Start::Text;",
          "    let id = StateID(2);",
          "    start_table.set_start(anchored, start, id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start_table.table_mut()[1], StateID(2));",
          "    assert_eq!(start_table.pattern_len, Some(1));",
          "    assert!(start_table.start_map.map[0] == Start::Text);",
          "    assert_eq!(start_table.kind, StartKind::Both);",
          "    assert!(start_table.universal_start_unanchored.is_none());",
          "    assert!(start_table.universal_start_anchored.is_none());"
        ],
        "code": [
          "{",
          "    let mut start_table = StartTable {",
          "        table: vec![StateID(0); 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::Text; 256] },",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let anchored = Anchored::Yes;",
          "    let start = Start::Text;",
          "    let id = StateID(2);",
          "    start_table.set_start(anchored, start, id);",
          "    assert_eq!(start_table.table_mut()[1], StateID(2));",
          "    assert_eq!(start_table.pattern_len, Some(1));",
          "    assert!(start_table.start_map.map[0] == Start::Text);",
          "    assert_eq!(start_table.kind, StartKind::Both);",
          "    assert!(start_table.universal_start_unanchored.is_none());",
          "    assert!(start_table.universal_start_anchored.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut start_table = StartTable {",
          "        table: vec![StateID(0); 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::LineLF; 256] },",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let anchored = Anchored::Yes;",
          "    let start = Start::LineLF;",
          "    let id = StateID(3);",
          "    start_table.set_start(anchored, start, id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start_table.table[2], StateID(3));",
          "    assert_eq!(start_table.table[1], StateID(0));",
          "    assert_eq!(start_table.pattern_len, Some(1));",
          "    assert!(start_table.start_map.map[3] == Start::LineLF);",
          "    assert!(start_table.kind == StartKind::Both);",
          "    assert!(start_table.stride == 1);",
          "    assert!(start_table.universal_start_unanchored.is_none());",
          "    assert!(start_table.universal_start_anchored.is_none());"
        ],
        "code": [
          "{",
          "    let mut start_table = StartTable {",
          "        table: vec![StateID(0); 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::LineLF; 256] },",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let anchored = Anchored::Yes;",
          "    let start = Start::LineLF;",
          "    let id = StateID(3);",
          "    start_table.set_start(anchored, start, id);",
          "    assert_eq!(start_table.table[2], StateID(3));",
          "    assert_eq!(start_table.table[1], StateID(0));",
          "    assert_eq!(start_table.pattern_len, Some(1));",
          "    assert!(start_table.start_map.map[3] == Start::LineLF);",
          "    assert!(start_table.kind == StartKind::Both);",
          "    assert!(start_table.stride == 1);",
          "    assert!(start_table.universal_start_unanchored.is_none());",
          "    assert!(start_table.universal_start_anchored.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut start_table = StartTable {",
          "        table: vec![StateID(0); 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::LineCR; 256] },",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let anchored = Anchored::Yes;",
          "    let start = Start::LineCR;",
          "    let id = StateID(4);",
          "    start_table.set_start(anchored, start, id);",
          "}"
        ],
        "oracle": [
          "    let mut start_table = StartTable { table: vec![StateID(0); 8], kind: StartKind::Both, start_map: StartByteMap { map: [Start::LineCR; 256] }, stride: 1, pattern_len: Some(1), universal_start_unanchored: None, universal_start_anchored: None };",
          "    let anchored = Anchored::Yes;",
          "    let start = Start::LineCR;",
          "    let id = StateID(4);",
          "    start_table.set_start(anchored, start, id);",
          "    assert_eq!(start_table.table[1], id);",
          "    ",
          "    let err = std::panic::catch_unwind(|| {",
          "    let invalid_pid = PatternID(SmallIndex(1)); // Invalid pattern ID for pattern_len == 1",
          "    start_table.set_start(Anchored::Pattern(invalid_pid), start, id);",
          "    });",
          "    assert!(err.is_err());"
        ],
        "code": [
          "{",
          "    let mut start_table = StartTable {",
          "        table: vec![StateID(0); 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::LineCR; 256] },",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let anchored = Anchored::Yes;",
          "    let start = Start::LineCR;",
          "    let id = StateID(4);",
          "    start_table.set_start(anchored, start, id);",
          "    let mut start_table = StartTable { table: vec![StateID(0); 8], kind: StartKind::Both, start_map: StartByteMap { map: [Start::LineCR; 256] }, stride: 1, pattern_len: Some(1), universal_start_unanchored: None, universal_start_anchored: None };",
          "    let anchored = Anchored::Yes;",
          "    let start = Start::LineCR;",
          "    let id = StateID(4);",
          "    start_table.set_start(anchored, start, id);",
          "    assert_eq!(start_table.table[1], id);",
          "    ",
          "    let err = std::panic::catch_unwind(|| {",
          "    let invalid_pid = PatternID(SmallIndex(1)); // Invalid pattern ID for pattern_len == 1",
          "    start_table.set_start(Anchored::Pattern(invalid_pid), start, id);",
          "    });",
          "    assert!(err.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut start_table = StartTable {",
          "        table: vec![StateID(0); 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::CustomLineTerminator; 256] },",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let anchored = Anchored::Yes;",
          "    let start = Start::CustomLineTerminator;",
          "    let id = StateID(5);",
          "    start_table.set_start(anchored, start, id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start_table.table[1], StateID(5));",
          "    assert_eq!(start_table.table[2], StateID(0));",
          "    assert_eq!(start_table.table[3], StateID(0));",
          "    assert_eq!(start_table.table[4], StateID(0));",
          "    assert_eq!(start_table.table[5], StateID(0));",
          "    assert_eq!(start_table.table[6], StateID(0));",
          "    assert_eq!(start_table.table[7], StateID(0));"
        ],
        "code": [
          "{",
          "    let mut start_table = StartTable {",
          "        table: vec![StateID(0); 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::CustomLineTerminator; 256] },",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let anchored = Anchored::Yes;",
          "    let start = Start::CustomLineTerminator;",
          "    let id = StateID(5);",
          "    start_table.set_start(anchored, start, id);",
          "    assert_eq!(start_table.table[1], StateID(5));",
          "    assert_eq!(start_table.table[2], StateID(0));",
          "    assert_eq!(start_table.table[3], StateID(0));",
          "    assert_eq!(start_table.table[4], StateID(0));",
          "    assert_eq!(start_table.table[5], StateID(0));",
          "    assert_eq!(start_table.table[6], StateID(0));",
          "    assert_eq!(start_table.table[7], StateID(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]