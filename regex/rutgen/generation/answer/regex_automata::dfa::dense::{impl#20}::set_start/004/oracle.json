[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut start_table = StartTable {",
          "        table: vec![StateID::default(); 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::NonWordByte; 256] },",
          "        stride: 4,",
          "        pattern_len: Some(2),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let state_id = StateID::default();",
          "    start_table.set_start(Anchored::No, Start::NonWordByte, state_id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start_table.table[0], state_id);",
          "    assert_eq!(start_table.table[1], StateID::default());",
          "    assert_eq!(start_table.table[2], StateID::default());",
          "    assert_eq!(start_table.table[3], StateID::default());",
          "    assert_eq!(start_table.table[4], StateID::default());",
          "    assert_eq!(start_table.table[5], StateID::default());",
          "    assert_eq!(start_table.table[6], StateID::default());",
          "    assert_eq!(start_table.table[7], StateID::default());"
        ],
        "code": [
          "{",
          "    let mut start_table = StartTable {",
          "        table: vec![StateID::default(); 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::NonWordByte; 256] },",
          "        stride: 4,",
          "        pattern_len: Some(2),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let state_id = StateID::default();",
          "    start_table.set_start(Anchored::No, Start::NonWordByte, state_id);",
          "    assert_eq!(start_table.table[0], state_id);",
          "    assert_eq!(start_table.table[1], StateID::default());",
          "    assert_eq!(start_table.table[2], StateID::default());",
          "    assert_eq!(start_table.table[3], StateID::default());",
          "    assert_eq!(start_table.table[4], StateID::default());",
          "    assert_eq!(start_table.table[5], StateID::default());",
          "    assert_eq!(start_table.table[6], StateID::default());",
          "    assert_eq!(start_table.table[7], StateID::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut start_table = StartTable {",
          "        table: vec![StateID::default(); 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::WordByte; 256] },",
          "        stride: 4,",
          "        pattern_len: Some(2),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let state_id = StateID::default();",
          "    start_table.set_start(Anchored::No, Start::WordByte, state_id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start_table.table[Start::WordByte.as_usize()], state_id);",
          "    assert_eq!(start_table.table[Start::NonWordByte.as_usize()], StateID::default());",
          "    assert_eq!(start_table.table[Start::Text.as_usize()], StateID::default());",
          "    assert_eq!(start_table.table[Start::LineLF.as_usize()], StateID::default());",
          "    assert_eq!(start_table.table[Start::LineCR.as_usize()], StateID::default());",
          "    assert_eq!(start_table.table[Start::CustomLineTerminator.as_usize()], StateID::default());",
          "    assert_eq!(start_table.pattern_len.unwrap(), 2);"
        ],
        "code": [
          "{",
          "    let mut start_table = StartTable {",
          "        table: vec![StateID::default(); 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::WordByte; 256] },",
          "        stride: 4,",
          "        pattern_len: Some(2),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let state_id = StateID::default();",
          "    start_table.set_start(Anchored::No, Start::WordByte, state_id);",
          "    assert_eq!(start_table.table[Start::WordByte.as_usize()], state_id);",
          "    assert_eq!(start_table.table[Start::NonWordByte.as_usize()], StateID::default());",
          "    assert_eq!(start_table.table[Start::Text.as_usize()], StateID::default());",
          "    assert_eq!(start_table.table[Start::LineLF.as_usize()], StateID::default());",
          "    assert_eq!(start_table.table[Start::LineCR.as_usize()], StateID::default());",
          "    assert_eq!(start_table.table[Start::CustomLineTerminator.as_usize()], StateID::default());",
          "    assert_eq!(start_table.pattern_len.unwrap(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut start_table = StartTable {",
          "        table: vec![StateID::default(); 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::Text; 256] },",
          "        stride: 4,",
          "        pattern_len: Some(2),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let state_id = StateID::default();",
          "    start_table.set_start(Anchored::No, Start::Text, state_id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start_table.table[0], state_id);",
          "    assert_eq!(start_table.table[1], StateID::default());",
          "    assert_eq!(start_table.table[2], StateID::default());",
          "    assert_eq!(start_table.table[3], StateID::default());",
          "    assert_eq!(start_table.table[4], StateID::default());",
          "    assert_eq!(start_table.table[5], StateID::default());",
          "    assert_eq!(start_table.table[6], StateID::default());",
          "    assert_eq!(start_table.table[7], StateID::default());"
        ],
        "code": [
          "{",
          "    let mut start_table = StartTable {",
          "        table: vec![StateID::default(); 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::Text; 256] },",
          "        stride: 4,",
          "        pattern_len: Some(2),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let state_id = StateID::default();",
          "    start_table.set_start(Anchored::No, Start::Text, state_id);",
          "    assert_eq!(start_table.table[0], state_id);",
          "    assert_eq!(start_table.table[1], StateID::default());",
          "    assert_eq!(start_table.table[2], StateID::default());",
          "    assert_eq!(start_table.table[3], StateID::default());",
          "    assert_eq!(start_table.table[4], StateID::default());",
          "    assert_eq!(start_table.table[5], StateID::default());",
          "    assert_eq!(start_table.table[6], StateID::default());",
          "    assert_eq!(start_table.table[7], StateID::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut start_table = StartTable {",
          "        table: vec![StateID::default(); 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::NonWordByte; 256] },",
          "        stride: 4,",
          "        pattern_len: None,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let state_id = StateID::default();",
          "    start_table.set_start(Anchored::No, Start::NonWordByte, state_id);",
          "}"
        ],
        "oracle": [
          "    let mut start_table = StartTable { table: vec![StateID::default(); 8], kind: StartKind::Both, start_map: StartByteMap { map: [Start::NonWordByte; 256] }, stride: 4, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None };",
          "    let state_id = StateID::default();",
          "    start_table.set_start(Anchored::No, Start::NonWordByte, state_id);",
          "    assert!(start_table.table[0] == state_id);",
          "    assert!(start_table.table[1] == StateID::default());",
          "    assert!(start_table.table[2] == StateID::default());",
          "    assert!(start_table.table[3] == StateID::default());",
          "    assert!(start_table.table[4] == StateID::default());",
          "    assert!(start_table.table[5] == StateID::default());",
          "    assert!(start_table.table[6] == StateID::default());",
          "    assert!(start_table.table[7] == StateID::default());"
        ],
        "code": [
          "{",
          "    let mut start_table = StartTable {",
          "        table: vec![StateID::default(); 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::NonWordByte; 256] },",
          "        stride: 4,",
          "        pattern_len: None,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let state_id = StateID::default();",
          "    start_table.set_start(Anchored::No, Start::NonWordByte, state_id);",
          "    let mut start_table = StartTable { table: vec![StateID::default(); 8], kind: StartKind::Both, start_map: StartByteMap { map: [Start::NonWordByte; 256] }, stride: 4, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None };",
          "    let state_id = StateID::default();",
          "    start_table.set_start(Anchored::No, Start::NonWordByte, state_id);",
          "    assert!(start_table.table[0] == state_id);",
          "    assert!(start_table.table[1] == StateID::default());",
          "    assert!(start_table.table[2] == StateID::default());",
          "    assert!(start_table.table[3] == StateID::default());",
          "    assert!(start_table.table[4] == StateID::default());",
          "    assert!(start_table.table[5] == StateID::default());",
          "    assert!(start_table.table[6] == StateID::default());",
          "    assert!(start_table.table[7] == StateID::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]