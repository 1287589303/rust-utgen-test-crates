[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let stride = 1;",
          "    let pattern_len = Some(1);",
          "    let mut start_table = StartTable {",
          "        table: vec![StateID(0); 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::NonWordByte; 256] },",
          "        stride,",
          "        pattern_len,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let anchored = Anchored::Pattern(PatternID(0));",
          "    let start = Start::from_usize(0).unwrap();",
          "    let id = StateID(1);",
          "    start_table.set_start(anchored, start, id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start_table.table[0], StateID(1));",
          "    assert_eq!(start_table.table[1], StateID(0));",
          "    assert_eq!(start_table.table[2], StateID(0));",
          "    assert_eq!(start_table.table[3], StateID(0));",
          "    assert_eq!(start_table.table[4], StateID(0));",
          "    assert_eq!(start_table.table[5], StateID(0));",
          "    assert_eq!(start_table.table[6], StateID(0));",
          "    assert_eq!(start_table.table[7], StateID(0));"
        ],
        "code": [
          "{",
          "    let stride = 1;",
          "    let pattern_len = Some(1);",
          "    let mut start_table = StartTable {",
          "        table: vec![StateID(0); 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::NonWordByte; 256] },",
          "        stride,",
          "        pattern_len,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let anchored = Anchored::Pattern(PatternID(0));",
          "    let start = Start::from_usize(0).unwrap();",
          "    let id = StateID(1);",
          "    start_table.set_start(anchored, start, id);",
          "    assert_eq!(start_table.table[0], StateID(1));",
          "    assert_eq!(start_table.table[1], StateID(0));",
          "    assert_eq!(start_table.table[2], StateID(0));",
          "    assert_eq!(start_table.table[3], StateID(0));",
          "    assert_eq!(start_table.table[4], StateID(0));",
          "    assert_eq!(start_table.table[5], StateID(0));",
          "    assert_eq!(start_table.table[6], StateID(0));",
          "    assert_eq!(start_table.table[7], StateID(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let stride = 1;",
          "    let pattern_len = Some(2);",
          "    let mut start_table = StartTable {",
          "        table: vec![StateID(0); 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::NonWordByte; 256] },",
          "        stride,",
          "        pattern_len,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let anchored = Anchored::Pattern(PatternID(1));",
          "    let start = Start::from_usize(2).unwrap();",
          "    let id = StateID(2);",
          "    start_table.set_start(anchored, start, id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start_table.table[2], StateID(0));",
          "    assert_eq!(start_table.table[3], StateID(0));",
          "    assert_eq!(start_table.table[4], StateID(0));",
          "    assert_eq!(start_table.table[5], StateID(0));",
          "    assert_eq!(start_table.table[6], StateID(0));",
          "    assert_eq!(start_table.table[7], StateID(0));",
          "    assert_eq!(start_table.table[8], id);",
          "    assert!(start_table.table.len() >= 9);",
          "    assert!(start_table.pattern_len.unwrap() > 1);",
          "    assert!(start_table.stride == 1);"
        ],
        "code": [
          "{",
          "    let stride = 1;",
          "    let pattern_len = Some(2);",
          "    let mut start_table = StartTable {",
          "        table: vec![StateID(0); 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::NonWordByte; 256] },",
          "        stride,",
          "        pattern_len,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let anchored = Anchored::Pattern(PatternID(1));",
          "    let start = Start::from_usize(2).unwrap();",
          "    let id = StateID(2);",
          "    start_table.set_start(anchored, start, id);",
          "    assert_eq!(start_table.table[2], StateID(0));",
          "    assert_eq!(start_table.table[3], StateID(0));",
          "    assert_eq!(start_table.table[4], StateID(0));",
          "    assert_eq!(start_table.table[5], StateID(0));",
          "    assert_eq!(start_table.table[6], StateID(0));",
          "    assert_eq!(start_table.table[7], StateID(0));",
          "    assert_eq!(start_table.table[8], id);",
          "    assert!(start_table.table.len() >= 9);",
          "    assert!(start_table.pattern_len.unwrap() > 1);",
          "    assert!(start_table.stride == 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let stride = 2;",
          "    let pattern_len = Some(2);",
          "    let mut start_table = StartTable {",
          "        table: vec![StateID(0); 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::NonWordByte; 256] },",
          "        stride,",
          "        pattern_len,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let anchored = Anchored::Pattern(PatternID(1));",
          "    let start = Start::from_usize(3).unwrap();",
          "    let id = StateID(3);",
          "    start_table.set_start(anchored, start, id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start_table.table[3], StateID(3));",
          "    assert_eq!(start_table.table[4], StateID(0));",
          "    assert_eq!(start_table.table[5], StateID(0));",
          "    assert_eq!(start_table.table[6], StateID(0));",
          "    assert_eq!(start_table.table[7], StateID(0));"
        ],
        "code": [
          "{",
          "    let stride = 2;",
          "    let pattern_len = Some(2);",
          "    let mut start_table = StartTable {",
          "        table: vec![StateID(0); 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::NonWordByte; 256] },",
          "        stride,",
          "        pattern_len,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let anchored = Anchored::Pattern(PatternID(1));",
          "    let start = Start::from_usize(3).unwrap();",
          "    let id = StateID(3);",
          "    start_table.set_start(anchored, start, id);",
          "    assert_eq!(start_table.table[3], StateID(3));",
          "    assert_eq!(start_table.table[4], StateID(0));",
          "    assert_eq!(start_table.table[5], StateID(0));",
          "    assert_eq!(start_table.table[6], StateID(0));",
          "    assert_eq!(start_table.table[7], StateID(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let stride = 2;",
          "    let pattern_len = Some(3);",
          "    let mut start_table = StartTable {",
          "        table: vec![StateID(0); 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::NonWordByte; 256] },",
          "        stride,",
          "        pattern_len,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let anchored = Anchored::Pattern(PatternID(2));",
          "    let start = Start::from_usize(4).unwrap();",
          "    let id = StateID(4);",
          "    start_table.set_start(anchored, start, id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start_table.table[6], StateID(4));",
          "    assert!(start_table.table.len() >= 8);",
          "    assert!(pattern_len.is_some());",
          "    assert_eq!(start_table.stride, 2);"
        ],
        "code": [
          "{",
          "    let stride = 2;",
          "    let pattern_len = Some(3);",
          "    let mut start_table = StartTable {",
          "        table: vec![StateID(0); 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::NonWordByte; 256] },",
          "        stride,",
          "        pattern_len,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let anchored = Anchored::Pattern(PatternID(2));",
          "    let start = Start::from_usize(4).unwrap();",
          "    let id = StateID(4);",
          "    start_table.set_start(anchored, start, id);",
          "    assert_eq!(start_table.table[6], StateID(4));",
          "    assert!(start_table.table.len() >= 8);",
          "    assert!(pattern_len.is_some());",
          "    assert_eq!(start_table.stride, 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]