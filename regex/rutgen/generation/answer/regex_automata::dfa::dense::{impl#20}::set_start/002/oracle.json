[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_len = Some(1); // len > 0",
          "    let stride = 2;",
          "    let mut start_table = StartTable {",
          "        table: vec![StateID(0); 8 + stride * pattern_len.unwrap()],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::NonWordByte; 256] },",
          "        stride,",
          "        pattern_len,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let anchored = Anchored::Pattern(PatternID(SmallIndex(1))); // pid == len",
          "",
          "    start_table.set_start(anchored, Start::Text, StateID(SmallIndex(2)));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start_table.pattern_len, Some(1));",
          "    assert!(start_table.table.len() >= 8 + stride * pattern_len.unwrap());",
          "    assert!(matches!(start_table.kind, StartKind::Both));",
          "    assert_eq!(start_table.start_map.map[0], Start::NonWordByte);",
          "    assert!(start_table.table[6] == StateID(SmallIndex(2)));",
          "    panic!(\"invalid pattern ID {:?}\", 1);"
        ],
        "code": [
          "{",
          "    let pattern_len = Some(1); // len > 0",
          "    let stride = 2;",
          "    let mut start_table = StartTable {",
          "        table: vec![StateID(0); 8 + stride * pattern_len.unwrap()],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::NonWordByte; 256] },",
          "        stride,",
          "        pattern_len,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let anchored = Anchored::Pattern(PatternID(SmallIndex(1))); // pid == len",
          "",
          "    start_table.set_start(anchored, Start::Text, StateID(SmallIndex(2)));",
          "    assert_eq!(start_table.pattern_len, Some(1));",
          "    assert!(start_table.table.len() >= 8 + stride * pattern_len.unwrap());",
          "    assert!(matches!(start_table.kind, StartKind::Both));",
          "    assert_eq!(start_table.start_map.map[0], Start::NonWordByte);",
          "    assert!(start_table.table[6] == StateID(SmallIndex(2)));",
          "    panic!(\"invalid pattern ID {:?}\", 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let pattern_len = Some(1); // len > 0",
          "    let stride = 2;",
          "    let mut start_table = StartTable {",
          "        table: vec![StateID(0); 8 + stride * pattern_len.unwrap()],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::NonWordByte; 256] },",
          "        stride,",
          "        pattern_len,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let anchored = Anchored::Pattern(PatternID(SmallIndex(1))); // pid == len",
          "",
          "    start_table.set_start(anchored, Start::Text, StateID(SmallIndex(2)));",
          "}"
        ],
        "oracle": [
          "    let pattern_len = Some(1);",
          "    let stride = 2;",
          "    let mut start_table = StartTable {",
          "    table: vec![StateID(0); 8 + stride * pattern_len.unwrap()],",
          "    kind: StartKind::Both,",
          "    start_map: StartByteMap { map: [Start::NonWordByte; 256] },",
          "    stride,",
          "    pattern_len,",
          "    universal_start_unanchored: None,",
          "    universal_start_anchored: None,",
          "    };",
          "    let anchored = Anchored::Pattern(PatternID(SmallIndex(1)));",
          "    start_table.set_start(anchored, Start::Text, StateID(SmallIndex(2)));"
        ],
        "code": [
          "{",
          "    let pattern_len = Some(1); // len > 0",
          "    let stride = 2;",
          "    let mut start_table = StartTable {",
          "        table: vec![StateID(0); 8 + stride * pattern_len.unwrap()],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::NonWordByte; 256] },",
          "        stride,",
          "        pattern_len,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let anchored = Anchored::Pattern(PatternID(SmallIndex(1))); // pid == len",
          "",
          "    start_table.set_start(anchored, Start::Text, StateID(SmallIndex(2)));",
          "    let pattern_len = Some(1);",
          "    let stride = 2;",
          "    let mut start_table = StartTable {",
          "    table: vec![StateID(0); 8 + stride * pattern_len.unwrap()],",
          "    kind: StartKind::Both,",
          "    start_map: StartByteMap { map: [Start::NonWordByte; 256] },",
          "    stride,",
          "    pattern_len,",
          "    universal_start_unanchored: None,",
          "    universal_start_anchored: None,",
          "    };",
          "    let anchored = Anchored::Pattern(PatternID(SmallIndex(1)));",
          "    start_table.set_start(anchored, Start::Text, StateID(SmallIndex(2)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]