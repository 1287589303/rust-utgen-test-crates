[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::Start);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.len(), 1);",
          "    assert!(look_set.contains(Look::Start));",
          "    assert!(!look_set.is_empty());",
          "    assert!(look_set.contains_anchor());",
          "    assert!(!look_set.contains_word());",
          "    assert!(!look_set.contains_word_unicode());",
          "    assert!(!look_set.contains_word_ascii());"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::Start);",
          "    assert_eq!(look_set.len(), 1);",
          "    assert!(look_set.contains(Look::Start));",
          "    assert!(!look_set.is_empty());",
          "    assert!(look_set.contains_anchor());",
          "    assert!(!look_set.contains_word());",
          "    assert!(!look_set.contains_word_unicode());",
          "    assert!(!look_set.contains_word_ascii());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::End);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.bits, Look::End as u32);",
          "    assert!(look_set.contains(Look::End));",
          "    assert!(!look_set.is_empty());",
          "    assert_eq!(look_set.len(), 1);"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::End);",
          "    assert_eq!(look_set.bits, Look::End as u32);",
          "    assert!(look_set.contains(Look::End));",
          "    assert!(!look_set.is_empty());",
          "    assert_eq!(look_set.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::StartLF);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.contains(Look::StartLF), true);"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::StartLF);",
          "    assert_eq!(look_set.contains(Look::StartLF), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::EndLF);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.bits, Look::EndLF.as_repr());",
          "    assert!(look_set.contains(Look::EndLF));",
          "    assert!(look_set.len() > 0);",
          "    assert!(!look_set.is_empty());",
          "    assert!(!look_set.contains_anchor());",
          "    assert!(!look_set.contains_word());",
          "    assert!(!look_set.contains_word_unicode());",
          "    assert!(!look_set.contains_word_ascii());"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::EndLF);",
          "    assert_eq!(look_set.bits, Look::EndLF.as_repr());",
          "    assert!(look_set.contains(Look::EndLF));",
          "    assert!(look_set.len() > 0);",
          "    assert!(!look_set.is_empty());",
          "    assert!(!look_set.contains_anchor());",
          "    assert!(!look_set.contains_word());",
          "    assert!(!look_set.contains_word_unicode());",
          "    assert!(!look_set.contains_word_ascii());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordAscii);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.bits, Look::WordAscii.as_repr());",
          "    assert!(look_set.contains(Look::WordAscii));",
          "    assert!(!look_set.is_empty());"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordAscii);",
          "    assert_eq!(look_set.bits, Look::WordAscii.as_repr());",
          "    assert!(look_set.contains(Look::WordAscii));",
          "    assert!(!look_set.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordUnicode);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.contains(Look::WordUnicode), true);",
          "    assert_eq!(look_set.len(), 1);",
          "    assert_eq!(look_set.is_empty(), false);",
          "    assert_eq!(look_set.bits, Look::WordUnicode as u32);",
          "    assert_eq!(look_set.contains_word_unicode(), true);"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordUnicode);",
          "    assert_eq!(look_set.contains(Look::WordUnicode), true);",
          "    assert_eq!(look_set.len(), 1);",
          "    assert_eq!(look_set.is_empty(), false);",
          "    assert_eq!(look_set.bits, Look::WordUnicode as u32);",
          "    assert_eq!(look_set.contains_word_unicode(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordStartAscii);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.bits, Look::WordStartAscii as u32);",
          "    assert!(!look_set.is_empty());",
          "    assert!(look_set.contains(Look::WordStartAscii));"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordStartAscii);",
          "    assert_eq!(look_set.bits, Look::WordStartAscii as u32);",
          "    assert!(!look_set.is_empty());",
          "    assert!(look_set.contains(Look::WordStartAscii));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordEndAscii);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.len(), 1);",
          "    assert!(look_set.contains(Look::WordEndAscii));",
          "    assert!(!look_set.is_empty());",
          "    assert!(look_set.contains_word_ascii());"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordEndAscii);",
          "    assert_eq!(look_set.len(), 1);",
          "    assert!(look_set.contains(Look::WordEndAscii));",
          "    assert!(!look_set.is_empty());",
          "    assert!(look_set.contains_word_ascii());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordStartUnicode);",
          "}"
        ],
        "oracle": [
          "    assert!(look_set.contains(Look::WordStartUnicode));",
          "    assert!(!look_set.is_empty());",
          "    assert_eq!(look_set.len(), 1);",
          "    look_set.set_insert(Look::WordAscii);",
          "    assert!(look_set.contains(Look::WordAscii));",
          "    assert_eq!(look_set.len(), 2);",
          "    look_set.set_remove(Look::WordStartUnicode);",
          "    assert!(!look_set.contains(Look::WordStartUnicode));",
          "    assert_eq!(look_set.len(), 1);",
          "    look_set.set_remove(Look::WordAscii);",
          "    assert!(look_set.is_empty());",
          "    assert_eq!(look_set.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordStartUnicode);",
          "    assert!(look_set.contains(Look::WordStartUnicode));",
          "    assert!(!look_set.is_empty());",
          "    assert_eq!(look_set.len(), 1);",
          "    look_set.set_insert(Look::WordAscii);",
          "    assert!(look_set.contains(Look::WordAscii));",
          "    assert_eq!(look_set.len(), 2);",
          "    look_set.set_remove(Look::WordStartUnicode);",
          "    assert!(!look_set.contains(Look::WordStartUnicode));",
          "    assert_eq!(look_set.len(), 1);",
          "    look_set.set_remove(Look::WordAscii);",
          "    assert!(look_set.is_empty());",
          "    assert_eq!(look_set.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordEndUnicode);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.len(), 1);",
          "    assert!(look_set.contains(Look::WordEndUnicode));",
          "    assert!(!look_set.contains(Look::WordStartUnicode));",
          "    assert!(look_set.contains_anchor());",
          "    assert!(!look_set.contains_word());",
          "    assert!(!look_set.contains_word_ascii());",
          "    assert!(look_set.contains_word_unicode());"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordEndUnicode);",
          "    assert_eq!(look_set.len(), 1);",
          "    assert!(look_set.contains(Look::WordEndUnicode));",
          "    assert!(!look_set.contains(Look::WordStartUnicode));",
          "    assert!(look_set.contains_anchor());",
          "    assert!(!look_set.contains_word());",
          "    assert!(!look_set.contains_word_ascii());",
          "    assert!(look_set.contains_word_unicode());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]