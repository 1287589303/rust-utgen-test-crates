[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut writer = Writer { wtr: String::new() };",
          "    let ast = Ast::ClassUnicode(Box::new(ClassUnicode {",
          "        span: Span::default(),",
          "        negated: false,",
          "        kind: ClassUnicodeKind::OneLetter('a'),",
          "    }));",
          "    let _ = writer.visit_post(&ast);",
          "}"
        ],
        "oracle": [
          "    let mut writer = Writer { wtr: String::new() };",
          "    let ast = Ast::ClassUnicode(Box::new(ClassUnicode { span: Span::default(), negated: false, kind: ClassUnicodeKind::OneLetter('a') }));",
          "    let result = writer.visit_post(&ast);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(writer.wtr, r\"\\pa\");"
        ],
        "code": [
          "{",
          "    let mut writer = Writer { wtr: String::new() };",
          "    let ast = Ast::ClassUnicode(Box::new(ClassUnicode {",
          "        span: Span::default(),",
          "        negated: false,",
          "        kind: ClassUnicodeKind::OneLetter('a'),",
          "    }));",
          "    let _ = writer.visit_post(&ast);",
          "    let mut writer = Writer { wtr: String::new() };",
          "    let ast = Ast::ClassUnicode(Box::new(ClassUnicode { span: Span::default(), negated: false, kind: ClassUnicodeKind::OneLetter('a') }));",
          "    let result = writer.visit_post(&ast);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(writer.wtr, r\"\\pa\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut writer = Writer { wtr: String::new() };",
          "    let ast = Ast::ClassUnicode(Box::new(ClassUnicode {",
          "        span: Span::default(),",
          "        negated: true,",
          "        kind: ClassUnicodeKind::Named(\"Greek\".to_string()),",
          "    }));",
          "    let _ = writer.visit_post(&ast);",
          "}"
        ],
        "oracle": [
          "    let mut writer = Writer { wtr: String::new() };",
          "    let ast = Ast::ClassUnicode(Box::new(ClassUnicode {",
          "    span: Span::default(),",
          "    negated: true,",
          "    kind: ClassUnicodeKind::Named(\"Greek\".to_string()),",
          "    }));",
          "    assert_eq!(writer.visit_post(&ast), Ok(()));",
          "    assert!(writer.wtr.contains(r\"\\P{Greek}\"));"
        ],
        "code": [
          "{",
          "    let mut writer = Writer { wtr: String::new() };",
          "    let ast = Ast::ClassUnicode(Box::new(ClassUnicode {",
          "        span: Span::default(),",
          "        negated: true,",
          "        kind: ClassUnicodeKind::Named(\"Greek\".to_string()),",
          "    }));",
          "    let _ = writer.visit_post(&ast);",
          "    let mut writer = Writer { wtr: String::new() };",
          "    let ast = Ast::ClassUnicode(Box::new(ClassUnicode {",
          "    span: Span::default(),",
          "    negated: true,",
          "    kind: ClassUnicodeKind::Named(\"Greek\".to_string()),",
          "    }));",
          "    assert_eq!(writer.visit_post(&ast), Ok(()));",
          "    assert!(writer.wtr.contains(r\"\\P{Greek}\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]