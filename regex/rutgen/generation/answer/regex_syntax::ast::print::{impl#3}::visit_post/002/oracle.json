[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alternation_ast = ast::Alternation(Box::new(ast::Concat(Box::new(ast::Empty(Box::new(Span::default()))))));",
          "    let mut writer = Writer { wtr: String::new() };",
          "    writer.visit_post(&Ast::Alternation(Box::new(alternation_ast))).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(writer.wtr.is_empty());",
          "    assert_eq!(writer.visit_post(&Ast::Alternation(Box::new(ast::Concat(Box::new(ast::Empty(Box::new(Span::default())))))).unwrap(), Ok(()));",
          "    assert!(matches!(writer.visit_post(&Ast::Alternation(Box::new(ast::Concat(Box::new(ast::Empty(Box::new(Span::default())))))), Ok(())));",
          "    assert!(writer.visit_post(&Ast::Alternation(Box::new(ast::Concat(Box::new(ast::Empty(Box::new(Span::default())))))).unwrap().is_ok());"
        ],
        "code": [
          "{",
          "    let alternation_ast = ast::Alternation(Box::new(ast::Concat(Box::new(ast::Empty(Box::new(Span::default()))))));",
          "    let mut writer = Writer { wtr: String::new() };",
          "    writer.visit_post(&Ast::Alternation(Box::new(alternation_ast))).unwrap();",
          "    assert!(writer.wtr.is_empty());",
          "    assert_eq!(writer.visit_post(&Ast::Alternation(Box::new(ast::Concat(Box::new(ast::Empty(Box::new(Span::default())))))).unwrap(), Ok(()));",
          "    assert!(matches!(writer.visit_post(&Ast::Alternation(Box::new(ast::Concat(Box::new(ast::Empty(Box::new(Span::default())))))), Ok(())));",
          "    assert!(writer.visit_post(&Ast::Alternation(Box::new(ast::Concat(Box::new(ast::Empty(Box::new(Span::default())))))).unwrap().is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alternation_ast = ast::Alternation(Box::new(ast::Empty(Box::new(Span::default()))));",
          "    let mut writer = Writer { wtr: String::new() };",
          "    writer.visit_post(&Ast::Alternation(Box::new(alternation_ast))).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.visit_post(&Ast::Alternation(Box::new(ast::Empty(Box::new(Span::default()))))), Ok(()));"
        ],
        "code": [
          "{",
          "    let alternation_ast = ast::Alternation(Box::new(ast::Empty(Box::new(Span::default()))));",
          "    let mut writer = Writer { wtr: String::new() };",
          "    writer.visit_post(&Ast::Alternation(Box::new(alternation_ast))).unwrap();",
          "    assert_eq!(writer.visit_post(&Ast::Alternation(Box::new(ast::Empty(Box::new(Span::default()))))), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let concat_ast = ast::Concat(Box::new(ast::Literal(Box::new(ast::Literal { ",
          "        span: Span::default(), ",
          "        kind: ast::LiteralKind::Verbatim, ",
          "        c: 'a' ",
          "    }))));",
          "    let alternation_ast = ast::Alternation(Box::new(concat_ast));",
          "    let mut writer = Writer { wtr: String::new() };",
          "    writer.visit_post(&Ast::Alternation(Box::new(alternation_ast))).unwrap();",
          "}"
        ],
        "oracle": [
          "    writer.visit_post(&Ast::Alternation(Box::new(concat_ast))).unwrap();",
          "    assert_eq!(writer.wtr, \"\");"
        ],
        "code": [
          "{",
          "    let concat_ast = ast::Concat(Box::new(ast::Literal(Box::new(ast::Literal { ",
          "        span: Span::default(), ",
          "        kind: ast::LiteralKind::Verbatim, ",
          "        c: 'a' ",
          "    }))));",
          "    let alternation_ast = ast::Alternation(Box::new(concat_ast));",
          "    let mut writer = Writer { wtr: String::new() };",
          "    writer.visit_post(&Ast::Alternation(Box::new(alternation_ast))).unwrap();",
          "    writer.visit_post(&Ast::Alternation(Box::new(concat_ast))).unwrap();",
          "    assert_eq!(writer.wtr, \"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]