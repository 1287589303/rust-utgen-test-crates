[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "    ",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "",
          "    let class_set_item = ast::ClassSetItem::Bracketed(Box::new(ast::ClassBracketed {",
          "        span: Span::new(0, 5),",
          "        negated: false,",
          "        kind: ast::ClassSet::Union(vec![ast::ClassSetItem::Literal(Box::new(ast::Literal {",
          "            span: Span::new(1, 2),",
          "            kind: ast::LiteralKind::Verbatim,",
          "            c: 'a',",
          "        }))]),",
          "    }));",
          "",
          "    let class_bracketed = ast::ClassBracketed {",
          "        span: Span::new(0, 6),",
          "        negated: false,",
          "        kind: ast::ClassSet::Union(vec![class_set_item]),",
          "    };",
          "",
          "    let ast = ast::Ast::ClassBracketed(Box::new(class_bracketed));",
          "",
          "    writer.visit_post(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    writer.visit_post(&ast); // Validate successful visit of ClassBracketed",
          "    assert_eq!(writer.output, \"]\"); // Expect correct closing bracket in output",
          "    writer.output.clear(); // Reset output for next assertion",
          "    let class_bracketed_negated = ast::ClassBracketed {",
          "    span: Span::new(0, 6),",
          "    negated: true,",
          "    kind: ast::ClassSet::Union(vec![class_set_item]),",
          "    };",
          "    let ast_negated = ast::Ast::ClassBracketed(Box::new(class_bracketed_negated));",
          "    writer.visit_post(&ast_negated).unwrap();",
          "    assert_eq!(writer.output, \"]\"); // Expect correct closing bracket in output for negated case",
          "    writer.output.clear(); // Reset output for next assertion",
          "    let empty_class_bracketed = ast::ClassBracketed {",
          "    span: Span::new(0, 2),",
          "    negated: false,",
          "    kind: ast::ClassSet::Union(vec![]),",
          "    };",
          "    let ast_empty = ast::Ast::ClassBracketed(Box::new(empty_class_bracketed));",
          "    writer.visit_post(&ast_empty).unwrap();",
          "    assert_eq!(writer.output, \"]\"); // Expect correct closing bracket in output for empty class set",
          "    writer.output.clear(); // Reset output for next assertion"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "    ",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "",
          "    let class_set_item = ast::ClassSetItem::Bracketed(Box::new(ast::ClassBracketed {",
          "        span: Span::new(0, 5),",
          "        negated: false,",
          "        kind: ast::ClassSet::Union(vec![ast::ClassSetItem::Literal(Box::new(ast::Literal {",
          "            span: Span::new(1, 2),",
          "            kind: ast::LiteralKind::Verbatim,",
          "            c: 'a',",
          "        }))]),",
          "    }));",
          "",
          "    let class_bracketed = ast::ClassBracketed {",
          "        span: Span::new(0, 6),",
          "        negated: false,",
          "        kind: ast::ClassSet::Union(vec![class_set_item]),",
          "    };",
          "",
          "    let ast = ast::Ast::ClassBracketed(Box::new(class_bracketed));",
          "",
          "    writer.visit_post(&ast).unwrap();",
          "    writer.visit_post(&ast); // Validate successful visit of ClassBracketed",
          "    assert_eq!(writer.output, \"]\"); // Expect correct closing bracket in output",
          "    writer.output.clear(); // Reset output for next assertion",
          "    let class_bracketed_negated = ast::ClassBracketed {",
          "    span: Span::new(0, 6),",
          "    negated: true,",
          "    kind: ast::ClassSet::Union(vec![class_set_item]),",
          "    };",
          "    let ast_negated = ast::Ast::ClassBracketed(Box::new(class_bracketed_negated));",
          "    writer.visit_post(&ast_negated).unwrap();",
          "    assert_eq!(writer.output, \"]\"); // Expect correct closing bracket in output for negated case",
          "    writer.output.clear(); // Reset output for next assertion",
          "    let empty_class_bracketed = ast::ClassBracketed {",
          "    span: Span::new(0, 2),",
          "    negated: false,",
          "    kind: ast::ClassSet::Union(vec![]),",
          "    };",
          "    let ast_empty = ast::Ast::ClassBracketed(Box::new(empty_class_bracketed));",
          "    writer.visit_post(&ast_empty).unwrap();",
          "    assert_eq!(writer.output, \"]\"); // Expect correct closing bracket in output for empty class set",
          "    writer.output.clear(); // Reset output for next assertion",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]