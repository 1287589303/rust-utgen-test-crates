[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().onepass(true);",
          "    config.get_onepass();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_onepass(), true);",
          "    ",
          "    let config = Config::new().onepass(false);",
          "    assert_eq!(config.get_onepass(), false);",
          "    ",
          "    let config = Config::new();",
          "    assert_eq!(config.get_onepass(), true); // assuming feature \"dfa-onepass\" is enabled",
          "    ",
          "    #[cfg(not(feature = \"dfa-onepass\"))]",
          "    assert_eq!(config.get_onepass(), false);"
        ],
        "code": [
          "{",
          "    let config = Config::new().onepass(true);",
          "    config.get_onepass();",
          "    assert_eq!(config.get_onepass(), true);",
          "    ",
          "    let config = Config::new().onepass(false);",
          "    assert_eq!(config.get_onepass(), false);",
          "    ",
          "    let config = Config::new();",
          "    assert_eq!(config.get_onepass(), true); // assuming feature \"dfa-onepass\" is enabled",
          "    ",
          "    #[cfg(not(feature = \"dfa-onepass\"))]",
          "    assert_eq!(config.get_onepass(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().onepass(false);",
          "    config.get_onepass();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_onepass(), false);",
          "    ",
          "    let config = Config::new().onepass(true);",
          "    assert_eq!(config.get_onepass(), true);",
          "    ",
          "    let config = Config::new();",
          "    assert_eq!(config.get_onepass(), true); // if \"dfa-onepass\" feature is enabled",
          "    ",
          "    #[cfg(not(feature = \"dfa-onepass\"))]",
          "    assert_eq!(config.get_onepass(), false);"
        ],
        "code": [
          "{",
          "    let config = Config::new().onepass(false);",
          "    config.get_onepass();",
          "    assert_eq!(config.get_onepass(), false);",
          "    ",
          "    let config = Config::new().onepass(true);",
          "    assert_eq!(config.get_onepass(), true);",
          "    ",
          "    let config = Config::new();",
          "    assert_eq!(config.get_onepass(), true); // if \"dfa-onepass\" feature is enabled",
          "    ",
          "    #[cfg(not(feature = \"dfa-onepass\"))]",
          "    assert_eq!(config.get_onepass(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new();",
          "    config.get_onepass();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_onepass(), true); // when feature \"dfa-onepass\" is enabled and onepass is not set",
          "    assert_eq!(config.get_onepass(), false); // when feature \"dfa-onepass\" is disabled",
          "    let config_onepass_set = config.onepass(true);",
          "    assert_eq!(config_onepass_set.get_onepass(), true); // when onepass is set to true",
          "    let config_onepass_unset = config.onepass(false);",
          "    assert_eq!(config_onepass_unset.get_onepass(), false); // when onepass is set to false"
        ],
        "code": [
          "{",
          "    let config = Config::new();",
          "    config.get_onepass();",
          "    assert_eq!(config.get_onepass(), true); // when feature \"dfa-onepass\" is enabled and onepass is not set",
          "    assert_eq!(config.get_onepass(), false); // when feature \"dfa-onepass\" is disabled",
          "    let config_onepass_set = config.onepass(true);",
          "    assert_eq!(config_onepass_set.get_onepass(), true); // when onepass is set to true",
          "    let config_onepass_unset = config.onepass(false);",
          "    assert_eq!(config_onepass_unset.get_onepass(), false); // when onepass is set to false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[cfg(feature = \"dfa-onepass\")]"
        ],
        "prefix": [
          "{",
          "    let config = Config::new().onepass(Some(true));",
          "    config.get_onepass();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_onepass(), true);",
          "    #[cfg(not(feature = \"dfa-onepass\"))]",
          "    assert_eq!(config.get_onepass(), false);",
          "    let config = Config::new().onepass(Some(false));",
          "    assert_eq!(config.get_onepass(), false);",
          "    let config = Config::new().onepass(None);",
          "    assert_eq!(config.get_onepass(), true);"
        ],
        "code": [
          "{",
          "    let config = Config::new().onepass(Some(true));",
          "    config.get_onepass();",
          "    assert_eq!(config.get_onepass(), true);",
          "    #[cfg(not(feature = \"dfa-onepass\"))]",
          "    assert_eq!(config.get_onepass(), false);",
          "    let config = Config::new().onepass(Some(false));",
          "    assert_eq!(config.get_onepass(), false);",
          "    let config = Config::new().onepass(None);",
          "    assert_eq!(config.get_onepass(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[cfg(not(feature = \"dfa-onepass\"))]"
        ],
        "prefix": [
          "{",
          "    let config = Config::new().onepass(Some(true));",
          "    config.get_onepass();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_onepass(), false);"
        ],
        "code": [
          "{",
          "    let config = Config::new().onepass(Some(true));",
          "    config.get_onepass();",
          "    assert_eq!(config.get_onepass(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]