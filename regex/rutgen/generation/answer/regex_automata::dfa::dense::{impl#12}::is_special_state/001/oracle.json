[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let max_state_id = StateID(1);",
          "    let special = Special { max: max_state_id.0, quit_id: 0, min_match: 0, max_match: 1, min_accel: 0, max_accel: 1, min_start: 0, max_start: 1 };",
          "    let dfa = DFA {",
          "        tt: TransitionTable { table: vec![], classes: ByteClasses::default(), stride2: 1 },",
          "        st: StartTable { table: vec![], kind: StartKind::both(), start_map: StartByteMap::default(), stride: 1, pattern_len: Some(1), universal_start_unanchored: None, universal_start_anchored: None },",
          "        ms: MatchStates { slices: vec![], pattern_ids: vec![], pattern_len: 1 },",
          "        special,",
          "        accels: Accels { accels: vec![] },",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false },",
          "    };",
          "    let _ = dfa.is_special_state(StateID(0));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.is_special_state(StateID(0)), true);",
          "    assert_eq!(dfa.is_special_state(StateID(1)), false);",
          "    assert_eq!(dfa.is_special_state(StateID(2)), false);"
        ],
        "code": [
          "{",
          "    let max_state_id = StateID(1);",
          "    let special = Special { max: max_state_id.0, quit_id: 0, min_match: 0, max_match: 1, min_accel: 0, max_accel: 1, min_start: 0, max_start: 1 };",
          "    let dfa = DFA {",
          "        tt: TransitionTable { table: vec![], classes: ByteClasses::default(), stride2: 1 },",
          "        st: StartTable { table: vec![], kind: StartKind::both(), start_map: StartByteMap::default(), stride: 1, pattern_len: Some(1), universal_start_unanchored: None, universal_start_anchored: None },",
          "        ms: MatchStates { slices: vec![], pattern_ids: vec![], pattern_len: 1 },",
          "        special,",
          "        accels: Accels { accels: vec![] },",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false },",
          "    };",
          "    let _ = dfa.is_special_state(StateID(0));",
          "    assert_eq!(dfa.is_special_state(StateID(0)), true);",
          "    assert_eq!(dfa.is_special_state(StateID(1)), false);",
          "    assert_eq!(dfa.is_special_state(StateID(2)), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let max_state_id = StateID(5);",
          "    let special = Special { max: max_state_id.0, quit_id: 0, min_match: 0, max_match: 1, min_accel: 0, max_accel: 1, min_start: 0, max_start: 1 };",
          "    let dfa = DFA {",
          "        tt: TransitionTable { table: vec![], classes: ByteClasses::default(), stride2: 1 },",
          "        st: StartTable { table: vec![], kind: StartKind::both(), start_map: StartByteMap::default(), stride: 1, pattern_len: Some(1), universal_start_unanchored: None, universal_start_anchored: None },",
          "        ms: MatchStates { slices: vec![], pattern_ids: vec![], pattern_len: 1 },",
          "        special,",
          "        accels: Accels { accels: vec![] },",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false },",
          "    };",
          "    let _ = dfa.is_special_state(StateID(5));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.is_special_state(StateID(5)), true);",
          "    assert_eq!(dfa.is_special_state(StateID(4)), true);",
          "    assert_eq!(dfa.is_special_state(StateID(0)), true);",
          "    assert_eq!(dfa.is_special_state(StateID(6)), false);",
          "    assert_eq!(dfa.is_special_state(StateID(3)), true);",
          "    assert_eq!(dfa.is_special_state(StateID(2)), true);",
          "    assert_eq!(dfa.is_special_state(StateID(1)), true);"
        ],
        "code": [
          "{",
          "    let max_state_id = StateID(5);",
          "    let special = Special { max: max_state_id.0, quit_id: 0, min_match: 0, max_match: 1, min_accel: 0, max_accel: 1, min_start: 0, max_start: 1 };",
          "    let dfa = DFA {",
          "        tt: TransitionTable { table: vec![], classes: ByteClasses::default(), stride2: 1 },",
          "        st: StartTable { table: vec![], kind: StartKind::both(), start_map: StartByteMap::default(), stride: 1, pattern_len: Some(1), universal_start_unanchored: None, universal_start_anchored: None },",
          "        ms: MatchStates { slices: vec![], pattern_ids: vec![], pattern_len: 1 },",
          "        special,",
          "        accels: Accels { accels: vec![] },",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false },",
          "    };",
          "    let _ = dfa.is_special_state(StateID(5));",
          "    assert_eq!(dfa.is_special_state(StateID(5)), true);",
          "    assert_eq!(dfa.is_special_state(StateID(4)), true);",
          "    assert_eq!(dfa.is_special_state(StateID(0)), true);",
          "    assert_eq!(dfa.is_special_state(StateID(6)), false);",
          "    assert_eq!(dfa.is_special_state(StateID(3)), true);",
          "    assert_eq!(dfa.is_special_state(StateID(2)), true);",
          "    assert_eq!(dfa.is_special_state(StateID(1)), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let max_state_id = StateID(5);",
          "    let special = Special { max: max_state_id.0, quit_id: 0, min_match: 0, max_match: 1, min_accel: 0, max_accel: 1, min_start: 0, max_start: 1 };",
          "    let dfa = DFA {",
          "        tt: TransitionTable { table: vec![], classes: ByteClasses::default(), stride2: 1 },",
          "        st: StartTable { table: vec![], kind: StartKind::both(), start_map: StartByteMap::default(), stride: 1, pattern_len: Some(1), universal_start_unanchored: None, universal_start_anchored: None },",
          "        ms: MatchStates { slices: vec![], pattern_ids: vec![], pattern_len: 1 },",
          "        special,",
          "        accels: Accels { accels: vec![] },",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false },",
          "    };",
          "    let _ = dfa.is_special_state(StateID(6)); // Out-of-bounds low",
          "}"
        ],
        "oracle": [
          "    assert!(!dfa.is_special_state(StateID(6))); // Out-of-bounds high, should return false",
          "    assert!(dfa.is_special_state(StateID(5))); // Should return true, equal to max",
          "    assert!(!dfa.is_special_state(StateID(4))); // Should return true, less than max",
          "    assert!(!dfa.is_special_state(StateID(0))); // Should return false, outside special range",
          "    assert!(dfa.is_special_state(StateID(1))); // Should return false, outside special range"
        ],
        "code": [
          "{",
          "    let max_state_id = StateID(5);",
          "    let special = Special { max: max_state_id.0, quit_id: 0, min_match: 0, max_match: 1, min_accel: 0, max_accel: 1, min_start: 0, max_start: 1 };",
          "    let dfa = DFA {",
          "        tt: TransitionTable { table: vec![], classes: ByteClasses::default(), stride2: 1 },",
          "        st: StartTable { table: vec![], kind: StartKind::both(), start_map: StartByteMap::default(), stride: 1, pattern_len: Some(1), universal_start_unanchored: None, universal_start_anchored: None },",
          "        ms: MatchStates { slices: vec![], pattern_ids: vec![], pattern_len: 1 },",
          "        special,",
          "        accels: Accels { accels: vec![] },",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false },",
          "    };",
          "    let _ = dfa.is_special_state(StateID(6)); // Out-of-bounds low",
          "    assert!(!dfa.is_special_state(StateID(6))); // Out-of-bounds high, should return false",
          "    assert!(dfa.is_special_state(StateID(5))); // Should return true, equal to max",
          "    assert!(!dfa.is_special_state(StateID(4))); // Should return true, less than max",
          "    assert!(!dfa.is_special_state(StateID(0))); // Should return false, outside special range",
          "    assert!(dfa.is_special_state(StateID(1))); // Should return false, outside special range",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let max_state_id = StateID(5);",
          "    let special = Special { max: max_state_id.0, quit_id: 0, min_match: 0, max_match: 1, min_accel: 0, max_accel: 1, min_start: 0, max_start: 1 };",
          "    let dfa = DFA {",
          "        tt: TransitionTable { table: vec![], classes: ByteClasses::default(), stride2: 1 },",
          "        st: StartTable { table: vec![], kind: StartKind::both(), start_map: StartByteMap::default(), stride: 1, pattern_len: Some(1), universal_start_unanchored: None, universal_start_anchored: None },",
          "        ms: MatchStates { slices: vec![], pattern_ids: vec![], pattern_len: 1 },",
          "        special,",
          "        accels: Accels { accels: vec![] },",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false },",
          "    };",
          "    let _ = dfa.is_special_state(StateID(7)); // Out-of-bounds high",
          "}"
        ],
        "oracle": [
          "    plaintext",
          "    assert_eq!(dfa.is_special_state(StateID(5)), true); // in-bounds case",
          "    assert_eq!(dfa.is_special_state(StateID(4)), true); // in-bounds case",
          "    assert_eq!(dfa.is_special_state(StateID(6)), false); // out-of-bounds high",
          "    assert_eq!(dfa.is_special_state(StateID(0)), false); // lower boundary"
        ],
        "code": [
          "{",
          "    let max_state_id = StateID(5);",
          "    let special = Special { max: max_state_id.0, quit_id: 0, min_match: 0, max_match: 1, min_accel: 0, max_accel: 1, min_start: 0, max_start: 1 };",
          "    let dfa = DFA {",
          "        tt: TransitionTable { table: vec![], classes: ByteClasses::default(), stride2: 1 },",
          "        st: StartTable { table: vec![], kind: StartKind::both(), start_map: StartByteMap::default(), stride: 1, pattern_len: Some(1), universal_start_unanchored: None, universal_start_anchored: None },",
          "        ms: MatchStates { slices: vec![], pattern_ids: vec![], pattern_len: 1 },",
          "        special,",
          "        accels: Accels { accels: vec![] },",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false },",
          "    };",
          "    let _ = dfa.is_special_state(StateID(7)); // Out-of-bounds high",
          "    plaintext",
          "    assert_eq!(dfa.is_special_state(StateID(5)), true); // in-bounds case",
          "    assert_eq!(dfa.is_special_state(StateID(4)), true); // in-bounds case",
          "    assert_eq!(dfa.is_special_state(StateID(6)), false); // out-of-bounds high",
          "    assert_eq!(dfa.is_special_state(StateID(0)), false); // lower boundary",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]