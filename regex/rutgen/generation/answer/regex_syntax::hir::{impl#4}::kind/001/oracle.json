[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Empty,",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    let kind = hir.kind();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(kind, &HirKind::Empty);"
        ],
        "code": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Empty,",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    let kind = hir.kind();",
          "    assert_eq!(kind, &HirKind::Empty);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal = Literal::new(\"test\");",
          "    let hir = Hir {",
          "        kind: HirKind::Literal(literal),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    let kind = hir.kind();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(kind, &HirKind::Literal(Literal::new(\"test\")));"
        ],
        "code": [
          "{",
          "    let literal = Literal::new(\"test\");",
          "    let hir = Hir {",
          "        kind: HirKind::Literal(literal),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    let kind = hir.kind();",
          "    assert_eq!(kind, &HirKind::Literal(Literal::new(\"test\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let class = Class::new(vec!['a', 'b', 'c']);",
          "    let hir = Hir {",
          "        kind: HirKind::Class(class),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    let kind = hir.kind();",
          "}"
        ],
        "oracle": [
          "    let class = Class::new(vec!['a', 'b', 'c']);",
          "    let hir = Hir { kind: HirKind::Class(class), props: Properties(Box::new(PropertiesI {})), };",
          "    let kind = hir.kind();",
          "    assert_eq!(kind, &HirKind::Class(Class::new(vec!['a', 'b', 'c'])));"
        ],
        "code": [
          "{",
          "    let class = Class::new(vec!['a', 'b', 'c']);",
          "    let hir = Hir {",
          "        kind: HirKind::Class(class),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    let kind = hir.kind();",
          "    let class = Class::new(vec!['a', 'b', 'c']);",
          "    let hir = Hir { kind: HirKind::Class(class), props: Properties(Box::new(PropertiesI {})), };",
          "    let kind = hir.kind();",
          "    assert_eq!(kind, &HirKind::Class(Class::new(vec!['a', 'b', 'c'])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::new(\"(?=abc)\");  // Example lookahead assertion",
          "    let hir = Hir {",
          "        kind: HirKind::Look(look),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    let kind = hir.kind();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(kind, &HirKind::Look(Look::new(\"(?=abc)\")));"
        ],
        "code": [
          "{",
          "    let look = Look::new(\"(?=abc)\");  // Example lookahead assertion",
          "    let hir = Hir {",
          "        kind: HirKind::Look(look),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    let kind = hir.kind();",
          "    assert_eq!(kind, &HirKind::Look(Look::new(\"(?=abc)\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repetition = Repetition::new(Box::new(Hir::empty()), 1, 3);  // Example repetition",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    let kind = hir.kind();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(kind, &HirKind::Repetition(repetition));"
        ],
        "code": [
          "{",
          "    let repetition = Repetition::new(Box::new(Hir::empty()), 1, 3);  // Example repetition",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    let kind = hir.kind();",
          "    assert_eq!(kind, &HirKind::Repetition(repetition));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let capture = Capture::new(Box::new(Hir::empty()));  // Example capture group",
          "    let hir = Hir {",
          "        kind: HirKind::Capture(capture),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    let kind = hir.kind();",
          "}"
        ],
        "oracle": [
          "    let capture = Capture::new(Box::new(Hir::empty()));",
          "    let hir = Hir {",
          "    kind: HirKind::Capture(capture),",
          "    props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    let kind = hir.kind();",
          "    assert_eq!(kind, &HirKind::Capture(capture));"
        ],
        "code": [
          "{",
          "    let capture = Capture::new(Box::new(Hir::empty()));  // Example capture group",
          "    let hir = Hir {",
          "        kind: HirKind::Capture(capture),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    let kind = hir.kind();",
          "    let capture = Capture::new(Box::new(Hir::empty()));",
          "    let hir = Hir {",
          "    kind: HirKind::Capture(capture),",
          "    props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    let kind = hir.kind();",
          "    assert_eq!(kind, &HirKind::Capture(capture));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let concat_hir = vec![Hir::empty(), Hir::empty()];  // Example concatenation of HIR",
          "    let hir = Hir {",
          "        kind: HirKind::Concat(concat_hir),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    let kind = hir.kind();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(kind, &HirKind::Concat(vec![Hir::empty(), Hir::empty()]));"
        ],
        "code": [
          "{",
          "    let concat_hir = vec![Hir::empty(), Hir::empty()];  // Example concatenation of HIR",
          "    let hir = Hir {",
          "        kind: HirKind::Concat(concat_hir),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    let kind = hir.kind();",
          "    assert_eq!(kind, &HirKind::Concat(vec![Hir::empty(), Hir::empty()]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alt_hir = vec![Hir::empty(), Hir::empty()];  // Example alternation of HIR",
          "    let hir = Hir {",
          "        kind: HirKind::Alternation(alt_hir),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    let kind = hir.kind();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(kind, &HirKind::Alternation(vec![Hir::empty(), Hir::empty()]));",
          "    assert!(matches!(hir.kind(), HirKind::Alternation(_)));",
          "    assert!(matches!(hir.properties(), &Properties(_)));",
          "    assert!(hir.kind().is_instance_of::<HirKind>());",
          "    assert!(hir.kind().equals(&HirKind::Alternation(vec![Hir::empty(), Hir::empty()])));"
        ],
        "code": [
          "{",
          "    let alt_hir = vec![Hir::empty(), Hir::empty()];  // Example alternation of HIR",
          "    let hir = Hir {",
          "        kind: HirKind::Alternation(alt_hir),",
          "        props: Properties(Box::new(PropertiesI {})),",
          "    };",
          "    let kind = hir.kind();",
          "    assert_eq!(kind, &HirKind::Alternation(vec![Hir::empty(), Hir::empty()]));",
          "    assert!(matches!(hir.kind(), HirKind::Alternation(_)));",
          "    assert!(matches!(hir.properties(), &Properties(_)));",
          "    assert!(hir.kind().is_instance_of::<HirKind>());",
          "    assert!(hir.kind().equals(&HirKind::Alternation(vec![Hir::empty(), Hir::empty()])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]