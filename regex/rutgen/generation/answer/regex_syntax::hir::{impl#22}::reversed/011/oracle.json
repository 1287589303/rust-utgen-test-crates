[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordAsciiNegate;",
          "    let result = look.reversed();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Look::WordAsciiNegate);"
        ],
        "code": [
          "{",
          "    let look = Look::WordAsciiNegate;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::WordAsciiNegate);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordAscii;",
          "    let result = look.reversed();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Look::WordAsciiNegate);",
          "    assert_eq!(look.reversed(), Look::WordAsciiNegate);",
          "    let look_negate = Look::WordAsciiNegate;",
          "    let result_negate = look_negate.reversed();",
          "    assert_eq!(result_negate, Look::WordAscii);",
          "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
          "    assert_eq!(Look::WordAscii.reversed(), Look::WordAsciiNegate);"
        ],
        "code": [
          "{",
          "    let look = Look::WordAscii;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::WordAsciiNegate);",
          "    assert_eq!(look.reversed(), Look::WordAsciiNegate);",
          "    let look_negate = Look::WordAsciiNegate;",
          "    let result_negate = look_negate.reversed();",
          "    assert_eq!(result_negate, Look::WordAscii);",
          "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
          "    assert_eq!(Look::WordAscii.reversed(), Look::WordAsciiNegate);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordUnicode;",
          "    let result = look.reversed();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);"
        ],
        "code": [
          "{",
          "    let look = Look::WordUnicode;",
          "    let result = look.reversed();",
          "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordUnicodeNegate;",
          "    let result = look.reversed();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Look::WordUnicodeNegate);"
        ],
        "code": [
          "{",
          "    let look = Look::WordUnicodeNegate;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::WordUnicodeNegate);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordStartAscii;",
          "    let result = look.reversed();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Look::WordEndAscii);",
          "    assert_eq!(result, Look::WordAsciiNegate);"
        ],
        "code": [
          "{",
          "    let look = Look::WordStartAscii;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::WordEndAscii);",
          "    assert_eq!(result, Look::WordAsciiNegate);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordEndAscii;",
          "    let result = look.reversed();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Look::WordStartAscii);"
        ],
        "code": [
          "{",
          "    let look = Look::WordEndAscii;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::WordStartAscii);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordStartUnicode;",
          "    let result = look.reversed();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);"
        ],
        "code": [
          "{",
          "    let look = Look::WordStartUnicode;",
          "    let result = look.reversed();",
          "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordEndUnicode;",
          "    let result = look.reversed();",
          "}"
        ],
        "oracle": [
          "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
          "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
          "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
          "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
          "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
          "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
          "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
          "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
          "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
          "    Look::Start.reversed() == Look::End",
          "    Look::End.reversed() == Look::Start",
          "    Look::StartLF.reversed() == Look::EndLF",
          "    Look::EndLF.reversed() == Look::StartLF",
          "    Look::StartCRLF.reversed() == Look::EndCRLF",
          "    Look::EndCRLF.reversed() == Look::StartCRLF",
          "    Look::WordUnicode.reversed() == Look::WordUnicode",
          "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate"
        ],
        "code": [
          "{",
          "    let look = Look::WordEndUnicode;",
          "    let result = look.reversed();",
          "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
          "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
          "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
          "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
          "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
          "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
          "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
          "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
          "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
          "    Look::Start.reversed() == Look::End",
          "    Look::End.reversed() == Look::Start",
          "    Look::StartLF.reversed() == Look::EndLF",
          "    Look::EndLF.reversed() == Look::StartLF",
          "    Look::StartCRLF.reversed() == Look::EndCRLF",
          "    Look::EndCRLF.reversed() == Look::StartCRLF",
          "    Look::WordUnicode.reversed() == Look::WordUnicode",
          "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordStartHalfAscii;",
          "    let result = look.reversed();",
          "}"
        ],
        "oracle": [
          "    let look = Look::WordAsciiNegate;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::WordAsciiNegate);"
        ],
        "code": [
          "{",
          "    let look = Look::WordStartHalfAscii;",
          "    let result = look.reversed();",
          "    let look = Look::WordAsciiNegate;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::WordAsciiNegate);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordEndHalfAscii;",
          "    let result = look.reversed();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Look::WordEndHalfAscii);"
        ],
        "code": [
          "{",
          "    let look = Look::WordEndHalfAscii;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::WordEndHalfAscii);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordStartHalfUnicode;",
          "    let result = look.reversed();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Look::WordEndHalfUnicode);"
        ],
        "code": [
          "{",
          "    let look = Look::WordStartHalfUnicode;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::WordEndHalfUnicode);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordEndHalfUnicode;",
          "    let result = look.reversed();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Look::WordStartHalfUnicode);",
          "    let look = Look::WordAsciiNegate;",
          "    result = look.reversed();",
          "    assert_eq!(result, Look::WordAsciiNegate);"
        ],
        "code": [
          "{",
          "    let look = Look::WordEndHalfUnicode;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::WordStartHalfUnicode);",
          "    let look = Look::WordAsciiNegate;",
          "    result = look.reversed();",
          "    assert_eq!(result, Look::WordAsciiNegate);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]