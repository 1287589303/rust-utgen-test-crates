[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::Start;",
          "    let _result = look.reversed();",
          "}"
        ],
        "oracle": [
          "    let look = Look::StartHalfAscii;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::WordEndHalfAscii);"
        ],
        "code": [
          "{",
          "    let look = Look::Start;",
          "    let _result = look.reversed();",
          "    let look = Look::StartHalfAscii;",
          "    let result = look.reversed();",
          "    assert_eq!(result, Look::WordEndHalfAscii);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::End;",
          "    let _result = look.reversed();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);"
        ],
        "code": [
          "{",
          "    let look = Look::End;",
          "    let _result = look.reversed();",
          "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::StartLF;",
          "    let _result = look.reversed();",
          "}"
        ],
        "oracle": [
          "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
          "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
          "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
          "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
          "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
          "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
          "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
          "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
          "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
          "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
          "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
          "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
          "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
          "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
          "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
          "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
          "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
          "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
          "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);"
        ],
        "code": [
          "{",
          "    let look = Look::StartLF;",
          "    let _result = look.reversed();",
          "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
          "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
          "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
          "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
          "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
          "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
          "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
          "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
          "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
          "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
          "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
          "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
          "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
          "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
          "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
          "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
          "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
          "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
          "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::EndLF;",
          "    let _result = look.reversed();",
          "}"
        ],
        "oracle": [
          "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
          "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
          "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
          "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
          "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
          "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
          "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
          "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
          "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
          "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
          "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
          "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
          "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
          "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
          "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
          "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
          "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
          "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
        ],
        "code": [
          "{",
          "    let look = Look::EndLF;",
          "    let _result = look.reversed();",
          "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
          "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
          "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
          "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
          "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
          "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
          "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
          "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
          "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
          "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
          "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
          "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
          "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
          "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
          "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
          "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
          "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
          "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::StartCRLF;",
          "    let _result = look.reversed();",
          "}"
        ],
        "oracle": [
          "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
          "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
          "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
          "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
          "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
          "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
          "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
          "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
          "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
          "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
          "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
          "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
          "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
          "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
          "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
          "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
          "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
          "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
        ],
        "code": [
          "{",
          "    let look = Look::StartCRLF;",
          "    let _result = look.reversed();",
          "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
          "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
          "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
          "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
          "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
          "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
          "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
          "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
          "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
          "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
          "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
          "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
          "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
          "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
          "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
          "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
          "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
          "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::EndCRLF;",
          "    let _result = look.reversed();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::Start.reversed(), Look::End);",
          "    assert_eq!(Look::End.reversed(), Look::Start);",
          "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
          "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
          "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
          "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
          "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
          "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
          "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
          "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
          "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
          "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
          "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
          "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
          "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
          "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
          "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
          "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
          "    let look_half_ascii = Look::WordStartHalfAscii;",
          "    let result_half_ascii = look_half_ascii.reversed();",
          "    assert_eq!(result_half_ascii, Look::WordEndHalfAscii);"
        ],
        "code": [
          "{",
          "    let look = Look::EndCRLF;",
          "    let _result = look.reversed();",
          "    assert_eq!(Look::Start.reversed(), Look::End);",
          "    assert_eq!(Look::End.reversed(), Look::Start);",
          "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
          "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
          "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
          "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
          "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
          "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
          "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
          "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
          "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
          "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
          "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
          "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
          "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
          "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
          "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
          "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
          "    let look_half_ascii = Look::WordStartHalfAscii;",
          "    let result_half_ascii = look_half_ascii.reversed();",
          "    assert_eq!(result_half_ascii, Look::WordEndHalfAscii);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordAscii;",
          "    let _result = look.reversed();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
          "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
          "    assert_eq!(Look::Start.reversed(), Look::End);",
          "    assert_eq!(Look::End.reversed(), Look::Start);",
          "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
          "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
          "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
          "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
          "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
          "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
          "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
          "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
          "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
          "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
          "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
          "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
          "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
          "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
          "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
          "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
        ],
        "code": [
          "{",
          "    let look = Look::WordAscii;",
          "    let _result = look.reversed();",
          "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
          "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
          "    assert_eq!(Look::Start.reversed(), Look::End);",
          "    assert_eq!(Look::End.reversed(), Look::Start);",
          "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
          "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
          "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
          "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
          "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
          "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
          "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
          "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
          "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
          "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
          "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
          "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
          "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
          "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
          "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
          "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordAsciiNegate;",
          "    let _result = look.reversed();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);"
        ],
        "code": [
          "{",
          "    let look = Look::WordAsciiNegate;",
          "    let _result = look.reversed();",
          "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordUnicode;",
          "    let _result = look.reversed();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
          "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
          "    assert_eq!(Look::Start.reversed(), Look::End);",
          "    assert_eq!(Look::End.reversed(), Look::Start);",
          "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
          "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
          "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
          "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
          "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
          "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
          "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
          "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
          "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
          "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
          "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
          "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
          "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
          "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
          "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
          "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
        ],
        "code": [
          "{",
          "    let look = Look::WordUnicode;",
          "    let _result = look.reversed();",
          "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
          "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
          "    assert_eq!(Look::Start.reversed(), Look::End);",
          "    assert_eq!(Look::End.reversed(), Look::Start);",
          "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
          "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
          "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
          "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
          "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
          "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
          "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
          "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
          "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
          "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
          "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
          "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
          "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
          "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
          "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
          "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordUnicodeNegate;",
          "    let _result = look.reversed();",
          "}"
        ],
        "oracle": [
          "    look.reversed() == Look::WordEndHalfAscii;"
        ],
        "code": [
          "{",
          "    let look = Look::WordUnicodeNegate;",
          "    let _result = look.reversed();",
          "    look.reversed() == Look::WordEndHalfAscii;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordStartAscii;",
          "    let _result = look.reversed();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.reversed(), Look::WordEndHalfAscii);"
        ],
        "code": [
          "{",
          "    let look = Look::WordStartAscii;",
          "    let _result = look.reversed();",
          "    assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordEndAscii;",
          "    let _result = look.reversed();",
          "}"
        ],
        "oracle": [
          "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
          "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
          "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
          "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
          "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
          "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
          "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
          "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
          "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
          "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
          "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
          "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
          "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
          "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
          "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
          "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
          "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
          "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
        ],
        "code": [
          "{",
          "    let look = Look::WordEndAscii;",
          "    let _result = look.reversed();",
          "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
          "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
          "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
          "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
          "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
          "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
          "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
          "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
          "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
          "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
          "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
          "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
          "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
          "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
          "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
          "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
          "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
          "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordStartUnicode;",
          "    let _result = look.reversed();",
          "}"
        ],
        "oracle": [
          "    let look = Look::WordStartHalfAscii;",
          "    let expected = Look::WordEndHalfAscii;",
          "    let result = look.reversed();",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let look = Look::WordStartUnicode;",
          "    let _result = look.reversed();",
          "    let look = Look::WordStartHalfAscii;",
          "    let expected = Look::WordEndHalfAscii;",
          "    let result = look.reversed();",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordEndUnicode;",
          "    let _result = look.reversed();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);"
        ],
        "code": [
          "{",
          "    let look = Look::WordEndUnicode;",
          "    let _result = look.reversed();",
          "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordStartHalfAscii;",
          "    let _result = look.reversed();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.reversed(), Look::WordEndHalfAscii);"
        ],
        "code": [
          "{",
          "    let look = Look::WordStartHalfAscii;",
          "    let _result = look.reversed();",
          "    assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordEndHalfAscii;",
          "    let _result = look.reversed();",
          "}"
        ],
        "oracle": [
          "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
          "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
          "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
          "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
          "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
          "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
          "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
          "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
          "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
          "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
          "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
          "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
          "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
          "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
          "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
          "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);"
        ],
        "code": [
          "{",
          "    let look = Look::WordEndHalfAscii;",
          "    let _result = look.reversed();",
          "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
          "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
          "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
          "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
          "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
          "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
          "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
          "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
          "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
          "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
          "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
          "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
          "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
          "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
          "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
          "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordStartHalfUnicode;",
          "    let _result = look.reversed();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.reversed(), Look::WordEndHalfUnicode);"
        ],
        "code": [
          "{",
          "    let look = Look::WordStartHalfUnicode;",
          "    let _result = look.reversed();",
          "    assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordEndHalfUnicode;",
          "    let _result = look.reversed();",
          "}"
        ],
        "oracle": [
          "    let look = Look::Start;",
          "    let expected = Look::End;",
          "    assert_eq!(look.reversed(), expected);",
          "    ",
          "    let look = Look::End;",
          "    let expected = Look::Start;",
          "    assert_eq!(look.reversed(), expected);",
          "    ",
          "    let look = Look::StartLF;",
          "    let expected = Look::EndLF;",
          "    assert_eq!(look.reversed(), expected);",
          "    ",
          "    let look = Look::EndLF;",
          "    let expected = Look::StartLF;",
          "    assert_eq!(look.reversed(), expected);",
          "    ",
          "    let look = Look::StartCRLF;",
          "    let expected = Look::EndCRLF;",
          "    assert_eq!(look.reversed(), expected);",
          "    ",
          "    let look = Look::EndCRLF;",
          "    let expected = Look::StartCRLF;",
          "    assert_eq!(look.reversed(), expected);",
          "    ",
          "    let look = Look::WordAscii;",
          "    let expected = Look::WordAscii;",
          "    assert_eq!(look.reversed(), expected);",
          "    ",
          "    let look = Look::WordAsciiNegate;",
          "    let expected = Look::WordAsciiNegate;",
          "    assert_eq!(look.reversed(), expected);",
          "    ",
          "    let look = Look::WordUnicode;",
          "    let expected = Look::WordUnicode;",
          "    assert_eq!(look.reversed(), expected);",
          "    ",
          "    let look = Look::WordUnicodeNegate;",
          "    let expected = Look::WordUnicodeNegate;",
          "    assert_eq!(look.reversed(), expected);",
          "    ",
          "    let look = Look::WordStartAscii;",
          "    let expected = Look::WordEndAscii;",
          "    assert_eq!(look.reversed(), expected);",
          "    ",
          "    let look = Look::WordEndAscii;",
          "    let expected = Look::WordStartAscii;",
          "    assert_eq!(look.reversed(), expected);",
          "    ",
          "    let look = Look::WordStartUnicode;",
          "    let expected = Look::WordEndUnicode;",
          "    assert_eq!(look.reversed(), expected);",
          "    ",
          "    let look = Look::WordEndUnicode;",
          "    let expected = Look::WordStartUnicode;",
          "    assert_eq!(look.reversed(), expected);",
          "    ",
          "    let look = Look::WordStartHalfAscii;",
          "    let expected = Look::WordEndHalfAscii;",
          "    assert_eq!(look.reversed(), expected);",
          "    ",
          "    let look = Look::WordEndHalfAscii;",
          "    let expected = Look::WordStartHalfAscii;",
          "    assert_eq!(look.reversed(), expected);",
          "    ",
          "    let look = Look::WordStartHalfUnicode;",
          "    let expected = Look::WordEndHalfUnicode;",
          "    assert_eq!(look.reversed(), expected);",
          "    ",
          "    let look = Look::WordEndHalfUnicode;",
          "    let expected = Look::WordStartHalfUnicode;",
          "    assert_eq!(look.reversed(), expected);"
        ],
        "code": [
          "{",
          "    let look = Look::WordEndHalfUnicode;",
          "    let _result = look.reversed();",
          "    let look = Look::Start;",
          "    let expected = Look::End;",
          "    assert_eq!(look.reversed(), expected);",
          "    ",
          "    let look = Look::End;",
          "    let expected = Look::Start;",
          "    assert_eq!(look.reversed(), expected);",
          "    ",
          "    let look = Look::StartLF;",
          "    let expected = Look::EndLF;",
          "    assert_eq!(look.reversed(), expected);",
          "    ",
          "    let look = Look::EndLF;",
          "    let expected = Look::StartLF;",
          "    assert_eq!(look.reversed(), expected);",
          "    ",
          "    let look = Look::StartCRLF;",
          "    let expected = Look::EndCRLF;",
          "    assert_eq!(look.reversed(), expected);",
          "    ",
          "    let look = Look::EndCRLF;",
          "    let expected = Look::StartCRLF;",
          "    assert_eq!(look.reversed(), expected);",
          "    ",
          "    let look = Look::WordAscii;",
          "    let expected = Look::WordAscii;",
          "    assert_eq!(look.reversed(), expected);",
          "    ",
          "    let look = Look::WordAsciiNegate;",
          "    let expected = Look::WordAsciiNegate;",
          "    assert_eq!(look.reversed(), expected);",
          "    ",
          "    let look = Look::WordUnicode;",
          "    let expected = Look::WordUnicode;",
          "    assert_eq!(look.reversed(), expected);",
          "    ",
          "    let look = Look::WordUnicodeNegate;",
          "    let expected = Look::WordUnicodeNegate;",
          "    assert_eq!(look.reversed(), expected);",
          "    ",
          "    let look = Look::WordStartAscii;",
          "    let expected = Look::WordEndAscii;",
          "    assert_eq!(look.reversed(), expected);",
          "    ",
          "    let look = Look::WordEndAscii;",
          "    let expected = Look::WordStartAscii;",
          "    assert_eq!(look.reversed(), expected);",
          "    ",
          "    let look = Look::WordStartUnicode;",
          "    let expected = Look::WordEndUnicode;",
          "    assert_eq!(look.reversed(), expected);",
          "    ",
          "    let look = Look::WordEndUnicode;",
          "    let expected = Look::WordStartUnicode;",
          "    assert_eq!(look.reversed(), expected);",
          "    ",
          "    let look = Look::WordStartHalfAscii;",
          "    let expected = Look::WordEndHalfAscii;",
          "    assert_eq!(look.reversed(), expected);",
          "    ",
          "    let look = Look::WordEndHalfAscii;",
          "    let expected = Look::WordStartHalfAscii;",
          "    assert_eq!(look.reversed(), expected);",
          "    ",
          "    let look = Look::WordStartHalfUnicode;",
          "    let expected = Look::WordEndHalfUnicode;",
          "    assert_eq!(look.reversed(), expected);",
          "    ",
          "    let look = Look::WordEndHalfUnicode;",
          "    let expected = Look::WordStartHalfUnicode;",
          "    assert_eq!(look.reversed(), expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]