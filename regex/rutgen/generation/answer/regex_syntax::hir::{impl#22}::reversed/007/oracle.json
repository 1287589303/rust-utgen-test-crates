[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Look::WordEndAscii;",
          "    let result = input.reversed();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Look::WordStartAscii);"
        ],
        "code": [
          "{",
          "    let input = Look::WordEndAscii;",
          "    let result = input.reversed();",
          "    assert_eq!(result, Look::WordStartAscii);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Look::WordStartAscii;",
          "    let result = input.reversed();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Look::WordEndAscii);"
        ],
        "code": [
          "{",
          "    let input = Look::WordStartAscii;",
          "    let result = input.reversed();",
          "    assert_eq!(result, Look::WordEndAscii);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Look::WordEndUnicode;",
          "    let result = input.reversed();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Look::WordStartAscii);"
        ],
        "code": [
          "{",
          "    let input = Look::WordEndUnicode;",
          "    let result = input.reversed();",
          "    assert_eq!(result, Look::WordStartAscii);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Look::WordStartUnicode;",
          "    let result = input.reversed();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Look::WordEndUnicode);",
          "    let input = Look::WordEndAscii;",
          "    let result = input.reversed();",
          "    assert_eq!(result, Look::WordStartAscii);",
          "    let input = Look::WordStartAscii;",
          "    let result = input.reversed();",
          "    assert_eq!(result, Look::WordEndAscii);",
          "    let input = Look::WordStartHalfAscii;",
          "    let result = input.reversed();",
          "    assert_eq!(result, Look::WordEndHalfAscii);",
          "    let input = Look::WordEndHalfAscii;",
          "    let result = input.reversed();",
          "    assert_eq!(result, Look::WordStartHalfAscii);",
          "    let input = Look::Start;",
          "    let result = input.reversed();",
          "    assert_eq!(result, Look::End);",
          "    let input = Look::End;",
          "    let result = input.reversed();",
          "    assert_eq!(result, Look::Start);"
        ],
        "code": [
          "{",
          "    let input = Look::WordStartUnicode;",
          "    let result = input.reversed();",
          "    assert_eq!(result, Look::WordEndUnicode);",
          "    let input = Look::WordEndAscii;",
          "    let result = input.reversed();",
          "    assert_eq!(result, Look::WordStartAscii);",
          "    let input = Look::WordStartAscii;",
          "    let result = input.reversed();",
          "    assert_eq!(result, Look::WordEndAscii);",
          "    let input = Look::WordStartHalfAscii;",
          "    let result = input.reversed();",
          "    assert_eq!(result, Look::WordEndHalfAscii);",
          "    let input = Look::WordEndHalfAscii;",
          "    let result = input.reversed();",
          "    assert_eq!(result, Look::WordStartHalfAscii);",
          "    let input = Look::Start;",
          "    let result = input.reversed();",
          "    assert_eq!(result, Look::End);",
          "    let input = Look::End;",
          "    let result = input.reversed();",
          "    assert_eq!(result, Look::Start);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]