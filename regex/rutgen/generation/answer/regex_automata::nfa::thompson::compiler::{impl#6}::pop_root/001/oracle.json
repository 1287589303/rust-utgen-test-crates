[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder {",
          "        pattern_id: None,",
          "        states: Vec::new(),",
          "        start_pattern: Vec::new(),",
          "        captures: Vec::new(),",
          "        memory_states: 0,",
          "        utf8: true,",
          "        reverse: false,",
          "        look_matcher: LookMatcher::default(),",
          "        size_limit: None,",
          "        config: Default::default(),",
          "    };",
          "",
          "    let mut utf8_state = Utf8State {",
          "        compiled: Utf8BoundedMap::default(),",
          "        uncompiled: vec![Utf8Node {",
          "            trans: vec![Transition { start: 0, end: 255, next: StateID(0) }],",
          "            last: None,",
          "        }],",
          "    };",
          "",
          "    let mut compiler = Utf8Compiler::new(&mut builder, &mut utf8_state).unwrap();",
          "    ",
          "    let transitions = compiler.pop_root();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(utf8_state.uncompiled.len(), 1);",
          "    assert!(utf8_state.uncompiled[0].last.is_none());",
          "    let transitions = compiler.pop_root();",
          "    assert_eq!(transitions, vec![Transition { start: 0, end: 255, next: StateID(0) }]);"
        ],
        "code": [
          "{",
          "    let mut builder = Builder {",
          "        pattern_id: None,",
          "        states: Vec::new(),",
          "        start_pattern: Vec::new(),",
          "        captures: Vec::new(),",
          "        memory_states: 0,",
          "        utf8: true,",
          "        reverse: false,",
          "        look_matcher: LookMatcher::default(),",
          "        size_limit: None,",
          "        config: Default::default(),",
          "    };",
          "",
          "    let mut utf8_state = Utf8State {",
          "        compiled: Utf8BoundedMap::default(),",
          "        uncompiled: vec![Utf8Node {",
          "            trans: vec![Transition { start: 0, end: 255, next: StateID(0) }],",
          "            last: None,",
          "        }],",
          "    };",
          "",
          "    let mut compiler = Utf8Compiler::new(&mut builder, &mut utf8_state).unwrap();",
          "    ",
          "    let transitions = compiler.pop_root();",
          "    assert_eq!(utf8_state.uncompiled.len(), 1);",
          "    assert!(utf8_state.uncompiled[0].last.is_none());",
          "    let transitions = compiler.pop_root();",
          "    assert_eq!(transitions, vec![Transition { start: 0, end: 255, next: StateID(0) }]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]