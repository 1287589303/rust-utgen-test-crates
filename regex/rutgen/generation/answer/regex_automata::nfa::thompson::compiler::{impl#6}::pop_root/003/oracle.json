[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder {",
          "        config: Config::default(),",
          "        ..Default::default()",
          "    };",
          "    let mut state = Utf8State {",
          "        compiled: Utf8BoundedMap::default(),",
          "        uncompiled: vec![Utf8Node {",
          "            trans: vec![Transition { start: 0, end: 255, next: StateID(0) }],",
          "            last: None,",
          "        }],",
          "    };",
          "    ",
          "    let mut compiler = Utf8Compiler::new(&mut builder, &mut state).unwrap();",
          "    compiler.pop_root();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.uncompiled.len(), 1);",
          "    assert!(state.uncompiled[0].last.is_none());",
          "    let transitions = state.uncompiled.pop().expect(\"non-empty nodes\").trans;",
          "    assert_eq!(transitions.len(), 1);",
          "    assert_eq!(transitions[0].start, 0);",
          "    assert_eq!(transitions[0].end, 255);",
          "    assert_eq!(transitions[0].next, StateID(0));"
        ],
        "code": [
          "{",
          "    let mut builder = Builder {",
          "        config: Config::default(),",
          "        ..Default::default()",
          "    };",
          "    let mut state = Utf8State {",
          "        compiled: Utf8BoundedMap::default(),",
          "        uncompiled: vec![Utf8Node {",
          "            trans: vec![Transition { start: 0, end: 255, next: StateID(0) }],",
          "            last: None,",
          "        }],",
          "    };",
          "    ",
          "    let mut compiler = Utf8Compiler::new(&mut builder, &mut state).unwrap();",
          "    compiler.pop_root();",
          "    assert_eq!(state.uncompiled.len(), 1);",
          "    assert!(state.uncompiled[0].last.is_none());",
          "    let transitions = state.uncompiled.pop().expect(\"non-empty nodes\").trans;",
          "    assert_eq!(transitions.len(), 1);",
          "    assert_eq!(transitions[0].start, 0);",
          "    assert_eq!(transitions[0].end, 255);",
          "    assert_eq!(transitions[0].next, StateID(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut builder = Builder {",
          "        config: Config::default(),",
          "        ..Default::default()",
          "    };",
          "    let mut state = Utf8State {",
          "        compiled: Utf8BoundedMap::default(),",
          "        uncompiled: vec![], // empty to trigger panic",
          "    };",
          "",
          "    let mut compiler = Utf8Compiler::new(&mut builder, &mut state).unwrap();",
          "    compiler.pop_root(); // This should panic because uncompiled is empty.",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| {",
          "    let mut builder = Builder {",
          "    config: Config::default(),",
          "    ..Default::default()",
          "    };",
          "    let mut state = Utf8State {",
          "    compiled: Utf8BoundedMap::default(),",
          "    uncompiled: vec![],",
          "    };",
          "    ",
          "    let mut compiler = Utf8Compiler::new(&mut builder, &mut state).unwrap();",
          "    compiler.pop_root();",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    let mut builder = Builder {",
          "        config: Config::default(),",
          "        ..Default::default()",
          "    };",
          "    let mut state = Utf8State {",
          "        compiled: Utf8BoundedMap::default(),",
          "        uncompiled: vec![], // empty to trigger panic",
          "    };",
          "",
          "    let mut compiler = Utf8Compiler::new(&mut builder, &mut state).unwrap();",
          "    compiler.pop_root(); // This should panic because uncompiled is empty.",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let mut builder = Builder {",
          "    config: Config::default(),",
          "    ..Default::default()",
          "    };",
          "    let mut state = Utf8State {",
          "    compiled: Utf8BoundedMap::default(),",
          "    uncompiled: vec![],",
          "    };",
          "    ",
          "    let mut compiler = Utf8Compiler::new(&mut builder, &mut state).unwrap();",
          "    compiler.pop_root();",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]