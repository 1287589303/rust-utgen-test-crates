[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(b\"foo\".to_vec()),",
          "        Literal::inexact(b\"bar\".to_vec()),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::inexact(b\"quux\".to_vec()),",
          "        Literal::exact(b\"baz\".to_vec()),",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq2.len(), Some(0));",
          "    let expected = Seq::new(vec![",
          "    Literal::inexact(b\"fooquux\".to_vec()),",
          "    Literal::exact(b\"foobaz\".to_vec()),",
          "    Literal::inexact(b\"bar\".to_vec()),",
          "    ]);",
          "    assert_eq!(seq1, expected);",
          "    seq1.cross_forward(&mut Seq::infinite());",
          "    assert!(!seq1.is_finite());",
          "    seq1.cross_forward(&mut Seq::new(vec![",
          "    Literal::exact(b\"foo\".to_vec()),",
          "    Literal::exact(b\"\".to_vec()),",
          "    Literal::inexact(b\"bar\".to_vec()),",
          "    ]));",
          "    assert!(!seq1.is_finite());"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(b\"foo\".to_vec()),",
          "        Literal::inexact(b\"bar\".to_vec()),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::inexact(b\"quux\".to_vec()),",
          "        Literal::exact(b\"baz\".to_vec()),",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "    assert_eq!(seq2.len(), Some(0));",
          "    let expected = Seq::new(vec![",
          "    Literal::inexact(b\"fooquux\".to_vec()),",
          "    Literal::exact(b\"foobaz\".to_vec()),",
          "    Literal::inexact(b\"bar\".to_vec()),",
          "    ]);",
          "    assert_eq!(seq1, expected);",
          "    seq1.cross_forward(&mut Seq::infinite());",
          "    assert!(!seq1.is_finite());",
          "    seq1.cross_forward(&mut Seq::new(vec![",
          "    Literal::exact(b\"foo\".to_vec()),",
          "    Literal::exact(b\"\".to_vec()),",
          "    Literal::inexact(b\"bar\".to_vec()),",
          "    ]));",
          "    assert!(!seq1.is_finite());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(b\"foo\".to_vec()),",
          "        Literal::inexact(b\"bar\".to_vec()),",
          "    ]);",
          "    let mut seq2 = Seq::infinite();",
          "    seq1.cross_forward(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq1.is_finite(), false);",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&[",
          "    Literal::inexact(b\"foo\".to_vec()),",
          "    Literal::inexact(b\"bar\".to_vec()),",
          "    ]));",
          "    ",
          "    let mut seq1 = Seq::new(vec![",
          "    Literal::exact(b\"foo\".to_vec()),",
          "    Literal::exact(b\"\").to_vec(), // testing empty literal",
          "    Literal::inexact(b\"bar\".to_vec()),",
          "    ]);",
          "    let mut seq2 = Seq::infinite();",
          "    seq1.cross_forward(&mut seq2);",
          "    assert_eq!(seq1.is_finite(), false);",
          "    ",
          "    let mut seq1 = Seq::new(vec![",
          "    Literal::exact(b\"foo\".to_vec()),",
          "    Literal::inexact(b\"bar\".to_vec()),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "    Literal::inexact(b\"quux\".to_vec()),",
          "    Literal::exact(b\"baz\".to_vec()),",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&[",
          "    Literal::inexact(b\"fooquux\".to_vec()),",
          "    Literal::exact(b\"foobaz\".to_vec()),",
          "    Literal::inexact(b\"bar\".to_vec()),",
          "    ]));"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(b\"foo\".to_vec()),",
          "        Literal::inexact(b\"bar\".to_vec()),",
          "    ]);",
          "    let mut seq2 = Seq::infinite();",
          "    seq1.cross_forward(&mut seq2);",
          "    assert_eq!(seq1.is_finite(), false);",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&[",
          "    Literal::inexact(b\"foo\".to_vec()),",
          "    Literal::inexact(b\"bar\".to_vec()),",
          "    ]));",
          "    ",
          "    let mut seq1 = Seq::new(vec![",
          "    Literal::exact(b\"foo\".to_vec()),",
          "    Literal::exact(b\"\").to_vec(), // testing empty literal",
          "    Literal::inexact(b\"bar\".to_vec()),",
          "    ]);",
          "    let mut seq2 = Seq::infinite();",
          "    seq1.cross_forward(&mut seq2);",
          "    assert_eq!(seq1.is_finite(), false);",
          "    ",
          "    let mut seq1 = Seq::new(vec![",
          "    Literal::exact(b\"foo\".to_vec()),",
          "    Literal::inexact(b\"bar\".to_vec()),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "    Literal::inexact(b\"quux\".to_vec()),",
          "    Literal::exact(b\"baz\".to_vec()),",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&[",
          "    Literal::inexact(b\"fooquux\".to_vec()),",
          "    Literal::exact(b\"foobaz\".to_vec()),",
          "    Literal::inexact(b\"bar\".to_vec()),",
          "    ]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(b\"foo\".to_vec()),",
          "        Literal::exact(b\"\".to_vec()),",
          "        Literal::inexact(b\"bar\".to_vec()),",
          "    ]);",
          "    let mut seq2 = Seq::infinite();",
          "    seq1.cross_forward(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert!(!seq1.is_finite());",
          "    assert_eq!(Some(0), seq2.len());",
          "    assert_eq!(seq1.literals().unwrap().len(), 2);",
          "    assert!(seq1.literals().unwrap()[0].is_inexact());",
          "    assert!(seq1.literals().unwrap()[1].is_inexact());"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(b\"foo\".to_vec()),",
          "        Literal::exact(b\"\".to_vec()),",
          "        Literal::inexact(b\"bar\".to_vec()),",
          "    ]);",
          "    let mut seq2 = Seq::infinite();",
          "    seq1.cross_forward(&mut seq2);",
          "    assert!(!seq1.is_finite());",
          "    assert_eq!(Some(0), seq2.len());",
          "    assert_eq!(seq1.literals().unwrap().len(), 2);",
          "    assert!(seq1.literals().unwrap()[0].is_inexact());",
          "    assert!(seq1.literals().unwrap()[1].is_inexact());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(b\"foo\".to_vec()),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::inexact(b\"bar\".to_vec()),",
          "        Literal::inexact(b\"baz\".to_vec()),",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&[Literal::inexact(b\"foobar\".to_vec())]));",
          "    assert!(seq1.is_finite());",
          "    assert!(seq1.literals().unwrap()[0].is_exact());",
          "    assert!(seq1.literals().unwrap()[0].is_empty());",
          "    seq1.cross_forward(&mut Seq::infinite());",
          "    assert!(!seq1.is_finite());",
          "    seq1.cross_forward(&mut Seq::new(vec![Literal::exact(b\"foo\".to_vec())]));",
          "    assert_eq!(seq1.literals(), Some(&[Literal::inexact(b\"foobar\".to_vec())]));",
          "    seq1.cross_forward(&mut Seq::new(vec![Literal::inexact(b\"bar\".to_vec())]));",
          "    assert_eq!(seq1.literals(), Some(&[Literal::inexact(b\"foobar\".to_vec()), Literal::inexact(b\"bar\".to_vec())]));",
          "    seq1.cross_forward(&mut Seq::new(vec![Literal::inexact(b\"\".to_vec())]));",
          "    assert!(!seq1.is_finite());"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(b\"foo\".to_vec()),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::inexact(b\"bar\".to_vec()),",
          "        Literal::inexact(b\"baz\".to_vec()),",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&[Literal::inexact(b\"foobar\".to_vec())]));",
          "    assert!(seq1.is_finite());",
          "    assert!(seq1.literals().unwrap()[0].is_exact());",
          "    assert!(seq1.literals().unwrap()[0].is_empty());",
          "    seq1.cross_forward(&mut Seq::infinite());",
          "    assert!(!seq1.is_finite());",
          "    seq1.cross_forward(&mut Seq::new(vec![Literal::exact(b\"foo\".to_vec())]));",
          "    assert_eq!(seq1.literals(), Some(&[Literal::inexact(b\"foobar\".to_vec())]));",
          "    seq1.cross_forward(&mut Seq::new(vec![Literal::inexact(b\"bar\".to_vec())]));",
          "    assert_eq!(seq1.literals(), Some(&[Literal::inexact(b\"foobar\".to_vec()), Literal::inexact(b\"bar\".to_vec())]));",
          "    seq1.cross_forward(&mut Seq::new(vec![Literal::inexact(b\"\".to_vec())]));",
          "    assert!(!seq1.is_finite());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(b\"foo\".to_vec()),",
          "        Literal::exact(b\"\".to_vec()), // zero-length literal",
          "        Literal::inexact(b\"bar\".to_vec()),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::inexact(b\"quux\".to_vec()),",
          "        Literal::exact(b\"baz\".to_vec()),",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&[",
          "    Literal::inexact(b\"fooquux\".to_vec()),",
          "    Literal::exact(b\"foobaz\".to_vec()),",
          "    Literal::inexact(b\"bar\".to_vec())",
          "    ]));",
          "    assert!(!seq1.is_finite());",
          "    assert_eq!(seq1.len(), Some(3));"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(b\"foo\".to_vec()),",
          "        Literal::exact(b\"\".to_vec()), // zero-length literal",
          "        Literal::inexact(b\"bar\".to_vec()),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::inexact(b\"quux\".to_vec()),",
          "        Literal::exact(b\"baz\".to_vec()),",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&[",
          "    Literal::inexact(b\"fooquux\".to_vec()),",
          "    Literal::exact(b\"foobaz\".to_vec()),",
          "    Literal::inexact(b\"bar\".to_vec())",
          "    ]));",
          "    assert!(!seq1.is_finite());",
          "    assert_eq!(seq1.len(), Some(3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]