[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![ ",
          "        Literal::exact(\"foo\".as_bytes()), ",
          "        Literal::exact(\"bar\".as_bytes())",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![ ",
          "        Literal::exact(\"baz\".as_bytes()),",
          "        Literal::exact(\"quux\".as_bytes())",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq1.len(), Some(4));",
          "    assert!(seq1.literals().as_ref().unwrap().contains(&Literal::exact(b\"foobaz\")));",
          "    assert!(seq1.literals().as_ref().unwrap().contains(&Literal::exact(b\"fooquux\")));",
          "    assert!(seq1.literals().as_ref().unwrap().contains(&Literal::exact(b\"barbaz\")));",
          "    assert!(seq1.literals().as_ref().unwrap().contains(&Literal::exact(b\"barquux\")));",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert!(seq2.is_empty());",
          "    assert!(seq1.is_finite());",
          "    assert!(!seq1.is_empty());"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![ ",
          "        Literal::exact(\"foo\".as_bytes()), ",
          "        Literal::exact(\"bar\".as_bytes())",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![ ",
          "        Literal::exact(\"baz\".as_bytes()),",
          "        Literal::exact(\"quux\".as_bytes())",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "    assert_eq!(seq1.len(), Some(4));",
          "    assert!(seq1.literals().as_ref().unwrap().contains(&Literal::exact(b\"foobaz\")));",
          "    assert!(seq1.literals().as_ref().unwrap().contains(&Literal::exact(b\"fooquux\")));",
          "    assert!(seq1.literals().as_ref().unwrap().contains(&Literal::exact(b\"barbaz\")));",
          "    assert!(seq1.literals().as_ref().unwrap().contains(&Literal::exact(b\"barquux\")));",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert!(seq2.is_empty());",
          "    assert!(seq1.is_finite());",
          "    assert!(!seq1.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![ ",
          "        Literal::exact(\"foo\".as_bytes()), ",
          "        Literal::inexact(\"bar\".as_bytes())",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![ ",
          "        Literal::exact(\"baz\".as_bytes()),",
          "        Literal::inexact(\"quux\".as_bytes())",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.len(), Some(2));",
          "    assert!(seq1.is_finite());",
          "    assert_eq!(seq1.literals().unwrap()[0].as_bytes(), b\"foobar\");",
          "    assert!(seq1.literals().unwrap()[1].is_inexact());",
          "    assert_eq!(seq1.literals().unwrap()[1].as_bytes(), b\"bar\");",
          "    assert!(seq1.literals().unwrap()[0].is_exact());",
          "    assert_eq!(seq1.literals().unwrap()[0].as_bytes(), b\"foobaz\");",
          "    assert_eq!(seq1.literals().unwrap()[1].len(), 3);",
          "    assert_eq!(seq1.literals().unwrap()[0].len(), 6);"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![ ",
          "        Literal::exact(\"foo\".as_bytes()), ",
          "        Literal::inexact(\"bar\".as_bytes())",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![ ",
          "        Literal::exact(\"baz\".as_bytes()),",
          "        Literal::inexact(\"quux\".as_bytes())",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.len(), Some(2));",
          "    assert!(seq1.is_finite());",
          "    assert_eq!(seq1.literals().unwrap()[0].as_bytes(), b\"foobar\");",
          "    assert!(seq1.literals().unwrap()[1].is_inexact());",
          "    assert_eq!(seq1.literals().unwrap()[1].as_bytes(), b\"bar\");",
          "    assert!(seq1.literals().unwrap()[0].is_exact());",
          "    assert_eq!(seq1.literals().unwrap()[0].as_bytes(), b\"foobaz\");",
          "    assert_eq!(seq1.literals().unwrap()[1].len(), 3);",
          "    assert_eq!(seq1.literals().unwrap()[0].len(), 6);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![ ",
          "        Literal::exact(\"apple\".as_bytes()), ",
          "        Literal::exact(\"banana\".as_bytes())",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![ ",
          "        Literal::exact(\"cherry\".as_bytes()),",
          "        Literal::exact(\"date\".as_bytes())",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    seq1 = Seq::new(vec![Literal::exact(\"apple\".as_bytes()), Literal::exact(\"banana\".as_bytes())]);",
          "    seq2 = Seq::new(vec![Literal::exact(\"cherry\".as_bytes()), Literal::exact(\"date\".as_bytes())]);",
          "    seq1.cross_forward(&mut seq2);",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&[Literal::exact(\"applecherry\".as_bytes()), Literal::exact(\"appledate\".as_bytes()), Literal::exact(\"bananacherry\".as_bytes()), Literal::exact(\"bananadate\".as_bytes())][..]));",
          "    seq1 = Seq::new(vec![Literal::exact(\"apple\".as_bytes()), Literal::inexact(\"banana\".as_bytes())]);",
          "    seq2 = Seq::new(vec![Literal::exact(\"cherry\".as_bytes()), Literal::inexact(\"date\".as_bytes())]);",
          "    seq1.cross_forward(&mut seq2);",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&[Literal::inexact(\"applecherry\".as_bytes()), Literal::exact(\"appledate\".as_bytes()), Literal::inexact(\"bananacherry\".as_bytes()), Literal::inexact(\"bananadate\".as_bytes())][..]));",
          "    seq1 = Seq::new(vec![Literal::exact(\"\").as_bytes(),]);",
          "    seq2 = Seq::infinite();",
          "    seq1.cross_forward(&mut seq2);",
          "    assert!(!seq1.is_finite());",
          "    seq1 = Seq::infinite();",
          "    seq2 = Seq::new(vec![Literal::exact(\"cherry\".as_bytes()), Literal::inexact(\"date\".as_bytes())]);",
          "    seq1.cross_forward(&mut seq2);",
          "    assert!(!seq1.is_finite());",
          "    assert_eq!(seq2.len(), Some(0));"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![ ",
          "        Literal::exact(\"apple\".as_bytes()), ",
          "        Literal::exact(\"banana\".as_bytes())",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![ ",
          "        Literal::exact(\"cherry\".as_bytes()),",
          "        Literal::exact(\"date\".as_bytes())",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "    seq1 = Seq::new(vec![Literal::exact(\"apple\".as_bytes()), Literal::exact(\"banana\".as_bytes())]);",
          "    seq2 = Seq::new(vec![Literal::exact(\"cherry\".as_bytes()), Literal::exact(\"date\".as_bytes())]);",
          "    seq1.cross_forward(&mut seq2);",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&[Literal::exact(\"applecherry\".as_bytes()), Literal::exact(\"appledate\".as_bytes()), Literal::exact(\"bananacherry\".as_bytes()), Literal::exact(\"bananadate\".as_bytes())][..]));",
          "    seq1 = Seq::new(vec![Literal::exact(\"apple\".as_bytes()), Literal::inexact(\"banana\".as_bytes())]);",
          "    seq2 = Seq::new(vec![Literal::exact(\"cherry\".as_bytes()), Literal::inexact(\"date\".as_bytes())]);",
          "    seq1.cross_forward(&mut seq2);",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&[Literal::inexact(\"applecherry\".as_bytes()), Literal::exact(\"appledate\".as_bytes()), Literal::inexact(\"bananacherry\".as_bytes()), Literal::inexact(\"bananadate\".as_bytes())][..]));",
          "    seq1 = Seq::new(vec![Literal::exact(\"\").as_bytes(),]);",
          "    seq2 = Seq::infinite();",
          "    seq1.cross_forward(&mut seq2);",
          "    assert!(!seq1.is_finite());",
          "    seq1 = Seq::infinite();",
          "    seq2 = Seq::new(vec![Literal::exact(\"cherry\".as_bytes()), Literal::inexact(\"date\".as_bytes())]);",
          "    seq1.cross_forward(&mut seq2);",
          "    assert!(!seq1.is_finite());",
          "    assert_eq!(seq2.len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![ ",
          "        Literal::exact(\"hello\".as_bytes()), ",
          "        Literal::exact(\"world\".as_bytes())",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![ ",
          "        Literal::inexact(\"example\".as_bytes()),",
          "        Literal::exact(\"test\".as_bytes())",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.len(), Some(3));",
          "    assert_eq!(seq1.literals(), Some(&[",
          "    Literal::inexact(b\"helloexample\"),",
          "    Literal::exact(b\"hellotest\"),",
          "    Literal::inexact(b\"example\")",
          "    ]));",
          "    assert!(seq1.is_finite());",
          "    assert!(seq2.is_empty());"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![ ",
          "        Literal::exact(\"hello\".as_bytes()), ",
          "        Literal::exact(\"world\".as_bytes())",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![ ",
          "        Literal::inexact(\"example\".as_bytes()),",
          "        Literal::exact(\"test\".as_bytes())",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.len(), Some(3));",
          "    assert_eq!(seq1.literals(), Some(&[",
          "    Literal::inexact(b\"helloexample\"),",
          "    Literal::exact(b\"hellotest\"),",
          "    Literal::inexact(b\"example\")",
          "    ]));",
          "    assert!(seq1.is_finite());",
          "    assert!(seq2.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![ ",
          "        Literal::exact(\"start\".as_bytes()), ",
          "        Literal::exact(\"middle\".as_bytes())",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![ ",
          "        Literal::inexact(\"\".as_bytes())",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&[",
          "    Literal::inexact(\"start\".as_bytes()),",
          "    Literal::exact(\"startmiddle\".as_bytes())",
          "    ]));",
          "    assert!(!seq1.is_finite());",
          "    assert!(seq1.is_exact());",
          "    assert!(seq1.max_literal_len(&seq2).is_none());",
          "    assert_eq!(seq1.max_cross_len(&seq2), Some(2));",
          "    assert!(seq1.min_literal_len().is_some());"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![ ",
          "        Literal::exact(\"start\".as_bytes()), ",
          "        Literal::exact(\"middle\".as_bytes())",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![ ",
          "        Literal::inexact(\"\".as_bytes())",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&[",
          "    Literal::inexact(\"start\".as_bytes()),",
          "    Literal::exact(\"startmiddle\".as_bytes())",
          "    ]));",
          "    assert!(!seq1.is_finite());",
          "    assert!(seq1.is_exact());",
          "    assert!(seq1.max_literal_len(&seq2).is_none());",
          "    assert_eq!(seq1.max_cross_len(&seq2), Some(2));",
          "    assert!(seq1.min_literal_len().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]