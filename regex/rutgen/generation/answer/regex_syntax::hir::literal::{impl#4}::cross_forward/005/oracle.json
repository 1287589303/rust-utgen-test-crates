[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(\"foo\"),",
          "        Literal::exact(\"bar\"),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::exact(\"baz\"),",
          "        Literal::exact(\"quux\"),",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&vec![",
          "    Literal::exact(\"foobaz\"),",
          "    Literal::exact(\"foobar\"),",
          "    Literal::exact(\"barbaz\"),",
          "    Literal::exact(\"barquux\"),",
          "    ]));",
          "    assert_eq!(seq1.is_finite(), true);",
          "    assert_eq!(seq1.len(), Some(4));",
          "    assert!(seq1.is_exact());"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(\"foo\"),",
          "        Literal::exact(\"bar\"),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::exact(\"baz\"),",
          "        Literal::exact(\"quux\"),",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&vec![",
          "    Literal::exact(\"foobaz\"),",
          "    Literal::exact(\"foobar\"),",
          "    Literal::exact(\"barbaz\"),",
          "    Literal::exact(\"barquux\"),",
          "    ]));",
          "    assert_eq!(seq1.is_finite(), true);",
          "    assert_eq!(seq1.len(), Some(4));",
          "    assert!(seq1.is_exact());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(\"foo\"),",
          "        Literal::inexact(\"bar\"),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::inexact(\"quux\"),",
          "        Literal::exact(\"baz\"),",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq2.len(), Some(0));",
          "    let expected = Seq::new(vec![",
          "    Literal::inexact(\"fooquux\"),",
          "    Literal::exact(\"foobaz\"),",
          "    Literal::inexact(\"bar\"),",
          "    ]);",
          "    assert_eq!(expected, seq1);",
          "    assert!(seq1.cross_preamble(&mut seq2).is_some());",
          "    let (lits1, lits2) = seq1.cross_preamble(&mut seq2).unwrap();",
          "    let newcap = lits1.len().saturating_mul(lits2.len());",
          "    assert!(lits1.is_empty());"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(\"foo\"),",
          "        Literal::inexact(\"bar\"),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::inexact(\"quux\"),",
          "        Literal::exact(\"baz\"),",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "    assert_eq!(seq2.len(), Some(0));",
          "    let expected = Seq::new(vec![",
          "    Literal::inexact(\"fooquux\"),",
          "    Literal::exact(\"foobaz\"),",
          "    Literal::inexact(\"bar\"),",
          "    ]);",
          "    assert_eq!(expected, seq1);",
          "    assert!(seq1.cross_preamble(&mut seq2).is_some());",
          "    let (lits1, lits2) = seq1.cross_preamble(&mut seq2).unwrap();",
          "    let newcap = lits1.len().saturating_mul(lits2.len());",
          "    assert!(lits1.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(\"apple\"),",
          "        Literal::exact(\"banana\"),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::exact(\"carrot\"),",
          "        Literal::exact(\"date\"),",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq1.literals().unwrap().len(), 4);",
          "    assert_eq!(seq1.literals().unwrap()[0].as_bytes(), b\"applecarrot\");",
          "    assert_eq!(seq1.literals().unwrap()[1].as_bytes(), b\"appledate\");",
          "    assert_eq!(seq1.literals().unwrap()[2].as_bytes(), b\"bananacarrots\");",
          "    assert_eq!(seq1.literals().unwrap()[3].as_bytes(), b\"bananadate\");",
          "    assert_eq!(seq2.literals().is_none(), true);"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(\"apple\"),",
          "        Literal::exact(\"banana\"),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::exact(\"carrot\"),",
          "        Literal::exact(\"date\"),",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "    assert_eq!(seq1.literals().unwrap().len(), 4);",
          "    assert_eq!(seq1.literals().unwrap()[0].as_bytes(), b\"applecarrot\");",
          "    assert_eq!(seq1.literals().unwrap()[1].as_bytes(), b\"appledate\");",
          "    assert_eq!(seq1.literals().unwrap()[2].as_bytes(), b\"bananacarrots\");",
          "    assert_eq!(seq1.literals().unwrap()[3].as_bytes(), b\"bananadate\");",
          "    assert_eq!(seq2.literals().is_none(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(\"hello\"),",
          "        Literal::inexact(\"\"),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::exact(\"world\"),",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert!(seq1.is_finite());",
          "    assert_eq!(seq1.len(), Some(2));",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&[",
          "    Literal::exact(b\"hello\"),",
          "    Literal::inexact(b\"hello\"),",
          "    Literal::inexact(b\"world\"),",
          "    ]));",
          "    assert_eq!(seq1.longest_common_prefix(), None);",
          "    assert_eq!(seq1.longest_common_suffix(), None);"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(\"hello\"),",
          "        Literal::inexact(\"\"),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::exact(\"world\"),",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "    assert!(seq1.is_finite());",
          "    assert_eq!(seq1.len(), Some(2));",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&[",
          "    Literal::exact(b\"hello\"),",
          "    Literal::inexact(b\"hello\"),",
          "    Literal::inexact(b\"world\"),",
          "    ]));",
          "    assert_eq!(seq1.longest_common_prefix(), None);",
          "    assert_eq!(seq1.longest_common_suffix(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]