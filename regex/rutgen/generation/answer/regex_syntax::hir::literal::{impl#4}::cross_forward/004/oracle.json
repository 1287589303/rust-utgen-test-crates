[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(\"foo\"),",
          "        Literal::exact(\"bar\"),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::exact(\"baz\"),",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq1.literals(), Some(&[Literal::inexact(\"fooquux\"), Literal::exact(\"foobaz\"), Literal::inexact(\"bar\")]));",
          "    assert_eq!(seq2.len(), Some(0));",
          "    ",
          "    let mut seq1 = Seq::new(vec![",
          "    Literal::exact(\"foo\"),",
          "    Literal::inexact(\"bar\"),",
          "    ]);",
          "    let mut seq2 = Seq::infinite();",
          "    seq1.cross_forward(&mut seq2);",
          "    assert!(seq1.is_finite() == false);",
          "    assert_eq!(seq2.len(), Some(0));",
          "    ",
          "    let mut seq1 = Seq::new(vec![",
          "    Literal::exact(\"foo\"),",
          "    Literal::exact(\"\"),",
          "    Literal::inexact(\"bar\"),",
          "    ]);",
          "    let mut seq2 = Seq::infinite();",
          "    seq1.cross_forward(&mut seq2);",
          "    assert!(!seq1.is_finite());",
          "    ",
          "    let mut seq1 = Seq::infinite();",
          "    let mut seq2 = Seq::new(vec![",
          "    Literal::exact(\"foo\"),",
          "    Literal::inexact(\"bar\"),",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "    assert!(!seq1.is_finite());",
          "    assert_eq!(seq2.len(), Some(0));"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(\"foo\"),",
          "        Literal::exact(\"bar\"),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::exact(\"baz\"),",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "    assert_eq!(seq1.literals(), Some(&[Literal::inexact(\"fooquux\"), Literal::exact(\"foobaz\"), Literal::inexact(\"bar\")]));",
          "    assert_eq!(seq2.len(), Some(0));",
          "    ",
          "    let mut seq1 = Seq::new(vec![",
          "    Literal::exact(\"foo\"),",
          "    Literal::inexact(\"bar\"),",
          "    ]);",
          "    let mut seq2 = Seq::infinite();",
          "    seq1.cross_forward(&mut seq2);",
          "    assert!(seq1.is_finite() == false);",
          "    assert_eq!(seq2.len(), Some(0));",
          "    ",
          "    let mut seq1 = Seq::new(vec![",
          "    Literal::exact(\"foo\"),",
          "    Literal::exact(\"\"),",
          "    Literal::inexact(\"bar\"),",
          "    ]);",
          "    let mut seq2 = Seq::infinite();",
          "    seq1.cross_forward(&mut seq2);",
          "    assert!(!seq1.is_finite());",
          "    ",
          "    let mut seq1 = Seq::infinite();",
          "    let mut seq2 = Seq::new(vec![",
          "    Literal::exact(\"foo\"),",
          "    Literal::inexact(\"bar\"),",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "    assert!(!seq1.is_finite());",
          "    assert_eq!(seq2.len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(\"foo\"),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::inexact(\"baz\"),",
          "        Literal::exact(\"quux\"),",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&[Literal::exact(\"fooquux\"), Literal::inexact(\"baz\")]));",
          "    seq1.cross_forward(&mut seq2);",
          "    assert_eq!(seq1.literals(), Some(&[Literal::exact(\"fooquux\"), Literal::inexact(\"baz\")]));",
          "    assert!(seq1.is_finite());",
          "    assert_eq!(seq1.len(), Some(2));",
          "    assert!(seq2.is_empty());",
          "    seq1.cross_forward(&mut seq2);",
          "    assert_eq!(seq2.len(), Some(0));"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(\"foo\"),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::inexact(\"baz\"),",
          "        Literal::exact(\"quux\"),",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), Some(&[Literal::exact(\"fooquux\"), Literal::inexact(\"baz\")]));",
          "    seq1.cross_forward(&mut seq2);",
          "    assert_eq!(seq1.literals(), Some(&[Literal::exact(\"fooquux\"), Literal::inexact(\"baz\")]));",
          "    assert!(seq1.is_finite());",
          "    assert_eq!(seq1.len(), Some(2));",
          "    assert!(seq2.is_empty());",
          "    seq1.cross_forward(&mut seq2);",
          "    assert_eq!(seq2.len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::inexact(\"foo\"),",
          "        Literal::exact(\"bar\"),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::exact(\"baz\"),",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq1.literals(), Some(&[Literal::inexact(\"foo\"), Literal::exact(\"barbaz\")]));",
          "    assert_eq!(seq2.literals(), None);",
          "    assert!(seq1.len().is_some());",
          "    assert_eq!(seq1.len().unwrap(), 2);",
          "    assert!(seq2.is_empty());",
          "    assert!(!seq1.is_finite());",
          "    assert!(seq1.is_exact());",
          "    assert_eq!(seq1.max_literal_len().unwrap(), 7);",
          "    assert_eq!(seq1.min_literal_len().unwrap(), 3);"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::inexact(\"foo\"),",
          "        Literal::exact(\"bar\"),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::exact(\"baz\"),",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "    assert_eq!(seq1.literals(), Some(&[Literal::inexact(\"foo\"), Literal::exact(\"barbaz\")]));",
          "    assert_eq!(seq2.literals(), None);",
          "    assert!(seq1.len().is_some());",
          "    assert_eq!(seq1.len().unwrap(), 2);",
          "    assert!(seq2.is_empty());",
          "    assert!(!seq1.is_finite());",
          "    assert!(seq1.is_exact());",
          "    assert_eq!(seq1.max_literal_len().unwrap(), 7);",
          "    assert_eq!(seq1.min_literal_len().unwrap(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(\"foo\"),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::exact(\"bar\"),",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert!(seq1.equals(Seq::new(vec![Literal::exact(\"foobar\")])));",
          "    assert_eq!(Some(0), seq2.len());",
          "    assert!(!seq1.is_finite());"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::exact(\"foo\"),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::exact(\"bar\"),",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "    assert!(seq1.equals(Seq::new(vec![Literal::exact(\"foobar\")])));",
          "    assert_eq!(Some(0), seq2.len());",
          "    assert!(!seq1.is_finite());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::inexact(\"foo\"),",
          "        Literal::inexact(\"bar\"),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::exact(\"baz\"),",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert!(seq2.is_empty());",
          "    assert_eq!(seq1.literals(), Some(&[Literal::inexact(\"foo\"), Literal::inexact(\"bar\")][..]));",
          "    assert_eq!(seq1.len(), Some(2));",
          "    assert!(seq1.is_finite());",
          "    assert!(seq1.is_exact() == false);",
          "    assert!(seq1.is_inexact());"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(vec![",
          "        Literal::inexact(\"foo\"),",
          "        Literal::inexact(\"bar\"),",
          "    ]);",
          "    let mut seq2 = Seq::new(vec![",
          "        Literal::exact(\"baz\"),",
          "    ]);",
          "    seq1.cross_forward(&mut seq2);",
          "    assert!(seq2.is_empty());",
          "    assert_eq!(seq1.literals(), Some(&[Literal::inexact(\"foo\"), Literal::inexact(\"bar\")][..]));",
          "    assert_eq!(seq1.len(), Some(2));",
          "    assert!(seq1.is_finite());",
          "    assert!(seq1.is_exact() == false);",
          "    assert!(seq1.is_inexact());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]