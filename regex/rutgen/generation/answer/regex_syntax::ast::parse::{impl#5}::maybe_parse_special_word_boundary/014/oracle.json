[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let wb_start = Position { offset: 0, line: 1, column: 1 };",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(wb_start),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::from(\"invalid\")),",
          "        },",
          "        pattern: \"\\\\b{invalid}\",",
          "    };",
          "    ",
          "    let result = parser.maybe_parse_special_word_boundary(wb_start);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind, ast::ErrorKind::SpecialWordBoundaryUnrecognized);"
        ],
        "code": [
          "{",
          "    let wb_start = Position { offset: 0, line: 1, column: 1 };",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(wb_start),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::from(\"invalid\")),",
          "        },",
          "        pattern: \"\\\\b{invalid}\",",
          "    };",
          "    ",
          "    let result = parser.maybe_parse_special_word_boundary(wb_start);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind, ast::ErrorKind::SpecialWordBoundaryUnrecognized);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let wb_start = Position { offset: 0, line: 1, column: 1 };",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(wb_start),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::from(\"start\")),",
          "        },",
          "        pattern: \"\\\\b{start\",",
          "    };",
          "",
          "    let result = parser.maybe_parse_special_word_boundary(wb_start);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(parser.error(",
          "    Span::new(parser.pos(), parser.pos()),",
          "    ast::ErrorKind::SpecialWordBoundaryUnrecognized,",
          "    )));"
        ],
        "code": [
          "{",
          "    let wb_start = Position { offset: 0, line: 1, column: 1 };",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(wb_start),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::from(\"start\")),",
          "        },",
          "        pattern: \"\\\\b{start\",",
          "    };",
          "",
          "    let result = parser.maybe_parse_special_word_boundary(wb_start);",
          "    assert_eq!(result, Err(parser.error(",
          "    Span::new(parser.pos(), parser.pos()),",
          "    ast::ErrorKind::SpecialWordBoundaryUnrecognized,",
          "    )));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let wb_start = Position { offset: 0, line: 1, column: 1 };",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(wb_start),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::from(\"start-foo\")),",
          "        },",
          "        pattern: \"\\\\b{start-foo}\",",
          "    };",
          "",
          "    let result = parser.maybe_parse_special_word_boundary(wb_start);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(self.error(Span::new(start_contents, end), ast::ErrorKind::SpecialWordBoundaryUnrecognized)));"
        ],
        "code": [
          "{",
          "    let wb_start = Position { offset: 0, line: 1, column: 1 };",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(wb_start),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::from(\"start-foo\")),",
          "        },",
          "        pattern: \"\\\\b{start-foo}\",",
          "    };",
          "",
          "    let result = parser.maybe_parse_special_word_boundary(wb_start);",
          "    assert_eq!(result, Err(self.error(Span::new(start_contents, end), ast::ErrorKind::SpecialWordBoundaryUnrecognized)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]