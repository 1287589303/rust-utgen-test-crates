[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start_position = Position { offset: 0, line: 1, column: 1 };",
          "    let parser = Parser {",
          "        pos: Cell::new(start_position),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 5,",
          "        octal: true,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    ",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern: \"{ start-half }\",",
          "    };",
          "",
          "    parser_i.bump_and_bump_space = || {",
          "        parser.pos.set(Position { offset: 1, line: 1, column: 2 });",
          "        true",
          "    };",
          "",
          "    parser_i.char = || '{';",
          "    parser_i.is_eof = || false;",
          "",
          "    parser_i.bump = || {",
          "        parser.pos.set(Position { offset: 12, line: 1, column: 13 });",
          "    };",
          "",
          "    parser_i.scratch.borrow_mut().push('s');",
          "    parser_i.scratch.borrow_mut().push('t');",
          "    parser_i.scratch.borrow_mut().push('a');",
          "    parser_i.scratch.borrow_mut().push('r');",
          "    parser_i.scratch.borrow_mut().push('t');",
          "    parser_i.scratch.borrow_mut().push('-');",
          "    parser_i.scratch.borrow_mut().push('h');",
          "    parser_i.scratch.borrow_mut().push('a');",
          "    parser_i.scratch.borrow_mut().push('l');",
          "    parser_i.scratch.borrow_mut().push('f');",
          "    ",
          "    parser_i.is_eof = || true;",
          "    parser_i.char = || '}';",
          "",
          "    let result = parser_i.maybe_parse_special_word_boundary(start_position);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Some(ast::AssertionKind::WordBoundaryStartHalf)));"
        ],
        "code": [
          "{",
          "    let start_position = Position { offset: 0, line: 1, column: 1 };",
          "    let parser = Parser {",
          "        pos: Cell::new(start_position),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 5,",
          "        octal: true,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    ",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern: \"{ start-half }\",",
          "    };",
          "",
          "    parser_i.bump_and_bump_space = || {",
          "        parser.pos.set(Position { offset: 1, line: 1, column: 2 });",
          "        true",
          "    };",
          "",
          "    parser_i.char = || '{';",
          "    parser_i.is_eof = || false;",
          "",
          "    parser_i.bump = || {",
          "        parser.pos.set(Position { offset: 12, line: 1, column: 13 });",
          "    };",
          "",
          "    parser_i.scratch.borrow_mut().push('s');",
          "    parser_i.scratch.borrow_mut().push('t');",
          "    parser_i.scratch.borrow_mut().push('a');",
          "    parser_i.scratch.borrow_mut().push('r');",
          "    parser_i.scratch.borrow_mut().push('t');",
          "    parser_i.scratch.borrow_mut().push('-');",
          "    parser_i.scratch.borrow_mut().push('h');",
          "    parser_i.scratch.borrow_mut().push('a');",
          "    parser_i.scratch.borrow_mut().push('l');",
          "    parser_i.scratch.borrow_mut().push('f');",
          "    ",
          "    parser_i.is_eof = || true;",
          "    parser_i.char = || '}';",
          "",
          "    let result = parser_i.maybe_parse_special_word_boundary(start_position);",
          "    assert_eq!(result, Ok(Some(ast::AssertionKind::WordBoundaryStartHalf)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]