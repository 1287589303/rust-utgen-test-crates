[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyLiteral {",
          "        span: hir::Span,",
          "        kind: hir::LiteralKind,",
          "        c: char,",
          "    }",
          "",
          "    let lit1 = Literal(Box::new(b\"hello\".to_vec()));",
          "    let lit2 = Literal(Box::new(b\"world\".to_vec()));",
          "    let lit3 = Literal(Box::new(b\"hello\".to_vec())); // duplicate",
          "    let lit4 = Literal(Box::new(b\"rust\".to_vec()));",
          "",
          "    let mut seq1 = Seq::new(vec![lit1.clone(), lit2.clone()]);",
          "    let mut seq2 = Seq::new(vec![lit3.clone(), lit4.clone()]);",
          "",
          "    seq1.union(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Some(0), seq2.len());",
          "    assert_eq!(Seq::new(&[lit1, lit2, lit4]), seq1);",
          "    assert!(seq1.literals().is_some());",
          "    assert_eq!(seq1.literals().unwrap().len(), 3);",
          "    assert_eq!(seq1.literals().unwrap()[2], lit4);",
          "    assert!(seq2.is_empty());",
          "    assert!(seq2.literals().is_none());"
        ],
        "code": [
          "{",
          "    struct DummyLiteral {",
          "        span: hir::Span,",
          "        kind: hir::LiteralKind,",
          "        c: char,",
          "    }",
          "",
          "    let lit1 = Literal(Box::new(b\"hello\".to_vec()));",
          "    let lit2 = Literal(Box::new(b\"world\".to_vec()));",
          "    let lit3 = Literal(Box::new(b\"hello\".to_vec())); // duplicate",
          "    let lit4 = Literal(Box::new(b\"rust\".to_vec()));",
          "",
          "    let mut seq1 = Seq::new(vec![lit1.clone(), lit2.clone()]);",
          "    let mut seq2 = Seq::new(vec![lit3.clone(), lit4.clone()]);",
          "",
          "    seq1.union(&mut seq2);",
          "    assert_eq!(Some(0), seq2.len());",
          "    assert_eq!(Seq::new(&[lit1, lit2, lit4]), seq1);",
          "    assert!(seq1.literals().is_some());",
          "    assert_eq!(seq1.literals().unwrap().len(), 3);",
          "    assert_eq!(seq1.literals().unwrap()[2], lit4);",
          "    assert!(seq2.is_empty());",
          "    assert!(seq2.literals().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyLiteral {",
          "        span: hir::Span,",
          "        kind: hir::LiteralKind,",
          "        c: char,",
          "    }",
          "",
          "    let lit1 = Literal(Box::new(b\"abc\".to_vec())); // exact",
          "    let lit2 = Literal(Box::new(b\"def\".to_vec())); // exact",
          "    let lit3 = Literal(Box::new(b\"abc\".to_vec())); // duplicate",
          "    let lit4 = Literal(Box::new(b\"xyz\".to_vec())); // non-exact",
          "",
          "    let mut seq1 = Seq::new(vec![lit1.clone(), lit2.clone()]);",
          "    let mut seq2 = Seq::new(vec![lit3.clone(), lit4.clone()]);",
          "",
          "    seq1.union(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Some(3), seq1.len());",
          "    assert_eq!(Some(0), seq2.len());",
          "    assert_eq!(Seq::new(&[lit1, lit2, lit4]), seq1);",
          "    assert!(seq1.is_exact());",
          "    assert!(seq1.is_inexact());",
          "    assert!(!seq2.is_exact());",
          "    assert!(seq2.is_empty());",
          "    assert_eq!(seq1.literals(), Some(&[lit1, lit2, lit4]));",
          "    assert_eq!(seq2.literals(), None);"
        ],
        "code": [
          "{",
          "    struct DummyLiteral {",
          "        span: hir::Span,",
          "        kind: hir::LiteralKind,",
          "        c: char,",
          "    }",
          "",
          "    let lit1 = Literal(Box::new(b\"abc\".to_vec())); // exact",
          "    let lit2 = Literal(Box::new(b\"def\".to_vec())); // exact",
          "    let lit3 = Literal(Box::new(b\"abc\".to_vec())); // duplicate",
          "    let lit4 = Literal(Box::new(b\"xyz\".to_vec())); // non-exact",
          "",
          "    let mut seq1 = Seq::new(vec![lit1.clone(), lit2.clone()]);",
          "    let mut seq2 = Seq::new(vec![lit3.clone(), lit4.clone()]);",
          "",
          "    seq1.union(&mut seq2);",
          "    assert_eq!(Some(3), seq1.len());",
          "    assert_eq!(Some(0), seq2.len());",
          "    assert_eq!(Seq::new(&[lit1, lit2, lit4]), seq1);",
          "    assert!(seq1.is_exact());",
          "    assert!(seq1.is_inexact());",
          "    assert!(!seq2.is_exact());",
          "    assert!(seq2.is_empty());",
          "    assert_eq!(seq1.literals(), Some(&[lit1, lit2, lit4]));",
          "    assert_eq!(seq2.literals(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyLiteral {",
          "        span: hir::Span,",
          "        kind: hir::LiteralKind,",
          "        c: char,",
          "    }",
          "",
          "    let lit1 = Literal(Box::new(b\"foo\".to_vec())); // exact",
          "    let lit2 = Literal(Box::new(b\"bar\".to_vec())); // exact",
          "    let lit3 = Literal(Box::new(b\"foo\".to_vec())); // duplicate, non-exact",
          "",
          "    let mut seq1 = Seq::new(vec![lit1.clone(), lit2.clone()]);",
          "    let mut seq2 = Seq::new(vec![lit3.clone()]);",
          "",
          "    seq1.union(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Some(0), seq2.len());",
          "    assert_eq!(Seq::new(&[lit1, lit2]), seq1);",
          "    assert!(seq2.literals.is_none());",
          "    assert!(seq1.literals.is_some());",
          "    assert!(seq1.literals.as_ref().unwrap().len() == 2);",
          "    assert!(seq1.literals.as_ref().unwrap().contains(&lit1));",
          "    assert!(seq1.literals.as_ref().unwrap().contains(&lit2));",
          "    assert!(!seq1.literals.as_ref().unwrap().contains(&lit3));"
        ],
        "code": [
          "{",
          "    struct DummyLiteral {",
          "        span: hir::Span,",
          "        kind: hir::LiteralKind,",
          "        c: char,",
          "    }",
          "",
          "    let lit1 = Literal(Box::new(b\"foo\".to_vec())); // exact",
          "    let lit2 = Literal(Box::new(b\"bar\".to_vec())); // exact",
          "    let lit3 = Literal(Box::new(b\"foo\".to_vec())); // duplicate, non-exact",
          "",
          "    let mut seq1 = Seq::new(vec![lit1.clone(), lit2.clone()]);",
          "    let mut seq2 = Seq::new(vec![lit3.clone()]);",
          "",
          "    seq1.union(&mut seq2);",
          "    assert_eq!(Some(0), seq2.len());",
          "    assert_eq!(Seq::new(&[lit1, lit2]), seq1);",
          "    assert!(seq2.literals.is_none());",
          "    assert!(seq1.literals.is_some());",
          "    assert!(seq1.literals.as_ref().unwrap().len() == 2);",
          "    assert!(seq1.literals.as_ref().unwrap().contains(&lit1));",
          "    assert!(seq1.literals.as_ref().unwrap().contains(&lit2));",
          "    assert!(!seq1.literals.as_ref().unwrap().contains(&lit3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]