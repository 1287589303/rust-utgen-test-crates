[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = [0u8; 16];",
          "    LE::write_u128(0u128, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, [0u8; 16]);",
          "    LE::write_u128(1u128, &mut dst);",
          "    assert_eq!(dst, [1u8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);",
          "    LE::write_u128(u128::MAX, &mut dst);",
          "    assert_eq!(dst, [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]);",
          "    LE::write_u128(123456789012345678901234567890u128, &mut dst);",
          "    assert_eq!(dst, [218, 67, 79, 181, 219, 243, 4, 7, 227, 130, 70, 164, 0, 0, 0, 0]);",
          "    LE::write_u128(0x123456789abcdef0fedcba9876543210u128, &mut dst);",
          "    assert_eq!(dst, [16, 50, 86, 120, 190, 205, 162, 65, 0, 0, 0, 0, 0, 0, 0, 0]);"
        ],
        "code": [
          "{",
          "    let mut dst = [0u8; 16];",
          "    LE::write_u128(0u128, &mut dst);",
          "    assert_eq!(dst, [0u8; 16]);",
          "    LE::write_u128(1u128, &mut dst);",
          "    assert_eq!(dst, [1u8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);",
          "    LE::write_u128(u128::MAX, &mut dst);",
          "    assert_eq!(dst, [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]);",
          "    LE::write_u128(123456789012345678901234567890u128, &mut dst);",
          "    assert_eq!(dst, [218, 67, 79, 181, 219, 243, 4, 7, 227, 130, 70, 164, 0, 0, 0, 0]);",
          "    LE::write_u128(0x123456789abcdef0fedcba9876543210u128, &mut dst);",
          "    assert_eq!(dst, [16, 50, 86, 120, 190, 205, 162, 65, 0, 0, 0, 0, 0, 0, 0, 0]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = [0u8; 16];",
          "    LE::write_u128(u128::MAX, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]);"
        ],
        "code": [
          "{",
          "    let mut dst = [0u8; 16];",
          "    LE::write_u128(u128::MAX, &mut dst);",
          "    assert_eq!(dst, [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = [0u8; 16];",
          "    LE::write_u128(1 << 127, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]);"
        ],
        "code": [
          "{",
          "    let mut dst = [0u8; 16];",
          "    LE::write_u128(1 << 127, &mut dst);",
          "    assert_eq!(dst, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = [0u8; 16];",
          "    LE::write_u128(42u128, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, [42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);"
        ],
        "code": [
          "{",
          "    let mut dst = [0u8; 16];",
          "    LE::write_u128(42u128, &mut dst);",
          "    assert_eq!(dst, [42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = [0u8; 16];",
          "    LE::write_u128(123456789012345678901234567890u128, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, [0xC8, 0x70, 0x9A, 0xD4, 0x7C, 0xA3, 0xE1, 0x15, 0x06, 0x45, 0xC8, 0x57, 0x00, 0x00, 0x00, 0x00]);"
        ],
        "code": [
          "{",
          "    let mut dst = [0u8; 16];",
          "    LE::write_u128(123456789012345678901234567890u128, &mut dst);",
          "    assert_eq!(dst, [0xC8, 0x70, 0x9A, 0xD4, 0x7C, 0xA3, 0xE1, 0x15, 0x06, 0x45, 0xC8, 0x57, 0x00, 0x00, 0x00, 0x00]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]