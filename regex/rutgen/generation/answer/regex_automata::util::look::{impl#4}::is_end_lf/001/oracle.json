[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    matcher.set_line_terminator(10); // LF",
          "    let haystack: &[u8] = b\"Hello\\nWorld\";",
          "    let at = 0; // start of haystack",
          "    matcher.is_end_lf(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(matcher.is_end(haystack, at), true);",
          "    assert_eq!(matcher.is_end_lf(haystack, at), true);",
          "    assert_eq!(haystack[at], matcher.lineterm.0);",
          "    assert!(at <= haystack.len());"
        ],
        "code": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    matcher.set_line_terminator(10); // LF",
          "    let haystack: &[u8] = b\"Hello\\nWorld\";",
          "    let at = 0; // start of haystack",
          "    matcher.is_end_lf(haystack, at);",
          "    assert_eq!(matcher.is_end(haystack, at), true);",
          "    assert_eq!(matcher.is_end_lf(haystack, at), true);",
          "    assert_eq!(haystack[at], matcher.lineterm.0);",
          "    assert!(at <= haystack.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    matcher.set_line_terminator(10); // LF",
          "    let haystack: &[u8] = b\"Hello\\nWorld\";",
          "    let at = haystack.len(); // end of haystack",
          "    matcher.is_end_lf(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(matcher.is_end_lf(haystack, at), true);",
          "    assert_eq!(matcher.get_line_terminator(), 10);",
          "    assert!(matcher.is_end(haystack, at));",
          "    assert!(haystack[at - 1] == matcher.lineterm.0);"
        ],
        "code": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    matcher.set_line_terminator(10); // LF",
          "    let haystack: &[u8] = b\"Hello\\nWorld\";",
          "    let at = haystack.len(); // end of haystack",
          "    matcher.is_end_lf(haystack, at);",
          "    assert_eq!(matcher.is_end_lf(haystack, at), true);",
          "    assert_eq!(matcher.get_line_terminator(), 10);",
          "    assert!(matcher.is_end(haystack, at));",
          "    assert!(haystack[at - 1] == matcher.lineterm.0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    matcher.set_line_terminator(10); // LF",
          "    let haystack: &[u8] = b\"Hello\\nWorld\";",
          "    let at = 5; // position of 'o'",
          "    matcher.is_end_lf(haystack, at);",
          "}"
        ],
        "oracle": [
          "    matcher.is_end_lf(haystack, at); // Expecting true since at is a valid index and haystack[at] == matcher.lineterm.0",
          "    matcher.lineterm.0; // Expecting to be 10 (LF)",
          "    at; // Expecting at to be 5, a legal index in the haystack",
          "    haystack.len(); // Expecting haystack length to be 11",
          "    matcher.is_end(haystack, at); // Expecting true, as this should satisfy the precondition",
          "    haystack[at]; // Expecting haystack[5] to be 'o' (ASCII value 111)"
        ],
        "code": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    matcher.set_line_terminator(10); // LF",
          "    let haystack: &[u8] = b\"Hello\\nWorld\";",
          "    let at = 5; // position of 'o'",
          "    matcher.is_end_lf(haystack, at);",
          "    matcher.is_end_lf(haystack, at); // Expecting true since at is a valid index and haystack[at] == matcher.lineterm.0",
          "    matcher.lineterm.0; // Expecting to be 10 (LF)",
          "    at; // Expecting at to be 5, a legal index in the haystack",
          "    haystack.len(); // Expecting haystack length to be 11",
          "    matcher.is_end(haystack, at); // Expecting true, as this should satisfy the precondition",
          "    haystack[at]; // Expecting haystack[5] to be 'o' (ASCII value 111)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    matcher.set_line_terminator(10); // LF",
          "    let haystack: &[u8] = b\"Hello\\nWorld\";",
          "    let at = 6; // position of '\\n'",
          "    matcher.is_end_lf(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(matcher.is_end(haystack, at), true);",
          "    assert_eq!(matcher.is_end_lf(haystack, at), true);",
          "    assert_eq!(haystack[at], matcher.lineterm.0);",
          "    assert!(matcher.is_end_lf(haystack, at));"
        ],
        "code": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    matcher.set_line_terminator(10); // LF",
          "    let haystack: &[u8] = b\"Hello\\nWorld\";",
          "    let at = 6; // position of '\\n'",
          "    matcher.is_end_lf(haystack, at);",
          "    assert_eq!(matcher.is_end(haystack, at), true);",
          "    assert_eq!(matcher.is_end_lf(haystack, at), true);",
          "    assert_eq!(haystack[at], matcher.lineterm.0);",
          "    assert!(matcher.is_end_lf(haystack, at));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    matcher.set_line_terminator(10); // LF",
          "    let haystack: &[u8] = b\"Hello\\nWorld\";",
          "    let at = 7; // position of 'W'",
          "    matcher.is_end_lf(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert!(matcher.is_end(haystack, at));",
          "    assert_eq!(matcher.is_end_lf(haystack, at), true);",
          "    assert_eq!(matcher.is_end_lf(haystack, haystack.len()), true);",
          "    assert_eq!(matcher.is_end_lf(haystack, at + 1), false);",
          "    assert_eq!(matcher.is_end_lf(haystack, at), haystack[at] == matcher.lineterm.0);",
          "    assert_eq!(matcher.lineterm.0, 10);"
        ],
        "code": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    matcher.set_line_terminator(10); // LF",
          "    let haystack: &[u8] = b\"Hello\\nWorld\";",
          "    let at = 7; // position of 'W'",
          "    matcher.is_end_lf(haystack, at);",
          "    assert!(matcher.is_end(haystack, at));",
          "    assert_eq!(matcher.is_end_lf(haystack, at), true);",
          "    assert_eq!(matcher.is_end_lf(haystack, haystack.len()), true);",
          "    assert_eq!(matcher.is_end_lf(haystack, at + 1), false);",
          "    assert_eq!(matcher.is_end_lf(haystack, at), haystack[at] == matcher.lineterm.0);",
          "    assert_eq!(matcher.lineterm.0, 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    matcher.set_line_terminator(10); // LF",
          "    let haystack: &[u8] = b\"Hello World\"; // no LF in haystack",
          "    let at = 11; // at the end of haystack",
          "    matcher.is_end_lf(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert!(matcher.is_end(haystack, at));",
          "    assert_eq!(matcher.is_end_lf(haystack, at), true);",
          "    assert_eq!(matcher.is_end_lf(haystack, at), at == haystack.len() || haystack[at] == matcher.lineterm.0);",
          "    assert_eq!(matcher.lineterm.0, 10);"
        ],
        "code": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    matcher.set_line_terminator(10); // LF",
          "    let haystack: &[u8] = b\"Hello World\"; // no LF in haystack",
          "    let at = 11; // at the end of haystack",
          "    matcher.is_end_lf(haystack, at);",
          "    assert!(matcher.is_end(haystack, at));",
          "    assert_eq!(matcher.is_end_lf(haystack, at), true);",
          "    assert_eq!(matcher.is_end_lf(haystack, at), at == haystack.len() || haystack[at] == matcher.lineterm.0);",
          "    assert_eq!(matcher.lineterm.0, 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]