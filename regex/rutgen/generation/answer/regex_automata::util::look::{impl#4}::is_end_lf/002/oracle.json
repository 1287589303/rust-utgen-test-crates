[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    matcher.set_line_terminator(b'\\n');",
          "    let haystack: &[u8] = b\"Hello World\\n\";",
          "    let at = 5; // at index 5, haystack[5] is ' ' (space), which is not line terminator",
          "    let result = matcher.is_end_lf(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);  // since haystack[5] is not the line terminator",
          "    assert_eq!(matcher.is_end(haystack, at), false);  // precondition: is_end must be false"
        ],
        "code": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    matcher.set_line_terminator(b'\\n');",
          "    let haystack: &[u8] = b\"Hello World\\n\";",
          "    let at = 5; // at index 5, haystack[5] is ' ' (space), which is not line terminator",
          "    let result = matcher.is_end_lf(haystack, at);",
          "    assert_eq!(result, false);  // since haystack[5] is not the line terminator",
          "    assert_eq!(matcher.is_end(haystack, at), false);  // precondition: is_end must be false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    matcher.set_line_terminator(b'\\n');",
          "    let haystack: &[u8] = b\"Hello World\\n\";",
          "    let at = 11; // at index 11, haystack[11] is '\\n' (line terminator)",
          "    let result = matcher.is_end_lf(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    matcher.set_line_terminator(b'\\n');",
          "    let haystack: &[u8] = b\"Hello World\\n\";",
          "    let at = 11; // at index 11, haystack[11] is '\\n' (line terminator)",
          "    let result = matcher.is_end_lf(haystack, at);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    matcher.set_line_terminator(b'\\r');",
          "    let haystack: &[u8] = b\"Hello World\\r\";",
          "    let at = 10; // at index 10, haystack[10] is 'd', which is not line terminator",
          "    let result = matcher.is_end_lf(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    assert_ne!(haystack[at], matcher.lineterm.0);",
          "    assert!(!matcher.is_end(haystack, at));"
        ],
        "code": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    matcher.set_line_terminator(b'\\r');",
          "    let haystack: &[u8] = b\"Hello World\\r\";",
          "    let at = 10; // at index 10, haystack[10] is 'd', which is not line terminator",
          "    let result = matcher.is_end_lf(haystack, at);",
          "    assert_eq!(result, false);",
          "    assert_ne!(haystack[at], matcher.lineterm.0);",
          "    assert!(!matcher.is_end(haystack, at));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]