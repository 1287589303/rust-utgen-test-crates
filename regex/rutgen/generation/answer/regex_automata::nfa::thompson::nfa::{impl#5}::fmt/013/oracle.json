[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dense = DenseTransitions {",
          "        transitions: Box::new([]),",
          "    };",
          "    let state = State::Dense(dense);",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{:?}\", state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"dense()\");"
        ],
        "code": [
          "{",
          "    let dense = DenseTransitions {",
          "        transitions: Box::new([]),",
          "    };",
          "    let state = State::Dense(dense);",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{:?}\", state);",
          "    assert_eq!(output, \"dense()\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dense = DenseTransitions {",
          "        transitions: Box::new([StateID(SmallIndex::new_unchecked(1))]),",
          "    };",
          "    let state = State::Dense(dense);",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{:?}\", state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"dense(1)\");",
          "    assert!(output.contains(\"dense\"));",
          "    assert!(output.len() > 0);",
          "    assert!(output.ends_with(')'));",
          "    assert!(output.starts_with(\"dense(\"));",
          "    assert!(output.matches('1').count() == 1);"
        ],
        "code": [
          "{",
          "    let dense = DenseTransitions {",
          "        transitions: Box::new([StateID(SmallIndex::new_unchecked(1))]),",
          "    };",
          "    let state = State::Dense(dense);",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{:?}\", state);",
          "    assert_eq!(output, \"dense(1)\");",
          "    assert!(output.contains(\"dense\"));",
          "    assert!(output.len() > 0);",
          "    assert!(output.ends_with(')'));",
          "    assert!(output.starts_with(\"dense(\"));",
          "    assert!(output.matches('1').count() == 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]