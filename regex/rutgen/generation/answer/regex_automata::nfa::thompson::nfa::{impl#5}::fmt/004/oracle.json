[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alt1 = StateID(SmallIndex::new_unchecked(0));",
          "    let alt2 = StateID(SmallIndex::new_unchecked(1));",
          "    let state = State::BinaryUnion { alt1, alt2 };",
          "    let _ = format!(\"{:?}\", state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{:?}\", state), \"binary-union(0, 1)\");"
        ],
        "code": [
          "{",
          "    let alt1 = StateID(SmallIndex::new_unchecked(0));",
          "    let alt2 = StateID(SmallIndex::new_unchecked(1));",
          "    let state = State::BinaryUnion { alt1, alt2 };",
          "    let _ = format!(\"{:?}\", state);",
          "    assert_eq!(format!(\"{:?}\", state), \"binary-union(0, 1)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alt1 = StateID(SmallIndex::new_unchecked(1));",
          "    let alt2 = StateID(SmallIndex::new_unchecked(2));",
          "    let state = State::BinaryUnion { alt1, alt2 };",
          "    let _ = format!(\"{:?}\", state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{:?}\", State::BinaryUnion { alt1: StateID(SmallIndex::new_unchecked(1)), alt2: StateID(SmallIndex::new_unchecked(2)) }), \"binary-union(1, 2)\");"
        ],
        "code": [
          "{",
          "    let alt1 = StateID(SmallIndex::new_unchecked(1));",
          "    let alt2 = StateID(SmallIndex::new_unchecked(2));",
          "    let state = State::BinaryUnion { alt1, alt2 };",
          "    let _ = format!(\"{:?}\", state);",
          "    assert_eq!(format!(\"{:?}\", State::BinaryUnion { alt1: StateID(SmallIndex::new_unchecked(1)), alt2: StateID(SmallIndex::new_unchecked(2)) }), \"binary-union(1, 2)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alt1 = StateID(SmallIndex::new_unchecked(SmallIndex::MAX.as_usize() - 1));",
          "    let alt2 = StateID(SmallIndex::new_unchecked(SmallIndex::MAX.as_usize()));",
          "    let state = State::BinaryUnion { alt1, alt2 };",
          "    let _ = format!(\"{:?}\", state);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"binary-union({}, {})\", alt1.as_usize(), alt2.as_usize())",
          "    assert_eq!(_ , format!(\"binary-union({}, {})\", (SmallIndex::MAX.as_usize() - 1), SmallIndex::MAX.as_usize()));",
          "    assert!(_ == format!(\"binary-union({}, {})\", (SmallIndex::MAX.as_usize() - 1), SmallIndex::MAX.as_usize()));",
          "    let expected = format!(\"binary-union({}, {})\", (SmallIndex::MAX.as_usize() - 1), SmallIndex::MAX.as_usize());",
          "    assert_eq!(_, expected);",
          "    assert!(!_.contains(\"FAIL\"));"
        ],
        "code": [
          "{",
          "    let alt1 = StateID(SmallIndex::new_unchecked(SmallIndex::MAX.as_usize() - 1));",
          "    let alt2 = StateID(SmallIndex::new_unchecked(SmallIndex::MAX.as_usize()));",
          "    let state = State::BinaryUnion { alt1, alt2 };",
          "    let _ = format!(\"{:?}\", state);",
          "    write!(f, \"binary-union({}, {})\", alt1.as_usize(), alt2.as_usize())",
          "    assert_eq!(_ , format!(\"binary-union({}, {})\", (SmallIndex::MAX.as_usize() - 1), SmallIndex::MAX.as_usize()));",
          "    assert!(_ == format!(\"binary-union({}, {})\", (SmallIndex::MAX.as_usize() - 1), SmallIndex::MAX.as_usize()));",
          "    let expected = format!(\"binary-union({}, {})\", (SmallIndex::MAX.as_usize() - 1), SmallIndex::MAX.as_usize());",
          "    assert_eq!(_, expected);",
          "    assert!(!_.contains(\"FAIL\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alt1 = StateID(SmallIndex::new_unchecked(0));",
          "    let alt2 = StateID(SmallIndex::new_unchecked(SmallIndex::MAX.as_usize()));",
          "    let state = State::BinaryUnion { alt1, alt2 };",
          "    let _ = format!(\"{:?}\", state);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"binary-union({}, {})\", alt1.as_usize(), alt2.as_usize())",
          "    write!(f, \"MATCH({:?})\", pattern_id.as_usize())",
          "    write!(f, \"sparse({})\", rs)",
          "    write!(f, \"dense({})\", dense.iter())",
          "    write!(f, \"{:?} => {:?}\", look, next.as_usize())",
          "    write!(f, \"capture(pid={:?}, group={:?}, slot={:?}) => {:?}\", pattern_id.as_usize(), group_index.as_usize(), slot.as_usize(), next.as_usize())",
          "    write!(f, \"FAIL\")"
        ],
        "code": [
          "{",
          "    let alt1 = StateID(SmallIndex::new_unchecked(0));",
          "    let alt2 = StateID(SmallIndex::new_unchecked(SmallIndex::MAX.as_usize()));",
          "    let state = State::BinaryUnion { alt1, alt2 };",
          "    let _ = format!(\"{:?}\", state);",
          "    write!(f, \"binary-union({}, {})\", alt1.as_usize(), alt2.as_usize())",
          "    write!(f, \"MATCH({:?})\", pattern_id.as_usize())",
          "    write!(f, \"sparse({})\", rs)",
          "    write!(f, \"dense({})\", dense.iter())",
          "    write!(f, \"{:?} => {:?}\", look, next.as_usize())",
          "    write!(f, \"capture(pid={:?}, group={:?}, slot={:?}) => {:?}\", pattern_id.as_usize(), group_index.as_usize(), slot.as_usize(), next.as_usize())",
          "    write!(f, \"FAIL\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alt1 = StateID(SmallIndex::new_unchecked(SmallIndex::MAX.as_usize() - 1));",
          "    let alt2 = StateID(SmallIndex::new_unchecked(0));",
          "    let state = State::BinaryUnion { alt1, alt2 };",
          "    let _ = format!(\"{:?}\", state);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"binary-union({}, {})\", alt1.as_usize(), alt2.as_usize())",
          "    write!(f, \"MATCH({:?})\", pattern_id.as_usize())",
          "    write!(f, \"FAIL\")",
          "    write!(f, \"capture(pid={:?}, group={:?}, slot={:?}) => {:?}\", pattern_id.as_usize(), group_index.as_usize(), slot.as_usize(), next.as_usize())",
          "    write!(f, \"union({})\", alts)",
          "    write!(f, \"dense({})\", rs)",
          "    write!(f, \"sparse({})\", rs)",
          "    write!(f, \"{:?} => {:?}\", look, next.as_usize())"
        ],
        "code": [
          "{",
          "    let alt1 = StateID(SmallIndex::new_unchecked(SmallIndex::MAX.as_usize() - 1));",
          "    let alt2 = StateID(SmallIndex::new_unchecked(0));",
          "    let state = State::BinaryUnion { alt1, alt2 };",
          "    let _ = format!(\"{:?}\", state);",
          "    write!(f, \"binary-union({}, {})\", alt1.as_usize(), alt2.as_usize())",
          "    write!(f, \"MATCH({:?})\", pattern_id.as_usize())",
          "    write!(f, \"FAIL\")",
          "    write!(f, \"capture(pid={:?}, group={:?}, slot={:?}) => {:?}\", pattern_id.as_usize(), group_index.as_usize(), slot.as_usize(), next.as_usize())",
          "    write!(f, \"union({})\", alts)",
          "    write!(f, \"dense({})\", rs)",
          "    write!(f, \"sparse({})\", rs)",
          "    write!(f, \"{:?} => {:?}\", look, next.as_usize())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]