[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = StateID(SmallIndex::new_unchecked(1));",
          "    let transitions = Box::new([state_id]);",
          "    let dense = DenseTransitions { transitions };",
          "    let state = State::Dense(dense);",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{:?}\", state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state_id.as_usize(), 1);",
          "    assert_eq!(transitions.len(), 1);",
          "    assert!(matches!(state, State::Dense(_)));",
          "    assert_eq!(output, \"dense(\\n    1\\n)\");"
        ],
        "code": [
          "{",
          "    let state_id = StateID(SmallIndex::new_unchecked(1));",
          "    let transitions = Box::new([state_id]);",
          "    let dense = DenseTransitions { transitions };",
          "    let state = State::Dense(dense);",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{:?}\", state);",
          "    assert_eq!(state_id.as_usize(), 1);",
          "    assert_eq!(transitions.len(), 1);",
          "    assert!(matches!(state, State::Dense(_)));",
          "    assert_eq!(output, \"dense(\\n    1\\n)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transitions: Box<[StateID]> = Box::new([]);",
          "    let dense = DenseTransitions { transitions };",
          "    let state = State::Dense(dense);",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{:?}\", state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"dense()\");",
          "    assert!(output.contains(\"dense(\"));",
          "    assert!(output.ends_with(\")\"));",
          "    assert!(output.len() > 0);",
          "    assert!(output.matches(\"dense\").count() == 1);",
          "    assert!(output.contains(\"transitions\"));"
        ],
        "code": [
          "{",
          "    let transitions: Box<[StateID]> = Box::new([]);",
          "    let dense = DenseTransitions { transitions };",
          "    let state = State::Dense(dense);",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{:?}\", state);",
          "    assert_eq!(output, \"dense()\");",
          "    assert!(output.contains(\"dense(\"));",
          "    assert!(output.ends_with(\")\"));",
          "    assert!(output.len() > 0);",
          "    assert!(output.matches(\"dense\").count() == 1);",
          "    assert!(output.contains(\"transitions\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]