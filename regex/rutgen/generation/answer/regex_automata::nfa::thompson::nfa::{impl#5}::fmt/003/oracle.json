[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestState {",
          "        state: State,",
          "    }",
          "",
          "    let next_id = StateID(SmallIndex::new_unchecked(1));",
          "    let pattern_id = PatternID(SmallIndex::new_unchecked(2));",
          "    let group_index = SmallIndex::new_unchecked(0);",
          "    let slot = SmallIndex::new_unchecked(1);",
          "",
          "    let capture_state = State::Capture {",
          "        next: next_id,",
          "        pattern_id,",
          "        group_index,",
          "        slot,",
          "    };",
          "",
          "    let test_state = TestState { state: capture_state };",
          "",
          "    let _ = format!(\"{:?}\", test_state.state);",
          "}"
        ],
        "oracle": [
          "    format!(\"{:?}\", test_state.state) == \"capture(pid=2, group=0, slot=1) => 1\""
        ],
        "code": [
          "{",
          "    struct TestState {",
          "        state: State,",
          "    }",
          "",
          "    let next_id = StateID(SmallIndex::new_unchecked(1));",
          "    let pattern_id = PatternID(SmallIndex::new_unchecked(2));",
          "    let group_index = SmallIndex::new_unchecked(0);",
          "    let slot = SmallIndex::new_unchecked(1);",
          "",
          "    let capture_state = State::Capture {",
          "        next: next_id,",
          "        pattern_id,",
          "        group_index,",
          "        slot,",
          "    };",
          "",
          "    let test_state = TestState { state: capture_state };",
          "",
          "    let _ = format!(\"{:?}\", test_state.state);",
          "    format!(\"{:?}\", test_state.state) == \"capture(pid=2, group=0, slot=1) => 1\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestState {",
          "        state: State,",
          "    }",
          "",
          "    let next_id = StateID(SmallIndex::new_unchecked(1));",
          "    let pattern_id = PatternID(SmallIndex::new_unchecked(2));",
          "    let group_index = SmallIndex::new_unchecked(SmallIndex::LIMIT - 1);",
          "    let slot = SmallIndex::new_unchecked(SmallIndex::LIMIT - 1);",
          "",
          "    let capture_state = State::Capture {",
          "        next: next_id,",
          "        pattern_id,",
          "        group_index,",
          "        slot,",
          "    };",
          "",
          "    let test_state = TestState { state: capture_state };",
          "",
          "    let _ = format!(\"{:?}\", test_state.state);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"capture(pid={:?}, group={:?}, slot={:?}) => {:?}\", 2, SmallIndex::LIMIT - 1, SmallIndex::LIMIT - 1, 1)"
        ],
        "code": [
          "{",
          "    struct TestState {",
          "        state: State,",
          "    }",
          "",
          "    let next_id = StateID(SmallIndex::new_unchecked(1));",
          "    let pattern_id = PatternID(SmallIndex::new_unchecked(2));",
          "    let group_index = SmallIndex::new_unchecked(SmallIndex::LIMIT - 1);",
          "    let slot = SmallIndex::new_unchecked(SmallIndex::LIMIT - 1);",
          "",
          "    let capture_state = State::Capture {",
          "        next: next_id,",
          "        pattern_id,",
          "        group_index,",
          "        slot,",
          "    };",
          "",
          "    let test_state = TestState { state: capture_state };",
          "",
          "    let _ = format!(\"{:?}\", test_state.state);",
          "    write!(f, \"capture(pid={:?}, group={:?}, slot={:?}) => {:?}\", 2, SmallIndex::LIMIT - 1, SmallIndex::LIMIT - 1, 1)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]