[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"[[:loower:]]\"; // Invalid POSIX class due to duplicate colons",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.maybe_parse_posix_class(); // Should return None",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.maybe_parse_posix_class(), None);"
        ],
        "code": [
          "{",
          "    let pattern = \"[[:loower:]]\"; // Invalid POSIX class due to duplicate colons",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.maybe_parse_posix_class(); // Should return None",
          "    assert_eq!(parser.maybe_parse_posix_class(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"[[:alnum:]A]\"; // Well-formed on the outside but contains invalid class",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    ",
          "    parser.bump(); // Move past '['",
          "    parser.char.set(Some(':')); // Next character should be ':'",
          "    ",
          "    parser.maybe_parse_posix_class(); // Should return None",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert_eq!(parser.char.get(), Some(':'));",
          "    assert_eq!(parser.bump(), true);",
          "    assert_eq!(parser.char.get(), Some('A'));",
          "    assert_eq!(parser.bump_if(\":]\"), false);",
          "    assert_eq!(parser.maybe_parse_posix_class(), None);"
        ],
        "code": [
          "{",
          "    let pattern = \"[[:alnum:]A]\"; // Well-formed on the outside but contains invalid class",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    ",
          "    parser.bump(); // Move past '['",
          "    parser.char.set(Some(':')); // Next character should be ':'",
          "    ",
          "    parser.maybe_parse_posix_class(); // Should return None",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert_eq!(parser.char.get(), Some(':'));",
          "    assert_eq!(parser.bump(), true);",
          "    assert_eq!(parser.char.get(), Some('A'));",
          "    assert_eq!(parser.bump_if(\":]\"), false);",
          "    assert_eq!(parser.maybe_parse_posix_class(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"[[:digit:]\"; // Missing closing bracket",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    ",
          "    parser.bump(); // Move past '['",
          "    parser.char.set(Some(':')); // Next character should be ':'",
          "    ",
          "    parser.bump(); // Move past ':'",
          "    parser.bump(); // Move past 'digit'",
          "    ",
          "    parser.maybe_parse_posix_class(); // Should return None",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.maybe_parse_posix_class(), None);"
        ],
        "code": [
          "{",
          "    let pattern = \"[[:digit:]\"; // Missing closing bracket",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    ",
          "    parser.bump(); // Move past '['",
          "    parser.char.set(Some(':')); // Next character should be ':'",
          "    ",
          "    parser.bump(); // Move past ':'",
          "    parser.bump(); // Move past 'digit'",
          "    ",
          "    parser.maybe_parse_posix_class(); // Should return None",
          "    assert_eq!(parser.maybe_parse_posix_class(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]