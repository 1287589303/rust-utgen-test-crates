[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"[[:alnum:]A]\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.maybe_parse_posix_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.pos.get(), 16);",
          "    assert_eq!(parser.char.get(), Some('A'));",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.flags.borrow().case_insensitive);",
          "    assert!(parser.flags.borrow().multi_line);",
          "    assert!(parser.flags.borrow().dot_matches_new_line);",
          "    assert!(parser.flags.borrow().swap_greed);",
          "    assert!(parser.flags.borrow().crlf);",
          "    assert!(parser.flags.borrow().ignore_whitespace);"
        ],
        "code": [
          "{",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"[[:alnum:]A]\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.maybe_parse_posix_class();",
          "    assert_eq!(parser.pos.get(), 16);",
          "    assert_eq!(parser.char.get(), Some('A'));",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.flags.borrow().case_insensitive);",
          "    assert!(parser.flags.borrow().multi_line);",
          "    assert!(parser.flags.borrow().dot_matches_new_line);",
          "    assert!(parser.flags.borrow().swap_greed);",
          "    assert!(parser.flags.borrow().crlf);",
          "    assert!(parser.flags.borrow().ignore_whitespace);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"[[:loower:]]\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.maybe_parse_posix_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.pos.get(), 9);",
          "    assert_eq!(parser.char.get(), Some(']'));",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.flags.borrow().case_insensitive == false);",
          "    assert!(parser.flags.borrow().multi_line == false);",
          "    assert!(parser.flags.borrow().dot_matches_new_line == false);",
          "    assert!(parser.flags.borrow().swap_greed == false);",
          "    assert!(parser.flags.borrow().crlf == false);",
          "    assert!(parser.flags.borrow().ignore_whitespace == false);",
          "    assert_eq!(parser.capture_names.borrow().len(), 0);",
          "    assert!(parser.capture_names.borrow().iter().all(|name| name.is_empty()));",
          "    assert!(parser.is_done() == false);",
          "    assert!(matches!(parser.maybe_parse_posix_class(), Some(_)));"
        ],
        "code": [
          "{",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"[[:loower:]]\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.maybe_parse_posix_class();",
          "    assert_eq!(parser.pos.get(), 9);",
          "    assert_eq!(parser.char.get(), Some(']'));",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.flags.borrow().case_insensitive == false);",
          "    assert!(parser.flags.borrow().multi_line == false);",
          "    assert!(parser.flags.borrow().dot_matches_new_line == false);",
          "    assert!(parser.flags.borrow().swap_greed == false);",
          "    assert!(parser.flags.borrow().crlf == false);",
          "    assert!(parser.flags.borrow().ignore_whitespace == false);",
          "    assert_eq!(parser.capture_names.borrow().len(), 0);",
          "    assert!(parser.capture_names.borrow().iter().all(|name| name.is_empty()));",
          "    assert!(parser.is_done() == false);",
          "    assert!(matches!(parser.maybe_parse_posix_class(), Some(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"[[:lower:][:upper:]B]\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.maybe_parse_posix_class();",
          "}"
        ],
        "oracle": [
          "    parser.char.set(Some('['));",
          "    parser.bump();",
          "    assert_eq!(parser.char(), ':');",
          "    parser.bump();",
          "    parser.bump_if(\":]\");",
          "    let name_start = parser.pos();",
          "    parser.is_done();",
          "    let name = &parser.pattern[name_start..parser.pos()];",
          "    assert!(name == \"lower\" || name == \"upper\");",
          "    let result = parser.maybe_parse_posix_class();",
          "    assert!(result.is_some());"
        ],
        "code": [
          "{",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"[[:lower:][:upper:]B]\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.maybe_parse_posix_class();",
          "    parser.char.set(Some('['));",
          "    parser.bump();",
          "    assert_eq!(parser.char(), ':');",
          "    parser.bump();",
          "    parser.bump_if(\":]\");",
          "    let name_start = parser.pos();",
          "    parser.is_done();",
          "    let name = &parser.pattern[name_start..parser.pos()];",
          "    assert!(name == \"lower\" || name == \"upper\");",
          "    let result = parser.maybe_parse_posix_class();",
          "    assert!(result.is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"[[:lower:][:upper:]A]\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.maybe_parse_posix_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.pos.get(), 14);",
          "    assert_eq!(parser.char.get(), Some('A'));",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.flags.borrow().case_insensitive);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(parser.is_done() == false);",
          "    assert!(parser.bump_if(\":]\") == true);",
          "    assert!(parser.bump() == true);",
          "    assert!(parser.char.get() == Some('A'));",
          "    assert!(parser.depth.get() == 0);"
        ],
        "code": [
          "{",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"[[:lower:][:upper:]A]\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.maybe_parse_posix_class();",
          "    assert_eq!(parser.pos.get(), 14);",
          "    assert_eq!(parser.char.get(), Some('A'));",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.flags.borrow().case_insensitive);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(parser.is_done() == false);",
          "    assert!(parser.bump_if(\":]\") == true);",
          "    assert!(parser.bump() == true);",
          "    assert!(parser.char.get() == Some('A'));",
          "    assert!(parser.depth.get() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]