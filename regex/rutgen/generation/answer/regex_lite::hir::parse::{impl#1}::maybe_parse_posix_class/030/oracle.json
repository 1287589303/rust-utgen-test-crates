[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 3, flags: Flags::default() };",
          "    let pattern = \"[[:lower:]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![\"lower\".to_string()]),",
          "    };",
          "    parser.char.set(Some(':'));",
          "    parser.bump(); // Simulate a bump",
          "    parser.bump(); // Move past the first ':'",
          "    parser.char.set(Some('^')); // Set char to '^'",
          "    parser.bump(); // Move past the '^'",
          "    parser.char.set(Some(':')); // Set char to ':'",
          "    parser.is_done = false; // Set is_done to false",
          "    parser.bump_if(\":]\"); // Simulate successful bump_if",
          "    let result = parser.maybe_parse_posix_class();",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 3, flags: Flags::default() };",
          "    let pattern = \"[[:lower:]\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('[')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![\"lower\".to_string()]) };",
          "    parser.char.set(Some(':'));",
          "    parser.bump();",
          "    parser.bump();",
          "    parser.char.set(Some('^'));",
          "    parser.bump();",
          "    parser.char.set(Some(':'));",
          "    parser.is_done = false;",
          "    parser.bump_if(\":]\");",
          "    let result = parser.maybe_parse_posix_class();",
          "    assert!(result.is_some());",
          "    let class = result.unwrap();",
          "    assert_eq!(class.ranges.len(), 1);",
          "    assert!(class.ranges[0].start == 'a');",
          "    assert!(class.ranges[0].end == 'z');",
          "    assert!(class.ranges.iter().all(|r| r.start <= r.end));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 3, flags: Flags::default() };",
          "    let pattern = \"[[:lower:]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![\"lower\".to_string()]),",
          "    };",
          "    parser.char.set(Some(':'));",
          "    parser.bump(); // Simulate a bump",
          "    parser.bump(); // Move past the first ':'",
          "    parser.char.set(Some('^')); // Set char to '^'",
          "    parser.bump(); // Move past the '^'",
          "    parser.char.set(Some(':')); // Set char to ':'",
          "    parser.is_done = false; // Set is_done to false",
          "    parser.bump_if(\":]\"); // Simulate successful bump_if",
          "    let result = parser.maybe_parse_posix_class();",
          "    let config = Config { nest_limit: 3, flags: Flags::default() };",
          "    let pattern = \"[[:lower:]\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('[')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![\"lower\".to_string()]) };",
          "    parser.char.set(Some(':'));",
          "    parser.bump();",
          "    parser.bump();",
          "    parser.char.set(Some('^'));",
          "    parser.bump();",
          "    parser.char.set(Some(':'));",
          "    parser.is_done = false;",
          "    parser.bump_if(\":]\");",
          "    let result = parser.maybe_parse_posix_class();",
          "    assert!(result.is_some());",
          "    let class = result.unwrap();",
          "    assert_eq!(class.ranges.len(), 1);",
          "    assert!(class.ranges[0].start == 'a');",
          "    assert!(class.ranges[0].end == 'z');",
          "    assert!(class.ranges.iter().all(|r| r.start <= r.end));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 3, flags: Flags::default() };",
          "    let pattern = \"[[:loower:]\"; ",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![\"loower\".to_string()]),",
          "    };",
          "    parser.char.set(Some(':'));",
          "    parser.bump(); // Simulate a bump",
          "    parser.bump(); // Move past the first ':'",
          "    parser.char.set(Some('^')); // Set char to '^'",
          "    parser.bump(); // Move past the '^'",
          "    parser.char.set(Some(':')); // Set char to ':'",
          "    parser.is_done = false; // Set is_done to false",
          "    parser.bump_if(\":]\"); // Simulate successful bump_if",
          "    let result = parser.maybe_parse_posix_class();",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 3, flags: Flags::default() };",
          "    let pattern = \"[[:loower:]\";",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('[')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![\"loower\".to_string()]),",
          "    };",
          "    parser.char.set(Some(':'));",
          "    parser.bump(); // Simulate a bump",
          "    parser.bump(); // Move past the first ':'",
          "    parser.char.set(Some('^')); // Set char to '^'",
          "    parser.bump(); // Move past the '^'",
          "    parser.char.set(Some(':')); // Set char to ':'",
          "    parser.is_done = false; // Set is_done to false",
          "    parser.bump_if(\":]\"); // Simulate successful bump_if",
          "    let result = parser.maybe_parse_posix_class();",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().ranges.len(), expected_range_count);",
          "    assert_eq!(result.unwrap().negated, true);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 3, flags: Flags::default() };",
          "    let pattern = \"[[:loower:]\"; ",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![\"loower\".to_string()]),",
          "    };",
          "    parser.char.set(Some(':'));",
          "    parser.bump(); // Simulate a bump",
          "    parser.bump(); // Move past the first ':'",
          "    parser.char.set(Some('^')); // Set char to '^'",
          "    parser.bump(); // Move past the '^'",
          "    parser.char.set(Some(':')); // Set char to ':'",
          "    parser.is_done = false; // Set is_done to false",
          "    parser.bump_if(\":]\"); // Simulate successful bump_if",
          "    let result = parser.maybe_parse_posix_class();",
          "    let config = Config { nest_limit: 3, flags: Flags::default() };",
          "    let pattern = \"[[:loower:]\";",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('[')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![\"loower\".to_string()]),",
          "    };",
          "    parser.char.set(Some(':'));",
          "    parser.bump(); // Simulate a bump",
          "    parser.bump(); // Move past the first ':'",
          "    parser.char.set(Some('^')); // Set char to '^'",
          "    parser.bump(); // Move past the '^'",
          "    parser.char.set(Some(':')); // Set char to ':'",
          "    parser.is_done = false; // Set is_done to false",
          "    parser.bump_if(\":]\"); // Simulate successful bump_if",
          "    let result = parser.maybe_parse_posix_class();",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().ranges.len(), expected_range_count);",
          "    assert_eq!(result.unwrap().negated, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]