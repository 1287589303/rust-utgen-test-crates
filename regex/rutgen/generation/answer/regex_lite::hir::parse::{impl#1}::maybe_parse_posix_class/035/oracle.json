[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 100,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"[[:alnum:]]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.maybe_parse_posix_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char.get(), Some('['));",
          "    assert_eq!(parser.pos.get(), 0);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.flags.borrow().case_insensitive == false);",
          "    assert!(parser.flags.borrow().multi_line == false);",
          "    assert!(parser.flags.borrow().dot_matches_new_line == false);",
          "    assert!(parser.flags.borrow().swap_greed == false);",
          "    assert!(parser.flags.borrow().crlf == false);",
          "    assert!(parser.flags.borrow().ignore_whitespace == false);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    let class = parser.maybe_parse_posix_class();",
          "    assert!(class.is_some());",
          "    let class_value = class.unwrap();",
          "    assert_eq!(class_value.ranges.len(), 3);   // expected ranges for alnum class",
          "    assert_eq!(class_value.ranges[0].start, '0');",
          "    assert_eq!(class_value.ranges[0].end, '9');",
          "    assert_eq!(class_value.ranges[1].start, 'A');",
          "    assert_eq!(class_value.ranges[1].end, 'Z');",
          "    assert_eq!(class_value.ranges[2].start, 'a');",
          "    assert_eq!(class_value.ranges[2].end, 'z');"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 100,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"[[:alnum:]]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.maybe_parse_posix_class();",
          "    assert_eq!(parser.char.get(), Some('['));",
          "    assert_eq!(parser.pos.get(), 0);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.flags.borrow().case_insensitive == false);",
          "    assert!(parser.flags.borrow().multi_line == false);",
          "    assert!(parser.flags.borrow().dot_matches_new_line == false);",
          "    assert!(parser.flags.borrow().swap_greed == false);",
          "    assert!(parser.flags.borrow().crlf == false);",
          "    assert!(parser.flags.borrow().ignore_whitespace == false);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    let class = parser.maybe_parse_posix_class();",
          "    assert!(class.is_some());",
          "    let class_value = class.unwrap();",
          "    assert_eq!(class_value.ranges.len(), 3);   // expected ranges for alnum class",
          "    assert_eq!(class_value.ranges[0].start, '0');",
          "    assert_eq!(class_value.ranges[0].end, '9');",
          "    assert_eq!(class_value.ranges[1].start, 'A');",
          "    assert_eq!(class_value.ranges[1].end, 'Z');",
          "    assert_eq!(class_value.ranges[2].start, 'a');",
          "    assert_eq!(class_value.ranges[2].end, 'z');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 100,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"[[:lower:]]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.maybe_parse_posix_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.pos.get(), 12);",
          "    assert_eq!(parser.char.get(), Some(']'));",
          "    assert!(parser.flags.borrow().case_insensitive == false);",
          "    assert!(parser.flags.borrow().multi_line == false);",
          "    assert!(parser.flags.borrow().dot_matches_new_line == false);",
          "    assert!(parser.flags.borrow().swap_greed == false);",
          "    assert!(parser.flags.borrow().crlf == false);",
          "    assert!(parser.flags.borrow().ignore_whitespace == false);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(parser.capture_index.get() == 0);",
          "    assert!(parser.depth.get() == 0);",
          "    assert!(parser.capture_names.borrow().is_empty() == true);",
          "    assert!(parser.maybe_parse_posix_class().is_some());",
          "    assert!(parser.maybe_parse_posix_class().unwrap().ranges.len() > 0);"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 100,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"[[:lower:]]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.maybe_parse_posix_class();",
          "    assert_eq!(parser.pos.get(), 12);",
          "    assert_eq!(parser.char.get(), Some(']'));",
          "    assert!(parser.flags.borrow().case_insensitive == false);",
          "    assert!(parser.flags.borrow().multi_line == false);",
          "    assert!(parser.flags.borrow().dot_matches_new_line == false);",
          "    assert!(parser.flags.borrow().swap_greed == false);",
          "    assert!(parser.flags.borrow().crlf == false);",
          "    assert!(parser.flags.borrow().ignore_whitespace == false);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(parser.capture_index.get() == 0);",
          "    assert!(parser.depth.get() == 0);",
          "    assert!(parser.capture_names.borrow().is_empty() == true);",
          "    assert!(parser.maybe_parse_posix_class().is_some());",
          "    assert!(parser.maybe_parse_posix_class().unwrap().ranges.len() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 100,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"[[:loower:]]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.maybe_parse_posix_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char.get(), Some('['));",
          "    assert_eq!(parser.pos.get(), 0);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(parser.flags.borrow().case_insensitive == false);",
          "    assert!(parser.flags.borrow().multi_line == false);",
          "    assert!(parser.flags.borrow().dot_matches_new_line == false);",
          "    assert!(parser.flags.borrow().swap_greed == false);",
          "    assert!(parser.flags.borrow().crlf == false);",
          "    assert!(parser.flags.borrow().ignore_whitespace == false);",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.maybe_parse_posix_class(), None);"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 100,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"[[:loower:]]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.maybe_parse_posix_class();",
          "    assert_eq!(parser.char.get(), Some('['));",
          "    assert_eq!(parser.pos.get(), 0);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(parser.flags.borrow().case_insensitive == false);",
          "    assert!(parser.flags.borrow().multi_line == false);",
          "    assert!(parser.flags.borrow().dot_matches_new_line == false);",
          "    assert!(parser.flags.borrow().swap_greed == false);",
          "    assert!(parser.flags.borrow().crlf == false);",
          "    assert!(parser.flags.borrow().ignore_whitespace == false);",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.maybe_parse_posix_class(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 100,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"[[:^alpha:]]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.maybe_parse_posix_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char.get(), Some('['));",
          "    assert_eq!(parser.pos.get(), 0);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.flags.borrow().case_insensitive == false);",
          "    assert!(parser.flags.borrow().multi_line == false);",
          "    assert!(parser.flags.borrow().dot_matches_new_line == false);",
          "    assert!(parser.flags.borrow().swap_greed == false);",
          "    assert!(parser.flags.borrow().crlf == false);",
          "    assert!(parser.flags.borrow().ignore_whitespace == false);",
          "    assert_eq!(parser.capture_names.borrow().len(), 0);",
          "    let class_option = parser.maybe_parse_posix_class();",
          "    assert!(class_option.is_some());",
          "    let class = class_option.unwrap();",
          "    assert_eq!(class.ranges.len(), 1);",
          "    assert_eq!(class.ranges[0].start, 'a');",
          "    assert_eq!(class.ranges[0].end, 'z');"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 100,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"[[:^alpha:]]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.maybe_parse_posix_class();",
          "    assert_eq!(parser.char.get(), Some('['));",
          "    assert_eq!(parser.pos.get(), 0);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.flags.borrow().case_insensitive == false);",
          "    assert!(parser.flags.borrow().multi_line == false);",
          "    assert!(parser.flags.borrow().dot_matches_new_line == false);",
          "    assert!(parser.flags.borrow().swap_greed == false);",
          "    assert!(parser.flags.borrow().crlf == false);",
          "    assert!(parser.flags.borrow().ignore_whitespace == false);",
          "    assert_eq!(parser.capture_names.borrow().len(), 0);",
          "    let class_option = parser.maybe_parse_posix_class();",
          "    assert!(class_option.is_some());",
          "    let class = class_option.unwrap();",
          "    assert_eq!(class.ranges.len(), 1);",
          "    assert_eq!(class.ranges[0].start, 'a');",
          "    assert_eq!(class.ranges[0].end, 'z');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 100,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"[[:upper:]A]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.maybe_parse_posix_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.pos.get(), 11);",
          "    assert_eq!(parser.char.get(), Some('A'));",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(!parser.flags.borrow().case_insensitive);",
          "    assert!(!parser.flags.borrow().ignore_whitespace);",
          "    assert!(!parser.flags.borrow().multi_line);",
          "    assert!(!parser.flags.borrow().dot_matches_new_line);",
          "    assert!(!parser.flags.borrow().swap_greed);",
          "    assert!(!parser.flags.borrow().crlf);"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 100,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"[[:upper:]A]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.maybe_parse_posix_class();",
          "    assert_eq!(parser.pos.get(), 11);",
          "    assert_eq!(parser.char.get(), Some('A'));",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(!parser.flags.borrow().case_insensitive);",
          "    assert!(!parser.flags.borrow().ignore_whitespace);",
          "    assert!(!parser.flags.borrow().multi_line);",
          "    assert!(!parser.flags.borrow().dot_matches_new_line);",
          "    assert!(!parser.flags.borrow().swap_greed);",
          "    assert!(!parser.flags.borrow().crlf);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]