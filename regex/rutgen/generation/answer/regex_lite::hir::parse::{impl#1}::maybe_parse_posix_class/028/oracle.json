[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"[[:alpha:]]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.maybe_parse_posix_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.maybe_parse_posix_class(), None);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"[[:alpha:]]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.maybe_parse_posix_class();",
          "    assert_eq!(parser.maybe_parse_posix_class(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"[[:lower:]]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.maybe_parse_posix_class();",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"[[:lower:]]\";",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('[')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    assert_eq!(parser.maybe_parse_posix_class(), Some(hir::Class::new(posix_class(\"lower\").unwrap())));",
          "    ",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"[[:loower:]]\";",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('[')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    assert_eq!(parser.maybe_parse_posix_class(), None);",
          "    ",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"[[:lower]\";",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('[')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    assert_eq!(parser.maybe_parse_posix_class(), None);",
          "    ",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"[[:upper:]]\";",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('[')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    assert_eq!(parser.maybe_parse_posix_class(), Some(hir::Class::new(posix_class(\"upper\").unwrap())));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"[[:lower:]]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.maybe_parse_posix_class();",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"[[:lower:]]\";",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('[')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    assert_eq!(parser.maybe_parse_posix_class(), Some(hir::Class::new(posix_class(\"lower\").unwrap())));",
          "    ",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"[[:loower:]]\";",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('[')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    assert_eq!(parser.maybe_parse_posix_class(), None);",
          "    ",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"[[:lower]\";",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('[')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    assert_eq!(parser.maybe_parse_posix_class(), None);",
          "    ",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"[[:upper:]]\";",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('[')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    assert_eq!(parser.maybe_parse_posix_class(), Some(hir::Class::new(posix_class(\"upper\").unwrap())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"[[:digit:]]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.maybe_parse_posix_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char(), Some('['));",
          "    assert_eq!(parser.pos.get(), 0);",
          "    assert!(parser.bump());",
          "    assert!(parser.char() == ':');",
          "    assert!(parser.bump());",
          "    assert_eq!(parser.char(), Some('^'));",
          "    assert!(parser.bump());",
          "    assert_eq!(parser.char(), Some(':'));",
          "    assert!(parser.is_done());",
          "    assert!(parser.maybe_parse_posix_class().is_none());"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"[[:digit:]]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.maybe_parse_posix_class();",
          "    assert_eq!(parser.char(), Some('['));",
          "    assert_eq!(parser.pos.get(), 0);",
          "    assert!(parser.bump());",
          "    assert!(parser.char() == ':');",
          "    assert!(parser.bump());",
          "    assert_eq!(parser.char(), Some('^'));",
          "    assert!(parser.bump());",
          "    assert_eq!(parser.char(), Some(':'));",
          "    assert!(parser.is_done());",
          "    assert!(parser.maybe_parse_posix_class().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"[[:space:]]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.maybe_parse_posix_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.maybe_parse_posix_class(), None);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"[[:space:]]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.maybe_parse_posix_class();",
          "    assert_eq!(parser.maybe_parse_posix_class(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"[[:upper:]A]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.maybe_parse_posix_class();",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"[[:upper:]A]\";",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('[')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.maybe_parse_posix_class();",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"[[:upper:]A]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.maybe_parse_posix_class();",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"[[:upper:]A]\";",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('[')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.maybe_parse_posix_class();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]