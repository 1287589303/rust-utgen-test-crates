[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State {",
          "        id: StateID(0),",
          "        is_match: false,",
          "        ntrans: 1,",
          "        input_ranges: &[0],",
          "        next: &[0],",
          "        pattern_ids: &[0],",
          "        accel: &[0],",
          "    };",
          "    let _ = state.id();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.id(), StateID(0));"
        ],
        "code": [
          "{",
          "    let state = State {",
          "        id: StateID(0),",
          "        is_match: false,",
          "        ntrans: 1,",
          "        input_ranges: &[0],",
          "        next: &[0],",
          "        pattern_ids: &[0],",
          "        accel: &[0],",
          "    };",
          "    let _ = state.id();",
          "    assert_eq!(state.id(), StateID(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State {",
          "        id: StateID(1),",
          "        is_match: false,",
          "        ntrans: 2,",
          "        input_ranges: &[0, 1],",
          "        next: &[0, 1],",
          "        pattern_ids: &[0, 1],",
          "        accel: &[0, 1],",
          "    };",
          "    let _ = state.id();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.id(), StateID(1));"
        ],
        "code": [
          "{",
          "    let state = State {",
          "        id: StateID(1),",
          "        is_match: false,",
          "        ntrans: 2,",
          "        input_ranges: &[0, 1],",
          "        next: &[0, 1],",
          "        pattern_ids: &[0, 1],",
          "        accel: &[0, 1],",
          "    };",
          "    let _ = state.id();",
          "    assert_eq!(state.id(), StateID(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State {",
          "        id: StateID(u32::MAX),",
          "        is_match: true,",
          "        ntrans: 3,",
          "        input_ranges: &[0, 1, 2],",
          "        next: &[0, 1, 2],",
          "        pattern_ids: &[0, 1, 2],",
          "        accel: &[0, 1, 2],",
          "    };",
          "    let _ = state.id();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.id(), StateID(u32::MAX));"
        ],
        "code": [
          "{",
          "    let state = State {",
          "        id: StateID(u32::MAX),",
          "        is_match: true,",
          "        ntrans: 3,",
          "        input_ranges: &[0, 1, 2],",
          "        next: &[0, 1, 2],",
          "        pattern_ids: &[0, 1, 2],",
          "        accel: &[0, 1, 2],",
          "    };",
          "    let _ = state.id();",
          "    assert_eq!(state.id(), StateID(u32::MAX));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]