[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let canonical_name: &'static str = \"Latin\"; // Assuming \"Latin\" is a valid script",
          "    let _result = script(canonical_name);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.is_ok(), true);",
          "    assert_eq!(_result.unwrap().set.len() > 0, true);",
          "    ",
          "    let canonical_name_invalid: &'static str = \"InvalidScript\"; // Assuming \"InvalidScript\" is an invalid script",
          "    let result_invalid = script(canonical_name_invalid);",
          "    assert_eq!(result_invalid.is_err(), true);",
          "    assert_eq!(result_invalid.unwrap_err(), Error::PropertyValueNotFound);"
        ],
        "code": [
          "{",
          "    let canonical_name: &'static str = \"Latin\"; // Assuming \"Latin\" is a valid script",
          "    let _result = script(canonical_name);",
          "    assert_eq!(_result.is_ok(), true);",
          "    assert_eq!(_result.unwrap().set.len() > 0, true);",
          "    ",
          "    let canonical_name_invalid: &'static str = \"InvalidScript\"; // Assuming \"InvalidScript\" is an invalid script",
          "    let result_invalid = script(canonical_name_invalid);",
          "    assert_eq!(result_invalid.is_err(), true);",
          "    assert_eq!(result_invalid.unwrap_err(), Error::PropertyValueNotFound);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let canonical_name: &'static str = \"NonExistingScript\"; // Non-existing script",
          "    let _result = script(canonical_name);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Err(Error::PropertyNotFound));",
          "    let canonical_name: &'static str = \"ExistingScript\"; // Existing script",
          "    let _result = script(canonical_name);",
          "    assert!(_result.is_ok());",
          "    assert!(matches!(_result, Ok(_)));",
          "    let canonical_name: &'static str = \"\"; // Empty script name",
          "    let _result = script(canonical_name);",
          "    assert_eq!(_result, Err(Error::PropertyValueNotFound));"
        ],
        "code": [
          "{",
          "    let canonical_name: &'static str = \"NonExistingScript\"; // Non-existing script",
          "    let _result = script(canonical_name);",
          "    assert_eq!(_result, Err(Error::PropertyNotFound));",
          "    let canonical_name: &'static str = \"ExistingScript\"; // Existing script",
          "    let _result = script(canonical_name);",
          "    assert!(_result.is_ok());",
          "    assert!(matches!(_result, Ok(_)));",
          "    let canonical_name: &'static str = \"\"; // Empty script name",
          "    let _result = script(canonical_name);",
          "    assert_eq!(_result, Err(Error::PropertyValueNotFound));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let canonical_name: &'static str = \"\"; // Empty string",
          "    let _result = script(canonical_name);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Err(Error::PropertyValueNotFound));",
          "    ",
          "    let canonical_name: &'static str = \"Latn\"; // Valid script name",
          "    let _result = script(canonical_name);",
          "    assert!(_result.is_ok());",
          "    ",
          "    let canonical_name: &'static str = \"InvalidScript\"; // Invalid script name",
          "    let _result = script(canonical_name);",
          "    assert_eq!(_result, Err(Error::PropertyValueNotFound));",
          "    ",
          "    let canonical_name: &'static str = \"Cyrl\"; // Valid script name",
          "    let _result = script(canonical_name);",
          "    assert!(_result.is_ok());"
        ],
        "code": [
          "{",
          "    let canonical_name: &'static str = \"\"; // Empty string",
          "    let _result = script(canonical_name);",
          "    assert_eq!(_result, Err(Error::PropertyValueNotFound));",
          "    ",
          "    let canonical_name: &'static str = \"Latn\"; // Valid script name",
          "    let _result = script(canonical_name);",
          "    assert!(_result.is_ok());",
          "    ",
          "    let canonical_name: &'static str = \"InvalidScript\"; // Invalid script name",
          "    let _result = script(canonical_name);",
          "    assert_eq!(_result, Err(Error::PropertyValueNotFound));",
          "    ",
          "    let canonical_name: &'static str = \"Cyrl\"; // Valid script name",
          "    let _result = script(canonical_name);",
          "    assert!(_result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let canonical_name: &'static str = \"ThisScriptNameIsWayTooLongForTheLimit\"; // Exceeds length limits",
          "    let _result = script(canonical_name);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Err(Error::PropertyNotFound));"
        ],
        "code": [
          "{",
          "    let canonical_name: &'static str = \"ThisScriptNameIsWayTooLongForTheLimit\"; // Exceeds length limits",
          "    let _result = script(canonical_name);",
          "    assert_eq!(_result, Err(Error::PropertyNotFound));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]