[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = thompson::NFA::always_match().unwrap();",
          "    let forward_dfa = DFA {",
          "        config: Config {},",
          "        nfa,",
          "        stride2: 1,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 0,",
          "    };",
          "    ",
          "    let regex = Regex {",
          "        forward: forward_dfa.clone(),",
          "        reverse: forward_dfa,",
          "    };",
          "    ",
          "    let input = Input::new(&[b'a', b'b', b'c']).anchored(Anchored::Yes);",
          "    ",
          "    regex.is_anchored(&input);",
          "}"
        ],
        "oracle": [
          "    let nfa = thompson::NFA::always_match().unwrap();",
          "    let forward_dfa = DFA { config: Config {}, nfa, stride2: 1, start_map: StartByteMap::default(), classes: ByteClasses::default(), quitset: ByteSet::default(), cache_capacity: 0, };",
          "    let regex = Regex { forward: forward_dfa.clone(), reverse: forward_dfa, };",
          "    let input = Input::new(&[b'a', b'b', b'c']).anchored(Anchored::Yes);",
          "    assert_eq!(regex.is_anchored(&input), true);"
        ],
        "code": [
          "{",
          "    let nfa = thompson::NFA::always_match().unwrap();",
          "    let forward_dfa = DFA {",
          "        config: Config {},",
          "        nfa,",
          "        stride2: 1,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 0,",
          "    };",
          "    ",
          "    let regex = Regex {",
          "        forward: forward_dfa.clone(),",
          "        reverse: forward_dfa,",
          "    };",
          "    ",
          "    let input = Input::new(&[b'a', b'b', b'c']).anchored(Anchored::Yes);",
          "    ",
          "    regex.is_anchored(&input);",
          "    let nfa = thompson::NFA::always_match().unwrap();",
          "    let forward_dfa = DFA { config: Config {}, nfa, stride2: 1, start_map: StartByteMap::default(), classes: ByteClasses::default(), quitset: ByteSet::default(), cache_capacity: 0, };",
          "    let regex = Regex { forward: forward_dfa.clone(), reverse: forward_dfa, };",
          "    let input = Input::new(&[b'a', b'b', b'c']).anchored(Anchored::Yes);",
          "    assert_eq!(regex.is_anchored(&input), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = thompson::NFA::always_match().unwrap();",
          "    let forward_dfa = DFA {",
          "        config: Config {},",
          "        nfa,",
          "        stride2: 1,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 0,",
          "    };",
          "    ",
          "    let regex = Regex {",
          "        forward: forward_dfa.clone(),",
          "        reverse: forward_dfa,",
          "    };",
          "    ",
          "    let input = Input::new(&[b'a', b'b', b'c']).anchored(Anchored::Pattern(PatternID::default()));",
          "    ",
          "    regex.is_anchored(&input);",
          "}"
        ],
        "oracle": [
          "    assert!(regex.is_anchored(&input));"
        ],
        "code": [
          "{",
          "    let nfa = thompson::NFA::always_match().unwrap();",
          "    let forward_dfa = DFA {",
          "        config: Config {},",
          "        nfa,",
          "        stride2: 1,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 0,",
          "    };",
          "    ",
          "    let regex = Regex {",
          "        forward: forward_dfa.clone(),",
          "        reverse: forward_dfa,",
          "    };",
          "    ",
          "    let input = Input::new(&[b'a', b'b', b'c']).anchored(Anchored::Pattern(PatternID::default()));",
          "    ",
          "    regex.is_anchored(&input);",
          "    assert!(regex.is_anchored(&input));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]