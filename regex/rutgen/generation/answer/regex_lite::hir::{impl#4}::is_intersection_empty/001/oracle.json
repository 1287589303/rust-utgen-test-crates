[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range1 = ClassRange { start: 'a', end: 'a' };",
          "    let range2 = ClassRange { start: 'b', end: 'b' };",
          "    range1.is_intersection_empty(&range2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(range1.is_intersection_empty(&range2), true);",
          "    ",
          "    let range3 = ClassRange { start: 'a', end: 'c' };",
          "    let range4 = ClassRange { start: 'd', end: 'f' };",
          "    assert_eq!(range3.is_intersection_empty(&range4), true);",
          "    ",
          "    let range5 = ClassRange { start: 'a', end: 'b' };",
          "    let range6 = ClassRange { start: 'b', end: 'c' };",
          "    assert_eq!(range5.is_intersection_empty(&range6), false);",
          "    ",
          "    let range7 = ClassRange { start: 'x', end: 'z' };",
          "    let range8 = ClassRange { start: 'y', end: 'y' };",
          "    assert_eq!(range7.is_intersection_empty(&range8), false);",
          "    ",
          "    let range9 = ClassRange { start: '1', end: '2' };",
          "    let range10 = ClassRange { start: '3', end: '4' };",
          "    assert_eq!(range9.is_intersection_empty(&range10), true);"
        ],
        "code": [
          "{",
          "    let range1 = ClassRange { start: 'a', end: 'a' };",
          "    let range2 = ClassRange { start: 'b', end: 'b' };",
          "    range1.is_intersection_empty(&range2);",
          "    assert_eq!(range1.is_intersection_empty(&range2), true);",
          "    ",
          "    let range3 = ClassRange { start: 'a', end: 'c' };",
          "    let range4 = ClassRange { start: 'd', end: 'f' };",
          "    assert_eq!(range3.is_intersection_empty(&range4), true);",
          "    ",
          "    let range5 = ClassRange { start: 'a', end: 'b' };",
          "    let range6 = ClassRange { start: 'b', end: 'c' };",
          "    assert_eq!(range5.is_intersection_empty(&range6), false);",
          "    ",
          "    let range7 = ClassRange { start: 'x', end: 'z' };",
          "    let range8 = ClassRange { start: 'y', end: 'y' };",
          "    assert_eq!(range7.is_intersection_empty(&range8), false);",
          "    ",
          "    let range9 = ClassRange { start: '1', end: '2' };",
          "    let range10 = ClassRange { start: '3', end: '4' };",
          "    assert_eq!(range9.is_intersection_empty(&range10), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range1 = ClassRange { start: 'a', end: 'c' };",
          "    let range2 = ClassRange { start: 'b', end: 'd' };",
          "    range1.is_intersection_empty(&range2);",
          "}"
        ],
        "oracle": [
          "    assert!(!range1.is_intersection_empty(&range2); // intersection is not empty (a-c and b-d overlap)",
          "    ",
          "    let range3 = ClassRange { start: 'e', end: 'g' };",
          "    assert!(range1.is_intersection_empty(&range3); // intersection is empty (a-c and e-g do not overlap)",
          "    ",
          "    let range4 = ClassRange { start: 'c', end: 'e' };",
          "    assert!(range1.is_intersection_empty(&range4); // intersection is empty (a-c and c-e touch but do not overlap)",
          "    ",
          "    let range5 = ClassRange { start: 'a', end: 'b' };",
          "    assert!(!range1.is_intersection_empty(&range5); // intersection is not empty (a-c and a-b overlap)",
          "    ",
          "    let range6 = ClassRange { start: 'x', end: 'y' };",
          "    assert!(range1.is_intersection_empty(&range6); // intersection is empty (a-c and x-y do not overlap)"
        ],
        "code": [
          "{",
          "    let range1 = ClassRange { start: 'a', end: 'c' };",
          "    let range2 = ClassRange { start: 'b', end: 'd' };",
          "    range1.is_intersection_empty(&range2);",
          "    assert!(!range1.is_intersection_empty(&range2); // intersection is not empty (a-c and b-d overlap)",
          "    ",
          "    let range3 = ClassRange { start: 'e', end: 'g' };",
          "    assert!(range1.is_intersection_empty(&range3); // intersection is empty (a-c and e-g do not overlap)",
          "    ",
          "    let range4 = ClassRange { start: 'c', end: 'e' };",
          "    assert!(range1.is_intersection_empty(&range4); // intersection is empty (a-c and c-e touch but do not overlap)",
          "    ",
          "    let range5 = ClassRange { start: 'a', end: 'b' };",
          "    assert!(!range1.is_intersection_empty(&range5); // intersection is not empty (a-c and a-b overlap)",
          "    ",
          "    let range6 = ClassRange { start: 'x', end: 'y' };",
          "    assert!(range1.is_intersection_empty(&range6); // intersection is empty (a-c and x-y do not overlap)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range1 = ClassRange { start: 'a', end: 'b' };",
          "    let range2 = ClassRange { start: 'c', end: 'd' };",
          "    range1.is_intersection_empty(&range2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(range1.is_intersection_empty(&range2), true);",
          "    assert_eq!(range1.is_intersection_empty(&ClassRange { start: 'b', end: 'c' }), true);",
          "    assert_eq!(range1.is_intersection_empty(&ClassRange { start: 'a', end: 'b' }), false);",
          "    assert_eq!(range1.is_intersection_empty(&ClassRange { start: 'a', end: 'c' }), false);",
          "    assert_eq!(ClassRange { start: 'e', end: 'f' }.is_intersection_empty(&range1), true);",
          "    assert_eq!(ClassRange { start: 'a', end: 'c' }.is_intersection_empty(&ClassRange { start: 'b', end: 'd' }), false);",
          "    assert_eq!(ClassRange { start: 'g', end: 'h' }.is_intersection_empty(&ClassRange { start: 'i', end: 'j' }), true);"
        ],
        "code": [
          "{",
          "    let range1 = ClassRange { start: 'a', end: 'b' };",
          "    let range2 = ClassRange { start: 'c', end: 'd' };",
          "    range1.is_intersection_empty(&range2);",
          "    assert_eq!(range1.is_intersection_empty(&range2), true);",
          "    assert_eq!(range1.is_intersection_empty(&ClassRange { start: 'b', end: 'c' }), true);",
          "    assert_eq!(range1.is_intersection_empty(&ClassRange { start: 'a', end: 'b' }), false);",
          "    assert_eq!(range1.is_intersection_empty(&ClassRange { start: 'a', end: 'c' }), false);",
          "    assert_eq!(ClassRange { start: 'e', end: 'f' }.is_intersection_empty(&range1), true);",
          "    assert_eq!(ClassRange { start: 'a', end: 'c' }.is_intersection_empty(&ClassRange { start: 'b', end: 'd' }), false);",
          "    assert_eq!(ClassRange { start: 'g', end: 'h' }.is_intersection_empty(&ClassRange { start: 'i', end: 'j' }), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range1 = ClassRange { start: 'a', end: 'b' };",
          "    let range2 = ClassRange { start: 'a', end: 'b' };",
          "    range1.is_intersection_empty(&range2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(range1.is_intersection_empty(&range2), false);",
          "    let range3 = ClassRange { start: 'c', end: 'd' };",
          "    assert_eq!(range1.is_intersection_empty(&range3), true);",
          "    let range4 = ClassRange { start: 'b', end: 'c' };",
          "    assert_eq!(range1.is_intersection_empty(&range4), true);",
          "    let range5 = ClassRange { start: 'a', end: 'c' };",
          "    assert_eq!(range1.is_intersection_empty(&range5), false);",
          "    let range6 = ClassRange { start: 'e', end: 'f' };",
          "    assert_eq!(range3.is_intersection_empty(&range6), true);",
          "    let range7 = ClassRange { start: 'b', end: 'd' };",
          "    assert_eq!(range3.is_intersection_empty(&range7), false);"
        ],
        "code": [
          "{",
          "    let range1 = ClassRange { start: 'a', end: 'b' };",
          "    let range2 = ClassRange { start: 'a', end: 'b' };",
          "    range1.is_intersection_empty(&range2);",
          "    assert_eq!(range1.is_intersection_empty(&range2), false);",
          "    let range3 = ClassRange { start: 'c', end: 'd' };",
          "    assert_eq!(range1.is_intersection_empty(&range3), true);",
          "    let range4 = ClassRange { start: 'b', end: 'c' };",
          "    assert_eq!(range1.is_intersection_empty(&range4), true);",
          "    let range5 = ClassRange { start: 'a', end: 'c' };",
          "    assert_eq!(range1.is_intersection_empty(&range5), false);",
          "    let range6 = ClassRange { start: 'e', end: 'f' };",
          "    assert_eq!(range3.is_intersection_empty(&range6), true);",
          "    let range7 = ClassRange { start: 'b', end: 'd' };",
          "    assert_eq!(range3.is_intersection_empty(&range7), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range1 = ClassRange { start: 'x', end: 'x' };",
          "    let range2 = ClassRange { start: 'y', end: 'y' };",
          "    range1.is_intersection_empty(&range2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(range1.is_intersection_empty(&range2), true);",
          "    ",
          "    let range3 = ClassRange { start: 'a', end: 'c' };",
          "    let range4 = ClassRange { start: 'd', end: 'f' };",
          "    assert_eq!(range3.is_intersection_empty(&range4), true);",
          "    ",
          "    let range5 = ClassRange { start: 'm', end: 'p' };",
          "    let range6 = ClassRange { start: 'n', end: 'q' };",
          "    assert_eq!(range5.is_intersection_empty(&range6), false);",
          "    ",
          "    let range7 = ClassRange { start: '1', end: '3' };",
          "    let range8 = ClassRange { start: '4', end: '6' };",
          "    assert_eq!(range7.is_intersection_empty(&range8), true);",
          "    ",
          "    let range9 = ClassRange { start: 'a', end: 'z' };",
          "    let range10 = ClassRange { start: 'z', end: 'z' };",
          "    assert_eq!(range9.is_intersection_empty(&range10), false);"
        ],
        "code": [
          "{",
          "    let range1 = ClassRange { start: 'x', end: 'x' };",
          "    let range2 = ClassRange { start: 'y', end: 'y' };",
          "    range1.is_intersection_empty(&range2);",
          "    assert_eq!(range1.is_intersection_empty(&range2), true);",
          "    ",
          "    let range3 = ClassRange { start: 'a', end: 'c' };",
          "    let range4 = ClassRange { start: 'd', end: 'f' };",
          "    assert_eq!(range3.is_intersection_empty(&range4), true);",
          "    ",
          "    let range5 = ClassRange { start: 'm', end: 'p' };",
          "    let range6 = ClassRange { start: 'n', end: 'q' };",
          "    assert_eq!(range5.is_intersection_empty(&range6), false);",
          "    ",
          "    let range7 = ClassRange { start: '1', end: '3' };",
          "    let range8 = ClassRange { start: '4', end: '6' };",
          "    assert_eq!(range7.is_intersection_empty(&range8), true);",
          "    ",
          "    let range9 = ClassRange { start: 'a', end: 'z' };",
          "    let range10 = ClassRange { start: 'z', end: 'z' };",
          "    assert_eq!(range9.is_intersection_empty(&range10), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range1 = ClassRange { start: 'a', end: 'a' };",
          "    let range2 = ClassRange { start: 'a', end: 'b' };",
          "    range1.is_intersection_empty(&range2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(range1.is_intersection_empty(&range2), false);",
          "    let range3 = ClassRange { start: 'b', end: 'c' };",
          "    assert_eq!(range1.is_intersection_empty(&range3), true);",
          "    let range4 = ClassRange { start: 'c', end: 'd' };",
          "    assert_eq!(range2.is_intersection_empty(&range4), true);",
          "    let range5 = ClassRange { start: 'a', end: 'c' };",
          "    assert_eq!(range1.is_intersection_empty(&range5), false);"
        ],
        "code": [
          "{",
          "    let range1 = ClassRange { start: 'a', end: 'a' };",
          "    let range2 = ClassRange { start: 'a', end: 'b' };",
          "    range1.is_intersection_empty(&range2);",
          "    assert_eq!(range1.is_intersection_empty(&range2), false);",
          "    let range3 = ClassRange { start: 'b', end: 'c' };",
          "    assert_eq!(range1.is_intersection_empty(&range3), true);",
          "    let range4 = ClassRange { start: 'c', end: 'd' };",
          "    assert_eq!(range2.is_intersection_empty(&range4), true);",
          "    let range5 = ClassRange { start: 'a', end: 'c' };",
          "    assert_eq!(range1.is_intersection_empty(&range5), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range1 = ClassRange { start: 'b', end: 'b' };",
          "    let range2 = ClassRange { start: 'a', end: 'b' };",
          "    range1.is_intersection_empty(&range2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(range1.is_intersection_empty(&range2), false);",
          "    assert_eq!(range1.is_intersection_empty(&ClassRange { start: 'c', end: 'd' }), true);",
          "    assert_eq!(range1.is_intersection_empty(&ClassRange { start: 'b', end: 'b' }), false);",
          "    assert_eq!(ClassRange { start: 'a', end: 'z' }.is_intersection_empty(&ClassRange { start: 'x', end: 'y' }), false);",
          "    assert_eq!(ClassRange { start: 'x', end: 'y' }.is_intersection_empty(&ClassRange { start: 'a', end: 'w' }), false);",
          "    assert_eq!(ClassRange { start: 'a', end: 'c' }.is_intersection_empty(&ClassRange { start: 'd', end: 'f' }), true);",
          "    assert_eq!(ClassRange { start: 'm', end: 'p' }.is_intersection_empty(&ClassRange { start: 'a', end: 'l' }), true);",
          "    assert_eq!(ClassRange { start: 'a', end: 'b' }.is_intersection_empty(&ClassRange { start: 'b', end: 'c' }), true);",
          "    assert_eq!(ClassRange { start: 'd', end: 'f' }.is_intersection_empty(&ClassRange { start: 'b', end: 'e' }), false);",
          "    assert_eq!(range1.is_intersection_empty(&ClassRange { start: 'b', end: 'c' }), false);"
        ],
        "code": [
          "{",
          "    let range1 = ClassRange { start: 'b', end: 'b' };",
          "    let range2 = ClassRange { start: 'a', end: 'b' };",
          "    range1.is_intersection_empty(&range2);",
          "    assert_eq!(range1.is_intersection_empty(&range2), false);",
          "    assert_eq!(range1.is_intersection_empty(&ClassRange { start: 'c', end: 'd' }), true);",
          "    assert_eq!(range1.is_intersection_empty(&ClassRange { start: 'b', end: 'b' }), false);",
          "    assert_eq!(ClassRange { start: 'a', end: 'z' }.is_intersection_empty(&ClassRange { start: 'x', end: 'y' }), false);",
          "    assert_eq!(ClassRange { start: 'x', end: 'y' }.is_intersection_empty(&ClassRange { start: 'a', end: 'w' }), false);",
          "    assert_eq!(ClassRange { start: 'a', end: 'c' }.is_intersection_empty(&ClassRange { start: 'd', end: 'f' }), true);",
          "    assert_eq!(ClassRange { start: 'm', end: 'p' }.is_intersection_empty(&ClassRange { start: 'a', end: 'l' }), true);",
          "    assert_eq!(ClassRange { start: 'a', end: 'b' }.is_intersection_empty(&ClassRange { start: 'b', end: 'c' }), true);",
          "    assert_eq!(ClassRange { start: 'd', end: 'f' }.is_intersection_empty(&ClassRange { start: 'b', end: 'e' }), false);",
          "    assert_eq!(range1.is_intersection_empty(&ClassRange { start: 'b', end: 'c' }), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]