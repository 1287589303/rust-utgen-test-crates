[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap();",
          "    let mut names = re.capture_names();",
          "    let _ = names.next(); // Should yield Some(None)",
          "    let _ = names.next(); // Should yield Some(Some(\"a\"))",
          "    let _ = names.next(); // Should yield Some(Some(\"b\"))",
          "    let _ = names.next(); // Should yield Some(None)",
          "    let _ = names.next(); // Should yield Some(Some(\"c\"))",
          "    let _ = names.next(); // Should yield None",
          "}"
        ],
        "oracle": [
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), Some(Some(\"a\")));",
          "    assert_eq!(names.next(), Some(Some(\"b\")));",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), Some(Some(\"c\")));",
          "    assert_eq!(names.next(), None);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap();",
          "    let mut names = re.capture_names();",
          "    let _ = names.next(); // Should yield Some(None)",
          "    let _ = names.next(); // Should yield Some(Some(\"a\"))",
          "    let _ = names.next(); // Should yield Some(Some(\"b\"))",
          "    let _ = names.next(); // Should yield Some(None)",
          "    let _ = names.next(); // Should yield Some(Some(\"c\"))",
          "    let _ = names.next(); // Should yield None",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), Some(Some(\"a\")));",
          "    assert_eq!(names.next(), Some(Some(\"b\")));",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), Some(Some(\"c\")));",
          "    assert_eq!(names.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\").unwrap();",
          "    let mut names = re.capture_names();",
          "    let _ = names.next(); // Should yield Some(None)",
          "    let _ = names.next(); // Should yield None",
          "}"
        ],
        "oracle": [
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), None);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\").unwrap();",
          "    let mut names = re.capture_names();",
          "    let _ = names.next(); // Should yield Some(None)",
          "    let _ = names.next(); // Should yield None",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"[a&&b]\").unwrap();",
          "    let mut names = re.capture_names();",
          "    let _ = names.next(); // Should yield Some(None)",
          "    let _ = names.next(); // Should yield None",
          "}"
        ],
        "oracle": [
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), None);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"[a&&b]\").unwrap();",
          "    let mut names = re.capture_names();",
          "    let _ = names.next(); // Should yield Some(None)",
          "    let _ = names.next(); // Should yield None",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"(a)\").unwrap();",
          "    let mut names = re.capture_names();",
          "    let _ = names.next(); // Should yield Some(None)",
          "    let _ = names.next(); // Should yield None",
          "}"
        ],
        "oracle": [
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), None);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"(a)\").unwrap();",
          "    let mut names = re.capture_names();",
          "    let _ = names.next(); // Should yield Some(None)",
          "    let _ = names.next(); // Should yield None",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"(abc)(def)\").unwrap();",
          "    let mut names = re.capture_names();",
          "    let _ = names.next(); // Should yield Some(None)",
          "    let _ = names.next(); // Should yield None",
          "}"
        ],
        "oracle": [
          "    let re = Regex::new(r\"(abc)(def)\").unwrap();",
          "    let mut names = re.capture_names();",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), None);",
          "    ",
          "    let re = Regex::new(r\"(?<a>abc)(?<b>def)\").unwrap();",
          "    let mut names = re.capture_names();",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), Some(Some(\"a\")));",
          "    assert_eq!(names.next(), Some(Some(\"b\")));",
          "    assert_eq!(names.next(), None);",
          "    ",
          "    let re = Regex::new(r\"(?<x>.)(?P<y>.)\").unwrap();",
          "    let mut names = re.capture_names();",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), Some(Some(\"x\")));",
          "    assert_eq!(names.next(), Some(Some(\"y\")));",
          "    assert_eq!(names.next(), None);",
          "    ",
          "    let re = Regex::new(r\"\").unwrap();",
          "    let mut names = re.capture_names();",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), None);",
          "    ",
          "    let re = Regex::new(r\"[a&&b]\").unwrap();",
          "    let mut names = re.capture_names();",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), None);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"(abc)(def)\").unwrap();",
          "    let mut names = re.capture_names();",
          "    let _ = names.next(); // Should yield Some(None)",
          "    let _ = names.next(); // Should yield None",
          "    let re = Regex::new(r\"(abc)(def)\").unwrap();",
          "    let mut names = re.capture_names();",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), None);",
          "    ",
          "    let re = Regex::new(r\"(?<a>abc)(?<b>def)\").unwrap();",
          "    let mut names = re.capture_names();",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), Some(Some(\"a\")));",
          "    assert_eq!(names.next(), Some(Some(\"b\")));",
          "    assert_eq!(names.next(), None);",
          "    ",
          "    let re = Regex::new(r\"(?<x>.)(?P<y>.)\").unwrap();",
          "    let mut names = re.capture_names();",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), Some(Some(\"x\")));",
          "    assert_eq!(names.next(), Some(Some(\"y\")));",
          "    assert_eq!(names.next(), None);",
          "    ",
          "    let re = Regex::new(r\"\").unwrap();",
          "    let mut names = re.capture_names();",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), None);",
          "    ",
          "    let re = Regex::new(r\"[a&&b]\").unwrap();",
          "    let mut names = re.capture_names();",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"(?:abc)(def)\").unwrap();",
          "    let mut names = re.capture_names();",
          "    let _ = names.next(); // Should yield Some(None)",
          "    let _ = names.next(); // Should yield None",
          "}"
        ],
        "oracle": [
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), Some(Some(\"def\")));",
          "    assert_eq!(names.next(), None);",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), None);",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), Some(Some(\"def\")));",
          "    assert_eq!(names.next(), None);",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), None);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"(?:abc)(def)\").unwrap();",
          "    let mut names = re.capture_names();",
          "    let _ = names.next(); // Should yield Some(None)",
          "    let _ = names.next(); // Should yield None",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), Some(Some(\"def\")));",
          "    assert_eq!(names.next(), None);",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), None);",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), Some(Some(\"def\")));",
          "    assert_eq!(names.next(), None);",
          "    assert_eq!(names.next(), Some(None));",
          "    assert_eq!(names.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]