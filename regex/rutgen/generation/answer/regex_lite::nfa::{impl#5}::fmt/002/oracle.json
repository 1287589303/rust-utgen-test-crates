[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Fail;",
          "    let mut output = String::new();",
          "    let result = state.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"FAIL\")",
          "    assert_eq!(result, Ok(()))",
          "    assert_eq!(output, \"FAIL\")"
        ],
        "code": [
          "{",
          "    let state = State::Fail;",
          "    let mut output = String::new();",
          "    let result = state.fmt(&mut output);",
          "    write!(f, \"FAIL\")",
          "    assert_eq!(result, Ok(()))",
          "    assert_eq!(output, \"FAIL\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Match;",
          "    let mut output = String::new();",
          "    let result = state.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"FAIL\")",
          "    write!(f, \"MATCH\")",
          "    let state = State::Fail;",
          "    let mut output = String::new();",
          "    let result = state.fmt(&mut output);",
          "    assert_eq!(output, \"FAIL\");",
          "    assert_eq!(result, Ok(()));",
          "    let state = State::Match;",
          "    let mut output = String::new();",
          "    let result = state.fmt(&mut output);",
          "    assert_eq!(output, \"MATCH\");",
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    let state = State::Match;",
          "    let mut output = String::new();",
          "    let result = state.fmt(&mut output);",
          "    write!(f, \"FAIL\")",
          "    write!(f, \"MATCH\")",
          "    let state = State::Fail;",
          "    let mut output = String::new();",
          "    let result = state.fmt(&mut output);",
          "    assert_eq!(output, \"FAIL\");",
          "    assert_eq!(result, Ok(()));",
          "    let state = State::Match;",
          "    let mut output = String::new();",
          "    let result = state.fmt(&mut output);",
          "    assert_eq!(output, \"MATCH\");",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]