[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let target_id: StateID = 0;",
          "    let state = State::Splits { targets: Vec::new(), reverse: false };",
          "    let mut output = String::new();",
          "    let result = write!(output, \"{:?}\", state);",
          "}"
        ],
        "oracle": [
          "    write!(output, \"{:?}\", state).unwrap();",
          "    assert_eq!(result.is_err(), true);",
          "    assert!(output.is_empty());",
          "    let state = State::Splits { targets: vec![target_id], reverse: false };",
          "    output.clear();",
          "    let result = write!(output, \"{:?}\", state);",
          "    assert_eq!(result.is_err(), false);",
          "    assert!(output.contains(\"splits(\"));"
        ],
        "code": [
          "{",
          "    let target_id: StateID = 0;",
          "    let state = State::Splits { targets: Vec::new(), reverse: false };",
          "    let mut output = String::new();",
          "    let result = write!(output, \"{:?}\", state);",
          "    write!(output, \"{:?}\", state).unwrap();",
          "    assert_eq!(result.is_err(), true);",
          "    assert!(output.is_empty());",
          "    let state = State::Splits { targets: vec![target_id], reverse: false };",
          "    output.clear();",
          "    let result = write!(output, \"{:?}\", state);",
          "    assert_eq!(result.is_err(), false);",
          "    assert!(output.contains(\"splits(\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let target_id: StateID = 1;",
          "    let state = State::Splits { targets: vec![target_id], reverse: true };",
          "    let mut output = String::new();",
          "    let result = write!(output, \"{:?}\", state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_err(), true);",
          "    assert!(output.is_empty());",
          "    assert_eq!(state, State::Splits { targets: vec![1], reverse: true });",
          "    assert_eq!(format!(\"{:?}\", state), \"splits(1)\");"
        ],
        "code": [
          "{",
          "    let target_id: StateID = 1;",
          "    let state = State::Splits { targets: vec![target_id], reverse: true };",
          "    let mut output = String::new();",
          "    let result = write!(output, \"{:?}\", state);",
          "    assert_eq!(result.is_err(), true);",
          "    assert!(output.is_empty());",
          "    assert_eq!(state, State::Splits { targets: vec![1], reverse: true });",
          "    assert_eq!(format!(\"{:?}\", state), \"splits(1)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Splits { targets: vec![2, 3, 4], reverse: true };",
          "    let mut output = String::new();",
          "    let result = write!(output, \"{:?}\", state);",
          "}"
        ],
        "oracle": [
          "    let state = State::Splits { targets: vec![2, 3, 4], reverse: true };",
          "    let mut output = String::new();",
          "    let result = write!(output, \"{:?}\", state);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let state = State::Splits { targets: vec![2, 3, 4], reverse: true };",
          "    let mut output = String::new();",
          "    let result = write!(output, \"{:?}\", state);",
          "    let state = State::Splits { targets: vec![2, 3, 4], reverse: true };",
          "    let mut output = String::new();",
          "    let result = write!(output, \"{:?}\", state);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let target_id: StateID = 5;",
          "    let state = State::Splits { targets: vec![target_id], reverse: false };",
          "    let mut output = String::new();",
          "    let result = write!(output, \"{:?}\", state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_err(), true);",
          "    assert!(output.is_empty());",
          "    assert!(output.contains(\"splits(\"));",
          "    assert!(output.trim().ends_with(\")\"));",
          "    assert_eq!(output, \"splits(5)\");"
        ],
        "code": [
          "{",
          "    let target_id: StateID = 5;",
          "    let state = State::Splits { targets: vec![target_id], reverse: false };",
          "    let mut output = String::new();",
          "    let result = write!(output, \"{:?}\", state);",
          "    assert_eq!(result.is_err(), true);",
          "    assert!(output.is_empty());",
          "    assert!(output.contains(\"splits(\"));",
          "    assert!(output.trim().ends_with(\")\"));",
          "    assert_eq!(output, \"splits(5)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Splits { targets: vec![6, 7, 8], reverse: false };",
          "    let mut output = String::new();",
          "    let result = write!(output, \"{:?}\", state);",
          "}"
        ],
        "oracle": [
          "    let state = State::Splits { targets: vec![6, 7, 8], reverse: false };",
          "    assert_eq!(write!(output, \"{:?}\", state).is_err(), true);",
          "    assert_eq!(output.is_empty(), true);"
        ],
        "code": [
          "{",
          "    let state = State::Splits { targets: vec![6, 7, 8], reverse: false };",
          "    let mut output = String::new();",
          "    let result = write!(output, \"{:?}\", state);",
          "    let state = State::Splits { targets: vec![6, 7, 8], reverse: false };",
          "    assert_eq!(write!(output, \"{:?}\", state).is_err(), true);",
          "    assert_eq!(output.is_empty(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]