[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let target: StateID = 0; ",
          "    let slot: u32 = 0; ",
          "    let state = State::Capture { target, slot };",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{:?}\", state);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"capture(slot={:?}) => {:?}\", 0, 0)",
          "    assert_eq!(buffer, \"capture(slot=0) => 0\")",
          "    write!(f, \"FAIL\")",
          "    assert_eq!(buffer, \"FAIL\")",
          "    write!(f, \"MATCH\")",
          "    assert_eq!(buffer, \"MATCH\")"
        ],
        "code": [
          "{",
          "    let target: StateID = 0; ",
          "    let slot: u32 = 0; ",
          "    let state = State::Capture { target, slot };",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{:?}\", state);",
          "    write!(f, \"capture(slot={:?}) => {:?}\", 0, 0)",
          "    assert_eq!(buffer, \"capture(slot=0) => 0\")",
          "    write!(f, \"FAIL\")",
          "    assert_eq!(buffer, \"FAIL\")",
          "    write!(f, \"MATCH\")",
          "    assert_eq!(buffer, \"MATCH\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let target: StateID = u32::MAX; ",
          "    let slot: u32 = u32::MAX; ",
          "    let state = State::Capture { target, slot };",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{:?}\", state);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"capture(slot={:?}) => {:?}\", u32::MAX, u32::MAX)",
          "    assert_eq!(buffer, format!(\"capture(slot={:?}) => {:?}\", u32::MAX, u32::MAX));",
          "    assert!(buffer.contains(\"capture(slot=\"));",
          "    assert!(buffer.contains(&format!(\"{:?}\", u32::MAX)));",
          "    assert!(buffer.contains(&format!(\"{:?}\", u32::MAX)));"
        ],
        "code": [
          "{",
          "    let target: StateID = u32::MAX; ",
          "    let slot: u32 = u32::MAX; ",
          "    let state = State::Capture { target, slot };",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{:?}\", state);",
          "    write!(f, \"capture(slot={:?}) => {:?}\", u32::MAX, u32::MAX)",
          "    assert_eq!(buffer, format!(\"capture(slot={:?}) => {:?}\", u32::MAX, u32::MAX));",
          "    assert!(buffer.contains(\"capture(slot=\"));",
          "    assert!(buffer.contains(&format!(\"{:?}\", u32::MAX)));",
          "    assert!(buffer.contains(&format!(\"{:?}\", u32::MAX)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let target: StateID = 1; ",
          "    let slot: u32 = 1; ",
          "    let state = State::Capture { target, slot };",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{:?}\", state);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"capture(slot={:?}) => {:?}\", slot, target,) == Ok(())",
          "    write!(f, \"capture(slot={:?}) => {:?}\", 1, 1) == Ok(())",
          "    write!(f, \"capture(slot={:?}) => {:?}\", slot, target)",
          "    buffer.contains(\"capture(slot=1) => 1\")",
          "    buffer.is_empty() == false",
          "    buffer.len() > 0"
        ],
        "code": [
          "{",
          "    let target: StateID = 1; ",
          "    let slot: u32 = 1; ",
          "    let state = State::Capture { target, slot };",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{:?}\", state);",
          "    write!(f, \"capture(slot={:?}) => {:?}\", slot, target,) == Ok(())",
          "    write!(f, \"capture(slot={:?}) => {:?}\", 1, 1) == Ok(())",
          "    write!(f, \"capture(slot={:?}) => {:?}\", slot, target)",
          "    buffer.contains(\"capture(slot=1) => 1\")",
          "    buffer.is_empty() == false",
          "    buffer.len() > 0",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]