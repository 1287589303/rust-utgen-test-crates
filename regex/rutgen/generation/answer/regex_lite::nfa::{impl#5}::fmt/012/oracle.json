[
  {
    "uses": [
      "use core::fmt::Formatter;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use core::fmt::Formatter;",
          "",
          "    struct TestFormatter;",
          "    ",
          "    impl core::fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _s: &str) -> core::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let targets: Vec<u32> = vec![];",
          "    let reverse = false;",
          "    let state = State::Splits { targets: targets.clone(), reverse };",
          "    ",
          "    let mut formatter = TestFormatter;",
          "    let _ = state.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state, State::Splits { targets: vec![], reverse: false });",
          "    assert!(formatter.write_str(\"splits(\").is_ok());",
          "    assert!(State::iter_splits(&targets, reverse).enumerate().count() == 0);",
          "    assert!(formatter.write_str(\")\").is_ok());"
        ],
        "code": [
          "{",
          "    use core::fmt::Formatter;",
          "",
          "    struct TestFormatter;",
          "    ",
          "    impl core::fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _s: &str) -> core::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let targets: Vec<u32> = vec![];",
          "    let reverse = false;",
          "    let state = State::Splits { targets: targets.clone(), reverse };",
          "    ",
          "    let mut formatter = TestFormatter;",
          "    let _ = state.fmt(&mut formatter);",
          "    assert_eq!(state, State::Splits { targets: vec![], reverse: false });",
          "    assert!(formatter.write_str(\"splits(\").is_ok());",
          "    assert!(State::iter_splits(&targets, reverse).enumerate().count() == 0);",
          "    assert!(formatter.write_str(\")\").is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use core::fmt::Formatter;",
          "",
          "    struct TestFormatter;",
          "    ",
          "    impl core::fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _s: &str) -> core::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let targets: Vec<u32> = vec![];",
          "    let reverse = true;",
          "    let state = State::Splits { targets: targets.clone(), reverse };",
          "    ",
          "    let mut formatter = TestFormatter;",
          "    let _ = state.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state, State::Splits { targets: vec![], reverse: true });",
          "    assert!(formatter.write_str(\"splits(\").is_ok());",
          "    assert_eq!(State::iter_splits(&targets, reverse).count(), 0);"
        ],
        "code": [
          "{",
          "    use core::fmt::Formatter;",
          "",
          "    struct TestFormatter;",
          "    ",
          "    impl core::fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _s: &str) -> core::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let targets: Vec<u32> = vec![];",
          "    let reverse = true;",
          "    let state = State::Splits { targets: targets.clone(), reverse };",
          "    ",
          "    let mut formatter = TestFormatter;",
          "    let _ = state.fmt(&mut formatter);",
          "    assert_eq!(state, State::Splits { targets: vec![], reverse: true });",
          "    assert!(formatter.write_str(\"splits(\").is_ok());",
          "    assert_eq!(State::iter_splits(&targets, reverse).count(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]