[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let target: u32 = 5;",
          "    let look = crate::nfa::Look::Start;",
          "    let state = crate::nfa::State::Goto { target, look: Some(look) };",
          "    let mut output = core::fmt::Formatter::default();",
          "    let _ = state.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    write!(output, \"Start => {:?}\", target);",
          "    write!(output, \"{:?} => {:?}\", look, target);",
          "    assert_eq!(output, \"Start => 5\\nStart => 5\");",
          "    ",
          "    let ranges: Vec<(char, char)> = vec![('a', 'z')];",
          "    let state_ranges = crate::nfa::State::Ranges { target, ranges: ranges.clone() };",
          "    let mut output_ranges = core::fmt::Formatter::default();",
          "    let _ = state_ranges.fmt(&mut output_ranges);",
          "    assert_eq!(output_ranges, \"a-z => 5\");",
          "    ",
          "    let state_goto_none = crate::nfa::State::Goto { target, look: None };",
          "    let mut output_goto_none = core::fmt::Formatter::default();",
          "    let _ = state_goto_none.fmt(&mut output_goto_none);",
          "    assert_eq!(output_goto_none, \"goto(5)\");"
        ],
        "code": [
          "{",
          "    let target: u32 = 5;",
          "    let look = crate::nfa::Look::Start;",
          "    let state = crate::nfa::State::Goto { target, look: Some(look) };",
          "    let mut output = core::fmt::Formatter::default();",
          "    let _ = state.fmt(&mut output);",
          "    write!(output, \"Start => {:?}\", target);",
          "    write!(output, \"{:?} => {:?}\", look, target);",
          "    assert_eq!(output, \"Start => 5\\nStart => 5\");",
          "    ",
          "    let ranges: Vec<(char, char)> = vec![('a', 'z')];",
          "    let state_ranges = crate::nfa::State::Ranges { target, ranges: ranges.clone() };",
          "    let mut output_ranges = core::fmt::Formatter::default();",
          "    let _ = state_ranges.fmt(&mut output_ranges);",
          "    assert_eq!(output_ranges, \"a-z => 5\");",
          "    ",
          "    let state_goto_none = crate::nfa::State::Goto { target, look: None };",
          "    let mut output_goto_none = core::fmt::Formatter::default();",
          "    let _ = state_goto_none.fmt(&mut output_goto_none);",
          "    assert_eq!(output_goto_none, \"goto(5)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let target: u32 = 3;",
          "    let state = crate::nfa::State::Goto { target, look: None };",
          "    let mut output = core::fmt::Formatter::default();",
          "    let _ = state.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"goto({:?})\", target) == Ok(())",
          "    write!(f, \"{:?} => {:?}\", look, target) == Ok(())",
          "    write!(f, \"{:?}-{:?} => {:?}\", start, end, target) == Ok(())",
          "    write!(f, \"splits({:?})\", sid) == Ok(())",
          "    write!(f, \"capture(slot={:?}) => {:?}\", slot, target) == Ok(())",
          "    write!(f, \"FAIL\") == Ok(())",
          "    write!(f, \"MATCH\") == Ok(())"
        ],
        "code": [
          "{",
          "    let target: u32 = 3;",
          "    let state = crate::nfa::State::Goto { target, look: None };",
          "    let mut output = core::fmt::Formatter::default();",
          "    let _ = state.fmt(&mut output);",
          "    write!(f, \"goto({:?})\", target) == Ok(())",
          "    write!(f, \"{:?} => {:?}\", look, target) == Ok(())",
          "    write!(f, \"{:?}-{:?} => {:?}\", start, end, target) == Ok(())",
          "    write!(f, \"splits({:?})\", sid) == Ok(())",
          "    write!(f, \"capture(slot={:?}) => {:?}\", slot, target) == Ok(())",
          "    write!(f, \"FAIL\") == Ok(())",
          "    write!(f, \"MATCH\") == Ok(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let target: u32 = 10;",
          "    let ranges = vec![('a', 'z'), ('A', 'Z')];",
          "    let state = crate::nfa::State::Ranges { target, ranges };",
          "    let mut output = core::fmt::Formatter::default();",
          "    let _ = state.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"ranges=[{:?}-{:?}] => {:?}\", 'a', 'z', target)?;",
          "    write!(f, \"ranges=[{:?}-{:?}] => {:?}\", 'A', 'Z', target)?;",
          "    write!(f, \"goto({:?})\", target)?;",
          "    write!(f, \"{:?} => {:?}\", look, target)?;",
          "    write!(f, \"capture(slot={:?}) => {:?}\", slot, target)?;",
          "    write!(f, \"FAIL\")?;",
          "    write!(f, \"MATCH\")?;"
        ],
        "code": [
          "{",
          "    let target: u32 = 10;",
          "    let ranges = vec![('a', 'z'), ('A', 'Z')];",
          "    let state = crate::nfa::State::Ranges { target, ranges };",
          "    let mut output = core::fmt::Formatter::default();",
          "    let _ = state.fmt(&mut output);",
          "    write!(f, \"ranges=[{:?}-{:?}] => {:?}\", 'a', 'z', target)?;",
          "    write!(f, \"ranges=[{:?}-{:?}] => {:?}\", 'A', 'Z', target)?;",
          "    write!(f, \"goto({:?})\", target)?;",
          "    write!(f, \"{:?} => {:?}\", look, target)?;",
          "    write!(f, \"capture(slot={:?}) => {:?}\", slot, target)?;",
          "    write!(f, \"FAIL\")?;",
          "    write!(f, \"MATCH\")?;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]