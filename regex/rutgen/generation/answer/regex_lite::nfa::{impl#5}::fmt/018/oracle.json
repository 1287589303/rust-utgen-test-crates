[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let target: StateID = 1;",
          "    let ranges: Vec<(char, char)> = vec![];",
          "    let state = State::Ranges { target, ranges };",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{:?}\", state);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"{:?}\", state) == Ok(())",
          "    assert_eq!(output, \"\")"
        ],
        "code": [
          "{",
          "    let target: StateID = 1;",
          "    let ranges: Vec<(char, char)> = vec![];",
          "    let state = State::Ranges { target, ranges };",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{:?}\", state);",
          "    write!(f, \"{:?}\", state) == Ok(())",
          "    assert_eq!(output, \"\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let target: StateID = 2;",
          "    let ranges: Vec<(char, char)> = vec![('a', 'z')];",
          "    let state = State::Ranges { target, ranges };",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{:?}\", state);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"{:?}\", state) == Ok(())",
          "    let target: StateID = 2;",
          "    let ranges: Vec<(char, char)> = vec![];",
          "    let state = State::Ranges { target, ranges };",
          "    write!(f, \"{:?}\", state) == Ok(())"
        ],
        "code": [
          "{",
          "    let target: StateID = 2;",
          "    let ranges: Vec<(char, char)> = vec![('a', 'z')];",
          "    let state = State::Ranges { target, ranges };",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{:?}\", state);",
          "    write!(f, \"{:?}\", state) == Ok(())",
          "    let target: StateID = 2;",
          "    let ranges: Vec<(char, char)> = vec![];",
          "    let state = State::Ranges { target, ranges };",
          "    write!(f, \"{:?}\", state) == Ok(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]