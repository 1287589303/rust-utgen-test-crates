[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Char { target: 1, ch: 'a' };",
          "    let _ = format!(\"{:?}\", state);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"{:?} => {:?}\", 'a', 1)",
          "    format!(\"{:?}\", State::Char { target: 1, ch: 'a' })",
          "    let state = State::Goto { target: 2, look: Some(Look::Start) };",
          "    write!(f, \"{:?} => {:?}\", Look::Start, 2)",
          "    format!(\"{:?}\", State::Goto { target: 2, look: Some(Look::Start) })",
          "    let state_none = State::Goto { target: 2, look: None };",
          "    write!(f, \"goto({:?})\", 2)",
          "    format!(\"{:?}\", State::Goto { target: 2, look: None })"
        ],
        "code": [
          "{",
          "    let state = State::Char { target: 1, ch: 'a' };",
          "    let _ = format!(\"{:?}\", state);",
          "    write!(f, \"{:?} => {:?}\", 'a', 1)",
          "    format!(\"{:?}\", State::Char { target: 1, ch: 'a' })",
          "    let state = State::Goto { target: 2, look: Some(Look::Start) };",
          "    write!(f, \"{:?} => {:?}\", Look::Start, 2)",
          "    format!(\"{:?}\", State::Goto { target: 2, look: Some(Look::Start) })",
          "    let state_none = State::Goto { target: 2, look: None };",
          "    write!(f, \"goto({:?})\", 2)",
          "    format!(\"{:?}\", State::Goto { target: 2, look: None })",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Goto { target: 2, look: Some(Look::Start) };",
          "    let _ = format!(\"{:?}\", state);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"goto({:?})\", 2)",
          "    write!(f, \"{:?} => {:?}\", Look::Start, 2)",
          "    write!(f, \"{:?} => {:?}\", 'a', 1)",
          "    write!(f, \"FAIL\")",
          "    write!(f, \"MATCH\")",
          "    write!(f, \"splits(1, 2, 3)\")",
          "    write!(f, \"capture(slot={:?}) => {:?}\", 0, 2)",
          "    write!(f, \"{:?}-{:?} => {:?}\", 'a', 'z', 1)",
          "    write!(f, \"goto({:?})\", 2)",
          "    write!(f, \"splits(2, 3)\")"
        ],
        "code": [
          "{",
          "    let state = State::Goto { target: 2, look: Some(Look::Start) };",
          "    let _ = format!(\"{:?}\", state);",
          "    write!(f, \"goto({:?})\", 2)",
          "    write!(f, \"{:?} => {:?}\", Look::Start, 2)",
          "    write!(f, \"{:?} => {:?}\", 'a', 1)",
          "    write!(f, \"FAIL\")",
          "    write!(f, \"MATCH\")",
          "    write!(f, \"splits(1, 2, 3)\")",
          "    write!(f, \"capture(slot={:?}) => {:?}\", 0, 2)",
          "    write!(f, \"{:?}-{:?} => {:?}\", 'a', 'z', 1)",
          "    write!(f, \"goto({:?})\", 2)",
          "    write!(f, \"splits(2, 3)\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Goto { target: 3, look: None };",
          "    let _ = format!(\"{:?}\", state);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"goto({:?})\", 3)",
          "    write!(f, \"MATCH\")",
          "    write!(f, \"{:?} => {:?}\", look, 3)",
          "    write!(f, \"{:?} => {:?}\", ch, 3)",
          "    write!(f, \"FAIL\")",
          "    write!(f, \"splits({:?})\", 3)",
          "    write!(f, \"capture(slot={:?}) => {:?}\", slot, 3)",
          "    write!(f, \"{:?}-{:?} => {:?}\", start, end, 3)"
        ],
        "code": [
          "{",
          "    let state = State::Goto { target: 3, look: None };",
          "    let _ = format!(\"{:?}\", state);",
          "    write!(f, \"goto({:?})\", 3)",
          "    write!(f, \"MATCH\")",
          "    write!(f, \"{:?} => {:?}\", look, 3)",
          "    write!(f, \"{:?} => {:?}\", ch, 3)",
          "    write!(f, \"FAIL\")",
          "    write!(f, \"splits({:?})\", 3)",
          "    write!(f, \"capture(slot={:?}) => {:?}\", slot, 3)",
          "    write!(f, \"{:?}-{:?} => {:?}\", start, end, 3)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]