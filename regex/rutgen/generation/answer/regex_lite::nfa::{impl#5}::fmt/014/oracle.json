[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let target: StateID = 5;",
          "    let ranges: Vec<(char, char)> = vec![('a', 'z'), ('A', 'Z')];",
          "    let state = State::Ranges { target, ranges };",
          "    let mut output = String::new();",
          "    let mut formatter = core::fmt::Formatter::new(&mut output);",
          "    ",
          "    let _ = state.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert!(output.contains(\"a-z => 5\"));",
          "    assert!(output.contains(\"A-Z => 5\"));",
          "    assert!(output.starts_with(\"splits(\") == false);",
          "    assert!(output.contains(\", \"));",
          "    assert!(output.matches(\", \").count() == 1);",
          "    assert!(output.ends_with(\"5\") == true);",
          "    assert!(output.contains(\"MATCH\") == false);",
          "    assert!(output.contains(\"FAIL\") == false);"
        ],
        "code": [
          "{",
          "    let target: StateID = 5;",
          "    let ranges: Vec<(char, char)> = vec![('a', 'z'), ('A', 'Z')];",
          "    let state = State::Ranges { target, ranges };",
          "    let mut output = String::new();",
          "    let mut formatter = core::fmt::Formatter::new(&mut output);",
          "    ",
          "    let _ = state.fmt(&mut formatter);",
          "    assert!(output.contains(\"a-z => 5\"));",
          "    assert!(output.contains(\"A-Z => 5\"));",
          "    assert!(output.starts_with(\"splits(\") == false);",
          "    assert!(output.contains(\", \"));",
          "    assert!(output.matches(\", \").count() == 1);",
          "    assert!(output.ends_with(\"5\") == true);",
          "    assert!(output.contains(\"MATCH\") == false);",
          "    assert!(output.contains(\"FAIL\") == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let target: StateID = 3;",
          "    let ranges: Vec<(char, char)> = vec![('0', '9'), ('G', 'Z'), ('a', 'f')];",
          "    let state = State::Ranges { target, ranges };",
          "    let mut output = String::new();",
          "    let mut formatter = core::fmt::Formatter::new(&mut output);",
          "    ",
          "    let _ = state.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"0-9 => 3, G-Z => 3, a-f => 3\");",
          "    assert!(formatter.is_ok());",
          "    assert!(output.contains(\"0-9 => 3\"));",
          "    assert!(output.contains(\"G-Z => 3\"));",
          "    assert!(output.contains(\"a-f => 3\"));",
          "    assert!(output.contains(\", \"));",
          "    assert_eq!(state, State::Ranges { target: 3, ranges: vec![('0', '9'), ('G', 'Z'), ('a', 'f')] });"
        ],
        "code": [
          "{",
          "    let target: StateID = 3;",
          "    let ranges: Vec<(char, char)> = vec![('0', '9'), ('G', 'Z'), ('a', 'f')];",
          "    let state = State::Ranges { target, ranges };",
          "    let mut output = String::new();",
          "    let mut formatter = core::fmt::Formatter::new(&mut output);",
          "    ",
          "    let _ = state.fmt(&mut formatter);",
          "    assert_eq!(output, \"0-9 => 3, G-Z => 3, a-f => 3\");",
          "    assert!(formatter.is_ok());",
          "    assert!(output.contains(\"0-9 => 3\"));",
          "    assert!(output.contains(\"G-Z => 3\"));",
          "    assert!(output.contains(\"a-f => 3\"));",
          "    assert!(output.contains(\", \"));",
          "    assert_eq!(state, State::Ranges { target: 3, ranges: vec![('0', '9'), ('G', 'Z'), ('a', 'f')] });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let target: StateID = 4;",
          "    let ranges: Vec<(char, char)> = vec![('x', 'y'), ('A', 'B')];",
          "    let state = State::Ranges { target, ranges };",
          "    let mut output = String::new();",
          "    let mut formatter = core::fmt::Formatter::new(&mut output);",
          "    ",
          "    // Intentionally trigger an err case in the write! to replicate conditions",
          "    let _ = state.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"FAIL\")?;",
          "    write!(f, \"MATCH\")?;",
          "    write!(f, \"{:?} => {:?}\", 'A', target)?;",
          "    write!(f, \"{:?}-{:?} => {:?}\", 'x', 'y', target)?;",
          "    write!(f, \", \")?;",
          "    write!(f, \"{:?}\", 4)?;",
          "    write!(f, \"splits(\")?;",
          "    write!(f, \")\")?;",
          "    write!(f, \"goto({:?})\", target)?;",
          "    write!(f, \"{:?} => {:?}\", Look::Start, target)?;",
          "    write!(f, \"capture(slot={:?}) => {:?}\", 1, target)?;"
        ],
        "code": [
          "{",
          "    let target: StateID = 4;",
          "    let ranges: Vec<(char, char)> = vec![('x', 'y'), ('A', 'B')];",
          "    let state = State::Ranges { target, ranges };",
          "    let mut output = String::new();",
          "    let mut formatter = core::fmt::Formatter::new(&mut output);",
          "    ",
          "    // Intentionally trigger an err case in the write! to replicate conditions",
          "    let _ = state.fmt(&mut formatter);",
          "    write!(f, \"FAIL\")?;",
          "    write!(f, \"MATCH\")?;",
          "    write!(f, \"{:?} => {:?}\", 'A', target)?;",
          "    write!(f, \"{:?}-{:?} => {:?}\", 'x', 'y', target)?;",
          "    write!(f, \", \")?;",
          "    write!(f, \"{:?}\", 4)?;",
          "    write!(f, \"splits(\")?;",
          "    write!(f, \")\")?;",
          "    write!(f, \"goto({:?})\", target)?;",
          "    write!(f, \"{:?} => {:?}\", Look::Start, target)?;",
          "    write!(f, \"capture(slot={:?}) => {:?}\", 1, target)?;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]