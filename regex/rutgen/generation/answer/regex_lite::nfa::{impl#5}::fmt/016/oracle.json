[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let target: StateID = 1; ",
          "    let ranges = vec![('a', 'b')]; ",
          "    let state = State::Ranges { target, ranges }; ",
          "    let mut buffer = String::new(); ",
          "    let result = write!(&mut buffer, \"{:?}\", state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer, \"\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind(), std::io::ErrorKind::Other);"
        ],
        "code": [
          "{",
          "    let target: StateID = 1; ",
          "    let ranges = vec![('a', 'b')]; ",
          "    let state = State::Ranges { target, ranges }; ",
          "    let mut buffer = String::new(); ",
          "    let result = write!(&mut buffer, \"{:?}\", state);",
          "    assert_eq!(buffer, \"\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind(), std::io::ErrorKind::Other);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let target: StateID = 2; ",
          "    let ranges = vec![('c', 'd')]; ",
          "    let state = State::Ranges { target, ranges }; ",
          "    let mut buffer = String::new(); ",
          "    let result = write!(&mut buffer, \"{:?}\", state);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"{:?} => {:?}\", ch, target) == Ok(())",
          "    write!(f, \"{:?}-{:?} => {:?}\", start, end, target) == Err(None)",
          "    write!(f, \"splits({:?})\", sid) == Ok(())",
          "    write!(f, \"goto({:?})\", target) == Ok(())",
          "    write!(f, \"{:?} => {:?}\", look, target) == Ok(())",
          "    write!(f, \"capture(slot={:?}) => {:?}\", slot, target) == Ok(())",
          "    write!(f, \"FAIL\") == Ok(())",
          "    write!(f, \"MATCH\") == Ok(())",
          "    buffer.is_empty() == true",
          "    buffer.contains(\"0-1 => 2\") == false"
        ],
        "code": [
          "{",
          "    let target: StateID = 2; ",
          "    let ranges = vec![('c', 'd')]; ",
          "    let state = State::Ranges { target, ranges }; ",
          "    let mut buffer = String::new(); ",
          "    let result = write!(&mut buffer, \"{:?}\", state);",
          "    write!(f, \"{:?} => {:?}\", ch, target) == Ok(())",
          "    write!(f, \"{:?}-{:?} => {:?}\", start, end, target) == Err(None)",
          "    write!(f, \"splits({:?})\", sid) == Ok(())",
          "    write!(f, \"goto({:?})\", target) == Ok(())",
          "    write!(f, \"{:?} => {:?}\", look, target) == Ok(())",
          "    write!(f, \"capture(slot={:?}) => {:?}\", slot, target) == Ok(())",
          "    write!(f, \"FAIL\") == Ok(())",
          "    write!(f, \"MATCH\") == Ok(())",
          "    buffer.is_empty() == true",
          "    buffer.contains(\"0-1 => 2\") == false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]