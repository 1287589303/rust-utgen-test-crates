[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let targets: Vec<StateID> = Vec::new();",
          "    let reverse = false;",
          "    let state = State::Splits { targets, reverse };",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{:?}\", state);",
          "}"
        ],
        "oracle": [
          "    write!(&mut buffer, \"{:?}\", state).is_ok();",
          "    state = State::Splits { targets: vec![1, 2, 3], reverse: true };",
          "    let result = write!(&mut buffer, \"{:?}\", state);",
          "    assert!(result.is_some());",
          "    state = State::Splits { targets: vec![4], reverse: false };",
          "    let result = write!(&mut buffer, \"{:?}\", state);",
          "    assert_eq!(result, Ok(()));",
          "    state = State::Splits { targets: vec![5], reverse: false };",
          "    let result = write!(&mut buffer, \"{:?}\", state);",
          "    assert!(result.is_some());"
        ],
        "code": [
          "{",
          "    let targets: Vec<StateID> = Vec::new();",
          "    let reverse = false;",
          "    let state = State::Splits { targets, reverse };",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{:?}\", state);",
          "    write!(&mut buffer, \"{:?}\", state).is_ok();",
          "    state = State::Splits { targets: vec![1, 2, 3], reverse: true };",
          "    let result = write!(&mut buffer, \"{:?}\", state);",
          "    assert!(result.is_some());",
          "    state = State::Splits { targets: vec![4], reverse: false };",
          "    let result = write!(&mut buffer, \"{:?}\", state);",
          "    assert_eq!(result, Ok(()));",
          "    state = State::Splits { targets: vec![5], reverse: false };",
          "    let result = write!(&mut buffer, \"{:?}\", state);",
          "    assert!(result.is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let targets: Vec<StateID> = Vec::new();",
          "    let reverse = true;",
          "    let state = State::Splits { targets, reverse };",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{:?}\", state);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"splits(\")?;",
          "    State::iter_splits(&targets, reverse).enumerate();",
          "    i == 0;",
          "    write!(f, \"{:?}\", sid)?;"
        ],
        "code": [
          "{",
          "    let targets: Vec<StateID> = Vec::new();",
          "    let reverse = true;",
          "    let state = State::Splits { targets, reverse };",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{:?}\", state);",
          "    write!(f, \"splits(\")?;",
          "    State::iter_splits(&targets, reverse).enumerate();",
          "    i == 0;",
          "    write!(f, \"{:?}\", sid)?;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]