[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [
      "#[should_panic]",
      "fn test_set_len_invalid_case() {",
      "    let mut accels = Accels::<Vec<AccelTy>>::empty();",
      "    accels.set_len(9);",
      "}"
    ],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut accels = Accels::<Vec<AccelTy>>::empty();",
          "    accels.set_len(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(accels.accels[0], 0);",
          "    assert!(panic::catch_unwind(|| accels.set_len(9)).is_err());"
        ],
        "code": [
          "{",
          "    let mut accels = Accels::<Vec<AccelTy>>::empty();",
          "    accels.set_len(0);",
          "    assert_eq!(accels.accels[0], 0);",
          "    assert!(panic::catch_unwind(|| accels.set_len(9)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut accels = Accels::<Vec<AccelTy>>::empty();",
          "    accels.set_len(8);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(accels.accels[0], 8);",
          "    assert!(std::panic::catch_unwind(|| accels.set_len(9)).is_err());",
          "    assert_eq!(accels.accels[0], 0);"
        ],
        "code": [
          "{",
          "    let mut accels = Accels::<Vec<AccelTy>>::empty();",
          "    accels.set_len(8);",
          "    assert_eq!(accels.accels[0], 8);",
          "    assert!(std::panic::catch_unwind(|| accels.set_len(9)).is_err());",
          "    assert_eq!(accels.accels[0], 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]