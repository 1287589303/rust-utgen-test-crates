[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestValue {",
          "        data: i32,",
          "    }",
          "    ",
          "    impl Send for TestValue {}",
          "    ",
          "    fn create_value() -> TestValue {",
          "        TestValue { data: 42 }",
          "    }",
          "    ",
          "    let pool = Pool {",
          "        stack: Mutex::new(Vec::new()),",
          "        create: create_value,",
          "    };",
          "    ",
          "    let value = Some(Box::new(TestValue { data: 1 }));",
          "    let guard = PoolGuard {",
          "        pool: &pool,",
          "        value,",
          "    };",
          "    ",
          "    PoolGuard::put(guard);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pool.stack.lock().unwrap().len(), 1);",
          "    assert_eq!(pool.stack.lock().unwrap()[0].data, 1);"
        ],
        "code": [
          "{",
          "    struct TestValue {",
          "        data: i32,",
          "    }",
          "    ",
          "    impl Send for TestValue {}",
          "    ",
          "    fn create_value() -> TestValue {",
          "        TestValue { data: 42 }",
          "    }",
          "    ",
          "    let pool = Pool {",
          "        stack: Mutex::new(Vec::new()),",
          "        create: create_value,",
          "    };",
          "    ",
          "    let value = Some(Box::new(TestValue { data: 1 }));",
          "    let guard = PoolGuard {",
          "        pool: &pool,",
          "        value,",
          "    };",
          "    ",
          "    PoolGuard::put(guard);",
          "    assert_eq!(pool.stack.lock().unwrap().len(), 1);",
          "    assert_eq!(pool.stack.lock().unwrap()[0].data, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestValue {",
          "        data: i32,",
          "    }",
          "    ",
          "    impl Send for TestValue {}",
          "    ",
          "    fn create_value() -> TestValue {",
          "        TestValue { data: 42 }",
          "    }",
          "    ",
          "    let pool = Pool {",
          "        stack: Mutex::new(Vec::new()),",
          "        create: create_value,",
          "    };",
          "    ",
          "    let guard = PoolGuard {",
          "        pool: &pool,",
          "        value: None,",
          "    };",
          "    ",
          "    PoolGuard::put(guard);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pool.stack.lock().unwrap().len(), 0);",
          "    assert!(guard.value.is_none());",
          "    let guard = PoolGuard {",
          "    pool: &pool,",
          "    value: Some(Box::new(TestValue { data: 42 })),",
          "    };",
          "    PoolGuard::put(guard);",
          "    assert_eq!(pool.stack.lock().unwrap().len(), 1);",
          "    assert_eq!(pool.stack.lock().unwrap()[0].data, 42);"
        ],
        "code": [
          "{",
          "    struct TestValue {",
          "        data: i32,",
          "    }",
          "    ",
          "    impl Send for TestValue {}",
          "    ",
          "    fn create_value() -> TestValue {",
          "        TestValue { data: 42 }",
          "    }",
          "    ",
          "    let pool = Pool {",
          "        stack: Mutex::new(Vec::new()),",
          "        create: create_value,",
          "    };",
          "    ",
          "    let guard = PoolGuard {",
          "        pool: &pool,",
          "        value: None,",
          "    };",
          "    ",
          "    PoolGuard::put(guard);",
          "    assert_eq!(pool.stack.lock().unwrap().len(), 0);",
          "    assert!(guard.value.is_none());",
          "    let guard = PoolGuard {",
          "    pool: &pool,",
          "    value: Some(Box::new(TestValue { data: 42 })),",
          "    };",
          "    PoolGuard::put(guard);",
          "    assert_eq!(pool.stack.lock().unwrap().len(), 1);",
          "    assert_eq!(pool.stack.lock().unwrap()[0].data, 42);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]