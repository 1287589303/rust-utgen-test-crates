[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::Start);",
          "    let result = look_set.contains_anchor_haystack();",
          "}"
        ],
        "oracle": [
          "    assert!(look_set.contains(Look::Start));",
          "    assert!(!look_set.contains(Look::End));",
          "    assert_eq!(result, true);",
          "    look_set.set_insert(Look::End);",
          "    assert_eq!(look_set.contains_anchor_haystack(), true);"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::Start);",
          "    let result = look_set.contains_anchor_haystack();",
          "    assert!(look_set.contains(Look::Start));",
          "    assert!(!look_set.contains(Look::End));",
          "    assert_eq!(result, true);",
          "    look_set.set_insert(Look::End);",
          "    assert_eq!(look_set.contains_anchor_haystack(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::End);",
          "    let result = look_set.contains_anchor_haystack();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    assert!(look_set.contains(Look::Start) || look_set.contains(Look::End));"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::End);",
          "    let result = look_set.contains_anchor_haystack();",
          "    assert_eq!(result, true);",
          "    assert!(look_set.contains(Look::Start) || look_set.contains(Look::End));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::Start);",
          "    look_set.set_insert(Look::End);",
          "    let result = look_set.contains_anchor_haystack();",
          "}"
        ],
        "oracle": [
          "    assert!(look_set.contains(Look::Start));",
          "    assert!(look_set.contains(Look::End));",
          "    assert!(result);"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::Start);",
          "    look_set.set_insert(Look::End);",
          "    let result = look_set.contains_anchor_haystack();",
          "    assert!(look_set.contains(Look::Start));",
          "    assert!(look_set.contains(Look::End));",
          "    assert!(result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]