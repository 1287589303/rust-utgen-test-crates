[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA {",
          "        pattern: String::from(\"a\"),",
          "        states: vec![State::Goto { target: StateID(1), look: None }],",
          "        start: StateID(0),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![],",
          "        memory_extra: 0,",
          "    };",
          "    let pvm = PikeVM::new(nfa);",
          "    let mut stack = Vec::new();",
          "    let mut curr_slot_table = SlotTable::new();",
          "    let mut next = ActiveStates { set: SparseSet::new(), slot_table: curr_slot_table.clone() };",
          "    let haystack = b\"abc\";",
          "    let at = 0;",
          "    let at_ch = 'a';",
          "    let at_len = 1;",
          "    let sid = StateID(0);",
          "    ",
          "    pvm.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pvm.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid), false);",
          "    let sid_goto = StateID(0);",
          "    assert_eq!(pvm.nfa.state(sid_goto), &State::Goto { target: StateID(1), look: None });",
          "    let sid_fail = StateID(1);",
          "    let nfa_fail = NFA { pattern: String::from(\"a\"), states: vec![State::Fail], start: StateID(0), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None, cap_name_to_index: CaptureNameMap::new(), cap_index_to_name: vec![], memory_extra: 0 };",
          "    let pvm_fail = PikeVM::new(nfa_fail);",
          "    assert_eq!(pvm_fail.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid_fail), false);",
          "    let sid_capture = StateID(2);",
          "    let nfa_capture = NFA { pattern: String::from(\"a\"), states: vec![State::Capture { target: StateID(1), slot: 0 }], start: StateID(0), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None, cap_name_to_index: CaptureNameMap::new(), cap_index_to_name: vec![], memory_extra: 0 };",
          "    let pvm_capture = PikeVM::new(nfa_capture);",
          "    assert_eq!(pvm_capture.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid_capture), false);",
          "    let sid_split = StateID(3);",
          "    let nfa_split = NFA { pattern: String::from(\"a\"), states: vec![State::Splits { targets: vec![StateID(1)], reverse: false }], start: StateID(0), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None, cap_name_to_index: CaptureNameMap::new(), cap_index_to_name: vec![], memory_extra: 0 };",
          "    let pvm_split = PikeVM::new(nfa_split);",
          "    assert_eq!(pvm_split.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid_split), false);"
        ],
        "code": [
          "{",
          "    let nfa = NFA {",
          "        pattern: String::from(\"a\"),",
          "        states: vec![State::Goto { target: StateID(1), look: None }],",
          "        start: StateID(0),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![],",
          "        memory_extra: 0,",
          "    };",
          "    let pvm = PikeVM::new(nfa);",
          "    let mut stack = Vec::new();",
          "    let mut curr_slot_table = SlotTable::new();",
          "    let mut next = ActiveStates { set: SparseSet::new(), slot_table: curr_slot_table.clone() };",
          "    let haystack = b\"abc\";",
          "    let at = 0;",
          "    let at_ch = 'a';",
          "    let at_len = 1;",
          "    let sid = StateID(0);",
          "    ",
          "    pvm.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid);",
          "    assert_eq!(pvm.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid), false);",
          "    let sid_goto = StateID(0);",
          "    assert_eq!(pvm.nfa.state(sid_goto), &State::Goto { target: StateID(1), look: None });",
          "    let sid_fail = StateID(1);",
          "    let nfa_fail = NFA { pattern: String::from(\"a\"), states: vec![State::Fail], start: StateID(0), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None, cap_name_to_index: CaptureNameMap::new(), cap_index_to_name: vec![], memory_extra: 0 };",
          "    let pvm_fail = PikeVM::new(nfa_fail);",
          "    assert_eq!(pvm_fail.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid_fail), false);",
          "    let sid_capture = StateID(2);",
          "    let nfa_capture = NFA { pattern: String::from(\"a\"), states: vec![State::Capture { target: StateID(1), slot: 0 }], start: StateID(0), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None, cap_name_to_index: CaptureNameMap::new(), cap_index_to_name: vec![], memory_extra: 0 };",
          "    let pvm_capture = PikeVM::new(nfa_capture);",
          "    assert_eq!(pvm_capture.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid_capture), false);",
          "    let sid_split = StateID(3);",
          "    let nfa_split = NFA { pattern: String::from(\"a\"), states: vec![State::Splits { targets: vec![StateID(1)], reverse: false }], start: StateID(0), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None, cap_name_to_index: CaptureNameMap::new(), cap_index_to_name: vec![], memory_extra: 0 };",
          "    let pvm_split = PikeVM::new(nfa_split);",
          "    assert_eq!(pvm_split.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid_split), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA {",
          "        pattern: String::from(\"b\"),",
          "        states: vec![State::Splits { targets: vec![StateID(1)], reverse: false }],",
          "        start: StateID(0),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![],",
          "        memory_extra: 0,",
          "    };",
          "    let pvm = PikeVM::new(nfa);",
          "    let mut stack = Vec::new();",
          "    let mut curr_slot_table = SlotTable::new();",
          "    let mut next = ActiveStates { set: SparseSet::new(), slot_table: curr_slot_table.clone() };",
          "    let haystack = b\"xyz\";",
          "    let at = 1;",
          "    let at_ch = 'y';",
          "    let at_len = 1;",
          "    let sid = StateID(0);",
          "    ",
          "    pvm.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid);",
          "}"
        ],
        "oracle": [
          "    self.nfa.state(sid) matches State::Goto { .. } at line 252 is true => assert_eq!(pvm.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid), false);",
          "    self.nfa.state(sid) matches State::Splits { .. } at line 252 is true => assert_eq!(pvm.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid), false);",
          "    self.nfa.state(sid) matches State::Fail at line 252 is true => assert_eq!(pvm.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid), false);",
          "    self.nfa.state(sid) matches State::Capture { .. } at line 252 is true => assert_eq!(pvm.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid), false);"
        ],
        "code": [
          "{",
          "    let nfa = NFA {",
          "        pattern: String::from(\"b\"),",
          "        states: vec![State::Splits { targets: vec![StateID(1)], reverse: false }],",
          "        start: StateID(0),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![],",
          "        memory_extra: 0,",
          "    };",
          "    let pvm = PikeVM::new(nfa);",
          "    let mut stack = Vec::new();",
          "    let mut curr_slot_table = SlotTable::new();",
          "    let mut next = ActiveStates { set: SparseSet::new(), slot_table: curr_slot_table.clone() };",
          "    let haystack = b\"xyz\";",
          "    let at = 1;",
          "    let at_ch = 'y';",
          "    let at_len = 1;",
          "    let sid = StateID(0);",
          "    ",
          "    pvm.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid);",
          "    self.nfa.state(sid) matches State::Goto { .. } at line 252 is true => assert_eq!(pvm.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid), false);",
          "    self.nfa.state(sid) matches State::Splits { .. } at line 252 is true => assert_eq!(pvm.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid), false);",
          "    self.nfa.state(sid) matches State::Fail at line 252 is true => assert_eq!(pvm.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid), false);",
          "    self.nfa.state(sid) matches State::Capture { .. } at line 252 is true => assert_eq!(pvm.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA {",
          "        pattern: String::from(\"c\"),",
          "        states: vec![State::Fail],",
          "        start: StateID(0),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![],",
          "        memory_extra: 0,",
          "    };",
          "    let pvm = PikeVM::new(nfa);",
          "    let mut stack = Vec::new();",
          "    let mut curr_slot_table = SlotTable::new();",
          "    let mut next = ActiveStates { set: SparseSet::new(), slot_table: curr_slot_table.clone() };",
          "    let haystack = b\"def\";",
          "    let at = 2;",
          "    let at_ch = 'f';",
          "    let at_len = 1;",
          "    let sid = StateID(0);",
          "    ",
          "    pvm.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid);",
          "}"
        ],
        "oracle": [
          "    pvm.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid) should return false when *self.nfa.state(sid) is State::Goto { .. }",
          "    pvm.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid) should return false when *self.nfa.state(sid) is State::Splits { .. }",
          "    pvm.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid) should return false when *self.nfa.state(sid) is State::Fail",
          "    pvm.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid) should return false when *self.nfa.state(sid) is State::Capture { .. }"
        ],
        "code": [
          "{",
          "    let nfa = NFA {",
          "        pattern: String::from(\"c\"),",
          "        states: vec![State::Fail],",
          "        start: StateID(0),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![],",
          "        memory_extra: 0,",
          "    };",
          "    let pvm = PikeVM::new(nfa);",
          "    let mut stack = Vec::new();",
          "    let mut curr_slot_table = SlotTable::new();",
          "    let mut next = ActiveStates { set: SparseSet::new(), slot_table: curr_slot_table.clone() };",
          "    let haystack = b\"def\";",
          "    let at = 2;",
          "    let at_ch = 'f';",
          "    let at_len = 1;",
          "    let sid = StateID(0);",
          "    ",
          "    pvm.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid);",
          "    pvm.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid) should return false when *self.nfa.state(sid) is State::Goto { .. }",
          "    pvm.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid) should return false when *self.nfa.state(sid) is State::Splits { .. }",
          "    pvm.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid) should return false when *self.nfa.state(sid) is State::Fail",
          "    pvm.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid) should return false when *self.nfa.state(sid) is State::Capture { .. }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA {",
          "        pattern: String::from(\"d\"),",
          "        states: vec![State::Capture { target: StateID(1), slot: 0 }],",
          "        start: StateID(0),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![],",
          "        memory_extra: 0,",
          "    };",
          "    let pvm = PikeVM::new(nfa);",
          "    let mut stack = Vec::new();",
          "    let mut curr_slot_table = SlotTable::new();",
          "    let mut next = ActiveStates { set: SparseSet::new(), slot_table: curr_slot_table.clone() };",
          "    let haystack = b\"ghi\";",
          "    let at = 0;",
          "    let at_ch = 'g';",
          "    let at_len = 1;",
          "    let sid = StateID(0);",
          "    ",
          "    pvm.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid);",
          "}"
        ],
        "oracle": [
          "    pvm.next(&mut stack, &mut curr_slot_table, &mut next, b\"ghi\", 0, 'g', 1, StateID(0)); // Expected: false",
          "    pvm.next(&mut stack, &mut curr_slot_table, &mut next, b\"ghi\", 0, 'g', 1, StateID(1)); // Expected: false",
          "    pvm.next(&mut stack, &mut curr_slot_table, &mut next, b\"ghi\", 0, 'g', 1, StateID(2)); // Expected: false",
          "    pvm.next(&mut stack, &mut curr_slot_table, &mut next, b\"ghi\", 0, 'g', 1, StateID(3)); // Expected: false"
        ],
        "code": [
          "{",
          "    let nfa = NFA {",
          "        pattern: String::from(\"d\"),",
          "        states: vec![State::Capture { target: StateID(1), slot: 0 }],",
          "        start: StateID(0),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![],",
          "        memory_extra: 0,",
          "    };",
          "    let pvm = PikeVM::new(nfa);",
          "    let mut stack = Vec::new();",
          "    let mut curr_slot_table = SlotTable::new();",
          "    let mut next = ActiveStates { set: SparseSet::new(), slot_table: curr_slot_table.clone() };",
          "    let haystack = b\"ghi\";",
          "    let at = 0;",
          "    let at_ch = 'g';",
          "    let at_len = 1;",
          "    let sid = StateID(0);",
          "    ",
          "    pvm.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid);",
          "    pvm.next(&mut stack, &mut curr_slot_table, &mut next, b\"ghi\", 0, 'g', 1, StateID(0)); // Expected: false",
          "    pvm.next(&mut stack, &mut curr_slot_table, &mut next, b\"ghi\", 0, 'g', 1, StateID(1)); // Expected: false",
          "    pvm.next(&mut stack, &mut curr_slot_table, &mut next, b\"ghi\", 0, 'g', 1, StateID(2)); // Expected: false",
          "    pvm.next(&mut stack, &mut curr_slot_table, &mut next, b\"ghi\", 0, 'g', 1, StateID(3)); // Expected: false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]