[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ch = 'a';",
          "    let target_sid = StateID(1);",
          "    let nfa = NFA {",
          "        pattern: String::from(\"a\"),",
          "        states: vec![State::Char {",
          "            target: target_sid,",
          "            ch,",
          "        }],",
          "        start: StateID(0),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: Vec::new(),",
          "        memory_extra: 0,",
          "    };",
          "",
          "    let pike_vm = PikeVM::new(nfa);",
          "    ",
          "    let mut stack = Vec::new();",
          "    let mut curr_slot_table = SlotTable::new();",
          "    let mut next = ActiveStates {",
          "        set: SparseSet::new(),",
          "        slot_table: SlotTable::new(),",
          "    };",
          "    ",
          "    let haystack = b\"a\";",
          "    let at = 0;",
          "    let at_len = 0; // bound case, at_len == 0",
          "    let sid = target_sid;",
          "",
          "    let result = pike_vm.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, ch, at_len, sid);",
          "}"
        ],
        "oracle": [
          "    let ch = 'a';",
          "    let target_sid = StateID(1);",
          "    let nfa = NFA {",
          "    pattern: String::from(\"a\"),",
          "    states: vec![State::Char {",
          "    target: target_sid,",
          "    ch,",
          "    }],",
          "    start: StateID(0),",
          "    is_start_anchored: false,",
          "    is_match_empty: false,",
          "    static_explicit_captures_len: None,",
          "    cap_name_to_index: CaptureNameMap::new(),",
          "    cap_index_to_name: Vec::new(),",
          "    memory_extra: 0,",
          "    };",
          "    let pike_vm = PikeVM::new(nfa);",
          "    let mut stack = Vec::new();",
          "    let mut curr_slot_table = SlotTable::new();",
          "    let mut next = ActiveStates {",
          "    set: SparseSet::new(),",
          "    slot_table: SlotTable::new(),",
          "    };",
          "    let haystack = b\"a\";",
          "    let at = 0;",
          "    let at_len = 0;",
          "    let sid = target_sid;",
          "    let expected_result = false;",
          "    assert_eq!(result, expected_result);"
        ],
        "code": [
          "{",
          "    let ch = 'a';",
          "    let target_sid = StateID(1);",
          "    let nfa = NFA {",
          "        pattern: String::from(\"a\"),",
          "        states: vec![State::Char {",
          "            target: target_sid,",
          "            ch,",
          "        }],",
          "        start: StateID(0),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: Vec::new(),",
          "        memory_extra: 0,",
          "    };",
          "",
          "    let pike_vm = PikeVM::new(nfa);",
          "    ",
          "    let mut stack = Vec::new();",
          "    let mut curr_slot_table = SlotTable::new();",
          "    let mut next = ActiveStates {",
          "        set: SparseSet::new(),",
          "        slot_table: SlotTable::new(),",
          "    };",
          "    ",
          "    let haystack = b\"a\";",
          "    let at = 0;",
          "    let at_len = 0; // bound case, at_len == 0",
          "    let sid = target_sid;",
          "",
          "    let result = pike_vm.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, ch, at_len, sid);",
          "    let ch = 'a';",
          "    let target_sid = StateID(1);",
          "    let nfa = NFA {",
          "    pattern: String::from(\"a\"),",
          "    states: vec![State::Char {",
          "    target: target_sid,",
          "    ch,",
          "    }],",
          "    start: StateID(0),",
          "    is_start_anchored: false,",
          "    is_match_empty: false,",
          "    static_explicit_captures_len: None,",
          "    cap_name_to_index: CaptureNameMap::new(),",
          "    cap_index_to_name: Vec::new(),",
          "    memory_extra: 0,",
          "    };",
          "    let pike_vm = PikeVM::new(nfa);",
          "    let mut stack = Vec::new();",
          "    let mut curr_slot_table = SlotTable::new();",
          "    let mut next = ActiveStates {",
          "    set: SparseSet::new(),",
          "    slot_table: SlotTable::new(),",
          "    };",
          "    let haystack = b\"a\";",
          "    let at = 0;",
          "    let at_len = 0;",
          "    let sid = target_sid;",
          "    let expected_result = false;",
          "    assert_eq!(result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let target_sid = StateID(2);",
          "    let nfa = NFA {",
          "        pattern: String::from(\"a-b\"),",
          "        states: vec![",
          "            State::Ranges {",
          "                target: target_sid,",
          "                ranges: vec![('a', 'b')],",
          "            },",
          "        ],",
          "        start: StateID(0),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: Vec::new(),",
          "        memory_extra: 0,",
          "    };",
          "",
          "    let pike_vm = PikeVM::new(nfa);",
          "    ",
          "    let mut stack = Vec::new();",
          "    let mut curr_slot_table = SlotTable::new();",
          "    let mut next = ActiveStates {",
          "        set: SparseSet::new(),",
          "        slot_table: SlotTable::new(),",
          "    };",
          "    ",
          "    let haystack = b\"ab\";",
          "    let at = 0;",
          "    let at_ch = 'a'; // valid Unicode scalar value matching the range",
          "    let at_len = 0; // bound case, at_len == 0",
          "    let sid = target_sid;",
          "",
          "    let result = pike_vm.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid);",
          "}"
        ],
        "oracle": [
          "    let target_sid = StateID(2);",
          "    let nfa = NFA {",
          "    pattern: String::from(\"a-b\"),",
          "    states: vec![",
          "    State::Ranges {",
          "    target: target_sid,",
          "    ranges: vec![('a', 'b')],",
          "    },",
          "    ],",
          "    start: StateID(0),",
          "    is_start_anchored: false,",
          "    is_match_empty: false,",
          "    static_explicit_captures_len: None,",
          "    cap_name_to_index: CaptureNameMap::new(),",
          "    cap_index_to_name: Vec::new(),",
          "    memory_extra: 0,",
          "    };",
          "    ",
          "    let pike_vm = PikeVM::new(nfa);",
          "    ",
          "    let mut stack = Vec::new();",
          "    let mut curr_slot_table = SlotTable::new();",
          "    let mut next = ActiveStates {",
          "    set: SparseSet::new(),",
          "    slot_table: SlotTable::new(),",
          "    };",
          "    ",
          "    let haystack = b\"ab\";",
          "    let at = 0;",
          "    let at_ch = 'a'; // valid Unicode scalar value matching the range",
          "    let at_len = 0; // bound case, at_len == 0",
          "    let sid = target_sid;",
          "    ",
          "    let result = pike_vm.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid);",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let target_sid = StateID(2);",
          "    let nfa = NFA {",
          "        pattern: String::from(\"a-b\"),",
          "        states: vec![",
          "            State::Ranges {",
          "                target: target_sid,",
          "                ranges: vec![('a', 'b')],",
          "            },",
          "        ],",
          "        start: StateID(0),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: Vec::new(),",
          "        memory_extra: 0,",
          "    };",
          "",
          "    let pike_vm = PikeVM::new(nfa);",
          "    ",
          "    let mut stack = Vec::new();",
          "    let mut curr_slot_table = SlotTable::new();",
          "    let mut next = ActiveStates {",
          "        set: SparseSet::new(),",
          "        slot_table: SlotTable::new(),",
          "    };",
          "    ",
          "    let haystack = b\"ab\";",
          "    let at = 0;",
          "    let at_ch = 'a'; // valid Unicode scalar value matching the range",
          "    let at_len = 0; // bound case, at_len == 0",
          "    let sid = target_sid;",
          "",
          "    let result = pike_vm.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid);",
          "    let target_sid = StateID(2);",
          "    let nfa = NFA {",
          "    pattern: String::from(\"a-b\"),",
          "    states: vec![",
          "    State::Ranges {",
          "    target: target_sid,",
          "    ranges: vec![('a', 'b')],",
          "    },",
          "    ],",
          "    start: StateID(0),",
          "    is_start_anchored: false,",
          "    is_match_empty: false,",
          "    static_explicit_captures_len: None,",
          "    cap_name_to_index: CaptureNameMap::new(),",
          "    cap_index_to_name: Vec::new(),",
          "    memory_extra: 0,",
          "    };",
          "    ",
          "    let pike_vm = PikeVM::new(nfa);",
          "    ",
          "    let mut stack = Vec::new();",
          "    let mut curr_slot_table = SlotTable::new();",
          "    let mut next = ActiveStates {",
          "    set: SparseSet::new(),",
          "    slot_table: SlotTable::new(),",
          "    };",
          "    ",
          "    let haystack = b\"ab\";",
          "    let at = 0;",
          "    let at_ch = 'a'; // valid Unicode scalar value matching the range",
          "    let at_len = 0; // bound case, at_len == 0",
          "    let sid = target_sid;",
          "    ",
          "    let result = pike_vm.next(&mut stack, &mut curr_slot_table, &mut next, haystack, at, at_ch, at_len, sid);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]