[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let target_id = StateID(1);",
          "    let ranges = vec![(b'a' as char, b'a' as char)]; // start == at_ch",
          "    let states = vec![State::Ranges { target: target_id, ranges }];",
          "    let nfa = NFA {",
          "        pattern: String::new(),",
          "        states,",
          "        start: StateID(0),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index: CaptureNameMap::default(),",
          "        cap_index_to_name: Vec::new(),",
          "        memory_extra: 0,",
          "    };",
          "    let pike_vm = PikeVM::new(nfa);",
          "    let mut stack = Vec::new();",
          "    let mut slot_table = SlotTable::new();",
          "    let mut active_states = ActiveStates {",
          "        set: SparseSet::default(),",
          "        slot_table: slot_table.clone(),",
          "    };",
          "    let haystack: &[u8] = b\"a\"; // non-empty",
          "    let at = 0; // valid index",
          "    let at_ch = b'a' as char; // equal to start",
          "    let at_len = 1; // greater than 0",
          "    let sid = StateID(0); // valid for ranges",
          "",
          "    let result = pike_vm.next(",
          "        &mut stack,",
          "        &mut slot_table,",
          "        &mut active_states,",
          "        haystack,",
          "        at,",
          "        at_ch,",
          "        at_len,",
          "        sid,",
          "    );",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let target_id = StateID(1);",
          "    let ranges = vec![(b'a' as char, b'a' as char)]; // start == at_ch",
          "    let states = vec![State::Ranges { target: target_id, ranges }];",
          "    let nfa = NFA {",
          "        pattern: String::new(),",
          "        states,",
          "        start: StateID(0),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index: CaptureNameMap::default(),",
          "        cap_index_to_name: Vec::new(),",
          "        memory_extra: 0,",
          "    };",
          "    let pike_vm = PikeVM::new(nfa);",
          "    let mut stack = Vec::new();",
          "    let mut slot_table = SlotTable::new();",
          "    let mut active_states = ActiveStates {",
          "        set: SparseSet::default(),",
          "        slot_table: slot_table.clone(),",
          "    };",
          "    let haystack: &[u8] = b\"a\"; // non-empty",
          "    let at = 0; // valid index",
          "    let at_ch = b'a' as char; // equal to start",
          "    let at_len = 1; // greater than 0",
          "    let sid = StateID(0); // valid for ranges",
          "",
          "    let result = pike_vm.next(",
          "        &mut stack,",
          "        &mut slot_table,",
          "        &mut active_states,",
          "        haystack,",
          "        at,",
          "        at_ch,",
          "        at_len,",
          "        sid,",
          "    );",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let target_id = StateID(1);",
          "    let ranges = vec![(b'a' as char, b'c' as char), (b'b' as char, b'b' as char)]; // start == at_ch",
          "    let states = vec![State::Ranges { target: target_id, ranges }];",
          "    let nfa = NFA {",
          "        pattern: String::new(),",
          "        states,",
          "        start: StateID(0),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index: CaptureNameMap::default(),",
          "        cap_index_to_name: Vec::new(),",
          "        memory_extra: 0,",
          "    };",
          "    let pike_vm = PikeVM::new(nfa);",
          "    let mut stack = Vec::new();",
          "    let mut slot_table = SlotTable::new();",
          "    let mut active_states = ActiveStates {",
          "        set: SparseSet::default(),",
          "        slot_table: slot_table.clone(),",
          "    };",
          "    let haystack: &[u8] = b\"b\"; // non-empty",
          "    let at = 0; // valid index",
          "    let at_ch = b'b' as char; // equal to start",
          "    let at_len = 1; // greater than 0",
          "    let sid = StateID(0); // valid for ranges",
          "",
          "    let result = pike_vm.next(",
          "        &mut stack,",
          "        &mut slot_table,",
          "        &mut active_states,",
          "        haystack,",
          "        at,",
          "        at_ch,",
          "        at_len,",
          "        sid,",
          "    );",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let target_id = StateID(1);",
          "    let ranges = vec![(b'a' as char, b'c' as char), (b'b' as char, b'b' as char)]; // start == at_ch",
          "    let states = vec![State::Ranges { target: target_id, ranges }];",
          "    let nfa = NFA {",
          "        pattern: String::new(),",
          "        states,",
          "        start: StateID(0),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index: CaptureNameMap::default(),",
          "        cap_index_to_name: Vec::new(),",
          "        memory_extra: 0,",
          "    };",
          "    let pike_vm = PikeVM::new(nfa);",
          "    let mut stack = Vec::new();",
          "    let mut slot_table = SlotTable::new();",
          "    let mut active_states = ActiveStates {",
          "        set: SparseSet::default(),",
          "        slot_table: slot_table.clone(),",
          "    };",
          "    let haystack: &[u8] = b\"b\"; // non-empty",
          "    let at = 0; // valid index",
          "    let at_ch = b'b' as char; // equal to start",
          "    let at_len = 1; // greater than 0",
          "    let sid = StateID(0); // valid for ranges",
          "",
          "    let result = pike_vm.next(",
          "        &mut stack,",
          "        &mut slot_table,",
          "        &mut active_states,",
          "        haystack,",
          "        at,",
          "        at_ch,",
          "        at_len,",
          "        sid,",
          "    );",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let target_id = StateID(1);",
          "    let ranges = vec![(b'a' as char, b'd' as char)]; // start == at_ch and end >= at_ch",
          "    let states = vec![State::Ranges { target: target_id, ranges }];",
          "    let nfa = NFA {",
          "        pattern: String::new(),",
          "        states,",
          "        start: StateID(0),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index: CaptureNameMap::default(),",
          "        cap_index_to_name: Vec::new(),",
          "        memory_extra: 0,",
          "    };",
          "    let pike_vm = PikeVM::new(nfa);",
          "    let mut stack = Vec::new();",
          "    let mut slot_table = SlotTable::new();",
          "    let mut active_states = ActiveStates {",
          "        set: SparseSet::default(),",
          "        slot_table: slot_table.clone(),",
          "    };",
          "    let haystack: &[u8] = b\"a\"; // non-empty",
          "    let at = 0; // valid index",
          "    let at_ch = b'a' as char; // equal to start",
          "    let at_len = 1; // greater than 0",
          "    let sid = StateID(0); // valid for ranges",
          "",
          "    let result = pike_vm.next(",
          "        &mut stack,",
          "        &mut slot_table,",
          "        &mut active_states,",
          "        haystack,",
          "        at,",
          "        at_ch,",
          "        at_len,",
          "        sid,",
          "    );",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let target_id = StateID(1);",
          "    let ranges = vec![(b'a' as char, b'd' as char)]; // start == at_ch and end >= at_ch",
          "    let states = vec![State::Ranges { target: target_id, ranges }];",
          "    let nfa = NFA {",
          "        pattern: String::new(),",
          "        states,",
          "        start: StateID(0),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index: CaptureNameMap::default(),",
          "        cap_index_to_name: Vec::new(),",
          "        memory_extra: 0,",
          "    };",
          "    let pike_vm = PikeVM::new(nfa);",
          "    let mut stack = Vec::new();",
          "    let mut slot_table = SlotTable::new();",
          "    let mut active_states = ActiveStates {",
          "        set: SparseSet::default(),",
          "        slot_table: slot_table.clone(),",
          "    };",
          "    let haystack: &[u8] = b\"a\"; // non-empty",
          "    let at = 0; // valid index",
          "    let at_ch = b'a' as char; // equal to start",
          "    let at_len = 1; // greater than 0",
          "    let sid = StateID(0); // valid for ranges",
          "",
          "    let result = pike_vm.next(",
          "        &mut stack,",
          "        &mut slot_table,",
          "        &mut active_states,",
          "        haystack,",
          "        at,",
          "        at_ch,",
          "        at_len,",
          "        sid,",
          "    );",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]