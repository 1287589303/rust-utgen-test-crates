[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ranges = vec![('a', 'a')];",
          "    let state_id = StateID(0);",
          "    let nfa = NFA {",
          "        pattern: \"a\".to_string(),",
          "        states: vec![State::Ranges { target: state_id, ranges }],",
          "        start: state_id,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![],",
          "        memory_extra: 0,",
          "    };",
          "    ",
          "    let pike_vm = PikeVM::new(nfa);",
          "    let mut stack = Vec::new();",
          "    let mut active_states = ActiveStates {",
          "        set: SparseSet::new(),",
          "        slot_table: SlotTable::new(),",
          "    };",
          "    let mut curr_slot_table = SlotTable::new();",
          "    let haystack = b\"a\";",
          "    let at = 0;",
          "    let at_ch = 'a';",
          "    let at_len = 0;",
          "    ",
          "    let result = pike_vm.next(",
          "        &mut stack,",
          "        &mut curr_slot_table,",
          "        &mut active_states,",
          "        haystack,",
          "        at,",
          "        at_ch,",
          "        at_len,",
          "        state_id,",
          "    );",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let ranges = vec![('a', 'a')];",
          "    let state_id = StateID(0);",
          "    let nfa = NFA {",
          "        pattern: \"a\".to_string(),",
          "        states: vec![State::Ranges { target: state_id, ranges }],",
          "        start: state_id,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![],",
          "        memory_extra: 0,",
          "    };",
          "    ",
          "    let pike_vm = PikeVM::new(nfa);",
          "    let mut stack = Vec::new();",
          "    let mut active_states = ActiveStates {",
          "        set: SparseSet::new(),",
          "        slot_table: SlotTable::new(),",
          "    };",
          "    let mut curr_slot_table = SlotTable::new();",
          "    let haystack = b\"a\";",
          "    let at = 0;",
          "    let at_ch = 'a';",
          "    let at_len = 0;",
          "    ",
          "    let result = pike_vm.next(",
          "        &mut stack,",
          "        &mut curr_slot_table,",
          "        &mut active_states,",
          "        haystack,",
          "        at,",
          "        at_ch,",
          "        at_len,",
          "        state_id,",
          "    );",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ranges = vec![('b', 'b')];",
          "    let state_id = StateID(1);",
          "    let nfa = NFA {",
          "        pattern: \"b\".to_string(),",
          "        states: vec![State::Ranges { target: state_id, ranges }],",
          "        start: state_id,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![],",
          "        memory_extra: 0,",
          "    };",
          "",
          "    let pike_vm = PikeVM::new(nfa);",
          "    let mut stack = Vec::new();",
          "    let mut active_states = ActiveStates {",
          "        set: SparseSet::new(),",
          "        slot_table: SlotTable::new(),",
          "    };",
          "    let mut curr_slot_table = SlotTable::new();",
          "    let haystack = b\"a\"; // haystack does not contain 'b'",
          "    let at = 0;",
          "    let at_ch = 'b'; // at_ch is different",
          "    let at_len = 0;",
          "",
          "    let result = pike_vm.next(",
          "        &mut stack,",
          "        &mut curr_slot_table,",
          "        &mut active_states,",
          "        haystack,",
          "        at,",
          "        at_ch,",
          "        at_len,",
          "        state_id,",
          "    );",
          "}"
        ],
        "oracle": [
          "    let haystack = b\"a\"; // haystack does not contain 'b'",
          "    let at = 0;",
          "    let at_ch = 'b'; // at_ch is different",
          "    let at_len = 0;",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let ranges = vec![('b', 'b')];",
          "    let state_id = StateID(1);",
          "    let nfa = NFA {",
          "        pattern: \"b\".to_string(),",
          "        states: vec![State::Ranges { target: state_id, ranges }],",
          "        start: state_id,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![],",
          "        memory_extra: 0,",
          "    };",
          "",
          "    let pike_vm = PikeVM::new(nfa);",
          "    let mut stack = Vec::new();",
          "    let mut active_states = ActiveStates {",
          "        set: SparseSet::new(),",
          "        slot_table: SlotTable::new(),",
          "    };",
          "    let mut curr_slot_table = SlotTable::new();",
          "    let haystack = b\"a\"; // haystack does not contain 'b'",
          "    let at = 0;",
          "    let at_ch = 'b'; // at_ch is different",
          "    let at_len = 0;",
          "",
          "    let result = pike_vm.next(",
          "        &mut stack,",
          "        &mut curr_slot_table,",
          "        &mut active_states,",
          "        haystack,",
          "        at,",
          "        at_ch,",
          "        at_len,",
          "        state_id,",
          "    );",
          "    let haystack = b\"a\"; // haystack does not contain 'b'",
          "    let at = 0;",
          "    let at_ch = 'b'; // at_ch is different",
          "    let at_len = 0;",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]