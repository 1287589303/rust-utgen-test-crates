[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassUnicodeRange { start: 'A', end: 'Z' };",
          "    let mut result = core::fmt::Formatter::new();",
          "    range.fmt(&mut result).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.to_string(), \"ClassUnicodeRange { start: \\\"A\\\", end: \\\"Z\\\" }\");"
        ],
        "code": [
          "{",
          "    let range = ClassUnicodeRange { start: 'A', end: 'Z' };",
          "    let mut result = core::fmt::Formatter::new();",
          "    range.fmt(&mut result).unwrap();",
          "    assert_eq!(result.to_string(), \"ClassUnicodeRange { start: \\\"A\\\", end: \\\"Z\\\" }\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassUnicodeRange { start: 'a', end: 'z' };",
          "    let mut result = core::fmt::Formatter::new();",
          "    range.fmt(&mut result).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.format(\"start\"), \"a\");",
          "    assert_eq!(result.format(\"end\"), \"z\");",
          "    assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    let range = ClassUnicodeRange { start: 'a', end: 'z' };",
          "    let mut result = core::fmt::Formatter::new();",
          "    range.fmt(&mut result).unwrap();",
          "    assert_eq!(result.format(\"start\"), \"a\");",
          "    assert_eq!(result.format(\"end\"), \"z\");",
          "    assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassUnicodeRange { start: '0', end: '9' };",
          "    let mut result = core::fmt::Formatter::new();",
          "    range.fmt(&mut result).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.buffer(), \"ClassUnicodeRange { start: \\\"0\\\", end: \\\"9\\\" }\");"
        ],
        "code": [
          "{",
          "    let range = ClassUnicodeRange { start: '0', end: '9' };",
          "    let mut result = core::fmt::Formatter::new();",
          "    range.fmt(&mut result).unwrap();",
          "    assert_eq!(result.buffer(), \"ClassUnicodeRange { start: \\\"0\\\", end: \\\"9\\\" }\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassUnicodeRange { start: '!', end: '~' };",
          "    let mut result = core::fmt::Formatter::new();",
          "    range.fmt(&mut result).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.to_string(), \"ClassUnicodeRange { start: \\\"!\\\", end: \\\"~\\\" }\");",
          "    assert!(result.is_ok());",
          "    assert!(result.has_fields(vec![\"start\", \"end\"]));"
        ],
        "code": [
          "{",
          "    let range = ClassUnicodeRange { start: '!', end: '~' };",
          "    let mut result = core::fmt::Formatter::new();",
          "    range.fmt(&mut result).unwrap();",
          "    assert_eq!(result.to_string(), \"ClassUnicodeRange { start: \\\"!\\\", end: \\\"~\\\" }\");",
          "    assert!(result.is_ok());",
          "    assert!(result.has_fields(vec![\"start\", \"end\"]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassUnicodeRange { start: 'À', end: 'Ö' };",
          "    let mut result = core::fmt::Formatter::new();",
          "    range.fmt(&mut result).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.to_string(), \"ClassUnicodeRange { start: 'À', end: 'Ö' }\");"
        ],
        "code": [
          "{",
          "    let range = ClassUnicodeRange { start: 'À', end: 'Ö' };",
          "    let mut result = core::fmt::Formatter::new();",
          "    range.fmt(&mut result).unwrap();",
          "    assert_eq!(result.to_string(), \"ClassUnicodeRange { start: 'À', end: 'Ö' }\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]