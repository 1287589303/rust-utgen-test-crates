[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = OverlappingState {",
          "        mat: None,",
          "        id: None,",
          "        at: 0,",
          "        next_match_index: None,",
          "        rev_eoi: false,",
          "    };",
          "    state.get_match();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.get_match(), None);"
        ],
        "code": [
          "{",
          "    let state = OverlappingState {",
          "        mat: None,",
          "        id: None,",
          "        at: 0,",
          "        next_match_index: None,",
          "        rev_eoi: false,",
          "    };",
          "    state.get_match();",
          "    assert_eq!(state.get_match(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = OverlappingState {",
          "        mat: Some(HalfMatch {",
          "            pattern: PatternID(0), ",
          "            offset: 0,",
          "        }),",
          "        id: None,",
          "        at: 0,",
          "        next_match_index: None,",
          "        rev_eoi: false,",
          "    };",
          "    state.get_match();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.get_match(), Some(HalfMatch { pattern: PatternID(0), offset: 0 }));",
          "    assert_eq!(state.mat.is_some(), true);",
          "    assert_eq!(state.get_match().unwrap().pattern, PatternID(0));",
          "    assert_eq!(state.get_match().unwrap().offset, 0);",
          "    state.mat = None;",
          "    assert_eq!(state.get_match(), None);",
          "    state.mat = Some(HalfMatch { pattern: PatternID(1), offset: 5 });",
          "    assert_eq!(state.get_match(), Some(HalfMatch { pattern: PatternID(1), offset: 5 }));"
        ],
        "code": [
          "{",
          "    let state = OverlappingState {",
          "        mat: Some(HalfMatch {",
          "            pattern: PatternID(0), ",
          "            offset: 0,",
          "        }),",
          "        id: None,",
          "        at: 0,",
          "        next_match_index: None,",
          "        rev_eoi: false,",
          "    };",
          "    state.get_match();",
          "    assert_eq!(state.get_match(), Some(HalfMatch { pattern: PatternID(0), offset: 0 }));",
          "    assert_eq!(state.mat.is_some(), true);",
          "    assert_eq!(state.get_match().unwrap().pattern, PatternID(0));",
          "    assert_eq!(state.get_match().unwrap().offset, 0);",
          "    state.mat = None;",
          "    assert_eq!(state.get_match(), None);",
          "    state.mat = Some(HalfMatch { pattern: PatternID(1), offset: 5 });",
          "    assert_eq!(state.get_match(), Some(HalfMatch { pattern: PatternID(1), offset: 5 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = OverlappingState {",
          "        mat: Some(HalfMatch {",
          "            pattern: PatternID(1), ",
          "            offset: 1,",
          "        }),",
          "        id: None,",
          "        at: 0,",
          "        next_match_index: None,",
          "        rev_eoi: false,",
          "    };",
          "    state.get_match();",
          "}"
        ],
        "oracle": [
          "    let state_with_match = OverlappingState { mat: Some(HalfMatch { pattern: PatternID(1), offset: 1 }), id: None, at: 0, next_match_index: None, rev_eoi: false }; assert_eq!(state_with_match.get_match(), Some(HalfMatch { pattern: PatternID(1), offset: 1 }));",
          "    let state_without_match = OverlappingState { mat: None, id: None, at: 0, next_match_index: None, rev_eoi: false }; assert_eq!(state_without_match.get_match(), None);",
          "    let state_with_empty_match = OverlappingState { mat: Some(HalfMatch { pattern: PatternID(0), offset: 0 }), id: None, at: 0, next_match_index: None, rev_eoi: false }; assert_eq!(state_with_empty_match.get_match(), Some(HalfMatch { pattern: PatternID(0), offset: 0 }));"
        ],
        "code": [
          "{",
          "    let state = OverlappingState {",
          "        mat: Some(HalfMatch {",
          "            pattern: PatternID(1), ",
          "            offset: 1,",
          "        }),",
          "        id: None,",
          "        at: 0,",
          "        next_match_index: None,",
          "        rev_eoi: false,",
          "    };",
          "    state.get_match();",
          "    let state_with_match = OverlappingState { mat: Some(HalfMatch { pattern: PatternID(1), offset: 1 }), id: None, at: 0, next_match_index: None, rev_eoi: false }; assert_eq!(state_with_match.get_match(), Some(HalfMatch { pattern: PatternID(1), offset: 1 }));",
          "    let state_without_match = OverlappingState { mat: None, id: None, at: 0, next_match_index: None, rev_eoi: false }; assert_eq!(state_without_match.get_match(), None);",
          "    let state_with_empty_match = OverlappingState { mat: Some(HalfMatch { pattern: PatternID(0), offset: 0 }), id: None, at: 0, next_match_index: None, rev_eoi: false }; assert_eq!(state_with_empty_match.get_match(), Some(HalfMatch { pattern: PatternID(0), offset: 0 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = OverlappingState {",
          "        mat: Some(HalfMatch {",
          "            pattern: PatternID(2), ",
          "            offset: std::usize::MAX,",
          "        }),",
          "        id: None,",
          "        at: 0,",
          "        next_match_index: None,",
          "        rev_eoi: false,",
          "    };",
          "    state.get_match();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.get_match(), Some(HalfMatch { pattern: PatternID(2), offset: std::usize::MAX }));",
          "    ",
          "    let state_no_match = OverlappingState {",
          "    mat: None,",
          "    id: None,",
          "    at: 0,",
          "    next_match_index: None,",
          "    rev_eoi: false,",
          "    };",
          "    assert_eq!(state_no_match.get_match(), None);"
        ],
        "code": [
          "{",
          "    let state = OverlappingState {",
          "        mat: Some(HalfMatch {",
          "            pattern: PatternID(2), ",
          "            offset: std::usize::MAX,",
          "        }),",
          "        id: None,",
          "        at: 0,",
          "        next_match_index: None,",
          "        rev_eoi: false,",
          "    };",
          "    state.get_match();",
          "    assert_eq!(state.get_match(), Some(HalfMatch { pattern: PatternID(2), offset: std::usize::MAX }));",
          "    ",
          "    let state_no_match = OverlappingState {",
          "    mat: None,",
          "    id: None,",
          "    at: 0,",
          "    next_match_index: None,",
          "    rev_eoi: false,",
          "    };",
          "    assert_eq!(state_no_match.get_match(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]