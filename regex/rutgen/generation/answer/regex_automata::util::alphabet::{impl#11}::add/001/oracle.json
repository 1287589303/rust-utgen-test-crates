[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.add(0);",
          "}"
        ],
        "oracle": [
          "    assert!(byte_set.contains(0));",
          "    assert!(byte_set.is_empty() == false);",
          "    assert!(byte_set.contains_range(0, 0) == true);"
        ],
        "code": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.add(0);",
          "    assert!(byte_set.contains(0));",
          "    assert!(byte_set.is_empty() == false);",
          "    assert!(byte_set.contains_range(0, 0) == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.add(127);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_set.contains(127), true);",
          "    assert_eq!(byte_set.is_empty(), false);",
          "    assert_eq!(byte_set.contains(126), false);",
          "    assert_eq!(byte_set.contains(128), false);"
        ],
        "code": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.add(127);",
          "    assert_eq!(byte_set.contains(127), true);",
          "    assert_eq!(byte_set.is_empty(), false);",
          "    assert_eq!(byte_set.contains(126), false);",
          "    assert_eq!(byte_set.contains(128), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.add(255);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_set.contains(255), true);",
          "    assert_eq!(byte_set.is_empty(), false);",
          "    assert_eq!(byte_set.contains(128), false);",
          "    assert_eq!(byte_set.contains(0), false);",
          "    assert_eq!(byte_set.contains(127), false);"
        ],
        "code": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.add(255);",
          "    assert_eq!(byte_set.contains(255), true);",
          "    assert_eq!(byte_set.is_empty(), false);",
          "    assert_eq!(byte_set.contains(128), false);",
          "    assert_eq!(byte_set.contains(0), false);",
          "    assert_eq!(byte_set.contains(127), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.add(0);",
          "    byte_set.add(0);",
          "}"
        ],
        "oracle": [
          "    assert!(byte_set.contains(0));",
          "    assert!(byte_set.is_empty() == false);",
          "    assert!(byte_set.contains_range(0, 0));",
          "    assert!(byte_set.contains_range(1, 1) == false);",
          "    assert!(byte_set.contains(1) == false);"
        ],
        "code": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.add(0);",
          "    byte_set.add(0);",
          "    assert!(byte_set.contains(0));",
          "    assert!(byte_set.is_empty() == false);",
          "    assert!(byte_set.contains_range(0, 0));",
          "    assert!(byte_set.contains_range(1, 1) == false);",
          "    assert!(byte_set.contains(1) == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.add(127);",
          "    byte_set.add(127);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_set.contains(127), true);"
        ],
        "code": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.add(127);",
          "    byte_set.add(127);",
          "    assert_eq!(byte_set.contains(127), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.add(255);",
          "    byte_set.add(255);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_set.contains(255), true);",
          "    assert_eq!(byte_set.is_empty(), false);",
          "    assert_eq!(byte_set.contains_range(0, 255), true);",
          "    assert_eq!(byte_set.iter().count(), 1);",
          "    assert_eq!(byte_set.iter_ranges().count(), 1);",
          "    assert_eq!(byte_set.write_to_len(), expected_length);"
        ],
        "code": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.add(255);",
          "    byte_set.add(255);",
          "    assert_eq!(byte_set.contains(255), true);",
          "    assert_eq!(byte_set.is_empty(), false);",
          "    assert_eq!(byte_set.contains_range(0, 255), true);",
          "    assert_eq!(byte_set.iter().count(), 1);",
          "    assert_eq!(byte_set.iter_ranges().count(), 1);",
          "    assert_eq!(byte_set.write_to_len(), expected_length);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.add(0);",
          "    byte_set.add(127);",
          "    byte_set.add(255);",
          "}"
        ],
        "oracle": [
          "    assert!(byte_set.contains(0));",
          "    assert!(byte_set.contains(127));",
          "    assert!(byte_set.contains(255));",
          "    assert!(!byte_set.contains(1));",
          "    assert!(!byte_set.contains(126));",
          "    assert!(!byte_set.contains(128));",
          "    assert!(!byte_set.contains(254));",
          "    assert!(!byte_set.is_empty());",
          "    assert!(byte_set.contains_range(0, 127));",
          "    assert!(byte_set.contains_range(0, 255));",
          "    assert!(!byte_set.contains_range(1, 126));",
          "    assert!(!byte_set.contains_range(128, 255));"
        ],
        "code": [
          "{",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.add(0);",
          "    byte_set.add(127);",
          "    byte_set.add(255);",
          "    assert!(byte_set.contains(0));",
          "    assert!(byte_set.contains(127));",
          "    assert!(byte_set.contains(255));",
          "    assert!(!byte_set.contains(1));",
          "    assert!(!byte_set.contains(126));",
          "    assert!(!byte_set.contains(128));",
          "    assert!(!byte_set.contains(254));",
          "    assert!(!byte_set.is_empty());",
          "    assert!(byte_set.contains_range(0, 127));",
          "    assert!(byte_set.contains_range(0, 255));",
          "    assert!(!byte_set.contains_range(1, 126));",
          "    assert!(!byte_set.contains_range(128, 255));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]