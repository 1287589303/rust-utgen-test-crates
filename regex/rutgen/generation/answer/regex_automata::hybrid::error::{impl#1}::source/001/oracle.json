[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = BuildError {",
          "        kind: BuildErrorKind::Unsupported(\"unsupported feature\"),",
          "    };",
          "    let _result = error.source();",
          "}"
        ],
        "oracle": [
          "    let error = BuildError { kind: BuildErrorKind::Unsupported(\"unsupported feature\") };",
          "    let result = error.source();",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let error = BuildError {",
          "        kind: BuildErrorKind::Unsupported(\"unsupported feature\"),",
          "    };",
          "    let _result = error.source();",
          "    let error = BuildError { kind: BuildErrorKind::Unsupported(\"unsupported feature\") };",
          "    let result = error.source();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = BuildError {",
          "        kind: BuildErrorKind::TooManyStates { limit: 10 },",
          "    };",
          "    let _result = error.source();",
          "}"
        ],
        "oracle": [
          "    let error = BuildError { kind: BuildErrorKind::TooManyStates { limit: 10 } };",
          "    let result = error.source();",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let error = BuildError {",
          "        kind: BuildErrorKind::TooManyStates { limit: 10 },",
          "    };",
          "    let _result = error.source();",
          "    let error = BuildError { kind: BuildErrorKind::TooManyStates { limit: 10 } };",
          "    let result = error.source();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = BuildError {",
          "        kind: BuildErrorKind::TooManyPatterns { limit: 5 },",
          "    };",
          "    let _result = error.source();",
          "}"
        ],
        "oracle": [
          "    let error = BuildError { kind: BuildErrorKind::TooManyPatterns { limit: 5 } };",
          "    let result = error.source();",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let error = BuildError {",
          "        kind: BuildErrorKind::TooManyPatterns { limit: 5 },",
          "    };",
          "    let _result = error.source();",
          "    let error = BuildError { kind: BuildErrorKind::TooManyPatterns { limit: 5 } };",
          "    let result = error.source();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = BuildError {",
          "        kind: BuildErrorKind::DFAExceededSizeLimit { limit: 1024 },",
          "    };",
          "    let _result = error.source();",
          "}"
        ],
        "oracle": [
          "    let error = BuildError { kind: BuildErrorKind::DFAExceededSizeLimit { limit: 1024 } };",
          "    let result = error.source();",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let error = BuildError {",
          "        kind: BuildErrorKind::DFAExceededSizeLimit { limit: 1024 },",
          "    };",
          "    let _result = error.source();",
          "    let error = BuildError { kind: BuildErrorKind::DFAExceededSizeLimit { limit: 1024 } };",
          "    let result = error.source();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = BuildError {",
          "        kind: BuildErrorKind::DeterminizeExceededSizeLimit { limit: 2048 },",
          "    };",
          "    let _result = error.source();",
          "}"
        ],
        "oracle": [
          "    let error = BuildError { kind: BuildErrorKind::DeterminizeExceededSizeLimit { limit: 2048 } };",
          "    let result = error.source();",
          "    assert!(result.is_none());"
        ],
        "code": [
          "{",
          "    let error = BuildError {",
          "        kind: BuildErrorKind::DeterminizeExceededSizeLimit { limit: 2048 },",
          "    };",
          "    let _result = error.source();",
          "    let error = BuildError { kind: BuildErrorKind::DeterminizeExceededSizeLimit { limit: 2048 } };",
          "    let result = error.source();",
          "    assert!(result.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = BuildError {",
          "        kind: BuildErrorKind::InsufficientCacheCapacity { minimum: 20, given: 10 },",
          "    };",
          "    let _result = error.source();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, None);"
        ],
        "code": [
          "{",
          "    let error = BuildError {",
          "        kind: BuildErrorKind::InsufficientCacheCapacity { minimum: 20, given: 10 },",
          "    };",
          "    let _result = error.source();",
          "    assert_eq!(_result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = BuildError {",
          "        kind: BuildErrorKind::InsufficientStateIDCapacity { err: LazyStateIDError },",
          "    };",
          "    let _result = error.source();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, None);"
        ],
        "code": [
          "{",
          "    let error = BuildError {",
          "        kind: BuildErrorKind::InsufficientStateIDCapacity { err: LazyStateIDError },",
          "    };",
          "    let _result = error.source();",
          "    assert_eq!(_result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]