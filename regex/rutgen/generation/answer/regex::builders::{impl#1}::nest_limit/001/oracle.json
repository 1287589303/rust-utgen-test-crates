[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder {",
          "        pats: vec![],",
          "        metac: meta::Config::default(),",
          "        syntaxc: syntax::Config::default(),",
          "    };",
          "    builder.nest_limit(0);",
          "}"
        ],
        "oracle": [
          "    builder.nest_limit(0) == &mut builder",
          "    builder.nest_limit(5) == &mut builder",
          "    builder.nest_limit(10) == &mut builder",
          "    builder.nest_limit(u32::MAX) == &mut builder",
          "    builder.nest_limit(1) == &mut builder"
        ],
        "code": [
          "{",
          "    let mut builder = Builder {",
          "        pats: vec![],",
          "        metac: meta::Config::default(),",
          "        syntaxc: syntax::Config::default(),",
          "    };",
          "    builder.nest_limit(0);",
          "    builder.nest_limit(0) == &mut builder",
          "    builder.nest_limit(5) == &mut builder",
          "    builder.nest_limit(10) == &mut builder",
          "    builder.nest_limit(u32::MAX) == &mut builder",
          "    builder.nest_limit(1) == &mut builder",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder {",
          "        pats: vec![],",
          "        metac: meta::Config::default(),",
          "        syntaxc: syntax::Config::default(),",
          "    };",
          "    builder.nest_limit(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.syntaxc.nest_limit(), 1);",
          "    assert!(builder.nest_limit(0).is_some());",
          "    assert!(builder.nest_limit(10).is_some());",
          "    assert!(builder.nest_limit(u32::MAX).is_some());",
          "    assert!(builder.nest_limit(2).is_some());",
          "    assert!(builder.nest_limit(5).is_some());",
          "    assert!(builder.nest_limit(1000).is_some());",
          "    assert!(builder.nest_limit(0).syntaxc.nest_limit() == 0);",
          "    assert!(builder.nest_limit(3).syntaxc.nest_limit() == 3);",
          "    assert_eq!(builder.nest_limit(4).syntaxc.nest_limit(), 4);"
        ],
        "code": [
          "{",
          "    let mut builder = Builder {",
          "        pats: vec![],",
          "        metac: meta::Config::default(),",
          "        syntaxc: syntax::Config::default(),",
          "    };",
          "    builder.nest_limit(1);",
          "    assert_eq!(builder.syntaxc.nest_limit(), 1);",
          "    assert!(builder.nest_limit(0).is_some());",
          "    assert!(builder.nest_limit(10).is_some());",
          "    assert!(builder.nest_limit(u32::MAX).is_some());",
          "    assert!(builder.nest_limit(2).is_some());",
          "    assert!(builder.nest_limit(5).is_some());",
          "    assert!(builder.nest_limit(1000).is_some());",
          "    assert!(builder.nest_limit(0).syntaxc.nest_limit() == 0);",
          "    assert!(builder.nest_limit(3).syntaxc.nest_limit() == 3);",
          "    assert_eq!(builder.nest_limit(4).syntaxc.nest_limit(), 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder {",
          "        pats: vec![],",
          "        metac: meta::Config::default(),",
          "        syntaxc: syntax::Config::default(),",
          "    };",
          "    builder.nest_limit(10);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.syntaxc.get_nest_limit(), 10);",
          "    assert!(std::ptr::eq(builder.nest_limit(10), &mut builder));",
          "    assert_eq!(builder.nest_limit(5).syntaxc.get_nest_limit(), 5);",
          "    assert!(builder.nest_limit(0).syntaxc.get_nest_limit() >= 0);",
          "    assert!(builder.nest_limit(100).syntaxc.get_nest_limit() <= 100);",
          "    assert!(builder.nest_limit(u32::MAX).syntaxc.get_nest_limit() == u32::MAX);"
        ],
        "code": [
          "{",
          "    let mut builder = Builder {",
          "        pats: vec![],",
          "        metac: meta::Config::default(),",
          "        syntaxc: syntax::Config::default(),",
          "    };",
          "    builder.nest_limit(10);",
          "    assert_eq!(builder.syntaxc.get_nest_limit(), 10);",
          "    assert!(std::ptr::eq(builder.nest_limit(10), &mut builder));",
          "    assert_eq!(builder.nest_limit(5).syntaxc.get_nest_limit(), 5);",
          "    assert!(builder.nest_limit(0).syntaxc.get_nest_limit() >= 0);",
          "    assert!(builder.nest_limit(100).syntaxc.get_nest_limit() <= 100);",
          "    assert!(builder.nest_limit(u32::MAX).syntaxc.get_nest_limit() == u32::MAX);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder {",
          "        pats: vec![],",
          "        metac: meta::Config::default(),",
          "        syntaxc: syntax::Config::default(),",
          "    };",
          "    builder.nest_limit(100);",
          "}"
        ],
        "oracle": [
          "    builder.nest_limit(100) assert_eq!(builder.syntaxc.nest_limit(), 100);",
          "    builder.nest_limit(0) assert_eq!(builder.syntaxc.nest_limit(), 0);",
          "    builder.nest_limit(50) assert_eq!(builder.syntaxc.nest_limit(), 50);",
          "    builder.nest_limit(u32::MAX) assert_eq!(builder.syntaxc.nest_limit(), u32::MAX);",
          "    builder.nest_limit(10) assert_eq!(builder.nest_limit(10) as *const _, &builder as *const Builder);"
        ],
        "code": [
          "{",
          "    let mut builder = Builder {",
          "        pats: vec![],",
          "        metac: meta::Config::default(),",
          "        syntaxc: syntax::Config::default(),",
          "    };",
          "    builder.nest_limit(100);",
          "    builder.nest_limit(100) assert_eq!(builder.syntaxc.nest_limit(), 100);",
          "    builder.nest_limit(0) assert_eq!(builder.syntaxc.nest_limit(), 0);",
          "    builder.nest_limit(50) assert_eq!(builder.syntaxc.nest_limit(), 50);",
          "    builder.nest_limit(u32::MAX) assert_eq!(builder.syntaxc.nest_limit(), u32::MAX);",
          "    builder.nest_limit(10) assert_eq!(builder.nest_limit(10) as *const _, &builder as *const Builder);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder {",
          "        pats: vec![],",
          "        metac: meta::Config::default(),",
          "        syntaxc: syntax::Config::default(),",
          "    };",
          "    builder.nest_limit(u32::MAX);",
          "}"
        ],
        "oracle": [
          "    builder.nest_limit(u32::MAX) == &mut builder",
          "    builder.nest_limit(10).syntaxc.nest_limit() == 10",
          "    builder.nest_limit(5) == &mut builder",
          "    builder.nest_limit(0) == &mut builder",
          "    builder.nest_limit(32).syntaxc.nest_limit() == 32",
          "    builder.nest_limit(u32::MAX - 1) == &mut builder"
        ],
        "code": [
          "{",
          "    let mut builder = Builder {",
          "        pats: vec![],",
          "        metac: meta::Config::default(),",
          "        syntaxc: syntax::Config::default(),",
          "    };",
          "    builder.nest_limit(u32::MAX);",
          "    builder.nest_limit(u32::MAX) == &mut builder",
          "    builder.nest_limit(10).syntaxc.nest_limit() == 10",
          "    builder.nest_limit(5) == &mut builder",
          "    builder.nest_limit(0) == &mut builder",
          "    builder.nest_limit(32).syntaxc.nest_limit() == 32",
          "    builder.nest_limit(u32::MAX - 1) == &mut builder",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]