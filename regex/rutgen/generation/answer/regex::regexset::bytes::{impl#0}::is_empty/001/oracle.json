[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let regex_set = RegexSet::empty();",
          "    let result = regex_set.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert!(result == true);",
          "    let regex_set_non_empty = RegexSet::new([r\"[0-9]\"]).unwrap();",
          "    let result_non_empty = regex_set_non_empty.is_empty();",
          "    assert!(result_non_empty == false);"
        ],
        "code": [
          "{",
          "    let regex_set = RegexSet::empty();",
          "    let result = regex_set.is_empty();",
          "    assert!(result == true);",
          "    let regex_set_non_empty = RegexSet::new([r\"[0-9]\"]).unwrap();",
          "    let result_non_empty = regex_set_non_empty.is_empty();",
          "    assert!(result_non_empty == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let regex_set = RegexSet::new([r\"[0-9]\"]).unwrap();",
          "    let result = regex_set.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert!(!result);",
          "    let empty_regex_set = RegexSet::empty();",
          "    let result_empty = empty_regex_set.is_empty();",
          "    assert!(result_empty);"
        ],
        "code": [
          "{",
          "    let regex_set = RegexSet::new([r\"[0-9]\"]).unwrap();",
          "    let result = regex_set.is_empty();",
          "    assert!(!result);",
          "    let empty_regex_set = RegexSet::empty();",
          "    let result_empty = empty_regex_set.is_empty();",
          "    assert!(result_empty);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let regex_set = RegexSet::new([r\"[a-z]\", r\"[A-Z]\", r\"[0-9]\"]).unwrap();",
          "    let result = regex_set.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert!(!result);"
        ],
        "code": [
          "{",
          "    let regex_set = RegexSet::new([r\"[a-z]\", r\"[A-Z]\", r\"[0-9]\"]).unwrap();",
          "    let result = regex_set.is_empty();",
          "    assert!(!result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let regex_set = RegexSet::new([r\"\"]).unwrap();",
          "    let result = regex_set.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert!(result);",
          "    assert!(!RegexSet::new([r\"[0-9]\"]).unwrap().is_empty());",
          "    let empty_regex_set = RegexSet::empty();",
          "    assert!(empty_regex_set.is_empty());",
          "    assert_eq!(empty_regex_set.len(), 0);",
          "    let single_regex_set = RegexSet::new([r\"[a-z]\"]).unwrap();",
          "    assert!(!single_regex_set.is_empty());"
        ],
        "code": [
          "{",
          "    let regex_set = RegexSet::new([r\"\"]).unwrap();",
          "    let result = regex_set.is_empty();",
          "    assert!(result);",
          "    assert!(!RegexSet::new([r\"[0-9]\"]).unwrap().is_empty());",
          "    let empty_regex_set = RegexSet::empty();",
          "    assert!(empty_regex_set.is_empty());",
          "    assert_eq!(empty_regex_set.len(), 0);",
          "    let single_regex_set = RegexSet::new([r\"[a-z]\"]).unwrap();",
          "    assert!(!single_regex_set.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let patterns: Vec<&str> = (0..1000).map(|_| r\"[a-z]\").collect();",
          "    let regex_set = RegexSet::new(patterns).unwrap();",
          "    let result = regex_set.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(regex_set.is_empty(), false);",
          "    assert!(RegexSet::empty().is_empty());",
          "    assert!(!regex_set.is_empty());"
        ],
        "code": [
          "{",
          "    let patterns: Vec<&str> = (0..1000).map(|_| r\"[a-z]\").collect();",
          "    let regex_set = RegexSet::new(patterns).unwrap();",
          "    let result = regex_set.is_empty();",
          "    assert_eq!(regex_set.is_empty(), false);",
          "    assert!(RegexSet::empty().is_empty());",
          "    assert!(!regex_set.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]