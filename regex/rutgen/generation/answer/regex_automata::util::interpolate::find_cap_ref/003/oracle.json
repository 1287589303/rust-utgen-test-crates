[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = b\"$groupName\";",
          "    let _ = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_cap_ref(b\"$groupName\"), Some(CaptureRef { cap: Ref::Named(\"groupName\"), end: 10 }));",
          "    assert_eq!(find_cap_ref(b\"$1\"), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
          "    assert_eq!(find_cap_ref(b\"$xyz\"), Some(CaptureRef { cap: Ref::Named(\"xyz\"), end: 4 }));",
          "    assert_eq!(find_cap_ref(b\"${group}\"), Some(CaptureRef { cap: Ref::Named(\"group\"), end: 8 }));",
          "    assert_eq!(find_cap_ref(b\"$\"), None);",
          "    assert_eq!(find_cap_ref(b\"${\" ), None);",
          "    assert_eq!(find_cap_ref(b\"${\"), None);",
          "    assert_eq!(find_cap_ref(b\"ABC$groupName\"), Some(CaptureRef { cap: Ref::Named(\"groupName\"), end: 12 }));",
          "    assert_eq!(find_cap_ref(b\"$12otherText\"), Some(CaptureRef { cap: Ref::Number(12), end: 2 }));",
          "    assert_eq!(find_cap_ref(b\"${12}\"), Some(CaptureRef { cap: Ref::Number(12), end: 5 }));"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = b\"$groupName\";",
          "    let _ = find_cap_ref(replacement);",
          "    assert_eq!(find_cap_ref(b\"$groupName\"), Some(CaptureRef { cap: Ref::Named(\"groupName\"), end: 10 }));",
          "    assert_eq!(find_cap_ref(b\"$1\"), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
          "    assert_eq!(find_cap_ref(b\"$xyz\"), Some(CaptureRef { cap: Ref::Named(\"xyz\"), end: 4 }));",
          "    assert_eq!(find_cap_ref(b\"${group}\"), Some(CaptureRef { cap: Ref::Named(\"group\"), end: 8 }));",
          "    assert_eq!(find_cap_ref(b\"$\"), None);",
          "    assert_eq!(find_cap_ref(b\"${\" ), None);",
          "    assert_eq!(find_cap_ref(b\"${\"), None);",
          "    assert_eq!(find_cap_ref(b\"ABC$groupName\"), Some(CaptureRef { cap: Ref::Named(\"groupName\"), end: 12 }));",
          "    assert_eq!(find_cap_ref(b\"$12otherText\"), Some(CaptureRef { cap: Ref::Number(12), end: 2 }));",
          "    assert_eq!(find_cap_ref(b\"${12}\"), Some(CaptureRef { cap: Ref::Number(12), end: 5 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = b\"$a1b2\";",
          "    let _ = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_cap_ref(b\"$a1b2\"), Some(CaptureRef { cap: Ref::Named(\"a1\"), end: 3 }));",
          "    assert_eq!(find_cap_ref(b\"$123\"), Some(CaptureRef { cap: Ref::Number(123), end: 4 }));",
          "    assert_eq!(find_cap_ref(b\"${var}\"), Some(CaptureRef { cap: Ref::Named(\"var\"), end: 5 }));",
          "    assert_eq!(find_cap_ref(b\"$a\"), Some(CaptureRef { cap: Ref::Named(\"a\"), end: 2 }));",
          "    assert_eq!(find_cap_ref(b\"$1\"), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
          "    assert_eq!(find_cap_ref(b\"$\"), None);",
          "    assert_eq!(find_cap_ref(b\"\"), None);",
          "    assert_eq!(find_cap_ref(b\"abc\"), None);",
          "    assert_eq!(find_cap_ref(b\"$$\"), None);",
          "    assert_eq!(find_cap_ref(b\"${\"), None);",
          "    assert_eq!(find_cap_ref(b\"${var\"), None);",
          "    assert_eq!(find_cap_ref(b\"$}\"), None);",
          "    assert_eq!(find_cap_ref(b\"${1}\"), Some(CaptureRef { cap: Ref::Number(1), end: 4 }));",
          "    assert_eq!(find_cap_ref(b\"$a}\"), None);",
          "    assert_eq!(find_cap_ref(b\"$a{b}\"), Some(CaptureRef { cap: Ref::Named(\"a\"), end: 2 }));",
          "    assert_eq!(find_cap_ref(b\"$a{\"), None);",
          "    assert_eq!(find_cap_ref(b\"$a}b\"), Some(CaptureRef { cap: Ref::Named(\"a\"), end: 2 }));"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = b\"$a1b2\";",
          "    let _ = find_cap_ref(replacement);",
          "    assert_eq!(find_cap_ref(b\"$a1b2\"), Some(CaptureRef { cap: Ref::Named(\"a1\"), end: 3 }));",
          "    assert_eq!(find_cap_ref(b\"$123\"), Some(CaptureRef { cap: Ref::Number(123), end: 4 }));",
          "    assert_eq!(find_cap_ref(b\"${var}\"), Some(CaptureRef { cap: Ref::Named(\"var\"), end: 5 }));",
          "    assert_eq!(find_cap_ref(b\"$a\"), Some(CaptureRef { cap: Ref::Named(\"a\"), end: 2 }));",
          "    assert_eq!(find_cap_ref(b\"$1\"), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
          "    assert_eq!(find_cap_ref(b\"$\"), None);",
          "    assert_eq!(find_cap_ref(b\"\"), None);",
          "    assert_eq!(find_cap_ref(b\"abc\"), None);",
          "    assert_eq!(find_cap_ref(b\"$$\"), None);",
          "    assert_eq!(find_cap_ref(b\"${\"), None);",
          "    assert_eq!(find_cap_ref(b\"${var\"), None);",
          "    assert_eq!(find_cap_ref(b\"$}\"), None);",
          "    assert_eq!(find_cap_ref(b\"${1}\"), Some(CaptureRef { cap: Ref::Number(1), end: 4 }));",
          "    assert_eq!(find_cap_ref(b\"$a}\"), None);",
          "    assert_eq!(find_cap_ref(b\"$a{b}\"), Some(CaptureRef { cap: Ref::Named(\"a\"), end: 2 }));",
          "    assert_eq!(find_cap_ref(b\"$a{\"), None);",
          "    assert_eq!(find_cap_ref(b\"$a}b\"), Some(CaptureRef { cap: Ref::Named(\"a\"), end: 2 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = b\"$1\";",
          "    let _ = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_cap_ref(b\"$1\"), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
          "    assert_eq!(find_cap_ref(b\"${name}\"), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 7 }));",
          "    assert_eq!(find_cap_ref(b\"$abc\"), Some(CaptureRef { cap: Ref::Named(\"abc\"), end: 4 }));",
          "    assert_eq!(find_cap_ref(b\"$2foo\"), Some(CaptureRef { cap: Ref::Number(2), end: 2 }));",
          "    assert_eq!(find_cap_ref(b\"$\"), None);",
          "    assert_eq!(find_cap_ref(b\"$1a\"), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
          "    assert_eq!(find_cap_ref(b\"${123}\"), Some(CaptureRef { cap: Ref::Number(123), end: 6 }));",
          "    assert_eq!(find_cap_ref(b\"${}\"), None);",
          "    assert_eq!(find_cap_ref(b\"$abc$def\"), Some(CaptureRef { cap: Ref::Named(\"abc\"), end: 4 }));"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = b\"$1\";",
          "    let _ = find_cap_ref(replacement);",
          "    assert_eq!(find_cap_ref(b\"$1\"), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
          "    assert_eq!(find_cap_ref(b\"${name}\"), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 7 }));",
          "    assert_eq!(find_cap_ref(b\"$abc\"), Some(CaptureRef { cap: Ref::Named(\"abc\"), end: 4 }));",
          "    assert_eq!(find_cap_ref(b\"$2foo\"), Some(CaptureRef { cap: Ref::Number(2), end: 2 }));",
          "    assert_eq!(find_cap_ref(b\"$\"), None);",
          "    assert_eq!(find_cap_ref(b\"$1a\"), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
          "    assert_eq!(find_cap_ref(b\"${123}\"), Some(CaptureRef { cap: Ref::Number(123), end: 6 }));",
          "    assert_eq!(find_cap_ref(b\"${}\"), None);",
          "    assert_eq!(find_cap_ref(b\"$abc$def\"), Some(CaptureRef { cap: Ref::Named(\"abc\"), end: 4 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = b\"${groupName}\";",
          "    let _ = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_cap_ref(b\"$\"), None);",
          "    assert_eq!(find_cap_ref(b\"\"), None);",
          "    assert_eq!(find_cap_ref(b\"${\"), None);",
          "    assert_eq!(find_cap_ref(b\"$group\"), Some(CaptureRef { cap: Ref::Named(\"group\"), end: 6 }));",
          "    assert_eq!(find_cap_ref(b\"$123\"), Some(CaptureRef { cap: Ref::Number(123), end: 4 }));",
          "    assert_eq!(find_cap_ref(b\"$groupName\"), Some(CaptureRef { cap: Ref::Named(\"groupName\"), end: 10 }));",
          "    assert_eq!(find_cap_ref(b\"${groupName}\"), Some(CaptureRef { cap: Ref::Named(\"groupName\"), end: 12 }));"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = b\"${groupName}\";",
          "    let _ = find_cap_ref(replacement);",
          "    assert_eq!(find_cap_ref(b\"$\"), None);",
          "    assert_eq!(find_cap_ref(b\"\"), None);",
          "    assert_eq!(find_cap_ref(b\"${\"), None);",
          "    assert_eq!(find_cap_ref(b\"$group\"), Some(CaptureRef { cap: Ref::Named(\"group\"), end: 6 }));",
          "    assert_eq!(find_cap_ref(b\"$123\"), Some(CaptureRef { cap: Ref::Number(123), end: 4 }));",
          "    assert_eq!(find_cap_ref(b\"$groupName\"), Some(CaptureRef { cap: Ref::Named(\"groupName\"), end: 10 }));",
          "    assert_eq!(find_cap_ref(b\"${groupName}\"), Some(CaptureRef { cap: Ref::Named(\"groupName\"), end: 12 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = b\"${group1}\";",
          "    let _ = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_cap_ref(b\"${group1}\"), Some(CaptureRef { cap: Ref::Named(\"group1\"), end: 8 }));",
          "    assert_eq!(find_cap_ref(b\"$1\"), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
          "    assert_eq!(find_cap_ref(b\"$\"), None);",
          "    assert_eq!(find_cap_ref(b\"{}\"), None);",
          "    assert_eq!(find_cap_ref(b\"$group1$\"), None);",
          "    assert_eq!(find_cap_ref(b\"${}\"), None);",
          "    assert_eq!(find_cap_ref(b\"$group-1\"), Some(CaptureRef { cap: Ref::Named(\"group-1\"), end: 8 }));"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = b\"${group1}\";",
          "    let _ = find_cap_ref(replacement);",
          "    assert_eq!(find_cap_ref(b\"${group1}\"), Some(CaptureRef { cap: Ref::Named(\"group1\"), end: 8 }));",
          "    assert_eq!(find_cap_ref(b\"$1\"), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
          "    assert_eq!(find_cap_ref(b\"$\"), None);",
          "    assert_eq!(find_cap_ref(b\"{}\"), None);",
          "    assert_eq!(find_cap_ref(b\"$group1$\"), None);",
          "    assert_eq!(find_cap_ref(b\"${}\"), None);",
          "    assert_eq!(find_cap_ref(b\"$group-1\"), Some(CaptureRef { cap: Ref::Named(\"group-1\"), end: 8 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: Vec<u8> = Vec::from(\"$groupNameLongerThan30Characters12345\");",
          "    let _ = find_cap_ref(&replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_cap_ref(b\"$groupNameLongerThan30Characters12345\"), Some(CaptureRef { cap: Ref::Named(\"groupNameLongerThan30Characters12345\"), end: 30 }));",
          "    assert_eq!(find_cap_ref(b\"$1\"), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
          "    assert_eq!(find_cap_ref(b\"${name}\"), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 6 }));",
          "    assert_eq!(find_cap_ref(b\"$\"), None);",
          "    assert_eq!(find_cap_ref(b\"\"), None);",
          "    assert_eq!(find_cap_ref(b\"no dollar sign\"), None);",
          "    assert_eq!(find_cap_ref(b\"${\" ), None);",
          "    assert_eq!(find_cap_ref(b\"$groupNameWithInvalidChar!\"), Some(CaptureRef { cap: Ref::Named(\"groupNameWithInvalidChar\"), end: 24 }));",
          "    assert_eq!(find_cap_ref(b\"$123abc\"), Some(CaptureRef { cap: Ref::Number(123), end: 6 }));"
        ],
        "code": [
          "{",
          "    let replacement: Vec<u8> = Vec::from(\"$groupNameLongerThan30Characters12345\");",
          "    let _ = find_cap_ref(&replacement);",
          "    assert_eq!(find_cap_ref(b\"$groupNameLongerThan30Characters12345\"), Some(CaptureRef { cap: Ref::Named(\"groupNameLongerThan30Characters12345\"), end: 30 }));",
          "    assert_eq!(find_cap_ref(b\"$1\"), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
          "    assert_eq!(find_cap_ref(b\"${name}\"), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 6 }));",
          "    assert_eq!(find_cap_ref(b\"$\"), None);",
          "    assert_eq!(find_cap_ref(b\"\"), None);",
          "    assert_eq!(find_cap_ref(b\"no dollar sign\"), None);",
          "    assert_eq!(find_cap_ref(b\"${\" ), None);",
          "    assert_eq!(find_cap_ref(b\"$groupNameWithInvalidChar!\"), Some(CaptureRef { cap: Ref::Named(\"groupNameWithInvalidChar\"), end: 24 }));",
          "    assert_eq!(find_cap_ref(b\"$123abc\"), Some(CaptureRef { cap: Ref::Number(123), end: 6 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: Vec<u8> = Vec::from(\"$thisIsExactly255CharactersLongWhichIsTheMaximumAllowedInThisTestWhichWouldNeedToBeVeryCarefullyConstructedToEnsureItIsValidAndMaintainsTheLengthConditionThatIsSetByTheFunctionThatWeAreTestingAndSoItEndsHere.\"); // 255 chars",
          "    let _ = find_cap_ref(&replacement);",
          "}"
        ],
        "oracle": [
          "    let replacement: Vec<u8> = Vec::from(\"$validCapture\"); assert_eq!(find_cap_ref(&replacement), Some(CaptureRef { cap: Ref::Named(\"validCapture\"), end: 12 }));",
          "    ",
          "    let replacement: Vec<u8> = Vec::from(\"${validCapture}\"); assert_eq!(find_cap_ref(&replacement), Some(CaptureRef { cap: Ref::Named(\"validCapture\"), end: 14 }));",
          "    ",
          "    let replacement: Vec<u8> = Vec::from(\"$1\"); assert_eq!(find_cap_ref(&replacement), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
          "    ",
          "    let replacement: Vec<u8> = Vec::from(\"$0\"); assert_eq!(find_cap_ref(&replacement), Some(CaptureRef { cap: Ref::Number(0), end: 2 }));",
          "    ",
          "    let replacement: Vec<u8> = Vec::from(\"$thisIsAnInvalidCapture\"); assert_eq!(find_cap_ref(&replacement), Some(CaptureRef { cap: Ref::Named(\"thisIsAnInvalidCapture\"), end: 24 }));",
          "    ",
          "    let replacement: Vec<u8> = Vec::from(\"$\"); assert_eq!(find_cap_ref(&replacement), None);",
          "    ",
          "    let replacement: Vec<u8> = Vec::from(\"${\"); assert_eq!(find_cap_ref(&replacement), None);",
          "    ",
          "    let replacement: Vec<u8> = Vec::from(\"$}\"); assert_eq!(find_cap_ref(&replacement), None);",
          "    ",
          "    let replacement: Vec<u8> = Vec::from(\"${capture\"); assert_eq!(find_cap_ref(&replacement), None);",
          "    ",
          "    let replacement: Vec<u8> = Vec::from(\"$invalid}capture\"); assert_eq!(find_cap_ref(&replacement), None);",
          "    ",
          "    let replacement: Vec<u8> = Vec::from(\"$123\"); assert_eq!(find_cap_ref(&replacement), Some(CaptureRef { cap: Ref::Number(123), end: 3 }));",
          "    ",
          "    let replacement: Vec<u8> = Vec::from(\"${123}\"); assert_eq!(find_cap_ref(&replacement), Some(CaptureRef { cap: Ref::Number(123), end: 5 }));"
        ],
        "code": [
          "{",
          "    let replacement: Vec<u8> = Vec::from(\"$thisIsExactly255CharactersLongWhichIsTheMaximumAllowedInThisTestWhichWouldNeedToBeVeryCarefullyConstructedToEnsureItIsValidAndMaintainsTheLengthConditionThatIsSetByTheFunctionThatWeAreTestingAndSoItEndsHere.\"); // 255 chars",
          "    let _ = find_cap_ref(&replacement);",
          "    let replacement: Vec<u8> = Vec::from(\"$validCapture\"); assert_eq!(find_cap_ref(&replacement), Some(CaptureRef { cap: Ref::Named(\"validCapture\"), end: 12 }));",
          "    ",
          "    let replacement: Vec<u8> = Vec::from(\"${validCapture}\"); assert_eq!(find_cap_ref(&replacement), Some(CaptureRef { cap: Ref::Named(\"validCapture\"), end: 14 }));",
          "    ",
          "    let replacement: Vec<u8> = Vec::from(\"$1\"); assert_eq!(find_cap_ref(&replacement), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
          "    ",
          "    let replacement: Vec<u8> = Vec::from(\"$0\"); assert_eq!(find_cap_ref(&replacement), Some(CaptureRef { cap: Ref::Number(0), end: 2 }));",
          "    ",
          "    let replacement: Vec<u8> = Vec::from(\"$thisIsAnInvalidCapture\"); assert_eq!(find_cap_ref(&replacement), Some(CaptureRef { cap: Ref::Named(\"thisIsAnInvalidCapture\"), end: 24 }));",
          "    ",
          "    let replacement: Vec<u8> = Vec::from(\"$\"); assert_eq!(find_cap_ref(&replacement), None);",
          "    ",
          "    let replacement: Vec<u8> = Vec::from(\"${\"); assert_eq!(find_cap_ref(&replacement), None);",
          "    ",
          "    let replacement: Vec<u8> = Vec::from(\"$}\"); assert_eq!(find_cap_ref(&replacement), None);",
          "    ",
          "    let replacement: Vec<u8> = Vec::from(\"${capture\"); assert_eq!(find_cap_ref(&replacement), None);",
          "    ",
          "    let replacement: Vec<u8> = Vec::from(\"$invalid}capture\"); assert_eq!(find_cap_ref(&replacement), None);",
          "    ",
          "    let replacement: Vec<u8> = Vec::from(\"$123\"); assert_eq!(find_cap_ref(&replacement), Some(CaptureRef { cap: Ref::Number(123), end: 3 }));",
          "    ",
          "    let replacement: Vec<u8> = Vec::from(\"${123}\"); assert_eq!(find_cap_ref(&replacement), Some(CaptureRef { cap: Ref::Number(123), end: 5 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]