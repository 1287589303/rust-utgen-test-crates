[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'5'];",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(5), end: 2 }));"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'5'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(5), end: 2 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'g', b'r', b'o', b'u', b'p', b'_', b'n', b'a', b'm', b'e'];",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    let replacement: &[u8] = &[b'$', b'g', b'r', b'o', b'u', b'p', b'_', b'n', b'a', b'm', b'e'];",
          "    let expected = Some(CaptureRef { cap: Ref::Named(\"group_name\"), end: replacement.len() });",
          "    assert_eq!(result, expected);",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'1', b'2', b'3'];",
          "    let expected = Some(CaptureRef { cap: Ref::Number(123), end: replacement.len() });",
          "    assert_eq!(result, expected);",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{', b'g', b'r', b'o', b'u', b'p', b'_', b'n', b'a', b'm', b'e', b'}'];",
          "    let expected = Some(CaptureRef { cap: Ref::Named(\"group_name\"), end: replacement.len() });",
          "    assert_eq!(result, expected);",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{', b'1', b'2', b'3', b'}'];",
          "    let expected = Some(CaptureRef { cap: Ref::Number(123), end: replacement.len() });",
          "    assert_eq!(result, expected);",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'a'];",
          "    let expected = None;",
          "    assert_eq!(result, expected);",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{', b'a'];",
          "    let expected = None;",
          "    assert_eq!(result, expected);",
          "    ",
          "    let replacement: &[u8] = &[b'c', b'o', b'd', b'e'];",
          "    let expected = None;",
          "    assert_eq!(result, expected);",
          "    ",
          "    let replacement: &[u8] = &[b'$'];",
          "    let expected = None;",
          "    assert_eq!(result, expected);",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{', b'a', b'b', b'c', b'}', b'$', b'2'];",
          "    let expected = Some(CaptureRef { cap: Ref::Named(\"abc\"), end: 6 });",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'g', b'r', b'o', b'u', b'p', b'_', b'n', b'a', b'm', b'e'];",
          "    let result = find_cap_ref(replacement);",
          "    let replacement: &[u8] = &[b'$', b'g', b'r', b'o', b'u', b'p', b'_', b'n', b'a', b'm', b'e'];",
          "    let expected = Some(CaptureRef { cap: Ref::Named(\"group_name\"), end: replacement.len() });",
          "    assert_eq!(result, expected);",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'1', b'2', b'3'];",
          "    let expected = Some(CaptureRef { cap: Ref::Number(123), end: replacement.len() });",
          "    assert_eq!(result, expected);",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{', b'g', b'r', b'o', b'u', b'p', b'_', b'n', b'a', b'm', b'e', b'}'];",
          "    let expected = Some(CaptureRef { cap: Ref::Named(\"group_name\"), end: replacement.len() });",
          "    assert_eq!(result, expected);",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{', b'1', b'2', b'3', b'}'];",
          "    let expected = Some(CaptureRef { cap: Ref::Number(123), end: replacement.len() });",
          "    assert_eq!(result, expected);",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'a'];",
          "    let expected = None;",
          "    assert_eq!(result, expected);",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{', b'a'];",
          "    let expected = None;",
          "    assert_eq!(result, expected);",
          "    ",
          "    let replacement: &[u8] = &[b'c', b'o', b'd', b'e'];",
          "    let expected = None;",
          "    assert_eq!(result, expected);",
          "    ",
          "    let replacement: &[u8] = &[b'$'];",
          "    let expected = None;",
          "    assert_eq!(result, expected);",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{', b'a', b'b', b'c', b'}', b'$', b'2'];",
          "    let expected = Some(CaptureRef { cap: Ref::Named(\"abc\"), end: 6 });",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'{', b'g', b'r', b'o', b'u', b'p', b'_', b'n', b'a', b'm', b'e', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    let replacement: &[u8] = &[b'$', b'{', b'g', b'r', b'o', b'u', b'p', b'_', b'n', b'a', b'm', b'e', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert!(result.is_some());",
          "    let capture_ref = result.unwrap();",
          "    assert_eq!(capture_ref.cap, Ref::Named(\"group_name\"));",
          "    assert_eq!(capture_ref.end, 12);",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'g', b'r', b'o', b'u', b'p', b'1'];",
          "    let result = find_cap_ref(replacement);",
          "    assert!(result.is_some());",
          "    let capture_ref = result.unwrap();",
          "    assert_eq!(capture_ref.cap, Ref::Number(1));",
          "    assert_eq!(capture_ref.end, 7);",
          "    ",
          "    let replacement: &[u8] = &[b'$'];",
          "    let result = find_cap_ref(replacement);",
          "    assert!(result.is_none());",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{', b'g', b'r', b'o', b'u', b'p', b'_', b'n', b'a', b'm', b'e'];",
          "    let result = find_cap_ref(replacement);",
          "    assert!(result.is_none());",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{', b'1', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert!(result.is_some());",
          "    let capture_ref = result.unwrap();",
          "    assert_eq!(capture_ref.cap, Ref::Number(1));",
          "    assert_eq!(capture_ref.end, 4);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'{', b'g', b'r', b'o', b'u', b'p', b'_', b'n', b'a', b'm', b'e', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    let replacement: &[u8] = &[b'$', b'{', b'g', b'r', b'o', b'u', b'p', b'_', b'n', b'a', b'm', b'e', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert!(result.is_some());",
          "    let capture_ref = result.unwrap();",
          "    assert_eq!(capture_ref.cap, Ref::Named(\"group_name\"));",
          "    assert_eq!(capture_ref.end, 12);",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'g', b'r', b'o', b'u', b'p', b'1'];",
          "    let result = find_cap_ref(replacement);",
          "    assert!(result.is_some());",
          "    let capture_ref = result.unwrap();",
          "    assert_eq!(capture_ref.cap, Ref::Number(1));",
          "    assert_eq!(capture_ref.end, 7);",
          "    ",
          "    let replacement: &[u8] = &[b'$'];",
          "    let result = find_cap_ref(replacement);",
          "    assert!(result.is_none());",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{', b'g', b'r', b'o', b'u', b'p', b'_', b'n', b'a', b'm', b'e'];",
          "    let result = find_cap_ref(replacement);",
          "    assert!(result.is_none());",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{', b'1', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert!(result.is_some());",
          "    let capture_ref = result.unwrap();",
          "    assert_eq!(capture_ref.cap, Ref::Number(1));",
          "    assert_eq!(capture_ref.end, 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'{', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'a', b'b', b'c'];",
          "    let result = find_cap_ref(replacement);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().cap, Ref::Named(\"abc\"));",
          "    assert_eq!(result.unwrap().end, 4);",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'1'];",
          "    let result = find_cap_ref(replacement);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().cap, Ref::Number(1));",
          "    assert_eq!(result.unwrap().end, 2);",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{', b'a', b'b', b'c', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().cap, Ref::Named(\"abc\"));",
          "    assert_eq!(result.unwrap().end, 6);",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'9', b'8', b'7'];",
          "    let result = find_cap_ref(replacement);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().cap, Ref::Number(987));",
          "    assert_eq!(result.unwrap().end, 4);",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{', b'1', b'2', b'3', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().cap, Ref::Number(123));",
          "    assert_eq!(result.unwrap().end, 6);",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{', b'a', b'0', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().cap, Ref::Named(\"a0\"));",
          "    assert_eq!(result.unwrap().end, 6);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'{', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'a', b'b', b'c'];",
          "    let result = find_cap_ref(replacement);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().cap, Ref::Named(\"abc\"));",
          "    assert_eq!(result.unwrap().end, 4);",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'1'];",
          "    let result = find_cap_ref(replacement);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().cap, Ref::Number(1));",
          "    assert_eq!(result.unwrap().end, 2);",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{', b'a', b'b', b'c', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().cap, Ref::Named(\"abc\"));",
          "    assert_eq!(result.unwrap().end, 6);",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'9', b'8', b'7'];",
          "    let result = find_cap_ref(replacement);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().cap, Ref::Number(987));",
          "    assert_eq!(result.unwrap().end, 4);",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{', b'1', b'2', b'3', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().cap, Ref::Number(123));",
          "    assert_eq!(result.unwrap().end, 6);",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{', b'a', b'0', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().cap, Ref::Named(\"a0\"));",
          "    assert_eq!(result.unwrap().end, 6);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'{', b'/', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"/\"), end: 4 }));",
          "    let replacement: &[u8] = &[b'$', b'1'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
          "    let replacement: &[u8] = &[b'$', b'2'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(2), end: 2 }));",
          "    let replacement: &[u8] = &[b'$', b'{', b'a', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"a\"), end: 4 }));",
          "    let replacement: &[u8] = &[b'$', b'a', b'b'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"ab\"), end: 3 }));",
          "    let replacement: &[u8] = &[b'$', b'{' , b' '}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    let replacement: &[u8] = &[b'$', b'{', b'a', b'b', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"ab\"), end: 6 }));",
          "    let replacement: &[u8] = &[b'$'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    let replacement: &[u8] = &[b'a', b'b', b'$'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    let replacement: &[u8] = &[b'$', b'{', b'3', b' '}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'{', b'/', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"/\"), end: 4 }));",
          "    let replacement: &[u8] = &[b'$', b'1'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
          "    let replacement: &[u8] = &[b'$', b'2'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(2), end: 2 }));",
          "    let replacement: &[u8] = &[b'$', b'{', b'a', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"a\"), end: 4 }));",
          "    let replacement: &[u8] = &[b'$', b'a', b'b'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"ab\"), end: 3 }));",
          "    let replacement: &[u8] = &[b'$', b'{' , b' '}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    let replacement: &[u8] = &[b'$', b'{', b'a', b'b', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"ab\"), end: 6 }));",
          "    let replacement: &[u8] = &[b'$'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    let replacement: &[u8] = &[b'a', b'b', b'$'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    let replacement: &[u8] = &[b'$', b'{', b'3', b' '}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'1', b'2', b'3', b'4'];",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(12), end: 4 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{' ,'g', b'r', b'o', b'u', b'p', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"group\"), end: 8 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{' ,'n', b'a', b'm', b'e', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"name\"), end: 8 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'2', b'3'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(23), end: 3 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'1', b'2', b'3', b'4'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{', b'a', b'b', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"ab\"), end: 6 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'1', b'2', b'3', b'4'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(12), end: 4 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{' ,'g', b'r', b'o', b'u', b'p', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"group\"), end: 8 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{' ,'n', b'a', b'm', b'e', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"name\"), end: 8 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'2', b'3'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(23), end: 3 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'1', b'2', b'3', b'4'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{', b'a', b'b', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"ab\"), end: 6 }));",
          "    ",
          "    let replacement: &[u8] = &[b'$', b'{}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]