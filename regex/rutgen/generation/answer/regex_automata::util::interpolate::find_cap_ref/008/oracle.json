[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'{', b'a', b'b', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(CaptureRef {",
          "    cap: Ref::Named(\"ab\"),",
          "    end: 5",
          "    }));"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'{', b'a', b'b', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef {",
          "    cap: Ref::Named(\"ab\"),",
          "    end: 5",
          "    }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'{', b'c', b'h', b'a', b'r', b'a', b'c', b't', b'e', b'r', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    let replacement: &[u8] = &[b'$', b'{', b'c', b'h', b'a', b'r', b'a', b'c', b't', b'e', b'r', b'}'];",
          "    let expected = Some(CaptureRef { cap: Ref::Named(\"character\"), end: 13 });",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'{', b'c', b'h', b'a', b'r', b'a', b'c', b't', b'e', b'r', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    let replacement: &[u8] = &[b'$', b'{', b'c', b'h', b'a', b'r', b'a', b'c', b't', b'e', b'r', b'}'];",
          "    let expected = Some(CaptureRef { cap: Ref::Named(\"character\"), end: 13 });",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'{', b'!', b'@', b'#', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    let replacement: &[u8] = &[b'$', b'{', b'!', b'@', b'#', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().cap, Ref::Named(\"!@#\"));",
          "    assert_eq!(result.unwrap().end, 6);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'{', b'!', b'@', b'#', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    let replacement: &[u8] = &[b'$', b'{', b'!', b'@', b'#', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().cap, Ref::Named(\"!@#\"));",
          "    assert_eq!(result.unwrap().end, 6);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'{', b'1', b'a', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    let replacement: &[u8] = &[b'$', b'{', b'1', b'a', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert!(result.is_some());",
          "    if let Some(ref capture) = result {",
          "    assert_eq!(capture.cap, Ref::Named(\"1a\"));",
          "    assert_eq!(capture.end, 5);",
          "    }"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'{', b'1', b'a', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    let replacement: &[u8] = &[b'$', b'{', b'1', b'a', b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert!(result.is_some());",
          "    if let Some(ref capture) = result {",
          "    assert_eq!(capture.cap, Ref::Named(\"1a\"));",
          "    assert_eq!(capture.end, 5);",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'{', b'\\x80', b'$' , b'}'];",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"\\x80\"), end: 5 }));"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = &[b'$', b'{', b'\\x80', b'$' , b'}'];",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"\\x80\"), end: 5 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]