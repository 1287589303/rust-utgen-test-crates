[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = b\"${0}\";",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    let replacement: &[u8] = b\"${0}\";",
          "    let expected = Some(CaptureRef {",
          "    cap: Ref::Number(0),",
          "    end: 4,",
          "    });",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = b\"${0}\";",
          "    let result = find_cap_ref(replacement);",
          "    let replacement: &[u8] = b\"${0}\";",
          "    let expected = Some(CaptureRef {",
          "    cap: Ref::Number(0),",
          "    end: 4,",
          "    });",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = b\"${12}\";",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(12), end: 5 }));"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = b\"${12}\";",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(12), end: 5 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = b\"${123}\";",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().cap, Ref::Number(123));",
          "    assert_eq!(result.unwrap().end, 5);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = b\"${123}\";",
          "    let result = find_cap_ref(replacement);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().cap, Ref::Number(123));",
          "    assert_eq!(result.unwrap().end, 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = b\"${1234}\";",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), CaptureRef { cap: Ref::Number(1234), end: 6 });"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = b\"${1234}\";",
          "    let result = find_cap_ref(replacement);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), CaptureRef { cap: Ref::Number(1234), end: 6 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = b\"${12345}\";",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    if let Some(ref capture) = result {",
          "    assert_eq!(capture.cap, Ref::Number(12345));",
          "    assert_eq!(capture.end, 7);",
          "    }"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = b\"${12345}\";",
          "    let result = find_cap_ref(replacement);",
          "    assert!(result.is_some());",
          "    if let Some(ref capture) = result {",
          "    assert_eq!(capture.cap, Ref::Number(12345));",
          "    assert_eq!(capture.end, 7);",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = b\"${123456}\";",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    let capture_ref = result.unwrap();",
          "    assert_eq!(capture_ref.cap, Ref::Number(123456));",
          "    assert_eq!(capture_ref.end, replacement.len());"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = b\"${123456}\";",
          "    let result = find_cap_ref(replacement);",
          "    assert!(result.is_some());",
          "    let capture_ref = result.unwrap();",
          "    assert_eq!(capture_ref.cap, Ref::Number(123456));",
          "    assert_eq!(capture_ref.end, replacement.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = b\"${1234567}\";",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(1234567), end: 10 }));"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = b\"${1234567}\";",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(1234567), end: 10 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = b\"${12345678}\";",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(12345678), end: 12 }));"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = b\"${12345678}\";",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(12345678), end: 12 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = b\"${123456789}\";",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    if let Some(capture_ref) = result {",
          "    assert_eq!(capture_ref.cap, Ref::Number(123456789));",
          "    assert_eq!(capture_ref.end, 15);",
          "    }"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = b\"${123456789}\";",
          "    let result = find_cap_ref(replacement);",
          "    assert!(result.is_some());",
          "    if let Some(capture_ref) = result {",
          "    assert_eq!(capture_ref.cap, Ref::Number(123456789));",
          "    assert_eq!(capture_ref.end, 15);",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = b\"${1234567890}\";",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(1234567890), end: 15 }));"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = b\"${1234567890}\";",
          "    let result = find_cap_ref(replacement);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(1234567890), end: 15 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]