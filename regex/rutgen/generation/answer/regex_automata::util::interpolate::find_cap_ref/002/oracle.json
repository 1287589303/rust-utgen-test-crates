[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = &[];",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_none());"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = &[];",
          "    let result = find_cap_ref(replacement);",
          "    assert!(result.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = &[b'a'];",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_none());"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = &[b'a'];",
          "    let result = find_cap_ref(replacement);",
          "    assert!(result.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let replacement: &[u8] = &[b'a', b'b', b'c'];",
          "    let result = find_cap_ref(replacement);",
          "}"
        ],
        "oracle": [
          "    let replacement: &[u8] = &[b'a', b'b', b'c'];",
          "    let expected_result = None;",
          "    assert_eq!(result, expected_result);"
        ],
        "code": [
          "{",
          "    let replacement: &[u8] = &[b'a', b'b', b'c'];",
          "    let result = find_cap_ref(replacement);",
          "    let replacement: &[u8] = &[b'a', b'b', b'c'];",
          "    let expected_result = None;",
          "    assert_eq!(result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]