[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u32 = 0;",
          "    let result = value.as_usize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0);",
          "    let value: u32 = 1;",
          "    let result = value.as_usize();",
          "    assert_eq!(result, 1);",
          "    let value: u32 = u32::MAX;",
          "    let result = value.as_usize();",
          "    assert_eq!(result, u32::MAX as usize);",
          "    let value: u32 = 4294967295;",
          "    let result = value.as_usize();",
          "    assert_eq!(result, 4294967295);"
        ],
        "code": [
          "{",
          "    let value: u32 = 0;",
          "    let result = value.as_usize();",
          "    assert_eq!(result, 0);",
          "    let value: u32 = 1;",
          "    let result = value.as_usize();",
          "    assert_eq!(result, 1);",
          "    let value: u32 = u32::MAX;",
          "    let result = value.as_usize();",
          "    assert_eq!(result, u32::MAX as usize);",
          "    let value: u32 = 4294967295;",
          "    let result = value.as_usize();",
          "    assert_eq!(result, 4294967295);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u32 = 4_294_967_295;",
          "    let result = value.as_usize();",
          "}"
        ],
        "oracle": [
          "    let value: u32 = 4_294_967_295;",
          "    let result = value.as_usize();",
          "    assert_eq!(result, usize::try_from(value).expect(\"u32 overflowed usize\"));",
          "    assert!(result == value as usize || result == usize::try_from(value).expect(\"u32 overflowed usize\"));"
        ],
        "code": [
          "{",
          "    let value: u32 = 4_294_967_295;",
          "    let result = value.as_usize();",
          "    let value: u32 = 4_294_967_295;",
          "    let result = value.as_usize();",
          "    assert_eq!(result, usize::try_from(value).expect(\"u32 overflowed usize\"));",
          "    assert!(result == value as usize || result == usize::try_from(value).expect(\"u32 overflowed usize\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u32 = 2_147_483_648;",
          "    let result = value.as_usize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, usize::try_from(value).expect(\"u32 overflowed usize\"));",
          "    assert!(result > 2_000_000_000);",
          "    assert!(result <= usize::MAX);",
          "    assert!(result == value as usize);"
        ],
        "code": [
          "{",
          "    let value: u32 = 2_147_483_648;",
          "    let result = value.as_usize();",
          "    assert_eq!(result, usize::try_from(value).expect(\"u32 overflowed usize\"));",
          "    assert!(result > 2_000_000_000);",
          "    assert!(result <= usize::MAX);",
          "    assert!(result == value as usize);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u32 = 1;",
          "    let result = value.as_usize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, value as usize);",
          "    assert_eq!(result, 1);",
          "    let value: u32 = u32::MAX;",
          "    let result = value.as_usize();",
          "    #[cfg(debug_assertions)] assert_eq!(result, usize::try_from(value).expect(\"u32 overflowed usize\"));",
          "    #[cfg(not(debug_assertions)] assert_eq!(result, value as usize);",
          "    let value: u32 = 0;",
          "    let result = value.as_usize();",
          "    assert_eq!(result, 0);",
          "    let value: u32 = 4294967295;",
          "    let result = value.as_usize();",
          "    #[cfg(debug_assertions)] assert_eq!(result, usize::try_from(value).expect(\"u32 overflowed usize\"));",
          "    #[cfg(not(debug_assertions)] assert_eq!(result, value as usize);"
        ],
        "code": [
          "{",
          "    let value: u32 = 1;",
          "    let result = value.as_usize();",
          "    assert_eq!(result, value as usize);",
          "    assert_eq!(result, 1);",
          "    let value: u32 = u32::MAX;",
          "    let result = value.as_usize();",
          "    #[cfg(debug_assertions)] assert_eq!(result, usize::try_from(value).expect(\"u32 overflowed usize\"));",
          "    #[cfg(not(debug_assertions)] assert_eq!(result, value as usize);",
          "    let value: u32 = 0;",
          "    let result = value.as_usize();",
          "    assert_eq!(result, 0);",
          "    let value: u32 = 4294967295;",
          "    let result = value.as_usize();",
          "    #[cfg(debug_assertions)] assert_eq!(result, usize::try_from(value).expect(\"u32 overflowed usize\"));",
          "    #[cfg(not(debug_assertions)] assert_eq!(result, value as usize);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u32 = 4_000_000_000;",
          "    let result = value.as_usize();",
          "}"
        ],
        "oracle": [
          "    let value: u32 = 4_000_000_000;",
          "    let result = value.as_usize();",
          "    assert_eq!(result, usize::try_from(value).expect(\"u32 overflowed usize\"));",
          "    assert!(result == 4_000_000_000 as usize);"
        ],
        "code": [
          "{",
          "    let value: u32 = 4_000_000_000;",
          "    let result = value.as_usize();",
          "    let value: u32 = 4_000_000_000;",
          "    let result = value.as_usize();",
          "    assert_eq!(result, usize::try_from(value).expect(\"u32 overflowed usize\"));",
          "    assert!(result == 4_000_000_000 as usize);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let value: u32 = 4_294_967_296; // Expected to panic in debug builds only",
          "    let result = value.as_usize();",
          "}"
        ],
        "oracle": [
          "    let value: u32 = 4_294_967_296;",
          "    assert!(std::panic::catch_unwind(|| { value.as_usize(); }).is_err());"
        ],
        "code": [
          "{",
          "    let value: u32 = 4_294_967_296; // Expected to panic in debug builds only",
          "    let result = value.as_usize();",
          "    let value: u32 = 4_294_967_296;",
          "    assert!(std::panic::catch_unwind(|| { value.as_usize(); }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]