[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_unicode = ClassUnicode::empty();",
          "    class_unicode.negate();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_unicode.is_ascii(), false);",
          "    assert_eq!(class_unicode.minimum_len(), Some(0));",
          "    assert_eq!(class_unicode.maximum_len(), Some(Option::None));",
          "    assert_eq!(class_unicode.literal(), None);",
          "    assert_eq!(class_unicode.ranges().len(), 1);",
          "    assert_eq!(class_unicode.ranges()[0], ClassUnicodeRange{ start: char::MIN, end: char::MAX });"
        ],
        "code": [
          "{",
          "    let mut class_unicode = ClassUnicode::empty();",
          "    class_unicode.negate();",
          "    assert_eq!(class_unicode.is_ascii(), false);",
          "    assert_eq!(class_unicode.minimum_len(), Some(0));",
          "    assert_eq!(class_unicode.maximum_len(), Some(Option::None));",
          "    assert_eq!(class_unicode.literal(), None);",
          "    assert_eq!(class_unicode.ranges().len(), 1);",
          "    assert_eq!(class_unicode.ranges()[0], ClassUnicodeRange{ start: char::MIN, end: char::MAX });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_unicode = ClassUnicode::new(vec![ClassUnicodeRange { start: 'a', end: 'z' }]);",
          "    class_unicode.negate();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_unicode.is_ascii(), false);",
          "    assert!(class_unicode.ranges().is_empty());",
          "    assert_eq!(class_unicode.minimum_len(), Some(0));",
          "    assert_eq!(class_unicode.maximum_len(), Some(1));",
          "    assert!(class_unicode.literal().is_none());",
          "    assert!(class_unicode.to_byte_class().is_none());"
        ],
        "code": [
          "{",
          "    let mut class_unicode = ClassUnicode::new(vec![ClassUnicodeRange { start: 'a', end: 'z' }]);",
          "    class_unicode.negate();",
          "    assert_eq!(class_unicode.is_ascii(), false);",
          "    assert!(class_unicode.ranges().is_empty());",
          "    assert_eq!(class_unicode.minimum_len(), Some(0));",
          "    assert_eq!(class_unicode.maximum_len(), Some(1));",
          "    assert!(class_unicode.literal().is_none());",
          "    assert!(class_unicode.to_byte_class().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_unicode = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'A', end: 'C' },",
          "        ClassUnicodeRange { start: 'B', end: 'D' },",
          "    ]);",
          "    class_unicode.negate();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_unicode.ranges().len(), expected_len);",
          "    assert!(!class_unicode.is_ascii());",
          "    assert!(class_unicode.minimum_len().is_none());",
          "    assert!(class_unicode.maximum_len().is_none());",
          "    assert!(class_unicode.literal().is_none());",
          "    assert!(class_unicode.to_byte_class().is_none());",
          "    assert!(class_unicode.iter().all(|r| r.start > 'C' || r.end < 'A'));",
          "    assert!(class_unicode.set.folded);",
          "    assert_eq!(class_unicode.ranges(), expected_ranges);"
        ],
        "code": [
          "{",
          "    let mut class_unicode = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'A', end: 'C' },",
          "        ClassUnicodeRange { start: 'B', end: 'D' },",
          "    ]);",
          "    class_unicode.negate();",
          "    assert_eq!(class_unicode.ranges().len(), expected_len);",
          "    assert!(!class_unicode.is_ascii());",
          "    assert!(class_unicode.minimum_len().is_none());",
          "    assert!(class_unicode.maximum_len().is_none());",
          "    assert!(class_unicode.literal().is_none());",
          "    assert!(class_unicode.to_byte_class().is_none());",
          "    assert!(class_unicode.iter().all(|r| r.start > 'C' || r.end < 'A'));",
          "    assert!(class_unicode.set.folded);",
          "    assert_eq!(class_unicode.ranges(), expected_ranges);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_unicode = ClassUnicode::new(vec![ClassUnicodeRange { start: '\\u{0}', end: '\\u{10FFFF}' }]);",
          "    class_unicode.negate();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_unicode.is_ascii(), false);",
          "    assert_eq!(class_unicode.minimum_len(), None);",
          "    assert_eq!(class_unicode.maximum_len(), Some(1));",
          "    assert!(class_unicode.literal().is_none());",
          "    assert!(class_unicode.to_byte_class().is_none());",
          "    assert_eq!(class_unicode.ranges().len(), 1);",
          "    assert_eq!(class_unicode.ranges()[0].start, '\\u{0}');",
          "    assert_eq!(class_unicode.ranges()[0].end, '\\u{10FFFF}');",
          "    class_unicode.negate(); // Test idempotency",
          "    assert_eq!(class_unicode.ranges().len(), 1);",
          "    assert!(class_unicode.is_ascii()); // After negation with the full range",
          "    assert_eq!(class_unicode.ranges()[0].start, '\\u{0}');",
          "    assert_eq!(class_unicode.ranges()[0].end, '\\u{10FFFF}');"
        ],
        "code": [
          "{",
          "    let mut class_unicode = ClassUnicode::new(vec![ClassUnicodeRange { start: '\\u{0}', end: '\\u{10FFFF}' }]);",
          "    class_unicode.negate();",
          "    assert_eq!(class_unicode.is_ascii(), false);",
          "    assert_eq!(class_unicode.minimum_len(), None);",
          "    assert_eq!(class_unicode.maximum_len(), Some(1));",
          "    assert!(class_unicode.literal().is_none());",
          "    assert!(class_unicode.to_byte_class().is_none());",
          "    assert_eq!(class_unicode.ranges().len(), 1);",
          "    assert_eq!(class_unicode.ranges()[0].start, '\\u{0}');",
          "    assert_eq!(class_unicode.ranges()[0].end, '\\u{10FFFF}');",
          "    class_unicode.negate(); // Test idempotency",
          "    assert_eq!(class_unicode.ranges().len(), 1);",
          "    assert!(class_unicode.is_ascii()); // After negation with the full range",
          "    assert_eq!(class_unicode.ranges()[0].start, '\\u{0}');",
          "    assert_eq!(class_unicode.ranges()[0].end, '\\u{10FFFF}');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_unicode = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: '0', end: '9' },",
          "        ClassUnicodeRange { start: 'A', end: 'F' },",
          "    ]);",
          "    class_unicode.negate();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_unicode.ranges().len(), 2);",
          "    assert!(class_unicode.ranges().contains(&ClassUnicodeRange { start: '\\u{0}', end: '9' }));",
          "    assert!(class_unicode.ranges().contains(&ClassUnicodeRange { start: 'G', end: '\\u{10FFFF}' }));",
          "    assert!(!class_unicode.ranges().contains(&ClassUnicodeRange { start: '0', end: '9' }));",
          "    assert!(!class_unicode.ranges().contains(&ClassUnicodeRange { start: 'A', end: 'F' }));"
        ],
        "code": [
          "{",
          "    let mut class_unicode = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: '0', end: '9' },",
          "        ClassUnicodeRange { start: 'A', end: 'F' },",
          "    ]);",
          "    class_unicode.negate();",
          "    assert_eq!(class_unicode.ranges().len(), 2);",
          "    assert!(class_unicode.ranges().contains(&ClassUnicodeRange { start: '\\u{0}', end: '9' }));",
          "    assert!(class_unicode.ranges().contains(&ClassUnicodeRange { start: 'G', end: '\\u{10FFFF}' }));",
          "    assert!(!class_unicode.ranges().contains(&ClassUnicodeRange { start: '0', end: '9' }));",
          "    assert!(!class_unicode.ranges().contains(&ClassUnicodeRange { start: 'A', end: 'F' }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]