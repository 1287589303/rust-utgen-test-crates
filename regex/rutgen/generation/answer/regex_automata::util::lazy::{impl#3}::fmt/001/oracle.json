[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Debuggable;",
          "    impl fmt::Debug for Debuggable {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            f.write_str(\"DebuggableInstance\")",
          "        }",
          "    }",
          "",
          "    let debuggable_instance = Debuggable;",
          "    let lazy_instance = Lazy(lazy::Lazy {",
          "        state: AtomicU8::new(0),",
          "        create: Cell::new(Some(|| debuggable_instance)),",
          "        data: Cell::new(MaybeUninit::uninit()),",
          "    });",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = lazy_instance.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"DebuggableInstance\");",
          "    assert!(lazy_instance.state.load(Ordering::SeqCst) == 0);",
          "    assert!(lazy_instance.create.get().is_some());",
          "    assert!(lazy_instance.data.get().uninitialised());",
          "    assert!(lazy_instance.fmt(&mut formatter).is_ok());",
          "    assert!(lazy_instance.data.get().is_initialized());"
        ],
        "code": [
          "{",
          "    struct Debuggable;",
          "    impl fmt::Debug for Debuggable {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            f.write_str(\"DebuggableInstance\")",
          "        }",
          "    }",
          "",
          "    let debuggable_instance = Debuggable;",
          "    let lazy_instance = Lazy(lazy::Lazy {",
          "        state: AtomicU8::new(0),",
          "        create: Cell::new(Some(|| debuggable_instance)),",
          "        data: Cell::new(MaybeUninit::uninit()),",
          "    });",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = lazy_instance.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"DebuggableInstance\");",
          "    assert!(lazy_instance.state.load(Ordering::SeqCst) == 0);",
          "    assert!(lazy_instance.create.get().is_some());",
          "    assert!(lazy_instance.data.get().uninitialised());",
          "    assert!(lazy_instance.fmt(&mut formatter).is_ok());",
          "    assert!(lazy_instance.data.get().is_initialized());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct EmptyDebuggable;",
          "    impl fmt::Debug for EmptyDebuggable {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            f.write_str(\"\")",
          "        }",
          "    }",
          "",
          "    let empty_instance = EmptyDebuggable;",
          "    let lazy_instance = Lazy(lazy::Lazy {",
          "        state: AtomicU8::new(0),",
          "        create: Cell::new(Some(|| empty_instance)),",
          "        data: Cell::new(MaybeUninit::uninit()),",
          "    });",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = lazy_instance.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lazy_instance.state.load(Ordering::SeqCst), 0);",
          "    assert!(lazy_instance.create.get().is_some());",
          "    assert!(lazy_instance.data.get().is_uninit());",
          "    assert!(formatter.field.is_empty());",
          "    assert_eq!(formatter.remaining(), 0);",
          "    assert!(format!(\"{:?}\", lazy_instance).len() > 0);"
        ],
        "code": [
          "{",
          "    struct EmptyDebuggable;",
          "    impl fmt::Debug for EmptyDebuggable {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            f.write_str(\"\")",
          "        }",
          "    }",
          "",
          "    let empty_instance = EmptyDebuggable;",
          "    let lazy_instance = Lazy(lazy::Lazy {",
          "        state: AtomicU8::new(0),",
          "        create: Cell::new(Some(|| empty_instance)),",
          "        data: Cell::new(MaybeUninit::uninit()),",
          "    });",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = lazy_instance.fmt(&mut formatter);",
          "    assert_eq!(lazy_instance.state.load(Ordering::SeqCst), 0);",
          "    assert!(lazy_instance.create.get().is_some());",
          "    assert!(lazy_instance.data.get().is_uninit());",
          "    assert!(formatter.field.is_empty());",
          "    assert_eq!(formatter.remaining(), 0);",
          "    assert!(format!(\"{:?}\", lazy_instance).len() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ComplexDebuggable;",
          "    impl fmt::Debug for ComplexDebuggable {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(f, \"Complex: {{ field1: {}, field2: {} }}\", 42, \"hello\")",
          "        }",
          "    }",
          "",
          "    let complex_instance = ComplexDebuggable;",
          "    let lazy_instance = Lazy(lazy::Lazy {",
          "        state: AtomicU8::new(0),",
          "        create: Cell::new(Some(|| complex_instance)),",
          "        data: Cell::new(MaybeUninit::uninit()),",
          "    });",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = lazy_instance.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"Complex: { field1: 42, field2: hello }\");",
          "    assert!(lazy_instance.state.load(Ordering::Relaxed) == 0);",
          "    assert!(lazy_instance.create.get().is_some());",
          "    assert!(lazy_instance.data.get().is_uninit());",
          "    lazy_instance.create.set(Some(|| ComplexDebuggable));",
          "    assert!(lazy_instance.create.get().is_some());",
          "    assert!(format!(\"{:?}\", lazy_instance).contains(\"Complex:\"));"
        ],
        "code": [
          "{",
          "    struct ComplexDebuggable;",
          "    impl fmt::Debug for ComplexDebuggable {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(f, \"Complex: {{ field1: {}, field2: {} }}\", 42, \"hello\")",
          "        }",
          "    }",
          "",
          "    let complex_instance = ComplexDebuggable;",
          "    let lazy_instance = Lazy(lazy::Lazy {",
          "        state: AtomicU8::new(0),",
          "        create: Cell::new(Some(|| complex_instance)),",
          "        data: Cell::new(MaybeUninit::uninit()),",
          "    });",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = lazy_instance.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"Complex: { field1: 42, field2: hello }\");",
          "    assert!(lazy_instance.state.load(Ordering::Relaxed) == 0);",
          "    assert!(lazy_instance.create.get().is_some());",
          "    assert!(lazy_instance.data.get().is_uninit());",
          "    lazy_instance.create.set(Some(|| ComplexDebuggable));",
          "    assert!(lazy_instance.create.get().is_some());",
          "    assert!(format!(\"{:?}\", lazy_instance).contains(\"Complex:\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]