[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\d\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('d')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_perl_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char.get(), Some('d'));",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.flags.borrow().case_insensitive, false);",
          "    assert_eq!(parser.flags.borrow().multi_line, false);",
          "    assert_eq!(parser.flags.borrow().dot_matches_new_line, false);",
          "    assert_eq!(parser.flags.borrow().swap_greed, false);",
          "    assert_eq!(parser.flags.borrow().crlf, false);",
          "    assert_eq!(parser.flags.borrow().ignore_whitespace, false);",
          "    assert_eq!(parser.capture_names.borrow().len(), 0);",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert!(parser.parse_perl_class().is_ok());",
          "    assert_eq!(parser.pattern, \"\\\\d\");",
          "    assert!(matches!(parser.parse_perl_class(), Hir::class(_)));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\d\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('d')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_perl_class();",
          "    assert_eq!(parser.char.get(), Some('d'));",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.flags.borrow().case_insensitive, false);",
          "    assert_eq!(parser.flags.borrow().multi_line, false);",
          "    assert_eq!(parser.flags.borrow().dot_matches_new_line, false);",
          "    assert_eq!(parser.flags.borrow().swap_greed, false);",
          "    assert_eq!(parser.flags.borrow().crlf, false);",
          "    assert_eq!(parser.flags.borrow().ignore_whitespace, false);",
          "    assert_eq!(parser.capture_names.borrow().len(), 0);",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert!(parser.parse_perl_class().is_ok());",
          "    assert_eq!(parser.pattern, \"\\\\d\");",
          "    assert!(matches!(parser.parse_perl_class(), Hir::class(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\D\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('D')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_perl_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char.get(), Some('D'));",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.flags.borrow().case_insensitive, false);",
          "    assert_eq!(parser.capture_names.borrow().len(), 0);",
          "    assert_eq!(parser.flags.borrow().multi_line, false);",
          "    assert_eq!(parser.flags.borrow().dot_matches_new_line, false);",
          "    assert_eq!(parser.flags.borrow().swap_greed, false);",
          "    assert_eq!(parser.flags.borrow().crlf, false);",
          "    assert_eq!(parser.flags.borrow().ignore_whitespace, false);",
          "    assert_eq!(parser.depth.get(), 0);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\D\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('D')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_perl_class();",
          "    assert_eq!(parser.char.get(), Some('D'));",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.flags.borrow().case_insensitive, false);",
          "    assert_eq!(parser.capture_names.borrow().len(), 0);",
          "    assert_eq!(parser.flags.borrow().multi_line, false);",
          "    assert_eq!(parser.flags.borrow().dot_matches_new_line, false);",
          "    assert_eq!(parser.flags.borrow().swap_greed, false);",
          "    assert_eq!(parser.flags.borrow().crlf, false);",
          "    assert_eq!(parser.flags.borrow().ignore_whitespace, false);",
          "    assert_eq!(parser.depth.get(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\s\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('s')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_perl_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char.get(), Some('s'));",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.flags.borrow(), &Flags::default());",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert_ne!(parser.depth.get(), 1);",
          "    assert_eq!(parser.parse_perl_class().kind(), &HirKind::Class(hir::Class { ranges: vec![ClassRange { start: ' ', end: ' ' }] }));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\s\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('s')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_perl_class();",
          "    assert_eq!(parser.char.get(), Some('s'));",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.flags.borrow(), &Flags::default());",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert_ne!(parser.depth.get(), 1);",
          "    assert_eq!(parser.parse_perl_class().kind(), &HirKind::Class(hir::Class { ranges: vec![ClassRange { start: ' ', end: ' ' }] }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\S\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('S')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_perl_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char.get(), Some('S'));",
          "    assert!(matches!(parser.parse_perl_class(), Hir { kind: HirKind::Class(_), .. }));",
          "    assert_eq!(parser.flags.borrow().case_insensitive, false);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert!(parser.depth.get() == 0);",
          "    assert!(parser.flags.borrow().ignore_whitespace == false);",
          "    assert!(parser.flags.borrow().multi_line == false);",
          "    assert!(parser.flags.borrow().dot_matches_new_line == false);",
          "    assert!(parser.flags.borrow().swap_greed == false);",
          "    assert!(parser.flags.borrow().crlf == false);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\S\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('S')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_perl_class();",
          "    assert_eq!(parser.char.get(), Some('S'));",
          "    assert!(matches!(parser.parse_perl_class(), Hir { kind: HirKind::Class(_), .. }));",
          "    assert_eq!(parser.flags.borrow().case_insensitive, false);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert!(parser.depth.get() == 0);",
          "    assert!(parser.flags.borrow().ignore_whitespace == false);",
          "    assert!(parser.flags.borrow().multi_line == false);",
          "    assert!(parser.flags.borrow().dot_matches_new_line == false);",
          "    assert!(parser.flags.borrow().swap_greed == false);",
          "    assert!(parser.flags.borrow().crlf == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\w\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('w')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_perl_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char.get(), Some('w'));",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert!(parser.capture_index.get() == 0);",
          "    assert!(parser.flags.borrow().case_insensitive == false);",
          "    assert_eq!(parser.flags.borrow().multi_line, false);",
          "    assert_eq!(parser.flags.borrow().dot_matches_new_line, false);",
          "    assert_eq!(parser.flags.borrow().swap_greed, false);",
          "    assert_eq!(parser.flags.borrow().crlf, false);",
          "    assert_eq!(parser.flags.borrow().ignore_whitespace, false);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(parser.depth.get() == 0);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\w\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('w')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_perl_class();",
          "    assert_eq!(parser.char.get(), Some('w'));",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert!(parser.capture_index.get() == 0);",
          "    assert!(parser.flags.borrow().case_insensitive == false);",
          "    assert_eq!(parser.flags.borrow().multi_line, false);",
          "    assert_eq!(parser.flags.borrow().dot_matches_new_line, false);",
          "    assert_eq!(parser.flags.borrow().swap_greed, false);",
          "    assert_eq!(parser.flags.borrow().crlf, false);",
          "    assert_eq!(parser.flags.borrow().ignore_whitespace, false);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(parser.depth.get() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\W\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('W')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_perl_class();",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\W\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('W')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_perl_class();",
          "    assert!(matches!(result.kind(), &HirKind::Class(_)));",
          "    ",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\w\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('w')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_perl_class();",
          "    assert!(matches!(result.kind(), &HirKind::Class(_)));",
          "    ",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\S\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('S')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_perl_class();",
          "    assert!(matches!(result.kind(), &HirKind::Class(_)));",
          "    ",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\s\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('s')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_perl_class();",
          "    assert!(matches!(result.kind(), &HirKind::Class(_)));",
          "    ",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\D\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('D')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_perl_class();",
          "    assert!(matches!(result.kind(), &HirKind::Class(_)));",
          "    ",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\d\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('d')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_perl_class();",
          "    assert!(matches!(result.kind(), &HirKind::Class(_)));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\W\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('W')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_perl_class();",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\W\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('W')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_perl_class();",
          "    assert!(matches!(result.kind(), &HirKind::Class(_)));",
          "    ",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\w\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('w')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_perl_class();",
          "    assert!(matches!(result.kind(), &HirKind::Class(_)));",
          "    ",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\S\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('S')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_perl_class();",
          "    assert!(matches!(result.kind(), &HirKind::Class(_)));",
          "    ",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\s\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('s')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_perl_class();",
          "    assert!(matches!(result.kind(), &HirKind::Class(_)));",
          "    ",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\D\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('D')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_perl_class();",
          "    assert!(matches!(result.kind(), &HirKind::Class(_)));",
          "    ",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\d\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('d')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_perl_class();",
          "    assert!(matches!(result.kind(), &HirKind::Class(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]