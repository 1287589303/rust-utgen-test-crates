[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\dabc\"; // `\\d` followed by other characters",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('d')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_perl_class();",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\dabc\";",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('d')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_perl_class();",
          "    assert!(result.is_ok());",
          "    let hir = result.unwrap();",
          "    assert_eq!(hir.kind(), &HirKind::Class(Class { ranges: vec![ClassRange { start: '0', end: '9' }] }));",
          "    assert!(!hir.is_start_anchored());",
          "    assert!(!hir.is_match_empty());",
          "    assert_eq!(hir.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\dabc\"; // `\\d` followed by other characters",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('d')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_perl_class();",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\dabc\";",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('d')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_perl_class();",
          "    assert!(result.is_ok());",
          "    let hir = result.unwrap();",
          "    assert_eq!(hir.kind(), &HirKind::Class(Class { ranges: vec![ClassRange { start: '0', end: '9' }] }));",
          "    assert!(!hir.is_start_anchored());",
          "    assert!(!hir.is_match_empty());",
          "    assert_eq!(hir.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\sxyz\"; // `\\s` followed by other characters",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('s')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_perl_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char.get(), Some('s'));",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert!(parser.flags.borrow().case_insensitive == false);",
          "    let hir = parser.parse_perl_class();",
          "    assert!(hir.kind() == &HirKind::Class(hir::Class{..}));",
          "    assert!(hir.is_start_anchored() == false);",
          "    assert!(hir.is_match_empty() == false);",
          "    assert_eq!(hir.static_explicit_captures_len(), Some(0));",
          "    assert!(parser.capture_index.get() == 0);",
          "    assert_eq!(parser.capture_names.borrow().len(), 0);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\sxyz\"; // `\\s` followed by other characters",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('s')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_perl_class();",
          "    assert_eq!(parser.char.get(), Some('s'));",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert!(parser.flags.borrow().case_insensitive == false);",
          "    let hir = parser.parse_perl_class();",
          "    assert!(hir.kind() == &HirKind::Class(hir::Class{..}));",
          "    assert!(hir.is_start_anchored() == false);",
          "    assert!(hir.is_match_empty() == false);",
          "    assert_eq!(hir.static_explicit_captures_len(), Some(0));",
          "    assert!(parser.capture_index.get() == 0);",
          "    assert_eq!(parser.capture_names.borrow().len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\w123\"; // `\\w` followed by other characters",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('w')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_perl_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char.get(), Some('w'));",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert!(parser.flags.borrow().case_insensitive == false);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(parser.depth.get() == 0);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\w123\"; // `\\w` followed by other characters",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('w')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_perl_class();",
          "    assert_eq!(parser.char.get(), Some('w'));",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert!(parser.flags.borrow().case_insensitive == false);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(parser.depth.get() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]