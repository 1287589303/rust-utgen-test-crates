[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = DeserializeError(DeserializeErrorKind::BufferTooSmall { what: \"test_buffer\" });",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"buffer is too small to read test_buffer\")"
        ],
        "code": [
          "{",
          "    let error = DeserializeError(DeserializeErrorKind::BufferTooSmall { what: \"test_buffer\" });",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "    write!(f, \"buffer is too small to read test_buffer\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = DeserializeError(DeserializeErrorKind::BufferTooSmall { what: \"\" });",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"buffer is too small to read {}\", \"\")",
          "    write!(f, \"arithmetic overflow for {}\", \"\");",
          "    write!(f, \"failed to read pattern ID for {}: {}\", \"\", err)",
          "    write!(f, \"failed to read state ID for {}: {}\", \"\", err)",
          "    write!(f, \"{}\", \"\");",
          "    write!(f, \"{} is too big to fit in a usize\", \"\");",
          "    write!(f, \"unsupported version: expected version {} but found version {}\", expected, found)",
          "    write!(f, \"endianness mismatch: expected 0x{:X} but got 0x{:X}. (Are you trying to load an object serialized with a different endianness?)\", expected, found)",
          "    write!(f, \"alignment mismatch: slice starts at address 0x{:X}, which is not aligned to a {} byte boundary\", address, alignment)",
          "    write!(f, \"label mismatch: start of serialized object should contain a NUL terminated {:?} label, but a different label was found\", expected)"
        ],
        "code": [
          "{",
          "    let error = DeserializeError(DeserializeErrorKind::BufferTooSmall { what: \"\" });",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "    write!(f, \"buffer is too small to read {}\", \"\")",
          "    write!(f, \"arithmetic overflow for {}\", \"\");",
          "    write!(f, \"failed to read pattern ID for {}: {}\", \"\", err)",
          "    write!(f, \"failed to read state ID for {}: {}\", \"\", err)",
          "    write!(f, \"{}\", \"\");",
          "    write!(f, \"{} is too big to fit in a usize\", \"\");",
          "    write!(f, \"unsupported version: expected version {} but found version {}\", expected, found)",
          "    write!(f, \"endianness mismatch: expected 0x{:X} but got 0x{:X}. (Are you trying to load an object serialized with a different endianness?)\", expected, found)",
          "    write!(f, \"alignment mismatch: slice starts at address 0x{:X}, which is not aligned to a {} byte boundary\", address, alignment)",
          "    write!(f, \"label mismatch: start of serialized object should contain a NUL terminated {:?} label, but a different label was found\", expected)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let long_string = \"a\".repeat(100);",
          "    let error = DeserializeError(DeserializeErrorKind::BufferTooSmall { what: &long_string });",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"buffer is too small to read {}\", long_string)"
        ],
        "code": [
          "{",
          "    let long_string = \"a\".repeat(100);",
          "    let error = DeserializeError(DeserializeErrorKind::BufferTooSmall { what: &long_string });",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "    write!(f, \"buffer is too small to read {}\", long_string)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]