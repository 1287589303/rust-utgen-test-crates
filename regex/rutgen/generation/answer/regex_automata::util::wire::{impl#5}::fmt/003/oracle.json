[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = DeserializeError(DeserializeErrorKind::ArithmeticOverflow { what: \"positive integer\" });",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"arithmetic overflow for positive integer\")",
          "    ",
          "    write!(f, \"{}\", \"arithmetic overflow for positive integer\")"
        ],
        "code": [
          "{",
          "    let error = DeserializeError(DeserializeErrorKind::ArithmeticOverflow { what: \"positive integer\" });",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "    write!(f, \"arithmetic overflow for positive integer\")",
          "    ",
          "    write!(f, \"{}\", \"arithmetic overflow for positive integer\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = DeserializeError(DeserializeErrorKind::ArithmeticOverflow { what: \"maximum usize\" });",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"arithmetic overflow for maximum usize\")"
        ],
        "code": [
          "{",
          "    let error = DeserializeError(DeserializeErrorKind::ArithmeticOverflow { what: \"maximum usize\" });",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "    write!(f, \"arithmetic overflow for maximum usize\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = DeserializeError(DeserializeErrorKind::ArithmeticOverflow { what: \"string exceeding max length\" });",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"arithmetic overflow for string exceeding max length\") == result",
          "    assert_eq!(result.is_ok(), true)",
          "    assert_eq!(formatter.contents(), \"arithmetic overflow for string exceeding max length\")"
        ],
        "code": [
          "{",
          "    let error = DeserializeError(DeserializeErrorKind::ArithmeticOverflow { what: \"string exceeding max length\" });",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "    write!(f, \"arithmetic overflow for string exceeding max length\") == result",
          "    assert_eq!(result.is_ok(), true)",
          "    assert_eq!(formatter.contents(), \"arithmetic overflow for string exceeding max length\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]