[
  {
    "uses": [
      "use core::fmt::Formatter;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use core::fmt::Formatter;",
          "",
          "    struct TestDeserializeError(DeserializeError);",
          "",
          "    let expected_value: u32 = 0x00000001; // Example expected value",
          "    let found_value: u32 = 0xFFFFFFFF; // Example found value, different from expected",
          "",
          "    let error = DeserializeError(DeserializeErrorKind::EndianMismatch {",
          "        expected: expected_value,",
          "        found: found_value,",
          "    });",
          "    let mut formatter = Formatter::default();",
          "    let _ = error.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"endianness mismatch: expected 0x{:X} but got 0x{:X}. \\n (Are you trying to load an object serialized with a different endianness?)\", expected_value, found_value);"
        ],
        "code": [
          "{",
          "    use core::fmt::Formatter;",
          "",
          "    struct TestDeserializeError(DeserializeError);",
          "",
          "    let expected_value: u32 = 0x00000001; // Example expected value",
          "    let found_value: u32 = 0xFFFFFFFF; // Example found value, different from expected",
          "",
          "    let error = DeserializeError(DeserializeErrorKind::EndianMismatch {",
          "        expected: expected_value,",
          "        found: found_value,",
          "    });",
          "    let mut formatter = Formatter::default();",
          "    let _ = error.fmt(&mut formatter);",
          "    write!(f, \"endianness mismatch: expected 0x{:X} but got 0x{:X}. \\n (Are you trying to load an object serialized with a different endianness?)\", expected_value, found_value);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use core::fmt::Formatter;",
          "",
          "    struct TestDeserializeError(DeserializeError);",
          "",
          "    let expected_value: u32 = 0x00000000; // Minimum expected value",
          "    let found_value: u32 = 0xFFFFFFFF; // Example found value, different from expected",
          "",
          "    let error = DeserializeError(DeserializeErrorKind::EndianMismatch {",
          "        expected: expected_value,",
          "        found: found_value,",
          "    });",
          "    let mut formatter = Formatter::default();",
          "    let _ = error.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"endianness mismatch: expected 0x0 but got 0xFFFFFFFF. (Are you trying to load an object serialized with a different endianness?)\");"
        ],
        "code": [
          "{",
          "    use core::fmt::Formatter;",
          "",
          "    struct TestDeserializeError(DeserializeError);",
          "",
          "    let expected_value: u32 = 0x00000000; // Minimum expected value",
          "    let found_value: u32 = 0xFFFFFFFF; // Example found value, different from expected",
          "",
          "    let error = DeserializeError(DeserializeErrorKind::EndianMismatch {",
          "        expected: expected_value,",
          "        found: found_value,",
          "    });",
          "    let mut formatter = Formatter::default();",
          "    let _ = error.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"endianness mismatch: expected 0x0 but got 0xFFFFFFFF. (Are you trying to load an object serialized with a different endianness?)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use core::fmt::Formatter;",
          "",
          "    struct TestDeserializeError(DeserializeError);",
          "",
          "    let expected_value: u32 = 0xFFFFFFFF; // Maximum expected value",
          "    let found_value: u32 = 0x00000000; // Example found value, different from expected",
          "",
          "    let error = DeserializeError(DeserializeErrorKind::EndianMismatch {",
          "        expected: expected_value,",
          "        found: found_value,",
          "    });",
          "    let mut formatter = Formatter::default();",
          "    let _ = error.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"endianness mismatch: expected 0xFFFFFFFF but got 0x00000000. (Are you trying to load an object serialized with a different endianness?)\")"
        ],
        "code": [
          "{",
          "    use core::fmt::Formatter;",
          "",
          "    struct TestDeserializeError(DeserializeError);",
          "",
          "    let expected_value: u32 = 0xFFFFFFFF; // Maximum expected value",
          "    let found_value: u32 = 0x00000000; // Example found value, different from expected",
          "",
          "    let error = DeserializeError(DeserializeErrorKind::EndianMismatch {",
          "        expected: expected_value,",
          "        found: found_value,",
          "    });",
          "    let mut formatter = Formatter::default();",
          "    let _ = error.fmt(&mut formatter);",
          "    write!(f, \"endianness mismatch: expected 0xFFFFFFFF but got 0x00000000. (Are you trying to load an object serialized with a different endianness?)\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]