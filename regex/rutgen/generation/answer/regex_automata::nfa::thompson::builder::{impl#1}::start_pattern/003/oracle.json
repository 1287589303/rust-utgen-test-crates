[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    builder.pattern_id = Some(PatternID::default());",
          "    let _ = builder.start_pattern();",
          "}"
        ],
        "oracle": [
          "    assert!(builder.start_pattern().is_err());",
          "    assert!(builder.pattern_id.is_some());",
          "    assert_eq!(builder.start_pattern.len(), 1);",
          "    assert_eq!(builder.start_pattern[0], StateID::ZERO);"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    builder.pattern_id = Some(PatternID::default());",
          "    let _ = builder.start_pattern();",
          "    assert!(builder.start_pattern().is_err());",
          "    assert!(builder.pattern_id.is_some());",
          "    assert_eq!(builder.start_pattern.len(), 1);",
          "    assert_eq!(builder.start_pattern[0], StateID::ZERO);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    builder.pattern_id = Some(PatternID::default());",
          "    let _ = builder.start_pattern();",
          "}"
        ],
        "oracle": [
          "    assert!(builder.pattern_id.is_some());",
          "    let result = builder.start_pattern();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().kind, BuildErrorKind::PatternIDExhausted);",
          "    assert!(builder.start_pattern.len() > 0);"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    builder.pattern_id = Some(PatternID::default());",
          "    let _ = builder.start_pattern();",
          "    assert!(builder.pattern_id.is_some());",
          "    let result = builder.start_pattern();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().kind, BuildErrorKind::PatternIDExhausted);",
          "    assert!(builder.start_pattern.len() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    builder.pattern_id = Some(PatternID::default());",
          "    let _ = builder.start_pattern();  ",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.pattern_id.is_some(), true);",
          "    assert!(matches!(builder.start_pattern(), Err(BuildError)));",
          "    assert_eq!(builder.start_pattern.len(), 0);",
          "    assert!(std::panic::catch_unwind(|| builder.start_pattern()).is_err());"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    builder.pattern_id = Some(PatternID::default());",
          "    let _ = builder.start_pattern();  ",
          "    assert_eq!(builder.pattern_id.is_some(), true);",
          "    assert!(matches!(builder.start_pattern(), Err(BuildError)));",
          "    assert_eq!(builder.start_pattern.len(), 0);",
          "    assert!(std::panic::catch_unwind(|| builder.start_pattern()).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]