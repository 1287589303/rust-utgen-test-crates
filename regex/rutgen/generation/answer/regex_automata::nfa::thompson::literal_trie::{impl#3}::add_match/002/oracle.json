[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut state = State {",
          "        transitions: Vec::new(), // empty transitions",
          "        chunks: vec![(0, 1)], // non-empty chunks with one entry",
          "    };",
          "    state.add_match();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.chunks.len(), 1);",
          "    assert_eq!(state.chunks[0], (0, 1));",
          "    assert_eq!(state.transitions.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut state = State {",
          "        transitions: Vec::new(), // empty transitions",
          "        chunks: vec![(0, 1)], // non-empty chunks with one entry",
          "    };",
          "    state.add_match();",
          "    assert_eq!(state.chunks.len(), 1);",
          "    assert_eq!(state.chunks[0], (0, 1));",
          "    assert_eq!(state.transitions.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut state = State {",
          "        transitions: Vec::new(), // empty transitions",
          "        chunks: vec![(0, 3), (3, 5)], // non-empty chunks with multiple entries",
          "    };",
          "    state.add_match();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.chunks.len(), 2);",
          "    assert_eq!(state.chunks[1], (0, 0));",
          "    assert_eq!(state.active_chunk_start(), 0);",
          "    assert_eq!(state.transitions.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut state = State {",
          "        transitions: Vec::new(), // empty transitions",
          "        chunks: vec![(0, 3), (3, 5)], // non-empty chunks with multiple entries",
          "    };",
          "    state.add_match();",
          "    assert_eq!(state.chunks.len(), 2);",
          "    assert_eq!(state.chunks[1], (0, 0));",
          "    assert_eq!(state.active_chunk_start(), 0);",
          "    assert_eq!(state.transitions.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]