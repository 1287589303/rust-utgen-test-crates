[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pikevm = PikeVM::always_match().unwrap();",
          "    let mut cache = pikevm.create_cache();",
          "    let expected = Match::must(0, 0..0);",
          "    let _ = pikevm.find_iter(&mut cache, \"\").next();",
          "    let _ = pikevm.find_iter(&mut cache, \"foo\").next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pikevm always_match().is_ok(), true)",
          "    assert_eq!(pikevm.pattern_len(), 0)",
          "    assert_eq!(pikevm.has_empty(), true)",
          "    assert_eq!(pikevm.has_capture(), false)",
          "    assert_eq!(pikevm.is_utf8(), true)",
          "    assert_eq!(pikevm.memory_usage(), 0)",
          "    assert_eq!(pikevm.find_iter(&mut cache, \"\").next(), Some(expected))",
          "    assert_eq!(pikevm.find_iter(&mut cache, \"foo\").next(), Some(expected))"
        ],
        "code": [
          "{",
          "    let pikevm = PikeVM::always_match().unwrap();",
          "    let mut cache = pikevm.create_cache();",
          "    let expected = Match::must(0, 0..0);",
          "    let _ = pikevm.find_iter(&mut cache, \"\").next();",
          "    let _ = pikevm.find_iter(&mut cache, \"foo\").next();",
          "    assert_eq!(pikevm always_match().is_ok(), true)",
          "    assert_eq!(pikevm.pattern_len(), 0)",
          "    assert_eq!(pikevm.has_empty(), true)",
          "    assert_eq!(pikevm.has_capture(), false)",
          "    assert_eq!(pikevm.is_utf8(), true)",
          "    assert_eq!(pikevm.memory_usage(), 0)",
          "    assert_eq!(pikevm.find_iter(&mut cache, \"\").next(), Some(expected))",
          "    assert_eq!(pikevm.find_iter(&mut cache, \"foo\").next(), Some(expected))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pikevm = PikeVM::always_match().unwrap();",
          "    let mut cache = pikevm.create_cache();",
          "    let expected = Match::must(0, 0..0);",
          "    let _ = pikevm.find_iter(&mut cache, \"some non-empty string\").next();",
          "    let _ = pikevm.find_iter(&mut cache, \"another string\").next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(PikeVM::always_match().is_ok(), true);",
          "    let pikevm = PikeVM::always_match().unwrap();",
          "    let cache = pikevm.create_cache();",
          "    assert_eq!(pikevm.find_iter(&mut cache, \"\").next(), Some(Match::must(0, 0..0)));",
          "    assert_eq!(pikevm.find_iter(&mut cache, \"foo\").next(), Some(Match::must(0, 0..0)));",
          "    assert_eq!(pikevm.find_iter(&mut cache, \"some non-empty string\").next(), Some(Match::must(0, 0..0)));",
          "    assert_eq!(pikevm.find_iter(&mut cache, \"another string\").next(), Some(Match::must(0, 0..0)));"
        ],
        "code": [
          "{",
          "    let pikevm = PikeVM::always_match().unwrap();",
          "    let mut cache = pikevm.create_cache();",
          "    let expected = Match::must(0, 0..0);",
          "    let _ = pikevm.find_iter(&mut cache, \"some non-empty string\").next();",
          "    let _ = pikevm.find_iter(&mut cache, \"another string\").next();",
          "    assert_eq!(PikeVM::always_match().is_ok(), true);",
          "    let pikevm = PikeVM::always_match().unwrap();",
          "    let cache = pikevm.create_cache();",
          "    assert_eq!(pikevm.find_iter(&mut cache, \"\").next(), Some(Match::must(0, 0..0)));",
          "    assert_eq!(pikevm.find_iter(&mut cache, \"foo\").next(), Some(Match::must(0, 0..0)));",
          "    assert_eq!(pikevm.find_iter(&mut cache, \"some non-empty string\").next(), Some(Match::must(0, 0..0)));",
          "    assert_eq!(pikevm.find_iter(&mut cache, \"another string\").next(), Some(Match::must(0, 0..0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]