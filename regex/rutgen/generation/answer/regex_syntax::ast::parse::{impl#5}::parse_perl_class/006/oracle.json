[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockParser {",
          "        input: String,",
          "        position: Position,",
          "    }",
          "",
          "    impl MockParser {",
          "        fn new(input: &str) -> Self {",
          "            Self {",
          "                input: input.to_string(),",
          "                position: 0,",
          "            }",
          "        }",
          "",
          "        fn char(&self) -> char {",
          "            self.input.chars().nth(self.position).unwrap()",
          "        }",
          "",
          "        fn span_char(&self) -> Span {",
          "            Span { start: self.position, end: self.position + 1 }",
          "        }",
          "",
          "        fn bump(&mut self) {",
          "            self.position += 1;",
          "        }",
          "    }",
          "",
          "    let mut parser = MockParser::new(r#\"\\D\"#);",
          "    let result = parser.parse_perl_class();",
          "    let expected_span = Span { start: 0, end: 1 };",
          "    let expected_kind = ClassPerlKind::Digit;",
          "    let expected_negated = true;",
          "",
          "    let _ = (result.span == expected_span, result.kind == expected_kind, result.negated == expected_negated);",
          "}"
        ],
        "oracle": [
          "    let parser = MockParser::new(r#\"\\D\"#);",
          "    let result = parser.parse_perl_class();",
          "    let expected_span = Span { start: 0, end: 1 };",
          "    let expected_kind = ClassPerlKind::Digit;",
          "    let expected_negated = true;",
          "    ",
          "    assert_eq!(result.span, expected_span);",
          "    assert_eq!(result.kind, expected_kind);",
          "    assert_eq!(result.negated, expected_negated);"
        ],
        "code": [
          "{",
          "    struct MockParser {",
          "        input: String,",
          "        position: Position,",
          "    }",
          "",
          "    impl MockParser {",
          "        fn new(input: &str) -> Self {",
          "            Self {",
          "                input: input.to_string(),",
          "                position: 0,",
          "            }",
          "        }",
          "",
          "        fn char(&self) -> char {",
          "            self.input.chars().nth(self.position).unwrap()",
          "        }",
          "",
          "        fn span_char(&self) -> Span {",
          "            Span { start: self.position, end: self.position + 1 }",
          "        }",
          "",
          "        fn bump(&mut self) {",
          "            self.position += 1;",
          "        }",
          "    }",
          "",
          "    let mut parser = MockParser::new(r#\"\\D\"#);",
          "    let result = parser.parse_perl_class();",
          "    let expected_span = Span { start: 0, end: 1 };",
          "    let expected_kind = ClassPerlKind::Digit;",
          "    let expected_negated = true;",
          "",
          "    let _ = (result.span == expected_span, result.kind == expected_kind, result.negated == expected_negated);",
          "    let parser = MockParser::new(r#\"\\D\"#);",
          "    let result = parser.parse_perl_class();",
          "    let expected_span = Span { start: 0, end: 1 };",
          "    let expected_kind = ClassPerlKind::Digit;",
          "    let expected_negated = true;",
          "    ",
          "    assert_eq!(result.span, expected_span);",
          "    assert_eq!(result.kind, expected_kind);",
          "    assert_eq!(result.negated, expected_negated);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]