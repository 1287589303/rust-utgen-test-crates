[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockFormatter;",
          "",
          "    impl core::fmt::Write for MockFormatter {",
          "        fn write_str(&mut self, _: &str) -> core::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut accel = Accel { bytes: [0; ACCEL_CAP] }; // empty bytes",
          "    let mut formatter = MockFormatter;",
          "",
          "    let _ = accel.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"Accel(\")?;",
          "    let mut set = f.debug_set();",
          "    assert!(self.len() == 0);",
          "    for &b in self.needles() {",
          "    assert!(self.needles().len() == 0);",
          "    }",
          "    set.finish().is_err();",
          "    write!(f, \")\").is_ok();"
        ],
        "code": [
          "{",
          "    struct MockFormatter;",
          "",
          "    impl core::fmt::Write for MockFormatter {",
          "        fn write_str(&mut self, _: &str) -> core::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut accel = Accel { bytes: [0; ACCEL_CAP] }; // empty bytes",
          "    let mut formatter = MockFormatter;",
          "",
          "    let _ = accel.fmt(&mut formatter);",
          "    write!(f, \"Accel(\")?;",
          "    let mut set = f.debug_set();",
          "    assert!(self.len() == 0);",
          "    for &b in self.needles() {",
          "    assert!(self.needles().len() == 0);",
          "    }",
          "    set.finish().is_err();",
          "    write!(f, \")\").is_ok();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockFormatter;",
          "",
          "    impl core::fmt::Write for MockFormatter {",
          "        fn write_str(&mut self, _: &str) -> core::fmt::Result {",
          "            Err(core::fmt::Error)",
          "        }",
          "    }",
          "",
          "    let mut accel = Accel { bytes: [0, 0, 0, 0, 0, 0, 0, 0] }; // first byte as 0, rest does not matter",
          "    let mut formatter = MockFormatter;",
          "",
          "    let _ = accel.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"Accel(\")? == Ok",
          "    &b in self.needles() == []",
          "    set.finish()? == Err(core::fmt::Error)"
        ],
        "code": [
          "{",
          "    struct MockFormatter;",
          "",
          "    impl core::fmt::Write for MockFormatter {",
          "        fn write_str(&mut self, _: &str) -> core::fmt::Result {",
          "            Err(core::fmt::Error)",
          "        }",
          "    }",
          "",
          "    let mut accel = Accel { bytes: [0, 0, 0, 0, 0, 0, 0, 0] }; // first byte as 0, rest does not matter",
          "    let mut formatter = MockFormatter;",
          "",
          "    let _ = accel.fmt(&mut formatter);",
          "    write!(f, \"Accel(\")? == Ok",
          "    &b in self.needles() == []",
          "    set.finish()? == Err(core::fmt::Error)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]