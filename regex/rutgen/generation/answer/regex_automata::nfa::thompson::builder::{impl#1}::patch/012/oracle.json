[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let state_id_1 = builder.add_union(vec![]).unwrap();",
          "    let state_id_2 = builder.add_union(vec![]).unwrap();",
          "    let state_id_3 = builder.add_union(vec![state_id_1]).unwrap();",
          "    builder.patch(state_id_3, state_id_2).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(builder.states[state_id_3].is_union());",
          "    assert_eq!(builder.states[state_id_3].alternates.len(), 1);",
          "    assert_eq!(builder.memory_states, old_memory_states);",
          "    assert_eq!(builder.patch(state_id_3, state_id_2), Ok(()));"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let state_id_1 = builder.add_union(vec![]).unwrap();",
          "    let state_id_2 = builder.add_union(vec![]).unwrap();",
          "    let state_id_3 = builder.add_union(vec![state_id_1]).unwrap();",
          "    builder.patch(state_id_3, state_id_2).unwrap();",
          "    assert!(builder.states[state_id_3].is_union());",
          "    assert_eq!(builder.states[state_id_3].alternates.len(), 1);",
          "    assert_eq!(builder.memory_states, old_memory_states);",
          "    assert_eq!(builder.patch(state_id_3, state_id_2), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let state_id_1 = builder.add_union(vec![]).unwrap();",
          "    let state_id_2 = builder.add_range(Transition { start: 0, end: 255, next: state_id_1 }).unwrap();",
          "    let state_id_3 = builder.add_union(vec![state_id_2]).unwrap();",
          "    builder.patch(state_id_3, state_id_1).unwrap();",
          "}"
        ],
        "oracle": [
          "    builder.clear();",
          "    let mut builder = Builder::new();",
          "    let state_id_1 = builder.add_union(vec![]).unwrap();",
          "    let state_id_2 = builder.add_range(Transition { start: 0, end: 255, next: state_id_1 }).unwrap();",
          "    let state_id_3 = builder.add_union(vec![state_id_2]).unwrap();",
          "    let result = builder.patch(state_id_3, state_id_1);",
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let state_id_1 = builder.add_union(vec![]).unwrap();",
          "    let state_id_2 = builder.add_range(Transition { start: 0, end: 255, next: state_id_1 }).unwrap();",
          "    let state_id_3 = builder.add_union(vec![state_id_2]).unwrap();",
          "    builder.patch(state_id_3, state_id_1).unwrap();",
          "    builder.clear();",
          "    let mut builder = Builder::new();",
          "    let state_id_1 = builder.add_union(vec![]).unwrap();",
          "    let state_id_2 = builder.add_range(Transition { start: 0, end: 255, next: state_id_1 }).unwrap();",
          "    let state_id_3 = builder.add_union(vec![state_id_2]).unwrap();",
          "    let result = builder.patch(state_id_3, state_id_1);",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let state_id_1 = builder.add_union(vec![]).unwrap();",
          "    let state_id_2 = builder.add_union(vec![]).unwrap();",
          "    let state_id_3 = builder.add_union(vec![state_id_1]).unwrap();",
          "    ",
          "    builder.patch(state_id_3, state_id_2).unwrap();",
          "    builder.patch(state_id_3, state_id_1).unwrap();",
          "}"
        ],
        "oracle": [
          "    builder.patch(state_id_3, state_id_2).unwrap();",
          "    builder.patch(state_id_3, state_id_1).unwrap();",
          "    assert_eq!(builder.memory_states, old_memory_states);",
          "    assert!(matches!(builder.states[state_id_3], State::Union { .. }));"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let state_id_1 = builder.add_union(vec![]).unwrap();",
          "    let state_id_2 = builder.add_union(vec![]).unwrap();",
          "    let state_id_3 = builder.add_union(vec![state_id_1]).unwrap();",
          "    ",
          "    builder.patch(state_id_3, state_id_2).unwrap();",
          "    builder.patch(state_id_3, state_id_1).unwrap();",
          "    builder.patch(state_id_3, state_id_2).unwrap();",
          "    builder.patch(state_id_3, state_id_1).unwrap();",
          "    assert_eq!(builder.memory_states, old_memory_states);",
          "    assert!(matches!(builder.states[state_id_3], State::Union { .. }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]