[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = &[1, 2, 3, 4, 5, 3, 2, 1];",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(7));",
          "    assert_eq!(memrchr3(4, 5, 6, haystack), Some(4));",
          "    assert_eq!(memrchr3(6, 7, 8, haystack), None);",
          "    assert_eq!(memrchr3(2, 1, 3, haystack), Some(2));",
          "    assert_eq!(memrchr3(3, 3, 3, haystack), Some(5));",
          "    assert_eq!(memrchr3(1, 1, 1, haystack), Some(7));"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = &[1, 2, 3, 4, 5, 3, 2, 1];",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "    assert_eq!(result, Some(7));",
          "    assert_eq!(memrchr3(4, 5, 6, haystack), Some(4));",
          "    assert_eq!(memrchr3(6, 7, 8, haystack), None);",
          "    assert_eq!(memrchr3(2, 1, 3, haystack), Some(2));",
          "    assert_eq!(memrchr3(3, 3, 3, haystack), Some(5));",
          "    assert_eq!(memrchr3(1, 1, 1, haystack), Some(7));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = &[5, 5, 1, 5, 5];",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "}"
        ],
        "oracle": [
          "    plaintext",
          "    assert_eq!(result, Some(2));"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = &[5, 5, 1, 5, 5];",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "    plaintext",
          "    assert_eq!(result, Some(2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = &[4, 5, 6, 7, 8];",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);",
          "    ",
          "    let haystack: &[u8] = &[1, 2, 3, 4, 5];",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "    assert_eq!(result, Some(2));",
          "    ",
          "    let haystack: &[u8] = &[3, 4, 1, 2, 3];",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "    assert_eq!(result, Some(4));",
          "    ",
          "    let haystack: &[u8] = &[4, 5, 6, 1, 2, 3];",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "    assert_eq!(result, Some(5));",
          "    ",
          "    let haystack: &[u8] = &[0, 1, 2, 1, 1];",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "    assert_eq!(result, Some(3));",
          "    ",
          "    let haystack: &[u8] = &[];",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "    assert_eq!(result, None);",
          "    ",
          "    let haystack: &[u8] = &[5, 5, 5, 5, 5];",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "    assert_eq!(result, None);",
          "    ",
          "    let haystack: &[u8] = &[10, 20, 30];",
          "    let result = memrchr3(10, 20, 30, haystack);",
          "    assert_eq!(result, Some(2));",
          "    ",
          "    let result = memrchr3(255, 254, 253, haystack);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = &[4, 5, 6, 7, 8];",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "    assert_eq!(result, None);",
          "    ",
          "    let haystack: &[u8] = &[1, 2, 3, 4, 5];",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "    assert_eq!(result, Some(2));",
          "    ",
          "    let haystack: &[u8] = &[3, 4, 1, 2, 3];",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "    assert_eq!(result, Some(4));",
          "    ",
          "    let haystack: &[u8] = &[4, 5, 6, 1, 2, 3];",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "    assert_eq!(result, Some(5));",
          "    ",
          "    let haystack: &[u8] = &[0, 1, 2, 1, 1];",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "    assert_eq!(result, Some(3));",
          "    ",
          "    let haystack: &[u8] = &[];",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "    assert_eq!(result, None);",
          "    ",
          "    let haystack: &[u8] = &[5, 5, 5, 5, 5];",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "    assert_eq!(result, None);",
          "    ",
          "    let haystack: &[u8] = &[10, 20, 30];",
          "    let result = memrchr3(10, 20, 30, haystack);",
          "    assert_eq!(result, Some(2));",
          "    ",
          "    let result = memrchr3(255, 254, 253, haystack);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = &[1, 1, 2, 3, 4, 5];",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "}"
        ],
        "oracle": [
          "    let haystack: &[u8] = &[1, 1, 2, 3, 4, 5];",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "    assert_eq!(result, Some(3));",
          "    ",
          "    let haystack: &[u8] = &[1, 2, 3, 4, 5];",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "    assert_eq!(result, Some(2));",
          "    ",
          "    let haystack: &[u8] = &[4, 5, 6];",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "    assert_eq!(result, None);",
          "    ",
          "    let haystack: &[u8] = &[3, 2, 1, 3, 1];",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "    assert_eq!(result, Some(3));",
          "    ",
          "    let haystack: &[u8] = &[0, 0, 0];",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "    assert_eq!(result, None);",
          "    ",
          "    let haystack: &[u8] = &[];",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "    assert_eq!(result, None);",
          "    ",
          "    let haystack: &[u8] = &[3, 2, 1, 2, 3];",
          "    let result = memrchr3(2, 3, 4, haystack);",
          "    assert_eq!(result, Some(4));"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = &[1, 1, 2, 3, 4, 5];",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "    let haystack: &[u8] = &[1, 1, 2, 3, 4, 5];",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "    assert_eq!(result, Some(3));",
          "    ",
          "    let haystack: &[u8] = &[1, 2, 3, 4, 5];",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "    assert_eq!(result, Some(2));",
          "    ",
          "    let haystack: &[u8] = &[4, 5, 6];",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "    assert_eq!(result, None);",
          "    ",
          "    let haystack: &[u8] = &[3, 2, 1, 3, 1];",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "    assert_eq!(result, Some(3));",
          "    ",
          "    let haystack: &[u8] = &[0, 0, 0];",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "    assert_eq!(result, None);",
          "    ",
          "    let haystack: &[u8] = &[];",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "    assert_eq!(result, None);",
          "    ",
          "    let haystack: &[u8] = &[3, 2, 1, 2, 3];",
          "    let result = memrchr3(2, 3, 4, haystack);",
          "    assert_eq!(result, Some(4));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = &[0, 255, 127];",
          "    let result = memrchr3(0, 255, 127, haystack);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(2));",
          "    assert_eq!(memrchr3(0, 0, 0, haystack), None);",
          "    assert_eq!(memrchr3(255, 255, 255, haystack), Some(1));",
          "    assert_eq!(memrchr3(127, 0, 255, haystack), Some(2));",
          "    assert_eq!(memrchr3(0, 255, 0, haystack), Some(1));",
          "    assert_eq!(memrchr3(100, 101, 102, haystack), None);"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = &[0, 255, 127];",
          "    let result = memrchr3(0, 255, 127, haystack);",
          "    assert_eq!(result, Some(2));",
          "    assert_eq!(memrchr3(0, 0, 0, haystack), None);",
          "    assert_eq!(memrchr3(255, 255, 255, haystack), Some(1));",
          "    assert_eq!(memrchr3(127, 0, 255, haystack), Some(2));",
          "    assert_eq!(memrchr3(0, 255, 0, haystack), Some(1));",
          "    assert_eq!(memrchr3(100, 101, 102, haystack), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = &[5; 1000]; // array of 1000 elements, all 5",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "}"
        ],
        "oracle": [
          "    plaintext",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = &[5; 1000]; // array of 1000 elements, all 5",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "    plaintext",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = &[10, 20, 30, 40, 50, 60, 70, 80, 90];",
          "    let result = memrchr3(30, 40, 50, haystack);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(4));",
          "    assert_eq!(memrchr3(10, 20, 30, haystack), Some(2));",
          "    assert_eq!(memrchr3(60, 70, 80, haystack), Some(5));",
          "    assert_eq!(memrchr3(90, 100, 110, haystack), Some(8));",
          "    assert_eq!(memrchr3(100, 110, 120, haystack), None);",
          "    assert_eq!(memrchr3(20, 50, 80, haystack), Some(1));",
          "    assert_eq!(memrchr3(30, 40, 30, haystack), Some(4));",
          "    assert_eq!(memrchr3(10, 10, 10, haystack), Some(0));"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = &[10, 20, 30, 40, 50, 60, 70, 80, 90];",
          "    let result = memrchr3(30, 40, 50, haystack);",
          "    assert_eq!(result, Some(4));",
          "    assert_eq!(memrchr3(10, 20, 30, haystack), Some(2));",
          "    assert_eq!(memrchr3(60, 70, 80, haystack), Some(5));",
          "    assert_eq!(memrchr3(90, 100, 110, haystack), Some(8));",
          "    assert_eq!(memrchr3(100, 110, 120, haystack), None);",
          "    assert_eq!(memrchr3(20, 50, 80, haystack), Some(1));",
          "    assert_eq!(memrchr3(30, 40, 30, haystack), Some(4));",
          "    assert_eq!(memrchr3(10, 10, 10, haystack), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = &[1, 2, 1, 2, 1];",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(4));",
          "    assert_eq!(memrchr3(1, 2, 3, &[3, 3, 3]), Some(0));",
          "    assert_eq!(memrchr3(1, 2, 3, &[4, 5, 6]), None);",
          "    assert_eq!(memrchr3(1, 2, 3, &[]), None);",
          "    assert_eq!(memrchr3(1, 1, 1, &[1, 1, 1]), Some(2));",
          "    assert_eq!(memrchr3(0, 1, 2, &[0, 1, 2, 3]), Some(2));"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = &[1, 2, 1, 2, 1];",
          "    let result = memrchr3(1, 2, 3, haystack);",
          "    assert_eq!(result, Some(4));",
          "    assert_eq!(memrchr3(1, 2, 3, &[3, 3, 3]), Some(0));",
          "    assert_eq!(memrchr3(1, 2, 3, &[4, 5, 6]), None);",
          "    assert_eq!(memrchr3(1, 2, 3, &[]), None);",
          "    assert_eq!(memrchr3(1, 1, 1, &[1, 1, 1]), Some(2));",
          "    assert_eq!(memrchr3(0, 1, 2, &[0, 1, 2, 3]), Some(2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]