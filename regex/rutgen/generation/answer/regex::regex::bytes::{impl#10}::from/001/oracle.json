[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"test string\";",
          "    let start = 0;",
          "    let end = 4;",
          "    let m = Match::new(haystack, start, end);",
          "    let result = <&[u8]>::from(m);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, b\"test\");",
          "    assert_eq!(result.len(), 4);",
          "    assert_eq!(result, m.as_bytes());",
          "    assert!(m.is_empty() == false);",
          "    assert_eq!(m.len(), 4);",
          "    assert_eq!(m.start(), 0);",
          "    assert_eq!(m.end(), 4);",
          "    assert_eq!(m.range(), 0..4);",
          "    assert_eq!(m.as_bytes(), b\"test\");"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"test string\";",
          "    let start = 0;",
          "    let end = 4;",
          "    let m = Match::new(haystack, start, end);",
          "    let result = <&[u8]>::from(m);",
          "    assert_eq!(result, b\"test\");",
          "    assert_eq!(result.len(), 4);",
          "    assert_eq!(result, m.as_bytes());",
          "    assert!(m.is_empty() == false);",
          "    assert_eq!(m.len(), 4);",
          "    assert_eq!(m.start(), 0);",
          "    assert_eq!(m.end(), 4);",
          "    assert_eq!(m.range(), 0..4);",
          "    assert_eq!(m.as_bytes(), b\"test\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"test string\";",
          "    let start = 4;",
          "    let end = 4;",
          "    let m = Match::new(haystack, start, end);",
          "    let result = <&[u8]>::from(m);",
          "}"
        ],
        "oracle": [
          "    let haystack: &[u8] = b\"test string\";",
          "    let start = 4;",
          "    let end = 4;",
          "    let m = Match::new(haystack, start, end);",
          "    let result = <&[u8]>::from(m);",
          "    assert_eq!(result, &b\"\"[..]);",
          "    assert!(result.is_empty());",
          "    assert_eq!(result.len(), 0);",
          "    assert_eq!(result.as_ptr(), haystack.as_ptr().wrapping_add(start));",
          "    assert_eq!(m.range(), 4..4);"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"test string\";",
          "    let start = 4;",
          "    let end = 4;",
          "    let m = Match::new(haystack, start, end);",
          "    let result = <&[u8]>::from(m);",
          "    let haystack: &[u8] = b\"test string\";",
          "    let start = 4;",
          "    let end = 4;",
          "    let m = Match::new(haystack, start, end);",
          "    let result = <&[u8]>::from(m);",
          "    assert_eq!(result, &b\"\"[..]);",
          "    assert!(result.is_empty());",
          "    assert_eq!(result.len(), 0);",
          "    assert_eq!(result.as_ptr(), haystack.as_ptr().wrapping_add(start));",
          "    assert_eq!(m.range(), 4..4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"\";",
          "    let start = 0;",
          "    let end = 0;",
          "    let m = Match::new(haystack, start, end);",
          "    let result = <&[u8]>::from(m);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, b\"\");"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"\";",
          "    let start = 0;",
          "    let end = 0;",
          "    let m = Match::new(haystack, start, end);",
          "    let result = <&[u8]>::from(m);",
          "    assert_eq!(result, b\"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"complete match\";",
          "    let start = 0;",
          "    let end = haystack.len();",
          "    let m = Match::new(haystack, start, end);",
          "    let result = <&[u8]>::from(m);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, b\"complete match\");",
          "    assert_eq!(result.len(), 15);",
          "    assert!(!result.is_empty());",
          "    assert_eq!(result.as_ptr(), haystack.as_ptr());",
          "    assert_eq!(m.start(), 0);",
          "    assert_eq!(m.end(), 15);"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"complete match\";",
          "    let start = 0;",
          "    let end = haystack.len();",
          "    let m = Match::new(haystack, start, end);",
          "    let result = <&[u8]>::from(m);",
          "    assert_eq!(result, b\"complete match\");",
          "    assert_eq!(result.len(), 15);",
          "    assert!(!result.is_empty());",
          "    assert_eq!(result.as_ptr(), haystack.as_ptr());",
          "    assert_eq!(m.start(), 0);",
          "    assert_eq!(m.end(), 15);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"hello world\";",
          "    let start = 6;",
          "    let end = 11;",
          "    let m = Match::new(haystack, start, end);",
          "    let result = <&[u8]>::from(m);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, b\"world\");",
          "    assert!(result.len() == 5);",
          "    assert!(result == m.as_bytes());",
          "    assert!(result.as_ptr() == haystack.as_ptr().add(start));"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"hello world\";",
          "    let start = 6;",
          "    let end = 11;",
          "    let m = Match::new(haystack, start, end);",
          "    let result = <&[u8]>::from(m);",
          "    assert_eq!(result, b\"world\");",
          "    assert!(result.len() == 5);",
          "    assert!(result == m.as_bytes());",
          "    assert!(result.as_ptr() == haystack.as_ptr().add(start));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]