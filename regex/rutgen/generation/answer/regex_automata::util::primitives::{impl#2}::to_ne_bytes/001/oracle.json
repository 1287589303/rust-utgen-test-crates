[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let index = SmallIndex::new_unchecked(0);",
          "    let _bytes = index.to_ne_bytes();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index.as_usize(), 0);",
          "    assert_eq!(_bytes, [0, 0, 0, 0]);"
        ],
        "code": [
          "{",
          "    let index = SmallIndex::new_unchecked(0);",
          "    let _bytes = index.to_ne_bytes();",
          "    assert_eq!(index.as_usize(), 0);",
          "    assert_eq!(_bytes, [0, 0, 0, 0]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let index = SmallIndex::new_unchecked(u32::MAX as usize);",
          "    let _bytes = index.to_ne_bytes();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index.to_ne_bytes(), (u32::MAX as usize).to_ne_bytes());"
        ],
        "code": [
          "{",
          "    let index = SmallIndex::new_unchecked(u32::MAX as usize);",
          "    let _bytes = index.to_ne_bytes();",
          "    assert_eq!(index.to_ne_bytes(), (u32::MAX as usize).to_ne_bytes());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let index = SmallIndex::new_unchecked((u32::MAX / 2) as usize);",
          "    let _bytes = index.to_ne_bytes();",
          "}"
        ],
        "oracle": [
          "    let index = SmallIndex::new_unchecked((u32::MAX / 2) as usize);",
          "    assert_eq!(_bytes, index.0.to_ne_bytes());",
          "    assert_eq!(_bytes.len(), 4);",
          "    assert_eq!(_bytes[0], (index.0 & 0xFF) as u8);",
          "    assert_eq!(_bytes[1], ((index.0 >> 8) & 0xFF) as u8);",
          "    assert_eq!(_bytes[2], ((index.0 >> 16) & 0xFF) as u8);",
          "    assert_eq!(_bytes[3], ((index.0 >> 24) & 0xFF) as u8);"
        ],
        "code": [
          "{",
          "    let index = SmallIndex::new_unchecked((u32::MAX / 2) as usize);",
          "    let _bytes = index.to_ne_bytes();",
          "    let index = SmallIndex::new_unchecked((u32::MAX / 2) as usize);",
          "    assert_eq!(_bytes, index.0.to_ne_bytes());",
          "    assert_eq!(_bytes.len(), 4);",
          "    assert_eq!(_bytes[0], (index.0 & 0xFF) as u8);",
          "    assert_eq!(_bytes[1], ((index.0 >> 8) & 0xFF) as u8);",
          "    assert_eq!(_bytes[2], ((index.0 >> 16) & 0xFF) as u8);",
          "    assert_eq!(_bytes[3], ((index.0 >> 24) & 0xFF) as u8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]