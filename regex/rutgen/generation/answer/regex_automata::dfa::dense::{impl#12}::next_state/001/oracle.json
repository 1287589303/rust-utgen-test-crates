[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let current = StateID(0);",
          "    let input = 0u8;",
          "    let dfa = DFA {",
          "        tt: TransitionTable { table: vec![StateID(0); 256], classes: ByteClasses([0; 256]), stride2: 8 },",
          "        st: StartTable { table: vec![0; 8], kind: StartKind::Both, start_map: StartByteMap::new(), stride: 1, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
          "        ms: MatchStates { slices: vec![], pattern_ids: vec![], pattern_len: 0 },",
          "        special: Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 },",
          "        accels: Accels { accels: vec![] },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false },",
          "    };",
          "    let _ = dfa.next_state(current, input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.next_state(StateID(0), 0u8), StateID(0));",
          "    assert_eq!(dfa.next_state(StateID(1), 0u8), StateID(0));",
          "    assert_eq!(dfa.next_state(StateID(2), 1u8), StateID(0));",
          "    assert_eq!(dfa.next_state(StateID(3), 255u8), StateID(0));",
          "    assert_eq!(dfa.next_state(StateID(0), 255u8), StateID(0));",
          "    assert_eq!(dfa.next_state(StateID(1), 255u8), StateID(0));",
          "    assert_eq!(dfa.next_state(StateID(0), 128u8), StateID(0));",
          "    assert_eq!(dfa.next_state(StateID(2), 128u8), StateID(0));",
          "    assert_eq!(dfa.next_state(StateID(0), 128u8), StateID(0));"
        ],
        "code": [
          "{",
          "    let current = StateID(0);",
          "    let input = 0u8;",
          "    let dfa = DFA {",
          "        tt: TransitionTable { table: vec![StateID(0); 256], classes: ByteClasses([0; 256]), stride2: 8 },",
          "        st: StartTable { table: vec![0; 8], kind: StartKind::Both, start_map: StartByteMap::new(), stride: 1, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
          "        ms: MatchStates { slices: vec![], pattern_ids: vec![], pattern_len: 0 },",
          "        special: Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 },",
          "        accels: Accels { accels: vec![] },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false },",
          "    };",
          "    let _ = dfa.next_state(current, input);",
          "    assert_eq!(dfa.next_state(StateID(0), 0u8), StateID(0));",
          "    assert_eq!(dfa.next_state(StateID(1), 0u8), StateID(0));",
          "    assert_eq!(dfa.next_state(StateID(2), 1u8), StateID(0));",
          "    assert_eq!(dfa.next_state(StateID(3), 255u8), StateID(0));",
          "    assert_eq!(dfa.next_state(StateID(0), 255u8), StateID(0));",
          "    assert_eq!(dfa.next_state(StateID(1), 255u8), StateID(0));",
          "    assert_eq!(dfa.next_state(StateID(0), 128u8), StateID(0));",
          "    assert_eq!(dfa.next_state(StateID(2), 128u8), StateID(0));",
          "    assert_eq!(dfa.next_state(StateID(0), 128u8), StateID(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let current = StateID(10);",
          "    let input = 5u8;",
          "    let dfa = DFA {",
          "        tt: TransitionTable { table: vec![StateID(0); 256], classes: ByteClasses([0; 256]), stride2: 8 },",
          "        st: StartTable { table: vec![0; 8], kind: StartKind::Both, start_map: StartByteMap::new(), stride: 1, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
          "        ms: MatchStates { slices: vec![], pattern_ids: vec![], pattern_len: 0 },",
          "        special: Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 },",
          "        accels: Accels { accels: vec![] },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false },",
          "    };",
          "    let _ = dfa.next_state(current, input);",
          "}"
        ],
        "oracle": [
          "    let current = StateID(10);",
          "    let input = 5u8;",
          "    let expected_state = dfa.trans()[(current.as_usize() + usize::from(dfa.byte_classes().get(input)))];",
          "    assert_eq!(dfa.next_state(current, input), expected_state);"
        ],
        "code": [
          "{",
          "    let current = StateID(10);",
          "    let input = 5u8;",
          "    let dfa = DFA {",
          "        tt: TransitionTable { table: vec![StateID(0); 256], classes: ByteClasses([0; 256]), stride2: 8 },",
          "        st: StartTable { table: vec![0; 8], kind: StartKind::Both, start_map: StartByteMap::new(), stride: 1, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
          "        ms: MatchStates { slices: vec![], pattern_ids: vec![], pattern_len: 0 },",
          "        special: Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 },",
          "        accels: Accels { accels: vec![] },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false },",
          "    };",
          "    let _ = dfa.next_state(current, input);",
          "    let current = StateID(10);",
          "    let input = 5u8;",
          "    let expected_state = dfa.trans()[(current.as_usize() + usize::from(dfa.byte_classes().get(input)))];",
          "    assert_eq!(dfa.next_state(current, input), expected_state);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let current = StateID(255);",
          "    let input = 255u8;",
          "    let dfa = DFA {",
          "        tt: TransitionTable { table: vec![StateID(0); 256], classes: ByteClasses([0; 256]), stride2: 8 },",
          "        st: StartTable { table: vec![0; 8], kind: StartKind::Both, start_map: StartByteMap::new(), stride: 1, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
          "        ms: MatchStates { slices: vec![], pattern_ids: vec![], pattern_len: 0 },",
          "        special: Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 },",
          "        accels: Accels { accels: vec![] },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false },",
          "    };",
          "    let _ = dfa.next_state(current, input);",
          "}"
        ],
        "oracle": [
          "    let current = StateID(0); let input = 0u8; assert_eq!(dfa.next_state(current, input), StateID(0));",
          "    let current = StateID(255); let input = 0u8; assert_eq!(dfa.next_state(current, input), StateID(0));",
          "    let current = StateID(1); let input = 1u8; assert_eq!(dfa.next_state(current, input), StateID(1));",
          "    let current = StateID(25); let input = 25u8; assert_eq!(dfa.next_state(current, input), StateID(25));",
          "    let current = StateID(127); let input = 127u8; assert_eq!(dfa.next_state(current, input), StateID(127));",
          "    let current = StateID(255); let input = 128u8; assert_eq!(dfa.next_state(current, input), StateID(255));",
          "    let current = StateID(150); let input = 5u8; assert_eq!(dfa.next_state(current, input), StateID(5));",
          "    let current = StateID(254); let input = 254u8; assert_eq!(dfa.next_state(current, input), StateID(254));",
          "    let current = StateID(2); let input = 255u8; assert_eq!(dfa.next_state(current, input), StateID(255));",
          "    let current = StateID(100); let input = 200u8; assert_eq!(dfa.next_state(current, input), StateID(200));"
        ],
        "code": [
          "{",
          "    let current = StateID(255);",
          "    let input = 255u8;",
          "    let dfa = DFA {",
          "        tt: TransitionTable { table: vec![StateID(0); 256], classes: ByteClasses([0; 256]), stride2: 8 },",
          "        st: StartTable { table: vec![0; 8], kind: StartKind::Both, start_map: StartByteMap::new(), stride: 1, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
          "        ms: MatchStates { slices: vec![], pattern_ids: vec![], pattern_len: 0 },",
          "        special: Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 },",
          "        accels: Accels { accels: vec![] },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false },",
          "    };",
          "    let _ = dfa.next_state(current, input);",
          "    let current = StateID(0); let input = 0u8; assert_eq!(dfa.next_state(current, input), StateID(0));",
          "    let current = StateID(255); let input = 0u8; assert_eq!(dfa.next_state(current, input), StateID(0));",
          "    let current = StateID(1); let input = 1u8; assert_eq!(dfa.next_state(current, input), StateID(1));",
          "    let current = StateID(25); let input = 25u8; assert_eq!(dfa.next_state(current, input), StateID(25));",
          "    let current = StateID(127); let input = 127u8; assert_eq!(dfa.next_state(current, input), StateID(127));",
          "    let current = StateID(255); let input = 128u8; assert_eq!(dfa.next_state(current, input), StateID(255));",
          "    let current = StateID(150); let input = 5u8; assert_eq!(dfa.next_state(current, input), StateID(5));",
          "    let current = StateID(254); let input = 254u8; assert_eq!(dfa.next_state(current, input), StateID(254));",
          "    let current = StateID(2); let input = 255u8; assert_eq!(dfa.next_state(current, input), StateID(255));",
          "    let current = StateID(100); let input = 200u8; assert_eq!(dfa.next_state(current, input), StateID(200));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]