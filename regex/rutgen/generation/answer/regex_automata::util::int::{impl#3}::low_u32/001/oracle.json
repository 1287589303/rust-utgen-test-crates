[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u64 = 0;",
          "    let result = value.low_u32();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0);",
          "    let value: u64 = 1;",
          "    let result = value.low_u32();",
          "    assert_eq!(result, 1);",
          "    let value: u64 = 255;",
          "    let result = value.low_u32();",
          "    assert_eq!(result, 255);",
          "    let value: u64 = 256;",
          "    let result = value.low_u32();",
          "    assert_eq!(result, 256);",
          "    let value: u64 = 65535;",
          "    let result = value.low_u32();",
          "    assert_eq!(result, 65535);",
          "    let value: u64 = 65536;",
          "    let result = value.low_u32();",
          "    assert_eq!(result, 65536);",
          "    let value: u64 = 4294967295;",
          "    let result = value.low_u32();",
          "    assert_eq!(result, 4294967295);",
          "    let value: u64 = 4294967296;",
          "    let result = value.low_u32();",
          "    assert_eq!(result, 0);"
        ],
        "code": [
          "{",
          "    let value: u64 = 0;",
          "    let result = value.low_u32();",
          "    assert_eq!(result, 0);",
          "    let value: u64 = 1;",
          "    let result = value.low_u32();",
          "    assert_eq!(result, 1);",
          "    let value: u64 = 255;",
          "    let result = value.low_u32();",
          "    assert_eq!(result, 255);",
          "    let value: u64 = 256;",
          "    let result = value.low_u32();",
          "    assert_eq!(result, 256);",
          "    let value: u64 = 65535;",
          "    let result = value.low_u32();",
          "    assert_eq!(result, 65535);",
          "    let value: u64 = 65536;",
          "    let result = value.low_u32();",
          "    assert_eq!(result, 65536);",
          "    let value: u64 = 4294967295;",
          "    let result = value.low_u32();",
          "    assert_eq!(result, 4294967295);",
          "    let value: u64 = 4294967296;",
          "    let result = value.low_u32();",
          "    assert_eq!(result, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u64 = u32::MAX as u64;",
          "    let result = value.low_u32();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, u32::MAX);",
          "    assert_eq!(result as u64, value.low_u32());",
          "    let value: u64 = 0;",
          "    assert_eq!(value.low_u32(), 0);",
          "    let value: u64 = 1;",
          "    assert_eq!(value.low_u32(), 1);",
          "    let value: u64 = 100;",
          "    assert_eq!(value.low_u32(), 100);",
          "    let value: u64 = u32::MAX as u64 + 1;",
          "    assert_eq!(value.low_u32(), u32::MAX);"
        ],
        "code": [
          "{",
          "    let value: u64 = u32::MAX as u64;",
          "    let result = value.low_u32();",
          "    assert_eq!(result, u32::MAX);",
          "    assert_eq!(result as u64, value.low_u32());",
          "    let value: u64 = 0;",
          "    assert_eq!(value.low_u32(), 0);",
          "    let value: u64 = 1;",
          "    assert_eq!(value.low_u32(), 1);",
          "    let value: u64 = 100;",
          "    assert_eq!(value.low_u32(), 100);",
          "    let value: u64 = u32::MAX as u64 + 1;",
          "    assert_eq!(value.low_u32(), u32::MAX);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u64 = (u32::MAX as u64) + 1;",
          "    let result = value.low_u32();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0);"
        ],
        "code": [
          "{",
          "    let value: u64 = (u32::MAX as u64) + 1;",
          "    let result = value.low_u32();",
          "    assert_eq!(result, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u64 = 123456789;",
          "    let result = value.low_u32();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 123456789_u32);"
        ],
        "code": [
          "{",
          "    let value: u64 = 123456789;",
          "    let result = value.low_u32();",
          "    assert_eq!(result, 123456789_u32);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u64 = 2000000000;",
          "    let result = value.low_u32();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 2000000000u32);"
        ],
        "code": [
          "{",
          "    let value: u64 = 2000000000;",
          "    let result = value.low_u32();",
          "    assert_eq!(result, 2000000000u32);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]