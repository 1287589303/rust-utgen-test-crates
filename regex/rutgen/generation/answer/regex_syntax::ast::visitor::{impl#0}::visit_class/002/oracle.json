[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockVisitor;",
          "",
          "    impl Visitor for MockVisitor {",
          "        type Output = ();",
          "        type Err = ();",
          "",
          "        fn visit_class_set_binary_op_in(&mut self, _op: &ClassSetBinaryOp) -> Result<(), Self::Err> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let class_set_item = ast::ClassSetItem::Bracketed(ast::ClassBracketed {",
          "        span: Span { start: 0, end: 1 },",
          "        negated: false,",
          "        kind: ast::ClassSet::Item(Box::new(ast::ClassSetItem::Literal('a'))),",
          "    });",
          "",
          "    let class_bracketed = ast::ClassBracketed {",
          "        span: Span { start: 0, end: 5 },",
          "        negated: false,",
          "        kind: ast::ClassSet::Union(ast::ClassSetUnion {",
          "            items: vec![class_set_item],",
          "        }),",
          "    };",
          "",
          "    let mut visitor = MockVisitor;",
          "    let mut heap_visitor = HeapVisitor::new();",
          "",
          "    let _ = heap_visitor.visit_class(&class_bracketed, &mut visitor);",
          "}"
        ],
        "oracle": [
          "    heap_visitor.visit_class_pre(&ast, &mut visitor).is_ok();",
          "    let x = heap_visitor.induct_class(&ast).is_some();",
          "    heap_visitor.visit_class_post(&ast, &mut visitor).is_err();"
        ],
        "code": [
          "{",
          "    struct MockVisitor;",
          "",
          "    impl Visitor for MockVisitor {",
          "        type Output = ();",
          "        type Err = ();",
          "",
          "        fn visit_class_set_binary_op_in(&mut self, _op: &ClassSetBinaryOp) -> Result<(), Self::Err> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let class_set_item = ast::ClassSetItem::Bracketed(ast::ClassBracketed {",
          "        span: Span { start: 0, end: 1 },",
          "        negated: false,",
          "        kind: ast::ClassSet::Item(Box::new(ast::ClassSetItem::Literal('a'))),",
          "    });",
          "",
          "    let class_bracketed = ast::ClassBracketed {",
          "        span: Span { start: 0, end: 5 },",
          "        negated: false,",
          "        kind: ast::ClassSet::Union(ast::ClassSetUnion {",
          "            items: vec![class_set_item],",
          "        }),",
          "    };",
          "",
          "    let mut visitor = MockVisitor;",
          "    let mut heap_visitor = HeapVisitor::new();",
          "",
          "    let _ = heap_visitor.visit_class(&class_bracketed, &mut visitor);",
          "    heap_visitor.visit_class_pre(&ast, &mut visitor).is_ok();",
          "    let x = heap_visitor.induct_class(&ast).is_some();",
          "    heap_visitor.visit_class_post(&ast, &mut visitor).is_err();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockVisitor;",
          "",
          "    impl Visitor for MockVisitor {",
          "        type Output = ();",
          "        type Err = ();",
          "",
          "        fn visit_class_set_binary_op_in(&mut self, _op: &ClassSetBinaryOp) -> Result<(), Self::Err> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let class_set_item_lhs = ast::ClassSetItem::Bracketed(ast::ClassBracketed {",
          "        span: Span { start: 0, end: 2 },",
          "        negated: false,",
          "        kind: ast::ClassSet::Item(Box::new(ast::ClassSetItem::Literal('a'))),",
          "    });",
          "",
          "    let class_set_item_rhs = ast::ClassSetItem::Bracketed(ast::ClassBracketed {",
          "        span: Span { start: 3, end: 5 },",
          "        negated: false,",
          "        kind: ast::ClassSet::Item(Box::new(ast::ClassSetItem::Literal('b'))),",
          "    });",
          "",
          "    let class_set_binary_op = ClassSetBinaryOp {",
          "        span: Span { start: 0, end: 6 },",
          "        kind: ClassSetBinaryOpKind::Union,",
          "        lhs: Box::new(ast::ClassSet::Union(ast::ClassSetUnion {",
          "            items: vec![class_set_item_lhs],",
          "        })),",
          "        rhs: Box::new(ast::ClassSet::Union(ast::ClassSetUnion {",
          "            items: vec![class_set_item_rhs],",
          "        })),",
          "    };",
          "",
          "    let class_bracketed = ast::ClassBracketed {",
          "        span: Span { start: 0, end: 10 },",
          "        negated: false,",
          "        kind: ast::ClassSet::BinaryOp(Box::new(class_set_binary_op)),",
          "    };",
          "",
          "    let mut visitor = MockVisitor;",
          "    let mut heap_visitor = HeapVisitor::new();",
          "",
          "    let _ = heap_visitor.visit_class(&class_bracketed, &mut visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(heap_visitor.visit_class_pre(&ast, &mut visitor), Ok(()));",
          "    assert!(heap_visitor.induct_class(&ast).is_some());",
          "    assert_eq!(heap_visitor.visit_class_post(&ast, &mut visitor), Err(()));"
        ],
        "code": [
          "{",
          "    struct MockVisitor;",
          "",
          "    impl Visitor for MockVisitor {",
          "        type Output = ();",
          "        type Err = ();",
          "",
          "        fn visit_class_set_binary_op_in(&mut self, _op: &ClassSetBinaryOp) -> Result<(), Self::Err> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let class_set_item_lhs = ast::ClassSetItem::Bracketed(ast::ClassBracketed {",
          "        span: Span { start: 0, end: 2 },",
          "        negated: false,",
          "        kind: ast::ClassSet::Item(Box::new(ast::ClassSetItem::Literal('a'))),",
          "    });",
          "",
          "    let class_set_item_rhs = ast::ClassSetItem::Bracketed(ast::ClassBracketed {",
          "        span: Span { start: 3, end: 5 },",
          "        negated: false,",
          "        kind: ast::ClassSet::Item(Box::new(ast::ClassSetItem::Literal('b'))),",
          "    });",
          "",
          "    let class_set_binary_op = ClassSetBinaryOp {",
          "        span: Span { start: 0, end: 6 },",
          "        kind: ClassSetBinaryOpKind::Union,",
          "        lhs: Box::new(ast::ClassSet::Union(ast::ClassSetUnion {",
          "            items: vec![class_set_item_lhs],",
          "        })),",
          "        rhs: Box::new(ast::ClassSet::Union(ast::ClassSetUnion {",
          "            items: vec![class_set_item_rhs],",
          "        })),",
          "    };",
          "",
          "    let class_bracketed = ast::ClassBracketed {",
          "        span: Span { start: 0, end: 10 },",
          "        negated: false,",
          "        kind: ast::ClassSet::BinaryOp(Box::new(class_set_binary_op)),",
          "    };",
          "",
          "    let mut visitor = MockVisitor;",
          "    let mut heap_visitor = HeapVisitor::new();",
          "",
          "    let _ = heap_visitor.visit_class(&class_bracketed, &mut visitor);",
          "    assert_eq!(heap_visitor.visit_class_pre(&ast, &mut visitor), Ok(()));",
          "    assert!(heap_visitor.induct_class(&ast).is_some());",
          "    assert_eq!(heap_visitor.visit_class_post(&ast, &mut visitor), Err(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockVisitor;",
          "",
          "    impl Visitor for MockVisitor {",
          "        type Output = ();",
          "        type Err = ();",
          "",
          "        fn visit_class_set_binary_op_in(&mut self, _op: &ClassSetBinaryOp) -> Result<(), Self::Err> {",
          "            Err(())",
          "        }",
          "    }",
          "",
          "    let class_set_item = ast::ClassSetItem::Bracketed(ast::ClassBracketed {",
          "        span: Span { start: 0, end: 1 },",
          "        negated: false,",
          "        kind: ast::ClassSet::Item(Box::new(ast::ClassSetItem::Literal('c'))),",
          "    });",
          "",
          "    let class_bracketed = ast::ClassBracketed {",
          "        span: Span { start: 0, end: 5 },",
          "        negated: false,",
          "        kind: ast::ClassSet::Union(ast::ClassSetUnion {",
          "            items: vec![class_set_item],",
          "        }),",
          "    };",
          "",
          "    let mut visitor = MockVisitor;",
          "    let mut heap_visitor = HeapVisitor::new();",
          "",
          "    let _ = heap_visitor.visit_class(&class_bracketed, &mut visitor);",
          "}"
        ],
        "oracle": [
          "    let class_set_item = ast::ClassSetItem::Bracketed(ast::ClassBracketed { span: Span { start: 0, end: 1 }, negated: false, kind: ast::ClassSet::Item(Box::new(ast::ClassSetItem::Literal('c'))), });",
          "    let class_bracketed = ast::ClassBracketed { span: Span { start: 0, end: 5 }, negated: false, kind: ast::ClassSet::Union(ast::ClassSetUnion { items: vec![class_set_item], }), };",
          "    let mut visitor = MockVisitor;",
          "    let mut heap_visitor = HeapVisitor::new();",
          "    assert_eq!(heap_visitor.visit_class_pre(&ast::ClassInduct::from_bracketed(&class_bracketed), &mut visitor), Ok(()));",
          "    assert!(heap_visitor.induct_class(&ast::ClassInduct::from_bracketed(&class_bracketed)).is_some());",
          "    assert_eq!(heap_visitor.visit_class_post(&ast::ClassInduct::from_bracketed(&class_bracketed), &mut visitor), Err(()));"
        ],
        "code": [
          "{",
          "    struct MockVisitor;",
          "",
          "    impl Visitor for MockVisitor {",
          "        type Output = ();",
          "        type Err = ();",
          "",
          "        fn visit_class_set_binary_op_in(&mut self, _op: &ClassSetBinaryOp) -> Result<(), Self::Err> {",
          "            Err(())",
          "        }",
          "    }",
          "",
          "    let class_set_item = ast::ClassSetItem::Bracketed(ast::ClassBracketed {",
          "        span: Span { start: 0, end: 1 },",
          "        negated: false,",
          "        kind: ast::ClassSet::Item(Box::new(ast::ClassSetItem::Literal('c'))),",
          "    });",
          "",
          "    let class_bracketed = ast::ClassBracketed {",
          "        span: Span { start: 0, end: 5 },",
          "        negated: false,",
          "        kind: ast::ClassSet::Union(ast::ClassSetUnion {",
          "            items: vec![class_set_item],",
          "        }),",
          "    };",
          "",
          "    let mut visitor = MockVisitor;",
          "    let mut heap_visitor = HeapVisitor::new();",
          "",
          "    let _ = heap_visitor.visit_class(&class_bracketed, &mut visitor);",
          "    let class_set_item = ast::ClassSetItem::Bracketed(ast::ClassBracketed { span: Span { start: 0, end: 1 }, negated: false, kind: ast::ClassSet::Item(Box::new(ast::ClassSetItem::Literal('c'))), });",
          "    let class_bracketed = ast::ClassBracketed { span: Span { start: 0, end: 5 }, negated: false, kind: ast::ClassSet::Union(ast::ClassSetUnion { items: vec![class_set_item], }), };",
          "    let mut visitor = MockVisitor;",
          "    let mut heap_visitor = HeapVisitor::new();",
          "    assert_eq!(heap_visitor.visit_class_pre(&ast::ClassInduct::from_bracketed(&class_bracketed), &mut visitor), Ok(()));",
          "    assert!(heap_visitor.induct_class(&ast::ClassInduct::from_bracketed(&class_bracketed)).is_some());",
          "    assert_eq!(heap_visitor.visit_class_post(&ast::ClassInduct::from_bracketed(&class_bracketed), &mut visitor), Err(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]