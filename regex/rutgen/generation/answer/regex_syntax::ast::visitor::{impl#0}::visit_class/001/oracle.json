[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockVisitor;",
          "",
          "    impl Visitor for MockVisitor {",
          "        type Output = ();",
          "        type Err = ();",
          "",
          "        fn visit_class_set_binary_op_in(&mut self, _op: &ClassSetBinaryOp) -> Result<(), Self::Err> {",
          "            Err(())",
          "        }",
          "    }",
          "",
          "    let ast = ClassBracketed {",
          "        span: Span::default(),",
          "        negated: false,",
          "        kind: ClassSet::Item(Box::new(ast::ClassSetItem::Union(ast::ClassSetUnion::default()))),",
          "    };",
          "",
          "    let mut visitor = MockVisitor;",
          "    let mut heap_visitor = HeapVisitor::new();",
          "    let _ = heap_visitor.visit_class(&ast, &mut visitor);",
          "}"
        ],
        "oracle": [
          "    assert!(heap_visitor.visit_class_pre(&ast, &visitor).is_err());",
          "    assert!(heap_visitor.induct_class(&ast).is_none());",
          "    assert_eq!(heap_visitor.stack_class.len(), 0);",
          "    assert!(heap_visitor.visit_class_post(&ast, &visitor).is_err());",
          "    assert!(heap_visitor.stack_class.is_empty());"
        ],
        "code": [
          "{",
          "    struct MockVisitor;",
          "",
          "    impl Visitor for MockVisitor {",
          "        type Output = ();",
          "        type Err = ();",
          "",
          "        fn visit_class_set_binary_op_in(&mut self, _op: &ClassSetBinaryOp) -> Result<(), Self::Err> {",
          "            Err(())",
          "        }",
          "    }",
          "",
          "    let ast = ClassBracketed {",
          "        span: Span::default(),",
          "        negated: false,",
          "        kind: ClassSet::Item(Box::new(ast::ClassSetItem::Union(ast::ClassSetUnion::default()))),",
          "    };",
          "",
          "    let mut visitor = MockVisitor;",
          "    let mut heap_visitor = HeapVisitor::new();",
          "    let _ = heap_visitor.visit_class(&ast, &mut visitor);",
          "    assert!(heap_visitor.visit_class_pre(&ast, &visitor).is_err());",
          "    assert!(heap_visitor.induct_class(&ast).is_none());",
          "    assert_eq!(heap_visitor.stack_class.len(), 0);",
          "    assert!(heap_visitor.visit_class_post(&ast, &visitor).is_err());",
          "    assert!(heap_visitor.stack_class.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockVisitor;",
          "",
          "    impl Visitor for MockVisitor {",
          "        type Output = ();",
          "        type Err = ();",
          "",
          "        fn visit_class_set_binary_op_in(&mut self, _op: &ClassSetBinaryOp) -> Result<(), Self::Err> {",
          "            Err(())",
          "        }",
          "    }",
          "",
          "    let ast = ClassBracketed {",
          "        span: Span::default(),",
          "        negated: true,",
          "        kind: ClassSet::Item(Box::new(ast::ClassSetItem::Bracketed(ast::ClassBracketed::default()))),",
          "    };",
          "",
          "    let mut visitor = MockVisitor;",
          "    let mut heap_visitor = HeapVisitor::new();",
          "    let _ = heap_visitor.visit_class(&ast, &mut visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(heap_visitor.visit_class(&ast, &mut visitor).is_err(), true);",
          "    assert_eq!(heap_visitor.stack_class.is_empty(), true);",
          "    assert_eq!(visitor.visit_class_set_binary_op_in(&ClassSetBinaryOp::default()).is_err(), true);",
          "    assert!(heap_visitor.stack.is_empty());"
        ],
        "code": [
          "{",
          "    struct MockVisitor;",
          "",
          "    impl Visitor for MockVisitor {",
          "        type Output = ();",
          "        type Err = ();",
          "",
          "        fn visit_class_set_binary_op_in(&mut self, _op: &ClassSetBinaryOp) -> Result<(), Self::Err> {",
          "            Err(())",
          "        }",
          "    }",
          "",
          "    let ast = ClassBracketed {",
          "        span: Span::default(),",
          "        negated: true,",
          "        kind: ClassSet::Item(Box::new(ast::ClassSetItem::Bracketed(ast::ClassBracketed::default()))),",
          "    };",
          "",
          "    let mut visitor = MockVisitor;",
          "    let mut heap_visitor = HeapVisitor::new();",
          "    let _ = heap_visitor.visit_class(&ast, &mut visitor);",
          "    assert_eq!(heap_visitor.visit_class(&ast, &mut visitor).is_err(), true);",
          "    assert_eq!(heap_visitor.stack_class.is_empty(), true);",
          "    assert_eq!(visitor.visit_class_set_binary_op_in(&ClassSetBinaryOp::default()).is_err(), true);",
          "    assert!(heap_visitor.stack.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockVisitor;",
          "",
          "    impl Visitor for MockVisitor {",
          "        type Output = ();",
          "        type Err = ();",
          "",
          "        fn visit_class_set_binary_op_in(&mut self, _op: &ClassSetBinaryOp) -> Result<(), Self::Err> {",
          "            Err(())",
          "        }",
          "    }",
          "",
          "    let lhs = Box::new(ClassSet::Item(Box::new(ast::ClassSetItem::Literal(ast::Literal::default()))));",
          "    let rhs = Box::new(ClassSet::Item(Box::new(ast::ClassSetItem::Literal(ast::Literal::default()))));",
          "    let op = ClassSetBinaryOp {",
          "        span: Span::default(),",
          "        kind: ClassSetBinaryOpKind::Union,",
          "        lhs,",
          "        rhs,",
          "    };",
          "",
          "    let ast = ClassBracketed {",
          "        span: Span::default(),",
          "        negated: false,",
          "        kind: ClassSet::BinaryOp(Box::new(op)),",
          "    };",
          "",
          "    let mut visitor = MockVisitor;",
          "    let mut heap_visitor = HeapVisitor::new();",
          "    let _ = heap_visitor.visit_class(&ast, &mut visitor);",
          "}"
        ],
        "oracle": [
          "    heap_visitor.visit_class_pre(&ast, &visitor).is_err();",
          "    heap_visitor.stack_class.is_empty();",
          "    visitor.visit_class_set_binary_op_in(&op).is_err();"
        ],
        "code": [
          "{",
          "    struct MockVisitor;",
          "",
          "    impl Visitor for MockVisitor {",
          "        type Output = ();",
          "        type Err = ();",
          "",
          "        fn visit_class_set_binary_op_in(&mut self, _op: &ClassSetBinaryOp) -> Result<(), Self::Err> {",
          "            Err(())",
          "        }",
          "    }",
          "",
          "    let lhs = Box::new(ClassSet::Item(Box::new(ast::ClassSetItem::Literal(ast::Literal::default()))));",
          "    let rhs = Box::new(ClassSet::Item(Box::new(ast::ClassSetItem::Literal(ast::Literal::default()))));",
          "    let op = ClassSetBinaryOp {",
          "        span: Span::default(),",
          "        kind: ClassSetBinaryOpKind::Union,",
          "        lhs,",
          "        rhs,",
          "    };",
          "",
          "    let ast = ClassBracketed {",
          "        span: Span::default(),",
          "        negated: false,",
          "        kind: ClassSet::BinaryOp(Box::new(op)),",
          "    };",
          "",
          "    let mut visitor = MockVisitor;",
          "    let mut heap_visitor = HeapVisitor::new();",
          "    let _ = heap_visitor.visit_class(&ast, &mut visitor);",
          "    heap_visitor.visit_class_pre(&ast, &visitor).is_err();",
          "    heap_visitor.stack_class.is_empty();",
          "    visitor.visit_class_set_binary_op_in(&op).is_err();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockVisitor;",
          "",
          "    impl Visitor for MockVisitor {",
          "        type Output = ();",
          "        type Err = ();",
          "",
          "        fn visit_class_set_binary_op_in(&mut self, _op: &ClassSetBinaryOp) -> Result<(), Self::Err> {",
          "            Err(())",
          "        }",
          "    }",
          "",
          "    let items = vec![",
          "        ast::ClassSetItem::Literal(ast::Literal::default()),",
          "        ast::ClassSetItem::Literal(ast::Literal::default()),",
          "    ];",
          "    let ast = ClassBracketed {",
          "        span: Span::default(),",
          "        negated: false,",
          "        kind: ClassSet::Union(Box::new(ast::ClassSetUnion { items })),",
          "    };",
          "",
          "    let mut visitor = MockVisitor;",
          "    let mut heap_visitor = HeapVisitor::new();",
          "    let _ = heap_visitor.visit_class(&ast, &mut visitor);",
          "}"
        ],
        "oracle": [
          "    let ast = ClassBracketed { span: Span::default(), negated: false, kind: ClassSet::Union(Box::new(ast::ClassSetUnion { items })) };",
          "    let result = heap_visitor.visit_class_pre(&ast, &mut visitor);",
          "    assert_eq!(result, Err(()));",
          "    let result = heap_visitor.induct_class(&ClassInduct::from_bracketed(&ast));",
          "    assert_eq!(result, None);",
          "    let result = heap_visitor.visit_class_post(&ast, &mut visitor);",
          "    assert_eq!(result, Err(()));",
          "    let result = heap_visitor.pop_class(ClassFrame::Union { head: &items[0], tail: &items[1..] });",
          "    assert_eq!(result, None);",
          "    let result = heap_visitor.pop_class(ClassFrame::Binary { op: &ClassSetBinaryOp::default() });",
          "    assert_eq!(result, None);",
          "    let result = heap_visitor.pop_class(ClassFrame::BinaryLHS { op: &ClassSetBinaryOp::default(), lhs: &ClassSet::default(), rhs: &ClassSet::default() });",
          "    assert_eq!(result, Some(ClassFrame::BinaryRHS { op: &ClassSetBinaryOp::default(), rhs: &ClassSet::default() }));",
          "    let result = heap_visitor.pop_class(ClassFrame::BinaryRHS { op: &ClassSetBinaryOp::default(), rhs: &ClassSet::default() });",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    struct MockVisitor;",
          "",
          "    impl Visitor for MockVisitor {",
          "        type Output = ();",
          "        type Err = ();",
          "",
          "        fn visit_class_set_binary_op_in(&mut self, _op: &ClassSetBinaryOp) -> Result<(), Self::Err> {",
          "            Err(())",
          "        }",
          "    }",
          "",
          "    let items = vec![",
          "        ast::ClassSetItem::Literal(ast::Literal::default()),",
          "        ast::ClassSetItem::Literal(ast::Literal::default()),",
          "    ];",
          "    let ast = ClassBracketed {",
          "        span: Span::default(),",
          "        negated: false,",
          "        kind: ClassSet::Union(Box::new(ast::ClassSetUnion { items })),",
          "    };",
          "",
          "    let mut visitor = MockVisitor;",
          "    let mut heap_visitor = HeapVisitor::new();",
          "    let _ = heap_visitor.visit_class(&ast, &mut visitor);",
          "    let ast = ClassBracketed { span: Span::default(), negated: false, kind: ClassSet::Union(Box::new(ast::ClassSetUnion { items })) };",
          "    let result = heap_visitor.visit_class_pre(&ast, &mut visitor);",
          "    assert_eq!(result, Err(()));",
          "    let result = heap_visitor.induct_class(&ClassInduct::from_bracketed(&ast));",
          "    assert_eq!(result, None);",
          "    let result = heap_visitor.visit_class_post(&ast, &mut visitor);",
          "    assert_eq!(result, Err(()));",
          "    let result = heap_visitor.pop_class(ClassFrame::Union { head: &items[0], tail: &items[1..] });",
          "    assert_eq!(result, None);",
          "    let result = heap_visitor.pop_class(ClassFrame::Binary { op: &ClassSetBinaryOp::default() });",
          "    assert_eq!(result, None);",
          "    let result = heap_visitor.pop_class(ClassFrame::BinaryLHS { op: &ClassSetBinaryOp::default(), lhs: &ClassSet::default(), rhs: &ClassSet::default() });",
          "    assert_eq!(result, Some(ClassFrame::BinaryRHS { op: &ClassSetBinaryOp::default(), rhs: &ClassSet::default() }));",
          "    let result = heap_visitor.pop_class(ClassFrame::BinaryRHS { op: &ClassSetBinaryOp::default(), rhs: &ClassSet::default() });",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockVisitor;",
          "",
          "    impl Visitor for MockVisitor {",
          "        type Output = ();",
          "        type Err = ();",
          "",
          "        fn visit_class_set_binary_op_in(&mut self, _op: &ClassSetBinaryOp) -> Result<(), Self::Err> {",
          "            Err(())",
          "        }",
          "    }",
          "",
          "    let lhs = Box::new(ClassSet::Item(Box::new(ast::ClassSetItem::Bracketed(ast::ClassBracketed::default()))));",
          "    let rhs = Box::new(ClassSet::Item(Box::new(ast::ClassSetItem::Union(ast::ClassSetUnion::default()))));",
          "    let op = ClassSetBinaryOp {",
          "        span: Span::default(),",
          "        kind: ClassSetBinaryOpKind::Difference,",
          "        lhs,",
          "        rhs,",
          "    };",
          "",
          "    let ast = ClassBracketed {",
          "        span: Span::default(),",
          "        negated: true,",
          "        kind: ClassSet::BinaryOp(Box::new(op)),",
          "    };",
          "",
          "    let mut visitor = MockVisitor;",
          "    let mut heap_visitor = HeapVisitor::new();",
          "    let _ = heap_visitor.visit_class(&ast, &mut visitor);",
          "}"
        ],
        "oracle": [
          "    heap_visitor.visit_class_pre(&ast, &visitor).unwrap_err();",
          "    heap_visitor.induct_class(&ast).is_none();",
          "    heap_visitor.stack_class.is_empty();",
          "    visitor.visit_class_set_binary_op_in(&op).unwrap_err();",
          "    heap_visitor.visit_class_post(&ast, &visitor).unwrap_err();"
        ],
        "code": [
          "{",
          "    struct MockVisitor;",
          "",
          "    impl Visitor for MockVisitor {",
          "        type Output = ();",
          "        type Err = ();",
          "",
          "        fn visit_class_set_binary_op_in(&mut self, _op: &ClassSetBinaryOp) -> Result<(), Self::Err> {",
          "            Err(())",
          "        }",
          "    }",
          "",
          "    let lhs = Box::new(ClassSet::Item(Box::new(ast::ClassSetItem::Bracketed(ast::ClassBracketed::default()))));",
          "    let rhs = Box::new(ClassSet::Item(Box::new(ast::ClassSetItem::Union(ast::ClassSetUnion::default()))));",
          "    let op = ClassSetBinaryOp {",
          "        span: Span::default(),",
          "        kind: ClassSetBinaryOpKind::Difference,",
          "        lhs,",
          "        rhs,",
          "    };",
          "",
          "    let ast = ClassBracketed {",
          "        span: Span::default(),",
          "        negated: true,",
          "        kind: ClassSet::BinaryOp(Box::new(op)),",
          "    };",
          "",
          "    let mut visitor = MockVisitor;",
          "    let mut heap_visitor = HeapVisitor::new();",
          "    let _ = heap_visitor.visit_class(&ast, &mut visitor);",
          "    heap_visitor.visit_class_pre(&ast, &visitor).unwrap_err();",
          "    heap_visitor.induct_class(&ast).is_none();",
          "    heap_visitor.stack_class.is_empty();",
          "    visitor.visit_class_set_binary_op_in(&op).unwrap_err();",
          "    heap_visitor.visit_class_post(&ast, &visitor).unwrap_err();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]