[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = &[0x41]; // 'A'",
          "    let result = decode(bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Ok('A')));"
        ],
        "code": [
          "{",
          "    let bytes = &[0x41]; // 'A'",
          "    let result = decode(bytes);",
          "    assert_eq!(result, Some(Ok('A')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = &[0x00]; // Null character",
          "    let result = decode(bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Ok('\\0')));"
        ],
        "code": [
          "{",
          "    let bytes = &[0x00]; // Null character",
          "    let result = decode(bytes);",
          "    assert_eq!(result, Some(Ok('\\0')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = &[0xC2, 0xA9]; // ©",
          "    let result = decode(bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Ok('©')));"
        ],
        "code": [
          "{",
          "    let bytes = &[0xC2, 0xA9]; // ©",
          "    let result = decode(bytes);",
          "    assert_eq!(result, Some(Ok('©')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = &[0xE2, 0x82, 0xAC]; // €",
          "    let result = decode(bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Ok('€')));"
        ],
        "code": [
          "{",
          "    let bytes = &[0xE2, 0x82, 0xAC]; // €",
          "    let result = decode(bytes);",
          "    assert_eq!(result, Some(Ok('€')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = &[0xF0, 0x9F, 0x92, 0xA9]; // 💩",
          "    let result = decode(bytes);",
          "}"
        ],
        "oracle": [
          "    let bytes = &[0x61]; // a",
          "    let result = decode(bytes);",
          "    assert_eq!(result, Some(Ok('a')));",
          "    ",
          "    let bytes = &[0xC3, 0xA9]; // é",
          "    let result = decode(bytes);",
          "    assert_eq!(result, Some(Ok('é')));",
          "    ",
          "    let bytes = &[0xE2, 0x9C, 0x94]; // ✓",
          "    let result = decode(bytes);",
          "    assert_eq!(result, Some(Ok('✓')));",
          "    ",
          "    let bytes = &[0xF0, 0x9F, 0x98, 0x82]; // 😂",
          "    let result = decode(bytes);",
          "    assert_eq!(result, Some(Ok('😂')));",
          "    ",
          "    let bytes = &[0x61, 0x62, 0x63]; // abc",
          "    let result = decode(bytes);",
          "    assert_eq!(result, Some(Ok('a')));",
          "    ",
          "    let bytes = &[0xE2, 0x82, 0x82]; // ⁀",
          "    let result = decode(bytes);",
          "    assert_eq!(result, Some(Ok('⁀')));",
          "    ",
          "    let bytes = &[0xF4, 0x8F, 0xBF, 0xBF]; // invalid",
          "    let result = decode(bytes);",
          "    assert_eq!(result, Some(Err(0xF4)));",
          "    ",
          "    let bytes = &[0x80, 0x80]; // invalid",
          "    let result = decode(bytes);",
          "    assert_eq!(result, Some(Err(0x80)));",
          "    ",
          "    let bytes = &[0xFF]; // invalid",
          "    let result = decode(bytes);",
          "    assert_eq!(result, Some(Err(0xFF)));"
        ],
        "code": [
          "{",
          "    let bytes = &[0xF0, 0x9F, 0x92, 0xA9]; // 💩",
          "    let result = decode(bytes);",
          "    let bytes = &[0x61]; // a",
          "    let result = decode(bytes);",
          "    assert_eq!(result, Some(Ok('a')));",
          "    ",
          "    let bytes = &[0xC3, 0xA9]; // é",
          "    let result = decode(bytes);",
          "    assert_eq!(result, Some(Ok('é')));",
          "    ",
          "    let bytes = &[0xE2, 0x9C, 0x94]; // ✓",
          "    let result = decode(bytes);",
          "    assert_eq!(result, Some(Ok('✓')));",
          "    ",
          "    let bytes = &[0xF0, 0x9F, 0x98, 0x82]; // 😂",
          "    let result = decode(bytes);",
          "    assert_eq!(result, Some(Ok('😂')));",
          "    ",
          "    let bytes = &[0x61, 0x62, 0x63]; // abc",
          "    let result = decode(bytes);",
          "    assert_eq!(result, Some(Ok('a')));",
          "    ",
          "    let bytes = &[0xE2, 0x82, 0x82]; // ⁀",
          "    let result = decode(bytes);",
          "    assert_eq!(result, Some(Ok('⁀')));",
          "    ",
          "    let bytes = &[0xF4, 0x8F, 0xBF, 0xBF]; // invalid",
          "    let result = decode(bytes);",
          "    assert_eq!(result, Some(Err(0xF4)));",
          "    ",
          "    let bytes = &[0x80, 0x80]; // invalid",
          "    let result = decode(bytes);",
          "    assert_eq!(result, Some(Err(0x80)));",
          "    ",
          "    let bytes = &[0xFF]; // invalid",
          "    let result = decode(bytes);",
          "    assert_eq!(result, Some(Err(0xFF)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]