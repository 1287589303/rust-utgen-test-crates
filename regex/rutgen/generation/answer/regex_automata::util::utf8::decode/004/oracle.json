[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: &[u8] = &[0x41]; // ASCII 'A' (1-byte character)",
          "    let result = decode(bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Ok('A')));"
        ],
        "code": [
          "{",
          "    let bytes: &[u8] = &[0x41]; // ASCII 'A' (1-byte character)",
          "    let result = decode(bytes);",
          "    assert_eq!(result, Some(Ok('A')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: &[u8] = &[0xC2, 0xA0]; // UTF-8 for ' ' (Non-breaking space, 2-byte character)",
          "    let result = decode(bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Ok('\\u{00A0}'));"
        ],
        "code": [
          "{",
          "    let bytes: &[u8] = &[0xC2, 0xA0]; // UTF-8 for ' ' (Non-breaking space, 2-byte character)",
          "    let result = decode(bytes);",
          "    assert_eq!(result, Some(Ok('\\u{00A0}'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: &[u8] = &[0xE2, 0x82, 0xAC]; // UTF-8 for '€' (Euro sign, 3-byte character)",
          "    let result = decode(bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Ok('€')));"
        ],
        "code": [
          "{",
          "    let bytes: &[u8] = &[0xE2, 0x82, 0xAC]; // UTF-8 for '€' (Euro sign, 3-byte character)",
          "    let result = decode(bytes);",
          "    assert_eq!(result, Some(Ok('€')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: &[u8] = &[0xF0, 0x9F, 0x92, 0xA9]; // UTF-8 for '💩' (Pile of poo, 4-byte character)",
          "    let result = decode(bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Ok('💩')));"
        ],
        "code": [
          "{",
          "    let bytes: &[u8] = &[0xF0, 0x9F, 0x92, 0xA9]; // UTF-8 for '💩' (Pile of poo, 4-byte character)",
          "    let result = decode(bytes);",
          "    assert_eq!(result, Some(Ok('💩')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: &[u8] = &[0xF0, 0x9F, 0x93, 0xA8]; // UTF-8 for '📝' (Memo, 4-byte character)",
          "    let result = decode(bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Ok('📝')));",
          "    assert!(result.is_some());",
          "    assert!(result.unwrap().is_ok());",
          "    assert_eq!(result.unwrap().unwrap(), '📝');",
          "    assert!(result.is_some());",
          "    assert!(matches!(result, Some(Result::Ok(_))));"
        ],
        "code": [
          "{",
          "    let bytes: &[u8] = &[0xF0, 0x9F, 0x93, 0xA8]; // UTF-8 for '📝' (Memo, 4-byte character)",
          "    let result = decode(bytes);",
          "    assert_eq!(result, Some(Ok('📝')));",
          "    assert!(result.is_some());",
          "    assert!(result.unwrap().is_ok());",
          "    assert_eq!(result.unwrap().unwrap(), '📝');",
          "    assert!(result.is_some());",
          "    assert!(matches!(result, Some(Result::Ok(_))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]