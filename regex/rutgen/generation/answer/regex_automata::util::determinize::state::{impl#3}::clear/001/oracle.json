[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = StateBuilderEmpty(vec![1, 2, 3]);",
          "    builder.clear();",
          "}"
        ],
        "oracle": [
          "    assert!(builder.0.is_empty());",
          "    assert_eq!(builder.0.len(), 0);",
          "    assert_eq!(builder.capacity(), 3);",
          "    assert_eq!(builder.0, vec![]);"
        ],
        "code": [
          "{",
          "    let mut builder = StateBuilderEmpty(vec![1, 2, 3]);",
          "    builder.clear();",
          "    assert!(builder.0.is_empty());",
          "    assert_eq!(builder.0.len(), 0);",
          "    assert_eq!(builder.capacity(), 3);",
          "    assert_eq!(builder.0, vec![]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = StateBuilderEmpty(vec![0; 10]);",
          "    builder.clear();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.0.len(), 0);",
          "    assert!(builder.0.is_empty());",
          "    assert!(builder.0.capacity() >= 10);",
          "    builder.clear();",
          "    assert_eq!(builder.0.len(), 0);",
          "    assert!(builder.0.is_empty());"
        ],
        "code": [
          "{",
          "    let mut builder = StateBuilderEmpty(vec![0; 10]);",
          "    builder.clear();",
          "    assert_eq!(builder.0.len(), 0);",
          "    assert!(builder.0.is_empty());",
          "    assert!(builder.0.capacity() >= 10);",
          "    builder.clear();",
          "    assert_eq!(builder.0.len(), 0);",
          "    assert!(builder.0.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = StateBuilderEmpty(vec![42]);",
          "    builder.clear();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.0.len(), 0);",
          "    assert!(builder.0.is_empty());",
          "    assert_eq!(builder.capacity(), 1);",
          "    builder.clear();",
          "    assert_eq!(builder.capacity(), 1);"
        ],
        "code": [
          "{",
          "    let mut builder = StateBuilderEmpty(vec![42]);",
          "    builder.clear();",
          "    assert_eq!(builder.0.len(), 0);",
          "    assert!(builder.0.is_empty());",
          "    assert_eq!(builder.capacity(), 1);",
          "    builder.clear();",
          "    assert_eq!(builder.capacity(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]