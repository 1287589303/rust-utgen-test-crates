[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo(Arc::new(RegexInfoI)),",
          "        pre: None,",
          "        nfa: NFA,",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM,",
          "        backtrack: wrappers::BoundedBacktracker,",
          "        onepass: wrappers::OnePass,",
          "        hybrid: wrappers::Hybrid,",
          "        dfa: wrappers::DFA,",
          "    };",
          "    core.is_accelerated();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(core.is_accelerated(), false);"
        ],
        "code": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo(Arc::new(RegexInfoI)),",
          "        pre: None,",
          "        nfa: NFA,",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM,",
          "        backtrack: wrappers::BoundedBacktracker,",
          "        onepass: wrappers::OnePass,",
          "        hybrid: wrappers::Hybrid,",
          "        dfa: wrappers::DFA,",
          "    };",
          "    core.is_accelerated();",
          "    assert_eq!(core.is_accelerated(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let prefilter = Prefilter {",
          "        pre: Arc::new(MyPrefilterI {}),",
          "        is_fast: true,",
          "        max_needle_len: 256,",
          "    };",
          "    let core = Core {",
          "        info: RegexInfo(Arc::new(RegexInfoI)),",
          "        pre: Some(prefilter),",
          "        nfa: NFA,",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM,",
          "        backtrack: wrappers::BoundedBacktracker,",
          "        onepass: wrappers::OnePass,",
          "        hybrid: wrappers::Hybrid,",
          "        dfa: wrappers::DFA,",
          "    };",
          "    core.is_accelerated();",
          "}"
        ],
        "oracle": [
          "    assert!(core.is_accelerated() == true);",
          "    let prefilter = Prefilter {",
          "    pre: Arc::new(MyPrefilterI {}),",
          "    is_fast: false,",
          "    max_needle_len: 256,",
          "    };",
          "    let core = Core {",
          "    info: RegexInfo(Arc::new(RegexInfoI)),",
          "    pre: Some(prefilter),",
          "    nfa: NFA,",
          "    nfarev: None,",
          "    pikevm: wrappers::PikeVM,",
          "    backtrack: wrappers::BoundedBacktracker,",
          "    onepass: wrappers::OnePass,",
          "    hybrid: wrappers::Hybrid,",
          "    dfa: wrappers::DFA,",
          "    };",
          "    assert!(core.is_accelerated() == false);",
          "    let core_without_prefilter = Core {",
          "    info: RegexInfo(Arc::new(RegexInfoI)),",
          "    pre: None,",
          "    nfa: NFA,",
          "    nfarev: None,",
          "    pikevm: wrappers::PikeVM,",
          "    backtrack: wrappers::BoundedBacktracker,",
          "    onepass: wrappers::OnePass,",
          "    hybrid: wrappers::Hybrid,",
          "    dfa: wrappers::DFA,",
          "    };",
          "    assert!(core_without_prefilter.is_accelerated() == false);"
        ],
        "code": [
          "{",
          "    let prefilter = Prefilter {",
          "        pre: Arc::new(MyPrefilterI {}),",
          "        is_fast: true,",
          "        max_needle_len: 256,",
          "    };",
          "    let core = Core {",
          "        info: RegexInfo(Arc::new(RegexInfoI)),",
          "        pre: Some(prefilter),",
          "        nfa: NFA,",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM,",
          "        backtrack: wrappers::BoundedBacktracker,",
          "        onepass: wrappers::OnePass,",
          "        hybrid: wrappers::Hybrid,",
          "        dfa: wrappers::DFA,",
          "    };",
          "    core.is_accelerated();",
          "    assert!(core.is_accelerated() == true);",
          "    let prefilter = Prefilter {",
          "    pre: Arc::new(MyPrefilterI {}),",
          "    is_fast: false,",
          "    max_needle_len: 256,",
          "    };",
          "    let core = Core {",
          "    info: RegexInfo(Arc::new(RegexInfoI)),",
          "    pre: Some(prefilter),",
          "    nfa: NFA,",
          "    nfarev: None,",
          "    pikevm: wrappers::PikeVM,",
          "    backtrack: wrappers::BoundedBacktracker,",
          "    onepass: wrappers::OnePass,",
          "    hybrid: wrappers::Hybrid,",
          "    dfa: wrappers::DFA,",
          "    };",
          "    assert!(core.is_accelerated() == false);",
          "    let core_without_prefilter = Core {",
          "    info: RegexInfo(Arc::new(RegexInfoI)),",
          "    pre: None,",
          "    nfa: NFA,",
          "    nfarev: None,",
          "    pikevm: wrappers::PikeVM,",
          "    backtrack: wrappers::BoundedBacktracker,",
          "    onepass: wrappers::OnePass,",
          "    hybrid: wrappers::Hybrid,",
          "    dfa: wrappers::DFA,",
          "    };",
          "    assert!(core_without_prefilter.is_accelerated() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let prefilter = Prefilter {",
          "        pre: Arc::new(MyPrefilterI {}),",
          "        is_fast: false,",
          "        max_needle_len: 256,",
          "    };",
          "    let core = Core {",
          "        info: RegexInfo(Arc::new(RegexInfoI)),",
          "        pre: Some(prefilter),",
          "        nfa: NFA,",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM,",
          "        backtrack: wrappers::BoundedBacktracker,",
          "        onepass: wrappers::OnePass,",
          "        hybrid: wrappers::Hybrid,",
          "        dfa: wrappers::DFA,",
          "    };",
          "    core.is_accelerated();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(core.is_accelerated(), false);",
          "    let prefilter_fast = Prefilter { pre: Arc::new(MyPrefilterI {}), is_fast: true, max_needle_len: 256 };",
          "    let core_with_fast_prefilter = Core { info: RegexInfo(Arc::new(RegexInfoI)), pre: Some(prefilter_fast), nfa: NFA, nfarev: None, pikevm: wrappers::PikeVM, backtrack: wrappers::BoundedBacktracker, onepass: wrappers::OnePass, hybrid: wrappers::Hybrid, dfa: wrappers::DFA };",
          "    assert_eq!(core_with_fast_prefilter.is_accelerated(), true);",
          "    let core_no_prefilter = Core { info: RegexInfo(Arc::new(RegexInfoI)), pre: None, nfa: NFA, nfarev: None, pikevm: wrappers::PikeVM, backtrack: wrappers::BoundedBacktracker, onepass: wrappers::OnePass, hybrid: wrappers::Hybrid, dfa: wrappers::DFA };",
          "    assert_eq!(core_no_prefilter.is_accelerated(), false);"
        ],
        "code": [
          "{",
          "    let prefilter = Prefilter {",
          "        pre: Arc::new(MyPrefilterI {}),",
          "        is_fast: false,",
          "        max_needle_len: 256,",
          "    };",
          "    let core = Core {",
          "        info: RegexInfo(Arc::new(RegexInfoI)),",
          "        pre: Some(prefilter),",
          "        nfa: NFA,",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM,",
          "        backtrack: wrappers::BoundedBacktracker,",
          "        onepass: wrappers::OnePass,",
          "        hybrid: wrappers::Hybrid,",
          "        dfa: wrappers::DFA,",
          "    };",
          "    core.is_accelerated();",
          "    assert_eq!(core.is_accelerated(), false);",
          "    let prefilter_fast = Prefilter { pre: Arc::new(MyPrefilterI {}), is_fast: true, max_needle_len: 256 };",
          "    let core_with_fast_prefilter = Core { info: RegexInfo(Arc::new(RegexInfoI)), pre: Some(prefilter_fast), nfa: NFA, nfarev: None, pikevm: wrappers::PikeVM, backtrack: wrappers::BoundedBacktracker, onepass: wrappers::OnePass, hybrid: wrappers::Hybrid, dfa: wrappers::DFA };",
          "    assert_eq!(core_with_fast_prefilter.is_accelerated(), true);",
          "    let core_no_prefilter = Core { info: RegexInfo(Arc::new(RegexInfoI)), pre: None, nfa: NFA, nfarev: None, pikevm: wrappers::PikeVM, backtrack: wrappers::BoundedBacktracker, onepass: wrappers::OnePass, hybrid: wrappers::Hybrid, dfa: wrappers::DFA };",
          "    assert_eq!(core_no_prefilter.is_accelerated(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]