[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Clone)]",
          "    struct TestLookMatcher {",
          "        lineterm: u8,",
          "    }",
          "",
          "    impl LookMatcher {",
          "        fn get_line_terminator(&self) -> u8 {",
          "            self.lineterm",
          "        }",
          "    }",
          "",
          "    let lookm = TestLookMatcher { lineterm: b'\\n' };",
          "",
          "    let kind = StartKind::Both;",
          "    let pattern_len = Some(PatternID::LIMIT);",
          "",
          "    let result = StartTable::<Vec<u32>>::dead(kind, &lookm, pattern_len);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind(), &BuildErrorKind::TooManyStartStates);"
        ],
        "code": [
          "{",
          "    #[derive(Clone)]",
          "    struct TestLookMatcher {",
          "        lineterm: u8,",
          "    }",
          "",
          "    impl LookMatcher {",
          "        fn get_line_terminator(&self) -> u8 {",
          "            self.lineterm",
          "        }",
          "    }",
          "",
          "    let lookm = TestLookMatcher { lineterm: b'\\n' };",
          "",
          "    let kind = StartKind::Both;",
          "    let pattern_len = Some(PatternID::LIMIT);",
          "",
          "    let result = StartTable::<Vec<u32>>::dead(kind, &lookm, pattern_len);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind(), &BuildErrorKind::TooManyStartStates);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]