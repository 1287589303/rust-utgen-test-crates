[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start = Start::NonWordByte;",
          "    let _result = start.as_usize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start.as_usize(), 0);",
          "    let start = Start::WordByte;",
          "    assert_eq!(start.as_usize(), 1);",
          "    let start = Start::Text;",
          "    assert_eq!(start.as_usize(), 2);",
          "    let start = Start::LineLF;",
          "    assert_eq!(start.as_usize(), 3);",
          "    let start = Start::LineCR;",
          "    assert_eq!(start.as_usize(), 4);",
          "    let start = Start::CustomLineTerminator;",
          "    assert_eq!(start.as_usize(), 5);"
        ],
        "code": [
          "{",
          "    let start = Start::NonWordByte;",
          "    let _result = start.as_usize();",
          "    assert_eq!(start.as_usize(), 0);",
          "    let start = Start::WordByte;",
          "    assert_eq!(start.as_usize(), 1);",
          "    let start = Start::Text;",
          "    assert_eq!(start.as_usize(), 2);",
          "    let start = Start::LineLF;",
          "    assert_eq!(start.as_usize(), 3);",
          "    let start = Start::LineCR;",
          "    assert_eq!(start.as_usize(), 4);",
          "    let start = Start::CustomLineTerminator;",
          "    assert_eq!(start.as_usize(), 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start = Start::WordByte;",
          "    let _result = start.as_usize();",
          "}"
        ],
        "oracle": [
          "    let start = Start::NonWordByte; assert_eq!(start.as_usize(), 0);",
          "    let start = Start::WordByte; assert_eq!(start.as_usize(), 1);",
          "    let start = Start::Text; assert_eq!(start.as_usize(), 2);",
          "    let start = Start::LineLF; assert_eq!(start.as_usize(), 3);",
          "    let start = Start::LineCR; assert_eq!(start.as_usize(), 4);",
          "    let start = Start::CustomLineTerminator; assert_eq!(start.as_usize(), 5);"
        ],
        "code": [
          "{",
          "    let start = Start::WordByte;",
          "    let _result = start.as_usize();",
          "    let start = Start::NonWordByte; assert_eq!(start.as_usize(), 0);",
          "    let start = Start::WordByte; assert_eq!(start.as_usize(), 1);",
          "    let start = Start::Text; assert_eq!(start.as_usize(), 2);",
          "    let start = Start::LineLF; assert_eq!(start.as_usize(), 3);",
          "    let start = Start::LineCR; assert_eq!(start.as_usize(), 4);",
          "    let start = Start::CustomLineTerminator; assert_eq!(start.as_usize(), 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start = Start::Text;",
          "    let _result = start.as_usize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start.as_usize(), 2);"
        ],
        "code": [
          "{",
          "    let start = Start::Text;",
          "    let _result = start.as_usize();",
          "    assert_eq!(start.as_usize(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start = Start::LineLF;",
          "    let _result = start.as_usize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start.as_usize(), 3);"
        ],
        "code": [
          "{",
          "    let start = Start::LineLF;",
          "    let _result = start.as_usize();",
          "    assert_eq!(start.as_usize(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start = Start::LineCR;",
          "    let _result = start.as_usize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start.as_usize(), 4);"
        ],
        "code": [
          "{",
          "    let start = Start::LineCR;",
          "    let _result = start.as_usize();",
          "    assert_eq!(start.as_usize(), 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start = Start::CustomLineTerminator;",
          "    let _result = start.as_usize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start.as_usize(), 5);"
        ],
        "code": [
          "{",
          "    let start = Start::CustomLineTerminator;",
          "    let _result = start.as_usize();",
          "    assert_eq!(start.as_usize(), 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]