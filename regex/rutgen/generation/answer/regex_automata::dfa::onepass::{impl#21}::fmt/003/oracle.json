[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = BuildErrorKind::UnsupportedLook { look: Look::WordAscii };",
          "    let error = BuildError { kind };",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"one-pass DFA does not support the {:?} assertion\", Look::WordAscii)"
        ],
        "code": [
          "{",
          "    let kind = BuildErrorKind::UnsupportedLook { look: Look::WordAscii };",
          "    let error = BuildError { kind };",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "    write!(f, \"one-pass DFA does not support the {:?} assertion\", Look::WordAscii)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = BuildErrorKind::UnsupportedLook { look: Look::WordAsciiNegate };",
          "    let error = BuildError { kind };",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"one-pass DFA does not support the {:?} assertion\", Look::WordAsciiNegate)"
        ],
        "code": [
          "{",
          "    let kind = BuildErrorKind::UnsupportedLook { look: Look::WordAsciiNegate };",
          "    let error = BuildError { kind };",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "    write!(f, \"one-pass DFA does not support the {:?} assertion\", Look::WordAsciiNegate)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = BuildErrorKind::UnsupportedLook { look: Look::WordUnicode };",
          "    let error = BuildError { kind };",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"one-pass DFA does not support the {:?} assertion\", Look::WordUnicode)"
        ],
        "code": [
          "{",
          "    let kind = BuildErrorKind::UnsupportedLook { look: Look::WordUnicode };",
          "    let error = BuildError { kind };",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "    write!(f, \"one-pass DFA does not support the {:?} assertion\", Look::WordUnicode)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = BuildErrorKind::UnsupportedLook { look: Look::WordUnicodeNegate };",
          "    let error = BuildError { kind };",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"one-pass DFA does not support the {:?} assertion\", Look::WordUnicodeNegate)"
        ],
        "code": [
          "{",
          "    let kind = BuildErrorKind::UnsupportedLook { look: Look::WordUnicodeNegate };",
          "    let error = BuildError { kind };",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "    write!(f, \"one-pass DFA does not support the {:?} assertion\", Look::WordUnicodeNegate)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = BuildErrorKind::UnsupportedLook { look: Look::WordStartAscii };",
          "    let error = BuildError { kind };",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    let kind = BuildErrorKind::UnsupportedLook { look: Look::WordStartAscii };",
          "    let error = BuildError { kind };",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"one-pass DFA does not support the WordStartAscii assertion\");"
        ],
        "code": [
          "{",
          "    let kind = BuildErrorKind::UnsupportedLook { look: Look::WordStartAscii };",
          "    let error = BuildError { kind };",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "    let kind = BuildErrorKind::UnsupportedLook { look: Look::WordStartAscii };",
          "    let error = BuildError { kind };",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"one-pass DFA does not support the WordStartAscii assertion\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = BuildErrorKind::UnsupportedLook { look: Look::WordEndAscii };",
          "    let error = BuildError { kind };",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"one-pass DFA does not support the {:?} assertion\", Look::WordEndAscii)"
        ],
        "code": [
          "{",
          "    let kind = BuildErrorKind::UnsupportedLook { look: Look::WordEndAscii };",
          "    let error = BuildError { kind };",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "    write!(f, \"one-pass DFA does not support the {:?} assertion\", Look::WordEndAscii)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = BuildErrorKind::UnsupportedLook { look: Look::WordStartUnicode };",
          "    let error = BuildError { kind };",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    let kind = BuildErrorKind::UnsupportedLook { look: Look::WordStartUnicode };",
          "    let error = BuildError { kind };",
          "    assert_eq!(formatter.buf, \"one-pass DFA does not support the WordStartUnicode assertion\");"
        ],
        "code": [
          "{",
          "    let kind = BuildErrorKind::UnsupportedLook { look: Look::WordStartUnicode };",
          "    let error = BuildError { kind };",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "    let kind = BuildErrorKind::UnsupportedLook { look: Look::WordStartUnicode };",
          "    let error = BuildError { kind };",
          "    assert_eq!(formatter.buf, \"one-pass DFA does not support the WordStartUnicode assertion\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = BuildErrorKind::UnsupportedLook { look: Look::WordEndUnicode };",
          "    let error = BuildError { kind };",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.output(), \"one-pass DFA does not support the WordEndUnicode assertion\");"
        ],
        "code": [
          "{",
          "    let kind = BuildErrorKind::UnsupportedLook { look: Look::WordEndUnicode };",
          "    let error = BuildError { kind };",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"one-pass DFA does not support the WordEndUnicode assertion\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]