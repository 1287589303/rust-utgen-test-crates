[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let build_error = BuildError {",
          "        kind: BuildErrorKind::ExceededSizeLimit { limit: usize::MAX },",
          "    };",
          "    let mut buffer = Vec::new();",
          "    let _ = build_error.fmt(&mut core::fmt::Formatter::new(&mut buffer));",
          "}"
        ],
        "oracle": [
          "    write!(f, \"one-pass DFA exceeded size limit of {:?} during building\", usize::MAX)"
        ],
        "code": [
          "{",
          "    let build_error = BuildError {",
          "        kind: BuildErrorKind::ExceededSizeLimit { limit: usize::MAX },",
          "    };",
          "    let mut buffer = Vec::new();",
          "    let _ = build_error.fmt(&mut core::fmt::Formatter::new(&mut buffer));",
          "    write!(f, \"one-pass DFA exceeded size limit of {:?} during building\", usize::MAX)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let build_error = BuildError {",
          "        kind: BuildErrorKind::ExceededSizeLimit { limit: 0 },",
          "    };",
          "    let mut buffer = Vec::new();",
          "    let _ = build_error.fmt(&mut core::fmt::Formatter::new(&mut buffer));",
          "}"
        ],
        "oracle": [
          "    write!(f, \"one-pass DFA exceeded size limit of {:?} during building\", 0)"
        ],
        "code": [
          "{",
          "    let build_error = BuildError {",
          "        kind: BuildErrorKind::ExceededSizeLimit { limit: 0 },",
          "    };",
          "    let mut buffer = Vec::new();",
          "    let _ = build_error.fmt(&mut core::fmt::Formatter::new(&mut buffer));",
          "    write!(f, \"one-pass DFA exceeded size limit of {:?} during building\", 0)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let build_error = BuildError {",
          "        kind: BuildErrorKind::ExceededSizeLimit { limit: 1024 },",
          "    };",
          "    let mut buffer = Vec::new();",
          "    let _ = build_error.fmt(&mut core::fmt::Formatter::new(&mut buffer));",
          "}"
        ],
        "oracle": [
          "    write!(f, \"one-pass DFA exceeded size limit of {:?} during building\", 1024) == Ok(())"
        ],
        "code": [
          "{",
          "    let build_error = BuildError {",
          "        kind: BuildErrorKind::ExceededSizeLimit { limit: 1024 },",
          "    };",
          "    let mut buffer = Vec::new();",
          "    let _ = build_error.fmt(&mut core::fmt::Formatter::new(&mut buffer));",
          "    write!(f, \"one-pass DFA exceeded size limit of {:?} during building\", 1024) == Ok(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]