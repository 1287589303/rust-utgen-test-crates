[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let epsilons = Epsilons(0);",
          "    let slots = Slots(0);",
          "    let result = epsilons.set_slots(slots);",
          "}"
        ],
        "oracle": [
          "    let epsilons = Epsilons(0);",
          "    let slots = Slots(0);",
          "    let expected = Epsilons((u64::from(slots.0) << Epsilons::SLOT_SHIFT) | (epsilons.0 & Epsilons::LOOK_MASK));",
          "    assert_eq!(result, expected);",
          "    ",
          "    let epsilons = Epsilons(1);",
          "    let slots = Slots(2);",
          "    let expected = Epsilons((u64::from(slots.0) << Epsilons::SLOT_SHIFT) | (epsilons.0 & Epsilons::LOOK_MASK));",
          "    assert_eq!(result, expected);",
          "    ",
          "    let epsilons = Epsilons(0xFFFFFFFFFFFFFFFF);",
          "    let slots = Slots(10);",
          "    let expected = Epsilons((u64::from(slots.0) << Epsilons::SLOT_SHIFT) | (epsilons.0 & Epsilons::LOOK_MASK));",
          "    assert_eq!(result, expected);",
          "    ",
          "    let epsilons = Epsilons(0);",
          "    let slots = Slots(15);",
          "    let expected = Epsilons((u64::from(slots.0) << Epsilons::SLOT_SHIFT) | (epsilons.0 & Epsilons::LOOK_MASK));",
          "    assert_eq!(result, expected);",
          "    ",
          "    let epsilons = Epsilons(0x000003FF_FFFFFF00);",
          "    let slots = Slots(5);",
          "    let expected = Epsilons((u64::from(slots.0) << Epsilons::SLOT_SHIFT) | (epsilons.0 & Epsilons::LOOK_MASK));",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let epsilons = Epsilons(0);",
          "    let slots = Slots(0);",
          "    let result = epsilons.set_slots(slots);",
          "    let epsilons = Epsilons(0);",
          "    let slots = Slots(0);",
          "    let expected = Epsilons((u64::from(slots.0) << Epsilons::SLOT_SHIFT) | (epsilons.0 & Epsilons::LOOK_MASK));",
          "    assert_eq!(result, expected);",
          "    ",
          "    let epsilons = Epsilons(1);",
          "    let slots = Slots(2);",
          "    let expected = Epsilons((u64::from(slots.0) << Epsilons::SLOT_SHIFT) | (epsilons.0 & Epsilons::LOOK_MASK));",
          "    assert_eq!(result, expected);",
          "    ",
          "    let epsilons = Epsilons(0xFFFFFFFFFFFFFFFF);",
          "    let slots = Slots(10);",
          "    let expected = Epsilons((u64::from(slots.0) << Epsilons::SLOT_SHIFT) | (epsilons.0 & Epsilons::LOOK_MASK));",
          "    assert_eq!(result, expected);",
          "    ",
          "    let epsilons = Epsilons(0);",
          "    let slots = Slots(15);",
          "    let expected = Epsilons((u64::from(slots.0) << Epsilons::SLOT_SHIFT) | (epsilons.0 & Epsilons::LOOK_MASK));",
          "    assert_eq!(result, expected);",
          "    ",
          "    let epsilons = Epsilons(0x000003FF_FFFFFF00);",
          "    let slots = Slots(5);",
          "    let expected = Epsilons((u64::from(slots.0) << Epsilons::SLOT_SHIFT) | (epsilons.0 & Epsilons::LOOK_MASK));",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let epsilons = Epsilons(0);",
          "    let slots = Slots(1023);",
          "    let result = epsilons.set_slots(slots);",
          "}"
        ],
        "oracle": [
          "    let expected_result = Epsilons((u64::from(1023) << Epsilons::SLOT_SHIFT) | (0 & Epsilons::LOOK_MASK));",
          "    assert_eq!(result, expected_result);",
          "    let slots = Slots(0);",
          "    let result_with_zero_slots = epsilons.set_slots(slots);",
          "    let expected_result_with_zero_slots = Epsilons((u64::from(0) << Epsilons::SLOT_SHIFT) | (0 & Epsilons::LOOK_MASK));",
          "    assert_eq!(result_with_zero_slots, expected_result_with_zero_slots);",
          "    let slots = Slots(2047);",
          "    let result_overflow_slots = epsilons.set_slots(slots);",
          "    let expected_result_overflow_slots = Epsilons((u64::from(2047) << Epsilons::SLOT_SHIFT) | (0 & Epsilons::LOOK_MASK));",
          "    assert_eq!(result_overflow_slots, expected_result_overflow_slots);"
        ],
        "code": [
          "{",
          "    let epsilons = Epsilons(0);",
          "    let slots = Slots(1023);",
          "    let result = epsilons.set_slots(slots);",
          "    let expected_result = Epsilons((u64::from(1023) << Epsilons::SLOT_SHIFT) | (0 & Epsilons::LOOK_MASK));",
          "    assert_eq!(result, expected_result);",
          "    let slots = Slots(0);",
          "    let result_with_zero_slots = epsilons.set_slots(slots);",
          "    let expected_result_with_zero_slots = Epsilons((u64::from(0) << Epsilons::SLOT_SHIFT) | (0 & Epsilons::LOOK_MASK));",
          "    assert_eq!(result_with_zero_slots, expected_result_with_zero_slots);",
          "    let slots = Slots(2047);",
          "    let result_overflow_slots = epsilons.set_slots(slots);",
          "    let expected_result_overflow_slots = Epsilons((u64::from(2047) << Epsilons::SLOT_SHIFT) | (0 & Epsilons::LOOK_MASK));",
          "    assert_eq!(result_overflow_slots, expected_result_overflow_slots);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let epsilons = Epsilons(0xFFFF_FFFF_FFFF_FFFF);",
          "    let slots = Slots(512);",
          "    let result = epsilons.set_slots(slots);",
          "}"
        ],
        "oracle": [
          "    let epsilons = Epsilons(0xFFFF_FFFF_FFFF_FFFF);",
          "    let slots = Slots(512);",
          "    let expected = Epsilons((u64::from(slots.0) << Epsilons::SLOT_SHIFT) | (epsilons.0 & Epsilons::LOOK_MASK));",
          "    assert_eq!(result, expected);",
          "    let epsilons = Epsilons(0x0000_0000_0000_0000);",
          "    let slots = Slots(0);",
          "    let expected = Epsilons((u64::from(slots.0) << Epsilons::SLOT_SHIFT) | (epsilons.0 & Epsilons::LOOK_MASK));",
          "    assert_eq!(result, expected);",
          "    let epsilons = Epsilons(0xAAAAAAAA_AAAAAAAA);",
          "    let slots = Slots(1023);",
          "    let expected = Epsilons((u64::from(slots.0) << Epsilons::SLOT_SHIFT) | (epsilons.0 & Epsilons::LOOK_MASK));",
          "    assert_eq!(result, expected);",
          "    let epsilons = Epsilons(0xFFFFFFFFFFFFFFFF);",
          "    let slots = Slots(1);",
          "    let expected = Epsilons((u64::from(slots.0) << Epsilons::SLOT_SHIFT) | (epsilons.0 & Epsilons::LOOK_MASK));",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let epsilons = Epsilons(0xFFFF_FFFF_FFFF_FFFF);",
          "    let slots = Slots(512);",
          "    let result = epsilons.set_slots(slots);",
          "    let epsilons = Epsilons(0xFFFF_FFFF_FFFF_FFFF);",
          "    let slots = Slots(512);",
          "    let expected = Epsilons((u64::from(slots.0) << Epsilons::SLOT_SHIFT) | (epsilons.0 & Epsilons::LOOK_MASK));",
          "    assert_eq!(result, expected);",
          "    let epsilons = Epsilons(0x0000_0000_0000_0000);",
          "    let slots = Slots(0);",
          "    let expected = Epsilons((u64::from(slots.0) << Epsilons::SLOT_SHIFT) | (epsilons.0 & Epsilons::LOOK_MASK));",
          "    assert_eq!(result, expected);",
          "    let epsilons = Epsilons(0xAAAAAAAA_AAAAAAAA);",
          "    let slots = Slots(1023);",
          "    let expected = Epsilons((u64::from(slots.0) << Epsilons::SLOT_SHIFT) | (epsilons.0 & Epsilons::LOOK_MASK));",
          "    assert_eq!(result, expected);",
          "    let epsilons = Epsilons(0xFFFFFFFFFFFFFFFF);",
          "    let slots = Slots(1);",
          "    let expected = Epsilons((u64::from(slots.0) << Epsilons::SLOT_SHIFT) | (epsilons.0 & Epsilons::LOOK_MASK));",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let epsilons = Epsilons(123456789);",
          "    let slots = Slots(256);",
          "    let result = epsilons.set_slots(slots);",
          "}"
        ],
        "oracle": [
          "    let expected_value = Epsilons((u64::from(slots.0) << Epsilons::SLOT_SHIFT) | (epsilons.0 & Epsilons::LOOK_MASK));",
          "    assert_eq!(result, expected_value);",
          "    assert_eq!(result.0, expected_value.0);",
          "    assert!(result.is_empty() == false);",
          "    assert!(result.slots().0 == (256 << Epsilons::SLOT_SHIFT));",
          "    assert!(result.0 & Epsilons::LOOK_MASK == epsilons.0 & Epsilons::LOOK_MASK);"
        ],
        "code": [
          "{",
          "    let epsilons = Epsilons(123456789);",
          "    let slots = Slots(256);",
          "    let result = epsilons.set_slots(slots);",
          "    let expected_value = Epsilons((u64::from(slots.0) << Epsilons::SLOT_SHIFT) | (epsilons.0 & Epsilons::LOOK_MASK));",
          "    assert_eq!(result, expected_value);",
          "    assert_eq!(result.0, expected_value.0);",
          "    assert!(result.is_empty() == false);",
          "    assert!(result.slots().0 == (256 << Epsilons::SLOT_SHIFT));",
          "    assert!(result.0 & Epsilons::LOOK_MASK == epsilons.0 & Epsilons::LOOK_MASK);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let epsilons = Epsilons(987654321);",
          "    let slots = Slots(768);",
          "    let result = epsilons.set_slots(slots);",
          "}"
        ],
        "oracle": [
          "    let epsilons = Epsilons(987654321);",
          "    let slots = Slots(768);",
          "    let expected = Epsilons((u64::from(slots.0) << Epsilons::SLOT_SHIFT) | (epsilons.0 & Epsilons::LOOK_MASK));",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let epsilons = Epsilons(987654321);",
          "    let slots = Slots(768);",
          "    let result = epsilons.set_slots(slots);",
          "    let epsilons = Epsilons(987654321);",
          "    let slots = Slots(768);",
          "    let expected = Epsilons((u64::from(slots.0) << Epsilons::SLOT_SHIFT) | (epsilons.0 & Epsilons::LOOK_MASK));",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]