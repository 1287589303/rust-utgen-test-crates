[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = LazyStateID(42);",
          "    let mut state_saver = StateSaver::Saved(state_id);",
          "    let result = state_saver.take_saved();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(LazyStateID(42)));"
        ],
        "code": [
          "{",
          "    let state_id = LazyStateID(42);",
          "    let mut state_saver = StateSaver::Saved(state_id);",
          "    let result = state_saver.take_saved();",
          "    assert_eq!(result, Some(LazyStateID(42)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = LazyStateID(7);",
          "    let state = State { /* initialize as needed */ };",
          "    let mut state_saver = StateSaver::ToSave { id: state_id, state };",
          "    let result = state_saver.take_saved();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(state_id));",
          "    assert!(matches!(state_saver, StateSaver::None));",
          "    assert!(state_saver.take_saved().is_none());",
          "    assert_eq!(state_saver.take_to_save(), Some((state_id, state)));",
          "    assert!(state_saver.take_saved().is_none());",
          "    assert_eq!(state_saver.take_saved().unwrap(), state_id);"
        ],
        "code": [
          "{",
          "    let state_id = LazyStateID(7);",
          "    let state = State { /* initialize as needed */ };",
          "    let mut state_saver = StateSaver::ToSave { id: state_id, state };",
          "    let result = state_saver.take_saved();",
          "    assert_eq!(result, Some(state_id));",
          "    assert!(matches!(state_saver, StateSaver::None));",
          "    assert!(state_saver.take_saved().is_none());",
          "    assert_eq!(state_saver.take_to_save(), Some((state_id, state)));",
          "    assert!(state_saver.take_saved().is_none());",
          "    assert_eq!(state_saver.take_saved().unwrap(), state_id);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]