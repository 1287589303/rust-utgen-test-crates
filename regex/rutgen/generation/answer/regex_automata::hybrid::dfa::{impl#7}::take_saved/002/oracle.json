[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let id = LazyStateID(1234);",
          "    let mut saver = StateSaver::ToSave { id, state: State::default() };",
          "    let result = saver.take_saved();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(LazyStateID(1234)));",
          "    assert!(result.is_some());",
          "    assert!(matches!(saver, StateSaver::None));",
          "    assert_eq!(saver.take_saved(), None);"
        ],
        "code": [
          "{",
          "    let id = LazyStateID(1234);",
          "    let mut saver = StateSaver::ToSave { id, state: State::default() };",
          "    let result = saver.take_saved();",
          "    assert_eq!(result, Some(LazyStateID(1234)));",
          "    assert!(result.is_some());",
          "    assert!(matches!(saver, StateSaver::None));",
          "    assert_eq!(saver.take_saved(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let id = LazyStateID(5678);",
          "    let mut saver = StateSaver::Saved(id);",
          "    let result = saver.take_saved();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(LazyStateID(5678)));",
          "    assert!(matches!(saver, StateSaver::None));",
          "    assert_eq!(core::mem::replace(&mut saver, StateSaver::None), StateSaver::Saved(LazyStateID(5678)));",
          "    assert!(saver.take_saved().is_none());",
          "    assert_eq!(saver.take_saved(), None);",
          "    assert!(saver.take_saved() == None);"
        ],
        "code": [
          "{",
          "    let id = LazyStateID(5678);",
          "    let mut saver = StateSaver::Saved(id);",
          "    let result = saver.take_saved();",
          "    assert_eq!(result, Some(LazyStateID(5678)));",
          "    assert!(matches!(saver, StateSaver::None));",
          "    assert_eq!(core::mem::replace(&mut saver, StateSaver::None), StateSaver::Saved(LazyStateID(5678)));",
          "    assert!(saver.take_saved().is_none());",
          "    assert_eq!(saver.take_saved(), None);",
          "    assert!(saver.take_saved() == None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut saver = StateSaver::None;",
          "    let result = saver.take_saved();",
          "}"
        ],
        "oracle": [
          "    let mut saver = StateSaver::ToSave { id: LazyStateID(42), state: State::default() };",
          "    let result = saver.take_saved();",
          "    assert_eq!(result, Some(LazyStateID(42)));",
          "    assert!(matches!(saver, StateSaver::None));"
        ],
        "code": [
          "{",
          "    let mut saver = StateSaver::None;",
          "    let result = saver.take_saved();",
          "    let mut saver = StateSaver::ToSave { id: LazyStateID(42), state: State::default() };",
          "    let result = saver.take_saved();",
          "    assert_eq!(result, Some(LazyStateID(42)));",
          "    assert!(matches!(saver, StateSaver::None));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]