[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet { bits: 0b00000100 }; // contains Look::StartLF",
          "    let _ = look_set.contains_anchor_lf();",
          "}"
        ],
        "oracle": [
          "    let look_set = LookSet { bits: 0b00000100 }; // contains Look::StartLF",
          "    assert!(look_set.contains(Look::StartLF)); // precondition is true",
          "    assert!(!look_set.contains(Look::EndLF)); // ensure EndLF is not present",
          "    assert_eq!(look_set.contains_anchor_lf(), true); // expected return value is true"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet { bits: 0b00000100 }; // contains Look::StartLF",
          "    let _ = look_set.contains_anchor_lf();",
          "    let look_set = LookSet { bits: 0b00000100 }; // contains Look::StartLF",
          "    assert!(look_set.contains(Look::StartLF)); // precondition is true",
          "    assert!(!look_set.contains(Look::EndLF)); // ensure EndLF is not present",
          "    assert_eq!(look_set.contains_anchor_lf(), true); // expected return value is true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet { bits: 0b00000110 }; // contains Look::StartLF and Look::EndLF",
          "    let _ = look_set.contains_anchor_lf();",
          "}"
        ],
        "oracle": [
          "    assert!(look_set.contains_anchor_lf());",
          "    assert_eq!(look_set.contains_anchor_lf(), true);",
          "    look_set.set_insert(Look::EndLF);",
          "    look_set.bits = 0b00000110;",
          "    assert!(look_set.contains(Look::StartLF));",
          "    assert!(look_set.contains(Look::EndLF));",
          "    assert!(look_set.contains_anchor_lf());",
          "    look_set.set_remove(Look::EndLF);",
          "    assert!(look_set.contains_anchor_lf());"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet { bits: 0b00000110 }; // contains Look::StartLF and Look::EndLF",
          "    let _ = look_set.contains_anchor_lf();",
          "    assert!(look_set.contains_anchor_lf());",
          "    assert_eq!(look_set.contains_anchor_lf(), true);",
          "    look_set.set_insert(Look::EndLF);",
          "    look_set.bits = 0b00000110;",
          "    assert!(look_set.contains(Look::StartLF));",
          "    assert!(look_set.contains(Look::EndLF));",
          "    assert!(look_set.contains_anchor_lf());",
          "    look_set.set_remove(Look::EndLF);",
          "    assert!(look_set.contains_anchor_lf());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet { bits: 0b00000000 }; // does not contain Look::StartLF, should not be valid",
          "    look_set.set_insert(Look::EndLF); // contains Look::EndLF",
          "    let _ = look_set.contains_anchor_lf();",
          "}"
        ],
        "oracle": [
          "    assert!(!look_set.contains_anchor_lf()); // expected false when Look::StartLF is not present",
          "    look_set.set_insert(Look::StartLF); // now contains Look::StartLF",
          "    assert!(look_set.contains_anchor_lf()); // expected true when Look::StartLF is present",
          "    look_set.set_remove(Look::EndLF); // removes Look::EndLF",
          "    assert!(look_set.contains_anchor_lf()); // expected true, still contains Look::StartLF",
          "    look_set.set_remove(Look::StartLF); // removes Look::StartLF",
          "    assert!(!look_set.contains_anchor_lf()); // expected false, neither Look::StartLF nor Look::EndLF are present",
          "    look_set.set_insert(Look::EndLF); // contains Look::EndLF again",
          "    assert!(look_set.contains_anchor_lf()); // expected true when Look::EndLF is now present"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet { bits: 0b00000000 }; // does not contain Look::StartLF, should not be valid",
          "    look_set.set_insert(Look::EndLF); // contains Look::EndLF",
          "    let _ = look_set.contains_anchor_lf();",
          "    assert!(!look_set.contains_anchor_lf()); // expected false when Look::StartLF is not present",
          "    look_set.set_insert(Look::StartLF); // now contains Look::StartLF",
          "    assert!(look_set.contains_anchor_lf()); // expected true when Look::StartLF is present",
          "    look_set.set_remove(Look::EndLF); // removes Look::EndLF",
          "    assert!(look_set.contains_anchor_lf()); // expected true, still contains Look::StartLF",
          "    look_set.set_remove(Look::StartLF); // removes Look::StartLF",
          "    assert!(!look_set.contains_anchor_lf()); // expected false, neither Look::StartLF nor Look::EndLF are present",
          "    look_set.set_insert(Look::EndLF); // contains Look::EndLF again",
          "    assert!(look_set.contains_anchor_lf()); // expected true when Look::EndLF is now present",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]