[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = {",
          "        let config = Config {",
          "            nest_limit: 10,",
          "            flags: Flags {",
          "                case_insensitive: false,",
          "                multi_line: false,",
          "                dot_matches_new_line: false,",
          "                swap_greed: false,",
          "                crlf: false,",
          "                ignore_whitespace: false,",
          "            },",
          "        };",
          "        let pattern = \"$\";",
          "        Parser {",
          "            config,",
          "            pattern,",
          "            depth: Cell::new(0),",
          "            pos: Cell::new(0),",
          "            char: Cell::new(Some('$')),",
          "            capture_index: Cell::new(0),",
          "            flags: RefCell::new(Flags::default()),",
          "            capture_names: RefCell::new(vec![]),",
          "        }",
          "    };",
          "",
          "    parser.parse_primitive().unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char.get(), Some('$'));",
          "    assert_eq!(parser.pos.get(), 0);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.flags.borrow(), &Flags { case_insensitive: false, multi_line: false, dot_matches_new_line: false, swap_greed: false, crlf: false, ignore_whitespace: false });",
          "    assert_eq!(parser.parse_primitive(), Ok(parser.hir_anchor_end()));"
        ],
        "code": [
          "{",
          "    let parser = {",
          "        let config = Config {",
          "            nest_limit: 10,",
          "            flags: Flags {",
          "                case_insensitive: false,",
          "                multi_line: false,",
          "                dot_matches_new_line: false,",
          "                swap_greed: false,",
          "                crlf: false,",
          "                ignore_whitespace: false,",
          "            },",
          "        };",
          "        let pattern = \"$\";",
          "        Parser {",
          "            config,",
          "            pattern,",
          "            depth: Cell::new(0),",
          "            pos: Cell::new(0),",
          "            char: Cell::new(Some('$')),",
          "            capture_index: Cell::new(0),",
          "            flags: RefCell::new(Flags::default()),",
          "            capture_names: RefCell::new(vec![]),",
          "        }",
          "    };",
          "",
          "    parser.parse_primitive().unwrap();",
          "    assert_eq!(parser.char.get(), Some('$'));",
          "    assert_eq!(parser.pos.get(), 0);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.flags.borrow(), &Flags { case_insensitive: false, multi_line: false, dot_matches_new_line: false, swap_greed: false, crlf: false, ignore_whitespace: false });",
          "    assert_eq!(parser.parse_primitive(), Ok(parser.hir_anchor_end()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = {",
          "        let config = Config {",
          "            nest_limit: 10,",
          "            flags: Flags {",
          "                case_insensitive: false,",
          "                multi_line: true,",
          "                dot_matches_new_line: false,",
          "                swap_greed: false,",
          "                crlf: false,",
          "                ignore_whitespace: false,",
          "            },",
          "        };",
          "        let pattern = \"$\";",
          "        Parser {",
          "            config,",
          "            pattern,",
          "            depth: Cell::new(0),",
          "            pos: Cell::new(0),",
          "            char: Cell::new(Some('$')),",
          "            capture_index: Cell::new(0),",
          "            flags: RefCell::new(Flags::default()),",
          "            capture_names: RefCell::new(vec![]),",
          "        }",
          "    };",
          "",
          "    parser.parse_primitive().unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char.get(), Some('$'));",
          "    assert!(parser.flags.borrow().multi_line);",
          "    assert_eq!(parser.parse_primitive(), Ok(parser.hir_anchor_end()));"
        ],
        "code": [
          "{",
          "    let parser = {",
          "        let config = Config {",
          "            nest_limit: 10,",
          "            flags: Flags {",
          "                case_insensitive: false,",
          "                multi_line: true,",
          "                dot_matches_new_line: false,",
          "                swap_greed: false,",
          "                crlf: false,",
          "                ignore_whitespace: false,",
          "            },",
          "        };",
          "        let pattern = \"$\";",
          "        Parser {",
          "            config,",
          "            pattern,",
          "            depth: Cell::new(0),",
          "            pos: Cell::new(0),",
          "            char: Cell::new(Some('$')),",
          "            capture_index: Cell::new(0),",
          "            flags: RefCell::new(Flags::default()),",
          "            capture_names: RefCell::new(vec![]),",
          "        }",
          "    };",
          "",
          "    parser.parse_primitive().unwrap();",
          "    assert_eq!(parser.char.get(), Some('$'));",
          "    assert!(parser.flags.borrow().multi_line);",
          "    assert_eq!(parser.parse_primitive(), Ok(parser.hir_anchor_end()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]