[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            case_insensitive: false,",
          "            multi_line: false,",
          "            dot_matches_new_line: false,",
          "            swap_greed: false,",
          "            crlf: false,",
          "            ignore_whitespace: false,",
          "        },",
          "    };",
          "    ",
          "    let pattern = \".\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('.')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    ",
          "    let _result = parser.parse_primitive();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(parser.hir_dot()));"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            case_insensitive: false,",
          "            multi_line: false,",
          "            dot_matches_new_line: false,",
          "            swap_greed: false,",
          "            crlf: false,",
          "            ignore_whitespace: false,",
          "        },",
          "    };",
          "    ",
          "    let pattern = \".\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('.')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    ",
          "    let _result = parser.parse_primitive();",
          "    assert_eq!(_result, Ok(parser.hir_dot()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            case_insensitive: false,",
          "            multi_line: false,",
          "            dot_matches_new_line: true,",
          "            swap_greed: false,",
          "            crlf: false,",
          "            ignore_whitespace: false,",
          "        },",
          "    };",
          "    ",
          "    let pattern = \".\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('.')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    ",
          "    let _result = parser.parse_primitive();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(parser.hir_dot()));",
          "    assert!(parser.char.get().is_none());",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.capture_index.get(), 0);"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            case_insensitive: false,",
          "            multi_line: false,",
          "            dot_matches_new_line: true,",
          "            swap_greed: false,",
          "            crlf: false,",
          "            ignore_whitespace: false,",
          "        },",
          "    };",
          "    ",
          "    let pattern = \".\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('.')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    ",
          "    let _result = parser.parse_primitive();",
          "    assert_eq!(_result, Ok(parser.hir_dot()));",
          "    assert!(parser.char.get().is_none());",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]