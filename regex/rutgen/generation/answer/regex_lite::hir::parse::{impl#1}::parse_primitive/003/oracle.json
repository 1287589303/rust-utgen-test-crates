[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags {",
          "        case_insensitive: false,",
          "        multi_line: false,",
          "        dot_matches_new_line: false,",
          "        swap_greed: false,",
          "        crlf: false,",
          "        ignore_whitespace: false,",
          "    };",
          "    let config = Config {",
          "        size_limit: None,",
          "        nest_limit: 32,",
          "        flags,",
          "    };",
          "    let pattern = \"^\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('^')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let _ = parser.parse_primitive();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_parser.parse_primitive(), Ok(parser.hir_anchor_start()));"
        ],
        "code": [
          "{",
          "    let flags = Flags {",
          "        case_insensitive: false,",
          "        multi_line: false,",
          "        dot_matches_new_line: false,",
          "        swap_greed: false,",
          "        crlf: false,",
          "        ignore_whitespace: false,",
          "    };",
          "    let config = Config {",
          "        size_limit: None,",
          "        nest_limit: 32,",
          "        flags,",
          "    };",
          "    let pattern = \"^\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('^')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let _ = parser.parse_primitive();",
          "    assert_eq!(_parser.parse_primitive(), Ok(parser.hir_anchor_start()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags {",
          "        case_insensitive: false,",
          "        multi_line: false,",
          "        dot_matches_new_line: false,",
          "        swap_greed: false,",
          "        crlf: false,",
          "        ignore_whitespace: false,",
          "    };",
          "    let config = Config {",
          "        size_limit: None,",
          "        nest_limit: 32,",
          "        flags,",
          "    };",
          "    let pattern = \"$\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('$')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let _ = parser.parse_primitive();",
          "}"
        ],
        "oracle": [
          "    let flags = Flags { case_insensitive: false, multi_line: false, dot_matches_new_line: false, swap_greed: false, crlf: false, ignore_whitespace: false };",
          "    let config = Config { size_limit: None, nest_limit: 32, flags };",
          "    let pattern = \"^\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('^')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_primitive();",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), parser.hir_anchor_start());"
        ],
        "code": [
          "{",
          "    let flags = Flags {",
          "        case_insensitive: false,",
          "        multi_line: false,",
          "        dot_matches_new_line: false,",
          "        swap_greed: false,",
          "        crlf: false,",
          "        ignore_whitespace: false,",
          "    };",
          "    let config = Config {",
          "        size_limit: None,",
          "        nest_limit: 32,",
          "        flags,",
          "    };",
          "    let pattern = \"$\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('$')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let _ = parser.parse_primitive();",
          "    let flags = Flags { case_insensitive: false, multi_line: false, dot_matches_new_line: false, swap_greed: false, crlf: false, ignore_whitespace: false };",
          "    let config = Config { size_limit: None, nest_limit: 32, flags };",
          "    let pattern = \"^\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('^')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_primitive();",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), parser.hir_anchor_start());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]