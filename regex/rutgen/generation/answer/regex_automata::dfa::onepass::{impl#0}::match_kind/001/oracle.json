[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new()",
          "        .match_kind(MatchKind::LeftmostFirst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_match_kind(), MatchKind::LeftmostFirst);",
          "    assert!(config.starts_for_each_pattern.is_none());",
          "    assert!(config.byte_classes.is_none());",
          "    assert!(config.get_size_limit().is_none());"
        ],
        "code": [
          "{",
          "    let config = Config::new()",
          "        .match_kind(MatchKind::LeftmostFirst);",
          "    assert_eq!(config.get_match_kind(), MatchKind::LeftmostFirst);",
          "    assert!(config.starts_for_each_pattern.is_none());",
          "    assert!(config.byte_classes.is_none());",
          "    assert!(config.get_size_limit().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new()",
          "        .match_kind(MatchKind::All);",
          "}"
        ],
        "oracle": [
          "    let config = Config::new().match_kind(MatchKind::All);",
          "    assert_eq!(config.get_match_kind(), MatchKind::All);",
          "    ",
          "    let config_default = Config::new();",
          "    assert_eq!(config_default.get_match_kind(), MatchKind::LeftmostFirst);",
          "    ",
          "    let config_none = Config::new().match_kind(MatchKind::LeftmostFirst);",
          "    assert_eq!(config_none.get_match_kind(), MatchKind::LeftmostFirst);",
          "    ",
          "    let config_empty = Config::new().match_kind(MatchKind::All).match_kind(MatchKind::LeftmostFirst);",
          "    assert_eq!(config_empty.get_match_kind(), MatchKind::LeftmostFirst);",
          "    ",
          "    let config_with_size_limit = Config::new().size_limit(Some(100));",
          "    assert_eq!(config_with_size_limit.get_size_limit(), Some(100));",
          "    ",
          "    let config_with_no_size_limit = Config::new().size_limit(None);",
          "    assert_eq!(config_with_no_size_limit.get_size_limit(), None);",
          "    ",
          "    let config_starts_true = Config::new().starts_for_each_pattern(true);",
          "    assert_eq!(config_starts_true.get_starts_for_each_pattern(), true);",
          "    ",
          "    let config_starts_false = Config::new().starts_for_each_pattern(false);",
          "    assert_eq!(config_starts_false.get_starts_for_each_pattern(), false);",
          "    ",
          "    let config_byte_classes_true = Config::new().byte_classes(true);",
          "    assert_eq!(config_byte_classes_true.get_byte_classes(), true);",
          "    ",
          "    let config_byte_classes_false = Config::new().byte_classes(false);",
          "    assert_eq!(config_byte_classes_false.get_byte_classes(), false);"
        ],
        "code": [
          "{",
          "    let config = Config::new()",
          "        .match_kind(MatchKind::All);",
          "    let config = Config::new().match_kind(MatchKind::All);",
          "    assert_eq!(config.get_match_kind(), MatchKind::All);",
          "    ",
          "    let config_default = Config::new();",
          "    assert_eq!(config_default.get_match_kind(), MatchKind::LeftmostFirst);",
          "    ",
          "    let config_none = Config::new().match_kind(MatchKind::LeftmostFirst);",
          "    assert_eq!(config_none.get_match_kind(), MatchKind::LeftmostFirst);",
          "    ",
          "    let config_empty = Config::new().match_kind(MatchKind::All).match_kind(MatchKind::LeftmostFirst);",
          "    assert_eq!(config_empty.get_match_kind(), MatchKind::LeftmostFirst);",
          "    ",
          "    let config_with_size_limit = Config::new().size_limit(Some(100));",
          "    assert_eq!(config_with_size_limit.get_size_limit(), Some(100));",
          "    ",
          "    let config_with_no_size_limit = Config::new().size_limit(None);",
          "    assert_eq!(config_with_no_size_limit.get_size_limit(), None);",
          "    ",
          "    let config_starts_true = Config::new().starts_for_each_pattern(true);",
          "    assert_eq!(config_starts_true.get_starts_for_each_pattern(), true);",
          "    ",
          "    let config_starts_false = Config::new().starts_for_each_pattern(false);",
          "    assert_eq!(config_starts_false.get_starts_for_each_pattern(), false);",
          "    ",
          "    let config_byte_classes_true = Config::new().byte_classes(true);",
          "    assert_eq!(config_byte_classes_true.get_byte_classes(), true);",
          "    ",
          "    let config_byte_classes_false = Config::new().byte_classes(false);",
          "    assert_eq!(config_byte_classes_false.get_byte_classes(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new()",
          "        .match_kind(MatchKind::LeftmostFirst)",
          "        .match_kind(MatchKind::All);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_match_kind(), Some(MatchKind::All));",
          "    assert_eq!(config.get_starts_for_each_pattern(), false);",
          "    assert_eq!(config.get_byte_classes(), false);",
          "    assert_eq!(config.get_size_limit(), None);"
        ],
        "code": [
          "{",
          "    let config = Config::new()",
          "        .match_kind(MatchKind::LeftmostFirst)",
          "        .match_kind(MatchKind::All);",
          "    assert_eq!(config.get_match_kind(), Some(MatchKind::All));",
          "    assert_eq!(config.get_starts_for_each_pattern(), false);",
          "    assert_eq!(config.get_byte_classes(), false);",
          "    assert_eq!(config.get_size_limit(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]