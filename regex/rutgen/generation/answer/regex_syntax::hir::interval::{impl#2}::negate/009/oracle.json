[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
          "    struct TestBound(i32);",
          "    ",
          "    impl Bound for TestBound {",
          "        fn min_value() -> Self { TestBound(i32::MIN) }",
          "        fn max_value() -> Self { TestBound(i32::MAX) }",
          "        fn decrement(&self) -> Self { TestBound(self.0 - 1) }",
          "        fn increment(&self) -> Self { TestBound(self.0 + 1) }",
          "    }",
          "",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
          "    struct TestInterval {",
          "        lower: TestBound,",
          "        upper: TestBound,",
          "    }",
          "",
          "    impl Interval for TestInterval {",
          "        type Bound = TestBound;",
          "",
          "        fn lower(&self) -> Self::Bound { self.lower }",
          "        fn upper(&self) -> Self::Bound { self.upper }",
          "        fn set_lower(&mut self, bound: Self::Bound) { self.lower = bound; }",
          "        fn set_upper(&mut self, bound: Self::Bound) { self.upper = bound; }",
          "        fn case_fold_simple(&self, intervals: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> { Ok(()) }",
          "        fn is_contiguous(&self, _other: &Self) -> bool { true }",
          "        fn is_intersection_empty(&self, _other: &Self) -> bool { false }",
          "        fn is_subset(&self, _other: &Self) -> bool { false }",
          "    }",
          "",
          "    let mut interval_set = IntervalSet::new(vec![TestInterval { lower: TestBound::min_value(), upper: TestBound::max_value() }]);",
          "    interval_set.negate();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(interval_set.ranges.len(), 1);",
          "    assert_eq!(interval_set.ranges[0].lower(), TestBound::min_value());",
          "    assert_eq!(interval_set.ranges[0].upper(), TestBound::max_value());",
          "    assert!(interval_set.folded);",
          "    assert!(interval_set.ranges.is_empty());",
          "    assert_eq!(interval_set.ranges.len(), 1);",
          "    assert_eq!(interval_set.ranges[0].lower(), TestBound::max_value().increment());",
          "    assert_eq!(interval_set.ranges[0].upper(), TestBound::min_value().decrement());",
          "    assert!(interval_set.ranges.iter().all(|interval| interval.lower() >= TestBound::min_value() && interval.upper() <= TestBound::max_value()));"
        ],
        "code": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
          "    struct TestBound(i32);",
          "    ",
          "    impl Bound for TestBound {",
          "        fn min_value() -> Self { TestBound(i32::MIN) }",
          "        fn max_value() -> Self { TestBound(i32::MAX) }",
          "        fn decrement(&self) -> Self { TestBound(self.0 - 1) }",
          "        fn increment(&self) -> Self { TestBound(self.0 + 1) }",
          "    }",
          "",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
          "    struct TestInterval {",
          "        lower: TestBound,",
          "        upper: TestBound,",
          "    }",
          "",
          "    impl Interval for TestInterval {",
          "        type Bound = TestBound;",
          "",
          "        fn lower(&self) -> Self::Bound { self.lower }",
          "        fn upper(&self) -> Self::Bound { self.upper }",
          "        fn set_lower(&mut self, bound: Self::Bound) { self.lower = bound; }",
          "        fn set_upper(&mut self, bound: Self::Bound) { self.upper = bound; }",
          "        fn case_fold_simple(&self, intervals: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> { Ok(()) }",
          "        fn is_contiguous(&self, _other: &Self) -> bool { true }",
          "        fn is_intersection_empty(&self, _other: &Self) -> bool { false }",
          "        fn is_subset(&self, _other: &Self) -> bool { false }",
          "    }",
          "",
          "    let mut interval_set = IntervalSet::new(vec![TestInterval { lower: TestBound::min_value(), upper: TestBound::max_value() }]);",
          "    interval_set.negate();",
          "    assert_eq!(interval_set.ranges.len(), 1);",
          "    assert_eq!(interval_set.ranges[0].lower(), TestBound::min_value());",
          "    assert_eq!(interval_set.ranges[0].upper(), TestBound::max_value());",
          "    assert!(interval_set.folded);",
          "    assert!(interval_set.ranges.is_empty());",
          "    assert_eq!(interval_set.ranges.len(), 1);",
          "    assert_eq!(interval_set.ranges[0].lower(), TestBound::max_value().increment());",
          "    assert_eq!(interval_set.ranges[0].upper(), TestBound::min_value().decrement());",
          "    assert!(interval_set.ranges.iter().all(|interval| interval.lower() >= TestBound::min_value() && interval.upper() <= TestBound::max_value()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
          "    struct TestBound(i32);",
          "    ",
          "    impl Bound for TestBound {",
          "        fn min_value() -> Self { TestBound(i32::MIN) }",
          "        fn max_value() -> Self { TestBound(i32::MAX) }",
          "        fn decrement(&self) -> Self { TestBound(self.0 - 1) }",
          "        fn increment(&self) -> Self { TestBound(self.0 + 1) }",
          "    }",
          "",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
          "    struct TestInterval {",
          "        lower: TestBound,",
          "        upper: TestBound,",
          "    }",
          "",
          "    impl Interval for TestInterval {",
          "        type Bound = TestBound;",
          "",
          "        fn lower(&self) -> Self::Bound { self.lower }",
          "        fn upper(&self) -> Self::Bound { self.upper }",
          "        fn set_lower(&mut self, bound: Self::Bound) { self.lower = bound; }",
          "        fn set_upper(&mut self, bound: Self::Bound) { self.upper = bound; }",
          "        fn case_fold_simple(&self, intervals: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> { Ok(()) }",
          "        fn is_contiguous(&self, _other: &Self) -> bool { true }",
          "        fn is_intersection_empty(&self, _other: &Self) -> bool { false }",
          "        fn is_subset(&self, _other: &Self) -> bool { false }",
          "    }",
          "",
          "    let mut interval_set = IntervalSet::new(vec![TestInterval { lower: TestBound::min_value(), upper: TestBound(10) }]);",
          "    interval_set.negate();",
          "}"
        ],
        "oracle": [
          "    let mut interval_set = IntervalSet::new(vec![TestInterval { lower: TestBound(1), upper: TestBound(10) }]);",
          "    interval_set.negate();",
          "    assert_eq!(interval_set.intervals().len(), 2);",
          "    assert_eq!(interval_set.intervals()[0].lower(), TestBound::min_value());",
          "    assert_eq!(interval_set.intervals()[0].upper(), TestBound(0));",
          "    assert_eq!(interval_set.intervals()[1].lower(), TestBound(11));",
          "    assert_eq!(interval_set.intervals()[1].upper(), TestBound::max_value());",
          "    ",
          "    let mut interval_set = IntervalSet::new(vec![TestInterval { lower: TestBound(10), upper: TestBound(20) }]);",
          "    interval_set.negate();",
          "    assert_eq!(interval_set.intervals().len(), 2);",
          "    assert_eq!(interval_set.intervals()[0].lower(), TestBound::min_value());",
          "    assert_eq!(interval_set.intervals()[0].upper(), TestBound(9));",
          "    assert_eq!(interval_set.intervals()[1].lower(), TestBound(21));",
          "    assert_eq!(interval_set.intervals()[1].upper(), TestBound::max_value());",
          "    ",
          "    let mut interval_set = IntervalSet::new(vec![TestInterval { lower: TestBound(0), upper: TestBound(5) }, TestInterval { lower: TestBound(6), upper: TestBound(10) }]);",
          "    interval_set.negate();",
          "    assert_eq!(interval_set.intervals().len(), 3);",
          "    assert_eq!(interval_set.intervals()[0].lower(), TestBound::min_value());",
          "    assert_eq!(interval_set.intervals()[0].upper(), TestBound(-1));",
          "    assert_eq!(interval_set.intervals()[1].lower(), TestBound(11));",
          "    assert_eq!(interval_set.intervals()[1].upper(), TestBound::max_value());",
          "    ",
          "    let mut interval_set = IntervalSet::new(vec![TestInterval { lower: TestBound(2), upper: TestBound(3) }]);",
          "    interval_set.negate();",
          "    assert_eq!(interval_set.intervals().len(), 2);",
          "    assert_eq!(interval_set.intervals()[0].lower(), TestBound::min_value());",
          "    assert_eq!(interval_set.intervals()[0].upper(), TestBound(1));",
          "    assert_eq!(interval_set.intervals()[1].lower(), TestBound(4));",
          "    assert_eq!(interval_set.intervals()[1].upper(), TestBound::max_value());"
        ],
        "code": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
          "    struct TestBound(i32);",
          "    ",
          "    impl Bound for TestBound {",
          "        fn min_value() -> Self { TestBound(i32::MIN) }",
          "        fn max_value() -> Self { TestBound(i32::MAX) }",
          "        fn decrement(&self) -> Self { TestBound(self.0 - 1) }",
          "        fn increment(&self) -> Self { TestBound(self.0 + 1) }",
          "    }",
          "",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
          "    struct TestInterval {",
          "        lower: TestBound,",
          "        upper: TestBound,",
          "    }",
          "",
          "    impl Interval for TestInterval {",
          "        type Bound = TestBound;",
          "",
          "        fn lower(&self) -> Self::Bound { self.lower }",
          "        fn upper(&self) -> Self::Bound { self.upper }",
          "        fn set_lower(&mut self, bound: Self::Bound) { self.lower = bound; }",
          "        fn set_upper(&mut self, bound: Self::Bound) { self.upper = bound; }",
          "        fn case_fold_simple(&self, intervals: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> { Ok(()) }",
          "        fn is_contiguous(&self, _other: &Self) -> bool { true }",
          "        fn is_intersection_empty(&self, _other: &Self) -> bool { false }",
          "        fn is_subset(&self, _other: &Self) -> bool { false }",
          "    }",
          "",
          "    let mut interval_set = IntervalSet::new(vec![TestInterval { lower: TestBound::min_value(), upper: TestBound(10) }]);",
          "    interval_set.negate();",
          "    let mut interval_set = IntervalSet::new(vec![TestInterval { lower: TestBound(1), upper: TestBound(10) }]);",
          "    interval_set.negate();",
          "    assert_eq!(interval_set.intervals().len(), 2);",
          "    assert_eq!(interval_set.intervals()[0].lower(), TestBound::min_value());",
          "    assert_eq!(interval_set.intervals()[0].upper(), TestBound(0));",
          "    assert_eq!(interval_set.intervals()[1].lower(), TestBound(11));",
          "    assert_eq!(interval_set.intervals()[1].upper(), TestBound::max_value());",
          "    ",
          "    let mut interval_set = IntervalSet::new(vec![TestInterval { lower: TestBound(10), upper: TestBound(20) }]);",
          "    interval_set.negate();",
          "    assert_eq!(interval_set.intervals().len(), 2);",
          "    assert_eq!(interval_set.intervals()[0].lower(), TestBound::min_value());",
          "    assert_eq!(interval_set.intervals()[0].upper(), TestBound(9));",
          "    assert_eq!(interval_set.intervals()[1].lower(), TestBound(21));",
          "    assert_eq!(interval_set.intervals()[1].upper(), TestBound::max_value());",
          "    ",
          "    let mut interval_set = IntervalSet::new(vec![TestInterval { lower: TestBound(0), upper: TestBound(5) }, TestInterval { lower: TestBound(6), upper: TestBound(10) }]);",
          "    interval_set.negate();",
          "    assert_eq!(interval_set.intervals().len(), 3);",
          "    assert_eq!(interval_set.intervals()[0].lower(), TestBound::min_value());",
          "    assert_eq!(interval_set.intervals()[0].upper(), TestBound(-1));",
          "    assert_eq!(interval_set.intervals()[1].lower(), TestBound(11));",
          "    assert_eq!(interval_set.intervals()[1].upper(), TestBound::max_value());",
          "    ",
          "    let mut interval_set = IntervalSet::new(vec![TestInterval { lower: TestBound(2), upper: TestBound(3) }]);",
          "    interval_set.negate();",
          "    assert_eq!(interval_set.intervals().len(), 2);",
          "    assert_eq!(interval_set.intervals()[0].lower(), TestBound::min_value());",
          "    assert_eq!(interval_set.intervals()[0].upper(), TestBound(1));",
          "    assert_eq!(interval_set.intervals()[1].lower(), TestBound(4));",
          "    assert_eq!(interval_set.intervals()[1].upper(), TestBound::max_value());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
          "    struct TestBound(i32);",
          "",
          "    impl Bound for TestBound {",
          "        fn min_value() -> Self { TestBound(i32::MIN) }",
          "        fn max_value() -> Self { TestBound(i32::MAX) }",
          "        fn decrement(&self) -> Self { TestBound(self.0 - 1) }",
          "        fn increment(&self) -> Self { TestBound(self.0 + 1) }",
          "    }",
          "",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
          "    struct TestInterval {",
          "        lower: TestBound,",
          "        upper: TestBound,",
          "    }",
          "",
          "    impl Interval for TestInterval {",
          "        type Bound = TestBound;",
          "",
          "        fn lower(&self) -> Self::Bound { self.lower }",
          "        fn upper(&self) -> Self::Bound { self.upper }",
          "        fn set_lower(&mut self, bound: Self::Bound) { self.lower = bound; }",
          "        fn set_upper(&mut self, bound: Self::Bound) { self.upper = bound; }",
          "        fn case_fold_simple(&self, intervals: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> { Ok(()) }",
          "        fn is_contiguous(&self, _other: &Self) -> bool { true }",
          "        fn is_intersection_empty(&self, _other: &Self) -> bool { false }",
          "        fn is_subset(&self, _other: &Self) -> bool { false }",
          "    }",
          "",
          "    let mut interval_set = IntervalSet::new(vec![TestInterval { lower: TestBound(10), upper: TestBound(20) }]);",
          "    interval_set.negate();",
          "}"
        ],
        "oracle": [
          "    interval_set.ranges.is_empty().assert_eq(false);",
          "    interval_set.ranges[0].lower().assert_eq(TestBound::min_value());",
          "    interval_set.ranges.len().assert_eq(2);",
          "    interval_set.ranges[0].upper().assert_eq(TestBound(10));",
          "    interval_set.ranges[1].lower().assert_eq(TestBound(21));",
          "    interval_set.ranges[1].upper().assert_eq(TestBound::max_value());"
        ],
        "code": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
          "    struct TestBound(i32);",
          "",
          "    impl Bound for TestBound {",
          "        fn min_value() -> Self { TestBound(i32::MIN) }",
          "        fn max_value() -> Self { TestBound(i32::MAX) }",
          "        fn decrement(&self) -> Self { TestBound(self.0 - 1) }",
          "        fn increment(&self) -> Self { TestBound(self.0 + 1) }",
          "    }",
          "",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
          "    struct TestInterval {",
          "        lower: TestBound,",
          "        upper: TestBound,",
          "    }",
          "",
          "    impl Interval for TestInterval {",
          "        type Bound = TestBound;",
          "",
          "        fn lower(&self) -> Self::Bound { self.lower }",
          "        fn upper(&self) -> Self::Bound { self.upper }",
          "        fn set_lower(&mut self, bound: Self::Bound) { self.lower = bound; }",
          "        fn set_upper(&mut self, bound: Self::Bound) { self.upper = bound; }",
          "        fn case_fold_simple(&self, intervals: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> { Ok(()) }",
          "        fn is_contiguous(&self, _other: &Self) -> bool { true }",
          "        fn is_intersection_empty(&self, _other: &Self) -> bool { false }",
          "        fn is_subset(&self, _other: &Self) -> bool { false }",
          "    }",
          "",
          "    let mut interval_set = IntervalSet::new(vec![TestInterval { lower: TestBound(10), upper: TestBound(20) }]);",
          "    interval_set.negate();",
          "    interval_set.ranges.is_empty().assert_eq(false);",
          "    interval_set.ranges[0].lower().assert_eq(TestBound::min_value());",
          "    interval_set.ranges.len().assert_eq(2);",
          "    interval_set.ranges[0].upper().assert_eq(TestBound(10));",
          "    interval_set.ranges[1].lower().assert_eq(TestBound(21));",
          "    interval_set.ranges[1].upper().assert_eq(TestBound::max_value());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
          "    struct TestBound(i32);",
          "",
          "    impl Bound for TestBound {",
          "        fn min_value() -> Self { TestBound(i32::MIN) }",
          "        fn max_value() -> Self { TestBound(i32::MAX) }",
          "        fn decrement(&self) -> Self { TestBound(self.0 - 1) }",
          "        fn increment(&self) -> Self { TestBound(self.0 + 1) }",
          "    }",
          "",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
          "    struct TestInterval {",
          "        lower: TestBound,",
          "        upper: TestBound,",
          "    }",
          "",
          "    impl Interval for TestInterval {",
          "        type Bound = TestBound;",
          "",
          "        fn lower(&self) -> Self::Bound { self.lower }",
          "        fn upper(&self) -> Self::Bound { self.upper }",
          "        fn set_lower(&mut self, bound: Self::Bound) { self.lower = bound; }",
          "        fn set_upper(&mut self, bound: Self::Bound) { self.upper = bound; }",
          "        fn case_fold_simple(&self, intervals: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> { Ok(()) }",
          "        fn is_contiguous(&self, _other: &Self) -> bool { true }",
          "        fn is_intersection_empty(&self, _other: &Self) -> bool { false }",
          "        fn is_subset(&self, _other: &Self) -> bool { false }",
          "    }",
          "",
          "    let mut interval_set = IntervalSet::new(vec![",
          "        TestInterval { lower: TestBound(10), upper: TestBound(20) },",
          "        TestInterval { lower: TestBound(21), upper: TestBound(30) }",
          "    ]);",
          "    interval_set.negate();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(interval_set.ranges.len(), 2);",
          "    assert_eq!(interval_set.ranges[0].lower(), TestBound(i32::MIN));",
          "    assert_eq!(interval_set.ranges[0].upper(), TestBound(9));",
          "    assert_eq!(interval_set.ranges[1].lower(), TestBound(31));",
          "    assert_eq!(interval_set.ranges[1].upper(), TestBound(i32::MAX));",
          "    assert!(interval_set.folded);"
        ],
        "code": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
          "    struct TestBound(i32);",
          "",
          "    impl Bound for TestBound {",
          "        fn min_value() -> Self { TestBound(i32::MIN) }",
          "        fn max_value() -> Self { TestBound(i32::MAX) }",
          "        fn decrement(&self) -> Self { TestBound(self.0 - 1) }",
          "        fn increment(&self) -> Self { TestBound(self.0 + 1) }",
          "    }",
          "",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
          "    struct TestInterval {",
          "        lower: TestBound,",
          "        upper: TestBound,",
          "    }",
          "",
          "    impl Interval for TestInterval {",
          "        type Bound = TestBound;",
          "",
          "        fn lower(&self) -> Self::Bound { self.lower }",
          "        fn upper(&self) -> Self::Bound { self.upper }",
          "        fn set_lower(&mut self, bound: Self::Bound) { self.lower = bound; }",
          "        fn set_upper(&mut self, bound: Self::Bound) { self.upper = bound; }",
          "        fn case_fold_simple(&self, intervals: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> { Ok(()) }",
          "        fn is_contiguous(&self, _other: &Self) -> bool { true }",
          "        fn is_intersection_empty(&self, _other: &Self) -> bool { false }",
          "        fn is_subset(&self, _other: &Self) -> bool { false }",
          "    }",
          "",
          "    let mut interval_set = IntervalSet::new(vec![",
          "        TestInterval { lower: TestBound(10), upper: TestBound(20) },",
          "        TestInterval { lower: TestBound(21), upper: TestBound(30) }",
          "    ]);",
          "    interval_set.negate();",
          "    assert_eq!(interval_set.ranges.len(), 2);",
          "    assert_eq!(interval_set.ranges[0].lower(), TestBound(i32::MIN));",
          "    assert_eq!(interval_set.ranges[0].upper(), TestBound(9));",
          "    assert_eq!(interval_set.ranges[1].lower(), TestBound(31));",
          "    assert_eq!(interval_set.ranges[1].upper(), TestBound(i32::MAX));",
          "    assert!(interval_set.folded);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]