[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
          "    struct TestBound(i32);",
          "    ",
          "    impl TestBound {",
          "        fn min_value() -> Self { TestBound(i32::MIN) }",
          "        fn max_value() -> Self { TestBound(i32::MAX) }",
          "        fn decrement(self) -> Self { TestBound(self.0 - 1) }",
          "        fn increment(self) -> Self { TestBound(self.0 + 1) }",
          "    }",
          "    ",
          "    #[derive(Clone, Debug, Default, PartialEq)]",
          "    struct TestInterval {",
          "        lower_bound: TestBound,",
          "        upper_bound: TestBound,",
          "    }",
          "    ",
          "    impl Interval for TestInterval {",
          "        type Bound = TestBound;",
          "",
          "        fn lower(&self) -> Self::Bound { self.lower_bound }",
          "        fn upper(&self) -> Self::Bound { self.upper_bound }",
          "        fn set_lower(&mut self, bound: Self::Bound) { self.lower_bound = bound; }",
          "        fn set_upper(&mut self, bound: Self::Bound) { self.upper_bound = bound; }",
          "        fn case_fold_simple(&self, _: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> { Ok(()) }",
          "        fn is_contiguous(&self, _: &Self) -> bool { true }",
          "        fn is_intersection_empty(&self, _: &Self) -> bool { false }",
          "        fn is_subset(&self, _: &Self) -> bool { false }",
          "    }",
          "",
          "    let mut interval_set = IntervalSet::new(vec![TestInterval { lower_bound: TestBound(1), upper_bound: TestBound(5) }]);",
          "    interval_set.negate();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(interval_set.ranges.len(), 2);",
          "    assert_eq!(interval_set.ranges[0].lower(), TestBound(i32::MIN));",
          "    assert_eq!(interval_set.ranges[0].upper(), TestBound(0));",
          "    assert_eq!(interval_set.ranges[1].lower(), TestBound(6));",
          "    assert_eq!(interval_set.ranges[1].upper(), TestBound(i32::MAX));",
          "    assert!(interval_set.folded);"
        ],
        "code": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
          "    struct TestBound(i32);",
          "    ",
          "    impl TestBound {",
          "        fn min_value() -> Self { TestBound(i32::MIN) }",
          "        fn max_value() -> Self { TestBound(i32::MAX) }",
          "        fn decrement(self) -> Self { TestBound(self.0 - 1) }",
          "        fn increment(self) -> Self { TestBound(self.0 + 1) }",
          "    }",
          "    ",
          "    #[derive(Clone, Debug, Default, PartialEq)]",
          "    struct TestInterval {",
          "        lower_bound: TestBound,",
          "        upper_bound: TestBound,",
          "    }",
          "    ",
          "    impl Interval for TestInterval {",
          "        type Bound = TestBound;",
          "",
          "        fn lower(&self) -> Self::Bound { self.lower_bound }",
          "        fn upper(&self) -> Self::Bound { self.upper_bound }",
          "        fn set_lower(&mut self, bound: Self::Bound) { self.lower_bound = bound; }",
          "        fn set_upper(&mut self, bound: Self::Bound) { self.upper_bound = bound; }",
          "        fn case_fold_simple(&self, _: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> { Ok(()) }",
          "        fn is_contiguous(&self, _: &Self) -> bool { true }",
          "        fn is_intersection_empty(&self, _: &Self) -> bool { false }",
          "        fn is_subset(&self, _: &Self) -> bool { false }",
          "    }",
          "",
          "    let mut interval_set = IntervalSet::new(vec![TestInterval { lower_bound: TestBound(1), upper_bound: TestBound(5) }]);",
          "    interval_set.negate();",
          "    assert_eq!(interval_set.ranges.len(), 2);",
          "    assert_eq!(interval_set.ranges[0].lower(), TestBound(i32::MIN));",
          "    assert_eq!(interval_set.ranges[0].upper(), TestBound(0));",
          "    assert_eq!(interval_set.ranges[1].lower(), TestBound(6));",
          "    assert_eq!(interval_set.ranges[1].upper(), TestBound(i32::MAX));",
          "    assert!(interval_set.folded);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
          "    struct TestBound(i32);",
          "    ",
          "    impl TestBound {",
          "        fn min_value() -> Self { TestBound(i32::MIN) }",
          "        fn max_value() -> Self { TestBound(i32::MAX) }",
          "        fn decrement(self) -> Self { TestBound(self.0 - 1) }",
          "        fn increment(self) -> Self { TestBound(self.0 + 1) }",
          "    }",
          "    ",
          "    #[derive(Clone, Debug, Default, PartialEq)]",
          "    struct TestInterval {",
          "        lower_bound: TestBound,",
          "        upper_bound: TestBound,",
          "    }",
          "    ",
          "    impl Interval for TestInterval {",
          "        type Bound = TestBound;",
          "",
          "        fn lower(&self) -> Self::Bound { self.lower_bound }",
          "        fn upper(&self) -> Self::Bound { self.upper_bound }",
          "        fn set_lower(&mut self, bound: Self::Bound) { self.lower_bound = bound; }",
          "        fn set_upper(&mut self, bound: Self::Bound) { self.upper_bound = bound; }",
          "        fn case_fold_simple(&self, _: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> { Ok(()) }",
          "        fn is_contiguous(&self, _: &Self) -> bool { true }",
          "        fn is_intersection_empty(&self, _: &Self) -> bool { false }",
          "        fn is_subset(&self, _: &Self) -> bool { false }",
          "    }",
          "",
          "    let mut interval_set = IntervalSet::new(vec![TestInterval { lower_bound: TestBound(2), upper_bound: TestBound(5) }]);",
          "    interval_set.negate();",
          "}"
        ],
        "oracle": [
          "    assert!(interval_set.ranges.len() == 1);",
          "    assert_eq!(interval_set.ranges[0].lower(), TestBound(i32::MIN));",
          "    assert_eq!(interval_set.ranges[0].upper(), TestBound(1));",
          "    assert_eq!(interval_set.folded, true);",
          "    ",
          "    let mut interval_set = IntervalSet::new(vec![TestInterval { lower_bound: TestBound(3), upper_bound: TestBound(7) }]);",
          "    interval_set.negate();",
          "    assert!(interval_set.ranges.len() == 1);",
          "    assert_eq!(interval_set.ranges[0].lower(), TestBound(8));",
          "    assert_eq!(interval_set.ranges[0].upper(), TestBound(i32::MAX));",
          "    assert_eq!(interval_set.folded, true);",
          "    ",
          "    let mut interval_set = IntervalSet::new(vec![TestInterval { lower_bound: TestBound(1), upper_bound: TestBound(4) }, TestInterval { lower_bound: TestBound(5), upper_bound: TestBound(10) }]);",
          "    interval_set.negate();",
          "    assert!(interval_set.ranges.len() == 3);",
          "    assert_eq!(interval_set.ranges[0].lower(), TestBound(i32::MIN));",
          "    assert_eq!(interval_set.ranges[0].upper(), TestBound(0));",
          "    assert_eq!(interval_set.ranges[1].lower(), TestBound(5));",
          "    assert_eq!(interval_set.ranges[1].upper(), TestBound(5));",
          "    assert_eq!(interval_set.ranges[2].lower(), TestBound(11));",
          "    assert_eq!(interval_set.ranges[2].upper(), TestBound(i32::MAX));",
          "    assert_eq!(interval_set.folded, true);",
          "    ",
          "    let mut interval_set = IntervalSet::new(vec![TestInterval { lower_bound: TestBound(10), upper_bound: TestBound(20) }]);",
          "    interval_set.negate();",
          "    assert!(interval_set.ranges.len() == 1);",
          "    assert_eq!(interval_set.ranges[0].lower(), TestBound(21));",
          "    assert_eq!(interval_set.ranges[0].upper(), TestBound(i32::MAX));",
          "    assert_eq!(interval_set.folded, true);",
          "    ",
          "    let mut interval_set = IntervalSet::new(vec![TestInterval { lower_bound: TestBound(0), upper_bound: TestBound(0) }]);",
          "    interval_set.negate();",
          "    assert!(interval_set.ranges.len() == 2);",
          "    assert_eq!(interval_set.ranges[0].lower(), TestBound(i32::MIN));",
          "    assert_eq!(interval_set.ranges[0].upper(), TestBound(-1));",
          "    assert_eq!(interval_set.ranges[1].lower(), TestBound(1));",
          "    assert_eq!(interval_set.ranges[1].upper(), TestBound(i32::MAX));",
          "    assert_eq!(interval_set.folded, true);"
        ],
        "code": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
          "    struct TestBound(i32);",
          "    ",
          "    impl TestBound {",
          "        fn min_value() -> Self { TestBound(i32::MIN) }",
          "        fn max_value() -> Self { TestBound(i32::MAX) }",
          "        fn decrement(self) -> Self { TestBound(self.0 - 1) }",
          "        fn increment(self) -> Self { TestBound(self.0 + 1) }",
          "    }",
          "    ",
          "    #[derive(Clone, Debug, Default, PartialEq)]",
          "    struct TestInterval {",
          "        lower_bound: TestBound,",
          "        upper_bound: TestBound,",
          "    }",
          "    ",
          "    impl Interval for TestInterval {",
          "        type Bound = TestBound;",
          "",
          "        fn lower(&self) -> Self::Bound { self.lower_bound }",
          "        fn upper(&self) -> Self::Bound { self.upper_bound }",
          "        fn set_lower(&mut self, bound: Self::Bound) { self.lower_bound = bound; }",
          "        fn set_upper(&mut self, bound: Self::Bound) { self.upper_bound = bound; }",
          "        fn case_fold_simple(&self, _: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> { Ok(()) }",
          "        fn is_contiguous(&self, _: &Self) -> bool { true }",
          "        fn is_intersection_empty(&self, _: &Self) -> bool { false }",
          "        fn is_subset(&self, _: &Self) -> bool { false }",
          "    }",
          "",
          "    let mut interval_set = IntervalSet::new(vec![TestInterval { lower_bound: TestBound(2), upper_bound: TestBound(5) }]);",
          "    interval_set.negate();",
          "    assert!(interval_set.ranges.len() == 1);",
          "    assert_eq!(interval_set.ranges[0].lower(), TestBound(i32::MIN));",
          "    assert_eq!(interval_set.ranges[0].upper(), TestBound(1));",
          "    assert_eq!(interval_set.folded, true);",
          "    ",
          "    let mut interval_set = IntervalSet::new(vec![TestInterval { lower_bound: TestBound(3), upper_bound: TestBound(7) }]);",
          "    interval_set.negate();",
          "    assert!(interval_set.ranges.len() == 1);",
          "    assert_eq!(interval_set.ranges[0].lower(), TestBound(8));",
          "    assert_eq!(interval_set.ranges[0].upper(), TestBound(i32::MAX));",
          "    assert_eq!(interval_set.folded, true);",
          "    ",
          "    let mut interval_set = IntervalSet::new(vec![TestInterval { lower_bound: TestBound(1), upper_bound: TestBound(4) }, TestInterval { lower_bound: TestBound(5), upper_bound: TestBound(10) }]);",
          "    interval_set.negate();",
          "    assert!(interval_set.ranges.len() == 3);",
          "    assert_eq!(interval_set.ranges[0].lower(), TestBound(i32::MIN));",
          "    assert_eq!(interval_set.ranges[0].upper(), TestBound(0));",
          "    assert_eq!(interval_set.ranges[1].lower(), TestBound(5));",
          "    assert_eq!(interval_set.ranges[1].upper(), TestBound(5));",
          "    assert_eq!(interval_set.ranges[2].lower(), TestBound(11));",
          "    assert_eq!(interval_set.ranges[2].upper(), TestBound(i32::MAX));",
          "    assert_eq!(interval_set.folded, true);",
          "    ",
          "    let mut interval_set = IntervalSet::new(vec![TestInterval { lower_bound: TestBound(10), upper_bound: TestBound(20) }]);",
          "    interval_set.negate();",
          "    assert!(interval_set.ranges.len() == 1);",
          "    assert_eq!(interval_set.ranges[0].lower(), TestBound(21));",
          "    assert_eq!(interval_set.ranges[0].upper(), TestBound(i32::MAX));",
          "    assert_eq!(interval_set.folded, true);",
          "    ",
          "    let mut interval_set = IntervalSet::new(vec![TestInterval { lower_bound: TestBound(0), upper_bound: TestBound(0) }]);",
          "    interval_set.negate();",
          "    assert!(interval_set.ranges.len() == 2);",
          "    assert_eq!(interval_set.ranges[0].lower(), TestBound(i32::MIN));",
          "    assert_eq!(interval_set.ranges[0].upper(), TestBound(-1));",
          "    assert_eq!(interval_set.ranges[1].lower(), TestBound(1));",
          "    assert_eq!(interval_set.ranges[1].upper(), TestBound(i32::MAX));",
          "    assert_eq!(interval_set.folded, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
          "    struct TestBound(i32);",
          "    ",
          "    impl TestBound {",
          "        fn min_value() -> Self { TestBound(1) }",
          "        fn max_value() -> Self { TestBound(10) }",
          "        fn decrement(self) -> Self { TestBound(self.0 - 1) }",
          "        fn increment(self) -> Self { TestBound(self.0 + 1) }",
          "    }",
          "    ",
          "    #[derive(Clone, Debug, Default, PartialEq)]",
          "    struct TestInterval {",
          "        lower_bound: TestBound,",
          "        upper_bound: TestBound,",
          "    }",
          "    ",
          "    impl Interval for TestInterval {",
          "        type Bound = TestBound;",
          "",
          "        fn lower(&self) -> Self::Bound { self.lower_bound }",
          "        fn upper(&self) -> Self::Bound { self.upper_bound }",
          "        fn set_lower(&mut self, bound: Self::Bound) { self.lower_bound = bound; }",
          "        fn set_upper(&mut self, bound: Self::Bound) { self.upper_bound = bound; }",
          "        fn case_fold_simple(&self, _: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> { Ok(()) }",
          "        fn is_contiguous(&self, _: &Self) -> bool { true }",
          "        fn is_intersection_empty(&self, _: &Self) -> bool { false }",
          "        fn is_subset(&self, _: &Self) -> bool { false }",
          "    }",
          "",
          "    let mut interval_set = IntervalSet::new(vec![TestInterval { lower_bound: TestBound(1), upper_bound: TestBound(3) }]);",
          "    interval_set.negate();",
          "}"
        ],
        "oracle": [
          "    assert!(interval_set.intervals().is_empty());",
          "    assert_eq!(interval_set.ranges.len(), 1);",
          "    assert_eq!(interval_set.ranges[0].lower(), TestBound(0));",
          "    assert_eq!(interval_set.ranges[0].upper(), TestBound(10));",
          "    assert!(interval_set.folded);",
          "    let mut interval_set_non_empty = IntervalSet::new(vec![TestInterval { lower_bound: TestBound(2), upper_bound: TestBound(4) }]);",
          "    interval_set_non_empty.negate();",
          "    assert_eq!(interval_set_non_empty.ranges.len(), 3);",
          "    assert_eq!(interval_set_non_empty.ranges[0].lower(), TestBound(1));",
          "    assert_eq!(interval_set_non_empty.ranges[0].upper(), TestBound(2));",
          "    assert_eq!(interval_set_non_empty.ranges[1].lower(), TestBound(5));",
          "    assert_eq!(interval_set_non_empty.ranges[1].upper(), TestBound(4));",
          "    assert_eq!(interval_set_non_empty.ranges[2].lower(), TestBound(5));",
          "    assert_eq!(interval_set_non_empty.ranges[2].upper(), TestBound(10));",
          "    assert!(!interval_set_non_empty.folded);"
        ],
        "code": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
          "    struct TestBound(i32);",
          "    ",
          "    impl TestBound {",
          "        fn min_value() -> Self { TestBound(1) }",
          "        fn max_value() -> Self { TestBound(10) }",
          "        fn decrement(self) -> Self { TestBound(self.0 - 1) }",
          "        fn increment(self) -> Self { TestBound(self.0 + 1) }",
          "    }",
          "    ",
          "    #[derive(Clone, Debug, Default, PartialEq)]",
          "    struct TestInterval {",
          "        lower_bound: TestBound,",
          "        upper_bound: TestBound,",
          "    }",
          "    ",
          "    impl Interval for TestInterval {",
          "        type Bound = TestBound;",
          "",
          "        fn lower(&self) -> Self::Bound { self.lower_bound }",
          "        fn upper(&self) -> Self::Bound { self.upper_bound }",
          "        fn set_lower(&mut self, bound: Self::Bound) { self.lower_bound = bound; }",
          "        fn set_upper(&mut self, bound: Self::Bound) { self.upper_bound = bound; }",
          "        fn case_fold_simple(&self, _: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> { Ok(()) }",
          "        fn is_contiguous(&self, _: &Self) -> bool { true }",
          "        fn is_intersection_empty(&self, _: &Self) -> bool { false }",
          "        fn is_subset(&self, _: &Self) -> bool { false }",
          "    }",
          "",
          "    let mut interval_set = IntervalSet::new(vec![TestInterval { lower_bound: TestBound(1), upper_bound: TestBound(3) }]);",
          "    interval_set.negate();",
          "    assert!(interval_set.intervals().is_empty());",
          "    assert_eq!(interval_set.ranges.len(), 1);",
          "    assert_eq!(interval_set.ranges[0].lower(), TestBound(0));",
          "    assert_eq!(interval_set.ranges[0].upper(), TestBound(10));",
          "    assert!(interval_set.folded);",
          "    let mut interval_set_non_empty = IntervalSet::new(vec![TestInterval { lower_bound: TestBound(2), upper_bound: TestBound(4) }]);",
          "    interval_set_non_empty.negate();",
          "    assert_eq!(interval_set_non_empty.ranges.len(), 3);",
          "    assert_eq!(interval_set_non_empty.ranges[0].lower(), TestBound(1));",
          "    assert_eq!(interval_set_non_empty.ranges[0].upper(), TestBound(2));",
          "    assert_eq!(interval_set_non_empty.ranges[1].lower(), TestBound(5));",
          "    assert_eq!(interval_set_non_empty.ranges[1].upper(), TestBound(4));",
          "    assert_eq!(interval_set_non_empty.ranges[2].lower(), TestBound(5));",
          "    assert_eq!(interval_set_non_empty.ranges[2].upper(), TestBound(10));",
          "    assert!(!interval_set_non_empty.folded);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]