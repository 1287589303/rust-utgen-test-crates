[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_set = StateSet::empty();",
          "    let _ = state_set.len();",
          "}"
        ],
        "oracle": [
          "    let state_set = StateSet::empty();",
          "    assert_eq!(state_set.len(), 0);",
          "    let mut state_set_non_empty = StateSet::empty();",
          "    state_set_non_empty.add(StateID(1));",
          "    assert_eq!(state_set_non_empty.len(), 1);",
          "    state_set_non_empty.add(StateID(2));",
          "    assert_eq!(state_set_non_empty.len(), 2);",
          "    state_set_non_empty.clear();",
          "    assert_eq!(state_set_non_empty.len(), 0);"
        ],
        "code": [
          "{",
          "    let state_set = StateSet::empty();",
          "    let _ = state_set.len();",
          "    let state_set = StateSet::empty();",
          "    assert_eq!(state_set.len(), 0);",
          "    let mut state_set_non_empty = StateSet::empty();",
          "    state_set_non_empty.add(StateID(1));",
          "    assert_eq!(state_set_non_empty.len(), 1);",
          "    state_set_non_empty.add(StateID(2));",
          "    assert_eq!(state_set_non_empty.len(), 2);",
          "    state_set_non_empty.clear();",
          "    assert_eq!(state_set_non_empty.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut state_set = StateSet::empty();",
          "    state_set.add(StateID(0.into()));",
          "    let _ = state_set.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state_set.len(), 1);",
          "    state_set.clear();",
          "    assert_eq!(state_set.len(), 0);",
          "    state_set.add(StateID(1.into()));",
          "    assert_eq!(state_set.len(), 1);",
          "    state_set.add(StateID(2.into()));",
          "    assert_eq!(state_set.len(), 2);",
          "    let clone = state_set.deep_clone();",
          "    assert_eq!(clone.len(), state_set.len());",
          "    state_set.clear();",
          "    assert!(state_set.is_empty());",
          "    state_set.add(StateID(3.into()));",
          "    assert!(!state_set.is_empty());"
        ],
        "code": [
          "{",
          "    let mut state_set = StateSet::empty();",
          "    state_set.add(StateID(0.into()));",
          "    let _ = state_set.len();",
          "    assert_eq!(state_set.len(), 1);",
          "    state_set.clear();",
          "    assert_eq!(state_set.len(), 0);",
          "    state_set.add(StateID(1.into()));",
          "    assert_eq!(state_set.len(), 1);",
          "    state_set.add(StateID(2.into()));",
          "    assert_eq!(state_set.len(), 2);",
          "    let clone = state_set.deep_clone();",
          "    assert_eq!(clone.len(), state_set.len());",
          "    state_set.clear();",
          "    assert!(state_set.is_empty());",
          "    state_set.add(StateID(3.into()));",
          "    assert!(!state_set.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut state_set = StateSet::empty();",
          "    for id in 0..10 {",
          "        state_set.add(StateID(id.into()));",
          "    }",
          "    let _ = state_set.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state_set.len(), 10);",
          "    state_set.clear();",
          "    assert_eq!(state_set.len(), 0);",
          "    assert!(state_set.is_empty());",
          "    state_set.add(StateID(5.into()));",
          "    assert_eq!(state_set.len(), 1);",
          "    assert!(!state_set.is_empty());",
          "    state_set.add(StateID(3.into()));",
          "    assert_eq!(state_set.len(), 2);",
          "    state_set.clear();",
          "    state_set.add(StateID(7.into()));",
          "    assert_eq!(state_set.len(), 1);",
          "    state_set.add(StateID(7.into()));",
          "    assert_eq!(state_set.len(), 1);",
          "    state_set.add(StateID(8.into()));",
          "    assert_eq!(state_set.len(), 2);"
        ],
        "code": [
          "{",
          "    let mut state_set = StateSet::empty();",
          "    for id in 0..10 {",
          "        state_set.add(StateID(id.into()));",
          "    }",
          "    let _ = state_set.len();",
          "    assert_eq!(state_set.len(), 10);",
          "    state_set.clear();",
          "    assert_eq!(state_set.len(), 0);",
          "    assert!(state_set.is_empty());",
          "    state_set.add(StateID(5.into()));",
          "    assert_eq!(state_set.len(), 1);",
          "    assert!(!state_set.is_empty());",
          "    state_set.add(StateID(3.into()));",
          "    assert_eq!(state_set.len(), 2);",
          "    state_set.clear();",
          "    state_set.add(StateID(7.into()));",
          "    assert_eq!(state_set.len(), 1);",
          "    state_set.add(StateID(7.into()));",
          "    assert_eq!(state_set.len(), 1);",
          "    state_set.add(StateID(8.into()));",
          "    assert_eq!(state_set.len(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut state_set = StateSet::empty();",
          "    for id in 0..1000 {",
          "        state_set.add(StateID(id.into()));",
          "    }",
          "    let _ = state_set.len();",
          "}"
        ],
        "oracle": [
          "    let mut state_set = StateSet::empty();",
          "    assert_eq!(state_set.len(), 0);",
          "    state_set.add(StateID(0.into()));",
          "    assert_eq!(state_set.len(), 1);",
          "    state_set.add(StateID(1.into()));",
          "    assert_eq!(state_set.len(), 2);",
          "    for id in 2..1000 {",
          "    state_set.add(StateID(id.into()));",
          "    }",
          "    assert_eq!(state_set.len(), 1000);",
          "    state_set.clear();",
          "    assert_eq!(state_set.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut state_set = StateSet::empty();",
          "    for id in 0..1000 {",
          "        state_set.add(StateID(id.into()));",
          "    }",
          "    let _ = state_set.len();",
          "    let mut state_set = StateSet::empty();",
          "    assert_eq!(state_set.len(), 0);",
          "    state_set.add(StateID(0.into()));",
          "    assert_eq!(state_set.len(), 1);",
          "    state_set.add(StateID(1.into()));",
          "    assert_eq!(state_set.len(), 2);",
          "    for id in 2..1000 {",
          "    state_set.add(StateID(id.into()));",
          "    }",
          "    assert_eq!(state_set.len(), 1000);",
          "    state_set.clear();",
          "    assert_eq!(state_set.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut state_set = StateSet::empty();",
          "    state_set.add(StateID(0.into()));",
          "    state_set.clear();",
          "    let _ = state_set.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state_set.len(), 0);",
          "    state_set.add(StateID(0.into()));",
          "    assert_eq!(state_set.len(), 1);",
          "    state_set.clear();",
          "    assert!(state_set.is_empty());",
          "    assert_eq!(state_set.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut state_set = StateSet::empty();",
          "    state_set.add(StateID(0.into()));",
          "    state_set.clear();",
          "    let _ = state_set.len();",
          "    assert_eq!(state_set.len(), 0);",
          "    state_set.add(StateID(0.into()));",
          "    assert_eq!(state_set.len(), 1);",
          "    state_set.clear();",
          "    assert!(state_set.is_empty());",
          "    assert_eq!(state_set.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]