[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_class = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'a', end: 'b' },",
          "        ClassUnicodeRange { start: 'c', end: 'd' },",
          "    ]);",
          "    let other_class = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'a', end: 'b' },",
          "        ClassUnicodeRange { start: 'c', end: 'd' },",
          "    ]);",
          "    self_class.intersect(&other_class);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(self_class.ranges(), &[ClassUnicodeRange { start: 'a', end: 'b' }, ClassUnicodeRange { start: 'c', end: 'd' }]);",
          "    assert!(self_class.is_ascii());",
          "    assert_eq!(self_class.minimum_len(), Some(1));",
          "    assert_eq!(self_class.maximum_len(), Some(2));",
          "    assert_eq!(self_class.literal(), None);"
        ],
        "code": [
          "{",
          "    let mut self_class = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'a', end: 'b' },",
          "        ClassUnicodeRange { start: 'c', end: 'd' },",
          "    ]);",
          "    let other_class = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'a', end: 'b' },",
          "        ClassUnicodeRange { start: 'c', end: 'd' },",
          "    ]);",
          "    self_class.intersect(&other_class);",
          "    assert_eq!(self_class.ranges(), &[ClassUnicodeRange { start: 'a', end: 'b' }, ClassUnicodeRange { start: 'c', end: 'd' }]);",
          "    assert!(self_class.is_ascii());",
          "    assert_eq!(self_class.minimum_len(), Some(1));",
          "    assert_eq!(self_class.maximum_len(), Some(2));",
          "    assert_eq!(self_class.literal(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_class = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'a', end: 'd' },",
          "        ClassUnicodeRange { start: 'e', end: 'f' },",
          "    ]);",
          "    let other_class = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'b', end: 'c' },",
          "        ClassUnicodeRange { start: 'g', end: 'h' },",
          "    ]);",
          "    self_class.intersect(&other_class);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(self_class.ranges(), &[ClassUnicodeRange { start: 'b', end: 'c' }]);"
        ],
        "code": [
          "{",
          "    let mut self_class = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'a', end: 'd' },",
          "        ClassUnicodeRange { start: 'e', end: 'f' },",
          "    ]);",
          "    let other_class = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'b', end: 'c' },",
          "        ClassUnicodeRange { start: 'g', end: 'h' },",
          "    ]);",
          "    self_class.intersect(&other_class);",
          "    assert_eq!(self_class.ranges(), &[ClassUnicodeRange { start: 'b', end: 'c' }]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_class = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'a', end: 'b' },",
          "        ClassUnicodeRange { start: 'c', end: 'd' },",
          "    ]);",
          "    let other_class = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'e', end: 'f' },",
          "        ClassUnicodeRange { start: 'g', end: 'h' },",
          "    ]);",
          "    self_class.intersect(&other_class);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(self_class.ranges(), &[ClassUnicodeRange { start: 'a', end: 'b' }, ClassUnicodeRange { start: 'c', end: 'd' }]);",
          "    assert!(self_class.is_ascii());",
          "    assert!(self_class.minimum_len().is_none());",
          "    assert!(self_class.maximum_len().is_none());",
          "    assert!(self_class.literal().is_none());",
          "    assert!(self_class.to_byte_class().is_none());"
        ],
        "code": [
          "{",
          "    let mut self_class = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'a', end: 'b' },",
          "        ClassUnicodeRange { start: 'c', end: 'd' },",
          "    ]);",
          "    let other_class = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'e', end: 'f' },",
          "        ClassUnicodeRange { start: 'g', end: 'h' },",
          "    ]);",
          "    self_class.intersect(&other_class);",
          "    assert_eq!(self_class.ranges(), &[ClassUnicodeRange { start: 'a', end: 'b' }, ClassUnicodeRange { start: 'c', end: 'd' }]);",
          "    assert!(self_class.is_ascii());",
          "    assert!(self_class.minimum_len().is_none());",
          "    assert!(self_class.maximum_len().is_none());",
          "    assert!(self_class.literal().is_none());",
          "    assert!(self_class.to_byte_class().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_class = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'a', end: 'a' },",
          "    ]);",
          "    let other_class = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'a', end: 'b' },",
          "    ]);",
          "    self_class.intersect(&other_class);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(self_class.ranges(), &[ClassUnicodeRange { start: 'a', end: 'a' }]);",
          "    assert_eq!(self_class.set.folded, false);",
          "    assert_eq!(self_class.minimum_len(), Some(1));",
          "    assert_eq!(self_class.maximum_len(), Some(1));"
        ],
        "code": [
          "{",
          "    let mut self_class = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'a', end: 'a' },",
          "    ]);",
          "    let other_class = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'a', end: 'b' },",
          "    ]);",
          "    self_class.intersect(&other_class);",
          "    assert_eq!(self_class.ranges(), &[ClassUnicodeRange { start: 'a', end: 'a' }]);",
          "    assert_eq!(self_class.set.folded, false);",
          "    assert_eq!(self_class.minimum_len(), Some(1));",
          "    assert_eq!(self_class.maximum_len(), Some(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_class = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'a', end: 'c' },",
          "        ClassUnicodeRange { start: 'd', end: 'f' },",
          "    ]);",
          "    let other_class = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'b', end: 'e' },",
          "        ClassUnicodeRange { start: 'g', end: 'h' },",
          "    ]);",
          "    self_class.intersect(&other_class);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(self_class.ranges(), &[ClassUnicodeRange { start: 'b', end: 'c' }]);"
        ],
        "code": [
          "{",
          "    let mut self_class = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'a', end: 'c' },",
          "        ClassUnicodeRange { start: 'd', end: 'f' },",
          "    ]);",
          "    let other_class = ClassUnicode::new(vec![",
          "        ClassUnicodeRange { start: 'b', end: 'e' },",
          "        ClassUnicodeRange { start: 'g', end: 'h' },",
          "    ]);",
          "    self_class.intersect(&other_class);",
          "    assert_eq!(self_class.ranges(), &[ClassUnicodeRange { start: 'b', end: 'c' }]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]