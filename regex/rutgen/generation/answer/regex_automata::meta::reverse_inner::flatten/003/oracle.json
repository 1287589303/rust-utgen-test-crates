[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_capture = Hir::capture(hir::Capture { sub: Hir::empty(), ..Default::default() }); ",
          "    let result = flatten(&empty_capture);",
          "}"
        ],
        "oracle": [
          "    let empty_capture = Hir::capture(hir::Capture { sub: Hir::empty(), ..Default::default() });",
          "    let result = flatten(&empty_capture);",
          "    assert_eq!(result.kind(), HirKind::Empty);"
        ],
        "code": [
          "{",
          "    let empty_capture = Hir::capture(hir::Capture { sub: Hir::empty(), ..Default::default() }); ",
          "    let result = flatten(&empty_capture);",
          "    let empty_capture = Hir::capture(hir::Capture { sub: Hir::empty(), ..Default::default() });",
          "    let result = flatten(&empty_capture);",
          "    assert_eq!(result.kind(), HirKind::Empty);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal_capture = Hir::capture(hir::Capture { sub: Hir::literal(literal::Literal::new(\"test\".into())), ..Default::default() }); ",
          "    let result = flatten(&literal_capture);",
          "}"
        ],
        "oracle": [
          "    let literal_capture = Hir::capture(hir::Capture { sub: Hir::literal(literal::Literal::new(\"test\".into())), ..Default::default() });",
          "    let result = flatten(&literal_capture);",
          "    assert_eq!(result.kind(), HirKind::Literal(hir::Literal(literal::Literal::new(\"test\".into()))));"
        ],
        "code": [
          "{",
          "    let literal_capture = Hir::capture(hir::Capture { sub: Hir::literal(literal::Literal::new(\"test\".into())), ..Default::default() }); ",
          "    let result = flatten(&literal_capture);",
          "    let literal_capture = Hir::capture(hir::Capture { sub: Hir::literal(literal::Literal::new(\"test\".into())), ..Default::default() });",
          "    let result = flatten(&literal_capture);",
          "    assert_eq!(result.kind(), HirKind::Literal(hir::Literal(literal::Literal::new(\"test\".into()))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alternation_capture = Hir::capture(hir::Capture { sub: Hir::alternation(vec![Hir::literal(literal::Literal::new(\"a\".into())), Hir::literal(literal::Literal::new(\"b\".into()))]), ..Default::default() }); ",
          "    let result = flatten(&alternation_capture);",
          "}"
        ],
        "oracle": [
          "    let alternation_capture = Hir::capture(hir::Capture { sub: Hir::alternation(vec![Hir::literal(literal::Literal::new(\"a\".into())), Hir::literal(literal::Literal::new(\"b\".into()))]), ..Default::default() });",
          "    let expected_result = Hir::alternation(vec![Hir::literal(literal::Literal::new(\"a\".into())), Hir::literal(literal::Literal::new(\"b\".into()))]);",
          "    assert_eq!(result, expected_result);"
        ],
        "code": [
          "{",
          "    let alternation_capture = Hir::capture(hir::Capture { sub: Hir::alternation(vec![Hir::literal(literal::Literal::new(\"a\".into())), Hir::literal(literal::Literal::new(\"b\".into()))]), ..Default::default() }); ",
          "    let result = flatten(&alternation_capture);",
          "    let alternation_capture = Hir::capture(hir::Capture { sub: Hir::alternation(vec![Hir::literal(literal::Literal::new(\"a\".into())), Hir::literal(literal::Literal::new(\"b\".into()))]), ..Default::default() });",
          "    let expected_result = Hir::alternation(vec![Hir::literal(literal::Literal::new(\"a\".into())), Hir::literal(literal::Literal::new(\"b\".into()))]);",
          "    assert_eq!(result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repetition_capture = Hir::capture(hir::Capture { sub: Hir::repetition(hir::Repetition::new(Hir::literal(literal::Literal::new(\"abc\".into())), None)), ..Default::default() }); ",
          "    let result = flatten(&repetition_capture);",
          "}"
        ],
        "oracle": [
          "    let repetition_capture = Hir::capture(hir::Capture { sub: Hir::repetition(hir::Repetition::new(Hir::literal(literal::Literal::new(\"abc\".into())), None)), ..Default::default() });",
          "    assert_eq!(result.kind(), HirKind::Repetition);",
          "    assert_eq!(result.as_repetition().sub.kind(), HirKind::Literal);",
          "    assert_eq!(result.as_repetition().sub.as_literal().value, \"abc\");"
        ],
        "code": [
          "{",
          "    let repetition_capture = Hir::capture(hir::Capture { sub: Hir::repetition(hir::Repetition::new(Hir::literal(literal::Literal::new(\"abc\".into())), None)), ..Default::default() }); ",
          "    let result = flatten(&repetition_capture);",
          "    let repetition_capture = Hir::capture(hir::Capture { sub: Hir::repetition(hir::Repetition::new(Hir::literal(literal::Literal::new(\"abc\".into())), None)), ..Default::default() });",
          "    assert_eq!(result.kind(), HirKind::Repetition);",
          "    assert_eq!(result.as_repetition().sub.kind(), HirKind::Literal);",
          "    assert_eq!(result.as_repetition().sub.as_literal().value, \"abc\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]