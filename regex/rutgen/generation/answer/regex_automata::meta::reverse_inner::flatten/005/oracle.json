[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir::look(Hir::empty());",
          "    let _result = flatten(&hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.kind(), HirKind::Look);",
          "    assert!(matches!(_result, Hir::Look(_)));",
          "    assert_eq!(_result, Hir::look(Hir::empty()));",
          "    assert!(Hir::look(Hir::empty()).is_empty());",
          "    assert!(matches!(flatten(&hir), Hir::Look(_)));"
        ],
        "code": [
          "{",
          "    let hir = Hir::look(Hir::empty());",
          "    let _result = flatten(&hir);",
          "    assert_eq!(_result.kind(), HirKind::Look);",
          "    assert!(matches!(_result, Hir::Look(_)));",
          "    assert_eq!(_result, Hir::look(Hir::empty()));",
          "    assert!(Hir::look(Hir::empty()).is_empty());",
          "    assert!(matches!(flatten(&hir), Hir::Look(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir::look(Hir::literal(literal::Literal::from_char('a')));",
          "    let _result = flatten(&hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.kind(), HirKind::Look);",
          "    assert_eq!(_result, Hir::look(Hir::literal(literal::Literal::from_char('a'))));"
        ],
        "code": [
          "{",
          "    let hir = Hir::look(Hir::literal(literal::Literal::from_char('a')));",
          "    let _result = flatten(&hir);",
          "    assert_eq!(_result.kind(), HirKind::Look);",
          "    assert_eq!(_result, Hir::look(Hir::literal(literal::Literal::from_char('a'))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir::look(Hir::class(vec!['a', 'b', 'c']));",
          "    let _result = flatten(&hir);",
          "}"
        ],
        "oracle": [
          "    let hir = Hir::look(Hir::class(vec!['a', 'b', 'c']));",
          "    let expected = Hir::class(vec!['a', 'b', 'c']);",
          "    assert_eq!(_result, expected);"
        ],
        "code": [
          "{",
          "    let hir = Hir::look(Hir::class(vec!['a', 'b', 'c']));",
          "    let _result = flatten(&hir);",
          "    let hir = Hir::look(Hir::class(vec!['a', 'b', 'c']));",
          "    let expected = Hir::class(vec!['a', 'b', 'c']);",
          "    assert_eq!(_result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir::look(Hir::repetition(hir::Repetition::zero_or_more(Hir::literal(literal::Literal::from_char('x')))));",
          "    let _result = flatten(&hir);",
          "}"
        ],
        "oracle": [
          "    let hir = Hir::look(Hir::repetition(hir::Repetition::zero_or_more(Hir::literal(literal::Literal::from_char('x')))));",
          "    let expected = Hir::repetition(hir::Repetition::zero_or_more(Hir::literal(literal::Literal::from_char('x'))));",
          "    assert_eq!(_result, expected);"
        ],
        "code": [
          "{",
          "    let hir = Hir::look(Hir::repetition(hir::Repetition::zero_or_more(Hir::literal(literal::Literal::from_char('x')))));",
          "    let _result = flatten(&hir);",
          "    let hir = Hir::look(Hir::repetition(hir::Repetition::zero_or_more(Hir::literal(literal::Literal::from_char('x')))));",
          "    let expected = Hir::repetition(hir::Repetition::zero_or_more(Hir::literal(literal::Literal::from_char('x'))));",
          "    assert_eq!(_result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let inner_hir = Hir::literal(literal::Literal::from_char('b'));",
          "    let hir = Hir::look(Hir::look(inner_hir));",
          "    let _result = flatten(&hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.kind(), HirKind::Look);",
          "    assert_eq!(_result.sub.kind(), HirKind::Look);",
          "    assert_eq!(_result.sub.sub.kind(), HirKind::Literal(hir::Literal::from_char('b')));",
          "    assert!(matches!(_result, Hir::look(_)));",
          "    assert!(matches!(_result.sub, Hir::look(_)));",
          "    assert!(matches!(_result.sub.sub, Hir::literal(_)));"
        ],
        "code": [
          "{",
          "    let inner_hir = Hir::literal(literal::Literal::from_char('b'));",
          "    let hir = Hir::look(Hir::look(inner_hir));",
          "    let _result = flatten(&hir);",
          "    assert_eq!(_result.kind(), HirKind::Look);",
          "    assert_eq!(_result.sub.kind(), HirKind::Look);",
          "    assert_eq!(_result.sub.sub.kind(), HirKind::Literal(hir::Literal::from_char('b')));",
          "    assert!(matches!(_result, Hir::look(_)));",
          "    assert!(matches!(_result.sub, Hir::look(_)));",
          "    assert!(matches!(_result.sub.sub, Hir::literal(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left = Hir::literal(literal::Literal::from_char('a'));",
          "    let right = Hir::literal(literal::Literal::from_char('b'));",
          "    let hir = Hir::look(Hir::alternation(vec![left, right]));",
          "    let _result = flatten(&hir);",
          "}"
        ],
        "oracle": [
          "    flatten(&Hir::look(Hir::alternation(vec![Hir::literal(literal::Literal::from_char('a')), Hir::literal(literal::Literal::from_char('b'))])));",
          "    ",
          "    _result.kind() == HirKind::Alternation;",
          "    ",
          "    _result.alternations().len() == 2;",
          "    ",
          "    _result.alternations()[0].kind() == HirKind::Literal;",
          "    ",
          "    _result.alternations()[0].literal() == Hir::literal(literal::Literal::from_char('a'));",
          "    ",
          "    _result.alternations()[1].kind() == HirKind::Literal;",
          "    ",
          "    _result.alternations()[1].literal() == Hir::literal(literal::Literal::from_char('b'));"
        ],
        "code": [
          "{",
          "    let left = Hir::literal(literal::Literal::from_char('a'));",
          "    let right = Hir::literal(literal::Literal::from_char('b'));",
          "    let hir = Hir::look(Hir::alternation(vec![left, right]));",
          "    let _result = flatten(&hir);",
          "    flatten(&Hir::look(Hir::alternation(vec![Hir::literal(literal::Literal::from_char('a')), Hir::literal(literal::Literal::from_char('b'))])));",
          "    ",
          "    _result.kind() == HirKind::Alternation;",
          "    ",
          "    _result.alternations().len() == 2;",
          "    ",
          "    _result.alternations()[0].kind() == HirKind::Literal;",
          "    ",
          "    _result.alternations()[0].literal() == Hir::literal(literal::Literal::from_char('a'));",
          "    ",
          "    _result.alternations()[1].kind() == HirKind::Literal;",
          "    ",
          "    _result.alternations()[1].literal() == Hir::literal(literal::Literal::from_char('b'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left = Hir::literal(literal::Literal::from_char('a'));",
          "    let right = Hir::literal(literal::Literal::from_char('b'));",
          "    let hir = Hir::look(Hir::concat(vec![left, right]));",
          "    let _result = flatten(&hir);",
          "}"
        ],
        "oracle": [
          "    HirKind::Look(ref x) => assert_eq!(flatten(&hir), Hir::look(Hir::concat(vec![Hir::literal(literal::Literal::from_char('a')), Hir::literal(literal::Literal::from_char('b'))])));"
        ],
        "code": [
          "{",
          "    let left = Hir::literal(literal::Literal::from_char('a'));",
          "    let right = Hir::literal(literal::Literal::from_char('b'));",
          "    let hir = Hir::look(Hir::concat(vec![left, right]));",
          "    let _result = flatten(&hir);",
          "    HirKind::Look(ref x) => assert_eq!(flatten(&hir), Hir::look(Hir::concat(vec![Hir::literal(literal::Literal::from_char('a')), Hir::literal(literal::Literal::from_char('b'))])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]