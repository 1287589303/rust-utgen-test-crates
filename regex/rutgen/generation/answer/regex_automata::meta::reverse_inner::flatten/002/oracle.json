[
  {
    "uses": [
      "use regex_syntax::hir::Hir;",
      "use regex_syntax::hir::Capture;",
      "use regex_syntax::hir::Literal;",
      "use regex_syntax::hir::Repetition;",
      "use regex_syntax::hir::Class;",
      "use regex_syntax::hir::HirKind;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use regex_syntax::hir::{Hir, HirKind, Class, Literal, Repetition, Capture};",
          "",
          "    let sub_capture = Hir::literal(\"inner\".to_string());",
          "    let capture_hir = Hir::capture(Capture::new(sub_capture));",
          "",
          "    let literal_hir = Hir::literal(\"outer\".to_string());",
          "    let class_hir = Hir::class(Class::empty());",
          "    ",
          "    let repetition_hir = Hir::repetition(Repetition::new(Hir::literal(\"repeat\".to_string())));",
          "",
          "    let concat_hir = Hir::concat(vec![literal_hir, class_hir, repetition_hir, capture_hir]);",
          "   ",
          "    let result = flatten(&concat_hir);",
          "}"
        ],
        "oracle": [
          "    let expected_empty_hir = Hir::empty();",
          "    let expected_literal_hir = Hir::literal(\"outer\".to_string());",
          "    let expected_class_hir = Hir::class(Class::empty());",
          "    let expected_repetition_hir = Hir::repetition(Repetition::new(Hir::literal(\"repeat\".to_string())));",
          "    let expected_inner_hir = Hir::literal(\"inner\".to_string());",
          "    let expected_concat_hir = Hir::concat(vec![expected_literal_hir, expected_class_hir, expected_repetition_hir, expected_inner_hir]);",
          "    ",
          "    assert_eq!(result, expected_concat_hir);"
        ],
        "code": [
          "{",
          "    use regex_syntax::hir::{Hir, HirKind, Class, Literal, Repetition, Capture};",
          "",
          "    let sub_capture = Hir::literal(\"inner\".to_string());",
          "    let capture_hir = Hir::capture(Capture::new(sub_capture));",
          "",
          "    let literal_hir = Hir::literal(\"outer\".to_string());",
          "    let class_hir = Hir::class(Class::empty());",
          "    ",
          "    let repetition_hir = Hir::repetition(Repetition::new(Hir::literal(\"repeat\".to_string())));",
          "",
          "    let concat_hir = Hir::concat(vec![literal_hir, class_hir, repetition_hir, capture_hir]);",
          "   ",
          "    let result = flatten(&concat_hir);",
          "    let expected_empty_hir = Hir::empty();",
          "    let expected_literal_hir = Hir::literal(\"outer\".to_string());",
          "    let expected_class_hir = Hir::class(Class::empty());",
          "    let expected_repetition_hir = Hir::repetition(Repetition::new(Hir::literal(\"repeat\".to_string())));",
          "    let expected_inner_hir = Hir::literal(\"inner\".to_string());",
          "    let expected_concat_hir = Hir::concat(vec![expected_literal_hir, expected_class_hir, expected_repetition_hir, expected_inner_hir]);",
          "    ",
          "    assert_eq!(result, expected_concat_hir);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use regex_syntax::hir::{Hir, HirKind, Class, Literal, Repetition, Capture};",
          "",
          "    let inner_capture = Hir::literal(\"inner_capture\".to_string());",
          "    let outer_capture = Hir::capture(Capture::new(inner_capture));",
          "",
          "    let class_hir = Hir::class(Class::empty());",
          "",
          "    let concat_hir = Hir::concat(vec![outer_capture, class_hir]);",
          "    ",
          "    let result = flatten(&concat_hir);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(result.kind(), HirKind::Concat(_)));",
          "    assert!(matches!(result.kind(), HirKind::Concat(xs) if xs.len() == 2));",
          "    assert!(matches!(result.kind(), HirKind::Concat(xs) if matches!(xs[0].kind(), HirKind::Literal(_))));",
          "    assert!(matches!(result.kind(), HirKind::Concat(xs) if matches!(xs[1].kind(), HirKind::Class(_)));"
        ],
        "code": [
          "{",
          "    use regex_syntax::hir::{Hir, HirKind, Class, Literal, Repetition, Capture};",
          "",
          "    let inner_capture = Hir::literal(\"inner_capture\".to_string());",
          "    let outer_capture = Hir::capture(Capture::new(inner_capture));",
          "",
          "    let class_hir = Hir::class(Class::empty());",
          "",
          "    let concat_hir = Hir::concat(vec![outer_capture, class_hir]);",
          "    ",
          "    let result = flatten(&concat_hir);",
          "    assert!(matches!(result.kind(), HirKind::Concat(_)));",
          "    assert!(matches!(result.kind(), HirKind::Concat(xs) if xs.len() == 2));",
          "    assert!(matches!(result.kind(), HirKind::Concat(xs) if matches!(xs[0].kind(), HirKind::Literal(_))));",
          "    assert!(matches!(result.kind(), HirKind::Concat(xs) if matches!(xs[1].kind(), HirKind::Class(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use regex_syntax::hir::{Hir, HirKind, Class, Literal, Repetition, Capture};",
          "",
          "    let capture_hir = Hir::capture(Capture::new(Hir::literal(\"dropped\".to_string())));",
          "",
          "    let literal_hir = Hir::literal(\"text\".to_string());",
          "    let class_hir = Hir::class(Class::from_range(b'a', b'z'));",
          "    let repetition_hir = Hir::repetition(Repetition::new(Hir::literal(\"one_or_more\".to_string())));",
          "",
          "    let concat_hir = Hir::concat(vec![literal_hir, class_hir, repetition_hir, capture_hir]);",
          "    ",
          "    let result = flatten(&concat_hir);",
          "}"
        ],
        "oracle": [
          "    let expected_result = Hir::concat(vec![Hir::literal(\"text\".to_string()), Hir::class(Class::from_range(b'a', b'z')), Hir::repetition(Repetition::new(Hir::literal(\"one_or_more\".to_string())))]);",
          "    assert_eq!(result, expected_result);"
        ],
        "code": [
          "{",
          "    use regex_syntax::hir::{Hir, HirKind, Class, Literal, Repetition, Capture};",
          "",
          "    let capture_hir = Hir::capture(Capture::new(Hir::literal(\"dropped\".to_string())));",
          "",
          "    let literal_hir = Hir::literal(\"text\".to_string());",
          "    let class_hir = Hir::class(Class::from_range(b'a', b'z'));",
          "    let repetition_hir = Hir::repetition(Repetition::new(Hir::literal(\"one_or_more\".to_string())));",
          "",
          "    let concat_hir = Hir::concat(vec![literal_hir, class_hir, repetition_hir, capture_hir]);",
          "    ",
          "    let result = flatten(&concat_hir);",
          "    let expected_result = Hir::concat(vec![Hir::literal(\"text\".to_string()), Hir::class(Class::from_range(b'a', b'z')), Hir::repetition(Repetition::new(Hir::literal(\"one_or_more\".to_string())))]);",
          "    assert_eq!(result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]