[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lit_hir = Hir::literal(literal::Literal::from('a'));",
          "    let repetition_hir = Hir::repetition(hir::Repetition::new(lit_hir, 1..=3));",
          "    let flattened_hir = flatten(&repetition_hir);",
          "}"
        ],
        "oracle": [
          "    flatten(&Hir::repetition(hir::Repetition::new(Hir::literal(literal::Literal::from('a')), 1..=3))) == Hir::repetition(hir::Repetition::new(Hir::literal(literal::Literal::from('a')), 1..=3))",
          "    flatten(&Hir::repetition(hir::Repetition::new(Hir::literal(literal::Literal::from('a')), 0..=3))) == Hir::repetition(hir::Repetition::new(Hir::literal(literal::Literal::from('a')), 0..=3))",
          "    flatten(&Hir::repetition(hir::Repetition::new(Hir::class(vec!['a', 'b']), 1..=2))) == Hir::repetition(hir::Repetition::new(Hir::class(vec!['a', 'b']), 1..=2))",
          "    flatten(&Hir::repetition(hir::Repetition::new(Hir::look(Hir::literal(literal::Literal::from('c'))), 2..=4))) == Hir::repetition(hir::Repetition::new(Hir::look(Hir::literal(literal::Literal::from('c'))), 2..=4))",
          "    flatten(&Hir::repetition(hir::Repetition::new(Hir::concatenation(vec![Hir::literal(literal::Literal::from('d')), Hir::literal(literal::Literal::from('e'))]), 1..=1))) == Hir::repetition(hir::Repetition::new(Hir::concatenation(vec![Hir::literal(literal::Literal::from('d')), Hir::literal(literal::Literal::from('e'))]), 1..=1))"
        ],
        "code": [
          "{",
          "    let lit_hir = Hir::literal(literal::Literal::from('a'));",
          "    let repetition_hir = Hir::repetition(hir::Repetition::new(lit_hir, 1..=3));",
          "    let flattened_hir = flatten(&repetition_hir);",
          "    flatten(&Hir::repetition(hir::Repetition::new(Hir::literal(literal::Literal::from('a')), 1..=3))) == Hir::repetition(hir::Repetition::new(Hir::literal(literal::Literal::from('a')), 1..=3))",
          "    flatten(&Hir::repetition(hir::Repetition::new(Hir::literal(literal::Literal::from('a')), 0..=3))) == Hir::repetition(hir::Repetition::new(Hir::literal(literal::Literal::from('a')), 0..=3))",
          "    flatten(&Hir::repetition(hir::Repetition::new(Hir::class(vec!['a', 'b']), 1..=2))) == Hir::repetition(hir::Repetition::new(Hir::class(vec!['a', 'b']), 1..=2))",
          "    flatten(&Hir::repetition(hir::Repetition::new(Hir::look(Hir::literal(literal::Literal::from('c'))), 2..=4))) == Hir::repetition(hir::Repetition::new(Hir::look(Hir::literal(literal::Literal::from('c'))), 2..=4))",
          "    flatten(&Hir::repetition(hir::Repetition::new(Hir::concatenation(vec![Hir::literal(literal::Literal::from('d')), Hir::literal(literal::Literal::from('e'))]), 1..=1))) == Hir::repetition(hir::Repetition::new(Hir::concatenation(vec![Hir::literal(literal::Literal::from('d')), Hir::literal(literal::Literal::from('e'))]), 1..=1))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_hir = Hir::empty();",
          "    let repetition_hir = Hir::repetition(hir::Repetition::new(empty_hir, 1..=3));",
          "    let flattened_hir = flatten(&repetition_hir);",
          "}"
        ],
        "oracle": [
          "    assert!(flattened_hir.kind() == HirKind::Repetition(hir::Repetition::new(Hir::empty(), 1..=3)));",
          "    assert!(matches!(flattened_hir.kind(), HirKind::Repetition(_)));",
          "    assert!(flattened_hir.to_string() == \"1..=3\");",
          "    assert!(flattened_hir.sub().kind() == HirKind::Empty);"
        ],
        "code": [
          "{",
          "    let empty_hir = Hir::empty();",
          "    let repetition_hir = Hir::repetition(hir::Repetition::new(empty_hir, 1..=3));",
          "    let flattened_hir = flatten(&repetition_hir);",
          "    assert!(flattened_hir.kind() == HirKind::Repetition(hir::Repetition::new(Hir::empty(), 1..=3)));",
          "    assert!(matches!(flattened_hir.kind(), HirKind::Repetition(_)));",
          "    assert!(flattened_hir.to_string() == \"1..=3\");",
          "    assert!(flattened_hir.sub().kind() == HirKind::Empty);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nested_repetition_hir = Hir::repetition(hir::Repetition::new(Hir::literal(literal::Literal::from('b')), 1..=2));",
          "    let repetition_hir = Hir::repetition(hir::Repetition::new(nested_repetition_hir, 1..=3));",
          "    let flattened_hir = flatten(&repetition_hir);",
          "}"
        ],
        "oracle": [
          "    flatten(&Hir::repetition(hir::Repetition::new(Hir::literal(literal::Literal::from('b')), 1..=2))) == Hir::literal(literal::Literal::from('b'))",
          "    flatten(&Hir::repetition(hir::Repetition::new(Hir::repetition(hir::Repetition::new(Hir::literal(literal::Literal::from('b')), 1..=2)), 1..=3))) == Hir::literal(literal::Literal::from('b'))"
        ],
        "code": [
          "{",
          "    let nested_repetition_hir = Hir::repetition(hir::Repetition::new(Hir::literal(literal::Literal::from('b')), 1..=2));",
          "    let repetition_hir = Hir::repetition(hir::Repetition::new(nested_repetition_hir, 1..=3));",
          "    let flattened_hir = flatten(&repetition_hir);",
          "    flatten(&Hir::repetition(hir::Repetition::new(Hir::literal(literal::Literal::from('b')), 1..=2))) == Hir::literal(literal::Literal::from('b'))",
          "    flatten(&Hir::repetition(hir::Repetition::new(Hir::repetition(hir::Repetition::new(Hir::literal(literal::Literal::from('b')), 1..=2)), 1..=3))) == Hir::literal(literal::Literal::from('b'))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alt_hir = Hir::alternation(vec![",
          "        Hir::literal(literal::Literal::from('c')),",
          "        Hir::literal(literal::Literal::from('d')),",
          "    ]);",
          "    let repetition_hir = Hir::repetition(hir::Repetition::new(alt_hir, 1..=3));",
          "    let flattened_hir = flatten(&repetition_hir);",
          "}"
        ],
        "oracle": [
          "    flatten(&Hir::repetition(hir::Repetition::new(Hir::literal(literal::Literal::from('c')), 1..=3))).kind() == HirKind::Alternation",
          "    flatten(&Hir::repetition(hir::Repetition::new(Hir::literal(literal::Literal::from('d')), 1..=3))).kind() == HirKind::Alternation",
          "    flatten(&Hir::repetition(hir::Repetition::new(Hir::alternation(vec![Hir::literal(literal::Literal::from('c')), Hir::literal(literal::Literal::from('d'))]), 1..=3))).kind() == HirKind::Alternation",
          "    flatten(&Hir::repetition(hir::Repetition::new(Hir::class(vec![b'a', b'b', b'c'].into_iter().collect()), 1..=3))).kind() == HirKind::Class"
        ],
        "code": [
          "{",
          "    let alt_hir = Hir::alternation(vec![",
          "        Hir::literal(literal::Literal::from('c')),",
          "        Hir::literal(literal::Literal::from('d')),",
          "    ]);",
          "    let repetition_hir = Hir::repetition(hir::Repetition::new(alt_hir, 1..=3));",
          "    let flattened_hir = flatten(&repetition_hir);",
          "    flatten(&Hir::repetition(hir::Repetition::new(Hir::literal(literal::Literal::from('c')), 1..=3))).kind() == HirKind::Alternation",
          "    flatten(&Hir::repetition(hir::Repetition::new(Hir::literal(literal::Literal::from('d')), 1..=3))).kind() == HirKind::Alternation",
          "    flatten(&Hir::repetition(hir::Repetition::new(Hir::alternation(vec![Hir::literal(literal::Literal::from('c')), Hir::literal(literal::Literal::from('d'))]), 1..=3))).kind() == HirKind::Alternation",
          "    flatten(&Hir::repetition(hir::Repetition::new(Hir::class(vec![b'a', b'b', b'c'].into_iter().collect()), 1..=3))).kind() == HirKind::Class",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let capture_hir = Hir::capture(hir::Capture { sub: Box::new(Hir::literal(literal::Literal::from('e'))), name: None });",
          "    let repetition_hir = Hir::repetition(hir::Repetition::new(capture_hir, 1..=3));",
          "    let flattened_hir = flatten(&repetition_hir);",
          "}"
        ],
        "oracle": [
          "    let capture_hir = Hir::capture(hir::Capture { sub: Box::new(Hir::literal(literal::Literal::from('e'))), name: None });",
          "    let repetition_hir = Hir::repetition(hir::Repetition::new(capture_hir, 1..=3));",
          "    let flattened_hir = flatten(&repetition_hir);",
          "    assert_eq!(flattened_hir.kind(), HirKind::Repetition);",
          "    assert_eq!(flattened_hir.sub.kind(), HirKind::Literal);",
          "    assert_eq!(flattened_hir.sub.as_literal().unwrap().to_string(), \"e\");",
          "    assert!(matches!(flattened_hir.range(), 1..=3));"
        ],
        "code": [
          "{",
          "    let capture_hir = Hir::capture(hir::Capture { sub: Box::new(Hir::literal(literal::Literal::from('e'))), name: None });",
          "    let repetition_hir = Hir::repetition(hir::Repetition::new(capture_hir, 1..=3));",
          "    let flattened_hir = flatten(&repetition_hir);",
          "    let capture_hir = Hir::capture(hir::Capture { sub: Box::new(Hir::literal(literal::Literal::from('e'))), name: None });",
          "    let repetition_hir = Hir::repetition(hir::Repetition::new(capture_hir, 1..=3));",
          "    let flattened_hir = flatten(&repetition_hir);",
          "    assert_eq!(flattened_hir.kind(), HirKind::Repetition);",
          "    assert_eq!(flattened_hir.sub.kind(), HirKind::Literal);",
          "    assert_eq!(flattened_hir.sub.as_literal().unwrap().to_string(), \"e\");",
          "    assert!(matches!(flattened_hir.range(), 1..=3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]