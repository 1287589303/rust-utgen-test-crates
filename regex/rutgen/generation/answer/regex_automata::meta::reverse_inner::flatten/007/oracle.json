[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ascii_literal = Hir::literal(literal::Literal::new(\"test\".to_string()));",
          "    let result = flatten(&ascii_literal);",
          "}"
        ],
        "oracle": [
          "    let ascii_literal = Hir::literal(literal::Literal::new(\"test\".to_string()));",
          "    let expected = Hir::literal(literal::Literal::new(\"test\".to_string()));",
          "    let result = flatten(&ascii_literal);",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let ascii_literal = Hir::literal(literal::Literal::new(\"test\".to_string()));",
          "    let result = flatten(&ascii_literal);",
          "    let ascii_literal = Hir::literal(literal::Literal::new(\"test\".to_string()));",
          "    let expected = Hir::literal(literal::Literal::new(\"test\".to_string()));",
          "    let result = flatten(&ascii_literal);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let utf8_literal = Hir::literal(literal::Literal::new(\"你好\".to_string()));",
          "    let result = flatten(&utf8_literal);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind(), HirKind::Literal(literal::Literal::new(\"你好\".to_string())));",
          "    assert!(match result.kind() { HirKind::Literal(_) => true, _ => false });",
          "    assert_eq!(result, utf8_literal);"
        ],
        "code": [
          "{",
          "    let utf8_literal = Hir::literal(literal::Literal::new(\"你好\".to_string()));",
          "    let result = flatten(&utf8_literal);",
          "    assert_eq!(result.kind(), HirKind::Literal(literal::Literal::new(\"你好\".to_string())));",
          "    assert!(match result.kind() { HirKind::Literal(_) => true, _ => false });",
          "    assert_eq!(result, utf8_literal);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_literal = Hir::literal(literal::Literal::new(\"\".to_string()));",
          "    let result = flatten(&empty_literal);",
          "}"
        ],
        "oracle": [
          "    let empty_literal = Hir::literal(literal::Literal::new(\"\".to_string()));",
          "    let result = flatten(&empty_literal);",
          "    assert_eq!(result.kind(), HirKind::Literal(literal::Literal::new(\"\".to_string())));",
          "    assert!(matches!(result, Hir::literal(_)));",
          "    assert_eq!(flatten(&Hir::empty()).kind(), HirKind::Empty);",
          "    assert_eq!(flatten(&Hir::class(vec!['a'])).kind(), HirKind::Class(vec!['a']));"
        ],
        "code": [
          "{",
          "    let empty_literal = Hir::literal(literal::Literal::new(\"\".to_string()));",
          "    let result = flatten(&empty_literal);",
          "    let empty_literal = Hir::literal(literal::Literal::new(\"\".to_string()));",
          "    let result = flatten(&empty_literal);",
          "    assert_eq!(result.kind(), HirKind::Literal(literal::Literal::new(\"\".to_string())));",
          "    assert!(matches!(result, Hir::literal(_)));",
          "    assert_eq!(flatten(&Hir::empty()).kind(), HirKind::Empty);",
          "    assert_eq!(flatten(&Hir::class(vec!['a'])).kind(), HirKind::Class(vec!['a']));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let large_literal = Hir::literal(literal::Literal::new(\"a\".repeat(1000)));",
          "    let result = flatten(&large_literal);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind(), HirKind::Literal(literal::Literal::new(\"a\".repeat(1000)).clone()));"
        ],
        "code": [
          "{",
          "    let large_literal = Hir::literal(literal::Literal::new(\"a\".repeat(1000)));",
          "    let result = flatten(&large_literal);",
          "    assert_eq!(result.kind(), HirKind::Literal(literal::Literal::new(\"a\".repeat(1000)).clone()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]