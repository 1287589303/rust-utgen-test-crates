[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Empty,",
          "        props: Properties::empty(),",
          "    };",
          "    let _ = hir.into_parts();",
          "}"
        ],
        "oracle": [
          "    let hir = Hir { kind: HirKind::Empty, props: Properties::empty() };",
          "    assert_eq!(hir.into_parts(), (HirKind::Empty, Properties::empty()));",
          "    let hir_literal = Hir { kind: HirKind::Literal(Literal::new(\"test\")), props: Properties::literal(&Literal::new(\"test\")) };",
          "    assert_eq!(hir_literal.into_parts().0, HirKind::Literal(Literal::new(\"test\")));",
          "    let hir_class = Hir { kind: HirKind::Class(Class::new(vec!['a', 'b', 'c'])), props: Properties::class(&Class::new(vec!['a', 'b', 'c'])) };",
          "    assert_eq!(hir_class.into_parts().0, HirKind::Class(Class::new(vec!['a', 'b', 'c'])));",
          "    let hir_repetition = Hir { kind: HirKind::Repetition(Repetition::new(hir_class.clone(), 1, 2)), props: Properties::repetition(&Repetition::new(hir_class.clone(), 1, 2)) };",
          "    assert_eq!(hir_repetition.into_parts().0, HirKind::Repetition(Repetition::new(hir_class.clone(), 1, 2)));",
          "    let hir_concat = Hir { kind: HirKind::Concat(vec![hir_literal.clone(), hir_class.clone()]), props: Properties::concat(&[hir_literal.clone(), hir_class.clone()]) };",
          "    assert_eq!(hir_concat.into_parts().0, HirKind::Concat(vec![hir_literal.clone(), hir_class.clone()]));",
          "    let hir_alternation = Hir { kind: HirKind::Alternation(vec![hir_literal.clone(), hir_class.clone()]), props: Properties::alternation(&[hir_literal.clone(), hir_class.clone()]) };",
          "    assert_eq!(hir_alternation.into_parts().0, HirKind::Alternation(vec![hir_literal.clone(), hir_class.clone()]));",
          "    let hir_capture = Hir { kind: HirKind::Capture(Capture::new(hir_concat.clone())), props: Properties::capture(&Capture::new(hir_concat.clone())) };",
          "    assert_eq!(hir_capture.into_parts().0, HirKind::Capture(Capture::new(hir_concat.clone())));",
          "    let hir_look = Hir { kind: HirKind::Look(Look::new(hir_class.clone())), props: Properties::look(Look::new(hir_class.clone())) };",
          "    assert_eq!(hir_look.into_parts().0, HirKind::Look(Look::new(hir_class.clone())));"
        ],
        "code": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Empty,",
          "        props: Properties::empty(),",
          "    };",
          "    let _ = hir.into_parts();",
          "    let hir = Hir { kind: HirKind::Empty, props: Properties::empty() };",
          "    assert_eq!(hir.into_parts(), (HirKind::Empty, Properties::empty()));",
          "    let hir_literal = Hir { kind: HirKind::Literal(Literal::new(\"test\")), props: Properties::literal(&Literal::new(\"test\")) };",
          "    assert_eq!(hir_literal.into_parts().0, HirKind::Literal(Literal::new(\"test\")));",
          "    let hir_class = Hir { kind: HirKind::Class(Class::new(vec!['a', 'b', 'c'])), props: Properties::class(&Class::new(vec!['a', 'b', 'c'])) };",
          "    assert_eq!(hir_class.into_parts().0, HirKind::Class(Class::new(vec!['a', 'b', 'c'])));",
          "    let hir_repetition = Hir { kind: HirKind::Repetition(Repetition::new(hir_class.clone(), 1, 2)), props: Properties::repetition(&Repetition::new(hir_class.clone(), 1, 2)) };",
          "    assert_eq!(hir_repetition.into_parts().0, HirKind::Repetition(Repetition::new(hir_class.clone(), 1, 2)));",
          "    let hir_concat = Hir { kind: HirKind::Concat(vec![hir_literal.clone(), hir_class.clone()]), props: Properties::concat(&[hir_literal.clone(), hir_class.clone()]) };",
          "    assert_eq!(hir_concat.into_parts().0, HirKind::Concat(vec![hir_literal.clone(), hir_class.clone()]));",
          "    let hir_alternation = Hir { kind: HirKind::Alternation(vec![hir_literal.clone(), hir_class.clone()]), props: Properties::alternation(&[hir_literal.clone(), hir_class.clone()]) };",
          "    assert_eq!(hir_alternation.into_parts().0, HirKind::Alternation(vec![hir_literal.clone(), hir_class.clone()]));",
          "    let hir_capture = Hir { kind: HirKind::Capture(Capture::new(hir_concat.clone())), props: Properties::capture(&Capture::new(hir_concat.clone())) };",
          "    assert_eq!(hir_capture.into_parts().0, HirKind::Capture(Capture::new(hir_concat.clone())));",
          "    let hir_look = Hir { kind: HirKind::Look(Look::new(hir_class.clone())), props: Properties::look(Look::new(hir_class.clone())) };",
          "    assert_eq!(hir_look.into_parts().0, HirKind::Look(Look::new(hir_class.clone())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Literal; // Placeholder for the Literal struct",
          "    let literal = Literal; // Initialize as needed",
          "    let hir = Hir {",
          "        kind: HirKind::Literal(literal),",
          "        props: Properties::literal(&literal),",
          "    };",
          "    let _ = hir.into_parts();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.kind(), HirKind::Empty);",
          "    assert_eq!(hir.properties(), &Properties::empty());"
        ],
        "code": [
          "{",
          "    struct Literal; // Placeholder for the Literal struct",
          "    let literal = Literal; // Initialize as needed",
          "    let hir = Hir {",
          "        kind: HirKind::Literal(literal),",
          "        props: Properties::literal(&literal),",
          "    };",
          "    let _ = hir.into_parts();",
          "    assert_eq!(hir.kind(), HirKind::Empty);",
          "    assert_eq!(hir.properties(), &Properties::empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Class; // Placeholder for the Class struct",
          "    let class = Class; // Initialize as needed",
          "    let hir = Hir {",
          "        kind: HirKind::Class(class),",
          "        props: Properties::class(&class),",
          "    };",
          "    let _ = hir.into_parts();",
          "}"
        ],
        "oracle": [
          "    let class = Class;",
          "    let hir = Hir { kind: HirKind::Class(class), props: Properties::class(&class) };",
          "    let (kind, props) = hir.into_parts();",
          "    assert_eq!(kind, HirKind::Empty);",
          "    assert_eq!(props, Properties::empty());"
        ],
        "code": [
          "{",
          "    struct Class; // Placeholder for the Class struct",
          "    let class = Class; // Initialize as needed",
          "    let hir = Hir {",
          "        kind: HirKind::Class(class),",
          "        props: Properties::class(&class),",
          "    };",
          "    let _ = hir.into_parts();",
          "    let class = Class;",
          "    let hir = Hir { kind: HirKind::Class(class), props: Properties::class(&class) };",
          "    let (kind, props) = hir.into_parts();",
          "    assert_eq!(kind, HirKind::Empty);",
          "    assert_eq!(props, Properties::empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Look; // Placeholder for the Look struct",
          "    let look = Look; // Initialize as needed",
          "    let hir = Hir {",
          "        kind: HirKind::Look(look),",
          "        props: Properties::look(look),",
          "    };",
          "    let _ = hir.into_parts();",
          "}"
        ],
        "oracle": [
          "    let hir = Hir { kind: HirKind::Look(look), props: Properties::look(look) };",
          "    let (kind, props) = hir.into_parts();",
          "    assert_eq!(kind, HirKind::Empty);",
          "    assert_eq!(props, Properties::empty());"
        ],
        "code": [
          "{",
          "    struct Look; // Placeholder for the Look struct",
          "    let look = Look; // Initialize as needed",
          "    let hir = Hir {",
          "        kind: HirKind::Look(look),",
          "        props: Properties::look(look),",
          "    };",
          "    let _ = hir.into_parts();",
          "    let hir = Hir { kind: HirKind::Look(look), props: Properties::look(look) };",
          "    let (kind, props) = hir.into_parts();",
          "    assert_eq!(kind, HirKind::Empty);",
          "    assert_eq!(props, Properties::empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Repetition; // Placeholder for the Repetition struct",
          "    let repetition = Repetition; // Initialize as needed",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        props: Properties::repetition(&repetition),",
          "    };",
          "    let _ = hir.into_parts();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_.0, HirKind::Empty);",
          "    assert_eq!(_.1, Properties::empty());",
          "    assert_ne!(_.0, HirKind::Repetition(repetition));",
          "    assert_ne!(_.1, Properties::repetition(&repetition));"
        ],
        "code": [
          "{",
          "    struct Repetition; // Placeholder for the Repetition struct",
          "    let repetition = Repetition; // Initialize as needed",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        props: Properties::repetition(&repetition),",
          "    };",
          "    let _ = hir.into_parts();",
          "    assert_eq!(_.0, HirKind::Empty);",
          "    assert_eq!(_.1, Properties::empty());",
          "    assert_ne!(_.0, HirKind::Repetition(repetition));",
          "    assert_ne!(_.1, Properties::repetition(&repetition));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Capture; // Placeholder for the Capture struct",
          "    let capture = Capture; // Initialize as needed",
          "    let hir = Hir {",
          "        kind: HirKind::Capture(capture),",
          "        props: Properties::capture(&capture),",
          "    };",
          "    let _ = hir.into_parts();",
          "}"
        ],
        "oracle": [
          "    let capture = Capture;",
          "    let hir = Hir { kind: HirKind::Capture(capture), props: Properties::capture(&capture) };",
          "    let (kind, props) = hir.into_parts();",
          "    assert_eq!(kind, HirKind::Empty);",
          "    assert_eq!(props, Properties::empty());"
        ],
        "code": [
          "{",
          "    struct Capture; // Placeholder for the Capture struct",
          "    let capture = Capture; // Initialize as needed",
          "    let hir = Hir {",
          "        kind: HirKind::Capture(capture),",
          "        props: Properties::capture(&capture),",
          "    };",
          "    let _ = hir.into_parts();",
          "    let capture = Capture;",
          "    let hir = Hir { kind: HirKind::Capture(capture), props: Properties::capture(&capture) };",
          "    let (kind, props) = hir.into_parts();",
          "    assert_eq!(kind, HirKind::Empty);",
          "    assert_eq!(props, Properties::empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub_expressions = vec![",
          "        Hir {",
          "            kind: HirKind::Empty,",
          "            props: Properties::empty(),",
          "        },",
          "        Hir {",
          "            kind: HirKind::Literal(Literal),",
          "            props: Properties::literal(&Literal),",
          "        },",
          "    ];",
          "    let hir = Hir {",
          "        kind: HirKind::Concat(sub_expressions),",
          "        props: Properties::concat(&sub_expressions),",
          "    };",
          "    let _ = hir.into_parts();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.into_parts(), (HirKind::Concat(sub_expressions.clone()), Properties::concat(&sub_expressions)));",
          "    assert_eq!(hir.kind(), HirKind::Concat(sub_expressions.clone()));",
          "    assert_eq!(hir.properties(), &Properties::concat(&sub_expressions));",
          "    assert_eq!(hir.props.0.minimum_len, Some(0));",
          "    assert_eq!(hir.props.0.maximum_len, Some(0));",
          "    assert!(hir.props.0.utf8);",
          "    assert_eq!(hir.props.0.explicit_captures_len, 0);",
          "    assert_eq!(hir.props.0.static_explicit_captures_len, Some(0));",
          "    assert!(!hir.props.0.literal);",
          "    assert!(!hir.props.0.alternation_literal);"
        ],
        "code": [
          "{",
          "    let sub_expressions = vec![",
          "        Hir {",
          "            kind: HirKind::Empty,",
          "            props: Properties::empty(),",
          "        },",
          "        Hir {",
          "            kind: HirKind::Literal(Literal),",
          "            props: Properties::literal(&Literal),",
          "        },",
          "    ];",
          "    let hir = Hir {",
          "        kind: HirKind::Concat(sub_expressions),",
          "        props: Properties::concat(&sub_expressions),",
          "    };",
          "    let _ = hir.into_parts();",
          "    assert_eq!(hir.into_parts(), (HirKind::Concat(sub_expressions.clone()), Properties::concat(&sub_expressions)));",
          "    assert_eq!(hir.kind(), HirKind::Concat(sub_expressions.clone()));",
          "    assert_eq!(hir.properties(), &Properties::concat(&sub_expressions));",
          "    assert_eq!(hir.props.0.minimum_len, Some(0));",
          "    assert_eq!(hir.props.0.maximum_len, Some(0));",
          "    assert!(hir.props.0.utf8);",
          "    assert_eq!(hir.props.0.explicit_captures_len, 0);",
          "    assert_eq!(hir.props.0.static_explicit_captures_len, Some(0));",
          "    assert!(!hir.props.0.literal);",
          "    assert!(!hir.props.0.alternation_literal);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub_expressions = vec![",
          "        Hir {",
          "            kind: HirKind::Empty,",
          "            props: Properties::empty(),",
          "        },",
          "        Hir {",
          "            kind: HirKind::Literal(Literal),",
          "            props: Properties::literal(&Literal),",
          "        },",
          "    ];",
          "    let hir = Hir {",
          "        kind: HirKind::Alternation(sub_expressions),",
          "        props: Properties::alternation(&sub_expressions),",
          "    };",
          "    let _ = hir.into_parts();",
          "}"
        ],
        "oracle": [
          "    let expected_kind = HirKind::Alternation(vec![",
          "    HirKind::Empty,",
          "    HirKind::Literal(Literal),",
          "    ]);",
          "    let expected_props = Properties::alternation(&sub_expressions);",
          "    let (kind, props) = hir.into_parts();",
          "    assert_eq!(kind, expected_kind);",
          "    assert_eq!(props, expected_props);"
        ],
        "code": [
          "{",
          "    let sub_expressions = vec![",
          "        Hir {",
          "            kind: HirKind::Empty,",
          "            props: Properties::empty(),",
          "        },",
          "        Hir {",
          "            kind: HirKind::Literal(Literal),",
          "            props: Properties::literal(&Literal),",
          "        },",
          "    ];",
          "    let hir = Hir {",
          "        kind: HirKind::Alternation(sub_expressions),",
          "        props: Properties::alternation(&sub_expressions),",
          "    };",
          "    let _ = hir.into_parts();",
          "    let expected_kind = HirKind::Alternation(vec![",
          "    HirKind::Empty,",
          "    HirKind::Literal(Literal),",
          "    ]);",
          "    let expected_props = Properties::alternation(&sub_expressions);",
          "    let (kind, props) = hir.into_parts();",
          "    assert_eq!(kind, expected_kind);",
          "    assert_eq!(props, expected_props);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]