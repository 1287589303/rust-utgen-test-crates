[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lit1 = Literal::exact(b\"hello\".to_vec());",
          "    let lit2 = Literal::exact(b\"world\".to_vec());",
          "    let seq = Seq::new(vec![lit1, lit2]);",
          "    seq.longest_common_suffix();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq.longest_common_suffix(), Some(&b\"\"[..]));"
        ],
        "code": [
          "{",
          "    let lit1 = Literal::exact(b\"hello\".to_vec());",
          "    let lit2 = Literal::exact(b\"world\".to_vec());",
          "    let seq = Seq::new(vec![lit1, lit2]);",
          "    seq.longest_common_suffix();",
          "    assert_eq!(seq.longest_common_suffix(), Some(&b\"\"[..]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lit1 = Literal::exact(b\"prefix1_suffix\".to_vec());",
          "    let lit2 = Literal::exact(b\"prefix2_diff\".to_vec());",
          "    let seq = Seq::new(vec![lit1, lit2]);",
          "    seq.longest_common_suffix();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Some(&b\"\"[..]), seq.longest_common_suffix());"
        ],
        "code": [
          "{",
          "    let lit1 = Literal::exact(b\"prefix1_suffix\".to_vec());",
          "    let lit2 = Literal::exact(b\"prefix2_diff\".to_vec());",
          "    let seq = Seq::new(vec![lit1, lit2]);",
          "    seq.longest_common_suffix();",
          "    assert_eq!(Some(&b\"\"[..]), seq.longest_common_suffix());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lit1 = Literal::exact(b\"nonempty\".to_vec());",
          "    let lit2 = Literal::exact(b\"\".to_vec());",
          "    let seq = Seq::new(vec![lit1, lit2]);",
          "    seq.longest_common_suffix();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Some(&b\"\"[..]), seq.longest_common_suffix());"
        ],
        "code": [
          "{",
          "    let lit1 = Literal::exact(b\"nonempty\".to_vec());",
          "    let lit2 = Literal::exact(b\"\".to_vec());",
          "    let seq = Seq::new(vec![lit1, lit2]);",
          "    seq.longest_common_suffix();",
          "    assert_eq!(Some(&b\"\"[..]), seq.longest_common_suffix());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lit1 = Literal::exact(b\"shared_prefix1\".to_vec());",
          "    let lit2 = Literal::exact(b\"shared_prefix2\".to_vec());",
          "    let seq = Seq::new(vec![lit1, lit2]);",
          "    seq.longest_common_suffix();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Some(&b\"shared_prefix\"[..]), seq.longest_common_suffix());"
        ],
        "code": [
          "{",
          "    let lit1 = Literal::exact(b\"shared_prefix1\".to_vec());",
          "    let lit2 = Literal::exact(b\"shared_prefix2\".to_vec());",
          "    let seq = Seq::new(vec![lit1, lit2]);",
          "    seq.longest_common_suffix();",
          "    assert_eq!(Some(&b\"shared_prefix\"[..]), seq.longest_common_suffix());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]