[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub_hir = Hir::empty(); // sub.is_match_empty == true",
          "    let rep = Repetition {",
          "        min: 1,",
          "        max: None,",
          "        greedy: true,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    let result = Hir::repetition(rep);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind(), &HirKind::Repetition(rep));",
          "    assert_eq!(result.is_start_anchored(), false);",
          "    assert_eq!(result.is_match_empty(), true);",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let sub_hir = Hir::empty(); // sub.is_match_empty == true",
          "    let rep = Repetition {",
          "        min: 1,",
          "        max: None,",
          "        greedy: true,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    let result = Hir::repetition(rep);",
          "    assert_eq!(result.kind(), &HirKind::Repetition(rep));",
          "    assert_eq!(result.is_start_anchored(), false);",
          "    assert_eq!(result.is_match_empty(), true);",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub_hir = Hir {",
          "        kind: HirKind::Char('a'),",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: Some(2), // greater than 0",
          "    };",
          "    let rep = Repetition {",
          "        min: 1,",
          "        max: None,",
          "        greedy: true,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    let result = Hir::repetition(rep);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, HirKind::Repetition(rep));",
          "    assert_eq!(result.is_start_anchored, true);",
          "    assert_eq!(result.is_match_empty, false);",
          "    assert_eq!(result.static_explicit_captures_len, Some(2));"
        ],
        "code": [
          "{",
          "    let sub_hir = Hir {",
          "        kind: HirKind::Char('a'),",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: Some(2), // greater than 0",
          "    };",
          "    let rep = Repetition {",
          "        min: 1,",
          "        max: None,",
          "        greedy: true,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    let result = Hir::repetition(rep);",
          "    assert_eq!(result.kind, HirKind::Repetition(rep));",
          "    assert_eq!(result.is_start_anchored, true);",
          "    assert_eq!(result.is_match_empty, false);",
          "    assert_eq!(result.static_explicit_captures_len, Some(2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub_hir = Hir {",
          "        kind: HirKind::Char('b'),",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: Some(3), // greater than 0",
          "    };",
          "    let rep = Repetition {",
          "        min: 2,",
          "        max: None,",
          "        greedy: false,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    let result = Hir::repetition(rep);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, HirKind::Repetition(rep));",
          "    assert_eq!(result.is_start_anchored, false);",
          "    assert_eq!(result.is_match_empty, true);",
          "    assert_eq!(result.static_explicit_captures_len, Some(3));"
        ],
        "code": [
          "{",
          "    let sub_hir = Hir {",
          "        kind: HirKind::Char('b'),",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: Some(3), // greater than 0",
          "    };",
          "    let rep = Repetition {",
          "        min: 2,",
          "        max: None,",
          "        greedy: false,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    let result = Hir::repetition(rep);",
          "    assert_eq!(result.kind, HirKind::Repetition(rep));",
          "    assert_eq!(result.is_start_anchored, false);",
          "    assert_eq!(result.is_match_empty, true);",
          "    assert_eq!(result.static_explicit_captures_len, Some(3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]