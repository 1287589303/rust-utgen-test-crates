[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub_hir = Hir::empty();",
          "    let rep = Repetition {",
          "        min: 0,",
          "        max: Some(0),",
          "        greedy: true,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    let result = Hir::repetition(rep);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind(), &HirKind::Repetition(rep));",
          "    assert!(result.is_start_anchored());",
          "    assert!(result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let sub_hir = Hir::empty();",
          "    let rep = Repetition {",
          "        min: 0,",
          "        max: Some(0),",
          "        greedy: true,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    let result = Hir::repetition(rep);",
          "    assert_eq!(result.kind(), &HirKind::Repetition(rep));",
          "    assert!(result.is_start_anchored());",
          "    assert!(result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub_hir = Hir::char('a');",
          "    let rep = Repetition {",
          "        min: 1,",
          "        max: Some(1),",
          "        greedy: true,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    let result = Hir::repetition(rep);",
          "}"
        ],
        "oracle": [
          "    let sub_hir = Hir::char('a');",
          "    let rep_zero_to_zero = Repetition { min: 0, max: Some(0), greedy: true, sub: Box::new(sub_hir.clone()) };",
          "    let result_zero_to_zero = Hir::repetition(rep_zero_to_zero);",
          "    assert_eq!(result_zero_to_zero, Hir::empty());",
          "    ",
          "    let rep_one_to_one = Repetition { min: 1, max: Some(1), greedy: true, sub: Box::new(sub_hir.clone()) };",
          "    let result_one_to_one = Hir::repetition(rep_one_to_one);",
          "    assert_eq!(result_one_to_one, *sub_hir);",
          "    ",
          "    let rep_zero_with_non_empty_capture = Repetition { min: 0, max: Some(1), greedy: true, sub: Box::new(sub_hir.clone()) };",
          "    let result_zero_with_non_empty_capture = Hir::repetition(rep_zero_with_non_empty_capture);",
          "    assert_eq!(result_zero_with_non_empty_capture.kind(), &HirKind::Repetition(rep_zero_with_non_empty_capture));",
          "    assert!(!result_zero_with_non_empty_capture.is_start_anchored());",
          "    assert!(result_zero_with_non_empty_capture.is_match_empty());",
          "    ",
          "    let rep_no_empty_capture = Repetition { min: 0, max: Some(1), greedy: true, sub: Box::new(Hir::empty()) };",
          "    let result_no_empty_capture = Hir::repetition(rep_no_empty_capture);",
          "    assert_eq!(result_no_empty_capture.kind(), &HirKind::Repetition(rep_no_empty_capture));",
          "    assert!(!result_no_empty_capture.is_start_anchored());",
          "    assert!(result_no_empty_capture.is_match_empty());",
          "    assert_eq!(result_no_empty_capture.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let sub_hir = Hir::char('a');",
          "    let rep = Repetition {",
          "        min: 1,",
          "        max: Some(1),",
          "        greedy: true,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    let result = Hir::repetition(rep);",
          "    let sub_hir = Hir::char('a');",
          "    let rep_zero_to_zero = Repetition { min: 0, max: Some(0), greedy: true, sub: Box::new(sub_hir.clone()) };",
          "    let result_zero_to_zero = Hir::repetition(rep_zero_to_zero);",
          "    assert_eq!(result_zero_to_zero, Hir::empty());",
          "    ",
          "    let rep_one_to_one = Repetition { min: 1, max: Some(1), greedy: true, sub: Box::new(sub_hir.clone()) };",
          "    let result_one_to_one = Hir::repetition(rep_one_to_one);",
          "    assert_eq!(result_one_to_one, *sub_hir);",
          "    ",
          "    let rep_zero_with_non_empty_capture = Repetition { min: 0, max: Some(1), greedy: true, sub: Box::new(sub_hir.clone()) };",
          "    let result_zero_with_non_empty_capture = Hir::repetition(rep_zero_with_non_empty_capture);",
          "    assert_eq!(result_zero_with_non_empty_capture.kind(), &HirKind::Repetition(rep_zero_with_non_empty_capture));",
          "    assert!(!result_zero_with_non_empty_capture.is_start_anchored());",
          "    assert!(result_zero_with_non_empty_capture.is_match_empty());",
          "    ",
          "    let rep_no_empty_capture = Repetition { min: 0, max: Some(1), greedy: true, sub: Box::new(Hir::empty()) };",
          "    let result_no_empty_capture = Hir::repetition(rep_no_empty_capture);",
          "    assert_eq!(result_no_empty_capture.kind(), &HirKind::Repetition(rep_no_empty_capture));",
          "    assert!(!result_no_empty_capture.is_start_anchored());",
          "    assert!(result_no_empty_capture.is_match_empty());",
          "    assert_eq!(result_no_empty_capture.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub_hir = Hir::empty();",
          "    let rep = Repetition {",
          "        min: 0,",
          "        max: Some(2),",
          "        greedy: false,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    let result = Hir::repetition(rep);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind(), &HirKind::Repetition(rep));",
          "    assert_eq!(result.is_start_anchored(), false);",
          "    assert_eq!(result.is_match_empty(), true);",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let sub_hir = Hir::empty();",
          "    let rep = Repetition {",
          "        min: 0,",
          "        max: Some(2),",
          "        greedy: false,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    let result = Hir::repetition(rep);",
          "    assert_eq!(result.kind(), &HirKind::Repetition(rep));",
          "    assert_eq!(result.is_start_anchored(), false);",
          "    assert_eq!(result.is_match_empty(), true);",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]