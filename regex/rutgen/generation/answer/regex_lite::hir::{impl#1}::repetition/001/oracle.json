[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rep = Repetition {",
          "        min: 1,",
          "        max: Some(0),",
          "        greedy: true,",
          "        sub: Box::new(Hir::empty()),",
          "    };",
          "    let _result = Hir::repetition(rep);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.kind(), &HirKind::Repetition(rep));",
          "    assert!(!_result.is_start_anchored());",
          "    assert!(_result.is_match_empty());",
          "    assert_eq!(_result.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let rep = Repetition {",
          "        min: 1,",
          "        max: Some(0),",
          "        greedy: true,",
          "        sub: Box::new(Hir::empty()),",
          "    };",
          "    let _result = Hir::repetition(rep);",
          "    assert_eq!(_result.kind(), &HirKind::Repetition(rep));",
          "    assert!(!_result.is_start_anchored());",
          "    assert!(_result.is_match_empty());",
          "    assert_eq!(_result.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rep = Repetition {",
          "        min: 3,",
          "        max: Some(0),",
          "        greedy: false,",
          "        sub: Box::new(Hir::char('a')),",
          "    };",
          "    let _result = Hir::repetition(rep);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.kind(), &HirKind::Repetition(rep));",
          "    assert!(_result.is_start_anchored());",
          "    assert!(_result.is_match_empty());",
          "    assert_eq!(_result.static_explicit_captures_len(), None);"
        ],
        "code": [
          "{",
          "    let rep = Repetition {",
          "        min: 3,",
          "        max: Some(0),",
          "        greedy: false,",
          "        sub: Box::new(Hir::char('a')),",
          "    };",
          "    let _result = Hir::repetition(rep);",
          "    assert_eq!(_result.kind(), &HirKind::Repetition(rep));",
          "    assert!(_result.is_start_anchored());",
          "    assert!(_result.is_match_empty());",
          "    assert_eq!(_result.static_explicit_captures_len(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rep = Repetition {",
          "        min: 5,",
          "        max: Some(0),",
          "        greedy: true,",
          "        sub: Box::new(Hir::class(Class::new())),",
          "    };",
          "    let _result = Hir::repetition(rep);",
          "}"
        ],
        "oracle": [
          "    plaintext",
          "    assert_eq!(result.kind(), &HirKind::Repetition(rep));",
          "    assert!(result.is_start_anchored());",
          "    assert!(result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let rep = Repetition {",
          "        min: 5,",
          "        max: Some(0),",
          "        greedy: true,",
          "        sub: Box::new(Hir::class(Class::new())),",
          "    };",
          "    let _result = Hir::repetition(rep);",
          "    plaintext",
          "    assert_eq!(result.kind(), &HirKind::Repetition(rep));",
          "    assert!(result.is_start_anchored());",
          "    assert!(result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]