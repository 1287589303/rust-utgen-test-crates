[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestDFA {",
          "        st: StartTable<Vec<u32>>,",
          "    }",
          "",
          "    impl TestDFA {",
          "        fn new() -> Self {",
          "            TestDFA {",
          "                st: StartTable {",
          "                    table: vec![0; 8],",
          "                    kind: StartKind::Both,",
          "                    start_map: StartByteMap::default(),",
          "                    stride: 1,",
          "                    pattern_len: None,",
          "                    universal_start_unanchored: Some(StateID(0)),",
          "                    universal_start_anchored: None,",
          "                },",
          "            }",
          "        }",
          "    }",
          "",
          "    let dfa = TestDFA::new();",
          "    let mode = Anchored::No;",
          "    let _ = dfa.universal_start_state(mode);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.universal_start_state(Anchored::No), Some(StateID(0)));",
          "    assert_eq!(dfa.universal_start_state(Anchored::Yes), None);",
          "    assert_eq!(dfa.universal_start_state(Anchored::Pattern(PatternID(1))), None);"
        ],
        "code": [
          "{",
          "    struct TestDFA {",
          "        st: StartTable<Vec<u32>>,",
          "    }",
          "",
          "    impl TestDFA {",
          "        fn new() -> Self {",
          "            TestDFA {",
          "                st: StartTable {",
          "                    table: vec![0; 8],",
          "                    kind: StartKind::Both,",
          "                    start_map: StartByteMap::default(),",
          "                    stride: 1,",
          "                    pattern_len: None,",
          "                    universal_start_unanchored: Some(StateID(0)),",
          "                    universal_start_anchored: None,",
          "                },",
          "            }",
          "        }",
          "    }",
          "",
          "    let dfa = TestDFA::new();",
          "    let mode = Anchored::No;",
          "    let _ = dfa.universal_start_state(mode);",
          "    assert_eq!(dfa.universal_start_state(Anchored::No), Some(StateID(0)));",
          "    assert_eq!(dfa.universal_start_state(Anchored::Yes), None);",
          "    assert_eq!(dfa.universal_start_state(Anchored::Pattern(PatternID(1))), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestDFA {",
          "        st: StartTable<Vec<u32>>,",
          "    }",
          "",
          "    impl TestDFA {",
          "        fn new() -> Self {",
          "            TestDFA {",
          "                st: StartTable {",
          "                    table: vec![0; 8],",
          "                    kind: StartKind::Both,",
          "                    start_map: StartByteMap::default(),",
          "                    stride: 1,",
          "                    pattern_len: None,",
          "                    universal_start_unanchored: None,",
          "                    universal_start_anchored: Some(StateID(1)),",
          "                },",
          "            }",
          "        }",
          "    }",
          "",
          "    let dfa = TestDFA::new();",
          "    let mode = Anchored::Yes;",
          "    let _ = dfa.universal_start_state(mode);",
          "}"
        ],
        "oracle": [
          "    let dfa = TestDFA::new();",
          "    let mode = Anchored::No;",
          "    let expected = dfa.st.universal_start_unanchored;",
          "    let result = dfa.universal_start_state(mode);",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    struct TestDFA {",
          "        st: StartTable<Vec<u32>>,",
          "    }",
          "",
          "    impl TestDFA {",
          "        fn new() -> Self {",
          "            TestDFA {",
          "                st: StartTable {",
          "                    table: vec![0; 8],",
          "                    kind: StartKind::Both,",
          "                    start_map: StartByteMap::default(),",
          "                    stride: 1,",
          "                    pattern_len: None,",
          "                    universal_start_unanchored: None,",
          "                    universal_start_anchored: Some(StateID(1)),",
          "                },",
          "            }",
          "        }",
          "    }",
          "",
          "    let dfa = TestDFA::new();",
          "    let mode = Anchored::Yes;",
          "    let _ = dfa.universal_start_state(mode);",
          "    let dfa = TestDFA::new();",
          "    let mode = Anchored::No;",
          "    let expected = dfa.st.universal_start_unanchored;",
          "    let result = dfa.universal_start_state(mode);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestDFA {",
          "        st: StartTable<Vec<u32>>,",
          "    }",
          "",
          "    impl TestDFA {",
          "        fn new() -> Self {",
          "            TestDFA {",
          "                st: StartTable {",
          "                    table: vec![0; 8],",
          "                    kind: StartKind::Both,",
          "                    start_map: StartByteMap::default(),",
          "                    stride: 1,",
          "                    pattern_len: None,",
          "                    universal_start_unanchored: None,",
          "                    universal_start_anchored: None,",
          "                },",
          "            }",
          "        }",
          "    }",
          "",
          "    let dfa = TestDFA::new();",
          "    let mode = Anchored::Pattern(PatternID(0));",
          "    let _ = dfa.universal_start_state(mode);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.universal_start_state(Anchored::No), dfa.st.universal_start_unanchored);",
          "    assert_eq!(dfa.universal_start_state(Anchored::Yes), dfa.st.universal_start_anchored);",
          "    assert_eq!(dfa.universal_start_state(Anchored::Pattern(PatternID(0))), None);"
        ],
        "code": [
          "{",
          "    struct TestDFA {",
          "        st: StartTable<Vec<u32>>,",
          "    }",
          "",
          "    impl TestDFA {",
          "        fn new() -> Self {",
          "            TestDFA {",
          "                st: StartTable {",
          "                    table: vec![0; 8],",
          "                    kind: StartKind::Both,",
          "                    start_map: StartByteMap::default(),",
          "                    stride: 1,",
          "                    pattern_len: None,",
          "                    universal_start_unanchored: None,",
          "                    universal_start_anchored: None,",
          "                },",
          "            }",
          "        }",
          "    }",
          "",
          "    let dfa = TestDFA::new();",
          "    let mode = Anchored::Pattern(PatternID(0));",
          "    let _ = dfa.universal_start_state(mode);",
          "    assert_eq!(dfa.universal_start_state(Anchored::No), dfa.st.universal_start_unanchored);",
          "    assert_eq!(dfa.universal_start_state(Anchored::Yes), dfa.st.universal_start_anchored);",
          "    assert_eq!(dfa.universal_start_state(Anchored::Pattern(PatternID(0))), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]