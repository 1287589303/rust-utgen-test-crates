[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_classes = ByteClasses::empty();",
          "    let iter = byte_classes.iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.classes, &byte_classes);",
          "    assert_eq!(iter.i, 0);"
        ],
        "code": [
          "{",
          "    let byte_classes = ByteClasses::empty();",
          "    let iter = byte_classes.iter();",
          "    assert_eq!(iter.classes, &byte_classes);",
          "    assert_eq!(iter.i, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_classes = ByteClasses::singletons();",
          "    let iter = byte_classes.iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.classes, &byte_classes);",
          "    assert_eq!(iter.i, 0);",
          "    assert!(iter.classes.is_singleton());",
          "    assert_eq!(iter.classes.alphabet_len(), 256);",
          "    assert_eq!(iter.classes.stride2(), 1);"
        ],
        "code": [
          "{",
          "    let byte_classes = ByteClasses::singletons();",
          "    let iter = byte_classes.iter();",
          "    assert_eq!(iter.classes, &byte_classes);",
          "    assert_eq!(iter.i, 0);",
          "    assert!(iter.classes.is_singleton());",
          "    assert_eq!(iter.classes.alphabet_len(), 256);",
          "    assert_eq!(iter.classes.stride2(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_classes = ByteClasses::from_bytes(&[]).unwrap().0;",
          "    let iter = byte_classes.iter();",
          "}"
        ],
        "oracle": [
          "    let byte_classes = ByteClasses::from_bytes(&[]).unwrap().0;",
          "    assert_eq!(iter.classes, &byte_classes);",
          "    assert_eq!(iter.i, 0);"
        ],
        "code": [
          "{",
          "    let byte_classes = ByteClasses::from_bytes(&[]).unwrap().0;",
          "    let iter = byte_classes.iter();",
          "    let byte_classes = ByteClasses::from_bytes(&[]).unwrap().0;",
          "    assert_eq!(iter.classes, &byte_classes);",
          "    assert_eq!(iter.i, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_classes = ByteClasses::from_bytes(&[0; 256]).unwrap().0;",
          "    let iter = byte_classes.iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.classes as *const _, byte_classes as *const _);",
          "    assert_eq!(iter.i, 0);"
        ],
        "code": [
          "{",
          "    let byte_classes = ByteClasses::from_bytes(&[0; 256]).unwrap().0;",
          "    let iter = byte_classes.iter();",
          "    assert_eq!(iter.classes as *const _, byte_classes as *const _);",
          "    assert_eq!(iter.i, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]