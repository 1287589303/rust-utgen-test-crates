[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sparse_sets = SparseSets::new(10);",
          "    sparse_sets.set1.insert(0);",
          "    sparse_sets.set1.insert(1);",
          "    sparse_sets.set2.insert(2);",
          "    sparse_sets.set2.insert(3);",
          "    sparse_sets.clear();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sparse_sets.set1.len(), 0);",
          "    assert_eq!(sparse_sets.set2.len(), 0);",
          "    assert!(sparse_sets.set1.is_empty());",
          "    assert!(sparse_sets.set2.is_empty());",
          "    assert!(!sparse_sets.set1.contains(0));",
          "    assert!(!sparse_sets.set1.contains(1));",
          "    assert!(!sparse_sets.set2.contains(2));",
          "    assert!(!sparse_sets.set2.contains(3));"
        ],
        "code": [
          "{",
          "    let mut sparse_sets = SparseSets::new(10);",
          "    sparse_sets.set1.insert(0);",
          "    sparse_sets.set1.insert(1);",
          "    sparse_sets.set2.insert(2);",
          "    sparse_sets.set2.insert(3);",
          "    sparse_sets.clear();",
          "    assert_eq!(sparse_sets.set1.len(), 0);",
          "    assert_eq!(sparse_sets.set2.len(), 0);",
          "    assert!(sparse_sets.set1.is_empty());",
          "    assert!(sparse_sets.set2.is_empty());",
          "    assert!(!sparse_sets.set1.contains(0));",
          "    assert!(!sparse_sets.set1.contains(1));",
          "    assert!(!sparse_sets.set2.contains(2));",
          "    assert!(!sparse_sets.set2.contains(3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sparse_sets = SparseSets::new(0);",
          "    sparse_sets.clear();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sparse_sets.set1.len(), 0);",
          "    assert_eq!(sparse_sets.set2.len(), 0);",
          "    assert!(sparse_sets.set1.is_empty());",
          "    assert!(sparse_sets.set2.is_empty());"
        ],
        "code": [
          "{",
          "    let mut sparse_sets = SparseSets::new(0);",
          "    sparse_sets.clear();",
          "    assert_eq!(sparse_sets.set1.len(), 0);",
          "    assert_eq!(sparse_sets.set2.len(), 0);",
          "    assert!(sparse_sets.set1.is_empty());",
          "    assert!(sparse_sets.set2.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sparse_sets = SparseSets::new(1);",
          "    sparse_sets.set1.insert(0);",
          "    sparse_sets.clear();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sparse_sets.set1.len(), 0);",
          "    assert!(sparse_sets.set1.is_empty());",
          "    assert_eq!(sparse_sets.set2.len(), 0);",
          "    assert!(sparse_sets.set2.is_empty());"
        ],
        "code": [
          "{",
          "    let mut sparse_sets = SparseSets::new(1);",
          "    sparse_sets.set1.insert(0);",
          "    sparse_sets.clear();",
          "    assert_eq!(sparse_sets.set1.len(), 0);",
          "    assert!(sparse_sets.set1.is_empty());",
          "    assert_eq!(sparse_sets.set2.len(), 0);",
          "    assert!(sparse_sets.set2.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sparse_sets = SparseSets::new(10);",
          "    sparse_sets.set1.insert(0);",
          "    sparse_sets.set1.insert(5);",
          "    sparse_sets.set2.insert(1);",
          "    sparse_sets.set2.insert(7);",
          "    sparse_sets.clear();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sparse_sets.set1.len(), 0);",
          "    assert_eq!(sparse_sets.set2.len(), 0);",
          "    assert!(sparse_sets.set1.is_empty());",
          "    assert!(sparse_sets.set2.is_empty());",
          "    assert!(!sparse_sets.set1.contains(0));",
          "    assert!(!sparse_sets.set1.contains(5));",
          "    assert!(!sparse_sets.set2.contains(1));",
          "    assert!(!sparse_sets.set2.contains(7));"
        ],
        "code": [
          "{",
          "    let mut sparse_sets = SparseSets::new(10);",
          "    sparse_sets.set1.insert(0);",
          "    sparse_sets.set1.insert(5);",
          "    sparse_sets.set2.insert(1);",
          "    sparse_sets.set2.insert(7);",
          "    sparse_sets.clear();",
          "    assert_eq!(sparse_sets.set1.len(), 0);",
          "    assert_eq!(sparse_sets.set2.len(), 0);",
          "    assert!(sparse_sets.set1.is_empty());",
          "    assert!(sparse_sets.set2.is_empty());",
          "    assert!(!sparse_sets.set1.contains(0));",
          "    assert!(!sparse_sets.set1.contains(5));",
          "    assert!(!sparse_sets.set2.contains(1));",
          "    assert!(!sparse_sets.set2.contains(7));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut sparse_sets: SparseSets = SparseSets::new(0);",
          "    sparse_sets.clear();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sparse_sets.set1.len(), 0);",
          "    assert_eq!(sparse_sets.set2.len(), 0);",
          "    assert!(sparse_sets.set1.is_empty());",
          "    assert!(sparse_sets.set2.is_empty());",
          "    assert_eq!(sparse_sets.set1.capacity(), 0);",
          "    assert_eq!(sparse_sets.set2.capacity(), 0);"
        ],
        "code": [
          "{",
          "    let mut sparse_sets: SparseSets = SparseSets::new(0);",
          "    sparse_sets.clear();",
          "    assert_eq!(sparse_sets.set1.len(), 0);",
          "    assert_eq!(sparse_sets.set2.len(), 0);",
          "    assert!(sparse_sets.set1.is_empty());",
          "    assert!(sparse_sets.set2.is_empty());",
          "    assert_eq!(sparse_sets.set1.capacity(), 0);",
          "    assert_eq!(sparse_sets.set2.capacity(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]