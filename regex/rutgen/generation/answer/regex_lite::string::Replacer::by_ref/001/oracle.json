[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SimpleReplacer;",
          "",
          "    impl Replacer for SimpleReplacer {",
          "        fn replace_append(&mut self, _caps: &Captures<'_>, _dst: &mut String) {",
          "            // implementation not needed",
          "        }",
          "",
          "        fn no_expansion<'r>(&'r mut self) -> Option<Cow<'r, str>> {",
          "            None",
          "        }",
          "    }",
          "",
          "    let mut replacer = SimpleReplacer;",
          "    let replacer_ref = replacer.by_ref();",
          "}"
        ],
        "oracle": [
          "    let mut replacer = SimpleReplacer;",
          "    let replacer_ref = replacer.by_ref();",
          "    assert_eq!(std::mem::type_of::<ReplacerRef<&mut SimpleReplacer>>(), std::mem::type_of_val(&replacer_ref));"
        ],
        "code": [
          "{",
          "    struct SimpleReplacer;",
          "",
          "    impl Replacer for SimpleReplacer {",
          "        fn replace_append(&mut self, _caps: &Captures<'_>, _dst: &mut String) {",
          "            // implementation not needed",
          "        }",
          "",
          "        fn no_expansion<'r>(&'r mut self) -> Option<Cow<'r, str>> {",
          "            None",
          "        }",
          "    }",
          "",
          "    let mut replacer = SimpleReplacer;",
          "    let replacer_ref = replacer.by_ref();",
          "    let mut replacer = SimpleReplacer;",
          "    let replacer_ref = replacer.by_ref();",
          "    assert_eq!(std::mem::type_of::<ReplacerRef<&mut SimpleReplacer>>(), std::mem::type_of_val(&replacer_ref));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct EmptyReplacer;",
          "",
          "    impl Replacer for EmptyReplacer {",
          "        fn replace_append(&mut self, _caps: &Captures<'_>, _dst: &mut String) {",
          "            // implementation not needed",
          "        }",
          "",
          "        fn no_expansion<'r>(&'r mut self) -> Option<Cow<'r, str>> {",
          "            Some(Cow::Borrowed(\"\"))",
          "        }",
          "    }",
          "",
          "    let mut empty_replacer = EmptyReplacer;",
          "    let replacer_ref = empty_replacer.by_ref();",
          "}"
        ],
        "oracle": [
          "    assert!(std::mem::size_of::<ReplacerRef<EmptyReplacer>>() > 0);",
          "    assert_eq!(replacer_ref.no_expansion(), Some(Cow::Borrowed(\"\")));",
          "    assert_eq!(std::ptr::eq(&*replacer_ref.0, &empty_replacer), true);",
          "    assert!(std::mem::transmute::<_, fn(&mut EmptyReplacer) -> ReplacerRef<EmptyReplacer>>(&EmptyReplacer::by_ref) as *const _ != std::ptr::null());",
          "    assert!(std::mem::size_of::<ReplacerRef<dyn Replacer>>() > 0);"
        ],
        "code": [
          "{",
          "    struct EmptyReplacer;",
          "",
          "    impl Replacer for EmptyReplacer {",
          "        fn replace_append(&mut self, _caps: &Captures<'_>, _dst: &mut String) {",
          "            // implementation not needed",
          "        }",
          "",
          "        fn no_expansion<'r>(&'r mut self) -> Option<Cow<'r, str>> {",
          "            Some(Cow::Borrowed(\"\"))",
          "        }",
          "    }",
          "",
          "    let mut empty_replacer = EmptyReplacer;",
          "    let replacer_ref = empty_replacer.by_ref();",
          "    assert!(std::mem::size_of::<ReplacerRef<EmptyReplacer>>() > 0);",
          "    assert_eq!(replacer_ref.no_expansion(), Some(Cow::Borrowed(\"\")));",
          "    assert_eq!(std::ptr::eq(&*replacer_ref.0, &empty_replacer), true);",
          "    assert!(std::mem::transmute::<_, fn(&mut EmptyReplacer) -> ReplacerRef<EmptyReplacer>>(&EmptyReplacer::by_ref) as *const _ != std::ptr::null());",
          "    assert!(std::mem::size_of::<ReplacerRef<dyn Replacer>>() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct NoExpansionReplacer;",
          "",
          "    impl Replacer for NoExpansionReplacer {",
          "        fn replace_append(&mut self, _caps: &Captures<'_>, _dst: &mut String) {",
          "            // implementation not needed",
          "        }",
          "",
          "        fn no_expansion<'r>(&'r mut self) -> Option<Cow<'r, str>> {",
          "            Some(Cow::Owned(String::from(\"No expansion\")))",
          "        }",
          "    }",
          "",
          "    let mut no_expansion_replacer = NoExpansionReplacer;",
          "    let replacer_ref = no_expansion_replacer.by_ref();",
          "}"
        ],
        "oracle": [
          "    assert!(std::mem::size_of_val(&replacer_ref) > 0);",
          "    assert_eq!(std::any::TypeId::of::<ReplacerRef<NoExpansionReplacer>>(), std::any::TypeId::of_val(&replacer_ref));",
          "    assert!(replacer_ref.0 as *const _ == &mut no_expansion_replacer as *mut _);"
        ],
        "code": [
          "{",
          "    struct NoExpansionReplacer;",
          "",
          "    impl Replacer for NoExpansionReplacer {",
          "        fn replace_append(&mut self, _caps: &Captures<'_>, _dst: &mut String) {",
          "            // implementation not needed",
          "        }",
          "",
          "        fn no_expansion<'r>(&'r mut self) -> Option<Cow<'r, str>> {",
          "            Some(Cow::Owned(String::from(\"No expansion\")))",
          "        }",
          "    }",
          "",
          "    let mut no_expansion_replacer = NoExpansionReplacer;",
          "    let replacer_ref = no_expansion_replacer.by_ref();",
          "    assert!(std::mem::size_of_val(&replacer_ref) > 0);",
          "    assert_eq!(std::any::TypeId::of::<ReplacerRef<NoExpansionReplacer>>(), std::any::TypeId::of_val(&replacer_ref));",
          "    assert!(replacer_ref.0 as *const _ == &mut no_expansion_replacer as *mut _);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ComplexReplacer {",
          "        state: String,",
          "    }",
          "",
          "    impl Replacer for ComplexReplacer {",
          "        fn replace_append(&mut self, _caps: &Captures<'_>, _dst: &mut String) {",
          "            // implementation not needed",
          "        }",
          "",
          "        fn no_expansion<'r>(&'r mut self) -> Option<Cow<'r, str>> {",
          "            Some(Cow::Borrowed(&self.state))",
          "        }",
          "    }",
          "",
          "    let mut complex_replacer = ComplexReplacer { state: String::from(\"Complex\") };",
          "    let replacer_ref = complex_replacer.by_ref();",
          "}"
        ],
        "oracle": [
          "    let mut complex_replacer = ComplexReplacer { state: String::from(\"Complex\") };",
          "    assert!(std::mem::transmute::<_, &ReplacerRef<'_, ComplexReplacer>>(&replacer_ref).0 == &mut complex_replacer);"
        ],
        "code": [
          "{",
          "    struct ComplexReplacer {",
          "        state: String,",
          "    }",
          "",
          "    impl Replacer for ComplexReplacer {",
          "        fn replace_append(&mut self, _caps: &Captures<'_>, _dst: &mut String) {",
          "            // implementation not needed",
          "        }",
          "",
          "        fn no_expansion<'r>(&'r mut self) -> Option<Cow<'r, str>> {",
          "            Some(Cow::Borrowed(&self.state))",
          "        }",
          "    }",
          "",
          "    let mut complex_replacer = ComplexReplacer { state: String::from(\"Complex\") };",
          "    let replacer_ref = complex_replacer.by_ref();",
          "    let mut complex_replacer = ComplexReplacer { state: String::from(\"Complex\") };",
          "    assert!(std::mem::transmute::<_, &ReplacerRef<'_, ComplexReplacer>>(&replacer_ref).0 == &mut complex_replacer);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]