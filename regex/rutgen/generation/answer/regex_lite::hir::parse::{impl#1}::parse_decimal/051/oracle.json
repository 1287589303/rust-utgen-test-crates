[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"   0abc   \";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some(' ')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_decimal();",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"   0abc   \";",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some(' ')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_decimal();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_DECIMAL_INVALID);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"   0abc   \";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some(' ')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_decimal();",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"   0abc   \";",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some(' ')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_decimal();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_DECIMAL_INVALID);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"   0xyz   \";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some(' ')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_decimal();",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"   0xyz   \";",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some(' ')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    assert!(parser.is_done() == false);",
          "    assert!(parser.char().is_whitespace() == true);",
          "    assert!(parser.is_done() == true);",
          "    assert!(parser.is_done() == false);",
          "    assert!(parser.char() >= '0' && parser.char() <= '9' && parser.char() == '0');",
          "    assert!(parser.is_done() == true);",
          "    assert!(parser.is_done() == false);",
          "    assert!(parser.char().is_whitespace() == true);",
          "    assert!(parser.is_done() == true);",
          "    let result = parser.parse_decimal();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, ERR_DECIMAL_INVALID);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"   0xyz   \";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some(' ')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_decimal();",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let pattern = \"   0xyz   \";",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some(' ')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    assert!(parser.is_done() == false);",
          "    assert!(parser.char().is_whitespace() == true);",
          "    assert!(parser.is_done() == true);",
          "    assert!(parser.is_done() == false);",
          "    assert!(parser.char() >= '0' && parser.char() <= '9' && parser.char() == '0');",
          "    assert!(parser.is_done() == true);",
          "    assert!(parser.is_done() == false);",
          "    assert!(parser.char().is_whitespace() == true);",
          "    assert!(parser.is_done() == true);",
          "    let result = parser.parse_decimal();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, ERR_DECIMAL_INVALID);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]