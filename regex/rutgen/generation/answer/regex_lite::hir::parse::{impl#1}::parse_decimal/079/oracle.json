[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"   \", // Only whitespaces",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some(' ')), // Starting with a whitespace",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.parse_decimal();",
          "}"
        ],
        "oracle": [
          "    _result.assert_is_err();",
          "    _result.unwrap_err().assert_msg(ERR_DECIMAL_NO_DIGITS);"
        ],
        "code": [
          "{",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"   \", // Only whitespaces",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some(' ')), // Starting with a whitespace",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.parse_decimal();",
          "    _result.assert_is_err();",
          "    _result.unwrap_err().assert_msg(ERR_DECIMAL_NO_DIGITS);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"abc   \", // Invalid characters followed by whitespace",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('a')), // Starting with a non-digit",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.parse_decimal();",
          "}"
        ],
        "oracle": [
          "    let parser = Parser { config: Config { nest_limit: 10, flags: Flags::default() }, pattern: \"abc   \", depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('a')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) }; let result = parser.parse_decimal(); assert_eq!(result, Err(Error::new(ERR_DECIMAL_NO_DIGITS)));"
        ],
        "code": [
          "{",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"abc   \", // Invalid characters followed by whitespace",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('a')), // Starting with a non-digit",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.parse_decimal();",
          "    let parser = Parser { config: Config { nest_limit: 10, flags: Flags::default() }, pattern: \"abc   \", depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('a')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) }; let result = parser.parse_decimal(); assert_eq!(result, Err(Error::new(ERR_DECIMAL_NO_DIGITS)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"   \", // Only whitespaces throughout",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some(' ')), // Starting with a whitespace",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.parse_decimal();",
          "}"
        ],
        "oracle": [
          "    assert!(_result.is_err());",
          "    assert_eq!(_result.unwrap_err().msg, ERR_DECIMAL_NO_DIGITS);"
        ],
        "code": [
          "{",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"   \", // Only whitespaces throughout",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some(' ')), // Starting with a whitespace",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.parse_decimal();",
          "    assert!(_result.is_err());",
          "    assert_eq!(_result.unwrap_err().msg, ERR_DECIMAL_NO_DIGITS);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]