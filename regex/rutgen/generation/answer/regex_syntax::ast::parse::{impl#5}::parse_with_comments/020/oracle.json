[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = Parser {",
          "        pos: Cell::new(Position { offset: 0, line: 1, column: 1 }),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 1,",
          "        octal: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let pattern = \"a?b\";",
          "    let parser_i = ParserI { parser: &parser, pattern };",
          "    ",
          "    let _ = parser_i.parse_with_comments();",
          "}"
        ],
        "oracle": [
          "    assert!(parser_i.is_eof() == false);",
          "    assert_eq!(parser_i.char(), '?');",
          "    assert!(parser_i.parse_uncounted_repetition(concat, ast::RepetitionKind::ZeroOrOne).is_err());",
          "    assert!(parser_i.char() == '?');",
          "    assert_eq!(parser_i.offset(), 0);"
        ],
        "code": [
          "{",
          "    let parser = Parser {",
          "        pos: Cell::new(Position { offset: 0, line: 1, column: 1 }),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 1,",
          "        octal: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let pattern = \"a?b\";",
          "    let parser_i = ParserI { parser: &parser, pattern };",
          "    ",
          "    let _ = parser_i.parse_with_comments();",
          "    assert!(parser_i.is_eof() == false);",
          "    assert_eq!(parser_i.char(), '?');",
          "    assert!(parser_i.parse_uncounted_repetition(concat, ast::RepetitionKind::ZeroOrOne).is_err());",
          "    assert!(parser_i.char() == '?');",
          "    assert_eq!(parser_i.offset(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = Parser {",
          "        pos: Cell::new(Position { offset: 0, line: 1, column: 1 }),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 1,",
          "        octal: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let pattern = \"a?b\";",
          "    let parser_i = ParserI { parser: &parser, pattern };",
          "",
          "    parser_i.parser().reset();",
          "    parser_i.parser().pos.set(Position { offset: 0, line: 1, column: 1 });",
          "    let _ = parser_i.parse_with_comments();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(self.offset(), 0, \"parser can only be used once\");",
          "    self.parser().reset();",
          "    assert!(!self.is_eof());",
          "    assert_eq!(self.char(), '?');",
          "    assert_eq!(self.char(), '?');",
          "    let result = self.parse_uncounted_repetition(concat, ast::RepetitionKind::ZeroOrOne);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let parser = Parser {",
          "        pos: Cell::new(Position { offset: 0, line: 1, column: 1 }),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 1,",
          "        octal: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let pattern = \"a?b\";",
          "    let parser_i = ParserI { parser: &parser, pattern };",
          "",
          "    parser_i.parser().reset();",
          "    parser_i.parser().pos.set(Position { offset: 0, line: 1, column: 1 });",
          "    let _ = parser_i.parse_with_comments();",
          "    assert_eq!(self.offset(), 0, \"parser can only be used once\");",
          "    self.parser().reset();",
          "    assert!(!self.is_eof());",
          "    assert_eq!(self.char(), '?');",
          "    assert_eq!(self.char(), '?');",
          "    let result = self.parse_uncounted_repetition(concat, ast::RepetitionKind::ZeroOrOne);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]