[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = MatchError::gave_up(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(error.kind(), &MatchErrorKind::GaveUp { offset: 0 });",
          "    assert!(matches!(error, MatchError(MatcₕErrorKind::GaveUp { .. })));",
          "    assert_eq!(error, MatchError::new(MatchErrorKind::GaveUp { offset: 0 }));",
          "    assert!(error == MatchError::gave_up(0));",
          "    assert!(error.kind() == &MatchErrorKind::GaveUp { offset: 0 });"
        ],
        "code": [
          "{",
          "    let error = MatchError::gave_up(0);",
          "    assert_eq!(error.kind(), &MatchErrorKind::GaveUp { offset: 0 });",
          "    assert!(matches!(error, MatchError(MatcₕErrorKind::GaveUp { .. })));",
          "    assert_eq!(error, MatchError::new(MatchErrorKind::GaveUp { offset: 0 }));",
          "    assert!(error == MatchError::gave_up(0));",
          "    assert!(error.kind() == &MatchErrorKind::GaveUp { offset: 0 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = MatchError::gave_up(5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(error.kind(), &MatchErrorKind::GaveUp { offset: 5 });",
          "    assert_eq!(format!(\"{:?}\", error), \"GaveUp { offset: 5 }\");",
          "    assert!(matches!(error.kind(), MatchErrorKind::GaveUp { .. }));",
          "    assert_eq!(MatchError::gave_up(0).kind(), &MatchErrorKind::GaveUp { offset: 0 });",
          "    assert_eq!(MatchError::gave_up(10).kind(), &MatchErrorKind::GaveUp { offset: 10 });"
        ],
        "code": [
          "{",
          "    let error = MatchError::gave_up(5);",
          "    assert_eq!(error.kind(), &MatchErrorKind::GaveUp { offset: 5 });",
          "    assert_eq!(format!(\"{:?}\", error), \"GaveUp { offset: 5 }\");",
          "    assert!(matches!(error.kind(), MatchErrorKind::GaveUp { .. }));",
          "    assert_eq!(MatchError::gave_up(0).kind(), &MatchErrorKind::GaveUp { offset: 0 });",
          "    assert_eq!(MatchError::gave_up(10).kind(), &MatchErrorKind::GaveUp { offset: 10 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = MatchError::gave_up(usize::MAX);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(error.kind(), &MatchErrorKind::GaveUp { offset: usize::MAX });"
        ],
        "code": [
          "{",
          "    let error = MatchError::gave_up(usize::MAX);",
          "    assert_eq!(error.kind(), &MatchErrorKind::GaveUp { offset: usize::MAX });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]