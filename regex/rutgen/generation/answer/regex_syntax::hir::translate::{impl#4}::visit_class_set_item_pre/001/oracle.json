[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        flags: Flags,",
          "        stack: RefCell<Vec<HirFrame>>,",
          "    }",
          "",
          "    impl Visitor for TestVisitor {",
          "        type Output = Hir;",
          "        type Err = Error;",
          "",
          "        fn finish(self) -> Result<Hir> {",
          "            Ok(Hir { kind: HirKind::Empty, props: Properties::default() })",
          "        }",
          "",
          "        fn flags(&self) -> Flags {",
          "            self.flags",
          "        }",
          "",
          "        fn push(&self, frame: HirFrame) {",
          "            self.stack.borrow_mut().push(frame);",
          "        }",
          "    }",
          "",
          "    let test_ast = ast::ClassSetItem::Empty(Span::default());",
          "    let visitor = TestVisitor {",
          "        flags: Flags::default(),",
          "        stack: RefCell::new(vec![]),",
          "    };",
          "",
          "    let _ = visitor.visit_class_set_item_pre(&test_ast);",
          "}"
        ],
        "oracle": [
          "    let test_ast_non_bracketed = ast::ClassSetItem::Literal(ast::Literal::default());",
          "    let visitor_non_bracketed = TestVisitor {",
          "    flags: Flags::default(),",
          "    stack: RefCell::new(vec![]),",
          "    };",
          "    assert_eq!(visitor_non_bracketed.visit_class_set_item_pre(&test_ast_non_bracketed), Ok(()));"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        flags: Flags,",
          "        stack: RefCell<Vec<HirFrame>>,",
          "    }",
          "",
          "    impl Visitor for TestVisitor {",
          "        type Output = Hir;",
          "        type Err = Error;",
          "",
          "        fn finish(self) -> Result<Hir> {",
          "            Ok(Hir { kind: HirKind::Empty, props: Properties::default() })",
          "        }",
          "",
          "        fn flags(&self) -> Flags {",
          "            self.flags",
          "        }",
          "",
          "        fn push(&self, frame: HirFrame) {",
          "            self.stack.borrow_mut().push(frame);",
          "        }",
          "    }",
          "",
          "    let test_ast = ast::ClassSetItem::Empty(Span::default());",
          "    let visitor = TestVisitor {",
          "        flags: Flags::default(),",
          "        stack: RefCell::new(vec![]),",
          "    };",
          "",
          "    let _ = visitor.visit_class_set_item_pre(&test_ast);",
          "    let test_ast_non_bracketed = ast::ClassSetItem::Literal(ast::Literal::default());",
          "    let visitor_non_bracketed = TestVisitor {",
          "    flags: Flags::default(),",
          "    stack: RefCell::new(vec![]),",
          "    };",
          "    assert_eq!(visitor_non_bracketed.visit_class_set_item_pre(&test_ast_non_bracketed), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        flags: Flags,",
          "        stack: RefCell<Vec<HirFrame>>,",
          "    }",
          "",
          "    impl Visitor for TestVisitor {",
          "        type Output = Hir;",
          "        type Err = Error;",
          "",
          "        fn finish(self) -> Result<Hir> {",
          "            Ok(Hir { kind: HirKind::Empty, props: Properties::default() })",
          "        }",
          "",
          "        fn flags(&self) -> Flags {",
          "            self.flags",
          "        }",
          "",
          "        fn push(&self, frame: HirFrame) {",
          "            self.stack.borrow_mut().push(frame);",
          "        }",
          "    }",
          "",
          "    let test_ast = ast::ClassSetItem::Literal(Literal::default());",
          "    let visitor = TestVisitor {",
          "        flags: Flags::default(),",
          "        stack: RefCell::new(vec![]),",
          "    };",
          "",
          "    let _ = visitor.visit_class_set_item_pre(&test_ast);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_class_set_item_pre(&test_ast), Ok(()));"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        flags: Flags,",
          "        stack: RefCell<Vec<HirFrame>>,",
          "    }",
          "",
          "    impl Visitor for TestVisitor {",
          "        type Output = Hir;",
          "        type Err = Error;",
          "",
          "        fn finish(self) -> Result<Hir> {",
          "            Ok(Hir { kind: HirKind::Empty, props: Properties::default() })",
          "        }",
          "",
          "        fn flags(&self) -> Flags {",
          "            self.flags",
          "        }",
          "",
          "        fn push(&self, frame: HirFrame) {",
          "            self.stack.borrow_mut().push(frame);",
          "        }",
          "    }",
          "",
          "    let test_ast = ast::ClassSetItem::Literal(Literal::default());",
          "    let visitor = TestVisitor {",
          "        flags: Flags::default(),",
          "        stack: RefCell::new(vec![]),",
          "    };",
          "",
          "    let _ = visitor.visit_class_set_item_pre(&test_ast);",
          "    assert_eq!(visitor.visit_class_set_item_pre(&test_ast), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]