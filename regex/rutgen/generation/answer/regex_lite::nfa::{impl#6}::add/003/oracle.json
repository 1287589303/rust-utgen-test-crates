[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, size_limit: Some(1024) };",
          "    let pattern = String::from(\"a\");",
          "    let compiler = Compiler { config, nfa: RefCell::new(NFA { ",
          "        pattern, ",
          "        states: vec![], ",
          "        start: 0, ",
          "        is_start_anchored: false, ",
          "        is_match_empty: false, ",
          "        static_explicit_captures_len: None, ",
          "        cap_name_to_index: CaptureNameMap::new(), ",
          "        cap_index_to_name: vec![], ",
          "        memory_extra: 0 ",
          "    })};",
          "    let state = State::Char { target: 1, ch: 'a' };",
          "    let _ = compiler.add(state);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(compiler.add(State::Char { target: 1, ch: 'a' }), Ok(_)));",
          "    assert!(matches!(compiler.add(State::Ranges { target: 2, ranges: vec![('a', 'z')] }), Ok(_)));",
          "    assert!(matches!(compiler.add(State::Splits { targets: vec![1, 2], reverse: false }), Ok(_)));",
          "    assert!(matches!(compiler.add(State::Goto { target: 3, look: None }), Ok(_)));",
          "    assert!(matches!(compiler.add(State::Capture { target: 4, slot: 0 }), Ok(_)));",
          "    assert!(matches!(compiler.add(State::Fail), Ok(_)));",
          "    assert!(matches!(compiler.add(State::Match), Ok(_)));",
          "    assert!(matches!(compiler.add(State::Char { target: 1, ch: 'b' }), Ok(_)));",
          "    assert!(matches!(compiler.add(State::Ranges { target: 2, ranges: vec![('A', 'Z')] }), Ok(_)));",
          "    assert!(compiler.check_size_limit().is_ok());",
          "    assert!(u32::try_from(compiler.nfa.borrow().states.len()).is_ok());",
          "    assert!(compiler.nfa.borrow().states.len() < u32::MAX as usize);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, size_limit: Some(1024) };",
          "    let pattern = String::from(\"a\");",
          "    let compiler = Compiler { config, nfa: RefCell::new(NFA { ",
          "        pattern, ",
          "        states: vec![], ",
          "        start: 0, ",
          "        is_start_anchored: false, ",
          "        is_match_empty: false, ",
          "        static_explicit_captures_len: None, ",
          "        cap_name_to_index: CaptureNameMap::new(), ",
          "        cap_index_to_name: vec![], ",
          "        memory_extra: 0 ",
          "    })};",
          "    let state = State::Char { target: 1, ch: 'a' };",
          "    let _ = compiler.add(state);",
          "    assert!(matches!(compiler.add(State::Char { target: 1, ch: 'a' }), Ok(_)));",
          "    assert!(matches!(compiler.add(State::Ranges { target: 2, ranges: vec![('a', 'z')] }), Ok(_)));",
          "    assert!(matches!(compiler.add(State::Splits { targets: vec![1, 2], reverse: false }), Ok(_)));",
          "    assert!(matches!(compiler.add(State::Goto { target: 3, look: None }), Ok(_)));",
          "    assert!(matches!(compiler.add(State::Capture { target: 4, slot: 0 }), Ok(_)));",
          "    assert!(matches!(compiler.add(State::Fail), Ok(_)));",
          "    assert!(matches!(compiler.add(State::Match), Ok(_)));",
          "    assert!(matches!(compiler.add(State::Char { target: 1, ch: 'b' }), Ok(_)));",
          "    assert!(matches!(compiler.add(State::Ranges { target: 2, ranges: vec![('A', 'Z')] }), Ok(_)));",
          "    assert!(compiler.check_size_limit().is_ok());",
          "    assert!(u32::try_from(compiler.nfa.borrow().states.len()).is_ok());",
          "    assert!(compiler.nfa.borrow().states.len() < u32::MAX as usize);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, size_limit: Some(2048) };",
          "    let pattern = String::from(\"a-z\");",
          "    let compiler = Compiler { config, nfa: RefCell::new(NFA { ",
          "        pattern, ",
          "        states: vec![], ",
          "        start: 0, ",
          "        is_start_anchored: false, ",
          "        is_match_empty: false, ",
          "        static_explicit_captures_len: None, ",
          "        cap_name_to_index: CaptureNameMap::new(), ",
          "        cap_index_to_name: vec![], ",
          "        memory_extra: 0 ",
          "    })};",
          "    let state = State::Ranges { target: 1, ranges: vec![('a', 'z')] };",
          "    let _ = compiler.add(state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(compiler.nfa.borrow().states.len(), 0);",
          "    assert!(compiler.nfa.borrow().memory_extra == 0);",
          "    let result = compiler.add(State::Ranges { target: 1, ranges: vec![('a', 'z')] });",
          "    assert!(result.is_ok());",
          "    assert_eq!(compiler.nfa.borrow().states.len(), 1);",
          "    assert!(compiler.nfa.borrow().memory_extra > 0);",
          "    assert!(matches!(result, Ok(_)));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, size_limit: Some(2048) };",
          "    let pattern = String::from(\"a-z\");",
          "    let compiler = Compiler { config, nfa: RefCell::new(NFA { ",
          "        pattern, ",
          "        states: vec![], ",
          "        start: 0, ",
          "        is_start_anchored: false, ",
          "        is_match_empty: false, ",
          "        static_explicit_captures_len: None, ",
          "        cap_name_to_index: CaptureNameMap::new(), ",
          "        cap_index_to_name: vec![], ",
          "        memory_extra: 0 ",
          "    })};",
          "    let state = State::Ranges { target: 1, ranges: vec![('a', 'z')] };",
          "    let _ = compiler.add(state);",
          "    assert_eq!(compiler.nfa.borrow().states.len(), 0);",
          "    assert!(compiler.nfa.borrow().memory_extra == 0);",
          "    let result = compiler.add(State::Ranges { target: 1, ranges: vec![('a', 'z')] });",
          "    assert!(result.is_ok());",
          "    assert_eq!(compiler.nfa.borrow().states.len(), 1);",
          "    assert!(compiler.nfa.borrow().memory_extra > 0);",
          "    assert!(matches!(result, Ok(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, size_limit: Some(5120) };",
          "    let pattern = String::from(\"split\");",
          "    let compiler = Compiler { config, nfa: RefCell::new(NFA { ",
          "        pattern, ",
          "        states: vec![], ",
          "        start: 0, ",
          "        is_start_anchored: false, ",
          "        is_match_empty: false, ",
          "        static_explicit_captures_len: None, ",
          "        cap_name_to_index: CaptureNameMap::new(), ",
          "        cap_index_to_name: vec![], ",
          "        memory_extra: 0 ",
          "    })};",
          "    let state = State::Splits { targets: vec![1, 2], reverse: false };",
          "    let _ = compiler.add(state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(u32::try_from(compiler.nfa.borrow().states.len()), Ok(0));",
          "    assert_eq!(compiler.nfa.borrow().memory_extra, 2 * size_of::<StateID>());",
          "    assert_eq!(compiler.nfa.borrow().states.len(), 1);",
          "    assert!(compiler.check_size_limit().is_ok());",
          "    assert!(matches!(_, Ok(_)));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, size_limit: Some(5120) };",
          "    let pattern = String::from(\"split\");",
          "    let compiler = Compiler { config, nfa: RefCell::new(NFA { ",
          "        pattern, ",
          "        states: vec![], ",
          "        start: 0, ",
          "        is_start_anchored: false, ",
          "        is_match_empty: false, ",
          "        static_explicit_captures_len: None, ",
          "        cap_name_to_index: CaptureNameMap::new(), ",
          "        cap_index_to_name: vec![], ",
          "        memory_extra: 0 ",
          "    })};",
          "    let state = State::Splits { targets: vec![1, 2], reverse: false };",
          "    let _ = compiler.add(state);",
          "    assert_eq!(u32::try_from(compiler.nfa.borrow().states.len()), Ok(0));",
          "    assert_eq!(compiler.nfa.borrow().memory_extra, 2 * size_of::<StateID>());",
          "    assert_eq!(compiler.nfa.borrow().states.len(), 1);",
          "    assert!(compiler.check_size_limit().is_ok());",
          "    assert!(matches!(_, Ok(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, size_limit: Some(1024) };",
          "    let pattern = String::from(\"capture\");",
          "    let compiler = Compiler { config, nfa: RefCell::new(NFA { ",
          "        pattern, ",
          "        states: vec![], ",
          "        start: 0, ",
          "        is_start_anchored: false, ",
          "        is_match_empty: false, ",
          "        static_explicit_captures_len: None, ",
          "        cap_name_to_index: CaptureNameMap::new(), ",
          "        cap_index_to_name: vec![], ",
          "        memory_extra: 0 ",
          "    })};",
          "    let state = State::Capture { target: 1, slot: 0 };",
          "    let _ = compiler.add(state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(u32::try_from(compiler.nfa.borrow().states.len()).is_ok(), true);",
          "    assert_eq!(compiler.check_size_limit().is_ok(), true);",
          "    assert!(matches!(_, Ok(id) => id), compiler.add(state));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, size_limit: Some(1024) };",
          "    let pattern = String::from(\"capture\");",
          "    let compiler = Compiler { config, nfa: RefCell::new(NFA { ",
          "        pattern, ",
          "        states: vec![], ",
          "        start: 0, ",
          "        is_start_anchored: false, ",
          "        is_match_empty: false, ",
          "        static_explicit_captures_len: None, ",
          "        cap_name_to_index: CaptureNameMap::new(), ",
          "        cap_index_to_name: vec![], ",
          "        memory_extra: 0 ",
          "    })};",
          "    let state = State::Capture { target: 1, slot: 0 };",
          "    let _ = compiler.add(state);",
          "    assert_eq!(u32::try_from(compiler.nfa.borrow().states.len()).is_ok(), true);",
          "    assert_eq!(compiler.check_size_limit().is_ok(), true);",
          "    assert!(matches!(_, Ok(id) => id), compiler.add(state));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, size_limit: Some(2048) };",
          "    let pattern = String::from(\"fail\");",
          "    let compiler = Compiler { config, nfa: RefCell::new(NFA { ",
          "        pattern, ",
          "        states: vec![], ",
          "        start: 0, ",
          "        is_start_anchored: false, ",
          "        is_match_empty: false, ",
          "        static_explicit_captures_len: None, ",
          "        cap_name_to_index: CaptureNameMap::new(), ",
          "        cap_index_to_name: vec![], ",
          "        memory_extra: 0 ",
          "    })};",
          "    let state = State::Fail;",
          "    let _ = compiler.add(state);",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 10, size_limit: Some(2048) };",
          "    let pattern = String::from(\"fail\");",
          "    let compiler = Compiler { config, nfa: RefCell::new(NFA {",
          "    pattern,",
          "    states: vec![],",
          "    start: 0,",
          "    is_start_anchored: false,",
          "    is_match_empty: false,",
          "    static_explicit_captures_len: None,",
          "    cap_name_to_index: CaptureNameMap::new(),",
          "    cap_index_to_name: vec![],",
          "    memory_extra: 0",
          "    })};",
          "    let state = State::Fail;",
          "    let result = compiler.add(state);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), 0);",
          "    ",
          "    let state_count = compiler.nfa.borrow().states.len();",
          "    let result = compiler.add(State::Char { target: 1, ch: 'a' });",
          "    assert!(result.is_ok());",
          "    assert_eq!(compiler.nfa.borrow().states.len(), state_count + 1);",
          "    ",
          "    compiler.nfa.borrow_mut().memory_extra = 2049;",
          "    let result = compiler.add(State::Match);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, \"compiled regex exceeded size limit\");",
          "    ",
          "    compiler.nfa.borrow_mut().memory_extra = 0;",
          "    for _ in 0..(u32::MAX as usize) {",
          "    compiler.add(State::Char { target: 0, ch: 'b' }).unwrap();",
          "    }",
          "    let result = compiler.add(State::Capture { target: 0, slot: 0 });",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, \"exhausted state IDs, too many states\");"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, size_limit: Some(2048) };",
          "    let pattern = String::from(\"fail\");",
          "    let compiler = Compiler { config, nfa: RefCell::new(NFA { ",
          "        pattern, ",
          "        states: vec![], ",
          "        start: 0, ",
          "        is_start_anchored: false, ",
          "        is_match_empty: false, ",
          "        static_explicit_captures_len: None, ",
          "        cap_name_to_index: CaptureNameMap::new(), ",
          "        cap_index_to_name: vec![], ",
          "        memory_extra: 0 ",
          "    })};",
          "    let state = State::Fail;",
          "    let _ = compiler.add(state);",
          "    let config = Config { nest_limit: 10, size_limit: Some(2048) };",
          "    let pattern = String::from(\"fail\");",
          "    let compiler = Compiler { config, nfa: RefCell::new(NFA {",
          "    pattern,",
          "    states: vec![],",
          "    start: 0,",
          "    is_start_anchored: false,",
          "    is_match_empty: false,",
          "    static_explicit_captures_len: None,",
          "    cap_name_to_index: CaptureNameMap::new(),",
          "    cap_index_to_name: vec![],",
          "    memory_extra: 0",
          "    })};",
          "    let state = State::Fail;",
          "    let result = compiler.add(state);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), 0);",
          "    ",
          "    let state_count = compiler.nfa.borrow().states.len();",
          "    let result = compiler.add(State::Char { target: 1, ch: 'a' });",
          "    assert!(result.is_ok());",
          "    assert_eq!(compiler.nfa.borrow().states.len(), state_count + 1);",
          "    ",
          "    compiler.nfa.borrow_mut().memory_extra = 2049;",
          "    let result = compiler.add(State::Match);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, \"compiled regex exceeded size limit\");",
          "    ",
          "    compiler.nfa.borrow_mut().memory_extra = 0;",
          "    for _ in 0..(u32::MAX as usize) {",
          "    compiler.add(State::Char { target: 0, ch: 'b' }).unwrap();",
          "    }",
          "    let result = compiler.add(State::Capture { target: 0, slot: 0 });",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, \"exhausted state IDs, too many states\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, size_limit: Some(1024) };",
          "    let pattern = String::from(\"match\");",
          "    let compiler = Compiler { config, nfa: RefCell::new(NFA { ",
          "        pattern, ",
          "        states: vec![], ",
          "        start: 0, ",
          "        is_start_anchored: false, ",
          "        is_match_empty: false, ",
          "        static_explicit_captures_len: None, ",
          "        cap_name_to_index: CaptureNameMap::new(), ",
          "        cap_index_to_name: vec![], ",
          "        memory_extra: 0 ",
          "    })};",
          "    let state = State::Match;",
          "    let _ = compiler.add(state);",
          "}"
        ],
        "oracle": [
          "    assert!(u32::try_from(0).is_ok());",
          "    assert!(compiler.nfa.borrow().states.len() < u32::MAX as usize);",
          "    assert!(compiler.check_size_limit().is_ok());",
          "    let state_id = compiler.add(State::Match).unwrap();",
          "    assert!(state_id < u32::MAX);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, size_limit: Some(1024) };",
          "    let pattern = String::from(\"match\");",
          "    let compiler = Compiler { config, nfa: RefCell::new(NFA { ",
          "        pattern, ",
          "        states: vec![], ",
          "        start: 0, ",
          "        is_start_anchored: false, ",
          "        is_match_empty: false, ",
          "        static_explicit_captures_len: None, ",
          "        cap_name_to_index: CaptureNameMap::new(), ",
          "        cap_index_to_name: vec![], ",
          "        memory_extra: 0 ",
          "    })};",
          "    let state = State::Match;",
          "    let _ = compiler.add(state);",
          "    assert!(u32::try_from(0).is_ok());",
          "    assert!(compiler.nfa.borrow().states.len() < u32::MAX as usize);",
          "    assert!(compiler.check_size_limit().is_ok());",
          "    let state_id = compiler.add(State::Match).unwrap();",
          "    assert!(state_id < u32::MAX);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]