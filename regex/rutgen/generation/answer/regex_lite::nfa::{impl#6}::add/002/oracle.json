[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { ",
          "        size_limit: Some(1024) // set size limit higher than typical state memory usage",
          "    };",
          "    let nfa = NFA {",
          "        pattern: String::new(),",
          "        states: Vec::new(),",
          "        start: 0,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: Vec::new(),",
          "        memory_extra: 0,",
          "    };",
          "    let compiler = Compiler {",
          "        config,",
          "        nfa: RefCell::new(nfa),",
          "    };",
          "    let state = State::Char { target: 1, ch: 'a' }; ",
          "    let _ = compiler.add(state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(compiler.nfa.borrow().states.len(), 0);",
          "    assert!(compiler.check_size_limit().is_ok());",
          "    assert!(u32::try_from(1).is_ok());",
          "    assert_eq!(compiler.nfa.borrow().memory_extra, state.memory_usage());",
          "    assert_eq!(compiler.nfa.borrow().states.len(), 1);",
          "    assert!(compiler.nfa.borrow().states[0] == state);",
          "    assert!(compiler.add(State::Fail).is_ok());",
          "    assert!(compiler.check_size_limit().is_ok());"
        ],
        "code": [
          "{",
          "    let config = Config { ",
          "        size_limit: Some(1024) // set size limit higher than typical state memory usage",
          "    };",
          "    let nfa = NFA {",
          "        pattern: String::new(),",
          "        states: Vec::new(),",
          "        start: 0,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: Vec::new(),",
          "        memory_extra: 0,",
          "    };",
          "    let compiler = Compiler {",
          "        config,",
          "        nfa: RefCell::new(nfa),",
          "    };",
          "    let state = State::Char { target: 1, ch: 'a' }; ",
          "    let _ = compiler.add(state);",
          "    assert_eq!(compiler.nfa.borrow().states.len(), 0);",
          "    assert!(compiler.check_size_limit().is_ok());",
          "    assert!(u32::try_from(1).is_ok());",
          "    assert_eq!(compiler.nfa.borrow().memory_extra, state.memory_usage());",
          "    assert_eq!(compiler.nfa.borrow().states.len(), 1);",
          "    assert!(compiler.nfa.borrow().states[0] == state);",
          "    assert!(compiler.add(State::Fail).is_ok());",
          "    assert!(compiler.check_size_limit().is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { ",
          "        size_limit: Some(10) // set size limit lower than typical state memory usage",
          "    };",
          "    let nfa = NFA {",
          "        pattern: String::new(),",
          "        states: Vec::new(),",
          "        start: 0,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: Vec::new(),",
          "        memory_extra: 0,",
          "    };",
          "    let compiler = Compiler {",
          "        config,",
          "        nfa: RefCell::new(nfa),",
          "    };",
          "    let state = State::Splits { targets: vec![1, 2], reverse: false }; ",
          "    let _ = compiler.add(state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(compiler.nfa.borrow().states.len(), 0);",
          "    assert!(compiler.add(State::Splits { targets: vec![1, 2], reverse: false }).is_ok());",
          "    assert!(compiler.nfa.borrow().memory_extra > 0);",
          "    assert!(compiler.nfa.borrow().states.len() > 0);",
          "    assert!(compiler.check_size_limit().is_ok());"
        ],
        "code": [
          "{",
          "    let config = Config { ",
          "        size_limit: Some(10) // set size limit lower than typical state memory usage",
          "    };",
          "    let nfa = NFA {",
          "        pattern: String::new(),",
          "        states: Vec::new(),",
          "        start: 0,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: Vec::new(),",
          "        memory_extra: 0,",
          "    };",
          "    let compiler = Compiler {",
          "        config,",
          "        nfa: RefCell::new(nfa),",
          "    };",
          "    let state = State::Splits { targets: vec![1, 2], reverse: false }; ",
          "    let _ = compiler.add(state);",
          "    assert_eq!(compiler.nfa.borrow().states.len(), 0);",
          "    assert!(compiler.add(State::Splits { targets: vec![1, 2], reverse: false }).is_ok());",
          "    assert!(compiler.nfa.borrow().memory_extra > 0);",
          "    assert!(compiler.nfa.borrow().states.len() > 0);",
          "    assert!(compiler.check_size_limit().is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]