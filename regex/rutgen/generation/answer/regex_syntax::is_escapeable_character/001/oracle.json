[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '\\\\';",
          "    is_escapeable_character(c);",
          "}"
        ],
        "oracle": [
          "    assert!(is_escapeable_character('\\\\'));",
          "    assert!(is_escapeable_character('.'));",
          "    assert!(is_escapeable_character('+'));",
          "    assert!(is_escapeable_character('*'));",
          "    assert!(is_escapeable_character('?'));",
          "    assert!(is_escapeable_character('('));",
          "    assert!(is_escapeable_character(')'));",
          "    assert!(is_escapeable_character('|'));",
          "    assert!(is_escapeable_character('['));",
          "    assert!(is_escapeable_character(']'));",
          "    assert!(is_escapeable_character('{'));",
          "    assert!(is_escapeable_character('}'));",
          "    assert!(is_escapeable_character('^'));",
          "    assert!(is_escapeable_character('$'));",
          "    assert!(is_escapeable_character('#'));",
          "    assert!(is_escapeable_character('&'));",
          "    assert!(is_escapeable_character('-'));",
          "    assert!(is_escapeable_character('~'));"
        ],
        "code": [
          "{",
          "    let c = '\\\\';",
          "    is_escapeable_character(c);",
          "    assert!(is_escapeable_character('\\\\'));",
          "    assert!(is_escapeable_character('.'));",
          "    assert!(is_escapeable_character('+'));",
          "    assert!(is_escapeable_character('*'));",
          "    assert!(is_escapeable_character('?'));",
          "    assert!(is_escapeable_character('('));",
          "    assert!(is_escapeable_character(')'));",
          "    assert!(is_escapeable_character('|'));",
          "    assert!(is_escapeable_character('['));",
          "    assert!(is_escapeable_character(']'));",
          "    assert!(is_escapeable_character('{'));",
          "    assert!(is_escapeable_character('}'));",
          "    assert!(is_escapeable_character('^'));",
          "    assert!(is_escapeable_character('$'));",
          "    assert!(is_escapeable_character('#'));",
          "    assert!(is_escapeable_character('&'));",
          "    assert!(is_escapeable_character('-'));",
          "    assert!(is_escapeable_character('~'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '.';",
          "    is_escapeable_character(c);",
          "}"
        ],
        "oracle": [
          "    assert!(is_escapeable_character('.'));"
        ],
        "code": [
          "{",
          "    let c = '.';",
          "    is_escapeable_character(c);",
          "    assert!(is_escapeable_character('.'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '+';",
          "    is_escapeable_character(c);",
          "}"
        ],
        "oracle": [
          "    assert!(is_escapeable_character('+'));"
        ],
        "code": [
          "{",
          "    let c = '+';",
          "    is_escapeable_character(c);",
          "    assert!(is_escapeable_character('+'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '*';",
          "    is_escapeable_character(c);",
          "}"
        ],
        "oracle": [
          "    assert!(is_escapeable_character('\\\\'));",
          "    assert!(is_escapeable_character('.'));",
          "    assert!(is_escapeable_character('+'));",
          "    assert!(is_escapeable_character('?'));",
          "    assert!(is_escapeable_character('('));",
          "    assert!(is_escapeable_character(')'));",
          "    assert!(is_escapeable_character('|'));",
          "    assert!(is_escapeable_character('['));",
          "    assert!(is_escapeable_character(']'));",
          "    assert!(is_escapeable_character('{'));",
          "    assert!(is_escapeable_character('}'));",
          "    assert!(is_escapeable_character('^'));",
          "    assert!(is_escapeable_character('$'));",
          "    assert!(is_escapeable_character('#'));",
          "    assert!(is_escapeable_character('&'));",
          "    assert!(is_escapeable_character('-'));",
          "    assert!(is_escapeable_character('~'));"
        ],
        "code": [
          "{",
          "    let c = '*';",
          "    is_escapeable_character(c);",
          "    assert!(is_escapeable_character('\\\\'));",
          "    assert!(is_escapeable_character('.'));",
          "    assert!(is_escapeable_character('+'));",
          "    assert!(is_escapeable_character('?'));",
          "    assert!(is_escapeable_character('('));",
          "    assert!(is_escapeable_character(')'));",
          "    assert!(is_escapeable_character('|'));",
          "    assert!(is_escapeable_character('['));",
          "    assert!(is_escapeable_character(']'));",
          "    assert!(is_escapeable_character('{'));",
          "    assert!(is_escapeable_character('}'));",
          "    assert!(is_escapeable_character('^'));",
          "    assert!(is_escapeable_character('$'));",
          "    assert!(is_escapeable_character('#'));",
          "    assert!(is_escapeable_character('&'));",
          "    assert!(is_escapeable_character('-'));",
          "    assert!(is_escapeable_character('~'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '?';",
          "    is_escapeable_character(c);",
          "}"
        ],
        "oracle": [
          "    assert!(is_escapeable_character('?'));  // is_meta_character('?') is true, expected return value is true",
          "    assert!(is_escapeable_character('.'));  // is_meta_character('.') is true, expected return value is true",
          "    assert!(is_escapeable_character('+'));  // is_meta_character('+') is true, expected return value is true",
          "    assert!(is_escapeable_character('*'));  // is_meta_character('*') is true, expected return value is true",
          "    assert!(is_escapeable_character('\\\\'));  // is_meta_character('\\\\') is true, expected return value is true",
          "    assert!(is_escapeable_character('('));  // is_meta_character('(') is true, expected return value is true",
          "    assert!(is_escapeable_character(')'));  // is_meta_character(')') is true, expected return value is true",
          "    assert!(is_escapeable_character('|'));  // is_meta_character('|') is true, expected return value is true",
          "    assert!(is_escapeable_character('['));  // is_meta_character('[') is true, expected return value is true",
          "    assert!(is_escapeable_character(']'));  // is_meta_character(']') is true, expected return value is true",
          "    assert!(is_escapeable_character('{'));  // is_meta_character('{') is true, expected return value is true",
          "    assert!(is_escapeable_character('}'));  // is_meta_character('}') is true, expected return value is true",
          "    assert!(is_escapeable_character('^'));  // is_meta_character('^') is true, expected return value is true",
          "    assert!(is_escapeable_character('$'));  // is_meta_character('$') is true, expected return value is true",
          "    assert!(is_escapeable_character('&'));  // is_meta_character('&') is true, expected return value is true",
          "    assert!(is_escapeable_character('-'));  // is_meta_character('-') is true, expected return value is true",
          "    assert!(is_escapeable_character('~'));  // is_meta_character('~') is true, expected return value is true"
        ],
        "code": [
          "{",
          "    let c = '?';",
          "    is_escapeable_character(c);",
          "    assert!(is_escapeable_character('?'));  // is_meta_character('?') is true, expected return value is true",
          "    assert!(is_escapeable_character('.'));  // is_meta_character('.') is true, expected return value is true",
          "    assert!(is_escapeable_character('+'));  // is_meta_character('+') is true, expected return value is true",
          "    assert!(is_escapeable_character('*'));  // is_meta_character('*') is true, expected return value is true",
          "    assert!(is_escapeable_character('\\\\'));  // is_meta_character('\\\\') is true, expected return value is true",
          "    assert!(is_escapeable_character('('));  // is_meta_character('(') is true, expected return value is true",
          "    assert!(is_escapeable_character(')'));  // is_meta_character(')') is true, expected return value is true",
          "    assert!(is_escapeable_character('|'));  // is_meta_character('|') is true, expected return value is true",
          "    assert!(is_escapeable_character('['));  // is_meta_character('[') is true, expected return value is true",
          "    assert!(is_escapeable_character(']'));  // is_meta_character(']') is true, expected return value is true",
          "    assert!(is_escapeable_character('{'));  // is_meta_character('{') is true, expected return value is true",
          "    assert!(is_escapeable_character('}'));  // is_meta_character('}') is true, expected return value is true",
          "    assert!(is_escapeable_character('^'));  // is_meta_character('^') is true, expected return value is true",
          "    assert!(is_escapeable_character('$'));  // is_meta_character('$') is true, expected return value is true",
          "    assert!(is_escapeable_character('&'));  // is_meta_character('&') is true, expected return value is true",
          "    assert!(is_escapeable_character('-'));  // is_meta_character('-') is true, expected return value is true",
          "    assert!(is_escapeable_character('~'));  // is_meta_character('~') is true, expected return value is true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '(';",
          "    is_escapeable_character(c);",
          "}"
        ],
        "oracle": [
          "    assert!(is_escapeable_character('('));"
        ],
        "code": [
          "{",
          "    let c = '(';",
          "    is_escapeable_character(c);",
          "    assert!(is_escapeable_character('('));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = ')';",
          "    is_escapeable_character(c);",
          "}"
        ],
        "oracle": [
          "    assert!(is_escapeable_character('\\\\'));",
          "    assert!(is_escapeable_character('.'));",
          "    assert!(is_escapeable_character('+'));",
          "    assert!(is_escapeable_character('*'));",
          "    assert!(is_escapeable_character('?'));",
          "    assert!(is_escapeable_character('('));",
          "    assert!(is_escapeable_character(')'));",
          "    assert!(is_escapeable_character('|'));",
          "    assert!(is_escapeable_character('['));",
          "    assert!(is_escapeable_character(']'));",
          "    assert!(is_escapeable_character('{'));",
          "    assert!(is_escapeable_character('}'));",
          "    assert!(is_escapeable_character('^'));",
          "    assert!(is_escapeable_character('$'));",
          "    assert!(is_escapeable_character('#'));",
          "    assert!(is_escapeable_character('&'));",
          "    assert!(is_escapeable_character('-'));",
          "    assert!(is_escapeable_character('~'));"
        ],
        "code": [
          "{",
          "    let c = ')';",
          "    is_escapeable_character(c);",
          "    assert!(is_escapeable_character('\\\\'));",
          "    assert!(is_escapeable_character('.'));",
          "    assert!(is_escapeable_character('+'));",
          "    assert!(is_escapeable_character('*'));",
          "    assert!(is_escapeable_character('?'));",
          "    assert!(is_escapeable_character('('));",
          "    assert!(is_escapeable_character(')'));",
          "    assert!(is_escapeable_character('|'));",
          "    assert!(is_escapeable_character('['));",
          "    assert!(is_escapeable_character(']'));",
          "    assert!(is_escapeable_character('{'));",
          "    assert!(is_escapeable_character('}'));",
          "    assert!(is_escapeable_character('^'));",
          "    assert!(is_escapeable_character('$'));",
          "    assert!(is_escapeable_character('#'));",
          "    assert!(is_escapeable_character('&'));",
          "    assert!(is_escapeable_character('-'));",
          "    assert!(is_escapeable_character('~'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '|';",
          "    is_escapeable_character(c);",
          "}"
        ],
        "oracle": [
          "    assert!(is_escapeable_character('|'));"
        ],
        "code": [
          "{",
          "    let c = '|';",
          "    is_escapeable_character(c);",
          "    assert!(is_escapeable_character('|'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '[';",
          "    is_escapeable_character(c);",
          "}"
        ],
        "oracle": [
          "    assert!(is_escapeable_character('['));"
        ],
        "code": [
          "{",
          "    let c = '[';",
          "    is_escapeable_character(c);",
          "    assert!(is_escapeable_character('['));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = ']';",
          "    is_escapeable_character(c);",
          "}"
        ],
        "oracle": [
          "    assert!(is_escapeable_character('\\\\'));",
          "    assert!(is_escapeable_character('.'));",
          "    assert!(is_escapeable_character('+'));",
          "    assert!(is_escapeable_character('*'));",
          "    assert!(is_escapeable_character('?'));",
          "    assert!(is_escapeable_character('('));",
          "    assert!(is_escapeable_character(')'));",
          "    assert!(is_escapeable_character('|'));",
          "    assert!(is_escapeable_character('['));",
          "    assert!(is_escapeable_character(']'));",
          "    assert!(is_escapeable_character('{'));",
          "    assert!(is_escapeable_character('}'));",
          "    assert!(is_escapeable_character('^'));",
          "    assert!(is_escapeable_character('$'));",
          "    assert!(is_escapeable_character('#'));",
          "    assert!(is_escapeable_character('&'));",
          "    assert!(is_escapeable_character('-'));",
          "    assert!(is_escapeable_character('~'));"
        ],
        "code": [
          "{",
          "    let c = ']';",
          "    is_escapeable_character(c);",
          "    assert!(is_escapeable_character('\\\\'));",
          "    assert!(is_escapeable_character('.'));",
          "    assert!(is_escapeable_character('+'));",
          "    assert!(is_escapeable_character('*'));",
          "    assert!(is_escapeable_character('?'));",
          "    assert!(is_escapeable_character('('));",
          "    assert!(is_escapeable_character(')'));",
          "    assert!(is_escapeable_character('|'));",
          "    assert!(is_escapeable_character('['));",
          "    assert!(is_escapeable_character(']'));",
          "    assert!(is_escapeable_character('{'));",
          "    assert!(is_escapeable_character('}'));",
          "    assert!(is_escapeable_character('^'));",
          "    assert!(is_escapeable_character('$'));",
          "    assert!(is_escapeable_character('#'));",
          "    assert!(is_escapeable_character('&'));",
          "    assert!(is_escapeable_character('-'));",
          "    assert!(is_escapeable_character('~'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '{';",
          "    is_escapeable_character(c);",
          "}"
        ],
        "oracle": [
          "    assert!(is_escapeable_character('{'));"
        ],
        "code": [
          "{",
          "    let c = '{';",
          "    is_escapeable_character(c);",
          "    assert!(is_escapeable_character('{'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '}';",
          "    is_escapeable_character(c);",
          "}"
        ],
        "oracle": [
          "    assert!(is_escapeable_character('\\\\'));",
          "    assert!(is_escapeable_character('.'));",
          "    assert!(is_escapeable_character('+'));",
          "    assert!(is_escapeable_character('*'));",
          "    assert!(is_escapeable_character('?'));",
          "    assert!(is_escapeable_character('('));",
          "    assert!(is_escapeable_character(')'));",
          "    assert!(is_escapeable_character('|'));",
          "    assert!(is_escapeable_character('['));",
          "    assert!(is_escapeable_character(']'));",
          "    assert!(is_escapeable_character('{'));",
          "    assert!(is_escapeable_character('}'));",
          "    assert!(is_escapeable_character('^'));",
          "    assert!(is_escapeable_character('$'));",
          "    assert!(is_escapeable_character('#'));",
          "    assert!(is_escapeable_character('&'));",
          "    assert!(is_escapeable_character('-'));",
          "    assert!(is_escapeable_character('~'));"
        ],
        "code": [
          "{",
          "    let c = '}';",
          "    is_escapeable_character(c);",
          "    assert!(is_escapeable_character('\\\\'));",
          "    assert!(is_escapeable_character('.'));",
          "    assert!(is_escapeable_character('+'));",
          "    assert!(is_escapeable_character('*'));",
          "    assert!(is_escapeable_character('?'));",
          "    assert!(is_escapeable_character('('));",
          "    assert!(is_escapeable_character(')'));",
          "    assert!(is_escapeable_character('|'));",
          "    assert!(is_escapeable_character('['));",
          "    assert!(is_escapeable_character(']'));",
          "    assert!(is_escapeable_character('{'));",
          "    assert!(is_escapeable_character('}'));",
          "    assert!(is_escapeable_character('^'));",
          "    assert!(is_escapeable_character('$'));",
          "    assert!(is_escapeable_character('#'));",
          "    assert!(is_escapeable_character('&'));",
          "    assert!(is_escapeable_character('-'));",
          "    assert!(is_escapeable_character('~'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '^';",
          "    is_escapeable_character(c);",
          "}"
        ],
        "oracle": [
          "    assert!(is_escapeable_character('^'));"
        ],
        "code": [
          "{",
          "    let c = '^';",
          "    is_escapeable_character(c);",
          "    assert!(is_escapeable_character('^'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '$';",
          "    is_escapeable_character(c);",
          "}"
        ],
        "oracle": [
          "    assert!(is_escapeable_character('$'));"
        ],
        "code": [
          "{",
          "    let c = '$';",
          "    is_escapeable_character(c);",
          "    assert!(is_escapeable_character('$'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '#';",
          "    is_escapeable_character(c);",
          "}"
        ],
        "oracle": [
          "    assert!(is_escapeable_character('#'));",
          "    assert!(is_escapeable_character('\\\\'));",
          "    assert!(is_escapeable_character('.'));",
          "    assert!(is_escapeable_character('+'));",
          "    assert!(is_escapeable_character('*'));",
          "    assert!(is_escapeable_character('?'));",
          "    assert!(is_escapeable_character('('));",
          "    assert!(is_escapeable_character(')'));",
          "    assert!(is_escapeable_character('|'));",
          "    assert!(is_escapeable_character('['));",
          "    assert!(is_escapeable_character(']'));",
          "    assert!(is_escapeable_character('{'));",
          "    assert!(is_escapeable_character('}'));",
          "    assert!(is_escapeable_character('^'));",
          "    assert!(is_escapeable_character('$'));",
          "    assert!(is_escapeable_character('&'));",
          "    assert!(is_escapeable_character('-'));",
          "    assert!(is_escapeable_character('~'));"
        ],
        "code": [
          "{",
          "    let c = '#';",
          "    is_escapeable_character(c);",
          "    assert!(is_escapeable_character('#'));",
          "    assert!(is_escapeable_character('\\\\'));",
          "    assert!(is_escapeable_character('.'));",
          "    assert!(is_escapeable_character('+'));",
          "    assert!(is_escapeable_character('*'));",
          "    assert!(is_escapeable_character('?'));",
          "    assert!(is_escapeable_character('('));",
          "    assert!(is_escapeable_character(')'));",
          "    assert!(is_escapeable_character('|'));",
          "    assert!(is_escapeable_character('['));",
          "    assert!(is_escapeable_character(']'));",
          "    assert!(is_escapeable_character('{'));",
          "    assert!(is_escapeable_character('}'));",
          "    assert!(is_escapeable_character('^'));",
          "    assert!(is_escapeable_character('$'));",
          "    assert!(is_escapeable_character('&'));",
          "    assert!(is_escapeable_character('-'));",
          "    assert!(is_escapeable_character('~'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '&';",
          "    is_escapeable_character(c);",
          "}"
        ],
        "oracle": [
          "    assert!(is_escapeable_character('\\\\'));",
          "    assert!(is_escapeable_character('.'));",
          "    assert!(is_escapeable_character('+'));",
          "    assert!(is_escapeable_character('*'));",
          "    assert!(is_escapeable_character('?'));",
          "    assert!(is_escapeable_character('('));",
          "    assert!(is_escapeable_character(')'));",
          "    assert!(is_escapeable_character('|'));",
          "    assert!(is_escapeable_character('['));",
          "    assert!(is_escapeable_character(']'));",
          "    assert!(is_escapeable_character('{'));",
          "    assert!(is_escapeable_character('}'));",
          "    assert!(is_escapeable_character('^'));",
          "    assert!(is_escapeable_character('$'));",
          "    assert!(is_escapeable_character('#'));",
          "    assert!(is_escapeable_character('&'));",
          "    assert!(is_escapeable_character('-'));",
          "    assert!(is_escapeable_character('~'));"
        ],
        "code": [
          "{",
          "    let c = '&';",
          "    is_escapeable_character(c);",
          "    assert!(is_escapeable_character('\\\\'));",
          "    assert!(is_escapeable_character('.'));",
          "    assert!(is_escapeable_character('+'));",
          "    assert!(is_escapeable_character('*'));",
          "    assert!(is_escapeable_character('?'));",
          "    assert!(is_escapeable_character('('));",
          "    assert!(is_escapeable_character(')'));",
          "    assert!(is_escapeable_character('|'));",
          "    assert!(is_escapeable_character('['));",
          "    assert!(is_escapeable_character(']'));",
          "    assert!(is_escapeable_character('{'));",
          "    assert!(is_escapeable_character('}'));",
          "    assert!(is_escapeable_character('^'));",
          "    assert!(is_escapeable_character('$'));",
          "    assert!(is_escapeable_character('#'));",
          "    assert!(is_escapeable_character('&'));",
          "    assert!(is_escapeable_character('-'));",
          "    assert!(is_escapeable_character('~'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '-';",
          "    is_escapeable_character(c);",
          "}"
        ],
        "oracle": [
          "    assert!(is_escapeable_character('\\\\'));",
          "    assert!(is_escapeable_character('.'));",
          "    assert!(is_escapeable_character('+'));",
          "    assert!(is_escapeable_character('*'));",
          "    assert!(is_escapeable_character('?'));",
          "    assert!(is_escapeable_character('('));",
          "    assert!(is_escapeable_character(')'));",
          "    assert!(is_escapeable_character('|'));",
          "    assert!(is_escapeable_character('['));",
          "    assert!(is_escapeable_character(']'));",
          "    assert!(is_escapeable_character('{'));",
          "    assert!(is_escapeable_character('}'));",
          "    assert!(is_escapeable_character('^'));",
          "    assert!(is_escapeable_character('$'));",
          "    assert!(is_escapeable_character('#'));",
          "    assert!(is_escapeable_character('&'));",
          "    assert!(is_escapeable_character('-'));",
          "    assert!(is_escapeable_character('~'));"
        ],
        "code": [
          "{",
          "    let c = '-';",
          "    is_escapeable_character(c);",
          "    assert!(is_escapeable_character('\\\\'));",
          "    assert!(is_escapeable_character('.'));",
          "    assert!(is_escapeable_character('+'));",
          "    assert!(is_escapeable_character('*'));",
          "    assert!(is_escapeable_character('?'));",
          "    assert!(is_escapeable_character('('));",
          "    assert!(is_escapeable_character(')'));",
          "    assert!(is_escapeable_character('|'));",
          "    assert!(is_escapeable_character('['));",
          "    assert!(is_escapeable_character(']'));",
          "    assert!(is_escapeable_character('{'));",
          "    assert!(is_escapeable_character('}'));",
          "    assert!(is_escapeable_character('^'));",
          "    assert!(is_escapeable_character('$'));",
          "    assert!(is_escapeable_character('#'));",
          "    assert!(is_escapeable_character('&'));",
          "    assert!(is_escapeable_character('-'));",
          "    assert!(is_escapeable_character('~'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '~';",
          "    is_escapeable_character(c);",
          "}"
        ],
        "oracle": [
          "    assert!(is_escapeable_character('\\\\'));",
          "    assert!(is_escapeable_character('.'));",
          "    assert!(is_escapeable_character('+'));",
          "    assert!(is_escapeable_character('*'));",
          "    assert!(is_escapeable_character('?'));",
          "    assert!(is_escapeable_character('('));",
          "    assert!(is_escapeable_character(')'));",
          "    assert!(is_escapeable_character('|'));",
          "    assert!(is_escapeable_character('['));",
          "    assert!(is_escapeable_character(']'));",
          "    assert!(is_escapeable_character('{'));",
          "    assert!(is_escapeable_character('}'));",
          "    assert!(is_escapeable_character('^'));",
          "    assert!(is_escapeable_character('$'));",
          "    assert!(is_escapeable_character('#'));",
          "    assert!(is_escapeable_character('&'));",
          "    assert!(is_escapeable_character('-'));",
          "    assert!(is_escapeable_character('~'));"
        ],
        "code": [
          "{",
          "    let c = '~';",
          "    is_escapeable_character(c);",
          "    assert!(is_escapeable_character('\\\\'));",
          "    assert!(is_escapeable_character('.'));",
          "    assert!(is_escapeable_character('+'));",
          "    assert!(is_escapeable_character('*'));",
          "    assert!(is_escapeable_character('?'));",
          "    assert!(is_escapeable_character('('));",
          "    assert!(is_escapeable_character(')'));",
          "    assert!(is_escapeable_character('|'));",
          "    assert!(is_escapeable_character('['));",
          "    assert!(is_escapeable_character(']'));",
          "    assert!(is_escapeable_character('{'));",
          "    assert!(is_escapeable_character('}'));",
          "    assert!(is_escapeable_character('^'));",
          "    assert!(is_escapeable_character('$'));",
          "    assert!(is_escapeable_character('#'));",
          "    assert!(is_escapeable_character('&'));",
          "    assert!(is_escapeable_character('-'));",
          "    assert!(is_escapeable_character('~'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]