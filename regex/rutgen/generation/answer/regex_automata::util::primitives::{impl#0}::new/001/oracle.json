[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = 1;",
          "    let result = NonMaxUsize::new(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(NonMaxUsize::new(1 + 1).unwrap()));",
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(result.unwrap().get(), 2);",
          "    assert_eq!(NonMaxUsize::new(usize::MAX), None);",
          "    assert_eq!(NonMaxUsize::new(0), Some(NonMaxUsize::new(0 + 1).unwrap()));",
          "    assert_eq!(NonMaxUsize::new(usize::MAX - 1).is_some(), true);",
          "    assert_eq!(NonMaxUsize::new(usize::MAX).is_none(), true);"
        ],
        "code": [
          "{",
          "    let value = 1;",
          "    let result = NonMaxUsize::new(value);",
          "    assert_eq!(result, Some(NonMaxUsize::new(1 + 1).unwrap()));",
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(result.unwrap().get(), 2);",
          "    assert_eq!(NonMaxUsize::new(usize::MAX), None);",
          "    assert_eq!(NonMaxUsize::new(0), Some(NonMaxUsize::new(0 + 1).unwrap()));",
          "    assert_eq!(NonMaxUsize::new(usize::MAX - 1).is_some(), true);",
          "    assert_eq!(NonMaxUsize::new(usize::MAX).is_none(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = usize::MAX / 2;",
          "    let result = NonMaxUsize::new(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(result.unwrap().get(), value + 1);",
          "    ",
          "    let value = usize::MAX;",
          "    let result = NonMaxUsize::new(value);",
          "    assert_eq!(result.is_none(), true);",
          "    ",
          "    let value = 0;",
          "    let result = NonMaxUsize::new(value);",
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(result.unwrap().get(), value + 1);",
          "    ",
          "    let value = 1;",
          "    let result = NonMaxUsize::new(value);",
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(result.unwrap().get(), value + 1);",
          "    ",
          "    let value = usize::MAX - 1;",
          "    let result = NonMaxUsize::new(value);",
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(result.unwrap().get(), value + 1);"
        ],
        "code": [
          "{",
          "    let value = usize::MAX / 2;",
          "    let result = NonMaxUsize::new(value);",
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(result.unwrap().get(), value + 1);",
          "    ",
          "    let value = usize::MAX;",
          "    let result = NonMaxUsize::new(value);",
          "    assert_eq!(result.is_none(), true);",
          "    ",
          "    let value = 0;",
          "    let result = NonMaxUsize::new(value);",
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(result.unwrap().get(), value + 1);",
          "    ",
          "    let value = 1;",
          "    let result = NonMaxUsize::new(value);",
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(result.unwrap().get(), value + 1);",
          "    ",
          "    let value = usize::MAX - 1;",
          "    let result = NonMaxUsize::new(value);",
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(result.unwrap().get(), value + 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = usize::MAX - 1;",
          "    let result = NonMaxUsize::new(value);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().get(), usize::MAX - 1 + 1);",
          "    ",
          "    let value = usize::MAX;",
          "    let result = NonMaxUsize::new(value);",
          "    assert!(result.is_none());",
          "    ",
          "    let value = 0;",
          "    let result = NonMaxUsize::new(value);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().get(), 0 + 1);",
          "    ",
          "    let value = 1;",
          "    let result = NonMaxUsize::new(value);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().get(), 1 + 1);"
        ],
        "code": [
          "{",
          "    let value = usize::MAX - 1;",
          "    let result = NonMaxUsize::new(value);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().get(), usize::MAX - 1 + 1);",
          "    ",
          "    let value = usize::MAX;",
          "    let result = NonMaxUsize::new(value);",
          "    assert!(result.is_none());",
          "    ",
          "    let value = 0;",
          "    let result = NonMaxUsize::new(value);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().get(), 0 + 1);",
          "    ",
          "    let value = 1;",
          "    let result = NonMaxUsize::new(value);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().get(), 1 + 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = 0;",
          "    let result = NonMaxUsize::new(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())));",
          "    let value = usize::MAX;",
          "    let result = NonMaxUsize::new(value);",
          "    assert_eq!(result, None);",
          "    let value = 1;",
          "    let result = NonMaxUsize::new(value);",
          "    assert_eq!(result, Some(NonMaxUsize(NonZeroUsize::new(2).unwrap())));",
          "    let value = 10;",
          "    let result = NonMaxUsize::new(value);",
          "    assert_eq!(result, Some(NonMaxUsize(NonZeroUsize::new(11).unwrap())));",
          "    let value = usize::MAX - 1;",
          "    let result = NonMaxUsize::new(value);",
          "    assert_eq!(result, Some(NonMaxUsize(NonZeroUsize::new(usize::MAX).unwrap())));"
        ],
        "code": [
          "{",
          "    let value = 0;",
          "    let result = NonMaxUsize::new(value);",
          "    assert_eq!(result, Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())));",
          "    let value = usize::MAX;",
          "    let result = NonMaxUsize::new(value);",
          "    assert_eq!(result, None);",
          "    let value = 1;",
          "    let result = NonMaxUsize::new(value);",
          "    assert_eq!(result, Some(NonMaxUsize(NonZeroUsize::new(2).unwrap())));",
          "    let value = 10;",
          "    let result = NonMaxUsize::new(value);",
          "    assert_eq!(result, Some(NonMaxUsize(NonZeroUsize::new(11).unwrap())));",
          "    let value = usize::MAX - 1;",
          "    let result = NonMaxUsize::new(value);",
          "    assert_eq!(result, Some(NonMaxUsize(NonZeroUsize::new(usize::MAX).unwrap())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]