[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        translator: Translator,",
          "        flags: Flags,",
          "    }",
          "    ",
          "    let mut visitor = TestVisitor {",
          "        translator: Translator {",
          "            stack: RefCell::new(vec![]),",
          "            flags: Cell::new(Flags { unicode: Some(true), case_insensitive: Some(false), ..Default::default() }),",
          "            utf8: true,",
          "            line_terminator: b'\\n',",
          "        },",
          "        flags: Flags {",
          "            unicode: Some(true),",
          "            case_insensitive: Some(false),",
          "            ..Default::default()",
          "        },",
          "    };",
          "    ",
          "    let op = ast::ClassSetBinaryOp {",
          "        span: Span::default(),",
          "        kind: ast::ClassSetBinaryOpKind::SymmetricDifference,",
          "        lhs: Box::new(ast::ClassSet::Item(ast::ClassSetItem::default())),",
          "        rhs: Box::new(ast::ClassSet::Item(ast::ClassSetItem::default())),",
          "    };",
          "    ",
          "    visitor.visit_class_set_binary_op_post(&op).unwrap();",
          "}"
        ],
        "oracle": [
          "    self.trans().flags.set(Flags { unicode: Some(true), case_insensitive: Some(false), ..Default::default() });",
          "    let op = ast::ClassSetBinaryOp { kind: ast::ClassSetBinaryOpKind::SymmetricDifference, ..Default::default() };",
          "    assert_eq!(visitor.visit_class_set_binary_op_post(&op), Ok(()));"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        translator: Translator,",
          "        flags: Flags,",
          "    }",
          "    ",
          "    let mut visitor = TestVisitor {",
          "        translator: Translator {",
          "            stack: RefCell::new(vec![]),",
          "            flags: Cell::new(Flags { unicode: Some(true), case_insensitive: Some(false), ..Default::default() }),",
          "            utf8: true,",
          "            line_terminator: b'\\n',",
          "        },",
          "        flags: Flags {",
          "            unicode: Some(true),",
          "            case_insensitive: Some(false),",
          "            ..Default::default()",
          "        },",
          "    };",
          "    ",
          "    let op = ast::ClassSetBinaryOp {",
          "        span: Span::default(),",
          "        kind: ast::ClassSetBinaryOpKind::SymmetricDifference,",
          "        lhs: Box::new(ast::ClassSet::Item(ast::ClassSetItem::default())),",
          "        rhs: Box::new(ast::ClassSet::Item(ast::ClassSetItem::default())),",
          "    };",
          "    ",
          "    visitor.visit_class_set_binary_op_post(&op).unwrap();",
          "    self.trans().flags.set(Flags { unicode: Some(true), case_insensitive: Some(false), ..Default::default() });",
          "    let op = ast::ClassSetBinaryOp { kind: ast::ClassSetBinaryOpKind::SymmetricDifference, ..Default::default() };",
          "    assert_eq!(visitor.visit_class_set_binary_op_post(&op), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        translator: Translator,",
          "        flags: Flags,",
          "    }",
          "    ",
          "    let mut visitor = TestVisitor {",
          "        translator: Translator {",
          "            stack: RefCell::new(vec![]),",
          "            flags: Cell::new(Flags { unicode: Some(true), case_insensitive: Some(false), ..Default::default() }),",
          "            utf8: true,",
          "            line_terminator: b'\\n',",
          "        },",
          "        flags: Flags {",
          "            unicode: Some(true),",
          "            case_insensitive: Some(false),",
          "            ..Default::default()",
          "        },",
          "    };",
          "    ",
          "    let op = ast::ClassSetBinaryOp {",
          "        span: Span::default(),",
          "        kind: ast::ClassSetBinaryOpKind::Intersection,",
          "        lhs: Box::new(ast::ClassSet::Item(ast::ClassSetItem::default())),",
          "        rhs: Box::new(ast::ClassSet::Item(ast::ClassSetItem::default())),",
          "    };",
          "    ",
          "    visitor.visit_class_set_binary_op_post(&op).unwrap();",
          "}"
        ],
        "oracle": [
          "    let mut visitor = TestVisitor {",
          "    translator: Translator {",
          "    stack: RefCell::new(vec![]),",
          "    flags: Cell::new(Flags { unicode: Some(true), case_insensitive: Some(false), ..Default::default() }),",
          "    utf8: true,",
          "    line_terminator: b'\\n',",
          "    },",
          "    flags: Flags {",
          "    unicode: Some(true),",
          "    case_insensitive: Some(false),",
          "    ..Default::default()",
          "    },",
          "    };",
          "    ",
          "    let op = ast::ClassSetBinaryOp {",
          "    span: Span::default(),",
          "    kind: ast::ClassSetBinaryOpKind::SymmetricDifference,",
          "    lhs: Box::new(ast::ClassSet::Item(ast::ClassSetItem::default())),",
          "    rhs: Box::new(ast::ClassSet::Item(ast::ClassSetItem::default())),",
          "    };",
          "    ",
          "    assert_eq!(visitor.visit_class_set_binary_op_post(&op), Ok(()));"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        translator: Translator,",
          "        flags: Flags,",
          "    }",
          "    ",
          "    let mut visitor = TestVisitor {",
          "        translator: Translator {",
          "            stack: RefCell::new(vec![]),",
          "            flags: Cell::new(Flags { unicode: Some(true), case_insensitive: Some(false), ..Default::default() }),",
          "            utf8: true,",
          "            line_terminator: b'\\n',",
          "        },",
          "        flags: Flags {",
          "            unicode: Some(true),",
          "            case_insensitive: Some(false),",
          "            ..Default::default()",
          "        },",
          "    };",
          "    ",
          "    let op = ast::ClassSetBinaryOp {",
          "        span: Span::default(),",
          "        kind: ast::ClassSetBinaryOpKind::Intersection,",
          "        lhs: Box::new(ast::ClassSet::Item(ast::ClassSetItem::default())),",
          "        rhs: Box::new(ast::ClassSet::Item(ast::ClassSetItem::default())),",
          "    };",
          "    ",
          "    visitor.visit_class_set_binary_op_post(&op).unwrap();",
          "    let mut visitor = TestVisitor {",
          "    translator: Translator {",
          "    stack: RefCell::new(vec![]),",
          "    flags: Cell::new(Flags { unicode: Some(true), case_insensitive: Some(false), ..Default::default() }),",
          "    utf8: true,",
          "    line_terminator: b'\\n',",
          "    },",
          "    flags: Flags {",
          "    unicode: Some(true),",
          "    case_insensitive: Some(false),",
          "    ..Default::default()",
          "    },",
          "    };",
          "    ",
          "    let op = ast::ClassSetBinaryOp {",
          "    span: Span::default(),",
          "    kind: ast::ClassSetBinaryOpKind::SymmetricDifference,",
          "    lhs: Box::new(ast::ClassSet::Item(ast::ClassSetItem::default())),",
          "    rhs: Box::new(ast::ClassSet::Item(ast::ClassSetItem::default())),",
          "    };",
          "    ",
          "    assert_eq!(visitor.visit_class_set_binary_op_post(&op), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        translator: Translator,",
          "        flags: Flags,",
          "    }",
          "    ",
          "    let mut visitor = TestVisitor {",
          "        translator: Translator {",
          "            stack: RefCell::new(vec![]),",
          "            flags: Cell::new(Flags { unicode: Some(true), case_insensitive: Some(false), ..Default::default() }),",
          "            utf8: true,",
          "            line_terminator: b'\\n',",
          "        },",
          "        flags: Flags {",
          "            unicode: Some(true),",
          "            case_insensitive: Some(false),",
          "            ..Default::default()",
          "        },",
          "    };",
          "    ",
          "    let op = ast::ClassSetBinaryOp {",
          "        span: Span::default(),",
          "        kind: ast::ClassSetBinaryOpKind::Difference,",
          "        lhs: Box::new(ast::ClassSet::Item(ast::ClassSetItem::default())),",
          "        rhs: Box::new(ast::ClassSet::Item(ast::ClassSetItem::default())),",
          "    };",
          "    ",
          "    visitor.visit_class_set_binary_op_post(&op).unwrap();",
          "}"
        ],
        "oracle": [
          "    let mut visitor = TestVisitor {",
          "    translator: Translator {",
          "    stack: RefCell::new(vec![]),",
          "    flags: Cell::new(Flags { unicode: Some(true), case_insensitive: Some(false), ..Default::default() }),",
          "    utf8: true,",
          "    line_terminator: b'\\n',",
          "    },",
          "    flags: Flags {",
          "    unicode: Some(true),",
          "    case_insensitive: Some(false),",
          "    ..Default::default()",
          "    },",
          "    };",
          "    ",
          "    let op = ast::ClassSetBinaryOp {",
          "    span: Span::default(),",
          "    kind: ast::ClassSetBinaryOpKind::SymmetricDifference,",
          "    lhs: Box::new(ast::ClassSet::Item(ast::ClassSetItem::default())),",
          "    rhs: Box::new(ast::ClassSet::Item(ast::ClassSetItem::default())),",
          "    };",
          "    ",
          "    assert_eq!(visitor.visit_class_set_binary_op_post(&op), Ok(()));"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        translator: Translator,",
          "        flags: Flags,",
          "    }",
          "    ",
          "    let mut visitor = TestVisitor {",
          "        translator: Translator {",
          "            stack: RefCell::new(vec![]),",
          "            flags: Cell::new(Flags { unicode: Some(true), case_insensitive: Some(false), ..Default::default() }),",
          "            utf8: true,",
          "            line_terminator: b'\\n',",
          "        },",
          "        flags: Flags {",
          "            unicode: Some(true),",
          "            case_insensitive: Some(false),",
          "            ..Default::default()",
          "        },",
          "    };",
          "    ",
          "    let op = ast::ClassSetBinaryOp {",
          "        span: Span::default(),",
          "        kind: ast::ClassSetBinaryOpKind::Difference,",
          "        lhs: Box::new(ast::ClassSet::Item(ast::ClassSetItem::default())),",
          "        rhs: Box::new(ast::ClassSet::Item(ast::ClassSetItem::default())),",
          "    };",
          "    ",
          "    visitor.visit_class_set_binary_op_post(&op).unwrap();",
          "    let mut visitor = TestVisitor {",
          "    translator: Translator {",
          "    stack: RefCell::new(vec![]),",
          "    flags: Cell::new(Flags { unicode: Some(true), case_insensitive: Some(false), ..Default::default() }),",
          "    utf8: true,",
          "    line_terminator: b'\\n',",
          "    },",
          "    flags: Flags {",
          "    unicode: Some(true),",
          "    case_insensitive: Some(false),",
          "    ..Default::default()",
          "    },",
          "    };",
          "    ",
          "    let op = ast::ClassSetBinaryOp {",
          "    span: Span::default(),",
          "    kind: ast::ClassSetBinaryOpKind::SymmetricDifference,",
          "    lhs: Box::new(ast::ClassSet::Item(ast::ClassSetItem::default())),",
          "    rhs: Box::new(ast::ClassSet::Item(ast::ClassSetItem::default())),",
          "    };",
          "    ",
          "    assert_eq!(visitor.visit_class_set_binary_op_post(&op), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]