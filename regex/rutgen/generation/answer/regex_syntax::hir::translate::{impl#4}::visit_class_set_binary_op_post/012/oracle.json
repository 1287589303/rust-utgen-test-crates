[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(Vec::new()),",
          "        flags: Cell::new(Flags {",
          "            case_insensitive: Some(false),",
          "            unicode: Some(false),",
          "            ..Default::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    ",
          "    let class_set_op = ast::ClassSetBinaryOp {",
          "        span: Span::new(0, 1), // Some valid span",
          "        kind: ast::ClassSetBinaryOpKind::SymmetricDifference,",
          "        lhs: Box::new(ClassSet::Item(ClassSetItem::Literal('a'))),",
          "        rhs: Box::new(ClassSet::Item(ClassSetItem::Literal('b'))),",
          "    };",
          "    ",
          "    let mut visitor = TranslatorI::new(&translator, \"\");",
          "    ",
          "    let class_bytes_1 = ClassBytes::new(vec![ClassBytesRange::new(0, 1)]);",
          "    let class_bytes_2 = ClassBytes::new(vec![ClassBytesRange::new(2, 3)]);",
          "    let class_bytes_3 = ClassBytes::new(vec![ClassBytesRange::new(4, 5)]);",
          "    ",
          "    visitor.push(HirFrame::ClassBytes(class_bytes_1));",
          "    visitor.push(HirFrame::ClassBytes(class_bytes_2));",
          "    visitor.push(HirFrame::ClassBytes(class_bytes_3));",
          "    ",
          "    let _result = visitor.visit_class_set_binary_op_post(&class_set_op);",
          "}"
        ],
        "oracle": [
          "    let mut translator = Translator {",
          "    stack: RefCell::new(Vec::new()),",
          "    flags: Cell::new(Flags {",
          "    case_insensitive: Some(false),",
          "    unicode: Some(false),",
          "    ..Default::default()",
          "    }),",
          "    utf8: true,",
          "    line_terminator: b'\\n',",
          "    };",
          "    ",
          "    let class_set_op = ast::ClassSetBinaryOp {",
          "    span: Span::new(0, 1),",
          "    kind: ast::ClassSetBinaryOpKind::SymmetricDifference,",
          "    lhs: Box::new(ClassSet::Item(ClassSetItem::Literal('a'))),",
          "    rhs: Box::new(ClassSet::Item(ClassSetItem::Literal('b'))),",
          "    };",
          "    ",
          "    let mut visitor = TranslatorI::new(&translator, \"\");",
          "    ",
          "    let class_bytes_1 = ClassBytes::new(vec![ClassBytesRange::new(0, 1)]);",
          "    let class_bytes_2 = ClassBytes::new(vec![ClassBytesRange::new(2, 3)]);",
          "    let class_bytes_3 = ClassBytes::new(vec![ClassBytesRange::new(4, 5)]);",
          "    ",
          "    visitor.push(HirFrame::ClassBytes(class_bytes_1));",
          "    visitor.push(HirFrame::ClassBytes(class_bytes_2));",
          "    visitor.push(HirFrame::ClassBytes(class_bytes_3));",
          "    ",
          "    let result = visitor.visit_class_set_binary_op_post(&class_set_op);",
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(Vec::new()),",
          "        flags: Cell::new(Flags {",
          "            case_insensitive: Some(false),",
          "            unicode: Some(false),",
          "            ..Default::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    ",
          "    let class_set_op = ast::ClassSetBinaryOp {",
          "        span: Span::new(0, 1), // Some valid span",
          "        kind: ast::ClassSetBinaryOpKind::SymmetricDifference,",
          "        lhs: Box::new(ClassSet::Item(ClassSetItem::Literal('a'))),",
          "        rhs: Box::new(ClassSet::Item(ClassSetItem::Literal('b'))),",
          "    };",
          "    ",
          "    let mut visitor = TranslatorI::new(&translator, \"\");",
          "    ",
          "    let class_bytes_1 = ClassBytes::new(vec![ClassBytesRange::new(0, 1)]);",
          "    let class_bytes_2 = ClassBytes::new(vec![ClassBytesRange::new(2, 3)]);",
          "    let class_bytes_3 = ClassBytes::new(vec![ClassBytesRange::new(4, 5)]);",
          "    ",
          "    visitor.push(HirFrame::ClassBytes(class_bytes_1));",
          "    visitor.push(HirFrame::ClassBytes(class_bytes_2));",
          "    visitor.push(HirFrame::ClassBytes(class_bytes_3));",
          "    ",
          "    let _result = visitor.visit_class_set_binary_op_post(&class_set_op);",
          "    let mut translator = Translator {",
          "    stack: RefCell::new(Vec::new()),",
          "    flags: Cell::new(Flags {",
          "    case_insensitive: Some(false),",
          "    unicode: Some(false),",
          "    ..Default::default()",
          "    }),",
          "    utf8: true,",
          "    line_terminator: b'\\n',",
          "    };",
          "    ",
          "    let class_set_op = ast::ClassSetBinaryOp {",
          "    span: Span::new(0, 1),",
          "    kind: ast::ClassSetBinaryOpKind::SymmetricDifference,",
          "    lhs: Box::new(ClassSet::Item(ClassSetItem::Literal('a'))),",
          "    rhs: Box::new(ClassSet::Item(ClassSetItem::Literal('b'))),",
          "    };",
          "    ",
          "    let mut visitor = TranslatorI::new(&translator, \"\");",
          "    ",
          "    let class_bytes_1 = ClassBytes::new(vec![ClassBytesRange::new(0, 1)]);",
          "    let class_bytes_2 = ClassBytes::new(vec![ClassBytesRange::new(2, 3)]);",
          "    let class_bytes_3 = ClassBytes::new(vec![ClassBytesRange::new(4, 5)]);",
          "    ",
          "    visitor.push(HirFrame::ClassBytes(class_bytes_1));",
          "    visitor.push(HirFrame::ClassBytes(class_bytes_2));",
          "    visitor.push(HirFrame::ClassBytes(class_bytes_3));",
          "    ",
          "    let result = visitor.visit_class_set_binary_op_post(&class_set_op);",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(Vec::new()),",
          "        flags: Cell::new(Flags {",
          "            case_insensitive: Some(false),",
          "            unicode: Some(false),",
          "            ..Default::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    ",
          "    let class_set_op = ast::ClassSetBinaryOp {",
          "        span: Span::new(0, 1), // Some valid span",
          "        kind: ast::ClassSetBinaryOpKind::SymmetricDifference,",
          "        lhs: Box::new(ClassSet::Item(ClassSetItem::Literal('a'))),",
          "        rhs: Box::new(ClassSet::Item(ClassSetItem::Literal('b'))),",
          "    };",
          "    ",
          "    let mut visitor = TranslatorI::new(&translator, \"\");",
          "    ",
          "    let empty_class_bytes_1 = ClassBytes::empty();",
          "    let empty_class_bytes_2 = ClassBytes::empty();",
          "    let empty_class_bytes_3 = ClassBytes::empty();",
          "    ",
          "    visitor.push(HirFrame::ClassBytes(empty_class_bytes_1));",
          "    visitor.push(HirFrame::ClassBytes(empty_class_bytes_2));",
          "    visitor.push(HirFrame::ClassBytes(empty_class_bytes_3));",
          "    ",
          "    let _result = visitor.visit_class_set_binary_op_post(&class_set_op);",
          "}"
        ],
        "oracle": [
          "    visitor.flags().unicode() == false",
          "    visitor.flags().case_insensitive() == false",
          "    class_set_op.kind == ast::ClassSetBinaryOpKind::SymmetricDifference",
          "    _result == Ok(())"
        ],
        "code": [
          "{",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(Vec::new()),",
          "        flags: Cell::new(Flags {",
          "            case_insensitive: Some(false),",
          "            unicode: Some(false),",
          "            ..Default::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    ",
          "    let class_set_op = ast::ClassSetBinaryOp {",
          "        span: Span::new(0, 1), // Some valid span",
          "        kind: ast::ClassSetBinaryOpKind::SymmetricDifference,",
          "        lhs: Box::new(ClassSet::Item(ClassSetItem::Literal('a'))),",
          "        rhs: Box::new(ClassSet::Item(ClassSetItem::Literal('b'))),",
          "    };",
          "    ",
          "    let mut visitor = TranslatorI::new(&translator, \"\");",
          "    ",
          "    let empty_class_bytes_1 = ClassBytes::empty();",
          "    let empty_class_bytes_2 = ClassBytes::empty();",
          "    let empty_class_bytes_3 = ClassBytes::empty();",
          "    ",
          "    visitor.push(HirFrame::ClassBytes(empty_class_bytes_1));",
          "    visitor.push(HirFrame::ClassBytes(empty_class_bytes_2));",
          "    visitor.push(HirFrame::ClassBytes(empty_class_bytes_3));",
          "    ",
          "    let _result = visitor.visit_class_set_binary_op_post(&class_set_op);",
          "    visitor.flags().unicode() == false",
          "    visitor.flags().case_insensitive() == false",
          "    class_set_op.kind == ast::ClassSetBinaryOpKind::SymmetricDifference",
          "    _result == Ok(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(Vec::new()),",
          "        flags: Cell::new(Flags {",
          "            case_insensitive: Some(false),",
          "            unicode: Some(false),",
          "            ..Default::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    ",
          "    let class_set_op = ast::ClassSetBinaryOp {",
          "        span: Span::new(0, 1), // Some valid span",
          "        kind: ast::ClassSetBinaryOpKind::SymmetricDifference,",
          "        lhs: Box::new(ClassSet::Item(ClassSetItem::Literal('c'))),",
          "        rhs: Box::new(ClassSet::Item(ClassSetItem::Literal('d'))),",
          "    };",
          "    ",
          "    let mut visitor = TranslatorI::new(&translator, \"\");",
          "    ",
          "    let class_bytes_1 = ClassBytes::new(vec![ClassBytesRange::new(10, 20)]);",
          "    let class_bytes_2 = ClassBytes::new(vec![ClassBytesRange::new(30, 40)]);",
          "    let class_bytes_3 = ClassBytes::new(vec![ClassBytesRange::new(50, 60)]);",
          "    ",
          "    visitor.push(HirFrame::ClassBytes(class_bytes_1));",
          "    visitor.push(HirFrame::ClassBytes(class_bytes_2));",
          "    visitor.push(HirFrame::ClassBytes(class_bytes_3));",
          "    ",
          "    let _result = visitor.visit_class_set_binary_op_post(&class_set_op);",
          "}"
        ],
        "oracle": [
          "    let mut translator = Translator { stack: RefCell::new(Vec::new()), flags: Cell::new(Flags { case_insensitive: Some(false), unicode: Some(false), ..Default::default() }), utf8: true, line_terminator: b'\\n', };",
          "    let class_set_op = ast::ClassSetBinaryOp { span: Span::new(0, 1), kind: ast::ClassSetBinaryOpKind::SymmetricDifference, lhs: Box::new(ClassSet::Item(ClassSetItem::Literal('c'))), rhs: Box::new(ClassSet::Item(ClassSetItem::Literal('d'))), };",
          "    let mut visitor = TranslatorI::new(&translator, \"\");",
          "    let class_bytes_1 = ClassBytes::new(vec![ClassBytesRange::new(10, 20)]);",
          "    let class_bytes_2 = ClassBytes::new(vec![ClassBytesRange::new(30, 40)]);",
          "    let class_bytes_3 = ClassBytes::new(vec![ClassBytesRange::new(50, 60)]);",
          "    visitor.push(HirFrame::ClassBytes(class_bytes_1));",
          "    visitor.push(HirFrame::ClassBytes(class_bytes_2));",
          "    visitor.push(HirFrame::ClassBytes(class_bytes_3));",
          "    let _result = visitor.visit_class_set_binary_op_post(&class_set_op);",
          "    assert_eq!(_result, Ok(()));"
        ],
        "code": [
          "{",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(Vec::new()),",
          "        flags: Cell::new(Flags {",
          "            case_insensitive: Some(false),",
          "            unicode: Some(false),",
          "            ..Default::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    ",
          "    let class_set_op = ast::ClassSetBinaryOp {",
          "        span: Span::new(0, 1), // Some valid span",
          "        kind: ast::ClassSetBinaryOpKind::SymmetricDifference,",
          "        lhs: Box::new(ClassSet::Item(ClassSetItem::Literal('c'))),",
          "        rhs: Box::new(ClassSet::Item(ClassSetItem::Literal('d'))),",
          "    };",
          "    ",
          "    let mut visitor = TranslatorI::new(&translator, \"\");",
          "    ",
          "    let class_bytes_1 = ClassBytes::new(vec![ClassBytesRange::new(10, 20)]);",
          "    let class_bytes_2 = ClassBytes::new(vec![ClassBytesRange::new(30, 40)]);",
          "    let class_bytes_3 = ClassBytes::new(vec![ClassBytesRange::new(50, 60)]);",
          "    ",
          "    visitor.push(HirFrame::ClassBytes(class_bytes_1));",
          "    visitor.push(HirFrame::ClassBytes(class_bytes_2));",
          "    visitor.push(HirFrame::ClassBytes(class_bytes_3));",
          "    ",
          "    let _result = visitor.visit_class_set_binary_op_post(&class_set_op);",
          "    let mut translator = Translator { stack: RefCell::new(Vec::new()), flags: Cell::new(Flags { case_insensitive: Some(false), unicode: Some(false), ..Default::default() }), utf8: true, line_terminator: b'\\n', };",
          "    let class_set_op = ast::ClassSetBinaryOp { span: Span::new(0, 1), kind: ast::ClassSetBinaryOpKind::SymmetricDifference, lhs: Box::new(ClassSet::Item(ClassSetItem::Literal('c'))), rhs: Box::new(ClassSet::Item(ClassSetItem::Literal('d'))), };",
          "    let mut visitor = TranslatorI::new(&translator, \"\");",
          "    let class_bytes_1 = ClassBytes::new(vec![ClassBytesRange::new(10, 20)]);",
          "    let class_bytes_2 = ClassBytes::new(vec![ClassBytesRange::new(30, 40)]);",
          "    let class_bytes_3 = ClassBytes::new(vec![ClassBytesRange::new(50, 60)]);",
          "    visitor.push(HirFrame::ClassBytes(class_bytes_1));",
          "    visitor.push(HirFrame::ClassBytes(class_bytes_2));",
          "    visitor.push(HirFrame::ClassBytes(class_bytes_3));",
          "    let _result = visitor.visit_class_set_binary_op_post(&class_set_op);",
          "    assert_eq!(_result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]