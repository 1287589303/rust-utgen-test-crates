[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sparse_set = SparseSet::new(5);",
          "    let state_id = StateID(0);",
          "    assert!(sparse_set.insert(state_id));",
          "}"
        ],
        "oracle": [
          "    let mut sparse_set = SparseSet::new(5);",
          "    let state_id = StateID(0);",
          "    assert_eq!(sparse_set.len(), 0);",
          "    assert_eq!(sparse_set.capacity(), 5);",
          "    assert!(!sparse_set.contains(state_id);",
          "    assert!(sparse_set.insert(state_id));",
          "    assert!(sparse_set.len() == 1);",
          "    assert!(sparse_set.contains(state_id));",
          "    assert!(sparse_set.insert(state_id) == false);"
        ],
        "code": [
          "{",
          "    let mut sparse_set = SparseSet::new(5);",
          "    let state_id = StateID(0);",
          "    assert!(sparse_set.insert(state_id));",
          "    let mut sparse_set = SparseSet::new(5);",
          "    let state_id = StateID(0);",
          "    assert_eq!(sparse_set.len(), 0);",
          "    assert_eq!(sparse_set.capacity(), 5);",
          "    assert!(!sparse_set.contains(state_id);",
          "    assert!(sparse_set.insert(state_id));",
          "    assert!(sparse_set.len() == 1);",
          "    assert!(sparse_set.contains(state_id));",
          "    assert!(sparse_set.insert(state_id) == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sparse_set = SparseSet::new(5);",
          "    let state_id1 = StateID(1);",
          "    let state_id2 = StateID(2);",
          "    assert!(sparse_set.insert(state_id1));",
          "    assert!(sparse_set.insert(state_id2));",
          "}"
        ],
        "oracle": [
          "    assert!(sparse_set.len() == 2);",
          "    assert!(sparse_set.capacity() == 5);",
          "    assert!(sparse_set.contains(state_id1));",
          "    assert!(sparse_set.contains(state_id2));"
        ],
        "code": [
          "{",
          "    let mut sparse_set = SparseSet::new(5);",
          "    let state_id1 = StateID(1);",
          "    let state_id2 = StateID(2);",
          "    assert!(sparse_set.insert(state_id1));",
          "    assert!(sparse_set.insert(state_id2));",
          "    assert!(sparse_set.len() == 2);",
          "    assert!(sparse_set.capacity() == 5);",
          "    assert!(sparse_set.contains(state_id1));",
          "    assert!(sparse_set.contains(state_id2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sparse_set = SparseSet::new(2);",
          "    let state_id1 = StateID(0);",
          "    let state_id2 = StateID(1);",
          "    assert!(sparse_set.insert(state_id1));",
          "    assert!(sparse_set.insert(state_id2));",
          "}"
        ],
        "oracle": [
          "    assert!(sparse_set.len() == 2);",
          "    assert!(sparse_set.contains(state_id1));",
          "    assert!(sparse_set.contains(state_id2));",
          "    assert!(sparse_set.capacity() == 2);",
          "    assert!(!sparse_set.is_empty());",
          "    assert!(sparse_set.insert(StateID(2)) == false);",
          "    assert!(sparse_set.len() == 2);"
        ],
        "code": [
          "{",
          "    let mut sparse_set = SparseSet::new(2);",
          "    let state_id1 = StateID(0);",
          "    let state_id2 = StateID(1);",
          "    assert!(sparse_set.insert(state_id1));",
          "    assert!(sparse_set.insert(state_id2));",
          "    assert!(sparse_set.len() == 2);",
          "    assert!(sparse_set.contains(state_id1));",
          "    assert!(sparse_set.contains(state_id2));",
          "    assert!(sparse_set.capacity() == 2);",
          "    assert!(!sparse_set.is_empty());",
          "    assert!(sparse_set.insert(StateID(2)) == false);",
          "    assert!(sparse_set.len() == 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sparse_set = SparseSet::new(3);",
          "    let state_id1 = StateID(3);",
          "    let state_id2 = StateID(4);",
          "    assert!(sparse_set.insert(state_id1));",
          "    assert!(sparse_set.insert(state_id2));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sparse_set.len(), 2);",
          "    assert_eq!(sparse_set.capacity(), 3);",
          "    assert!(sparse_set.contains(state_id1));",
          "    assert!(sparse_set.contains(state_id2));",
          "    assert!(!sparse_set.insert(state_id1));",
          "    assert!(!sparse_set.insert(state_id2));",
          "    assert_eq!(sparse_set.len(), 2);",
          "    assert_eq!(sparse_set.memory_usage(), /* appropriate memory size for 3 elements */);"
        ],
        "code": [
          "{",
          "    let mut sparse_set = SparseSet::new(3);",
          "    let state_id1 = StateID(3);",
          "    let state_id2 = StateID(4);",
          "    assert!(sparse_set.insert(state_id1));",
          "    assert!(sparse_set.insert(state_id2));",
          "    assert_eq!(sparse_set.len(), 2);",
          "    assert_eq!(sparse_set.capacity(), 3);",
          "    assert!(sparse_set.contains(state_id1));",
          "    assert!(sparse_set.contains(state_id2));",
          "    assert!(!sparse_set.insert(state_id1));",
          "    assert!(!sparse_set.insert(state_id2));",
          "    assert_eq!(sparse_set.len(), 2);",
          "    assert_eq!(sparse_set.memory_usage(), /* appropriate memory size for 3 elements */);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]