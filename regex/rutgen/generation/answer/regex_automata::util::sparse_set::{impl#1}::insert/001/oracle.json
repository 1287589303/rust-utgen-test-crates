[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sparse_set = SparseSet::new(10);",
          "    let state_id = StateID::new_unchecked(2);",
          "    sparse_set.insert(state_id);",
          "    let result = sparse_set.insert(state_id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    assert_eq!(sparse_set.len(), 1);",
          "    assert!(sparse_set.contains(state_id));"
        ],
        "code": [
          "{",
          "    let mut sparse_set = SparseSet::new(10);",
          "    let state_id = StateID::new_unchecked(2);",
          "    sparse_set.insert(state_id);",
          "    let result = sparse_set.insert(state_id);",
          "    assert_eq!(result, false);",
          "    assert_eq!(sparse_set.len(), 1);",
          "    assert!(sparse_set.contains(state_id));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sparse_set = SparseSet::new(5);",
          "    let state_id = StateID::new_unchecked(1);",
          "    sparse_set.insert(state_id);",
          "    let first_insert_result = sparse_set.insert(state_id);",
          "    let second_insert_result = sparse_set.insert(state_id);",
          "}"
        ],
        "oracle": [
          "    let first_insert_result = sparse_set.insert(state_id); // expected: true",
          "    let second_insert_result = sparse_set.insert(state_id); // expected: false",
          "    assert_eq!(first_insert_result, true); // validating first insert",
          "    assert_eq!(second_insert_result, false); // validating second insert (idempotent behavior)"
        ],
        "code": [
          "{",
          "    let mut sparse_set = SparseSet::new(5);",
          "    let state_id = StateID::new_unchecked(1);",
          "    sparse_set.insert(state_id);",
          "    let first_insert_result = sparse_set.insert(state_id);",
          "    let second_insert_result = sparse_set.insert(state_id);",
          "    let first_insert_result = sparse_set.insert(state_id); // expected: true",
          "    let second_insert_result = sparse_set.insert(state_id); // expected: false",
          "    assert_eq!(first_insert_result, true); // validating first insert",
          "    assert_eq!(second_insert_result, false); // validating second insert (idempotent behavior)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sparse_set = SparseSet::new(1);",
          "    let state_id = StateID::new_unchecked(0);",
          "    sparse_set.insert(state_id);",
          "    let result = sparse_set.insert(state_id);",
          "}"
        ],
        "oracle": [
          "    let mut sparse_set = SparseSet::new(1);",
          "    let state_id = StateID::new_unchecked(0);",
          "    sparse_set.insert(state_id);",
          "    let result = sparse_set.insert(state_id);",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let mut sparse_set = SparseSet::new(1);",
          "    let state_id = StateID::new_unchecked(0);",
          "    sparse_set.insert(state_id);",
          "    let result = sparse_set.insert(state_id);",
          "    let mut sparse_set = SparseSet::new(1);",
          "    let state_id = StateID::new_unchecked(0);",
          "    sparse_set.insert(state_id);",
          "    let result = sparse_set.insert(state_id);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]