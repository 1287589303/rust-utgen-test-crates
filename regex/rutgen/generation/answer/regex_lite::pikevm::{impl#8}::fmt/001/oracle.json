[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sparse_set = SparseSet::new(0);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    sparse_set.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sparse_set.len(), 0);",
          "    assert!(sparse_set.is_empty());",
          "    assert_eq!(formatter.output(), \"SparseSet([])\");",
          "    ",
          "    let sparse_set_with_capacity = SparseSet::new(10);",
          "    assert_eq!(sparse_set_with_capacity.capacity(), 10);",
          "    assert_eq!(sparse_set_with_capacity.len(), 0);",
          "    ",
          "    sparse_set_with_capacity.insert(1);",
          "    assert_eq!(sparse_set_with_capacity.len(), 1);",
          "    assert!(sparse_set_with_capacity.contains(1));",
          "    ",
          "    let formatted_output = sparse_set_with_capacity.fmt(&mut formatter);",
          "    assert!(formatted_output.is_ok());",
          "    assert_eq!(formatter.output(), \"SparseSet([1])\");"
        ],
        "code": [
          "{",
          "    let sparse_set = SparseSet::new(0);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    sparse_set.fmt(&mut formatter);",
          "    assert_eq!(sparse_set.len(), 0);",
          "    assert!(sparse_set.is_empty());",
          "    assert_eq!(formatter.output(), \"SparseSet([])\");",
          "    ",
          "    let sparse_set_with_capacity = SparseSet::new(10);",
          "    assert_eq!(sparse_set_with_capacity.capacity(), 10);",
          "    assert_eq!(sparse_set_with_capacity.len(), 0);",
          "    ",
          "    sparse_set_with_capacity.insert(1);",
          "    assert_eq!(sparse_set_with_capacity.len(), 1);",
          "    assert!(sparse_set_with_capacity.contains(1));",
          "    ",
          "    let formatted_output = sparse_set_with_capacity.fmt(&mut formatter);",
          "    assert!(formatted_output.is_ok());",
          "    assert_eq!(formatter.output(), \"SparseSet([1])\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sparse_set = SparseSet::new(1);",
          "    let id = StateID::new(0);",
          "    sparse_set.insert(id);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    sparse_set.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    let mut sparse_set = SparseSet::new(1);",
          "    assert_eq!(sparse_set.len(), 0);",
          "    assert!(sparse_set.is_empty());",
          "    let id = StateID::new(0);",
          "    assert!(sparse_set.insert(id));",
          "    assert_eq!(sparse_set.len(), 1);",
          "    assert!(!sparse_set.is_empty());",
          "    assert!(sparse_set.contains(id));",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    assert!(sparse_set.fmt(&mut formatter).is_ok());",
          "    assert_eq!(formatter.to_string(), \"SparseSet(0)\");"
        ],
        "code": [
          "{",
          "    let mut sparse_set = SparseSet::new(1);",
          "    let id = StateID::new(0);",
          "    sparse_set.insert(id);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    sparse_set.fmt(&mut formatter);",
          "    let mut sparse_set = SparseSet::new(1);",
          "    assert_eq!(sparse_set.len(), 0);",
          "    assert!(sparse_set.is_empty());",
          "    let id = StateID::new(0);",
          "    assert!(sparse_set.insert(id));",
          "    assert_eq!(sparse_set.len(), 1);",
          "    assert!(!sparse_set.is_empty());",
          "    assert!(sparse_set.contains(id));",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    assert!(sparse_set.fmt(&mut formatter).is_ok());",
          "    assert_eq!(formatter.to_string(), \"SparseSet(0)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let max_state_id = StateID::max_value();",
          "    let mut sparse_set = SparseSet::new(max_state_id.into());",
          "    for i in 0..=max_state_id {",
          "        sparse_set.insert(StateID::new(i));",
          "    }",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    sparse_set.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sparse_set.len(), max_state_id + 1);",
          "    assert!(!sparse_set.is_empty());",
          "    assert_eq!(sparse_set.capacity(), max_state_id.into());",
          "    assert!(sparse_set.contains(StateID::new(0)));",
          "    assert!(sparse_set.contains(StateID::new(max_state_id)));",
          "    assert_eq!(formatter.output().contains(\"SparseSet\"), true);"
        ],
        "code": [
          "{",
          "    let max_state_id = StateID::max_value();",
          "    let mut sparse_set = SparseSet::new(max_state_id.into());",
          "    for i in 0..=max_state_id {",
          "        sparse_set.insert(StateID::new(i));",
          "    }",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    sparse_set.fmt(&mut formatter);",
          "    assert_eq!(sparse_set.len(), max_state_id + 1);",
          "    assert!(!sparse_set.is_empty());",
          "    assert_eq!(sparse_set.capacity(), max_state_id.into());",
          "    assert!(sparse_set.contains(StateID::new(0)));",
          "    assert!(sparse_set.contains(StateID::new(max_state_id)));",
          "    assert_eq!(formatter.output().contains(\"SparseSet\"), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sparse_set = SparseSet::new(1);",
          "    let id1 = StateID::new(0);",
          "    let id2 = StateID::new(1);",
          "    sparse_set.insert(id1);",
          "    sparse_set.insert(id2);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    sparse_set.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    let mut sparse_set = SparseSet::new(1);",
          "    let id1 = StateID::new(0);",
          "    let id2 = StateID::new(1);",
          "    assert_eq!(sparse_set.len(), 0);",
          "    assert_eq!(sparse_set.is_empty(), true);",
          "    assert!(sparse_set.insert(id1));",
          "    assert!(sparse_set.insert(id2));",
          "    assert_eq!(sparse_set.len(), 2);",
          "    assert_eq!(sparse_set.contains(id1), true);",
          "    assert_eq!(sparse_set.contains(id2), true);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let result = sparse_set.fmt(&mut formatter);",
          "    assert!(result.is_ok());",
          "    assert_eq!(formatter.buffer().contains(\"SparseSet\"), true);",
          "    sparse_set.clear();",
          "    assert_eq!(sparse_set.len(), 0);",
          "    assert_eq!(sparse_set.is_empty(), true);"
        ],
        "code": [
          "{",
          "    let mut sparse_set = SparseSet::new(1);",
          "    let id1 = StateID::new(0);",
          "    let id2 = StateID::new(1);",
          "    sparse_set.insert(id1);",
          "    sparse_set.insert(id2);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    sparse_set.fmt(&mut formatter);",
          "    let mut sparse_set = SparseSet::new(1);",
          "    let id1 = StateID::new(0);",
          "    let id2 = StateID::new(1);",
          "    assert_eq!(sparse_set.len(), 0);",
          "    assert_eq!(sparse_set.is_empty(), true);",
          "    assert!(sparse_set.insert(id1));",
          "    assert!(sparse_set.insert(id2));",
          "    assert_eq!(sparse_set.len(), 2);",
          "    assert_eq!(sparse_set.contains(id1), true);",
          "    assert_eq!(sparse_set.contains(id2), true);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let result = sparse_set.fmt(&mut formatter);",
          "    assert!(result.is_ok());",
          "    assert_eq!(formatter.buffer().contains(\"SparseSet\"), true);",
          "    sparse_set.clear();",
          "    assert_eq!(sparse_set.len(), 0);",
          "    assert_eq!(sparse_set.is_empty(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sparse_set = SparseSet::new(3);",
          "    sparse_set.insert(StateID::new(0));",
          "    sparse_set.clear();",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    sparse_set.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sparse_set.len(), 0);",
          "    assert!(sparse_set.is_empty());",
          "    assert_eq!(formatter.output(), \"SparseSet([])\");"
        ],
        "code": [
          "{",
          "    let mut sparse_set = SparseSet::new(3);",
          "    sparse_set.insert(StateID::new(0));",
          "    sparse_set.clear();",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    sparse_set.fmt(&mut formatter);",
          "    assert_eq!(sparse_set.len(), 0);",
          "    assert!(sparse_set.is_empty());",
          "    assert_eq!(formatter.output(), \"SparseSet([])\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]