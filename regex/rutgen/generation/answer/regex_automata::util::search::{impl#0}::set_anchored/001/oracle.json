[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut input = Input::new(\"foobar\");",
          "    input.set_anchored(Anchored::No);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Anchored::No, input.get_anchored());",
          "    input.set_anchored(Anchored::Pattern(PatternID::must(5)));",
          "    assert_eq!(Anchored::Pattern(PatternID::must(5)), input.get_anchored());",
          "    input.set_anchored(Anchored::Yes);",
          "    assert_eq!(Anchored::Yes, input.get_anchored());",
          "    input.set_anchored(Anchored::No);",
          "    assert_eq!(Anchored::No, input.get_anchored());"
        ],
        "code": [
          "{",
          "    let mut input = Input::new(\"foobar\");",
          "    input.set_anchored(Anchored::No);",
          "    assert_eq!(Anchored::No, input.get_anchored());",
          "    input.set_anchored(Anchored::Pattern(PatternID::must(5)));",
          "    assert_eq!(Anchored::Pattern(PatternID::must(5)), input.get_anchored());",
          "    input.set_anchored(Anchored::Yes);",
          "    assert_eq!(Anchored::Yes, input.get_anchored());",
          "    input.set_anchored(Anchored::No);",
          "    assert_eq!(Anchored::No, input.get_anchored());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut input = Input::new(\"foobar\");",
          "    input.set_anchored(Anchored::Yes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Anchored::Yes, input.get_anchored());",
          "    input.set_anchored(Anchored::No);",
          "    assert_eq!(Anchored::No, input.get_anchored());",
          "    let pid = PatternID::must(5);",
          "    input.set_anchored(Anchored::Pattern(pid));",
          "    assert_eq!(Anchored::Pattern(pid), input.get_anchored());"
        ],
        "code": [
          "{",
          "    let mut input = Input::new(\"foobar\");",
          "    input.set_anchored(Anchored::Yes);",
          "    assert_eq!(Anchored::Yes, input.get_anchored());",
          "    input.set_anchored(Anchored::No);",
          "    assert_eq!(Anchored::No, input.get_anchored());",
          "    let pid = PatternID::must(5);",
          "    input.set_anchored(Anchored::Pattern(pid));",
          "    assert_eq!(Anchored::Pattern(pid), input.get_anchored());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut input = Input::new(\"foobar\");",
          "    let pid = PatternID::must(1);",
          "    input.set_anchored(Anchored::Pattern(pid));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Anchored::No, input.get_anchored());",
          "    input.set_anchored(Anchored::Pattern(pid));",
          "    assert_eq!(Anchored::Pattern(pid), input.get_anchored());"
        ],
        "code": [
          "{",
          "    let mut input = Input::new(\"foobar\");",
          "    let pid = PatternID::must(1);",
          "    input.set_anchored(Anchored::Pattern(pid));",
          "    assert_eq!(Anchored::No, input.get_anchored());",
          "    input.set_anchored(Anchored::Pattern(pid));",
          "    assert_eq!(Anchored::Pattern(pid), input.get_anchored());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut input = Input::new(\"foobar\");",
          "    let pid = PatternID::must(usize::MAX);",
          "    input.set_anchored(Anchored::Pattern(pid));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(input.get_anchored(), Anchored::Pattern(pid));",
          "    input.set_anchored(Anchored::No);",
          "    assert_eq!(input.get_anchored(), Anchored::No);",
          "    input.set_anchored(Anchored::Yes);",
          "    assert_eq!(input.get_anchored(), Anchored::Yes);",
          "    input.set_anchored(Anchored::Pattern(PatternID::must(1)));",
          "    assert_eq!(input.get_anchored(), Anchored::Pattern(PatternID::must(1)));"
        ],
        "code": [
          "{",
          "    let mut input = Input::new(\"foobar\");",
          "    let pid = PatternID::must(usize::MAX);",
          "    input.set_anchored(Anchored::Pattern(pid));",
          "    assert_eq!(input.get_anchored(), Anchored::Pattern(pid));",
          "    input.set_anchored(Anchored::No);",
          "    assert_eq!(input.get_anchored(), Anchored::No);",
          "    input.set_anchored(Anchored::Yes);",
          "    assert_eq!(input.get_anchored(), Anchored::Yes);",
          "    input.set_anchored(Anchored::Pattern(PatternID::must(1)));",
          "    assert_eq!(input.get_anchored(), Anchored::Pattern(PatternID::must(1)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]