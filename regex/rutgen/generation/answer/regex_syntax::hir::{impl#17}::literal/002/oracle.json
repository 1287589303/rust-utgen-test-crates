[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ranges = vec![",
          "        ClassBytesRange { start: 0, end: 1 },",
          "        ClassBytesRange { start: 2, end: 3 },",
          "    ];",
          "    let class_bytes = ClassBytes::new(ranges);",
          "    class_bytes.literal();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_bytes.literal(), None);"
        ],
        "code": [
          "{",
          "    let ranges = vec![",
          "        ClassBytesRange { start: 0, end: 1 },",
          "        ClassBytesRange { start: 2, end: 3 },",
          "    ];",
          "    let class_bytes = ClassBytes::new(ranges);",
          "    class_bytes.literal();",
          "    assert_eq!(class_bytes.literal(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ranges = vec![ClassBytesRange { start: 0, end: 2 }];",
          "    let class_bytes = ClassBytes::new(ranges);",
          "    class_bytes.literal();",
          "}"
        ],
        "oracle": [
          "    class_bytes.literal().is_none();"
        ],
        "code": [
          "{",
          "    let ranges = vec![ClassBytesRange { start: 0, end: 2 }];",
          "    let class_bytes = ClassBytes::new(ranges);",
          "    class_bytes.literal();",
          "    class_bytes.literal().is_none();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let class_bytes = ClassBytes::empty();",
          "    class_bytes.literal();",
          "}"
        ],
        "oracle": [
          "    class_bytes.literal().unwrap_err();",
          "    let class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 1, end: 2 }]);",
          "    class_bytes.literal().is_none();",
          "    let class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 5, end: 5 }, ClassBytesRange { start: 6, end: 6 }]);",
          "    class_bytes.literal().is_none();"
        ],
        "code": [
          "{",
          "    let class_bytes = ClassBytes::empty();",
          "    class_bytes.literal();",
          "    class_bytes.literal().unwrap_err();",
          "    let class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 1, end: 2 }]);",
          "    class_bytes.literal().is_none();",
          "    let class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 5, end: 5 }, ClassBytesRange { start: 6, end: 6 }]);",
          "    class_bytes.literal().is_none();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]