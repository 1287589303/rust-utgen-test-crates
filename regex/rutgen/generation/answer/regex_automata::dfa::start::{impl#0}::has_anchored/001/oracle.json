[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = StartKind::Unanchored;",
          "    let result = kind.has_anchored();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let kind = StartKind::Unanchored;",
          "    let result = kind.has_anchored();",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = StartKind::Both;",
          "    let result = kind.has_anchored();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    let kind = StartKind::Unanchored;",
          "    assert_eq!(kind.has_anchored(), false);",
          "    let kind = StartKind::Both;",
          "    assert!(!matches!(*kind, StartKind::Both));",
          "    let kind = StartKind::Anchored;",
          "    assert_eq!(kind.has_anchored(), false);"
        ],
        "code": [
          "{",
          "    let kind = StartKind::Both;",
          "    let result = kind.has_anchored();",
          "    assert_eq!(result, false);",
          "    let kind = StartKind::Unanchored;",
          "    assert_eq!(kind.has_anchored(), false);",
          "    let kind = StartKind::Both;",
          "    assert!(!matches!(*kind, StartKind::Both));",
          "    let kind = StartKind::Anchored;",
          "    assert_eq!(kind.has_anchored(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = StartKind::Anchored;",
          "    let result = kind.has_anchored();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let kind = StartKind::Anchored;",
          "    let result = kind.has_anchored();",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]