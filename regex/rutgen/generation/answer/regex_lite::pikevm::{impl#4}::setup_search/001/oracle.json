[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut cache = Cache::new(&PikeVM {});",
          "    cache.setup_search(0);",
          "}"
        ],
        "oracle": [
          "    cache.stack.is_empty()",
          "    cache.curr.set.is_empty()",
          "    cache.next.set.is_empty()",
          "    cache.curr.slot_table.slot_count() == 0",
          "    cache.next.slot_table.slot_count() == 0",
          "    cache.setup_search(1);",
          "    cache.stack.is_empty()",
          "    cache.curr.slot_table.slot_count() == 1",
          "    cache.next.slot_table.slot_count() == 1",
          "    cache.setup_search(10);",
          "    cache.stack.is_empty()",
          "    cache.curr.slot_table.slot_count() == 10",
          "    cache.next.slot_table.slot_count() == 10"
        ],
        "code": [
          "{",
          "    let mut cache = Cache::new(&PikeVM {});",
          "    cache.setup_search(0);",
          "    cache.stack.is_empty()",
          "    cache.curr.set.is_empty()",
          "    cache.next.set.is_empty()",
          "    cache.curr.slot_table.slot_count() == 0",
          "    cache.next.slot_table.slot_count() == 0",
          "    cache.setup_search(1);",
          "    cache.stack.is_empty()",
          "    cache.curr.slot_table.slot_count() == 1",
          "    cache.next.slot_table.slot_count() == 1",
          "    cache.setup_search(10);",
          "    cache.stack.is_empty()",
          "    cache.curr.slot_table.slot_count() == 10",
          "    cache.next.slot_table.slot_count() == 10",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut cache = Cache::new(&PikeVM {});",
          "    cache.setup_search(1);",
          "}"
        ],
        "oracle": [
          "    cache.stack.is_empty();",
          "    cache.curr.set.is_empty();",
          "    cache.next.set.is_empty();",
          "    cache.curr.slot_table.len() == 1;",
          "    cache.next.slot_table.len() == 1;"
        ],
        "code": [
          "{",
          "    let mut cache = Cache::new(&PikeVM {});",
          "    cache.setup_search(1);",
          "    cache.stack.is_empty();",
          "    cache.curr.set.is_empty();",
          "    cache.next.set.is_empty();",
          "    cache.curr.slot_table.len() == 1;",
          "    cache.next.slot_table.len() == 1;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut cache = Cache::new(&PikeVM {});",
          "    cache.setup_search(5);",
          "}"
        ],
        "oracle": [
          "    cache.stack.is_empty();",
          "    cache.curr.set.is_empty();",
          "    cache.next.set.is_empty();",
          "    cache.curr.slot_table.slot_count() == 5;",
          "    cache.next.slot_table.slot_count() == 5;",
          "    cache.stack.len() == 0;",
          "    cache.curr.slot_table.is_initialized();",
          "    cache.next.slot_table.is_initialized();"
        ],
        "code": [
          "{",
          "    let mut cache = Cache::new(&PikeVM {});",
          "    cache.setup_search(5);",
          "    cache.stack.is_empty();",
          "    cache.curr.set.is_empty();",
          "    cache.next.set.is_empty();",
          "    cache.curr.slot_table.slot_count() == 5;",
          "    cache.next.slot_table.slot_count() == 5;",
          "    cache.stack.len() == 0;",
          "    cache.curr.slot_table.is_initialized();",
          "    cache.next.slot_table.is_initialized();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut cache = Cache::new(&PikeVM {});",
          "    cache.setup_search(100);",
          "}"
        ],
        "oracle": [
          "    assert!(cache.stack.is_empty());",
          "    assert!(cache.curr.set.is_empty());",
          "    assert!(cache.next.set.is_empty());",
          "    assert_eq!(cache.curr.slot_table.slot_len(), 100);",
          "    assert_eq!(cache.next.slot_table.slot_len(), 100);"
        ],
        "code": [
          "{",
          "    let mut cache = Cache::new(&PikeVM {});",
          "    cache.setup_search(100);",
          "    assert!(cache.stack.is_empty());",
          "    assert!(cache.curr.set.is_empty());",
          "    assert!(cache.next.set.is_empty());",
          "    assert_eq!(cache.curr.slot_table.slot_len(), 100);",
          "    assert_eq!(cache.next.slot_table.slot_len(), 100);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]