[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: u8 = 95;",
          "    let result = is_word_byte(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);  // Testing with underscore '_'",
          "    let input: u8 = 48;  // ASCII for '0'",
          "    let result = is_word_byte(input);",
          "    assert_eq!(result, true);  // Testing with digit '0'",
          "    let input: u8 = 57;  // ASCII for '9'",
          "    let result = is_word_byte(input);",
          "    assert_eq!(result, true);  // Testing with digit '9'",
          "    let input: u8 = 65;  // ASCII for 'A'",
          "    let result = is_word_byte(input);",
          "    assert_eq!(result, true);  // Testing with uppercase 'A'",
          "    let input: u8 = 90;  // ASCII for 'Z'",
          "    let result = is_word_byte(input);",
          "    assert_eq!(result, true);  // Testing with uppercase 'Z'",
          "    let input: u8 = 97;  // ASCII for 'a'",
          "    let result = is_word_byte(input);",
          "    assert_eq!(result, true);  // Testing with lowercase 'a'",
          "    let input: u8 = 122;  // ASCII for 'z'",
          "    let result = is_word_byte(input);",
          "    assert_eq!(result, true);  // Testing with lowercase 'z'",
          "    let input: u8 = 255;  // Out of valid character range",
          "    let result = is_word_byte(input);",
          "    assert_eq!(result, false);  // Testing invalid byte (not a word character)",
          "    let input: u8 = 32;  // ASCII for space",
          "    let result = is_word_byte(input);",
          "    assert_eq!(result, false);  // Testing space character",
          "    let input: u8 = 64;  // ASCII for '@'",
          "    let result = is_word_byte(input);",
          "    assert_eq!(result, false);  // Testing character '@'"
        ],
        "code": [
          "{",
          "    let input: u8 = 95;",
          "    let result = is_word_byte(input);",
          "    assert_eq!(result, true);  // Testing with underscore '_'",
          "    let input: u8 = 48;  // ASCII for '0'",
          "    let result = is_word_byte(input);",
          "    assert_eq!(result, true);  // Testing with digit '0'",
          "    let input: u8 = 57;  // ASCII for '9'",
          "    let result = is_word_byte(input);",
          "    assert_eq!(result, true);  // Testing with digit '9'",
          "    let input: u8 = 65;  // ASCII for 'A'",
          "    let result = is_word_byte(input);",
          "    assert_eq!(result, true);  // Testing with uppercase 'A'",
          "    let input: u8 = 90;  // ASCII for 'Z'",
          "    let result = is_word_byte(input);",
          "    assert_eq!(result, true);  // Testing with uppercase 'Z'",
          "    let input: u8 = 97;  // ASCII for 'a'",
          "    let result = is_word_byte(input);",
          "    assert_eq!(result, true);  // Testing with lowercase 'a'",
          "    let input: u8 = 122;  // ASCII for 'z'",
          "    let result = is_word_byte(input);",
          "    assert_eq!(result, true);  // Testing with lowercase 'z'",
          "    let input: u8 = 255;  // Out of valid character range",
          "    let result = is_word_byte(input);",
          "    assert_eq!(result, false);  // Testing invalid byte (not a word character)",
          "    let input: u8 = 32;  // ASCII for space",
          "    let result = is_word_byte(input);",
          "    assert_eq!(result, false);  // Testing space character",
          "    let input: u8 = 64;  // ASCII for '@'",
          "    let result = is_word_byte(input);",
          "    assert_eq!(result, false);  // Testing character '@'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    for digit in 48..=57 {",
          "        let result = is_word_byte(digit);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'1'), true);",
          "    assert_eq!(is_word_byte(b'2'), true);",
          "    assert_eq!(is_word_byte(b'3'), true);",
          "    assert_eq!(is_word_byte(b'4'), true);",
          "    assert_eq!(is_word_byte(b'5'), true);",
          "    assert_eq!(is_word_byte(b'6'), true);",
          "    assert_eq!(is_word_byte(b'7'), true);",
          "    assert_eq!(is_word_byte(b'8'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'B'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'b'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b' '), false);",
          "    assert_eq!(is_word_byte(b'!'), false);",
          "    assert_eq!(is_word_byte(b'@'), false);",
          "    assert_eq!(is_word_byte(b'\\0'), false);",
          "    assert_eq!(is_word_byte(255), false);",
          "    assert_eq!(is_word_byte(10), false);"
        ],
        "code": [
          "{",
          "    for digit in 48..=57 {",
          "        let result = is_word_byte(digit);",
          "    }",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'1'), true);",
          "    assert_eq!(is_word_byte(b'2'), true);",
          "    assert_eq!(is_word_byte(b'3'), true);",
          "    assert_eq!(is_word_byte(b'4'), true);",
          "    assert_eq!(is_word_byte(b'5'), true);",
          "    assert_eq!(is_word_byte(b'6'), true);",
          "    assert_eq!(is_word_byte(b'7'), true);",
          "    assert_eq!(is_word_byte(b'8'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'B'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'b'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b' '), false);",
          "    assert_eq!(is_word_byte(b'!'), false);",
          "    assert_eq!(is_word_byte(b'@'), false);",
          "    assert_eq!(is_word_byte(b'\\0'), false);",
          "    assert_eq!(is_word_byte(255), false);",
          "    assert_eq!(is_word_byte(10), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    for uppercase in 65..=90 {",
          "        let result = is_word_byte(uppercase);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'B'), true);",
          "    assert_eq!(is_word_byte(b'C'), true);",
          "    assert_eq!(is_word_byte(b'D'), true);",
          "    assert_eq!(is_word_byte(b'E'), true);",
          "    assert_eq!(is_word_byte(b'F'), true);",
          "    assert_eq!(is_word_byte(b'G'), true);",
          "    assert_eq!(is_word_byte(b'H'), true);",
          "    assert_eq!(is_word_byte(b'I'), true);",
          "    assert_eq!(is_word_byte(b'J'), true);",
          "    assert_eq!(is_word_byte(b'K'), true);",
          "    assert_eq!(is_word_byte(b'L'), true);",
          "    assert_eq!(is_word_byte(b'M'), true);",
          "    assert_eq!(is_word_byte(b'N'), true);",
          "    assert_eq!(is_word_byte(b'O'), true);",
          "    assert_eq!(is_word_byte(b'P'), true);",
          "    assert_eq!(is_word_byte(b'Q'), true);",
          "    assert_eq!(is_word_byte(b'R'), true);",
          "    assert_eq!(is_word_byte(b'S'), true);",
          "    assert_eq!(is_word_byte(b'T'), true);",
          "    assert_eq!(is_word_byte(b'U'), true);",
          "    assert_eq!(is_word_byte(b'V'), true);",
          "    assert_eq!(is_word_byte(b'W'), true);",
          "    assert_eq!(is_word_byte(b'X'), true);",
          "    assert_eq!(is_word_byte(b'Y'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);"
        ],
        "code": [
          "{",
          "    for uppercase in 65..=90 {",
          "        let result = is_word_byte(uppercase);",
          "    }",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'B'), true);",
          "    assert_eq!(is_word_byte(b'C'), true);",
          "    assert_eq!(is_word_byte(b'D'), true);",
          "    assert_eq!(is_word_byte(b'E'), true);",
          "    assert_eq!(is_word_byte(b'F'), true);",
          "    assert_eq!(is_word_byte(b'G'), true);",
          "    assert_eq!(is_word_byte(b'H'), true);",
          "    assert_eq!(is_word_byte(b'I'), true);",
          "    assert_eq!(is_word_byte(b'J'), true);",
          "    assert_eq!(is_word_byte(b'K'), true);",
          "    assert_eq!(is_word_byte(b'L'), true);",
          "    assert_eq!(is_word_byte(b'M'), true);",
          "    assert_eq!(is_word_byte(b'N'), true);",
          "    assert_eq!(is_word_byte(b'O'), true);",
          "    assert_eq!(is_word_byte(b'P'), true);",
          "    assert_eq!(is_word_byte(b'Q'), true);",
          "    assert_eq!(is_word_byte(b'R'), true);",
          "    assert_eq!(is_word_byte(b'S'), true);",
          "    assert_eq!(is_word_byte(b'T'), true);",
          "    assert_eq!(is_word_byte(b'U'), true);",
          "    assert_eq!(is_word_byte(b'V'), true);",
          "    assert_eq!(is_word_byte(b'W'), true);",
          "    assert_eq!(is_word_byte(b'X'), true);",
          "    assert_eq!(is_word_byte(b'Y'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    for lowercase in 97..=122 {",
          "        let result = is_word_byte(lowercase);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'b'), true);",
          "    assert_eq!(is_word_byte(b'c'), true);",
          "    assert_eq!(is_word_byte(b'd'), true);",
          "    assert_eq!(is_word_byte(b'e'), true);",
          "    assert_eq!(is_word_byte(b'f'), true);",
          "    assert_eq!(is_word_byte(b'g'), true);",
          "    assert_eq!(is_word_byte(b'h'), true);",
          "    assert_eq!(is_word_byte(b'i'), true);",
          "    assert_eq!(is_word_byte(b'j'), true);",
          "    assert_eq!(is_word_byte(b'k'), true);",
          "    assert_eq!(is_word_byte(b'l'), true);",
          "    assert_eq!(is_word_byte(b'm'), true);",
          "    assert_eq!(is_word_byte(b'n'), true);",
          "    assert_eq!(is_word_byte(b'o'), true);",
          "    assert_eq!(is_word_byte(b'p'), true);",
          "    assert_eq!(is_word_byte(b'q'), true);",
          "    assert_eq!(is_word_byte(b'r'), true);",
          "    assert_eq!(is_word_byte(b's'), true);",
          "    assert_eq!(is_word_byte(b't'), true);",
          "    assert_eq!(is_word_byte(b'u'), true);",
          "    assert_eq!(is_word_byte(b'v'), true);",
          "    assert_eq!(is_word_byte(b'w'), true);",
          "    assert_eq!(is_word_byte(b'x'), true);",
          "    assert_eq!(is_word_byte(b'y'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'!'), false);",
          "    assert_eq!(is_word_byte(b'@'), false);",
          "    assert_eq!(is_word_byte(b'#'), false);",
          "    assert_eq!(is_word_byte(b'$'), false);",
          "    assert_eq!(is_word_byte(b'%'), false);",
          "    assert_eq!(is_word_byte(b'^'), false);",
          "    assert_eq!(is_word_byte(b'&'), false);",
          "    assert_eq!(is_word_byte(b'*'), false);",
          "    assert_eq!(is_word_byte(b'('), false);",
          "    assert_eq!(is_word_byte(b')'), false);",
          "    assert_eq!(is_word_byte(b'-'), false);",
          "    assert_eq!(is_word_byte(b'+'), false);",
          "    assert_eq!(is_word_byte(b'='), false);",
          "    assert_eq!(is_word_byte(b'{'), false);",
          "    assert_eq!(is_word_byte(b'}'), false);",
          "    assert_eq!(is_word_byte(b'['), false);",
          "    assert_eq!(is_word_byte(b']'), false);",
          "    assert_eq!(is_word_byte(b':' ), false);",
          "    assert_eq!(is_word_byte(b';'), false);",
          "    assert_eq!(is_word_byte(b'\"'), false);",
          "    assert_eq!(is_word_byte(b'\\'', false);",
          "    assert_eq!(is_word_byte(b'<'), false);",
          "    assert_eq!(is_word_byte(b'>'), false);",
          "    assert_eq!(is_word_byte(b'?, false);",
          "    assert_eq!(is_word_byte(b'/'), false);",
          "    assert_eq!(is_word_byte(b'\\\\'), false);",
          "    assert_eq!(is_word_byte(b'|'), false);",
          "    assert_eq!(is_word_byte(b'~'), false);",
          "    assert_eq!(is_word_byte(255), false);",
          "    assert_eq!(is_word_byte(0), false);",
          "    assert_eq!(is_word_byte(128), false);",
          "    assert_eq!(is_word_byte(127), false);",
          "    assert_eq!(is_word_byte(64), false);"
        ],
        "code": [
          "{",
          "    for lowercase in 97..=122 {",
          "        let result = is_word_byte(lowercase);",
          "    }",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'b'), true);",
          "    assert_eq!(is_word_byte(b'c'), true);",
          "    assert_eq!(is_word_byte(b'd'), true);",
          "    assert_eq!(is_word_byte(b'e'), true);",
          "    assert_eq!(is_word_byte(b'f'), true);",
          "    assert_eq!(is_word_byte(b'g'), true);",
          "    assert_eq!(is_word_byte(b'h'), true);",
          "    assert_eq!(is_word_byte(b'i'), true);",
          "    assert_eq!(is_word_byte(b'j'), true);",
          "    assert_eq!(is_word_byte(b'k'), true);",
          "    assert_eq!(is_word_byte(b'l'), true);",
          "    assert_eq!(is_word_byte(b'm'), true);",
          "    assert_eq!(is_word_byte(b'n'), true);",
          "    assert_eq!(is_word_byte(b'o'), true);",
          "    assert_eq!(is_word_byte(b'p'), true);",
          "    assert_eq!(is_word_byte(b'q'), true);",
          "    assert_eq!(is_word_byte(b'r'), true);",
          "    assert_eq!(is_word_byte(b's'), true);",
          "    assert_eq!(is_word_byte(b't'), true);",
          "    assert_eq!(is_word_byte(b'u'), true);",
          "    assert_eq!(is_word_byte(b'v'), true);",
          "    assert_eq!(is_word_byte(b'w'), true);",
          "    assert_eq!(is_word_byte(b'x'), true);",
          "    assert_eq!(is_word_byte(b'y'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'!'), false);",
          "    assert_eq!(is_word_byte(b'@'), false);",
          "    assert_eq!(is_word_byte(b'#'), false);",
          "    assert_eq!(is_word_byte(b'$'), false);",
          "    assert_eq!(is_word_byte(b'%'), false);",
          "    assert_eq!(is_word_byte(b'^'), false);",
          "    assert_eq!(is_word_byte(b'&'), false);",
          "    assert_eq!(is_word_byte(b'*'), false);",
          "    assert_eq!(is_word_byte(b'('), false);",
          "    assert_eq!(is_word_byte(b')'), false);",
          "    assert_eq!(is_word_byte(b'-'), false);",
          "    assert_eq!(is_word_byte(b'+'), false);",
          "    assert_eq!(is_word_byte(b'='), false);",
          "    assert_eq!(is_word_byte(b'{'), false);",
          "    assert_eq!(is_word_byte(b'}'), false);",
          "    assert_eq!(is_word_byte(b'['), false);",
          "    assert_eq!(is_word_byte(b']'), false);",
          "    assert_eq!(is_word_byte(b':' ), false);",
          "    assert_eq!(is_word_byte(b';'), false);",
          "    assert_eq!(is_word_byte(b'\"'), false);",
          "    assert_eq!(is_word_byte(b'\\'', false);",
          "    assert_eq!(is_word_byte(b'<'), false);",
          "    assert_eq!(is_word_byte(b'>'), false);",
          "    assert_eq!(is_word_byte(b'?, false);",
          "    assert_eq!(is_word_byte(b'/'), false);",
          "    assert_eq!(is_word_byte(b'\\\\'), false);",
          "    assert_eq!(is_word_byte(b'|'), false);",
          "    assert_eq!(is_word_byte(b'~'), false);",
          "    assert_eq!(is_word_byte(255), false);",
          "    assert_eq!(is_word_byte(0), false);",
          "    assert_eq!(is_word_byte(128), false);",
          "    assert_eq!(is_word_byte(127), false);",
          "    assert_eq!(is_word_byte(64), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let outside_bytes: [u8; 10] = [0, 32, 64, 91, 92, 93, 94, 96, 123, 255];",
          "    for &byte in &outside_bytes {",
          "        let result = is_word_byte(byte);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(0), false);",
          "    assert_eq!(is_word_byte(32), false);",
          "    assert_eq!(is_word_byte(64), false);",
          "    assert_eq!(is_word_byte(91), false);",
          "    assert_eq!(is_word_byte(92), false);",
          "    assert_eq!(is_word_byte(93), false);",
          "    assert_eq!(is_word_byte(94), false);",
          "    assert_eq!(is_word_byte(96), false);",
          "    assert_eq!(is_word_byte(123), false);",
          "    assert_eq!(is_word_byte(255), false);"
        ],
        "code": [
          "{",
          "    let outside_bytes: [u8; 10] = [0, 32, 64, 91, 92, 93, 94, 96, 123, 255];",
          "    for &byte in &outside_bytes {",
          "        let result = is_word_byte(byte);",
          "    }",
          "    assert_eq!(is_word_byte(0), false);",
          "    assert_eq!(is_word_byte(32), false);",
          "    assert_eq!(is_word_byte(64), false);",
          "    assert_eq!(is_word_byte(91), false);",
          "    assert_eq!(is_word_byte(92), false);",
          "    assert_eq!(is_word_byte(93), false);",
          "    assert_eq!(is_word_byte(94), false);",
          "    assert_eq!(is_word_byte(96), false);",
          "    assert_eq!(is_word_byte(123), false);",
          "    assert_eq!(is_word_byte(255), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]