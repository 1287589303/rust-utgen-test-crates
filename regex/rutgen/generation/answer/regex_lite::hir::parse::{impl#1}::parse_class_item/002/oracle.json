[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"\\\\n\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('\\\\')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class_item();",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\n\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('\\\\')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_class_item();",
          "    assert!(result.is_ok());",
          "    if let Ok(hir) = result { assert_eq!(hir.kind(), &HirKind::Char('\\n')); }"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"\\\\n\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('\\\\')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class_item();",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\n\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('\\\\')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_class_item();",
          "    assert!(result.is_ok());",
          "    if let Ok(hir) = result { assert_eq!(hir.kind(), &HirKind::Char('\\n')); }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"\\\\r\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('\\\\')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class_item();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_parser.parse_class_item(), Ok(Hir::char('\\\\')));",
          "    assert_eq!(_parser.pos.get(), 1);",
          "    assert!(matches!(_parser.char.get(), Some('r')));",
          "    assert_eq!(_parser.capture_index.get(), 0);",
          "    assert_eq!(_parser.depth.get(), 0);",
          "    assert!(RefCell::borrow(&parser.flags).is_empty());",
          "    assert!(RefCell::borrow(&parser.capture_names).is_empty());",
          "    assert_eq!(parser.char.get(), Some('\\\\'));",
          "    assert!(parser.is_done());"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"\\\\r\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('\\\\')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class_item();",
          "    assert_eq!(_parser.parse_class_item(), Ok(Hir::char('\\\\')));",
          "    assert_eq!(_parser.pos.get(), 1);",
          "    assert!(matches!(_parser.char.get(), Some('r')));",
          "    assert_eq!(_parser.capture_index.get(), 0);",
          "    assert_eq!(_parser.depth.get(), 0);",
          "    assert!(RefCell::borrow(&parser.flags).is_empty());",
          "    assert!(RefCell::borrow(&parser.capture_names).is_empty());",
          "    assert_eq!(parser.char.get(), Some('\\\\'));",
          "    assert!(parser.is_done());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"\\\\t\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('\\\\')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class_item();",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\t\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('\\\\')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_class_item();",
          "    assert!(result.is_ok());",
          "    if let Ok(hir) = result {",
          "    assert_eq!(hir.kind(), &HirKind::Char('\\t'));",
          "    }"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"\\\\t\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('\\\\')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class_item();",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\t\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('\\\\')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_class_item();",
          "    assert!(result.is_ok());",
          "    if let Ok(hir) = result {",
          "    assert_eq!(hir.kind(), &HirKind::Char('\\t'));",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"\\\\u{0000}\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('\\\\')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class_item();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char.get(), Some('\\\\'));",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert!(parser.parse_class_item().is_ok());",
          "    let hir_result = parser.parse_class_item().unwrap();",
          "    assert_eq!(hir_result.kind(), &HirKind::Char('\\\\'));"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"\\\\u{0000}\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('\\\\')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class_item();",
          "    assert_eq!(parser.char.get(), Some('\\\\'));",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert!(parser.parse_class_item().is_ok());",
          "    let hir_result = parser.parse_class_item().unwrap();",
          "    assert_eq!(hir_result.kind(), &HirKind::Char('\\\\'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"\\\\xZ\"; // Invalid escape",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('\\\\')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class_item();",
          "}"
        ],
        "oracle": [
          "    parser.char.set(Some('\\\\'));",
          "    assert_eq!(parser.parse_class_item(), Err(Error::new(ERR_ESCAPE_UNRECOGNIZED)));"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"\\\\xZ\"; // Invalid escape",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('\\\\')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class_item();",
          "    parser.char.set(Some('\\\\'));",
          "    assert_eq!(parser.parse_class_item(), Err(Error::new(ERR_ESCAPE_UNRECOGNIZED)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]