[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"a\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('a')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class_item();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char.get(), Some('a'));",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert!(parser.capture_index.get() == 0);",
          "    assert!(parser.flags.borrow().case_insensitive == false);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(parser.depth.get() == 0);",
          "    assert!(parser.config.nest_limit == 10);",
          "    assert!(parser.config.flags == Flags::default());",
          "    assert!(parser.parse_class_item().is_ok());",
          "    assert_eq!(parser.parse_class_item().unwrap().kind(), &HirKind::Char('a'));"
        ],
        "code": [
          "{",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"a\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('a')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class_item();",
          "    assert_eq!(parser.char.get(), Some('a'));",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert!(parser.capture_index.get() == 0);",
          "    assert!(parser.flags.borrow().case_insensitive == false);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(parser.depth.get() == 0);",
          "    assert!(parser.config.nest_limit == 10);",
          "    assert!(parser.config.flags == Flags::default());",
          "    assert!(parser.parse_class_item().is_ok());",
          "    assert_eq!(parser.parse_class_item().unwrap().kind(), &HirKind::Char('a'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"b\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('b')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class_item();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char.get(), Some('b'));",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert!(matches!(_ , Ok(Hir::char('b'))));",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.flags.borrow(), &Flags::default());",
          "    assert_eq!(parser.config.nest_limit, 10);"
        ],
        "code": [
          "{",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"b\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('b')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class_item();",
          "    assert_eq!(parser.char.get(), Some('b'));",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert!(matches!(_ , Ok(Hir::char('b'))));",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.flags.borrow(), &Flags::default());",
          "    assert_eq!(parser.config.nest_limit, 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"z\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('z')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class_item();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.parse_class_item(), Ok(Hir::char('z')));"
        ],
        "code": [
          "{",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"z\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('z')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class_item();",
          "    assert_eq!(parser.parse_class_item(), Ok(Hir::char('z')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"1\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('1')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class_item();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert!(parser.char.get().is_none());",
          "    assert!(parser.capture_index.get() == 0);",
          "    assert_eq!(parser.flags.borrow().case_insensitive, false);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(parser.depth.get() == 0);"
        ],
        "code": [
          "{",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"1\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('1')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class_item();",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert!(parser.char.get().is_none());",
          "    assert!(parser.capture_index.get() == 0);",
          "    assert_eq!(parser.flags.borrow().case_insensitive, false);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(parser.depth.get() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \" \",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some(' ')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class_item();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.parse_class_item().unwrap().kind(), HirKind::Char(' '));",
          "    assert!(parser.flags.borrow().case_insensitive == false);",
          "    assert!(parser.flags.borrow().multi_line == false);",
          "    assert!(parser.flags.borrow().dot_matches_new_line == false);",
          "    assert!(parser.flags.borrow().swap_greed == false);",
          "    assert!(parser.flags.borrow().crlf == false);",
          "    assert!(parser.flags.borrow().ignore_whitespace == false);",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert!(parser.char.get().is_none());",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.capture_names.borrow().is_empty());"
        ],
        "code": [
          "{",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \" \",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some(' ')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class_item();",
          "    assert_eq!(parser.parse_class_item().unwrap().kind(), HirKind::Char(' '));",
          "    assert!(parser.flags.borrow().case_insensitive == false);",
          "    assert!(parser.flags.borrow().multi_line == false);",
          "    assert!(parser.flags.borrow().dot_matches_new_line == false);",
          "    assert!(parser.flags.borrow().swap_greed == false);",
          "    assert!(parser.flags.borrow().crlf == false);",
          "    assert!(parser.flags.borrow().ignore_whitespace == false);",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert!(parser.char.get().is_none());",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"!@#\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('!')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class_item();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(Hir::char('!')));",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert_eq!(parser.char.get(), Some('@'));",
          "    assert!(parser.flags.borrow().case_insensitive == false);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(parser.capture_index.get() == 0);",
          "    assert!(parser.depth.get() == 0);"
        ],
        "code": [
          "{",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"!@#\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('!')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class_item();",
          "    assert_eq!(_result, Ok(Hir::char('!')));",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert_eq!(parser.char.get(), Some('@'));",
          "    assert!(parser.flags.borrow().case_insensitive == false);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(parser.capture_index.get() == 0);",
          "    assert!(parser.depth.get() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]