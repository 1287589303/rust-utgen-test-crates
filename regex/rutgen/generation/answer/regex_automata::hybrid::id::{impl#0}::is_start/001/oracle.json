[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_START);",
          "    let result = id.is_start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    let id_unknown = LazyStateID::new_unchecked(0);",
          "    let result_unknown = id_unknown.is_start();",
          "    assert_eq!(result_unknown, false);",
          "    let id_dead = LazyStateID::new_unchecked(LazyStateID::MASK_DEAD);",
          "    let result_dead = id_dead.is_start();",
          "    assert_eq!(result_dead, false);",
          "    let id_quit = LazyStateID::new_unchecked(LazyStateID::MASK_QUIT);",
          "    let result_quit = id_quit.is_start();",
          "    assert_eq!(result_quit, false);",
          "    let id_match = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH);",
          "    let result_match = id_match.is_start();",
          "    assert_eq!(result_match, false);",
          "    let id_combined = LazyStateID::new_unchecked(LazyStateID::MASK_START | LazyStateID::MASK_DEAD);",
          "    let result_combined = id_combined.is_start();",
          "    assert_eq!(result_combined, true);"
        ],
        "code": [
          "{",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_START);",
          "    let result = id.is_start();",
          "    assert_eq!(result, true);",
          "    let id_unknown = LazyStateID::new_unchecked(0);",
          "    let result_unknown = id_unknown.is_start();",
          "    assert_eq!(result_unknown, false);",
          "    let id_dead = LazyStateID::new_unchecked(LazyStateID::MASK_DEAD);",
          "    let result_dead = id_dead.is_start();",
          "    assert_eq!(result_dead, false);",
          "    let id_quit = LazyStateID::new_unchecked(LazyStateID::MASK_QUIT);",
          "    let result_quit = id_quit.is_start();",
          "    assert_eq!(result_quit, false);",
          "    let id_match = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH);",
          "    let result_match = id_match.is_start();",
          "    assert_eq!(result_match, false);",
          "    let id_combined = LazyStateID::new_unchecked(LazyStateID::MASK_START | LazyStateID::MASK_DEAD);",
          "    let result_combined = id_combined.is_start();",
          "    assert_eq!(result_combined, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let id = LazyStateID::new_unchecked(0);",
          "    let result = id.is_start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    ",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_START);",
          "    let result = id.is_start();",
          "    assert_eq!(result, true);",
          "    ",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_START + 1);",
          "    let result = id.is_start();",
          "    assert_eq!(result, true);",
          "    ",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_START - 1);",
          "    let result = id.is_start();",
          "    assert_eq!(result, false);",
          "    ",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_START << 1);",
          "    let result = id.is_start();",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let id = LazyStateID::new_unchecked(0);",
          "    let result = id.is_start();",
          "    assert_eq!(result, false);",
          "    ",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_START);",
          "    let result = id.is_start();",
          "    assert_eq!(result, true);",
          "    ",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_START + 1);",
          "    let result = id.is_start();",
          "    assert_eq!(result, true);",
          "    ",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_START - 1);",
          "    let result = id.is_start();",
          "    assert_eq!(result, false);",
          "    ",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_START << 1);",
          "    let result = id.is_start();",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_START - 1);",
          "    let result = id.is_start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    let id_start = LazyStateID::new_unchecked(LazyStateID::MASK_START);",
          "    let result_start = id_start.is_start();",
          "    assert_eq!(result_start, true);",
          "    let id_dead = LazyStateID::new_unchecked(LazyStateID::MASK_DEAD);",
          "    let result_dead = id_dead.is_start();",
          "    assert_eq!(result_dead, false);",
          "    let id_quit = LazyStateID::new_unchecked(LazyStateID::MASK_QUIT);",
          "    let result_quit = id_quit.is_start();",
          "    assert_eq!(result_quit, false);",
          "    let id_match = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH);",
          "    let result_match = id_match.is_start();",
          "    assert_eq!(result_match, false);",
          "    let id_unknown = LazyStateID::new_unchecked(LazyStateID::MASK_UNKNOWN);",
          "    let result_unknown = id_unknown.is_start();",
          "    assert_eq!(result_unknown, false);"
        ],
        "code": [
          "{",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_START - 1);",
          "    let result = id.is_start();",
          "    assert_eq!(result, false);",
          "    let id_start = LazyStateID::new_unchecked(LazyStateID::MASK_START);",
          "    let result_start = id_start.is_start();",
          "    assert_eq!(result_start, true);",
          "    let id_dead = LazyStateID::new_unchecked(LazyStateID::MASK_DEAD);",
          "    let result_dead = id_dead.is_start();",
          "    assert_eq!(result_dead, false);",
          "    let id_quit = LazyStateID::new_unchecked(LazyStateID::MASK_QUIT);",
          "    let result_quit = id_quit.is_start();",
          "    assert_eq!(result_quit, false);",
          "    let id_match = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH);",
          "    let result_match = id_match.is_start();",
          "    assert_eq!(result_match, false);",
          "    let id_unknown = LazyStateID::new_unchecked(LazyStateID::MASK_UNKNOWN);",
          "    let result_unknown = id_unknown.is_start();",
          "    assert_eq!(result_unknown, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_START | 1);",
          "    let result = id.is_start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_START);",
          "    let result = id.is_start();",
          "    assert_eq!(result, true);",
          "    let id = LazyStateID::new_unchecked(0);",
          "    let result = id.is_start();",
          "    assert_eq!(result, false);",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_START - 1);",
          "    let result = id.is_start();",
          "    assert_eq!(result, false);",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_START | LazyStateID::MASK_DEAD);",
          "    let result = id.is_start();",
          "    assert_eq!(result, true);",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_START | LazyStateID::MASK_MATCH);",
          "    let result = id.is_start();",
          "    assert_eq!(result, true);",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_START | LazyStateID::MASK_QUIT | 1);",
          "    let result = id.is_start();",
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_START | 1);",
          "    let result = id.is_start();",
          "    assert_eq!(result, true);",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_START);",
          "    let result = id.is_start();",
          "    assert_eq!(result, true);",
          "    let id = LazyStateID::new_unchecked(0);",
          "    let result = id.is_start();",
          "    assert_eq!(result, false);",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_START - 1);",
          "    let result = id.is_start();",
          "    assert_eq!(result, false);",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_START | LazyStateID::MASK_DEAD);",
          "    let result = id.is_start();",
          "    assert_eq!(result, true);",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_START | LazyStateID::MASK_MATCH);",
          "    let result = id.is_start();",
          "    assert_eq!(result, true);",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MASK_START | LazyStateID::MASK_QUIT | 1);",
          "    let result = id.is_start();",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MAX);",
          "    let result = id.is_start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    let id_zero = LazyStateID::new_unchecked(0);",
          "    let result_zero = id_zero.is_start();",
          "    assert_eq!(result_zero, false);",
          "    let id_mask_start = LazyStateID::new_unchecked(LazyStateID::MASK_START);",
          "    let result_mask_start = id_mask_start.is_start();",
          "    assert_eq!(result_mask_start, true);",
          "    let id_mask_dead = LazyStateID::new_unchecked(LazyStateID::MASK_DEAD);",
          "    let result_mask_dead = id_mask_dead.is_start();",
          "    assert_eq!(result_mask_dead, false);",
          "    let id_mask_quit = LazyStateID::new_unchecked(LazyStateID::MASK_QUIT);",
          "    let result_mask_quit = id_mask_quit.is_start();",
          "    assert_eq!(result_mask_quit, false);",
          "    let id_mask_match = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH);",
          "    let result_mask_match = id_mask_match.is_start();",
          "    assert_eq!(result_mask_match, false);"
        ],
        "code": [
          "{",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MAX);",
          "    let result = id.is_start();",
          "    assert_eq!(result, true);",
          "    let id_zero = LazyStateID::new_unchecked(0);",
          "    let result_zero = id_zero.is_start();",
          "    assert_eq!(result_zero, false);",
          "    let id_mask_start = LazyStateID::new_unchecked(LazyStateID::MASK_START);",
          "    let result_mask_start = id_mask_start.is_start();",
          "    assert_eq!(result_mask_start, true);",
          "    let id_mask_dead = LazyStateID::new_unchecked(LazyStateID::MASK_DEAD);",
          "    let result_mask_dead = id_mask_dead.is_start();",
          "    assert_eq!(result_mask_dead, false);",
          "    let id_mask_quit = LazyStateID::new_unchecked(LazyStateID::MASK_QUIT);",
          "    let result_mask_quit = id_mask_quit.is_start();",
          "    assert_eq!(result_mask_quit, false);",
          "    let id_mask_match = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH);",
          "    let result_mask_match = id_mask_match.is_start();",
          "    assert_eq!(result_mask_match, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]