[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet::full();",
          "    let properties1 = Properties(Box::new(PropertiesI {",
          "        minimum_len: Some(3),",
          "        maximum_len: Some(3),",
          "        look_set,",
          "        look_set_prefix: look_set,",
          "        look_set_suffix: look_set,",
          "        look_set_prefix_any: LookSet::empty(),",
          "        look_set_suffix_any: LookSet::empty(),",
          "        utf8: false,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: Some(2),",
          "        literal: false,",
          "        alternation_literal: false,",
          "    }));",
          "",
          "    let properties2 = Properties(Box::new(PropertiesI {",
          "        minimum_len: Some(3),",
          "        maximum_len: Some(3),",
          "        look_set,",
          "        look_set_prefix: look_set,",
          "        look_set_suffix: look_set,",
          "        look_set_prefix_any: LookSet::empty(),",
          "        look_set_suffix_any: LookSet::empty(),",
          "        utf8: false,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: Some(2),",
          "        literal: false,",
          "        alternation_literal: false,",
          "    }));",
          "",
          "    let unioned = Properties::union(vec![&properties1, &properties2]);",
          "",
          "    let _ = unioned; // Use the result",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unioned.minimum_len(), Some(3));",
          "    assert_eq!(unioned.maximum_len(), Some(3));",
          "    assert_eq!(unioned.is_utf8(), false);",
          "    assert_eq!(unioned.explicit_captures_len(), 0);",
          "    assert_eq!(unioned.static_explicit_captures_len(), Some(2));",
          "    assert_eq!(unioned.is_literal(), false);",
          "    assert_eq!(unioned.is_alternation_literal(), false);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet::full();",
          "    let properties1 = Properties(Box::new(PropertiesI {",
          "        minimum_len: Some(3),",
          "        maximum_len: Some(3),",
          "        look_set,",
          "        look_set_prefix: look_set,",
          "        look_set_suffix: look_set,",
          "        look_set_prefix_any: LookSet::empty(),",
          "        look_set_suffix_any: LookSet::empty(),",
          "        utf8: false,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: Some(2),",
          "        literal: false,",
          "        alternation_literal: false,",
          "    }));",
          "",
          "    let properties2 = Properties(Box::new(PropertiesI {",
          "        minimum_len: Some(3),",
          "        maximum_len: Some(3),",
          "        look_set,",
          "        look_set_prefix: look_set,",
          "        look_set_suffix: look_set,",
          "        look_set_prefix_any: LookSet::empty(),",
          "        look_set_suffix_any: LookSet::empty(),",
          "        utf8: false,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: Some(2),",
          "        literal: false,",
          "        alternation_literal: false,",
          "    }));",
          "",
          "    let unioned = Properties::union(vec![&properties1, &properties2]);",
          "",
          "    let _ = unioned; // Use the result",
          "    assert_eq!(unioned.minimum_len(), Some(3));",
          "    assert_eq!(unioned.maximum_len(), Some(3));",
          "    assert_eq!(unioned.is_utf8(), false);",
          "    assert_eq!(unioned.explicit_captures_len(), 0);",
          "    assert_eq!(unioned.static_explicit_captures_len(), Some(2));",
          "    assert_eq!(unioned.is_literal(), false);",
          "    assert_eq!(unioned.is_alternation_literal(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]