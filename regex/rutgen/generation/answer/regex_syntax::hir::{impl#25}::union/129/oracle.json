[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let props: Vec<Properties> = Vec::new();",
          "    let unioned = Properties::union(props);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unioned.minimum_len(), None);",
          "    assert_eq!(unioned.maximum_len(), None);",
          "    assert_eq!(unioned.look_set(), LookSet::empty());",
          "    assert_eq!(unioned.look_set_prefix(), LookSet::full());",
          "    assert_eq!(unioned.look_set_suffix(), LookSet::full());",
          "    assert_eq!(unioned.utf8(), true);",
          "    assert_eq!(unioned.explicit_captures_len(), 0);",
          "    assert_eq!(unioned.static_explicit_captures_len(), None);",
          "    assert_eq!(unioned.is_literal(), false);",
          "    assert_eq!(unioned.is_alternation_literal(), true);"
        ],
        "code": [
          "{",
          "    let props: Vec<Properties> = Vec::new();",
          "    let unioned = Properties::union(props);",
          "    assert_eq!(unioned.minimum_len(), None);",
          "    assert_eq!(unioned.maximum_len(), None);",
          "    assert_eq!(unioned.look_set(), LookSet::empty());",
          "    assert_eq!(unioned.look_set_prefix(), LookSet::full());",
          "    assert_eq!(unioned.look_set_suffix(), LookSet::full());",
          "    assert_eq!(unioned.utf8(), true);",
          "    assert_eq!(unioned.explicit_captures_len(), 0);",
          "    assert_eq!(unioned.static_explicit_captures_len(), None);",
          "    assert_eq!(unioned.is_literal(), false);",
          "    assert_eq!(unioned.is_alternation_literal(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_properties = Properties(Box::new(PropertiesI {",
          "        minimum_len: None,",
          "        maximum_len: None,",
          "        look_set: LookSet::empty(),",
          "        look_set_prefix: LookSet::full(),",
          "        look_set_suffix: LookSet::full(),",
          "        look_set_prefix_any: LookSet::empty(),",
          "        look_set_suffix_any: LookSet::empty(),",
          "        utf8: true,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: None,",
          "        literal: false,",
          "        alternation_literal: true,",
          "    }));",
          "    let props = vec![empty_properties];",
          "    let unioned = Properties::union(props);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unioned.minimum_len(), None);",
          "    assert_eq!(unioned.maximum_len(), None);",
          "    assert_eq!(unioned.look_set(), LookSet::empty());",
          "    assert_eq!(unioned.look_set_prefix(), LookSet::full());",
          "    assert_eq!(unioned.look_set_suffix(), LookSet::full());",
          "    assert_eq!(unioned.look_set_prefix_any(), LookSet::empty());",
          "    assert_eq!(unioned.look_set_suffix_any(), LookSet::empty());",
          "    assert_eq!(unioned.is_utf8(), true);",
          "    assert_eq!(unioned.explicit_captures_len(), 0);",
          "    assert_eq!(unioned.static_explicit_captures_len(), None);",
          "    assert_eq!(unioned.is_literal(), false);",
          "    assert_eq!(unioned.is_alternation_literal(), true);"
        ],
        "code": [
          "{",
          "    let empty_properties = Properties(Box::new(PropertiesI {",
          "        minimum_len: None,",
          "        maximum_len: None,",
          "        look_set: LookSet::empty(),",
          "        look_set_prefix: LookSet::full(),",
          "        look_set_suffix: LookSet::full(),",
          "        look_set_prefix_any: LookSet::empty(),",
          "        look_set_suffix_any: LookSet::empty(),",
          "        utf8: true,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: None,",
          "        literal: false,",
          "        alternation_literal: true,",
          "    }));",
          "    let props = vec![empty_properties];",
          "    let unioned = Properties::union(props);",
          "    assert_eq!(unioned.minimum_len(), None);",
          "    assert_eq!(unioned.maximum_len(), None);",
          "    assert_eq!(unioned.look_set(), LookSet::empty());",
          "    assert_eq!(unioned.look_set_prefix(), LookSet::full());",
          "    assert_eq!(unioned.look_set_suffix(), LookSet::full());",
          "    assert_eq!(unioned.look_set_prefix_any(), LookSet::empty());",
          "    assert_eq!(unioned.look_set_suffix_any(), LookSet::empty());",
          "    assert_eq!(unioned.is_utf8(), true);",
          "    assert_eq!(unioned.explicit_captures_len(), 0);",
          "    assert_eq!(unioned.static_explicit_captures_len(), None);",
          "    assert_eq!(unioned.is_literal(), false);",
          "    assert_eq!(unioned.is_alternation_literal(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_properties_1 = Properties(Box::new(PropertiesI {",
          "        minimum_len: None,",
          "        maximum_len: None,",
          "        look_set: LookSet::empty(),",
          "        look_set_prefix: LookSet::full(),",
          "        look_set_suffix: LookSet::full(),",
          "        look_set_prefix_any: LookSet::empty(),",
          "        look_set_suffix_any: LookSet::empty(),",
          "        utf8: true,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: None,",
          "        literal: false,",
          "        alternation_literal: true,",
          "    }));",
          "    ",
          "    let empty_properties_2 = Properties(Box::new(PropertiesI {",
          "        minimum_len: None,",
          "        maximum_len: None,",
          "        look_set: LookSet::empty(),",
          "        look_set_prefix: LookSet::full(),",
          "        look_set_suffix: LookSet::full(),",
          "        look_set_prefix_any: LookSet::empty(),",
          "        look_set_suffix_any: LookSet::empty(),",
          "        utf8: true,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: None,",
          "        literal: false,",
          "        alternation_literal: true,",
          "    }));",
          "",
          "    let props = vec![empty_properties_1, empty_properties_2];",
          "    let unioned = Properties::union(props);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unioned.minimum_len(), None);",
          "    assert_eq!(unioned.maximum_len(), None);",
          "    assert_eq!(unioned.look_set(), LookSet::empty());",
          "    assert_eq!(unioned.look_set_prefix(), LookSet::full());",
          "    assert_eq!(unioned.look_set_suffix(), LookSet::full());",
          "    assert_eq!(unioned.look_set_prefix_any(), LookSet::empty());",
          "    assert_eq!(unioned.look_set_suffix_any(), LookSet::empty());",
          "    assert_eq!(unioned.is_utf8(), true);",
          "    assert_eq!(unioned.explicit_captures_len(), 0);",
          "    assert_eq!(unioned.static_explicit_captures_len(), None);",
          "    assert_eq!(unioned.is_literal(), false);",
          "    assert_eq!(unioned.is_alternation_literal(), true);"
        ],
        "code": [
          "{",
          "    let empty_properties_1 = Properties(Box::new(PropertiesI {",
          "        minimum_len: None,",
          "        maximum_len: None,",
          "        look_set: LookSet::empty(),",
          "        look_set_prefix: LookSet::full(),",
          "        look_set_suffix: LookSet::full(),",
          "        look_set_prefix_any: LookSet::empty(),",
          "        look_set_suffix_any: LookSet::empty(),",
          "        utf8: true,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: None,",
          "        literal: false,",
          "        alternation_literal: true,",
          "    }));",
          "    ",
          "    let empty_properties_2 = Properties(Box::new(PropertiesI {",
          "        minimum_len: None,",
          "        maximum_len: None,",
          "        look_set: LookSet::empty(),",
          "        look_set_prefix: LookSet::full(),",
          "        look_set_suffix: LookSet::full(),",
          "        look_set_prefix_any: LookSet::empty(),",
          "        look_set_suffix_any: LookSet::empty(),",
          "        utf8: true,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: None,",
          "        literal: false,",
          "        alternation_literal: true,",
          "    }));",
          "",
          "    let props = vec![empty_properties_1, empty_properties_2];",
          "    let unioned = Properties::union(props);",
          "    assert_eq!(unioned.minimum_len(), None);",
          "    assert_eq!(unioned.maximum_len(), None);",
          "    assert_eq!(unioned.look_set(), LookSet::empty());",
          "    assert_eq!(unioned.look_set_prefix(), LookSet::full());",
          "    assert_eq!(unioned.look_set_suffix(), LookSet::full());",
          "    assert_eq!(unioned.look_set_prefix_any(), LookSet::empty());",
          "    assert_eq!(unioned.look_set_suffix_any(), LookSet::empty());",
          "    assert_eq!(unioned.is_utf8(), true);",
          "    assert_eq!(unioned.explicit_captures_len(), 0);",
          "    assert_eq!(unioned.static_explicit_captures_len(), None);",
          "    assert_eq!(unioned.is_literal(), false);",
          "    assert_eq!(unioned.is_alternation_literal(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]