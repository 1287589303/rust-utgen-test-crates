[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let prop1 = Properties(Box::new(PropertiesI {",
          "        minimum_len: Some(2),",
          "        maximum_len: Some(4),",
          "        look_set: LookSet::empty(),",
          "        look_set_prefix: LookSet::full(),",
          "        look_set_suffix: LookSet::full(),",
          "        look_set_prefix_any: LookSet::empty(),",
          "        look_set_suffix_any: LookSet::empty(),",
          "        utf8: true,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: Some(1),",
          "        literal: false,",
          "        alternation_literal: true,",
          "    }));",
          "",
          "    let prop2 = Properties(Box::new(PropertiesI {",
          "        minimum_len: None,",
          "        maximum_len: None,",
          "        look_set: LookSet::empty(),",
          "        look_set_prefix: LookSet::full(),",
          "        look_set_suffix: LookSet::full(),",
          "        look_set_prefix_any: LookSet::empty(),",
          "        look_set_suffix_any: LookSet::empty(),",
          "        utf8: false,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: None,",
          "        literal: false,",
          "        alternation_literal: true,",
          "    }));",
          "",
          "    let prop3 = Properties(Box::new(PropertiesI {",
          "        minimum_len: Some(3),",
          "        maximum_len: Some(5),",
          "        look_set: LookSet::empty(),",
          "        look_set_prefix: LookSet::full(),",
          "        look_set_suffix: LookSet::full(),",
          "        look_set_prefix_any: LookSet::empty(),",
          "        look_set_suffix_any: LookSet::empty(),",
          "        utf8: false,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: Some(2),",
          "        literal: false,",
          "        alternation_literal: true,",
          "    }));",
          "",
          "    let unioned = Properties::union(vec![&prop1, &prop2, &prop3]);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unioned.minimum_len(), None);",
          "    assert_eq!(unioned.maximum_len(), None);",
          "    assert_eq!(unioned.look_set(), LookSet::empty());",
          "    assert_eq!(unioned.look_set_prefix(), LookSet::full());",
          "    assert_eq!(unioned.look_set_suffix(), LookSet::full());",
          "    assert_eq!(unioned.look_set_prefix_any(), LookSet::empty());",
          "    assert_eq!(unioned.look_set_suffix_any(), LookSet::empty());",
          "    assert_eq!(unioned.is_utf8(), false);",
          "    assert_eq!(unioned.explicit_captures_len(), 0);",
          "    assert_eq!(unioned.static_explicit_captures_len(), None);",
          "    assert_eq!(unioned.is_literal(), false);",
          "    assert_eq!(unioned.is_alternation_literal(), true);"
        ],
        "code": [
          "{",
          "    let prop1 = Properties(Box::new(PropertiesI {",
          "        minimum_len: Some(2),",
          "        maximum_len: Some(4),",
          "        look_set: LookSet::empty(),",
          "        look_set_prefix: LookSet::full(),",
          "        look_set_suffix: LookSet::full(),",
          "        look_set_prefix_any: LookSet::empty(),",
          "        look_set_suffix_any: LookSet::empty(),",
          "        utf8: true,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: Some(1),",
          "        literal: false,",
          "        alternation_literal: true,",
          "    }));",
          "",
          "    let prop2 = Properties(Box::new(PropertiesI {",
          "        minimum_len: None,",
          "        maximum_len: None,",
          "        look_set: LookSet::empty(),",
          "        look_set_prefix: LookSet::full(),",
          "        look_set_suffix: LookSet::full(),",
          "        look_set_prefix_any: LookSet::empty(),",
          "        look_set_suffix_any: LookSet::empty(),",
          "        utf8: false,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: None,",
          "        literal: false,",
          "        alternation_literal: true,",
          "    }));",
          "",
          "    let prop3 = Properties(Box::new(PropertiesI {",
          "        minimum_len: Some(3),",
          "        maximum_len: Some(5),",
          "        look_set: LookSet::empty(),",
          "        look_set_prefix: LookSet::full(),",
          "        look_set_suffix: LookSet::full(),",
          "        look_set_prefix_any: LookSet::empty(),",
          "        look_set_suffix_any: LookSet::empty(),",
          "        utf8: false,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: Some(2),",
          "        literal: false,",
          "        alternation_literal: true,",
          "    }));",
          "",
          "    let unioned = Properties::union(vec![&prop1, &prop2, &prop3]);",
          "    assert_eq!(unioned.minimum_len(), None);",
          "    assert_eq!(unioned.maximum_len(), None);",
          "    assert_eq!(unioned.look_set(), LookSet::empty());",
          "    assert_eq!(unioned.look_set_prefix(), LookSet::full());",
          "    assert_eq!(unioned.look_set_suffix(), LookSet::full());",
          "    assert_eq!(unioned.look_set_prefix_any(), LookSet::empty());",
          "    assert_eq!(unioned.look_set_suffix_any(), LookSet::empty());",
          "    assert_eq!(unioned.is_utf8(), false);",
          "    assert_eq!(unioned.explicit_captures_len(), 0);",
          "    assert_eq!(unioned.static_explicit_captures_len(), None);",
          "    assert_eq!(unioned.is_literal(), false);",
          "    assert_eq!(unioned.is_alternation_literal(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let prop1 = Properties(Box::new(PropertiesI {",
          "        minimum_len: Some(1),",
          "        maximum_len: Some(3),",
          "        look_set: LookSet::empty(),",
          "        look_set_prefix: LookSet::full(),",
          "        look_set_suffix: LookSet::full(),",
          "        look_set_prefix_any: LookSet::empty(),",
          "        look_set_suffix_any: LookSet::empty(),",
          "        utf8: true,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: Some(1),",
          "        literal: false,",
          "        alternation_literal: true,",
          "    }));",
          "",
          "    let prop2 = Properties(Box::new(PropertiesI {",
          "        minimum_len: Some(1),",
          "        maximum_len: None,",
          "        look_set: LookSet::empty(),",
          "        look_set_prefix: LookSet::full(),",
          "        look_set_suffix: LookSet::full(),",
          "        look_set_prefix_any: LookSet::empty(),",
          "        look_set_suffix_any: LookSet::empty(),",
          "        utf8: true,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: Some(1),",
          "        literal: false,",
          "        alternation_literal: true,",
          "    }));",
          "",
          "    let prop3 = Properties(Box::new(PropertiesI {",
          "        minimum_len: Some(3),",
          "        maximum_len: Some(6),",
          "        look_set: LookSet::empty(),",
          "        look_set_prefix: LookSet::full(),",
          "        look_set_suffix: LookSet::full(),",
          "        look_set_prefix_any: LookSet::empty(),",
          "        look_set_suffix_any: LookSet::empty(),",
          "        utf8: true,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: Some(1),",
          "        literal: false,",
          "        alternation_literal: true,",
          "    }));",
          "",
          "    let unioned = Properties::union(vec![&prop1, &prop2, &prop3]);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Some(1), unioned.minimum_len());",
          "    assert_eq!(None, unioned.maximum_len());",
          "    assert_eq!(LookSet::full(), unioned.look_set_prefix());",
          "    assert_eq!(LookSet::full(), unioned.look_set_suffix());",
          "    assert_eq!(LookSet::empty(), unioned.look_set_prefix_any());",
          "    assert_eq!(LookSet::empty(), unioned.look_set_suffix_any());",
          "    assert!(unioned.is_utf8());",
          "    assert_eq!(3, unioned.explicit_captures_len());",
          "    assert_eq!(Some(1), unioned.static_explicit_captures_len());",
          "    assert!(!unioned.is_literal());",
          "    assert!(unioned.is_alternation_literal());"
        ],
        "code": [
          "{",
          "    let prop1 = Properties(Box::new(PropertiesI {",
          "        minimum_len: Some(1),",
          "        maximum_len: Some(3),",
          "        look_set: LookSet::empty(),",
          "        look_set_prefix: LookSet::full(),",
          "        look_set_suffix: LookSet::full(),",
          "        look_set_prefix_any: LookSet::empty(),",
          "        look_set_suffix_any: LookSet::empty(),",
          "        utf8: true,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: Some(1),",
          "        literal: false,",
          "        alternation_literal: true,",
          "    }));",
          "",
          "    let prop2 = Properties(Box::new(PropertiesI {",
          "        minimum_len: Some(1),",
          "        maximum_len: None,",
          "        look_set: LookSet::empty(),",
          "        look_set_prefix: LookSet::full(),",
          "        look_set_suffix: LookSet::full(),",
          "        look_set_prefix_any: LookSet::empty(),",
          "        look_set_suffix_any: LookSet::empty(),",
          "        utf8: true,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: Some(1),",
          "        literal: false,",
          "        alternation_literal: true,",
          "    }));",
          "",
          "    let prop3 = Properties(Box::new(PropertiesI {",
          "        minimum_len: Some(3),",
          "        maximum_len: Some(6),",
          "        look_set: LookSet::empty(),",
          "        look_set_prefix: LookSet::full(),",
          "        look_set_suffix: LookSet::full(),",
          "        look_set_prefix_any: LookSet::empty(),",
          "        look_set_suffix_any: LookSet::empty(),",
          "        utf8: true,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: Some(1),",
          "        literal: false,",
          "        alternation_literal: true,",
          "    }));",
          "",
          "    let unioned = Properties::union(vec![&prop1, &prop2, &prop3]);",
          "    assert_eq!(Some(1), unioned.minimum_len());",
          "    assert_eq!(None, unioned.maximum_len());",
          "    assert_eq!(LookSet::full(), unioned.look_set_prefix());",
          "    assert_eq!(LookSet::full(), unioned.look_set_suffix());",
          "    assert_eq!(LookSet::empty(), unioned.look_set_prefix_any());",
          "    assert_eq!(LookSet::empty(), unioned.look_set_suffix_any());",
          "    assert!(unioned.is_utf8());",
          "    assert_eq!(3, unioned.explicit_captures_len());",
          "    assert_eq!(Some(1), unioned.static_explicit_captures_len());",
          "    assert!(!unioned.is_literal());",
          "    assert!(unioned.is_alternation_literal());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let prop1 = Properties(Box::new(PropertiesI {",
          "        minimum_len: Some(1),",
          "        maximum_len: None,",
          "        look_set: LookSet::empty(),",
          "        look_set_prefix: LookSet::full(),",
          "        look_set_suffix: LookSet::full(),",
          "        look_set_prefix_any: LookSet::empty(),",
          "        look_set_suffix_any: LookSet::empty(),",
          "        utf8: true,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: Some(1),",
          "        literal: false,",
          "        alternation_literal: true,",
          "    }));",
          "",
          "    let prop2 = Properties(Box::new(PropertiesI {",
          "        minimum_len: None,",
          "        maximum_len: None,",
          "        look_set: LookSet::empty(),",
          "        look_set_prefix: LookSet::full(),",
          "        look_set_suffix: LookSet::full(),",
          "        look_set_prefix_any: LookSet::empty(),",
          "        look_set_suffix_any: LookSet::empty(),",
          "        utf8: true,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: None,",
          "        literal: false,",
          "        alternation_literal: true,",
          "    }));",
          "",
          "    let unioned = Properties::union(vec![&prop1, &prop2]);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(None, unioned.minimum_len());",
          "    assert_eq!(None, unioned.maximum_len());",
          "    assert_eq!(LookSet::empty(), unioned.look_set());",
          "    assert_eq!(LookSet::full(), unioned.look_set_prefix());",
          "    assert_eq!(LookSet::full(), unioned.look_set_suffix());",
          "    assert!(unioned.is_utf8());",
          "    assert_eq!(0, unioned.explicit_captures_len());",
          "    assert_eq!(None, unioned.static_explicit_captures_len());",
          "    assert!(!unioned.is_literal());",
          "    assert!(unioned.is_alternation_literal());"
        ],
        "code": [
          "{",
          "    let prop1 = Properties(Box::new(PropertiesI {",
          "        minimum_len: Some(1),",
          "        maximum_len: None,",
          "        look_set: LookSet::empty(),",
          "        look_set_prefix: LookSet::full(),",
          "        look_set_suffix: LookSet::full(),",
          "        look_set_prefix_any: LookSet::empty(),",
          "        look_set_suffix_any: LookSet::empty(),",
          "        utf8: true,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: Some(1),",
          "        literal: false,",
          "        alternation_literal: true,",
          "    }));",
          "",
          "    let prop2 = Properties(Box::new(PropertiesI {",
          "        minimum_len: None,",
          "        maximum_len: None,",
          "        look_set: LookSet::empty(),",
          "        look_set_prefix: LookSet::full(),",
          "        look_set_suffix: LookSet::full(),",
          "        look_set_prefix_any: LookSet::empty(),",
          "        look_set_suffix_any: LookSet::empty(),",
          "        utf8: true,",
          "        explicit_captures_len: 0,",
          "        static_explicit_captures_len: None,",
          "        literal: false,",
          "        alternation_literal: true,",
          "    }));",
          "",
          "    let unioned = Properties::union(vec![&prop1, &prop2]);",
          "    assert_eq!(None, unioned.minimum_len());",
          "    assert_eq!(None, unioned.maximum_len());",
          "    assert_eq!(LookSet::empty(), unioned.look_set());",
          "    assert_eq!(LookSet::full(), unioned.look_set_prefix());",
          "    assert_eq!(LookSet::full(), unioned.look_set_suffix());",
          "    assert!(unioned.is_utf8());",
          "    assert_eq!(0, unioned.explicit_captures_len());",
          "    assert_eq!(None, unioned.static_explicit_captures_len());",
          "    assert!(!unioned.is_literal());",
          "    assert!(unioned.is_alternation_literal());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]