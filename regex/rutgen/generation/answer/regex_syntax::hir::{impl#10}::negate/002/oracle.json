[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_unicode = Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new(0x00C0, 0x00FF)]));",
          "    class_unicode.negate();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_unicode.is_empty(), false);",
          "    assert!(class_unicode.minimum_len().is_none());",
          "    assert!(class_unicode.maximum_len().is_none());",
          "    assert_eq!(class_unicode.ranges().len(), 1);",
          "    assert!(class_unicode.iter().count() > 0);"
        ],
        "code": [
          "{",
          "    let mut class_unicode = Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new(0x00C0, 0x00FF)]));",
          "    class_unicode.negate();",
          "    assert_eq!(class_unicode.is_empty(), false);",
          "    assert!(class_unicode.minimum_len().is_none());",
          "    assert!(class_unicode.maximum_len().is_none());",
          "    assert_eq!(class_unicode.ranges().len(), 1);",
          "    assert!(class_unicode.iter().count() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_unicode = Class::Unicode(ClassUnicode::empty());",
          "    class_unicode.negate();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_unicode.is_empty(), false);",
          "    assert!(class_unicode.is_ascii() == false);",
          "    assert_eq!(class_unicode.minimum_len(), None);",
          "    assert_eq!(class_unicode.maximum_len(), None);",
          "    assert!(class_unicode.literal().is_none());"
        ],
        "code": [
          "{",
          "    let mut class_unicode = Class::Unicode(ClassUnicode::empty());",
          "    class_unicode.negate();",
          "    assert_eq!(class_unicode.is_empty(), false);",
          "    assert!(class_unicode.is_ascii() == false);",
          "    assert_eq!(class_unicode.minimum_len(), None);",
          "    assert_eq!(class_unicode.maximum_len(), None);",
          "    assert!(class_unicode.literal().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_unicode = Class::Unicode(ClassUnicode::new(vec![",
          "        ClassUnicodeRange::new(0x0041, 0x005A),",
          "        ClassUnicodeRange::new(0x0061, 0x007A),",
          "    ]));",
          "    class_unicode.negate();",
          "}"
        ],
        "oracle": [
          "    let mut class_unicode = Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new(0x0041, 0x005A), ClassUnicodeRange::new(0x0061, 0x007A)]));",
          "    class_unicode.negate();",
          "    assert!(class_unicode.is_empty() == false);",
          "    assert!(class_unicode.ranges().len() == expected_non_empty_ranges_count);",
          "    assert!(class_unicode.is_ascii() == expected_is_ascii_value);",
          "    assert!(class_unicode.minimum_len().is_none());",
          "    assert!(class_unicode.maximum_len().is_none());"
        ],
        "code": [
          "{",
          "    let mut class_unicode = Class::Unicode(ClassUnicode::new(vec![",
          "        ClassUnicodeRange::new(0x0041, 0x005A),",
          "        ClassUnicodeRange::new(0x0061, 0x007A),",
          "    ]));",
          "    class_unicode.negate();",
          "    let mut class_unicode = Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new(0x0041, 0x005A), ClassUnicodeRange::new(0x0061, 0x007A)]));",
          "    class_unicode.negate();",
          "    assert!(class_unicode.is_empty() == false);",
          "    assert!(class_unicode.ranges().len() == expected_non_empty_ranges_count);",
          "    assert!(class_unicode.is_ascii() == expected_is_ascii_value);",
          "    assert!(class_unicode.minimum_len().is_none());",
          "    assert!(class_unicode.maximum_len().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_unicode = Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new(0x0030, 0x0039)]));",
          "    class_unicode.negate();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_unicode.is_empty(), false);",
          "    assert_eq!(class_unicode.ranges().len(), 0);",
          "    assert_eq!(class_unicode.is_ascii(), false);",
          "    assert_eq!(class_unicode.minimum_len(), None);",
          "    assert_eq!(class_unicode.maximum_len(), None);",
          "    assert!(class_unicode.literal().is_none());"
        ],
        "code": [
          "{",
          "    let mut class_unicode = Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new(0x0030, 0x0039)]));",
          "    class_unicode.negate();",
          "    assert_eq!(class_unicode.is_empty(), false);",
          "    assert_eq!(class_unicode.ranges().len(), 0);",
          "    assert_eq!(class_unicode.is_ascii(), false);",
          "    assert_eq!(class_unicode.minimum_len(), None);",
          "    assert_eq!(class_unicode.maximum_len(), None);",
          "    assert!(class_unicode.literal().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_unicode = Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new(0x00E0, 0x00FF)]));",
          "    class_unicode.negate();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_unicode.is_empty(), false);",
          "    assert_eq!(class_unicode.ranges().len(), 0);",
          "    assert!(class_unicode.literal().is_none());",
          "    assert_eq!(class_unicode.minimum_len(), Some(1));",
          "    assert_eq!(class_unicode.maximum_len(), Some(100));"
        ],
        "code": [
          "{",
          "    let mut class_unicode = Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new(0x00E0, 0x00FF)]));",
          "    class_unicode.negate();",
          "    assert_eq!(class_unicode.is_empty(), false);",
          "    assert_eq!(class_unicode.ranges().len(), 0);",
          "    assert!(class_unicode.literal().is_none());",
          "    assert_eq!(class_unicode.minimum_len(), Some(1));",
          "    assert_eq!(class_unicode.maximum_len(), Some(100));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]