[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_bytes = Class::Bytes(ClassBytes::new(vec![ClassBytesRange::new(0, 255)]));",
          "    class_bytes.negate();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_bytes.is_empty(), false);",
          "    assert_eq!(class_bytes.maximum_len(), Some(256));",
          "    assert!(class_bytes.literal().is_none());",
          "    assert!(class_bytes.is_ascii());",
          "    assert_eq!(class_bytes.minimum_len(), Some(0));",
          "    assert_eq!(class_bytes.ranges().len(), 1);",
          "    assert_eq!(class_bytes.ranges()[0], ClassBytesRange::new(256, 256));"
        ],
        "code": [
          "{",
          "    let mut class_bytes = Class::Bytes(ClassBytes::new(vec![ClassBytesRange::new(0, 255)]));",
          "    class_bytes.negate();",
          "    assert_eq!(class_bytes.is_empty(), false);",
          "    assert_eq!(class_bytes.maximum_len(), Some(256));",
          "    assert!(class_bytes.literal().is_none());",
          "    assert!(class_bytes.is_ascii());",
          "    assert_eq!(class_bytes.minimum_len(), Some(0));",
          "    assert_eq!(class_bytes.ranges().len(), 1);",
          "    assert_eq!(class_bytes.ranges()[0], ClassBytesRange::new(256, 256));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_bytes = Class::Bytes(ClassBytes::empty());",
          "    class_bytes.negate();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_bytes.is_empty(), true);",
          "    assert_eq!(class_bytes.literal().is_none(), true);",
          "    assert_eq!(class_bytes.minimum_len(), Some(0));",
          "    assert_eq!(class_bytes.maximum_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let mut class_bytes = Class::Bytes(ClassBytes::empty());",
          "    class_bytes.negate();",
          "    assert_eq!(class_bytes.is_empty(), true);",
          "    assert_eq!(class_bytes.literal().is_none(), true);",
          "    assert_eq!(class_bytes.minimum_len(), Some(0));",
          "    assert_eq!(class_bytes.maximum_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_bytes = Class::Bytes(ClassBytes::new(vec![",
          "        ClassBytesRange::new(0, 50),",
          "        ClassBytesRange::new(100, 150),",
          "    ]));",
          "    class_bytes.negate();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_bytes, Class::Bytes(ClassBytes::new(vec![",
          "    ClassBytesRange::new(51, 99),",
          "    ClassBytesRange::new(151, 255),",
          "    ])));"
        ],
        "code": [
          "{",
          "    let mut class_bytes = Class::Bytes(ClassBytes::new(vec![",
          "        ClassBytesRange::new(0, 50),",
          "        ClassBytesRange::new(100, 150),",
          "    ]));",
          "    class_bytes.negate();",
          "    assert_eq!(class_bytes, Class::Bytes(ClassBytes::new(vec![",
          "    ClassBytesRange::new(51, 99),",
          "    ClassBytesRange::new(151, 255),",
          "    ])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_bytes = Class::Bytes(ClassBytes::new(vec![ClassBytesRange::new(10, 20)]));",
          "    class_bytes.negate();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_bytes, Class::Bytes(ClassBytes::new(vec![ClassBytesRange::new(0, 9), ClassBytesRange::new(21, 255)])));"
        ],
        "code": [
          "{",
          "    let mut class_bytes = Class::Bytes(ClassBytes::new(vec![ClassBytesRange::new(10, 20)]));",
          "    class_bytes.negate();",
          "    assert_eq!(class_bytes, Class::Bytes(ClassBytes::new(vec![ClassBytesRange::new(0, 9), ClassBytesRange::new(21, 255)])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_bytes = Class::Bytes(ClassBytes::new(vec![",
          "        ClassBytesRange::new(255, 255), ",
          "    ]));",
          "    class_bytes.negate();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_bytes.is_empty(), true);",
          "    assert_eq!(class_bytes.minimum_len(), Some(1));",
          "    assert_eq!(class_bytes.maximum_len(), Some(1));",
          "    assert_eq!(class_bytes.literal(), None);",
          "    assert_eq!(class_bytes.ranges().len(), 0);"
        ],
        "code": [
          "{",
          "    let mut class_bytes = Class::Bytes(ClassBytes::new(vec![",
          "        ClassBytesRange::new(255, 255), ",
          "    ]));",
          "    class_bytes.negate();",
          "    assert_eq!(class_bytes.is_empty(), true);",
          "    assert_eq!(class_bytes.minimum_len(), Some(1));",
          "    assert_eq!(class_bytes.maximum_len(), Some(1));",
          "    assert_eq!(class_bytes.literal(), None);",
          "    assert_eq!(class_bytes.ranges().len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_bytes = Class::Bytes(ClassBytes::new(vec![",
          "        ClassBytesRange::new(0, 0), ",
          "        ClassBytesRange::new(1, 255),",
          "    ]));",
          "    class_bytes.negate();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_bytes.is_empty(), false);",
          "    assert!(class_bytes.ranges().is_empty() == false);",
          "    assert_eq!(class_bytes.minimum_len(), Some(1));",
          "    assert_eq!(class_bytes.maximum_len(), Some(256));",
          "    assert!(class_bytes.is_ascii() == false);",
          "    assert!(class_bytes.case_fold_simple().is_ok());",
          "    assert!(class_bytes.literal().is_none());"
        ],
        "code": [
          "{",
          "    let mut class_bytes = Class::Bytes(ClassBytes::new(vec![",
          "        ClassBytesRange::new(0, 0), ",
          "        ClassBytesRange::new(1, 255),",
          "    ]));",
          "    class_bytes.negate();",
          "    assert_eq!(class_bytes.is_empty(), false);",
          "    assert!(class_bytes.ranges().is_empty() == false);",
          "    assert_eq!(class_bytes.minimum_len(), Some(1));",
          "    assert_eq!(class_bytes.maximum_len(), Some(256));",
          "    assert!(class_bytes.is_ascii() == false);",
          "    assert!(class_bytes.case_fold_simple().is_ok());",
          "    assert!(class_bytes.literal().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]