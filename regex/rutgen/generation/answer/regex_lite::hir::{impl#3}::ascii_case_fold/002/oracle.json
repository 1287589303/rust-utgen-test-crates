[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'z' },",
          "    ]);",
          "    class.ascii_case_fold();",
          "}"
        ],
        "oracle": [
          "    class.ranges.len() == 2",
          "    class.ranges[0] == ClassRange { start: 'A', end: 'Z' }",
          "    class.ranges[1] == ClassRange { start: 'a', end: 'z' }",
          "    class.is_canonical() == true",
          "    class.ranges.is_empty() == false"
        ],
        "code": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'z' },",
          "    ]);",
          "    class.ascii_case_fold();",
          "    class.ranges.len() == 2",
          "    class.ranges[0] == ClassRange { start: 'A', end: 'Z' }",
          "    class.ranges[1] == ClassRange { start: 'a', end: 'z' }",
          "    class.is_canonical() == true",
          "    class.ranges.is_empty() == false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'A', end: 'Z' },",
          "    ]);",
          "    class.ascii_case_fold();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class.ranges.len(), 2);",
          "    assert_eq!(class.ranges[0], ClassRange { start: 'A', end: 'Z' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'a', end: 'z' });",
          "    assert!(class.is_canonical());",
          "    assert!(class.ranges.iter().all(|range| range.start.is_ascii() && range.end.is_ascii()));",
          "    assert!(class.ranges.iter().all(|range| range.start <= range.end));"
        ],
        "code": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'A', end: 'Z' },",
          "    ]);",
          "    class.ascii_case_fold();",
          "    assert_eq!(class.ranges.len(), 2);",
          "    assert_eq!(class.ranges[0], ClassRange { start: 'A', end: 'Z' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'a', end: 'z' });",
          "    assert!(class.is_canonical());",
          "    assert!(class.ranges.iter().all(|range| range.start.is_ascii() && range.end.is_ascii()));",
          "    assert!(class.ranges.iter().all(|range| range.start <= range.end));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'c' },",
          "        ClassRange { start: 'A', end: 'C' },",
          "    ]);",
          "    class.ascii_case_fold();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class.ranges.len(), 4);",
          "    assert_eq!(class.ranges[0], ClassRange { start: 'A', end: 'C' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'a', end: 'c' });",
          "    assert_eq!(class.ranges[2], ClassRange { start: 'A', end: 'C' });",
          "    assert_eq!(class.ranges[3], ClassRange { start: 'a', end: 'c' });",
          "    assert!(class.is_canonical());"
        ],
        "code": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'c' },",
          "        ClassRange { start: 'A', end: 'C' },",
          "    ]);",
          "    class.ascii_case_fold();",
          "    assert_eq!(class.ranges.len(), 4);",
          "    assert_eq!(class.ranges[0], ClassRange { start: 'A', end: 'C' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'a', end: 'c' });",
          "    assert_eq!(class.ranges[2], ClassRange { start: 'A', end: 'C' });",
          "    assert_eq!(class.ranges[3], ClassRange { start: 'a', end: 'c' });",
          "    assert!(class.is_canonical());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'a' },",
          "        ClassRange { start: 'z', end: 'z' },",
          "        ClassRange { start: 'A', end: 'A' },",
          "        ClassRange { start: 'Z', end: 'Z' },",
          "    ]);",
          "    class.ascii_case_fold();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class.ranges.len(), 6);",
          "    assert!(class.ranges.contains(&ClassRange { start: 'A', end: 'A' }));",
          "    assert!(class.ranges.contains(&ClassRange { start: 'a', end: 'a' }));",
          "    assert!(class.ranges.contains(&ClassRange { start: 'Z', end: 'Z' }));",
          "    assert!(class.ranges.contains(&ClassRange { start: 'z', end: 'z' }));",
          "    assert!(class.ranges.is_canonical());"
        ],
        "code": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'a' },",
          "        ClassRange { start: 'z', end: 'z' },",
          "        ClassRange { start: 'A', end: 'A' },",
          "        ClassRange { start: 'Z', end: 'Z' },",
          "    ]);",
          "    class.ascii_case_fold();",
          "    assert_eq!(class.ranges.len(), 6);",
          "    assert!(class.ranges.contains(&ClassRange { start: 'A', end: 'A' }));",
          "    assert!(class.ranges.contains(&ClassRange { start: 'a', end: 'a' }));",
          "    assert!(class.ranges.contains(&ClassRange { start: 'Z', end: 'Z' }));",
          "    assert!(class.ranges.contains(&ClassRange { start: 'z', end: 'z' }));",
          "    assert!(class.ranges.is_canonical());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'd', end: 'f' },",
          "        ClassRange { start: 'G', end: 'I' },",
          "    ]);",
          "    class.ascii_case_fold();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class.ranges.len(), 4);",
          "    assert_eq!(class.ranges[2], ClassRange { start: 'D', end: 'F' });",
          "    assert_eq!(class.ranges[3], ClassRange { start: 'g', end: 'i' });",
          "    assert!(class.is_canonical());"
        ],
        "code": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'd', end: 'f' },",
          "        ClassRange { start: 'G', end: 'I' },",
          "    ]);",
          "    class.ascii_case_fold();",
          "    assert_eq!(class.ranges.len(), 4);",
          "    assert_eq!(class.ranges[2], ClassRange { start: 'D', end: 'F' });",
          "    assert_eq!(class.ranges[3], ClassRange { start: 'g', end: 'i' });",
          "    assert!(class.is_canonical());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: '1', end: '1' },",
          "        ClassRange { start: '@', end: '@' },",
          "    ]);",
          "    class.ascii_case_fold();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class.ranges.len(), 4);",
          "    assert!(class.ranges.contains(&ClassRange { start: '1', end: '1' }));",
          "    assert!(class.ranges.contains(&ClassRange { start: '1', end: '1' }));",
          "    assert!(class.ranges.contains(&ClassRange { start: 'A', end: 'A' }));",
          "    assert!(class.ranges.contains(&ClassRange { start: 'a', end: 'a' }));",
          "    assert!(class.ranges.contains(&ClassRange { start: '@', end: '@' }));",
          "    assert!(class.ranges.iter().all(|r| r.start.is_ascii() && r.end.is_ascii()));"
        ],
        "code": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: '1', end: '1' },",
          "        ClassRange { start: '@', end: '@' },",
          "    ]);",
          "    class.ascii_case_fold();",
          "    assert_eq!(class.ranges.len(), 4);",
          "    assert!(class.ranges.contains(&ClassRange { start: '1', end: '1' }));",
          "    assert!(class.ranges.contains(&ClassRange { start: '1', end: '1' }));",
          "    assert!(class.ranges.contains(&ClassRange { start: 'A', end: 'A' }));",
          "    assert!(class.ranges.contains(&ClassRange { start: 'a', end: 'a' }));",
          "    assert!(class.ranges.contains(&ClassRange { start: '@', end: '@' }));",
          "    assert!(class.ranges.iter().all(|r| r.start.is_ascii() && r.end.is_ascii()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]