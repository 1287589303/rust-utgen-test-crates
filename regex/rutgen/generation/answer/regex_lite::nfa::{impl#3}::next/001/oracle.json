[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[Option<Arc<str>>] = &[];",
          "    let mut capture_names = CaptureNames { it: slice.iter() };",
          "    let _ = capture_names.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(capture_names.next(), None);"
        ],
        "code": [
          "{",
          "    let slice: &[Option<Arc<str>>] = &[];",
          "    let mut capture_names = CaptureNames { it: slice.iter() };",
          "    let _ = capture_names.next();",
          "    assert_eq!(capture_names.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[Option<Arc<str>>] = &[None, None, None];",
          "    let mut capture_names = CaptureNames { it: slice.iter() };",
          "    let _ = capture_names.next();",
          "    let _ = capture_names.next();",
          "    let _ = capture_names.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(capture_names.next(), Some(None));",
          "    assert_eq!(capture_names.next(), Some(None));",
          "    assert_eq!(capture_names.next(), Some(None));",
          "    assert_eq!(capture_names.next(), None);"
        ],
        "code": [
          "{",
          "    let slice: &[Option<Arc<str>>] = &[None, None, None];",
          "    let mut capture_names = CaptureNames { it: slice.iter() };",
          "    let _ = capture_names.next();",
          "    let _ = capture_names.next();",
          "    let _ = capture_names.next();",
          "    assert_eq!(capture_names.next(), Some(None));",
          "    assert_eq!(capture_names.next(), Some(None));",
          "    assert_eq!(capture_names.next(), Some(None));",
          "    assert_eq!(capture_names.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[Option<Arc<str>>] = &[Some(Arc::new(\"first\".to_string())), None, Some(Arc::new(\"second\".to_string()))];",
          "    let mut capture_names = CaptureNames { it: slice.iter() };",
          "    let _ = capture_names.next();",
          "    let _ = capture_names.next();",
          "    let _ = capture_names.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(capture_names.next(), Some(Some(\"first\")));",
          "    assert_eq!(capture_names.next(), Some(None));",
          "    assert_eq!(capture_names.next(), Some(Some(\"second\")));",
          "    assert_eq!(capture_names.next(), None);"
        ],
        "code": [
          "{",
          "    let slice: &[Option<Arc<str>>] = &[Some(Arc::new(\"first\".to_string())), None, Some(Arc::new(\"second\".to_string()))];",
          "    let mut capture_names = CaptureNames { it: slice.iter() };",
          "    let _ = capture_names.next();",
          "    let _ = capture_names.next();",
          "    let _ = capture_names.next();",
          "    assert_eq!(capture_names.next(), Some(Some(\"first\")));",
          "    assert_eq!(capture_names.next(), Some(None));",
          "    assert_eq!(capture_names.next(), Some(Some(\"second\")));",
          "    assert_eq!(capture_names.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[Option<Arc<str>>] = &[Some(Arc::new(\"one\".to_string())), Some(Arc::new(\"two\".to_string()))];",
          "    let mut capture_names = CaptureNames { it: slice.iter() };",
          "    let _ = capture_names.next();",
          "    let _ = capture_names.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(capture_names.next(), Some(Some(\"one\")));",
          "    assert_eq!(capture_names.next(), Some(Some(\"two\")));",
          "    assert_eq!(capture_names.next(), Some(None));",
          "    assert_eq!(capture_names.next(), None);"
        ],
        "code": [
          "{",
          "    let slice: &[Option<Arc<str>>] = &[Some(Arc::new(\"one\".to_string())), Some(Arc::new(\"two\".to_string()))];",
          "    let mut capture_names = CaptureNames { it: slice.iter() };",
          "    let _ = capture_names.next();",
          "    let _ = capture_names.next();",
          "    assert_eq!(capture_names.next(), Some(Some(\"one\")));",
          "    assert_eq!(capture_names.next(), Some(Some(\"two\")));",
          "    assert_eq!(capture_names.next(), Some(None));",
          "    assert_eq!(capture_names.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[Option<Arc<str>>] = &[",
          "        Some(Arc::new(\"first\".to_string())),",
          "        Some(Arc::new(\"second\".to_string())),",
          "        None,",
          "        Some(Arc::new(\"third\".to_string())),",
          "        None,",
          "        Some(Arc::new(\"fourth\".to_string())),",
          "        Some(Arc::new(\"fifth\".to_string())),",
          "        None,",
          "        Some(Arc::new(\"sixth\".to_string())),",
          "        Some(Arc::new(\"seventh\".to_string()))",
          "    ];",
          "    let mut capture_names = CaptureNames { it: slice.iter() };",
          "    for _ in 0..slice.len() {",
          "        let _ = capture_names.next();",
          "    }",
          "}"
        ],
        "oracle": [
          "    let slice: &[Option<Arc<str>>] = &[Some(Arc::new(\"first\".to_string()))];",
          "    let mut capture_names = CaptureNames { it: slice.iter() };",
          "    assert_eq!(capture_names.next(), Some(Some(\"first\")));",
          "    ",
          "    let slice: &[Option<Arc<str>>] = &[Some(Arc::new(\"second\".to_string()))];",
          "    let mut capture_names = CaptureNames { it: slice.iter() };",
          "    assert_eq!(capture_names.next(), Some(Some(\"second\")));",
          "    ",
          "    let slice: &[Option<Arc<str>>] = &[None];",
          "    let mut capture_names = CaptureNames { it: slice.iter() };",
          "    assert_eq!(capture_names.next(), Some(None));",
          "    ",
          "    let slice: &[Option<Arc<str>>] = &[Some(Arc::new(\"third\".to_string())), None];",
          "    let mut capture_names = CaptureNames { it: slice.iter() };",
          "    assert_eq!(capture_names.next(), Some(Some(\"third\")));",
          "    assert_eq!(capture_names.next(), Some(None));",
          "    ",
          "    let slice: &[Option<Arc<str>>] = &[Some(Arc::new(\"fourth\".to_string())), Some(Arc::new(\"fifth\".to_string()))];",
          "    let mut capture_names = CaptureNames { it: slice.iter() };",
          "    assert_eq!(capture_names.next(), Some(Some(\"fourth\")));",
          "    assert_eq!(capture_names.next(), Some(Some(\"fifth\")));",
          "    ",
          "    let slice: &[Option<Arc<str>>] = &[Some(Arc::new(\"sixth\".to_string())), None, Some(Arc::new(\"seventh\".to_string()))];",
          "    let mut capture_names = CaptureNames { it: slice.iter() };",
          "    assert_eq!(capture_names.next(), Some(Some(\"sixth\")));",
          "    assert_eq!(capture_names.next(), Some(None));",
          "    assert_eq!(capture_names.next(), Some(Some(\"seventh\")));",
          "    ",
          "    let slice: &[Option<Arc<str>>] = &[None, None];",
          "    let mut capture_names = CaptureNames { it: slice.iter() };",
          "    assert_eq!(capture_names.next(), Some(None));",
          "    assert_eq!(capture_names.next(), Some(None));",
          "    ",
          "    let slice: &[Option<Arc<str>>] = &[];",
          "    let mut capture_names = CaptureNames { it: slice.iter() };",
          "    assert_eq!(capture_names.next(), None);"
        ],
        "code": [
          "{",
          "    let slice: &[Option<Arc<str>>] = &[",
          "        Some(Arc::new(\"first\".to_string())),",
          "        Some(Arc::new(\"second\".to_string())),",
          "        None,",
          "        Some(Arc::new(\"third\".to_string())),",
          "        None,",
          "        Some(Arc::new(\"fourth\".to_string())),",
          "        Some(Arc::new(\"fifth\".to_string())),",
          "        None,",
          "        Some(Arc::new(\"sixth\".to_string())),",
          "        Some(Arc::new(\"seventh\".to_string()))",
          "    ];",
          "    let mut capture_names = CaptureNames { it: slice.iter() };",
          "    for _ in 0..slice.len() {",
          "        let _ = capture_names.next();",
          "    }",
          "    let slice: &[Option<Arc<str>>] = &[Some(Arc::new(\"first\".to_string()))];",
          "    let mut capture_names = CaptureNames { it: slice.iter() };",
          "    assert_eq!(capture_names.next(), Some(Some(\"first\")));",
          "    ",
          "    let slice: &[Option<Arc<str>>] = &[Some(Arc::new(\"second\".to_string()))];",
          "    let mut capture_names = CaptureNames { it: slice.iter() };",
          "    assert_eq!(capture_names.next(), Some(Some(\"second\")));",
          "    ",
          "    let slice: &[Option<Arc<str>>] = &[None];",
          "    let mut capture_names = CaptureNames { it: slice.iter() };",
          "    assert_eq!(capture_names.next(), Some(None));",
          "    ",
          "    let slice: &[Option<Arc<str>>] = &[Some(Arc::new(\"third\".to_string())), None];",
          "    let mut capture_names = CaptureNames { it: slice.iter() };",
          "    assert_eq!(capture_names.next(), Some(Some(\"third\")));",
          "    assert_eq!(capture_names.next(), Some(None));",
          "    ",
          "    let slice: &[Option<Arc<str>>] = &[Some(Arc::new(\"fourth\".to_string())), Some(Arc::new(\"fifth\".to_string()))];",
          "    let mut capture_names = CaptureNames { it: slice.iter() };",
          "    assert_eq!(capture_names.next(), Some(Some(\"fourth\")));",
          "    assert_eq!(capture_names.next(), Some(Some(\"fifth\")));",
          "    ",
          "    let slice: &[Option<Arc<str>>] = &[Some(Arc::new(\"sixth\".to_string())), None, Some(Arc::new(\"seventh\".to_string()))];",
          "    let mut capture_names = CaptureNames { it: slice.iter() };",
          "    assert_eq!(capture_names.next(), Some(Some(\"sixth\")));",
          "    assert_eq!(capture_names.next(), Some(None));",
          "    assert_eq!(capture_names.next(), Some(Some(\"seventh\")));",
          "    ",
          "    let slice: &[Option<Arc<str>>] = &[None, None];",
          "    let mut capture_names = CaptureNames { it: slice.iter() };",
          "    assert_eq!(capture_names.next(), Some(None));",
          "    assert_eq!(capture_names.next(), Some(None));",
          "    ",
          "    let slice: &[Option<Arc<str>>] = &[];",
          "    let mut capture_names = CaptureNames { it: slice.iter() };",
          "    assert_eq!(capture_names.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]