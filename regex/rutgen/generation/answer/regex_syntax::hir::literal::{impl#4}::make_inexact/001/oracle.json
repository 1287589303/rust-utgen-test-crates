[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq = Seq {",
          "        literals: Some(vec![Literal::exact(vec![b'a']), Literal::exact(vec![b'b'])]),",
          "    };",
          "    seq.make_inexact();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq.literals().unwrap()[0].is_exact(), false);",
          "    assert_eq!(seq.literals().unwrap()[1].is_exact(), false);",
          "    assert!(seq.literals().is_some());",
          "    assert_eq!(seq.literals().unwrap().len(), 2);"
        ],
        "code": [
          "{",
          "    let mut seq = Seq {",
          "        literals: Some(vec![Literal::exact(vec![b'a']), Literal::exact(vec![b'b'])]),",
          "    };",
          "    seq.make_inexact();",
          "    assert_eq!(seq.literals().unwrap()[0].is_exact(), false);",
          "    assert_eq!(seq.literals().unwrap()[1].is_exact(), false);",
          "    assert!(seq.literals().is_some());",
          "    assert_eq!(seq.literals().unwrap().len(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq = Seq {",
          "        literals: Some(vec![]),",
          "    };",
          "    seq.make_inexact();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq.literals(), Some(&[]));",
          "    assert!(seq.literals.is_some());",
          "    assert!(seq.literals().unwrap().is_empty());",
          "    seq.literals = Some(vec![Literal::exact(b\"test\".to_vec())]);",
          "    seq.make_inexact();",
          "    assert_eq!(seq.literals().unwrap()[0].is_exact(), false);",
          "    seq.literals = Some(vec![Literal::exact(b\"example\".to_vec()), Literal::exact(b\"data\".to_vec())]);",
          "    seq.make_inexact();",
          "    assert!(seq.literals().unwrap().iter().all(|lit| !lit.is_exact()));"
        ],
        "code": [
          "{",
          "    let mut seq = Seq {",
          "        literals: Some(vec![]),",
          "    };",
          "    seq.make_inexact();",
          "    assert_eq!(seq.literals(), Some(&[]));",
          "    assert!(seq.literals.is_some());",
          "    assert!(seq.literals().unwrap().is_empty());",
          "    seq.literals = Some(vec![Literal::exact(b\"test\".to_vec())]);",
          "    seq.make_inexact();",
          "    assert_eq!(seq.literals().unwrap()[0].is_exact(), false);",
          "    seq.literals = Some(vec![Literal::exact(b\"example\".to_vec()), Literal::exact(b\"data\".to_vec())]);",
          "    seq.make_inexact();",
          "    assert!(seq.literals().unwrap().iter().all(|lit| !lit.is_exact()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq = Seq {",
          "        literals: None,",
          "    };",
          "    seq.make_inexact();",
          "}"
        ],
        "oracle": [
          "    seq.literals.is_none() == true",
          "    ",
          "    let mut seq_with_literals = Seq {",
          "    literals: Some(vec![Literal::exact(b\"test\".to_vec())]),",
          "    };",
          "    seq_with_literals.make_inexact();",
          "    assert!(seq_with_literals.literals().unwrap()[0].is_inexact() == true);",
          "    ",
          "    let mut empty_seq = Seq {",
          "    literals: Some(vec![]),",
          "    };",
          "    empty_seq.make_inexact();",
          "    assert!(empty_seq.literals().is_some() && empty_seq.literals().unwrap().is_empty() == true);"
        ],
        "code": [
          "{",
          "    let mut seq = Seq {",
          "        literals: None,",
          "    };",
          "    seq.make_inexact();",
          "    seq.literals.is_none() == true",
          "    ",
          "    let mut seq_with_literals = Seq {",
          "    literals: Some(vec![Literal::exact(b\"test\".to_vec())]),",
          "    };",
          "    seq_with_literals.make_inexact();",
          "    assert!(seq_with_literals.literals().unwrap()[0].is_inexact() == true);",
          "    ",
          "    let mut empty_seq = Seq {",
          "    literals: Some(vec![]),",
          "    };",
          "    empty_seq.make_inexact();",
          "    assert!(empty_seq.literals().is_some() && empty_seq.literals().unwrap().is_empty() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]