[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq = Seq {",
          "        literals: Some(vec![Literal::exact(b\"literal1\".to_vec()), Literal::exact(b\"literal2\".to_vec())]),",
          "    };",
          "    seq.make_inexact();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq.literals().unwrap()[0].is_inexact(), true);",
          "    assert_eq!(seq.literals().unwrap()[1].is_inexact(), true);",
          "    seq.make_inexact();",
          "    assert_eq!(seq.literals().unwrap(), Some(&[Literal::exact(b\"literal1\".to_vec()), Literal::exact(b\"literal2\".to_vec())]));"
        ],
        "code": [
          "{",
          "    let mut seq = Seq {",
          "        literals: Some(vec![Literal::exact(b\"literal1\".to_vec()), Literal::exact(b\"literal2\".to_vec())]),",
          "    };",
          "    seq.make_inexact();",
          "    assert_eq!(seq.literals().unwrap()[0].is_inexact(), true);",
          "    assert_eq!(seq.literals().unwrap()[1].is_inexact(), true);",
          "    seq.make_inexact();",
          "    assert_eq!(seq.literals().unwrap(), Some(&[Literal::exact(b\"literal1\".to_vec()), Literal::exact(b\"literal2\".to_vec())]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq = Seq {",
          "        literals: Some(vec![Literal::exact(b\"single_literal\".to_vec())]),",
          "    };",
          "    seq.make_inexact();",
          "}"
        ],
        "oracle": [
          "    let mut seq = Seq { literals: Some(vec![Literal::exact(b\"single_literal\".to_vec())]) };",
          "    seq.make_inexact();",
          "    assert!(seq.literals().unwrap()[0].is_inexact());",
          "    let mut seq_empty = Seq { literals: Some(vec![]) };",
          "    seq_empty.make_inexact();",
          "    assert!(seq_empty.literals().unwrap().is_empty());",
          "    let mut seq_none = Seq { literals: None };",
          "    seq_none.make_inexact();",
          "    assert!(seq_none.literals.is_none());"
        ],
        "code": [
          "{",
          "    let mut seq = Seq {",
          "        literals: Some(vec![Literal::exact(b\"single_literal\".to_vec())]),",
          "    };",
          "    seq.make_inexact();",
          "    let mut seq = Seq { literals: Some(vec![Literal::exact(b\"single_literal\".to_vec())]) };",
          "    seq.make_inexact();",
          "    assert!(seq.literals().unwrap()[0].is_inexact());",
          "    let mut seq_empty = Seq { literals: Some(vec![]) };",
          "    seq_empty.make_inexact();",
          "    assert!(seq_empty.literals().unwrap().is_empty());",
          "    let mut seq_none = Seq { literals: None };",
          "    seq_none.make_inexact();",
          "    assert!(seq_none.literals.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq = Seq {",
          "        literals: Some(vec![Literal::exact(b\"test\".to_vec()), Literal::exact(b\"example\".to_vec()), Literal::exact(b\"demo\".to_vec())]),",
          "    };",
          "    seq.make_inexact();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq.literals().unwrap().len(), 3);",
          "    assert!(seq.literals().unwrap()[0].is_inexact());",
          "    assert!(seq.literals().unwrap()[1].is_inexact());",
          "    assert!(seq.literals().unwrap()[2].is_inexact());"
        ],
        "code": [
          "{",
          "    let mut seq = Seq {",
          "        literals: Some(vec![Literal::exact(b\"test\".to_vec()), Literal::exact(b\"example\".to_vec()), Literal::exact(b\"demo\".to_vec())]),",
          "    };",
          "    seq.make_inexact();",
          "    assert_eq!(seq.literals().unwrap().len(), 3);",
          "    assert!(seq.literals().unwrap()[0].is_inexact());",
          "    assert!(seq.literals().unwrap()[1].is_inexact());",
          "    assert!(seq.literals().unwrap()[2].is_inexact());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq = Seq {",
          "        literals: Some(vec![]),",
          "    };",
          "    seq.make_inexact(); // This case should be a no-op",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq.literals().unwrap().len(), 0);",
          "    assert!(seq.literals().unwrap().iter().all(|lit| lit.is_exact()));",
          "    seq.make_inexact();",
          "    assert_eq!(seq.literals().unwrap().len(), 0);",
          "    assert!(seq.literals().unwrap().iter().all(|lit| lit.is_exact()));"
        ],
        "code": [
          "{",
          "    let mut seq = Seq {",
          "        literals: Some(vec![]),",
          "    };",
          "    seq.make_inexact(); // This case should be a no-op",
          "    assert_eq!(seq.literals().unwrap().len(), 0);",
          "    assert!(seq.literals().unwrap().iter().all(|lit| lit.is_exact()));",
          "    seq.make_inexact();",
          "    assert_eq!(seq.literals().unwrap().len(), 0);",
          "    assert!(seq.literals().unwrap().iter().all(|lit| lit.is_exact()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]