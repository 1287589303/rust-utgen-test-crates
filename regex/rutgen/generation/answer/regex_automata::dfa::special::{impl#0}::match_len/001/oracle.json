[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(0),",
          "        min_match: StateID(2),",
          "        max_match: StateID(8),",
          "        min_accel: StateID(0),",
          "        max_accel: StateID(0),",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "    let stride = 2;",
          "    special.match_len(stride);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(special.match_len(stride), (8 - 2 + 2) / 2);"
        ],
        "code": [
          "{",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(0),",
          "        min_match: StateID(2),",
          "        max_match: StateID(8),",
          "        min_accel: StateID(0),",
          "        max_accel: StateID(0),",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "    let stride = 2;",
          "    special.match_len(stride);",
          "    assert_eq!(special.match_len(stride), (8 - 2 + 2) / 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special {",
          "        max: StateID(15),",
          "        quit_id: StateID(0),",
          "        min_match: StateID(3),",
          "        max_match: StateID(10),",
          "        min_accel: StateID(0),",
          "        max_accel: StateID(0),",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "    let stride = 5;",
          "    special.match_len(stride);",
          "}"
        ],
        "oracle": [
          "    assert!(special.matches() == true);",
          "    assert_eq!(special.match_len(stride), (special.max_match.as_usize() - special.min_match.as_usize() + stride) / stride);"
        ],
        "code": [
          "{",
          "    let special = Special {",
          "        max: StateID(15),",
          "        quit_id: StateID(0),",
          "        min_match: StateID(3),",
          "        max_match: StateID(10),",
          "        min_accel: StateID(0),",
          "        max_accel: StateID(0),",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "    let stride = 5;",
          "    special.match_len(stride);",
          "    assert!(special.matches() == true);",
          "    assert_eq!(special.match_len(stride), (special.max_match.as_usize() - special.min_match.as_usize() + stride) / stride);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special {",
          "        max: StateID(5),",
          "        quit_id: StateID(0),",
          "        min_match: StateID(1),",
          "        max_match: StateID(4),",
          "        min_accel: StateID(0),",
          "        max_accel: StateID(0),",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "    let stride = 1;",
          "    special.match_len(stride);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(special.matches(), true);",
          "    assert_eq!(special.max_match.as_usize(), 4);",
          "    assert_eq!(special.min_match.as_usize(), 1);",
          "    assert_eq!(stride, 1);",
          "    assert_eq!(special.match_len(stride), (4 - 1 + 1) / 1);"
        ],
        "code": [
          "{",
          "    let special = Special {",
          "        max: StateID(5),",
          "        quit_id: StateID(0),",
          "        min_match: StateID(1),",
          "        max_match: StateID(4),",
          "        min_accel: StateID(0),",
          "        max_accel: StateID(0),",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "    let stride = 1;",
          "    special.match_len(stride);",
          "    assert_eq!(special.matches(), true);",
          "    assert_eq!(special.max_match.as_usize(), 4);",
          "    assert_eq!(special.min_match.as_usize(), 1);",
          "    assert_eq!(stride, 1);",
          "    assert_eq!(special.match_len(stride), (4 - 1 + 1) / 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special {",
          "        max: StateID(20),",
          "        quit_id: StateID(0),",
          "        min_match: StateID(5),",
          "        max_match: StateID(15),",
          "        min_accel: StateID(0),",
          "        max_accel: StateID(0),",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "    let stride = 3;",
          "    special.match_len(stride);",
          "}"
        ],
        "oracle": [
          "    assert!(special.matches() == true);",
          "    assert_eq!(special.max_match.as_usize(), 15);",
          "    assert_eq!(special.min_match.as_usize(), 5);",
          "    assert_eq!(stride, 3);",
          "    assert_eq!(special.match_len(stride), (15 - 5 + stride) / stride);"
        ],
        "code": [
          "{",
          "    let special = Special {",
          "        max: StateID(20),",
          "        quit_id: StateID(0),",
          "        min_match: StateID(5),",
          "        max_match: StateID(15),",
          "        min_accel: StateID(0),",
          "        max_accel: StateID(0),",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "    let stride = 3;",
          "    special.match_len(stride);",
          "    assert!(special.matches() == true);",
          "    assert_eq!(special.max_match.as_usize(), 15);",
          "    assert_eq!(special.min_match.as_usize(), 5);",
          "    assert_eq!(stride, 3);",
          "    assert_eq!(special.match_len(stride), (15 - 5 + stride) / stride);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special {",
          "        max: StateID(30),",
          "        quit_id: StateID(0),",
          "        min_match: StateID(10),",
          "        max_match: StateID(10),",
          "        min_accel: StateID(0),",
          "        max_accel: StateID(0),",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "    let stride = 1;",
          "    special.match_len(stride);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(special.matches(), true);",
          "    assert_eq!(special.max_match.as_usize(), 10);",
          "    assert_eq!(special.min_match.as_usize(), 10);",
          "    assert_eq!(stride, 1);",
          "    assert_eq!(special.match_len(stride), (10 - 10 + 1) / 1);"
        ],
        "code": [
          "{",
          "    let special = Special {",
          "        max: StateID(30),",
          "        quit_id: StateID(0),",
          "        min_match: StateID(10),",
          "        max_match: StateID(10),",
          "        min_accel: StateID(0),",
          "        max_accel: StateID(0),",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "    let stride = 1;",
          "    special.match_len(stride);",
          "    assert_eq!(special.matches(), true);",
          "    assert_eq!(special.max_match.as_usize(), 10);",
          "    assert_eq!(special.min_match.as_usize(), 10);",
          "    assert_eq!(stride, 1);",
          "    assert_eq!(special.match_len(stride), (10 - 10 + 1) / 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]