[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let slots = Slots(0);",
          "    let _ = slots.insert(Slots::LIMIT);",
          "}"
        ],
        "oracle": [
          "    #[should_panic]",
          "    let slots = Slots(0);",
          "    let _ = slots.insert(Slots::LIMIT);"
        ],
        "code": [
          "{",
          "    let slots = Slots(0);",
          "    let _ = slots.insert(Slots::LIMIT);",
          "    #[should_panic]",
          "    let slots = Slots(0);",
          "    let _ = slots.insert(Slots::LIMIT);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slots = Slots(0);",
          "    let _ = slots.insert(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slots.insert(Slots::LIMIT), Slots(0));",
          "    assert_panics!(() => { slots.insert(Slots::LIMIT); });"
        ],
        "code": [
          "{",
          "    let slots = Slots(0);",
          "    let _ = slots.insert(0);",
          "    assert_eq!(slots.insert(Slots::LIMIT), Slots(0));",
          "    assert_panics!(() => { slots.insert(Slots::LIMIT); });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slots = Slots(0);",
          "    let _ = slots.insert(1);",
          "}"
        ],
        "oracle": [
          "    assert_panics!(slots.insert(Slots::LIMIT));",
          "    assert_eq!(slots.insert(Slots::LIMIT - 1).0, 2);",
          "    assert_eq!(slots.insert(0).0, 1);",
          "    assert_eq!(slots.insert(31).0, 2147483648);",
          "    assert_eq!(slots.insert(32).0, slots.0);"
        ],
        "code": [
          "{",
          "    let slots = Slots(0);",
          "    let _ = slots.insert(1);",
          "    assert_panics!(slots.insert(Slots::LIMIT));",
          "    assert_eq!(slots.insert(Slots::LIMIT - 1).0, 2);",
          "    assert_eq!(slots.insert(0).0, 1);",
          "    assert_eq!(slots.insert(31).0, 2147483648);",
          "    assert_eq!(slots.insert(32).0, slots.0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slots = Slots(0);",
          "    let _ = slots.insert(2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slots.0, 0);",
          "    assert_eq!(slots.insert(Slots::LIMIT), slots);",
          "    panic!();"
        ],
        "code": [
          "{",
          "    let slots = Slots(0);",
          "    let _ = slots.insert(2);",
          "    assert_eq!(slots.0, 0);",
          "    assert_eq!(slots.insert(Slots::LIMIT), slots);",
          "    panic!();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slots = Slots(0);",
          "    let _ = slots.insert(31);",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| { let slots = Slots(0); slots.insert(32); }).is_err());",
          "    assert_eq!(slots.insert(31), Slots(2147483648));",
          "    assert_eq!(slots.insert(30).0 & (1 << 30), 1073741824);",
          "    assert_eq!(slots.insert(0).0 & (1 << 0), 1);"
        ],
        "code": [
          "{",
          "    let slots = Slots(0);",
          "    let _ = slots.insert(31);",
          "    assert!(std::panic::catch_unwind(|| { let slots = Slots(0); slots.insert(32); }).is_err());",
          "    assert_eq!(slots.insert(31), Slots(2147483648));",
          "    assert_eq!(slots.insert(30).0 & (1 << 30), 1073741824);",
          "    assert_eq!(slots.insert(0).0 & (1 << 0), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]