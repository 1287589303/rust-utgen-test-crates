[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slots = Slots(0);",
          "    let result = slots.insert(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Slots(1));",
          "    assert_ne!(result, Slots(0));",
          "    assert_eq!(result.0, 1);",
          "    assert!(result.is_empty() == false);",
          "    assert!(slots.insert(1).0 == 3);",
          "    assert!(slots.insert(2).0 == 7);"
        ],
        "code": [
          "{",
          "    let slots = Slots(0);",
          "    let result = slots.insert(0);",
          "    assert_eq!(result, Slots(1));",
          "    assert_ne!(result, Slots(0));",
          "    assert_eq!(result.0, 1);",
          "    assert!(result.is_empty() == false);",
          "    assert!(slots.insert(1).0 == 3);",
          "    assert!(slots.insert(2).0 == 7);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slots = Slots(0);",
          "    let result = slots.insert(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Slots(2));"
        ],
        "code": [
          "{",
          "    let slots = Slots(0);",
          "    let result = slots.insert(1);",
          "    assert_eq!(result, Slots(2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slots = Slots(0);",
          "    let result = slots.insert(2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Slots(4));",
          "    assert!(result.is_empty() == false);",
          "    assert!(result.iter().count() == 1);",
          "    assert!(result.iter().next() == Some(2));",
          "    assert!(result.0 & (1 << 2) != 0);"
        ],
        "code": [
          "{",
          "    let slots = Slots(0);",
          "    let result = slots.insert(2);",
          "    assert_eq!(result, Slots(4));",
          "    assert!(result.is_empty() == false);",
          "    assert!(result.iter().count() == 1);",
          "    assert!(result.iter().next() == Some(2));",
          "    assert!(result.0 & (1 << 2) != 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slots = Slots(0);",
          "    let result = slots.insert(31);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Slots(2147483648));"
        ],
        "code": [
          "{",
          "    let slots = Slots(0);",
          "    let result = slots.insert(31);",
          "    assert_eq!(result, Slots(2147483648));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slots = Slots(0);",
          "    let result = slots.insert(15);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Slots(32768));"
        ],
        "code": [
          "{",
          "    let slots = Slots(0);",
          "    let result = slots.insert(15);",
          "    assert_eq!(result, Slots(32768));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]