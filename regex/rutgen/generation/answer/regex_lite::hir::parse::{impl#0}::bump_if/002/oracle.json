[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let pattern = \"abcde\";",
          "    let mut parser = Parser::new(config, pattern);",
          "    parser.pos.set(0);",
          "    let result = parser.bump_if(\"abc\");",
          "}"
        ],
        "oracle": [
          "    let config = Config { size_limit: None };",
          "    let pattern = \"abcde\";",
          "    let mut parser = Parser::new(config, pattern);",
          "    parser.pos.set(0);",
          "    let result = parser.bump_if(\"abc\");",
          "    assert_eq!(result, true);",
          "    assert_eq!(parser.pos(), 3);",
          "    assert_eq!(parser.char(), 'd');"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let pattern = \"abcde\";",
          "    let mut parser = Parser::new(config, pattern);",
          "    parser.pos.set(0);",
          "    let result = parser.bump_if(\"abc\");",
          "    let config = Config { size_limit: None };",
          "    let pattern = \"abcde\";",
          "    let mut parser = Parser::new(config, pattern);",
          "    parser.pos.set(0);",
          "    let result = parser.bump_if(\"abc\");",
          "    assert_eq!(result, true);",
          "    assert_eq!(parser.pos(), 3);",
          "    assert_eq!(parser.char(), 'd');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let pattern = \"xyspl\";",
          "    let mut parser = Parser::new(config, pattern);",
          "    parser.pos.set(0);",
          "    let result = parser.bump_if(\"x\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert_eq!(parser.char.get(), Some('y'));"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let pattern = \"xyspl\";",
          "    let mut parser = Parser::new(config, pattern);",
          "    parser.pos.set(0);",
          "    let result = parser.bump_if(\"x\");",
          "    assert_eq!(result, true);",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert_eq!(parser.char.get(), Some('y'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let pattern = \"zzzzzzzoom\";",
          "    let mut parser = Parser::new(config, pattern);",
          "    parser.pos.set(0);",
          "    let result = parser.bump_if(\"zzzz\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    assert_eq!(parser.pos(), 4);",
          "    assert_eq!(parser.char(), 'z');",
          "    assert_eq!(parser.pattern(), \"zzzzzzzoom\");",
          "    assert!(parser.bump_if(\"oo\"));"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let pattern = \"zzzzzzzoom\";",
          "    let mut parser = Parser::new(config, pattern);",
          "    parser.pos.set(0);",
          "    let result = parser.bump_if(\"zzzz\");",
          "    assert_eq!(result, true);",
          "    assert_eq!(parser.pos(), 4);",
          "    assert_eq!(parser.char(), 'z');",
          "    assert_eq!(parser.pattern(), \"zzzzzzzoom\");",
          "    assert!(parser.bump_if(\"oo\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let pattern = \"COLORS\";",
          "    let mut parser = Parser::new(config, pattern);",
          "    parser.pos.set(0);",
          "    let result = parser.bump_if(\"COLOR\");",
          "}"
        ],
        "oracle": [
          "    let config = Config { size_limit: None };",
          "    let pattern = \"COLORS\";",
          "    let mut parser = Parser::new(config, pattern);",
          "    parser.pos.set(0);",
          "    assert!(parser.bump_if(\"COLOR\"));"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let pattern = \"COLORS\";",
          "    let mut parser = Parser::new(config, pattern);",
          "    parser.pos.set(0);",
          "    let result = parser.bump_if(\"COLOR\");",
          "    let config = Config { size_limit: None };",
          "    let pattern = \"COLORS\";",
          "    let mut parser = Parser::new(config, pattern);",
          "    parser.pos.set(0);",
          "    assert!(parser.bump_if(\"COLOR\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let pattern = \"hello_world\";",
          "    let mut parser = Parser::new(config, pattern);",
          "    parser.pos.set(5);",
          "    let result = parser.bump_if(\"_world\");",
          "}"
        ],
        "oracle": [
          "    let config = Config { size_limit: None };",
          "    let pattern = \"hello_world\";",
          "    let mut parser = Parser::new(config, pattern);",
          "    parser.pos.set(5);",
          "    assert_eq!(parser.bump_if(\"_world\"), true);",
          "    assert_eq!(parser.pos(), 10);",
          "    assert_eq!(parser.char(), 'd');",
          "    assert_eq!(parser.is_done(), false);"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let pattern = \"hello_world\";",
          "    let mut parser = Parser::new(config, pattern);",
          "    parser.pos.set(5);",
          "    let result = parser.bump_if(\"_world\");",
          "    let config = Config { size_limit: None };",
          "    let pattern = \"hello_world\";",
          "    let mut parser = Parser::new(config, pattern);",
          "    parser.pos.set(5);",
          "    assert_eq!(parser.bump_if(\"_world\"), true);",
          "    assert_eq!(parser.pos(), 10);",
          "    assert_eq!(parser.char(), 'd');",
          "    assert_eq!(parser.is_done(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]