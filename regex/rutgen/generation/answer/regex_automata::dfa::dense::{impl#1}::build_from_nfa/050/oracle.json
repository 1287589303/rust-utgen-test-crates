[
  {
    "uses": [
      "use regex_automata::nfa::thompson::NFA;",
      "use regex_automata::dfa::dense;",
      "use regex_automata::dfa::Automaton;",
      "use regex_automata::util::search::MatchKind;",
      "use regex_automata::nfa::thompson;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use regex_automata::{",
          "        dfa::{dense, Automaton},",
          "        nfa::thompson::{self, NFA},",
          "        util::search::MatchKind,",
          "    };",
          "",
          "    let mut builder = dense::Builder::new();",
          "    builder.configure(dense::Config::new()",
          "        .match_kind(MatchKind::LeftmostFirst)",
          "        .accelerate(false)",
          "        .minimize(false)",
          "        .specialize_start_states(false)",
          "        .starts_for_each_pattern(true)",
          "        .byte_classes(true)",
          "        .quit(0x81, true) // Add a quit byte (not in 0x80..=0xFF range)",
          "        .unicode_word_boundary(true));",
          "    ",
          "    let nfa = NFA::compiler()",
          "        .build(r\"[\\w]+\").unwrap();",
          "    ",
          "    let dfa = builder.build_from_nfa(&nfa).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(builder.config.get_unicode_word_boundary());",
          "    assert!(nfa.look_set_any().contains_word_unicode());",
          "    assert!((0x80..=0xFF).contains(&0x81));",
          "    assert!(builder.config.get_byte_classes());",
          "    assert!(!builder.config.quitset.is_empty());",
          "    assert!(DFA::initial(",
          "    classes,",
          "    nfa.pattern_len(),",
          "    builder.config.get_starts(),",
          "    nfa.look_matcher(),",
          "    builder.config.get_starts_for_each_pattern(),",
          "    builder.config.get_prefilter().map(|p| p.clone()),",
          "    quitset,",
          "    Flags::from_nfa(&nfa),",
          "    ).is_ok());",
          "    assert!(determinize::Config::new()",
          "    .match_kind(builder.config.get_match_kind())",
          "    .quit(quitset)",
          "    .dfa_size_limit(builder.config.get_dfa_size_limit())",
          "    .determinize_size_limit(builder.config.get_determinize_size_limit())",
          "    .run(&nfa, &mut dfa).is_ok());",
          "    assert!(!builder.config.get_minimize());",
          "    assert!(!builder.config.get_accelerate());",
          "    assert!(!builder.config.get_specialize_start_states());",
          "    assert!(dfa.is_ok());"
        ],
        "code": [
          "{",
          "    use regex_automata::{",
          "        dfa::{dense, Automaton},",
          "        nfa::thompson::{self, NFA},",
          "        util::search::MatchKind,",
          "    };",
          "",
          "    let mut builder = dense::Builder::new();",
          "    builder.configure(dense::Config::new()",
          "        .match_kind(MatchKind::LeftmostFirst)",
          "        .accelerate(false)",
          "        .minimize(false)",
          "        .specialize_start_states(false)",
          "        .starts_for_each_pattern(true)",
          "        .byte_classes(true)",
          "        .quit(0x81, true) // Add a quit byte (not in 0x80..=0xFF range)",
          "        .unicode_word_boundary(true));",
          "    ",
          "    let nfa = NFA::compiler()",
          "        .build(r\"[\\w]+\").unwrap();",
          "    ",
          "    let dfa = builder.build_from_nfa(&nfa).unwrap();",
          "    assert!(builder.config.get_unicode_word_boundary());",
          "    assert!(nfa.look_set_any().contains_word_unicode());",
          "    assert!((0x80..=0xFF).contains(&0x81));",
          "    assert!(builder.config.get_byte_classes());",
          "    assert!(!builder.config.quitset.is_empty());",
          "    assert!(DFA::initial(",
          "    classes,",
          "    nfa.pattern_len(),",
          "    builder.config.get_starts(),",
          "    nfa.look_matcher(),",
          "    builder.config.get_starts_for_each_pattern(),",
          "    builder.config.get_prefilter().map(|p| p.clone()),",
          "    quitset,",
          "    Flags::from_nfa(&nfa),",
          "    ).is_ok());",
          "    assert!(determinize::Config::new()",
          "    .match_kind(builder.config.get_match_kind())",
          "    .quit(quitset)",
          "    .dfa_size_limit(builder.config.get_dfa_size_limit())",
          "    .determinize_size_limit(builder.config.get_determinize_size_limit())",
          "    .run(&nfa, &mut dfa).is_ok());",
          "    assert!(!builder.config.get_minimize());",
          "    assert!(!builder.config.get_accelerate());",
          "    assert!(!builder.config.get_specialize_start_states());",
          "    assert!(dfa.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use regex_automata::{",
          "        dfa::{dense, Automaton},",
          "        nfa::thompson::{self, NFA},",
          "        util::search::MatchKind,",
          "    };",
          "",
          "    let mut builder = dense::Builder::new();",
          "    builder.configure(dense::Config::new()",
          "        .match_kind(MatchKind::LeftmostFirst)",
          "        .accelerate(false)",
          "        .minimize(false)",
          "        .specialize_start_states(false)",
          "        .starts_for_each_pattern(true)",
          "        .byte_classes(true)",
          "        .quit(0x81, true) // Adding a byte to the quit set",
          "        .unicode_word_boundary(true));",
          "    ",
          "    let nfa = NFA::compiler()",
          "        .build(r\"[^\\x00-\\x7F]+\").unwrap(); // Ensure NFA can recognize non-ASCII characters",
          "",
          "    let dfa = builder.build_from_nfa(&nfa).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(builder.config.get_unicode_word_boundary());",
          "    assert!(nfa.look_set_any().contains_word_unicode());",
          "    assert!((0x80..=0xFF).contains(&0x81));",
          "    assert!(builder.config.get_byte_classes());",
          "    assert!(!builder.config.quitset.is_empty());",
          "    assert!(matches!(DFA::initial(classes, nfa.pattern_len(), builder.config.get_starts(), nfa.look_matcher(), builder.config.get_starts_for_each_pattern(), builder.config.get_prefilter().map(|p| p.clone()), quitset, Flags::from_nfa(&nfa)), Ok(_)));",
          "    assert!(matches!(determinize::Config::new().match_kind(builder.config.get_match_kind()).quit(quitset).dfa_size_limit(builder.config.get_dfa_size_limit()).determinize_size_limit(builder.config.get_determinize_size_limit()).run(&nfa, &mut dfa), Ok(_)));",
          "    assert!(!builder.config.get_minimize());",
          "    assert!(!builder.config.get_accelerate());",
          "    assert!(!builder.config.get_specialize_start_states());",
          "    assert_eq!(dfa, Ok(dfa));"
        ],
        "code": [
          "{",
          "    use regex_automata::{",
          "        dfa::{dense, Automaton},",
          "        nfa::thompson::{self, NFA},",
          "        util::search::MatchKind,",
          "    };",
          "",
          "    let mut builder = dense::Builder::new();",
          "    builder.configure(dense::Config::new()",
          "        .match_kind(MatchKind::LeftmostFirst)",
          "        .accelerate(false)",
          "        .minimize(false)",
          "        .specialize_start_states(false)",
          "        .starts_for_each_pattern(true)",
          "        .byte_classes(true)",
          "        .quit(0x81, true) // Adding a byte to the quit set",
          "        .unicode_word_boundary(true));",
          "    ",
          "    let nfa = NFA::compiler()",
          "        .build(r\"[^\\x00-\\x7F]+\").unwrap(); // Ensure NFA can recognize non-ASCII characters",
          "",
          "    let dfa = builder.build_from_nfa(&nfa).unwrap();",
          "    assert!(builder.config.get_unicode_word_boundary());",
          "    assert!(nfa.look_set_any().contains_word_unicode());",
          "    assert!((0x80..=0xFF).contains(&0x81));",
          "    assert!(builder.config.get_byte_classes());",
          "    assert!(!builder.config.quitset.is_empty());",
          "    assert!(matches!(DFA::initial(classes, nfa.pattern_len(), builder.config.get_starts(), nfa.look_matcher(), builder.config.get_starts_for_each_pattern(), builder.config.get_prefilter().map(|p| p.clone()), quitset, Flags::from_nfa(&nfa)), Ok(_)));",
          "    assert!(matches!(determinize::Config::new().match_kind(builder.config.get_match_kind()).quit(quitset).dfa_size_limit(builder.config.get_dfa_size_limit()).determinize_size_limit(builder.config.get_determinize_size_limit()).run(&nfa, &mut dfa), Ok(_)));",
          "    assert!(!builder.config.get_minimize());",
          "    assert!(!builder.config.get_accelerate());",
          "    assert!(!builder.config.get_specialize_start_states());",
          "    assert_eq!(dfa, Ok(dfa));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]