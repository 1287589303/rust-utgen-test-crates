[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let _ = builder.start_pattern().unwrap();",
          "    let pattern_id = builder.current_pattern_id();",
          "}"
        ],
        "oracle": [
          "    assert!(builder.pattern_id.is_some());",
          "    assert_eq!(builder.current_pattern_id(), pattern_id);"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let _ = builder.start_pattern().unwrap();",
          "    let pattern_id = builder.current_pattern_id();",
          "    assert!(builder.pattern_id.is_some());",
          "    assert_eq!(builder.current_pattern_id(), pattern_id);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let builder = Builder::new();",
          "    let _ = builder.current_pattern_id();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.current_pattern_id().expect_err(\"expected panic\"), \"must call 'start_pattern' first\");"
        ],
        "code": [
          "{",
          "    let builder = Builder::new();",
          "    let _ = builder.current_pattern_id();",
          "    assert_eq!(builder.current_pattern_id().expect_err(\"expected panic\"), \"must call 'start_pattern' first\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]