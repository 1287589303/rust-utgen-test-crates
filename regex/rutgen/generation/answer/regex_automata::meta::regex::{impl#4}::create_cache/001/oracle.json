[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct StrategyImpl;",
          "    impl Strategy for StrategyImpl {",
          "        fn create_cache(&self) -> Cache {",
          "            Cache {",
          "                capmatches: Captures::new(),",
          "                pikevm: wrappers::PikeVMCache::new(),",
          "                backtrack: wrappers::BoundedBacktrackerCache::new(),",
          "                onepass: wrappers::OnePassCache::new(),",
          "                hybrid: wrappers::HybridCache::new(),",
          "                revhybrid: wrappers::ReverseHybridCache::new(),",
          "            }",
          "        }",
          "    }",
          "    ",
          "    let regex = Regex {",
          "        imp: Arc::new(RegexI {",
          "            strat: Arc::new(StrategyImpl),",
          "            info: RegexInfo::default(),",
          "        }),",
          "        pool: CachePool::new(),",
          "    };",
          "    ",
          "    let _cache = regex.create_cache();",
          "}"
        ],
        "oracle": [
          "    let regex = Regex { imp: Arc::new(RegexI { strat: Arc::new(StrategyImpl), info: RegexInfo::default() }), pool: CachePool::new() };",
          "    let cache = regex.create_cache();",
          "    assert!(cache.capmatches.is_empty());",
          "    assert!(cache.pikevm.is_empty());",
          "    assert!(cache.backtrack.is_empty());",
          "    assert!(cache.onepass.is_empty());",
          "    assert!(cache.hybrid.is_empty());",
          "    assert!(cache.revhybrid.is_empty());"
        ],
        "code": [
          "{",
          "    struct StrategyImpl;",
          "    impl Strategy for StrategyImpl {",
          "        fn create_cache(&self) -> Cache {",
          "            Cache {",
          "                capmatches: Captures::new(),",
          "                pikevm: wrappers::PikeVMCache::new(),",
          "                backtrack: wrappers::BoundedBacktrackerCache::new(),",
          "                onepass: wrappers::OnePassCache::new(),",
          "                hybrid: wrappers::HybridCache::new(),",
          "                revhybrid: wrappers::ReverseHybridCache::new(),",
          "            }",
          "        }",
          "    }",
          "    ",
          "    let regex = Regex {",
          "        imp: Arc::new(RegexI {",
          "            strat: Arc::new(StrategyImpl),",
          "            info: RegexInfo::default(),",
          "        }),",
          "        pool: CachePool::new(),",
          "    };",
          "    ",
          "    let _cache = regex.create_cache();",
          "    let regex = Regex { imp: Arc::new(RegexI { strat: Arc::new(StrategyImpl), info: RegexInfo::default() }), pool: CachePool::new() };",
          "    let cache = regex.create_cache();",
          "    assert!(cache.capmatches.is_empty());",
          "    assert!(cache.pikevm.is_empty());",
          "    assert!(cache.backtrack.is_empty());",
          "    assert!(cache.onepass.is_empty());",
          "    assert!(cache.hybrid.is_empty());",
          "    assert!(cache.revhybrid.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct StrategyImpl;",
          "    impl Strategy for StrategyImpl {",
          "        fn create_cache(&self) -> Cache {",
          "            Cache {",
          "                capmatches: Captures::new(),",
          "                pikevm: wrappers::PikeVMCache::new(),",
          "                backtrack: wrappers::BoundedBacktrackerCache::new(),",
          "                onepass: wrappers::OnePassCache::new(),",
          "                hybrid: wrappers::HybridCache::new(),",
          "                revhybrid: wrappers::ReverseHybridCache::new(),",
          "            }",
          "        }",
          "    }",
          "    ",
          "    let regex = Regex {",
          "        imp: Arc::new(RegexI {",
          "            strat: Arc::new(StrategyImpl),",
          "            info: RegexInfo::default(),",
          "        }),",
          "        pool: CachePool::new(),",
          "    };",
          "    ",
          "    let _cache = regex.create_cache();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::any::type_name::<Cache>(), \"Cache\");",
          "    let cache = regex.create_cache();",
          "    assert!(cache.capmatches.is_empty());",
          "    assert!(cache.pikevm.is_initialized());",
          "    assert!(cache.backtrack.is_initialized());",
          "    assert!(cache.onepass.is_initialized());",
          "    assert!(cache.hybrid.is_initialized());",
          "    assert!(cache.revhybrid.is_initialized());"
        ],
        "code": [
          "{",
          "    struct StrategyImpl;",
          "    impl Strategy for StrategyImpl {",
          "        fn create_cache(&self) -> Cache {",
          "            Cache {",
          "                capmatches: Captures::new(),",
          "                pikevm: wrappers::PikeVMCache::new(),",
          "                backtrack: wrappers::BoundedBacktrackerCache::new(),",
          "                onepass: wrappers::OnePassCache::new(),",
          "                hybrid: wrappers::HybridCache::new(),",
          "                revhybrid: wrappers::ReverseHybridCache::new(),",
          "            }",
          "        }",
          "    }",
          "    ",
          "    let regex = Regex {",
          "        imp: Arc::new(RegexI {",
          "            strat: Arc::new(StrategyImpl),",
          "            info: RegexInfo::default(),",
          "        }),",
          "        pool: CachePool::new(),",
          "    };",
          "    ",
          "    let _cache = regex.create_cache();",
          "    assert_eq!(std::any::type_name::<Cache>(), \"Cache\");",
          "    let cache = regex.create_cache();",
          "    assert!(cache.capmatches.is_empty());",
          "    assert!(cache.pikevm.is_initialized());",
          "    assert!(cache.backtrack.is_initialized());",
          "    assert!(cache.onepass.is_initialized());",
          "    assert!(cache.hybrid.is_initialized());",
          "    assert!(cache.revhybrid.is_initialized());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct StrategyImpl;",
          "    impl Strategy for StrategyImpl {",
          "        fn create_cache(&self) -> Cache {",
          "            Cache {",
          "                capmatches: Captures::new(),",
          "                pikevm: wrappers::PikeVMCache::new(),",
          "                backtrack: wrappers::BoundedBacktrackerCache::new(),",
          "                onepass: wrappers::OnePassCache::new(),",
          "                hybrid: wrappers::HybridCache::new(),",
          "                revhybrid: wrappers::ReverseHybridCache::new(),",
          "            }",
          "        }",
          "    }",
          "    ",
          "    let regex = Regex {",
          "        imp: Arc::new(RegexI {",
          "            strat: Arc::new(StrategyImpl),",
          "            info: RegexInfo::default(),",
          "        }),",
          "        pool: CachePool::new(),",
          "    };",
          "    ",
          "    let _cache = regex.create_cache();",
          "}"
        ],
        "oracle": [
          "    let regex = Regex { imp: Arc::new(RegexI { strat: Arc::new(StrategyImpl), info: RegexInfo::default() }), pool: CachePool::new() };",
          "    let cache = regex.create_cache();",
          "    assert!(cache.capmatches.is_empty());",
          "    assert!(cache.pikevm.is_empty());",
          "    assert!(cache.backtrack.is_empty());",
          "    assert!(cache.onepass.is_empty());",
          "    assert!(cache.hybrid.is_empty());",
          "    assert!(cache.revhybrid.is_empty());"
        ],
        "code": [
          "{",
          "    struct StrategyImpl;",
          "    impl Strategy for StrategyImpl {",
          "        fn create_cache(&self) -> Cache {",
          "            Cache {",
          "                capmatches: Captures::new(),",
          "                pikevm: wrappers::PikeVMCache::new(),",
          "                backtrack: wrappers::BoundedBacktrackerCache::new(),",
          "                onepass: wrappers::OnePassCache::new(),",
          "                hybrid: wrappers::HybridCache::new(),",
          "                revhybrid: wrappers::ReverseHybridCache::new(),",
          "            }",
          "        }",
          "    }",
          "    ",
          "    let regex = Regex {",
          "        imp: Arc::new(RegexI {",
          "            strat: Arc::new(StrategyImpl),",
          "            info: RegexInfo::default(),",
          "        }),",
          "        pool: CachePool::new(),",
          "    };",
          "    ",
          "    let _cache = regex.create_cache();",
          "    let regex = Regex { imp: Arc::new(RegexI { strat: Arc::new(StrategyImpl), info: RegexInfo::default() }), pool: CachePool::new() };",
          "    let cache = regex.create_cache();",
          "    assert!(cache.capmatches.is_empty());",
          "    assert!(cache.pikevm.is_empty());",
          "    assert!(cache.backtrack.is_empty());",
          "    assert!(cache.onepass.is_empty());",
          "    assert!(cache.hybrid.is_empty());",
          "    assert!(cache.revhybrid.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct StrategyImpl;",
          "    impl Strategy for StrategyImpl {",
          "        fn create_cache(&self) -> Cache {",
          "            Cache {",
          "                capmatches: Captures::new(),",
          "                pikevm: wrappers::PikeVMCache::new(),",
          "                backtrack: wrappers::BoundedBacktrackerCache::new(),",
          "                onepass: wrappers::OnePassCache::new(),",
          "                hybrid: wrappers::HybridCache::new(),",
          "                revhybrid: wrappers::ReverseHybridCache::new(),",
          "            }",
          "        }",
          "    }",
          "    ",
          "    let regex = Regex {",
          "        imp: Arc::new(RegexI {",
          "            strat: Arc::new(StrategyImpl),",
          "            info: RegexInfo::default(),",
          "        }),",
          "        pool: CachePool::new(),",
          "    };",
          "    ",
          "    let _cache = regex.create_cache();",
          "}"
        ],
        "oracle": [
          "    assert!(_cache.capmatches.is_empty());",
          "    assert_eq!(_cache.pikevm.memory_usage(), 0);",
          "    assert_eq!(_cache.backtrack.memory_usage(), 0);",
          "    assert_eq!(_cache.onepass.memory_usage(), 0);",
          "    assert_eq!(_cache.hybrid.memory_usage(), 0);",
          "    assert_eq!(_cache.revhybrid.memory_usage(), 0);"
        ],
        "code": [
          "{",
          "    struct StrategyImpl;",
          "    impl Strategy for StrategyImpl {",
          "        fn create_cache(&self) -> Cache {",
          "            Cache {",
          "                capmatches: Captures::new(),",
          "                pikevm: wrappers::PikeVMCache::new(),",
          "                backtrack: wrappers::BoundedBacktrackerCache::new(),",
          "                onepass: wrappers::OnePassCache::new(),",
          "                hybrid: wrappers::HybridCache::new(),",
          "                revhybrid: wrappers::ReverseHybridCache::new(),",
          "            }",
          "        }",
          "    }",
          "    ",
          "    let regex = Regex {",
          "        imp: Arc::new(RegexI {",
          "            strat: Arc::new(StrategyImpl),",
          "            info: RegexInfo::default(),",
          "        }),",
          "        pool: CachePool::new(),",
          "    };",
          "    ",
          "    let _cache = regex.create_cache();",
          "    assert!(_cache.capmatches.is_empty());",
          "    assert_eq!(_cache.pikevm.memory_usage(), 0);",
          "    assert_eq!(_cache.backtrack.memory_usage(), 0);",
          "    assert_eq!(_cache.onepass.memory_usage(), 0);",
          "    assert_eq!(_cache.hybrid.memory_usage(), 0);",
          "    assert_eq!(_cache.revhybrid.memory_usage(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct StrategyImpl;",
          "    impl Strategy for StrategyImpl {",
          "        fn create_cache(&self) -> Cache {",
          "            Cache {",
          "                capmatches: Captures::new(),",
          "                pikevm: wrappers::PikeVMCache::new(),",
          "                backtrack: wrappers::BoundedBacktrackerCache::new(),",
          "                onepass: wrappers::OnePassCache::new(),",
          "                hybrid: wrappers::HybridCache::new(),",
          "                revhybrid: wrappers::ReverseHybridCache::new(),",
          "            }",
          "        }",
          "    }",
          "    ",
          "    let regex = Regex {",
          "        imp: Arc::new(RegexI {",
          "            strat: Arc::new(StrategyImpl),",
          "            info: RegexInfo::default(),",
          "        }),",
          "        pool: CachePool::new(),",
          "    };",
          "    ",
          "    let cache1 = regex.create_cache();",
          "    let cache2 = regex.create_cache();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cache1.capmatches, Captures::new());",
          "    assert_eq!(cache1.pikevm, wrappers::PikeVMCache::new());",
          "    assert_eq!(cache1.backtrack, wrappers::BoundedBacktrackerCache::new());",
          "    assert_eq!(cache1.onepass, wrappers::OnePassCache::new());",
          "    assert_eq!(cache1.hybrid, wrappers::HybridCache::new());",
          "    assert_eq!(cache1.revhybrid, wrappers::ReverseHybridCache::new());",
          "    assert_ne!(cache1 as *const Cache, cache2 as *const Cache);"
        ],
        "code": [
          "{",
          "    struct StrategyImpl;",
          "    impl Strategy for StrategyImpl {",
          "        fn create_cache(&self) -> Cache {",
          "            Cache {",
          "                capmatches: Captures::new(),",
          "                pikevm: wrappers::PikeVMCache::new(),",
          "                backtrack: wrappers::BoundedBacktrackerCache::new(),",
          "                onepass: wrappers::OnePassCache::new(),",
          "                hybrid: wrappers::HybridCache::new(),",
          "                revhybrid: wrappers::ReverseHybridCache::new(),",
          "            }",
          "        }",
          "    }",
          "    ",
          "    let regex = Regex {",
          "        imp: Arc::new(RegexI {",
          "            strat: Arc::new(StrategyImpl),",
          "            info: RegexInfo::default(),",
          "        }),",
          "        pool: CachePool::new(),",
          "    };",
          "    ",
          "    let cache1 = regex.create_cache();",
          "    let cache2 = regex.create_cache();",
          "    assert_eq!(cache1.capmatches, Captures::new());",
          "    assert_eq!(cache1.pikevm, wrappers::PikeVMCache::new());",
          "    assert_eq!(cache1.backtrack, wrappers::BoundedBacktrackerCache::new());",
          "    assert_eq!(cache1.onepass, wrappers::OnePassCache::new());",
          "    assert_eq!(cache1.hybrid, wrappers::HybridCache::new());",
          "    assert_eq!(cache1.revhybrid, wrappers::ReverseHybridCache::new());",
          "    assert_ne!(cache1 as *const Cache, cache2 as *const Cache);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]