[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassUnicodeRange::new('a', 'a');",
          "    let result = range.end();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 'a');",
          "    let range = ClassUnicodeRange::new('a', 'z');",
          "    assert_eq!(result, 'z');",
          "    let range = ClassUnicodeRange::new('1', '9');",
          "    assert_eq!(result, '9');",
          "    let range = ClassUnicodeRange::new('!', '@');",
          "    assert_eq!(result, '@');",
          "    let range = ClassUnicodeRange::new('A', 'Z');",
          "    assert_eq!(result, 'Z');"
        ],
        "code": [
          "{",
          "    let range = ClassUnicodeRange::new('a', 'a');",
          "    let result = range.end();",
          "    assert_eq!(result, 'a');",
          "    let range = ClassUnicodeRange::new('a', 'z');",
          "    assert_eq!(result, 'z');",
          "    let range = ClassUnicodeRange::new('1', '9');",
          "    assert_eq!(result, '9');",
          "    let range = ClassUnicodeRange::new('!', '@');",
          "    assert_eq!(result, '@');",
          "    let range = ClassUnicodeRange::new('A', 'Z');",
          "    assert_eq!(result, 'Z');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassUnicodeRange::new('a', 'z');",
          "    let result = range.end();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 'z');",
          "    assert_eq!(result, range.end());",
          "    assert!(result >= range.start());",
          "    assert!(result.is_ascii());",
          "    assert!(result.is_alphabetic());"
        ],
        "code": [
          "{",
          "    let range = ClassUnicodeRange::new('a', 'z');",
          "    let result = range.end();",
          "    assert_eq!(result, 'z');",
          "    assert_eq!(result, range.end());",
          "    assert!(result >= range.start());",
          "    assert!(result.is_ascii());",
          "    assert!(result.is_alphabetic());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassUnicodeRange::new('\\u{0000}', '\\u{10FFFF}');",
          "    let result = range.end();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, '\\u{10FFFF}');"
        ],
        "code": [
          "{",
          "    let range = ClassUnicodeRange::new('\\u{0000}', '\\u{10FFFF}');",
          "    let result = range.end();",
          "    assert_eq!(result, '\\u{10FFFF}');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassUnicodeRange::new('\\u{10FFFF}', '\\u{10FFFF}');",
          "    let result = range.end();",
          "}"
        ],
        "oracle": [
          "    let expected_end = '\\u{10FFFF}';",
          "    assert_eq!(result, expected_end);"
        ],
        "code": [
          "{",
          "    let range = ClassUnicodeRange::new('\\u{10FFFF}', '\\u{10FFFF}');",
          "    let result = range.end();",
          "    let expected_end = '\\u{10FFFF}';",
          "    assert_eq!(result, expected_end);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassUnicodeRange::new('\\u{1234}', '\\u{1234}');",
          "    let result = range.end();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, '\\u{1234}');"
        ],
        "code": [
          "{",
          "    let range = ClassUnicodeRange::new('\\u{1234}', '\\u{1234}');",
          "    let result = range.end();",
          "    assert_eq!(result, '\\u{1234}');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]