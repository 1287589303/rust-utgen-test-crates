[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestReplacer;",
          "",
          "    impl Replacer for TestReplacer {",
          "        fn replace_append(&mut self, caps: &Captures<'_>, dst: &mut String) {",
          "            dst.push_str(caps.haystack);",
          "        }",
          "    }",
          "",
          "    let mut replacer = TestReplacer;",
          "    let haystack = \"sample text\";",
          "    let caps = Captures {",
          "        haystack,",
          "        caps: captures::Captures::default(),",
          "        static_captures_len: None,",
          "    };",
          "    let mut dst = String::new();",
          "",
          "    let mut replacer_ref = replacer.by_ref();",
          "    replacer_ref.replace_append(&caps, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, \"sample text\");",
          "    assert!(dst.is_empty() == false);",
          "    assert!(caps.haystack == \"sample text\");",
          "    assert!(replacer_ref.0 as *const _ == &mut replacer as *mut _);",
          "    assert!(caps.static_captures_len.is_none());"
        ],
        "code": [
          "{",
          "    struct TestReplacer;",
          "",
          "    impl Replacer for TestReplacer {",
          "        fn replace_append(&mut self, caps: &Captures<'_>, dst: &mut String) {",
          "            dst.push_str(caps.haystack);",
          "        }",
          "    }",
          "",
          "    let mut replacer = TestReplacer;",
          "    let haystack = \"sample text\";",
          "    let caps = Captures {",
          "        haystack,",
          "        caps: captures::Captures::default(),",
          "        static_captures_len: None,",
          "    };",
          "    let mut dst = String::new();",
          "",
          "    let mut replacer_ref = replacer.by_ref();",
          "    replacer_ref.replace_append(&caps, &mut dst);",
          "    assert_eq!(dst, \"sample text\");",
          "    assert!(dst.is_empty() == false);",
          "    assert!(caps.haystack == \"sample text\");",
          "    assert!(replacer_ref.0 as *const _ == &mut replacer as *mut _);",
          "    assert!(caps.static_captures_len.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestReplacer;",
          "",
          "    impl Replacer for TestReplacer {",
          "        fn replace_append(&mut self, caps: &Captures<'_>, dst: &mut String) {",
          "            dst.push_str(caps.haystack);",
          "        }",
          "    }",
          "",
          "    let mut replacer = TestReplacer;",
          "    let haystack = \"empty destination\";",
          "    let caps = Captures {",
          "        haystack,",
          "        caps: captures::Captures::default(),",
          "        static_captures_len: None,",
          "    };",
          "    let mut dst = String::new();",
          "",
          "    let mut replacer_ref = replacer.by_ref();",
          "    replacer_ref.replace_append(&caps, &mut dst);",
          "}"
        ],
        "oracle": [
          "    let mut dst = String::new();",
          "    assert_eq!(dst, \"\");",
          "    let haystack = \"empty destination\";",
          "    let caps = Captures { haystack, caps: captures::Captures::default(), static_captures_len: None };",
          "    let mut replacer_ref = replacer.by_ref();",
          "    replacer_ref.replace_append(&caps, &mut dst);",
          "    assert_eq!(dst, \"empty destination\");",
          "    dst.clear();",
          "    let haystack_2 = \"additional text\";",
          "    let caps_2 = Captures { haystack: haystack_2, caps: captures::Captures::default(), static_captures_len: None };",
          "    replacer_ref.replace_append(&caps_2, &mut dst);",
          "    assert_eq!(dst, \"additional text\");"
        ],
        "code": [
          "{",
          "    struct TestReplacer;",
          "",
          "    impl Replacer for TestReplacer {",
          "        fn replace_append(&mut self, caps: &Captures<'_>, dst: &mut String) {",
          "            dst.push_str(caps.haystack);",
          "        }",
          "    }",
          "",
          "    let mut replacer = TestReplacer;",
          "    let haystack = \"empty destination\";",
          "    let caps = Captures {",
          "        haystack,",
          "        caps: captures::Captures::default(),",
          "        static_captures_len: None,",
          "    };",
          "    let mut dst = String::new();",
          "",
          "    let mut replacer_ref = replacer.by_ref();",
          "    replacer_ref.replace_append(&caps, &mut dst);",
          "    let mut dst = String::new();",
          "    assert_eq!(dst, \"\");",
          "    let haystack = \"empty destination\";",
          "    let caps = Captures { haystack, caps: captures::Captures::default(), static_captures_len: None };",
          "    let mut replacer_ref = replacer.by_ref();",
          "    replacer_ref.replace_append(&caps, &mut dst);",
          "    assert_eq!(dst, \"empty destination\");",
          "    dst.clear();",
          "    let haystack_2 = \"additional text\";",
          "    let caps_2 = Captures { haystack: haystack_2, caps: captures::Captures::default(), static_captures_len: None };",
          "    replacer_ref.replace_append(&caps_2, &mut dst);",
          "    assert_eq!(dst, \"additional text\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestReplacer;",
          "",
          "    impl Replacer for TestReplacer {",
          "        fn replace_append(&mut self, caps: &Captures<'_>, dst: &mut String) {",
          "            dst.push_str(caps.haystack);",
          "        }",
          "    }",
          "",
          "    let mut replacer = TestReplacer;",
          "    let haystack = \"This is a considerably longer test string.\";",
          "    let caps = Captures {",
          "        haystack,",
          "        caps: captures::Captures::default(),",
          "        static_captures_len: None,",
          "    };",
          "    let mut dst = String::new();",
          "",
          "    let mut replacer_ref = replacer.by_ref();",
          "    replacer_ref.replace_append(&caps, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, \"This is a considerably longer test string.\");",
          "    assert!(dst.len() > 0);",
          "    assert!(dst.contains(\"This is a considerably longer test string.\"));",
          "    assert_eq!(caps.haystack.len(), 37);",
          "    assert!(caps.static_captures_len.is_none());",
          "    assert_eq!(dst.trim(), \"This is a considerably longer test string.\");",
          "    assert!(dst.starts_with(\"This\"));",
          "    assert!(dst.ends_with(\".\"));",
          "    assert!(dst.chars().count() == 37);"
        ],
        "code": [
          "{",
          "    struct TestReplacer;",
          "",
          "    impl Replacer for TestReplacer {",
          "        fn replace_append(&mut self, caps: &Captures<'_>, dst: &mut String) {",
          "            dst.push_str(caps.haystack);",
          "        }",
          "    }",
          "",
          "    let mut replacer = TestReplacer;",
          "    let haystack = \"This is a considerably longer test string.\";",
          "    let caps = Captures {",
          "        haystack,",
          "        caps: captures::Captures::default(),",
          "        static_captures_len: None,",
          "    };",
          "    let mut dst = String::new();",
          "",
          "    let mut replacer_ref = replacer.by_ref();",
          "    replacer_ref.replace_append(&caps, &mut dst);",
          "    assert_eq!(dst, \"This is a considerably longer test string.\");",
          "    assert!(dst.len() > 0);",
          "    assert!(dst.contains(\"This is a considerably longer test string.\"));",
          "    assert_eq!(caps.haystack.len(), 37);",
          "    assert!(caps.static_captures_len.is_none());",
          "    assert_eq!(dst.trim(), \"This is a considerably longer test string.\");",
          "    assert!(dst.starts_with(\"This\"));",
          "    assert!(dst.ends_with(\".\"));",
          "    assert!(dst.chars().count() == 37);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]