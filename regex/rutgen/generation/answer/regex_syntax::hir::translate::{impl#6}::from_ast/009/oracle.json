[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ast_flags = ast::Flags {",
          "        items: vec![ast::FlagsItem {",
          "            kind: ast::FlagsItemKind::Negation,",
          "            span: Span::default(),",
          "        }],",
          "    };",
          "    let _flags = Flags::from_ast(&ast_flags);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_flags.case_insensitive, None);",
          "    assert_eq!(_flags.multi_line, None);",
          "    assert_eq!(_flags.dot_matches_new_line, None);",
          "    assert_eq!(_flags.swap_greed, None);",
          "    assert_eq!(_flags.unicode, None);",
          "    assert_eq!(_flags.crlf, None);"
        ],
        "code": [
          "{",
          "    let ast_flags = ast::Flags {",
          "        items: vec![ast::FlagsItem {",
          "            kind: ast::FlagsItemKind::Negation,",
          "            span: Span::default(),",
          "        }],",
          "    };",
          "    let _flags = Flags::from_ast(&ast_flags);",
          "    assert_eq!(_flags.case_insensitive, None);",
          "    assert_eq!(_flags.multi_line, None);",
          "    assert_eq!(_flags.dot_matches_new_line, None);",
          "    assert_eq!(_flags.swap_greed, None);",
          "    assert_eq!(_flags.unicode, None);",
          "    assert_eq!(_flags.crlf, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ast_flags = ast::Flags {",
          "        items: vec![",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Negation,",
          "                span: Span::default(),",
          "            },",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Flag(ast::Flag::IgnoreWhitespace),",
          "                span: Span::default(),",
          "            },",
          "        ],",
          "    };",
          "    let _flags = Flags::from_ast(&ast_flags);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_flags.case_insensitive, None);",
          "    assert_eq!(_flags.multi_line, None);",
          "    assert_eq!(_flags.dot_matches_new_line, None);",
          "    assert_eq!(_flags.swap_greed, None);",
          "    assert_eq!(_flags.unicode, None);",
          "    assert_eq!(_flags.crlf, None);"
        ],
        "code": [
          "{",
          "    let ast_flags = ast::Flags {",
          "        items: vec![",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Negation,",
          "                span: Span::default(),",
          "            },",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Flag(ast::Flag::IgnoreWhitespace),",
          "                span: Span::default(),",
          "            },",
          "        ],",
          "    };",
          "    let _flags = Flags::from_ast(&ast_flags);",
          "    assert_eq!(_flags.case_insensitive, None);",
          "    assert_eq!(_flags.multi_line, None);",
          "    assert_eq!(_flags.dot_matches_new_line, None);",
          "    assert_eq!(_flags.swap_greed, None);",
          "    assert_eq!(_flags.unicode, None);",
          "    assert_eq!(_flags.crlf, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ast_flags = ast::Flags {",
          "        items: vec![",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Negation,",
          "                span: Span::default(),",
          "            },",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Flag(ast::Flag::MultiLine),",
          "                span: Span::default(),",
          "            },",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Flag(ast::Flag::CRLF),",
          "                span: Span::default(),",
          "            },",
          "        ],",
          "    };",
          "    let _flags = Flags::from_ast(&ast_flags);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_flags.case_insensitive, None);",
          "    assert_eq!(_flags.multi_line, Some(false));",
          "    assert_eq!(_flags.dot_matches_new_line, None);",
          "    assert_eq!(_flags.swap_greed, None);",
          "    assert_eq!(_flags.unicode, None);",
          "    assert_eq!(_flags.crlf, Some(false));"
        ],
        "code": [
          "{",
          "    let ast_flags = ast::Flags {",
          "        items: vec![",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Negation,",
          "                span: Span::default(),",
          "            },",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Flag(ast::Flag::MultiLine),",
          "                span: Span::default(),",
          "            },",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Flag(ast::Flag::CRLF),",
          "                span: Span::default(),",
          "            },",
          "        ],",
          "    };",
          "    let _flags = Flags::from_ast(&ast_flags);",
          "    assert_eq!(_flags.case_insensitive, None);",
          "    assert_eq!(_flags.multi_line, Some(false));",
          "    assert_eq!(_flags.dot_matches_new_line, None);",
          "    assert_eq!(_flags.swap_greed, None);",
          "    assert_eq!(_flags.unicode, None);",
          "    assert_eq!(_flags.crlf, Some(false));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ast_flags = ast::Flags {",
          "        items: vec![",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Negation,",
          "                span: Span::default(),",
          "            },",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Negation,",
          "                span: Span::default(),",
          "            },",
          "        ],",
          "    };",
          "    let _flags = Flags::from_ast(&ast_flags);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_flags.case_insensitive, None);",
          "    assert_eq!(_flags.multi_line, None);",
          "    assert_eq!(_flags.dot_matches_new_line, None);",
          "    assert_eq!(_flags.swap_greed, None);",
          "    assert_eq!(_flags.unicode, None);",
          "    assert_eq!(_flags.crlf, None);"
        ],
        "code": [
          "{",
          "    let ast_flags = ast::Flags {",
          "        items: vec![",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Negation,",
          "                span: Span::default(),",
          "            },",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Negation,",
          "                span: Span::default(),",
          "            },",
          "        ],",
          "    };",
          "    let _flags = Flags::from_ast(&ast_flags);",
          "    assert_eq!(_flags.case_insensitive, None);",
          "    assert_eq!(_flags.multi_line, None);",
          "    assert_eq!(_flags.dot_matches_new_line, None);",
          "    assert_eq!(_flags.swap_greed, None);",
          "    assert_eq!(_flags.unicode, None);",
          "    assert_eq!(_flags.crlf, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ast_flags = ast::Flags {",
          "        items: vec![",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Negation,",
          "                span: Span::default(),",
          "            },",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Flag(ast::Flag::IgnoreWhitespace),",
          "                span: Span::default(),",
          "            },",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Flag(ast::Flag::CaseInsensitive),",
          "                span: Span::default(),",
          "            },",
          "        ],",
          "    };",
          "    let _flags = Flags::from_ast(&ast_flags);",
          "}"
        ],
        "oracle": [
          "    let ast_flags = ast::Flags { items: vec![ ast::FlagsItem { kind: ast::FlagsItemKind::Negation, span: Span::default(), }, ] }; let flags = Flags::from_ast(&ast_flags); assert_eq!(flags.case_insensitive, None); let ast_flags = ast::Flags { items: vec![ ast::FlagsItem { kind: ast::FlagsItemKind::Negation, span: Span::default(), }, ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::IgnoreWhitespace), span: Span::default(), }, ] }; let flags = Flags::from_ast(&ast_flags); assert_eq!(flags.multi_line, None); let ast_flags = ast::Flags { items: vec![ ast::FlagsItem { kind: ast::FlagsItemKind::Negation, span: Span::default(), }, ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::CaseInsensitive), span: Span::default(), }, ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::MultiLine), span: Span::default(), }, ] }; let flags = Flags::from_ast(&ast_flags); assert_eq!(flags.dot_matches_new_line, None); let ast_flags = ast::Flags { items: vec![ ast::FlagsItem { kind: ast::FlagsItemKind::Negation, span: Span::default(), }, ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::SwapGreed), span: Span::default(), }, ] }; let flags = Flags::from_ast(&ast_flags); assert_eq!(flags.swap_greed, None); let ast_flags = ast::Flags { items: vec![ ast::FlagsItem { kind: ast::FlagsItemKind::Negation, span: Span::default(), }, ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::Unicode), span: Span::default(), }, ] }; let flags = Flags::from_ast(&ast_flags); assert_eq!(flags.unicode, None); let ast_flags = ast::Flags { items: vec![ ast::FlagsItem { kind: ast::FlagsItemKind::Negation, span: Span::default(), }, ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::CRLF), span: Span::default(), }, ] }; let flags = Flags::from_ast(&ast_flags); assert_eq!(flags.crlf, None);"
        ],
        "code": [
          "{",
          "    let ast_flags = ast::Flags {",
          "        items: vec![",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Negation,",
          "                span: Span::default(),",
          "            },",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Flag(ast::Flag::IgnoreWhitespace),",
          "                span: Span::default(),",
          "            },",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Flag(ast::Flag::CaseInsensitive),",
          "                span: Span::default(),",
          "            },",
          "        ],",
          "    };",
          "    let _flags = Flags::from_ast(&ast_flags);",
          "    let ast_flags = ast::Flags { items: vec![ ast::FlagsItem { kind: ast::FlagsItemKind::Negation, span: Span::default(), }, ] }; let flags = Flags::from_ast(&ast_flags); assert_eq!(flags.case_insensitive, None); let ast_flags = ast::Flags { items: vec![ ast::FlagsItem { kind: ast::FlagsItemKind::Negation, span: Span::default(), }, ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::IgnoreWhitespace), span: Span::default(), }, ] }; let flags = Flags::from_ast(&ast_flags); assert_eq!(flags.multi_line, None); let ast_flags = ast::Flags { items: vec![ ast::FlagsItem { kind: ast::FlagsItemKind::Negation, span: Span::default(), }, ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::CaseInsensitive), span: Span::default(), }, ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::MultiLine), span: Span::default(), }, ] }; let flags = Flags::from_ast(&ast_flags); assert_eq!(flags.dot_matches_new_line, None); let ast_flags = ast::Flags { items: vec![ ast::FlagsItem { kind: ast::FlagsItemKind::Negation, span: Span::default(), }, ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::SwapGreed), span: Span::default(), }, ] }; let flags = Flags::from_ast(&ast_flags); assert_eq!(flags.swap_greed, None); let ast_flags = ast::Flags { items: vec![ ast::FlagsItem { kind: ast::FlagsItemKind::Negation, span: Span::default(), }, ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::Unicode), span: Span::default(), }, ] }; let flags = Flags::from_ast(&ast_flags); assert_eq!(flags.unicode, None); let ast_flags = ast::Flags { items: vec![ ast::FlagsItem { kind: ast::FlagsItemKind::Negation, span: Span::default(), }, ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::CRLF), span: Span::default(), }, ] }; let flags = Flags::from_ast(&ast_flags); assert_eq!(flags.crlf, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]