[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ast = ast::Flags {",
          "        items: vec![",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Flag(ast::Flag::CaseInsensitive),",
          "                span: Span::default(),",
          "            },",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Flag(ast::Flag::MultiLine),",
          "                span: Span::default(),",
          "            },",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Negation,",
          "                span: Span::default(),",
          "            },",
          "        ],",
          "    };",
          "    let flags = Flags::from_ast(&ast);",
          "}"
        ],
        "oracle": [
          "    flags.case_insensitive.unwrap() == true",
          "    flags.multi_line.unwrap() == true",
          "    flags.dot_matches_new_line.is_none()",
          "    flags.swap_greed.is_none()",
          "    flags.unicode.is_none()",
          "    flags.crlf.is_none()"
        ],
        "code": [
          "{",
          "    let ast = ast::Flags {",
          "        items: vec![",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Flag(ast::Flag::CaseInsensitive),",
          "                span: Span::default(),",
          "            },",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Flag(ast::Flag::MultiLine),",
          "                span: Span::default(),",
          "            },",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Negation,",
          "                span: Span::default(),",
          "            },",
          "        ],",
          "    };",
          "    let flags = Flags::from_ast(&ast);",
          "    flags.case_insensitive.unwrap() == true",
          "    flags.multi_line.unwrap() == true",
          "    flags.dot_matches_new_line.is_none()",
          "    flags.swap_greed.is_none()",
          "    flags.unicode.is_none()",
          "    flags.crlf.is_none()",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ast = ast::Flags {",
          "        items: vec![",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Flag(ast::Flag::DotMatchesNewLine),",
          "                span: Span::default(),",
          "            },",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Flag(ast::Flag::SwapGreed),",
          "                span: Span::default(),",
          "            },",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Negation,",
          "                span: Span::default(),",
          "            },",
          "        ],",
          "    };",
          "    let flags = Flags::from_ast(&ast);",
          "}"
        ],
        "oracle": [
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::CaseInsensitive), span: Span::default() }] }; let flags = Flags::from_ast(&ast); assert_eq!(flags.case_insensitive, Some(true));",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::MultiLine), span: Span::default() }] }; let flags = Flags::from_ast(&ast); assert_eq!(flags.multi_line, Some(true));",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::DotMatchesNewLine), span: Span::default() }] }; let flags = Flags::from_ast(&ast); assert_eq!(flags.dot_matches_new_line, Some(true));",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::SwapGreed), span: Span::default() }] }; let flags = Flags::from_ast(&ast); assert_eq!(flags.swap_greed, Some(true));",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::Unicode), span: Span::default() }] }; let flags = Flags::from_ast(&ast); assert_eq!(flags.unicode, Some(true));",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::CRLF), span: Span::default() }] }; let flags = Flags::from_ast(&ast); assert_eq!(flags.crlf, Some(true));",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::IgnoreWhitespace), span: Span::default() }] }; let flags = Flags::from_ast(&ast); assert_eq!(flags.case_insensitive, None);",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Negation, span: Span::default() }] }; let flags = Flags::from_ast(&ast); assert_eq!(flags.swap_greed, None);",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Negation, span: Span::default() }, ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::DotMatchesNewLine), span: Span::default() }] }; let flags = Flags::from_ast(&ast); assert_eq!(flags.dot_matches_new_line, None);"
        ],
        "code": [
          "{",
          "    let ast = ast::Flags {",
          "        items: vec![",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Flag(ast::Flag::DotMatchesNewLine),",
          "                span: Span::default(),",
          "            },",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Flag(ast::Flag::SwapGreed),",
          "                span: Span::default(),",
          "            },",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Negation,",
          "                span: Span::default(),",
          "            },",
          "        ],",
          "    };",
          "    let flags = Flags::from_ast(&ast);",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::CaseInsensitive), span: Span::default() }] }; let flags = Flags::from_ast(&ast); assert_eq!(flags.case_insensitive, Some(true));",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::MultiLine), span: Span::default() }] }; let flags = Flags::from_ast(&ast); assert_eq!(flags.multi_line, Some(true));",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::DotMatchesNewLine), span: Span::default() }] }; let flags = Flags::from_ast(&ast); assert_eq!(flags.dot_matches_new_line, Some(true));",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::SwapGreed), span: Span::default() }] }; let flags = Flags::from_ast(&ast); assert_eq!(flags.swap_greed, Some(true));",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::Unicode), span: Span::default() }] }; let flags = Flags::from_ast(&ast); assert_eq!(flags.unicode, Some(true));",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::CRLF), span: Span::default() }] }; let flags = Flags::from_ast(&ast); assert_eq!(flags.crlf, Some(true));",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::IgnoreWhitespace), span: Span::default() }] }; let flags = Flags::from_ast(&ast); assert_eq!(flags.case_insensitive, None);",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Negation, span: Span::default() }] }; let flags = Flags::from_ast(&ast); assert_eq!(flags.swap_greed, None);",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Negation, span: Span::default() }, ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::DotMatchesNewLine), span: Span::default() }] }; let flags = Flags::from_ast(&ast); assert_eq!(flags.dot_matches_new_line, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ast = ast::Flags {",
          "        items: vec![",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Flag(ast::Flag::Unicode),",
          "                span: Span::default(),",
          "            },",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Negation,",
          "                span: Span::default(),",
          "            },",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Flag(ast::Flag::CRLF),",
          "                span: Span::default(),",
          "            },",
          "        ],",
          "    };",
          "    let flags = Flags::from_ast(&ast);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(flags.case_insensitive, None);",
          "    assert_eq!(flags.multi_line, None);",
          "    assert_eq!(flags.dot_matches_new_line, None);",
          "    assert_eq!(flags.swap_greed, None);",
          "    assert_eq!(flags.unicode, Some(true));",
          "    assert_eq!(flags.crlf, None);",
          "    assert_eq!(flags.crlf, None);"
        ],
        "code": [
          "{",
          "    let ast = ast::Flags {",
          "        items: vec![",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Flag(ast::Flag::Unicode),",
          "                span: Span::default(),",
          "            },",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Negation,",
          "                span: Span::default(),",
          "            },",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Flag(ast::Flag::CRLF),",
          "                span: Span::default(),",
          "            },",
          "        ],",
          "    };",
          "    let flags = Flags::from_ast(&ast);",
          "    assert_eq!(flags.case_insensitive, None);",
          "    assert_eq!(flags.multi_line, None);",
          "    assert_eq!(flags.dot_matches_new_line, None);",
          "    assert_eq!(flags.swap_greed, None);",
          "    assert_eq!(flags.unicode, Some(true));",
          "    assert_eq!(flags.crlf, None);",
          "    assert_eq!(flags.crlf, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ast = ast::Flags {",
          "        items: vec![",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Flag(ast::Flag::SwapGreed),",
          "                span: Span::default(),",
          "            },",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Negation,",
          "                span: Span::default(),",
          "            },",
          "        ],",
          "    };",
          "    let flags = Flags::from_ast(&ast);",
          "}"
        ],
        "oracle": [
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::CaseInsensitive), span: Span::default() }] };",
          "    let flags = Flags::from_ast(&ast);",
          "    assert_eq!(flags.case_insensitive, Some(true));",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::MultiLine), span: Span::default() }] };",
          "    let flags = Flags::from_ast(&ast);",
          "    assert_eq!(flags.multi_line, Some(true));",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::DotMatchesNewLine), span: Span::default() }] };",
          "    let flags = Flags::from_ast(&ast);",
          "    assert_eq!(flags.dot_matches_new_line, Some(true));",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::SwapGreed), span: Span::default() }] };",
          "    let flags = Flags::from_ast(&ast);",
          "    assert_eq!(flags.swap_greed, Some(true));",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::Unicode), span: Span::default() }] };",
          "    let flags = Flags::from_ast(&ast);",
          "    assert_eq!(flags.unicode, Some(true));",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::CRLF), span: Span::default() }] };",
          "    let flags = Flags::from_ast(&ast);",
          "    assert_eq!(flags.crlf, Some(true));",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Negation, span: Span::default() }, ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::SwapGreed), span: Span::default() }] };",
          "    let flags = Flags::from_ast(&ast);",
          "    assert_eq!(flags.swap_greed, Some(false));"
        ],
        "code": [
          "{",
          "    let ast = ast::Flags {",
          "        items: vec![",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Flag(ast::Flag::SwapGreed),",
          "                span: Span::default(),",
          "            },",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Negation,",
          "                span: Span::default(),",
          "            },",
          "        ],",
          "    };",
          "    let flags = Flags::from_ast(&ast);",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::CaseInsensitive), span: Span::default() }] };",
          "    let flags = Flags::from_ast(&ast);",
          "    assert_eq!(flags.case_insensitive, Some(true));",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::MultiLine), span: Span::default() }] };",
          "    let flags = Flags::from_ast(&ast);",
          "    assert_eq!(flags.multi_line, Some(true));",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::DotMatchesNewLine), span: Span::default() }] };",
          "    let flags = Flags::from_ast(&ast);",
          "    assert_eq!(flags.dot_matches_new_line, Some(true));",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::SwapGreed), span: Span::default() }] };",
          "    let flags = Flags::from_ast(&ast);",
          "    assert_eq!(flags.swap_greed, Some(true));",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::Unicode), span: Span::default() }] };",
          "    let flags = Flags::from_ast(&ast);",
          "    assert_eq!(flags.unicode, Some(true));",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::CRLF), span: Span::default() }] };",
          "    let flags = Flags::from_ast(&ast);",
          "    assert_eq!(flags.crlf, Some(true));",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Negation, span: Span::default() }, ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::SwapGreed), span: Span::default() }] };",
          "    let flags = Flags::from_ast(&ast);",
          "    assert_eq!(flags.swap_greed, Some(false));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ast = ast::Flags {",
          "        items: vec![",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Flag(ast::Flag::MultiLine),",
          "                span: Span::default(),",
          "            },",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Negation,",
          "                span: Span::default(),",
          "            },",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Flag(ast::Flag::CaseInsensitive),",
          "                span: Span::default(),",
          "            },",
          "        ],",
          "    };",
          "    let flags = Flags::from_ast(&ast);",
          "}"
        ],
        "oracle": [
          "    let ast = ast::Flags {",
          "    items: vec![",
          "    ast::FlagsItem {",
          "    kind: ast::FlagsItemKind::Flag(ast::Flag::DotMatchesNewLine),",
          "    span: Span::default(),",
          "    },",
          "    ],",
          "    };",
          "    let flags = Flags::from_ast(&ast);",
          "    assert_eq!(flags.case_insensitive, None);",
          "    assert_eq!(flags.multi_line, None);",
          "    assert_eq!(flags.dot_matches_new_line, Some(true));",
          "    assert_eq!(flags.swap_greed, None);",
          "    assert_eq!(flags.unicode, None);",
          "    assert_eq!(flags.crlf, None);",
          "    ",
          "    let ast = ast::Flags {",
          "    items: vec![",
          "    ast::FlagsItem {",
          "    kind: ast::FlagsItemKind::Flag(ast::Flag::SwapGreed),",
          "    span: Span::default(),",
          "    },",
          "    ast::FlagsItem {",
          "    kind: ast::FlagsItemKind::Negation,",
          "    span: Span::default(),",
          "    },",
          "    ],",
          "    };",
          "    let flags = Flags::from_ast(&ast);",
          "    assert_eq!(flags.swap_greed, Some(true));",
          "    assert_eq!(flags.case_insensitive, None);",
          "    assert_eq!(flags.multi_line, None);",
          "    assert_eq!(flags.dot_matches_new_line, None);",
          "    assert_eq!(flags.unicode, None);",
          "    assert_eq!(flags.crlf, None);",
          "    ",
          "    let ast = ast::Flags {",
          "    items: vec![",
          "    ast::FlagsItem {",
          "    kind: ast::FlagsItemKind::Flag(ast::Flag::CRLF),",
          "    span: Span::default(),",
          "    },",
          "    ],",
          "    };",
          "    let flags = Flags::from_ast(&ast);",
          "    assert_eq!(flags.crlf, Some(true));",
          "    assert_eq!(flags.case_insensitive, None);",
          "    assert_eq!(flags.multi_line, None);",
          "    assert_eq!(flags.dot_matches_new_line, None);",
          "    assert_eq!(flags.swap_greed, None);",
          "    assert_eq!(flags.unicode, None);"
        ],
        "code": [
          "{",
          "    let ast = ast::Flags {",
          "        items: vec![",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Flag(ast::Flag::MultiLine),",
          "                span: Span::default(),",
          "            },",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Negation,",
          "                span: Span::default(),",
          "            },",
          "            ast::FlagsItem {",
          "                kind: ast::FlagsItemKind::Flag(ast::Flag::CaseInsensitive),",
          "                span: Span::default(),",
          "            },",
          "        ],",
          "    };",
          "    let flags = Flags::from_ast(&ast);",
          "    let ast = ast::Flags {",
          "    items: vec![",
          "    ast::FlagsItem {",
          "    kind: ast::FlagsItemKind::Flag(ast::Flag::DotMatchesNewLine),",
          "    span: Span::default(),",
          "    },",
          "    ],",
          "    };",
          "    let flags = Flags::from_ast(&ast);",
          "    assert_eq!(flags.case_insensitive, None);",
          "    assert_eq!(flags.multi_line, None);",
          "    assert_eq!(flags.dot_matches_new_line, Some(true));",
          "    assert_eq!(flags.swap_greed, None);",
          "    assert_eq!(flags.unicode, None);",
          "    assert_eq!(flags.crlf, None);",
          "    ",
          "    let ast = ast::Flags {",
          "    items: vec![",
          "    ast::FlagsItem {",
          "    kind: ast::FlagsItemKind::Flag(ast::Flag::SwapGreed),",
          "    span: Span::default(),",
          "    },",
          "    ast::FlagsItem {",
          "    kind: ast::FlagsItemKind::Negation,",
          "    span: Span::default(),",
          "    },",
          "    ],",
          "    };",
          "    let flags = Flags::from_ast(&ast);",
          "    assert_eq!(flags.swap_greed, Some(true));",
          "    assert_eq!(flags.case_insensitive, None);",
          "    assert_eq!(flags.multi_line, None);",
          "    assert_eq!(flags.dot_matches_new_line, None);",
          "    assert_eq!(flags.unicode, None);",
          "    assert_eq!(flags.crlf, None);",
          "    ",
          "    let ast = ast::Flags {",
          "    items: vec![",
          "    ast::FlagsItem {",
          "    kind: ast::FlagsItemKind::Flag(ast::Flag::CRLF),",
          "    span: Span::default(),",
          "    },",
          "    ],",
          "    };",
          "    let flags = Flags::from_ast(&ast);",
          "    assert_eq!(flags.crlf, Some(true));",
          "    assert_eq!(flags.case_insensitive, None);",
          "    assert_eq!(flags.multi_line, None);",
          "    assert_eq!(flags.dot_matches_new_line, None);",
          "    assert_eq!(flags.swap_greed, None);",
          "    assert_eq!(flags.unicode, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]