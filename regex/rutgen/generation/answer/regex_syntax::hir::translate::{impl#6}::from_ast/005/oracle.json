[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ast = ast::Flags {",
          "        items: vec![",
          "            ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::CaseInsensitive), ..Default::default() },",
          "            ast::FlagsItem { kind: ast::FlagsItemKind::Negation, ..Default::default() },",
          "        ],",
          "    };",
          "    let result = Flags::from_ast(&ast);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.case_insensitive, Some(true));",
          "    assert_eq!(result.multi_line, None);",
          "    assert_eq!(result.dot_matches_new_line, None);",
          "    assert_eq!(result.swap_greed, None);",
          "    assert_eq!(result.unicode, None);",
          "    assert_eq!(result.crlf, None);"
        ],
        "code": [
          "{",
          "    let ast = ast::Flags {",
          "        items: vec![",
          "            ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::CaseInsensitive), ..Default::default() },",
          "            ast::FlagsItem { kind: ast::FlagsItemKind::Negation, ..Default::default() },",
          "        ],",
          "    };",
          "    let result = Flags::from_ast(&ast);",
          "    assert_eq!(result.case_insensitive, Some(true));",
          "    assert_eq!(result.multi_line, None);",
          "    assert_eq!(result.dot_matches_new_line, None);",
          "    assert_eq!(result.swap_greed, None);",
          "    assert_eq!(result.unicode, None);",
          "    assert_eq!(result.crlf, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ast = ast::Flags {",
          "        items: vec![",
          "            ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::MultiLine), ..Default::default() },",
          "            ast::FlagsItem { kind: ast::FlagsItemKind::Negation, ..Default::default() },",
          "        ],",
          "    };",
          "    let result = Flags::from_ast(&ast);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.case_insensitive, None);",
          "    assert_eq!(result.multi_line, Some(false));",
          "    assert_eq!(result.dot_matches_new_line, None);",
          "    assert_eq!(result.swap_greed, None);",
          "    assert_eq!(result.unicode, None);",
          "    assert_eq!(result.crlf, None);"
        ],
        "code": [
          "{",
          "    let ast = ast::Flags {",
          "        items: vec![",
          "            ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::MultiLine), ..Default::default() },",
          "            ast::FlagsItem { kind: ast::FlagsItemKind::Negation, ..Default::default() },",
          "        ],",
          "    };",
          "    let result = Flags::from_ast(&ast);",
          "    assert_eq!(result.case_insensitive, None);",
          "    assert_eq!(result.multi_line, Some(false));",
          "    assert_eq!(result.dot_matches_new_line, None);",
          "    assert_eq!(result.swap_greed, None);",
          "    assert_eq!(result.unicode, None);",
          "    assert_eq!(result.crlf, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ast = ast::Flags {",
          "        items: vec![",
          "            ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::DotMatchesNewLine), ..Default::default() },",
          "            ast::FlagsItem { kind: ast::FlagsItemKind::Negation, ..Default::default() },",
          "        ],",
          "    };",
          "    let result = Flags::from_ast(&ast);",
          "}"
        ],
        "oracle": [
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::DotMatchesNewLine), ..Default::default() }] };",
          "    let result = Flags::from_ast(&ast);",
          "    assert_eq!(result.dot_matches_new_line(), Some(true));",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Negation, ..Default::default() }] };",
          "    let result = Flags::from_ast(&ast);",
          "    assert_eq!(result.dot_matches_new_line(), None);",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::CaseInsensitive), ..Default::default() }] };",
          "    let result = Flags::from_ast(&ast);",
          "    assert_eq!(result.case_insensitive(), Some(true));",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::MultiLine), ..Default::default() }] };",
          "    let result = Flags::from_ast(&ast);",
          "    assert_eq!(result.multi_line(), Some(true));",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::SwapGreed), ..Default::default() }] };",
          "    let result = Flags::from_ast(&ast);",
          "    assert_eq!(result.swap_greed(), Some(true));",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::Unicode), ..Default::default() }] };",
          "    let result = Flags::from_ast(&ast);",
          "    assert_eq!(result.unicode(), Some(true));",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::CRLF), ..Default::default() }] };",
          "    let result = Flags::from_ast(&ast);",
          "    assert_eq!(result.crlf(), Some(true));"
        ],
        "code": [
          "{",
          "    let ast = ast::Flags {",
          "        items: vec![",
          "            ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::DotMatchesNewLine), ..Default::default() },",
          "            ast::FlagsItem { kind: ast::FlagsItemKind::Negation, ..Default::default() },",
          "        ],",
          "    };",
          "    let result = Flags::from_ast(&ast);",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::DotMatchesNewLine), ..Default::default() }] };",
          "    let result = Flags::from_ast(&ast);",
          "    assert_eq!(result.dot_matches_new_line(), Some(true));",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Negation, ..Default::default() }] };",
          "    let result = Flags::from_ast(&ast);",
          "    assert_eq!(result.dot_matches_new_line(), None);",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::CaseInsensitive), ..Default::default() }] };",
          "    let result = Flags::from_ast(&ast);",
          "    assert_eq!(result.case_insensitive(), Some(true));",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::MultiLine), ..Default::default() }] };",
          "    let result = Flags::from_ast(&ast);",
          "    assert_eq!(result.multi_line(), Some(true));",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::SwapGreed), ..Default::default() }] };",
          "    let result = Flags::from_ast(&ast);",
          "    assert_eq!(result.swap_greed(), Some(true));",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::Unicode), ..Default::default() }] };",
          "    let result = Flags::from_ast(&ast);",
          "    assert_eq!(result.unicode(), Some(true));",
          "    let ast = ast::Flags { items: vec![ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::CRLF), ..Default::default() }] };",
          "    let result = Flags::from_ast(&ast);",
          "    assert_eq!(result.crlf(), Some(true));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ast = ast::Flags {",
          "        items: vec![",
          "            ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::SwapGreed), ..Default::default() },",
          "            ast::FlagsItem { kind: ast::FlagsItemKind::Negation, ..Default::default() },",
          "        ],",
          "    };",
          "    let result = Flags::from_ast(&ast);",
          "}"
        ],
        "oracle": [
          "    let expected_flags = Flags { case_insensitive: None, multi_line: None, dot_matches_new_line: None, swap_greed: Some(false), unicode: None, crlf: None };",
          "    assert_eq!(result, expected_flags);"
        ],
        "code": [
          "{",
          "    let ast = ast::Flags {",
          "        items: vec![",
          "            ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::SwapGreed), ..Default::default() },",
          "            ast::FlagsItem { kind: ast::FlagsItemKind::Negation, ..Default::default() },",
          "        ],",
          "    };",
          "    let result = Flags::from_ast(&ast);",
          "    let expected_flags = Flags { case_insensitive: None, multi_line: None, dot_matches_new_line: None, swap_greed: Some(false), unicode: None, crlf: None };",
          "    assert_eq!(result, expected_flags);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ast = ast::Flags {",
          "        items: vec![",
          "            ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::Unicode), ..Default::default() },",
          "            ast::FlagsItem { kind: ast::FlagsItemKind::Negation, ..Default::default() },",
          "        ],",
          "    };",
          "    let result = Flags::from_ast(&ast);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.case_insensitive, None);",
          "    assert_eq!(result.multi_line, None);",
          "    assert_eq!(result.dot_matches_new_line, None);",
          "    assert_eq!(result.swap_greed, None);",
          "    assert_eq!(result.unicode, Some(true));",
          "    assert_eq!(result.crlf, None);",
          "    assert_eq!(result.span, Span::default());",
          "    assert_eq!(result.items.len(), 2);"
        ],
        "code": [
          "{",
          "    let ast = ast::Flags {",
          "        items: vec![",
          "            ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::Unicode), ..Default::default() },",
          "            ast::FlagsItem { kind: ast::FlagsItemKind::Negation, ..Default::default() },",
          "        ],",
          "    };",
          "    let result = Flags::from_ast(&ast);",
          "    assert_eq!(result.case_insensitive, None);",
          "    assert_eq!(result.multi_line, None);",
          "    assert_eq!(result.dot_matches_new_line, None);",
          "    assert_eq!(result.swap_greed, None);",
          "    assert_eq!(result.unicode, Some(true));",
          "    assert_eq!(result.crlf, None);",
          "    assert_eq!(result.span, Span::default());",
          "    assert_eq!(result.items.len(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ast = ast::Flags {",
          "        items: vec![",
          "            ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::CRLF), ..Default::default() },",
          "            ast::FlagsItem { kind: ast::FlagsItemKind::Negation, ..Default::default() },",
          "        ],",
          "    };",
          "    let result = Flags::from_ast(&ast);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.case_insensitive, None);",
          "    assert_eq!(result.multi_line, None);",
          "    assert_eq!(result.dot_matches_new_line, None);",
          "    assert_eq!(result.swap_greed, None);",
          "    assert_eq!(result.unicode, None);",
          "    assert_eq!(result.crlf, Some(true));"
        ],
        "code": [
          "{",
          "    let ast = ast::Flags {",
          "        items: vec![",
          "            ast::FlagsItem { kind: ast::FlagsItemKind::Flag(ast::Flag::CRLF), ..Default::default() },",
          "            ast::FlagsItem { kind: ast::FlagsItemKind::Negation, ..Default::default() },",
          "        ],",
          "    };",
          "    let result = Flags::from_ast(&ast);",
          "    assert_eq!(result.case_insensitive, None);",
          "    assert_eq!(result.multi_line, None);",
          "    assert_eq!(result.dot_matches_new_line, None);",
          "    assert_eq!(result.swap_greed, None);",
          "    assert_eq!(result.unicode, None);",
          "    assert_eq!(result.crlf, Some(true));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]