[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA(Arc::new(Inner {",
          "        utf8: true,",
          "        ..Default::default()",
          "    }));",
          "    let _ = nfa.is_utf8();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(nfa.is_utf8(), true);",
          "    let nfa = NFA(Arc::new(Inner { utf8: false, ..Default::default() }));",
          "    assert_eq!(nfa.is_utf8(), false);"
        ],
        "code": [
          "{",
          "    let nfa = NFA(Arc::new(Inner {",
          "        utf8: true,",
          "        ..Default::default()",
          "    }));",
          "    let _ = nfa.is_utf8();",
          "    assert_eq!(nfa.is_utf8(), true);",
          "    let nfa = NFA(Arc::new(Inner { utf8: false, ..Default::default() }));",
          "    assert_eq!(nfa.is_utf8(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA(Arc::new(Inner {",
          "        utf8: false,",
          "        ..Default::default()",
          "    }));",
          "    let _ = nfa.is_utf8();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(nfa.is_utf8(), false);"
        ],
        "code": [
          "{",
          "    let nfa = NFA(Arc::new(Inner {",
          "        utf8: false,",
          "        ..Default::default()",
          "    }));",
          "    let _ = nfa.is_utf8();",
          "    assert_eq!(nfa.is_utf8(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]