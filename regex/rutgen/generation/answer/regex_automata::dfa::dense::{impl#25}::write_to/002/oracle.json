[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags {",
          "        has_empty: false,",
          "        is_utf8: false,",
          "        is_always_start_anchored: false,",
          "    };",
          "    let mut dst = [0u8; 4];",
          "    let result = flags.write_to::<Endian>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    let flags = Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false };",
          "    let mut dst = [0u8; 4];",
          "    let result = flags.write_to::<Endian>(&mut dst);",
          "    assert_eq!(result, Ok(4));",
          "    assert_eq!(dst, [0, 0, 0, 0]);"
        ],
        "code": [
          "{",
          "    let flags = Flags {",
          "        has_empty: false,",
          "        is_utf8: false,",
          "        is_always_start_anchored: false,",
          "    };",
          "    let mut dst = [0u8; 4];",
          "    let result = flags.write_to::<Endian>(&mut dst);",
          "    let flags = Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false };",
          "    let mut dst = [0u8; 4];",
          "    let result = flags.write_to::<Endian>(&mut dst);",
          "    assert_eq!(result, Ok(4));",
          "    assert_eq!(dst, [0, 0, 0, 0]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags {",
          "        has_empty: true,",
          "        is_utf8: false,",
          "        is_always_start_anchored: false,",
          "    };",
          "    let mut dst = [0u8; 4];",
          "    let result = flags.write_to::<Endian>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst.len(), flags.write_to_len());",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), flags.write_to_len());",
          "    assert_eq!(dst[0], if flags.has_empty { 1 } else { 0 });",
          "    assert_eq!(dst[1], if flags.is_utf8 { 1 } else { 0 });",
          "    assert_eq!(dst[2], if flags.is_always_start_anchored { 1 } else { 0 });",
          "    assert_eq!(dst[3], 0);"
        ],
        "code": [
          "{",
          "    let flags = Flags {",
          "        has_empty: true,",
          "        is_utf8: false,",
          "        is_always_start_anchored: false,",
          "    };",
          "    let mut dst = [0u8; 4];",
          "    let result = flags.write_to::<Endian>(&mut dst);",
          "    assert_eq!(dst.len(), flags.write_to_len());",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), flags.write_to_len());",
          "    assert_eq!(dst[0], if flags.has_empty { 1 } else { 0 });",
          "    assert_eq!(dst[1], if flags.is_utf8 { 1 } else { 0 });",
          "    assert_eq!(dst[2], if flags.is_always_start_anchored { 1 } else { 0 });",
          "    assert_eq!(dst[3], 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags {",
          "        has_empty: false,",
          "        is_utf8: true,",
          "        is_always_start_anchored: false,",
          "    };",
          "    let mut dst = [0u8; 4];",
          "    let result = flags.write_to::<Endian>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(4));"
        ],
        "code": [
          "{",
          "    let flags = Flags {",
          "        has_empty: false,",
          "        is_utf8: true,",
          "        is_always_start_anchored: false,",
          "    };",
          "    let mut dst = [0u8; 4];",
          "    let result = flags.write_to::<Endian>(&mut dst);",
          "    assert_eq!(result, Ok(4));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags {",
          "        has_empty: false,",
          "        is_utf8: false,",
          "        is_always_start_anchored: true,",
          "    };",
          "    let mut dst = [0u8; 4];",
          "    let result = flags.write_to::<Endian>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(4));",
          "    assert_eq!(dst, [0b00000100, 0, 0, 0]);"
        ],
        "code": [
          "{",
          "    let flags = Flags {",
          "        has_empty: false,",
          "        is_utf8: false,",
          "        is_always_start_anchored: true,",
          "    };",
          "    let mut dst = [0u8; 4];",
          "    let result = flags.write_to::<Endian>(&mut dst);",
          "    assert_eq!(result, Ok(4));",
          "    assert_eq!(dst, [0b00000100, 0, 0, 0]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags {",
          "        has_empty: true,",
          "        is_utf8: true,",
          "        is_always_start_anchored: true,",
          "    };",
          "    let mut dst = [0u8; 4];",
          "    let result = flags.write_to::<Endian>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(4));",
          "    assert_eq!(dst, [7, 0, 0, 0]);"
        ],
        "code": [
          "{",
          "    let flags = Flags {",
          "        has_empty: true,",
          "        is_utf8: true,",
          "        is_always_start_anchored: true,",
          "    };",
          "    let mut dst = [0u8; 4];",
          "    let result = flags.write_to::<Endian>(&mut dst);",
          "    assert_eq!(result, Ok(4));",
          "    assert_eq!(dst, [7, 0, 0, 0]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]