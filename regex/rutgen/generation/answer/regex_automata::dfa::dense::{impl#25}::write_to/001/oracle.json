[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags {",
          "        has_empty: true,",
          "        is_utf8: true,",
          "        is_always_start_anchored: true,",
          "    };",
          "    let mut dst = [0u8; 3]; // Length less than 4",
          "    let _ = flags.write_to::<u32>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    flags.write_to::<u32>(&mut dst) // call function with dst smaller than required",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"flag bitset\"))); // check return value"
        ],
        "code": [
          "{",
          "    let flags = Flags {",
          "        has_empty: true,",
          "        is_utf8: true,",
          "        is_always_start_anchored: true,",
          "    };",
          "    let mut dst = [0u8; 3]; // Length less than 4",
          "    let _ = flags.write_to::<u32>(&mut dst);",
          "    flags.write_to::<u32>(&mut dst) // call function with dst smaller than required",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"flag bitset\"))); // check return value",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags {",
          "        has_empty: true,",
          "        is_utf8: true,",
          "        is_always_start_anchored: false,",
          "    };",
          "    let mut dst = [0u8; 2]; // Length less than 4",
          "    let _ = flags.write_to::<u32>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(flags.write_to::<u32>(&mut dst), Err(SerializeError::buffer_too_small(\"flag bitset\")));"
        ],
        "code": [
          "{",
          "    let flags = Flags {",
          "        has_empty: true,",
          "        is_utf8: true,",
          "        is_always_start_anchored: false,",
          "    };",
          "    let mut dst = [0u8; 2]; // Length less than 4",
          "    let _ = flags.write_to::<u32>(&mut dst);",
          "    assert_eq!(flags.write_to::<u32>(&mut dst), Err(SerializeError::buffer_too_small(\"flag bitset\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags {",
          "        has_empty: true,",
          "        is_utf8: false,",
          "        is_always_start_anchored: true,",
          "    };",
          "    let mut dst = [0u8; 1]; // Length less than 4",
          "    let _ = flags.write_to::<u32>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    plaintext",
          "    let flags = Flags { has_empty: true, is_utf8: false, is_always_start_anchored: true };",
          "    let mut dst = [0u8; 1];",
          "    let result = flags.write_to::<u32>(&mut dst);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"flag bitset\")));"
        ],
        "code": [
          "{",
          "    let flags = Flags {",
          "        has_empty: true,",
          "        is_utf8: false,",
          "        is_always_start_anchored: true,",
          "    };",
          "    let mut dst = [0u8; 1]; // Length less than 4",
          "    let _ = flags.write_to::<u32>(&mut dst);",
          "    plaintext",
          "    let flags = Flags { has_empty: true, is_utf8: false, is_always_start_anchored: true };",
          "    let mut dst = [0u8; 1];",
          "    let result = flags.write_to::<u32>(&mut dst);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"flag bitset\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags {",
          "        has_empty: false,",
          "        is_utf8: true,",
          "        is_always_start_anchored: true,",
          "    };",
          "    let mut dst = [0u8; 0]; // Length less than 4",
          "    let _ = flags.write_to::<u32>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(flags.write_to::<u32>(&mut dst), Err(SerializeError::buffer_too_small(\"flag bitset\")));"
        ],
        "code": [
          "{",
          "    let flags = Flags {",
          "        has_empty: false,",
          "        is_utf8: true,",
          "        is_always_start_anchored: true,",
          "    };",
          "    let mut dst = [0u8; 0]; // Length less than 4",
          "    let _ = flags.write_to::<u32>(&mut dst);",
          "    assert_eq!(flags.write_to::<u32>(&mut dst), Err(SerializeError::buffer_too_small(\"flag bitset\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags {",
          "        has_empty: false,",
          "        is_utf8: false,",
          "        is_always_start_anchored: false,",
          "    };",
          "    let mut dst = [0u8; 3]; // Length less than 4",
          "    let _ = flags.write_to::<u32>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    let flags = Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false };",
          "    let mut dst = [0u8; 3];",
          "    let result = flags.write_to::<u32>(&mut dst);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().what, \"flag bitset\");"
        ],
        "code": [
          "{",
          "    let flags = Flags {",
          "        has_empty: false,",
          "        is_utf8: false,",
          "        is_always_start_anchored: false,",
          "    };",
          "    let mut dst = [0u8; 3]; // Length less than 4",
          "    let _ = flags.write_to::<u32>(&mut dst);",
          "    let flags = Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false };",
          "    let mut dst = [0u8; 3];",
          "    let result = flags.write_to::<u32>(&mut dst);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().what, \"flag bitset\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]