[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table = vec![0u8];",
          "    let start_map = StartByteMap { map: [Start::default(); 256] };",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Both,",
          "        start_map,",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let _ = start_table.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start_table.memory_usage(), 1);"
        ],
        "code": [
          "{",
          "    let table = vec![0u8];",
          "    let start_map = StartByteMap { map: [Start::default(); 256] };",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Both,",
          "        start_map,",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let _ = start_table.memory_usage();",
          "    assert_eq!(start_table.memory_usage(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table = vec![0u8; 256];",
          "    let start_map = StartByteMap { map: [Start::default(); 256] };",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Both,",
          "        start_map,",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let _ = start_table.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start_table.memory_usage(), 256);"
        ],
        "code": [
          "{",
          "    let table = vec![0u8; 256];",
          "    let start_map = StartByteMap { map: [Start::default(); 256] };",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Both,",
          "        start_map,",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let _ = start_table.memory_usage();",
          "    assert_eq!(start_table.memory_usage(), 256);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table = vec![0u8; 128];",
          "    let start_map = StartByteMap { map: [Start::default(); 256] };",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Both,",
          "        start_map,",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let _ = start_table.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start_table.memory_usage(), 128);"
        ],
        "code": [
          "{",
          "    let table = vec![0u8; 128];",
          "    let start_map = StartByteMap { map: [Start::default(); 256] };",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Both,",
          "        start_map,",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let _ = start_table.memory_usage();",
          "    assert_eq!(start_table.memory_usage(), 128);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]