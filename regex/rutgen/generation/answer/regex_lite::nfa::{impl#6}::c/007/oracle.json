[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let compiler = Compiler::new(config, String::from(\"a\"));",
          "    let hir = Hir::char('a');",
          "    let _ = compiler.c(&hir);",
          "}"
        ],
        "oracle": [
          "    let config = Config { size_limit: None };",
          "    let compiler = Compiler::new(config, String::from(\"a\"));",
          "    let hir = Hir::char('a');",
          "    let result = compiler.c(&hir);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, /* expected start state ID */);",
          "    assert_eq!(thompson_ref.end, /* expected end state ID */);"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let compiler = Compiler::new(config, String::from(\"a\"));",
          "    let hir = Hir::char('a');",
          "    let _ = compiler.c(&hir);",
          "    let config = Config { size_limit: None };",
          "    let compiler = Compiler::new(config, String::from(\"a\"));",
          "    let hir = Hir::char('a');",
          "    let result = compiler.c(&hir);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, /* expected start state ID */);",
          "    assert_eq!(thompson_ref.end, /* expected end state ID */);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let compiler = Compiler::new(config, String::from(\"b\"));",
          "    let hir = Hir::char('b');",
          "    let _ = compiler.c(&hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(compiler.nfa.borrow().pattern, String::from(\"b\"));",
          "    assert!(compiler.nfa.borrow().is_match_empty);",
          "    assert_eq!(compiler.nfa.borrow().start, expected_start_state);",
          "    assert_eq!(compiler.nfa.borrow().states.len(), expected_state_count);",
          "    assert!(compiler.nfa.borrow().cap_index_to_name.is_empty());",
          "    assert!(compiler.nfa.borrow().cap_name_to_index.is_empty());",
          "    assert_eq!(compiler.nfa.borrow().memory_extra, initial_memory_extra);",
          "    assert!(matches!(compiler.c(&hir), Ok(ThompsonRef { start, end })));"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let compiler = Compiler::new(config, String::from(\"b\"));",
          "    let hir = Hir::char('b');",
          "    let _ = compiler.c(&hir);",
          "    assert_eq!(compiler.nfa.borrow().pattern, String::from(\"b\"));",
          "    assert!(compiler.nfa.borrow().is_match_empty);",
          "    assert_eq!(compiler.nfa.borrow().start, expected_start_state);",
          "    assert_eq!(compiler.nfa.borrow().states.len(), expected_state_count);",
          "    assert!(compiler.nfa.borrow().cap_index_to_name.is_empty());",
          "    assert!(compiler.nfa.borrow().cap_name_to_index.is_empty());",
          "    assert_eq!(compiler.nfa.borrow().memory_extra, initial_memory_extra);",
          "    assert!(matches!(compiler.c(&hir), Ok(ThompsonRef { start, end })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let compiler = Compiler::new(config, String::from(\"中\"));",
          "    let hir = Hir::char('中');",
          "    let _ = compiler.c(&hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(compiler.c(&hir).is_ok(), true);",
          "    assert_eq!(compiler.c(&hir).unwrap().start, expected_start_state_id);",
          "    assert_eq!(compiler.c(&hir).unwrap().end, expected_end_state_id);",
          "    assert!(matches!(compiler.c(&hir).unwrap(), ThompsonRef { start: _, end: _ }));",
          "    assert!(compiler.nfa.borrow().pattern == \"中\");"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let compiler = Compiler::new(config, String::from(\"中\"));",
          "    let hir = Hir::char('中');",
          "    let _ = compiler.c(&hir);",
          "    assert_eq!(compiler.c(&hir).is_ok(), true);",
          "    assert_eq!(compiler.c(&hir).unwrap().start, expected_start_state_id);",
          "    assert_eq!(compiler.c(&hir).unwrap().end, expected_end_state_id);",
          "    assert!(matches!(compiler.c(&hir).unwrap(), ThompsonRef { start: _, end: _ }));",
          "    assert!(compiler.nfa.borrow().pattern == \"中\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let compiler = Compiler::new(config, String::from(\"!\"));",
          "    let hir = Hir::char('!');",
          "    let _ = compiler.c(&hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(*hir.kind(), HirKind::Char('!'));",
          "    assert!(compiler.c(&hir).is_ok());",
          "    let result = compiler.c(&hir).unwrap();",
          "    assert_eq!(result.start, result.end);"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let compiler = Compiler::new(config, String::from(\"!\"));",
          "    let hir = Hir::char('!');",
          "    let _ = compiler.c(&hir);",
          "    assert_eq!(*hir.kind(), HirKind::Char('!'));",
          "    assert!(compiler.c(&hir).is_ok());",
          "    let result = compiler.c(&hir).unwrap();",
          "    assert_eq!(result.start, result.end);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]