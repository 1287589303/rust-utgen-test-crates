[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let compiler = Compiler::new(config, String::from(\"test\"));",
          "    let look = Look::Start;",
          "    let hir = Hir::look(look);",
          "    let _ = compiler.c(&hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(compiler.c(&hir).is_ok(), true);",
          "    let thompson_ref = compiler.c(&hir).unwrap();",
          "    assert_eq!(thompson_ref.start, expected_start_id);",
          "    assert_eq!(thompson_ref.end, expected_end_id);",
          "    assert_eq!(compiler.nfa.borrow().is_match_empty, false);",
          "    assert_eq!(compiler.nfa.borrow().is_start_anchored, false);"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let compiler = Compiler::new(config, String::from(\"test\"));",
          "    let look = Look::Start;",
          "    let hir = Hir::look(look);",
          "    let _ = compiler.c(&hir);",
          "    assert_eq!(compiler.c(&hir).is_ok(), true);",
          "    let thompson_ref = compiler.c(&hir).unwrap();",
          "    assert_eq!(thompson_ref.start, expected_start_id);",
          "    assert_eq!(thompson_ref.end, expected_end_id);",
          "    assert_eq!(compiler.nfa.borrow().is_match_empty, false);",
          "    assert_eq!(compiler.nfa.borrow().is_start_anchored, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let compiler = Compiler::new(config, String::from(\"test\"));",
          "    let look = Look::End;",
          "    let hir = Hir::look(look);",
          "    let _ = compiler.c(&hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(*hir.kind(), HirKind::Look(Look::End));",
          "    assert!(compiler.c(&hir).is_ok());",
          "    assert!(compiler.c(&hir).unwrap().start > 0);",
          "    assert!(compiler.c(&hir).unwrap().end > 0);"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let compiler = Compiler::new(config, String::from(\"test\"));",
          "    let look = Look::End;",
          "    let hir = Hir::look(look);",
          "    let _ = compiler.c(&hir);",
          "    assert_eq!(*hir.kind(), HirKind::Look(Look::End));",
          "    assert!(compiler.c(&hir).is_ok());",
          "    assert!(compiler.c(&hir).unwrap().start > 0);",
          "    assert!(compiler.c(&hir).unwrap().end > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let compiler = Compiler::new(config, String::from(\"test\"));",
          "    let look = Look::Start | Look::End;",
          "    let hir = Hir::look(look);",
          "    let _ = compiler.c(&hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.kind(), &HirKind::Look(look));",
          "    assert!(compiler.c(&hir).is_ok());",
          "    let thompson_ref = compiler.c(&hir).unwrap();",
          "    assert!(thompson_ref.start != 0);",
          "    assert!(thompson_ref.end != 0);",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);",
          "    assert!(matches!(compiler.nfa.borrow().cap_index_to_name, vec![None]));",
          "    assert!(compiler.nfa.borrow().cap_name_to_index.is_empty());",
          "    assert_eq!(compiler.nfa.borrow().pattern, \"test\");",
          "    assert!(compiler.nfa.borrow().is_match_empty);",
          "    assert!(compiler.nfa.borrow().is_start_anchored);"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let compiler = Compiler::new(config, String::from(\"test\"));",
          "    let look = Look::Start | Look::End;",
          "    let hir = Hir::look(look);",
          "    let _ = compiler.c(&hir);",
          "    assert_eq!(hir.kind(), &HirKind::Look(look));",
          "    assert!(compiler.c(&hir).is_ok());",
          "    let thompson_ref = compiler.c(&hir).unwrap();",
          "    assert!(thompson_ref.start != 0);",
          "    assert!(thompson_ref.end != 0);",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);",
          "    assert!(matches!(compiler.nfa.borrow().cap_index_to_name, vec![None]));",
          "    assert!(compiler.nfa.borrow().cap_name_to_index.is_empty());",
          "    assert_eq!(compiler.nfa.borrow().pattern, \"test\");",
          "    assert!(compiler.nfa.borrow().is_match_empty);",
          "    assert!(compiler.nfa.borrow().is_start_anchored);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let compiler = Compiler::new(config, String::from(\"test\"));",
          "    let look = Look::Word;",
          "    let hir = Hir::look(look);",
          "    let _ = compiler.c(&hir);",
          "}"
        ],
        "oracle": [
          "    let config = Config { size_limit: None };",
          "    let compiler = Compiler::new(config, String::from(\"test\"));",
          "    let look = Look::Word;",
          "    let hir = Hir::look(look);",
          "    let result = compiler.c(&hir);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let compiler = Compiler::new(config, String::from(\"test\"));",
          "    let look = Look::Word;",
          "    let hir = Hir::look(look);",
          "    let _ = compiler.c(&hir);",
          "    let config = Config { size_limit: None };",
          "    let compiler = Compiler::new(config, String::from(\"test\"));",
          "    let look = Look::Word;",
          "    let hir = Hir::look(look);",
          "    let result = compiler.c(&hir);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, thompson_ref.end);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let compiler = Compiler::new(config, String::from(\"test\"));",
          "    let look = Look::WordNegate;",
          "    let hir = Hir::look(look);",
          "    let _ = compiler.c(&hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.kind(), &HirKind::Look(Look::WordNegate));",
          "    assert!(compiler.c(&hir).is_ok());",
          "    let thompson_ref = compiler.c(&hir).unwrap();",
          "    assert_eq!(thompson_ref.start, expected_start_id);",
          "    assert_eq!(thompson_ref.end, expected_end_id);",
          "    assert!(thompson_ref.start != thompson_ref.end);"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let compiler = Compiler::new(config, String::from(\"test\"));",
          "    let look = Look::WordNegate;",
          "    let hir = Hir::look(look);",
          "    let _ = compiler.c(&hir);",
          "    assert_eq!(hir.kind(), &HirKind::Look(Look::WordNegate));",
          "    assert!(compiler.c(&hir).is_ok());",
          "    let thompson_ref = compiler.c(&hir).unwrap();",
          "    assert_eq!(thompson_ref.start, expected_start_id);",
          "    assert_eq!(thompson_ref.end, expected_end_id);",
          "    assert!(thompson_ref.start != thompson_ref.end);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let compiler = Compiler::new(config, String::from(\"test\"));",
          "    let look = Look::Start | Look::Word | Look::End;",
          "    let hir = Hir::look(look);",
          "    let _ = compiler.c(&hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(compiler.nfa.borrow().is_start_anchored, false);",
          "    assert_eq!(compiler.nfa.borrow().is_match_empty, true);",
          "    assert!(compiler.nfa.borrow().cap_index_to_name.is_empty());",
          "    assert!(compiler.nfa.borrow().cap_name_to_index.is_empty());",
          "    assert!(compiler.nfa.borrow().states.is_empty());",
          "    assert_eq!(compiler.nfa.borrow().pattern, \"test\");",
          "    assert!(matches!(compiler.c(&hir), Ok(_)));",
          "    assert!(matches!(compiler.c_look(&look), Ok(_)));",
          "    assert!(matches!(hir.kind(), HirKind::Look(_)));"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let compiler = Compiler::new(config, String::from(\"test\"));",
          "    let look = Look::Start | Look::Word | Look::End;",
          "    let hir = Hir::look(look);",
          "    let _ = compiler.c(&hir);",
          "    assert_eq!(compiler.nfa.borrow().is_start_anchored, false);",
          "    assert_eq!(compiler.nfa.borrow().is_match_empty, true);",
          "    assert!(compiler.nfa.borrow().cap_index_to_name.is_empty());",
          "    assert!(compiler.nfa.borrow().cap_name_to_index.is_empty());",
          "    assert!(compiler.nfa.borrow().states.is_empty());",
          "    assert_eq!(compiler.nfa.borrow().pattern, \"test\");",
          "    assert!(matches!(compiler.c(&hir), Ok(_)));",
          "    assert!(matches!(compiler.c_look(&look), Ok(_)));",
          "    assert!(matches!(hir.kind(), HirKind::Look(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]