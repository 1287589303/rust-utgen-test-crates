[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind_bytes: [u8; 4] = [0, 0, 0, 0]; // Represents StartKind::Both",
          "    let start_bytes: [u8; 256] = [0; 256]; // Represents valid StartByteMap values",
          "    let stride_bytes: [u8; 4] = (8u32.to_le_bytes()).to_vec(); // Stride of 8",
          "    let pattern_length_bytes: [u8; 4] = (5u32.to_le_bytes()).to_vec(); // Valid pattern length",
          "    let universal_unanchored_bytes: [u8; 4] = (1u32.to_le_bytes()).to_vec(); // Valid u32 value",
          "    let universal_anchored_bytes: [u8; 4] = (2u32.to_le_bytes()).to_vec(); // Valid u32 value",
          "    let slice: Vec<u8> = [",
          "        &kind_bytes,",
          "        &start_bytes,",
          "        &stride_bytes,",
          "        &pattern_length_bytes,",
          "        &universal_unanchored_bytes,",
          "        &universal_anchored_bytes,",
          "    ]",
          "    .concat();",
          "",
          "    let result = unsafe { StartTable::from_bytes_unchecked(&mut slice.as_slice()) };",
          "}"
        ],
        "oracle": [
          "    let result = unsafe { StartTable::from_bytes_unchecked(&mut slice.as_slice()) }.is_ok();",
          "    assert!(result);",
          "    ",
          "    let (table, bytes_read) = unsafe { StartTable::from_bytes_unchecked(&mut slice.as_slice()) }.unwrap();",
          "    assert_eq!(table.kind, StartKind::Both);",
          "    assert_eq!(table.stride, 8);",
          "    assert_eq!(table.pattern_len, Some(5));",
          "    assert!(table.universal_start_unanchored.is_some());",
          "    assert!(table.universal_start_anchored.is_some());",
          "    assert_eq!(bytes_read, slice.len());"
        ],
        "code": [
          "{",
          "    let kind_bytes: [u8; 4] = [0, 0, 0, 0]; // Represents StartKind::Both",
          "    let start_bytes: [u8; 256] = [0; 256]; // Represents valid StartByteMap values",
          "    let stride_bytes: [u8; 4] = (8u32.to_le_bytes()).to_vec(); // Stride of 8",
          "    let pattern_length_bytes: [u8; 4] = (5u32.to_le_bytes()).to_vec(); // Valid pattern length",
          "    let universal_unanchored_bytes: [u8; 4] = (1u32.to_le_bytes()).to_vec(); // Valid u32 value",
          "    let universal_anchored_bytes: [u8; 4] = (2u32.to_le_bytes()).to_vec(); // Valid u32 value",
          "    let slice: Vec<u8> = [",
          "        &kind_bytes,",
          "        &start_bytes,",
          "        &stride_bytes,",
          "        &pattern_length_bytes,",
          "        &universal_unanchored_bytes,",
          "        &universal_anchored_bytes,",
          "    ]",
          "    .concat();",
          "",
          "    let result = unsafe { StartTable::from_bytes_unchecked(&mut slice.as_slice()) };",
          "    let result = unsafe { StartTable::from_bytes_unchecked(&mut slice.as_slice()) }.is_ok();",
          "    assert!(result);",
          "    ",
          "    let (table, bytes_read) = unsafe { StartTable::from_bytes_unchecked(&mut slice.as_slice()) }.unwrap();",
          "    assert_eq!(table.kind, StartKind::Both);",
          "    assert_eq!(table.stride, 8);",
          "    assert_eq!(table.pattern_len, Some(5));",
          "    assert!(table.universal_start_unanchored.is_some());",
          "    assert!(table.universal_start_anchored.is_some());",
          "    assert_eq!(bytes_read, slice.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind_bytes: [u8; 4] = [0, 0, 0, 1]; // Represents StartKind::Unanchored",
          "    let start_bytes: [u8; 256] = [0; 256]; // Represents valid StartByteMap values",
          "    let stride_bytes: [u8; 4] = (8u32.to_le_bytes()).to_vec(); // Stride of 8",
          "    let pattern_length_bytes: [u8; 4] = (u32::MAX.to_le_bytes()); // Pattern length as u32::MAX",
          "    let universal_unanchored_bytes: [u8; 4] = (3u32.to_le_bytes()).to_vec(); // Valid u32 value",
          "    let universal_anchored_bytes: [u8; 4] = (4u32.to_le_bytes()).to_vec(); // Valid u32 value",
          "    let slice: Vec<u8> = [",
          "        &kind_bytes,",
          "        &start_bytes,",
          "        &stride_bytes,",
          "        &pattern_length_bytes,",
          "        &universal_unanchored_bytes,",
          "        &universal_anchored_bytes,",
          "    ]",
          "    .concat();",
          "",
          "    let result = unsafe { StartTable::from_bytes_unchecked(&mut slice.as_slice()) };",
          "}"
        ],
        "oracle": [
          "    let kind_bytes: [u8; 4] = [0, 0, 0, 1]; // Represents StartKind::Unanchored",
          "    let start_bytes: [u8; 256] = [0; 256]; // Represents valid StartByteMap values",
          "    let stride_bytes: [u8; 4] = (8u32.to_le_bytes()).to_vec(); // Stride of 8",
          "    let pattern_length_bytes: [u8; 4] = (u32::MAX.to_le_bytes()); // Pattern length as u32::MAX",
          "    let universal_unanchored_bytes: [u8; 4] = (3u32.to_le_bytes()).to_vec(); // Valid u32 value",
          "    let universal_anchored_bytes: [u8; 4] = (4u32.to_le_bytes()).to_vec(); // Valid u32 value",
          "    let slice: Vec<u8> = [",
          "    &kind_bytes,",
          "    &start_bytes,",
          "    &stride_bytes,",
          "    &pattern_length_bytes,",
          "    &universal_unanchored_bytes,",
          "    &universal_anchored_bytes,",
          "    ].concat();",
          "    ",
          "    // Validate StartKind::from_bytes(slice)? returns Ok/Some",
          "    let (kind, _) = StartKind::from_bytes(&slice).expect(\"Expected StartKind to deserialize correctly\");",
          "    ",
          "    // Validate StartByteMap::from_bytes(slice)? returns Ok/Some",
          "    let (start_map, _) = StartByteMap::from_bytes(&slice).expect(\"Expected StartByteMap to deserialize correctly\");",
          "    ",
          "    // Validate wire::try_read_u32_as_usize(slice, \"start table stride\")? returns Ok/Some",
          "    let (stride, _) = wire::try_read_u32_as_usize(&slice).expect(\"Expected stride to deserialize correctly\");",
          "    ",
          "    // Validate stride != Start::len()",
          "    assert_ne!(stride, Start::len());",
          "    ",
          "    // Validate wire::try_read_u32_as_usize(slice, \"start table patterns\")? returns Ok/Some",
          "    let (maybe_pattern_len, _) = wire::try_read_u32_as_usize(&slice).expect(\"Expected pattern length to deserialize correctly\");",
          "    ",
          "    // Validate maybe_pattern_len.as_u32() == u32::MAX is false",
          "    assert_ne!(maybe_pattern_len.as_u32(), u32::MAX);",
          "    ",
          "    // Validate pattern_len.map_or(false, |len| len > PatternID::LIMIT) is false",
          "    let pattern_len = if maybe_pattern_len.as_u32() == u32::MAX {",
          "    None",
          "    } else {",
          "    Some(maybe_pattern_len)",
          "    };",
          "    assert!(pattern_len.map_or(false, |len| len > PatternID::LIMIT) == false);",
          "    ",
          "    // Validate wire::try_read_u32(slice, \"universal unanchored start\")? returns Ok/Some",
          "    let (universal_unanchored, _) = wire::try_read_u32(&slice).expect(\"Expected universal unanchored start to deserialize correctly\");",
          "    ",
          "    // Validate universal_unanchored == u32::MAX is false",
          "    assert_ne!(universal_unanchored, u32::MAX);",
          "    ",
          "    // Validate StateID::try_from(universal_unanchored).map_err(|e| DeserializeError::state_id_error(e, \"universal unanchored start\"))? returns Ok/Some",
          "    let universal_start_unanchored = StateID::try_from(universal_unanchored).map_err(|e| {",
          "    DeserializeError::state_id_error(e, \"universal unanchored start\")",
          "    }).expect(\"Expected universal_start_unanchored to deserialize correctly\");",
          "    ",
          "    // Validate wire::try_read_u32(slice, \"universal anchored start\")? returns Ok/Some",
          "    let (universal_anchored, _) = wire::try_read_u32(&slice).expect(\"Expected universal anchored start to deserialize correctly\");",
          "    ",
          "    // Validate universal_anchored == u32::MAX is false",
          "    assert_ne!(universal_anchored, u32::MAX);",
          "    ",
          "    // Validate StateID::try_from(universal_anchored).map_err(|e| DeserializeError::state_id_error(e, \"universal anchored start\"))? returns Ok/Some",
          "    let universal_start_anchored = StateID::try_from(universal_anchored).map_err(|e| {",
          "    DeserializeError::state_id_error(e, \"universal anchored start\")",
          "    }).expect(\"Expected universal_start_anchored to deserialize correctly\");",
          "    ",
          "    // Validate wire::mul(stride, pattern_len.unwrap_or(0), \"invalid pattern length\")? returns Err/None",
          "    let pattern_length_result = wire::mul(stride, pattern_len.unwrap_or(0), \"invalid pattern length\");",
          "    assert!(pattern_length_result.is_ok() == false);"
        ],
        "code": [
          "{",
          "    let kind_bytes: [u8; 4] = [0, 0, 0, 1]; // Represents StartKind::Unanchored",
          "    let start_bytes: [u8; 256] = [0; 256]; // Represents valid StartByteMap values",
          "    let stride_bytes: [u8; 4] = (8u32.to_le_bytes()).to_vec(); // Stride of 8",
          "    let pattern_length_bytes: [u8; 4] = (u32::MAX.to_le_bytes()); // Pattern length as u32::MAX",
          "    let universal_unanchored_bytes: [u8; 4] = (3u32.to_le_bytes()).to_vec(); // Valid u32 value",
          "    let universal_anchored_bytes: [u8; 4] = (4u32.to_le_bytes()).to_vec(); // Valid u32 value",
          "    let slice: Vec<u8> = [",
          "        &kind_bytes,",
          "        &start_bytes,",
          "        &stride_bytes,",
          "        &pattern_length_bytes,",
          "        &universal_unanchored_bytes,",
          "        &universal_anchored_bytes,",
          "    ]",
          "    .concat();",
          "",
          "    let result = unsafe { StartTable::from_bytes_unchecked(&mut slice.as_slice()) };",
          "    let kind_bytes: [u8; 4] = [0, 0, 0, 1]; // Represents StartKind::Unanchored",
          "    let start_bytes: [u8; 256] = [0; 256]; // Represents valid StartByteMap values",
          "    let stride_bytes: [u8; 4] = (8u32.to_le_bytes()).to_vec(); // Stride of 8",
          "    let pattern_length_bytes: [u8; 4] = (u32::MAX.to_le_bytes()); // Pattern length as u32::MAX",
          "    let universal_unanchored_bytes: [u8; 4] = (3u32.to_le_bytes()).to_vec(); // Valid u32 value",
          "    let universal_anchored_bytes: [u8; 4] = (4u32.to_le_bytes()).to_vec(); // Valid u32 value",
          "    let slice: Vec<u8> = [",
          "    &kind_bytes,",
          "    &start_bytes,",
          "    &stride_bytes,",
          "    &pattern_length_bytes,",
          "    &universal_unanchored_bytes,",
          "    &universal_anchored_bytes,",
          "    ].concat();",
          "    ",
          "    // Validate StartKind::from_bytes(slice)? returns Ok/Some",
          "    let (kind, _) = StartKind::from_bytes(&slice).expect(\"Expected StartKind to deserialize correctly\");",
          "    ",
          "    // Validate StartByteMap::from_bytes(slice)? returns Ok/Some",
          "    let (start_map, _) = StartByteMap::from_bytes(&slice).expect(\"Expected StartByteMap to deserialize correctly\");",
          "    ",
          "    // Validate wire::try_read_u32_as_usize(slice, \"start table stride\")? returns Ok/Some",
          "    let (stride, _) = wire::try_read_u32_as_usize(&slice).expect(\"Expected stride to deserialize correctly\");",
          "    ",
          "    // Validate stride != Start::len()",
          "    assert_ne!(stride, Start::len());",
          "    ",
          "    // Validate wire::try_read_u32_as_usize(slice, \"start table patterns\")? returns Ok/Some",
          "    let (maybe_pattern_len, _) = wire::try_read_u32_as_usize(&slice).expect(\"Expected pattern length to deserialize correctly\");",
          "    ",
          "    // Validate maybe_pattern_len.as_u32() == u32::MAX is false",
          "    assert_ne!(maybe_pattern_len.as_u32(), u32::MAX);",
          "    ",
          "    // Validate pattern_len.map_or(false, |len| len > PatternID::LIMIT) is false",
          "    let pattern_len = if maybe_pattern_len.as_u32() == u32::MAX {",
          "    None",
          "    } else {",
          "    Some(maybe_pattern_len)",
          "    };",
          "    assert!(pattern_len.map_or(false, |len| len > PatternID::LIMIT) == false);",
          "    ",
          "    // Validate wire::try_read_u32(slice, \"universal unanchored start\")? returns Ok/Some",
          "    let (universal_unanchored, _) = wire::try_read_u32(&slice).expect(\"Expected universal unanchored start to deserialize correctly\");",
          "    ",
          "    // Validate universal_unanchored == u32::MAX is false",
          "    assert_ne!(universal_unanchored, u32::MAX);",
          "    ",
          "    // Validate StateID::try_from(universal_unanchored).map_err(|e| DeserializeError::state_id_error(e, \"universal unanchored start\"))? returns Ok/Some",
          "    let universal_start_unanchored = StateID::try_from(universal_unanchored).map_err(|e| {",
          "    DeserializeError::state_id_error(e, \"universal unanchored start\")",
          "    }).expect(\"Expected universal_start_unanchored to deserialize correctly\");",
          "    ",
          "    // Validate wire::try_read_u32(slice, \"universal anchored start\")? returns Ok/Some",
          "    let (universal_anchored, _) = wire::try_read_u32(&slice).expect(\"Expected universal anchored start to deserialize correctly\");",
          "    ",
          "    // Validate universal_anchored == u32::MAX is false",
          "    assert_ne!(universal_anchored, u32::MAX);",
          "    ",
          "    // Validate StateID::try_from(universal_anchored).map_err(|e| DeserializeError::state_id_error(e, \"universal anchored start\"))? returns Ok/Some",
          "    let universal_start_anchored = StateID::try_from(universal_anchored).map_err(|e| {",
          "    DeserializeError::state_id_error(e, \"universal anchored start\")",
          "    }).expect(\"Expected universal_start_anchored to deserialize correctly\");",
          "    ",
          "    // Validate wire::mul(stride, pattern_len.unwrap_or(0), \"invalid pattern length\")? returns Err/None",
          "    let pattern_length_result = wire::mul(stride, pattern_len.unwrap_or(0), \"invalid pattern length\");",
          "    assert!(pattern_length_result.is_ok() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind_bytes: [u8; 4] = [0, 0, 0, 2]; // Represents StartKind::Anchored",
          "    let start_bytes: [u8; 256] = [0; 256]; // Represents valid StartByteMap values",
          "    let stride_bytes: [u8; 4] = (8u32.to_le_bytes()).to_vec(); // Stride of 8",
          "    let pattern_length_bytes: [u8; 4] = (3u32.to_le_bytes()).to_vec(); // Valid pattern length",
          "    let universal_unanchored_bytes: [u8; 4] = (5u32.to_le_bytes()).to_vec(); // Valid u32 value",
          "    let universal_anchored_bytes: [u8; 4] = (6u32.to_le_bytes()).to_vec(); // Valid u32 value",
          "    let slice: Vec<u8> = [",
          "        &kind_bytes,",
          "        &start_bytes,",
          "        &stride_bytes,",
          "        &pattern_length_bytes,",
          "        &universal_unanchored_bytes,",
          "        &universal_anchored_bytes,",
          "    ]",
          "    .concat();",
          "",
          "    let result = unsafe { StartTable::from_bytes_unchecked(&mut slice.as_slice()) };",
          "}"
        ],
        "oracle": [
          "    let kind_bytes: [u8; 4] = [0, 0, 0, 2]; // Represents StartKind::Anchored",
          "    let start_bytes: [u8; 256] = [0; 256]; // Represents valid StartByteMap values",
          "    let stride_bytes: [u8; 4] = (8u32.to_le_bytes()).to_vec(); // Stride of 8",
          "    let pattern_length_bytes: [u8; 4] = (3u32.to_le_bytes()).to_vec(); // Valid pattern length",
          "    let universal_unanchored_bytes: [u8; 4] = (5u32.to_le_bytes()).to_vec(); // Valid u32 value",
          "    let universal_anchored_bytes: [u8; 4] = (6u32.to_le_bytes()).to_vec(); // Valid u32 value",
          "    let slice: Vec<u8> = [",
          "    &kind_bytes,",
          "    &start_bytes,",
          "    &stride_bytes,",
          "    &pattern_length_bytes,",
          "    &universal_unanchored_bytes,",
          "    &universal_anchored_bytes,",
          "    ]",
          "    .concat();",
          "    ",
          "    assert!(StartKind::from_bytes(&slice).is_ok());",
          "    assert!(StartByteMap::from_bytes(&slice[4..260]).is_ok());",
          "    assert!(wire::try_read_u32_as_usize(&slice[260..264], \"start table stride\").is_ok());",
          "    assert_eq!(8, Start::len());",
          "    assert!(wire::try_read_u32_as_usize(&slice[264..268], \"start table patterns\").is_ok());",
          "    assert_ne!(u32::MAX, 3);",
          "    assert!(wire::try_read_u32(&slice[268..272], \"universal unanchored start\").is_ok());",
          "    assert_ne!(u32::MAX, 5);",
          "    assert!(StateID::try_from(5).is_ok());",
          "    assert!(wire::try_read_u32(&slice[272..276], \"universal anchored start\").is_ok());",
          "    assert_ne!(u32::MAX, 6);",
          "    assert!(StateID::try_from(6).is_ok());",
          "    assert!(wire::mul(8, 3, \"invalid pattern length\").is_ok());"
        ],
        "code": [
          "{",
          "    let kind_bytes: [u8; 4] = [0, 0, 0, 2]; // Represents StartKind::Anchored",
          "    let start_bytes: [u8; 256] = [0; 256]; // Represents valid StartByteMap values",
          "    let stride_bytes: [u8; 4] = (8u32.to_le_bytes()).to_vec(); // Stride of 8",
          "    let pattern_length_bytes: [u8; 4] = (3u32.to_le_bytes()).to_vec(); // Valid pattern length",
          "    let universal_unanchored_bytes: [u8; 4] = (5u32.to_le_bytes()).to_vec(); // Valid u32 value",
          "    let universal_anchored_bytes: [u8; 4] = (6u32.to_le_bytes()).to_vec(); // Valid u32 value",
          "    let slice: Vec<u8> = [",
          "        &kind_bytes,",
          "        &start_bytes,",
          "        &stride_bytes,",
          "        &pattern_length_bytes,",
          "        &universal_unanchored_bytes,",
          "        &universal_anchored_bytes,",
          "    ]",
          "    .concat();",
          "",
          "    let result = unsafe { StartTable::from_bytes_unchecked(&mut slice.as_slice()) };",
          "    let kind_bytes: [u8; 4] = [0, 0, 0, 2]; // Represents StartKind::Anchored",
          "    let start_bytes: [u8; 256] = [0; 256]; // Represents valid StartByteMap values",
          "    let stride_bytes: [u8; 4] = (8u32.to_le_bytes()).to_vec(); // Stride of 8",
          "    let pattern_length_bytes: [u8; 4] = (3u32.to_le_bytes()).to_vec(); // Valid pattern length",
          "    let universal_unanchored_bytes: [u8; 4] = (5u32.to_le_bytes()).to_vec(); // Valid u32 value",
          "    let universal_anchored_bytes: [u8; 4] = (6u32.to_le_bytes()).to_vec(); // Valid u32 value",
          "    let slice: Vec<u8> = [",
          "    &kind_bytes,",
          "    &start_bytes,",
          "    &stride_bytes,",
          "    &pattern_length_bytes,",
          "    &universal_unanchored_bytes,",
          "    &universal_anchored_bytes,",
          "    ]",
          "    .concat();",
          "    ",
          "    assert!(StartKind::from_bytes(&slice).is_ok());",
          "    assert!(StartByteMap::from_bytes(&slice[4..260]).is_ok());",
          "    assert!(wire::try_read_u32_as_usize(&slice[260..264], \"start table stride\").is_ok());",
          "    assert_eq!(8, Start::len());",
          "    assert!(wire::try_read_u32_as_usize(&slice[264..268], \"start table patterns\").is_ok());",
          "    assert_ne!(u32::MAX, 3);",
          "    assert!(wire::try_read_u32(&slice[268..272], \"universal unanchored start\").is_ok());",
          "    assert_ne!(u32::MAX, 5);",
          "    assert!(StateID::try_from(5).is_ok());",
          "    assert!(wire::try_read_u32(&slice[272..276], \"universal anchored start\").is_ok());",
          "    assert_ne!(u32::MAX, 6);",
          "    assert!(StateID::try_from(6).is_ok());",
          "    assert!(wire::mul(8, 3, \"invalid pattern length\").is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]