[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_data: &[u8] = &[3, 0, 0, 0]; // Invalid StartKind identifier",
          "    let result = unsafe { StartTable::from_bytes_unchecked(input_data) };",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().0, DeserializeErrorKind::Generic { msg: \"unrecognized start kind\" });"
        ],
        "code": [
          "{",
          "    let input_data: &[u8] = &[3, 0, 0, 0]; // Invalid StartKind identifier",
          "    let result = unsafe { StartTable::from_bytes_unchecked(input_data) };",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().0, DeserializeErrorKind::Generic { msg: \"unrecognized start kind\" });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_data: &[u8] = &[0]; // Too short to read StartKind",
          "    let result = unsafe { StartTable::from_bytes_unchecked(input_data) };",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().0, \"buffer too small\");"
        ],
        "code": [
          "{",
          "    let input_data: &[u8] = &[0]; // Too short to read StartKind",
          "    let result = unsafe { StartTable::from_bytes_unchecked(input_data) };",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().0, \"buffer too small\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_data: &[u8] = &[0, 0, 0, 0, 0, 1]; // Aligned to 4 bytes, but extends input length",
          "    let result = unsafe { StartTable::from_bytes_unchecked(input_data) };",
          "}"
        ],
        "oracle": [
          "    let result = unsafe { StartTable::from_bytes_unchecked(input_data) };",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let input_data: &[u8] = &[0, 0, 0, 0, 0, 1]; // Aligned to 4 bytes, but extends input length",
          "    let result = unsafe { StartTable::from_bytes_unchecked(input_data) };",
          "    let result = unsafe { StartTable::from_bytes_unchecked(input_data) };",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_data: &[u8] = &[0, 1, 2, 3]; // Valid length but starting kind exceeds expected range",
          "    let result = unsafe { StartTable::from_bytes_unchecked(input_data) };",
          "}"
        ],
        "oracle": [
          "    let input_data: &[u8] = &[0, 1, 2, 3]; // Invalid starting kind",
          "    let result = unsafe { StartTable::from_bytes_unchecked(input_data) };",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let input_data: &[u8] = &[0, 1, 2, 3]; // Valid length but starting kind exceeds expected range",
          "    let result = unsafe { StartTable::from_bytes_unchecked(input_data) };",
          "    let input_data: &[u8] = &[0, 1, 2, 3]; // Invalid starting kind",
          "    let result = unsafe { StartTable::from_bytes_unchecked(input_data) };",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_data: &[u8] = &[0, 0, 0, 0, 10, 0, 0, 0]; // Valid StartKind but invalid stride of 10 ",
          "    let result = unsafe { StartTable::from_bytes_unchecked(input_data) };",
          "}"
        ],
        "oracle": [
          "    let input_data: &[u8] = &[0, 0, 0, 0, 10, 0, 0, 0];",
          "    assert!(matches!(result, Err(DeserializeError::generic(\"invalid starting table stride\"))));"
        ],
        "code": [
          "{",
          "    let input_data: &[u8] = &[0, 0, 0, 0, 10, 0, 0, 0]; // Valid StartKind but invalid stride of 10 ",
          "    let result = unsafe { StartTable::from_bytes_unchecked(input_data) };",
          "    let input_data: &[u8] = &[0, 0, 0, 0, 10, 0, 0, 0];",
          "    assert!(matches!(result, Err(DeserializeError::generic(\"invalid starting table stride\"))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]