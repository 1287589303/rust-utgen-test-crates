[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder {",
          "        pats: vec![],",
          "        metac: meta::Config::default(),",
          "        syntaxc: syntax::Config::default(),",
          "    };",
          "    builder.line_terminator(0);",
          "}"
        ],
        "oracle": [
          "    let mut builder = Builder {",
          "    pats: vec![],",
          "    metac: meta::Config::default(),",
          "    syntaxc: syntax::Config::default(),",
          "    };",
          "    let returned_builder = builder.line_terminator(0);",
          "    assert!(std::ptr::eq(&returned_builder, &builder));",
          "    ",
          "    let returned_builder = builder.line_terminator(10);",
          "    assert!(std::ptr::eq(&returned_builder, &builder));",
          "    ",
          "    let returned_builder = builder.line_terminator(255);",
          "    assert!(std::ptr::eq(&returned_builder, &builder));",
          "    ",
          "    let returned_builder = builder.line_terminator(1);",
          "    assert!(std::ptr::eq(&returned_builder, &builder));"
        ],
        "code": [
          "{",
          "    let mut builder = Builder {",
          "        pats: vec![],",
          "        metac: meta::Config::default(),",
          "        syntaxc: syntax::Config::default(),",
          "    };",
          "    builder.line_terminator(0);",
          "    let mut builder = Builder {",
          "    pats: vec![],",
          "    metac: meta::Config::default(),",
          "    syntaxc: syntax::Config::default(),",
          "    };",
          "    let returned_builder = builder.line_terminator(0);",
          "    assert!(std::ptr::eq(&returned_builder, &builder));",
          "    ",
          "    let returned_builder = builder.line_terminator(10);",
          "    assert!(std::ptr::eq(&returned_builder, &builder));",
          "    ",
          "    let returned_builder = builder.line_terminator(255);",
          "    assert!(std::ptr::eq(&returned_builder, &builder));",
          "    ",
          "    let returned_builder = builder.line_terminator(1);",
          "    assert!(std::ptr::eq(&returned_builder, &builder));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder {",
          "        pats: vec![],",
          "        metac: meta::Config::default(),",
          "        syntaxc: syntax::Config::default(),",
          "    };",
          "    builder.line_terminator(128);",
          "}"
        ],
        "oracle": [
          "    let builder = Builder {",
          "    pats: vec![],",
          "    metac: meta::Config::default(),",
          "    syntaxc: syntax::Config::default(),",
          "    };",
          "    assert_eq!(builder.line_terminator(128), &builder);"
        ],
        "code": [
          "{",
          "    let mut builder = Builder {",
          "        pats: vec![],",
          "        metac: meta::Config::default(),",
          "        syntaxc: syntax::Config::default(),",
          "    };",
          "    builder.line_terminator(128);",
          "    let builder = Builder {",
          "    pats: vec![],",
          "    metac: meta::Config::default(),",
          "    syntaxc: syntax::Config::default(),",
          "    };",
          "    assert_eq!(builder.line_terminator(128), &builder);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder {",
          "        pats: vec![],",
          "        metac: meta::Config::default(),",
          "        syntaxc: syntax::Config::default(),",
          "    };",
          "    builder.line_terminator(255);",
          "}"
        ],
        "oracle": [
          "    builder.line_terminator(0); // Validate line terminator with byte 0",
          "    builder.line_terminator(1); // Validate line terminator with byte 1",
          "    builder.line_terminator(127); // Validate line terminator with byte 127",
          "    builder.line_terminator(128); // Validate line terminator with byte 128",
          "    builder.line_terminator(255); // Validate line terminator with byte 255",
          "    builder.line_terminator(10); // Validate line terminator with byte 10 (newline)",
          "    builder.line_terminator(13); // Validate line terminator with byte 13 (carriage return)",
          "    builder.line_terminator(32); // Validate line terminator with byte 32 (space)",
          "    builder.line_terminator(100); // Validate line terminator with byte 100"
        ],
        "code": [
          "{",
          "    let mut builder = Builder {",
          "        pats: vec![],",
          "        metac: meta::Config::default(),",
          "        syntaxc: syntax::Config::default(),",
          "    };",
          "    builder.line_terminator(255);",
          "    builder.line_terminator(0); // Validate line terminator with byte 0",
          "    builder.line_terminator(1); // Validate line terminator with byte 1",
          "    builder.line_terminator(127); // Validate line terminator with byte 127",
          "    builder.line_terminator(128); // Validate line terminator with byte 128",
          "    builder.line_terminator(255); // Validate line terminator with byte 255",
          "    builder.line_terminator(10); // Validate line terminator with byte 10 (newline)",
          "    builder.line_terminator(13); // Validate line terminator with byte 13 (carriage return)",
          "    builder.line_terminator(32); // Validate line terminator with byte 32 (space)",
          "    builder.line_terminator(100); // Validate line terminator with byte 100",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]