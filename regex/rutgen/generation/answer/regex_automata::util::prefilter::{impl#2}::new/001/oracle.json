[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = MatchKind::All;",
          "    let needles: Vec<&[u8]> = vec![b\"test\", b\"example\"];",
          "    let result = Choice::new(kind, &needles);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_none(), false);",
          "    assert!(result.is_some());",
          "    assert!(matches!(result.unwrap(), Choice::Memmem(_)));"
        ],
        "code": [
          "{",
          "    let kind = MatchKind::All;",
          "    let needles: Vec<&[u8]> = vec![b\"test\", b\"example\"];",
          "    let result = Choice::new(kind, &needles);",
          "    assert_eq!(result.is_none(), false);",
          "    assert!(result.is_some());",
          "    assert!(matches!(result.unwrap(), Choice::Memmem(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = MatchKind::LeftmostFirst;",
          "    let needles: Vec<&[u8]> = vec![b\"a\", b\"b\", b\"c\"];",
          "    let result = Choice::new(kind, &needles);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_some(), true);",
          "    assert!(matches!(result.unwrap(), Choice::Memchr3(_)));",
          "    assert_eq!(needles.len(), 3);",
          "    assert_eq!(needles[0], b\"a\");",
          "    assert_eq!(needles[1], b\"b\");",
          "    assert_eq!(needles[2], b\"c\");"
        ],
        "code": [
          "{",
          "    let kind = MatchKind::LeftmostFirst;",
          "    let needles: Vec<&[u8]> = vec![b\"a\", b\"b\", b\"c\"];",
          "    let result = Choice::new(kind, &needles);",
          "    assert_eq!(result.is_some(), true);",
          "    assert!(matches!(result.unwrap(), Choice::Memchr3(_)));",
          "    assert_eq!(needles.len(), 3);",
          "    assert_eq!(needles[0], b\"a\");",
          "    assert_eq!(needles[1], b\"b\");",
          "    assert_eq!(needles[2], b\"c\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = MatchKind::All;",
          "    let needles: Vec<&[u8]> = vec![b\"x\"];",
          "    let result = Choice::new(kind, &needles);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Choice::Memchr(Memchr(b'x'))));"
        ],
        "code": [
          "{",
          "    let kind = MatchKind::All;",
          "    let needles: Vec<&[u8]> = vec![b\"x\"];",
          "    let result = Choice::new(kind, &needles);",
          "    assert_eq!(result, Some(Choice::Memchr(Memchr(b'x'))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = MatchKind::LeftmostFirst;",
          "    let needles: Vec<&[u8]> = vec![b'r', b'e', b't'];",
          "    let result = Choice::new(kind, &needles);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert!(matches!(result.as_ref().unwrap(), Choice::Memchr3(_)));",
          "    ",
          "    let kind = MatchKind::All;",
          "    let needles: Vec<&[u8]> = vec![b'a', b'b'];",
          "    let result = Choice::new(kind, &needles);",
          "    assert!(result.is_some());",
          "    assert!(matches!(result.as_ref().unwrap(), Choice::Memchr2(_)));",
          "    ",
          "    let kind = MatchKind::All;",
          "    let needles: Vec<&[u8]> = vec![b'a'];",
          "    let result = Choice::new(kind, &needles);",
          "    assert!(result.is_some());",
          "    assert!(matches!(result.as_ref().unwrap(), Choice::Memchr(_)));",
          "    ",
          "    let kind = MatchKind::All;",
          "    let needles: Vec<&[u8]> = vec![];",
          "    let result = Choice::new(kind, &needles);",
          "    assert!(result.is_none());",
          "    ",
          "    let kind = MatchKind::LeftmostFirst;",
          "    let needles: Vec<&[u8]> = vec![b'a', b'c'];",
          "    let result = Choice::new(kind, &needles);",
          "    assert!(result.is_some());",
          "    assert!(matches!(result.as_ref().unwrap(), Choice::Memmem(_)));"
        ],
        "code": [
          "{",
          "    let kind = MatchKind::LeftmostFirst;",
          "    let needles: Vec<&[u8]> = vec![b'r', b'e', b't'];",
          "    let result = Choice::new(kind, &needles);",
          "    assert!(result.is_some());",
          "    assert!(matches!(result.as_ref().unwrap(), Choice::Memchr3(_)));",
          "    ",
          "    let kind = MatchKind::All;",
          "    let needles: Vec<&[u8]> = vec![b'a', b'b'];",
          "    let result = Choice::new(kind, &needles);",
          "    assert!(result.is_some());",
          "    assert!(matches!(result.as_ref().unwrap(), Choice::Memchr2(_)));",
          "    ",
          "    let kind = MatchKind::All;",
          "    let needles: Vec<&[u8]> = vec![b'a'];",
          "    let result = Choice::new(kind, &needles);",
          "    assert!(result.is_some());",
          "    assert!(matches!(result.as_ref().unwrap(), Choice::Memchr(_)));",
          "    ",
          "    let kind = MatchKind::All;",
          "    let needles: Vec<&[u8]> = vec![];",
          "    let result = Choice::new(kind, &needles);",
          "    assert!(result.is_none());",
          "    ",
          "    let kind = MatchKind::LeftmostFirst;",
          "    let needles: Vec<&[u8]> = vec![b'a', b'c'];",
          "    let result = Choice::new(kind, &needles);",
          "    assert!(result.is_some());",
          "    assert!(matches!(result.as_ref().unwrap(), Choice::Memmem(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = MatchKind::All;",
          "    let needles: Vec<&[u8]> = vec![b'a', b'b', b'c'];",
          "    let result = Choice::new(kind, &needles);",
          "}"
        ],
        "oracle": [
          "    let kind = MatchKind::All;",
          "    let needles: Vec<&[u8]> = vec![b'a', b'b', b'c'];",
          "    let result = Choice::new(kind, &needles);",
          "    assert!(result.is_some());",
          "    assert!(matches!(result.unwrap(), Choice::Memchr2(_)));"
        ],
        "code": [
          "{",
          "    let kind = MatchKind::All;",
          "    let needles: Vec<&[u8]> = vec![b'a', b'b', b'c'];",
          "    let result = Choice::new(kind, &needles);",
          "    let kind = MatchKind::All;",
          "    let needles: Vec<&[u8]> = vec![b'a', b'b', b'c'];",
          "    let result = Choice::new(kind, &needles);",
          "    assert!(result.is_some());",
          "    assert!(matches!(result.unwrap(), Choice::Memchr2(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]