[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    // Initialize the PatternSet with valid PatternIDs",
          "    let patset = PatternSet::new(vec![PatternID::new_unchecked(0), PatternID::new_unchecked(1), PatternID::new_unchecked(2)]).unwrap();",
          "    ",
          "    // Create a non-empty range starting from 2, which corresponds to the existing PatternIDs",
          "    let range = core::ops::Range { start: 0, end: 3 }; // 3 is exclusive",
          "",
          "    let mut iter = SetMatchesIntoIter { patset, it: range };",
          "",
          "    // Call the next_back method",
          "    let result = iter.next_back();",
          "}"
        ],
        "oracle": [
          "    let patset = PatternSet::new(vec![PatternID::new_unchecked(0), PatternID::new_unchecked(1), PatternID::new_unchecked(2)]).unwrap();",
          "    let range = core::ops::Range { start: 0, end: 3 };",
          "    let mut iter = SetMatchesIntoIter { patset, it: range };",
          "    let result = iter.next_back();",
          "    assert_eq!(result, Some(2));",
          "    iter.it.start = 2;",
          "    let result = iter.next_back();",
          "    assert_eq!(result, Some(1));",
          "    iter.it.start = 1;",
          "    let result = iter.next_back();",
          "    assert_eq!(result, Some(0));",
          "    iter.it.start = 0;",
          "    let result = iter.next_back();",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    // Initialize the PatternSet with valid PatternIDs",
          "    let patset = PatternSet::new(vec![PatternID::new_unchecked(0), PatternID::new_unchecked(1), PatternID::new_unchecked(2)]).unwrap();",
          "    ",
          "    // Create a non-empty range starting from 2, which corresponds to the existing PatternIDs",
          "    let range = core::ops::Range { start: 0, end: 3 }; // 3 is exclusive",
          "",
          "    let mut iter = SetMatchesIntoIter { patset, it: range };",
          "",
          "    // Call the next_back method",
          "    let result = iter.next_back();",
          "    let patset = PatternSet::new(vec![PatternID::new_unchecked(0), PatternID::new_unchecked(1), PatternID::new_unchecked(2)]).unwrap();",
          "    let range = core::ops::Range { start: 0, end: 3 };",
          "    let mut iter = SetMatchesIntoIter { patset, it: range };",
          "    let result = iter.next_back();",
          "    assert_eq!(result, Some(2));",
          "    iter.it.start = 2;",
          "    let result = iter.next_back();",
          "    assert_eq!(result, Some(1));",
          "    iter.it.start = 1;",
          "    let result = iter.next_back();",
          "    assert_eq!(result, Some(0));",
          "    iter.it.start = 0;",
          "    let result = iter.next_back();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    // Initialize the PatternSet with valid PatternIDs up to the boundary",
          "    let patset = PatternSet::new(vec![PatternID::new_unchecked(1), PatternID::new_unchecked(2)]).unwrap();",
          "    ",
          "    // Create a range that covers the boundary",
          "    let range = core::ops::Range { start: 1, end: 3 }; // 3 is exclusive",
          "",
          "    let mut iter = SetMatchesIntoIter { patset, it: range };",
          "",
          "    // Call the next_back method",
          "    let result = iter.next_back();",
          "}"
        ],
        "oracle": [
          "    let patset = PatternSet::new(vec![PatternID::new_unchecked(1), PatternID::new_unchecked(2)]).unwrap();",
          "    let range = core::ops::Range { start: 1, end: 3 };",
          "    let mut iter = SetMatchesIntoIter { patset, it: range };",
          "    let result = iter.next_back();",
          "    assert_eq!(result, Some(2));",
          "    let result = iter.next_back();",
          "    assert_eq!(result, Some(1));",
          "    let result = iter.next_back();",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    // Initialize the PatternSet with valid PatternIDs up to the boundary",
          "    let patset = PatternSet::new(vec![PatternID::new_unchecked(1), PatternID::new_unchecked(2)]).unwrap();",
          "    ",
          "    // Create a range that covers the boundary",
          "    let range = core::ops::Range { start: 1, end: 3 }; // 3 is exclusive",
          "",
          "    let mut iter = SetMatchesIntoIter { patset, it: range };",
          "",
          "    // Call the next_back method",
          "    let result = iter.next_back();",
          "    let patset = PatternSet::new(vec![PatternID::new_unchecked(1), PatternID::new_unchecked(2)]).unwrap();",
          "    let range = core::ops::Range { start: 1, end: 3 };",
          "    let mut iter = SetMatchesIntoIter { patset, it: range };",
          "    let result = iter.next_back();",
          "    assert_eq!(result, Some(2));",
          "    let result = iter.next_back();",
          "    assert_eq!(result, Some(1));",
          "    let result = iter.next_back();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    // Initialize the PatternSet with multiple valid PatternIDs",
          "    let patset = PatternSet::new(vec![PatternID::new_unchecked(0), PatternID::new_unchecked(1), PatternID::new_unchecked(2), PatternID::new_unchecked(3)]).unwrap();",
          "    ",
          "    // Create a non-empty range that includes multiple matches",
          "    let range = core::ops::Range { start: 0, end: 4 }; // 4 is exclusive",
          "",
          "    let mut iter = SetMatchesIntoIter { patset, it: range };",
          "",
          "    // Call the next_back method",
          "    let result = iter.next_back();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(3));",
          "    assert_eq!(iter.it.end, 3);",
          "    assert_eq!(iter.it.start, 0);",
          "    assert!(iter.patset.contains(PatternID::new_unchecked(3)));",
          "    assert!(iter.patset.contains(PatternID::new_unchecked(2)));",
          "    assert!(iter.patset.contains(PatternID::new_unchecked(1)));",
          "    assert!(iter.patset.contains(PatternID::new_unchecked(0)));"
        ],
        "code": [
          "{",
          "    // Initialize the PatternSet with multiple valid PatternIDs",
          "    let patset = PatternSet::new(vec![PatternID::new_unchecked(0), PatternID::new_unchecked(1), PatternID::new_unchecked(2), PatternID::new_unchecked(3)]).unwrap();",
          "    ",
          "    // Create a non-empty range that includes multiple matches",
          "    let range = core::ops::Range { start: 0, end: 4 }; // 4 is exclusive",
          "",
          "    let mut iter = SetMatchesIntoIter { patset, it: range };",
          "",
          "    // Call the next_back method",
          "    let result = iter.next_back();",
          "    assert_eq!(result, Some(3));",
          "    assert_eq!(iter.it.end, 3);",
          "    assert_eq!(iter.it.start, 0);",
          "    assert!(iter.patset.contains(PatternID::new_unchecked(3)));",
          "    assert!(iter.patset.contains(PatternID::new_unchecked(2)));",
          "    assert!(iter.patset.contains(PatternID::new_unchecked(1)));",
          "    assert!(iter.patset.contains(PatternID::new_unchecked(0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]