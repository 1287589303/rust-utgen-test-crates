[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data: [u8; 13] = [1 << 0 | 1 << 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]; // encoded length = 1",
          "    let repr = Repr(&data);",
          "    repr.match_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(repr.match_len(), 1);"
        ],
        "code": [
          "{",
          "    let data: [u8; 13] = [1 << 0 | 1 << 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]; // encoded length = 1",
          "    let repr = Repr(&data);",
          "    repr.match_len();",
          "    assert_eq!(repr.match_len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data: [u8; 13] = [1 << 0 | 1 << 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5]; // encoded length = 5",
          "    let repr = Repr(&data);",
          "    repr.match_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(repr.match_len(), 5);"
        ],
        "code": [
          "{",
          "    let data: [u8; 13] = [1 << 0 | 1 << 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5]; // encoded length = 5",
          "    let repr = Repr(&data);",
          "    repr.match_len();",
          "    assert_eq!(repr.match_len(), 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data: [u8; 13] = [1 << 0 | 1 << 1, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255]; // encoded length = usize::max",
          "    let repr = Repr(&data);",
          "    repr.match_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(repr.match_len(), usize::max_value());"
        ],
        "code": [
          "{",
          "    let data: [u8; 13] = [1 << 0 | 1 << 1, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255]; // encoded length = usize::max",
          "    let repr = Repr(&data);",
          "    repr.match_len();",
          "    assert_eq!(repr.match_len(), usize::max_value());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data: [u8; 13] = [1 << 0 | 1 << 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; // encoded length = 0",
          "    let repr = Repr(&data);",
          "    repr.match_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(repr.is_match(), true);",
          "    assert_eq!(repr.has_pattern_ids(), true);",
          "    assert_eq!(repr.match_len(), 1);",
          "    assert_eq!(repr.encoded_pattern_len(), 0);"
        ],
        "code": [
          "{",
          "    let data: [u8; 13] = [1 << 0 | 1 << 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; // encoded length = 0",
          "    let repr = Repr(&data);",
          "    repr.match_len();",
          "    assert_eq!(repr.is_match(), true);",
          "    assert_eq!(repr.has_pattern_ids(), true);",
          "    assert_eq!(repr.match_len(), 1);",
          "    assert_eq!(repr.encoded_pattern_len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]