[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyNFA;",
          "    let pike_vm = PikeVM { nfa: DummyNFA };",
          "",
          "    let cache = Cache::new(&pike_vm);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cache.stack, vec![]);",
          "    assert_eq!(cache.curr.set, SparseSet::new(0));",
          "    assert_eq!(cache.curr.slot_table, SlotTable::new());",
          "    assert_eq!(cache.next.set, SparseSet::new(0));",
          "    assert_eq!(cache.next.slot_table, SlotTable::new());"
        ],
        "code": [
          "{",
          "    struct DummyNFA;",
          "    let pike_vm = PikeVM { nfa: DummyNFA };",
          "",
          "    let cache = Cache::new(&pike_vm);",
          "    assert_eq!(cache.stack, vec![]);",
          "    assert_eq!(cache.curr.set, SparseSet::new(0));",
          "    assert_eq!(cache.curr.slot_table, SlotTable::new());",
          "    assert_eq!(cache.next.set, SparseSet::new(0));",
          "    assert_eq!(cache.next.slot_table, SlotTable::new());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct EmptyNFA;",
          "    let pike_vm = PikeVM { nfa: EmptyNFA };",
          "",
          "    let cache = Cache::new(&pike_vm);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cache.stack, vec![]);",
          "    assert_eq!(cache.curr.set, SparseSet::new(0));",
          "    assert_eq!(cache.curr.slot_table, SlotTable::new());",
          "    assert_eq!(cache.next.set, SparseSet::new(0));",
          "    assert_eq!(cache.next.slot_table, SlotTable::new());"
        ],
        "code": [
          "{",
          "    struct EmptyNFA;",
          "    let pike_vm = PikeVM { nfa: EmptyNFA };",
          "",
          "    let cache = Cache::new(&pike_vm);",
          "    assert_eq!(cache.stack, vec![]);",
          "    assert_eq!(cache.curr.set, SparseSet::new(0));",
          "    assert_eq!(cache.curr.slot_table, SlotTable::new());",
          "    assert_eq!(cache.next.set, SparseSet::new(0));",
          "    assert_eq!(cache.next.slot_table, SlotTable::new());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct NonEmptyNFA;",
          "    let pike_vm = PikeVM { nfa: NonEmptyNFA };",
          "",
          "    let cache = Cache::new(&pike_vm);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cache.stack, vec![]);",
          "    assert_eq!(cache.curr.set, SparseSet::new(0));",
          "    assert_eq!(cache.curr.slot_table, SlotTable::new());",
          "    assert_eq!(cache.next.set, SparseSet::new(0));",
          "    assert_eq!(cache.next.slot_table, SlotTable::new());"
        ],
        "code": [
          "{",
          "    struct NonEmptyNFA;",
          "    let pike_vm = PikeVM { nfa: NonEmptyNFA };",
          "",
          "    let cache = Cache::new(&pike_vm);",
          "    assert_eq!(cache.stack, vec![]);",
          "    assert_eq!(cache.curr.set, SparseSet::new(0));",
          "    assert_eq!(cache.curr.slot_table, SlotTable::new());",
          "    assert_eq!(cache.next.set, SparseSet::new(0));",
          "    assert_eq!(cache.next.slot_table, SlotTable::new());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]