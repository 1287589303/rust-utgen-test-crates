[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set = SparseSet::new(0);",
          "}"
        ],
        "oracle": [
          "    let set = SparseSet::new(0);",
          "    assert_eq!(set.len, 0);",
          "    assert_eq!(set.dense.len(), 0);",
          "    assert_eq!(set.sparse.len(), 0);",
          "    assert!(set.is_empty());",
          "    ",
          "    let set = SparseSet::new(1);",
          "    assert_eq!(set.len, 0);",
          "    assert_eq!(set.dense.len(), 1);",
          "    assert_eq!(set.sparse.len(), 1);",
          "    assert!(set.is_empty());",
          "    ",
          "    let set = SparseSet::new(10);",
          "    assert_eq!(set.len, 0);",
          "    assert_eq!(set.dense.len(), 10);",
          "    assert_eq!(set.sparse.len(), 10);",
          "    assert!(set.is_empty());"
        ],
        "code": [
          "{",
          "    let set = SparseSet::new(0);",
          "    let set = SparseSet::new(0);",
          "    assert_eq!(set.len, 0);",
          "    assert_eq!(set.dense.len(), 0);",
          "    assert_eq!(set.sparse.len(), 0);",
          "    assert!(set.is_empty());",
          "    ",
          "    let set = SparseSet::new(1);",
          "    assert_eq!(set.len, 0);",
          "    assert_eq!(set.dense.len(), 1);",
          "    assert_eq!(set.sparse.len(), 1);",
          "    assert!(set.is_empty());",
          "    ",
          "    let set = SparseSet::new(10);",
          "    assert_eq!(set.len, 0);",
          "    assert_eq!(set.dense.len(), 10);",
          "    assert_eq!(set.sparse.len(), 10);",
          "    assert!(set.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set = SparseSet::new(1);",
          "}"
        ],
        "oracle": [
          "    set.len == 0",
          "    set.dense.len() == 1",
          "    set.sparse.len() == 1",
          "    set.is_empty() == true",
          "    set.capacity() == 1"
        ],
        "code": [
          "{",
          "    let set = SparseSet::new(1);",
          "    set.len == 0",
          "    set.dense.len() == 1",
          "    set.sparse.len() == 1",
          "    set.is_empty() == true",
          "    set.capacity() == 1",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set = SparseSet::new(2);",
          "}"
        ],
        "oracle": [
          "    let set = SparseSet::new(2);",
          "    assert_eq!(set.len, 0);",
          "    assert_eq!(set.capacity(), 2);",
          "    assert!(set.is_empty());",
          "    assert!(!set.contains(1));",
          "    assert!(!set.contains(0));"
        ],
        "code": [
          "{",
          "    let set = SparseSet::new(2);",
          "    let set = SparseSet::new(2);",
          "    assert_eq!(set.len, 0);",
          "    assert_eq!(set.capacity(), 2);",
          "    assert!(set.is_empty());",
          "    assert!(!set.contains(1));",
          "    assert!(!set.contains(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set = SparseSet::new(u32::MAX.as_usize());",
          "}"
        ],
        "oracle": [
          "    set.len == 0",
          "    set.dense.len() == u32::MAX.as_usize()",
          "    set.sparse.len() == u32::MAX.as_usize()",
          "    set.is_empty() == true"
        ],
        "code": [
          "{",
          "    let set = SparseSet::new(u32::MAX.as_usize());",
          "    set.len == 0",
          "    set.dense.len() == u32::MAX.as_usize()",
          "    set.sparse.len() == u32::MAX.as_usize()",
          "    set.is_empty() == true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]