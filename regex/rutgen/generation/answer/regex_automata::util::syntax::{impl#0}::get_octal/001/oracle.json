[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new()",
          "        .case_insensitive(false)",
          "        .multi_line(false)",
          "        .dot_matches_new_line(false)",
          "        .crlf(false)",
          "        .line_terminator(0)",
          "        .swap_greed(false)",
          "        .ignore_whitespace(false)",
          "        .unicode(false)",
          "        .utf8(false)",
          "        .nest_limit(0)",
          "        .octal(false);",
          "    config.get_octal();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_octal(), false);",
          "    let config_with_octal = Config::new().octal(true);",
          "    assert_eq!(config_with_octal.get_octal(), true);",
          "    let config_another = Config::new().octal(false);",
          "    assert_eq!(config_another.get_octal(), false);",
          "    let config_with_octal_negative = Config::new().octal(false).get_octal();",
          "    assert!(config_with_octal_negative == false);"
        ],
        "code": [
          "{",
          "    let config = Config::new()",
          "        .case_insensitive(false)",
          "        .multi_line(false)",
          "        .dot_matches_new_line(false)",
          "        .crlf(false)",
          "        .line_terminator(0)",
          "        .swap_greed(false)",
          "        .ignore_whitespace(false)",
          "        .unicode(false)",
          "        .utf8(false)",
          "        .nest_limit(0)",
          "        .octal(false);",
          "    config.get_octal();",
          "    assert_eq!(config.get_octal(), false);",
          "    let config_with_octal = Config::new().octal(true);",
          "    assert_eq!(config_with_octal.get_octal(), true);",
          "    let config_another = Config::new().octal(false);",
          "    assert_eq!(config_another.get_octal(), false);",
          "    let config_with_octal_negative = Config::new().octal(false).get_octal();",
          "    assert!(config_with_octal_negative == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new()",
          "        .case_insensitive(true)",
          "        .multi_line(true)",
          "        .dot_matches_new_line(true)",
          "        .crlf(true)",
          "        .line_terminator(255)",
          "        .swap_greed(true)",
          "        .ignore_whitespace(true)",
          "        .unicode(true)",
          "        .utf8(true)",
          "        .nest_limit(4294967295)",
          "        .octal(true);",
          "    config.get_octal();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_octal(), true);",
          "    let config2 = Config::new().octal(false);",
          "    assert_eq!(config2.get_octal(), false);",
          "    let config3 = Config::new().octal(true).case_insensitive(false);",
          "    assert_eq!(config3.get_octal(), true);",
          "    let config4 = Config::new().octal(false).multi_line(true);",
          "    assert_eq!(config4.get_octal(), false);",
          "    let config5 = Config::new().octal(true).dot_matches_new_line(false);",
          "    assert_eq!(config5.get_octal(), true);"
        ],
        "code": [
          "{",
          "    let config = Config::new()",
          "        .case_insensitive(true)",
          "        .multi_line(true)",
          "        .dot_matches_new_line(true)",
          "        .crlf(true)",
          "        .line_terminator(255)",
          "        .swap_greed(true)",
          "        .ignore_whitespace(true)",
          "        .unicode(true)",
          "        .utf8(true)",
          "        .nest_limit(4294967295)",
          "        .octal(true);",
          "    config.get_octal();",
          "    assert_eq!(config.get_octal(), true);",
          "    let config2 = Config::new().octal(false);",
          "    assert_eq!(config2.get_octal(), false);",
          "    let config3 = Config::new().octal(true).case_insensitive(false);",
          "    assert_eq!(config3.get_octal(), true);",
          "    let config4 = Config::new().octal(false).multi_line(true);",
          "    assert_eq!(config4.get_octal(), false);",
          "    let config5 = Config::new().octal(true).dot_matches_new_line(false);",
          "    assert_eq!(config5.get_octal(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]