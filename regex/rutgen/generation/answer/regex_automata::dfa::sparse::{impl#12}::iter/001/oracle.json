[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: Vec<u8> = vec![];",
          "    let start_map = StartByteMap { map: [Start::default(); 256] };",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Both,",
          "        start_map,",
          "        stride: 0,",
          "        pattern_len: None,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let iter = start_table.iter();",
          "}"
        ],
        "oracle": [
          "    let table: Vec<u8> = vec![];",
          "    let start_map = StartByteMap { map: [Start::default(); 256] };",
          "    let start_table = StartTable {",
          "    table,",
          "    kind: StartKind::Both,",
          "    start_map,",
          "    stride: 0,",
          "    pattern_len: None,",
          "    universal_start_unanchored: None,",
          "    universal_start_anchored: None,",
          "    };",
          "    let iter = start_table.iter();",
          "    assert_eq!(iter.st, &start_table);",
          "    assert_eq!(iter.i, 0);"
        ],
        "code": [
          "{",
          "    let table: Vec<u8> = vec![];",
          "    let start_map = StartByteMap { map: [Start::default(); 256] };",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Both,",
          "        start_map,",
          "        stride: 0,",
          "        pattern_len: None,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let iter = start_table.iter();",
          "    let table: Vec<u8> = vec![];",
          "    let start_map = StartByteMap { map: [Start::default(); 256] };",
          "    let start_table = StartTable {",
          "    table,",
          "    kind: StartKind::Both,",
          "    start_map,",
          "    stride: 0,",
          "    pattern_len: None,",
          "    universal_start_unanchored: None,",
          "    universal_start_anchored: None,",
          "    };",
          "    let iter = start_table.iter();",
          "    assert_eq!(iter.st, &start_table);",
          "    assert_eq!(iter.i, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: Vec<u8> = vec![0; 8]; // 8 entries for unanchored and anchored starts",
          "    let start_map = StartByteMap { map: [Start::default(); 256] };",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Both,",
          "        start_map,",
          "        stride: 0,",
          "        pattern_len: None,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let iter = start_table.iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.st, &start_table);",
          "    assert_eq!(iter.i, 0);"
        ],
        "code": [
          "{",
          "    let table: Vec<u8> = vec![0; 8]; // 8 entries for unanchored and anchored starts",
          "    let start_map = StartByteMap { map: [Start::default(); 256] };",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Both,",
          "        start_map,",
          "        stride: 0,",
          "        pattern_len: None,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let iter = start_table.iter();",
          "    assert_eq!(iter.st, &start_table);",
          "    assert_eq!(iter.i, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: Vec<u8> = vec![0; 8 + 3]; // 8 entries + stride of 3 for 1 pattern",
          "    let start_map = StartByteMap { map: [Start::default(); 256] };",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Both,",
          "        start_map,",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let iter = start_table.iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.st.table.as_ref(), start_table.table.as_ref());",
          "    assert_eq!(iter.i, 0);",
          "    assert!(std::mem::size_of_val(&iter) == size_of::<StartStateIter<'_, Vec<u8>>>());"
        ],
        "code": [
          "{",
          "    let table: Vec<u8> = vec![0; 8 + 3]; // 8 entries + stride of 3 for 1 pattern",
          "    let start_map = StartByteMap { map: [Start::default(); 256] };",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Both,",
          "        start_map,",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let iter = start_table.iter();",
          "    assert_eq!(iter.st.table.as_ref(), start_table.table.as_ref());",
          "    assert_eq!(iter.i, 0);",
          "    assert!(std::mem::size_of_val(&iter) == size_of::<StartStateIter<'_, Vec<u8>>>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: Vec<u8> = vec![0; 8 + 4]; // 8 entries + stride of 4 for 1 pattern",
          "    let start_map = StartByteMap { map: [Start::default(); 256] };",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Both,",
          "        start_map,",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: Some(StateID(0)),",
          "        universal_start_anchored: Some(StateID(1)),",
          "    };",
          "",
          "    let iter = start_table.iter();",
          "}"
        ],
        "oracle": [
          "    let iter = start_table.iter();",
          "    assert_eq!(iter.i, 0);",
          "    assert_eq!(iter.st.table.len(), 12);",
          "    assert_eq!(iter.st.kind, StartKind::Both);",
          "    assert!(iter.st.pattern_len.is_some());",
          "    assert_eq!(iter.st.universal_start_unanchored, Some(StateID(0)));",
          "    assert_eq!(iter.st.universal_start_anchored, Some(StateID(1)));"
        ],
        "code": [
          "{",
          "    let table: Vec<u8> = vec![0; 8 + 4]; // 8 entries + stride of 4 for 1 pattern",
          "    let start_map = StartByteMap { map: [Start::default(); 256] };",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Both,",
          "        start_map,",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: Some(StateID(0)),",
          "        universal_start_anchored: Some(StateID(1)),",
          "    };",
          "",
          "    let iter = start_table.iter();",
          "    let iter = start_table.iter();",
          "    assert_eq!(iter.i, 0);",
          "    assert_eq!(iter.st.table.len(), 12);",
          "    assert_eq!(iter.st.kind, StartKind::Both);",
          "    assert!(iter.st.pattern_len.is_some());",
          "    assert_eq!(iter.st.universal_start_unanchored, Some(StateID(0)));",
          "    assert_eq!(iter.st.universal_start_anchored, Some(StateID(1)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: Vec<u8> = vec![0; 8]; // adequate for only unanchored starts",
          "    let start_map = StartByteMap { map: [Start::default(); 256] };",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Unanchored,",
          "        start_map,",
          "        stride: 0,",
          "        pattern_len: None,",
          "        universal_start_unanchored: Some(StateID(0)),",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let iter = start_table.iter();",
          "}"
        ],
        "oracle": [
          "    let start_table = StartTable { table: vec![0; 8], kind: StartKind::Unanchored, start_map: StartByteMap { map: [Start::default(); 256] }, stride: 0, pattern_len: None, universal_start_unanchored: Some(StateID(0)), universal_start_anchored: None };",
          "    let iter = start_table.iter();",
          "    assert_eq!(iter.st, &start_table);",
          "    assert_eq!(iter.i, 0);"
        ],
        "code": [
          "{",
          "    let table: Vec<u8> = vec![0; 8]; // adequate for only unanchored starts",
          "    let start_map = StartByteMap { map: [Start::default(); 256] };",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Unanchored,",
          "        start_map,",
          "        stride: 0,",
          "        pattern_len: None,",
          "        universal_start_unanchored: Some(StateID(0)),",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let iter = start_table.iter();",
          "    let start_table = StartTable { table: vec![0; 8], kind: StartKind::Unanchored, start_map: StartByteMap { map: [Start::default(); 256] }, stride: 0, pattern_len: None, universal_start_unanchored: Some(StateID(0)), universal_start_anchored: None };",
          "    let iter = start_table.iter();",
          "    assert_eq!(iter.st, &start_table);",
          "    assert_eq!(iter.i, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: Vec<u8> = vec![0; 8]; // adequate for only anchored starts",
          "    let start_map = StartByteMap { map: [Start::default(); 256] };",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Anchored,",
          "        start_map,",
          "        stride: 0,",
          "        pattern_len: None,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: Some(StateID(1)),",
          "    };",
          "",
          "    let iter = start_table.iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.st, &start_table);",
          "    assert_eq!(iter.i, 0);"
        ],
        "code": [
          "{",
          "    let table: Vec<u8> = vec![0; 8]; // adequate for only anchored starts",
          "    let start_map = StartByteMap { map: [Start::default(); 256] };",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Anchored,",
          "        start_map,",
          "        stride: 0,",
          "        pattern_len: None,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: Some(StateID(1)),",
          "    };",
          "",
          "    let iter = start_table.iter();",
          "    assert_eq!(iter.st, &start_table);",
          "    assert_eq!(iter.i, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]