[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start_table = StartTable {",
          "        table: vec![1, 2, 3, 4, 5, 6, 7, 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::default(); 256] },",
          "        stride: 2,",
          "        pattern_len: Some(3),",
          "        universal_start_unanchored: Some(StateID(1)),",
          "        universal_start_anchored: Some(StateID(2)),",
          "    };",
          "",
          "    let _owned_table = start_table.to_owned();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_owned_table.table, vec![1, 2, 3, 4, 5, 6, 7, 8]);",
          "    assert_eq!(_owned_table.kind, StartKind::Both);",
          "    assert_eq!(_owned_table.start_map, start_table.start_map.clone());",
          "    assert_eq!(_owned_table.stride, 2);",
          "    assert_eq!(_owned_table.pattern_len, Some(3));",
          "    assert_eq!(_owned_table.universal_start_unanchored, Some(StateID(1)));",
          "    assert_eq!(_owned_table.universal_start_anchored, Some(StateID(2)));"
        ],
        "code": [
          "{",
          "    let start_table = StartTable {",
          "        table: vec![1, 2, 3, 4, 5, 6, 7, 8],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::default(); 256] },",
          "        stride: 2,",
          "        pattern_len: Some(3),",
          "        universal_start_unanchored: Some(StateID(1)),",
          "        universal_start_anchored: Some(StateID(2)),",
          "    };",
          "",
          "    let _owned_table = start_table.to_owned();",
          "    assert_eq!(_owned_table.table, vec![1, 2, 3, 4, 5, 6, 7, 8]);",
          "    assert_eq!(_owned_table.kind, StartKind::Both);",
          "    assert_eq!(_owned_table.start_map, start_table.start_map.clone());",
          "    assert_eq!(_owned_table.stride, 2);",
          "    assert_eq!(_owned_table.pattern_len, Some(3));",
          "    assert_eq!(_owned_table.universal_start_unanchored, Some(StateID(1)));",
          "    assert_eq!(_owned_table.universal_start_anchored, Some(StateID(2)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start_table = StartTable {",
          "        table: &[1, 2, 3, 4, 5, 6, 7, 8],",
          "        kind: StartKind::Unanchored,",
          "        start_map: StartByteMap { map: [Start::default(); 256] },",
          "        stride: 1,",
          "        pattern_len: None,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: Some(StateID(2)),",
          "    };",
          "",
          "    let _owned_table = start_table.to_owned();",
          "}"
        ],
        "oracle": [
          "    let expected_table = StartTable {",
          "    table: vec![1, 2, 3, 4, 5, 6, 7, 8],",
          "    kind: StartKind::Unanchored,",
          "    start_map: StartByteMap { map: [Start::default(); 256] },",
          "    stride: 1,",
          "    pattern_len: None,",
          "    universal_start_unanchored: None,",
          "    universal_start_anchored: Some(StateID(2)),",
          "    };",
          "    ",
          "    assert_eq!(_owned_table.table, expected_table.table);",
          "    assert_eq!(_owned_table.kind, expected_table.kind);",
          "    assert_eq!(_owned_table.start_map, expected_table.start_map);",
          "    assert_eq!(_owned_table.stride, expected_table.stride);",
          "    assert_eq!(_owned_table.pattern_len, expected_table.pattern_len);",
          "    assert_eq!(_owned_table.universal_start_unanchored, expected_table.universal_start_unanchored);",
          "    assert_eq!(_owned_table.universal_start_anchored, expected_table.universal_start_anchored);"
        ],
        "code": [
          "{",
          "    let start_table = StartTable {",
          "        table: &[1, 2, 3, 4, 5, 6, 7, 8],",
          "        kind: StartKind::Unanchored,",
          "        start_map: StartByteMap { map: [Start::default(); 256] },",
          "        stride: 1,",
          "        pattern_len: None,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: Some(StateID(2)),",
          "    };",
          "",
          "    let _owned_table = start_table.to_owned();",
          "    let expected_table = StartTable {",
          "    table: vec![1, 2, 3, 4, 5, 6, 7, 8],",
          "    kind: StartKind::Unanchored,",
          "    start_map: StartByteMap { map: [Start::default(); 256] },",
          "    stride: 1,",
          "    pattern_len: None,",
          "    universal_start_unanchored: None,",
          "    universal_start_anchored: Some(StateID(2)),",
          "    };",
          "    ",
          "    assert_eq!(_owned_table.table, expected_table.table);",
          "    assert_eq!(_owned_table.kind, expected_table.kind);",
          "    assert_eq!(_owned_table.start_map, expected_table.start_map);",
          "    assert_eq!(_owned_table.stride, expected_table.stride);",
          "    assert_eq!(_owned_table.pattern_len, expected_table.pattern_len);",
          "    assert_eq!(_owned_table.universal_start_unanchored, expected_table.universal_start_unanchored);",
          "    assert_eq!(_owned_table.universal_start_anchored, expected_table.universal_start_anchored);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start_table = StartTable {",
          "        table: vec![],",
          "        kind: StartKind::Anchored,",
          "        start_map: StartByteMap { map: [Start::default(); 256] },",
          "        stride: 0,",
          "        pattern_len: Some(0),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let _owned_table = start_table.to_owned();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_owned_table.table, vec![]);",
          "    assert_eq!(_owned_table.kind, StartKind::Anchored);",
          "    assert_eq!(_owned_table.start_map, StartByteMap { map: [Start::default(); 256] });",
          "    assert_eq!(_owned_table.stride, 0);",
          "    assert_eq!(_owned_table.pattern_len, Some(0));",
          "    assert_eq!(_owned_table.universal_start_unanchored, None);",
          "    assert_eq!(_owned_table.universal_start_anchored, None);"
        ],
        "code": [
          "{",
          "    let start_table = StartTable {",
          "        table: vec![],",
          "        kind: StartKind::Anchored,",
          "        start_map: StartByteMap { map: [Start::default(); 256] },",
          "        stride: 0,",
          "        pattern_len: Some(0),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let _owned_table = start_table.to_owned();",
          "    assert_eq!(_owned_table.table, vec![]);",
          "    assert_eq!(_owned_table.kind, StartKind::Anchored);",
          "    assert_eq!(_owned_table.start_map, StartByteMap { map: [Start::default(); 256] });",
          "    assert_eq!(_owned_table.stride, 0);",
          "    assert_eq!(_owned_table.pattern_len, Some(0));",
          "    assert_eq!(_owned_table.universal_start_unanchored, None);",
          "    assert_eq!(_owned_table.universal_start_anchored, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]