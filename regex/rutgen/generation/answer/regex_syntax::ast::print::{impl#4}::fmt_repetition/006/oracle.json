[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "",
          "    let ast = ast::Repetition {",
          "        span: Span::default(),",
          "        op: ast::RepetitionOp { kind: ast::RepetitionKind::OneOrMore },",
          "        greedy: false,",
          "        ast: Box::new(ast::Ast::default()),",
          "    };",
          "",
          "    writer.fmt_repetition(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    writer.output == \"+\"",
          "    writer.output == \"+?\"",
          "    writer.output == \"??\"",
          "    writer.output.contains(\"+\") && !writer.output.contains(\"+?\")"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "",
          "    let ast = ast::Repetition {",
          "        span: Span::default(),",
          "        op: ast::RepetitionOp { kind: ast::RepetitionKind::OneOrMore },",
          "        greedy: false,",
          "        ast: Box::new(ast::Ast::default()),",
          "    };",
          "",
          "    writer.fmt_repetition(&ast).unwrap();",
          "    writer.output == \"+\"",
          "    writer.output == \"+?\"",
          "    writer.output == \"??\"",
          "    writer.output.contains(\"+\") && !writer.output.contains(\"+?\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "",
          "    let ast = ast::Repetition {",
          "        span: Span::default(),",
          "        op: ast::RepetitionOp { kind: ast::RepetitionKind::OneOrMore },",
          "        greedy: true,",
          "        ast: Box::new(ast::Ast::default()),",
          "    };",
          "",
          "    writer.fmt_repetition(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    writer.output == \"+\"",
          "    writer.output == \"+?\"",
          "    writer.output == \"??\"",
          "    writer.output == \"*?\"",
          "    writer.output == \"*\"",
          "    writer.output == \"?\"",
          "    writer.output == \"{2,}\"",
          "    writer.output == \"{2,3}\""
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "",
          "    let ast = ast::Repetition {",
          "        span: Span::default(),",
          "        op: ast::RepetitionOp { kind: ast::RepetitionKind::OneOrMore },",
          "        greedy: true,",
          "        ast: Box::new(ast::Ast::default()),",
          "    };",
          "",
          "    writer.fmt_repetition(&ast).unwrap();",
          "    writer.output == \"+\"",
          "    writer.output == \"+?\"",
          "    writer.output == \"??\"",
          "    writer.output == \"*?\"",
          "    writer.output == \"*\"",
          "    writer.output == \"?\"",
          "    writer.output == \"{2,}\"",
          "    writer.output == \"{2,3}\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "",
          "    let ast = ast::Repetition {",
          "        span: Span::default(),",
          "        op: ast::RepetitionOp { kind: ast::RepetitionKind::ZeroOrMore },",
          "        greedy: false,",
          "        ast: Box::new(ast::Ast::default()),",
          "    };",
          "",
          "    writer.fmt_repetition(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Repetition { span: Span::default(), op: ast::RepetitionOp { kind: ast::RepetitionKind::OneOrMore }, greedy: false, ast: Box::new(ast::Ast::default()), };",
          "    writer.fmt_repetition(&ast).unwrap();",
          "    assert_eq!(writer.output, \"+?\");",
          "    let ast = ast::Repetition { span: Span::default(), op: ast::RepetitionOp { kind: ast::RepetitionKind::OneOrMore }, greedy: true, ast: Box::new(ast::Ast::default()), };",
          "    writer.fmt_repetition(&ast).unwrap();",
          "    assert_eq!(writer.output, \"+\");",
          "    let ast = ast::Repetition { span: Span::default(), op: ast::RepetitionOp { kind: ast::RepetitionKind::ZeroOrOne }, greedy: false, ast: Box::new(ast::Ast::default()), };",
          "    writer.fmt_repetition(&ast).unwrap();",
          "    assert_eq!(writer.output, \"??\");",
          "    let ast = ast::Repetition { span: Span::default(), op: ast::RepetitionOp { kind: ast::RepetitionKind::ZeroOrMore }, greedy: false, ast: Box::new(ast::Ast::default()), };",
          "    writer.fmt_repetition(&ast).unwrap();",
          "    assert_eq!(writer.output, \"*?\");",
          "    let ast = ast::Repetition { span: Span::default(), op: ast::RepetitionOp { kind: ast::RepetitionKind::Range(ast::RepetitionRange::Bounded(2, 5)) }, greedy: true, ast: Box::new(ast::Ast::default()), };",
          "    writer.fmt_repetition(&ast).unwrap();",
          "    assert_eq!(writer.output, \"{2,5}\");",
          "    let ast = ast::Repetition { span: Span::default(), op: ast::RepetitionOp { kind: ast::RepetitionKind::Range(ast::RepetitionRange::Bounded(2, 5)) }, greedy: false, ast: Box::new(ast::Ast::default()), };",
          "    writer.fmt_repetition(&ast).unwrap();",
          "    assert_eq!(writer.output, \"{2,5}?\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "",
          "    let ast = ast::Repetition {",
          "        span: Span::default(),",
          "        op: ast::RepetitionOp { kind: ast::RepetitionKind::ZeroOrMore },",
          "        greedy: false,",
          "        ast: Box::new(ast::Ast::default()),",
          "    };",
          "",
          "    writer.fmt_repetition(&ast).unwrap();",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Repetition { span: Span::default(), op: ast::RepetitionOp { kind: ast::RepetitionKind::OneOrMore }, greedy: false, ast: Box::new(ast::Ast::default()), };",
          "    writer.fmt_repetition(&ast).unwrap();",
          "    assert_eq!(writer.output, \"+?\");",
          "    let ast = ast::Repetition { span: Span::default(), op: ast::RepetitionOp { kind: ast::RepetitionKind::OneOrMore }, greedy: true, ast: Box::new(ast::Ast::default()), };",
          "    writer.fmt_repetition(&ast).unwrap();",
          "    assert_eq!(writer.output, \"+\");",
          "    let ast = ast::Repetition { span: Span::default(), op: ast::RepetitionOp { kind: ast::RepetitionKind::ZeroOrOne }, greedy: false, ast: Box::new(ast::Ast::default()), };",
          "    writer.fmt_repetition(&ast).unwrap();",
          "    assert_eq!(writer.output, \"??\");",
          "    let ast = ast::Repetition { span: Span::default(), op: ast::RepetitionOp { kind: ast::RepetitionKind::ZeroOrMore }, greedy: false, ast: Box::new(ast::Ast::default()), };",
          "    writer.fmt_repetition(&ast).unwrap();",
          "    assert_eq!(writer.output, \"*?\");",
          "    let ast = ast::Repetition { span: Span::default(), op: ast::RepetitionOp { kind: ast::RepetitionKind::Range(ast::RepetitionRange::Bounded(2, 5)) }, greedy: true, ast: Box::new(ast::Ast::default()), };",
          "    writer.fmt_repetition(&ast).unwrap();",
          "    assert_eq!(writer.output, \"{2,5}\");",
          "    let ast = ast::Repetition { span: Span::default(), op: ast::RepetitionOp { kind: ast::RepetitionKind::Range(ast::RepetitionRange::Bounded(2, 5)) }, greedy: false, ast: Box::new(ast::Ast::default()), };",
          "    writer.fmt_repetition(&ast).unwrap();",
          "    assert_eq!(writer.output, \"{2,5}?\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]