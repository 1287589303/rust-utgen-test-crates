[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "    ",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "",
          "    let ast = ast::Repetition {",
          "        span: Span::default(),",
          "        op: RepetitionOp { kind: RepetitionKind::Range(RepetitionRange::Bounded(0, 10)) },",
          "        greedy: false,",
          "        ast: Box::new(Ast::default()),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.fmt_repetition(&ast);",
          "}"
        ],
        "oracle": [
          "    visitor.fmt_repetition(&ast) == Ok(())",
          "    writer.output == \"{0,10}?\""
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "    ",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "",
          "    let ast = ast::Repetition {",
          "        span: Span::default(),",
          "        op: RepetitionOp { kind: RepetitionKind::Range(RepetitionRange::Bounded(0, 10)) },",
          "        greedy: false,",
          "        ast: Box::new(Ast::default()),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.fmt_repetition(&ast);",
          "    visitor.fmt_repetition(&ast) == Ok(())",
          "    writer.output == \"{0,10}?\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "    ",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "",
          "    let ast = ast::Repetition {",
          "        span: Span::default(),",
          "        op: RepetitionOp { kind: RepetitionKind::Range(RepetitionRange::Bounded(99, 100)) },",
          "        greedy: false,",
          "        ast: Box::new(Ast::default()),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.fmt_repetition(&ast);",
          "}"
        ],
        "oracle": [
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Repetition { span: Span::default(), op: RepetitionOp { kind: RepetitionKind::Range(RepetitionRange::Bounded(99, 100)) }, greedy: false, ast: Box::new(Ast::default()), };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let result = visitor.fmt_repetition(&ast);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(writer.output, \"{99,100}?\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "    ",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "",
          "    let ast = ast::Repetition {",
          "        span: Span::default(),",
          "        op: RepetitionOp { kind: RepetitionKind::Range(RepetitionRange::Bounded(99, 100)) },",
          "        greedy: false,",
          "        ast: Box::new(Ast::default()),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.fmt_repetition(&ast);",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Repetition { span: Span::default(), op: RepetitionOp { kind: RepetitionKind::Range(RepetitionRange::Bounded(99, 100)) }, greedy: false, ast: Box::new(Ast::default()), };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let result = visitor.fmt_repetition(&ast);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(writer.output, \"{99,100}?\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "    ",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "",
          "    let ast = ast::Repetition {",
          "        span: Span::default(),",
          "        op: RepetitionOp { kind: RepetitionKind::Range(RepetitionRange::Bounded(0, 0)) },",
          "        greedy: false,",
          "        ast: Box::new(Ast::default()),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.fmt_repetition(&ast);",
          "}"
        ],
        "oracle": [
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Repetition { span: Span::default(), op: RepetitionOp { kind: RepetitionKind::Range(RepetitionRange::Exactly(1)) }, greedy: false, ast: Box::new(Ast::default()), };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let result = visitor.fmt_repetition(&ast);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(writer.output, \"{1}?\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Repetition { span: Span::default(), op: RepetitionOp { kind: RepetitionKind::Range(RepetitionRange::AtLeast(2)) }, greedy: false, ast: Box::new(Ast::default()), };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let result = visitor.fmt_repetition(&ast);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(writer.output, \"{2}?\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Repetition { span: Span::default(), op: RepetitionOp { kind: RepetitionKind::Range(RepetitionRange::Bounded(1, 3)) }, greedy: false, ast: Box::new(Ast::default()), };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let result = visitor.fmt_repetition(&ast);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(writer.output, \"{1,3}?\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "    ",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "",
          "    let ast = ast::Repetition {",
          "        span: Span::default(),",
          "        op: RepetitionOp { kind: RepetitionKind::Range(RepetitionRange::Bounded(0, 0)) },",
          "        greedy: false,",
          "        ast: Box::new(Ast::default()),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.fmt_repetition(&ast);",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Repetition { span: Span::default(), op: RepetitionOp { kind: RepetitionKind::Range(RepetitionRange::Exactly(1)) }, greedy: false, ast: Box::new(Ast::default()), };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let result = visitor.fmt_repetition(&ast);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(writer.output, \"{1}?\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Repetition { span: Span::default(), op: RepetitionOp { kind: RepetitionKind::Range(RepetitionRange::AtLeast(2)) }, greedy: false, ast: Box::new(Ast::default()), };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let result = visitor.fmt_repetition(&ast);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(writer.output, \"{2}?\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Repetition { span: Span::default(), op: RepetitionOp { kind: RepetitionKind::Range(RepetitionRange::Bounded(1, 3)) }, greedy: false, ast: Box::new(Ast::default()), };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let result = visitor.fmt_repetition(&ast);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(writer.output, \"{1,3}?\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "    ",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "",
          "    let ast = ast::Repetition {",
          "        span: Span::default(),",
          "        op: RepetitionOp { kind: RepetitionKind::Range(RepetitionRange::AtLeast(1)) },",
          "        greedy: false,",
          "        ast: Box::new(Ast::default()),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.fmt_repetition(&ast);",
          "}"
        ],
        "oracle": [
          "    let ast = ast::Repetition { span: Span::default(), op: RepetitionOp { kind: RepetitionKind::Range(RepetitionRange::AtLeast(1)) }, greedy: false, ast: Box::new(Ast::default()), };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let result = visitor.fmt_repetition(&ast);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(writer.output, \"{1}?\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "    ",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "",
          "    let ast = ast::Repetition {",
          "        span: Span::default(),",
          "        op: RepetitionOp { kind: RepetitionKind::Range(RepetitionRange::AtLeast(1)) },",
          "        greedy: false,",
          "        ast: Box::new(Ast::default()),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.fmt_repetition(&ast);",
          "    let ast = ast::Repetition { span: Span::default(), op: RepetitionOp { kind: RepetitionKind::Range(RepetitionRange::AtLeast(1)) }, greedy: false, ast: Box::new(Ast::default()), };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let result = visitor.fmt_repetition(&ast);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(writer.output, \"{1}?\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]