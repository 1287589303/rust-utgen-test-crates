[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let pid = PatternID(SmallIndex(1));",
          "    let group_index = 1;",
          "",
          "    let result = group_info.slot(pid, group_index);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(pid.as_usize() * 2));"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let pid = PatternID(SmallIndex(1));",
          "    let group_index = 1;",
          "",
          "    let result = group_info.slot(pid, group_index);",
          "    assert_eq!(result, Some(pid.as_usize() * 2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut group_info = GroupInfo::default();",
          "    group_info.0.slot_ranges.push((SmallIndex(2), SmallIndex(4)));",
          "    ",
          "    let pid = PatternID(SmallIndex(0));",
          "    let group_index = 1;",
          "",
          "    let result = group_info.slot(pid, group_index);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(pid.as_usize() * 2));"
        ],
        "code": [
          "{",
          "    let mut group_info = GroupInfo::default();",
          "    group_info.0.slot_ranges.push((SmallIndex(2), SmallIndex(4)));",
          "    ",
          "    let pid = PatternID(SmallIndex(0));",
          "    let group_index = 1;",
          "",
          "    let result = group_info.slot(pid, group_index);",
          "    assert_eq!(result, Some(pid.as_usize() * 2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut group_info = GroupInfo::default();",
          "    group_info.0.slot_ranges.push((SmallIndex(2), SmallIndex(4)));",
          "    ",
          "    let pid = PatternID(SmallIndex(1));",
          "    let group_index = 1;",
          "",
          "    let result = group_info.slot(pid, group_index);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(2));"
        ],
        "code": [
          "{",
          "    let mut group_info = GroupInfo::default();",
          "    group_info.0.slot_ranges.push((SmallIndex(2), SmallIndex(4)));",
          "    ",
          "    let pid = PatternID(SmallIndex(1));",
          "    let group_index = 1;",
          "",
          "    let result = group_info.slot(pid, group_index);",
          "    assert_eq!(result, Some(2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]