[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let pid = PatternID::must(SmallIndex::new_unchecked(0).as_usize());",
          "    let group_index = 0;",
          "    let _ = group_info.slot(pid, group_index);",
          "}"
        ],
        "oracle": [
          "    let group_info = GroupInfo::default();",
          "    let pid = PatternID::must(SmallIndex::new_unchecked(0).as_usize());",
          "    let group_index = 0;",
          "    assert_eq!(group_info.slot(pid, group_index), Some(pid.as_usize() * 2));"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let pid = PatternID::must(SmallIndex::new_unchecked(0).as_usize());",
          "    let group_index = 0;",
          "    let _ = group_info.slot(pid, group_index);",
          "    let group_info = GroupInfo::default();",
          "    let pid = PatternID::must(SmallIndex::new_unchecked(0).as_usize());",
          "    let group_index = 0;",
          "    assert_eq!(group_info.slot(pid, group_index), Some(pid.as_usize() * 2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo {",
          "        0: Arc::new(GroupInfoInner {",
          "            slot_ranges: vec![(SmallIndex::new_unchecked(1), SmallIndex::new_unchecked(2))],",
          "            ..Default::default()",
          "        }),",
          "    };",
          "    let pid = PatternID::must(SmallIndex::new_unchecked(0).as_usize());",
          "    let group_index = 1;",
          "    let _ = group_info.slot(pid, group_index);",
          "}"
        ],
        "oracle": [
          "    let group_info = GroupInfo { 0: Arc::new(GroupInfoInner { slot_ranges: vec![(SmallIndex::new_unchecked(1), SmallIndex::new_unchecked(2))], ..Default::default() }), };",
          "    let pid = PatternID::must(SmallIndex::new_unchecked(0).as_usize());",
          "    let group_index = 1;",
          "    let expected_slot = Some(1 + ((group_index - 1) * 2));",
          "    assert_eq!(group_info.slot(pid, group_index), expected_slot);"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo {",
          "        0: Arc::new(GroupInfoInner {",
          "            slot_ranges: vec![(SmallIndex::new_unchecked(1), SmallIndex::new_unchecked(2))],",
          "            ..Default::default()",
          "        }),",
          "    };",
          "    let pid = PatternID::must(SmallIndex::new_unchecked(0).as_usize());",
          "    let group_index = 1;",
          "    let _ = group_info.slot(pid, group_index);",
          "    let group_info = GroupInfo { 0: Arc::new(GroupInfoInner { slot_ranges: vec![(SmallIndex::new_unchecked(1), SmallIndex::new_unchecked(2))], ..Default::default() }), };",
          "    let pid = PatternID::must(SmallIndex::new_unchecked(0).as_usize());",
          "    let group_index = 1;",
          "    let expected_slot = Some(1 + ((group_index - 1) * 2));",
          "    assert_eq!(group_info.slot(pid, group_index), expected_slot);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]