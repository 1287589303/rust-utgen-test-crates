[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let valid_kind_bytes: [u8; 4] = [0, 0, 0, 0]; // Represents StartKind::Both",
          "    let invalid_map_bytes: [u8; 4] = [6, 0, 0, 0]; // Invalid Start configuration (out of range)",
          "    let slice: Vec<u8> = [",
          "        valid_kind_bytes.as_ref(),",
          "        invalid_map_bytes.as_ref(),",
          "    ]",
          "    .concat();",
          "",
          "    let result = unsafe { StartTable::from_bytes_unchecked(&slice) };",
          "}"
        ],
        "oracle": [
          "    let valid_kind_bytes: [u8; 4] = [0, 0, 0, 0];",
          "    let invalid_map_bytes: [u8; 4] = [6, 0, 0, 0];",
          "    let slice: Vec<u8> = [valid_kind_bytes.as_ref(), invalid_map_bytes.as_ref()].concat();",
          "    ",
          "    assert!(unsafe { StartTable::from_bytes_unchecked(&slice) }.is_err());"
        ],
        "code": [
          "{",
          "    let valid_kind_bytes: [u8; 4] = [0, 0, 0, 0]; // Represents StartKind::Both",
          "    let invalid_map_bytes: [u8; 4] = [6, 0, 0, 0]; // Invalid Start configuration (out of range)",
          "    let slice: Vec<u8> = [",
          "        valid_kind_bytes.as_ref(),",
          "        invalid_map_bytes.as_ref(),",
          "    ]",
          "    .concat();",
          "",
          "    let result = unsafe { StartTable::from_bytes_unchecked(&slice) };",
          "    let valid_kind_bytes: [u8; 4] = [0, 0, 0, 0];",
          "    let invalid_map_bytes: [u8; 4] = [6, 0, 0, 0];",
          "    let slice: Vec<u8> = [valid_kind_bytes.as_ref(), invalid_map_bytes.as_ref()].concat();",
          "    ",
          "    assert!(unsafe { StartTable::from_bytes_unchecked(&slice) }.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let valid_kind_bytes: [u8; 4] = [0, 0, 0, 0]; // Represents StartKind::Both",
          "    let empty_map_bytes: Vec<u8> = vec![0; 256]; // StartByteMap expects 256 bytes",
          "    let slice: Vec<u8> = [",
          "        valid_kind_bytes.as_ref(),",
          "        empty_map_bytes.as_ref(),",
          "    ]",
          "    .concat();",
          "",
          "    let result = unsafe { StartTable::from_bytes_unchecked(&slice) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(result.unwrap_err().is::<DeserializeError>());",
          "    assert!(matches!(result.unwrap_err(), DeserializeError::generic(\"found invalid starting configuration\")));",
          "    assert!(result.unwrap().1 > 0);",
          "    assert!(result.unwrap().0.kind == StartKind::Both);",
          "    assert_eq!(result.unwrap().0.start_map.map[0], Start::NonWordByte);"
        ],
        "code": [
          "{",
          "    let valid_kind_bytes: [u8; 4] = [0, 0, 0, 0]; // Represents StartKind::Both",
          "    let empty_map_bytes: Vec<u8> = vec![0; 256]; // StartByteMap expects 256 bytes",
          "    let slice: Vec<u8> = [",
          "        valid_kind_bytes.as_ref(),",
          "        empty_map_bytes.as_ref(),",
          "    ]",
          "    .concat();",
          "",
          "    let result = unsafe { StartTable::from_bytes_unchecked(&slice) };",
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(result.unwrap_err().is::<DeserializeError>());",
          "    assert!(matches!(result.unwrap_err(), DeserializeError::generic(\"found invalid starting configuration\")));",
          "    assert!(result.unwrap().1 > 0);",
          "    assert!(result.unwrap().0.kind == StartKind::Both);",
          "    assert_eq!(result.unwrap().0.start_map.map[0], Start::NonWordByte);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let valid_kind_bytes: [u8; 4] = [1, 0, 0, 0]; // Represents StartKind::Unanchored",
          "    let non_word_map_bytes: [u8; 4] = [5, 0, 0, 0]; // Invalid Start configuration (out of range)",
          "    let slice: Vec<u8> = [",
          "        valid_kind_bytes.as_ref(),",
          "        non_word_map_bytes.as_ref(),",
          "    ]",
          "    .concat();",
          "",
          "    let result = unsafe { StartTable::from_bytes_unchecked(&slice) };",
          "}"
        ],
        "oracle": [
          "    let valid_kind_bytes: [u8; 4] = [1, 0, 0, 0]; // Represents StartKind::Unanchored",
          "    let non_word_map_bytes: [u8; 4] = [5, 0, 0, 0]; // Invalid Start configuration (out of range)",
          "    let slice: Vec<u8> = [valid_kind_bytes.as_ref(), non_word_map_bytes.as_ref()].concat();",
          "    let result = unsafe { StartTable::from_bytes_unchecked(&slice) };",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let valid_kind_bytes: [u8; 4] = [1, 0, 0, 0]; // Represents StartKind::Unanchored",
          "    let non_word_map_bytes: [u8; 4] = [5, 0, 0, 0]; // Invalid Start configuration (out of range)",
          "    let slice: Vec<u8> = [",
          "        valid_kind_bytes.as_ref(),",
          "        non_word_map_bytes.as_ref(),",
          "    ]",
          "    .concat();",
          "",
          "    let result = unsafe { StartTable::from_bytes_unchecked(&slice) };",
          "    let valid_kind_bytes: [u8; 4] = [1, 0, 0, 0]; // Represents StartKind::Unanchored",
          "    let non_word_map_bytes: [u8; 4] = [5, 0, 0, 0]; // Invalid Start configuration (out of range)",
          "    let slice: Vec<u8> = [valid_kind_bytes.as_ref(), non_word_map_bytes.as_ref()].concat();",
          "    let result = unsafe { StartTable::from_bytes_unchecked(&slice) };",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let valid_kind_bytes: [u8; 4] = [2, 0, 0, 0]; // Represents StartKind::Anchored",
          "    let invalid_start_table_bytes: Vec<u8> = vec![0; 12]; // Less than 256 bytes for StartByteMap",
          "    let slice: Vec<u8> = [",
          "        valid_kind_bytes.as_ref(),",
          "        invalid_start_table_bytes.as_ref(),",
          "    ]",
          "    .concat();",
          "",
          "    let result = unsafe { StartTable::from_bytes_unchecked(&slice) };",
          "}"
        ],
        "oracle": [
          "    let valid_kind_bytes: [u8; 4] = [2, 0, 0, 0]; // Represents StartKind::Anchored",
          "    let invalid_start_table_bytes: Vec<u8> = vec![0; 12]; // Less than 256 bytes for StartByteMap",
          "    let slice: Vec<u8> = [",
          "    valid_kind_bytes.as_ref(),",
          "    invalid_start_table_bytes.as_ref(),",
          "    ]",
          "    .concat();",
          "    ",
          "    let result = unsafe { StartTable::from_bytes_unchecked(&slice) };",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().0, DeserializeError::generic(\"found invalid starting configuration\"));"
        ],
        "code": [
          "{",
          "    let valid_kind_bytes: [u8; 4] = [2, 0, 0, 0]; // Represents StartKind::Anchored",
          "    let invalid_start_table_bytes: Vec<u8> = vec![0; 12]; // Less than 256 bytes for StartByteMap",
          "    let slice: Vec<u8> = [",
          "        valid_kind_bytes.as_ref(),",
          "        invalid_start_table_bytes.as_ref(),",
          "    ]",
          "    .concat();",
          "",
          "    let result = unsafe { StartTable::from_bytes_unchecked(&slice) };",
          "    let valid_kind_bytes: [u8; 4] = [2, 0, 0, 0]; // Represents StartKind::Anchored",
          "    let invalid_start_table_bytes: Vec<u8> = vec![0; 12]; // Less than 256 bytes for StartByteMap",
          "    let slice: Vec<u8> = [",
          "    valid_kind_bytes.as_ref(),",
          "    invalid_start_table_bytes.as_ref(),",
          "    ]",
          "    .concat();",
          "    ",
          "    let result = unsafe { StartTable::from_bytes_unchecked(&slice) };",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().0, DeserializeError::generic(\"found invalid starting configuration\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]