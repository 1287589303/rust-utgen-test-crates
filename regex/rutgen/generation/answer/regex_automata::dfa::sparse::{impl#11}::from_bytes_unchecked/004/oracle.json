[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind_bytes: [u8; 4] = 0u32.to_le_bytes();  // StartKind::Both",
          "    let start_map_bytes: [u8; 256] = [0; 256]; // Filling with valid Start configurations (NonWordByte)",
          "    let stride_bytes: [u8; 4] = 7u32.to_le_bytes(); // Invalid stride (not equal to Start::len())",
          "    let pattern_len_bytes: [u8; 4] = (0u32).to_le_bytes(); // Valid pattern length",
          "    let universal_unanchored_bytes: [u8; 4] = (0u32).to_le_bytes(); // A value within the valid range",
          "    let universal_anchored_bytes: [u8; 4] = (0u32).to_le_bytes(); // A value within the valid range",
          "",
          "    let mut slice: Vec<u8> = Vec::new();",
          "    slice.extend_from_slice(&kind_bytes);",
          "    slice.extend_from_slice(&start_map_bytes);",
          "    slice.extend_from_slice(&stride_bytes);",
          "    slice.extend_from_slice(&pattern_len_bytes);",
          "    slice.extend_from_slice(&universal_unanchored_bytes);",
          "    slice.extend_from_slice(&universal_anchored_bytes);",
          "    slice.extend_from_slice(&[0; 48]); // Padding for the table (this will not be used)",
          "",
          "    let result = unsafe { from_bytes_unchecked(&mut slice) };",
          "}"
        ],
        "oracle": [
          "    let kind_bytes: [u8; 4] = 0u32.to_le_bytes();",
          "    let start_map_bytes: [u8; 256] = [0; 256];",
          "    let stride_bytes: [u8; 4] = 7u32.to_le_bytes();",
          "    let pattern_len_bytes: [u8; 4] = (0u32).to_le_bytes();",
          "    let universal_unanchored_bytes: [u8; 4] = (0u32).to_le_bytes();",
          "    let universal_anchored_bytes: [u8; 4] = (0u32).to_le_bytes();",
          "    ",
          "    let mut slice: Vec<u8> = Vec::new();",
          "    slice.extend_from_slice(&kind_bytes);",
          "    slice.extend_from_slice(&start_map_bytes);",
          "    slice.extend_from_slice(&stride_bytes);",
          "    slice.extend_from_slice(&pattern_len_bytes);",
          "    slice.extend_from_slice(&universal_unanchored_bytes);",
          "    slice.extend_from_slice(&universal_anchored_bytes);",
          "    slice.extend_from_slice(&[0; 48]);",
          "    ",
          "    let result = unsafe { from_bytes_unchecked(&mut slice) };",
          "    assert_eq!(result, Err(DeserializeError::generic(\"invalid sparse starting table stride\")));"
        ],
        "code": [
          "{",
          "    let kind_bytes: [u8; 4] = 0u32.to_le_bytes();  // StartKind::Both",
          "    let start_map_bytes: [u8; 256] = [0; 256]; // Filling with valid Start configurations (NonWordByte)",
          "    let stride_bytes: [u8; 4] = 7u32.to_le_bytes(); // Invalid stride (not equal to Start::len())",
          "    let pattern_len_bytes: [u8; 4] = (0u32).to_le_bytes(); // Valid pattern length",
          "    let universal_unanchored_bytes: [u8; 4] = (0u32).to_le_bytes(); // A value within the valid range",
          "    let universal_anchored_bytes: [u8; 4] = (0u32).to_le_bytes(); // A value within the valid range",
          "",
          "    let mut slice: Vec<u8> = Vec::new();",
          "    slice.extend_from_slice(&kind_bytes);",
          "    slice.extend_from_slice(&start_map_bytes);",
          "    slice.extend_from_slice(&stride_bytes);",
          "    slice.extend_from_slice(&pattern_len_bytes);",
          "    slice.extend_from_slice(&universal_unanchored_bytes);",
          "    slice.extend_from_slice(&universal_anchored_bytes);",
          "    slice.extend_from_slice(&[0; 48]); // Padding for the table (this will not be used)",
          "",
          "    let result = unsafe { from_bytes_unchecked(&mut slice) };",
          "    let kind_bytes: [u8; 4] = 0u32.to_le_bytes();",
          "    let start_map_bytes: [u8; 256] = [0; 256];",
          "    let stride_bytes: [u8; 4] = 7u32.to_le_bytes();",
          "    let pattern_len_bytes: [u8; 4] = (0u32).to_le_bytes();",
          "    let universal_unanchored_bytes: [u8; 4] = (0u32).to_le_bytes();",
          "    let universal_anchored_bytes: [u8; 4] = (0u32).to_le_bytes();",
          "    ",
          "    let mut slice: Vec<u8> = Vec::new();",
          "    slice.extend_from_slice(&kind_bytes);",
          "    slice.extend_from_slice(&start_map_bytes);",
          "    slice.extend_from_slice(&stride_bytes);",
          "    slice.extend_from_slice(&pattern_len_bytes);",
          "    slice.extend_from_slice(&universal_unanchored_bytes);",
          "    slice.extend_from_slice(&universal_anchored_bytes);",
          "    slice.extend_from_slice(&[0; 48]);",
          "    ",
          "    let result = unsafe { from_bytes_unchecked(&mut slice) };",
          "    assert_eq!(result, Err(DeserializeError::generic(\"invalid sparse starting table stride\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]