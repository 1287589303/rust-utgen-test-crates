[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let builder = Builder::new();",
          "    let len = builder.pattern_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 0);",
          "    let builder = Builder::new();",
          "    builder.start_pattern().unwrap();",
          "    let len_after_start = builder.pattern_len();",
          "    assert_eq!(len_after_start, 1);",
          "    builder.finish_pattern(StateID(SmallIndex::default())).unwrap();",
          "    let final_len = builder.pattern_len();",
          "    assert_eq!(final_len, 1);"
        ],
        "code": [
          "{",
          "    let builder = Builder::new();",
          "    let len = builder.pattern_len();",
          "    assert_eq!(len, 0);",
          "    let builder = Builder::new();",
          "    builder.start_pattern().unwrap();",
          "    let len_after_start = builder.pattern_len();",
          "    assert_eq!(len_after_start, 1);",
          "    builder.finish_pattern(StateID(SmallIndex::default())).unwrap();",
          "    let final_len = builder.pattern_len();",
          "    assert_eq!(final_len, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let _ = builder.start_pattern();",
          "    let _ = builder.finish_pattern(StateID::default());",
          "    let len = builder.pattern_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 1);"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let _ = builder.start_pattern();",
          "    let _ = builder.finish_pattern(StateID::default());",
          "    let len = builder.pattern_len();",
          "    assert_eq!(len, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    for _ in 0..10 {",
          "        let _ = builder.start_pattern();",
          "        let _ = builder.finish_pattern(StateID::default());",
          "    }",
          "    let len = builder.pattern_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.pattern_len(), 10);"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    for _ in 0..10 {",
          "        let _ = builder.start_pattern();",
          "        let _ = builder.finish_pattern(StateID::default());",
          "    }",
          "    let len = builder.pattern_len();",
          "    assert_eq!(builder.pattern_len(), 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]