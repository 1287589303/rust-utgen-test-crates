[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_builder_empty = StateBuilderEmpty::new();",
          "    let capacity = state_builder_empty.capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(capacity, 0);"
        ],
        "code": [
          "{",
          "    let state_builder_empty = StateBuilderEmpty::new();",
          "    let capacity = state_builder_empty.capacity();",
          "    assert_eq!(capacity, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_builder_empty = StateBuilderEmpty(vec![0; 0]);",
          "    let capacity = state_builder_empty.capacity();",
          "}"
        ],
        "oracle": [
          "    let state_builder_empty = StateBuilderEmpty(vec![0; 0]);",
          "    assert_eq!(state_builder_empty.capacity(), 0);",
          "    let state_builder_empty = StateBuilderEmpty(vec![0; 1]);",
          "    assert_eq!(state_builder_empty.capacity(), 1);",
          "    let state_builder_empty = StateBuilderEmpty(vec![0; 10]);",
          "    assert_eq!(state_builder_empty.capacity(), 10);",
          "    let state_builder_empty = StateBuilderEmpty(vec![0; 100]);",
          "    assert_eq!(state_builder_empty.capacity(), 100);"
        ],
        "code": [
          "{",
          "    let state_builder_empty = StateBuilderEmpty(vec![0; 0]);",
          "    let capacity = state_builder_empty.capacity();",
          "    let state_builder_empty = StateBuilderEmpty(vec![0; 0]);",
          "    assert_eq!(state_builder_empty.capacity(), 0);",
          "    let state_builder_empty = StateBuilderEmpty(vec![0; 1]);",
          "    assert_eq!(state_builder_empty.capacity(), 1);",
          "    let state_builder_empty = StateBuilderEmpty(vec![0; 10]);",
          "    assert_eq!(state_builder_empty.capacity(), 10);",
          "    let state_builder_empty = StateBuilderEmpty(vec![0; 100]);",
          "    assert_eq!(state_builder_empty.capacity(), 100);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_builder_empty = StateBuilderEmpty(vec![0; 5]);",
          "    let capacity = state_builder_empty.capacity();",
          "}"
        ],
        "oracle": [
          "    let state_builder_empty = StateBuilderEmpty(vec![0; 5]);",
          "    let capacity = state_builder_empty.capacity();",
          "    assert_eq!(capacity, 5);",
          "    let state_builder_empty_zero = StateBuilderEmpty(Vec::new());",
          "    let capacity_zero = state_builder_empty_zero.capacity();",
          "    assert_eq!(capacity_zero, 0);",
          "    let state_builder_empty_large = StateBuilderEmpty(vec![0; 100]);",
          "    let capacity_large = state_builder_empty_large.capacity();",
          "    assert_eq!(capacity_large, 100);"
        ],
        "code": [
          "{",
          "    let state_builder_empty = StateBuilderEmpty(vec![0; 5]);",
          "    let capacity = state_builder_empty.capacity();",
          "    let state_builder_empty = StateBuilderEmpty(vec![0; 5]);",
          "    let capacity = state_builder_empty.capacity();",
          "    assert_eq!(capacity, 5);",
          "    let state_builder_empty_zero = StateBuilderEmpty(Vec::new());",
          "    let capacity_zero = state_builder_empty_zero.capacity();",
          "    assert_eq!(capacity_zero, 0);",
          "    let state_builder_empty_large = StateBuilderEmpty(vec![0; 100]);",
          "    let capacity_large = state_builder_empty_large.capacity();",
          "    assert_eq!(capacity_large, 100);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_builder_empty = StateBuilderEmpty(vec![0; 10]);",
          "    let capacity = state_builder_empty.capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(capacity, 10);"
        ],
        "code": [
          "{",
          "    let state_builder_empty = StateBuilderEmpty(vec![0; 10]);",
          "    let capacity = state_builder_empty.capacity();",
          "    assert_eq!(capacity, 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_builder_empty = StateBuilderEmpty(vec![0; 100]);",
          "    let capacity = state_builder_empty.capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(capacity, 100);",
          "    let state_builder_empty_empty = StateBuilderEmpty(vec![]);",
          "    assert_eq!(state_builder_empty_empty.capacity(), 0);",
          "    let state_builder_empty_large = StateBuilderEmpty(vec![0; 1000]);",
          "    assert_eq!(state_builder_empty_large.capacity(), 1000);"
        ],
        "code": [
          "{",
          "    let state_builder_empty = StateBuilderEmpty(vec![0; 100]);",
          "    let capacity = state_builder_empty.capacity();",
          "    assert_eq!(capacity, 100);",
          "    let state_builder_empty_empty = StateBuilderEmpty(vec![]);",
          "    assert_eq!(state_builder_empty_empty.capacity(), 0);",
          "    let state_builder_empty_large = StateBuilderEmpty(vec![0; 1000]);",
          "    assert_eq!(state_builder_empty_large.capacity(), 1000);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_builder_empty = StateBuilderEmpty(vec![0; std::usize::MAX]);",
          "    let capacity = state_builder_empty.capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(capacity, std::usize::MAX);"
        ],
        "code": [
          "{",
          "    let state_builder_empty = StateBuilderEmpty(vec![0; std::usize::MAX]);",
          "    let capacity = state_builder_empty.capacity();",
          "    assert_eq!(capacity, std::usize::MAX);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]