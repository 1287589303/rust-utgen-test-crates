[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let index = SmallIndex::MAX.as_usize() + 1;",
          "    let result = SmallIndex::try_from(index);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().attempted, index as u64);"
        ],
        "code": [
          "{",
          "    let index = SmallIndex::MAX.as_usize() + 1;",
          "    let result = SmallIndex::try_from(index);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().attempted, index as u64);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let index = SmallIndex::MAX.as_usize() + 2;",
          "    let result = SmallIndex::try_from(index);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().attempted, (SmallIndex::MAX.as_usize() + 2) as u64);"
        ],
        "code": [
          "{",
          "    let index = SmallIndex::MAX.as_usize() + 2;",
          "    let result = SmallIndex::try_from(index);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().attempted, (SmallIndex::MAX.as_usize() + 2) as u64);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let index = SmallIndex::MAX.as_usize() + 10;",
          "    let result = SmallIndex::try_from(index);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    let error = result.unwrap_err();",
          "    assert_eq!(error.attempted, (SmallIndex::MAX.as_usize() + 10) as u64);"
        ],
        "code": [
          "{",
          "    let index = SmallIndex::MAX.as_usize() + 10;",
          "    let result = SmallIndex::try_from(index);",
          "    assert!(result.is_err());",
          "    let error = result.unwrap_err();",
          "    assert_eq!(error.attempted, (SmallIndex::MAX.as_usize() + 10) as u64);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]