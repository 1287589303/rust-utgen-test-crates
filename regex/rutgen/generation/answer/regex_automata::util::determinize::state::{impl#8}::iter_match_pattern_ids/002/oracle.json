[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRepr<'a>(&'a [u8]);",
          "",
          "    let data: [u8; 20] = [0b00000001, 0b00000010, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0];",
          "    let repr = TestRepr(&data);",
          "",
          "    repr.iter_match_pattern_ids(|pid| {",
          "        // Processing the pattern ID",
          "    });",
          "}"
        ],
        "oracle": [
          "    assert!(repr.is_match());",
          "    assert!(repr.has_pattern_ids());",
          "    let expected_pattern_ids = vec![PatternID::new_unchecked(1), PatternID::new_unchecked(2), PatternID::new_unchecked(3), PatternID::new_unchecked(4)];",
          "    let mut collected_pattern_ids = Vec::new();",
          "    repr.iter_match_pattern_ids(|pid| collected_pattern_ids.push(pid));",
          "    assert_eq!(collected_pattern_ids, expected_pattern_ids);",
          "    assert!(!&repr.0[13..repr.pattern_offset_end()].is_empty());"
        ],
        "code": [
          "{",
          "    struct TestRepr<'a>(&'a [u8]);",
          "",
          "    let data: [u8; 20] = [0b00000001, 0b00000010, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0];",
          "    let repr = TestRepr(&data);",
          "",
          "    repr.iter_match_pattern_ids(|pid| {",
          "        // Processing the pattern ID",
          "    });",
          "    assert!(repr.is_match());",
          "    assert!(repr.has_pattern_ids());",
          "    let expected_pattern_ids = vec![PatternID::new_unchecked(1), PatternID::new_unchecked(2), PatternID::new_unchecked(3), PatternID::new_unchecked(4)];",
          "    let mut collected_pattern_ids = Vec::new();",
          "    repr.iter_match_pattern_ids(|pid| collected_pattern_ids.push(pid));",
          "    assert_eq!(collected_pattern_ids, expected_pattern_ids);",
          "    assert!(!&repr.0[13..repr.pattern_offset_end()].is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRepr<'a>(&'a [u8]);",
          "",
          "    let data: [u8; 13] = [0b00000001, 0b00000010, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];",
          "    let repr = TestRepr(&data);",
          "",
          "    repr.iter_match_pattern_ids(|pid| {",
          "        // This should only receive PatternID::ZERO",
          "    });",
          "}"
        ],
        "oracle": [
          "    assert!(repr.is_match());",
          "    assert!(repr.has_pattern_ids());",
          "    assert!(repr.0.len() >= 13);",
          "    assert_eq!(repr.0[0] & (1 << 0) > 0, true);",
          "    assert_eq!(repr.0[0] & (1 << 1) > 0, true);",
          "    repr.iter_match_pattern_ids(|pid| {",
          "    assert_eq!(pid, PatternID::ZERO);",
          "    });"
        ],
        "code": [
          "{",
          "    struct TestRepr<'a>(&'a [u8]);",
          "",
          "    let data: [u8; 13] = [0b00000001, 0b00000010, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];",
          "    let repr = TestRepr(&data);",
          "",
          "    repr.iter_match_pattern_ids(|pid| {",
          "        // This should only receive PatternID::ZERO",
          "    });",
          "    assert!(repr.is_match());",
          "    assert!(repr.has_pattern_ids());",
          "    assert!(repr.0.len() >= 13);",
          "    assert_eq!(repr.0[0] & (1 << 0) > 0, true);",
          "    assert_eq!(repr.0[0] & (1 << 1) > 0, true);",
          "    repr.iter_match_pattern_ids(|pid| {",
          "    assert_eq!(pid, PatternID::ZERO);",
          "    });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]