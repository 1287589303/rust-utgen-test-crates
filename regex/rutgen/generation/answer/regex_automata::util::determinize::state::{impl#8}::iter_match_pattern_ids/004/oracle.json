[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_repr = Repr(&[0, 0, 0, 0, 0, 0, 0, 0, 0]); // First byte not set for matching",
          "    state_repr.iter_match_pattern_ids(|_| {",
          "        // no-op",
          "    });",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state_repr.is_match(), false);",
          "    assert_eq!(state_repr.has_pattern_ids(), false);",
          "    assert_eq!(state_repr.pattern_offset_end(), 9);",
          "    assert_eq!(state_repr.iter_match_pattern_ids(|pid| pid), ());",
          "    assert_eq!(state_repr.0[0] & (1 << 0), 0);",
          "    assert_eq!(state_repr.0[0] & (1 << 1), 0);"
        ],
        "code": [
          "{",
          "    let state_repr = Repr(&[0, 0, 0, 0, 0, 0, 0, 0, 0]); // First byte not set for matching",
          "    state_repr.iter_match_pattern_ids(|_| {",
          "        // no-op",
          "    });",
          "    assert_eq!(state_repr.is_match(), false);",
          "    assert_eq!(state_repr.has_pattern_ids(), false);",
          "    assert_eq!(state_repr.pattern_offset_end(), 9);",
          "    assert_eq!(state_repr.iter_match_pattern_ids(|pid| pid), ());",
          "    assert_eq!(state_repr.0[0] & (1 << 0), 0);",
          "    assert_eq!(state_repr.0[0] & (1 << 1), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_repr = Repr(&[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]); // First byte not set for matching",
          "    state_repr.iter_match_pattern_ids(|_| {",
          "        // no-op",
          "    });",
          "}"
        ],
        "oracle": [
          "    assert!(!state_repr.is_match());",
          "    state_repr.iter_match_pattern_ids(|pid| assert_eq!(pid, PatternID::ZERO));",
          "    assert_eq!(state_repr.0[0], 0);",
          "    assert_eq!(state_repr.pattern_offset_end(), 9);"
        ],
        "code": [
          "{",
          "    let state_repr = Repr(&[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]); // First byte not set for matching",
          "    state_repr.iter_match_pattern_ids(|_| {",
          "        // no-op",
          "    });",
          "    assert!(!state_repr.is_match());",
          "    state_repr.iter_match_pattern_ids(|pid| assert_eq!(pid, PatternID::ZERO));",
          "    assert_eq!(state_repr.0[0], 0);",
          "    assert_eq!(state_repr.pattern_offset_end(), 9);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_repr = Repr(&[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8]); // No match",
          "    state_repr.iter_match_pattern_ids(|_| {",
          "        // no-op",
          "    });",
          "}"
        ],
        "oracle": [
          "    assert!(!state_repr.is_match());",
          "    assert_eq!(state_repr.0, &[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8]);",
          "    assert!(!state_repr.has_pattern_ids());",
          "    assert_eq!(state_repr.iter_match_pattern_ids(|_| ()), ());"
        ],
        "code": [
          "{",
          "    let state_repr = Repr(&[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8]); // No match",
          "    state_repr.iter_match_pattern_ids(|_| {",
          "        // no-op",
          "    });",
          "    assert!(!state_repr.is_match());",
          "    assert_eq!(state_repr.0, &[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8]);",
          "    assert!(!state_repr.has_pattern_ids());",
          "    assert_eq!(state_repr.iter_match_pattern_ids(|_| ()), ());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_repr = Repr(&[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]); // No match",
          "    state_repr.iter_match_pattern_ids(|_| {",
          "        // no-op",
          "    });",
          "}"
        ],
        "oracle": [
          "    assert!(!state_repr.is_match());",
          "    assert!(!state_repr.has_pattern_ids());",
          "    assert_eq!(state_repr.0.len(), 18);",
          "    assert_eq!(state_repr.0[0], 0);",
          "    assert_eq!(state_repr.0[1], 0);",
          "    assert_eq!(state_repr.0[2], 0);",
          "    assert_eq!(state_repr.0[3], 0);",
          "    assert_eq!(state_repr.0[9], 1);",
          "    assert_eq!(state_repr.0[10], 2);",
          "    assert_eq!(state_repr.0[11], 3);",
          "    assert_eq!(state_repr.0[12], 4);",
          "    assert_eq!(state_repr.0[13], 5);",
          "    assert_eq!(state_repr.0[14], 6);",
          "    assert_eq!(state_repr.0[15], 7);",
          "    assert_eq!(state_repr.0[16], 8);",
          "    assert_eq!(state_repr.0[17], 9);"
        ],
        "code": [
          "{",
          "    let state_repr = Repr(&[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]); // No match",
          "    state_repr.iter_match_pattern_ids(|_| {",
          "        // no-op",
          "    });",
          "    assert!(!state_repr.is_match());",
          "    assert!(!state_repr.has_pattern_ids());",
          "    assert_eq!(state_repr.0.len(), 18);",
          "    assert_eq!(state_repr.0[0], 0);",
          "    assert_eq!(state_repr.0[1], 0);",
          "    assert_eq!(state_repr.0[2], 0);",
          "    assert_eq!(state_repr.0[3], 0);",
          "    assert_eq!(state_repr.0[9], 1);",
          "    assert_eq!(state_repr.0[10], 2);",
          "    assert_eq!(state_repr.0[11], 3);",
          "    assert_eq!(state_repr.0[12], 4);",
          "    assert_eq!(state_repr.0[13], 5);",
          "    assert_eq!(state_repr.0[14], 6);",
          "    assert_eq!(state_repr.0[15], 7);",
          "    assert_eq!(state_repr.0[16], 8);",
          "    assert_eq!(state_repr.0[17], 9);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_repr = Repr(&[0; 9]); // First byte not set for matching",
          "    state_repr.iter_match_pattern_ids(|_| {",
          "        // no-op",
          "    });",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state_repr.is_match(), false);",
          "    assert_eq!(state_repr.has_pattern_ids(), false);",
          "    assert_eq!(state_repr.pattern_offset_end(), 9);",
          "    assert_eq!(state_repr.iter_match_pattern_ids(|_| {}), ());"
        ],
        "code": [
          "{",
          "    let state_repr = Repr(&[0; 9]); // First byte not set for matching",
          "    state_repr.iter_match_pattern_ids(|_| {",
          "        // no-op",
          "    });",
          "    assert_eq!(state_repr.is_match(), false);",
          "    assert_eq!(state_repr.has_pattern_ids(), false);",
          "    assert_eq!(state_repr.pattern_offset_end(), 9);",
          "    assert_eq!(state_repr.iter_match_pattern_ids(|_| {}), ());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]