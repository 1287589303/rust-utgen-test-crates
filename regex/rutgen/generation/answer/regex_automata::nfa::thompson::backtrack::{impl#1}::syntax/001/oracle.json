[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        case_insensitive: true,",
          "        ..Default::default()",
          "    };",
          "    builder.syntax(config);",
          "}"
        ],
        "oracle": [
          "    builder.syntax(config) == &mut builder",
          "    config.case_insensitive == true"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        case_insensitive: true,",
          "        ..Default::default()",
          "    };",
          "    builder.syntax(config);",
          "    builder.syntax(config) == &mut builder",
          "    config.case_insensitive == true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        multi_line: true,",
          "        ..Default::default()",
          "    };",
          "    builder.syntax(config);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.syntax(config).thompson.config.multi_line, true);",
          "    assert_eq!(builder.syntax(config).thompson.config.case_insensitive, false);",
          "    assert_eq!(builder.syntax(config).thompson.config.unicode, false);",
          "    assert_eq!(builder.syntax(config).thompson.config.ignore_whitespace, false);",
          "    assert_eq!(builder.syntax(config).thompson.config.nest_limit, 1024);"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        multi_line: true,",
          "        ..Default::default()",
          "    };",
          "    builder.syntax(config);",
          "    assert_eq!(builder.syntax(config).thompson.config.multi_line, true);",
          "    assert_eq!(builder.syntax(config).thompson.config.case_insensitive, false);",
          "    assert_eq!(builder.syntax(config).thompson.config.unicode, false);",
          "    assert_eq!(builder.syntax(config).thompson.config.ignore_whitespace, false);",
          "    assert_eq!(builder.syntax(config).thompson.config.nest_limit, 1024);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        dot_matches_new_line: true,",
          "        ..Default::default()",
          "    };",
          "    builder.syntax(config);",
          "}"
        ],
        "oracle": [
          "    assert!(builder.thompson.config.dot_matches_new_line == true);",
          "    assert!(builder.thompson.config.case_insensitive == false);",
          "    assert!(builder.thompson.config.multi_line == false);",
          "    assert!(builder.thompson.config.ignore_whitespace == false);",
          "    assert!(builder.thompson.config.unicode == false);",
          "    assert!(builder.thompson.config.utf8 == false);",
          "    assert!(builder.thompson.config.line_terminator == 0);",
          "    assert!(builder.thompson.config.nest_limit == 0);",
          "    assert!(builder.thompson.config.swap_greed == false);",
          "    assert!(builder.thompson.config.crlf == false);",
          "    assert!(builder.thompson.config.octal == false);"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        dot_matches_new_line: true,",
          "        ..Default::default()",
          "    };",
          "    builder.syntax(config);",
          "    assert!(builder.thompson.config.dot_matches_new_line == true);",
          "    assert!(builder.thompson.config.case_insensitive == false);",
          "    assert!(builder.thompson.config.multi_line == false);",
          "    assert!(builder.thompson.config.ignore_whitespace == false);",
          "    assert!(builder.thompson.config.unicode == false);",
          "    assert!(builder.thompson.config.utf8 == false);",
          "    assert!(builder.thompson.config.line_terminator == 0);",
          "    assert!(builder.thompson.config.nest_limit == 0);",
          "    assert!(builder.thompson.config.swap_greed == false);",
          "    assert!(builder.thompson.config.crlf == false);",
          "    assert!(builder.thompson.config.octal == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        crlf: true,",
          "        ..Default::default()",
          "    };",
          "    builder.syntax(config);",
          "}"
        ],
        "oracle": [
          "    let result = builder.syntax(config);",
          "    assert_eq!(result as *const _, &mut builder as *const _);"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        crlf: true,",
          "        ..Default::default()",
          "    };",
          "    builder.syntax(config);",
          "    let result = builder.syntax(config);",
          "    assert_eq!(result as *const _, &mut builder as *const _);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        line_terminator: 10, // Valid u8 value (LF)",
          "        ..Default::default()",
          "    };",
          "    builder.syntax(config);",
          "}"
        ],
        "oracle": [
          "    builder.syntax(config) == &mut builder",
          "    builder.syntax(config).line_terminator == 10",
          "    builder.syntax(config).case_insensitive == false",
          "    builder.syntax(config).multi_line == false",
          "    builder.syntax(config).dot_matches_new_line == false",
          "    builder.syntax(config).crlf == false",
          "    builder.syntax(config).swap_greed == false",
          "    builder.syntax(config).ignore_whitespace == false",
          "    builder.syntax(config).unicode == false",
          "    builder.syntax(config).utf8 == false",
          "    builder.syntax(config).nest_limit == 0",
          "    builder.syntax(config).octal == false"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        line_terminator: 10, // Valid u8 value (LF)",
          "        ..Default::default()",
          "    };",
          "    builder.syntax(config);",
          "    builder.syntax(config) == &mut builder",
          "    builder.syntax(config).line_terminator == 10",
          "    builder.syntax(config).case_insensitive == false",
          "    builder.syntax(config).multi_line == false",
          "    builder.syntax(config).dot_matches_new_line == false",
          "    builder.syntax(config).crlf == false",
          "    builder.syntax(config).swap_greed == false",
          "    builder.syntax(config).ignore_whitespace == false",
          "    builder.syntax(config).unicode == false",
          "    builder.syntax(config).utf8 == false",
          "    builder.syntax(config).nest_limit == 0",
          "    builder.syntax(config).octal == false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        swap_greed: true,",
          "        ..Default::default()",
          "    };",
          "    builder.syntax(config);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.thompson.config.swap_greed, true);",
          "    assert_eq!(builder.thompson.config.case_insensitive, false);",
          "    assert_eq!(builder.thompson.config.multi_line, false);",
          "    assert_eq!(builder.thompson.config.dot_matches_new_line, false);",
          "    assert_eq!(builder.thompson.config.crlf, false);",
          "    assert_eq!(builder.thompson.config.ignore_whitespace, false);",
          "    assert_eq!(builder.thompson.config.unicode, false);",
          "    assert_eq!(builder.thompson.config.utf8, false);",
          "    assert_eq!(builder.thompson.config.nest_limit, 0);",
          "    assert_eq!(builder.thompson.config.octal, false);"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        swap_greed: true,",
          "        ..Default::default()",
          "    };",
          "    builder.syntax(config);",
          "    assert_eq!(builder.thompson.config.swap_greed, true);",
          "    assert_eq!(builder.thompson.config.case_insensitive, false);",
          "    assert_eq!(builder.thompson.config.multi_line, false);",
          "    assert_eq!(builder.thompson.config.dot_matches_new_line, false);",
          "    assert_eq!(builder.thompson.config.crlf, false);",
          "    assert_eq!(builder.thompson.config.ignore_whitespace, false);",
          "    assert_eq!(builder.thompson.config.unicode, false);",
          "    assert_eq!(builder.thompson.config.utf8, false);",
          "    assert_eq!(builder.thompson.config.nest_limit, 0);",
          "    assert_eq!(builder.thompson.config.octal, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        ignore_whitespace: true,",
          "        ..Default::default()",
          "    };",
          "    builder.syntax(config);",
          "}"
        ],
        "oracle": [
          "    let builder = Builder::new();",
          "    let config = crate::util::syntax::Config { ignore_whitespace: true, ..Default::default() };",
          "    let result = builder.syntax(config);",
          "    assert_eq!(std::ptr::eq(result, &builder), true);"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        ignore_whitespace: true,",
          "        ..Default::default()",
          "    };",
          "    builder.syntax(config);",
          "    let builder = Builder::new();",
          "    let config = crate::util::syntax::Config { ignore_whitespace: true, ..Default::default() };",
          "    let result = builder.syntax(config);",
          "    assert_eq!(std::ptr::eq(result, &builder), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        unicode: true,",
          "        ..Default::default()",
          "    };",
          "    builder.syntax(config);",
          "}"
        ],
        "oracle": [
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "    unicode: true,",
          "    ..Default::default()",
          "    };",
          "    let result = builder.syntax(config);",
          "    assert_eq!(result, &mut builder);"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        unicode: true,",
          "        ..Default::default()",
          "    };",
          "    builder.syntax(config);",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "    unicode: true,",
          "    ..Default::default()",
          "    };",
          "    let result = builder.syntax(config);",
          "    assert_eq!(result, &mut builder);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        utf8: true,",
          "        ..Default::default()",
          "    };",
          "    builder.syntax(config);",
          "}"
        ],
        "oracle": [
          "    assert!(builder.thompson.config.utf8.is_some());",
          "    assert_eq!(builder.thompson.config.utf8.unwrap(), true);",
          "    assert_eq!(builder.syntax(config), &mut builder);"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        utf8: true,",
          "        ..Default::default()",
          "    };",
          "    builder.syntax(config);",
          "    assert!(builder.thompson.config.utf8.is_some());",
          "    assert_eq!(builder.thompson.config.utf8.unwrap(), true);",
          "    assert_eq!(builder.syntax(config), &mut builder);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        nest_limit: 100,",
          "        ..Default::default()",
          "    };",
          "    builder.syntax(config);",
          "}"
        ],
        "oracle": [
          "    assert!(builder.syntax(config).is::<&mut Builder>());",
          "    let mut builder_check = builder.syntax(config);",
          "    assert_eq!(builder_check, &mut builder);",
          "    assert_eq!(builder_check.thompson.config.nest_limit, 100);",
          "    assert!(builder.thompson.config.nest_limit.is_some());",
          "    assert!(builder.thompson.config.nest_limit.unwrap() == 100 || builder.thompson.config.nest_limit.unwrap() == 0);"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        nest_limit: 100,",
          "        ..Default::default()",
          "    };",
          "    builder.syntax(config);",
          "    assert!(builder.syntax(config).is::<&mut Builder>());",
          "    let mut builder_check = builder.syntax(config);",
          "    assert_eq!(builder_check, &mut builder);",
          "    assert_eq!(builder_check.thompson.config.nest_limit, 100);",
          "    assert!(builder.thompson.config.nest_limit.is_some());",
          "    assert!(builder.thompson.config.nest_limit.unwrap() == 100 || builder.thompson.config.nest_limit.unwrap() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]