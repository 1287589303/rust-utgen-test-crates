[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start_table = StartTable {",
          "        table: vec![],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::default(); 256] },",
          "        stride: 0,",
          "        pattern_len: None,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    start_table.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start_table.memory_usage(), 0);"
        ],
        "code": [
          "{",
          "    let start_table = StartTable {",
          "        table: vec![],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::default(); 256] },",
          "        stride: 0,",
          "        pattern_len: None,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    start_table.memory_usage();",
          "    assert_eq!(start_table.memory_usage(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start_table = StartTable {",
          "        table: vec![0u32],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::default(); 256] },",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    start_table.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start_table.memory_usage(), 1 * StateID::SIZE);"
        ],
        "code": [
          "{",
          "    let start_table = StartTable {",
          "        table: vec![0u32],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::default(); 256] },",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    start_table.memory_usage();",
          "    assert_eq!(start_table.memory_usage(), 1 * StateID::SIZE);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let max_entries: usize = (u32::MAX as usize) / size_of::<u32>(); // this adjusts to fit within usize constraints",
          "    let start_table = StartTable {",
          "        table: vec![0u32; max_entries],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::default(); 256] },",
          "        stride: max_entries,",
          "        pattern_len: Some(max_entries),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    start_table.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start_table.memory_usage(), max_entries * size_of::<u32>());",
          "    assert_eq!(start_table.memory_usage(), start_table.table().len() * StateID::SIZE);",
          "    let start_table_empty = StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap { map: [Start::default(); 256] }, stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None };",
          "    assert_eq!(start_table_empty.memory_usage(), 0);",
          "    let start_table_single = StartTable { table: vec![0u32; 1], kind: StartKind::Both, start_map: StartByteMap { map: [Start::default(); 256] }, stride: 1, pattern_len: Some(1), universal_start_unanchored: None, universal_start_anchored: None };",
          "    assert_eq!(start_table_single.memory_usage(), size_of::<u32>());"
        ],
        "code": [
          "{",
          "    let max_entries: usize = (u32::MAX as usize) / size_of::<u32>(); // this adjusts to fit within usize constraints",
          "    let start_table = StartTable {",
          "        table: vec![0u32; max_entries],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::default(); 256] },",
          "        stride: max_entries,",
          "        pattern_len: Some(max_entries),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    start_table.memory_usage();",
          "    assert_eq!(start_table.memory_usage(), max_entries * size_of::<u32>());",
          "    assert_eq!(start_table.memory_usage(), start_table.table().len() * StateID::SIZE);",
          "    let start_table_empty = StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap { map: [Start::default(); 256] }, stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None };",
          "    assert_eq!(start_table_empty.memory_usage(), 0);",
          "    let start_table_single = StartTable { table: vec![0u32; 1], kind: StartKind::Both, start_map: StartByteMap { map: [Start::default(); 256] }, stride: 1, pattern_len: Some(1), universal_start_unanchored: None, universal_start_anchored: None };",
          "    assert_eq!(start_table_single.memory_usage(), size_of::<u32>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]