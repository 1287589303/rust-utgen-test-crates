[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "",
          "    let ast = ast::ClassAscii {",
          "        span: Span::default(),",
          "        kind: ast::ClassAsciiKind::Ascii,",
          "        negated: false,",
          "    };",
          "",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_class_ascii(&ast);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.output, \"[:ascii:]\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "",
          "    let ast = ast::ClassAscii {",
          "        span: Span::default(),",
          "        kind: ast::ClassAsciiKind::Ascii,",
          "        negated: false,",
          "    };",
          "",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_class_ascii(&ast);",
          "    assert_eq!(writer.output, \"[:ascii:]\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]