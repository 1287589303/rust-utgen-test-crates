[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "    ",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "        span: Span::default(),",
          "        kind: ast::ClassAsciiKind::Print,",
          "        negated: true,",
          "    };",
          "    ",
          "    writer.fmt_class_ascii(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.output, \"[:^print:]\");",
          "    assert!(writer.output.contains(\"print\"));",
          "    assert!(!writer.output.contains(\"alnum\"));",
          "    assert!(!writer.output.contains(\"alpha\"));",
          "    assert!(!writer.output.contains(\"ascii\"));",
          "    assert!(!writer.output.contains(\"blank\"));",
          "    assert!(!writer.output.contains(\"cntrl\"));",
          "    assert!(!writer.output.contains(\"digit\"));",
          "    assert!(!writer.output.contains(\"graph\"));",
          "    assert!(!writer.output.contains(\"lower\"));",
          "    assert!(!writer.output.contains(\"punct\"));",
          "    assert!(!writer.output.contains(\"space\"));",
          "    assert!(!writer.output.contains(\"upper\"));",
          "    assert!(!writer.output.contains(\"word\"));",
          "    assert!(!writer.output.contains(\"xdigit\"));"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "    ",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "        span: Span::default(),",
          "        kind: ast::ClassAsciiKind::Print,",
          "        negated: true,",
          "    };",
          "    ",
          "    writer.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^print:]\");",
          "    assert!(writer.output.contains(\"print\"));",
          "    assert!(!writer.output.contains(\"alnum\"));",
          "    assert!(!writer.output.contains(\"alpha\"));",
          "    assert!(!writer.output.contains(\"ascii\"));",
          "    assert!(!writer.output.contains(\"blank\"));",
          "    assert!(!writer.output.contains(\"cntrl\"));",
          "    assert!(!writer.output.contains(\"digit\"));",
          "    assert!(!writer.output.contains(\"graph\"));",
          "    assert!(!writer.output.contains(\"lower\"));",
          "    assert!(!writer.output.contains(\"punct\"));",
          "    assert!(!writer.output.contains(\"space\"));",
          "    assert!(!writer.output.contains(\"upper\"));",
          "    assert!(!writer.output.contains(\"word\"));",
          "    assert!(!writer.output.contains(\"xdigit\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "    ",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "        span: Span::default(),",
          "        kind: ast::ClassAsciiKind::Print,",
          "        negated: false,",
          "    };",
          "    ",
          "    writer.fmt_class_ascii(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    writer.output == \"[:print:]\"",
          "    writer.output == \"[:^print:]\"",
          "    ast.kind == ast::ClassAsciiKind::Print",
          "    ast.negated == false",
          "    ast.kind == ast::ClassAsciiKind::Print",
          "    ast.negated == true"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "    ",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "        span: Span::default(),",
          "        kind: ast::ClassAsciiKind::Print,",
          "        negated: false,",
          "    };",
          "    ",
          "    writer.fmt_class_ascii(&ast).unwrap();",
          "    writer.output == \"[:print:]\"",
          "    writer.output == \"[:^print:]\"",
          "    ast.kind == ast::ClassAsciiKind::Print",
          "    ast.negated == false",
          "    ast.kind == ast::ClassAsciiKind::Print",
          "    ast.negated == true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]