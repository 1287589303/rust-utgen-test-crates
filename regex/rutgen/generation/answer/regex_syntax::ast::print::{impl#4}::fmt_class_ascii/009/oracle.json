[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyWriter;",
          "    impl fmt::Write for DummyWriter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: DummyWriter };",
          "    let ast = ast::ClassAscii {",
          "        span: Span::default(),",
          "        kind: ClassAsciiKind::Punct,",
          "        negated: true,",
          "    };",
          "",
          "    writer.fmt_class_ascii(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    writer.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(String::from(\"[:^punct:]\"), output);",
          "    ast.kind = ClassAsciiKind::Punct;",
          "    ast.negated = true;",
          "    writer.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(String::from(\"[:^punct:]\"), output);",
          "    ast.negated = false;",
          "    writer.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(String::from(\"[:punct:]\"), output);"
        ],
        "code": [
          "{",
          "    struct DummyWriter;",
          "    impl fmt::Write for DummyWriter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: DummyWriter };",
          "    let ast = ast::ClassAscii {",
          "        span: Span::default(),",
          "        kind: ClassAsciiKind::Punct,",
          "        negated: true,",
          "    };",
          "",
          "    writer.fmt_class_ascii(&ast).unwrap();",
          "    writer.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(String::from(\"[:^punct:]\"), output);",
          "    ast.kind = ClassAsciiKind::Punct;",
          "    ast.negated = true;",
          "    writer.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(String::from(\"[:^punct:]\"), output);",
          "    ast.negated = false;",
          "    writer.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(String::from(\"[:punct:]\"), output);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyWriter;",
          "    impl fmt::Write for DummyWriter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: DummyWriter };",
          "    let ast = ast::ClassAscii {",
          "        span: Span::default(),",
          "        kind: ClassAsciiKind::Punct,",
          "        negated: false,",
          "    };",
          "",
          "    writer.fmt_class_ascii(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    writer.fmt_class_ascii(&ast).unwrap(); // Check for kind Punct, negated false",
          "    let ast_negated = ast::ClassAscii {",
          "    span: Span::default(),",
          "    kind: ClassAsciiKind::Punct,",
          "    negated: true,",
          "    };",
          "    writer.fmt_class_ascii(&ast_negated).unwrap(); // Check for kind Punct, negated true"
        ],
        "code": [
          "{",
          "    struct DummyWriter;",
          "    impl fmt::Write for DummyWriter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: DummyWriter };",
          "    let ast = ast::ClassAscii {",
          "        span: Span::default(),",
          "        kind: ClassAsciiKind::Punct,",
          "        negated: false,",
          "    };",
          "",
          "    writer.fmt_class_ascii(&ast).unwrap();",
          "    writer.fmt_class_ascii(&ast).unwrap(); // Check for kind Punct, negated false",
          "    let ast_negated = ast::ClassAscii {",
          "    span: Span::default(),",
          "    kind: ClassAsciiKind::Punct,",
          "    negated: true,",
          "    };",
          "    writer.fmt_class_ascii(&ast_negated).unwrap(); // Check for kind Punct, negated true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]