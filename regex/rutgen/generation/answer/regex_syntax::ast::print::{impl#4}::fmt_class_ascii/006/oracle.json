[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut output = String::new();",
          "    let ast = ast::ClassAscii {",
          "        span: Span { /* initialize with appropriate values */ },",
          "        kind: ClassAsciiKind::Upper,",
          "        negated: false,",
          "    };",
          "    let writer = Writer { wtr: &mut output };",
          "    writer.fmt_class_ascii(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"[:upper:]\");"
        ],
        "code": [
          "{",
          "    let mut output = String::new();",
          "    let ast = ast::ClassAscii {",
          "        span: Span { /* initialize with appropriate values */ },",
          "        kind: ClassAsciiKind::Upper,",
          "        negated: false,",
          "    };",
          "    let writer = Writer { wtr: &mut output };",
          "    writer.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(output, \"[:upper:]\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut output = String::new();",
          "    let ast = ast::ClassAscii {",
          "        span: Span { /* initialize with appropriate values */ },",
          "        kind: ClassAsciiKind::Upper,",
          "        negated: true,",
          "    };",
          "    let writer = Writer { wtr: &mut output };",
          "    writer.fmt_class_ascii(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"[:^upper:]\");"
        ],
        "code": [
          "{",
          "    let mut output = String::new();",
          "    let ast = ast::ClassAscii {",
          "        span: Span { /* initialize with appropriate values */ },",
          "        kind: ClassAsciiKind::Upper,",
          "        negated: true,",
          "    };",
          "    let writer = Writer { wtr: &mut output };",
          "    writer.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(output, \"[:^upper:]\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]