[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "        span: Default::default(),",
          "        kind: ast::ClassAsciiKind::Alnum,",
          "        negated: false,",
          "    };",
          "",
          "    let mut fmt_writer = Writer { wtr: writer };",
          "    fmt_writer.fmt_class_ascii(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Alnum,",
          "    negated: false,",
          "    };",
          "    fmt_writer.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:alnum:]\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Alnum,",
          "    negated: true,",
          "    };",
          "    fmt_writer.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^alnum:]\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Alpha,",
          "    negated: false,",
          "    };",
          "    fmt_writer.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:alpha:]\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Alpha,",
          "    negated: true,",
          "    };",
          "    fmt_writer.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^alpha:]\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Ascii,",
          "    negated: false,",
          "    };",
          "    fmt_writer.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:ascii:]\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Ascii,",
          "    negated: true,",
          "    };",
          "    fmt_writer.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^ascii:]\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Digit,",
          "    negated: false,",
          "    };",
          "    fmt_writer.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:digit:]\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Digit,",
          "    negated: true,",
          "    };",
          "    fmt_writer.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^digit:]\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Space,",
          "    negated: false,",
          "    };",
          "    fmt_writer.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:space:]\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Space,",
          "    negated: true,",
          "    };",
          "    fmt_writer.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^space:]\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "        span: Default::default(),",
          "        kind: ast::ClassAsciiKind::Alnum,",
          "        negated: false,",
          "    };",
          "",
          "    let mut fmt_writer = Writer { wtr: writer };",
          "    fmt_writer.fmt_class_ascii(&ast).unwrap();",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Alnum,",
          "    negated: false,",
          "    };",
          "    fmt_writer.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:alnum:]\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Alnum,",
          "    negated: true,",
          "    };",
          "    fmt_writer.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^alnum:]\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Alpha,",
          "    negated: false,",
          "    };",
          "    fmt_writer.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:alpha:]\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Alpha,",
          "    negated: true,",
          "    };",
          "    fmt_writer.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^alpha:]\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Ascii,",
          "    negated: false,",
          "    };",
          "    fmt_writer.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:ascii:]\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Ascii,",
          "    negated: true,",
          "    };",
          "    fmt_writer.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^ascii:]\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Digit,",
          "    negated: false,",
          "    };",
          "    fmt_writer.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:digit:]\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Digit,",
          "    negated: true,",
          "    };",
          "    fmt_writer.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^digit:]\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Space,",
          "    negated: false,",
          "    };",
          "    fmt_writer.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:space:]\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Space,",
          "    negated: true,",
          "    };",
          "    fmt_writer.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^space:]\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]