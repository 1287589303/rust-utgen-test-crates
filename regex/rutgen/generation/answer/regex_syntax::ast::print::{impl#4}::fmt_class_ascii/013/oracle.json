[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
          "    let ast = ast::ClassAscii {",
          "        span: Span::default(),",
          "        kind: ast::ClassAsciiKind::Lower,",
          "        negated: true,",
          "    };",
          "    let _ = writer.fmt_class_ascii(&ast);",
          "}"
        ],
        "oracle": [
          "    let expected_output = \"[:^lower:]\";",
          "    assert_eq!(writer.wtr.output, expected_output);"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
          "    let ast = ast::ClassAscii {",
          "        span: Span::default(),",
          "        kind: ast::ClassAsciiKind::Lower,",
          "        negated: true,",
          "    };",
          "    let _ = writer.fmt_class_ascii(&ast);",
          "    let expected_output = \"[:^lower:]\";",
          "    assert_eq!(writer.wtr.output, expected_output);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
          "    let ast = ast::ClassAscii {",
          "        span: Span::default(),",
          "        kind: ast::ClassAsciiKind::Upper,",
          "        negated: true,",
          "    };",
          "    let _ = writer.fmt_class_ascii(&ast);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.wtr.output, \"[:^upper:]\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
          "    let ast = ast::ClassAscii {",
          "        span: Span::default(),",
          "        kind: ast::ClassAsciiKind::Upper,",
          "        negated: true,",
          "    };",
          "    let _ = writer.fmt_class_ascii(&ast);",
          "    assert_eq!(writer.wtr.output, \"[:^upper:]\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
          "    let ast = ast::ClassAscii {",
          "        span: Span::default(),",
          "        kind: ast::ClassAsciiKind::Lower,",
          "        negated: false,",
          "    };",
          "    let _ = writer.fmt_class_ascii(&ast);",
          "}"
        ],
        "oracle": [
          "    writer.wtr.output == \"[:lower:]\"",
          "    writer.wtr.output == \"[:^lower:]\"",
          "    ast.kind == ast::ClassAsciiKind::Lower",
          "    ast.negated == false"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
          "    let ast = ast::ClassAscii {",
          "        span: Span::default(),",
          "        kind: ast::ClassAsciiKind::Lower,",
          "        negated: false,",
          "    };",
          "    let _ = writer.fmt_class_ascii(&ast);",
          "    writer.wtr.output == \"[:lower:]\"",
          "    writer.wtr.output == \"[:^lower:]\"",
          "    ast.kind == ast::ClassAsciiKind::Lower",
          "    ast.negated == false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
          "    let ast = ast::ClassAscii {",
          "        span: Span::default(),",
          "        kind: ast::ClassAsciiKind::Upper,",
          "        negated: false,",
          "    };",
          "    let _ = writer.fmt_class_ascii(&ast);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.wtr.output, \"[:upper:]\");",
          "    ",
          "    let ast_negated = ast::ClassAscii {",
          "    span: Span::default(),",
          "    kind: ast::ClassAsciiKind::Upper,",
          "    negated: true,",
          "    };",
          "    let _ = writer.fmt_class_ascii(&ast_negated);",
          "    assert_eq!(writer.wtr.output, \"[:^upper:]\");",
          "    ",
          "    let ast_lower = ast::ClassAscii {",
          "    span: Span::default(),",
          "    kind: ast::ClassAsciiKind::Lower,",
          "    negated: false,",
          "    };",
          "    let _ = writer.fmt_class_ascii(&ast_lower);",
          "    assert_eq!(writer.wtr.output, \"[:lower:]\");",
          "    ",
          "    let ast_lower_negated = ast::ClassAscii {",
          "    span: Span::default(),",
          "    kind: ast::ClassAsciiKind::Lower,",
          "    negated: true,",
          "    };",
          "    let _ = writer.fmt_class_ascii(&ast_lower_negated);",
          "    assert_eq!(writer.wtr.output, \"[:^lower:]\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
          "    let ast = ast::ClassAscii {",
          "        span: Span::default(),",
          "        kind: ast::ClassAsciiKind::Upper,",
          "        negated: false,",
          "    };",
          "    let _ = writer.fmt_class_ascii(&ast);",
          "    assert_eq!(writer.wtr.output, \"[:upper:]\");",
          "    ",
          "    let ast_negated = ast::ClassAscii {",
          "    span: Span::default(),",
          "    kind: ast::ClassAsciiKind::Upper,",
          "    negated: true,",
          "    };",
          "    let _ = writer.fmt_class_ascii(&ast_negated);",
          "    assert_eq!(writer.wtr.output, \"[:^upper:]\");",
          "    ",
          "    let ast_lower = ast::ClassAscii {",
          "    span: Span::default(),",
          "    kind: ast::ClassAsciiKind::Lower,",
          "    negated: false,",
          "    };",
          "    let _ = writer.fmt_class_ascii(&ast_lower);",
          "    assert_eq!(writer.wtr.output, \"[:lower:]\");",
          "    ",
          "    let ast_lower_negated = ast::ClassAscii {",
          "    span: Span::default(),",
          "    kind: ast::ClassAsciiKind::Lower,",
          "    negated: true,",
          "    };",
          "    let _ = writer.fmt_class_ascii(&ast_lower_negated);",
          "    assert_eq!(writer.wtr.output, \"[:^lower:]\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]