[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "        span: Span::default(), // Assuming a default Span implementation",
          "        kind: ClassAsciiKind::Digit,",
          "        negated: false,",
          "    };",
          "    ",
          "    writer.fmt_class_ascii(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    writer.output == \"[:digit:]\"",
          "    writer.output == \"[:^digit:]\"",
          "    writer.output == \"[:alnum:]\"",
          "    writer.output == \"[:^alpha:]\"",
          "    writer.output == \"[:ascii:]\"",
          "    writer.output == \"[:blank:]\"",
          "    writer.output == \"[:cntrl:]\"",
          "    writer.output == \"[:graph:]\"",
          "    writer.output == \"[:lower:]\"",
          "    writer.output == \"[:print:]\"",
          "    writer.output == \"[:punct:]\"",
          "    writer.output == \"[:space:]\"",
          "    writer.output == \"[:upper:]\"",
          "    writer.output == \"[:word:]\"",
          "    writer.output == \"[:xdigit:]\""
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "        span: Span::default(), // Assuming a default Span implementation",
          "        kind: ClassAsciiKind::Digit,",
          "        negated: false,",
          "    };",
          "    ",
          "    writer.fmt_class_ascii(&ast).unwrap();",
          "    writer.output == \"[:digit:]\"",
          "    writer.output == \"[:^digit:]\"",
          "    writer.output == \"[:alnum:]\"",
          "    writer.output == \"[:^alpha:]\"",
          "    writer.output == \"[:ascii:]\"",
          "    writer.output == \"[:blank:]\"",
          "    writer.output == \"[:cntrl:]\"",
          "    writer.output == \"[:graph:]\"",
          "    writer.output == \"[:lower:]\"",
          "    writer.output == \"[:print:]\"",
          "    writer.output == \"[:punct:]\"",
          "    writer.output == \"[:space:]\"",
          "    writer.output == \"[:upper:]\"",
          "    writer.output == \"[:word:]\"",
          "    writer.output == \"[:xdigit:]\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]