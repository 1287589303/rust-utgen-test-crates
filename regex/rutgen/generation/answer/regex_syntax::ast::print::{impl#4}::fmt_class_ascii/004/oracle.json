[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let class_ascii = ast::ClassAscii {",
          "        span: Span::default(),",
          "        kind: ast::ClassAsciiKind::Word,",
          "        negated: false,",
          "    };",
          "",
          "    let mut fmt_writer = Writer { wtr: &mut writer };",
          "    let _ = fmt_writer.fmt_class_ascii(&class_ascii);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.output, \"[:word:]\");",
          "    writer.output.clear();",
          "    let class_ascii_negated = ast::ClassAscii { span: Span::default(), kind: ast::ClassAsciiKind::Word, negated: true };",
          "    let _ = fmt_writer.fmt_class_ascii(&class_ascii_negated);",
          "    assert_eq!(writer.output, \"[:^word:]\");",
          "    writer.output.clear();",
          "    let class_ascii_alpha = ast::ClassAscii { span: Span::default(), kind: ast::ClassAsciiKind::Alpha, negated: false };",
          "    let _ = fmt_writer.fmt_class_ascii(&class_ascii_alpha);",
          "    assert_eq!(writer.output, \"[:alpha:]\");",
          "    writer.output.clear();",
          "    let class_ascii_alpha_negated = ast::ClassAscii { span: Span::default(), kind: ast::ClassAsciiKind::Alpha, negated: true };",
          "    let _ = fmt_writer.fmt_class_ascii(&class_ascii_alpha_negated);",
          "    assert_eq!(writer.output, \"[:^alpha:]\");",
          "    writer.output.clear();",
          "    let class_ascii_digit = ast::ClassAscii { span: Span::default(), kind: ast::ClassAsciiKind::Digit, negated: false };",
          "    let _ = fmt_writer.fmt_class_ascii(&class_ascii_digit);",
          "    assert_eq!(writer.output, \"[:digit:]\");",
          "    writer.output.clear();",
          "    let class_ascii_digit_negated = ast::ClassAscii { span: Span::default(), kind: ast::ClassAsciiKind::Digit, negated: true };",
          "    let _ = fmt_writer.fmt_class_ascii(&class_ascii_digit_negated);",
          "    assert_eq!(writer.output, \"[:^digit:]\");"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let class_ascii = ast::ClassAscii {",
          "        span: Span::default(),",
          "        kind: ast::ClassAsciiKind::Word,",
          "        negated: false,",
          "    };",
          "",
          "    let mut fmt_writer = Writer { wtr: &mut writer };",
          "    let _ = fmt_writer.fmt_class_ascii(&class_ascii);",
          "    assert_eq!(writer.output, \"[:word:]\");",
          "    writer.output.clear();",
          "    let class_ascii_negated = ast::ClassAscii { span: Span::default(), kind: ast::ClassAsciiKind::Word, negated: true };",
          "    let _ = fmt_writer.fmt_class_ascii(&class_ascii_negated);",
          "    assert_eq!(writer.output, \"[:^word:]\");",
          "    writer.output.clear();",
          "    let class_ascii_alpha = ast::ClassAscii { span: Span::default(), kind: ast::ClassAsciiKind::Alpha, negated: false };",
          "    let _ = fmt_writer.fmt_class_ascii(&class_ascii_alpha);",
          "    assert_eq!(writer.output, \"[:alpha:]\");",
          "    writer.output.clear();",
          "    let class_ascii_alpha_negated = ast::ClassAscii { span: Span::default(), kind: ast::ClassAsciiKind::Alpha, negated: true };",
          "    let _ = fmt_writer.fmt_class_ascii(&class_ascii_alpha_negated);",
          "    assert_eq!(writer.output, \"[:^alpha:]\");",
          "    writer.output.clear();",
          "    let class_ascii_digit = ast::ClassAscii { span: Span::default(), kind: ast::ClassAsciiKind::Digit, negated: false };",
          "    let _ = fmt_writer.fmt_class_ascii(&class_ascii_digit);",
          "    assert_eq!(writer.output, \"[:digit:]\");",
          "    writer.output.clear();",
          "    let class_ascii_digit_negated = ast::ClassAscii { span: Span::default(), kind: ast::ClassAsciiKind::Digit, negated: true };",
          "    let _ = fmt_writer.fmt_class_ascii(&class_ascii_digit_negated);",
          "    assert_eq!(writer.output, \"[:^digit:]\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let class_ascii = ast::ClassAscii {",
          "        span: Span::default(),",
          "        kind: ast::ClassAsciiKind::Word,",
          "        negated: true,",
          "    };",
          "",
          "    let mut fmt_writer = Writer { wtr: &mut writer };",
          "    let _ = fmt_writer.fmt_class_ascii(&class_ascii);",
          "}"
        ],
        "oracle": [
          "    let class_ascii_negated_word = ast::ClassAscii { span: Span::default(), kind: ast::ClassAsciiKind::Word, negated: true };",
          "    let expected_output_negated_word = \"[:^word:]\";",
          "    let mut writer_negated_word = MockWriter { output: String::new() };",
          "    let mut fmt_writer_negated_word = Writer { wtr: &mut writer_negated_word };",
          "    let _ = fmt_writer_negated_word.fmt_class_ascii(&class_ascii_negated_word);",
          "    assert_eq!(writer_negated_word.output, expected_output_negated_word);",
          "    ",
          "    let class_ascii_word = ast::ClassAscii { span: Span::default(), kind: ast::ClassAsciiKind::Word, negated: false };",
          "    let expected_output_word = \"[:word:]\";",
          "    let mut writer_word = MockWriter { output: String::new() };",
          "    let mut fmt_writer_word = Writer { wtr: &mut writer_word };",
          "    let _ = fmt_writer_word.fmt_class_ascii(&class_ascii_word);",
          "    assert_eq!(writer_word.output, expected_output_word);"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let class_ascii = ast::ClassAscii {",
          "        span: Span::default(),",
          "        kind: ast::ClassAsciiKind::Word,",
          "        negated: true,",
          "    };",
          "",
          "    let mut fmt_writer = Writer { wtr: &mut writer };",
          "    let _ = fmt_writer.fmt_class_ascii(&class_ascii);",
          "    let class_ascii_negated_word = ast::ClassAscii { span: Span::default(), kind: ast::ClassAsciiKind::Word, negated: true };",
          "    let expected_output_negated_word = \"[:^word:]\";",
          "    let mut writer_negated_word = MockWriter { output: String::new() };",
          "    let mut fmt_writer_negated_word = Writer { wtr: &mut writer_negated_word };",
          "    let _ = fmt_writer_negated_word.fmt_class_ascii(&class_ascii_negated_word);",
          "    assert_eq!(writer_negated_word.output, expected_output_negated_word);",
          "    ",
          "    let class_ascii_word = ast::ClassAscii { span: Span::default(), kind: ast::ClassAsciiKind::Word, negated: false };",
          "    let expected_output_word = \"[:word:]\";",
          "    let mut writer_word = MockWriter { output: String::new() };",
          "    let mut fmt_writer_word = Writer { wtr: &mut writer_word };",
          "    let _ = fmt_writer_word.fmt_class_ascii(&class_ascii_word);",
          "    assert_eq!(writer_word.output, expected_output_word);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]