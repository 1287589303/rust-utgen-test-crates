[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "        span: Default::default(),",
          "        kind: ast::ClassAsciiKind::Alnum,",
          "        negated: true,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.output, \"[:^alnum:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Alnum,",
          "    negated: false,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:alnum:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Alpha,",
          "    negated: true,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^alpha:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Alpha,",
          "    negated: false,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:alpha:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Ascii,",
          "    negated: true,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^ascii:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Ascii,",
          "    negated: false,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:ascii:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Blank,",
          "    negated: true,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^blank:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Blank,",
          "    negated: false,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:blank:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Cntrl,",
          "    negated: true,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^cntrl:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Cntrl,",
          "    negated: false,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:cntrl:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Digit,",
          "    negated: true,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^digit:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Digit,",
          "    negated: false,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:digit:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Graph,",
          "    negated: true,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^graph:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Graph,",
          "    negated: false,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:graph:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Lower,",
          "    negated: true,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^lower:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Lower,",
          "    negated: false,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:lower:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Print,",
          "    negated: true,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^print:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Print,",
          "    negated: false,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:print:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Punct,",
          "    negated: true,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^punct:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Punct,",
          "    negated: false,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:punct:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Space,",
          "    negated: true,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^space:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Space,",
          "    negated: false,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:space:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Upper,",
          "    negated: true,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^upper:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Upper,",
          "    negated: false,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:upper:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Word,",
          "    negated: true,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^word:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Word,",
          "    negated: false,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:word:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Xdigit,",
          "    negated: true,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^xdigit:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Xdigit,",
          "    negated: false,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:xdigit:]\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "        span: Default::default(),",
          "        kind: ast::ClassAsciiKind::Alnum,",
          "        negated: true,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^alnum:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Alnum,",
          "    negated: false,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:alnum:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Alpha,",
          "    negated: true,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^alpha:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Alpha,",
          "    negated: false,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:alpha:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Ascii,",
          "    negated: true,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^ascii:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Ascii,",
          "    negated: false,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:ascii:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Blank,",
          "    negated: true,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^blank:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Blank,",
          "    negated: false,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:blank:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Cntrl,",
          "    negated: true,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^cntrl:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Cntrl,",
          "    negated: false,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:cntrl:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Digit,",
          "    negated: true,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^digit:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Digit,",
          "    negated: false,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:digit:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Graph,",
          "    negated: true,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^graph:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Graph,",
          "    negated: false,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:graph:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Lower,",
          "    negated: true,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^lower:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Lower,",
          "    negated: false,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:lower:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Print,",
          "    negated: true,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^print:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Print,",
          "    negated: false,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:print:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Punct,",
          "    negated: true,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^punct:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Punct,",
          "    negated: false,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:punct:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Space,",
          "    negated: true,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^space:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Space,",
          "    negated: false,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:space:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Upper,",
          "    negated: true,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^upper:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Upper,",
          "    negated: false,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:upper:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Word,",
          "    negated: true,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^word:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Word,",
          "    negated: false,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:word:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Xdigit,",
          "    negated: true,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^xdigit:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Xdigit,",
          "    negated: false,",
          "    };",
          "    ",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:xdigit:]\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "        span: Default::default(),",
          "        kind: ast::ClassAsciiKind::Alpha,",
          "        negated: true,",
          "    };",
          "",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.output, \"[:^alpha:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Alnum,",
          "    negated: true,",
          "    };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^alnum:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Ascii,",
          "    negated: true,",
          "    };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^ascii:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Blank,",
          "    negated: true,",
          "    };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^blank:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Cntrl,",
          "    negated: true,",
          "    };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^cntrl:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Digit,",
          "    negated: true,",
          "    };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^digit:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Graph,",
          "    negated: true,",
          "    };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^graph:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Lower,",
          "    negated: true,",
          "    };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^lower:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Print,",
          "    negated: true,",
          "    };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^print:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Punct,",
          "    negated: true,",
          "    };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^punct:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Space,",
          "    negated: true,",
          "    };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^space:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Upper,",
          "    negated: true,",
          "    };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^upper:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Word,",
          "    negated: true,",
          "    };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^word:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Xdigit,",
          "    negated: true,",
          "    };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^xdigit:]\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "        span: Default::default(),",
          "        kind: ast::ClassAsciiKind::Alpha,",
          "        negated: true,",
          "    };",
          "",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^alpha:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Alnum,",
          "    negated: true,",
          "    };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^alnum:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Ascii,",
          "    negated: true,",
          "    };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^ascii:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Blank,",
          "    negated: true,",
          "    };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^blank:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Cntrl,",
          "    negated: true,",
          "    };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^cntrl:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Digit,",
          "    negated: true,",
          "    };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^digit:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Graph,",
          "    negated: true,",
          "    };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^graph:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Lower,",
          "    negated: true,",
          "    };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^lower:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Print,",
          "    negated: true,",
          "    };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^print:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Punct,",
          "    negated: true,",
          "    };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^punct:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Space,",
          "    negated: true,",
          "    };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^space:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Upper,",
          "    negated: true,",
          "    };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^upper:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Word,",
          "    negated: true,",
          "    };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^word:]\");",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Xdigit,",
          "    negated: true,",
          "    };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^xdigit:]\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "        span: Default::default(),",
          "        kind: ast::ClassAsciiKind::Digit,",
          "        negated: true,",
          "    };",
          "",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.output, \"[:^digit:]\");",
          "    let ast = ast::ClassAscii { span: Default::default(), kind: ast::ClassAsciiKind::Alnum, negated: false };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:alnum:]\");",
          "    let ast = ast::ClassAscii { span: Default::default(), kind: ast::ClassAsciiKind::Alpha, negated: true };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^alpha:]\");",
          "    let ast = ast::ClassAscii { span: Default::default(), kind: ast::ClassAsciiKind::Space, negated: false };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:space:]\");",
          "    let ast = ast::ClassAscii { span: Default::default(), kind: ast::ClassAsciiKind::Ascii, negated: true };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^ascii:]\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "        span: Default::default(),",
          "        kind: ast::ClassAsciiKind::Digit,",
          "        negated: true,",
          "    };",
          "",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^digit:]\");",
          "    let ast = ast::ClassAscii { span: Default::default(), kind: ast::ClassAsciiKind::Alnum, negated: false };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:alnum:]\");",
          "    let ast = ast::ClassAscii { span: Default::default(), kind: ast::ClassAsciiKind::Alpha, negated: true };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^alpha:]\");",
          "    let ast = ast::ClassAscii { span: Default::default(), kind: ast::ClassAsciiKind::Space, negated: false };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:space:]\");",
          "    let ast = ast::ClassAscii { span: Default::default(), kind: ast::ClassAsciiKind::Ascii, negated: true };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^ascii:]\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "        span: Default::default(),",
          "        kind: ast::ClassAsciiKind::Space,",
          "        negated: true,",
          "    };",
          "",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap(); assert_eq!(writer.output, \"[:^space:]\");",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Alpha,",
          "    negated: false,",
          "    };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap(); assert_eq!(writer.output, \"[:alpha:]\");",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Digit,",
          "    negated: true,",
          "    };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap(); assert_eq!(writer.output, \"[:^digit:]\");",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Graph,",
          "    negated: false,",
          "    };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap(); assert_eq!(writer.output, \"[:graph:]\");",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Cntrl,",
          "    negated: true,",
          "    };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap(); assert_eq!(writer.output, \"[:^cntrl:]\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "        span: Default::default(),",
          "        kind: ast::ClassAsciiKind::Space,",
          "        negated: true,",
          "    };",
          "",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap(); assert_eq!(writer.output, \"[:^space:]\");",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Alpha,",
          "    negated: false,",
          "    };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap(); assert_eq!(writer.output, \"[:alpha:]\");",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Digit,",
          "    negated: true,",
          "    };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap(); assert_eq!(writer.output, \"[:^digit:]\");",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Graph,",
          "    negated: false,",
          "    };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap(); assert_eq!(writer.output, \"[:graph:]\");",
          "    let ast = ast::ClassAscii {",
          "    span: Default::default(),",
          "    kind: ast::ClassAsciiKind::Cntrl,",
          "    negated: true,",
          "    };",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap(); assert_eq!(writer.output, \"[:^cntrl:]\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "        span: Default::default(),",
          "        kind: ast::ClassAsciiKind::Upper,",
          "        negated: true,",
          "    };",
          "",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.output, \"[:^upper:]\");",
          "    assert!(writer.output.contains(\"[:^upper:]\"));",
          "    assert!(writer.output.starts_with(\"[:^\"));",
          "    assert!(writer.output.ends_with(\":]\"));",
          "    assert!(writer.output.len() > 0);",
          "    assert!(!writer.output.contains(\"[:upper:]\"));",
          "    assert!(!writer.output.contains(\"[:alnum:]\"));"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassAscii {",
          "        span: Default::default(),",
          "        kind: ast::ClassAsciiKind::Upper,",
          "        negated: true,",
          "    };",
          "",
          "    Writer { wtr: &mut writer }.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.output, \"[:^upper:]\");",
          "    assert!(writer.output.contains(\"[:^upper:]\"));",
          "    assert!(writer.output.starts_with(\"[:^\"));",
          "    assert!(writer.output.ends_with(\":]\"));",
          "    assert!(writer.output.len() > 0);",
          "    assert!(!writer.output.contains(\"[:upper:]\"));",
          "    assert!(!writer.output.contains(\"[:alnum:]\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]