[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MyVisitor {",
          "        output: String,",
          "    }",
          "",
          "    impl Visitor for MyVisitor {",
          "        type Output = String;",
          "        type Err = ();",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(self.output)",
          "        }",
          "        ",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let ast = ast::ClassAscii {",
          "        span: Span::default(),",
          "        kind: ClassAsciiKind::Alpha,",
          "        negated: true,",
          "    };",
          "",
          "    let mut writer = Writer { wtr: &mut String::new() };",
          "    writer.fmt_class_ascii(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.wtr, \"[:^alpha:]\");",
          "    assert!(writer.finish().is_ok());",
          "    assert_eq!(writer.finish().unwrap(), \"[:^alpha:]\");"
        ],
        "code": [
          "{",
          "    struct MyVisitor {",
          "        output: String,",
          "    }",
          "",
          "    impl Visitor for MyVisitor {",
          "        type Output = String;",
          "        type Err = ();",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(self.output)",
          "        }",
          "        ",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let ast = ast::ClassAscii {",
          "        span: Span::default(),",
          "        kind: ClassAsciiKind::Alpha,",
          "        negated: true,",
          "    };",
          "",
          "    let mut writer = Writer { wtr: &mut String::new() };",
          "    writer.fmt_class_ascii(&ast).unwrap();",
          "    assert_eq!(writer.wtr, \"[:^alpha:]\");",
          "    assert!(writer.finish().is_ok());",
          "    assert_eq!(writer.finish().unwrap(), \"[:^alpha:]\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MyVisitor {",
          "        output: String,",
          "    }",
          "",
          "    impl Visitor for MyVisitor {",
          "        type Output = String;",
          "        type Err = ();",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(self.output)",
          "        }",
          "",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let ast = ast::ClassAscii {",
          "        span: Span::default(),",
          "        kind: ClassAsciiKind::Alpha,",
          "        negated: false,",
          "    };",
          "",
          "    let mut writer = Writer { wtr: &mut String::new() };",
          "    writer.fmt_class_ascii(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    writer.fmt_class_ascii(&ast).unwrap(); assert_eq!(writer.wtr, \"[:alpha:]\");",
          "    ast.kind = ClassAsciiKind::Alpha; ast.negated = true; writer.fmt_class_ascii(&ast).unwrap(); assert_eq!(writer.wtr, \"[:^alpha:]\");",
          "    ast.kind = ClassAsciiKind::Upper; ast.negated = false; writer.fmt_class_ascii(&ast).unwrap(); assert_eq!(writer.wtr, \"[:upper:]\");",
          "    ast.kind = ClassAsciiKind::Upper; ast.negated = true; writer.fmt_class_ascii(&ast).unwrap(); assert_eq!(writer.wtr, \"[:^upper:]\");",
          "    ast.kind = ClassAsciiKind::Graph; ast.negated = false; writer.fmt_class_ascii(&ast).unwrap(); assert_eq!(writer.wtr, \"[:graph:]\");",
          "    ast.kind = ClassAsciiKind::Graph; ast.negated = true; writer.fmt_class_ascii(&ast).unwrap(); assert_eq!(writer.wtr, \"[:^graph:]\");",
          "    ast.kind = ClassAsciiKind::Digit; ast.negated = false; writer.fmt_class_ascii(&ast).unwrap(); assert_eq!(writer.wtr, \"[:digit:]\");",
          "    ast.kind = ClassAsciiKind::Digit; ast.negated = true; writer.fmt_class_ascii(&ast).unwrap(); assert_eq!(writer.wtr, \"[:^digit:]\");"
        ],
        "code": [
          "{",
          "    struct MyVisitor {",
          "        output: String,",
          "    }",
          "",
          "    impl Visitor for MyVisitor {",
          "        type Output = String;",
          "        type Err = ();",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(self.output)",
          "        }",
          "",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let ast = ast::ClassAscii {",
          "        span: Span::default(),",
          "        kind: ClassAsciiKind::Alpha,",
          "        negated: false,",
          "    };",
          "",
          "    let mut writer = Writer { wtr: &mut String::new() };",
          "    writer.fmt_class_ascii(&ast).unwrap();",
          "    writer.fmt_class_ascii(&ast).unwrap(); assert_eq!(writer.wtr, \"[:alpha:]\");",
          "    ast.kind = ClassAsciiKind::Alpha; ast.negated = true; writer.fmt_class_ascii(&ast).unwrap(); assert_eq!(writer.wtr, \"[:^alpha:]\");",
          "    ast.kind = ClassAsciiKind::Upper; ast.negated = false; writer.fmt_class_ascii(&ast).unwrap(); assert_eq!(writer.wtr, \"[:upper:]\");",
          "    ast.kind = ClassAsciiKind::Upper; ast.negated = true; writer.fmt_class_ascii(&ast).unwrap(); assert_eq!(writer.wtr, \"[:^upper:]\");",
          "    ast.kind = ClassAsciiKind::Graph; ast.negated = false; writer.fmt_class_ascii(&ast).unwrap(); assert_eq!(writer.wtr, \"[:graph:]\");",
          "    ast.kind = ClassAsciiKind::Graph; ast.negated = true; writer.fmt_class_ascii(&ast).unwrap(); assert_eq!(writer.wtr, \"[:^graph:]\");",
          "    ast.kind = ClassAsciiKind::Digit; ast.negated = false; writer.fmt_class_ascii(&ast).unwrap(); assert_eq!(writer.wtr, \"[:digit:]\");",
          "    ast.kind = ClassAsciiKind::Digit; ast.negated = true; writer.fmt_class_ascii(&ast).unwrap(); assert_eq!(writer.wtr, \"[:^digit:]\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]