[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter;",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "    let mut writer = Writer { wtr: MockWriter };",
          "    let ast = ast::ClassAscii {",
          "        span: Span::new(0, 1),",
          "        kind: ClassAsciiKind::Xdigit,",
          "        negated: true,",
          "    };",
          "    writer.fmt_class_ascii(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    writer.fmt_class_ascii(&ast) == Ok(())",
          "    ast.kind == ClassAsciiKind::Xdigit",
          "    ast.negated == true",
          "    writer.wtr.write_str(\"[:^xdigit:]\") == Ok(())"
        ],
        "code": [
          "{",
          "    struct MockWriter;",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "    let mut writer = Writer { wtr: MockWriter };",
          "    let ast = ast::ClassAscii {",
          "        span: Span::new(0, 1),",
          "        kind: ClassAsciiKind::Xdigit,",
          "        negated: true,",
          "    };",
          "    writer.fmt_class_ascii(&ast).unwrap();",
          "    writer.fmt_class_ascii(&ast) == Ok(())",
          "    ast.kind == ClassAsciiKind::Xdigit",
          "    ast.negated == true",
          "    writer.wtr.write_str(\"[:^xdigit:]\") == Ok(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter;",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "    let mut writer = Writer { wtr: MockWriter };",
          "    let ast = ast::ClassAscii {",
          "        span: Span::new(0, 1),",
          "        kind: ClassAsciiKind::Xdigit,",
          "        negated: false,",
          "    };",
          "    writer.fmt_class_ascii(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    writer.fmt_class_ascii(&ast).unwrap(); // when ast.kind is Xdigit and ast.negated is false",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Span::new(0, 1),",
          "    kind: ClassAsciiKind::Xdigit,",
          "    negated: true,",
          "    };",
          "    assert_eq!(writer.fmt_class_ascii(&ast), Err(fmt::Error)); // when ast.kind is Xdigit and ast.negated is true",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Span::new(0, 1),",
          "    kind: ClassAsciiKind::Xdigit,",
          "    negated: false,",
          "    };",
          "    assert_eq!(writer.fmt_class_ascii(&ast).unwrap(), \"[:xdigit:]\"); // when ast.kind is Xdigit and negated is false",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Span::new(0, 1),",
          "    kind: ClassAsciiKind::Xdigit,",
          "    negated: true,",
          "    };",
          "    assert_eq!(writer.fmt_class_ascii(&ast).unwrap(), \"[:^xdigit:]\"); // when ast.kind is Xdigit and negated is true"
        ],
        "code": [
          "{",
          "    struct MockWriter;",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "    let mut writer = Writer { wtr: MockWriter };",
          "    let ast = ast::ClassAscii {",
          "        span: Span::new(0, 1),",
          "        kind: ClassAsciiKind::Xdigit,",
          "        negated: false,",
          "    };",
          "    writer.fmt_class_ascii(&ast).unwrap();",
          "    writer.fmt_class_ascii(&ast).unwrap(); // when ast.kind is Xdigit and ast.negated is false",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Span::new(0, 1),",
          "    kind: ClassAsciiKind::Xdigit,",
          "    negated: true,",
          "    };",
          "    assert_eq!(writer.fmt_class_ascii(&ast), Err(fmt::Error)); // when ast.kind is Xdigit and ast.negated is true",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Span::new(0, 1),",
          "    kind: ClassAsciiKind::Xdigit,",
          "    negated: false,",
          "    };",
          "    assert_eq!(writer.fmt_class_ascii(&ast).unwrap(), \"[:xdigit:]\"); // when ast.kind is Xdigit and negated is false",
          "    ",
          "    let ast = ast::ClassAscii {",
          "    span: Span::new(0, 1),",
          "    kind: ClassAsciiKind::Xdigit,",
          "    negated: true,",
          "    };",
          "    assert_eq!(writer.fmt_class_ascii(&ast).unwrap(), \"[:^xdigit:]\"); // when ast.kind is Xdigit and negated is true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter;",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "    let mut writer = Writer { wtr: MockWriter };",
          "    let ast = ast::ClassAscii {",
          "        span: Span::new(0, 1),",
          "        kind: ClassAsciiKind::Digit,",
          "        negated: true,",
          "    };",
          "    writer.fmt_class_ascii(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    writer.fmt_class_ascii(&ast).unwrap(); // Verify for ClassAsciiKind::Digit and negated=true: Expected output \"[:^digit:]\"",
          "    let ast = ast::ClassAscii {",
          "    span: Span::new(0, 1),",
          "    kind: ClassAsciiKind::Xdigit,",
          "    negated: true,",
          "    };",
          "    writer.fmt_class_ascii(&ast).unwrap(); // Verify for ClassAsciiKind::Xdigit and negated=true: Expected output \"[:^xdigit:]\"",
          "    let ast = ast::ClassAscii {",
          "    span: Span::new(0, 1),",
          "    kind: ClassAsciiKind::Xdigit,",
          "    negated: false,",
          "    };",
          "    writer.fmt_class_ascii(&ast).unwrap(); // Verify for ClassAsciiKind::Xdigit and negated=false: Expected output \"[:xdigit:]\"",
          "    let ast = ast::ClassAscii {",
          "    span: Span::new(0, 1),",
          "    kind: ClassAsciiKind::Digit,",
          "    negated: false,",
          "    };",
          "    writer.fmt_class_ascii(&ast).unwrap(); // Verify for ClassAsciiKind::Digit and negated=false: Expected output \"[:digit:]\""
        ],
        "code": [
          "{",
          "    struct MockWriter;",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "    let mut writer = Writer { wtr: MockWriter };",
          "    let ast = ast::ClassAscii {",
          "        span: Span::new(0, 1),",
          "        kind: ClassAsciiKind::Digit,",
          "        negated: true,",
          "    };",
          "    writer.fmt_class_ascii(&ast).unwrap();",
          "    writer.fmt_class_ascii(&ast).unwrap(); // Verify for ClassAsciiKind::Digit and negated=true: Expected output \"[:^digit:]\"",
          "    let ast = ast::ClassAscii {",
          "    span: Span::new(0, 1),",
          "    kind: ClassAsciiKind::Xdigit,",
          "    negated: true,",
          "    };",
          "    writer.fmt_class_ascii(&ast).unwrap(); // Verify for ClassAsciiKind::Xdigit and negated=true: Expected output \"[:^xdigit:]\"",
          "    let ast = ast::ClassAscii {",
          "    span: Span::new(0, 1),",
          "    kind: ClassAsciiKind::Xdigit,",
          "    negated: false,",
          "    };",
          "    writer.fmt_class_ascii(&ast).unwrap(); // Verify for ClassAsciiKind::Xdigit and negated=false: Expected output \"[:xdigit:]\"",
          "    let ast = ast::ClassAscii {",
          "    span: Span::new(0, 1),",
          "    kind: ClassAsciiKind::Digit,",
          "    negated: false,",
          "    };",
          "    writer.fmt_class_ascii(&ast).unwrap(); // Verify for ClassAsciiKind::Digit and negated=false: Expected output \"[:digit:]\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter;",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "    let mut writer = Writer { wtr: MockWriter };",
          "    let ast = ast::ClassAscii {",
          "        span: Span::new(0, 1),",
          "        kind: ClassAsciiKind::Digit,",
          "        negated: false,",
          "    };",
          "    writer.fmt_class_ascii(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    writer.fmt_class_ascii(&ast).unwrap(); // ast.kind = ClassAsciiKind::Xdigit, ast.negated = true",
          "    writer.fmt_class_ascii(&ast).unwrap(); // ast.kind = ClassAsciiKind::Xdigit, ast.negated = false",
          "    writer.wtr.write_str(\"[:^xdigit:]\").unwrap(); // ast.kind = ClassAsciiKind::Xdigit, ast.negated = true",
          "    writer.wtr.write_str(\"[:xdigit:]\").unwrap(); // ast.kind = ClassAsciiKind::Xdigit, ast.negated = false"
        ],
        "code": [
          "{",
          "    struct MockWriter;",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "    let mut writer = Writer { wtr: MockWriter };",
          "    let ast = ast::ClassAscii {",
          "        span: Span::new(0, 1),",
          "        kind: ClassAsciiKind::Digit,",
          "        negated: false,",
          "    };",
          "    writer.fmt_class_ascii(&ast).unwrap();",
          "    writer.fmt_class_ascii(&ast).unwrap(); // ast.kind = ClassAsciiKind::Xdigit, ast.negated = true",
          "    writer.fmt_class_ascii(&ast).unwrap(); // ast.kind = ClassAsciiKind::Xdigit, ast.negated = false",
          "    writer.wtr.write_str(\"[:^xdigit:]\").unwrap(); // ast.kind = ClassAsciiKind::Xdigit, ast.negated = true",
          "    writer.wtr.write_str(\"[:xdigit:]\").unwrap(); // ast.kind = ClassAsciiKind::Xdigit, ast.negated = false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]