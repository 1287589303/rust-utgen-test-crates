[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(\"foo[0-9]+\").unwrap();",
          "    let input = Input {",
          "        haystack: b\"foo1 foo12 foo123\",",
          "        span: Span::new(0, 17),",
          "        anchored: Anchored::Unanchored,",
          "        earliest: false,",
          "    };",
          "    let _matches = re.find_iter(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_matches.re, &re);",
          "    assert_eq!(_matches.it.input.haystack, b\"foo1 foo12 foo123\");",
          "    assert_eq!(_matches.it.input.span.start, 0);",
          "    assert_eq!(_matches.it.input.span.end, 17);",
          "    assert_eq!(_matches.it.input.anchored, Anchored::Unanchored);",
          "    assert_eq!(_matches.it.input.earliest, false);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(\"foo[0-9]+\").unwrap();",
          "    let input = Input {",
          "        haystack: b\"foo1 foo12 foo123\",",
          "        span: Span::new(0, 17),",
          "        anchored: Anchored::Unanchored,",
          "        earliest: false,",
          "    };",
          "    let _matches = re.find_iter(input);",
          "    assert_eq!(_matches.re, &re);",
          "    assert_eq!(_matches.it.input.haystack, b\"foo1 foo12 foo123\");",
          "    assert_eq!(_matches.it.input.span.start, 0);",
          "    assert_eq!(_matches.it.input.span.end, 17);",
          "    assert_eq!(_matches.it.input.anchored, Anchored::Unanchored);",
          "    assert_eq!(_matches.it.input.earliest, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(\"abc\").unwrap();",
          "    let input = Input {",
          "        haystack: b\"abc abc abc\",",
          "        span: Span::new(0, 11),",
          "        anchored: Anchored::Unanchored,",
          "        earliest: false,",
          "    };",
          "    let _matches = re.find_iter(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_matches.re, &re);",
          "    assert_eq!(_matches.it.input.haystack, b\"abc abc abc\");",
          "    assert_eq!(_matches.it.input.span, Span::new(0, 11));",
          "    assert_eq!(_matches.it.input.anchored, Anchored::Unanchored);",
          "    assert_eq!(_matches.it.input.earliest, false);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(\"abc\").unwrap();",
          "    let input = Input {",
          "        haystack: b\"abc abc abc\",",
          "        span: Span::new(0, 11),",
          "        anchored: Anchored::Unanchored,",
          "        earliest: false,",
          "    };",
          "    let _matches = re.find_iter(input);",
          "    assert_eq!(_matches.re, &re);",
          "    assert_eq!(_matches.it.input.haystack, b\"abc abc abc\");",
          "    assert_eq!(_matches.it.input.span, Span::new(0, 11));",
          "    assert_eq!(_matches.it.input.anchored, Anchored::Unanchored);",
          "    assert_eq!(_matches.it.input.earliest, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(\"^foo\").unwrap();",
          "    let input = Input {",
          "        haystack: b\"foobar\",",
          "        span: Span::new(0, 6),",
          "        anchored: Anchored::Unanchored,",
          "        earliest: false,",
          "    };",
          "    let _matches = re.find_iter(input);",
          "}"
        ],
        "oracle": [
          "    let re = Regex::new(\"^foo\").unwrap();",
          "    let input = Input { haystack: b\"foobar\", span: Span::new(0, 6), anchored: Anchored::Unanchored, earliest: false };",
          "    let matches = re.find_iter(input);",
          "    assert!(matches.re == re);",
          "    assert!(matches.it.input.haystack == input.haystack);",
          "    assert!(matches.it.input.span == input.span);",
          "    assert!(matches.it.input.anchored == input.anchored);",
          "    assert!(matches.it.input.earliest == input.earliest);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(\"^foo\").unwrap();",
          "    let input = Input {",
          "        haystack: b\"foobar\",",
          "        span: Span::new(0, 6),",
          "        anchored: Anchored::Unanchored,",
          "        earliest: false,",
          "    };",
          "    let _matches = re.find_iter(input);",
          "    let re = Regex::new(\"^foo\").unwrap();",
          "    let input = Input { haystack: b\"foobar\", span: Span::new(0, 6), anchored: Anchored::Unanchored, earliest: false };",
          "    let matches = re.find_iter(input);",
          "    assert!(matches.re == re);",
          "    assert!(matches.it.input.haystack == input.haystack);",
          "    assert!(matches.it.input.span == input.span);",
          "    assert!(matches.it.input.anchored == input.anchored);",
          "    assert!(matches.it.input.earliest == input.earliest);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(\"bar$\").unwrap();",
          "    let input = Input {",
          "        haystack: b\"foobar\",",
          "        span: Span::new(0, 6),",
          "        anchored: Anchored::Unanchored,",
          "        earliest: false,",
          "    };",
          "    let _matches = re.find_iter(input);",
          "}"
        ],
        "oracle": [
          "    let re = Regex::new(\"bar$\").unwrap();",
          "    let input = Input { haystack: b\"foobar\", span: Span::new(0, 6), anchored: Anchored::Unanchored, earliest: false };",
          "    let result = re.find_iter(input);",
          "    assert!(result.re == re);",
          "    assert!(result.it.input.haystack == input.haystack);",
          "    assert!(result.it.span == input.span);",
          "    assert!(result.it.anchored == input.anchored);",
          "    assert!(result.it.earliest == input.earliest);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(\"bar$\").unwrap();",
          "    let input = Input {",
          "        haystack: b\"foobar\",",
          "        span: Span::new(0, 6),",
          "        anchored: Anchored::Unanchored,",
          "        earliest: false,",
          "    };",
          "    let _matches = re.find_iter(input);",
          "    let re = Regex::new(\"bar$\").unwrap();",
          "    let input = Input { haystack: b\"foobar\", span: Span::new(0, 6), anchored: Anchored::Unanchored, earliest: false };",
          "    let result = re.find_iter(input);",
          "    assert!(result.re == re);",
          "    assert!(result.it.input.haystack == input.haystack);",
          "    assert!(result.it.span == input.span);",
          "    assert!(result.it.anchored == input.anchored);",
          "    assert!(result.it.earliest == input.earliest);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(\"foo\").unwrap();",
          "    let input = Input {",
          "        haystack: b\"\",",
          "        span: Span::new(0, 0),",
          "        anchored: Anchored::Unanchored,",
          "        earliest: false,",
          "    };",
          "    let _matches = re.find_iter(input);",
          "}"
        ],
        "oracle": [
          "    let re = Regex::new(\"foo\").unwrap();",
          "    let input = Input { haystack: b\"\", span: Span::new(0, 0), anchored: Anchored::Unanchored, earliest: false };",
          "    let result = re.find_iter(input);",
          "    assert_eq!(result.re, &re);",
          "    assert_eq!(result.it, iter::Searcher::new(input));"
        ],
        "code": [
          "{",
          "    let re = Regex::new(\"foo\").unwrap();",
          "    let input = Input {",
          "        haystack: b\"\",",
          "        span: Span::new(0, 0),",
          "        anchored: Anchored::Unanchored,",
          "        earliest: false,",
          "    };",
          "    let _matches = re.find_iter(input);",
          "    let re = Regex::new(\"foo\").unwrap();",
          "    let input = Input { haystack: b\"\", span: Span::new(0, 0), anchored: Anchored::Unanchored, earliest: false };",
          "    let result = re.find_iter(input);",
          "    assert_eq!(result.re, &re);",
          "    assert_eq!(result.it, iter::Searcher::new(input));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let re = Regex::new(\"xyz\").unwrap();",
          "    let input = Input {",
          "        haystack: b\"foobar\",",
          "        span: Span::new(0, 6),",
          "        anchored: Anchored::Unanchored,",
          "        earliest: false,",
          "    };",
          "    let _matches = re.find_iter(input);",
          "}"
        ],
        "oracle": [
          "    let re = Regex::new(\"xyz\").unwrap();",
          "    let input = Input { haystack: b\"foobar\", span: Span::new(0, 6), anchored: Anchored::Unanchored, earliest: false };",
          "    let result = re.find_iter(input);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let re = Regex::new(\"xyz\").unwrap();",
          "    let input = Input {",
          "        haystack: b\"foobar\",",
          "        span: Span::new(0, 6),",
          "        anchored: Anchored::Unanchored,",
          "        earliest: false,",
          "    };",
          "    let _matches = re.find_iter(input);",
          "    let re = Regex::new(\"xyz\").unwrap();",
          "    let input = Input { haystack: b\"foobar\", span: Span::new(0, 6), anchored: Anchored::Unanchored, earliest: false };",
          "    let result = re.find_iter(input);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]