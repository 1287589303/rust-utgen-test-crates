[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let small_index = SmallIndex::ZERO;",
          "    let result = small_index.one_more();",
          "    // No assertions, just function call",
          "}"
        ],
        "oracle": [
          "    let small_index = SmallIndex::ZERO;",
          "    let expected = small_index.as_usize() + 1;",
          "    assert_eq!(result, expected);",
          "    let small_index = SmallIndex::new_unchecked(1);",
          "    let expected = small_index.as_usize() + 1;",
          "    assert_eq!(result, expected);",
          "    let small_index = SmallIndex::new_unchecked(usize::MAX - 1);",
          "    let expected = small_index.as_usize() + 1;",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let small_index = SmallIndex::ZERO;",
          "    let result = small_index.one_more();",
          "    // No assertions, just function call",
          "    let small_index = SmallIndex::ZERO;",
          "    let expected = small_index.as_usize() + 1;",
          "    assert_eq!(result, expected);",
          "    let small_index = SmallIndex::new_unchecked(1);",
          "    let expected = small_index.as_usize() + 1;",
          "    assert_eq!(result, expected);",
          "    let small_index = SmallIndex::new_unchecked(usize::MAX - 1);",
          "    let expected = small_index.as_usize() + 1;",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let small_index = SmallIndex::MAX;",
          "    let result = small_index.one_more();",
          "    // No assertions, just function call",
          "}"
        ],
        "oracle": [
          "    let small_index = SmallIndex::MAX;",
          "    let expected_result = small_index.as_usize() + 1;",
          "    assert_eq!(result, expected_result);",
          "    let small_index_zero = SmallIndex::ZERO;",
          "    let result_zero = small_index_zero.one_more();",
          "    let expected_result_zero = small_index_zero.as_usize() + 1;",
          "    assert_eq!(result_zero, expected_result_zero);",
          "    let small_index_small = SmallIndex::new_unchecked(5);",
          "    let result_small = small_index_small.one_more();",
          "    let expected_result_small = small_index_small.as_usize() + 1;",
          "    assert_eq!(result_small, expected_result_small);"
        ],
        "code": [
          "{",
          "    let small_index = SmallIndex::MAX;",
          "    let result = small_index.one_more();",
          "    // No assertions, just function call",
          "    let small_index = SmallIndex::MAX;",
          "    let expected_result = small_index.as_usize() + 1;",
          "    assert_eq!(result, expected_result);",
          "    let small_index_zero = SmallIndex::ZERO;",
          "    let result_zero = small_index_zero.one_more();",
          "    let expected_result_zero = small_index_zero.as_usize() + 1;",
          "    assert_eq!(result_zero, expected_result_zero);",
          "    let small_index_small = SmallIndex::new_unchecked(5);",
          "    let result_small = small_index_small.one_more();",
          "    let expected_result_small = small_index_small.as_usize() + 1;",
          "    assert_eq!(result_small, expected_result_small);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let small_index = SmallIndex::new_unchecked(123);",
          "    let result = small_index.one_more();",
          "    // No assertions, just function call",
          "}"
        ],
        "oracle": [
          "    assert_eq!(small_index.as_usize() + 1, result);"
        ],
        "code": [
          "{",
          "    let small_index = SmallIndex::new_unchecked(123);",
          "    let result = small_index.one_more();",
          "    // No assertions, just function call",
          "    assert_eq!(small_index.as_usize() + 1, result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let small_index = SmallIndex::new_unchecked(SmallIndex::LIMIT - 2);",
          "    let result = small_index.one_more();",
          "    // No assertions, just function call",
          "}"
        ],
        "oracle": [
          "    assert_eq!(small_index.as_usize() + 1, result);"
        ],
        "code": [
          "{",
          "    let small_index = SmallIndex::new_unchecked(SmallIndex::LIMIT - 2);",
          "    let result = small_index.one_more();",
          "    // No assertions, just function call",
          "    assert_eq!(small_index.as_usize() + 1, result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let small_index = SmallIndex::new_unchecked(SmallIndex::LIMIT - 1);",
          "    let result = small_index.one_more();",
          "    // No assertions, just function call",
          "}"
        ],
        "oracle": [
          "    let small_index = SmallIndex::new_unchecked(SmallIndex::LIMIT - 1);",
          "    let expected = SmallIndex::LIMIT;",
          "    let result = small_index.one_more();",
          "    assert_eq!(result, expected.as_usize() + 1);",
          "    ",
          "    let small_index_zero = SmallIndex::ZERO;",
          "    let expected_zero = 1;",
          "    let result_zero = small_index_zero.one_more();",
          "    assert_eq!(result_zero, expected_zero);",
          "    ",
          "    let small_index_mid = SmallIndex::new_unchecked(10);",
          "    let expected_mid = 11;",
          "    let result_mid = small_index_mid.one_more();",
          "    assert_eq!(result_mid, expected_mid);",
          "    ",
          "    let small_index_max = SmallIndex::MAX;",
          "    let expected_max = SmallIndex::MAX.as_usize() + 1;",
          "    let result_max = small_index_max.one_more();",
          "    assert_eq!(result_max, expected_max);"
        ],
        "code": [
          "{",
          "    let small_index = SmallIndex::new_unchecked(SmallIndex::LIMIT - 1);",
          "    let result = small_index.one_more();",
          "    // No assertions, just function call",
          "    let small_index = SmallIndex::new_unchecked(SmallIndex::LIMIT - 1);",
          "    let expected = SmallIndex::LIMIT;",
          "    let result = small_index.one_more();",
          "    assert_eq!(result, expected.as_usize() + 1);",
          "    ",
          "    let small_index_zero = SmallIndex::ZERO;",
          "    let expected_zero = 1;",
          "    let result_zero = small_index_zero.one_more();",
          "    assert_eq!(result_zero, expected_zero);",
          "    ",
          "    let small_index_mid = SmallIndex::new_unchecked(10);",
          "    let expected_mid = 11;",
          "    let result_mid = small_index_mid.one_more();",
          "    assert_eq!(result_mid, expected_mid);",
          "    ",
          "    let small_index_max = SmallIndex::MAX;",
          "    let expected_max = SmallIndex::MAX.as_usize() + 1;",
          "    let result_max = small_index_max.one_more();",
          "    assert_eq!(result_max, expected_max);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]