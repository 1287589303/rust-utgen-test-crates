[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = Utf8Range { start: 0, end: 0 };",
          "    let mut output = fmt::Formatter::new();",
          "    let _ = range.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output.to_string(), \"[00]\");"
        ],
        "code": [
          "{",
          "    let range = Utf8Range { start: 0, end: 0 };",
          "    let mut output = fmt::Formatter::new();",
          "    let _ = range.fmt(&mut output);",
          "    assert_eq!(output.to_string(), \"[00]\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = Utf8Range { start: 1, end: 1 };",
          "    let mut output = fmt::Formatter::new();",
          "    let _ = range.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output.to_string(), \"[1]\");"
        ],
        "code": [
          "{",
          "    let range = Utf8Range { start: 1, end: 1 };",
          "    let mut output = fmt::Formatter::new();",
          "    let _ = range.fmt(&mut output);",
          "    assert_eq!(output.to_string(), \"[1]\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = Utf8Range { start: 100, end: 100 };",
          "    let mut output = fmt::Formatter::new();",
          "    let _ = range.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output.to_string(), \"[64]\");"
        ],
        "code": [
          "{",
          "    let range = Utf8Range { start: 100, end: 100 };",
          "    let mut output = fmt::Formatter::new();",
          "    let _ = range.fmt(&mut output);",
          "    assert_eq!(output.to_string(), \"[64]\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = Utf8Range { start: 250, end: 250 };",
          "    let mut output = fmt::Formatter::new();",
          "    let _ = range.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output.to_string(), \"[FA]\");"
        ],
        "code": [
          "{",
          "    let range = Utf8Range { start: 250, end: 250 };",
          "    let mut output = fmt::Formatter::new();",
          "    let _ = range.fmt(&mut output);",
          "    assert_eq!(output.to_string(), \"[FA]\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = Utf8Range { start: 255, end: 255 };",
          "    let mut output = fmt::Formatter::new();",
          "    let _ = range.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output.to_string(), \"[FF]\");"
        ],
        "code": [
          "{",
          "    let range = Utf8Range { start: 255, end: 255 };",
          "    let mut output = fmt::Formatter::new();",
          "    let _ = range.fmt(&mut output);",
          "    assert_eq!(output.to_string(), \"[FF]\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]