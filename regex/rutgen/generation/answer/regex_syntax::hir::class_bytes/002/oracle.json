[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHir {",
          "        kind: HirKind,",
          "    }",
          "",
          "    impl TestHir {",
          "        fn new(kind: HirKind) -> Self {",
          "            TestHir { kind }",
          "        }",
          "",
          "        fn kind(&self) -> &HirKind {",
          "            &self.kind",
          "        }",
          "    }",
          "",
          "    let hirs = vec![",
          "        TestHir::new(HirKind::Empty),",
          "        TestHir::new(HirKind::Look(Look)),",
          "        TestHir::new(HirKind::Repetition(Repetition)),",
          "    ];",
          "",
          "    let result = class_bytes(&hirs);",
          "}"
        ],
        "oracle": [
          "    let hirs = vec![",
          "    TestHir::new(HirKind::Empty),",
          "    TestHir::new(HirKind::Look(Look)),",
          "    TestHir::new(HirKind::Repetition(Repetition)),",
          "    ];",
          "    let result = class_bytes(&hirs);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    struct TestHir {",
          "        kind: HirKind,",
          "    }",
          "",
          "    impl TestHir {",
          "        fn new(kind: HirKind) -> Self {",
          "            TestHir { kind }",
          "        }",
          "",
          "        fn kind(&self) -> &HirKind {",
          "            &self.kind",
          "        }",
          "    }",
          "",
          "    let hirs = vec![",
          "        TestHir::new(HirKind::Empty),",
          "        TestHir::new(HirKind::Look(Look)),",
          "        TestHir::new(HirKind::Repetition(Repetition)),",
          "    ];",
          "",
          "    let result = class_bytes(&hirs);",
          "    let hirs = vec![",
          "    TestHir::new(HirKind::Empty),",
          "    TestHir::new(HirKind::Look(Look)),",
          "    TestHir::new(HirKind::Repetition(Repetition)),",
          "    ];",
          "    let result = class_bytes(&hirs);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHir {",
          "        kind: HirKind,",
          "    }",
          "",
          "    impl TestHir {",
          "        fn new(kind: HirKind) -> Self {",
          "            TestHir { kind }",
          "        }",
          "",
          "        fn kind(&self) -> &HirKind {",
          "            &self.kind",
          "        }",
          "    }",
          "",
          "    let hirs = vec![",
          "        TestHir::new(HirKind::Capture(Capture)),",
          "        TestHir::new(HirKind::Concat(Vec::new())),",
          "    ];",
          "",
          "    let result = class_bytes(&hirs);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    struct TestHir {",
          "        kind: HirKind,",
          "    }",
          "",
          "    impl TestHir {",
          "        fn new(kind: HirKind) -> Self {",
          "            TestHir { kind }",
          "        }",
          "",
          "        fn kind(&self) -> &HirKind {",
          "            &self.kind",
          "        }",
          "    }",
          "",
          "    let hirs = vec![",
          "        TestHir::new(HirKind::Capture(Capture)),",
          "        TestHir::new(HirKind::Concat(Vec::new())),",
          "    ];",
          "",
          "    let result = class_bytes(&hirs);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]