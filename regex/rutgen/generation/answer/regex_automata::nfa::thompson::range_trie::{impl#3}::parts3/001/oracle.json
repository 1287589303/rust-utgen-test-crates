[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let old_range = Utf8Range::new(0, 1).unwrap();",
          "    let new_range = Utf8Range::new(2, 3).unwrap();",
          "    let both_range = Utf8Range::new(4, 5).unwrap();",
          "    let r1 = SplitRange::Old(old_range);",
          "    let r2 = SplitRange::New(new_range);",
          "    let r3 = SplitRange::Both(both_range);",
          "    parts3(r1, r2, r3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parts3(r1, r2, r3), Split { partitions: [SplitRange::Old(old_range), SplitRange::New(new_range), SplitRange::Both(both_range)], len: 3 });"
        ],
        "code": [
          "{",
          "    let old_range = Utf8Range::new(0, 1).unwrap();",
          "    let new_range = Utf8Range::new(2, 3).unwrap();",
          "    let both_range = Utf8Range::new(4, 5).unwrap();",
          "    let r1 = SplitRange::Old(old_range);",
          "    let r2 = SplitRange::New(new_range);",
          "    let r3 = SplitRange::Both(both_range);",
          "    parts3(r1, r2, r3);",
          "    assert_eq!(parts3(r1, r2, r3), Split { partitions: [SplitRange::Old(old_range), SplitRange::New(new_range), SplitRange::Both(both_range)], len: 3 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let old_range = Utf8Range::new(0, 0).unwrap();",
          "    let new_range = Utf8Range::new(0, 0).unwrap();",
          "    let both_range = Utf8Range::new(0, 0).unwrap();",
          "    let r1 = SplitRange::Old(old_range);",
          "    let r2 = SplitRange::New(new_range);",
          "    let r3 = SplitRange::Both(both_range);",
          "    parts3(r1, r2, r3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parts3(r1, r2, r3), Split { partitions: [SplitRange::Old(old_range), SplitRange::New(new_range), SplitRange::Both(both_range)], len: 3 });"
        ],
        "code": [
          "{",
          "    let old_range = Utf8Range::new(0, 0).unwrap();",
          "    let new_range = Utf8Range::new(0, 0).unwrap();",
          "    let both_range = Utf8Range::new(0, 0).unwrap();",
          "    let r1 = SplitRange::Old(old_range);",
          "    let r2 = SplitRange::New(new_range);",
          "    let r3 = SplitRange::Both(both_range);",
          "    parts3(r1, r2, r3);",
          "    assert_eq!(parts3(r1, r2, r3), Split { partitions: [SplitRange::Old(old_range), SplitRange::New(new_range), SplitRange::Both(both_range)], len: 3 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let old_range = Utf8Range::new(0, 0x10FFFF).unwrap();",
          "    let new_range = Utf8Range::new(0, 0x10FFFF).unwrap();",
          "    let both_range = Utf8Range::new(0, 0x10FFFF).unwrap();",
          "    let r1 = SplitRange::Old(old_range);",
          "    let r2 = SplitRange::New(new_range);",
          "    let r3 = SplitRange::Both(both_range);",
          "    parts3(r1, r2, r3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parts3(r1, r2, r3), Split { partitions: [r1, r2, r3], len: 3 });"
        ],
        "code": [
          "{",
          "    let old_range = Utf8Range::new(0, 0x10FFFF).unwrap();",
          "    let new_range = Utf8Range::new(0, 0x10FFFF).unwrap();",
          "    let both_range = Utf8Range::new(0, 0x10FFFF).unwrap();",
          "    let r1 = SplitRange::Old(old_range);",
          "    let r2 = SplitRange::New(new_range);",
          "    let r3 = SplitRange::Both(both_range);",
          "    parts3(r1, r2, r3);",
          "    assert_eq!(parts3(r1, r2, r3), Split { partitions: [r1, r2, r3], len: 3 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]