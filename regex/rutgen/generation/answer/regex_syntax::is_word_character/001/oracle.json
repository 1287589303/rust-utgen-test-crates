[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let test_cases = vec![",
          "        'a',  // alphabetic",
          "        'Z',  // alphabetic",
          "        'あ', // alphabetic (Japanese)",
          "        '\\u{200C}', // join control",
          "        '\\u{200D}', // join control",
          "        '1',  // decimal number",
          "        '2',  // decimal number",
          "        '\\u{0661}', // Arabic-Indic digit",
          "        '\\u{0300}', // mark",
          "        '_',  // connector punctuation",
          "        '•',  // connector punctuation",
          "    ];",
          "    ",
          "    for c in test_cases {",
          "        let _ = is_word_character(c);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_character('a'), true);",
          "    assert_eq!(is_word_character('Z'), true);",
          "    assert_eq!(is_word_character('あ'), true);",
          "    assert_eq!(is_word_character('\\u{200C}'), true);",
          "    assert_eq!(is_word_character('\\u{200D}'), true);",
          "    assert_eq!(is_word_character('1'), true);",
          "    assert_eq!(is_word_character('2'), true);",
          "    assert_eq!(is_word_character('\\u{0661}'), true);",
          "    assert_eq!(is_word_character('\\u{0300}'), true);",
          "    assert_eq!(is_word_character('_'), true);",
          "    assert_eq!(is_word_character('•'), true);"
        ],
        "code": [
          "{",
          "    let test_cases = vec![",
          "        'a',  // alphabetic",
          "        'Z',  // alphabetic",
          "        'あ', // alphabetic (Japanese)",
          "        '\\u{200C}', // join control",
          "        '\\u{200D}', // join control",
          "        '1',  // decimal number",
          "        '2',  // decimal number",
          "        '\\u{0661}', // Arabic-Indic digit",
          "        '\\u{0300}', // mark",
          "        '_',  // connector punctuation",
          "        '•',  // connector punctuation",
          "    ];",
          "    ",
          "    for c in test_cases {",
          "        let _ = is_word_character(c);",
          "    }",
          "    assert_eq!(is_word_character('a'), true);",
          "    assert_eq!(is_word_character('Z'), true);",
          "    assert_eq!(is_word_character('あ'), true);",
          "    assert_eq!(is_word_character('\\u{200C}'), true);",
          "    assert_eq!(is_word_character('\\u{200D}'), true);",
          "    assert_eq!(is_word_character('1'), true);",
          "    assert_eq!(is_word_character('2'), true);",
          "    assert_eq!(is_word_character('\\u{0661}'), true);",
          "    assert_eq!(is_word_character('\\u{0300}'), true);",
          "    assert_eq!(is_word_character('_'), true);",
          "    assert_eq!(is_word_character('•'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let non_word_cases = vec![",
          "        '!',  // punctuation",
          "        '?',  // punctuation",
          "        '@',  // punctuation",
          "        ' ',  // whitespace",
          "        '\\t', // whitespace",
          "        '\\n', // control character",
          "        '\\u{202E}', // right-to-left embedding",
          "    ];",
          "",
          "    for c in non_word_cases {",
          "        let _ = is_word_character(c);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_character('!'), false);",
          "    assert_eq!(is_word_character('?'), false);",
          "    assert_eq!(is_word_character('@'), false);",
          "    assert_eq!(is_word_character(' '), false);",
          "    assert_eq!(is_word_character('\\t'), false);",
          "    assert_eq!(is_word_character('\\n'), false);",
          "    assert_eq!(is_word_character('\\u{202E}'), false);"
        ],
        "code": [
          "{",
          "    let non_word_cases = vec![",
          "        '!',  // punctuation",
          "        '?',  // punctuation",
          "        '@',  // punctuation",
          "        ' ',  // whitespace",
          "        '\\t', // whitespace",
          "        '\\n', // control character",
          "        '\\u{202E}', // right-to-left embedding",
          "    ];",
          "",
          "    for c in non_word_cases {",
          "        let _ = is_word_character(c);",
          "    }",
          "    assert_eq!(is_word_character('!'), false);",
          "    assert_eq!(is_word_character('?'), false);",
          "    assert_eq!(is_word_character('@'), false);",
          "    assert_eq!(is_word_character(' '), false);",
          "    assert_eq!(is_word_character('\\t'), false);",
          "    assert_eq!(is_word_character('\\n'), false);",
          "    assert_eq!(is_word_character('\\u{202E}'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]