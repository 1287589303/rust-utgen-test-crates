[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let translator_i = TranslatorI::new(&translator, \"pattern\");",
          "    ",
          "    translator_i.push(HirFrame::AlternationBranch);",
          "    let result = translator_i.pop_concat_expr();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_none());",
          "    assert_eq!(translator.stack.borrow().len(), 1);",
          "    assert!(matches!(translator.stack.borrow()[0], HirFrame::AlternationBranch));"
        ],
        "code": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let translator_i = TranslatorI::new(&translator, \"pattern\");",
          "    ",
          "    translator_i.push(HirFrame::AlternationBranch);",
          "    let result = translator_i.pop_concat_expr();",
          "    assert!(result.is_none());",
          "    assert_eq!(translator.stack.borrow().len(), 1);",
          "    assert!(matches!(translator.stack.borrow()[0], HirFrame::AlternationBranch));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let translator_i = TranslatorI::new(&translator, \"pattern\");",
          "    ",
          "    let result = translator_i.pop_concat_expr();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_none());",
          "    assert_eq!(translator.stack.borrow().len(), 0);"
        ],
        "code": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let translator_i = TranslatorI::new(&translator, \"pattern\");",
          "    ",
          "    let result = translator_i.pop_concat_expr();",
          "    assert!(result.is_none());",
          "    assert_eq!(translator.stack.borrow().len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let translator_i = TranslatorI::new(&translator, \"pattern\");",
          "    ",
          "    translator_i.push(HirFrame::Concat);",
          "    let result = translator_i.pop_concat_expr();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);",
          "    assert!(translator_i.trans().stack.borrow().is_empty());",
          "    let frame = HirFrame::AlternationBranch;",
          "    translator_i.push(frame);",
          "    assert!(translator_i.pop_concat_expr().is_some());",
          "    assert!(translator_i.trans().stack.borrow().len() == 1);",
          "    assert!(matches!(translator_i.pop_concat_expr(), Some(Hir::literal(_))));",
          "    translator_i.pop();"
        ],
        "code": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let translator_i = TranslatorI::new(&translator, \"pattern\");",
          "    ",
          "    translator_i.push(HirFrame::Concat);",
          "    let result = translator_i.pop_concat_expr();",
          "    assert_eq!(result, None);",
          "    assert!(translator_i.trans().stack.borrow().is_empty());",
          "    let frame = HirFrame::AlternationBranch;",
          "    translator_i.push(frame);",
          "    assert!(translator_i.pop_concat_expr().is_some());",
          "    assert!(translator_i.trans().stack.borrow().len() == 1);",
          "    assert!(matches!(translator_i.pop_concat_expr(), Some(Hir::literal(_))));",
          "    translator_i.pop();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]