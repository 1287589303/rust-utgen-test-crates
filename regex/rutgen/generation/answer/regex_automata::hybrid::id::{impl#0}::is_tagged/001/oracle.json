[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MAX);",
          "    id.is_tagged();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(id.is_tagged(), false);",
          "    let id_tagged = LazyStateID::new_unchecked(LazyStateID::MAX + 1);",
          "    assert_eq!(id_tagged.is_tagged(), true);",
          "    let id_beyond_tagged = LazyStateID::new_unchecked(LazyStateID::MAX + 2);",
          "    assert_eq!(id_beyond_tagged.is_tagged(), true);",
          "    let id_unknown = LazyStateID::new_unchecked(LazyStateID::MASK_UNKNOWN);",
          "    assert_eq!(id_unknown.is_tagged(), true);",
          "    let id_dead = LazyStateID::new_unchecked(LazyStateID::MASK_DEAD);",
          "    assert_eq!(id_dead.is_tagged(), true);",
          "    let id_quit = LazyStateID::new_unchecked(LazyStateID::MASK_QUIT);",
          "    assert_eq!(id_quit.is_tagged(), true);",
          "    let id_start = LazyStateID::new_unchecked(LazyStateID::MASK_START);",
          "    assert_eq!(id_start.is_tagged(), true);",
          "    let id_match = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH);",
          "    assert_eq!(id_match.is_tagged(), true);"
        ],
        "code": [
          "{",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MAX);",
          "    id.is_tagged();",
          "    assert_eq!(id.is_tagged(), false);",
          "    let id_tagged = LazyStateID::new_unchecked(LazyStateID::MAX + 1);",
          "    assert_eq!(id_tagged.is_tagged(), true);",
          "    let id_beyond_tagged = LazyStateID::new_unchecked(LazyStateID::MAX + 2);",
          "    assert_eq!(id_beyond_tagged.is_tagged(), true);",
          "    let id_unknown = LazyStateID::new_unchecked(LazyStateID::MASK_UNKNOWN);",
          "    assert_eq!(id_unknown.is_tagged(), true);",
          "    let id_dead = LazyStateID::new_unchecked(LazyStateID::MASK_DEAD);",
          "    assert_eq!(id_dead.is_tagged(), true);",
          "    let id_quit = LazyStateID::new_unchecked(LazyStateID::MASK_QUIT);",
          "    assert_eq!(id_quit.is_tagged(), true);",
          "    let id_start = LazyStateID::new_unchecked(LazyStateID::MASK_START);",
          "    assert_eq!(id_start.is_tagged(), true);",
          "    let id_match = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH);",
          "    assert_eq!(id_match.is_tagged(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MAX);",
          "    id.is_tagged();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(id.is_tagged(), false);",
          "    let id_tagged = LazyStateID::new_unchecked(LazyStateID::MAX + 1);",
          "    assert_eq!(id_tagged.is_tagged(), true);",
          "    let id_unknown = LazyStateID::new_unchecked(LazyStateID::MASK_UNKNOWN);",
          "    assert_eq!(id_unknown.is_tagged(), true);",
          "    let id_dead = LazyStateID::new_unchecked(LazyStateID::MASK_DEAD);",
          "    assert_eq!(id_dead.is_tagged(), true);",
          "    let id_quit = LazyStateID::new_unchecked(LazyStateID::MASK_QUIT);",
          "    assert_eq!(id_quit.is_tagged(), true);",
          "    let id_start = LazyStateID::new_unchecked(LazyStateID::MASK_START);",
          "    assert_eq!(id_start.is_tagged(), true);",
          "    let id_match = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH);",
          "    assert_eq!(id_match.is_tagged(), true);"
        ],
        "code": [
          "{",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MAX);",
          "    id.is_tagged();",
          "    assert_eq!(id.is_tagged(), false);",
          "    let id_tagged = LazyStateID::new_unchecked(LazyStateID::MAX + 1);",
          "    assert_eq!(id_tagged.is_tagged(), true);",
          "    let id_unknown = LazyStateID::new_unchecked(LazyStateID::MASK_UNKNOWN);",
          "    assert_eq!(id_unknown.is_tagged(), true);",
          "    let id_dead = LazyStateID::new_unchecked(LazyStateID::MASK_DEAD);",
          "    assert_eq!(id_dead.is_tagged(), true);",
          "    let id_quit = LazyStateID::new_unchecked(LazyStateID::MASK_QUIT);",
          "    assert_eq!(id_quit.is_tagged(), true);",
          "    let id_start = LazyStateID::new_unchecked(LazyStateID::MASK_START);",
          "    assert_eq!(id_start.is_tagged(), true);",
          "    let id_match = LazyStateID::new_unchecked(LazyStateID::MASK_MATCH);",
          "    assert_eq!(id_match.is_tagged(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MAX + 1);",
          "    id.is_tagged();",
          "}"
        ],
        "oracle": [
          "    let id = LazyStateID::new_unchecked(LazyStateID::MAX + 1); assert!(id.is_tagged());",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MAX); assert!(!id.is_tagged());",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MAX - 1); assert!(!id.is_tagged());",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MAX + 2); assert!(id.is_tagged());",
          "    let id = LazyStateID::new_unchecked(0); assert!(!id.is_tagged());",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MAX + 100); assert!(id.is_tagged());"
        ],
        "code": [
          "{",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MAX + 1);",
          "    id.is_tagged();",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MAX + 1); assert!(id.is_tagged());",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MAX); assert!(!id.is_tagged());",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MAX - 1); assert!(!id.is_tagged());",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MAX + 2); assert!(id.is_tagged());",
          "    let id = LazyStateID::new_unchecked(0); assert!(!id.is_tagged());",
          "    let id = LazyStateID::new_unchecked(LazyStateID::MAX + 100); assert!(id.is_tagged());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let id = LazyStateID::new_unchecked(0);",
          "    id.is_tagged();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(LazyStateID::new_unchecked(0).is_tagged(), false);",
          "    assert_eq!(LazyStateID::new_unchecked(LazyStateID::MAX + 1).is_tagged(), true);",
          "    assert_eq!(LazyStateID::new_unchecked(LazyStateID::MAX).is_tagged(), false);",
          "    assert_eq!(LazyStateID::new_unchecked(LazyStateID::MAX + 10).is_tagged(), true);",
          "    assert_eq!(LazyStateID::new_unchecked(usize::MAX).is_tagged(), true);",
          "    assert_eq!(LazyStateID::new_unchecked(1).is_tagged(), false);",
          "    assert_eq!(LazyStateID::new_unchecked(LazyStateID::MASK_UNKNOWN).is_tagged(), true);",
          "    assert_eq!(LazyStateID::new_unchecked(LazyStateID::MASK_DEAD).is_tagged(), true);",
          "    assert_eq!(LazyStateID::new_unchecked(LazyStateID::MASK_QUIT).is_tagged(), true);",
          "    assert_eq!(LazyStateID::new_unchecked(LazyStateID::MASK_START).is_tagged(), true);",
          "    assert_eq!(LazyStateID::new_unchecked(LazyStateID::MASK_MATCH).is_tagged(), true);"
        ],
        "code": [
          "{",
          "    let id = LazyStateID::new_unchecked(0);",
          "    id.is_tagged();",
          "    assert_eq!(LazyStateID::new_unchecked(0).is_tagged(), false);",
          "    assert_eq!(LazyStateID::new_unchecked(LazyStateID::MAX + 1).is_tagged(), true);",
          "    assert_eq!(LazyStateID::new_unchecked(LazyStateID::MAX).is_tagged(), false);",
          "    assert_eq!(LazyStateID::new_unchecked(LazyStateID::MAX + 10).is_tagged(), true);",
          "    assert_eq!(LazyStateID::new_unchecked(usize::MAX).is_tagged(), true);",
          "    assert_eq!(LazyStateID::new_unchecked(1).is_tagged(), false);",
          "    assert_eq!(LazyStateID::new_unchecked(LazyStateID::MASK_UNKNOWN).is_tagged(), true);",
          "    assert_eq!(LazyStateID::new_unchecked(LazyStateID::MASK_DEAD).is_tagged(), true);",
          "    assert_eq!(LazyStateID::new_unchecked(LazyStateID::MASK_QUIT).is_tagged(), true);",
          "    assert_eq!(LazyStateID::new_unchecked(LazyStateID::MASK_START).is_tagged(), true);",
          "    assert_eq!(LazyStateID::new_unchecked(LazyStateID::MASK_MATCH).is_tagged(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]