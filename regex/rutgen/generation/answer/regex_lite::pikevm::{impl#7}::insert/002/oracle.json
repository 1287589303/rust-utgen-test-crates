[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let capacity = 10;",
          "    let mut sparse_set = SparseSet::new(capacity);",
          "    let state_id = StateID::new(0); // Assuming StateID can be created this way",
          "",
          "    sparse_set.insert(state_id);",
          "}"
        ],
        "oracle": [
          "    assert!(sparse_set.len() == 1);",
          "    assert!(sparse_set.contains(state_id) == true);",
          "    assert!(sparse_set.capacity() == capacity);",
          "    assert!(sparse_set.dense[0] == state_id);",
          "    assert!(sparse_set.sparse[state_id.as_usize()] == 0);"
        ],
        "code": [
          "{",
          "    let capacity = 10;",
          "    let mut sparse_set = SparseSet::new(capacity);",
          "    let state_id = StateID::new(0); // Assuming StateID can be created this way",
          "",
          "    sparse_set.insert(state_id);",
          "    assert!(sparse_set.len() == 1);",
          "    assert!(sparse_set.contains(state_id) == true);",
          "    assert!(sparse_set.capacity() == capacity);",
          "    assert!(sparse_set.dense[0] == state_id);",
          "    assert!(sparse_set.sparse[state_id.as_usize()] == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let capacity = 10;",
          "    let mut sparse_set = SparseSet::new(capacity);",
          "    let state_id1 = StateID::new(1);",
          "    let state_id2 = StateID::new(2);",
          "    ",
          "    sparse_set.insert(state_id1);",
          "    sparse_set.insert(state_id2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sparse_set.contains(state_id1), true);",
          "    assert_eq!(sparse_set.contains(state_id2), true);",
          "    assert_eq!(sparse_set.len(), 2);",
          "    assert_eq!(sparse_set.capacity(), capacity);",
          "    assert_eq!(sparse_set.is_empty(), false);",
          "    assert_eq!(sparse_set.insert(StateID::new(3)), true);",
          "    assert_eq!(sparse_set.len(), 3);",
          "    assert_eq!(sparse_set.insert(state_id1), false);",
          "    assert_eq!(sparse_set.len(), 3);",
          "    assert!(std::panic::catch_unwind(|| {",
          "    for i in 0..capacity + 1 {",
          "    sparse_set.insert(StateID::new(i));",
          "    }",
          "    false",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    let capacity = 10;",
          "    let mut sparse_set = SparseSet::new(capacity);",
          "    let state_id1 = StateID::new(1);",
          "    let state_id2 = StateID::new(2);",
          "    ",
          "    sparse_set.insert(state_id1);",
          "    sparse_set.insert(state_id2);",
          "    assert_eq!(sparse_set.contains(state_id1), true);",
          "    assert_eq!(sparse_set.contains(state_id2), true);",
          "    assert_eq!(sparse_set.len(), 2);",
          "    assert_eq!(sparse_set.capacity(), capacity);",
          "    assert_eq!(sparse_set.is_empty(), false);",
          "    assert_eq!(sparse_set.insert(StateID::new(3)), true);",
          "    assert_eq!(sparse_set.len(), 3);",
          "    assert_eq!(sparse_set.insert(state_id1), false);",
          "    assert_eq!(sparse_set.len(), 3);",
          "    assert!(std::panic::catch_unwind(|| {",
          "    for i in 0..capacity + 1 {",
          "    sparse_set.insert(StateID::new(i));",
          "    }",
          "    false",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let capacity = 5;",
          "    let mut sparse_set = SparseSet::new(capacity);",
          "    for i in 0..capacity - 1 {",
          "        let state_id = StateID::new(i);",
          "        sparse_set.insert(state_id);",
          "    }",
          "    let new_state_id = StateID::new(capacity - 1);",
          "    ",
          "    sparse_set.insert(new_state_id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sparse_set.len(), capacity - 1);",
          "    assert!(sparse_set.contains(StateID::new(capacity - 1)));",
          "    assert!(sparse_set.insert(new_state_id));",
          "    assert_eq!(sparse_set.len(), capacity);",
          "    assert!(sparse_set.contains(StateID::new(capacity - 1)));",
          "    assert!(sparse_set.insert(new_state_id) == false);"
        ],
        "code": [
          "{",
          "    let capacity = 5;",
          "    let mut sparse_set = SparseSet::new(capacity);",
          "    for i in 0..capacity - 1 {",
          "        let state_id = StateID::new(i);",
          "        sparse_set.insert(state_id);",
          "    }",
          "    let new_state_id = StateID::new(capacity - 1);",
          "    ",
          "    sparse_set.insert(new_state_id);",
          "    assert_eq!(sparse_set.len(), capacity - 1);",
          "    assert!(sparse_set.contains(StateID::new(capacity - 1)));",
          "    assert!(sparse_set.insert(new_state_id));",
          "    assert_eq!(sparse_set.len(), capacity);",
          "    assert!(sparse_set.contains(StateID::new(capacity - 1)));",
          "    assert!(sparse_set.insert(new_state_id) == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let capacity = 3;",
          "    let mut sparse_set = SparseSet::new(capacity);",
          "    let state_id1 = StateID::new(0);",
          "    let state_id2 = StateID::new(1);",
          "    ",
          "    sparse_set.insert(state_id1);",
          "    sparse_set.insert(state_id2);",
          "}"
        ],
        "oracle": [
          "    assert!(sparse_set.len() == 2);",
          "    assert!(sparse_set.contains(state_id1));",
          "    assert!(sparse_set.contains(state_id2));",
          "    assert!(sparse_set.capacity() == capacity);",
          "    assert!(sparse_set.is_empty() == false);",
          "    assert!(sparse_set.insert(StateID::new(2)) == true);",
          "    assert!(sparse_set.len() == 3);",
          "    assert!(sparse_set.contains(StateID::new(2)));",
          "    assert!(sparse_set.insert(state_id1) == false);",
          "    assert!(sparse_set.insert(state_id2) == false);",
          "    assert!(sparse_set.len() == 3);",
          "    assert!(panic::catch_unwind(|| sparse_set.insert(StateID::new(3))).is_err());"
        ],
        "code": [
          "{",
          "    let capacity = 3;",
          "    let mut sparse_set = SparseSet::new(capacity);",
          "    let state_id1 = StateID::new(0);",
          "    let state_id2 = StateID::new(1);",
          "    ",
          "    sparse_set.insert(state_id1);",
          "    sparse_set.insert(state_id2);",
          "    assert!(sparse_set.len() == 2);",
          "    assert!(sparse_set.contains(state_id1));",
          "    assert!(sparse_set.contains(state_id2));",
          "    assert!(sparse_set.capacity() == capacity);",
          "    assert!(sparse_set.is_empty() == false);",
          "    assert!(sparse_set.insert(StateID::new(2)) == true);",
          "    assert!(sparse_set.len() == 3);",
          "    assert!(sparse_set.contains(StateID::new(2)));",
          "    assert!(sparse_set.insert(state_id1) == false);",
          "    assert!(sparse_set.insert(state_id2) == false);",
          "    assert!(sparse_set.len() == 3);",
          "    assert!(panic::catch_unwind(|| sparse_set.insert(StateID::new(3))).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]