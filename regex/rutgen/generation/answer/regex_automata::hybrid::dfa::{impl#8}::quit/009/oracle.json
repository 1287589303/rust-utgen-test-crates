[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let config = Config::new().unicode_word_boundary(true);",
          "    config.quit(128, false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_unicode_word_boundary(), true);",
          "    assert!(matches!(std::panic::catch_unwind(|| { config.quit(128, false); }), Err(_)));",
          "    assert!(config.quitset.is_some());",
          "    assert!(config.quitset.as_ref().unwrap().contains(128));",
          "    assert_eq!(config.quitset.as_ref().unwrap().bits.0[1], 0b00000001);"
        ],
        "code": [
          "{",
          "    let config = Config::new().unicode_word_boundary(true);",
          "    config.quit(128, false);",
          "    assert_eq!(config.get_unicode_word_boundary(), true);",
          "    assert!(matches!(std::panic::catch_unwind(|| { config.quit(128, false); }), Err(_)));",
          "    assert!(config.quitset.is_some());",
          "    assert!(config.quitset.as_ref().unwrap().contains(128));",
          "    assert_eq!(config.quitset.as_ref().unwrap().bits.0[1], 0b00000001);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let config = Config::new().unicode_word_boundary(true);",
          "    config.quit(200, false);",
          "}"
        ],
        "oracle": [
          "    #[should_panic]",
          "    assert_eq!(config.get_unicode_word_boundary(), true);",
          "    assert_eq!(byte.is_ascii(), false);",
          "    assert_eq!(yes, false);",
          "    assert!(std::panic::catch_unwind(|| {",
          "    config.quit(200, false);",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    let config = Config::new().unicode_word_boundary(true);",
          "    config.quit(200, false);",
          "    #[should_panic]",
          "    assert_eq!(config.get_unicode_word_boundary(), true);",
          "    assert_eq!(byte.is_ascii(), false);",
          "    assert_eq!(yes, false);",
          "    assert!(std::panic::catch_unwind(|| {",
          "    config.quit(200, false);",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let config = Config::new().unicode_word_boundary(true);",
          "    config.quit(255, false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(true, std::panic::catch_unwind(|| { let config = Config::new().unicode_word_boundary(true); config.quit(255, false); }).is_err());"
        ],
        "code": [
          "{",
          "    let config = Config::new().unicode_word_boundary(true);",
          "    config.quit(255, false);",
          "    assert_eq!(true, std::panic::catch_unwind(|| { let config = Config::new().unicode_word_boundary(true); config.quit(255, false); }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]