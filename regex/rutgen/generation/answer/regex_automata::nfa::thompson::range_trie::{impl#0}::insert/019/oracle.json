[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut trie = RangeTrie::new();",
          "    let transition = Transition {",
          "        range: Utf8Range { start: 1, end: 3 },",
          "        next_id: StateID::new_unchecked(2),",
          "    };",
          "    trie.states.push(State {",
          "        transitions: vec![transition],",
          "    });",
          "",
          "    let ranges = vec![",
          "        Utf8Range { start: 4, end: 5 },",
          "    ];",
          "    trie.insert(&ranges);",
          "}"
        ],
        "oracle": [
          "    assert!(!ranges.is_empty());",
          "    assert!(ranges.len() <= 4);",
          "    let mut stack = mem::replace(&mut self.insert_stack, vec![]);",
          "    stack.clear();",
          "    stack.push(NextInsert::new(ROOT, ranges));",
          "    let Some(next) = stack.pop();",
          "    assert!(!ranges.is_empty());",
          "    let (state_id, ranges) = (next.state_id(), next.ranges());",
          "    let mut new = ranges[0];",
          "    let rest = &ranges[1..];",
          "    let mut i = self.state(state_id).find(new);",
          "    assert!(i == self.state(state_id).transitions.len());",
          "    let old = self.state(state_id).transitions[i].clone();",
          "    let split = Split::new(old.range, new);",
          "    assert!(split.is_none());",
          "    let split = Split::new(old.range, new).unwrap();",
          "    let splits = split.as_slice();",
          "    assert!(splits.len() == 1);",
          "    for (j, &srange) in splits.iter().enumerate() {",
          "    match srange {",
          "    SplitRange::New(r) => {",
          "    assert!(j + 1 == splits.len());",
          "    assert!(i < trans.len());",
          "    }",
          "    }",
          "    }"
        ],
        "code": [
          "{",
          "    let mut trie = RangeTrie::new();",
          "    let transition = Transition {",
          "        range: Utf8Range { start: 1, end: 3 },",
          "        next_id: StateID::new_unchecked(2),",
          "    };",
          "    trie.states.push(State {",
          "        transitions: vec![transition],",
          "    });",
          "",
          "    let ranges = vec![",
          "        Utf8Range { start: 4, end: 5 },",
          "    ];",
          "    trie.insert(&ranges);",
          "    assert!(!ranges.is_empty());",
          "    assert!(ranges.len() <= 4);",
          "    let mut stack = mem::replace(&mut self.insert_stack, vec![]);",
          "    stack.clear();",
          "    stack.push(NextInsert::new(ROOT, ranges));",
          "    let Some(next) = stack.pop();",
          "    assert!(!ranges.is_empty());",
          "    let (state_id, ranges) = (next.state_id(), next.ranges());",
          "    let mut new = ranges[0];",
          "    let rest = &ranges[1..];",
          "    let mut i = self.state(state_id).find(new);",
          "    assert!(i == self.state(state_id).transitions.len());",
          "    let old = self.state(state_id).transitions[i].clone();",
          "    let split = Split::new(old.range, new);",
          "    assert!(split.is_none());",
          "    let split = Split::new(old.range, new).unwrap();",
          "    let splits = split.as_slice();",
          "    assert!(splits.len() == 1);",
          "    for (j, &srange) in splits.iter().enumerate() {",
          "    match srange {",
          "    SplitRange::New(r) => {",
          "    assert!(j + 1 == splits.len());",
          "    assert!(i < trans.len());",
          "    }",
          "    }",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut trie = RangeTrie::new();",
          "    let transition1 = Transition {",
          "        range: Utf8Range { start: 1, end: 3 },",
          "        next_id: StateID::new_unchecked(2),",
          "    };",
          "    let transition2 = Transition {",
          "        range: Utf8Range { start: 6, end: 8 },",
          "        next_id: StateID::new_unchecked(3),",
          "    };",
          "    trie.states.push(State {",
          "        transitions: vec![transition1, transition2],",
          "    });",
          "",
          "    let ranges = vec![",
          "        Utf8Range { start: 9, end: 10 },",
          "        Utf8Range { start: 11, end: 12 },",
          "    ];",
          "    trie.insert(&ranges);",
          "}"
        ],
        "oracle": [
          "    trie.insert(&[Utf8Range { start: 1, end: 3 }, Utf8Range { start: 2, end: 4 }, Utf8Range { start: 5, end: 7 }, Utf8Range { start: 8, end: 9 }]);",
          "    assert!(!trie.insert_stack.is_empty());",
          "    trie.insert(&[Utf8Range { start: 3, end: 5 }]);",
          "    assert!(trie.states.len() == 4);",
          "    assert_eq!(trie.state(StateID::new_unchecked(1)).transitions.len(), 3);",
          "    assert_eq!(trie.state(StateID::new_unchecked(3)).transitions.len(), 1);",
          "    trie.insert(&[Utf8Range { start: 6, end: 8 }]);",
          "    assert!(trie.state(StateID::new_unchecked(1)).transitions.len() == 4);",
          "    assert!(trie.state(StateID::new_unchecked(3)).transitions.len() == 2);"
        ],
        "code": [
          "{",
          "    let mut trie = RangeTrie::new();",
          "    let transition1 = Transition {",
          "        range: Utf8Range { start: 1, end: 3 },",
          "        next_id: StateID::new_unchecked(2),",
          "    };",
          "    let transition2 = Transition {",
          "        range: Utf8Range { start: 6, end: 8 },",
          "        next_id: StateID::new_unchecked(3),",
          "    };",
          "    trie.states.push(State {",
          "        transitions: vec![transition1, transition2],",
          "    });",
          "",
          "    let ranges = vec![",
          "        Utf8Range { start: 9, end: 10 },",
          "        Utf8Range { start: 11, end: 12 },",
          "    ];",
          "    trie.insert(&ranges);",
          "    trie.insert(&[Utf8Range { start: 1, end: 3 }, Utf8Range { start: 2, end: 4 }, Utf8Range { start: 5, end: 7 }, Utf8Range { start: 8, end: 9 }]);",
          "    assert!(!trie.insert_stack.is_empty());",
          "    trie.insert(&[Utf8Range { start: 3, end: 5 }]);",
          "    assert!(trie.states.len() == 4);",
          "    assert_eq!(trie.state(StateID::new_unchecked(1)).transitions.len(), 3);",
          "    assert_eq!(trie.state(StateID::new_unchecked(3)).transitions.len(), 1);",
          "    trie.insert(&[Utf8Range { start: 6, end: 8 }]);",
          "    assert!(trie.state(StateID::new_unchecked(1)).transitions.len() == 4);",
          "    assert!(trie.state(StateID::new_unchecked(3)).transitions.len() == 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut trie = RangeTrie::new();",
          "    let transition = Transition {",
          "        range: Utf8Range { start: 1, end: 5 },",
          "        next_id: StateID::new_unchecked(2),",
          "    };",
          "    trie.states.push(State {",
          "        transitions: vec![transition],",
          "    });",
          "",
          "    let ranges = vec![",
          "        Utf8Range { start: 2, end: 4 },",
          "    ];",
          "    trie.insert(&ranges);",
          "}"
        ],
        "oracle": [
          "    assert!(!ranges.is_empty());",
          "    assert!(ranges.len() <= 4);",
          "    assert!(let Some(next) = stack.pop());",
          "    assert!(!ranges.is_empty());",
          "    assert!(i != self.state(state_id).transitions.len());",
          "    assert!(Split::new(old.range, new).is_none());",
          "    assert!(Split::new(old.range, new).is_some());",
          "    assert!(Split::new(old.range, new).is_some());",
          "    assert!(splits.len() == 1);",
          "    assert!((j, &srange) in splits.iter().enumerate());",
          "    assert!(srange.match SplitRange::New(r));",
          "    assert!(srange.match SplitRange::New(r));",
          "    assert!(j + 1 == splits.len());",
          "    assert!(i < trans.len());",
          "    assert!((j, &srange) in splits.iter().enumerate() == false);",
          "    assert!(let Some(next) = stack.pop());"
        ],
        "code": [
          "{",
          "    let mut trie = RangeTrie::new();",
          "    let transition = Transition {",
          "        range: Utf8Range { start: 1, end: 5 },",
          "        next_id: StateID::new_unchecked(2),",
          "    };",
          "    trie.states.push(State {",
          "        transitions: vec![transition],",
          "    });",
          "",
          "    let ranges = vec![",
          "        Utf8Range { start: 2, end: 4 },",
          "    ];",
          "    trie.insert(&ranges);",
          "    assert!(!ranges.is_empty());",
          "    assert!(ranges.len() <= 4);",
          "    assert!(let Some(next) = stack.pop());",
          "    assert!(!ranges.is_empty());",
          "    assert!(i != self.state(state_id).transitions.len());",
          "    assert!(Split::new(old.range, new).is_none());",
          "    assert!(Split::new(old.range, new).is_some());",
          "    assert!(Split::new(old.range, new).is_some());",
          "    assert!(splits.len() == 1);",
          "    assert!((j, &srange) in splits.iter().enumerate());",
          "    assert!(srange.match SplitRange::New(r));",
          "    assert!(srange.match SplitRange::New(r));",
          "    assert!(j + 1 == splits.len());",
          "    assert!(i < trans.len());",
          "    assert!((j, &srange) in splits.iter().enumerate() == false);",
          "    assert!(let Some(next) = stack.pop());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut trie = RangeTrie::new();",
          "    let transition = Transition {",
          "        range: Utf8Range { start: 1, end: 5 },",
          "        next_id: StateID::new_unchecked(2),",
          "    };",
          "    trie.states.push(State {",
          "        transitions: vec![transition],",
          "    });",
          "",
          "    let ranges = vec![",
          "        Utf8Range { start: 3, end: 6 },",
          "        Utf8Range { start: 7, end: 8 },",
          "    ];",
          "    trie.insert(&ranges);",
          "}"
        ],
        "oracle": [
          "    assert!(!ranges.is_empty());",
          "    assert!(ranges.len() <= 4);",
          "    assert_eq!(stack.len(), 1);",
          "    assert!(!ranges.is_empty());",
          "    assert!(i < self.state(state_id).transitions.len());",
          "    assert!(Split::new(old.range, new).is_none());",
          "    assert!(Split::new(old.range, new).is_some());",
          "    assert_eq!(splits.len(), 1);",
          "    assert!((j, &srange) in splits.iter().enumerate());",
          "    assert!(srange matches SplitRange::New(r));",
          "    assert!(srange matches SplitRange::New(r));",
          "    assert!(j + 1 == splits.len());",
          "    assert!(i < trans.len());",
          "    assert!((j, &srange) in splits.iter().enumerate());",
          "    assert!(!ranges.is_empty());"
        ],
        "code": [
          "{",
          "    let mut trie = RangeTrie::new();",
          "    let transition = Transition {",
          "        range: Utf8Range { start: 1, end: 5 },",
          "        next_id: StateID::new_unchecked(2),",
          "    };",
          "    trie.states.push(State {",
          "        transitions: vec![transition],",
          "    });",
          "",
          "    let ranges = vec![",
          "        Utf8Range { start: 3, end: 6 },",
          "        Utf8Range { start: 7, end: 8 },",
          "    ];",
          "    trie.insert(&ranges);",
          "    assert!(!ranges.is_empty());",
          "    assert!(ranges.len() <= 4);",
          "    assert_eq!(stack.len(), 1);",
          "    assert!(!ranges.is_empty());",
          "    assert!(i < self.state(state_id).transitions.len());",
          "    assert!(Split::new(old.range, new).is_none());",
          "    assert!(Split::new(old.range, new).is_some());",
          "    assert_eq!(splits.len(), 1);",
          "    assert!((j, &srange) in splits.iter().enumerate());",
          "    assert!(srange matches SplitRange::New(r));",
          "    assert!(srange matches SplitRange::New(r));",
          "    assert!(j + 1 == splits.len());",
          "    assert!(i < trans.len());",
          "    assert!((j, &srange) in splits.iter().enumerate());",
          "    assert!(!ranges.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]