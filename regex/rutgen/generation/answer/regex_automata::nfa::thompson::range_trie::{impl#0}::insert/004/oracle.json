[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut trie = RangeTrie::new();",
          "    let ranges = [",
          "        Utf8Range { start: 10, end: 20 },",
          "        Utf8Range { start: 30, end: 40 },",
          "        Utf8Range { start: 50, end: 60 },",
          "        Utf8Range { start: 70, end: 80 },",
          "    ];",
          "    trie.insert(&ranges);",
          "}"
        ],
        "oracle": [
          "    trie.insert(&ranges);",
          "    assert_eq!(trie.state(ROOT).transitions.len(), 1);",
          "    assert_eq!(trie.state(ROOT).transitions[0].range.start, 10);",
          "    assert_eq!(trie.state(ROOT).transitions[0].range.end, 80);",
          "    assert_eq!(trie.state(ROOT).transitions[0].next_id, trie.state(ROOT).transitions.len() as StateID);",
          "    assert!(trie.insert_stack.borrow().is_empty());"
        ],
        "code": [
          "{",
          "    let mut trie = RangeTrie::new();",
          "    let ranges = [",
          "        Utf8Range { start: 10, end: 20 },",
          "        Utf8Range { start: 30, end: 40 },",
          "        Utf8Range { start: 50, end: 60 },",
          "        Utf8Range { start: 70, end: 80 },",
          "    ];",
          "    trie.insert(&ranges);",
          "    trie.insert(&ranges);",
          "    assert_eq!(trie.state(ROOT).transitions.len(), 1);",
          "    assert_eq!(trie.state(ROOT).transitions[0].range.start, 10);",
          "    assert_eq!(trie.state(ROOT).transitions[0].range.end, 80);",
          "    assert_eq!(trie.state(ROOT).transitions[0].next_id, trie.state(ROOT).transitions.len() as StateID);",
          "    assert!(trie.insert_stack.borrow().is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut trie = RangeTrie::new();",
          "    let ranges = [",
          "        Utf8Range { start: 10, end: 20 },",
          "        Utf8Range { start: 30, end: 40 },",
          "        Utf8Range { start: 50, end: 60 },",
          "    ];",
          "    trie.insert(&ranges);",
          "}"
        ],
        "oracle": [
          "    assert!(!ranges.is_empty()); // line 296",
          "    assert!(ranges.len() <= 4); // line 297",
          "    let Some(next) = stack.pop(); // line 303",
          "    assert!(!ranges.is_empty()); // line 305",
          "    let i = self.state(state_id).transitions.len(); // line 318"
        ],
        "code": [
          "{",
          "    let mut trie = RangeTrie::new();",
          "    let ranges = [",
          "        Utf8Range { start: 10, end: 20 },",
          "        Utf8Range { start: 30, end: 40 },",
          "        Utf8Range { start: 50, end: 60 },",
          "    ];",
          "    trie.insert(&ranges);",
          "    assert!(!ranges.is_empty()); // line 296",
          "    assert!(ranges.len() <= 4); // line 297",
          "    let Some(next) = stack.pop(); // line 303",
          "    assert!(!ranges.is_empty()); // line 305",
          "    let i = self.state(state_id).transitions.len(); // line 318",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut trie = RangeTrie::new();",
          "    let ranges = [",
          "        Utf8Range { start: 10, end: 20 },",
          "        Utf8Range { start: 30, end: 40 },",
          "    ];",
          "    trie.insert(&ranges);",
          "}"
        ],
        "oracle": [
          "    assert!(!$ranges.is_empty());",
          "    assert_eq!($ranges.len(), 2);",
          "    let next = stack.pop();",
          "    assert!(next.is_some());",
          "    assert!(!$ranges.is_empty());",
          "    assert_eq!(i, self.state(state_id).transitions.len());"
        ],
        "code": [
          "{",
          "    let mut trie = RangeTrie::new();",
          "    let ranges = [",
          "        Utf8Range { start: 10, end: 20 },",
          "        Utf8Range { start: 30, end: 40 },",
          "    ];",
          "    trie.insert(&ranges);",
          "    assert!(!$ranges.is_empty());",
          "    assert_eq!($ranges.len(), 2);",
          "    let next = stack.pop();",
          "    assert!(next.is_some());",
          "    assert!(!$ranges.is_empty());",
          "    assert_eq!(i, self.state(state_id).transitions.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut trie = RangeTrie::new();",
          "    let ranges = [",
          "        Utf8Range { start: 10, end: 20 },",
          "    ];",
          "    trie.insert(&ranges);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(trie.state(ROOT).transitions.len(), 1);",
          "    assert_eq!(trie.state(ROOT).transitions[0].range.start, 10);",
          "    assert_eq!(trie.state(ROOT).transitions[0].range.end, 20);",
          "    assert_eq!(trie.state(ROOT).transitions[0].next_id, trie.state(ROOT).transitions.len() as StateID);",
          "    assert!(trie.state(ROOT).transitions[0].next_id != FINAL);",
          "    assert!(trie.insert_stack.borrow().is_empty());"
        ],
        "code": [
          "{",
          "    let mut trie = RangeTrie::new();",
          "    let ranges = [",
          "        Utf8Range { start: 10, end: 20 },",
          "    ];",
          "    trie.insert(&ranges);",
          "    assert_eq!(trie.state(ROOT).transitions.len(), 1);",
          "    assert_eq!(trie.state(ROOT).transitions[0].range.start, 10);",
          "    assert_eq!(trie.state(ROOT).transitions[0].range.end, 20);",
          "    assert_eq!(trie.state(ROOT).transitions[0].next_id, trie.state(ROOT).transitions.len() as StateID);",
          "    assert!(trie.state(ROOT).transitions[0].next_id != FINAL);",
          "    assert!(trie.insert_stack.borrow().is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]