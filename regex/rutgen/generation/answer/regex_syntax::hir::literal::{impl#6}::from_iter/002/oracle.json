[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_iter: Vec<Literal> = vec![];",
          "    let seq = Seq::from_iter(empty_iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq.is_empty(), true);",
          "    assert_eq!(seq.len(), Some(0));",
          "    assert!(seq.literals().is_none());"
        ],
        "code": [
          "{",
          "    let empty_iter: Vec<Literal> = vec![];",
          "    let seq = Seq::from_iter(empty_iter);",
          "    assert_eq!(seq.is_empty(), true);",
          "    assert_eq!(seq.len(), Some(0));",
          "    assert!(seq.literals().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let seq: Seq = Seq::from_iter(vec![].into_iter());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq.literals(), Some(&vec![][..]));",
          "    assert!(seq.is_empty());",
          "    assert_eq!(seq.len(), Some(0));",
          "    assert!(seq.is_finite());",
          "    assert!(seq.is_exact());",
          "    assert!(!seq.is_inexact());"
        ],
        "code": [
          "{",
          "    let seq: Seq = Seq::from_iter(vec![].into_iter());",
          "    assert_eq!(seq.literals(), Some(&vec![][..]));",
          "    assert!(seq.is_empty());",
          "    assert_eq!(seq.len(), Some(0));",
          "    assert!(seq.is_finite());",
          "    assert!(seq.is_exact());",
          "    assert!(!seq.is_inexact());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let no_literals: std::iter::Empty<Literal> = std::iter::empty();",
          "    let seq = Seq::from_iter(no_literals);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq.is_empty(), true);",
          "    assert_eq!(seq.len(), Some(0));",
          "    assert_eq!(seq.literals(), Some(&[]));"
        ],
        "code": [
          "{",
          "    let no_literals: std::iter::Empty<Literal> = std::iter::empty();",
          "    let seq = Seq::from_iter(no_literals);",
          "    assert_eq!(seq.is_empty(), true);",
          "    assert_eq!(seq.len(), Some(0));",
          "    assert_eq!(seq.literals(), Some(&[]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]