[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\b\\w{13}\\b\").unwrap();",
          "    let hay = \"\";",
          "    re.is_match(hay);",
          "}"
        ],
        "oracle": [
          "    assert!(!re.is_match(\"\"));",
          "    assert!(re.is_match(\"I categorically deny having triskaidekaphobia.\"));",
          "    assert!(!re.is_match(\"short words\"));",
          "    assert!(re.is_match(\"exactly13chars!\"));",
          "    assert!(!re.is_match(\"12345678901234\"));",
          "    assert!(re.is_match(\"some words with 1234567890123 characters\"));",
          "    assert!(!re.is_match(\"just a few\"));",
          "    assert!(re.is_match(\"the longestwordhere\"));"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\b\\w{13}\\b\").unwrap();",
          "    let hay = \"\";",
          "    re.is_match(hay);",
          "    assert!(!re.is_match(\"\"));",
          "    assert!(re.is_match(\"I categorically deny having triskaidekaphobia.\"));",
          "    assert!(!re.is_match(\"short words\"));",
          "    assert!(re.is_match(\"exactly13chars!\"));",
          "    assert!(!re.is_match(\"12345678901234\"));",
          "    assert!(re.is_match(\"some words with 1234567890123 characters\"));",
          "    assert!(!re.is_match(\"just a few\"));",
          "    assert!(re.is_match(\"the longestwordhere\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\b\\w{13}\\b\").unwrap();",
          "    let hay = \"This string has no matching words.\";",
          "    re.is_match(hay);",
          "}"
        ],
        "oracle": [
          "    assert!(!re.is_match(\"\"));",
          "    assert!(!re.is_match(\"shortword\"));",
          "    assert!(re.is_match(\"This string includes a longword1234.\"));",
          "    assert!(re.is_match(\"Find the word procrustean here.\"));",
          "    assert!(!re.is_match(\"No match here!\"));",
          "    assert!(re.is_match(\"This string has a word: triskaidekaphobia.\"));",
          "    assert!(!re.is_match(\"abcdefg\"));",
          "    assert!(re.is_match(\"What's in a word? antidisestablishmentarianism.\"));",
          "    assert!(re.is_match(\"1234567890123\"));",
          "    assert!(!re.is_match(\"two words: misconfigured and broken.\"));"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\b\\w{13}\\b\").unwrap();",
          "    let hay = \"This string has no matching words.\";",
          "    re.is_match(hay);",
          "    assert!(!re.is_match(\"\"));",
          "    assert!(!re.is_match(\"shortword\"));",
          "    assert!(re.is_match(\"This string includes a longword1234.\"));",
          "    assert!(re.is_match(\"Find the word procrustean here.\"));",
          "    assert!(!re.is_match(\"No match here!\"));",
          "    assert!(re.is_match(\"This string has a word: triskaidekaphobia.\"));",
          "    assert!(!re.is_match(\"abcdefg\"));",
          "    assert!(re.is_match(\"What's in a word? antidisestablishmentarianism.\"));",
          "    assert!(re.is_match(\"1234567890123\"));",
          "    assert!(!re.is_match(\"two words: misconfigured and broken.\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\b\\w{13}\\b\").unwrap();",
          "    let hay = \"This string has exactly thirteen characters.\";",
          "    re.is_match(hay);",
          "}"
        ],
        "oracle": [
          "    assert!(re.is_match(\"This string has exactly thirteen characters.\"));",
          "    assert!(!re.is_match(\"Short word.\"));",
          "    assert!(re.is_match(\"I categorically deny having triskaidekaphobia.\"));",
          "    assert!(!re.is_match(\"No match here!\"));",
          "    assert!(re.is_match(\"Thirteen.\"));"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\b\\w{13}\\b\").unwrap();",
          "    let hay = \"This string has exactly thirteen characters.\";",
          "    re.is_match(hay);",
          "    assert!(re.is_match(\"This string has exactly thirteen characters.\"));",
          "    assert!(!re.is_match(\"Short word.\"));",
          "    assert!(re.is_match(\"I categorically deny having triskaidekaphobia.\"));",
          "    assert!(!re.is_match(\"No match here!\"));",
          "    assert!(re.is_match(\"Thirteen.\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\b\\w{13}\\b\").unwrap();",
          "    let hay = \"I have thirteen characters and another thirteen.\";",
          "    re.is_match(hay);",
          "}"
        ],
        "oracle": [
          "    assert!(re.is_match(\"I categorically deny having triskaidekaphobia.\"));",
          "    assert!(!re.is_match(\"No match here.\"));",
          "    assert!(re.is_match(\"Thirteencharactersand\"));",
          "    assert!(!re.is_match(\"Short match.\"));",
          "    assert!(re.is_match(\"Words with exactly thirteen characters\"));",
          "    assert!(!re.is_match(\"This is a test.\"));"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\b\\w{13}\\b\").unwrap();",
          "    let hay = \"I have thirteen characters and another thirteen.\";",
          "    re.is_match(hay);",
          "    assert!(re.is_match(\"I categorically deny having triskaidekaphobia.\"));",
          "    assert!(!re.is_match(\"No match here.\"));",
          "    assert!(re.is_match(\"Thirteencharactersand\"));",
          "    assert!(!re.is_match(\"Short match.\"));",
          "    assert!(re.is_match(\"Words with exactly thirteen characters\"));",
          "    assert!(!re.is_match(\"This is a test.\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\b\\w{13}\\b\").unwrap();",
          "    let hay = \"This! Has? Thirteen... Characters.\";",
          "    re.is_match(hay);",
          "}"
        ],
        "oracle": [
          "    assert!(re.is_match(\"This! Has? Thirteen... Characters.\"));",
          "    assert!(!re.is_match(\"Short word\"));",
          "    assert!(re.is_match(\"Here is a word: triskaidekaphobia is long.\"));",
          "    assert!(!re.is_match(\"No match here.\"));",
          "    assert!(re.is_match(\"In this sentence, we have thirteen words.\"));",
          "    assert!(!re.is_match(\"\"));"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\b\\w{13}\\b\").unwrap();",
          "    let hay = \"This! Has? Thirteen... Characters.\";",
          "    re.is_match(hay);",
          "    assert!(re.is_match(\"This! Has? Thirteen... Characters.\"));",
          "    assert!(!re.is_match(\"Short word\"));",
          "    assert!(re.is_match(\"Here is a word: triskaidekaphobia is long.\"));",
          "    assert!(!re.is_match(\"No match here.\"));",
          "    assert!(re.is_match(\"In this sentence, we have thirteen words.\"));",
          "    assert!(!re.is_match(\"\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\b\\w{13}\\b\").unwrap();",
          "    let hay = \"This is a test 𝕓𝕖𝕒𝕣𝕤𝕖𝕣 with 13 characters.\";",
          "    re.is_match(hay);",
          "}"
        ],
        "oracle": [
          "    assert!(re.is_match(\"This is a test 𝕓𝕖𝕒𝕣𝕤𝕖𝕣 with 13 characters.\"));",
          "    assert!(!re.is_match(\"This is a test with fewer characters.\"));",
          "    assert!(re.is_match(\"Somewhere in this text is a strange word: triskaidekaphobia.\"));",
          "    assert!(!re.is_match(\"Short words like bear should not match.\"));",
          "    assert!(re.is_match(\"Another example could be antiestablishmentarianism.\"));",
          "    assert!(!re.is_match(\"One more test with 12 chars: abcd efgh ijkl.\"));",
          "    assert!(re.is_match(\"Здесь есть слово из тринадцати символов.\"));"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\b\\w{13}\\b\").unwrap();",
          "    let hay = \"This is a test 𝕓𝕖𝕒𝕣𝕤𝕖𝕣 with 13 characters.\";",
          "    re.is_match(hay);",
          "    assert!(re.is_match(\"This is a test 𝕓𝕖𝕒𝕣𝕤𝕖𝕣 with 13 characters.\"));",
          "    assert!(!re.is_match(\"This is a test with fewer characters.\"));",
          "    assert!(re.is_match(\"Somewhere in this text is a strange word: triskaidekaphobia.\"));",
          "    assert!(!re.is_match(\"Short words like bear should not match.\"));",
          "    assert!(re.is_match(\"Another example could be antiestablishmentarianism.\"));",
          "    assert!(!re.is_match(\"One more test with 12 chars: abcd efgh ijkl.\"));",
          "    assert!(re.is_match(\"Здесь есть слово из тринадцати символов.\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\b\\w{1}\\b\").unwrap();",
          "    let hay = \"a\"; // single character match",
          "    re.is_match(hay);",
          "}"
        ],
        "oracle": [
          "    assert!(re.is_match(\"a\")); // single character match",
          "    assert!(!re.is_match(\"\")); // empty string, no match",
          "    assert!(re.is_match(\"b\")); // match another single character",
          "    assert!(!re.is_match(\"ab\")); // two characters, no match",
          "    assert!(!re.is_match(\"aa\")); // two same characters, no match",
          "    assert!(re.is_match(\" \")); // single whitespace, no match",
          "    assert!(re.is_match(\"1\")); // single digit match",
          "    assert!(!re.is_match(\"a1\")); // single character and a digit, no match",
          "    assert!(re.is_match(\"!\")); // single punctuation match",
          "    assert!(!re.is_match(\"!!\")); // two punctuation, no match",
          "    assert!(re.is_match(\" \")); // single Unicode space, match",
          "    assert!(!re.is_match(\"  \")); // Unicode space with extra character, no match",
          "    assert!(re.is_match(\"ñ\")); // single Unicode character match",
          "    assert!(!re.is_match(\"ññ\")); // two same Unicode characters, no match"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\b\\w{1}\\b\").unwrap();",
          "    let hay = \"a\"; // single character match",
          "    re.is_match(hay);",
          "    assert!(re.is_match(\"a\")); // single character match",
          "    assert!(!re.is_match(\"\")); // empty string, no match",
          "    assert!(re.is_match(\"b\")); // match another single character",
          "    assert!(!re.is_match(\"ab\")); // two characters, no match",
          "    assert!(!re.is_match(\"aa\")); // two same characters, no match",
          "    assert!(re.is_match(\" \")); // single whitespace, no match",
          "    assert!(re.is_match(\"1\")); // single digit match",
          "    assert!(!re.is_match(\"a1\")); // single character and a digit, no match",
          "    assert!(re.is_match(\"!\")); // single punctuation match",
          "    assert!(!re.is_match(\"!!\")); // two punctuation, no match",
          "    assert!(re.is_match(\" \")); // single Unicode space, match",
          "    assert!(!re.is_match(\"  \")); // Unicode space with extra character, no match",
          "    assert!(re.is_match(\"ñ\")); // single Unicode character match",
          "    assert!(!re.is_match(\"ññ\")); // two same Unicode characters, no match",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]