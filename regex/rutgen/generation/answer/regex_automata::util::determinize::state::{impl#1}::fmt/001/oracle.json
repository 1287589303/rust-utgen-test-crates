[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = Arc::new([1u8, 2, 3]);",
          "    let state = State(data.clone());",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", state));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{:?}\", state), \"State([1, 2, 3])\");"
        ],
        "code": [
          "{",
          "    let data = Arc::new([1u8, 2, 3]);",
          "    let state = State(data.clone());",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", state));",
          "    assert_eq!(format!(\"{:?}\", state), \"State([1, 2, 3])\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = Arc::new([0u8, 255, 128, 64]);",
          "    let state = State(data.clone());",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", state));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.repr().0, &[0u8, 255, 128, 64]);",
          "    assert!(format!(\"{:?}\", state).contains(\"State\"));",
          "    assert!(format!(\"{:?}\", state).contains(\"field\"));",
          "    assert_eq!(format!(\"{:?}\", state).len(), 21);"
        ],
        "code": [
          "{",
          "    let data = Arc::new([0u8, 255, 128, 64]);",
          "    let state = State(data.clone());",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", state));",
          "    assert_eq!(state.repr().0, &[0u8, 255, 128, 64]);",
          "    assert!(format!(\"{:?}\", state).contains(\"State\"));",
          "    assert!(format!(\"{:?}\", state).contains(\"field\"));",
          "    assert_eq!(format!(\"{:?}\", state).len(), 21);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]