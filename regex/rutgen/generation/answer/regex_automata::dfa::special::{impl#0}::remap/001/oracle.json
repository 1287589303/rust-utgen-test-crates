[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special {",
          "        max: StateID(0),",
          "        quit_id: StateID(128),",
          "        min_match: StateID(256),",
          "        max_match: StateID(384),",
          "        min_accel: StateID(512),",
          "        max_accel: StateID(640),",
          "        min_start: StateID(768),",
          "        max_start: StateID(896),",
          "    };",
          "",
          "    let result = special.remap(|id| StateID(id.0 + 1));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.max, StateID(1));",
          "    assert_eq!(result.quit_id, StateID(129));",
          "    assert_eq!(result.min_match, StateID(257));",
          "    assert_eq!(result.max_match, StateID(385));",
          "    assert_eq!(result.min_accel, StateID(513));",
          "    assert_eq!(result.max_accel, StateID(641));",
          "    assert_eq!(result.min_start, StateID(769));",
          "    assert_eq!(result.max_start, StateID(897));"
        ],
        "code": [
          "{",
          "    let special = Special {",
          "        max: StateID(0),",
          "        quit_id: StateID(128),",
          "        min_match: StateID(256),",
          "        max_match: StateID(384),",
          "        min_accel: StateID(512),",
          "        max_accel: StateID(640),",
          "        min_start: StateID(768),",
          "        max_start: StateID(896),",
          "    };",
          "",
          "    let result = special.remap(|id| StateID(id.0 + 1));",
          "    assert_eq!(result.max, StateID(1));",
          "    assert_eq!(result.quit_id, StateID(129));",
          "    assert_eq!(result.min_match, StateID(257));",
          "    assert_eq!(result.max_match, StateID(385));",
          "    assert_eq!(result.min_accel, StateID(513));",
          "    assert_eq!(result.max_accel, StateID(641));",
          "    assert_eq!(result.min_start, StateID(769));",
          "    assert_eq!(result.max_start, StateID(897));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special {",
          "        max: StateID(1024),",
          "        quit_id: StateID(896),",
          "        min_match: StateID(768),",
          "        max_match: StateID(640),",
          "        min_accel: StateID(512),",
          "        max_accel: StateID(384),",
          "        min_start: StateID(256),",
          "        max_start: StateID(128),",
          "    };",
          "",
          "    let result = special.remap(|id| StateID(id.0 - 1));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.max, StateID(1023));",
          "    assert_eq!(result.quit_id, StateID(895));",
          "    assert_eq!(result.min_match, StateID(767));",
          "    assert_eq!(result.max_match, StateID(639));",
          "    assert_eq!(result.min_accel, StateID(511));",
          "    assert_eq!(result.max_accel, StateID(383));",
          "    assert_eq!(result.min_start, StateID(255));",
          "    assert_eq!(result.max_start, StateID(127));"
        ],
        "code": [
          "{",
          "    let special = Special {",
          "        max: StateID(1024),",
          "        quit_id: StateID(896),",
          "        min_match: StateID(768),",
          "        max_match: StateID(640),",
          "        min_accel: StateID(512),",
          "        max_accel: StateID(384),",
          "        min_start: StateID(256),",
          "        max_start: StateID(128),",
          "    };",
          "",
          "    let result = special.remap(|id| StateID(id.0 - 1));",
          "    assert_eq!(result.max, StateID(1023));",
          "    assert_eq!(result.quit_id, StateID(895));",
          "    assert_eq!(result.min_match, StateID(767));",
          "    assert_eq!(result.max_match, StateID(639));",
          "    assert_eq!(result.min_accel, StateID(511));",
          "    assert_eq!(result.max_accel, StateID(383));",
          "    assert_eq!(result.min_start, StateID(255));",
          "    assert_eq!(result.max_start, StateID(127));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special {",
          "        max: StateID(512),",
          "        quit_id: StateID(512),",
          "        min_match: StateID(512),",
          "        max_match: StateID(512),",
          "        min_accel: StateID(512),",
          "        max_accel: StateID(512),",
          "        min_start: StateID(512),",
          "        max_start: StateID(512),",
          "    };",
          "",
          "    let result = special.remap(|id| id);",
          "}"
        ],
        "oracle": [
          "    let special = Special { max: StateID(512), quit_id: StateID(512), min_match: StateID(512), max_match: StateID(512), min_accel: StateID(512), max_accel: StateID(512), min_start: StateID(512), max_start: StateID(512) };",
          "    let result = special.remap(|id| id);",
          "    assert_eq!(result.max, StateID(512));",
          "    assert_eq!(result.quit_id, StateID(512));",
          "    assert_eq!(result.min_match, StateID(512));",
          "    assert_eq!(result.max_match, StateID(512));",
          "    assert_eq!(result.min_accel, StateID(512));",
          "    assert_eq!(result.max_accel, StateID(512));",
          "    assert_eq!(result.min_start, StateID(512));",
          "    assert_eq!(result.max_start, StateID(512));"
        ],
        "code": [
          "{",
          "    let special = Special {",
          "        max: StateID(512),",
          "        quit_id: StateID(512),",
          "        min_match: StateID(512),",
          "        max_match: StateID(512),",
          "        min_accel: StateID(512),",
          "        max_accel: StateID(512),",
          "        min_start: StateID(512),",
          "        max_start: StateID(512),",
          "    };",
          "",
          "    let result = special.remap(|id| id);",
          "    let special = Special { max: StateID(512), quit_id: StateID(512), min_match: StateID(512), max_match: StateID(512), min_accel: StateID(512), max_accel: StateID(512), min_start: StateID(512), max_start: StateID(512) };",
          "    let result = special.remap(|id| id);",
          "    assert_eq!(result.max, StateID(512));",
          "    assert_eq!(result.quit_id, StateID(512));",
          "    assert_eq!(result.min_match, StateID(512));",
          "    assert_eq!(result.max_match, StateID(512));",
          "    assert_eq!(result.min_accel, StateID(512));",
          "    assert_eq!(result.max_accel, StateID(512));",
          "    assert_eq!(result.min_start, StateID(512));",
          "    assert_eq!(result.max_start, StateID(512));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special {",
          "        max: StateID(0),",
          "        quit_id: StateID(128),",
          "        min_match: StateID(256),",
          "        max_match: StateID(384),",
          "        min_accel: StateID(512),",
          "        max_accel: StateID(640),",
          "        min_start: StateID(768),",
          "        max_start: StateID(896),",
          "    };",
          "",
          "    let result = special.remap(|id| StateID((id.0 + 128) % 1025));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.max, StateID(128));",
          "    assert_eq!(result.quit_id, StateID(0));",
          "    assert_eq!(result.min_match, StateID(384));",
          "    assert_eq!(result.max_match, StateID(512));",
          "    assert_eq!(result.min_accel, StateID(640));",
          "    assert_eq!(result.max_accel, StateID(768));",
          "    assert_eq!(result.min_start, StateID(896));",
          "    assert_eq!(result.max_start, StateID(0));"
        ],
        "code": [
          "{",
          "    let special = Special {",
          "        max: StateID(0),",
          "        quit_id: StateID(128),",
          "        min_match: StateID(256),",
          "        max_match: StateID(384),",
          "        min_accel: StateID(512),",
          "        max_accel: StateID(640),",
          "        min_start: StateID(768),",
          "        max_start: StateID(896),",
          "    };",
          "",
          "    let result = special.remap(|id| StateID((id.0 + 128) % 1025));",
          "    assert_eq!(result.max, StateID(128));",
          "    assert_eq!(result.quit_id, StateID(0));",
          "    assert_eq!(result.min_match, StateID(384));",
          "    assert_eq!(result.max_match, StateID(512));",
          "    assert_eq!(result.min_accel, StateID(640));",
          "    assert_eq!(result.max_accel, StateID(768));",
          "    assert_eq!(result.min_start, StateID(896));",
          "    assert_eq!(result.max_start, StateID(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]