[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_builder = StateBuilderMatches(Vec::new());",
          "    let formatter = &mut core::fmt::Formatter::default();",
          "    state_builder.fmt(formatter);",
          "}"
        ],
        "oracle": [
          "    let state_builder = StateBuilderMatches(Vec::new());",
          "    let formatter = &mut core::fmt::Formatter::default();",
          "    assert_eq!(state_builder.fmt(formatter).is_ok(), true);",
          "    state_builder.fmt(formatter);",
          "    let state_builder_non_empty = StateBuilderMatches(vec![1, 2, 3]);",
          "    assert_eq!(state_builder_non_empty.fmt(formatter).is_ok(), true);",
          "    state_builder_non_empty.fmt(formatter);"
        ],
        "code": [
          "{",
          "    let state_builder = StateBuilderMatches(Vec::new());",
          "    let formatter = &mut core::fmt::Formatter::default();",
          "    state_builder.fmt(formatter);",
          "    let state_builder = StateBuilderMatches(Vec::new());",
          "    let formatter = &mut core::fmt::Formatter::default();",
          "    assert_eq!(state_builder.fmt(formatter).is_ok(), true);",
          "    state_builder.fmt(formatter);",
          "    let state_builder_non_empty = StateBuilderMatches(vec![1, 2, 3]);",
          "    assert_eq!(state_builder_non_empty.fmt(formatter).is_ok(), true);",
          "    state_builder_non_empty.fmt(formatter);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_builder = StateBuilderMatches(vec![0]);",
          "    let formatter = &mut core::fmt::Formatter::default();",
          "    state_builder.fmt(formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state_builder.0.len(), 1);",
          "    assert_eq!(formatter.to_string(), \"StateBuilderMatches([])\");",
          "    assert!(!formatter.is_empty());",
          "    assert!(formatter.write_called);",
          "    assert!(formatter.flush_called);"
        ],
        "code": [
          "{",
          "    let state_builder = StateBuilderMatches(vec![0]);",
          "    let formatter = &mut core::fmt::Formatter::default();",
          "    state_builder.fmt(formatter);",
          "    assert_eq!(state_builder.0.len(), 1);",
          "    assert_eq!(formatter.to_string(), \"StateBuilderMatches([])\");",
          "    assert!(!formatter.is_empty());",
          "    assert!(formatter.write_called);",
          "    assert!(formatter.flush_called);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_builder = StateBuilderMatches((0..=255).map(|b| b as u8).collect());",
          "    let formatter = &mut core::fmt::Formatter::default();",
          "    state_builder.fmt(formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state_builder.repr(), Repr(&(0..=255).map(|b| b as u8).collect::<Vec<u8>>()[..]));",
          "    assert!(formatter.finished());"
        ],
        "code": [
          "{",
          "    let state_builder = StateBuilderMatches((0..=255).map(|b| b as u8).collect());",
          "    let formatter = &mut core::fmt::Formatter::default();",
          "    state_builder.fmt(formatter);",
          "    assert_eq!(state_builder.repr(), Repr(&(0..=255).map(|b| b as u8).collect::<Vec<u8>>()[..]));",
          "    assert!(formatter.finished());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]