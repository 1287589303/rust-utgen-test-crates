[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = add(1, 2, \"Adding small numbers\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(3));"
        ],
        "code": [
          "{",
          "    let result = add(1, 2, \"Adding small numbers\");",
          "    assert_eq!(result, Ok(3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = add(usize::MAX - 1, 1, \"Adding to maximum\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(usize::MAX));"
        ],
        "code": [
          "{",
          "    let result = add(usize::MAX - 1, 1, \"Adding to maximum\");",
          "    assert_eq!(result, Ok(usize::MAX));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = add(0, 0, \"Adding zeros\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(0));"
        ],
        "code": [
          "{",
          "    let result = add(0, 0, \"Adding zeros\");",
          "    assert_eq!(result, Ok(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = add(1000, 2000, \"Adding mid-range numbers\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(3000));"
        ],
        "code": [
          "{",
          "    let result = add(1000, 2000, \"Adding mid-range numbers\");",
          "    assert_eq!(result, Ok(3000));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]