[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().utf8(true);",
          "}"
        ],
        "oracle": [
          "    let config = Config::new().utf8(true);",
          "    assert!(config.get_utf8() == true);",
          "    let config = Config::new().utf8(false);",
          "    assert!(config.get_utf8() == false);",
          "    let config = Config::new().utf8(true).utf8(false);",
          "    assert!(config.get_utf8() == false);",
          "    let config = Config::new().utf8(false).utf8(true);",
          "    assert!(config.get_utf8() == true);"
        ],
        "code": [
          "{",
          "    let config = Config::new().utf8(true);",
          "    let config = Config::new().utf8(true);",
          "    assert!(config.get_utf8() == true);",
          "    let config = Config::new().utf8(false);",
          "    assert!(config.get_utf8() == false);",
          "    let config = Config::new().utf8(true).utf8(false);",
          "    assert!(config.get_utf8() == false);",
          "    let config = Config::new().utf8(false).utf8(true);",
          "    assert!(config.get_utf8() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().utf8(false);",
          "}"
        ],
        "oracle": [
          "    let config = Config::new().utf8(false);",
          "    assert_eq!(config.get_utf8(), false);",
          "    let config = Config::new().utf8(true);",
          "    assert_eq!(config.get_utf8(), true);",
          "    let config = Config::new().utf8(false).utf8(true);",
          "    assert_eq!(config.get_utf8(), true);",
          "    let config = Config::new().utf8(false).utf8(false);",
          "    assert_eq!(config.get_utf8(), false);",
          "    let mut builder = ParserBuilder::new();",
          "    Config::new().utf8(false).apply(&mut builder);",
          "    assert!(builder.build(\".*\").is_ok());",
          "    let mut builder = ParserBuilder::new();",
          "    Config::new().utf8(true).apply(&mut builder);",
          "    assert!(builder.build(\".*\").is_ok());"
        ],
        "code": [
          "{",
          "    let config = Config::new().utf8(false);",
          "    let config = Config::new().utf8(false);",
          "    assert_eq!(config.get_utf8(), false);",
          "    let config = Config::new().utf8(true);",
          "    assert_eq!(config.get_utf8(), true);",
          "    let config = Config::new().utf8(false).utf8(true);",
          "    assert_eq!(config.get_utf8(), true);",
          "    let config = Config::new().utf8(false).utf8(false);",
          "    assert_eq!(config.get_utf8(), false);",
          "    let mut builder = ParserBuilder::new();",
          "    Config::new().utf8(false).apply(&mut builder);",
          "    assert!(builder.build(\".*\").is_ok());",
          "    let mut builder = ParserBuilder::new();",
          "    Config::new().utf8(true).apply(&mut builder);",
          "    assert!(builder.build(\".*\").is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new()",
          "        .utf8(true)",
          "        .case_insensitive(true)",
          "        .multi_line(false)",
          "        .dot_matches_new_line(true)",
          "        .crlf(false)",
          "        .line_terminator(10)",
          "        .swap_greed(false)",
          "        .ignore_whitespace(true)",
          "        .unicode(true)",
          "        .nest_limit(10)",
          "        .octal(false);",
          "}"
        ],
        "oracle": [
          "    config.utf8(true).utf8 == true",
          "    config.case_insensitive(true).get_case_insensitive() == true",
          "    config.multi_line(false).get_multi_line() == false",
          "    config.dot_matches_new_line(true).get_dot_matches_new_line() == true",
          "    config.crlf(false).get_crlf() == false",
          "    config.line_terminator(10).get_line_terminator() == 10",
          "    config.swap_greed(false).get_swap_greed() == false",
          "    config.ignore_whitespace(true).get_ignore_whitespace() == true",
          "    config.unicode(true).get_unicode() == true",
          "    config.nest_limit(10).get_nest_limit() == 10",
          "    config.octal(false).get_octal() == false"
        ],
        "code": [
          "{",
          "    let config = Config::new()",
          "        .utf8(true)",
          "        .case_insensitive(true)",
          "        .multi_line(false)",
          "        .dot_matches_new_line(true)",
          "        .crlf(false)",
          "        .line_terminator(10)",
          "        .swap_greed(false)",
          "        .ignore_whitespace(true)",
          "        .unicode(true)",
          "        .nest_limit(10)",
          "        .octal(false);",
          "    config.utf8(true).utf8 == true",
          "    config.case_insensitive(true).get_case_insensitive() == true",
          "    config.multi_line(false).get_multi_line() == false",
          "    config.dot_matches_new_line(true).get_dot_matches_new_line() == true",
          "    config.crlf(false).get_crlf() == false",
          "    config.line_terminator(10).get_line_terminator() == 10",
          "    config.swap_greed(false).get_swap_greed() == false",
          "    config.ignore_whitespace(true).get_ignore_whitespace() == true",
          "    config.unicode(true).get_unicode() == true",
          "    config.nest_limit(10).get_nest_limit() == 10",
          "    config.octal(false).get_octal() == false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new()",
          "        .utf8(false)",
          "        .case_insensitive(false)",
          "        .multi_line(true)",
          "        .dot_matches_new_line(false)",
          "        .crlf(true)",
          "        .line_terminator(255)",
          "        .swap_greed(true)",
          "        .ignore_whitespace(false)",
          "        .unicode(false)",
          "        .nest_limit(0)",
          "        .octal(true);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_utf8(), false);",
          "    assert_eq!(config.get_case_insensitive(), false);",
          "    assert_eq!(config.get_multi_line(), true);",
          "    assert_eq!(config.get_dot_matches_new_line(), false);",
          "    assert_eq!(config.get_crlf(), true);",
          "    assert_eq!(config.get_line_terminator(), 255);",
          "    assert_eq!(config.get_swap_greed(), true);",
          "    assert_eq!(config.get_ignore_whitespace(), false);",
          "    assert_eq!(config.get_unicode(), false);",
          "    assert_eq!(config.get_nest_limit(), 0);",
          "    assert_eq!(config.get_octal(), true);"
        ],
        "code": [
          "{",
          "    let config = Config::new()",
          "        .utf8(false)",
          "        .case_insensitive(false)",
          "        .multi_line(true)",
          "        .dot_matches_new_line(false)",
          "        .crlf(true)",
          "        .line_terminator(255)",
          "        .swap_greed(true)",
          "        .ignore_whitespace(false)",
          "        .unicode(false)",
          "        .nest_limit(0)",
          "        .octal(true);",
          "    assert_eq!(config.get_utf8(), false);",
          "    assert_eq!(config.get_case_insensitive(), false);",
          "    assert_eq!(config.get_multi_line(), true);",
          "    assert_eq!(config.get_dot_matches_new_line(), false);",
          "    assert_eq!(config.get_crlf(), true);",
          "    assert_eq!(config.get_line_terminator(), 255);",
          "    assert_eq!(config.get_swap_greed(), true);",
          "    assert_eq!(config.get_ignore_whitespace(), false);",
          "    assert_eq!(config.get_unicode(), false);",
          "    assert_eq!(config.get_nest_limit(), 0);",
          "    assert_eq!(config.get_octal(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]