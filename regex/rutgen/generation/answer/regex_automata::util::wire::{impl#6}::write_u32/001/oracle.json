[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = [0u8; 4];",
          "    <LE as Endian>::write_u32(0, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, [0, 0, 0, 0]);",
          "    <LE as Endian>::write_u32(1, &mut dst);",
          "    assert_eq!(dst, [1, 0, 0, 0]);",
          "    <LE as Endian>::write_u32(255, &mut dst);",
          "    assert_eq!(dst, [255, 0, 0, 0]);",
          "    <LE as Endian>::write_u32(65535, &mut dst);",
          "    assert_eq!(dst, [255, 255, 0, 0]);",
          "    <LE as Endian>::write_u32(16777215, &mut dst);",
          "    assert_eq!(dst, [255, 255, 255, 0]);",
          "    <LE as Endian>::write_u32(4294967295, &mut dst);",
          "    assert_eq!(dst, [255, 255, 255, 255]);"
        ],
        "code": [
          "{",
          "    let mut dst = [0u8; 4];",
          "    <LE as Endian>::write_u32(0, &mut dst);",
          "    assert_eq!(dst, [0, 0, 0, 0]);",
          "    <LE as Endian>::write_u32(1, &mut dst);",
          "    assert_eq!(dst, [1, 0, 0, 0]);",
          "    <LE as Endian>::write_u32(255, &mut dst);",
          "    assert_eq!(dst, [255, 0, 0, 0]);",
          "    <LE as Endian>::write_u32(65535, &mut dst);",
          "    assert_eq!(dst, [255, 255, 0, 0]);",
          "    <LE as Endian>::write_u32(16777215, &mut dst);",
          "    assert_eq!(dst, [255, 255, 255, 0]);",
          "    <LE as Endian>::write_u32(4294967295, &mut dst);",
          "    assert_eq!(dst, [255, 255, 255, 255]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = [0u8; 4];",
          "    <LE as Endian>::write_u32(1, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, [1, 0, 0, 0]);",
          "    let mut dst = [0u8; 4];",
          "    <LE as Endian>::write_u32(255, &mut dst);",
          "    assert_eq!(dst, [255, 0, 0, 0]);",
          "    let mut dst = [0u8; 4];",
          "    <LE as Endian>::write_u32(65535, &mut dst);",
          "    assert_eq!(dst, [255, 255, 0, 0]);",
          "    let mut dst = [0u8; 4];",
          "    <LE as Endian>::write_u32(16777215, &mut dst);",
          "    assert_eq!(dst, [255, 255, 255, 0]);",
          "    let mut dst = [0u8; 4];",
          "    <LE as Endian>::write_u32(4294967295, &mut dst);",
          "    assert_eq!(dst, [255, 255, 255, 255]);",
          "    let mut dst = [0u8; 4];",
          "    <LE as Endian>::write_u32(0, &mut dst);",
          "    assert_eq!(dst, [0, 0, 0, 0]);"
        ],
        "code": [
          "{",
          "    let mut dst = [0u8; 4];",
          "    <LE as Endian>::write_u32(1, &mut dst);",
          "    assert_eq!(dst, [1, 0, 0, 0]);",
          "    let mut dst = [0u8; 4];",
          "    <LE as Endian>::write_u32(255, &mut dst);",
          "    assert_eq!(dst, [255, 0, 0, 0]);",
          "    let mut dst = [0u8; 4];",
          "    <LE as Endian>::write_u32(65535, &mut dst);",
          "    assert_eq!(dst, [255, 255, 0, 0]);",
          "    let mut dst = [0u8; 4];",
          "    <LE as Endian>::write_u32(16777215, &mut dst);",
          "    assert_eq!(dst, [255, 255, 255, 0]);",
          "    let mut dst = [0u8; 4];",
          "    <LE as Endian>::write_u32(4294967295, &mut dst);",
          "    assert_eq!(dst, [255, 255, 255, 255]);",
          "    let mut dst = [0u8; 4];",
          "    <LE as Endian>::write_u32(0, &mut dst);",
          "    assert_eq!(dst, [0, 0, 0, 0]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = [0u8; 4];",
          "    <LE as Endian>::write_u32(2147483648, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, [0, 0, 0, 128]);",
          "    assert_eq!(dst.len(), 4);",
          "    assert_eq!(dst[0], (2147483648u32.to_le_bytes()[0]));",
          "    assert_eq!(dst[1], (2147483648u32.to_le_bytes()[1]));",
          "    assert_eq!(dst[2], (2147483648u32.to_le_bytes()[2]));",
          "    assert_eq!(dst[3], (2147483648u32.to_le_bytes()[3]));"
        ],
        "code": [
          "{",
          "    let mut dst = [0u8; 4];",
          "    <LE as Endian>::write_u32(2147483648, &mut dst);",
          "    assert_eq!(dst, [0, 0, 0, 128]);",
          "    assert_eq!(dst.len(), 4);",
          "    assert_eq!(dst[0], (2147483648u32.to_le_bytes()[0]));",
          "    assert_eq!(dst[1], (2147483648u32.to_le_bytes()[1]));",
          "    assert_eq!(dst[2], (2147483648u32.to_le_bytes()[2]));",
          "    assert_eq!(dst[3], (2147483648u32.to_le_bytes()[3]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = [0u8; 4];",
          "    <LE as Endian>::write_u32(u32::MAX, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, vec![255, 255, 255, 255]);",
          "    assert_eq!(dst.len(), 4);",
          "    assert!(dst.iter().all(|&x| x <= 255));"
        ],
        "code": [
          "{",
          "    let mut dst = [0u8; 4];",
          "    <LE as Endian>::write_u32(u32::MAX, &mut dst);",
          "    assert_eq!(dst, vec![255, 255, 255, 255]);",
          "    assert_eq!(dst.len(), 4);",
          "    assert!(dst.iter().all(|&x| x <= 255));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = [0u8; 4];",
          "    <LE as Endian>::write_u32(4294967295, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, [255, 255, 255, 255]);"
        ],
        "code": [
          "{",
          "    let mut dst = [0u8; 4];",
          "    <LE as Endian>::write_u32(4294967295, &mut dst);",
          "    assert_eq!(dst, [255, 255, 255, 255]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]