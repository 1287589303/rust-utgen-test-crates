[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[cfg(not(feature = \"unicode-word-boundary\"))]"
        ],
        "prefix": [
          "{",
          "    let result = crate::util::check();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_err(), true);",
          "    assert!(matches!(result, Err(crate::util::UnicodeWordBoundaryError(_))));"
        ],
        "code": [
          "{",
          "    let result = crate::util::check();",
          "    assert_eq!(result.is_err(), true);",
          "    assert!(matches!(result, Err(crate::util::UnicodeWordBoundaryError(_))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[cfg(feature = \"unicode-word-boundary\")]"
        ],
        "prefix": [
          "{",
          "    let result = crate::util::check();",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(result, Ok(())));",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), ());",
          "    assert!(result.is_err());",
          "    assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    let result = crate::util::check();",
          "    assert!(matches!(result, Ok(())));",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), ());",
          "    assert!(result.is_err());",
          "    assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]