[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockSpecial {",
          "        min_start: StateID,",
          "        max_start: StateID,",
          "    }",
          "",
          "    impl MockSpecial {",
          "        fn is_start_state(&self, id: StateID) -> bool {",
          "            !self.is_dead_state(id) && self.min_start <= id && id <= self.max_start",
          "        }",
          "",
          "        fn is_dead_state(&self, id: StateID) -> bool {",
          "            id == StateID(0)",
          "        }",
          "    }",
          "",
          "    struct MockDFA {",
          "        special: MockSpecial,",
          "    }",
          "",
          "    let dfa = MockDFA {",
          "        special: MockSpecial {",
          "            min_start: StateID(1),",
          "            max_start: StateID(5),",
          "        },",
          "    };",
          "",
          "    for id in 1..=5 {",
          "        dfa.is_start_state(StateID(id));",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.is_start_state(StateID(1)), true);",
          "    assert_eq!(dfa.is_start_state(StateID(2)), true);",
          "    assert_eq!(dfa.is_start_state(StateID(3)), true);",
          "    assert_eq!(dfa.is_start_state(StateID(4)), true);",
          "    assert_eq!(dfa.is_start_state(StateID(5)), true);",
          "    assert_eq!(dfa.is_start_state(StateID(0)), false);",
          "    assert_eq!(dfa.is_start_state(StateID(6)), false);"
        ],
        "code": [
          "{",
          "    struct MockSpecial {",
          "        min_start: StateID,",
          "        max_start: StateID,",
          "    }",
          "",
          "    impl MockSpecial {",
          "        fn is_start_state(&self, id: StateID) -> bool {",
          "            !self.is_dead_state(id) && self.min_start <= id && id <= self.max_start",
          "        }",
          "",
          "        fn is_dead_state(&self, id: StateID) -> bool {",
          "            id == StateID(0)",
          "        }",
          "    }",
          "",
          "    struct MockDFA {",
          "        special: MockSpecial,",
          "    }",
          "",
          "    let dfa = MockDFA {",
          "        special: MockSpecial {",
          "            min_start: StateID(1),",
          "            max_start: StateID(5),",
          "        },",
          "    };",
          "",
          "    for id in 1..=5 {",
          "        dfa.is_start_state(StateID(id));",
          "    }",
          "    assert_eq!(dfa.is_start_state(StateID(1)), true);",
          "    assert_eq!(dfa.is_start_state(StateID(2)), true);",
          "    assert_eq!(dfa.is_start_state(StateID(3)), true);",
          "    assert_eq!(dfa.is_start_state(StateID(4)), true);",
          "    assert_eq!(dfa.is_start_state(StateID(5)), true);",
          "    assert_eq!(dfa.is_start_state(StateID(0)), false);",
          "    assert_eq!(dfa.is_start_state(StateID(6)), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockSpecial {",
          "        min_start: StateID,",
          "        max_start: StateID,",
          "    }",
          "",
          "    impl MockSpecial {",
          "        fn is_start_state(&self, id: StateID) -> bool {",
          "            !self.is_dead_state(id) && self.min_start <= id && id <= self.max_start",
          "        }",
          "",
          "        fn is_dead_state(&self, id: StateID) -> bool {",
          "            id == StateID(0)",
          "        }",
          "    }",
          "",
          "    struct MockDFA {",
          "        special: MockSpecial,",
          "    }",
          "",
          "    let dfa = MockDFA {",
          "        special: MockSpecial {",
          "            min_start: StateID(1),",
          "            max_start: StateID(5),",
          "        },",
          "    };",
          "",
          "    dfa.is_start_state(StateID(0));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.is_start_state(StateID(0)), false);",
          "    assert_eq!(dfa.is_start_state(StateID(1)), true);",
          "    assert_eq!(dfa.is_start_state(StateID(2)), true);",
          "    assert_eq!(dfa.is_start_state(StateID(3)), true);",
          "    assert_eq!(dfa.is_start_state(StateID(4)), true);",
          "    assert_eq!(dfa.is_start_state(StateID(5)), true);",
          "    assert_eq!(dfa.is_start_state(StateID(6)), false);"
        ],
        "code": [
          "{",
          "    struct MockSpecial {",
          "        min_start: StateID,",
          "        max_start: StateID,",
          "    }",
          "",
          "    impl MockSpecial {",
          "        fn is_start_state(&self, id: StateID) -> bool {",
          "            !self.is_dead_state(id) && self.min_start <= id && id <= self.max_start",
          "        }",
          "",
          "        fn is_dead_state(&self, id: StateID) -> bool {",
          "            id == StateID(0)",
          "        }",
          "    }",
          "",
          "    struct MockDFA {",
          "        special: MockSpecial,",
          "    }",
          "",
          "    let dfa = MockDFA {",
          "        special: MockSpecial {",
          "            min_start: StateID(1),",
          "            max_start: StateID(5),",
          "        },",
          "    };",
          "",
          "    dfa.is_start_state(StateID(0));",
          "    assert_eq!(dfa.is_start_state(StateID(0)), false);",
          "    assert_eq!(dfa.is_start_state(StateID(1)), true);",
          "    assert_eq!(dfa.is_start_state(StateID(2)), true);",
          "    assert_eq!(dfa.is_start_state(StateID(3)), true);",
          "    assert_eq!(dfa.is_start_state(StateID(4)), true);",
          "    assert_eq!(dfa.is_start_state(StateID(5)), true);",
          "    assert_eq!(dfa.is_start_state(StateID(6)), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockSpecial {",
          "        min_start: StateID,",
          "        max_start: StateID,",
          "    }",
          "",
          "    impl MockSpecial {",
          "        fn is_start_state(&self, id: StateID) -> bool {",
          "            !self.is_dead_state(id) && self.min_start <= id && id <= self.max_start",
          "        }",
          "",
          "        fn is_dead_state(&self, id: StateID) -> bool {",
          "            id == StateID(0)",
          "        }",
          "    }",
          "",
          "    struct MockDFA {",
          "        special: MockSpecial,",
          "    }",
          "",
          "    let dfa = MockDFA {",
          "        special: MockSpecial {",
          "            min_start: StateID(1),",
          "            max_start: StateID(5),",
          "        },",
          "    };",
          "",
          "    for id in [-1, 0, 6, 7].iter() {",
          "        dfa.is_start_state(StateID(*id));",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.is_start_state(StateID(-1)), false);",
          "    assert_eq!(dfa.is_start_state(StateID(0)), false);",
          "    assert_eq!(dfa.is_start_state(StateID(1)), true);",
          "    assert_eq!(dfa.is_start_state(StateID(2)), true);",
          "    assert_eq!(dfa.is_start_state(StateID(3)), true);",
          "    assert_eq!(dfa.is_start_state(StateID(4)), true);",
          "    assert_eq!(dfa.is_start_state(StateID(5)), true);",
          "    assert_eq!(dfa.is_start_state(StateID(6)), false);",
          "    assert_eq!(dfa.is_start_state(StateID(7)), false);"
        ],
        "code": [
          "{",
          "    struct MockSpecial {",
          "        min_start: StateID,",
          "        max_start: StateID,",
          "    }",
          "",
          "    impl MockSpecial {",
          "        fn is_start_state(&self, id: StateID) -> bool {",
          "            !self.is_dead_state(id) && self.min_start <= id && id <= self.max_start",
          "        }",
          "",
          "        fn is_dead_state(&self, id: StateID) -> bool {",
          "            id == StateID(0)",
          "        }",
          "    }",
          "",
          "    struct MockDFA {",
          "        special: MockSpecial,",
          "    }",
          "",
          "    let dfa = MockDFA {",
          "        special: MockSpecial {",
          "            min_start: StateID(1),",
          "            max_start: StateID(5),",
          "        },",
          "    };",
          "",
          "    for id in [-1, 0, 6, 7].iter() {",
          "        dfa.is_start_state(StateID(*id));",
          "    }",
          "    assert_eq!(dfa.is_start_state(StateID(-1)), false);",
          "    assert_eq!(dfa.is_start_state(StateID(0)), false);",
          "    assert_eq!(dfa.is_start_state(StateID(1)), true);",
          "    assert_eq!(dfa.is_start_state(StateID(2)), true);",
          "    assert_eq!(dfa.is_start_state(StateID(3)), true);",
          "    assert_eq!(dfa.is_start_state(StateID(4)), true);",
          "    assert_eq!(dfa.is_start_state(StateID(5)), true);",
          "    assert_eq!(dfa.is_start_state(StateID(6)), false);",
          "    assert_eq!(dfa.is_start_state(StateID(7)), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]