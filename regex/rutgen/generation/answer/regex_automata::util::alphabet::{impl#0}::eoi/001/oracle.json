[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [
      "#[should_panic]",
      "fn test_eoi_overflow() {",
      "    let _unit = Unit::eoi(257);",
      "}"
    ],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let _unit = Unit::eoi(0);",
          "}"
        ],
        "oracle": [
          "    Unit::eoi(256);  // should return Unit(UnitKind::EOI(256))",
          "    Unit::eoi(255);  // should return Unit(UnitKind::EOI(255))",
          "    Unit::eoi(1);    // should return Unit(UnitKind::EOI(1))",
          "    Unit::eoi(2);    // should return Unit(UnitKind::EOI(2))",
          "    Unit::eoi(128);  // should return Unit(UnitKind::EOI(128))"
        ],
        "code": [
          "{",
          "    let _unit = Unit::eoi(0);",
          "    Unit::eoi(256);  // should return Unit(UnitKind::EOI(256))",
          "    Unit::eoi(255);  // should return Unit(UnitKind::EOI(255))",
          "    Unit::eoi(1);    // should return Unit(UnitKind::EOI(1))",
          "    Unit::eoi(2);    // should return Unit(UnitKind::EOI(2))",
          "    Unit::eoi(128);  // should return Unit(UnitKind::EOI(128))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let _unit = Unit::eoi(128);",
          "}"
        ],
        "oracle": [
          "    Unit::eoi(256); // Expect no panic, returns Unit(UnitKind::EOI(256))",
          "    Unit::eoi(0); // Expect no panic, returns Unit(UnitKind::EOI(0))",
          "    Unit::eoi(1); // Expect no panic, returns Unit(UnitKind::EOI(1))",
          "    Unit::eoi(255); // Expect no panic, returns Unit(UnitKind::EOI(255))",
          "    Unit::eoi(257); // Expect panic due to overflow"
        ],
        "code": [
          "{",
          "    let _unit = Unit::eoi(128);",
          "    Unit::eoi(256); // Expect no panic, returns Unit(UnitKind::EOI(256))",
          "    Unit::eoi(0); // Expect no panic, returns Unit(UnitKind::EOI(0))",
          "    Unit::eoi(1); // Expect no panic, returns Unit(UnitKind::EOI(1))",
          "    Unit::eoi(255); // Expect no panic, returns Unit(UnitKind::EOI(255))",
          "    Unit::eoi(257); // Expect panic due to overflow",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let _unit = Unit::eoi(256);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Unit::eoi(256).as_eoi(), Some(256));",
          "    assert_eq!(Unit::eoi(256).as_usize(), 256);",
          "    assert!(Unit::eoi(256).is_eoi());",
          "    assert!(!Unit::eoi(256).is_byte(0));",
          "    assert!(!Unit::eoi(256).is_word_byte());",
          "    assert_eq!(Unit::eoi(255).as_eoi(), Some(255));",
          "    assert_eq!(Unit::eoi(255).as_usize(), 255);",
          "    assert!(Unit::eoi(255).is_eoi());",
          "    assert!(!Unit::eoi(255).is_byte(0));",
          "    assert!(!Unit::eoi(255).is_word_byte());"
        ],
        "code": [
          "{",
          "    let _unit = Unit::eoi(256);",
          "    assert_eq!(Unit::eoi(256).as_eoi(), Some(256));",
          "    assert_eq!(Unit::eoi(256).as_usize(), 256);",
          "    assert!(Unit::eoi(256).is_eoi());",
          "    assert!(!Unit::eoi(256).is_byte(0));",
          "    assert!(!Unit::eoi(256).is_word_byte());",
          "    assert_eq!(Unit::eoi(255).as_eoi(), Some(255));",
          "    assert_eq!(Unit::eoi(255).as_usize(), 255);",
          "    assert!(Unit::eoi(255).is_eoi());",
          "    assert!(!Unit::eoi(255).is_byte(0));",
          "    assert!(!Unit::eoi(255).is_word_byte());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]