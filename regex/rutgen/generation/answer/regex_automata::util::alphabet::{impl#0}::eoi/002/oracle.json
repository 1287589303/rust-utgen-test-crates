[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let _unit = Unit::eoi(257);",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| { Unit::eoi(257); }).is_err());"
        ],
        "code": [
          "{",
          "    let _unit = Unit::eoi(257);",
          "    assert!(std::panic::catch_unwind(|| { Unit::eoi(257); }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let _unit = Unit::eoi(256);",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| Unit::eoi(257)).is_err());",
          "    assert!(std::panic::catch_unwind(|| Unit::eoi(300)).is_err());",
          "    assert!(std::panic::catch_unwind(|| Unit::eoi(512)).is_err());"
        ],
        "code": [
          "{",
          "    let _unit = Unit::eoi(256);",
          "    assert!(std::panic::catch_unwind(|| Unit::eoi(257)).is_err());",
          "    assert!(std::panic::catch_unwind(|| Unit::eoi(300)).is_err());",
          "    assert!(std::panic::catch_unwind(|| Unit::eoi(512)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let _unit = Unit::eoi(0);",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| Unit::eoi(257)).is_err());"
        ],
        "code": [
          "{",
          "    let _unit = Unit::eoi(0);",
          "    assert!(std::panic::catch_unwind(|| Unit::eoi(257)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let _unit = Unit::eoi(128);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_unit.as_eoi(), Some(128));",
          "    assert!(_unit.is_eoi());",
          "    assert!(!_unit.is_byte(0));",
          "    assert!(!_unit.is_byte(255));",
          "    assert!(!_unit.is_word_byte());"
        ],
        "code": [
          "{",
          "    let _unit = Unit::eoi(128);",
          "    assert_eq!(_unit.as_eoi(), Some(128));",
          "    assert!(_unit.is_eoi());",
          "    assert!(!_unit.is_byte(0));",
          "    assert!(!_unit.is_byte(255));",
          "    assert!(!_unit.is_word_byte());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]