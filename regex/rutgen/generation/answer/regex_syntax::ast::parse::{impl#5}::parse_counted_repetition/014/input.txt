self.char() == '{' is false; concat.asts.pop() matches Some(ast) is true; ast matches Ast::Empty(_) is false; ast matches Ast::Flags(_) is false; self.bump_and_bump_space() is true; self.is_eof() is false; self.char() == ',' is false; self.bump_and_bump_space() is true; self.char() != '}' is true; count_start matches Err(err) is true; err.kind == ast::ErrorKind::RepetitionCountDecimalEmpty is true; self.parser().empty_min_range is true; specialize_err(self.parse_decimal(), ast::ErrorKind::DecimalEmpty, ast::ErrorKind::RepetitionCountDecimalEmpty) is Ok/Some; self.is_eof() is false; self.char() != '}' is true; expected return value is Err(self.error(Span::new(start, self.pos()), ast::ErrorKind::RepetitionCountUnclosed))
