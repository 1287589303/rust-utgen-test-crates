[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        look_behind: None,",
          "        anchored: Anchored::No,",
          "    };",
          "    config.get_anchored();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_anchored(), Anchored::No);"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        look_behind: None,",
          "        anchored: Anchored::No,",
          "    };",
          "    config.get_anchored();",
          "    assert_eq!(config.get_anchored(), Anchored::No);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        look_behind: Some(0),",
          "        anchored: Anchored::Yes,",
          "    };",
          "    config.get_anchored();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_anchored(), Anchored::Yes);"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        look_behind: Some(0),",
          "        anchored: Anchored::Yes,",
          "    };",
          "    config.get_anchored();",
          "    assert_eq!(config.get_anchored(), Anchored::Yes);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct PatternID;",
          "    let pattern_id = PatternID;",
          "    ",
          "    let config = Config {",
          "        look_behind: Some(255),",
          "        anchored: Anchored::Pattern(pattern_id),",
          "    };",
          "    config.get_anchored();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_anchored(), Anchored::Pattern(pattern_id));",
          "    assert_eq!(config.get_anchored(), Anchored::Pattern(PatternID));",
          "    assert_eq!(config.get_anchored(), Anchored::No);",
          "    assert_eq!(config.get_anchored(), Anchored::Yes);",
          "    assert_eq!(config.get_anchored(), Anchored::Pattern(PatternID));"
        ],
        "code": [
          "{",
          "    struct PatternID;",
          "    let pattern_id = PatternID;",
          "    ",
          "    let config = Config {",
          "        look_behind: Some(255),",
          "        anchored: Anchored::Pattern(pattern_id),",
          "    };",
          "    config.get_anchored();",
          "    assert_eq!(config.get_anchored(), Anchored::Pattern(pattern_id));",
          "    assert_eq!(config.get_anchored(), Anchored::Pattern(PatternID));",
          "    assert_eq!(config.get_anchored(), Anchored::No);",
          "    assert_eq!(config.get_anchored(), Anchored::Yes);",
          "    assert_eq!(config.get_anchored(), Anchored::Pattern(PatternID));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]