[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let max_state_id = StateID(5); // Set to a value less than the calculated limit",
          "    let special = Special {",
          "        max: max_state_id,",
          "        quit_id: StateID(0),",
          "        min_match: StateID(1),",
          "        max_match: StateID(2),",
          "        min_accel: StateID(3),",
          "        max_accel: StateID(4),",
          "        min_start: StateID(1),",
          "        max_start: StateID(2),",
          "    };",
          "    ",
          "    let len = 16; // len > 0",
          "    let stride2 = 2; // stride2 >= 0",
          "",
          "    special.validate_state_len(len, stride2).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(special.validate_state_len(16, 2), Ok(()));",
          "    assert!(special.validate_state_len(16, 2).is_ok());",
          "    assert!(matches!(special.validate_state_len(16, 2), Ok(_)));",
          "    assert_eq!(special.validate_state_len(16, 2).map_err(|_| ()), Ok(()));",
          "    assert!(special.validate_state_len(16, 2).is_ok());"
        ],
        "code": [
          "{",
          "    let max_state_id = StateID(5); // Set to a value less than the calculated limit",
          "    let special = Special {",
          "        max: max_state_id,",
          "        quit_id: StateID(0),",
          "        min_match: StateID(1),",
          "        max_match: StateID(2),",
          "        min_accel: StateID(3),",
          "        max_accel: StateID(4),",
          "        min_start: StateID(1),",
          "        max_start: StateID(2),",
          "    };",
          "    ",
          "    let len = 16; // len > 0",
          "    let stride2 = 2; // stride2 >= 0",
          "",
          "    special.validate_state_len(len, stride2).unwrap();",
          "    assert_eq!(special.validate_state_len(16, 2), Ok(()));",
          "    assert!(special.validate_state_len(16, 2).is_ok());",
          "    assert!(matches!(special.validate_state_len(16, 2), Ok(_)));",
          "    assert_eq!(special.validate_state_len(16, 2).map_err(|_| ()), Ok(()));",
          "    assert!(special.validate_state_len(16, 2).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let max_state_id = StateID(3); // Set to a value just below the limit",
          "    let special = Special {",
          "        max: max_state_id,",
          "        quit_id: StateID(0),",
          "        min_match: StateID(1),",
          "        max_match: StateID(2),",
          "        min_accel: StateID(3),",
          "        max_accel: StateID(4),",
          "        min_start: StateID(1),",
          "        max_start: StateID(2),",
          "    };",
          "",
          "    let len = 16; // len > 0",
          "    let stride2 = 2; // stride2 >= 0",
          "",
          "    special.validate_state_len(len, stride2).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(special.validate_state_len(16, 2), Ok(()));",
          "    assert_eq!(special.validate_state_len(15, 2), Ok(()));",
          "    assert_eq!(special.validate_state_len(14, 2), Ok(()));",
          "    assert_eq!(special.validate_state_len(16, 0), Ok(()));",
          "    assert_eq!(special.validate_state_len(16, 1), Ok(()));"
        ],
        "code": [
          "{",
          "    let max_state_id = StateID(3); // Set to a value just below the limit",
          "    let special = Special {",
          "        max: max_state_id,",
          "        quit_id: StateID(0),",
          "        min_match: StateID(1),",
          "        max_match: StateID(2),",
          "        min_accel: StateID(3),",
          "        max_accel: StateID(4),",
          "        min_start: StateID(1),",
          "        max_start: StateID(2),",
          "    };",
          "",
          "    let len = 16; // len > 0",
          "    let stride2 = 2; // stride2 >= 0",
          "",
          "    special.validate_state_len(len, stride2).unwrap();",
          "    assert_eq!(special.validate_state_len(16, 2), Ok(()));",
          "    assert_eq!(special.validate_state_len(15, 2), Ok(()));",
          "    assert_eq!(special.validate_state_len(14, 2), Ok(()));",
          "    assert_eq!(special.validate_state_len(16, 0), Ok(()));",
          "    assert_eq!(special.validate_state_len(16, 1), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let max_state_id = StateID(0); // Set to 0, which is valid since max is not >= len",
          "    let special = Special {",
          "        max: max_state_id,",
          "        quit_id: StateID(0),",
          "        min_match: StateID(1),",
          "        max_match: StateID(1),",
          "        min_accel: StateID(0),",
          "        max_accel: StateID(0),",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "",
          "    let len = 1; // len > 0",
          "    let stride2 = 0; // stride2 >= 0",
          "",
          "    special.validate_state_len(len, stride2).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(special.validate_state_len(1, 0).is_ok());",
          "    assert_eq!(special.validate_state_len(1, 0), Ok(()));",
          "    let max_state_id = StateID(0);",
          "    let len = 1;",
          "    let stride2 = 0;"
        ],
        "code": [
          "{",
          "    let max_state_id = StateID(0); // Set to 0, which is valid since max is not >= len",
          "    let special = Special {",
          "        max: max_state_id,",
          "        quit_id: StateID(0),",
          "        min_match: StateID(1),",
          "        max_match: StateID(1),",
          "        min_accel: StateID(0),",
          "        max_accel: StateID(0),",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "",
          "    let len = 1; // len > 0",
          "    let stride2 = 0; // stride2 >= 0",
          "",
          "    special.validate_state_len(len, stride2).unwrap();",
          "    assert!(special.validate_state_len(1, 0).is_ok());",
          "    assert_eq!(special.validate_state_len(1, 0), Ok(()));",
          "    let max_state_id = StateID(0);",
          "    let len = 1;",
          "    let stride2 = 0;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]