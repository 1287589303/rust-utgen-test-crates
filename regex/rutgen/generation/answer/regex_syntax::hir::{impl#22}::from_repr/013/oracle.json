[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0100_0000; // Representing Look::WordAscii",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Look::WordAscii));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0100_0000; // Representing Look::WordAscii",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordAscii));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let invalid_values: [u32; 5] = [0, 1, 2, 3, 63];",
          "    for &repr in &invalid_values {",
          "        let result = Look::from_repr(repr);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0100_0000), Some(Look::WordAscii));"
        ],
        "code": [
          "{",
          "    let invalid_values: [u32; 5] = [0, 1, 2, 3, 63];",
          "    for &repr in &invalid_values {",
          "        let result = Look::from_repr(repr);",
          "    }",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0100_0000), Some(Look::WordAscii));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let invalid_values_above: [u32; 5] = [65, 66, 1_048_575];",
          "    for &repr in &invalid_values_above {",
          "        let result = Look::from_repr(repr);",
          "    }",
          "}"
        ],
        "oracle": [
          "    Look::from_repr(0b00_0000_0000_0100_0000) == Some(Look::WordAscii)",
          "    Look::from_repr(0b00_0000_0000_0100_0000) is called with valid representation",
          "    Look::from_repr(0b00_0000_0000_0100_0000) returns valid Some variant",
          "    Look::from_repr(0b00_0000_0000_0100_0000) matches expected return value Some(Look::WordAscii)"
        ],
        "code": [
          "{",
          "    let invalid_values_above: [u32; 5] = [65, 66, 1_048_575];",
          "    for &repr in &invalid_values_above {",
          "        let result = Look::from_repr(repr);",
          "    }",
          "    Look::from_repr(0b00_0000_0000_0100_0000) == Some(Look::WordAscii)",
          "    Look::from_repr(0b00_0000_0000_0100_0000) is called with valid representation",
          "    Look::from_repr(0b00_0000_0000_0100_0000) returns valid Some variant",
          "    Look::from_repr(0b00_0000_0000_0100_0000) matches expected return value Some(Look::WordAscii)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]