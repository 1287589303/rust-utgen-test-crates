[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0010_0000_0000; // 32",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Look::WordUnicodeNegate));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0010_0000_0000; // 32",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordUnicodeNegate));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0001_0000_0000; // 256",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Look::WordUnicode));",
          "    assert!(matches!(result, Some(Look::WordUnicode)));",
          "    assert!(result.is_some());",
          "    assert_eq!(result.map(|x| x.as_repr()), Some(0b00_0000_0001_0000_0000));",
          "    assert!(Look::from_repr(0b00_0000_0010_0000_0000).is_none());",
          "    assert_eq!(Look::from_repr(0b10_0000_0000_0000_0000), None);",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0000), None);",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0001), Some(Look::Start));",
          "    assert_eq!(Look::from_repr(0b01_0000_0000_0000_0000), Some(Look::WordStartHalfUnicode));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0001_0000_0000; // 256",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordUnicode));",
          "    assert!(matches!(result, Some(Look::WordUnicode)));",
          "    assert!(result.is_some());",
          "    assert_eq!(result.map(|x| x.as_repr()), Some(0b00_0000_0001_0000_0000));",
          "    assert!(Look::from_repr(0b00_0000_0010_0000_0000).is_none());",
          "    assert_eq!(Look::from_repr(0b10_0000_0000_0000_0000), None);",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0000), None);",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0001), Some(Look::Start));",
          "    assert_eq!(Look::from_repr(0b01_0000_0000_0000_0000), Some(Look::WordStartHalfUnicode));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0100_0000; // 64",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Look::WordAscii));",
          "    assert_eq!(Look::from_repr(0b00_0000_0010_0000_0000), Some(Look::WordUnicodeNegate));",
          "    assert!(Look::from_repr(0b00_0000_0010_0000_0000).is_some());"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0100_0000; // 64",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordAscii));",
          "    assert_eq!(Look::from_repr(0b00_0000_0010_0000_0000), Some(Look::WordUnicodeNegate));",
          "    assert!(Look::from_repr(0b00_0000_0010_0000_0000).is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0000_1000; // 8",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    let repr: u32 = 0b00_0000_0010_0000_0000; // 512",
          "    let expected_result = Some(Look::WordUnicodeNegate);",
          "    assert_eq!(Look::from_repr(repr), expected_result);"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0000_1000; // 8",
          "    let result = Look::from_repr(repr);",
          "    let repr: u32 = 0b00_0000_0010_0000_0000; // 512",
          "    let expected_result = Some(Look::WordUnicodeNegate);",
          "    assert_eq!(Look::from_repr(repr), expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0000_0010; // 2",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Look::WordUnicodeNegate));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0000_0010; // 2",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordUnicodeNegate));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0000_0001; // 1",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Look::Start)); // Test for repr = 0b00_0000_0000_0000_0001",
          "    let repr: u32 = 0b00_0000_0000_0000_0010; // 2",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::End)); // Test for repr = 0b00_0000_0000_0000_0010",
          "    let repr: u32 = 0b00_0000_0000_0000_0100; // 3",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::StartLF)); // Test for repr = 0b00_0000_0000_0000_0100",
          "    let repr: u32 = 0b00_0000_0000_0000_1000; // 4",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::EndLF)); // Test for repr = 0b00_0000_0000_0000_1000",
          "    let repr: u32 = 0b00_0000_0000_0001_0000; // 5",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::StartCRLF)); // Test for repr = 0b00_0000_0000_0001_0000",
          "    let repr: u32 = 0b00_0000_0000_0010_0000; // 6",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::EndCRLF)); // Test for repr = 0b00_0000_0000_0010_0000",
          "    let repr: u32 = 0b00_0000_0000_0100_0000; // 7",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordAscii)); // Test for repr = 0b00_0000_0000_0100_0000",
          "    let repr: u32 = 0b00_0000_0000_1000_0000; // 8",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordAsciiNegate)); // Test for repr = 0b00_0000_0000_1000_0000",
          "    let repr: u32 = 0b00_0000_0001_0000_0000; // 9",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordUnicode)); // Test for repr = 0b00_0000_0001_0000_0000",
          "    let repr: u32 = 0b00_0000_0010_0000_0000; // 10",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordUnicodeNegate)); // Test for repr = 0b00_0000_0010_0000_0000",
          "    let repr: u32 = 0b00_0000_0100_0000_0000; // 11",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordStartAscii)); // Test for repr = 0b00_0000_0100_0000_0000",
          "    let repr: u32 = 0b00_0000_1000_0000_0000; // 12",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordEndAscii)); // Test for repr = 0b00_0000_1000_0000_0000",
          "    let repr: u32 = 0b00_0001_0000_0000_0000; // 13",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordStartUnicode)); // Test for repr = 0b00_0001_0000_0000_0000",
          "    let repr: u32 = 0b00_0010_0000_0000_0000; // 14",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordEndUnicode)); // Test for repr = 0b00_0010_0000_0000_0000",
          "    let repr: u32 = 0b00_0100_0000_0000_0000; // 15",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordStartHalfAscii)); // Test for repr = 0b00_0100_0000_0000_0000",
          "    let repr: u32 = 0b00_1000_0000_0000_0000; // 16",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordEndHalfAscii)); // Test for repr = 0b00_1000_0000_0000_0000",
          "    let repr: u32 = 0b01_0000_0000_0000_0000; // 17",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordStartHalfUnicode)); // Test for repr = 0b01_0000_0000_0000_0000",
          "    let repr: u32 = 0b10_0000_0000_0000_0000; // 18",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordEndHalfUnicode)); // Test for repr = 0b10_0000_0000_0000_0000",
          "    let repr: u32 = 0b11_1111_1111_1111_1111; // Invalid",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, None); // Test for invalid repr, expect None"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0000_0001; // 1",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::Start)); // Test for repr = 0b00_0000_0000_0000_0001",
          "    let repr: u32 = 0b00_0000_0000_0000_0010; // 2",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::End)); // Test for repr = 0b00_0000_0000_0000_0010",
          "    let repr: u32 = 0b00_0000_0000_0000_0100; // 3",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::StartLF)); // Test for repr = 0b00_0000_0000_0000_0100",
          "    let repr: u32 = 0b00_0000_0000_0000_1000; // 4",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::EndLF)); // Test for repr = 0b00_0000_0000_0000_1000",
          "    let repr: u32 = 0b00_0000_0000_0001_0000; // 5",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::StartCRLF)); // Test for repr = 0b00_0000_0000_0001_0000",
          "    let repr: u32 = 0b00_0000_0000_0010_0000; // 6",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::EndCRLF)); // Test for repr = 0b00_0000_0000_0010_0000",
          "    let repr: u32 = 0b00_0000_0000_0100_0000; // 7",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordAscii)); // Test for repr = 0b00_0000_0000_0100_0000",
          "    let repr: u32 = 0b00_0000_0000_1000_0000; // 8",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordAsciiNegate)); // Test for repr = 0b00_0000_0000_1000_0000",
          "    let repr: u32 = 0b00_0000_0001_0000_0000; // 9",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordUnicode)); // Test for repr = 0b00_0000_0001_0000_0000",
          "    let repr: u32 = 0b00_0000_0010_0000_0000; // 10",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordUnicodeNegate)); // Test for repr = 0b00_0000_0010_0000_0000",
          "    let repr: u32 = 0b00_0000_0100_0000_0000; // 11",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordStartAscii)); // Test for repr = 0b00_0000_0100_0000_0000",
          "    let repr: u32 = 0b00_0000_1000_0000_0000; // 12",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordEndAscii)); // Test for repr = 0b00_0000_1000_0000_0000",
          "    let repr: u32 = 0b00_0001_0000_0000_0000; // 13",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordStartUnicode)); // Test for repr = 0b00_0001_0000_0000_0000",
          "    let repr: u32 = 0b00_0010_0000_0000_0000; // 14",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordEndUnicode)); // Test for repr = 0b00_0010_0000_0000_0000",
          "    let repr: u32 = 0b00_0100_0000_0000_0000; // 15",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordStartHalfAscii)); // Test for repr = 0b00_0100_0000_0000_0000",
          "    let repr: u32 = 0b00_1000_0000_0000_0000; // 16",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordEndHalfAscii)); // Test for repr = 0b00_1000_0000_0000_0000",
          "    let repr: u32 = 0b01_0000_0000_0000_0000; // 17",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordStartHalfUnicode)); // Test for repr = 0b01_0000_0000_0000_0000",
          "    let repr: u32 = 0b10_0000_0000_0000_0000; // 18",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordEndHalfUnicode)); // Test for repr = 0b10_0000_0000_0000_0000",
          "    let repr: u32 = 0b11_1111_1111_1111_1111; // Invalid",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, None); // Test for invalid repr, expect None",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0000_0100; // 4",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Look::WordUnicodeNegate));",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), Look::WordUnicodeNegate);",
          "    assert!(matches!(result, Some(Look::WordUnicodeNegate)));",
          "    assert!(Look::from_repr(0b00_0000_0010_0000_0000).is_some());",
          "    assert!(Look::from_repr(0b00_0000_0010_0000_0000) == Some(Look::WordUnicodeNegate));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0000_0100; // 4",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordUnicodeNegate));",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), Look::WordUnicodeNegate);",
          "    assert!(matches!(result, Some(Look::WordUnicodeNegate)));",
          "    assert!(Look::from_repr(0b00_0000_0010_0000_0000).is_some());",
          "    assert!(Look::from_repr(0b00_0000_0010_0000_0000) == Some(Look::WordUnicodeNegate));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0001_0000; // 16",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Look::Start));",
          "    let repr: u32 = 0b00_0000_0000_0000_0010; // 2",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::End));",
          "    let repr: u32 = 0b00_0000_0000_0000_0100; // 4",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::StartLF));",
          "    let repr: u32 = 0b00_0000_0000_0000_1000; // 8",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::EndLF));",
          "    let repr: u32 = 0b00_0000_0000_0001_0000; // 16",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::StartCRLF));",
          "    let repr: u32 = 0b00_0000_0000_0010_0000; // 32",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::EndCRLF));",
          "    let repr: u32 = 0b00_0000_0000_0100_0000; // 64",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordAscii));",
          "    let repr: u32 = 0b00_0000_0000_1000_0000; // 128",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordAsciiNegate));",
          "    let repr: u32 = 0b00_0000_0001_0000_0000; // 256",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordUnicode));",
          "    let repr: u32 = 0b00_0000_0010_0000_0000; // 512",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordUnicodeNegate));",
          "    let repr: u32 = 0b00_0000_0100_0000_0000; // 1024",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordStartAscii));",
          "    let repr: u32 = 0b00_0000_1000_0000_0000; // 2048",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordEndAscii));",
          "    let repr: u32 = 0b00_0001_0000_0000_0000; // 4096",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordStartUnicode));",
          "    let repr: u32 = 0b00_0010_0000_0000_0000; // 8192",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordEndUnicode));",
          "    let repr: u32 = 0b00_0100_0000_0000_0000; // 16384",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordStartHalfAscii));",
          "    let repr: u32 = 0b00_1000_0000_0000_0000; // 32768",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordEndHalfAscii));",
          "    let repr: u32 = 0b01_0000_0000_0000_0000; // 65536",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordStartHalfUnicode));",
          "    let repr: u32 = 0b10_0000_0000_0000_0000; // 131072",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordEndHalfUnicode));",
          "    let repr: u32 = 0b11_1111_1111_1111_1111; // Invalid",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0001_0000; // 16",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::Start));",
          "    let repr: u32 = 0b00_0000_0000_0000_0010; // 2",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::End));",
          "    let repr: u32 = 0b00_0000_0000_0000_0100; // 4",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::StartLF));",
          "    let repr: u32 = 0b00_0000_0000_0000_1000; // 8",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::EndLF));",
          "    let repr: u32 = 0b00_0000_0000_0001_0000; // 16",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::StartCRLF));",
          "    let repr: u32 = 0b00_0000_0000_0010_0000; // 32",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::EndCRLF));",
          "    let repr: u32 = 0b00_0000_0000_0100_0000; // 64",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordAscii));",
          "    let repr: u32 = 0b00_0000_0000_1000_0000; // 128",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordAsciiNegate));",
          "    let repr: u32 = 0b00_0000_0001_0000_0000; // 256",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordUnicode));",
          "    let repr: u32 = 0b00_0000_0010_0000_0000; // 512",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordUnicodeNegate));",
          "    let repr: u32 = 0b00_0000_0100_0000_0000; // 1024",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordStartAscii));",
          "    let repr: u32 = 0b00_0000_1000_0000_0000; // 2048",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordEndAscii));",
          "    let repr: u32 = 0b00_0001_0000_0000_0000; // 4096",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordStartUnicode));",
          "    let repr: u32 = 0b00_0010_0000_0000_0000; // 8192",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordEndUnicode));",
          "    let repr: u32 = 0b00_0100_0000_0000_0000; // 16384",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordStartHalfAscii));",
          "    let repr: u32 = 0b00_1000_0000_0000_0000; // 32768",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordEndHalfAscii));",
          "    let repr: u32 = 0b01_0000_0000_0000_0000; // 65536",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordStartHalfUnicode));",
          "    let repr: u32 = 0b10_0000_0000_0000_0000; // 131072",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordEndHalfUnicode));",
          "    let repr: u32 = 0b11_1111_1111_1111_1111; // Invalid",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_1000_0000; // 128",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Look::WordAsciiNegate));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_1000_0000; // 128",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordAsciiNegate));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0100_0000_0000; // 4096",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Look::WordUnicodeNegate));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0100_0000_0000; // 4096",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordUnicodeNegate));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_1000_0000_0000; // 8192",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Look::WordAsciiNegate));",
          "    assert!(matches!(result, Some(Look::WordAsciiNegate)));",
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(result.unwrap(), Look::WordAsciiNegate);",
          "    assert!(result.is_none() == false);",
          "    assert_eq!(result.unwrap().as_repr(), 0b00_0000_1000_0000_0000);"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_1000_0000_0000; // 8192",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordAsciiNegate));",
          "    assert!(matches!(result, Some(Look::WordAsciiNegate)));",
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(result.unwrap(), Look::WordAsciiNegate);",
          "    assert!(result.is_none() == false);",
          "    assert_eq!(result.unwrap().as_repr(), 0b00_0000_1000_0000_0000);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0001_0000_0000_0000; // 1024",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Look::WordUnicode));",
          "    assert!(result.is_some());",
          "    assert!(matches!(result, Some(Look::WordUnicodeNegate)));",
          "    assert!(matches!(result.unwrap(), Look::WordUnicode));",
          "    assert!(result.unwrap() == Look::WordUnicode);",
          "    assert!(result.unwrap().as_repr() == 0b00_0000_0010_0000_0000);"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0001_0000_0000_0000; // 1024",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordUnicode));",
          "    assert!(result.is_some());",
          "    assert!(matches!(result, Some(Look::WordUnicodeNegate)));",
          "    assert!(matches!(result.unwrap(), Look::WordUnicode));",
          "    assert!(result.unwrap() == Look::WordUnicode);",
          "    assert!(result.unwrap().as_repr() == 0b00_0000_0010_0000_0000);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0010_0000_0000_0000; // 2048",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Look::WordUnicodeNegate));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0010_0000_0000_0000; // 2048",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordUnicodeNegate));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0100_0000_0000_0000; // 4096",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Look::WordUnicodeNegate));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0100_0000_0000_0000; // 4096",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordUnicodeNegate));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_1000_0000_0000_0000; // 8192",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Look::WordAsciiNegate));",
          "    assert_eq!(result, Look::from_repr(0b00_0000_0010_0000_0000));",
          "    assert!(result.is_some());",
          "    assert!(result.unwrap() == Look::WordAsciiNegate);",
          "    assert!(result.is_none() == false);",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_1000_0000), Some(Look::WordAsciiNegate));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_1000_0000_0000_0000; // 8192",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordAsciiNegate));",
          "    assert_eq!(result, Look::from_repr(0b00_0000_0010_0000_0000));",
          "    assert!(result.is_some());",
          "    assert!(result.unwrap() == Look::WordAsciiNegate);",
          "    assert!(result.is_none() == false);",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_1000_0000), Some(Look::WordAsciiNegate));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b01_0000_0000_0000_0000; // 16384",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    let repr: u32 = 0b00_0000_0010_0000_0000; // 2048",
          "    let expected: Option<Look> = Some(Look::WordUnicodeNegate);",
          "    assert_eq!(Look::from_repr(repr), expected);"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b01_0000_0000_0000_0000; // 16384",
          "    let result = Look::from_repr(repr);",
          "    let repr: u32 = 0b00_0000_0010_0000_0000; // 2048",
          "    let expected: Option<Look> = Some(Look::WordUnicodeNegate);",
          "    assert_eq!(Look::from_repr(repr), expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b10_0000_0000_0000_0000; // 32768",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Look::WordUnicodeNegate));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b10_0000_0000_0000_0000; // 32768",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordUnicodeNegate));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b0000_0000_0000_0000_0000; // 0",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::from_repr(0b0000_0000_0000_0000_0000), None);",
          "    assert_eq!(Look::from_repr(0b00_0000_0010_0000_0000), Some(Look::WordUnicodeNegate));",
          "    assert_eq!(Look::from_repr(0b00_0000_0001_0000_0000), Some(Look::WordUnicode));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b0000_0000_0000_0000_0000; // 0",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(Look::from_repr(0b0000_0000_0000_0000_0000), None);",
          "    assert_eq!(Look::from_repr(0b00_0000_0010_0000_0000), Some(Look::WordUnicodeNegate));",
          "    assert_eq!(Look::from_repr(0b00_0000_0001_0000_0000), Some(Look::WordUnicode));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]