[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0001_0000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Look::WordStartUnicode));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0001_0000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordStartUnicode));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b1111_1111_1111_1111_1111;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    let repr: u32 = 0b00_0001_0000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordStartUnicode));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b1111_1111_1111_1111_1111;",
          "    let result = Look::from_repr(repr);",
          "    let repr: u32 = 0b00_0001_0000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordStartUnicode));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0000_0001;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    let repr: u32 = 0b00_0001_0000_0000_0000;",
          "    let expected: Option<Look> = Some(Look::WordStartUnicode);",
          "    assert_eq!(Look::from_repr(repr), expected);"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0000_0001;",
          "    let result = Look::from_repr(repr);",
          "    let repr: u32 = 0b00_0001_0000_0000_0000;",
          "    let expected: Option<Look> = Some(Look::WordStartUnicode);",
          "    assert_eq!(Look::from_repr(repr), expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0000_0010;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    Let repr: u32 = 0b00_0001_0000_0000_0000;",
          "    Let expected: Option<Look> = Some(Look::WordStartUnicode);",
          "    Assert(result == expected);"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0000_0010;",
          "    let result = Look::from_repr(repr);",
          "    Let repr: u32 = 0b00_0001_0000_0000_0000;",
          "    Let expected: Option<Look> = Some(Look::WordStartUnicode);",
          "    Assert(result == expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0000_0100;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::from_repr(0b00_0001_0000_0000_0000), Some(Look::WordStartUnicode));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0000_0100;",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(Look::from_repr(0b00_0001_0000_0000_0000), Some(Look::WordStartUnicode));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0000_1000;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Look::WordStartUnicode));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0000_1000;",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordStartUnicode));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0001_0000;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Look::WordStartUnicode));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0001_0000;",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordStartUnicode));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0010_0000;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    let repr: u32 = 0b00_0001_0000_0000_0000;",
          "    let expected: Option<Look> = Some(Look::WordStartUnicode);",
          "    assert_eq!(Look::from_repr(repr), expected);",
          "    assert!(Look::from_repr(0b00_0000_0000_0000_0000).is_none());",
          "    assert!(Look::from_repr(0b00_0000_0000_0000_0001).is_some());",
          "    assert!(Look::from_repr(0b00_0000_0000_0000_1000).is_some());",
          "    assert!(Look::from_repr(0b00_1000_0000_0000_0000).is_none());",
          "    assert!(Look::from_repr(0b10_0000_0000_0000_0000).is_none());"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0010_0000;",
          "    let result = Look::from_repr(repr);",
          "    let repr: u32 = 0b00_0001_0000_0000_0000;",
          "    let expected: Option<Look> = Some(Look::WordStartUnicode);",
          "    assert_eq!(Look::from_repr(repr), expected);",
          "    assert!(Look::from_repr(0b00_0000_0000_0000_0000).is_none());",
          "    assert!(Look::from_repr(0b00_0000_0000_0000_0001).is_some());",
          "    assert!(Look::from_repr(0b00_0000_0000_0000_1000).is_some());",
          "    assert!(Look::from_repr(0b00_1000_0000_0000_0000).is_none());",
          "    assert!(Look::from_repr(0b10_0000_0000_0000_0000).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0100_0000;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    let repr: u32 = 0b00_0001_0000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordStartUnicode));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0100_0000;",
          "    let result = Look::from_repr(repr);",
          "    let repr: u32 = 0b00_0001_0000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordStartUnicode));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_1000_0000;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::from_repr(0b00_0001_0000_0000_0000), Some(Look::WordStartUnicode));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_1000_0000;",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(Look::from_repr(0b00_0001_0000_0000_0000), Some(Look::WordStartUnicode));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0001_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Look::WordStartUnicode));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0001_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordStartUnicode));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0010_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Look::WordUnicode));",
          "    assert_eq!(result, None);",
          "    assert!(result.is_some());",
          "    assert!(result.is_none());",
          "    assert_eq!(Look::from_repr(0b00_0001_0000_0000_0000), Some(Look::WordStartHalfUnicode));",
          "    assert_eq!(Look::from_repr(0b10_0000_0000_0000_0000), Some(Look::WordEndHalfUnicode));",
          "    assert!(Look::from_repr(0b1111_1111_1111_1111_1111).is_none());",
          "    assert_eq!(Look::from_repr(0), None);",
          "    assert!(Look::from_repr(0b00_0000_0000_1000_0000).is_some());",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0100_0000), Some(Look::WordAscii));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0010_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordUnicode));",
          "    assert_eq!(result, None);",
          "    assert!(result.is_some());",
          "    assert!(result.is_none());",
          "    assert_eq!(Look::from_repr(0b00_0001_0000_0000_0000), Some(Look::WordStartHalfUnicode));",
          "    assert_eq!(Look::from_repr(0b10_0000_0000_0000_0000), Some(Look::WordEndHalfUnicode));",
          "    assert!(Look::from_repr(0b1111_1111_1111_1111_1111).is_none());",
          "    assert_eq!(Look::from_repr(0), None);",
          "    assert!(Look::from_repr(0b00_0000_0000_1000_0000).is_some());",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0100_0000), Some(Look::WordAscii));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0100_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Look::WordStartUnicode));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0100_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordStartUnicode));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_1000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Look::WordAscii));",
          "    let repr: u32 = 0b00_0001_0000_0000_0000;",
          "    assert_eq!(Look::from_repr(repr), Some(Look::WordStartUnicode));",
          "    let repr: u32 = 0b10_0000_0000_0000_0000;",
          "    assert_eq!(Look::from_repr(repr), None);",
          "    let repr: u32 = 0b00_0000_0000_0000_0010;",
          "    assert_eq!(Look::from_repr(repr), Some(Look::End));",
          "    let repr: u32 = 0b00_0000_0000_0000_1000;",
          "    assert_eq!(Look::from_repr(repr), Some(Look::EndLF));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_1000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordAscii));",
          "    let repr: u32 = 0b00_0001_0000_0000_0000;",
          "    assert_eq!(Look::from_repr(repr), Some(Look::WordStartUnicode));",
          "    let repr: u32 = 0b10_0000_0000_0000_0000;",
          "    assert_eq!(Look::from_repr(repr), None);",
          "    let repr: u32 = 0b00_0000_0000_0000_0010;",
          "    assert_eq!(Look::from_repr(repr), Some(Look::End));",
          "    let repr: u32 = 0b00_0000_0000_0000_1000;",
          "    assert_eq!(Look::from_repr(repr), Some(Look::EndLF));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0100_0000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::from_repr(0b00_0001_0000_0000_0000), Some(Look::WordStartUnicode));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0100_0000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(Look::from_repr(0b00_0001_0000_0000_0000), Some(Look::WordStartUnicode));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_1000_0000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Look::WordEndAscii));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_1000_0000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordEndAscii));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b01_0000_0000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Look::WordStartUnicode));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b01_0000_0000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordStartUnicode));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b10_0000_0000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Look::WordStartUnicode));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b10_0000_0000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordStartUnicode));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]