[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"example haystack\";",
          "    let input = Input::new(&haystack[..])",
          "        .span(0..haystack.len())",
          "        .anchored(Anchored::No);",
          "        ",
          "    let mut slots: Vec<Option<NonMaxUsize>> = Vec::new();",
          "    let cache = Cache {",
          "        capmatches: Captures::default(),",
          "        pikevm: wrappers::PikeVMCache::default(),",
          "        backtrack: wrappers::BoundedBacktrackerCache::default(),",
          "        onepass: wrappers::OnePassCache::default(),",
          "        hybrid: wrappers::HybridCache::default(),",
          "        revhybrid: wrappers::ReverseHybridCache::default(),",
          "    };",
          "",
          "    let regex_info = RegexInfo::default();",
          "    let nfa = NFA::default();",
          "    let core = Core::new(regex_info, None, &[]).unwrap();",
          "    ",
          "    let strategy = ReverseSuffix { core, pre: Prefilter::default() };",
          "    ",
          "    let _result = strategy.search_slots(&mut cache, &input, &mut slots);",
          "}"
        ],
        "oracle": [
          "    assert!(!input.get_anchored().is_anchored());",
          "    assert!(!strategy.core.is_capture_search_needed(slots.len()));",
          "    assert!(strategy.search(&mut cache, &input).is_some());",
          "    assert_eq!(_result, Some(strategy.search(&mut cache, &input).unwrap().pattern()));"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"example haystack\";",
          "    let input = Input::new(&haystack[..])",
          "        .span(0..haystack.len())",
          "        .anchored(Anchored::No);",
          "        ",
          "    let mut slots: Vec<Option<NonMaxUsize>> = Vec::new();",
          "    let cache = Cache {",
          "        capmatches: Captures::default(),",
          "        pikevm: wrappers::PikeVMCache::default(),",
          "        backtrack: wrappers::BoundedBacktrackerCache::default(),",
          "        onepass: wrappers::OnePassCache::default(),",
          "        hybrid: wrappers::HybridCache::default(),",
          "        revhybrid: wrappers::ReverseHybridCache::default(),",
          "    };",
          "",
          "    let regex_info = RegexInfo::default();",
          "    let nfa = NFA::default();",
          "    let core = Core::new(regex_info, None, &[]).unwrap();",
          "    ",
          "    let strategy = ReverseSuffix { core, pre: Prefilter::default() };",
          "    ",
          "    let _result = strategy.search_slots(&mut cache, &input, &mut slots);",
          "    assert!(!input.get_anchored().is_anchored());",
          "    assert!(!strategy.core.is_capture_search_needed(slots.len()));",
          "    assert!(strategy.search(&mut cache, &input).is_some());",
          "    assert_eq!(_result, Some(strategy.search(&mut cache, &input).unwrap().pattern()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"another example\";",
          "    let input = Input::new(&haystack[..])",
          "        .span(0..haystack.len())",
          "        .anchored(Anchored::No);",
          "        ",
          "    let mut slots = vec![None; 2]; // slots.len() = 2",
          "    let mut cache = Cache {",
          "        capmatches: Captures::default(),",
          "        pikevm: wrappers::PikeVMCache::default(),",
          "        backtrack: wrappers::BoundedBacktrackerCache::default(),",
          "        onepass: wrappers::OnePassCache::default(),",
          "        hybrid: wrappers::HybridCache::default(),",
          "        revhybrid: wrappers::ReverseHybridCache::default(),",
          "    };",
          "",
          "    let regex_info = RegexInfo::default();",
          "    let nfa = NFA::default();",
          "    let core = Core::new(regex_info, None, &[]).unwrap();",
          "    ",
          "    let strategy = ReverseSuffix { core, pre: Prefilter::default() };",
          "    ",
          "    let _result = strategy.search_slots(&mut cache, &input, &mut slots);",
          "}"
        ],
        "oracle": [
          "    let haystack: &[u8] = b\"another example\";",
          "    let input = Input::new(&haystack[..])",
          "    .span(0..haystack.len())",
          "    .anchored(Anchored::No);",
          "    let mut slots = vec![None; 2];",
          "    let mut cache = Cache {",
          "    capmatches: Captures::default(),",
          "    pikevm: wrappers::PikeVMCache::default(),",
          "    backtrack: wrappers::BoundedBacktrackerCache::default(),",
          "    onepass: wrappers::OnePassCache::default(),",
          "    hybrid: wrappers::HybridCache::default(),",
          "    revhybrid: wrappers::ReverseHybridCache::default(),",
          "    };",
          "    let regex_info = RegexInfo::default();",
          "    let nfa = NFA::default();",
          "    let core = Core::new(regex_info, None, &[]).unwrap();",
          "    let strategy = ReverseSuffix { core, pre: Prefilter::default() };",
          "    let _result = strategy.search_slots(&mut cache, &input, &mut slots);",
          "    assert_eq!(_result.is_some(), true);",
          "    assert_eq!(slots[0].is_some(), true);",
          "    assert_eq!(slots[1].is_some(), true);",
          "    assert_eq!(_result.unwrap(), slots[0].unwrap().as_usize());"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"another example\";",
          "    let input = Input::new(&haystack[..])",
          "        .span(0..haystack.len())",
          "        .anchored(Anchored::No);",
          "        ",
          "    let mut slots = vec![None; 2]; // slots.len() = 2",
          "    let mut cache = Cache {",
          "        capmatches: Captures::default(),",
          "        pikevm: wrappers::PikeVMCache::default(),",
          "        backtrack: wrappers::BoundedBacktrackerCache::default(),",
          "        onepass: wrappers::OnePassCache::default(),",
          "        hybrid: wrappers::HybridCache::default(),",
          "        revhybrid: wrappers::ReverseHybridCache::default(),",
          "    };",
          "",
          "    let regex_info = RegexInfo::default();",
          "    let nfa = NFA::default();",
          "    let core = Core::new(regex_info, None, &[]).unwrap();",
          "    ",
          "    let strategy = ReverseSuffix { core, pre: Prefilter::default() };",
          "    ",
          "    let _result = strategy.search_slots(&mut cache, &input, &mut slots);",
          "    let haystack: &[u8] = b\"another example\";",
          "    let input = Input::new(&haystack[..])",
          "    .span(0..haystack.len())",
          "    .anchored(Anchored::No);",
          "    let mut slots = vec![None; 2];",
          "    let mut cache = Cache {",
          "    capmatches: Captures::default(),",
          "    pikevm: wrappers::PikeVMCache::default(),",
          "    backtrack: wrappers::BoundedBacktrackerCache::default(),",
          "    onepass: wrappers::OnePassCache::default(),",
          "    hybrid: wrappers::HybridCache::default(),",
          "    revhybrid: wrappers::ReverseHybridCache::default(),",
          "    };",
          "    let regex_info = RegexInfo::default();",
          "    let nfa = NFA::default();",
          "    let core = Core::new(regex_info, None, &[]).unwrap();",
          "    let strategy = ReverseSuffix { core, pre: Prefilter::default() };",
          "    let _result = strategy.search_slots(&mut cache, &input, &mut slots);",
          "    assert_eq!(_result.is_some(), true);",
          "    assert_eq!(slots[0].is_some(), true);",
          "    assert_eq!(slots[1].is_some(), true);",
          "    assert_eq!(_result.unwrap(), slots[0].unwrap().as_usize());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]