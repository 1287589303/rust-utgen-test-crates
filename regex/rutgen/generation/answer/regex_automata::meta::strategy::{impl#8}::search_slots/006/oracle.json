[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"test input data\";",
          "    let span = Span { start: 0, end: haystack.len() };",
          "    let input = Input::new(haystack)",
          "        .span(span)",
          "        .anchored(Anchored::No);",
          "    ",
          "    let mut slots: Vec<Option<NonMaxUsize>> = vec![None; 1]; // Fewer than implicit_slot_len()",
          "    ",
          "    let core = Core {",
          "        info: RegexInfo::default(),",
          "        pre: None,",
          "        nfa: NFA::default(),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::default(),",
          "        dfa: wrappers::DFA::default(),",
          "    };",
          "    ",
          "    let strategy = ReverseSuffix {",
          "        core,",
          "        pre: Prefilter::default(),",
          "    };",
          "    ",
          "    let mut cache = Cache::default();",
          "    ",
          "    let result = strategy.search_slots(&mut cache, &input, &mut slots);",
          "}"
        ],
        "oracle": [
          "    assert!(!input.get_anchored().is_anchored());",
          "    assert!(!self.core.is_capture_search_needed(slots.len()));",
          "    assert!(strategy.search(&mut cache, &input).is_none());",
          "    assert_eq!(result, None);",
          "    assert_eq!(slots, vec![None]);"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"test input data\";",
          "    let span = Span { start: 0, end: haystack.len() };",
          "    let input = Input::new(haystack)",
          "        .span(span)",
          "        .anchored(Anchored::No);",
          "    ",
          "    let mut slots: Vec<Option<NonMaxUsize>> = vec![None; 1]; // Fewer than implicit_slot_len()",
          "    ",
          "    let core = Core {",
          "        info: RegexInfo::default(),",
          "        pre: None,",
          "        nfa: NFA::default(),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::default(),",
          "        dfa: wrappers::DFA::default(),",
          "    };",
          "    ",
          "    let strategy = ReverseSuffix {",
          "        core,",
          "        pre: Prefilter::default(),",
          "    };",
          "    ",
          "    let mut cache = Cache::default();",
          "    ",
          "    let result = strategy.search_slots(&mut cache, &input, &mut slots);",
          "    assert!(!input.get_anchored().is_anchored());",
          "    assert!(!self.core.is_capture_search_needed(slots.len()));",
          "    assert!(strategy.search(&mut cache, &input).is_none());",
          "    assert_eq!(result, None);",
          "    assert_eq!(slots, vec![None]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]