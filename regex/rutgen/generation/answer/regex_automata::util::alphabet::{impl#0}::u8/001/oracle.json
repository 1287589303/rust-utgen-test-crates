[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 0u8;",
          "    let unit = Unit::u8(byte);",
          "}"
        ],
        "oracle": [
          "    let expected_unit = Unit(UnitKind::U8(0));",
          "    assert_eq!(unit, expected_unit);",
          "    ",
          "    let byte = 255u8;",
          "    let expected_unit = Unit(UnitKind::U8(255));",
          "    assert_eq!(Unit::u8(byte), expected_unit);",
          "    ",
          "    let byte = 127u8;",
          "    let expected_unit = Unit(UnitKind::U8(127));",
          "    assert_eq!(Unit::u8(byte), expected_unit);",
          "    ",
          "    let byte = 1u8;",
          "    let expected_unit = Unit(UnitKind::U8(1));",
          "    assert_eq!(Unit::u8(byte), expected_unit);",
          "    ",
          "    let byte = 100u8;",
          "    let expected_unit = Unit(UnitKind::U8(100));",
          "    assert_eq!(Unit::u8(byte), expected_unit);",
          "    ",
          "    let byte = 50u8;",
          "    let expected_unit = Unit(UnitKind::U8(50));",
          "    assert_eq!(Unit::u8(byte), expected_unit);"
        ],
        "code": [
          "{",
          "    let byte = 0u8;",
          "    let unit = Unit::u8(byte);",
          "    let expected_unit = Unit(UnitKind::U8(0));",
          "    assert_eq!(unit, expected_unit);",
          "    ",
          "    let byte = 255u8;",
          "    let expected_unit = Unit(UnitKind::U8(255));",
          "    assert_eq!(Unit::u8(byte), expected_unit);",
          "    ",
          "    let byte = 127u8;",
          "    let expected_unit = Unit(UnitKind::U8(127));",
          "    assert_eq!(Unit::u8(byte), expected_unit);",
          "    ",
          "    let byte = 1u8;",
          "    let expected_unit = Unit(UnitKind::U8(1));",
          "    assert_eq!(Unit::u8(byte), expected_unit);",
          "    ",
          "    let byte = 100u8;",
          "    let expected_unit = Unit(UnitKind::U8(100));",
          "    assert_eq!(Unit::u8(byte), expected_unit);",
          "    ",
          "    let byte = 50u8;",
          "    let expected_unit = Unit(UnitKind::U8(50));",
          "    assert_eq!(Unit::u8(byte), expected_unit);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 128u8;",
          "    let unit = Unit::u8(byte);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unit, Unit(UnitKind::U8(128)));"
        ],
        "code": [
          "{",
          "    let byte = 128u8;",
          "    let unit = Unit::u8(byte);",
          "    assert_eq!(unit, Unit(UnitKind::U8(128)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 255u8;",
          "    let unit = Unit::u8(byte);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unit, Unit(UnitKind::U8(255)));"
        ],
        "code": [
          "{",
          "    let byte = 255u8;",
          "    let unit = Unit::u8(byte);",
          "    assert_eq!(unit, Unit(UnitKind::U8(255)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 1u8;",
          "    let unit = Unit::u8(byte);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unit, Unit(UnitKind::U8(1)));",
          "    let byte = 255u8;",
          "    let unit = Unit::u8(byte);",
          "    assert_eq!(unit, Unit(UnitKind::U8(255)));",
          "    let byte = 0u8;",
          "    let unit = Unit::u8(byte);",
          "    assert_eq!(unit, Unit(UnitKind::U8(0)));"
        ],
        "code": [
          "{",
          "    let byte = 1u8;",
          "    let unit = Unit::u8(byte);",
          "    assert_eq!(unit, Unit(UnitKind::U8(1)));",
          "    let byte = 255u8;",
          "    let unit = Unit::u8(byte);",
          "    assert_eq!(unit, Unit(UnitKind::U8(255)));",
          "    let byte = 0u8;",
          "    let unit = Unit::u8(byte);",
          "    assert_eq!(unit, Unit(UnitKind::U8(0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 254u8;",
          "    let unit = Unit::u8(byte);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unit, Unit(UnitKind::U8(254)));"
        ],
        "code": [
          "{",
          "    let byte = 254u8;",
          "    let unit = Unit::u8(byte);",
          "    assert_eq!(unit, Unit(UnitKind::U8(254)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]