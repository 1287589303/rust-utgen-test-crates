[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SimpleHir {",
          "        props: Properties,",
          "    }",
          "",
          "    impl SimpleHir {",
          "        fn new() -> Self {",
          "            SimpleHir {",
          "                props: Properties(Box::new(PropertiesI {",
          "                    explicit_captures_len: 0,",
          "                    static_explicit_captures_len: None,",
          "                    look_set: LookSet::empty(),",
          "                    look_set_prefix: LookSet::empty(),",
          "                    look_set_suffix: LookSet::empty(),",
          "                    look_set_prefix_any: LookSet::empty(),",
          "                    look_set_suffix_any: LookSet::empty(),",
          "                    utf8: false,",
          "                    literal: false,",
          "                    alternation_literal: false,",
          "                })),",
          "            }",
          "        }",
          "    }",
          "",
          "    let sub_hir = SimpleHir::new();",
          "    let capture = Capture {",
          "        index: 0,",
          "        name: None,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::SomeKind, // replace with a valid kind",
          "            props: sub_hir.props,",
          "        }),",
          "    };",
          "",
          "    let properties = Properties::capture(&capture);",
          "}"
        ],
        "oracle": [
          "    let sub_hir = SimpleHir::new();",
          "    let capture = Capture { index: 0, name: None, sub: Box::new(Hir { kind: HirKind::SomeKind, props: sub_hir.props, }) };",
          "    let properties = Properties::capture(&capture);",
          "    assert_eq!(properties.0.explicit_captures_len, 1);",
          "    assert_eq!(properties.0.static_explicit_captures_len, None);",
          "    assert!(!properties.0.literal);",
          "    assert!(!properties.0.alternation_literal);",
          "    assert_eq!(properties.0.minimum_len, sub_hir.props.0.minimum_len);",
          "    assert_eq!(properties.0.maximum_len, sub_hir.props.0.maximum_len);",
          "    assert_eq!(properties.0.utf8, sub_hir.props.0.utf8);"
        ],
        "code": [
          "{",
          "    struct SimpleHir {",
          "        props: Properties,",
          "    }",
          "",
          "    impl SimpleHir {",
          "        fn new() -> Self {",
          "            SimpleHir {",
          "                props: Properties(Box::new(PropertiesI {",
          "                    explicit_captures_len: 0,",
          "                    static_explicit_captures_len: None,",
          "                    look_set: LookSet::empty(),",
          "                    look_set_prefix: LookSet::empty(),",
          "                    look_set_suffix: LookSet::empty(),",
          "                    look_set_prefix_any: LookSet::empty(),",
          "                    look_set_suffix_any: LookSet::empty(),",
          "                    utf8: false,",
          "                    literal: false,",
          "                    alternation_literal: false,",
          "                })),",
          "            }",
          "        }",
          "    }",
          "",
          "    let sub_hir = SimpleHir::new();",
          "    let capture = Capture {",
          "        index: 0,",
          "        name: None,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::SomeKind, // replace with a valid kind",
          "            props: sub_hir.props,",
          "        }),",
          "    };",
          "",
          "    let properties = Properties::capture(&capture);",
          "    let sub_hir = SimpleHir::new();",
          "    let capture = Capture { index: 0, name: None, sub: Box::new(Hir { kind: HirKind::SomeKind, props: sub_hir.props, }) };",
          "    let properties = Properties::capture(&capture);",
          "    assert_eq!(properties.0.explicit_captures_len, 1);",
          "    assert_eq!(properties.0.static_explicit_captures_len, None);",
          "    assert!(!properties.0.literal);",
          "    assert!(!properties.0.alternation_literal);",
          "    assert_eq!(properties.0.minimum_len, sub_hir.props.0.minimum_len);",
          "    assert_eq!(properties.0.maximum_len, sub_hir.props.0.maximum_len);",
          "    assert_eq!(properties.0.utf8, sub_hir.props.0.utf8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SimpleHir {",
          "        props: Properties,",
          "    }",
          "",
          "    impl SimpleHir {",
          "        fn new(explicit_len: usize, static_len: Option<usize>) -> Self {",
          "            SimpleHir {",
          "                props: Properties(Box::new(PropertiesI {",
          "                    explicit_captures_len: explicit_len,",
          "                    static_captures_len,",
          "                    look_set: LookSet::empty(),",
          "                    look_set_prefix: LookSet::empty(),",
          "                    look_set_suffix: LookSet::empty(),",
          "                    look_set_prefix_any: LookSet::empty(),",
          "                    look_set_suffix_any: LookSet::empty(),",
          "                    utf8: true,",
          "                    literal: false,",
          "                    alternation_literal: false,",
          "                })),",
          "            }",
          "        }",
          "    }",
          "",
          "    let sub_hir = SimpleHir::new(5, Some(3));",
          "    let capture = Capture {",
          "        index: 1,",
          "        name: Some(Box::from(\"group1\")),",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::SomeKind, // replace with a valid kind",
          "            props: sub_hir.props,",
          "        }),",
          "    };",
          "",
          "    let properties = Properties::capture(&capture);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(properties.explicit_captures_len, 6);",
          "    assert_eq!(properties.static_explicit_captures_len, Some(4));",
          "    assert_eq!(properties.literal, false);",
          "    assert_eq!(properties.alternation_literal, false);",
          "    assert_eq!(properties.minimum_len, sub_hir.props.minimum_len);",
          "    assert_eq!(properties.maximum_len, sub_hir.props.maximum_len);",
          "    assert_eq!(properties.utf8, true);"
        ],
        "code": [
          "{",
          "    struct SimpleHir {",
          "        props: Properties,",
          "    }",
          "",
          "    impl SimpleHir {",
          "        fn new(explicit_len: usize, static_len: Option<usize>) -> Self {",
          "            SimpleHir {",
          "                props: Properties(Box::new(PropertiesI {",
          "                    explicit_captures_len: explicit_len,",
          "                    static_captures_len,",
          "                    look_set: LookSet::empty(),",
          "                    look_set_prefix: LookSet::empty(),",
          "                    look_set_suffix: LookSet::empty(),",
          "                    look_set_prefix_any: LookSet::empty(),",
          "                    look_set_suffix_any: LookSet::empty(),",
          "                    utf8: true,",
          "                    literal: false,",
          "                    alternation_literal: false,",
          "                })),",
          "            }",
          "        }",
          "    }",
          "",
          "    let sub_hir = SimpleHir::new(5, Some(3));",
          "    let capture = Capture {",
          "        index: 1,",
          "        name: Some(Box::from(\"group1\")),",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::SomeKind, // replace with a valid kind",
          "            props: sub_hir.props,",
          "        }),",
          "    };",
          "",
          "    let properties = Properties::capture(&capture);",
          "    assert_eq!(properties.explicit_captures_len, 6);",
          "    assert_eq!(properties.static_explicit_captures_len, Some(4));",
          "    assert_eq!(properties.literal, false);",
          "    assert_eq!(properties.alternation_literal, false);",
          "    assert_eq!(properties.minimum_len, sub_hir.props.minimum_len);",
          "    assert_eq!(properties.maximum_len, sub_hir.props.maximum_len);",
          "    assert_eq!(properties.utf8, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SimpleHir {",
          "        props: Properties,",
          "    }",
          "",
          "    impl SimpleHir {",
          "        fn new() -> Self {",
          "            SimpleHir {",
          "                props: Properties(Box::new(PropertiesI {",
          "                    explicit_captures_len: 3,",
          "                    static_captures_len: None,",
          "                    look_set: LookSet::empty(),",
          "                    look_set_prefix: LookSet::empty(),",
          "                    look_set_suffix: LookSet::empty(),",
          "                    look_set_prefix_any: LookSet::empty(),",
          "                    look_set_suffix_any: LookSet::empty(),",
          "                    utf8: false,",
          "                    literal: false,",
          "                    alternation_literal: true,",
          "                })),",
          "            }",
          "        }",
          "    }",
          "",
          "    let sub_hir = SimpleHir::new();",
          "    let capture = Capture {",
          "        index: 2,",
          "        name: Some(Box::from(\"group2\")),",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::SomeKind, // replace with a valid kind",
          "            props: sub_hir.props,",
          "        }),",
          "    };",
          "",
          "    let properties = Properties::capture(&capture);",
          "}"
        ],
        "oracle": [
          "    Properties::capture(&capture).properties().explicit_captures_len == 4",
          "    Properties::capture(&capture).properties().static_explicit_captures_len == Some(1)",
          "    Properties::capture(&capture).properties().literal == false",
          "    Properties::capture(&capture).properties().alternation_literal == false",
          "    Properties::capture(&capture).properties().look_set == LookSet::empty()",
          "    Properties::capture(&capture).properties().look_set_prefix == LookSet::empty()",
          "    Properties::capture(&capture).properties().look_set_suffix == LookSet::empty()",
          "    Properties::capture(&capture).properties().look_set_prefix_any == LookSet::empty()",
          "    Properties::capture(&capture).properties().look_set_suffix_any == LookSet::empty()",
          "    Properties::capture(&capture).properties().utf8 == false"
        ],
        "code": [
          "{",
          "    struct SimpleHir {",
          "        props: Properties,",
          "    }",
          "",
          "    impl SimpleHir {",
          "        fn new() -> Self {",
          "            SimpleHir {",
          "                props: Properties(Box::new(PropertiesI {",
          "                    explicit_captures_len: 3,",
          "                    static_captures_len: None,",
          "                    look_set: LookSet::empty(),",
          "                    look_set_prefix: LookSet::empty(),",
          "                    look_set_suffix: LookSet::empty(),",
          "                    look_set_prefix_any: LookSet::empty(),",
          "                    look_set_suffix_any: LookSet::empty(),",
          "                    utf8: false,",
          "                    literal: false,",
          "                    alternation_literal: true,",
          "                })),",
          "            }",
          "        }",
          "    }",
          "",
          "    let sub_hir = SimpleHir::new();",
          "    let capture = Capture {",
          "        index: 2,",
          "        name: Some(Box::from(\"group2\")),",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::SomeKind, // replace with a valid kind",
          "            props: sub_hir.props,",
          "        }),",
          "    };",
          "",
          "    let properties = Properties::capture(&capture);",
          "    Properties::capture(&capture).properties().explicit_captures_len == 4",
          "    Properties::capture(&capture).properties().static_explicit_captures_len == Some(1)",
          "    Properties::capture(&capture).properties().literal == false",
          "    Properties::capture(&capture).properties().alternation_literal == false",
          "    Properties::capture(&capture).properties().look_set == LookSet::empty()",
          "    Properties::capture(&capture).properties().look_set_prefix == LookSet::empty()",
          "    Properties::capture(&capture).properties().look_set_suffix == LookSet::empty()",
          "    Properties::capture(&capture).properties().look_set_prefix_any == LookSet::empty()",
          "    Properties::capture(&capture).properties().look_set_suffix_any == LookSet::empty()",
          "    Properties::capture(&capture).properties().utf8 == false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SimpleHir {",
          "        props: Properties,",
          "    }",
          "",
          "    impl SimpleHir {",
          "        fn new() -> Self {",
          "            SimpleHir {",
          "                props: Properties(Box::new(PropertiesI {",
          "                    explicit_captures_len: 10,",
          "                    static_captures_len: Some(5),",
          "                    look_set: LookSet::empty(),",
          "                    look_set_prefix: LookSet::empty(),",
          "                    look_set_suffix: LookSet::empty(),",
          "                    look_set_prefix_any: LookSet::empty(),",
          "                    look_set_suffix_any: LookSet::empty(),",
          "                    utf8: true,",
          "                    literal: false,",
          "                    alternation_literal: false,",
          "                })),",
          "            }",
          "        }",
          "    }",
          "",
          "    let sub_hir = SimpleHir::new();",
          "    let capture = Capture {",
          "        index: 3,",
          "        name: None,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::SomeKind, // replace with a valid kind",
          "            props: sub_hir.props,",
          "        }),",
          "    };",
          "",
          "    let properties = Properties::capture(&capture);",
          "}"
        ],
        "oracle": [
          "    let expected_captures_len = 11; // sub properties explicit captures len + 1",
          "    let expected_static_captures_len = Some(6); // sub properties static captures len + 1",
          "    let properties = Properties::capture(&capture);",
          "    assert_eq!(properties.0.explicit_captures_len, expected_captures_len);",
          "    assert_eq!(properties.0.static_explicit_captures_len, expected_static_captures_len);",
          "    assert!(!properties.0.literal);",
          "    assert!(!properties.0.alternation_literal);",
          "    assert_eq!(properties.0.look_set, sub_hir.props.0.look_set);",
          "    assert_eq!(properties.0.look_set_prefix, sub_hir.props.0.look_set_prefix);",
          "    assert_eq!(properties.0.look_set_suffix, sub_hir.props.0.look_set_suffix);",
          "    assert_eq!(properties.0.look_set_prefix_any, sub_hir.props.0.look_set_prefix_any);",
          "    assert_eq!(properties.0.look_set_suffix_any, sub_hir.props.0.look_set_suffix_any);",
          "    assert!(properties.0.utf8);"
        ],
        "code": [
          "{",
          "    struct SimpleHir {",
          "        props: Properties,",
          "    }",
          "",
          "    impl SimpleHir {",
          "        fn new() -> Self {",
          "            SimpleHir {",
          "                props: Properties(Box::new(PropertiesI {",
          "                    explicit_captures_len: 10,",
          "                    static_captures_len: Some(5),",
          "                    look_set: LookSet::empty(),",
          "                    look_set_prefix: LookSet::empty(),",
          "                    look_set_suffix: LookSet::empty(),",
          "                    look_set_prefix_any: LookSet::empty(),",
          "                    look_set_suffix_any: LookSet::empty(),",
          "                    utf8: true,",
          "                    literal: false,",
          "                    alternation_literal: false,",
          "                })),",
          "            }",
          "        }",
          "    }",
          "",
          "    let sub_hir = SimpleHir::new();",
          "    let capture = Capture {",
          "        index: 3,",
          "        name: None,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::SomeKind, // replace with a valid kind",
          "            props: sub_hir.props,",
          "        }),",
          "    };",
          "",
          "    let properties = Properties::capture(&capture);",
          "    let expected_captures_len = 11; // sub properties explicit captures len + 1",
          "    let expected_static_captures_len = Some(6); // sub properties static captures len + 1",
          "    let properties = Properties::capture(&capture);",
          "    assert_eq!(properties.0.explicit_captures_len, expected_captures_len);",
          "    assert_eq!(properties.0.static_explicit_captures_len, expected_static_captures_len);",
          "    assert!(!properties.0.literal);",
          "    assert!(!properties.0.alternation_literal);",
          "    assert_eq!(properties.0.look_set, sub_hir.props.0.look_set);",
          "    assert_eq!(properties.0.look_set_prefix, sub_hir.props.0.look_set_prefix);",
          "    assert_eq!(properties.0.look_set_suffix, sub_hir.props.0.look_set_suffix);",
          "    assert_eq!(properties.0.look_set_prefix_any, sub_hir.props.0.look_set_prefix_any);",
          "    assert_eq!(properties.0.look_set_suffix_any, sub_hir.props.0.look_set_suffix_any);",
          "    assert!(properties.0.utf8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]