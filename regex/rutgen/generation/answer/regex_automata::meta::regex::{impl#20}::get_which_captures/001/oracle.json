[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::default().which_captures(WhichCaptures::All);",
          "    config.get_which_captures();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "    ",
          "    let config = Config::default().which_captures(WhichCaptures::Implicit);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::Implicit);",
          "    ",
          "    let config = Config::default().which_captures(WhichCaptures::None);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
          "    ",
          "    let config = Config::default();",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);"
        ],
        "code": [
          "{",
          "    let config = Config::default().which_captures(WhichCaptures::All);",
          "    config.get_which_captures();",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "    ",
          "    let config = Config::default().which_captures(WhichCaptures::Implicit);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::Implicit);",
          "    ",
          "    let config = Config::default().which_captures(WhichCaptures::None);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
          "    ",
          "    let config = Config::default();",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::default().which_captures(WhichCaptures::Implicit);",
          "    config.get_which_captures();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_which_captures(), WhichCaptures::Implicit);",
          "    ",
          "    let config = Config::default();",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);"
        ],
        "code": [
          "{",
          "    let config = Config::default().which_captures(WhichCaptures::Implicit);",
          "    config.get_which_captures();",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::Implicit);",
          "    ",
          "    let config = Config::default();",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::default().which_captures(WhichCaptures::None);",
          "    config.get_which_captures();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
          "    let config_default = Config::default();",
          "    assert_eq!(config_default.get_which_captures(), WhichCaptures::All);",
          "    let config_implicit = Config::default().which_captures(WhichCaptures::Implicit);",
          "    assert_eq!(config_implicit.get_which_captures(), WhichCaptures::Implicit);",
          "    let config_all = Config::default().which_captures(WhichCaptures::All);",
          "    assert_eq!(config_all.get_which_captures(), WhichCaptures::All);"
        ],
        "code": [
          "{",
          "    let config = Config::default().which_captures(WhichCaptures::None);",
          "    config.get_which_captures();",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
          "    let config_default = Config::default();",
          "    assert_eq!(config_default.get_which_captures(), WhichCaptures::All);",
          "    let config_implicit = Config::default().which_captures(WhichCaptures::Implicit);",
          "    assert_eq!(config_implicit.get_which_captures(), WhichCaptures::Implicit);",
          "    let config_all = Config::default().which_captures(WhichCaptures::All);",
          "    assert_eq!(config_all.get_which_captures(), WhichCaptures::All);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::default();",
          "    config.get_which_captures();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "    let config = Config::default().which_captures(WhichCaptures::Implicit);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::Implicit);",
          "    let config = Config::default().which_captures(WhichCaptures::None);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
          "    let config = Config::default().which_captures(WhichCaptures::All);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);"
        ],
        "code": [
          "{",
          "    let config = Config::default();",
          "    config.get_which_captures();",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "    let config = Config::default().which_captures(WhichCaptures::Implicit);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::Implicit);",
          "    let config = Config::default().which_captures(WhichCaptures::None);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
          "    let config = Config::default().which_captures(WhichCaptures::All);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]