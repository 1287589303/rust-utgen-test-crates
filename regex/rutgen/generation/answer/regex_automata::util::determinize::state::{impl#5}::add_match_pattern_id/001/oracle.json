[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut state_builder_matches = StateBuilderMatches(vec![]);",
          "    let pattern_id_zero = PatternID::ZERO;",
          "    state_builder_matches.add_match_pattern_id(pattern_id_zero);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state_builder_matches.look_have(), LookSet::default());",
          "    assert!(state_builder_matches.repr_vec().repr().is_match());",
          "    assert!(state_builder_matches.repr_vec().repr().has_pattern_ids());",
          "    assert_eq!(state_builder_matches.repr_vec().0.len(), PatternID::SIZE);",
          "    assert_eq!(state_builder_matches.repr_vec().0[0], 0);"
        ],
        "code": [
          "{",
          "    let mut state_builder_matches = StateBuilderMatches(vec![]);",
          "    let pattern_id_zero = PatternID::ZERO;",
          "    state_builder_matches.add_match_pattern_id(pattern_id_zero);",
          "    assert_eq!(state_builder_matches.look_have(), LookSet::default());",
          "    assert!(state_builder_matches.repr_vec().repr().is_match());",
          "    assert!(state_builder_matches.repr_vec().repr().has_pattern_ids());",
          "    assert_eq!(state_builder_matches.repr_vec().0.len(), PatternID::SIZE);",
          "    assert_eq!(state_builder_matches.repr_vec().0[0], 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut state_builder_matches = StateBuilderMatches(vec![]);",
          "    let pattern_id_max = PatternID(StateID::MAX);",
          "    state_builder_matches.add_match_pattern_id(pattern_id_max);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state_builder_matches.0.len(), 4);",
          "    assert_eq!(state_builder_matches.look_have(), LookSet::default());",
          "    assert!(state_builder_matches.repr_vec().repr().has_pattern_ids());",
          "    assert!(state_builder_matches.repr_vec().repr().is_match());"
        ],
        "code": [
          "{",
          "    let mut state_builder_matches = StateBuilderMatches(vec![]);",
          "    let pattern_id_max = PatternID(StateID::MAX);",
          "    state_builder_matches.add_match_pattern_id(pattern_id_max);",
          "    assert_eq!(state_builder_matches.0.len(), 4);",
          "    assert_eq!(state_builder_matches.look_have(), LookSet::default());",
          "    assert!(state_builder_matches.repr_vec().repr().has_pattern_ids());",
          "    assert!(state_builder_matches.repr_vec().repr().is_match());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut state_builder_matches = StateBuilderMatches(vec![]);",
          "    let pattern_id_typical = PatternID(StateID(1));",
          "    state_builder_matches.add_match_pattern_id(pattern_id_typical);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state_builder_matches.0.len(), 4);",
          "    assert_eq!(state_builder_matches.look_have().has_pattern_ids(), true);",
          "    assert_eq!(state_builder_matches.0[0], pattern_id_typical.as_u32());",
          "    assert!(state_builder_matches.repr_vec().repr().is_match());",
          "    assert_eq!(state_builder_matches.repr_vec().repr().look_need(), LookSet::default());",
          "    assert!(state_builder_matches.repr_vec().repr().has_pattern_ids());",
          "    assert!(state_builder_matches.repr_vec().repr().look_have().has_pattern_ids());"
        ],
        "code": [
          "{",
          "    let mut state_builder_matches = StateBuilderMatches(vec![]);",
          "    let pattern_id_typical = PatternID(StateID(1));",
          "    state_builder_matches.add_match_pattern_id(pattern_id_typical);",
          "    assert_eq!(state_builder_matches.0.len(), 4);",
          "    assert_eq!(state_builder_matches.look_have().has_pattern_ids(), true);",
          "    assert_eq!(state_builder_matches.0[0], pattern_id_typical.as_u32());",
          "    assert!(state_builder_matches.repr_vec().repr().is_match());",
          "    assert_eq!(state_builder_matches.repr_vec().repr().look_need(), LookSet::default());",
          "    assert!(state_builder_matches.repr_vec().repr().has_pattern_ids());",
          "    assert!(state_builder_matches.repr_vec().repr().look_have().has_pattern_ids());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]