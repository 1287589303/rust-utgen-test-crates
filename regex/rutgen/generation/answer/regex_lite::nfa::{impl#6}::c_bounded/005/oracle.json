[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 1, flags: Default::default() };",
          "    let pattern = String::from(\"a\");",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(Box::new(hir::Repetition {",
          "            min: 1,",
          "            max: Some(5),",
          "            greedy: true,",
          "        })),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    ",
          "    let compiler = Compiler::new(config, pattern);",
          "    let _result = compiler.c_bounded(&hir, true, 1, 5);",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 1, flags: Default::default() };",
          "    let pattern = String::from(\"a\");",
          "    let hir = Hir {",
          "    kind: HirKind::Repetition(Box::new(hir::Repetition {",
          "    min: 1,",
          "    max: Some(5),",
          "    greedy: true,",
          "    })),",
          "    is_start_anchored: false,",
          "    is_match_empty: false,",
          "    static_explicit_captures_len: None,",
          "    };",
          "    let compiler = Compiler::new(config, pattern);",
          "    let compile_exactly_result = compiler.c_exactly(&hir, 1);",
          "    assert!(compile_exactly_result.is_ok());",
          "    let empty_result = compiler.add_empty();",
          "    assert!(empty_result.is_ok());",
          "    let min_max_range = (1..5).contains(&1);",
          "    assert!(min_max_range);",
          "    let splits_result = compiler.add(State::Splits { targets: vec![], reverse: true });",
          "    assert!(splits_result.is_ok());",
          "    let compilation_result = compiler.c(&hir);",
          "    assert!(compilation_result.is_err());"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 1, flags: Default::default() };",
          "    let pattern = String::from(\"a\");",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(Box::new(hir::Repetition {",
          "            min: 1,",
          "            max: Some(5),",
          "            greedy: true,",
          "        })),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    ",
          "    let compiler = Compiler::new(config, pattern);",
          "    let _result = compiler.c_bounded(&hir, true, 1, 5);",
          "    let config = Config { nest_limit: 1, flags: Default::default() };",
          "    let pattern = String::from(\"a\");",
          "    let hir = Hir {",
          "    kind: HirKind::Repetition(Box::new(hir::Repetition {",
          "    min: 1,",
          "    max: Some(5),",
          "    greedy: true,",
          "    })),",
          "    is_start_anchored: false,",
          "    is_match_empty: false,",
          "    static_explicit_captures_len: None,",
          "    };",
          "    let compiler = Compiler::new(config, pattern);",
          "    let compile_exactly_result = compiler.c_exactly(&hir, 1);",
          "    assert!(compile_exactly_result.is_ok());",
          "    let empty_result = compiler.add_empty();",
          "    assert!(empty_result.is_ok());",
          "    let min_max_range = (1..5).contains(&1);",
          "    assert!(min_max_range);",
          "    let splits_result = compiler.add(State::Splits { targets: vec![], reverse: true });",
          "    assert!(splits_result.is_ok());",
          "    let compilation_result = compiler.c(&hir);",
          "    assert!(compilation_result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 1, flags: Default::default() };",
          "    let pattern = String::from(\"a\");",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(Box::new(hir::Repetition {",
          "            min: 1,",
          "            max: Some(5),",
          "            greedy: false,",
          "        })),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    ",
          "    let compiler = Compiler::new(config, pattern);",
          "    let _result = compiler.c_bounded(&hir, false, 1, 5);",
          "}"
        ],
        "oracle": [
          "    assert!(_result.is_ok());",
          "    let thompson_ref = _result.unwrap();",
          "    assert_eq!(thompson_ref.start, expected_start_state_id);",
          "    assert_eq!(thompson_ref.end, expected_end_state_id);",
          "    assert!(compiler.nfa.borrow().states.len() > initial_state_count);",
          "    assert!(compiler.nfa.borrow().memory_extra > initial_memory_usage);",
          "    assert!(compiler.nfa.borrow().states.iter().any(|s| matches!(s, State::Splits { .. })));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 1, flags: Default::default() };",
          "    let pattern = String::from(\"a\");",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(Box::new(hir::Repetition {",
          "            min: 1,",
          "            max: Some(5),",
          "            greedy: false,",
          "        })),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    ",
          "    let compiler = Compiler::new(config, pattern);",
          "    let _result = compiler.c_bounded(&hir, false, 1, 5);",
          "    assert!(_result.is_ok());",
          "    let thompson_ref = _result.unwrap();",
          "    assert_eq!(thompson_ref.start, expected_start_state_id);",
          "    assert_eq!(thompson_ref.end, expected_end_state_id);",
          "    assert!(compiler.nfa.borrow().states.len() > initial_state_count);",
          "    assert!(compiler.nfa.borrow().memory_extra > initial_memory_usage);",
          "    assert!(compiler.nfa.borrow().states.iter().any(|s| matches!(s, State::Splits { .. })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]