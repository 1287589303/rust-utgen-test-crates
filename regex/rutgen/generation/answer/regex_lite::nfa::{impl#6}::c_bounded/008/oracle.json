[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let compiler = Compiler::new(config, String::from(\"test\"));",
          "    let hir = Hir { kind: HirKind::Char('a'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "",
          "    let min = 1;",
          "    let max = 3;",
          "    let greedy = true;",
          "",
          "    let _ = compiler.c_bounded(&hir, greedy, min, max);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(compiler.c_exactly(&hir, min).is_ok(), true);",
          "    assert!(min != max);",
          "    assert_eq!(compiler.add_empty().is_ok(), true);",
          "    assert!((min..max).contains(&1));",
          "    assert_eq!(compiler.add(State::Splits { targets: vec![], reverse: !greedy }).is_ok(), true);",
          "    assert_eq!(compiler.c(&hir).is_ok(), true);",
          "    assert_eq!(compiler.patch(prev_end, splits).is_ok(), true);",
          "    assert_eq!(compiler.patch(splits, compiled.start).is_ok(), true);",
          "    assert_eq!(compiler.patch(splits, empty).is_err(), true);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let compiler = Compiler::new(config, String::from(\"test\"));",
          "    let hir = Hir { kind: HirKind::Char('a'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "",
          "    let min = 1;",
          "    let max = 3;",
          "    let greedy = true;",
          "",
          "    let _ = compiler.c_bounded(&hir, greedy, min, max);",
          "    assert_eq!(compiler.c_exactly(&hir, min).is_ok(), true);",
          "    assert!(min != max);",
          "    assert_eq!(compiler.add_empty().is_ok(), true);",
          "    assert!((min..max).contains(&1));",
          "    assert_eq!(compiler.add(State::Splits { targets: vec![], reverse: !greedy }).is_ok(), true);",
          "    assert_eq!(compiler.c(&hir).is_ok(), true);",
          "    assert_eq!(compiler.patch(prev_end, splits).is_ok(), true);",
          "    assert_eq!(compiler.patch(splits, compiled.start).is_ok(), true);",
          "    assert_eq!(compiler.patch(splits, empty).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let compiler = Compiler::new(config, String::from(\"test\"));",
          "    let hir = Hir { kind: HirKind::Char('b'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "",
          "    let min = 2;",
          "    let max = 5;",
          "    let greedy = false;",
          "",
          "    let _ = compiler.c_bounded(&hir, greedy, min, max);",
          "}"
        ],
        "oracle": [
          "    assert!(compiler.c_exactly(&hir, min).is_ok());",
          "    assert!(min != max);",
          "    assert!(compiler.add_empty().is_ok());",
          "    assert!((min..max).contains(&2));",
          "    assert!(compiler.add(State::Splits { targets: vec![], reverse: !greedy }).is_ok());",
          "    assert!(compiler.c(&hir).is_ok());",
          "    assert!(compiler.patch(prev_end, splits).is_ok());",
          "    assert!(compiler.patch(splits, compiled.start).is_ok());",
          "    assert!(compiler.patch(splits, empty).is_err());"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let compiler = Compiler::new(config, String::from(\"test\"));",
          "    let hir = Hir { kind: HirKind::Char('b'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "",
          "    let min = 2;",
          "    let max = 5;",
          "    let greedy = false;",
          "",
          "    let _ = compiler.c_bounded(&hir, greedy, min, max);",
          "    assert!(compiler.c_exactly(&hir, min).is_ok());",
          "    assert!(min != max);",
          "    assert!(compiler.add_empty().is_ok());",
          "    assert!((min..max).contains(&2));",
          "    assert!(compiler.add(State::Splits { targets: vec![], reverse: !greedy }).is_ok());",
          "    assert!(compiler.c(&hir).is_ok());",
          "    assert!(compiler.patch(prev_end, splits).is_ok());",
          "    assert!(compiler.patch(splits, compiled.start).is_ok());",
          "    assert!(compiler.patch(splits, empty).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let compiler = Compiler::new(config, String::from(\"test\"));",
          "    let hir = Hir { kind: HirKind::Char('c'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "",
          "    let min = 5;",
          "    let max = 6;",
          "    let greedy = true;",
          "",
          "    let _ = compiler.c_bounded(&hir, greedy, min, max);",
          "}"
        ],
        "oracle": [
          "    let result = compiler.c_exactly(&hir, min);",
          "    assert!(result.is_ok());",
          "    ",
          "    let is_min_equals_max = min == max;",
          "    assert!(!is_min_equals_max);",
          "    ",
          "    let empty_result = compiler.add_empty();",
          "    assert!(empty_result.is_ok());",
          "    ",
          "    for i in min..max {",
          "    let splits_result = compiler.add(State::Splits { targets: vec![], reverse: !greedy });",
          "    assert!(splits_result.is_ok());",
          "    ",
          "    let compiled_result = compiler.c(&hir);",
          "    assert!(compiled_result.is_ok());",
          "    ",
          "    let patch_result1 = compiler.patch(prev_end, splits);",
          "    assert!(patch_result1.is_ok());",
          "    ",
          "    let patch_result2 = compiler.patch(splits, compiled.start);",
          "    assert!(patch_result2.is_ok());",
          "    ",
          "    let patch_result3 = compiler.patch(splits, empty);",
          "    assert!(patch_result3.is_err());",
          "    }"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let compiler = Compiler::new(config, String::from(\"test\"));",
          "    let hir = Hir { kind: HirKind::Char('c'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "",
          "    let min = 5;",
          "    let max = 6;",
          "    let greedy = true;",
          "",
          "    let _ = compiler.c_bounded(&hir, greedy, min, max);",
          "    let result = compiler.c_exactly(&hir, min);",
          "    assert!(result.is_ok());",
          "    ",
          "    let is_min_equals_max = min == max;",
          "    assert!(!is_min_equals_max);",
          "    ",
          "    let empty_result = compiler.add_empty();",
          "    assert!(empty_result.is_ok());",
          "    ",
          "    for i in min..max {",
          "    let splits_result = compiler.add(State::Splits { targets: vec![], reverse: !greedy });",
          "    assert!(splits_result.is_ok());",
          "    ",
          "    let compiled_result = compiler.c(&hir);",
          "    assert!(compiled_result.is_ok());",
          "    ",
          "    let patch_result1 = compiler.patch(prev_end, splits);",
          "    assert!(patch_result1.is_ok());",
          "    ",
          "    let patch_result2 = compiler.patch(splits, compiled.start);",
          "    assert!(patch_result2.is_ok());",
          "    ",
          "    let patch_result3 = compiler.patch(splits, empty);",
          "    assert!(patch_result3.is_err());",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]