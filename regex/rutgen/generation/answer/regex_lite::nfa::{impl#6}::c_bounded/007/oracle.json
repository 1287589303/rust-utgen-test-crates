[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let mut compiler = Compiler::new(config, String::from(\"a{2,5}\"));",
          "    let hir = Hir { kind: HirKind::Repetition(Box::new(hir::Repetition { min: 2, max: 5, greedy: true })), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let greedy = true;",
          "    let min = 2;",
          "    let max = 5;",
          "    ",
          "    let result = compiler.c_bounded(&hir, greedy, min, max);",
          "}"
        ],
        "oracle": [
          "    assert!(compiler.c_exactly(&hir, min).is_ok());",
          "    assert!(min != max);",
          "    assert!(compiler.add_empty().is_ok());",
          "    assert!(min < max); // For the range condition: _ in min..max",
          "    assert!(compiler.add(State::Splits { targets: vec![], reverse: !greedy }).is_ok());",
          "    assert!(compiler.c(&hir).is_ok());",
          "    assert!(compiler.patch(prev_end, splits).is_ok());",
          "    assert!(compiler.patch(splits, compiled.start).is_err());"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let mut compiler = Compiler::new(config, String::from(\"a{2,5}\"));",
          "    let hir = Hir { kind: HirKind::Repetition(Box::new(hir::Repetition { min: 2, max: 5, greedy: true })), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let greedy = true;",
          "    let min = 2;",
          "    let max = 5;",
          "    ",
          "    let result = compiler.c_bounded(&hir, greedy, min, max);",
          "    assert!(compiler.c_exactly(&hir, min).is_ok());",
          "    assert!(min != max);",
          "    assert!(compiler.add_empty().is_ok());",
          "    assert!(min < max); // For the range condition: _ in min..max",
          "    assert!(compiler.add(State::Splits { targets: vec![], reverse: !greedy }).is_ok());",
          "    assert!(compiler.c(&hir).is_ok());",
          "    assert!(compiler.patch(prev_end, splits).is_ok());",
          "    assert!(compiler.patch(splits, compiled.start).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let mut compiler = Compiler::new(config, String::from(\"b{0,1}\"));",
          "    let hir = Hir { kind: HirKind::Repetition(Box::new(hir::Repetition { min: 0, max: 1, greedy: false })), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let greedy = false;",
          "    let min = 0;",
          "    let max = 1;",
          "",
          "    let result = compiler.c_bounded(&hir, greedy, min, max);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(compiler.c_exactly(&hir, min), Ok(_)));",
          "    assert!(min != max);",
          "    assert!(matches!(compiler.add_empty(), Ok(_)));",
          "    assert!(min < max);",
          "    assert!(matches!(compiler.add(State::Splits { targets: vec![], reverse: greedy }), Ok(_)));",
          "    assert!(matches!(compiler.c(&hir), Ok(_)));",
          "    assert!(matches!(compiler.patch(prev_end, splits), Ok(_)));",
          "    assert!(matches!(compiler.patch(splits, compiled.start), Err(_)));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let mut compiler = Compiler::new(config, String::from(\"b{0,1}\"));",
          "    let hir = Hir { kind: HirKind::Repetition(Box::new(hir::Repetition { min: 0, max: 1, greedy: false })), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let greedy = false;",
          "    let min = 0;",
          "    let max = 1;",
          "",
          "    let result = compiler.c_bounded(&hir, greedy, min, max);",
          "    assert!(matches!(compiler.c_exactly(&hir, min), Ok(_)));",
          "    assert!(min != max);",
          "    assert!(matches!(compiler.add_empty(), Ok(_)));",
          "    assert!(min < max);",
          "    assert!(matches!(compiler.add(State::Splits { targets: vec![], reverse: greedy }), Ok(_)));",
          "    assert!(matches!(compiler.c(&hir), Ok(_)));",
          "    assert!(matches!(compiler.patch(prev_end, splits), Ok(_)));",
          "    assert!(matches!(compiler.patch(splits, compiled.start), Err(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let mut compiler = Compiler::new(config, String::from(\"c{3,3}\"));",
          "    let hir = Hir { kind: HirKind::Repetition(Box::new(hir::Repetition { min: 3, max: 3, greedy: true })), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let greedy = true;",
          "    let min = 3;",
          "    let max = 3;",
          "",
          "    let result = compiler.c_bounded(&hir, greedy, min, max);",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let mut compiler = Compiler::new(config, String::from(\"c{3,5}\"));",
          "    let hir = Hir { kind: HirKind::Repetition(Box::new(hir::Repetition { min: 3, max: 5, greedy: true })), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let greedy = true;",
          "    let min = 3;",
          "    let max = 5;",
          "    let result = compiler.c_bounded(&hir, greedy, min, max);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert!(thompson_ref.start > 0);",
          "    assert!(thompson_ref.end > thompson_ref.start);",
          "    assert!(min < max);",
          "    ",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let mut compiler = Compiler::new(config, String::from(\"c{2,3}\"));",
          "    let hir = Hir { kind: HirKind::Repetition(Box::new(hir::Repetition { min: 2, max: 3, greedy: false })), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let greedy = false;",
          "    let min = 2;",
          "    let max = 3;",
          "    let result = compiler.c_bounded(&hir, greedy, min, max);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert!(thompson_ref.start > 0);",
          "    assert!(thompson_ref.end > thompson_ref.start);",
          "    assert!(min < max);",
          "    ",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let mut compiler = Compiler::new(config, String::from(\"c{1,3}\"));",
          "    let hir = Hir { kind: HirKind::Repetition(Box::new(hir::Repetition { min: 1, max: 3, greedy: true })), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let greedy = true;",
          "    let min = 1;",
          "    let max = 3;",
          "    let result = compiler.c_bounded(&hir, greedy, min, max);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert!(thompson_ref.start > 0);",
          "    assert!(thompson_ref.end > thompson_ref.start);",
          "    assert!(min < max);",
          "    ",
          "    self.add_empty()?;",
          "    self.add(State::Splits { targets: vec![], reverse: !greedy })?;",
          "    self.patch(prev_end, splits)?;",
          "    self.c(hir)?;",
          "    self.patch(splits, compiled.start)?;"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let mut compiler = Compiler::new(config, String::from(\"c{3,3}\"));",
          "    let hir = Hir { kind: HirKind::Repetition(Box::new(hir::Repetition { min: 3, max: 3, greedy: true })), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let greedy = true;",
          "    let min = 3;",
          "    let max = 3;",
          "",
          "    let result = compiler.c_bounded(&hir, greedy, min, max);",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let mut compiler = Compiler::new(config, String::from(\"c{3,5}\"));",
          "    let hir = Hir { kind: HirKind::Repetition(Box::new(hir::Repetition { min: 3, max: 5, greedy: true })), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let greedy = true;",
          "    let min = 3;",
          "    let max = 5;",
          "    let result = compiler.c_bounded(&hir, greedy, min, max);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert!(thompson_ref.start > 0);",
          "    assert!(thompson_ref.end > thompson_ref.start);",
          "    assert!(min < max);",
          "    ",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let mut compiler = Compiler::new(config, String::from(\"c{2,3}\"));",
          "    let hir = Hir { kind: HirKind::Repetition(Box::new(hir::Repetition { min: 2, max: 3, greedy: false })), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let greedy = false;",
          "    let min = 2;",
          "    let max = 3;",
          "    let result = compiler.c_bounded(&hir, greedy, min, max);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert!(thompson_ref.start > 0);",
          "    assert!(thompson_ref.end > thompson_ref.start);",
          "    assert!(min < max);",
          "    ",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let mut compiler = Compiler::new(config, String::from(\"c{1,3}\"));",
          "    let hir = Hir { kind: HirKind::Repetition(Box::new(hir::Repetition { min: 1, max: 3, greedy: true })), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let greedy = true;",
          "    let min = 1;",
          "    let max = 3;",
          "    let result = compiler.c_bounded(&hir, greedy, min, max);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert!(thompson_ref.start > 0);",
          "    assert!(thompson_ref.end > thompson_ref.start);",
          "    assert!(min < max);",
          "    ",
          "    self.add_empty()?;",
          "    self.add(State::Splits { targets: vec![], reverse: !greedy })?;",
          "    self.patch(prev_end, splits)?;",
          "    self.c(hir)?;",
          "    self.patch(splits, compiled.start)?;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]