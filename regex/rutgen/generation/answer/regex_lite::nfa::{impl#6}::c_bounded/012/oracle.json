[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let compiler = Compiler::new(config, String::from(\"a{1,2}\"));",
          "    let hir = Hir {",
          "        kind: HirKind::Capture(Capture {",
          "            index: 0,",
          "            name: None,",
          "            sub: Hir::new_class(vec![('a', 'a')]),",
          "        }),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let greedy = true;",
          "    let min = 1;",
          "    let max = 2;",
          "",
          "    let _ = compiler.c_bounded(&hir, greedy, min, max);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(compiler.c_exactly(&hir, min).is_ok(), true);",
          "    assert_ne!(min, max);",
          "    assert_eq!(compiler.add_empty().is_ok(), true);",
          "    assert!(min < max);",
          "    assert_eq!(compiler.patch(prev_end, empty).is_ok(), true);",
          "    let result = compiler.c_bounded(&hir, greedy, min, max);",
          "    assert!(result.is_ok());",
          "    match result {",
          "    Ok(thompson_ref) => {",
          "    assert_eq!(thompson_ref.start, prefix.start);",
          "    assert_eq!(thompson_ref.end, empty);",
          "    },",
          "    _ => unreachable!(),",
          "    }"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let compiler = Compiler::new(config, String::from(\"a{1,2}\"));",
          "    let hir = Hir {",
          "        kind: HirKind::Capture(Capture {",
          "            index: 0,",
          "            name: None,",
          "            sub: Hir::new_class(vec![('a', 'a')]),",
          "        }),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let greedy = true;",
          "    let min = 1;",
          "    let max = 2;",
          "",
          "    let _ = compiler.c_bounded(&hir, greedy, min, max);",
          "    assert_eq!(compiler.c_exactly(&hir, min).is_ok(), true);",
          "    assert_ne!(min, max);",
          "    assert_eq!(compiler.add_empty().is_ok(), true);",
          "    assert!(min < max);",
          "    assert_eq!(compiler.patch(prev_end, empty).is_ok(), true);",
          "    let result = compiler.c_bounded(&hir, greedy, min, max);",
          "    assert!(result.is_ok());",
          "    match result {",
          "    Ok(thompson_ref) => {",
          "    assert_eq!(thompson_ref.start, prefix.start);",
          "    assert_eq!(thompson_ref.end, empty);",
          "    },",
          "    _ => unreachable!(),",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let compiler = Compiler::new(config, String::from(\"a{1,2}\"));",
          "    let hir = Hir {",
          "        kind: HirKind::Capture(Capture {",
          "            index: 0,",
          "            name: None,",
          "            sub: Hir::new_class(vec![('a', 'a')]),",
          "        }),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let greedy = false;",
          "    let min = 1;",
          "    let max = 2;",
          "",
          "    let _ = compiler.c_bounded(&hir, greedy, min, max);",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let compiler = Compiler::new(config, String::from(\"a{1,2}\"));",
          "    let hir = Hir { kind: HirKind::Capture(Capture { index: 0, name: None, sub: Hir::new_class(vec![('a', 'a')]) }), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let greedy = false;",
          "    let min = 1;",
          "    let max = 2;",
          "    let result = compiler.c_bounded(&hir, greedy, min, max);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, /* expected prefix.start value */);",
          "    assert_eq!(thompson_ref.end, /* expected empty value */);"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let compiler = Compiler::new(config, String::from(\"a{1,2}\"));",
          "    let hir = Hir {",
          "        kind: HirKind::Capture(Capture {",
          "            index: 0,",
          "            name: None,",
          "            sub: Hir::new_class(vec![('a', 'a')]),",
          "        }),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let greedy = false;",
          "    let min = 1;",
          "    let max = 2;",
          "",
          "    let _ = compiler.c_bounded(&hir, greedy, min, max);",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let compiler = Compiler::new(config, String::from(\"a{1,2}\"));",
          "    let hir = Hir { kind: HirKind::Capture(Capture { index: 0, name: None, sub: Hir::new_class(vec![('a', 'a')]) }), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let greedy = false;",
          "    let min = 1;",
          "    let max = 2;",
          "    let result = compiler.c_bounded(&hir, greedy, min, max);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, /* expected prefix.start value */);",
          "    assert_eq!(thompson_ref.end, /* expected empty value */);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let compiler = Compiler::new(config, String::from(\"a{2,3}\"));",
          "    let hir = Hir {",
          "        kind: HirKind::Capture(Capture {",
          "            index: 0,",
          "            name: None,",
          "            sub: Hir::new_class(vec![('a', 'a')]),",
          "        }),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let greedy = true;",
          "    let min = 2;",
          "    let max = 3;",
          "",
          "    let _ = compiler.c_bounded(&hir, greedy, min, max);",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let compiler = Compiler::new(config, String::from(\"a{2,3}\"));",
          "    let hir = Hir { kind: HirKind::Capture(Capture { index: 0, name: None, sub: Hir::new_class(vec![('a', 'a')]) }), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let greedy = true;",
          "    let min = 2;",
          "    let max = 3;",
          "    let result = compiler.c_bounded(&hir, greedy, min, max);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, compiler.c_exactly(&hir, min).unwrap().start);",
          "    assert_eq!(thompson_ref.end, compiler.add_empty().unwrap());",
          "    assert!(min < max);",
          "    let patch_result = compiler.patch(thompson_ref.end, thompson_ref.end);",
          "    assert!(patch_result.is_ok());"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let compiler = Compiler::new(config, String::from(\"a{2,3}\"));",
          "    let hir = Hir {",
          "        kind: HirKind::Capture(Capture {",
          "            index: 0,",
          "            name: None,",
          "            sub: Hir::new_class(vec![('a', 'a')]),",
          "        }),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let greedy = true;",
          "    let min = 2;",
          "    let max = 3;",
          "",
          "    let _ = compiler.c_bounded(&hir, greedy, min, max);",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let compiler = Compiler::new(config, String::from(\"a{2,3}\"));",
          "    let hir = Hir { kind: HirKind::Capture(Capture { index: 0, name: None, sub: Hir::new_class(vec![('a', 'a')]) }), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let greedy = true;",
          "    let min = 2;",
          "    let max = 3;",
          "    let result = compiler.c_bounded(&hir, greedy, min, max);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, compiler.c_exactly(&hir, min).unwrap().start);",
          "    assert_eq!(thompson_ref.end, compiler.add_empty().unwrap());",
          "    assert!(min < max);",
          "    let patch_result = compiler.patch(thompson_ref.end, thompson_ref.end);",
          "    assert!(patch_result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let compiler = Compiler::new(config, String::from(\"a{3,5}\"));",
          "    let hir = Hir {",
          "        kind: HirKind::Capture(Capture {",
          "            index: 0,",
          "            name: None,",
          "            sub: Hir::new_class(vec![('a', 'a')]),",
          "        }),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let greedy = false;",
          "    let min = 3;",
          "    let max = 5;",
          "",
          "    let _ = compiler.c_bounded(&hir, greedy, min, max);",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let compiler = Compiler::new(config, String::from(\"a{3,5}\"));",
          "    let hir = Hir { kind: HirKind::Capture(Capture { index: 0, name: None, sub: Hir::new_class(vec![('a', 'a')]) }), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let greedy = false;",
          "    let min = 3;",
          "    let max = 5;",
          "    let result = compiler.c_bounded(&hir, greedy, min, max);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, compiler.c_exactly(&hir, min).unwrap().start);",
          "    assert_eq!(thompson_ref.end, compiler.add_empty().unwrap());"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let compiler = Compiler::new(config, String::from(\"a{3,5}\"));",
          "    let hir = Hir {",
          "        kind: HirKind::Capture(Capture {",
          "            index: 0,",
          "            name: None,",
          "            sub: Hir::new_class(vec![('a', 'a')]),",
          "        }),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let greedy = false;",
          "    let min = 3;",
          "    let max = 5;",
          "",
          "    let _ = compiler.c_bounded(&hir, greedy, min, max);",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let compiler = Compiler::new(config, String::from(\"a{3,5}\"));",
          "    let hir = Hir { kind: HirKind::Capture(Capture { index: 0, name: None, sub: Hir::new_class(vec![('a', 'a')]) }), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let greedy = false;",
          "    let min = 3;",
          "    let max = 5;",
          "    let result = compiler.c_bounded(&hir, greedy, min, max);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, compiler.c_exactly(&hir, min).unwrap().start);",
          "    assert_eq!(thompson_ref.end, compiler.add_empty().unwrap());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]