[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start_table = StartTable {",
          "        table: vec![0u8; 0],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap::new(&LookMatcher::default()),",
          "        stride: 0,",
          "        pattern_len: Some(0),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    ",
          "    let mut dst = vec![0u8; 0];",
          "    let result = start_table.write_to::<Endian>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"sparse starting table ids\")));"
        ],
        "code": [
          "{",
          "    let start_table = StartTable {",
          "        table: vec![0u8; 0],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap::new(&LookMatcher::default()),",
          "        stride: 0,",
          "        pattern_len: Some(0),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    ",
          "    let mut dst = vec![0u8; 0];",
          "    let result = start_table.write_to::<Endian>(&mut dst);",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"sparse starting table ids\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start_table = StartTable {",
          "        table: vec![0u8; 1],",
          "        kind: StartKind::Unanchored,",
          "        start_map: StartByteMap::new(&LookMatcher::default()),",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: Some(StateID(0)),",
          "        universal_start_anchored: None,",
          "    };",
          "    ",
          "    let mut dst = vec![0u8; 1];",
          "    let result = start_table.write_to::<Endian>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"sparse starting table ids\")));"
        ],
        "code": [
          "{",
          "    let start_table = StartTable {",
          "        table: vec![0u8; 1],",
          "        kind: StartKind::Unanchored,",
          "        start_map: StartByteMap::new(&LookMatcher::default()),",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: Some(StateID(0)),",
          "        universal_start_anchored: None,",
          "    };",
          "    ",
          "    let mut dst = vec![0u8; 1];",
          "    let result = start_table.write_to::<Endian>(&mut dst);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"sparse starting table ids\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start_table = StartTable {",
          "        table: vec![0u8; 8],",
          "        kind: StartKind::Anchored,",
          "        start_map: StartByteMap::new(&LookMatcher::default()),",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: Some(StateID(0)),",
          "        universal_start_anchored: Some(StateID(1)),",
          "    };",
          "    ",
          "    let mut dst = vec![0u8; 7];",
          "    let result = start_table.write_to::<Endian>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"sparse starting table ids\")));"
        ],
        "code": [
          "{",
          "    let start_table = StartTable {",
          "        table: vec![0u8; 8],",
          "        kind: StartKind::Anchored,",
          "        start_map: StartByteMap::new(&LookMatcher::default()),",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: Some(StateID(0)),",
          "        universal_start_anchored: Some(StateID(1)),",
          "    };",
          "    ",
          "    let mut dst = vec![0u8; 7];",
          "    let result = start_table.write_to::<Endian>(&mut dst);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"sparse starting table ids\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start_table = StartTable {",
          "        table: vec![0u8; 15],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap::new(&LookMatcher::default()),",
          "        stride: 8,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: Some(StateID(0)),",
          "        universal_start_anchored: Some(StateID(1)),",
          "    };",
          "    ",
          "    let mut dst = vec![0u8; 14];",
          "    let result = start_table.write_to::<Endian>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    let start_table = StartTable { table: vec![0u8; 15], kind: StartKind::Both, start_map: StartByteMap::new(&LookMatcher::default()), stride: 8, pattern_len: Some(1), universal_start_unanchored: Some(StateID(0)), universal_start_anchored: Some(StateID(1)), };",
          "    let mut dst = vec![0u8; 14];",
          "    let result = start_table.write_to::<Endian>(&mut dst);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"sparse starting table ids\")));"
        ],
        "code": [
          "{",
          "    let start_table = StartTable {",
          "        table: vec![0u8; 15],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap::new(&LookMatcher::default()),",
          "        stride: 8,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: Some(StateID(0)),",
          "        universal_start_anchored: Some(StateID(1)),",
          "    };",
          "    ",
          "    let mut dst = vec![0u8; 14];",
          "    let result = start_table.write_to::<Endian>(&mut dst);",
          "    let start_table = StartTable { table: vec![0u8; 15], kind: StartKind::Both, start_map: StartByteMap::new(&LookMatcher::default()), stride: 8, pattern_len: Some(1), universal_start_unanchored: Some(StateID(0)), universal_start_anchored: Some(StateID(1)), };",
          "    let mut dst = vec![0u8; 14];",
          "    let result = start_table.write_to::<Endian>(&mut dst);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"sparse starting table ids\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]