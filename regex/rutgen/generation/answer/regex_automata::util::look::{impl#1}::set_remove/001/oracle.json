[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut lookset = LookSet { bits: Look::Start as u32 | Look::End as u32 };",
          "    let look = Look::Start;",
          "    lookset.set_remove(look);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lookset.bits, Look::End as u32);",
          "    let look = Look::End;",
          "    lookset.set_remove(look);",
          "    assert_eq!(lookset.bits, 0);",
          "    lookset.set_remove(Look::Start);",
          "    assert_eq!(lookset.bits, 0);",
          "    let lookset_empty = LookSet::empty();",
          "    lookset_empty.set_remove(Look::Start);",
          "    assert_eq!(lookset_empty.bits, 0);",
          "    let mut lookset_full = LookSet::full();",
          "    lookset_full.set_remove(Look::WordAscii);",
          "    assert!(lookset_full.bits < LookSet::full().bits);"
        ],
        "code": [
          "{",
          "    let mut lookset = LookSet { bits: Look::Start as u32 | Look::End as u32 };",
          "    let look = Look::Start;",
          "    lookset.set_remove(look);",
          "    assert_eq!(lookset.bits, Look::End as u32);",
          "    let look = Look::End;",
          "    lookset.set_remove(look);",
          "    assert_eq!(lookset.bits, 0);",
          "    lookset.set_remove(Look::Start);",
          "    assert_eq!(lookset.bits, 0);",
          "    let lookset_empty = LookSet::empty();",
          "    lookset_empty.set_remove(Look::Start);",
          "    assert_eq!(lookset_empty.bits, 0);",
          "    let mut lookset_full = LookSet::full();",
          "    lookset_full.set_remove(Look::WordAscii);",
          "    assert!(lookset_full.bits < LookSet::full().bits);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut lookset = LookSet { bits: Look::Start as u32 | Look::End as u32 | Look::WordAscii as u32 };",
          "    let look = Look::End;",
          "    lookset.set_remove(look);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lookset.bits, Look::Start as u32 | Look::WordAscii as u32);",
          "    assert!(lookset.contains(Look::Start));",
          "    assert!(!lookset.contains(Look::End));",
          "    assert!(lookset.contains(Look::WordAscii));"
        ],
        "code": [
          "{",
          "    let mut lookset = LookSet { bits: Look::Start as u32 | Look::End as u32 | Look::WordAscii as u32 };",
          "    let look = Look::End;",
          "    lookset.set_remove(look);",
          "    assert_eq!(lookset.bits, Look::Start as u32 | Look::WordAscii as u32);",
          "    assert!(lookset.contains(Look::Start));",
          "    assert!(!lookset.contains(Look::End));",
          "    assert!(lookset.contains(Look::WordAscii));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut lookset = LookSet { bits: Look::Start as u32 };",
          "    let look = Look::End;",
          "    lookset.set_remove(look);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lookset.bits, Look::Start as u32);"
        ],
        "code": [
          "{",
          "    let mut lookset = LookSet { bits: Look::Start as u32 };",
          "    let look = Look::End;",
          "    lookset.set_remove(look);",
          "    assert_eq!(lookset.bits, Look::Start as u32);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut lookset = LookSet { bits: Look::Start as u32 | Look::End as u32 | Look::WordAscii as u32 | Look::WordUnicode as u32 };",
          "    let look = Look::Start;",
          "    lookset.set_remove(look);",
          "    lookset.set_remove(Look::WordAscii);",
          "    lookset.set_remove(Look::WordUnicode);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lookset.bits, (Look::End as u32));",
          "    assert!(lookset.contains(Look::Start) == false);",
          "    assert!(lookset.contains(Look::WordAscii) == false);",
          "    assert!(lookset.contains(Look::WordUnicode) == false);",
          "    assert!(lookset.contains(Look::End) == true);"
        ],
        "code": [
          "{",
          "    let mut lookset = LookSet { bits: Look::Start as u32 | Look::End as u32 | Look::WordAscii as u32 | Look::WordUnicode as u32 };",
          "    let look = Look::Start;",
          "    lookset.set_remove(look);",
          "    lookset.set_remove(Look::WordAscii);",
          "    lookset.set_remove(Look::WordUnicode);",
          "    assert_eq!(lookset.bits, (Look::End as u32));",
          "    assert!(lookset.contains(Look::Start) == false);",
          "    assert!(lookset.contains(Look::WordAscii) == false);",
          "    assert!(lookset.contains(Look::WordUnicode) == false);",
          "    assert!(lookset.contains(Look::End) == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut lookset = LookSet { bits: u32::MAX };",
          "    let look = Look::WordEndHalfUnicode;",
          "    lookset.set_remove(look);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lookset.bits, u32::MAX & !Look::WordEndHalfUnicode as u32);",
          "    assert!(lookset.contains(look) == false);",
          "    assert!(lookset.len() < 32);",
          "    assert!(lookset.is_empty() == false);",
          "    assert!(lookset.contains_word() == false);"
        ],
        "code": [
          "{",
          "    let mut lookset = LookSet { bits: u32::MAX };",
          "    let look = Look::WordEndHalfUnicode;",
          "    lookset.set_remove(look);",
          "    assert_eq!(lookset.bits, u32::MAX & !Look::WordEndHalfUnicode as u32);",
          "    assert!(lookset.contains(look) == false);",
          "    assert!(lookset.len() < 32);",
          "    assert!(lookset.is_empty() == false);",
          "    assert!(lookset.contains_word() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut lookset = LookSet { bits: 0 };",
          "    let look = Look::Start;",
          "    lookset.set_remove(look);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lookset.bits, 0);",
          "    assert!(lookset.is_empty());",
          "    assert!(!lookset.contains(Look::Start));",
          "    assert!(!lookset.contains_anchor());",
          "    assert!(!lookset.contains_word());",
          "    assert!(!lookset.contains_word_unicode());",
          "    assert!(!lookset.contains_word_ascii());"
        ],
        "code": [
          "{",
          "    let mut lookset = LookSet { bits: 0 };",
          "    let look = Look::Start;",
          "    lookset.set_remove(look);",
          "    assert_eq!(lookset.bits, 0);",
          "    assert!(lookset.is_empty());",
          "    assert!(!lookset.contains(Look::Start));",
          "    assert!(!lookset.contains_anchor());",
          "    assert!(!lookset.contains_word());",
          "    assert!(!lookset.contains_word_unicode());",
          "    assert!(!lookset.contains_word_ascii());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]