[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"foo[0-9]+\";",
          "    let re = PikeVM::new(pattern).unwrap();",
          "    let mut cache = re.create_cache();",
          "    let text = b\"foo1 foo12 foo123\";",
          "    ",
          "    let _matches = re.find_iter(&mut cache, &text);",
          "}"
        ],
        "oracle": [
          "    let pattern = \"foo[0-9]+\";",
          "    let re = PikeVM::new(pattern).unwrap();",
          "    let mut cache = re.create_cache();",
          "    let text = b\"foo1 foo12 foo123\";",
          "    let _matches = re.find_iter(&mut cache, &text);",
          "    assert_eq!(_matches.re, &re);",
          "    assert_eq!(_matches.cache, &mut cache);",
          "    assert!(_matches.caps.is_match());",
          "    assert_eq!(_matches.it.haystack, &text);"
        ],
        "code": [
          "{",
          "    let pattern = \"foo[0-9]+\";",
          "    let re = PikeVM::new(pattern).unwrap();",
          "    let mut cache = re.create_cache();",
          "    let text = b\"foo1 foo12 foo123\";",
          "    ",
          "    let _matches = re.find_iter(&mut cache, &text);",
          "    let pattern = \"foo[0-9]+\";",
          "    let re = PikeVM::new(pattern).unwrap();",
          "    let mut cache = re.create_cache();",
          "    let text = b\"foo1 foo12 foo123\";",
          "    let _matches = re.find_iter(&mut cache, &text);",
          "    assert_eq!(_matches.re, &re);",
          "    assert_eq!(_matches.cache, &mut cache);",
          "    assert!(_matches.caps.is_match());",
          "    assert_eq!(_matches.it.haystack, &text);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"foo[0-9]+\";",
          "    let re = PikeVM::new(pattern).unwrap();",
          "    let mut cache = re.create_cache();",
          "    let text = b\"\";",
          "    ",
          "    let _matches = re.find_iter(&mut cache, &text);",
          "}"
        ],
        "oracle": [
          "    let pattern = \"foo[0-9]+\";",
          "    let re = PikeVM::new(pattern).unwrap();",
          "    let mut cache = re.create_cache();",
          "    let text = b\"\";",
          "    let matches = re.find_iter(&mut cache, &text);",
          "    assert!(matches.is_empty());"
        ],
        "code": [
          "{",
          "    let pattern = \"foo[0-9]+\";",
          "    let re = PikeVM::new(pattern).unwrap();",
          "    let mut cache = re.create_cache();",
          "    let text = b\"\";",
          "    ",
          "    let _matches = re.find_iter(&mut cache, &text);",
          "    let pattern = \"foo[0-9]+\";",
          "    let re = PikeVM::new(pattern).unwrap();",
          "    let mut cache = re.create_cache();",
          "    let text = b\"\";",
          "    let matches = re.find_iter(&mut cache, &text);",
          "    assert!(matches.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"bar[0-9]+\";",
          "    let re = PikeVM::new(pattern).unwrap();",
          "    let mut cache = re.create_cache();",
          "    let text = b\"foo1 foo12 foo123\";",
          "    ",
          "    let _matches = re.find_iter(&mut cache, &text);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_matches.re, &re);",
          "    assert_eq!(_matches.cache, &mut cache);",
          "    assert_eq!(_matches.caps.group_info, re.get_nfa().group_info());",
          "    assert!(_matches.it.input.haystack == &text);",
          "    assert!(_matches.caps.slots.is_empty());"
        ],
        "code": [
          "{",
          "    let pattern = \"bar[0-9]+\";",
          "    let re = PikeVM::new(pattern).unwrap();",
          "    let mut cache = re.create_cache();",
          "    let text = b\"foo1 foo12 foo123\";",
          "    ",
          "    let _matches = re.find_iter(&mut cache, &text);",
          "    assert_eq!(_matches.re, &re);",
          "    assert_eq!(_matches.cache, &mut cache);",
          "    assert_eq!(_matches.caps.group_info, re.get_nfa().group_info());",
          "    assert!(_matches.it.input.haystack == &text);",
          "    assert!(_matches.caps.slots.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = r\"foo[\\W]+\";",
          "    let re = PikeVM::new(pattern).unwrap();",
          "    let mut cache = re.create_cache();",
          "    let text = b\"foo! foo@ foo#\";",
          "    ",
          "    let _matches = re.find_iter(&mut cache, &text);",
          "}"
        ],
        "oracle": [
          "    let pattern = r\"foo[\\W]+\";",
          "    let re = PikeVM::new(pattern).unwrap();",
          "    let mut cache = re.create_cache();",
          "    let text = b\"foo! foo@ foo#\";",
          "    let matches = re.find_iter(&mut cache, &text);",
          "    assert!(matches.re == &re);",
          "    assert!(matches.cache == &mut cache);",
          "    assert!(matches.caps.group_info == re.get_nfa().group_info());",
          "    assert!(matches.it.input.haystack == &text);"
        ],
        "code": [
          "{",
          "    let pattern = r\"foo[\\W]+\";",
          "    let re = PikeVM::new(pattern).unwrap();",
          "    let mut cache = re.create_cache();",
          "    let text = b\"foo! foo@ foo#\";",
          "    ",
          "    let _matches = re.find_iter(&mut cache, &text);",
          "    let pattern = r\"foo[\\W]+\";",
          "    let re = PikeVM::new(pattern).unwrap();",
          "    let mut cache = re.create_cache();",
          "    let text = b\"foo! foo@ foo#\";",
          "    let matches = re.find_iter(&mut cache, &text);",
          "    assert!(matches.re == &re);",
          "    assert!(matches.cache == &mut cache);",
          "    assert!(matches.caps.group_info == re.get_nfa().group_info());",
          "    assert!(matches.it.input.haystack == &text);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"foo[0-9]\";",
          "    let re = PikeVM::new(pattern).unwrap();",
          "    let mut cache = re.create_cache();",
          "    let text = b\"foo1\";",
          "    ",
          "    let _matches = re.find_iter(&mut cache, &text);",
          "}"
        ],
        "oracle": [
          "    let pattern = \"foo[0-9]\";",
          "    let re = PikeVM::new(pattern).unwrap();",
          "    let mut cache = re.create_cache();",
          "    let text = b\"foo1\";",
          "    let matches = re.find_iter(&mut cache, &text);",
          "    assert_eq!(matches.re, &re);",
          "    assert_eq!(matches.cache, &mut cache);",
          "    assert!(matches.caps.is_match());",
          "    assert_eq!(matches.it.input.haystack, &text);"
        ],
        "code": [
          "{",
          "    let pattern = \"foo[0-9]\";",
          "    let re = PikeVM::new(pattern).unwrap();",
          "    let mut cache = re.create_cache();",
          "    let text = b\"foo1\";",
          "    ",
          "    let _matches = re.find_iter(&mut cache, &text);",
          "    let pattern = \"foo[0-9]\";",
          "    let re = PikeVM::new(pattern).unwrap();",
          "    let mut cache = re.create_cache();",
          "    let text = b\"foo1\";",
          "    let matches = re.find_iter(&mut cache, &text);",
          "    assert_eq!(matches.re, &re);",
          "    assert_eq!(matches.cache, &mut cache);",
          "    assert!(matches.caps.is_match());",
          "    assert_eq!(matches.it.input.haystack, &text);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"foo[0-9]+\";",
          "    let re = PikeVM::new(pattern).unwrap();",
          "    let mut cache = re.create_cache();",
          "    let text = b\"foo1 starts with foo123\";",
          "    ",
          "    let _matches = re.find_iter(&mut cache, &text);",
          "}"
        ],
        "oracle": [
          "    assert!(_matches.is_ok());",
          "    assert_eq!(_matches.re, &re);",
          "    assert_eq!(_matches.cache, &mut cache);",
          "    assert!(std::mem::size_of_val(&_matches.caps) > 0);",
          "    assert!(std::mem::size_of_val(&_matches.it) > 0);"
        ],
        "code": [
          "{",
          "    let pattern = \"foo[0-9]+\";",
          "    let re = PikeVM::new(pattern).unwrap();",
          "    let mut cache = re.create_cache();",
          "    let text = b\"foo1 starts with foo123\";",
          "    ",
          "    let _matches = re.find_iter(&mut cache, &text);",
          "    assert!(_matches.is_ok());",
          "    assert_eq!(_matches.re, &re);",
          "    assert_eq!(_matches.cache, &mut cache);",
          "    assert!(std::mem::size_of_val(&_matches.caps) > 0);",
          "    assert!(std::mem::size_of_val(&_matches.it) > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]