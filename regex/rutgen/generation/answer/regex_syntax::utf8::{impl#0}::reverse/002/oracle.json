[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sequence = Utf8Sequence::Three([",
          "        Utf8Range { start: 0x00, end: 0x01 },",
          "        Utf8Range { start: 0x02, end: 0x03 },",
          "        Utf8Range { start: 0x04, end: 0x04 },",
          "    ]);",
          "    sequence.reverse();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sequence.as_slice(), &[Utf8Range { start: 0x04, end: 0x04 }, Utf8Range { start: 0x02, end: 0x03 }, Utf8Range { start: 0x00, end: 0x01 }]);",
          "    assert_eq!(sequence.len(), 3);",
          "    assert!(sequence.matches(&[0x04, 0x03, 0x01]));",
          "    assert!(!sequence.matches(&[0x00, 0x01, 0x02]));"
        ],
        "code": [
          "{",
          "    let mut sequence = Utf8Sequence::Three([",
          "        Utf8Range { start: 0x00, end: 0x01 },",
          "        Utf8Range { start: 0x02, end: 0x03 },",
          "        Utf8Range { start: 0x04, end: 0x04 },",
          "    ]);",
          "    sequence.reverse();",
          "    assert_eq!(sequence.as_slice(), &[Utf8Range { start: 0x04, end: 0x04 }, Utf8Range { start: 0x02, end: 0x03 }, Utf8Range { start: 0x00, end: 0x01 }]);",
          "    assert_eq!(sequence.len(), 3);",
          "    assert!(sequence.matches(&[0x04, 0x03, 0x01]));",
          "    assert!(!sequence.matches(&[0x00, 0x01, 0x02]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sequence = Utf8Sequence::Three([",
          "        Utf8Range { start: 0xFF, end: 0xFF },",
          "        Utf8Range { start: 0x80, end: 0xBF },",
          "        Utf8Range { start: 0xC0, end: 0xDF },",
          "    ]);",
          "    sequence.reverse();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sequence.as_slice(), &[Utf8Range { start: 0xC0, end: 0xDF }, Utf8Range { start: 0x80, end: 0xBF }, Utf8Range { start: 0xFF, end: 0xFF }]);",
          "    assert_eq!(sequence.len(), 3);",
          "    assert!(sequence.matches(&[0xC0, 0xDF]));",
          "    assert!(!sequence.matches(&[0xFF, 0x80]));"
        ],
        "code": [
          "{",
          "    let mut sequence = Utf8Sequence::Three([",
          "        Utf8Range { start: 0xFF, end: 0xFF },",
          "        Utf8Range { start: 0x80, end: 0xBF },",
          "        Utf8Range { start: 0xC0, end: 0xDF },",
          "    ]);",
          "    sequence.reverse();",
          "    assert_eq!(sequence.as_slice(), &[Utf8Range { start: 0xC0, end: 0xDF }, Utf8Range { start: 0x80, end: 0xBF }, Utf8Range { start: 0xFF, end: 0xFF }]);",
          "    assert_eq!(sequence.len(), 3);",
          "    assert!(sequence.matches(&[0xC0, 0xDF]));",
          "    assert!(!sequence.matches(&[0xFF, 0x80]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sequence = Utf8Sequence::Three([",
          "        Utf8Range { start: 0x00, end: 0x7F },",
          "        Utf8Range { start: 0x80, end: 0xBF },",
          "        Utf8Range { start: 0xC0, end: 0xFF },",
          "    ]);",
          "    sequence.reverse();",
          "}"
        ],
        "oracle": [
          "    let sequence = Utf8Sequence::Three([",
          "    Utf8Range { start: 0x00, end: 0x7F },",
          "    Utf8Range { start: 0x80, end: 0xBF },",
          "    Utf8Range { start: 0xC0, end: 0xFF },",
          "    ]);",
          "    let expected = Utf8Sequence::Three([",
          "    Utf8Range { start: 0xC0, end: 0xFF },",
          "    Utf8Range { start: 0x80, end: 0xBF },",
          "    Utf8Range { start: 0x00, end: 0x7F },",
          "    ]);",
          "    assert_eq!(sequence, expected);"
        ],
        "code": [
          "{",
          "    let mut sequence = Utf8Sequence::Three([",
          "        Utf8Range { start: 0x00, end: 0x7F },",
          "        Utf8Range { start: 0x80, end: 0xBF },",
          "        Utf8Range { start: 0xC0, end: 0xFF },",
          "    ]);",
          "    sequence.reverse();",
          "    let sequence = Utf8Sequence::Three([",
          "    Utf8Range { start: 0x00, end: 0x7F },",
          "    Utf8Range { start: 0x80, end: 0xBF },",
          "    Utf8Range { start: 0xC0, end: 0xFF },",
          "    ]);",
          "    let expected = Utf8Sequence::Three([",
          "    Utf8Range { start: 0xC0, end: 0xFF },",
          "    Utf8Range { start: 0x80, end: 0xBF },",
          "    Utf8Range { start: 0x00, end: 0x7F },",
          "    ]);",
          "    assert_eq!(sequence, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]