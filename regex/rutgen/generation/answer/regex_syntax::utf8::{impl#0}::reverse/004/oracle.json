[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq = Utf8Sequence::One(Utf8Range { start: 0x00, end: 0x7F });",
          "    seq.reverse();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq, Utf8Sequence::One(Utf8Range { start: 0x00, end: 0x7F }));"
        ],
        "code": [
          "{",
          "    let mut seq = Utf8Sequence::One(Utf8Range { start: 0x00, end: 0x7F });",
          "    seq.reverse();",
          "    assert_eq!(seq, Utf8Sequence::One(Utf8Range { start: 0x00, end: 0x7F }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq = Utf8Sequence::One(Utf8Range { start: 0x00, end: 0x00 });",
          "    seq.reverse();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq.len(), 1);",
          "    assert_eq!(seq.as_slice()[0].start, 0x00);",
          "    assert_eq!(seq.as_slice()[0].end, 0x00);"
        ],
        "code": [
          "{",
          "    let mut seq = Utf8Sequence::One(Utf8Range { start: 0x00, end: 0x00 });",
          "    seq.reverse();",
          "    assert_eq!(seq.len(), 1);",
          "    assert_eq!(seq.as_slice()[0].start, 0x00);",
          "    assert_eq!(seq.as_slice()[0].end, 0x00);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq = Utf8Sequence::One(Utf8Range { start: 0x7F, end: 0x7F });",
          "    seq.reverse();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq.as_slice().len(), 1);",
          "    assert_eq!(seq.as_slice()[0].start, 0x7F);",
          "    assert_eq!(seq.as_slice()[0].end, 0x7F);",
          "    assert_eq!(seq.len(), 1);"
        ],
        "code": [
          "{",
          "    let mut seq = Utf8Sequence::One(Utf8Range { start: 0x7F, end: 0x7F });",
          "    seq.reverse();",
          "    assert_eq!(seq.as_slice().len(), 1);",
          "    assert_eq!(seq.as_slice()[0].start, 0x7F);",
          "    assert_eq!(seq.as_slice()[0].end, 0x7F);",
          "    assert_eq!(seq.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]