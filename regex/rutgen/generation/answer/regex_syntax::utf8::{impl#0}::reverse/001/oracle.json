[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sequence = Utf8Sequence::Four([",
          "        Utf8Range { start: 0, end: 0 },",
          "        Utf8Range { start: 1, end: 1 },",
          "        Utf8Range { start: 2, end: 2 },",
          "        Utf8Range { start: 3, end: 3 },",
          "    ]);",
          "    sequence.reverse();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sequence.as_slice(), &[Utf8Range { start: 3, end: 3 }, Utf8Range { start: 2, end: 2 }, Utf8Range { start: 1, end: 1 }, Utf8Range { start: 0, end: 0 }]);",
          "    assert_eq!(sequence.len(), 4);",
          "    assert!(sequence.matches(&[3]));",
          "    assert!(sequence.matches(&[2]));",
          "    assert!(sequence.matches(&[1]));",
          "    assert!(sequence.matches(&[0]));",
          "    assert!(!sequence.matches(&[4]));"
        ],
        "code": [
          "{",
          "    let mut sequence = Utf8Sequence::Four([",
          "        Utf8Range { start: 0, end: 0 },",
          "        Utf8Range { start: 1, end: 1 },",
          "        Utf8Range { start: 2, end: 2 },",
          "        Utf8Range { start: 3, end: 3 },",
          "    ]);",
          "    sequence.reverse();",
          "    assert_eq!(sequence.as_slice(), &[Utf8Range { start: 3, end: 3 }, Utf8Range { start: 2, end: 2 }, Utf8Range { start: 1, end: 1 }, Utf8Range { start: 0, end: 0 }]);",
          "    assert_eq!(sequence.len(), 4);",
          "    assert!(sequence.matches(&[3]));",
          "    assert!(sequence.matches(&[2]));",
          "    assert!(sequence.matches(&[1]));",
          "    assert!(sequence.matches(&[0]));",
          "    assert!(!sequence.matches(&[4]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sequence = Utf8Sequence::Four([",
          "        Utf8Range { start: 252, end: 252 },",
          "        Utf8Range { start: 253, end: 253 },",
          "        Utf8Range { start: 254, end: 254 },",
          "        Utf8Range { start: 255, end: 255 },",
          "    ]);",
          "    sequence.reverse();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sequence.as_slice(), &[Utf8Range { start: 255, end: 255 }, Utf8Range { start: 254, end: 254 }, Utf8Range { start: 253, end: 253 }, Utf8Range { start: 252, end: 252 }]);",
          "    assert_eq!(sequence.len(), 4);",
          "    assert!(sequence.matches(&[255]));",
          "    assert!(sequence.matches(&[254]));",
          "    assert!(sequence.matches(&[253]));",
          "    assert!(sequence.matches(&[252]));"
        ],
        "code": [
          "{",
          "    let mut sequence = Utf8Sequence::Four([",
          "        Utf8Range { start: 252, end: 252 },",
          "        Utf8Range { start: 253, end: 253 },",
          "        Utf8Range { start: 254, end: 254 },",
          "        Utf8Range { start: 255, end: 255 },",
          "    ]);",
          "    sequence.reverse();",
          "    assert_eq!(sequence.as_slice(), &[Utf8Range { start: 255, end: 255 }, Utf8Range { start: 254, end: 254 }, Utf8Range { start: 253, end: 253 }, Utf8Range { start: 252, end: 252 }]);",
          "    assert_eq!(sequence.len(), 4);",
          "    assert!(sequence.matches(&[255]));",
          "    assert!(sequence.matches(&[254]));",
          "    assert!(sequence.matches(&[253]));",
          "    assert!(sequence.matches(&[252]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sequence = Utf8Sequence::Four([",
          "        Utf8Range { start: 10, end: 20 },",
          "        Utf8Range { start: 30, end: 40 },",
          "        Utf8Range { start: 50, end: 60 },",
          "        Utf8Range { start: 70, end: 80 },",
          "    ]);",
          "    sequence.reverse();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sequence.as_slice(), &[Utf8Range { start: 70, end: 80 }, Utf8Range { start: 50, end: 60 }, Utf8Range { start: 30, end: 40 }, Utf8Range { start: 10, end: 20 }]);",
          "    assert_eq!(sequence.len(), 4);"
        ],
        "code": [
          "{",
          "    let mut sequence = Utf8Sequence::Four([",
          "        Utf8Range { start: 10, end: 20 },",
          "        Utf8Range { start: 30, end: 40 },",
          "        Utf8Range { start: 50, end: 60 },",
          "        Utf8Range { start: 70, end: 80 },",
          "    ]);",
          "    sequence.reverse();",
          "    assert_eq!(sequence.as_slice(), &[Utf8Range { start: 70, end: 80 }, Utf8Range { start: 50, end: 60 }, Utf8Range { start: 30, end: 40 }, Utf8Range { start: 10, end: 20 }]);",
          "    assert_eq!(sequence.len(), 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sequence = Utf8Sequence::Four([",
          "        Utf8Range { start: 0, end: 255 },",
          "        Utf8Range { start: 1, end: 255 },",
          "        Utf8Range { start: 2, end: 255 },",
          "        Utf8Range { start: 3, end: 255 },",
          "    ]);",
          "    sequence.reverse();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sequence.as_slice(), &[Utf8Range { start: 3, end: 255 }, Utf8Range { start: 2, end: 255 }, Utf8Range { start: 1, end: 255 }, Utf8Range { start: 0, end: 255 }]);",
          "    assert_eq!(sequence.len(), 4);",
          "    assert!(sequence.matches(&[3, 4]));",
          "    assert!(!sequence.matches(&[4, 5]));"
        ],
        "code": [
          "{",
          "    let mut sequence = Utf8Sequence::Four([",
          "        Utf8Range { start: 0, end: 255 },",
          "        Utf8Range { start: 1, end: 255 },",
          "        Utf8Range { start: 2, end: 255 },",
          "        Utf8Range { start: 3, end: 255 },",
          "    ]);",
          "    sequence.reverse();",
          "    assert_eq!(sequence.as_slice(), &[Utf8Range { start: 3, end: 255 }, Utf8Range { start: 2, end: 255 }, Utf8Range { start: 1, end: 255 }, Utf8Range { start: 0, end: 255 }]);",
          "    assert_eq!(sequence.len(), 4);",
          "    assert!(sequence.matches(&[3, 4]));",
          "    assert!(!sequence.matches(&[4, 5]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sequence = Utf8Sequence::Four([",
          "        Utf8Range { start: 5, end: 8 },",
          "        Utf8Range { start: 9, end: 12 },",
          "        Utf8Range { start: 13, end: 16 },",
          "        Utf8Range { start: 17, end: 20 },",
          "    ]);",
          "    sequence.reverse();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sequence.as_slice(), &[",
          "    Utf8Range { start: 17, end: 20 },",
          "    Utf8Range { start: 13, end: 16 },",
          "    Utf8Range { start: 9, end: 12 },",
          "    Utf8Range { start: 5, end: 8 },",
          "    ]);",
          "    assert_eq!(sequence.len(), 4);"
        ],
        "code": [
          "{",
          "    let mut sequence = Utf8Sequence::Four([",
          "        Utf8Range { start: 5, end: 8 },",
          "        Utf8Range { start: 9, end: 12 },",
          "        Utf8Range { start: 13, end: 16 },",
          "        Utf8Range { start: 17, end: 20 },",
          "    ]);",
          "    sequence.reverse();",
          "    assert_eq!(sequence.as_slice(), &[",
          "    Utf8Range { start: 17, end: 20 },",
          "    Utf8Range { start: 13, end: 16 },",
          "    Utf8Range { start: 9, end: 12 },",
          "    Utf8Range { start: 5, end: 8 },",
          "    ]);",
          "    assert_eq!(sequence.len(), 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]