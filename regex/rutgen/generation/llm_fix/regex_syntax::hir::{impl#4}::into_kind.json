{
  "name": "regex_syntax::hir::{impl#4}::into_kind",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:221:5:223:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Hir object initialized with varied HirKind values such as Literal, Class, Look, Repetition, Capture, Concat, and Alternation, including edge cases of empty and complex structures.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let hir = Hir { kind: HirKind::Empty, props: Properties(Box::new(PropertiesI {})) };",
                "    let _kind = hir.into_kind();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_kind, HirKind::Empty);",
                "    assert!(hir.kind() == HirKind::Empty);"
              ],
              "code": [
                "{",
                "    let hir = Hir { kind: HirKind::Empty, props: Properties(Box::new(PropertiesI {})) };",
                "    let _kind = hir.into_kind();",
                "    assert_eq!(_kind, HirKind::Empty);",
                "    assert!(hir.kind() == HirKind::Empty);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let literal = Literal::new(\"test\");",
                "    let hir = Hir { kind: HirKind::Literal(literal), props: Properties(Box::new(PropertiesI {})) };",
                "    let _kind = hir.into_kind();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind(), &HirKind::Literal(literal));",
                "    assert_eq!(hir.into_kind(), HirKind::Empty);",
                "    assert!(hir.properties().is_some());",
                "    assert_ne!(hir.kind(), HirKind::Empty);"
              ],
              "code": [
                "{",
                "    let literal = Literal::new(\"test\");",
                "    let hir = Hir { kind: HirKind::Literal(literal), props: Properties(Box::new(PropertiesI {})) };",
                "    let _kind = hir.into_kind();",
                "    assert_eq!(hir.kind(), &HirKind::Literal(literal));",
                "    assert_eq!(hir.into_kind(), HirKind::Empty);",
                "    assert!(hir.properties().is_some());",
                "    assert_ne!(hir.kind(), HirKind::Empty);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class = Class::new(vec!['a', 'b', 'c']);",
                "    let hir = Hir { kind: HirKind::Class(class), props: Properties(Box::new(PropertiesI {})) };",
                "    let _kind = hir.into_kind();",
                "}"
              ],
              "oracle": [
                "    let class = Class::new(vec!['a', 'b', 'c']);",
                "    let hir = Hir { kind: HirKind::Class(class), props: Properties(Box::new(PropertiesI {})) };",
                "    assert_eq!(hir.kind(), &HirKind::Class(class));",
                "    let _kind = hir.into_kind();",
                "    assert_eq!(_kind, HirKind::Empty);",
                "    assert_eq!(hir.properties(), &Properties(Box::new(PropertiesI {})));"
              ],
              "code": [
                "{",
                "    let class = Class::new(vec!['a', 'b', 'c']);",
                "    let hir = Hir { kind: HirKind::Class(class), props: Properties(Box::new(PropertiesI {})) };",
                "    let _kind = hir.into_kind();",
                "    let class = Class::new(vec!['a', 'b', 'c']);",
                "    let hir = Hir { kind: HirKind::Class(class), props: Properties(Box::new(PropertiesI {})) };",
                "    assert_eq!(hir.kind(), &HirKind::Class(class));",
                "    let _kind = hir.into_kind();",
                "    assert_eq!(_kind, HirKind::Empty);",
                "    assert_eq!(hir.properties(), &Properties(Box::new(PropertiesI {})));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::new(\"(?=test)\");",
                "    let hir = Hir { kind: HirKind::Look(look), props: Properties(Box::new(PropertiesI {})) };",
                "    let _kind = hir.into_kind();",
                "}"
              ],
              "oracle": [
                "    let look = Look::new(\"(?=test)\");",
                "    let hir = Hir { kind: HirKind::Look(look), props: Properties(Box::new(PropertiesI {})) };",
                "    assert_eq!(hir.kind(), &HirKind::Look(look));",
                "    let _kind = hir.into_kind();",
                "    assert_eq!(_kind, HirKind::Look(look));"
              ],
              "code": [
                "{",
                "    let look = Look::new(\"(?=test)\");",
                "    let hir = Hir { kind: HirKind::Look(look), props: Properties(Box::new(PropertiesI {})) };",
                "    let _kind = hir.into_kind();",
                "    let look = Look::new(\"(?=test)\");",
                "    let hir = Hir { kind: HirKind::Look(look), props: Properties(Box::new(PropertiesI {})) };",
                "    assert_eq!(hir.kind(), &HirKind::Look(look));",
                "    let _kind = hir.into_kind();",
                "    assert_eq!(_kind, HirKind::Look(look));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let repetition = Repetition::new(Box::new(Hir { kind: HirKind::Literal(Literal::new(\"abc\")), props: Properties(Box::new(PropertiesI {})) }), 1..=3);",
                "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties(Box::new(PropertiesI {})) };",
                "    let _kind = hir.into_kind();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind(), &HirKind::Repetition(repetition));",
                "    assert_eq!(_kind, HirKind::Empty);",
                "    assert_ne!(hir.kind(), HirKind::Empty);",
                "    assert!(matches!(hir.into_parts(), (HirKind::Repetition(_), _)));",
                "    assert!(matches!(hir.properties(), &Properties(_)));",
                "    assert!(hir.kind().is::<HirKind::Repetition>());"
              ],
              "code": [
                "{",
                "    let repetition = Repetition::new(Box::new(Hir { kind: HirKind::Literal(Literal::new(\"abc\")), props: Properties(Box::new(PropertiesI {})) }), 1..=3);",
                "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties(Box::new(PropertiesI {})) };",
                "    let _kind = hir.into_kind();",
                "    assert_eq!(hir.kind(), &HirKind::Repetition(repetition));",
                "    assert_eq!(_kind, HirKind::Empty);",
                "    assert_ne!(hir.kind(), HirKind::Empty);",
                "    assert!(matches!(hir.into_parts(), (HirKind::Repetition(_), _)));",
                "    assert!(matches!(hir.properties(), &Properties(_)));",
                "    assert!(hir.kind().is::<HirKind::Repetition>());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capture = Capture::new(Box::new(Hir { kind: HirKind::Literal(Literal::new(\"abc\")), props: Properties(Box::new(PropertiesI {})) }));",
                "    let hir = Hir { kind: HirKind::Capture(capture), props: Properties(Box::new(PropertiesI {})) };",
                "    let _kind = hir.into_kind();",
                "}"
              ],
              "oracle": [
                "    let capture = Capture::new(Box::new(Hir { kind: HirKind::Literal(Literal::new(\"abc\")), props: Properties(Box::new(PropertiesI {})) }));",
                "    let hir = Hir { kind: HirKind::Capture(capture), props: Properties(Box::new(PropertiesI {})) };",
                "    assert_eq!(hir.kind, HirKind::Capture(capture));",
                "    assert_eq!(hir.into_kind(), HirKind::Empty);"
              ],
              "code": [
                "{",
                "    let capture = Capture::new(Box::new(Hir { kind: HirKind::Literal(Literal::new(\"abc\")), props: Properties(Box::new(PropertiesI {})) }));",
                "    let hir = Hir { kind: HirKind::Capture(capture), props: Properties(Box::new(PropertiesI {})) };",
                "    let _kind = hir.into_kind();",
                "    let capture = Capture::new(Box::new(Hir { kind: HirKind::Literal(Literal::new(\"abc\")), props: Properties(Box::new(PropertiesI {})) }));",
                "    let hir = Hir { kind: HirKind::Capture(capture), props: Properties(Box::new(PropertiesI {})) };",
                "    assert_eq!(hir.kind, HirKind::Capture(capture));",
                "    assert_eq!(hir.into_kind(), HirKind::Empty);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let concat = vec![",
                "        Hir { kind: HirKind::Literal(Literal::new(\"a\")), props: Properties(Box::new(PropertiesI {})) },",
                "        Hir { kind: HirKind::Literal(Literal::new(\"b\")), props: Properties(Box::new(PropertiesI {})) }",
                "    ];",
                "    let hir = Hir { kind: HirKind::Concat(concat), props: Properties(Box::new(PropertiesI {})) };",
                "    let _kind = hir.into_kind();",
                "}"
              ],
              "oracle": [
                "    _kind.should_eq(HirKind::Empty)",
                "    _hir.kind().should_eq(HirKind::Concat(vec![HirKind::Literal(Literal::new(\"a\")), HirKind::Literal(Literal::new(\"b\"))]))",
                "    _properties.should_not_be_empty()",
                "    _hir.properties().should_eq(Properties(Box::new(PropertiesI {})))",
                "    _repr.should_match(\"Hir { kind: Concat, props: Properties }\")"
              ],
              "code": [
                "{",
                "    let concat = vec![",
                "        Hir { kind: HirKind::Literal(Literal::new(\"a\")), props: Properties(Box::new(PropertiesI {})) },",
                "        Hir { kind: HirKind::Literal(Literal::new(\"b\")), props: Properties(Box::new(PropertiesI {})) }",
                "    ];",
                "    let hir = Hir { kind: HirKind::Concat(concat), props: Properties(Box::new(PropertiesI {})) };",
                "    let _kind = hir.into_kind();",
                "    _kind.should_eq(HirKind::Empty)",
                "    _hir.kind().should_eq(HirKind::Concat(vec![HirKind::Literal(Literal::new(\"a\")), HirKind::Literal(Literal::new(\"b\"))]))",
                "    _properties.should_not_be_empty()",
                "    _hir.properties().should_eq(Properties(Box::new(PropertiesI {})))",
                "    _repr.should_match(\"Hir { kind: Concat, props: Properties }\")",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let alternation = vec![",
                "        Hir { kind: HirKind::Literal(Literal::new(\"a\")), props: Properties(Box::new(PropertiesI {})) },",
                "        Hir { kind: HirKind::Literal(Literal::new(\"b\")), props: Properties(Box::new(PropertiesI {})) }",
                "    ];",
                "    let hir = Hir { kind: HirKind::Alternation(alternation), props: Properties(Box::new(PropertiesI {})) };",
                "    let _kind = hir.into_kind();",
                "}"
              ],
              "oracle": [
                "    let alternation = vec![Hir { kind: HirKind::Literal(Literal::new(\"x\")), props: Properties(Box::new(PropertiesI {})) }, Hir { kind: HirKind::Literal(Literal::new(\"y\")), props: Properties(Box::new(PropertiesI {})) }];",
                "    let hir = Hir { kind: HirKind::Alternation(alternation), props: Properties(Box::new(PropertiesI {})) };",
                "    let _kind = hir.into_kind();",
                "    assert_eq!(_kind, HirKind::Empty);",
                "    assert!(matches!(hir.kind(), &HirKind::Alternation(_)));",
                "    assert!(hir.into_kind().is_empty());",
                "    assert_ne!(hir.kind(), HirKind::Empty);",
                "    assert_eq!(hir.properties(), &Properties(Box::new(PropertiesI {})));"
              ],
              "code": [
                "{",
                "    let alternation = vec![",
                "        Hir { kind: HirKind::Literal(Literal::new(\"a\")), props: Properties(Box::new(PropertiesI {})) },",
                "        Hir { kind: HirKind::Literal(Literal::new(\"b\")), props: Properties(Box::new(PropertiesI {})) }",
                "    ];",
                "    let hir = Hir { kind: HirKind::Alternation(alternation), props: Properties(Box::new(PropertiesI {})) };",
                "    let _kind = hir.into_kind();",
                "    let alternation = vec![Hir { kind: HirKind::Literal(Literal::new(\"x\")), props: Properties(Box::new(PropertiesI {})) }, Hir { kind: HirKind::Literal(Literal::new(\"y\")), props: Properties(Box::new(PropertiesI {})) }];",
                "    let hir = Hir { kind: HirKind::Alternation(alternation), props: Properties(Box::new(PropertiesI {})) };",
                "    let _kind = hir.into_kind();",
                "    assert_eq!(_kind, HirKind::Empty);",
                "    assert!(matches!(hir.kind(), &HirKind::Alternation(_)));",
                "    assert!(hir.into_kind().is_empty());",
                "    assert_ne!(hir.kind(), HirKind::Empty);",
                "    assert_eq!(hir.properties(), &Properties(Box::new(PropertiesI {})));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}