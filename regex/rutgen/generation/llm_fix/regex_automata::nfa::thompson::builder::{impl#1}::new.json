{
  "name": "regex_automata::nfa::thompson::builder::{impl#1}::new",
  "mod_info": {
    "name": "nfa::thompson::builder",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:58:1:58:13"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/builder.rs:361:5:363:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "pattern_id must be None, states must be an empty Vec, start_pattern must be an empty Vec, captures must be an empty Vec, memory_states must be 0, utf8 must be false, reverse must be false, look_matcher must be a default initialized LookMatcher, size_limit must be None.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let builder = Builder::new();",
                "    assert!(builder.pattern_id.is_none());",
                "    assert!(builder.states.is_empty());",
                "    assert!(builder.start_pattern.is_empty());",
                "    assert!(builder.captures.is_empty());",
                "    assert_eq!(builder.memory_states, 0);",
                "    assert!(!builder.utf8);",
                "    assert!(!builder.reverse);",
                "    assert_eq!(builder.look_matcher.lineterm, DebugByte::default());",
                "    assert!(builder.size_limit.is_none());",
                "}"
              ],
              "oracle": [
                "    builder.pattern_id.is_none();",
                "    builder.states.is_empty();",
                "    builder.start_pattern.is_empty();",
                "    builder.captures.is_empty();",
                "    builder.memory_states == 0;",
                "    !builder.utf8;",
                "    !builder.reverse;",
                "    builder.look_matcher.lineterm == DebugByte::default();",
                "    builder.size_limit.is_none();"
              ],
              "code": [
                "{",
                "    let builder = Builder::new();",
                "    assert!(builder.pattern_id.is_none());",
                "    assert!(builder.states.is_empty());",
                "    assert!(builder.start_pattern.is_empty());",
                "    assert!(builder.captures.is_empty());",
                "    assert_eq!(builder.memory_states, 0);",
                "    assert!(!builder.utf8);",
                "    assert!(!builder.reverse);",
                "    assert_eq!(builder.look_matcher.lineterm, DebugByte::default());",
                "    assert!(builder.size_limit.is_none());",
                "    builder.pattern_id.is_none();",
                "    builder.states.is_empty();",
                "    builder.start_pattern.is_empty();",
                "    builder.captures.is_empty();",
                "    builder.memory_states == 0;",
                "    !builder.utf8;",
                "    !builder.reverse;",
                "    builder.look_matcher.lineterm == DebugByte::default();",
                "    builder.size_limit.is_none();",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}