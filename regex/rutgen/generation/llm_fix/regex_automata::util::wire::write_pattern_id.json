{
  "name": "regex_automata::util::wire::write_pattern_id",
  "mod_info": {
    "name": "util::wire",
    "loc": "regex-automata/src/util/mod.rs:46:1:46:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/wire.rs:608:1:614:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: PatternID::SIZE\n"
      ],
      "input_infer": "PatternID as valid input; dst slice length >= PatternID::SIZE; valid Endian type (LE or BE)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct LE;",
                "    impl Endian for LE {",
                "        fn write_u32(value: u32, dst: &mut [u8]) {",
                "            dst.copy_from_slice(&value.to_le_bytes());",
                "        }",
                "    }",
                "    ",
                "    let pattern_id = PatternID(0x12345678.into());",
                "    let mut dst = [0u8; 4];",
                "    let result = write_pattern_id::<LE>(pattern_id, &mut dst);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, PatternID::SIZE);",
                "    assert_eq!(&dst, &[0x78, 0x56, 0x34, 0x12]);"
              ],
              "code": [
                "{",
                "    struct LE;",
                "    impl Endian for LE {",
                "        fn write_u32(value: u32, dst: &mut [u8]) {",
                "            dst.copy_from_slice(&value.to_le_bytes());",
                "        }",
                "    }",
                "    ",
                "    let pattern_id = PatternID(0x12345678.into());",
                "    let mut dst = [0u8; 4];",
                "    let result = write_pattern_id::<LE>(pattern_id, &mut dst);",
                "    assert_eq!(result, PatternID::SIZE);",
                "    assert_eq!(&dst, &[0x78, 0x56, 0x34, 0x12]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct BE;",
                "    impl Endian for BE {",
                "        fn write_u32(value: u32, dst: &mut [u8]) {",
                "            dst.copy_from_slice(&value.to_be_bytes());",
                "        }",
                "    }",
                "    ",
                "    let pattern_id = PatternID(0x12345678.into());",
                "    let mut dst = [0u8; 4];",
                "    let result = write_pattern_id::<BE>(pattern_id, &mut dst);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, PatternID::SIZE);",
                "    assert_eq!(dst, [0x12, 0x34, 0x56, 0x78]);"
              ],
              "code": [
                "{",
                "    struct BE;",
                "    impl Endian for BE {",
                "        fn write_u32(value: u32, dst: &mut [u8]) {",
                "            dst.copy_from_slice(&value.to_be_bytes());",
                "        }",
                "    }",
                "    ",
                "    let pattern_id = PatternID(0x12345678.into());",
                "    let mut dst = [0u8; 4];",
                "    let result = write_pattern_id::<BE>(pattern_id, &mut dst);",
                "    assert_eq!(result, PatternID::SIZE);",
                "    assert_eq!(dst, [0x12, 0x34, 0x56, 0x78]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct LE;",
                "    impl Endian for LE {",
                "        fn write_u32(value: u32, dst: &mut [u8]) {",
                "            dst.copy_from_slice(&value.to_le_bytes());",
                "        }",
                "    }",
                "    ",
                "    let pattern_id = PatternID(0u32.into());",
                "    let mut dst = [0u8; 4];",
                "    let result = write_pattern_id::<LE>(pattern_id, &mut dst);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, PatternID::SIZE);",
                "    assert_eq!(dst, pattern_id.as_u32().to_le_bytes());",
                "    assert!(std::panic::catch_unwind(|| write_pattern_id::<LE>(pattern_id, &mut [0u8; 3])).is_err());",
                "    assert!(std::panic::catch_unwind(|| write_pattern_id::<LE>(pattern_id, &mut [])).is_err());"
              ],
              "code": [
                "{",
                "    struct LE;",
                "    impl Endian for LE {",
                "        fn write_u32(value: u32, dst: &mut [u8]) {",
                "            dst.copy_from_slice(&value.to_le_bytes());",
                "        }",
                "    }",
                "    ",
                "    let pattern_id = PatternID(0u32.into());",
                "    let mut dst = [0u8; 4];",
                "    let result = write_pattern_id::<LE>(pattern_id, &mut dst);",
                "    assert_eq!(result, PatternID::SIZE);",
                "    assert_eq!(dst, pattern_id.as_u32().to_le_bytes());",
                "    assert!(std::panic::catch_unwind(|| write_pattern_id::<LE>(pattern_id, &mut [0u8; 3])).is_err());",
                "    assert!(std::panic::catch_unwind(|| write_pattern_id::<LE>(pattern_id, &mut [])).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct BE;",
                "    impl Endian for BE {",
                "        fn write_u32(value: u32, dst: &mut [u8]) {",
                "            dst.copy_from_slice(&value.to_be_bytes());",
                "        }",
                "    }",
                "    ",
                "    let pattern_id = PatternID(u32::MAX.into());",
                "    let mut dst = [0u8; 4];",
                "    let result = write_pattern_id::<BE>(pattern_id, &mut dst);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, PatternID::SIZE);",
                "    assert_eq!(&dst, &(u32::MAX.to_be_bytes()));",
                "    let mut invalid_dst = [0u8; 3];",
                "    let result_invalid = std::panic::catch_unwind(|| write_pattern_id::<BE>(pattern_id, &mut invalid_dst));",
                "    assert!(result_invalid.is_err());",
                "    let mut empty_dst: &mut [u8] = &mut [];",
                "    let result_empty = std::panic::catch_unwind(|| write_pattern_id::<BE>(pattern_id, empty_dst));",
                "    assert!(result_empty.is_err());"
              ],
              "code": [
                "{",
                "    struct BE;",
                "    impl Endian for BE {",
                "        fn write_u32(value: u32, dst: &mut [u8]) {",
                "            dst.copy_from_slice(&value.to_be_bytes());",
                "        }",
                "    }",
                "    ",
                "    let pattern_id = PatternID(u32::MAX.into());",
                "    let mut dst = [0u8; 4];",
                "    let result = write_pattern_id::<BE>(pattern_id, &mut dst);",
                "    assert_eq!(result, PatternID::SIZE);",
                "    assert_eq!(&dst, &(u32::MAX.to_be_bytes()));",
                "    let mut invalid_dst = [0u8; 3];",
                "    let result_invalid = std::panic::catch_unwind(|| write_pattern_id::<BE>(pattern_id, &mut invalid_dst));",
                "    assert!(result_invalid.is_err());",
                "    let mut empty_dst: &mut [u8] = &mut [];",
                "    let result_empty = std::panic::catch_unwind(|| write_pattern_id::<BE>(pattern_id, empty_dst));",
                "    assert!(result_empty.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}