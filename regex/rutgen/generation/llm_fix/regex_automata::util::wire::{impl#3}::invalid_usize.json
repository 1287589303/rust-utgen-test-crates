{
  "name": "regex_automata::util::wire::{impl#3}::invalid_usize",
  "mod_info": {
    "name": "util::wire",
    "loc": "regex-automata/src/util/mod.rs:46:1:46:14"
  },
  "visible": false,
  "loc": "regex-automata/src/util/wire.rs:163:5:165:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: DeserializeError(DeserializeErrorKind::InvalidUsize { what })\n"
      ],
      "input_infer": "what: non-empty static string representing a valid context to trigger InvalidUsize error\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let what = \"Non-empty static string\";",
                "    let result = DeserializeError::invalid_usize(what);",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(result, DeserializeError(DeserializeErrorKind::InvalidUsize { what: \"Non-empty static string\" })));"
              ],
              "code": [
                "{",
                "    let what = \"Non-empty static string\";",
                "    let result = DeserializeError::invalid_usize(what);",
                "    assert!(matches!(result, DeserializeError(DeserializeErrorKind::InvalidUsize { what: \"Non-empty static string\" })));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let what = \"\";",
                "    let result = DeserializeError::invalid_usize(what);",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(result, DeserializeError(DeserializeErrorKind::InvalidUsize { .. })));",
                "    assert_eq!(result.0, DeserializeErrorKind::InvalidUsize { what });",
                "    assert_eq!(result.0.what, \"\");"
              ],
              "code": [
                "{",
                "    let what = \"\";",
                "    let result = DeserializeError::invalid_usize(what);",
                "    assert!(matches!(result, DeserializeError(DeserializeErrorKind::InvalidUsize { .. })));",
                "    assert_eq!(result.0, DeserializeErrorKind::InvalidUsize { what });",
                "    assert_eq!(result.0.what, \"\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let what = \"@#%^&*()!\";",
                "    let result = DeserializeError::invalid_usize(what);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, DeserializeError(DeserializeErrorKind::InvalidUsize { what: \"@#%^&*()!\" }));"
              ],
              "code": [
                "{",
                "    let what = \"@#%^&*()!\";",
                "    let result = DeserializeError::invalid_usize(what);",
                "    assert_eq!(result, DeserializeError(DeserializeErrorKind::InvalidUsize { what: \"@#%^&*()!\" }));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let what = \"12345\";",
                "    let result = DeserializeError::invalid_usize(what);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, DeserializeError(DeserializeErrorKind::InvalidUsize { what: \"12345\" }));"
              ],
              "code": [
                "{",
                "    let what = \"12345\";",
                "    let result = DeserializeError::invalid_usize(what);",
                "    assert_eq!(result, DeserializeError(DeserializeErrorKind::InvalidUsize { what: \"12345\" }));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}