{
  "name": "regex_automata::util::captures::{impl#9}::first_must_be_unnamed",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": false,
  "loc": "regex-automata/src/util/captures.rs:2401:5:2405:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: GroupInfoError {\n            kind: GroupInfoErrorKind::FirstMustBeUnnamed { pattern },\n        }\n"
      ],
      "input_infer": "Valid PatternID inputs ranging from SmallIndex(0) to the maximum representable value without causing overflow in the context of the application, specifically testing the minimum (0) and maximum pattern IDs.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern_id = PatternID(SmallIndex(0));",
                "    let result = GroupInfoError::first_must_be_unnamed(pattern_id);",
                "}"
              ],
              "oracle": [
                "    let pattern_id = PatternID(SmallIndex(0));",
                "    let expected = GroupInfoError { kind: GroupInfoErrorKind::FirstMustBeUnnamed { pattern: pattern_id } };",
                "    assert_eq!(result.kind, expected.kind);"
              ],
              "code": [
                "{",
                "    let pattern_id = PatternID(SmallIndex(0));",
                "    let result = GroupInfoError::first_must_be_unnamed(pattern_id);",
                "    let pattern_id = PatternID(SmallIndex(0));",
                "    let expected = GroupInfoError { kind: GroupInfoErrorKind::FirstMustBeUnnamed { pattern: pattern_id } };",
                "    assert_eq!(result.kind, expected.kind);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern_id = PatternID(SmallIndex(u32::MAX as usize));",
                "    let result = GroupInfoError::first_must_be_unnamed(pattern_id);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, GroupInfoErrorKind::FirstMustBeUnnamed { pattern: pattern_id });"
              ],
              "code": [
                "{",
                "    let pattern_id = PatternID(SmallIndex(u32::MAX as usize));",
                "    let result = GroupInfoError::first_must_be_unnamed(pattern_id);",
                "    assert_eq!(result.kind, GroupInfoErrorKind::FirstMustBeUnnamed { pattern: pattern_id });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}