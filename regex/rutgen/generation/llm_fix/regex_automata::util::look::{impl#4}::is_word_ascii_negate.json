{
  "name": "regex_automata::util::look::{impl#4}::is_word_ascii_negate",
  "mod_info": {
    "name": "util::look",
    "loc": "regex-automata/src/util/mod.rs:38:1:38:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/look.rs:1000:5:1002:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: !self.is_word_ascii(haystack, at)\n"
      ],
      "input_infer": "haystack: non-empty byte array containing ASCII characters, at: 0 to haystack.len() (inclusive)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let haystack: &[u8] = b\"hello\";",
                "    let matcher = LookMatcher::new();",
                "    matcher.is_word_ascii_negate(haystack, 0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 0), true);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 1), false);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 5), true);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 6), true);  // This should check panic condition",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, u8::MAX as usize), true); // Check extreme value for 'at'"
              ],
              "code": [
                "{",
                "    let haystack: &[u8] = b\"hello\";",
                "    let matcher = LookMatcher::new();",
                "    matcher.is_word_ascii_negate(haystack, 0);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 0), true);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 1), false);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 5), true);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 6), true);  // This should check panic condition",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, u8::MAX as usize), true); // Check extreme value for 'at'",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let haystack: &[u8] = b\"hello\";",
                "    let matcher = LookMatcher::new();",
                "    matcher.is_word_ascii_negate(haystack, 1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 0), true);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 1), false);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 2), false);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 3), false);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 4), true);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 5), true);"
              ],
              "code": [
                "{",
                "    let haystack: &[u8] = b\"hello\";",
                "    let matcher = LookMatcher::new();",
                "    matcher.is_word_ascii_negate(haystack, 1);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 0), true);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 1), false);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 2), false);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 3), false);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 4), true);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 5), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let haystack: &[u8] = b\"hello\";",
                "    let matcher = LookMatcher::new();",
                "    matcher.is_word_ascii_negate(haystack, 2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 2), !matcher.is_word_ascii(haystack, 2));",
                "    assert!(matcher.is_word_ascii_negate(haystack, 0));",
                "    assert!(!matcher.is_word_ascii_negate(haystack, 1));",
                "    assert!(matcher.is_word_ascii_negate(haystack, 5));",
                "    assert!(std::panic::catch_unwind(|| { matcher.is_word_ascii_negate(haystack, 6); }).is_err());"
              ],
              "code": [
                "{",
                "    let haystack: &[u8] = b\"hello\";",
                "    let matcher = LookMatcher::new();",
                "    matcher.is_word_ascii_negate(haystack, 2);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 2), !matcher.is_word_ascii(haystack, 2));",
                "    assert!(matcher.is_word_ascii_negate(haystack, 0));",
                "    assert!(!matcher.is_word_ascii_negate(haystack, 1));",
                "    assert!(matcher.is_word_ascii_negate(haystack, 5));",
                "    assert!(std::panic::catch_unwind(|| { matcher.is_word_ascii_negate(haystack, 6); }).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let haystack: &[u8] = b\"hello\";",
                "    let matcher = LookMatcher::new();",
                "    matcher.is_word_ascii_negate(haystack, 3);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 3), !matcher.is_word_ascii(haystack, 3));",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 0), !matcher.is_word_ascii(haystack, 0));",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 5), !matcher.is_word_ascii(haystack, 5));",
                "    assert!(std::panic::catch_unwind(|| { matcher.is_word_ascii_negate(haystack, 6); }).is_err());",
                "    assert!(!matcher.is_word_ascii_negate(haystack, 1));",
                "    assert!(matcher.is_word_ascii_negate(haystack, 2));"
              ],
              "code": [
                "{",
                "    let haystack: &[u8] = b\"hello\";",
                "    let matcher = LookMatcher::new();",
                "    matcher.is_word_ascii_negate(haystack, 3);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 3), !matcher.is_word_ascii(haystack, 3));",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 0), !matcher.is_word_ascii(haystack, 0));",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 5), !matcher.is_word_ascii(haystack, 5));",
                "    assert!(std::panic::catch_unwind(|| { matcher.is_word_ascii_negate(haystack, 6); }).is_err());",
                "    assert!(!matcher.is_word_ascii_negate(haystack, 1));",
                "    assert!(matcher.is_word_ascii_negate(haystack, 2));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let haystack: &[u8] = b\"hello\";",
                "    let matcher = LookMatcher::new();",
                "    matcher.is_word_ascii_negate(haystack, 4);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 4), false);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 3), true);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 0), true);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 5), false);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 6), false);"
              ],
              "code": [
                "{",
                "    let haystack: &[u8] = b\"hello\";",
                "    let matcher = LookMatcher::new();",
                "    matcher.is_word_ascii_negate(haystack, 4);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 4), false);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 3), true);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 0), true);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 5), false);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 6), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let haystack: &[u8] = b\"hello\";",
                "    let matcher = LookMatcher::new();",
                "    matcher.is_word_ascii_negate(haystack, haystack.len());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 0), true);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 1), false);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 2), false);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 3), false);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 4), false);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 5), true);"
              ],
              "code": [
                "{",
                "    let haystack: &[u8] = b\"hello\";",
                "    let matcher = LookMatcher::new();",
                "    matcher.is_word_ascii_negate(haystack, haystack.len());",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 0), true);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 1), false);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 2), false);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 3), false);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 4), false);",
                "    assert_eq!(matcher.is_word_ascii_negate(haystack, 5), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}