{
  "name": "regex_syntax::unicode::perl_word",
  "mod_info": {
    "name": "unicode",
    "loc": "regex-syntax/src/lib.rs:193:1:193:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/unicode.rs:388:1:401:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "feature flag \"unicode-perl\" is enabled, valid input for PERL_WORD, invalid conditions for feature flag not enabled\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    // Assuming the feature flag \"unicode-perl\" is enabled.",
                "    let result = perl_word();",
                "    let _ = result.unwrap(); // This should succeed without error.",
                "}"
              ],
              "oracle": [
                "    let result = perl_word(); assert!(result.is_ok());",
                "    let class_unicode = result.unwrap(); assert_eq!(class_unicode.set.len(), expected_length);",
                "    assert!(class_unicode.set.contains(&(expected_char_start, expected_char_end)));",
                "    let error_result = perl_word(); assert!(error_result.is_err()); assert_eq!(error_result.unwrap_err(), Error::PerlClassNotFound);"
              ],
              "code": [
                "{",
                "    // Assuming the feature flag \"unicode-perl\" is enabled.",
                "    let result = perl_word();",
                "    let _ = result.unwrap(); // This should succeed without error.",
                "    let result = perl_word(); assert!(result.is_ok());",
                "    let class_unicode = result.unwrap(); assert_eq!(class_unicode.set.len(), expected_length);",
                "    assert!(class_unicode.set.contains(&(expected_char_start, expected_char_end)));",
                "    let error_result = perl_word(); assert!(error_result.is_err()); assert_eq!(error_result.unwrap_err(), Error::PerlClassNotFound);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    // Assuming the feature flag \"unicode-perl\" is not enabled.",
                "    let result = perl_word();",
                "    let _ = result.unwrap_err(); // This should panic as the error is expected.",
                "}"
              ],
              "oracle": [
                "    let result = perl_word();",
                "    assert_eq!(result.is_err(), true);",
                "    assert_eq!(result.unwrap_err(), Error::PerlClassNotFound);"
              ],
              "code": [
                "{",
                "    // Assuming the feature flag \"unicode-perl\" is not enabled.",
                "    let result = perl_word();",
                "    let _ = result.unwrap_err(); // This should panic as the error is expected.",
                "    let result = perl_word();",
                "    assert_eq!(result.is_err(), true);",
                "    assert_eq!(result.unwrap_err(), Error::PerlClassNotFound);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}