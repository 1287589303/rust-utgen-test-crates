{
  "name": "regex_syntax::hir::{impl#25}::look_set_suffix_any",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:2071:5:2073:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.0.look_set_suffix_any\n"
      ],
      "input_infer": "Test input conditions or ranges: Properties with varied combinations of minimum_len (None, 0, positive integers), maximum_len (None, 0, positive integers), utf8 (true, false), explicit_captures_len (0, positive integers), static_explicit_captures_len (None, 0, positive integers), literal (true, false), alternation_literal (true, false), and all possible values for look_set_suffix_any as a valid LookSet with bits ranging from 0 to 0xFFFF.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let props = Properties(Box::new(PropertiesI {",
                "        minimum_len: None,",
                "        maximum_len: Some(5),",
                "        look_set: LookSet { bits: 0 },",
                "        look_set_prefix: LookSet { bits: 0 },",
                "        look_set_suffix: LookSet { bits: 0 },",
                "        look_set_prefix_any: LookSet { bits: 0 },",
                "        look_set_suffix_any: LookSet { bits: 0xFFFF },",
                "        utf8: true,",
                "        explicit_captures_len: 0,",
                "        static_explicit_captures_len: None,",
                "        literal: false,",
                "        alternation_literal: true,",
                "    }));",
                "    props.look_set_suffix_any();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(props.look_set_suffix_any().bits, 0xFFFF);"
              ],
              "code": [
                "{",
                "    let props = Properties(Box::new(PropertiesI {",
                "        minimum_len: None,",
                "        maximum_len: Some(5),",
                "        look_set: LookSet { bits: 0 },",
                "        look_set_prefix: LookSet { bits: 0 },",
                "        look_set_suffix: LookSet { bits: 0 },",
                "        look_set_prefix_any: LookSet { bits: 0 },",
                "        look_set_suffix_any: LookSet { bits: 0xFFFF },",
                "        utf8: true,",
                "        explicit_captures_len: 0,",
                "        static_explicit_captures_len: None,",
                "        literal: false,",
                "        alternation_literal: true,",
                "    }));",
                "    props.look_set_suffix_any();",
                "    assert_eq!(props.look_set_suffix_any().bits, 0xFFFF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let props = Properties(Box::new(PropertiesI {",
                "        minimum_len: Some(0),",
                "        maximum_len: Some(5),",
                "        look_set: LookSet { bits: 1 },",
                "        look_set_prefix: LookSet { bits: 1 },",
                "        look_set_suffix: LookSet { bits: 1 },",
                "        look_set_prefix_any: LookSet { bits: 1 },",
                "        look_set_suffix_any: LookSet { bits: 0xAA55 },",
                "        utf8: false,",
                "        explicit_captures_len: 1,",
                "        static_explicit_captures_len: Some(0),",
                "        literal: true,",
                "        alternation_literal: false,",
                "    }));",
                "    props.look_set_suffix_any();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(props.look_set_suffix_any().bits, 0xAA55);"
              ],
              "code": [
                "{",
                "    let props = Properties(Box::new(PropertiesI {",
                "        minimum_len: Some(0),",
                "        maximum_len: Some(5),",
                "        look_set: LookSet { bits: 1 },",
                "        look_set_prefix: LookSet { bits: 1 },",
                "        look_set_suffix: LookSet { bits: 1 },",
                "        look_set_prefix_any: LookSet { bits: 1 },",
                "        look_set_suffix_any: LookSet { bits: 0xAA55 },",
                "        utf8: false,",
                "        explicit_captures_len: 1,",
                "        static_explicit_captures_len: Some(0),",
                "        literal: true,",
                "        alternation_literal: false,",
                "    }));",
                "    props.look_set_suffix_any();",
                "    assert_eq!(props.look_set_suffix_any().bits, 0xAA55);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let props = Properties(Box::new(PropertiesI {",
                "        minimum_len: Some(3),",
                "        maximum_len: Some(10),",
                "        look_set: LookSet { bits: 2 },",
                "        look_set_prefix: LookSet { bits: 2 },",
                "        look_set_suffix: LookSet { bits: 2 },",
                "        look_set_prefix_any: LookSet { bits: 2 },",
                "        look_set_suffix_any: LookSet { bits: 0xFFFF },",
                "        utf8: true,",
                "        explicit_captures_len: 5,",
                "        static_explicit_captures_len: Some(2),",
                "        literal: false,",
                "        alternation_literal: true,",
                "    }));",
                "    props.look_set_suffix_any();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(props.look_set_suffix_any().bits, 0xFFFF);",
                "    let props_invalid = Properties(Box::new(PropertiesI {",
                "    minimum_len: None,",
                "    maximum_len: None,",
                "    look_set: LookSet { bits: 0 },",
                "    look_set_prefix: LookSet { bits: 0 },",
                "    look_set_suffix: LookSet { bits: 0 },",
                "    look_set_prefix_any: LookSet { bits: 0 },",
                "    look_set_suffix_any: LookSet { bits: 0 },",
                "    utf8: false,",
                "    explicit_captures_len: 0,",
                "    static_explicit_captures_len: None,",
                "    literal: true,",
                "    alternation_literal: false,",
                "    }));",
                "    assert_eq!(props_invalid.look_set_suffix_any().bits, 0);"
              ],
              "code": [
                "{",
                "    let props = Properties(Box::new(PropertiesI {",
                "        minimum_len: Some(3),",
                "        maximum_len: Some(10),",
                "        look_set: LookSet { bits: 2 },",
                "        look_set_prefix: LookSet { bits: 2 },",
                "        look_set_suffix: LookSet { bits: 2 },",
                "        look_set_prefix_any: LookSet { bits: 2 },",
                "        look_set_suffix_any: LookSet { bits: 0xFFFF },",
                "        utf8: true,",
                "        explicit_captures_len: 5,",
                "        static_explicit_captures_len: Some(2),",
                "        literal: false,",
                "        alternation_literal: true,",
                "    }));",
                "    props.look_set_suffix_any();",
                "    assert_eq!(props.look_set_suffix_any().bits, 0xFFFF);",
                "    let props_invalid = Properties(Box::new(PropertiesI {",
                "    minimum_len: None,",
                "    maximum_len: None,",
                "    look_set: LookSet { bits: 0 },",
                "    look_set_prefix: LookSet { bits: 0 },",
                "    look_set_suffix: LookSet { bits: 0 },",
                "    look_set_prefix_any: LookSet { bits: 0 },",
                "    look_set_suffix_any: LookSet { bits: 0 },",
                "    utf8: false,",
                "    explicit_captures_len: 0,",
                "    static_explicit_captures_len: None,",
                "    literal: true,",
                "    alternation_literal: false,",
                "    }));",
                "    assert_eq!(props_invalid.look_set_suffix_any().bits, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let props = Properties(Box::new(PropertiesI {",
                "        minimum_len: Some(1),",
                "        maximum_len: None,",
                "        look_set: LookSet { bits: 3 },",
                "        look_set_prefix: LookSet { bits: 3 },",
                "        look_set_suffix: LookSet { bits: 3 },",
                "        look_set_prefix_any: LookSet { bits: 3 },",
                "        look_set_suffix_any: LookSet { bits: 0xFFFF },",
                "        utf8: false,",
                "        explicit_captures_len: 0,",
                "        static_explicit_captures_len: Some(3),",
                "        literal: true,",
                "        alternation_literal: false,",
                "    }));",
                "    props.look_set_suffix_any();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(props.look_set_suffix_any().bits, 0xFFFF);"
              ],
              "code": [
                "{",
                "    let props = Properties(Box::new(PropertiesI {",
                "        minimum_len: Some(1),",
                "        maximum_len: None,",
                "        look_set: LookSet { bits: 3 },",
                "        look_set_prefix: LookSet { bits: 3 },",
                "        look_set_suffix: LookSet { bits: 3 },",
                "        look_set_prefix_any: LookSet { bits: 3 },",
                "        look_set_suffix_any: LookSet { bits: 0xFFFF },",
                "        utf8: false,",
                "        explicit_captures_len: 0,",
                "        static_explicit_captures_len: Some(3),",
                "        literal: true,",
                "        alternation_literal: false,",
                "    }));",
                "    props.look_set_suffix_any();",
                "    assert_eq!(props.look_set_suffix_any().bits, 0xFFFF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let props = Properties(Box::new(PropertiesI {",
                "        minimum_len: None,",
                "        maximum_len: Some(5),",
                "        look_set: LookSet { bits: 4 },",
                "        look_set_prefix: LookSet { bits: 4 },",
                "        look_set_suffix: LookSet { bits: 4 },",
                "        look_set_prefix_any: LookSet { bits: 4 },",
                "        look_set_suffix_any: LookSet { bits: 0xFFFF },",
                "        utf8: true,",
                "        explicit_captures_len: 0,",
                "        static_explicit_captures_len: None,",
                "        literal: false,",
                "        alternation_literal: true,",
                "    }));",
                "    props.look_set_suffix_any();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(props.look_set_suffix_any().bits, 0xFFFF);",
                "    assert!(props.look_set_suffix_any().bits & (1 << Look::End as usize) != 0);",
                "    assert_eq!(props.look_set_suffix_any(), LookSet { bits: 0xFFFF });",
                "    assert_ne!(props.look_set_suffix_any(), LookSet { bits: 0 });",
                "    assert!(props.look_set_suffix_any().bits > 0);",
                "    assert!(props.look_set_suffix_any().bits <= 0xFFFF);"
              ],
              "code": [
                "{",
                "    let props = Properties(Box::new(PropertiesI {",
                "        minimum_len: None,",
                "        maximum_len: Some(5),",
                "        look_set: LookSet { bits: 4 },",
                "        look_set_prefix: LookSet { bits: 4 },",
                "        look_set_suffix: LookSet { bits: 4 },",
                "        look_set_prefix_any: LookSet { bits: 4 },",
                "        look_set_suffix_any: LookSet { bits: 0xFFFF },",
                "        utf8: true,",
                "        explicit_captures_len: 0,",
                "        static_explicit_captures_len: None,",
                "        literal: false,",
                "        alternation_literal: true,",
                "    }));",
                "    props.look_set_suffix_any();",
                "    assert_eq!(props.look_set_suffix_any().bits, 0xFFFF);",
                "    assert!(props.look_set_suffix_any().bits & (1 << Look::End as usize) != 0);",
                "    assert_eq!(props.look_set_suffix_any(), LookSet { bits: 0xFFFF });",
                "    assert_ne!(props.look_set_suffix_any(), LookSet { bits: 0 });",
                "    assert!(props.look_set_suffix_any().bits > 0);",
                "    assert!(props.look_set_suffix_any().bits <= 0xFFFF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let props = Properties(Box::new(PropertiesI {",
                "        minimum_len: Some(2),",
                "        maximum_len: Some(5),",
                "        look_set: LookSet { bits: 5 },",
                "        look_set_prefix: LookSet { bits: 5 },",
                "        look_set_suffix: LookSet { bits: 5 },",
                "        look_set_prefix_any: LookSet { bits: 5 },",
                "        look_set_suffix_any: LookSet { bits: 0xFFFF },",
                "        utf8: true,",
                "        explicit_captures_len: 2,",
                "        static_explicit_captures_len: Some(4),",
                "        literal: false,",
                "        alternation_literal: true,",
                "    }));",
                "    props.look_set_suffix_any();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(props.look_set_suffix_any().bits, 0xFFFF);",
                "    assert!(props.minimum_len().is_some());",
                "    assert_eq!(props.minimum_len().unwrap(), 2);",
                "    assert!(props.maximum_len().is_some());",
                "    assert_eq!(props.maximum_len().unwrap(), 5);",
                "    assert_eq!(props.look_set().bits, 5);",
                "    assert_eq!(props.look_set_prefix().bits, 5);",
                "    assert_eq!(props.look_set_suffix().bits, 5);",
                "    assert_eq!(props.look_set_prefix_any().bits, 5);",
                "    assert!(props.is_utf8());",
                "    assert_eq!(props.explicit_captures_len(), 2);",
                "    assert_eq!(props.static_explicit_captures_len().unwrap(), 4);",
                "    assert!(!props.is_literal());",
                "    assert!(props.is_alternation_literal());"
              ],
              "code": [
                "{",
                "    let props = Properties(Box::new(PropertiesI {",
                "        minimum_len: Some(2),",
                "        maximum_len: Some(5),",
                "        look_set: LookSet { bits: 5 },",
                "        look_set_prefix: LookSet { bits: 5 },",
                "        look_set_suffix: LookSet { bits: 5 },",
                "        look_set_prefix_any: LookSet { bits: 5 },",
                "        look_set_suffix_any: LookSet { bits: 0xFFFF },",
                "        utf8: true,",
                "        explicit_captures_len: 2,",
                "        static_explicit_captures_len: Some(4),",
                "        literal: false,",
                "        alternation_literal: true,",
                "    }));",
                "    props.look_set_suffix_any();",
                "    assert_eq!(props.look_set_suffix_any().bits, 0xFFFF);",
                "    assert!(props.minimum_len().is_some());",
                "    assert_eq!(props.minimum_len().unwrap(), 2);",
                "    assert!(props.maximum_len().is_some());",
                "    assert_eq!(props.maximum_len().unwrap(), 5);",
                "    assert_eq!(props.look_set().bits, 5);",
                "    assert_eq!(props.look_set_prefix().bits, 5);",
                "    assert_eq!(props.look_set_suffix().bits, 5);",
                "    assert_eq!(props.look_set_prefix_any().bits, 5);",
                "    assert!(props.is_utf8());",
                "    assert_eq!(props.explicit_captures_len(), 2);",
                "    assert_eq!(props.static_explicit_captures_len().unwrap(), 4);",
                "    assert!(!props.is_literal());",
                "    assert!(props.is_alternation_literal());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let props = Properties(Box::new(PropertiesI {",
                "        minimum_len: Some(1),",
                "        maximum_len: Some(10),",
                "        look_set: LookSet { bits: 6 },",
                "        look_set_prefix: LookSet { bits: 6 },",
                "        look_set_suffix: LookSet { bits: 6 },",
                "        look_set_prefix_any: LookSet { bits: 6 },",
                "        look_set_suffix_any: LookSet { bits: 0xFFFF },",
                "        utf8: true,",
                "        explicit_captures_len: 1,",
                "        static_explicit_captures_len: None,",
                "        literal: true,",
                "        alternation_literal: false,",
                "    }));",
                "    props.look_set_suffix_any();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(props.look_set_suffix_any().bits, 0xFFFF);",
                "    assert!(props.look_set_suffix_any().contains(Look::End));",
                "    assert_eq!(props.look_set_suffix_any(), LookSet { bits: 0xFFFF });",
                "    assert!(props.look_set_suffix_any() == LookSet { bits: 0xFFFF });",
                "    assert!(props.look_set_suffix_any().bits & 0xFFFF == 0xFFFF);"
              ],
              "code": [
                "{",
                "    let props = Properties(Box::new(PropertiesI {",
                "        minimum_len: Some(1),",
                "        maximum_len: Some(10),",
                "        look_set: LookSet { bits: 6 },",
                "        look_set_prefix: LookSet { bits: 6 },",
                "        look_set_suffix: LookSet { bits: 6 },",
                "        look_set_prefix_any: LookSet { bits: 6 },",
                "        look_set_suffix_any: LookSet { bits: 0xFFFF },",
                "        utf8: true,",
                "        explicit_captures_len: 1,",
                "        static_explicit_captures_len: None,",
                "        literal: true,",
                "        alternation_literal: false,",
                "    }));",
                "    props.look_set_suffix_any();",
                "    assert_eq!(props.look_set_suffix_any().bits, 0xFFFF);",
                "    assert!(props.look_set_suffix_any().contains(Look::End));",
                "    assert_eq!(props.look_set_suffix_any(), LookSet { bits: 0xFFFF });",
                "    assert!(props.look_set_suffix_any() == LookSet { bits: 0xFFFF });",
                "    assert!(props.look_set_suffix_any().bits & 0xFFFF == 0xFFFF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}