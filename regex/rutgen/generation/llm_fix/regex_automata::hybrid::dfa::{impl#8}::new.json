{
  "name": "regex_automata::hybrid::dfa::{impl#8}::new",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/dfa.rs:2886:5:2888:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Construct a Config instance with all optional fields set to default values and test boundary conditions for minimum cache clear count and minimum bytes per state as None and logged values.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_match_kind(), MatchKind::All);",
                "    assert_eq!(config.get_prefilter(), None);",
                "    assert_eq!(config.get_starts_for_each_pattern(), false);",
                "    assert_eq!(config.get_byte_classes(), false);",
                "    assert_eq!(config.get_unicode_word_boundary(), false);",
                "    assert_eq!(config.get_cache_capacity(), 0);",
                "    assert_eq!(config.get_skip_cache_capacity_check(), false);",
                "    assert_eq!(config.get_minimum_cache_clear_count(), None);",
                "    assert_eq!(config.get_minimum_bytes_per_state(), None);",
                "    assert_eq!(config.get_specialize_start_states(), false);"
              ],
              "code": [
                "{",
                "    let config = Config::new();",
                "    assert_eq!(config.get_match_kind(), MatchKind::All);",
                "    assert_eq!(config.get_prefilter(), None);",
                "    assert_eq!(config.get_starts_for_each_pattern(), false);",
                "    assert_eq!(config.get_byte_classes(), false);",
                "    assert_eq!(config.get_unicode_word_boundary(), false);",
                "    assert_eq!(config.get_cache_capacity(), 0);",
                "    assert_eq!(config.get_skip_cache_capacity_check(), false);",
                "    assert_eq!(config.get_minimum_cache_clear_count(), None);",
                "    assert_eq!(config.get_minimum_bytes_per_state(), None);",
                "    assert_eq!(config.get_specialize_start_states(), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut config = Config::new();",
                "    config = config.minimum_cache_clear_count(None);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_minimum_cache_clear_count(), None);"
              ],
              "code": [
                "{",
                "    let mut config = Config::new();",
                "    config = config.minimum_cache_clear_count(None);",
                "    assert_eq!(config.get_minimum_cache_clear_count(), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut config = Config::new();",
                "    config = config.minimum_cache_clear_count(Some(5));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_minimum_cache_clear_count(), Some(5));"
              ],
              "code": [
                "{",
                "    let mut config = Config::new();",
                "    config = config.minimum_cache_clear_count(Some(5));",
                "    assert_eq!(config.get_minimum_cache_clear_count(), Some(5));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut config = Config::new();",
                "    config = config.minimum_bytes_per_state(None);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_minimum_bytes_per_state(), None);"
              ],
              "code": [
                "{",
                "    let mut config = Config::new();",
                "    config = config.minimum_bytes_per_state(None);",
                "    assert_eq!(config.get_minimum_bytes_per_state(), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut config = Config::new();",
                "    config = config.minimum_bytes_per_state(Some(10));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_minimum_bytes_per_state(), Some(10));"
              ],
              "code": [
                "{",
                "    let mut config = Config::new();",
                "    config = config.minimum_bytes_per_state(Some(10));",
                "    assert_eq!(config.get_minimum_bytes_per_state(), Some(10));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}