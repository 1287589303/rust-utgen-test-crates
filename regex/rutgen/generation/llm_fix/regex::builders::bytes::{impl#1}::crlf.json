{
  "name": "regex::builders::bytes::{impl#1}::crlf",
  "mod_info": {
    "name": "builders::bytes",
    "loc": "src/builders.rs:1357:1:2539:2"
  },
  "visible": true,
  "loc": "src/builders.rs:2218:9:2221:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "valid boolean input for `yes` parameter in crlf method, including both true and false values\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexSetBuilder::new(vec![r\"^foo$\"]);",
                "    builder.crlf(true);",
                "    let _ = builder.build().unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.crlf(true), &mut builder);",
                "    assert_eq!(builder.builder.syntaxc.crlf, true);",
                "    assert!(builder.builder.pats.contains(&String::from(r\"^foo$\")));"
              ],
              "code": [
                "{",
                "    let mut builder = RegexSetBuilder::new(vec![r\"^foo$\"]);",
                "    builder.crlf(true);",
                "    let _ = builder.build().unwrap();",
                "    assert_eq!(builder.crlf(true), &mut builder);",
                "    assert_eq!(builder.builder.syntaxc.crlf, true);",
                "    assert!(builder.builder.pats.contains(&String::from(r\"^foo$\")));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexSetBuilder::new(vec![r\"^foo$\"]);",
                "    builder.crlf(false);",
                "    let _ = builder.build().unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.builder.syntaxc.crlf, false);",
                "    assert_eq!(builder.builder.pats.len(), 1);",
                "    assert_eq!(builder.builder.pats[0], r\"^foo$\");",
                "    assert!(builder.builder.size_limit(0).is_err());",
                "    assert!(builder.builder.dfa_size_limit(0).is_err());",
                "    assert!(builder.builder.nest_limit(0).is_err());"
              ],
              "code": [
                "{",
                "    let mut builder = RegexSetBuilder::new(vec![r\"^foo$\"]);",
                "    builder.crlf(false);",
                "    let _ = builder.build().unwrap();",
                "    assert_eq!(builder.builder.syntaxc.crlf, false);",
                "    assert_eq!(builder.builder.pats.len(), 1);",
                "    assert_eq!(builder.builder.pats[0], r\"^foo$\");",
                "    assert!(builder.builder.size_limit(0).is_err());",
                "    assert!(builder.builder.dfa_size_limit(0).is_err());",
                "    assert!(builder.builder.nest_limit(0).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}