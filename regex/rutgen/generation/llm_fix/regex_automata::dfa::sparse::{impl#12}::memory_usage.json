{
  "name": "regex_automata::dfa::sparse::{impl#12}::memory_usage",
  "mod_info": {
    "name": "dfa::sparse",
    "loc": "regex-automata/src/dfa/mod.rs:343:1:343:16"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/sparse.rs:2128:5:2130:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self.table must be a non-empty slice of bytes (length > 0) to avoid boundary case issues and should operate within a typical range of sizes, ensuring len is computed correctly from one byte (1) to the maximum expected length for performance (e.g., 256 bytes) depending on patterns and DFA configuration.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table = vec![0u8];",
                "    let start_map = StartByteMap { map: [Start::default(); 256] };",
                "    let start_table = StartTable {",
                "        table,",
                "        kind: StartKind::Both,",
                "        start_map,",
                "        stride: 1,",
                "        pattern_len: Some(1),",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: None,",
                "    };",
                "    let _ = start_table.memory_usage();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(start_table.memory_usage(), 1);"
              ],
              "code": [
                "{",
                "    let table = vec![0u8];",
                "    let start_map = StartByteMap { map: [Start::default(); 256] };",
                "    let start_table = StartTable {",
                "        table,",
                "        kind: StartKind::Both,",
                "        start_map,",
                "        stride: 1,",
                "        pattern_len: Some(1),",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: None,",
                "    };",
                "    let _ = start_table.memory_usage();",
                "    assert_eq!(start_table.memory_usage(), 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table = vec![0u8; 256];",
                "    let start_map = StartByteMap { map: [Start::default(); 256] };",
                "    let start_table = StartTable {",
                "        table,",
                "        kind: StartKind::Both,",
                "        start_map,",
                "        stride: 1,",
                "        pattern_len: Some(1),",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: None,",
                "    };",
                "    let _ = start_table.memory_usage();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(start_table.memory_usage(), 256);"
              ],
              "code": [
                "{",
                "    let table = vec![0u8; 256];",
                "    let start_map = StartByteMap { map: [Start::default(); 256] };",
                "    let start_table = StartTable {",
                "        table,",
                "        kind: StartKind::Both,",
                "        start_map,",
                "        stride: 1,",
                "        pattern_len: Some(1),",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: None,",
                "    };",
                "    let _ = start_table.memory_usage();",
                "    assert_eq!(start_table.memory_usage(), 256);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table = vec![0u8; 128];",
                "    let start_map = StartByteMap { map: [Start::default(); 256] };",
                "    let start_table = StartTable {",
                "        table,",
                "        kind: StartKind::Both,",
                "        start_map,",
                "        stride: 1,",
                "        pattern_len: Some(1),",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: None,",
                "    };",
                "    let _ = start_table.memory_usage();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(start_table.memory_usage(), 128);"
              ],
              "code": [
                "{",
                "    let table = vec![0u8; 128];",
                "    let start_map = StartByteMap { map: [Start::default(); 256] };",
                "    let start_table = StartTable {",
                "        table,",
                "        kind: StartKind::Both,",
                "        start_map,",
                "        stride: 1,",
                "        pattern_len: Some(1),",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: None,",
                "    };",
                "    let _ = start_table.memory_usage();",
                "    assert_eq!(start_table.memory_usage(), 128);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}