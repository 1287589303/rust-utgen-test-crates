{
  "name": "regex_syntax::hir::literal::rank",
  "mod_info": {
    "name": "hir::literal",
    "loc": "regex-syntax/src/hir/mod.rs:42:1:42:17"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/literal.rs:2319:1:2321:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: crate::rank::BYTE_FREQUENCIES[usize::from(byte)]\n"
      ],
      "input_infer": "Test input conditions/ranges: byte values from 0 to 255 inclusive.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte: u8 = 0;",
                "    let _ = rank(byte);",
                "}"
              ],
              "oracle": [
                "    let byte: u8 = 0; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);",
                "    let byte: u8 = 255; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);",
                "    let byte: u8 = 128; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);",
                "    let byte: u8 = 64; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);",
                "    let byte: u8 = 1; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);",
                "    let byte: u8 = 100; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);",
                "    let byte: u8 = 200; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);",
                "    let byte: u8 = 50; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);"
              ],
              "code": [
                "{",
                "    let byte: u8 = 0;",
                "    let _ = rank(byte);",
                "    let byte: u8 = 0; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);",
                "    let byte: u8 = 255; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);",
                "    let byte: u8 = 128; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);",
                "    let byte: u8 = 64; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);",
                "    let byte: u8 = 1; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);",
                "    let byte: u8 = 100; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);",
                "    let byte: u8 = 200; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);",
                "    let byte: u8 = 50; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte: u8 = 255;",
                "    let _ = rank(byte);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rank(0), crate::rank::BYTE_FREQUENCIES[0]);",
                "    assert_eq!(rank(255), crate::rank::BYTE_FREQUENCIES[255]);",
                "    assert!(rank(1) <= 255);",
                "    assert!(rank(1) >= 0);",
                "    assert_eq!(rank(128), crate::rank::BYTE_FREQUENCIES[128]);",
                "    assert_ne!(rank(10), rank(20));",
                "    assert_eq!(rank(50), crate::rank::BYTE_FREQUENCIES[50]);",
                "    assert!(rank(240) <= 255);",
                "    assert_eq!(rank(100), crate::rank::BYTE_FREQUENCIES[100]);",
                "    assert!(rank(0) >= 0);"
              ],
              "code": [
                "{",
                "    let byte: u8 = 255;",
                "    let _ = rank(byte);",
                "    assert_eq!(rank(0), crate::rank::BYTE_FREQUENCIES[0]);",
                "    assert_eq!(rank(255), crate::rank::BYTE_FREQUENCIES[255]);",
                "    assert!(rank(1) <= 255);",
                "    assert!(rank(1) >= 0);",
                "    assert_eq!(rank(128), crate::rank::BYTE_FREQUENCIES[128]);",
                "    assert_ne!(rank(10), rank(20));",
                "    assert_eq!(rank(50), crate::rank::BYTE_FREQUENCIES[50]);",
                "    assert!(rank(240) <= 255);",
                "    assert_eq!(rank(100), crate::rank::BYTE_FREQUENCIES[100]);",
                "    assert!(rank(0) >= 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte: u8 = 128;",
                "    let _ = rank(byte);",
                "}"
              ],
              "oracle": [
                "    let byte: u8 = 0; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);",
                "    let byte: u8 = 1; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);",
                "    let byte: u8 = 127; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);",
                "    let byte: u8 = 255; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);",
                "    let byte: u8 = 64; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);",
                "    let byte: u8 = 255; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);",
                "    let byte: u8 = 32; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);",
                "    let byte: u8 = 16; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);",
                "    let byte: u8 = 200; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);",
                "    let byte: u8 = 255; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);"
              ],
              "code": [
                "{",
                "    let byte: u8 = 128;",
                "    let _ = rank(byte);",
                "    let byte: u8 = 0; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);",
                "    let byte: u8 = 1; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);",
                "    let byte: u8 = 127; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);",
                "    let byte: u8 = 255; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);",
                "    let byte: u8 = 64; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);",
                "    let byte: u8 = 255; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);",
                "    let byte: u8 = 32; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);",
                "    let byte: u8 = 16; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);",
                "    let byte: u8 = 200; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);",
                "    let byte: u8 = 255; assert_eq!(rank(byte), crate::rank::BYTE_FREQUENCIES[usize::from(byte)]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte: u8 = 10;",
                "    let _ = rank(byte);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rank(0), crate::rank::BYTE_FREQUENCIES[0]);",
                "    assert_eq!(rank(255), crate::rank::BYTE_FREQUENCIES[255]);",
                "    assert_eq!(rank(10), crate::rank::BYTE_FREQUENCIES[10]);",
                "    assert_eq!(rank(100), crate::rank::BYTE_FREQUENCIES[100]);",
                "    assert_eq!(rank(50), crate::rank::BYTE_FREQUENCIES[50]);",
                "    assert_eq!(rank(1), crate::rank::BYTE_FREQUENCIES[1]);",
                "    assert_eq!(rank(200), crate::rank::BYTE_FREQUENCIES[200]);",
                "    assert_eq!(rank(127), crate::rank::BYTE_FREQUENCIES[127]);",
                "    assert_eq!(rank(30), crate::rank::BYTE_FREQUENCIES[30]);",
                "    assert_eq!(rank(255), crate::rank::BYTE_FREQUENCIES[255]);"
              ],
              "code": [
                "{",
                "    let byte: u8 = 10;",
                "    let _ = rank(byte);",
                "    assert_eq!(rank(0), crate::rank::BYTE_FREQUENCIES[0]);",
                "    assert_eq!(rank(255), crate::rank::BYTE_FREQUENCIES[255]);",
                "    assert_eq!(rank(10), crate::rank::BYTE_FREQUENCIES[10]);",
                "    assert_eq!(rank(100), crate::rank::BYTE_FREQUENCIES[100]);",
                "    assert_eq!(rank(50), crate::rank::BYTE_FREQUENCIES[50]);",
                "    assert_eq!(rank(1), crate::rank::BYTE_FREQUENCIES[1]);",
                "    assert_eq!(rank(200), crate::rank::BYTE_FREQUENCIES[200]);",
                "    assert_eq!(rank(127), crate::rank::BYTE_FREQUENCIES[127]);",
                "    assert_eq!(rank(30), crate::rank::BYTE_FREQUENCIES[30]);",
                "    assert_eq!(rank(255), crate::rank::BYTE_FREQUENCIES[255]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte: u8 = 245;",
                "    let _ = rank(byte);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rank(0), crate::rank::BYTE_FREQUENCIES[0]);",
                "    assert_eq!(rank(255), crate::rank::BYTE_FREQUENCIES[255]);",
                "    assert_eq!(rank(128), crate::rank::BYTE_FREQUENCIES[128]);",
                "    assert_eq!(rank(100), crate::rank::BYTE_FREQUENCIES[100]);",
                "    assert_eq!(rank(50), crate::rank::BYTE_FREQUENCIES[50]);",
                "    assert_eq!(rank(10), crate::rank::BYTE_FREQUENCIES[10]);",
                "    assert_eq!(rank(245), crate::rank::BYTE_FREQUENCIES[245]);",
                "    assert_eq!(rank(1), crate::rank::BYTE_FREQUENCIES[1]);",
                "    assert_eq!(rank(200), crate::rank::BYTE_FREQUENCIES[200]);",
                "    assert_eq!(rank(20), crate::rank::BYTE_FREQUENCIES[20]);"
              ],
              "code": [
                "{",
                "    let byte: u8 = 245;",
                "    let _ = rank(byte);",
                "    assert_eq!(rank(0), crate::rank::BYTE_FREQUENCIES[0]);",
                "    assert_eq!(rank(255), crate::rank::BYTE_FREQUENCIES[255]);",
                "    assert_eq!(rank(128), crate::rank::BYTE_FREQUENCIES[128]);",
                "    assert_eq!(rank(100), crate::rank::BYTE_FREQUENCIES[100]);",
                "    assert_eq!(rank(50), crate::rank::BYTE_FREQUENCIES[50]);",
                "    assert_eq!(rank(10), crate::rank::BYTE_FREQUENCIES[10]);",
                "    assert_eq!(rank(245), crate::rank::BYTE_FREQUENCIES[245]);",
                "    assert_eq!(rank(1), crate::rank::BYTE_FREQUENCIES[1]);",
                "    assert_eq!(rank(200), crate::rank::BYTE_FREQUENCIES[200]);",
                "    assert_eq!(rank(20), crate::rank::BYTE_FREQUENCIES[20]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}