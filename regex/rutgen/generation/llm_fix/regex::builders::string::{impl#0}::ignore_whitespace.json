{
  "name": "regex::builders::string::{impl#0}::ignore_whitespace",
  "mod_info": {
    "name": "builders::string",
    "loc": "src/builders.rs:200:1:1355:2"
  },
  "visible": true,
  "loc": "src/builders.rs:616:9:619:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "pat: non-empty string (valid regex pattern), yes: boolean (true/false)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pat = r\"\\b(?<first>\\p{Uppercase}\\w*)\\s+(?<last>\\p{Uppercase}\\w*)\\b\";",
                "    let result = RegexBuilder::new(pat)",
                "        .ignore_whitespace(true)",
                "        .build();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    let regex = result.unwrap();",
                "    assert!(regex.is_unrestricted());",
                "    assert_eq!(regex.pats.len(), 1);",
                "    assert!(regex.pats[0].contains(\" \"));",
                "    assert!(regex.ignore_whitespace);"
              ],
              "code": [
                "{",
                "    let pat = r\"\\b(?<first>\\p{Uppercase}\\w*)\\s+(?<last>\\p{Uppercase}\\w*)\\b\";",
                "    let result = RegexBuilder::new(pat)",
                "        .ignore_whitespace(true)",
                "        .build();",
                "    assert!(result.is_ok());",
                "    let regex = result.unwrap();",
                "    assert!(regex.is_unrestricted());",
                "    assert_eq!(regex.pats.len(), 1);",
                "    assert!(regex.pats[0].contains(\" \"));",
                "    assert!(regex.ignore_whitespace);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pat = r\"\\b(?<first>\\p{Uppercase}\\w*)\\s+(?<last>\\p{Uppercase}\\w*)\\b\";",
                "    let result = RegexBuilder::new(pat)",
                "        .ignore_whitespace(false)",
                "        .build();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(result.unwrap().captures(\"Harry Potter\").is_some(), true);",
                "    assert_eq!(result.unwrap().captures(\"Harry J. Potter\").is_some(), true);",
                "    assert_eq!(result.unwrap().captures(\"Harry James Potter\").is_some(), true);",
                "    assert_eq!(result.unwrap().captures(\"Harry  Potter\").is_none(), false);",
                "    assert_eq!(result.unwrap().captures(\"  Harry Potter\").is_none(), false);",
                "    assert_eq!(result.unwrap().captures(\"Harry  \").is_none(), false);"
              ],
              "code": [
                "{",
                "    let pat = r\"\\b(?<first>\\p{Uppercase}\\w*)\\s+(?<last>\\p{Uppercase}\\w*)\\b\";",
                "    let result = RegexBuilder::new(pat)",
                "        .ignore_whitespace(false)",
                "        .build();",
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(result.unwrap().captures(\"Harry Potter\").is_some(), true);",
                "    assert_eq!(result.unwrap().captures(\"Harry J. Potter\").is_some(), true);",
                "    assert_eq!(result.unwrap().captures(\"Harry James Potter\").is_some(), true);",
                "    assert_eq!(result.unwrap().captures(\"Harry  Potter\").is_none(), false);",
                "    assert_eq!(result.unwrap().captures(\"  Harry Potter\").is_none(), false);",
                "    assert_eq!(result.unwrap().captures(\"Harry  \").is_none(), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pat = \"\";",
                "    let result = RegexBuilder::new(pat)",
                "        .ignore_whitespace(true)",
                "        .build();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(result.unwrap().is_empty(), true);",
                "    assert_eq!(result.unwrap().captures(\"test\").is_none(), true);",
                "    assert_eq!(result.unwrap().is_match(\"test\"), false);"
              ],
              "code": [
                "{",
                "    let pat = \"\";",
                "    let result = RegexBuilder::new(pat)",
                "        .ignore_whitespace(true)",
                "        .build();",
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(result.unwrap().is_empty(), true);",
                "    assert_eq!(result.unwrap().captures(\"test\").is_none(), true);",
                "    assert_eq!(result.unwrap().is_match(\"test\"), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pat = r\"",
                "        \\b",
                "        (?<first>\\p{Uppercase}\\w*)  # first name",
                "        [\\s--\\n]+                   # separator",
                "        (?<last>\\p{Uppercase}\\w*)",
                "        \\b",
                "    \";",
                "    let result = RegexBuilder::new(pat)",
                "        .ignore_whitespace(true)",
                "        .build();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    let regex = result.unwrap();",
                "    assert!(regex.is_match(\"John Doe\"));",
                "    assert!(regex.is_match(\"Alice Smith\"));",
                "    assert!(!regex.is_match(\"john doe\"));",
                "    assert!(!regex.is_match(\"123 Doe\"));",
                "    assert_eq!(regex.captures(\"John Doe\").unwrap()[\"first\"], \"John\");",
                "    assert_eq!(regex.captures(\"Alice Smith\").unwrap()[\"last\"], \"Smith\");"
              ],
              "code": [
                "{",
                "    let pat = r\"",
                "        \\b",
                "        (?<first>\\p{Uppercase}\\w*)  # first name",
                "        [\\s--\\n]+                   # separator",
                "        (?<last>\\p{Uppercase}\\w*)",
                "        \\b",
                "    \";",
                "    let result = RegexBuilder::new(pat)",
                "        .ignore_whitespace(true)",
                "        .build();",
                "    assert!(result.is_ok());",
                "    let regex = result.unwrap();",
                "    assert!(regex.is_match(\"John Doe\"));",
                "    assert!(regex.is_match(\"Alice Smith\"));",
                "    assert!(!regex.is_match(\"john doe\"));",
                "    assert!(!regex.is_match(\"123 Doe\"));",
                "    assert_eq!(regex.captures(\"John Doe\").unwrap()[\"first\"], \"John\");",
                "    assert_eq!(regex.captures(\"Alice Smith\").unwrap()[\"last\"], \"Smith\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pat = r\"\\b(?<first>\\p{Uppercase}\\w*)\\s+[&*#]+\\s+(?<last>\\p{Uppercase}\\w*)\\b\";",
                "    let result = RegexBuilder::new(pat)",
                "        .ignore_whitespace(true)",
                "        .build();",
                "}"
              ],
              "oracle": [
                "    let pat = r\"\\b(?<first>\\p{Uppercase}\\w*)\\s+[&*#]+\\s+(?<last>\\p{Uppercase}\\w*)\\b\";",
                "    let result = RegexBuilder::new(pat).ignore_whitespace(true).build();",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap().is_verbose(), true);"
              ],
              "code": [
                "{",
                "    let pat = r\"\\b(?<first>\\p{Uppercase}\\w*)\\s+[&*#]+\\s+(?<last>\\p{Uppercase}\\w*)\\b\";",
                "    let result = RegexBuilder::new(pat)",
                "        .ignore_whitespace(true)",
                "        .build();",
                "    let pat = r\"\\b(?<first>\\p{Uppercase}\\w*)\\s+[&*#]+\\s+(?<last>\\p{Uppercase}\\w*)\\b\";",
                "    let result = RegexBuilder::new(pat).ignore_whitespace(true).build();",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap().is_verbose(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}