{
  "name": "regex_syntax::hir::{impl#12}::try_case_fold_simple",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:1122:5:1126:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self.set must be initialized with a valid IntervalSet containing at least one ClassUnicodeRange with valid start and end characters (e.g. 'a', 'z') for successful case folding, or an uninitialized set results in an error (Err(CaseFoldError)) if unicode-case feature is disabled.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let valid_range = ClassUnicodeRange { start: 'a', end: 'z' };",
                "    let interval_set = IntervalSet::new(vec![valid_range]);",
                "    let mut class_unicode = ClassUnicode { set: interval_set };",
                "    let _ = class_unicode.try_case_fold_simple();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_unicode.ranges().len(), 2);",
                "    assert!(class_unicode.ranges().contains(&ClassUnicodeRange { start: 'a', end: 'z' }));",
                "    assert!(class_unicode.ranges().contains(&ClassUnicodeRange { start: 'A', end: 'Z' }));",
                "    assert!(class_unicode.set.folded);",
                "    assert!(class_unicode.set.is_canonical());"
              ],
              "code": [
                "{",
                "    let valid_range = ClassUnicodeRange { start: 'a', end: 'z' };",
                "    let interval_set = IntervalSet::new(vec![valid_range]);",
                "    let mut class_unicode = ClassUnicode { set: interval_set };",
                "    let _ = class_unicode.try_case_fold_simple();",
                "    assert_eq!(class_unicode.ranges().len(), 2);",
                "    assert!(class_unicode.ranges().contains(&ClassUnicodeRange { start: 'a', end: 'z' }));",
                "    assert!(class_unicode.ranges().contains(&ClassUnicodeRange { start: 'A', end: 'Z' }));",
                "    assert!(class_unicode.set.folded);",
                "    assert!(class_unicode.set.is_canonical());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let interval_set = IntervalSet { ranges: vec![], folded: false };",
                "    let mut class_unicode = ClassUnicode { set: interval_set };",
                "    let _ = class_unicode.try_case_fold_simple();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_unicode.set.folded, true);",
                "    assert!(class_unicode.set.ranges.is_empty());",
                "    assert_eq!(class_unicode.try_case_fold_simple(), Err(CaseFoldError(())));",
                "    assert!(class_unicode.try_case_fold_simple().is_err());"
              ],
              "code": [
                "{",
                "    let interval_set = IntervalSet { ranges: vec![], folded: false };",
                "    let mut class_unicode = ClassUnicode { set: interval_set };",
                "    let _ = class_unicode.try_case_fold_simple();",
                "    assert_eq!(class_unicode.set.folded, true);",
                "    assert!(class_unicode.set.ranges.is_empty());",
                "    assert_eq!(class_unicode.try_case_fold_simple(), Err(CaseFoldError(())));",
                "    assert!(class_unicode.try_case_fold_simple().is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}