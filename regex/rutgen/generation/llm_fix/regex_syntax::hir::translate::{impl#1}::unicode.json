{
  "name": "regex_syntax::hir::translate::{impl#1}::unicode",
  "mod_info": {
    "name": "hir::translate",
    "loc": "regex-syntax/src/hir/mod.rs:44:1:44:19"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/translate.rs:132:5:135:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: yes at line 133 is true\n",
        "expected return value/type: self\n"
      ],
      "input_infer": "yes: true, return type: &mut TranslatorBuilder\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = TranslatorBuilder::new();",
                "    let result = builder.unicode(true);",
                "}"
              ],
              "oracle": [
                "    assert!(result.flags.unicode.is_none());"
              ],
              "code": [
                "{",
                "    let mut builder = TranslatorBuilder::new();",
                "    let result = builder.unicode(true);",
                "    assert!(result.flags.unicode.is_none());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = TranslatorBuilder::new();",
                "    let result = builder.unicode(false);",
                "}"
              ],
              "oracle": [
                "    let mut builder = TranslatorBuilder::new();",
                "    let result = builder.unicode(true);",
                "    assert_eq!(result.flags.unicode, None);"
              ],
              "code": [
                "{",
                "    let mut builder = TranslatorBuilder::new();",
                "    let result = builder.unicode(false);",
                "    let mut builder = TranslatorBuilder::new();",
                "    let result = builder.unicode(true);",
                "    assert_eq!(result.flags.unicode, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: yes at line 133 is false\n",
        "expected return value/type: self\n"
      ],
      "input_infer": "yes: bool = false;\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = TranslatorBuilder::new();",
                "    builder.unicode(false);",
                "}"
              ],
              "oracle": [
                "    builder.flags.unicode.assert_eq(Some(false));"
              ],
              "code": [
                "{",
                "    let mut builder = TranslatorBuilder::new();",
                "    builder.unicode(false);",
                "    builder.flags.unicode.assert_eq(Some(false));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = TranslatorBuilder::new();",
                "    builder.unicode(false).unicode(false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.flags.unicode, Some(false));"
              ],
              "code": [
                "{",
                "    let mut builder = TranslatorBuilder::new();",
                "    builder.unicode(false).unicode(false);",
                "    assert_eq!(builder.flags.unicode, Some(false));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = TranslatorBuilder::new();",
                "    builder.case_insensitive(true)",
                "           .multi_line(true)",
                "           .unicode(false);",
                "}"
              ],
              "oracle": [
                "    builder.unicode(false).flags.unicode.is_some() == Some(false)"
              ],
              "code": [
                "{",
                "    let mut builder = TranslatorBuilder::new();",
                "    builder.case_insensitive(true)",
                "           .multi_line(true)",
                "           .unicode(false);",
                "    builder.unicode(false).flags.unicode.is_some() == Some(false)",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}