{
  "name": "regex_automata::meta::regex::{impl#21}::build_from_hir",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:3482:5:3484:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Valid `Hir` instances that include various regex constructs (e.g., literals, character classes, lookarounds); edge cases like empty `Hir` structures or invalid patterns that should return `BuildError`.\n",
      "answers": [
        {
          "uses": [
            "use regex_syntax::hir::Hir;",
            "use regex_syntax::hir::Look;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use regex_syntax::hir::{Hir, Look};",
                "    ",
                "    let hir = Hir::literal(\"foo\".as_bytes());",
                "    let builder = Builder::new();",
                "    let _regex = builder.build_from_hir(&hir);",
                "}"
              ],
              "oracle": [
                "    assert!(_regex.is_ok());",
                "    let regex = _regex.unwrap();",
                "    assert!(regex.pool.capacity() > 0);",
                "    assert_eq!(regex.imp.strat.patterns.len(), 1);",
                "    assert_eq!(regex.imp.info.hirs.len(), 1);",
                "    assert_eq!(regex.imp.info.hirs[0].as_ref().to_bytes(), b\"foo\");"
              ],
              "code": [
                "{",
                "    use regex_syntax::hir::{Hir, Look};",
                "    ",
                "    let hir = Hir::literal(\"foo\".as_bytes());",
                "    let builder = Builder::new();",
                "    let _regex = builder.build_from_hir(&hir);",
                "    assert!(_regex.is_ok());",
                "    let regex = _regex.unwrap();",
                "    assert!(regex.pool.capacity() > 0);",
                "    assert_eq!(regex.imp.strat.patterns.len(), 1);",
                "    assert_eq!(regex.imp.info.hirs.len(), 1);",
                "    assert_eq!(regex.imp.info.hirs[0].as_ref().to_bytes(), b\"foo\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use regex_syntax::hir::{Hir, Look};",
                "",
                "    let hir = Hir::concat(vec![",
                "        Hir::look(Look::StartCRLF),",
                "        Hir::literal(\"foo\".as_bytes()),",
                "        Hir::look(Look::EndCRLF),",
                "    ]);",
                "    let builder = Builder::new();",
                "    let _regex = builder.build_from_hir(&hir);",
                "}"
              ],
              "oracle": [
                "    assert!(_regex.is_ok());",
                "    let regex = _regex.unwrap();",
                "    assert_eq!(regex.imp.strat.pattern_count(), 1);",
                "    assert!(regex.pool.is_empty());",
                "    assert!(regex.imp.info.has_captures());",
                "    assert_eq!(regex.imp.info.config.match_kind, None);",
                "    assert!(regex.imp.info.config.pre.is_none());",
                "    assert_eq!(regex.imp.info.config.starts_for_each_pattern, None);",
                "    assert!(regex.imp.info.config.byte_classes.is_none());",
                "    assert!(regex.imp.info.config.unicode_word_boundary.is_none());"
              ],
              "code": [
                "{",
                "    use regex_syntax::hir::{Hir, Look};",
                "",
                "    let hir = Hir::concat(vec![",
                "        Hir::look(Look::StartCRLF),",
                "        Hir::literal(\"foo\".as_bytes()),",
                "        Hir::look(Look::EndCRLF),",
                "    ]);",
                "    let builder = Builder::new();",
                "    let _regex = builder.build_from_hir(&hir);",
                "    assert!(_regex.is_ok());",
                "    let regex = _regex.unwrap();",
                "    assert_eq!(regex.imp.strat.pattern_count(), 1);",
                "    assert!(regex.pool.is_empty());",
                "    assert!(regex.imp.info.has_captures());",
                "    assert_eq!(regex.imp.info.config.match_kind, None);",
                "    assert!(regex.imp.info.config.pre.is_none());",
                "    assert_eq!(regex.imp.info.config.starts_for_each_pattern, None);",
                "    assert!(regex.imp.info.config.byte_classes.is_none());",
                "    assert!(regex.imp.info.config.unicode_word_boundary.is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use regex_syntax::hir::{Hir, Look};",
                "",
                "    let hir = Hir::alternation(vec![",
                "        Hir::literal(\"foo\".as_bytes()),",
                "        Hir::literal(\"bar\".as_bytes()),",
                "    ]);",
                "    let builder = Builder::new();",
                "    let _regex = builder.build_from_hir(&hir);",
                "}"
              ],
              "oracle": [
                "    assert!(_regex.is_ok());",
                "    let regex = _regex.unwrap();",
                "    let hay_1 = \"foo\";",
                "    let hay_2 = \"bar\";",
                "    assert_eq!(Some(Match::must(0, 0..3)), regex.find(hay_1));",
                "    assert_eq!(Some(Match::must(0, 0..3)), regex.find(hay_2));",
                "    let hay_3 = \"baz\";",
                "    assert_eq!(None, regex.find(hay_3));"
              ],
              "code": [
                "{",
                "    use regex_syntax::hir::{Hir, Look};",
                "",
                "    let hir = Hir::alternation(vec![",
                "        Hir::literal(\"foo\".as_bytes()),",
                "        Hir::literal(\"bar\".as_bytes()),",
                "    ]);",
                "    let builder = Builder::new();",
                "    let _regex = builder.build_from_hir(&hir);",
                "    assert!(_regex.is_ok());",
                "    let regex = _regex.unwrap();",
                "    let hay_1 = \"foo\";",
                "    let hay_2 = \"bar\";",
                "    assert_eq!(Some(Match::must(0, 0..3)), regex.find(hay_1));",
                "    assert_eq!(Some(Match::must(0, 0..3)), regex.find(hay_2));",
                "    let hay_3 = \"baz\";",
                "    assert_eq!(None, regex.find(hay_3));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use regex_syntax::hir::Hir;",
                "",
                "    let hir = Hir::empty();",
                "    let builder = Builder::new();",
                "    let _regex = builder.build_from_hir(&hir);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_regex.is_ok(), true);",
                "    assert!(_regex.unwrap().imp.is_some());",
                "    let hir_invalid = Hir::literal(\"invalid_pattern\".as_bytes());",
                "    let _regex_invalid = builder.build_from_hir(&hir_invalid);",
                "    assert_eq!(_regex_invalid.is_err(), true);",
                "    let valid_hir = Hir::literal(\"foo\".as_bytes());",
                "    let _valid_regex = builder.build_from_hir(&valid_hir);",
                "    assert_eq!(_valid_regex.is_ok(), true);",
                "    let hay = \"foo\";",
                "    assert_eq!(_valid_regex.unwrap().find(hay), Some(Match::must(0, 0..3)));"
              ],
              "code": [
                "{",
                "    use regex_syntax::hir::Hir;",
                "",
                "    let hir = Hir::empty();",
                "    let builder = Builder::new();",
                "    let _regex = builder.build_from_hir(&hir);",
                "    assert_eq!(_regex.is_ok(), true);",
                "    assert!(_regex.unwrap().imp.is_some());",
                "    let hir_invalid = Hir::literal(\"invalid_pattern\".as_bytes());",
                "    let _regex_invalid = builder.build_from_hir(&hir_invalid);",
                "    assert_eq!(_regex_invalid.is_err(), true);",
                "    let valid_hir = Hir::literal(\"foo\".as_bytes());",
                "    let _valid_regex = builder.build_from_hir(&valid_hir);",
                "    assert_eq!(_valid_regex.is_ok(), true);",
                "    let hay = \"foo\";",
                "    assert_eq!(_valid_regex.unwrap().find(hay), Some(Match::must(0, 0..3)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    use regex_syntax::hir::{Hir, Look};",
                "",
                "    let hir = Hir::look(Look::StartCRLF); // Example of an invalid pattern",
                "    let builder = Builder::new();",
                "    let _regex = builder.build_from_hir(&hir);",
                "}"
              ],
              "oracle": [
                "    assert!(builder.build_from_hir(&hir).is_err());"
              ],
              "code": [
                "{",
                "    use regex_syntax::hir::{Hir, Look};",
                "",
                "    let hir = Hir::look(Look::StartCRLF); // Example of an invalid pattern",
                "    let builder = Builder::new();",
                "    let _regex = builder.build_from_hir(&hir);",
                "    assert!(builder.build_from_hir(&hir).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}