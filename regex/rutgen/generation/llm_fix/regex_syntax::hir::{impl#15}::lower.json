{
  "name": "regex_syntax::hir::{impl#15}::lower",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:1270:5:1272:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.start\n"
      ],
      "input_infer": "start: any valid char; end: any valid char where start <= end\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ClassUnicodeRange { start: 'a', end: 'z' };",
                "    let result = range.lower();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 'a');"
              ],
              "code": [
                "{",
                "    let range = ClassUnicodeRange { start: 'a', end: 'z' };",
                "    let result = range.lower();",
                "    assert_eq!(result, 'a');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ClassUnicodeRange { start: '\\0', end: '\\u{10FFFF}' };",
                "    let result = range.lower();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, '\\0');"
              ],
              "code": [
                "{",
                "    let range = ClassUnicodeRange { start: '\\0', end: '\\u{10FFFF}' };",
                "    let result = range.lower();",
                "    assert_eq!(result, '\\0');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ClassUnicodeRange { start: 'x', end: 'x' };",
                "    let result = range.lower();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 'x');"
              ],
              "code": [
                "{",
                "    let range = ClassUnicodeRange { start: 'x', end: 'x' };",
                "    let result = range.lower();",
                "    assert_eq!(result, 'x');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ClassUnicodeRange { start: 'A', end: 'Z' };",
                "    let result = range.lower();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 'A');"
              ],
              "code": [
                "{",
                "    let range = ClassUnicodeRange { start: 'A', end: 'Z' };",
                "    let result = range.lower();",
                "    assert_eq!(result, 'A');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ClassUnicodeRange { start: '#', end: '*' };",
                "    let result = range.lower();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, '#');"
              ],
              "code": [
                "{",
                "    let range = ClassUnicodeRange { start: '#', end: '*' };",
                "    let result = range.lower();",
                "    assert_eq!(result, '#');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}