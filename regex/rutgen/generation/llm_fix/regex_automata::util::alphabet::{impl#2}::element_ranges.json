{
  "name": "regex_automata::util::alphabet::{impl#2}::element_ranges",
  "mod_info": {
    "name": "util::alphabet",
    "loc": "regex-automata/src/util/mod.rs:30:1:30:18"
  },
  "visible": false,
  "loc": "regex-automata/src/util/alphabet.rs:480:5:482:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: ByteClassElementRanges { elements: self.elements(class), range: None }\n"
      ],
      "input_infer": "class: valid instance of Unit; bytes: 0 to 255 for ByteClasses elements; valid state of ByteClasses instance.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut byte_classes = ByteClasses::empty();",
                "    let unit = byte_classes.eoi();",
                "    let _result = byte_classes.element_ranges(unit);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, ByteClassElementRanges { elements: byte_classes.elements(unit), range: None });"
              ],
              "code": [
                "{",
                "    let mut byte_classes = ByteClasses::empty();",
                "    let unit = byte_classes.eoi();",
                "    let _result = byte_classes.element_ranges(unit);",
                "    assert_eq!(_result, ByteClassElementRanges { elements: byte_classes.elements(unit), range: None });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut byte_classes = ByteClasses::singletons();",
                "    let unit = byte_classes.eoi();",
                "    let _result = byte_classes.element_ranges(unit);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result.elements.classes, byte_classes.elements(unit));",
                "    assert!(matches!(_result.range, None));"
              ],
              "code": [
                "{",
                "    let mut byte_classes = ByteClasses::singletons();",
                "    let unit = byte_classes.eoi();",
                "    let _result = byte_classes.element_ranges(unit);",
                "    assert_eq!(_result.elements.classes, byte_classes.elements(unit));",
                "    assert!(matches!(_result.range, None));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut byte_classes = ByteClasses::empty();",
                "    byte_classes.set(0, 1);",
                "    let unit = Unit(1);",
                "    let _result = byte_classes.element_ranges(unit);",
                "}"
              ],
              "oracle": [
                "    let byte_classes = ByteClasses::empty();",
                "    let unit = Unit(1);",
                "    let result = byte_classes.element_ranges(unit);",
                "    assert_eq!(result.range, None);",
                "    assert_eq!(result.elements.class, unit);",
                "    assert_eq!(result.elements.byte, 0);",
                "    assert!(matches!(result.elements.classes, &byte_classes));"
              ],
              "code": [
                "{",
                "    let mut byte_classes = ByteClasses::empty();",
                "    byte_classes.set(0, 1);",
                "    let unit = Unit(1);",
                "    let _result = byte_classes.element_ranges(unit);",
                "    let byte_classes = ByteClasses::empty();",
                "    let unit = Unit(1);",
                "    let result = byte_classes.element_ranges(unit);",
                "    assert_eq!(result.range, None);",
                "    assert_eq!(result.elements.class, unit);",
                "    assert_eq!(result.elements.byte, 0);",
                "    assert!(matches!(result.elements.classes, &byte_classes));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut byte_classes = ByteClasses::empty();",
                "    byte_classes.set(0, 1);",
                "    let unit = Unit(0);",
                "    let _result = byte_classes.element_ranges(unit);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, ByteClassElementRanges { elements: byte_classes.elements(unit), range: None });"
              ],
              "code": [
                "{",
                "    let mut byte_classes = ByteClasses::empty();",
                "    byte_classes.set(0, 1);",
                "    let unit = Unit(0);",
                "    let _result = byte_classes.element_ranges(unit);",
                "    assert_eq!(_result, ByteClassElementRanges { elements: byte_classes.elements(unit), range: None });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut byte_classes = ByteClasses::empty();",
                "    byte_classes.set(255, 1);",
                "    let unit = Unit(255);",
                "    let _result = byte_classes.element_ranges(unit);",
                "}"
              ],
              "oracle": [
                "    let mut byte_classes = ByteClasses::empty();",
                "    byte_classes.set(255, 1);",
                "    let unit = Unit(255);",
                "    let result = byte_classes.element_ranges(unit);",
                "    assert_eq!(result.range, None);",
                "    assert_eq!(result.elements.class, unit);",
                "    assert_eq!(result.elements.byte, 0);"
              ],
              "code": [
                "{",
                "    let mut byte_classes = ByteClasses::empty();",
                "    byte_classes.set(255, 1);",
                "    let unit = Unit(255);",
                "    let _result = byte_classes.element_ranges(unit);",
                "    let mut byte_classes = ByteClasses::empty();",
                "    byte_classes.set(255, 1);",
                "    let unit = Unit(255);",
                "    let result = byte_classes.element_ranges(unit);",
                "    assert_eq!(result.range, None);",
                "    assert_eq!(result.elements.class, unit);",
                "    assert_eq!(result.elements.byte, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}