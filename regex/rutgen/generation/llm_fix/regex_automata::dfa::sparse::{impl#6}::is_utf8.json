{
  "name": "regex_automata::dfa::sparse::{impl#6}::is_utf8",
  "mod_info": {
    "name": "dfa::sparse",
    "loc": "regex-automata/src/dfa/mod.rs:343:1:343:16"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/sparse.rs:1187:5:1189:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.flags.is_utf8\n"
      ],
      "input_infer": "self.flags.is_utf8 must be a boolean, with test input conditions for both true and false scenarios.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dfa = DFA {",
                "        tt: Transitions { sparse: vec![] },",
                "        st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::new(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
                "        special: Special { max: 0, quit_id: 1, min_match: 2, max_match: 3, min_accel: 4, max_accel: 5, min_start: 6, max_start: 7 },",
                "        pre: None,",
                "        quitset: ByteSet::default(),",
                "        flags: Flags { has_empty: false, is_utf8: true, is_always_start_anchored: false },",
                "    };",
                "",
                "    let _ = dfa.is_utf8();",
                "}"
              ],
              "oracle": [
                "    assert!(dfa.is_utf8() == true);",
                "    assert!(dfa.flags.is_utf8 == true);"
              ],
              "code": [
                "{",
                "    let dfa = DFA {",
                "        tt: Transitions { sparse: vec![] },",
                "        st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::new(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
                "        special: Special { max: 0, quit_id: 1, min_match: 2, max_match: 3, min_accel: 4, max_accel: 5, min_start: 6, max_start: 7 },",
                "        pre: None,",
                "        quitset: ByteSet::default(),",
                "        flags: Flags { has_empty: false, is_utf8: true, is_always_start_anchored: false },",
                "    };",
                "",
                "    let _ = dfa.is_utf8();",
                "    assert!(dfa.is_utf8() == true);",
                "    assert!(dfa.flags.is_utf8 == true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dfa = DFA {",
                "        tt: Transitions { sparse: vec![] },",
                "        st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::new(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
                "        special: Special { max: 0, quit_id: 1, min_match: 2, max_match: 3, min_accel: 4, max_accel: 5, min_start: 6, max_start: 7 },",
                "        pre: None,",
                "        quitset: ByteSet::default(),",
                "        flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false },",
                "    };",
                "",
                "    let _ = dfa.is_utf8();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dfa.flags.is_utf8, false);",
                "    assert!(!dfa.is_utf8());"
              ],
              "code": [
                "{",
                "    let dfa = DFA {",
                "        tt: Transitions { sparse: vec![] },",
                "        st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::new(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
                "        special: Special { max: 0, quit_id: 1, min_match: 2, max_match: 3, min_accel: 4, max_accel: 5, min_start: 6, max_start: 7 },",
                "        pre: None,",
                "        quitset: ByteSet::default(),",
                "        flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false },",
                "    };",
                "",
                "    let _ = dfa.is_utf8();",
                "    assert_eq!(dfa.flags.is_utf8, false);",
                "    assert!(!dfa.is_utf8());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}