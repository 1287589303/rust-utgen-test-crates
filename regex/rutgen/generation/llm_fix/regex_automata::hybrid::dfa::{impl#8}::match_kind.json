{
  "name": "regex_automata::hybrid::dfa::{impl#8}::match_kind",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/dfa.rs:2998:5:3001:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "match_kind should accept any valid MatchKind variant (MatchKind::All or MatchKind::LeftmostFirst) as input with self being an instance of Config.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().match_kind(MatchKind::All);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_match_kind(), MatchKind::All);"
              ],
              "code": [
                "{",
                "    let config = Config::new().match_kind(MatchKind::All);",
                "    assert_eq!(config.get_match_kind(), MatchKind::All);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().match_kind(MatchKind::LeftmostFirst);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_match_kind(), MatchKind::LeftmostFirst);",
                "    let config = Config::new().match_kind(MatchKind::All);",
                "    assert_eq!(config.get_match_kind(), MatchKind::All);",
                "    let config = Config::new().match_kind(MatchKind::LeftmostFirst).match_kind(MatchKind::All);",
                "    assert_eq!(config.get_match_kind(), MatchKind::All);",
                "    let config = Config::new().match_kind(MatchKind::All).match_kind(MatchKind::LeftmostFirst);",
                "    assert_eq!(config.get_match_kind(), MatchKind::LeftmostFirst);",
                "    let config = Config::new();",
                "    assert_eq!(config.get_match_kind(), MatchKind::LeftmostFirst);"
              ],
              "code": [
                "{",
                "    let config = Config::new().match_kind(MatchKind::LeftmostFirst);",
                "    assert_eq!(config.get_match_kind(), MatchKind::LeftmostFirst);",
                "    let config = Config::new().match_kind(MatchKind::All);",
                "    assert_eq!(config.get_match_kind(), MatchKind::All);",
                "    let config = Config::new().match_kind(MatchKind::LeftmostFirst).match_kind(MatchKind::All);",
                "    assert_eq!(config.get_match_kind(), MatchKind::All);",
                "    let config = Config::new().match_kind(MatchKind::All).match_kind(MatchKind::LeftmostFirst);",
                "    assert_eq!(config.get_match_kind(), MatchKind::LeftmostFirst);",
                "    let config = Config::new();",
                "    assert_eq!(config.get_match_kind(), MatchKind::LeftmostFirst);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut config = Config::new();",
                "    config = config.match_kind(MatchKind::All);",
                "    config = config.match_kind(MatchKind::LeftmostFirst);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_match_kind(), MatchKind::LeftmostFirst);",
                "    assert!(config.match_kind.is_some());",
                "    assert_eq!(config.get_match_kind(), MatchKind::All);",
                "    assert!(config.get_match_kind() != MatchKind::LeftmostFirst);",
                "    assert_eq!(config.match_kind, Some(MatchKind::LeftmostFirst));",
                "    assert_eq!(config.match_kind, Some(MatchKind::All));"
              ],
              "code": [
                "{",
                "    let mut config = Config::new();",
                "    config = config.match_kind(MatchKind::All);",
                "    config = config.match_kind(MatchKind::LeftmostFirst);",
                "    assert_eq!(config.get_match_kind(), MatchKind::LeftmostFirst);",
                "    assert!(config.match_kind.is_some());",
                "    assert_eq!(config.get_match_kind(), MatchKind::All);",
                "    assert!(config.get_match_kind() != MatchKind::LeftmostFirst);",
                "    assert_eq!(config.match_kind, Some(MatchKind::LeftmostFirst));",
                "    assert_eq!(config.match_kind, Some(MatchKind::All));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}