{
  "name": "regex_syntax::parser::{impl#0}::case_insensitive",
  "mod_info": {
    "name": "parser",
    "loc": "regex-syntax/src/lib.rs:191:1:191:12"
  },
  "visible": true,
  "loc": "regex-syntax/src/parser.rs:128:5:131:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "case_insensitive input boolean values: [true, false]\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = ParserBuilder::new();",
                "    builder.case_insensitive(true);",
                "}"
              ],
              "oracle": [
                "    let mut builder = ParserBuilder::new();",
                "    let result = builder.case_insensitive(true);",
                "    assert_eq!(result as *const _, builder as *const _);",
                "    let result = builder.case_insensitive(false);",
                "    assert_eq!(result as *const _, builder as *const _);"
              ],
              "code": [
                "{",
                "    let mut builder = ParserBuilder::new();",
                "    builder.case_insensitive(true);",
                "    let mut builder = ParserBuilder::new();",
                "    let result = builder.case_insensitive(true);",
                "    assert_eq!(result as *const _, builder as *const _);",
                "    let result = builder.case_insensitive(false);",
                "    assert_eq!(result as *const _, builder as *const _);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = ParserBuilder::new();",
                "    builder.case_insensitive(false);",
                "}"
              ],
              "oracle": [
                "    builder.case_insensitive(false); // Ensure `case_insensitive` is set to false",
                "    builder.case_insensitive(true);  // Ensure `case_insensitive` is set to true",
                "    assert_eq!(builder.hir.flags.case_insensitive, None); // Expect case_insensitive to be None after false",
                "    builder.case_insensitive(true); // Set to true",
                "    assert_eq!(builder.hir.flags.case_insensitive, Some(true)); // Expect case_insensitive to be Some(true)",
                "    assert_eq!(builder.case_insensitive(false) as *const _, &builder as *const _); // Check self return type on false",
                "    assert_eq!(builder.case_insensitive(true) as *const _, &builder as *const _); // Check self return type on true"
              ],
              "code": [
                "{",
                "    let mut builder = ParserBuilder::new();",
                "    builder.case_insensitive(false);",
                "    builder.case_insensitive(false); // Ensure `case_insensitive` is set to false",
                "    builder.case_insensitive(true);  // Ensure `case_insensitive` is set to true",
                "    assert_eq!(builder.hir.flags.case_insensitive, None); // Expect case_insensitive to be None after false",
                "    builder.case_insensitive(true); // Set to true",
                "    assert_eq!(builder.hir.flags.case_insensitive, Some(true)); // Expect case_insensitive to be Some(true)",
                "    assert_eq!(builder.case_insensitive(false) as *const _, &builder as *const _); // Check self return type on false",
                "    assert_eq!(builder.case_insensitive(true) as *const _, &builder as *const _); // Check self return type on true",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}