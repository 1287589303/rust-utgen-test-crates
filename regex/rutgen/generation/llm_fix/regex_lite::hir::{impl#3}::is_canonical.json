{
  "name": "regex_lite::hir::{impl#3}::is_canonical",
  "mod_info": {
    "name": "hir",
    "loc": "regex-lite/src/lib.rs:877:1:877:9"
  },
  "visible": false,
  "loc": "regex-lite/src/hir/mod.rs:503:5:513:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: pair in self.ranges.windows(2) at line 504 is true\n",
        "precondition: pair[0] >= pair[1] at line 505 is true, with bound pair[0] == pair[1]\n",
        "expected return value/type: false\n"
      ],
      "input_infer": "Test input conditions or ranges: ClassRange contains duplicate ranges (e.g., [(‘a’, ‘a’), (‘a’, ‘a’)]) or overlapping ranges (e.g., [(‘a’, ‘b’), (‘b’, ‘c’)]).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range1 = ClassRange { start: 'a', end: 'a' };",
                "    let range2 = ClassRange { start: 'a', end: 'a' };",
                "    let class = Class::new(vec![range1, range2]);",
                "    class.is_canonical();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class.is_canonical(), false);"
              ],
              "code": [
                "{",
                "    let range1 = ClassRange { start: 'a', end: 'a' };",
                "    let range2 = ClassRange { start: 'a', end: 'a' };",
                "    let class = Class::new(vec![range1, range2]);",
                "    class.is_canonical();",
                "    assert_eq!(class.is_canonical(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range1 = ClassRange { start: 'a', end: 'b' };",
                "    let range2 = ClassRange { start: 'b', end: 'c' };",
                "    let class = Class::new(vec![range1, range2]);",
                "    class.is_canonical();",
                "}"
              ],
              "oracle": [
                "    let range1 = ClassRange { start: 'a', end: 'b' };",
                "    let range2 = ClassRange { start: 'b', end: 'b' };",
                "    let class = Class::new(vec![range1, range2]);",
                "    assert_eq!(class.is_canonical(), false);"
              ],
              "code": [
                "{",
                "    let range1 = ClassRange { start: 'a', end: 'b' };",
                "    let range2 = ClassRange { start: 'b', end: 'c' };",
                "    let class = Class::new(vec![range1, range2]);",
                "    class.is_canonical();",
                "    let range1 = ClassRange { start: 'a', end: 'b' };",
                "    let range2 = ClassRange { start: 'b', end: 'b' };",
                "    let class = Class::new(vec![range1, range2]);",
                "    assert_eq!(class.is_canonical(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: pair in self.ranges.windows(2) at line 504 is true\n",
        "precondition: pair[0] >= pair[1] at line 505 is false\n",
        "precondition: pair[0].is_contiguous(&pair[1]) at line 508 is true\n",
        "expected return value/type: false\n"
      ],
      "input_infer": "test input conditions: self.ranges contains at least two ClassRange elements where the first element's end is greater than or equal to the second element's start and their ranges overlap, specifically with pairs like ClassRange { start: 'a', end: 'd' } and ClassRange { start: 'c', end: 'e' }\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range1 = ClassRange { start: 'a', end: 'd' };",
                "    let range2 = ClassRange { start: 'c', end: 'e' };",
                "    let class = Class::new(vec![range1, range2]);",
                "    let _ = class.is_canonical();",
                "}"
              ],
              "oracle": [
                "    let range1 = ClassRange { start: 'a', end: 'd' };",
                "    let range2 = ClassRange { start: 'c', end: 'e' };",
                "    let class = Class::new(vec![range1, range2]);",
                "    assert_eq!(class.is_canonical(), false);"
              ],
              "code": [
                "{",
                "    let range1 = ClassRange { start: 'a', end: 'd' };",
                "    let range2 = ClassRange { start: 'c', end: 'e' };",
                "    let class = Class::new(vec![range1, range2]);",
                "    let _ = class.is_canonical();",
                "    let range1 = ClassRange { start: 'a', end: 'd' };",
                "    let range2 = ClassRange { start: 'c', end: 'e' };",
                "    let class = Class::new(vec![range1, range2]);",
                "    assert_eq!(class.is_canonical(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range1 = ClassRange { start: 'x', end: 'z' };",
                "    let range2 = ClassRange { start: 'z', end: 'a' }; // Note: `z` is the end of range1, creating overlap",
                "    let class = Class::new(vec![range1, range2]);",
                "    let _ = class.is_canonical();",
                "}"
              ],
              "oracle": [
                "    let range1 = ClassRange { start: 'x', end: 'z' };",
                "    let range2 = ClassRange { start: 'z', end: 'a' };",
                "    let class = Class::new(vec![range1, range2]);",
                "    assert_eq!(class.is_canonical(), false);"
              ],
              "code": [
                "{",
                "    let range1 = ClassRange { start: 'x', end: 'z' };",
                "    let range2 = ClassRange { start: 'z', end: 'a' }; // Note: `z` is the end of range1, creating overlap",
                "    let class = Class::new(vec![range1, range2]);",
                "    let _ = class.is_canonical();",
                "    let range1 = ClassRange { start: 'x', end: 'z' };",
                "    let range2 = ClassRange { start: 'z', end: 'a' };",
                "    let class = Class::new(vec![range1, range2]);",
                "    assert_eq!(class.is_canonical(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: pair in self.ranges.windows(2) at line 504 is true\n",
        "precondition: pair[0] >= pair[1] at line 505 is false\n",
        "precondition: pair[0].is_contiguous(&pair[1]) at line 508 is false\n",
        "precondition: pair in self.ranges.windows(2) at line 504 is false\n",
        "expected return value/type: true\n"
      ],
      "input_infer": "Class ranges where start and end characters are strictly increasing and non-contiguous, such as: ClassRange('a', 'b'), ClassRange('c', 'd'), ClassRange('e', 'f')\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges = vec![",
                "        ClassRange { start: 'a', end: 'b' },",
                "        ClassRange { start: 'c', end: 'd' },",
                "        ClassRange { start: 'e', end: 'f' },",
                "    ];",
                "    let class = Class::new(ranges);",
                "    class.is_canonical();",
                "}"
              ],
              "oracle": [
                "    assert!(class.is_canonical());"
              ],
              "code": [
                "{",
                "    let ranges = vec![",
                "        ClassRange { start: 'a', end: 'b' },",
                "        ClassRange { start: 'c', end: 'd' },",
                "        ClassRange { start: 'e', end: 'f' },",
                "    ];",
                "    let class = Class::new(ranges);",
                "    class.is_canonical();",
                "    assert!(class.is_canonical());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges = vec![",
                "        ClassRange { start: '1', end: '2' },",
                "        ClassRange { start: '4', end: '5' },",
                "        ClassRange { start: '7', end: '8' },",
                "    ];",
                "    let class = Class::new(ranges);",
                "    class.is_canonical();",
                "}"
              ],
              "oracle": [
                "    let ranges = vec![ClassRange { start: '1', end: '2' }, ClassRange { start: '4', end: '5' }, ClassRange { start: '7', end: '8' }];",
                "    let class = Class::new(ranges);",
                "    assert!(class.is_canonical() == true);"
              ],
              "code": [
                "{",
                "    let ranges = vec![",
                "        ClassRange { start: '1', end: '2' },",
                "        ClassRange { start: '4', end: '5' },",
                "        ClassRange { start: '7', end: '8' },",
                "    ];",
                "    let class = Class::new(ranges);",
                "    class.is_canonical();",
                "    let ranges = vec![ClassRange { start: '1', end: '2' }, ClassRange { start: '4', end: '5' }, ClassRange { start: '7', end: '8' }];",
                "    let class = Class::new(ranges);",
                "    assert!(class.is_canonical() == true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges = vec![",
                "        ClassRange { start: 'A', end: 'A' },",
                "        ClassRange { start: 'C', end: 'C' },",
                "        ClassRange { start: 'E', end: 'E' },",
                "    ];",
                "    let class = Class::new(ranges);",
                "    class.is_canonical();",
                "}"
              ],
              "oracle": [
                "    assert!(class.is_canonical());",
                "    let ranges_empty = vec![];",
                "    let class_empty = Class::new(ranges_empty);",
                "    assert!(class_empty.is_canonical());",
                "    let ranges_one_element = vec![ClassRange { start: 'A', end: 'A' }];",
                "    let class_one = Class::new(ranges_one_element);",
                "    assert!(class_one.is_canonical());"
              ],
              "code": [
                "{",
                "    let ranges = vec![",
                "        ClassRange { start: 'A', end: 'A' },",
                "        ClassRange { start: 'C', end: 'C' },",
                "        ClassRange { start: 'E', end: 'E' },",
                "    ];",
                "    let class = Class::new(ranges);",
                "    class.is_canonical();",
                "    assert!(class.is_canonical());",
                "    let ranges_empty = vec![];",
                "    let class_empty = Class::new(ranges_empty);",
                "    assert!(class_empty.is_canonical());",
                "    let ranges_one_element = vec![ClassRange { start: 'A', end: 'A' }];",
                "    let class_one = Class::new(ranges_one_element);",
                "    assert!(class_one.is_canonical());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges = vec![",
                "        ClassRange { start: '!', end: '!' },",
                "        ClassRange { start: '#', end: '#' },",
                "        ClassRange { start: '%', end: '%' },",
                "    ];",
                "    let class = Class::new(ranges);",
                "    class.is_canonical();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class.is_canonical(), true);"
              ],
              "code": [
                "{",
                "    let ranges = vec![",
                "        ClassRange { start: '!', end: '!' },",
                "        ClassRange { start: '#', end: '#' },",
                "        ClassRange { start: '%', end: '%' },",
                "    ];",
                "    let class = Class::new(ranges);",
                "    class.is_canonical();",
                "    assert_eq!(class.is_canonical(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges = vec![",
                "        ClassRange { start: 'a', end: 'a' },",
                "        ClassRange { start: 'z', end: 'z' },",
                "        ClassRange { start: '{', end: '{' },",
                "    ];",
                "    let class = Class::new(ranges);",
                "    class.is_canonical();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class.is_canonical(), true);"
              ],
              "code": [
                "{",
                "    let ranges = vec![",
                "        ClassRange { start: 'a', end: 'a' },",
                "        ClassRange { start: 'z', end: 'z' },",
                "        ClassRange { start: '{', end: '{' },",
                "    ];",
                "    let class = Class::new(ranges);",
                "    class.is_canonical();",
                "    assert_eq!(class.is_canonical(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 4,
      "prompt_conds": [
        "precondition: pair in self.ranges.windows(2) at line 504 is false\n",
        "expected return value/type: true\n"
      ],
      "input_infer": "Test input conditions or ranges: A Class object with a ranges vector containing at least two ClassRange instances where each ClassRange has non-overlapping and non-adjacent character ranges in ascending order (e.g., [{start: 'a', end: 'b'}, {start: 'c', end: 'd'}]).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class = Class::new(vec![",
                "        ClassRange { start: 'a', end: 'b' },",
                "        ClassRange { start: 'c', end: 'd' },",
                "    ]);",
                "    class.is_canonical();",
                "}"
              ],
              "oracle": [
                "    assert!(class.is_canonical());"
              ],
              "code": [
                "{",
                "    let class = Class::new(vec![",
                "        ClassRange { start: 'a', end: 'b' },",
                "        ClassRange { start: 'c', end: 'd' },",
                "    ]);",
                "    class.is_canonical();",
                "    assert!(class.is_canonical());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class = Class::new(vec![",
                "        ClassRange { start: 'e', end: 'f' },",
                "        ClassRange { start: 'g', end: 'h' },",
                "    ]);",
                "    class.is_canonical();",
                "}"
              ],
              "oracle": [
                "    assert!(class.is_canonical() == true);"
              ],
              "code": [
                "{",
                "    let class = Class::new(vec![",
                "        ClassRange { start: 'e', end: 'f' },",
                "        ClassRange { start: 'g', end: 'h' },",
                "    ]);",
                "    class.is_canonical();",
                "    assert!(class.is_canonical() == true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class = Class::new(vec![",
                "        ClassRange { start: 'i', end: 'j' },",
                "        ClassRange { start: 'k', end: 'l' },",
                "        ClassRange { start: 'm', end: 'n' },",
                "    ]);",
                "    class.is_canonical();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class.is_canonical(), true);"
              ],
              "code": [
                "{",
                "    let class = Class::new(vec![",
                "        ClassRange { start: 'i', end: 'j' },",
                "        ClassRange { start: 'k', end: 'l' },",
                "        ClassRange { start: 'm', end: 'n' },",
                "    ]);",
                "    class.is_canonical();",
                "    assert_eq!(class.is_canonical(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class = Class::new(vec![",
                "        ClassRange { start: 'o', end: 'p' },",
                "        ClassRange { start: 'q', end: 'r' },",
                "    ]);",
                "    class.is_canonical();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class.is_canonical(), true);"
              ],
              "code": [
                "{",
                "    let class = Class::new(vec![",
                "        ClassRange { start: 'o', end: 'p' },",
                "        ClassRange { start: 'q', end: 'r' },",
                "    ]);",
                "    class.is_canonical();",
                "    assert_eq!(class.is_canonical(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}