{
  "name": "regex_syntax::hir::literal::{impl#8}::from",
  "mod_info": {
    "name": "hir::literal",
    "loc": "regex-syntax/src/hir/mod.rs:42:1:42:17"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/literal.rs:2157:5:2159:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions or ranges: byte value between 0 to 255 (inclusive).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte: u8 = 0;",
                "    let _literal = Literal::from(byte);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_literal.bytes, vec![0]);",
                "    assert!(_literal.exact);"
              ],
              "code": [
                "{",
                "    let byte: u8 = 0;",
                "    let _literal = Literal::from(byte);",
                "    assert_eq!(_literal.bytes, vec![0]);",
                "    assert!(_literal.exact);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte: u8 = 1;",
                "    let _literal = Literal::from(byte);",
                "}"
              ],
              "oracle": [
                "    _literal.bytes == vec![1]",
                "    _literal.exact == true"
              ],
              "code": [
                "{",
                "    let byte: u8 = 1;",
                "    let _literal = Literal::from(byte);",
                "    _literal.bytes == vec![1]",
                "    _literal.exact == true",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte: u8 = 255;",
                "    let _literal = Literal::from(byte);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_literal.bytes, vec![255]);",
                "    assert!(_literal.exact);"
              ],
              "code": [
                "{",
                "    let byte: u8 = 255;",
                "    let _literal = Literal::from(byte);",
                "    assert_eq!(_literal.bytes, vec![255]);",
                "    assert!(_literal.exact);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte: u8 = 128;",
                "    let _literal = Literal::from(byte);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_literal.bytes, vec![128]);",
                "    assert!(_literal.exact);"
              ],
              "code": [
                "{",
                "    let byte: u8 = 128;",
                "    let _literal = Literal::from(byte);",
                "    assert_eq!(_literal.bytes, vec![128]);",
                "    assert!(_literal.exact);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}