{
  "name": "regex_syntax::hir::literal::{impl#7}::extend",
  "mod_info": {
    "name": "hir::literal",
    "loc": "regex-syntax/src/hir/mod.rs:42:1:42:17"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/literal.rs:2118:5:2123:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.is_exact() at line 2119 is true\n"
      ],
      "input_infer": "self.bytes is a non-empty Vec<u8> and lit.bytes is a non-empty Vec<u8> of the same or differing lengths, where self.exact is true\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut lit1 = Literal::exact(vec![1, 2, 3]);",
                "    let lit2 = Literal::exact(vec![4, 5, 6]);",
                "    lit1.extend(&lit2);",
                "}"
              ],
              "oracle": [
                "    let lit1 = Literal::exact(vec![1, 2, 3]);",
                "    let lit2 = Literal::exact(vec![4, 5, 6]);",
                "    assert_eq!(lit1.bytes, vec![1, 2, 3, 4, 5, 6]);",
                "    assert!(lit1.is_exact());",
                "    assert_eq!(lit1.len(), 6);",
                "    assert!(!lit1.is_empty());"
              ],
              "code": [
                "{",
                "    let mut lit1 = Literal::exact(vec![1, 2, 3]);",
                "    let lit2 = Literal::exact(vec![4, 5, 6]);",
                "    lit1.extend(&lit2);",
                "    let lit1 = Literal::exact(vec![1, 2, 3]);",
                "    let lit2 = Literal::exact(vec![4, 5, 6]);",
                "    assert_eq!(lit1.bytes, vec![1, 2, 3, 4, 5, 6]);",
                "    assert!(lit1.is_exact());",
                "    assert_eq!(lit1.len(), 6);",
                "    assert!(!lit1.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut lit1 = Literal::exact(vec![1, 2]);",
                "    let lit2 = Literal::exact(vec![3, 4, 5, 6]);",
                "    lit1.extend(&lit2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(lit1.as_bytes(), &[1, 2, 3, 4, 5, 6]);",
                "    assert_eq!(lit1.len(), 6);",
                "    assert!(!lit1.is_empty());",
                "    assert!(lit1.is_exact());"
              ],
              "code": [
                "{",
                "    let mut lit1 = Literal::exact(vec![1, 2]);",
                "    let lit2 = Literal::exact(vec![3, 4, 5, 6]);",
                "    lit1.extend(&lit2);",
                "    assert_eq!(lit1.as_bytes(), &[1, 2, 3, 4, 5, 6]);",
                "    assert_eq!(lit1.len(), 6);",
                "    assert!(!lit1.is_empty());",
                "    assert!(lit1.is_exact());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut lit1 = Literal::exact(vec![10, 20, 30]);",
                "    let lit2 = Literal::exact(vec![40, 50, 60, 70, 80]);",
                "    lit1.extend(&lit2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(lit1.as_bytes(), &[10, 20, 30, 40, 50, 60, 70, 80]);",
                "    assert_eq!(lit1.len(), 8);",
                "    assert!(!lit1.is_empty());",
                "    assert!(lit1.is_exact());"
              ],
              "code": [
                "{",
                "    let mut lit1 = Literal::exact(vec![10, 20, 30]);",
                "    let lit2 = Literal::exact(vec![40, 50, 60, 70, 80]);",
                "    lit1.extend(&lit2);",
                "    assert_eq!(lit1.as_bytes(), &[10, 20, 30, 40, 50, 60, 70, 80]);",
                "    assert_eq!(lit1.len(), 8);",
                "    assert!(!lit1.is_empty());",
                "    assert!(lit1.is_exact());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut lit1 = Literal::exact(vec![100, 200, 300, 400]);",
                "    let lit2 = Literal::exact(vec![500, 600]);",
                "    lit1.extend(&lit2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(lit1.as_bytes(), vec![100, 200, 300, 400, 500, 600].as_slice());",
                "    assert_eq!(lit1.len(), 6);",
                "    assert!(!lit1.is_empty());",
                "    assert!(lit1.is_exact());"
              ],
              "code": [
                "{",
                "    let mut lit1 = Literal::exact(vec![100, 200, 300, 400]);",
                "    let lit2 = Literal::exact(vec![500, 600]);",
                "    lit1.extend(&lit2);",
                "    assert_eq!(lit1.as_bytes(), vec![100, 200, 300, 400, 500, 600].as_slice());",
                "    assert_eq!(lit1.len(), 6);",
                "    assert!(!lit1.is_empty());",
                "    assert!(lit1.is_exact());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut lit1 = Literal::exact(vec![7, 8, 9]);",
                "    let lit2 = Literal::exact(vec![7, 8, 9]);",
                "    lit1.extend(&lit2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(lit1.as_bytes(), vec![7, 8, 9, 7, 8, 9].as_slice());",
                "    assert_eq!(lit1.len(), 6);",
                "    assert!(!lit1.is_empty());",
                "    assert!(lit1.is_exact());"
              ],
              "code": [
                "{",
                "    let mut lit1 = Literal::exact(vec![7, 8, 9]);",
                "    let lit2 = Literal::exact(vec![7, 8, 9]);",
                "    lit1.extend(&lit2);",
                "    assert_eq!(lit1.as_bytes(), vec![7, 8, 9, 7, 8, 9].as_slice());",
                "    assert_eq!(lit1.len(), 6);",
                "    assert!(!lit1.is_empty());",
                "    assert!(lit1.is_exact());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.is_exact() at line 2119 is false\n"
      ],
      "input_infer": "self.is_exact() is false and lit is any Literal instance, including an empty Literal\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut literal_self = Literal::inexact(vec![1, 2, 3]);",
                "    let literal_lit = Literal::exact(vec![4, 5, 6]);",
                "    literal_self.extend(&literal_lit);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(literal_self.as_bytes(), &[1, 2, 3]);",
                "    assert_eq!(literal_self.len(), 3);",
                "    assert!(literal_self.is_inexact());"
              ],
              "code": [
                "{",
                "    let mut literal_self = Literal::inexact(vec![1, 2, 3]);",
                "    let literal_lit = Literal::exact(vec![4, 5, 6]);",
                "    literal_self.extend(&literal_lit);",
                "    assert_eq!(literal_self.as_bytes(), &[1, 2, 3]);",
                "    assert_eq!(literal_self.len(), 3);",
                "    assert!(literal_self.is_inexact());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut literal_self = Literal::inexact(vec![7, 8, 9]);",
                "    let literal_lit = Literal::exact(vec![]);",
                "    literal_self.extend(&literal_lit);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(literal_self.is_exact(), false);",
                "    assert_eq!(literal_self.as_bytes(), vec![7, 8, 9].as_slice());",
                "    assert_eq!(literal_self.len(), 3);",
                "    assert!(literal_self.is_empty() == false);"
              ],
              "code": [
                "{",
                "    let mut literal_self = Literal::inexact(vec![7, 8, 9]);",
                "    let literal_lit = Literal::exact(vec![]);",
                "    literal_self.extend(&literal_lit);",
                "    assert_eq!(literal_self.is_exact(), false);",
                "    assert_eq!(literal_self.as_bytes(), vec![7, 8, 9].as_slice());",
                "    assert_eq!(literal_self.len(), 3);",
                "    assert!(literal_self.is_empty() == false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut literal_self = Literal::inexact(vec![10, 11]);",
                "    let literal_lit = Literal::inexact(vec![12, 13]);",
                "    literal_self.extend(&literal_lit);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(literal_self.as_bytes(), &[10, 11]);",
                "    assert_eq!(literal_self.len(), 2);",
                "    assert!(literal_self.is_inexact());",
                "    assert!(!literal_self.is_exact());"
              ],
              "code": [
                "{",
                "    let mut literal_self = Literal::inexact(vec![10, 11]);",
                "    let literal_lit = Literal::inexact(vec![12, 13]);",
                "    literal_self.extend(&literal_lit);",
                "    assert_eq!(literal_self.as_bytes(), &[10, 11]);",
                "    assert_eq!(literal_self.len(), 2);",
                "    assert!(literal_self.is_inexact());",
                "    assert!(!literal_self.is_exact());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut literal_self = Literal::inexact(vec![14]);",
                "    let literal_lit = Literal::exact(vec![15, 16]);",
                "    literal_self.extend(&literal_lit);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(literal_self.bytes.len(), 1);",
                "    assert_eq!(literal_self.bytes, vec![14]);",
                "    assert!(literal_self.is_exact());",
                "    assert!(literal_self.is_empty());",
                "    assert!(!literal_self.is_exact());"
              ],
              "code": [
                "{",
                "    let mut literal_self = Literal::inexact(vec![14]);",
                "    let literal_lit = Literal::exact(vec![15, 16]);",
                "    literal_self.extend(&literal_lit);",
                "    assert_eq!(literal_self.bytes.len(), 1);",
                "    assert_eq!(literal_self.bytes, vec![14]);",
                "    assert!(literal_self.is_exact());",
                "    assert!(literal_self.is_empty());",
                "    assert!(!literal_self.is_exact());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut literal_self = Literal::inexact(vec![17, 18, 19]);",
                "    let literal_lit = Literal::exact(vec![20, 21, 22, 23, 24]);",
                "    literal_self.extend(&literal_lit);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(literal_self.bytes, vec![17, 18, 19]);",
                "    assert_eq!(literal_self.is_exact(), false);"
              ],
              "code": [
                "{",
                "    let mut literal_self = Literal::inexact(vec![17, 18, 19]);",
                "    let literal_lit = Literal::exact(vec![20, 21, 22, 23, 24]);",
                "    literal_self.extend(&literal_lit);",
                "    assert_eq!(literal_self.bytes, vec![17, 18, 19]);",
                "    assert_eq!(literal_self.is_exact(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}