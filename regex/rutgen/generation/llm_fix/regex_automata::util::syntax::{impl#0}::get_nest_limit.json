{
  "name": "regex_automata::util::syntax::{impl#0}::get_nest_limit",
  "mod_info": {
    "name": "util::syntax",
    "loc": "regex-automata/src/util/mod.rs:45:1:45:16"
  },
  "visible": true,
  "loc": "regex-automata/src/util/syntax.rs:428:5:430:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.nest_limit\n"
      ],
      "input_infer": "nest_limit input range: 0 to 2^32-1 (inclusive) for u32 type\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().nest_limit(0);",
                "    let _ = config.get_nest_limit();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_nest_limit(), 0);",
                "    let config = Config::new().nest_limit(10);",
                "    assert_eq!(config.get_nest_limit(), 10);",
                "    let config = Config::new().nest_limit(100);",
                "    assert_eq!(config.get_nest_limit(), 100);",
                "    let config = Config::new().nest_limit(u32::MAX);",
                "    assert_eq!(config.get_nest_limit(), u32::MAX);"
              ],
              "code": [
                "{",
                "    let config = Config::new().nest_limit(0);",
                "    let _ = config.get_nest_limit();",
                "    assert_eq!(config.get_nest_limit(), 0);",
                "    let config = Config::new().nest_limit(10);",
                "    assert_eq!(config.get_nest_limit(), 10);",
                "    let config = Config::new().nest_limit(100);",
                "    assert_eq!(config.get_nest_limit(), 100);",
                "    let config = Config::new().nest_limit(u32::MAX);",
                "    assert_eq!(config.get_nest_limit(), u32::MAX);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().nest_limit(1);",
                "    let _ = config.get_nest_limit();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_nest_limit(), 1);"
              ],
              "code": [
                "{",
                "    let config = Config::new().nest_limit(1);",
                "    let _ = config.get_nest_limit();",
                "    assert_eq!(config.get_nest_limit(), 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().nest_limit(u32::MAX);",
                "    let _ = config.get_nest_limit();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_nest_limit(), u32::MAX);"
              ],
              "code": [
                "{",
                "    let config = Config::new().nest_limit(u32::MAX);",
                "    let _ = config.get_nest_limit();",
                "    assert_eq!(config.get_nest_limit(), u32::MAX);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}