{
  "name": "regex_automata::hybrid::id::{impl#0}::new",
  "mod_info": {
    "name": "hybrid::id",
    "loc": "regex-automata/src/hybrid/mod.rs:142:1:142:8"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/id.rs:190:5:196:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: id > LazyStateID::MAX at line 191 is true\n",
        "expected return value/type: Err(LazyStateIDError { attempted })\n"
      ],
      "input_infer": "id > LazyStateID::MAX, specifically test with values ranging from LazyStateID::MAX + 1 to (u64::MAX as usize)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let id = LazyStateID::MAX + 1;",
                "    let _result = LazyStateID::new(id);",
                "}"
              ],
              "oracle": [
                "    assert!(_result.is_err());",
                "    assert_eq!(_result.unwrap_err().attempted, u64::try_from(LazyStateID::MAX + 1).unwrap());"
              ],
              "code": [
                "{",
                "    let id = LazyStateID::MAX + 1;",
                "    let _result = LazyStateID::new(id);",
                "    assert!(_result.is_err());",
                "    assert_eq!(_result.unwrap_err().attempted, u64::try_from(LazyStateID::MAX + 1).unwrap());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let id = LazyStateID::MAX + 1000;",
                "    let _result = LazyStateID::new(id);",
                "}"
              ],
              "oracle": [
                "    let id = LazyStateID::MAX + 1000;",
                "    let result = LazyStateID::new(id);",
                "    assert!(result.is_err());",
                "    if let Err(e) = result {",
                "    assert_eq!(e.attempted, id as u64);",
                "    }"
              ],
              "code": [
                "{",
                "    let id = LazyStateID::MAX + 1000;",
                "    let _result = LazyStateID::new(id);",
                "    let id = LazyStateID::MAX + 1000;",
                "    let result = LazyStateID::new(id);",
                "    assert!(result.is_err());",
                "    if let Err(e) = result {",
                "    assert_eq!(e.attempted, id as u64);",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let id = u64::MAX as usize;",
                "    let _result = LazyStateID::new(id);",
                "}"
              ],
              "oracle": [
                "    let id = u64::MAX as usize;",
                "    let result = LazyStateID::new(id);",
                "    assert!(result.is_err());",
                "    if let Err(e) = result {",
                "    assert_eq!(e.attempted, u64::MAX);",
                "    }"
              ],
              "code": [
                "{",
                "    let id = u64::MAX as usize;",
                "    let _result = LazyStateID::new(id);",
                "    let id = u64::MAX as usize;",
                "    let result = LazyStateID::new(id);",
                "    assert!(result.is_err());",
                "    if let Err(e) = result {",
                "    assert_eq!(e.attempted, u64::MAX);",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: id > LazyStateID::MAX at line 191 is false, with bound id == LazyStateID::MAX\n",
        "expected return value/type: Ok(LazyStateID::new_unchecked(id))\n"
      ],
      "input_infer": "0 <= id <= LazyStateID::MAX\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let id = LazyStateID::MAX;",
                "    let result = LazyStateID::new(id);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), LazyStateID::new_unchecked(LazyStateID::MAX));"
              ],
              "code": [
                "{",
                "    let id = LazyStateID::MAX;",
                "    let result = LazyStateID::new(id);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), LazyStateID::new_unchecked(LazyStateID::MAX));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let id = LazyStateID::MAX - 1; // testing within the valid range",
                "    let result = LazyStateID::new(id);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(LazyStateID::new_unchecked(id)));"
              ],
              "code": [
                "{",
                "    let id = LazyStateID::MAX - 1; // testing within the valid range",
                "    let result = LazyStateID::new(id);",
                "    assert_eq!(result, Ok(LazyStateID::new_unchecked(id)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let id = 0;",
                "    let result = LazyStateID::new(id);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(LazyStateID::new_unchecked(0)));",
                "    let id = LazyStateID::MAX;",
                "    let result = LazyStateID::new(id);",
                "    assert_eq!(result, Ok(LazyStateID::new_unchecked(LazyStateID::MAX)));"
              ],
              "code": [
                "{",
                "    let id = 0;",
                "    let result = LazyStateID::new(id);",
                "    assert_eq!(result, Ok(LazyStateID::new_unchecked(0)));",
                "    let id = LazyStateID::MAX;",
                "    let result = LazyStateID::new(id);",
                "    assert_eq!(result, Ok(LazyStateID::new_unchecked(LazyStateID::MAX)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let id = LazyStateID::MAX + 1; // testing just over the valid range",
                "    let result = LazyStateID::new(id);",
                "}"
              ],
              "oracle": [
                "    assert!(LazyStateID::new(LazyStateID::MAX).is_ok());",
                "    assert_eq!(LazyStateID::new(LazyStateID::MAX).unwrap(), LazyStateID::new_unchecked(LazyStateID::MAX));",
                "    let error = LazyStateID::new(LazyStateID::MAX + 1).err().unwrap();",
                "    assert_eq!(error.attempted, (LazyStateID::MAX + 1) as u64);",
                "    assert!(LazyStateID::new(0).is_ok());",
                "    assert_eq!(LazyStateID::new(0).unwrap(), LazyStateID::new_unchecked(0));",
                "    assert!(LazyStateID::new(LazyStateID::MAX - 1).is_ok());",
                "    assert_eq!(LazyStateID::new(LazyStateID::MAX - 1).unwrap(), LazyStateID::new_unchecked(LazyStateID::MAX - 1));"
              ],
              "code": [
                "{",
                "    let id = LazyStateID::MAX + 1; // testing just over the valid range",
                "    let result = LazyStateID::new(id);",
                "    assert!(LazyStateID::new(LazyStateID::MAX).is_ok());",
                "    assert_eq!(LazyStateID::new(LazyStateID::MAX).unwrap(), LazyStateID::new_unchecked(LazyStateID::MAX));",
                "    let error = LazyStateID::new(LazyStateID::MAX + 1).err().unwrap();",
                "    assert_eq!(error.attempted, (LazyStateID::MAX + 1) as u64);",
                "    assert!(LazyStateID::new(0).is_ok());",
                "    assert_eq!(LazyStateID::new(0).unwrap(), LazyStateID::new_unchecked(0));",
                "    assert!(LazyStateID::new(LazyStateID::MAX - 1).is_ok());",
                "    assert_eq!(LazyStateID::new(LazyStateID::MAX - 1).unwrap(), LazyStateID::new_unchecked(LazyStateID::MAX - 1));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}