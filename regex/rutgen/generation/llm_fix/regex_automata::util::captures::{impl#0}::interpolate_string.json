{
  "name": "regex_automata::util::captures::{impl#0}::interpolate_string",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/captures.rs:716:5:724:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: dst\n"
      ],
      "input_infer": "Capture non-empty string inputs for `haystack` such as valid date formats (e.g., \"14-03-2010\", \"2010-03-14\"), and various valid `replacement` strings using `${name}` format; ensure at least one match occurs, and also test empty and malformed `haystack` strings as edge cases.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let group_info = GroupInfo::default();",
                "    let captures = Captures::all(group_info.clone());",
                "    let haystack = \"On 14-03-2010, I became a Tenneessee lamb.\";",
                "    let replacement = \"year=$year, month=$month, day=$day\";",
                "    let _result = captures.interpolate_string(haystack, replacement);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(captures.interpolate_string(haystack, replacement), \"year=2010, month=03, day=14\");",
                "    let haystack_2 = \"On 2010-03-14, I became a Tenneessee lamb.\";",
                "    assert_eq!(captures.interpolate_string(haystack_2, replacement), \"year=2010, month=03, day=14\");",
                "    let empty_haystack = \"\";",
                "    assert_eq!(captures.interpolate_string(empty_haystack, replacement), \"year=, month=, day=\");",
                "    let null_replacement = \"\";",
                "    assert_eq!(captures.interpolate_string(haystack, null_replacement), \"\");",
                "    let haystack_no_matches = \"This text has no dates.\";",
                "    assert_eq!(captures.interpolate_string(haystack_no_matches, replacement), \"year=, month=, day=\");"
              ],
              "code": [
                "{",
                "    let group_info = GroupInfo::default();",
                "    let captures = Captures::all(group_info.clone());",
                "    let haystack = \"On 14-03-2010, I became a Tenneessee lamb.\";",
                "    let replacement = \"year=$year, month=$month, day=$day\";",
                "    let _result = captures.interpolate_string(haystack, replacement);",
                "    assert_eq!(captures.interpolate_string(haystack, replacement), \"year=2010, month=03, day=14\");",
                "    let haystack_2 = \"On 2010-03-14, I became a Tenneessee lamb.\";",
                "    assert_eq!(captures.interpolate_string(haystack_2, replacement), \"year=2010, month=03, day=14\");",
                "    let empty_haystack = \"\";",
                "    assert_eq!(captures.interpolate_string(empty_haystack, replacement), \"year=, month=, day=\");",
                "    let null_replacement = \"\";",
                "    assert_eq!(captures.interpolate_string(haystack, null_replacement), \"\");",
                "    let haystack_no_matches = \"This text has no dates.\";",
                "    assert_eq!(captures.interpolate_string(haystack_no_matches, replacement), \"year=, month=, day=\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let group_info = GroupInfo::default();",
                "    let captures = Captures::all(group_info.clone());",
                "    let haystack = \"On 2010-03-14, I became a Tenneessee lamb.\";",
                "    let replacement = \"year=$year, month=$month, day=$day\";",
                "    let _result = captures.interpolate_string(haystack, replacement);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(captures.interpolate_string(haystack, replacement), \"year=2010, month=03, day=14\");"
              ],
              "code": [
                "{",
                "    let group_info = GroupInfo::default();",
                "    let captures = Captures::all(group_info.clone());",
                "    let haystack = \"On 2010-03-14, I became a Tenneessee lamb.\";",
                "    let replacement = \"year=$year, month=$month, day=$day\";",
                "    let _result = captures.interpolate_string(haystack, replacement);",
                "    assert_eq!(captures.interpolate_string(haystack, replacement), \"year=2010, month=03, day=14\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let group_info = GroupInfo::default();",
                "    let captures = Captures::all(group_info.clone());",
                "    let haystack = \"\";",
                "    let replacement = \"year=$year, month=$month, day=$day\";",
                "    let _result = captures.interpolate_string(haystack, replacement);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(captures.interpolate_string(\"\", \"year=$year, month=$month, day=$day\"), \"year=, month=, day=\");",
                "    let group_info = GroupInfo::default();",
                "    let captures = Captures::all(group_info.clone());",
                "    let haystack = \"On 14-03-2010, I became a Tenneessee lamb.\";",
                "    let replacement = \"year=$year, month=$month, day=$day\";",
                "    assert_eq!(captures.interpolate_string(haystack, replacement), \"year=, month=, day=\");",
                "    let haystack = \"On 2010-03-14, I became a Tenneessee lamb.\";",
                "    assert_eq!(captures.interpolate_string(haystack, replacement), \"year=, month=, day=\");"
              ],
              "code": [
                "{",
                "    let group_info = GroupInfo::default();",
                "    let captures = Captures::all(group_info.clone());",
                "    let haystack = \"\";",
                "    let replacement = \"year=$year, month=$month, day=$day\";",
                "    let _result = captures.interpolate_string(haystack, replacement);",
                "    assert_eq!(captures.interpolate_string(\"\", \"year=$year, month=$month, day=$day\"), \"year=, month=, day=\");",
                "    let group_info = GroupInfo::default();",
                "    let captures = Captures::all(group_info.clone());",
                "    let haystack = \"On 14-03-2010, I became a Tenneessee lamb.\";",
                "    let replacement = \"year=$year, month=$month, day=$day\";",
                "    assert_eq!(captures.interpolate_string(haystack, replacement), \"year=, month=, day=\");",
                "    let haystack = \"On 2010-03-14, I became a Tenneessee lamb.\";",
                "    assert_eq!(captures.interpolate_string(haystack, replacement), \"year=, month=, day=\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let group_info = GroupInfo::default();",
                "    let captures = Captures::all(group_info.clone());",
                "    let haystack = \"Invalid date 14-30-2010\";",
                "    let replacement = \"year=$year, month=$month, day=$day\";",
                "    let _result = captures.interpolate_string(haystack, replacement);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, \"year=, month=, day=\");",
                "    assert_eq!(_result.len(), 22);",
                "    assert!(_result.contains(\"year=\"));",
                "    assert!(_result.contains(\"month=\"));",
                "    assert!(_result.contains(\"day=\"));",
                "    assert!(captures.is_match() == false);",
                "    assert!(captures.pattern().is_none());",
                "    assert_eq!(captures.group_len(), 0);"
              ],
              "code": [
                "{",
                "    let group_info = GroupInfo::default();",
                "    let captures = Captures::all(group_info.clone());",
                "    let haystack = \"Invalid date 14-30-2010\";",
                "    let replacement = \"year=$year, month=$month, day=$day\";",
                "    let _result = captures.interpolate_string(haystack, replacement);",
                "    assert_eq!(_result, \"year=, month=, day=\");",
                "    assert_eq!(_result.len(), 22);",
                "    assert!(_result.contains(\"year=\"));",
                "    assert!(_result.contains(\"month=\"));",
                "    assert!(_result.contains(\"day=\"));",
                "    assert!(captures.is_match() == false);",
                "    assert!(captures.pattern().is_none());",
                "    assert_eq!(captures.group_len(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let group_info = GroupInfo::default();",
                "    let captures = Captures::all(group_info.clone());",
                "    let haystack = \"Text with date 08-09-2021 found.\";",
                "    let replacement = \"day=$day, month=$month\";",
                "    let _result = captures.interpolate_string(haystack, replacement);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(captures.interpolate_string(haystack, replacement), \"day=, month=\");",
                "    assert_eq!(captures.interpolate_string(haystack, \"No match here\"), \"No match here\");",
                "    assert_eq!(captures.interpolate_string(\"No captures\", \"Test: $missing\"), \"Test: \");",
                "    assert_eq!(captures.interpolate_string(haystack, \"Date: $day-$month-$year\"), \"Date: -\");",
                "    assert_eq!(captures.interpolate_string(\"\", replacement), \"day=, month=\");",
                "    assert_eq!(captures.interpolate_string(haystack, \"\"), \"\");",
                "    assert_eq!(captures.interpolate_string(\"Nothing to see here\", \"No captures $wrong\"), \"No captures \");"
              ],
              "code": [
                "{",
                "    let group_info = GroupInfo::default();",
                "    let captures = Captures::all(group_info.clone());",
                "    let haystack = \"Text with date 08-09-2021 found.\";",
                "    let replacement = \"day=$day, month=$month\";",
                "    let _result = captures.interpolate_string(haystack, replacement);",
                "    assert_eq!(captures.interpolate_string(haystack, replacement), \"day=, month=\");",
                "    assert_eq!(captures.interpolate_string(haystack, \"No match here\"), \"No match here\");",
                "    assert_eq!(captures.interpolate_string(\"No captures\", \"Test: $missing\"), \"Test: \");",
                "    assert_eq!(captures.interpolate_string(haystack, \"Date: $day-$month-$year\"), \"Date: -\");",
                "    assert_eq!(captures.interpolate_string(\"\", replacement), \"day=, month=\");",
                "    assert_eq!(captures.interpolate_string(haystack, \"\"), \"\");",
                "    assert_eq!(captures.interpolate_string(\"Nothing to see here\", \"No captures $wrong\"), \"No captures \");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let group_info = GroupInfo::default();",
                "    let captures = Captures::all(group_info.clone());",
                "    let haystack = \"On 14-03-2010.\";",
                "    let replacement = \"\";",
                "    let _result = captures.interpolate_string(haystack, replacement);",
                "}"
              ],
              "oracle": [
                "    let group_info = GroupInfo::default();",
                "    let captures = Captures::all(group_info.clone());",
                "    let haystack = \"On 14-03-2010.\";",
                "    let replacement = \"\";",
                "    let result = captures.interpolate_string(haystack, replacement);",
                "    assert_eq!(result, \"\");"
              ],
              "code": [
                "{",
                "    let group_info = GroupInfo::default();",
                "    let captures = Captures::all(group_info.clone());",
                "    let haystack = \"On 14-03-2010.\";",
                "    let replacement = \"\";",
                "    let _result = captures.interpolate_string(haystack, replacement);",
                "    let group_info = GroupInfo::default();",
                "    let captures = Captures::all(group_info.clone());",
                "    let haystack = \"On 14-03-2010.\";",
                "    let replacement = \"\";",
                "    let result = captures.interpolate_string(haystack, replacement);",
                "    assert_eq!(result, \"\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}