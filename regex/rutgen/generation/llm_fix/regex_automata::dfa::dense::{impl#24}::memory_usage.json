{
  "name": "regex_automata::dfa::dense::{impl#24}::memory_usage",
  "mod_info": {
    "name": "dfa::dense",
    "loc": "regex-automata/src/dfa/mod.rs:337:1:337:15"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/dense.rs:4665:5:4667:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: (self.slices().len() + self.pattern_ids().len()) * PatternID::SIZE\n"
      ],
      "input_infer": "self.slices length >= 0, self.pattern_ids length >= 0, valid PatternID.SIZE (size of a PatternID) > 0\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let test_data = MatchStates {",
                "        slices: vec![],",
                "        pattern_ids: vec![],",
                "        pattern_len: 0,",
                "    };",
                "    let _ = test_data.memory_usage();",
                "}"
              ],
              "oracle": [
                "    let test_data = MatchStates { slices: vec![], pattern_ids: vec![], pattern_len: 0 }; assert_eq!(test_data.memory_usage(), 0);",
                "    let test_data = MatchStates { slices: vec![0, 1], pattern_ids: vec![0, 1], pattern_len: 2 }; assert_eq!(test_data.memory_usage(), 4 * PatternID::SIZE);",
                "    let test_data = MatchStates { slices: vec![0, 1, 2], pattern_ids: vec![0, 1], pattern_len: 2 }; assert_eq!(test_data.memory_usage(), 3 * PatternID::SIZE);",
                "    let test_data = MatchStates { slices: vec![0, 1], pattern_ids: vec![0, 1, 2], pattern_len: 3 }; assert_eq!(test_data.memory_usage(), 3 * PatternID::SIZE);",
                "    let test_data = MatchStates { slices: vec![0, 1, 2, 3], pattern_ids: vec![0, 1, 2], pattern_len: 3 }; assert_eq!(test_data.memory_usage(), 4 * PatternID::SIZE);",
                "    let test_data = MatchStates { slices: vec![0, 1, 2], pattern_ids: vec![], pattern_len: 0 }; assert_eq!(test_data.memory_usage(), 3 * PatternID::SIZE);",
                "    let test_data = MatchStates { slices: vec![], pattern_ids: vec![0, 1, 2, 3], pattern_len: 4 }; assert_eq!(test_data.memory_usage(), 4 * PatternID::SIZE);"
              ],
              "code": [
                "{",
                "    let test_data = MatchStates {",
                "        slices: vec![],",
                "        pattern_ids: vec![],",
                "        pattern_len: 0,",
                "    };",
                "    let _ = test_data.memory_usage();",
                "    let test_data = MatchStates { slices: vec![], pattern_ids: vec![], pattern_len: 0 }; assert_eq!(test_data.memory_usage(), 0);",
                "    let test_data = MatchStates { slices: vec![0, 1], pattern_ids: vec![0, 1], pattern_len: 2 }; assert_eq!(test_data.memory_usage(), 4 * PatternID::SIZE);",
                "    let test_data = MatchStates { slices: vec![0, 1, 2], pattern_ids: vec![0, 1], pattern_len: 2 }; assert_eq!(test_data.memory_usage(), 3 * PatternID::SIZE);",
                "    let test_data = MatchStates { slices: vec![0, 1], pattern_ids: vec![0, 1, 2], pattern_len: 3 }; assert_eq!(test_data.memory_usage(), 3 * PatternID::SIZE);",
                "    let test_data = MatchStates { slices: vec![0, 1, 2, 3], pattern_ids: vec![0, 1, 2], pattern_len: 3 }; assert_eq!(test_data.memory_usage(), 4 * PatternID::SIZE);",
                "    let test_data = MatchStates { slices: vec![0, 1, 2], pattern_ids: vec![], pattern_len: 0 }; assert_eq!(test_data.memory_usage(), 3 * PatternID::SIZE);",
                "    let test_data = MatchStates { slices: vec![], pattern_ids: vec![0, 1, 2, 3], pattern_len: 4 }; assert_eq!(test_data.memory_usage(), 4 * PatternID::SIZE);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let test_data = MatchStates {",
                "        slices: vec![1],",
                "        pattern_ids: vec![2],",
                "        pattern_len: 1,",
                "    };",
                "    let _ = test_data.memory_usage();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(test_data.memory_usage(), (1 + 1) * PatternID::SIZE);"
              ],
              "code": [
                "{",
                "    let test_data = MatchStates {",
                "        slices: vec![1],",
                "        pattern_ids: vec![2],",
                "        pattern_len: 1,",
                "    };",
                "    let _ = test_data.memory_usage();",
                "    assert_eq!(test_data.memory_usage(), (1 + 1) * PatternID::SIZE);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let test_data = MatchStates {",
                "        slices: vec![1, 1, 1],",
                "        pattern_ids: vec![2, 2, 2],",
                "        pattern_len: 3,",
                "    };",
                "    let _ = test_data.memory_usage();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(test_data.slices.len(), 3);",
                "    assert_eq!(test_data.pattern_ids.len(), 3);",
                "    assert_eq!(test_data.pattern_len, 3);",
                "    assert_eq!(test_data.memory_usage(), (3 + 3) * PatternID::SIZE);"
              ],
              "code": [
                "{",
                "    let test_data = MatchStates {",
                "        slices: vec![1, 1, 1],",
                "        pattern_ids: vec![2, 2, 2],",
                "        pattern_len: 3,",
                "    };",
                "    let _ = test_data.memory_usage();",
                "    assert_eq!(test_data.slices.len(), 3);",
                "    assert_eq!(test_data.pattern_ids.len(), 3);",
                "    assert_eq!(test_data.pattern_len, 3);",
                "    assert_eq!(test_data.memory_usage(), (3 + 3) * PatternID::SIZE);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let test_data = MatchStates {",
                "        slices: vec![0; 1000],",
                "        pattern_ids: vec![0; 1000],",
                "        pattern_len: 1000,",
                "    };",
                "    let _ = test_data.memory_usage();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(test_data.memory_usage(), (1000 + 1000) * PatternID::SIZE);"
              ],
              "code": [
                "{",
                "    let test_data = MatchStates {",
                "        slices: vec![0; 1000],",
                "        pattern_ids: vec![0; 1000],",
                "        pattern_len: 1000,",
                "    };",
                "    let _ = test_data.memory_usage();",
                "    assert_eq!(test_data.memory_usage(), (1000 + 1000) * PatternID::SIZE);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}