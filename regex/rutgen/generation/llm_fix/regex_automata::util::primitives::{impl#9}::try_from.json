{
  "name": "regex_automata::util::primitives::{impl#9}::try_from",
  "mod_info": {
    "name": "util::primitives",
    "loc": "regex-automata/src/util/mod.rs:42:1:42:20"
  },
  "visible": true,
  "loc": "regex-automata/src/util/primitives.rs:326:5:331:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: index > SmallIndex::MAX.as_u32() at line 327 is true\n",
        "expected return value/type: Err(SmallIndexError { attempted: u64::from(index) })\n"
      ],
      "input_infer": "index: u32 > SmallIndex::MAX.as_u32()\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let index: u32 = SmallIndex::MAX.as_u32() + 1;",
                "    let result = SmallIndex::try_from(index);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap().attempted, u64::from(index));"
              ],
              "code": [
                "{",
                "    let index: u32 = SmallIndex::MAX.as_u32() + 1;",
                "    let result = SmallIndex::try_from(index);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap().attempted, u64::from(index));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let index: u32 = SmallIndex::MAX.as_u32() + 1000;",
                "    let result = SmallIndex::try_from(index);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().attempted, u64::from(index));"
              ],
              "code": [
                "{",
                "    let index: u32 = SmallIndex::MAX.as_u32() + 1000;",
                "    let result = SmallIndex::try_from(index);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().attempted, u64::from(index));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let index: u32 = u32::MAX;",
                "    let result = SmallIndex::try_from(index);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().attempted, u64::from(u32::MAX));"
              ],
              "code": [
                "{",
                "    let index: u32 = u32::MAX;",
                "    let result = SmallIndex::try_from(index);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().attempted, u64::from(u32::MAX));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: index > SmallIndex::MAX.as_u32() at line 327 is false, with bound index == SmallIndex::MAX.as_u32()\n",
        "expected return value/type: Ok(SmallIndex::new_unchecked(index.as_usize()))\n"
      ],
      "input_infer": "index in the range [0, SmallIndex::MAX.as_u32()]\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let index = SmallIndex::MAX.as_u32();",
                "    let result = SmallIndex::try_from(index);",
                "}"
              ],
              "oracle": [
                "    let index = SmallIndex::MAX.as_u32();",
                "    let expected = Ok(SmallIndex::new_unchecked(index.as_usize()));",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let index = SmallIndex::MAX.as_u32();",
                "    let result = SmallIndex::try_from(index);",
                "    let index = SmallIndex::MAX.as_u32();",
                "    let expected = Ok(SmallIndex::new_unchecked(index.as_usize()));",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let index = 0;",
                "    let result = SmallIndex::try_from(index);",
                "}"
              ],
              "oracle": [
                "    let index = SmallIndex::MAX.as_u32();",
                "    let result = SmallIndex::try_from(index);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), SmallIndex::new_unchecked(index.as_usize()));"
              ],
              "code": [
                "{",
                "    let index = 0;",
                "    let result = SmallIndex::try_from(index);",
                "    let index = SmallIndex::MAX.as_u32();",
                "    let result = SmallIndex::try_from(index);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), SmallIndex::new_unchecked(index.as_usize()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let index = 1;",
                "    let result = SmallIndex::try_from(index);",
                "}"
              ],
              "oracle": [
                "    let index = SmallIndex::MAX.as_u32();",
                "    let result = SmallIndex::try_from(index);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), SmallIndex::new_unchecked(index.as_usize()));"
              ],
              "code": [
                "{",
                "    let index = 1;",
                "    let result = SmallIndex::try_from(index);",
                "    let index = SmallIndex::MAX.as_u32();",
                "    let result = SmallIndex::try_from(index);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), SmallIndex::new_unchecked(index.as_usize()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let index = SmallIndex::MAX.as_u32() - 1;",
                "    let result = SmallIndex::try_from(index);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(SmallIndex::new_unchecked(SmallIndex::MAX.as_usize() - 1)));"
              ],
              "code": [
                "{",
                "    let index = SmallIndex::MAX.as_u32() - 1;",
                "    let result = SmallIndex::try_from(index);",
                "    assert_eq!(result, Ok(SmallIndex::new_unchecked(SmallIndex::MAX.as_usize() - 1)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}