{
  "name": "regex_lite::hir::parse::{impl#0}::add_capture_name",
  "mod_info": {
    "name": "hir::parse",
    "loc": "regex-lite/src/hir/mod.rs:5:1:5:11"
  },
  "visible": false,
  "loc": "regex-lite/src/hir/parse.rs:350:5:359:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: names.binary_search_by(|n| name.cmp(n)) matches Err(i) at line 352 is true\n",
        "expected return value/type: Ok(())\n"
      ],
      "input_infer": "Test input conditions or ranges: A unique capture name string that is not already present in `capture_names`, for example: any non-empty string that does not match existing capture names.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let parser = Parser::new(config, \"some pattern\");",
                "    let result = parser.add_capture_name(\"unique_capture\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(()));"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let parser = Parser::new(config, \"some pattern\");",
                "    let result = parser.add_capture_name(\"unique_capture\");",
                "    assert_eq!(result, Ok(()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let parser = Parser::new(config, \"some pattern\");",
                "    let _ = parser.add_capture_name(\"first_capture\");",
                "    let result = parser.add_capture_name(\"second_capture\");",
                "}"
              ],
              "oracle": [
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let parser = Parser::new(config, \"some pattern\");",
                "    let _ = parser.add_capture_name(\"first_capture\");",
                "    let result = parser.add_capture_name(\"second_capture\");",
                "    assert_eq!(result, Ok(()));"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let parser = Parser::new(config, \"some pattern\");",
                "    let _ = parser.add_capture_name(\"first_capture\");",
                "    let result = parser.add_capture_name(\"second_capture\");",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let parser = Parser::new(config, \"some pattern\");",
                "    let _ = parser.add_capture_name(\"first_capture\");",
                "    let result = parser.add_capture_name(\"second_capture\");",
                "    assert_eq!(result, Ok(()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let parser = Parser::new(config, \"some pattern\");",
                "    let result = parser.add_capture_name(\"this_is_a_really_long_unique_capture_name\");",
                "}"
              ],
              "oracle": [
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let parser = Parser::new(config, \"some pattern\");",
                "    let result = parser.add_capture_name(\"this_is_a_really_long_unique_capture_name\");",
                "    assert_eq!(result, Ok(()));"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let parser = Parser::new(config, \"some pattern\");",
                "    let result = parser.add_capture_name(\"this_is_a_really_long_unique_capture_name\");",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let parser = Parser::new(config, \"some pattern\");",
                "    let result = parser.add_capture_name(\"this_is_a_really_long_unique_capture_name\");",
                "    assert_eq!(result, Ok(()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let parser = Parser::new(config, \"some pattern\");",
                "    let _ = parser.add_capture_name(\"\"); // This should be handled by validation if necessary.",
                "    let result = parser.add_capture_name(\"valid_capture_name\");",
                "}"
              ],
              "oracle": [
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let parser = Parser::new(config, \"some pattern\");",
                "    let result = parser.add_capture_name(\"valid_capture_name\");",
                "    assert_eq!(result, Ok(()));"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let parser = Parser::new(config, \"some pattern\");",
                "    let _ = parser.add_capture_name(\"\"); // This should be handled by validation if necessary.",
                "    let result = parser.add_capture_name(\"valid_capture_name\");",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let parser = Parser::new(config, \"some pattern\");",
                "    let result = parser.add_capture_name(\"valid_capture_name\");",
                "    assert_eq!(result, Ok(()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: names.binary_search_by(|n| name.cmp(n)) matches Ok(_) at line 352 is true\n",
        "precondition: names.binary_search_by(|n| name.cmp(n)) matches Ok(_) at line 352 is true\n",
        "expected return value/type: Err(Error::new(ERR_DUPLICATE_CAPTURE_NAME))\n"
      ],
      "input_infer": "Test input conditions: Provide a capture name that already exists in the `capture_names` vector, ensuring the vector has at least one entry with a matching name to trigger the duplicate capture error.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"sample_pattern\";",
                "    let mut parser = Parser::new(config, pattern);",
                "    ",
                "    let capture_name = \"duplicate_name\";",
                "    let _ = parser.add_capture_name(capture_name);",
                "",
                "    let result = parser.add_capture_name(capture_name);",
                "}"
              ],
              "oracle": [
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"sample_pattern\";",
                "    let mut parser = Parser::new(config, pattern);",
                "    let capture_name = \"duplicate_name\";",
                "    let _ = parser.add_capture_name(capture_name);",
                "    assert_eq!(result, Err(Error::new(ERR_DUPLICATE_CAPTURE_NAME)));"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"sample_pattern\";",
                "    let mut parser = Parser::new(config, pattern);",
                "    ",
                "    let capture_name = \"duplicate_name\";",
                "    let _ = parser.add_capture_name(capture_name);",
                "",
                "    let result = parser.add_capture_name(capture_name);",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"sample_pattern\";",
                "    let mut parser = Parser::new(config, pattern);",
                "    let capture_name = \"duplicate_name\";",
                "    let _ = parser.add_capture_name(capture_name);",
                "    assert_eq!(result, Err(Error::new(ERR_DUPLICATE_CAPTURE_NAME)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"sample_pattern\";",
                "    let mut parser = Parser::new(config, pattern);",
                "",
                "    let capture_name_1 = \"duplicate_name\";",
                "    let _ = parser.add_capture_name(capture_name_1);",
                "    ",
                "    let capture_name_2 = \"duplicate_name\"; ",
                "    let result = parser.add_capture_name(capture_name_2);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().msg, ERR_DUPLICATE_CAPTURE_NAME);"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"sample_pattern\";",
                "    let mut parser = Parser::new(config, pattern);",
                "",
                "    let capture_name_1 = \"duplicate_name\";",
                "    let _ = parser.add_capture_name(capture_name_1);",
                "    ",
                "    let capture_name_2 = \"duplicate_name\"; ",
                "    let result = parser.add_capture_name(capture_name_2);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().msg, ERR_DUPLICATE_CAPTURE_NAME);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}