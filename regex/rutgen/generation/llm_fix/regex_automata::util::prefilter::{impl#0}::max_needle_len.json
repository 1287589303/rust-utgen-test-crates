{
  "name": "regex_automata::util::prefilter::{impl#0}::max_needle_len",
  "mod_info": {
    "name": "util::prefilter",
    "loc": "regex-automata/src/util/mod.rs:41:1:41:19"
  },
  "visible": true,
  "loc": "regex-automata/src/util/prefilter/mod.rs:426:5:435:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.max_needle_len\n"
      ],
      "input_infer": "valid input when 'alloc' feature is enabled: valid Prefilter instance with max_needle_len set in range [0, max size of usize]; invalid input when 'alloc' feature is not enabled (should trigger unreachable)\n",
      "answers": [
        {
          "uses": [
            "use core::sync::Arc;",
            "use crate::util::search::MatchKind;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    #[cfg(feature = \"alloc\")]",
                "    {",
                "        use crate::util::search::MatchKind;",
                "        use core::sync::Arc;",
                "",
                "        let needles = vec![b\"needle1\", b\"needle2\"];",
                "        let prefilter = Prefilter::new(MatchKind::Any, &needles).unwrap();",
                "        let max_len = prefilter.max_needle_len();",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert!(max_len >= 7);",
                "    assert_eq!(max_len, 8);",
                "    assert!(max_len <= 8);",
                "    assert!(max_len.is::<usize>());",
                "    assert!(prefilter.is_fast());",
                "    assert!(prefilter.memory_usage() > 0);"
              ],
              "code": [
                "{",
                "    #[cfg(feature = \"alloc\")]",
                "    {",
                "        use crate::util::search::MatchKind;",
                "        use core::sync::Arc;",
                "",
                "        let needles = vec![b\"needle1\", b\"needle2\"];",
                "        let prefilter = Prefilter::new(MatchKind::Any, &needles).unwrap();",
                "        let max_len = prefilter.max_needle_len();",
                "    }",
                "    assert!(max_len >= 7);",
                "    assert_eq!(max_len, 8);",
                "    assert!(max_len <= 8);",
                "    assert!(max_len.is::<usize>());",
                "    assert!(prefilter.is_fast());",
                "    assert!(prefilter.memory_usage() > 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    #[cfg(not(feature = \"alloc\"))]",
                "    {",
                "        let prefilter = Prefilter {",
                "            _unused: (),",
                "            pre: Arc::new(Memchr),",
                "            is_fast: true,",
                "            max_needle_len: 0,",
                "        };",
                "        let max_len = prefilter.max_needle_len();",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| {",
                "    let prefilter = Prefilter {",
                "    _unused: (),",
                "    pre: Arc::new(Memchr),",
                "    is_fast: true,",
                "    max_needle_len: 0,",
                "    };",
                "    prefilter.max_needle_len()",
                "    }).is_err());"
              ],
              "code": [
                "{",
                "    #[cfg(not(feature = \"alloc\"))]",
                "    {",
                "        let prefilter = Prefilter {",
                "            _unused: (),",
                "            pre: Arc::new(Memchr),",
                "            is_fast: true,",
                "            max_needle_len: 0,",
                "        };",
                "        let max_len = prefilter.max_needle_len();",
                "    }",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let prefilter = Prefilter {",
                "    _unused: (),",
                "    pre: Arc::new(Memchr),",
                "    is_fast: true,",
                "    max_needle_len: 0,",
                "    };",
                "    prefilter.max_needle_len()",
                "    }).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}