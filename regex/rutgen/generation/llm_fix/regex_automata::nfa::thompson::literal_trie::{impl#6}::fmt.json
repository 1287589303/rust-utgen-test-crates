{
  "name": "regex_automata::nfa::thompson::literal_trie::{impl#6}::fmt",
  "mod_info": {
    "name": "nfa::thompson::literal_trie",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:63:1:63:18"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/literal_trie.rs:472:5:479:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Input conditions: Valid `Transition` instances where `byte` is within the range 0 to 255 (inclusive) and `next` is a valid `StateID` within the range of defined states.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition {",
                "        byte: 0,",
                "        next: StateID(0),",
                "    };",
                "    let mut output = core::fmt::Formatter::default();",
                "    transition.fmt(&mut output);",
                "}"
              ],
              "oracle": [
                "    let transition = Transition { byte: 0, next: StateID(0) };",
                "    let expected_output = \"DebugByte(0) => 0\";",
                "    let actual_output = format!(\"{:?} => {}\", crate::util::escape::DebugByte(transition.byte), transition.next.as_usize());",
                "    assert_eq!(actual_output, expected_output);",
                "    let transition = Transition { byte: 255, next: StateID(1) };",
                "    let expected_output = \"DebugByte(255) => 1\";",
                "    let actual_output = format!(\"{:?} => {}\", crate::util::escape::DebugByte(transition.byte), transition.next.as_usize());",
                "    assert_eq!(actual_output, expected_output);",
                "    let transition = Transition { byte: 128, next: StateID(2) };",
                "    let expected_output = \"DebugByte(128) => 2\";",
                "    let actual_output = format!(\"{:?} => {}\", crate::util::escape::DebugByte(transition.byte), transition.next.as_usize());",
                "    assert_eq!(actual_output, expected_output);"
              ],
              "code": [
                "{",
                "    let transition = Transition {",
                "        byte: 0,",
                "        next: StateID(0),",
                "    };",
                "    let mut output = core::fmt::Formatter::default();",
                "    transition.fmt(&mut output);",
                "    let transition = Transition { byte: 0, next: StateID(0) };",
                "    let expected_output = \"DebugByte(0) => 0\";",
                "    let actual_output = format!(\"{:?} => {}\", crate::util::escape::DebugByte(transition.byte), transition.next.as_usize());",
                "    assert_eq!(actual_output, expected_output);",
                "    let transition = Transition { byte: 255, next: StateID(1) };",
                "    let expected_output = \"DebugByte(255) => 1\";",
                "    let actual_output = format!(\"{:?} => {}\", crate::util::escape::DebugByte(transition.byte), transition.next.as_usize());",
                "    assert_eq!(actual_output, expected_output);",
                "    let transition = Transition { byte: 128, next: StateID(2) };",
                "    let expected_output = \"DebugByte(128) => 2\";",
                "    let actual_output = format!(\"{:?} => {}\", crate::util::escape::DebugByte(transition.byte), transition.next.as_usize());",
                "    assert_eq!(actual_output, expected_output);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition {",
                "        byte: 128,",
                "        next: StateID(1),",
                "    };",
                "    let mut output = core::fmt::Formatter::default();",
                "    transition.fmt(&mut output);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(output.to_string(), \"DebugByte(128) => 1\");"
              ],
              "code": [
                "{",
                "    let transition = Transition {",
                "        byte: 128,",
                "        next: StateID(1),",
                "    };",
                "    let mut output = core::fmt::Formatter::default();",
                "    transition.fmt(&mut output);",
                "    assert_eq!(output.to_string(), \"DebugByte(128) => 1\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition {",
                "        byte: 255,",
                "        next: StateID(2),",
                "    };",
                "    let mut output = core::fmt::Formatter::default();",
                "    transition.fmt(&mut output);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(output.to_string(), \"DebugByte(255) => 2\");",
                "    assert_eq!(output.is_empty(), false);",
                "    assert_eq!(output.len(), 20);",
                "    assert!(output.contains(\"DebugByte(255)\"));",
                "    assert!(output.contains(\"=> 2\"));"
              ],
              "code": [
                "{",
                "    let transition = Transition {",
                "        byte: 255,",
                "        next: StateID(2),",
                "    };",
                "    let mut output = core::fmt::Formatter::default();",
                "    transition.fmt(&mut output);",
                "    assert_eq!(output.to_string(), \"DebugByte(255) => 2\");",
                "    assert_eq!(output.is_empty(), false);",
                "    assert_eq!(output.len(), 20);",
                "    assert!(output.contains(\"DebugByte(255)\"));",
                "    assert!(output.contains(\"=> 2\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition_1 = Transition {",
                "        byte: 100,",
                "        next: StateID(3),",
                "    };",
                "    let mut output_1 = core::fmt::Formatter::default();",
                "    transition_1.fmt(&mut output_1);",
                "    ",
                "    let transition_2 = Transition {",
                "        byte: 150,",
                "        next: StateID(4),",
                "    };",
                "    let mut output_2 = core::fmt::Formatter::default();",
                "    transition_2.fmt(&mut output_2);",
                "    ",
                "    let transition_3 = Transition {",
                "        byte: 200,",
                "        next: StateID(5),",
                "    };",
                "    let mut output_3 = core::fmt::Formatter::default();",
                "    transition_3.fmt(&mut output_3);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(transition_1.fmt(&mut output_1), core::fmt::Result::Ok);",
                "    assert_eq!(transition_2.fmt(&mut output_2), core::fmt::Result::Ok);",
                "    assert_eq!(transition_3.fmt(&mut output_3), core::fmt::Result::Ok);",
                "    assert_eq!(output_1.as_str(), \"DebugByte(100) => 3\");",
                "    assert_eq!(output_2.as_str(), \"DebugByte(150) => 4\");",
                "    assert_eq!(output_3.as_str(), \"DebugByte(200) => 5\");"
              ],
              "code": [
                "{",
                "    let transition_1 = Transition {",
                "        byte: 100,",
                "        next: StateID(3),",
                "    };",
                "    let mut output_1 = core::fmt::Formatter::default();",
                "    transition_1.fmt(&mut output_1);",
                "    ",
                "    let transition_2 = Transition {",
                "        byte: 150,",
                "        next: StateID(4),",
                "    };",
                "    let mut output_2 = core::fmt::Formatter::default();",
                "    transition_2.fmt(&mut output_2);",
                "    ",
                "    let transition_3 = Transition {",
                "        byte: 200,",
                "        next: StateID(5),",
                "    };",
                "    let mut output_3 = core::fmt::Formatter::default();",
                "    transition_3.fmt(&mut output_3);",
                "    assert_eq!(transition_1.fmt(&mut output_1), core::fmt::Result::Ok);",
                "    assert_eq!(transition_2.fmt(&mut output_2), core::fmt::Result::Ok);",
                "    assert_eq!(transition_3.fmt(&mut output_3), core::fmt::Result::Ok);",
                "    assert_eq!(output_1.as_str(), \"DebugByte(100) => 3\");",
                "    assert_eq!(output_2.as_str(), \"DebugByte(150) => 4\");",
                "    assert_eq!(output_3.as_str(), \"DebugByte(200) => 5\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}