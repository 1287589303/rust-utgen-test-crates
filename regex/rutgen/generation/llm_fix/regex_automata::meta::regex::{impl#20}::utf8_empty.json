{
  "name": "regex_automata::meta::regex::{impl#20}::utf8_empty",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:2531:5:2533:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Config { utf8_empty: Some(yes), ..self }\n"
      ],
      "input_infer": "yes: bool in {true, false}\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new();",
                "    let new_config = config.utf8_empty(true);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(new_config.utf8_empty, Some(true));"
              ],
              "code": [
                "{",
                "    let config = Config::new();",
                "    let new_config = config.utf8_empty(true);",
                "    assert_eq!(new_config.utf8_empty, Some(true));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new();",
                "    let new_config = config.utf8_empty(false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(new_config.utf8_empty, Some(false));"
              ],
              "code": [
                "{",
                "    let config = Config::new();",
                "    let new_config = config.utf8_empty(false);",
                "    assert_eq!(new_config.utf8_empty, Some(false));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}