{
  "name": "regex_automata::util::alphabet::{impl#0}::eoi",
  "mod_info": {
    "name": "util::alphabet",
    "loc": "regex-automata/src/util/mod.rs:30:1:30:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/alphabet.rs:117:5:124:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: num_byte_equiv_classes <= 256 at line 119 is true, with bound num_byte_equiv_classes == 256\n",
        "expected return value/type: Unit(UnitKind::EOI(u16::try_from(num_byte_equiv_classes).unwrap()))\n"
      ],
      "input_infer": "num_byte_equiv_classes: 0 to 256\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let _unit = Unit::eoi(0);",
                "}"
              ],
              "oracle": [
                "    Unit::eoi(256);  // should return Unit(UnitKind::EOI(256))",
                "    Unit::eoi(255);  // should return Unit(UnitKind::EOI(255))",
                "    Unit::eoi(1);    // should return Unit(UnitKind::EOI(1))",
                "    Unit::eoi(2);    // should return Unit(UnitKind::EOI(2))",
                "    Unit::eoi(128);  // should return Unit(UnitKind::EOI(128))"
              ],
              "code": [
                "{",
                "#[should_panic]",
                "fn test_eoi_overflow() {",
                "    let _unit = Unit::eoi(257);",
                "}",
                "    let _unit = Unit::eoi(0);",
                "    Unit::eoi(256);  // should return Unit(UnitKind::EOI(256))",
                "    Unit::eoi(255);  // should return Unit(UnitKind::EOI(255))",
                "    Unit::eoi(1);    // should return Unit(UnitKind::EOI(1))",
                "    Unit::eoi(2);    // should return Unit(UnitKind::EOI(2))",
                "    Unit::eoi(128);  // should return Unit(UnitKind::EOI(128))",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let _unit = Unit::eoi(128);",
                "}"
              ],
              "oracle": [
                "    Unit::eoi(256); // Expect no panic, returns Unit(UnitKind::EOI(256))",
                "    Unit::eoi(0); // Expect no panic, returns Unit(UnitKind::EOI(0))",
                "    Unit::eoi(1); // Expect no panic, returns Unit(UnitKind::EOI(1))",
                "    Unit::eoi(255); // Expect no panic, returns Unit(UnitKind::EOI(255))",
                "    Unit::eoi(257); // Expect panic due to overflow"
              ],
              "code": [
                "{",
                "#[should_panic]",
                "fn test_eoi_overflow() {",
                "    let _unit = Unit::eoi(257);",
                "}",
                "    let _unit = Unit::eoi(128);",
                "    Unit::eoi(256); // Expect no panic, returns Unit(UnitKind::EOI(256))",
                "    Unit::eoi(0); // Expect no panic, returns Unit(UnitKind::EOI(0))",
                "    Unit::eoi(1); // Expect no panic, returns Unit(UnitKind::EOI(1))",
                "    Unit::eoi(255); // Expect no panic, returns Unit(UnitKind::EOI(255))",
                "    Unit::eoi(257); // Expect panic due to overflow",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let _unit = Unit::eoi(256);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Unit::eoi(256).as_eoi(), Some(256));",
                "    assert_eq!(Unit::eoi(256).as_usize(), 256);",
                "    assert!(Unit::eoi(256).is_eoi());",
                "    assert!(!Unit::eoi(256).is_byte(0));",
                "    assert!(!Unit::eoi(256).is_word_byte());",
                "    assert_eq!(Unit::eoi(255).as_eoi(), Some(255));",
                "    assert_eq!(Unit::eoi(255).as_usize(), 255);",
                "    assert!(Unit::eoi(255).is_eoi());",
                "    assert!(!Unit::eoi(255).is_byte(0));",
                "    assert!(!Unit::eoi(255).is_word_byte());"
              ],
              "code": [
                "{",
                "#[should_panic]",
                "fn test_eoi_overflow() {",
                "    let _unit = Unit::eoi(257);",
                "}",
                "    let _unit = Unit::eoi(256);",
                "    assert_eq!(Unit::eoi(256).as_eoi(), Some(256));",
                "    assert_eq!(Unit::eoi(256).as_usize(), 256);",
                "    assert!(Unit::eoi(256).is_eoi());",
                "    assert!(!Unit::eoi(256).is_byte(0));",
                "    assert!(!Unit::eoi(256).is_word_byte());",
                "    assert_eq!(Unit::eoi(255).as_eoi(), Some(255));",
                "    assert_eq!(Unit::eoi(255).as_usize(), 255);",
                "    assert!(Unit::eoi(255).is_eoi());",
                "    assert!(!Unit::eoi(255).is_byte(0));",
                "    assert!(!Unit::eoi(255).is_word_byte());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: num_byte_equiv_classes <= 256 at line 119 is false\n"
      ],
      "input_infer": "num_byte_equiv_classes: 257, 256, 0-256 (inclusive)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let _unit = Unit::eoi(257);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| { Unit::eoi(257); }).is_err());"
              ],
              "code": [
                "{",
                "    let _unit = Unit::eoi(257);",
                "    assert!(std::panic::catch_unwind(|| { Unit::eoi(257); }).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let _unit = Unit::eoi(256);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| Unit::eoi(257)).is_err());",
                "    assert!(std::panic::catch_unwind(|| Unit::eoi(300)).is_err());",
                "    assert!(std::panic::catch_unwind(|| Unit::eoi(512)).is_err());"
              ],
              "code": [
                "{",
                "    let _unit = Unit::eoi(256);",
                "    assert!(std::panic::catch_unwind(|| Unit::eoi(257)).is_err());",
                "    assert!(std::panic::catch_unwind(|| Unit::eoi(300)).is_err());",
                "    assert!(std::panic::catch_unwind(|| Unit::eoi(512)).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let _unit = Unit::eoi(0);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| Unit::eoi(257)).is_err());"
              ],
              "code": [
                "{",
                "    let _unit = Unit::eoi(0);",
                "    assert!(std::panic::catch_unwind(|| Unit::eoi(257)).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let _unit = Unit::eoi(128);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_unit.as_eoi(), Some(128));",
                "    assert!(_unit.is_eoi());",
                "    assert!(!_unit.is_byte(0));",
                "    assert!(!_unit.is_byte(255));",
                "    assert!(!_unit.is_word_byte());"
              ],
              "code": [
                "{",
                "    let _unit = Unit::eoi(128);",
                "    assert_eq!(_unit.as_eoi(), Some(128));",
                "    assert!(_unit.is_eoi());",
                "    assert!(!_unit.is_byte(0));",
                "    assert!(!_unit.is_byte(255));",
                "    assert!(!_unit.is_word_byte());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}