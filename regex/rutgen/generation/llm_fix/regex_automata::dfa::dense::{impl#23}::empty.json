{
  "name": "regex_automata::dfa::dense::{impl#23}::empty",
  "mod_info": {
    "name": "dfa::dense",
    "loc": "regex-automata/src/dfa/mod.rs:337:1:337:15"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/dense.rs:4426:5:4429:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: pattern_len <= PatternID::LIMIT at line 4427 is true, with bound pattern_len == PatternID::LIMIT\n",
        "expected return value/type: MatchStates { slices: vec![], pattern_ids: vec![], pattern_len }\n"
      ],
      "input_infer": "0 <= pattern_len <= PatternID::LIMIT\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    const LIMIT: usize = PatternID::LIMIT as usize;",
                "    let result = MatchStates::empty(LIMIT);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.slices, vec![]);",
                "    assert_eq!(result.pattern_ids, vec![]);",
                "    assert_eq!(result.pattern_len, LIMIT);"
              ],
              "code": [
                "{",
                "    const LIMIT: usize = PatternID::LIMIT as usize;",
                "    let result = MatchStates::empty(LIMIT);",
                "    assert_eq!(result.slices, vec![]);",
                "    assert_eq!(result.pattern_ids, vec![]);",
                "    assert_eq!(result.pattern_len, LIMIT);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = MatchStates::empty(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.slices, vec![]);",
                "    assert_eq!(result.pattern_ids, vec![]);",
                "    assert_eq!(result.pattern_len, 0);"
              ],
              "code": [
                "{",
                "    let result = MatchStates::empty(0);",
                "    assert_eq!(result.slices, vec![]);",
                "    assert_eq!(result.pattern_ids, vec![]);",
                "    assert_eq!(result.pattern_len, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = MatchStates::empty(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.slices, vec![]);",
                "    assert_eq!(result.pattern_ids, vec![]);",
                "    assert_eq!(result.pattern_len, 1);",
                "    ",
                "    let result_limit = MatchStates::empty(PatternID::LIMIT);",
                "    assert_eq!(result_limit.slices, vec![]);",
                "    assert_eq!(result_limit.pattern_ids, vec![]);",
                "    assert_eq!(result_limit.pattern_len, PatternID::LIMIT);"
              ],
              "code": [
                "{",
                "    let result = MatchStates::empty(1);",
                "    assert_eq!(result.slices, vec![]);",
                "    assert_eq!(result.pattern_ids, vec![]);",
                "    assert_eq!(result.pattern_len, 1);",
                "    ",
                "    let result_limit = MatchStates::empty(PatternID::LIMIT);",
                "    assert_eq!(result_limit.slices, vec![]);",
                "    assert_eq!(result_limit.pattern_ids, vec![]);",
                "    assert_eq!(result_limit.pattern_len, PatternID::LIMIT);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = MatchStates::empty(PatternID::LIMIT - 1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.slices.len(), 0);",
                "    assert_eq!(result.pattern_ids.len(), 0);",
                "    assert_eq!(result.pattern_len, PatternID::LIMIT - 1);"
              ],
              "code": [
                "{",
                "    let result = MatchStates::empty(PatternID::LIMIT - 1);",
                "    assert_eq!(result.slices.len(), 0);",
                "    assert_eq!(result.pattern_ids.len(), 0);",
                "    assert_eq!(result.pattern_len, PatternID::LIMIT - 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: pattern_len <= PatternID::LIMIT at line 4427 is false\n"
      ],
      "input_infer": "pattern_len > PatternID::LIMIT\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let pattern_len = PatternID::LIMIT + 1; // pattern_len is greater than LIMIT",
                "    let _match_states = MatchStates::empty(pattern_len);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| {",
                "    let pattern_len = PatternID::LIMIT + 1;",
                "    MatchStates::empty(pattern_len);",
                "    }).is_err());"
              ],
              "code": [
                "{",
                "    let pattern_len = PatternID::LIMIT + 1; // pattern_len is greater than LIMIT",
                "    let _match_states = MatchStates::empty(pattern_len);",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let pattern_len = PatternID::LIMIT + 1;",
                "    MatchStates::empty(pattern_len);",
                "    }).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let pattern_len = PatternID::LIMIT + 100; // significantly exceeds LIMIT",
                "    let _match_states = MatchStates::empty(pattern_len);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| MatchStates::empty(PatternID::LIMIT + 100)).is_err());"
              ],
              "code": [
                "{",
                "    let pattern_len = PatternID::LIMIT + 100; // significantly exceeds LIMIT",
                "    let _match_states = MatchStates::empty(pattern_len);",
                "    assert!(std::panic::catch_unwind(|| MatchStates::empty(PatternID::LIMIT + 100)).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}