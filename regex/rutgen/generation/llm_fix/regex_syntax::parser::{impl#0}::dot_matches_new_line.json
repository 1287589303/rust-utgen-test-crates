{
  "name": "regex_syntax::parser::{impl#0}::dot_matches_new_line",
  "mod_info": {
    "name": "parser",
    "loc": "regex-syntax/src/lib.rs:191:1:191:12"
  },
  "visible": true,
  "loc": "regex-syntax/src/parser.rs:146:5:149:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "yes: {true, false}\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut parser_builder = ParserBuilder::new();",
                "    parser_builder.dot_matches_new_line(true);",
                "}"
              ],
              "oracle": [
                "    let mut parser_builder = ParserBuilder::new();",
                "    assert_eq!(parser_builder.dot_matches_new_line(true), &mut parser_builder);",
                "    let mut parser_builder_2 = ParserBuilder::new();",
                "    assert_eq!(parser_builder_2.dot_matches_new_line(false), &mut parser_builder_2);"
              ],
              "code": [
                "{",
                "    let mut parser_builder = ParserBuilder::new();",
                "    parser_builder.dot_matches_new_line(true);",
                "    let mut parser_builder = ParserBuilder::new();",
                "    assert_eq!(parser_builder.dot_matches_new_line(true), &mut parser_builder);",
                "    let mut parser_builder_2 = ParserBuilder::new();",
                "    assert_eq!(parser_builder_2.dot_matches_new_line(false), &mut parser_builder_2);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut parser_builder = ParserBuilder::new();",
                "    parser_builder.dot_matches_new_line(false);",
                "}"
              ],
              "oracle": [
                "    let mut parser_builder = ParserBuilder::new();",
                "    assert_eq!(parser_builder.dot_matches_new_line(false), &mut parser_builder);",
                "    let mut parser_builder = ParserBuilder::new();",
                "    assert_eq!(parser_builder.dot_matches_new_line(true), &mut parser_builder);",
                "    let mut parser_builder = ParserBuilder::new();",
                "    parser_builder.dot_matches_new_line(false);",
                "    assert!(parser_builder.hir.flags.dot_matches_new_line.is_none());",
                "    let mut parser_builder = ParserBuilder::new();",
                "    parser_builder.dot_matches_new_line(true);",
                "    assert_eq!(parser_builder.hir.flags.dot_matches_new_line, Some(true));"
              ],
              "code": [
                "{",
                "    let mut parser_builder = ParserBuilder::new();",
                "    parser_builder.dot_matches_new_line(false);",
                "    let mut parser_builder = ParserBuilder::new();",
                "    assert_eq!(parser_builder.dot_matches_new_line(false), &mut parser_builder);",
                "    let mut parser_builder = ParserBuilder::new();",
                "    assert_eq!(parser_builder.dot_matches_new_line(true), &mut parser_builder);",
                "    let mut parser_builder = ParserBuilder::new();",
                "    parser_builder.dot_matches_new_line(false);",
                "    assert!(parser_builder.hir.flags.dot_matches_new_line.is_none());",
                "    let mut parser_builder = ParserBuilder::new();",
                "    parser_builder.dot_matches_new_line(true);",
                "    assert_eq!(parser_builder.hir.flags.dot_matches_new_line, Some(true));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}