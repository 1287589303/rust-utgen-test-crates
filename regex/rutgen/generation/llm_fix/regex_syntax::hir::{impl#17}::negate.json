{
  "name": "regex_syntax::hir::{impl#17}::negate",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:1407:5:1409:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "ClassBytes with valid intervals ranging from ClassBytesRange(start: 0, end: 255) and empty ClassBytes with no ranges.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 0, end: 255 }]);",
                "    class_bytes.negate();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_bytes.is_ascii(), false);",
                "    assert_eq!(class_bytes.minimum_len(), None);",
                "    assert_eq!(class_bytes.maximum_len(), None);",
                "    assert_eq!(class_bytes.ranges().len(), 1);",
                "    assert_eq!(class_bytes.ranges()[0].start, 0);",
                "    assert_eq!(class_bytes.ranges()[0].end, 255);"
              ],
              "code": [
                "{",
                "    let mut class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 0, end: 255 }]);",
                "    class_bytes.negate();",
                "    assert_eq!(class_bytes.is_ascii(), false);",
                "    assert_eq!(class_bytes.minimum_len(), None);",
                "    assert_eq!(class_bytes.maximum_len(), None);",
                "    assert_eq!(class_bytes.ranges().len(), 1);",
                "    assert_eq!(class_bytes.ranges()[0].start, 0);",
                "    assert_eq!(class_bytes.ranges()[0].end, 255);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class_bytes = ClassBytes::empty();",
                "    class_bytes.negate();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_bytes.ranges().len(), 1);",
                "    assert!(class_bytes.is_ascii());",
                "    assert_eq!(class_bytes.minimum_len(), Some(0));",
                "    assert_eq!(class_bytes.maximum_len(), Some(255));",
                "    assert!(class_bytes.literal().is_none());"
              ],
              "code": [
                "{",
                "    let mut class_bytes = ClassBytes::empty();",
                "    class_bytes.negate();",
                "    assert_eq!(class_bytes.ranges().len(), 1);",
                "    assert!(class_bytes.is_ascii());",
                "    assert_eq!(class_bytes.minimum_len(), Some(0));",
                "    assert_eq!(class_bytes.maximum_len(), Some(255));",
                "    assert!(class_bytes.literal().is_none());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 10, end: 20 }]);",
                "    class_bytes.negate();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_bytes.is_ascii(), false);",
                "    assert_eq!(class_bytes.ranges().len(), 1);",
                "    assert_eq!(class_bytes.ranges()[0].start, 0);",
                "    assert_eq!(class_bytes.ranges()[0].end, 9);",
                "    assert_eq!(class_bytes.ranges()[1].start, 21);",
                "    assert_eq!(class_bytes.ranges()[1].end, 255);"
              ],
              "code": [
                "{",
                "    let mut class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 10, end: 20 }]);",
                "    class_bytes.negate();",
                "    assert_eq!(class_bytes.is_ascii(), false);",
                "    assert_eq!(class_bytes.ranges().len(), 1);",
                "    assert_eq!(class_bytes.ranges()[0].start, 0);",
                "    assert_eq!(class_bytes.ranges()[0].end, 9);",
                "    assert_eq!(class_bytes.ranges()[1].start, 21);",
                "    assert_eq!(class_bytes.ranges()[1].end, 255);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 1, end: 5 }, ClassBytesRange { start: 10, end: 15 }]);",
                "    class_bytes.negate();",
                "}"
              ],
              "oracle": [
                "    assert!(!class_bytes.ranges().contains(&ClassBytesRange { start: 1, end: 5 }));",
                "    assert!(!class_bytes.ranges().contains(&ClassBytesRange { start: 10, end: 15 }));",
                "    assert!(class_bytes.ranges().len() > 0);",
                "    assert!(class_bytes.ranges().iter().all(|r| r.start > 15 || r.end < 1));"
              ],
              "code": [
                "{",
                "    let mut class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 1, end: 5 }, ClassBytesRange { start: 10, end: 15 }]);",
                "    class_bytes.negate();",
                "    assert!(!class_bytes.ranges().contains(&ClassBytesRange { start: 1, end: 5 }));",
                "    assert!(!class_bytes.ranges().contains(&ClassBytesRange { start: 10, end: 15 }));",
                "    assert!(class_bytes.ranges().len() > 0);",
                "    assert!(class_bytes.ranges().iter().all(|r| r.start > 15 || r.end < 1));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 0, end: 0 }]);",
                "    class_bytes.negate();",
                "    let mut class_bytes_full = ClassBytes::new(vec![ClassBytesRange { start: 255, end: 255 }]);",
                "    class_bytes_full.negate();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_bytes.ranges(), &[ClassBytesRange { start: 1, end: 254 }]);",
                "    assert_eq!(class_bytes_full.ranges(), &[ClassBytesRange { start: 0, end: 254 }]);"
              ],
              "code": [
                "{",
                "    let mut class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 0, end: 0 }]);",
                "    class_bytes.negate();",
                "    let mut class_bytes_full = ClassBytes::new(vec![ClassBytesRange { start: 255, end: 255 }]);",
                "    class_bytes_full.negate();",
                "    assert_eq!(class_bytes.ranges(), &[ClassBytesRange { start: 1, end: 254 }]);",
                "    assert_eq!(class_bytes_full.ranges(), &[ClassBytesRange { start: 0, end: 254 }]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}