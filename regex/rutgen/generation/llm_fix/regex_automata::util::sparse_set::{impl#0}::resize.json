{
  "name": "regex_automata::util::sparse_set::{impl#0}::resize",
  "mod_info": {
    "name": "util::sparse_set",
    "loc": "regex-automata/src/util/mod.rs:55:1:55:27"
  },
  "visible": true,
  "loc": "regex-automata/src/util/sparse_set.rs:58:5:61:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "new_capacity: 0 to StateID::LIMIT (inclusive)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut sparse_sets = SparseSets::new(StateID::LIMIT);",
                "    sparse_sets.resize(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(sparse_sets.set1.len(), 0);",
                "    assert_eq!(sparse_sets.set2.len(), 0);",
                "    assert!(sparse_sets.set1.is_empty());",
                "    assert!(sparse_sets.set2.is_empty());",
                "    ",
                "    sparse_sets.resize(StateID::LIMIT);",
                "    assert!(sparse_sets.set1.capacity() <= StateID::LIMIT);",
                "    assert!(sparse_sets.set2.capacity() <= StateID::LIMIT);"
              ],
              "code": [
                "{",
                "    let mut sparse_sets = SparseSets::new(StateID::LIMIT);",
                "    sparse_sets.resize(0);",
                "    assert_eq!(sparse_sets.set1.len(), 0);",
                "    assert_eq!(sparse_sets.set2.len(), 0);",
                "    assert!(sparse_sets.set1.is_empty());",
                "    assert!(sparse_sets.set2.is_empty());",
                "    ",
                "    sparse_sets.resize(StateID::LIMIT);",
                "    assert!(sparse_sets.set1.capacity() <= StateID::LIMIT);",
                "    assert!(sparse_sets.set2.capacity() <= StateID::LIMIT);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut sparse_sets = SparseSets::new(StateID::LIMIT);",
                "    sparse_sets.resize(StateID::LIMIT / 2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(sparse_sets.set1.capacity(), StateID::LIMIT / 2);",
                "    assert_eq!(sparse_sets.set2.capacity(), StateID::LIMIT / 2);",
                "    assert!(sparse_sets.set1.is_empty());",
                "    assert!(sparse_sets.set2.is_empty());",
                "    sparse_sets.resize(StateID::LIMIT);",
                "    assert_eq!(sparse_sets.set1.capacity(), StateID::LIMIT);",
                "    assert_eq!(sparse_sets.set2.capacity(), StateID::LIMIT);",
                "    assert!(sparse_sets.set1.is_empty());",
                "    assert!(sparse_sets.set2.is_empty());",
                "    panic::catch_unwind(|| { sparse_sets.resize(StateID::LIMIT + 1); })",
                "    .expect_err(\"resize should panic if new_capacity exceeds StateID::LIMIT\");"
              ],
              "code": [
                "{",
                "    let mut sparse_sets = SparseSets::new(StateID::LIMIT);",
                "    sparse_sets.resize(StateID::LIMIT / 2);",
                "    assert_eq!(sparse_sets.set1.capacity(), StateID::LIMIT / 2);",
                "    assert_eq!(sparse_sets.set2.capacity(), StateID::LIMIT / 2);",
                "    assert!(sparse_sets.set1.is_empty());",
                "    assert!(sparse_sets.set2.is_empty());",
                "    sparse_sets.resize(StateID::LIMIT);",
                "    assert_eq!(sparse_sets.set1.capacity(), StateID::LIMIT);",
                "    assert_eq!(sparse_sets.set2.capacity(), StateID::LIMIT);",
                "    assert!(sparse_sets.set1.is_empty());",
                "    assert!(sparse_sets.set2.is_empty());",
                "    panic::catch_unwind(|| { sparse_sets.resize(StateID::LIMIT + 1); })",
                "    .expect_err(\"resize should panic if new_capacity exceeds StateID::LIMIT\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut sparse_sets = SparseSets::new(StateID::LIMIT);",
                "    sparse_sets.resize(StateID::LIMIT);",
                "}"
              ],
              "oracle": [
                "    sparse_sets.resize(StateID::LIMIT); // Test resizing to the maximum capacity equal to StateID::LIMIT",
                "    assert_eq!(sparse_sets.set1.capacity(), StateID::LIMIT); // Verify set1 capacity after resize",
                "    assert_eq!(sparse_sets.set2.capacity(), StateID::LIMIT); // Verify set2 capacity after resize",
                "    ",
                "    let panic = std::panic::catch_unwind(|| {",
                "    sparse_sets.resize(StateID::LIMIT + 1); // Attempt to resize beyond the limit",
                "    });",
                "    assert!(panic.is_err()); // Assert that an error (panic) occurs when exceeding StateID::LIMIT"
              ],
              "code": [
                "{",
                "    let mut sparse_sets = SparseSets::new(StateID::LIMIT);",
                "    sparse_sets.resize(StateID::LIMIT);",
                "    sparse_sets.resize(StateID::LIMIT); // Test resizing to the maximum capacity equal to StateID::LIMIT",
                "    assert_eq!(sparse_sets.set1.capacity(), StateID::LIMIT); // Verify set1 capacity after resize",
                "    assert_eq!(sparse_sets.set2.capacity(), StateID::LIMIT); // Verify set2 capacity after resize",
                "    ",
                "    let panic = std::panic::catch_unwind(|| {",
                "    sparse_sets.resize(StateID::LIMIT + 1); // Attempt to resize beyond the limit",
                "    });",
                "    assert!(panic.is_err()); // Assert that an error (panic) occurs when exceeding StateID::LIMIT",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut sparse_sets = SparseSets::new(StateID::LIMIT);",
                "    sparse_sets.resize(StateID::LIMIT + 1);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| {",
                "    let mut sparse_sets = SparseSets::new(StateID::LIMIT);",
                "    sparse_sets.resize(StateID::LIMIT + 1);",
                "    }).is_err());"
              ],
              "code": [
                "{",
                "    let mut sparse_sets = SparseSets::new(StateID::LIMIT);",
                "    sparse_sets.resize(StateID::LIMIT + 1);",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let mut sparse_sets = SparseSets::new(StateID::LIMIT);",
                "    sparse_sets.resize(StateID::LIMIT + 1);",
                "    }).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}