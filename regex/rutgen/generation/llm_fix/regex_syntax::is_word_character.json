{
  "name": "regex_syntax::is_word_character",
  "mod_info": {
    "name": "",
    "loc": "regex-syntax/src/lib.rs:1:1:431:2"
  },
  "visible": true,
  "loc": "regex-syntax/src/lib.rs:348:1:350:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions or ranges: test with a variety of Unicode characters including alphabetic characters (e.g., 'a', 'Z', 'あ'), join control characters (e.g., '\\u200C', '\\u200D'), decimal numbers (e.g., '1', '2', '٣'), marks (e.g., '\\u0300'), and connector punctuation (e.g., '_', '•'); also test with non-word characters such as punctuation (e.g., '!', '?', '@'), whitespace (e.g., ' ', '\\t'), or control characters (e.g., '\\n') for boundary cases.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let test_cases = vec![",
                "        'a',  // alphabetic",
                "        'Z',  // alphabetic",
                "        'あ', // alphabetic (Japanese)",
                "        '\\u{200C}', // join control",
                "        '\\u{200D}', // join control",
                "        '1',  // decimal number",
                "        '2',  // decimal number",
                "        '\\u{0661}', // Arabic-Indic digit",
                "        '\\u{0300}', // mark",
                "        '_',  // connector punctuation",
                "        '•',  // connector punctuation",
                "    ];",
                "    ",
                "    for c in test_cases {",
                "        let _ = is_word_character(c);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_character('a'), true);",
                "    assert_eq!(is_word_character('Z'), true);",
                "    assert_eq!(is_word_character('あ'), true);",
                "    assert_eq!(is_word_character('\\u{200C}'), true);",
                "    assert_eq!(is_word_character('\\u{200D}'), true);",
                "    assert_eq!(is_word_character('1'), true);",
                "    assert_eq!(is_word_character('2'), true);",
                "    assert_eq!(is_word_character('\\u{0661}'), true);",
                "    assert_eq!(is_word_character('\\u{0300}'), true);",
                "    assert_eq!(is_word_character('_'), true);",
                "    assert_eq!(is_word_character('•'), true);"
              ],
              "code": [
                "{",
                "    let test_cases = vec![",
                "        'a',  // alphabetic",
                "        'Z',  // alphabetic",
                "        'あ', // alphabetic (Japanese)",
                "        '\\u{200C}', // join control",
                "        '\\u{200D}', // join control",
                "        '1',  // decimal number",
                "        '2',  // decimal number",
                "        '\\u{0661}', // Arabic-Indic digit",
                "        '\\u{0300}', // mark",
                "        '_',  // connector punctuation",
                "        '•',  // connector punctuation",
                "    ];",
                "    ",
                "    for c in test_cases {",
                "        let _ = is_word_character(c);",
                "    }",
                "    assert_eq!(is_word_character('a'), true);",
                "    assert_eq!(is_word_character('Z'), true);",
                "    assert_eq!(is_word_character('あ'), true);",
                "    assert_eq!(is_word_character('\\u{200C}'), true);",
                "    assert_eq!(is_word_character('\\u{200D}'), true);",
                "    assert_eq!(is_word_character('1'), true);",
                "    assert_eq!(is_word_character('2'), true);",
                "    assert_eq!(is_word_character('\\u{0661}'), true);",
                "    assert_eq!(is_word_character('\\u{0300}'), true);",
                "    assert_eq!(is_word_character('_'), true);",
                "    assert_eq!(is_word_character('•'), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let non_word_cases = vec![",
                "        '!',  // punctuation",
                "        '?',  // punctuation",
                "        '@',  // punctuation",
                "        ' ',  // whitespace",
                "        '\\t', // whitespace",
                "        '\\n', // control character",
                "        '\\u{202E}', // right-to-left embedding",
                "    ];",
                "",
                "    for c in non_word_cases {",
                "        let _ = is_word_character(c);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_character('!'), false);",
                "    assert_eq!(is_word_character('?'), false);",
                "    assert_eq!(is_word_character('@'), false);",
                "    assert_eq!(is_word_character(' '), false);",
                "    assert_eq!(is_word_character('\\t'), false);",
                "    assert_eq!(is_word_character('\\n'), false);",
                "    assert_eq!(is_word_character('\\u{202E}'), false);"
              ],
              "code": [
                "{",
                "    let non_word_cases = vec![",
                "        '!',  // punctuation",
                "        '?',  // punctuation",
                "        '@',  // punctuation",
                "        ' ',  // whitespace",
                "        '\\t', // whitespace",
                "        '\\n', // control character",
                "        '\\u{202E}', // right-to-left embedding",
                "    ];",
                "",
                "    for c in non_word_cases {",
                "        let _ = is_word_character(c);",
                "    }",
                "    assert_eq!(is_word_character('!'), false);",
                "    assert_eq!(is_word_character('?'), false);",
                "    assert_eq!(is_word_character('@'), false);",
                "    assert_eq!(is_word_character(' '), false);",
                "    assert_eq!(is_word_character('\\t'), false);",
                "    assert_eq!(is_word_character('\\n'), false);",
                "    assert_eq!(is_word_character('\\u{202E}'), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}