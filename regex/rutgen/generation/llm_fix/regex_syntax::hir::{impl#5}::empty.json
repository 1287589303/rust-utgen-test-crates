{
  "name": "regex_syntax::hir::{impl#5}::empty",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:258:5:261:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Hir { kind: HirKind::Empty, props }\n"
      ],
      "input_infer": "Test input conditions or ranges: No input required (function returns an empty HIR expression without parameters).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Hir::empty();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Empty);",
                "    assert_eq!(result.props.0.minimum_len, Some(0));",
                "    assert_eq!(result.props.0.maximum_len, Some(0));",
                "    assert!(result.props.0.look_set.is_empty());",
                "    assert!(result.props.0.look_set_prefix.is_empty());",
                "    assert!(result.props.0.look_set_suffix.is_empty());",
                "    assert!(result.props.0.look_set_prefix_any.is_empty());",
                "    assert!(result.props.0.look_set_suffix_any.is_empty());",
                "    assert!(result.props.0.utf8);",
                "    assert_eq!(result.props.0.explicit_captures_len, 0);",
                "    assert_eq!(result.props.0.static_explicit_captures_len, Some(0));",
                "    assert!(!result.props.0.literal);",
                "    assert!(!result.props.0.alternation_literal);"
              ],
              "code": [
                "{",
                "    let result = Hir::empty();",
                "    assert_eq!(result.kind, HirKind::Empty);",
                "    assert_eq!(result.props.0.minimum_len, Some(0));",
                "    assert_eq!(result.props.0.maximum_len, Some(0));",
                "    assert!(result.props.0.look_set.is_empty());",
                "    assert!(result.props.0.look_set_prefix.is_empty());",
                "    assert!(result.props.0.look_set_suffix.is_empty());",
                "    assert!(result.props.0.look_set_prefix_any.is_empty());",
                "    assert!(result.props.0.look_set_suffix_any.is_empty());",
                "    assert!(result.props.0.utf8);",
                "    assert_eq!(result.props.0.explicit_captures_len, 0);",
                "    assert_eq!(result.props.0.static_explicit_captures_len, Some(0));",
                "    assert!(!result.props.0.literal);",
                "    assert!(!result.props.0.alternation_literal);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Hir::empty();",
                "    let expected_kind = HirKind::Empty;",
                "    let expected_props = Properties::empty();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, expected_kind);",
                "    assert_eq!(result.props, expected_props);"
              ],
              "code": [
                "{",
                "    let result = Hir::empty();",
                "    let expected_kind = HirKind::Empty;",
                "    let expected_props = Properties::empty();",
                "    assert_eq!(result.kind, expected_kind);",
                "    assert_eq!(result.props, expected_props);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}