{
  "name": "regex_automata::util::determinize::state::{impl#10}::set_is_from_word",
  "mod_info": {
    "name": "util::determinize::state",
    "loc": "regex-automata/src/util/determinize/mod.rs:57:1:57:11"
  },
  "visible": false,
  "loc": "regex-automata/src/util/determinize/state.rs:614:5:616:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Input conditions: a mutable Vec<u8> with at least one byte, ensuring the state can be marked as built from a transition over a word byte.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut vec = Vec::<u8>::with_capacity(0);",
                "    let mut repr_vec = ReprVec(&mut vec);",
                "    repr_vec.set_is_from_word();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(vec![0, 0, 0, 0], *repr_vec.0);",
                "    repr_vec.set_is_from_word();",
                "    assert_eq!(vec![4, 0, 0, 0], *repr_vec.0);",
                "    assert_eq!(repr_vec.0[0] & (1 << 2) != 0, true);"
              ],
              "code": [
                "{",
                "    let mut vec = Vec::<u8>::with_capacity(0);",
                "    let mut repr_vec = ReprVec(&mut vec);",
                "    repr_vec.set_is_from_word();",
                "    assert_eq!(vec![0, 0, 0, 0], *repr_vec.0);",
                "    repr_vec.set_is_from_word();",
                "    assert_eq!(vec![4, 0, 0, 0], *repr_vec.0);",
                "    assert_eq!(repr_vec.0[0] & (1 << 2) != 0, true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut vec = vec![0u8; 1];",
                "    let mut repr_vec = ReprVec(&mut vec);",
                "    repr_vec.set_is_from_word();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(vec[0], 4);"
              ],
              "code": [
                "{",
                "    let mut vec = vec![0u8; 1];",
                "    let mut repr_vec = ReprVec(&mut vec);",
                "    repr_vec.set_is_from_word();",
                "    assert_eq!(vec[0], 4);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut vec = vec![0u8; 2];",
                "    let mut repr_vec = ReprVec(&mut vec);",
                "    repr_vec.set_is_from_word();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(vec[0], 4);"
              ],
              "code": [
                "{",
                "    let mut vec = vec![0u8; 2];",
                "    let mut repr_vec = ReprVec(&mut vec);",
                "    repr_vec.set_is_from_word();",
                "    assert_eq!(vec[0], 4);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut vec = vec![0u8; 10];",
                "    let mut repr_vec = ReprVec(&mut vec);",
                "    repr_vec.set_is_from_word();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(vec[0] & (1 << 2) != 0, true);"
              ],
              "code": [
                "{",
                "    let mut vec = vec![0u8; 10];",
                "    let mut repr_vec = ReprVec(&mut vec);",
                "    repr_vec.set_is_from_word();",
                "    assert_eq!(vec[0] & (1 << 2) != 0, true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}