{
  "name": "regex_automata::nfa::thompson::backtrack::{impl#0}::new",
  "mod_info": {
    "name": "nfa::thompson::backtrack",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:57:1:57:19"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/backtrack.rs:57:5:59:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions or ranges: none (testing the default behavior of the Config::new() function with no input parameters).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config, Config::default());"
              ],
              "code": [
                "{",
                "    let config = Config::new();",
                "    assert_eq!(config, Config::default());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::default();",
                "    let new_config = Config::new();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(new_config, config);",
                "    assert!(std::mem::size_of_val(&new_config) > 0);",
                "    assert!(new_config.get_prefilter().is_none());",
                "    assert_eq!(new_config.get_visited_capacity(), 0);",
                "    assert_eq!(new_config, Config::default());"
              ],
              "code": [
                "{",
                "    let config = Config::default();",
                "    let new_config = Config::new();",
                "    assert_eq!(new_config, config);",
                "    assert!(std::mem::size_of_val(&new_config) > 0);",
                "    assert!(new_config.get_prefilter().is_none());",
                "    assert_eq!(new_config.get_visited_capacity(), 0);",
                "    assert_eq!(new_config, Config::default());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}