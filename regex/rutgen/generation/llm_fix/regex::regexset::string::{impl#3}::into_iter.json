{
  "name": "regex::regexset::string::{impl#3}::into_iter",
  "mod_info": {
    "name": "regexset::string",
    "loc": "src/regexset/mod.rs:2:1:2:23"
  },
  "visible": true,
  "loc": "src/regexset/string.rs:609:5:612:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: SetMatchesIntoIter { patset: self.0, it }\n"
      ],
      "input_infer": "self.0 must be a valid PatternSet with capacity greater than or equal to 0\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern_set = PatternSet::with_capacity(0);",
                "    let set_matches = SetMatches(pattern_set);",
                "    let _iter = set_matches.into_iter();",
                "}"
              ],
              "oracle": [
                "    _iter.patset == set_matches.0",
                "    _iter.it.start == 0",
                "    _iter.it.end == set_matches.0.capacity()",
                "    _iter.it == core::ops::Range { start: 0, end: set_matches.0.capacity() }",
                "    _iter.patset.is_empty() == true"
              ],
              "code": [
                "{",
                "    let pattern_set = PatternSet::with_capacity(0);",
                "    let set_matches = SetMatches(pattern_set);",
                "    let _iter = set_matches.into_iter();",
                "    _iter.patset == set_matches.0",
                "    _iter.it.start == 0",
                "    _iter.it.end == set_matches.0.capacity()",
                "    _iter.it == core::ops::Range { start: 0, end: set_matches.0.capacity() }",
                "    _iter.patset.is_empty() == true",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern_set = PatternSet::with_capacity(5);",
                "    let set_matches = SetMatches(pattern_set);",
                "    let _iter = set_matches.into_iter();",
                "}"
              ],
              "oracle": [
                "    let pattern_set = PatternSet::with_capacity(5);",
                "    let set_matches = SetMatches(pattern_set);",
                "    let iter = set_matches.into_iter();",
                "    assert_eq!(iter.patset.capacity(), 5);",
                "    assert_eq!(iter.it.start, 0);",
                "    assert_eq!(iter.it.end, 5);"
              ],
              "code": [
                "{",
                "    let pattern_set = PatternSet::with_capacity(5);",
                "    let set_matches = SetMatches(pattern_set);",
                "    let _iter = set_matches.into_iter();",
                "    let pattern_set = PatternSet::with_capacity(5);",
                "    let set_matches = SetMatches(pattern_set);",
                "    let iter = set_matches.into_iter();",
                "    assert_eq!(iter.patset.capacity(), 5);",
                "    assert_eq!(iter.it.start, 0);",
                "    assert_eq!(iter.it.end, 5);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern_set = PatternSet::with_capacity(1);",
                "    let set_matches = SetMatches(pattern_set);",
                "    let _iter = set_matches.into_iter();",
                "}"
              ],
              "oracle": [
                "    let pattern_set = PatternSet::with_capacity(1);",
                "    let set_matches = SetMatches(pattern_set);",
                "    let iter = set_matches.into_iter();",
                "    assert_eq!(iter.patset, set_matches.0);",
                "    assert_eq!(iter.it.start, 0);",
                "    assert_eq!(iter.it.end, set_matches.0.capacity());"
              ],
              "code": [
                "{",
                "    let pattern_set = PatternSet::with_capacity(1);",
                "    let set_matches = SetMatches(pattern_set);",
                "    let _iter = set_matches.into_iter();",
                "    let pattern_set = PatternSet::with_capacity(1);",
                "    let set_matches = SetMatches(pattern_set);",
                "    let iter = set_matches.into_iter();",
                "    assert_eq!(iter.patset, set_matches.0);",
                "    assert_eq!(iter.it.start, 0);",
                "    assert_eq!(iter.it.end, set_matches.0.capacity());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern_set = PatternSet::with_capacity(100);",
                "    let set_matches = SetMatches(pattern_set);",
                "    let _iter = set_matches.into_iter();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_iter.patset.capacity(), 100);",
                "    assert!(matches!(_iter.it, core::ops::Range { start: 0, end: 100 }));",
                "    assert_eq!(_iter.it.start, 0);",
                "    assert_eq!(_iter.it.end, set_matches.0.capacity());"
              ],
              "code": [
                "{",
                "    let pattern_set = PatternSet::with_capacity(100);",
                "    let set_matches = SetMatches(pattern_set);",
                "    let _iter = set_matches.into_iter();",
                "    assert_eq!(_iter.patset.capacity(), 100);",
                "    assert!(matches!(_iter.it, core::ops::Range { start: 0, end: 100 }));",
                "    assert_eq!(_iter.it.start, 0);",
                "    assert_eq!(_iter.it.end, set_matches.0.capacity());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}