{
  "name": "regex_syntax::unicode::is_word_character",
  "mod_info": {
    "name": "unicode",
    "loc": "regex-syntax/src/lib.rs:193:1:193:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/unicode.rs:463:1:492:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions or ranges: test with characters in the ranges of valid Unicode word characters (e.g., letters, digits, underscores) and invalid characters (e.g., punctuation, whitespace) under both configurations of the `unicode-perl` feature enabled and disabled, including boundary characters like ASCII 0-127 and Unicode characters from higher code point ranges.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let valid_chars = ['a', 'Z', '0', '_'];",
                "    for &c in &valid_chars {",
                "        let _ = is_word_character(c);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_character('a'), Ok(true));",
                "    assert_eq!(is_word_character('Z'), Ok(true));",
                "    assert_eq!(is_word_character('0'), Ok(true));",
                "    assert_eq!(is_word_character('_'), Ok(true));",
                "    assert!(is_word_character(' ').is_err());",
                "    assert!(is_word_character('@').is_err());",
                "    assert!(is_word_character('#').is_err());",
                "    assert!(is_word_character('😊').is_err());"
              ],
              "code": [
                "{",
                "    let valid_chars = ['a', 'Z', '0', '_'];",
                "    for &c in &valid_chars {",
                "        let _ = is_word_character(c);",
                "    }",
                "    assert_eq!(is_word_character('a'), Ok(true));",
                "    assert_eq!(is_word_character('Z'), Ok(true));",
                "    assert_eq!(is_word_character('0'), Ok(true));",
                "    assert_eq!(is_word_character('_'), Ok(true));",
                "    assert!(is_word_character(' ').is_err());",
                "    assert!(is_word_character('@').is_err());",
                "    assert!(is_word_character('#').is_err());",
                "    assert!(is_word_character('😊').is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let invalid_chars = [' ', '!', '@', '#'];",
                "    for &c in &invalid_chars {",
                "        let _ = is_word_character(c);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_character(' '), Err(UnicodeWordError(())));",
                "    assert_eq!(is_word_character('!'), Err(UnicodeWordError(())));",
                "    assert_eq!(is_word_character('@'), Err(UnicodeWordError(())));",
                "    assert_eq!(is_word_character('#'), Err(UnicodeWordError(())));"
              ],
              "code": [
                "{",
                "    let invalid_chars = [' ', '!', '@', '#'];",
                "    for &c in &invalid_chars {",
                "        let _ = is_word_character(c);",
                "    }",
                "    assert_eq!(is_word_character(' '), Err(UnicodeWordError(())));",
                "    assert_eq!(is_word_character('!'), Err(UnicodeWordError(())));",
                "    assert_eq!(is_word_character('@'), Err(UnicodeWordError(())));",
                "    assert_eq!(is_word_character('#'), Err(UnicodeWordError(())));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let valid_unicode_chars = ['é', 'ß', '你', '😀'];",
                "    for &c in &valid_unicode_chars {",
                "        let _ = is_word_character(c);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_character('é'), Ok(true));",
                "    assert_eq!(is_word_character('ß'), Ok(true));",
                "    assert_eq!(is_word_character('你'), Ok(true));",
                "    assert_eq!(is_word_character('😀'), Ok(true));",
                "    assert!(is_word_character('\\u{0000}').is_err());",
                "    assert!(is_word_character('\\u{D800}').is_err());",
                "    assert!(is_word_character('\\u{DFFF}').is_err());",
                "    assert!(is_word_character('\\u{FFFF}').is_err());",
                "    assert!(is_word_character(' ').unwrap() == false);",
                "    assert_eq!(is_word_character('$'), Ok(true));",
                "    assert_eq!(is_word_character('_'), Ok(true));",
                "    assert!(is_word_character('!').unwrap() == false);",
                "    assert!(is_word_character('@').unwrap() == false);"
              ],
              "code": [
                "{",
                "    let valid_unicode_chars = ['é', 'ß', '你', '😀'];",
                "    for &c in &valid_unicode_chars {",
                "        let _ = is_word_character(c);",
                "    }",
                "    assert_eq!(is_word_character('é'), Ok(true));",
                "    assert_eq!(is_word_character('ß'), Ok(true));",
                "    assert_eq!(is_word_character('你'), Ok(true));",
                "    assert_eq!(is_word_character('😀'), Ok(true));",
                "    assert!(is_word_character('\\u{0000}').is_err());",
                "    assert!(is_word_character('\\u{D800}').is_err());",
                "    assert!(is_word_character('\\u{DFFF}').is_err());",
                "    assert!(is_word_character('\\u{FFFF}').is_err());",
                "    assert!(is_word_character(' ').unwrap() == false);",
                "    assert_eq!(is_word_character('$'), Ok(true));",
                "    assert_eq!(is_word_character('_'), Ok(true));",
                "    assert!(is_word_character('!').unwrap() == false);",
                "    assert!(is_word_character('@').unwrap() == false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let invalid_unicode_chars = ['\\u{200B}', '\\u{202E}', '\\u{FFFF}'];",
                "    for &c in &invalid_unicode_chars {",
                "        let _ = is_word_character(c);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_character('\\u{200B}'), Err(UnicodeWordError(())));",
                "    assert_eq!(is_word_character('\\u{202E}'), Err(UnicodeWordError(())));",
                "    assert_eq!(is_word_character('\\u{FFFF}'), Err(UnicodeWordError(())));"
              ],
              "code": [
                "{",
                "    let invalid_unicode_chars = ['\\u{200B}', '\\u{202E}', '\\u{FFFF}'];",
                "    for &c in &invalid_unicode_chars {",
                "        let _ = is_word_character(c);",
                "    }",
                "    assert_eq!(is_word_character('\\u{200B}'), Err(UnicodeWordError(())));",
                "    assert_eq!(is_word_character('\\u{202E}'), Err(UnicodeWordError(())));",
                "    assert_eq!(is_word_character('\\u{FFFF}'), Err(UnicodeWordError(())));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[cfg(not(feature = \"unicode-perl\"))]"
              ],
              "prefix": [
                "{",
                "    let test_chars = ['a', '1', '!', ' '];",
                "    for &c in &test_chars {",
                "        let _ = is_word_character(c);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_character('a'), Err(UnicodeWordError(())));",
                "    assert_eq!(is_word_character('1'), Err(UnicodeWordError(())));",
                "    assert_eq!(is_word_character('!'), Err(UnicodeWordError(())));",
                "    assert_eq!(is_word_character(' '), Err(UnicodeWordError(())));"
              ],
              "code": [
                "{",
                "    let test_chars = ['a', '1', '!', ' '];",
                "    for &c in &test_chars {",
                "        let _ = is_word_character(c);",
                "    }",
                "    assert_eq!(is_word_character('a'), Err(UnicodeWordError(())));",
                "    assert_eq!(is_word_character('1'), Err(UnicodeWordError(())));",
                "    assert_eq!(is_word_character('!'), Err(UnicodeWordError(())));",
                "    assert_eq!(is_word_character(' '), Err(UnicodeWordError(())));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[cfg(feature = \"unicode-perl\")]"
              ],
              "prefix": [
                "{",
                "    let test_chars = ['a', '1', '!', ' '];",
                "    for &c in &test_chars {",
                "        let _ = is_word_character(c);",
                "    }",
                "}"
              ],
              "oracle": [
                "    is_word_character('a').unwrap() == true",
                "    is_word_character('1').unwrap() == true",
                "    is_word_character('!').unwrap() == false",
                "    is_word_character(' ').unwrap() == false",
                "    is_word_character('𝄞').unwrap() == false  // sample non-permitted unicode character",
                "    is_word_character('𝔸').unwrap() == true   // sample permitted unicode character",
                "    is_word_character('\\u{0030}').unwrap() == true  // test with ASCII '0', should be false",
                "    is_word_character('\\u{005A}').unwrap() == false // test with ASCII 'Z', should be false",
                "    is_word_character('\\u{0061}').unwrap() == true  // test lower case 'a', should be true",
                "    is_word_character('\\u{0070}').unwrap() == true  // test lower case 'p', should be true",
                "    is_word_character('\\u{0024}').unwrap() == false // test special character '$', should be false",
                "    is_word_character('\\u{00C5}').unwrap() == true  // test with a special unicode character that is a word character",
                "    is_word_character('\\u{00A1}').unwrap() == false // test with a special unicode character that is not a word character",
                "    is_word_character('\\u{0064}').unwrap() == true  // test with lower case 'd', should be true"
              ],
              "code": [
                "{",
                "    let test_chars = ['a', '1', '!', ' '];",
                "    for &c in &test_chars {",
                "        let _ = is_word_character(c);",
                "    }",
                "    is_word_character('a').unwrap() == true",
                "    is_word_character('1').unwrap() == true",
                "    is_word_character('!').unwrap() == false",
                "    is_word_character(' ').unwrap() == false",
                "    is_word_character('𝄞').unwrap() == false  // sample non-permitted unicode character",
                "    is_word_character('𝔸').unwrap() == true   // sample permitted unicode character",
                "    is_word_character('\\u{0030}').unwrap() == true  // test with ASCII '0', should be false",
                "    is_word_character('\\u{005A}').unwrap() == false // test with ASCII 'Z', should be false",
                "    is_word_character('\\u{0061}').unwrap() == true  // test lower case 'a', should be true",
                "    is_word_character('\\u{0070}').unwrap() == true  // test lower case 'p', should be true",
                "    is_word_character('\\u{0024}').unwrap() == false // test special character '$', should be false",
                "    is_word_character('\\u{00C5}').unwrap() == true  // test with a special unicode character that is a word character",
                "    is_word_character('\\u{00A1}').unwrap() == false // test with a special unicode character that is not a word character",
                "    is_word_character('\\u{0064}').unwrap() == true  // test with lower case 'd', should be true",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}