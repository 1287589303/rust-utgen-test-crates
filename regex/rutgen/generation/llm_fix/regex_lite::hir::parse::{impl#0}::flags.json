{
  "name": "regex_lite::hir::parse::{impl#0}::flags",
  "mod_info": {
    "name": "hir::parse",
    "loc": "regex-lite/src/hir/mod.rs:5:1:5:11"
  },
  "visible": false,
  "loc": "regex-lite/src/hir/parse.rs:225:5:227:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: *self.flags.borrow()\n"
      ],
      "input_infer": "valid `Config` object with `nest_limit` between 0 and 1000 and `Flags` with all combinations of case_insensitive, multi_line, dot_matches_new_line, swap_greed, crlf, and ignore_whitespace set to true/false\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let parser = Parser::new(config, \"test pattern\");",
                "    let flags = parser.flags();",
                "}"
              ],
              "oracle": [
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let parser = Parser::new(config, \"test pattern\");",
                "    let flags = parser.flags();",
                "    assert_eq!(flags.case_insensitive, false);",
                "    assert_eq!(flags.multi_line, false);",
                "    assert_eq!(flags.dot_matches_new_line, false);",
                "    assert_eq!(flags.swap_greed, false);",
                "    assert_eq!(flags.crlf, false);",
                "    assert_eq!(flags.ignore_whitespace, false);"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let parser = Parser::new(config, \"test pattern\");",
                "    let flags = parser.flags();",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let parser = Parser::new(config, \"test pattern\");",
                "    let flags = parser.flags();",
                "    assert_eq!(flags.case_insensitive, false);",
                "    assert_eq!(flags.multi_line, false);",
                "    assert_eq!(flags.dot_matches_new_line, false);",
                "    assert_eq!(flags.swap_greed, false);",
                "    assert_eq!(flags.crlf, false);",
                "    assert_eq!(flags.ignore_whitespace, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut flags = Flags::default();",
                "    flags.case_insensitive = true;",
                "    let config = Config { nest_limit: 10, flags };",
                "    let parser = Parser::new(config, \"test pattern\");",
                "    let flags = parser.flags();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(flags.case_insensitive, true);",
                "    assert_eq!(flags.multi_line, false);",
                "    assert_eq!(flags.dot_matches_new_line, false);",
                "    assert_eq!(flags.swap_greed, false);",
                "    assert_eq!(flags.crlf, false);",
                "    assert_eq!(flags.ignore_whitespace, false);"
              ],
              "code": [
                "{",
                "    let mut flags = Flags::default();",
                "    flags.case_insensitive = true;",
                "    let config = Config { nest_limit: 10, flags };",
                "    let parser = Parser::new(config, \"test pattern\");",
                "    let flags = parser.flags();",
                "    assert_eq!(flags.case_insensitive, true);",
                "    assert_eq!(flags.multi_line, false);",
                "    assert_eq!(flags.dot_matches_new_line, false);",
                "    assert_eq!(flags.swap_greed, false);",
                "    assert_eq!(flags.crlf, false);",
                "    assert_eq!(flags.ignore_whitespace, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut flags = Flags::default();",
                "    flags.multi_line = true;",
                "    let config = Config { nest_limit: 10, flags };",
                "    let parser = Parser::new(config, \"test pattern\");",
                "    let flags = parser.flags();",
                "}"
              ],
              "oracle": [
                "    flags.multi_line == true",
                "    flags.case_insensitive == false",
                "    flags.dot_matches_new_line == false",
                "    flags.swap_greed == false",
                "    flags.crlf == false",
                "    flags.ignore_whitespace == false",
                "    parser.is_done() == false",
                "    parser.pos() == 0",
                "    parser.depth.get() == 0",
                "    parser.capture_index.get() == 0",
                "    parser.peek().is_none() == false",
                "    parser.char.get().is_some() == true"
              ],
              "code": [
                "{",
                "    let mut flags = Flags::default();",
                "    flags.multi_line = true;",
                "    let config = Config { nest_limit: 10, flags };",
                "    let parser = Parser::new(config, \"test pattern\");",
                "    let flags = parser.flags();",
                "    flags.multi_line == true",
                "    flags.case_insensitive == false",
                "    flags.dot_matches_new_line == false",
                "    flags.swap_greed == false",
                "    flags.crlf == false",
                "    flags.ignore_whitespace == false",
                "    parser.is_done() == false",
                "    parser.pos() == 0",
                "    parser.depth.get() == 0",
                "    parser.capture_index.get() == 0",
                "    parser.peek().is_none() == false",
                "    parser.char.get().is_some() == true",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut flags = Flags::default();",
                "    flags.dot_matches_new_line = true;",
                "    let config = Config { nest_limit: 10, flags };",
                "    let parser = Parser::new(config, \"test pattern\");",
                "    let flags = parser.flags();",
                "}"
              ],
              "oracle": [
                "    let mut flags = Flags::default();",
                "    flags.dot_matches_new_line = true;",
                "    let config = Config { nest_limit: 10, flags };",
                "    let parser = Parser::new(config, \"test pattern\");",
                "    assert_eq!(parser.flags().dot_matches_new_line, true);",
                "    assert_eq!(parser.flags().multi_line, false);",
                "    assert_eq!(parser.flags().case_insensitive, false);",
                "    assert_eq!(parser.flags().dot_matches_new_line, true);",
                "    assert_eq!(parser.flags().swap_greed, false);",
                "    assert_eq!(parser.flags().crlf, false);",
                "    assert_eq!(parser.flags().ignore_whitespace, false);"
              ],
              "code": [
                "{",
                "    let mut flags = Flags::default();",
                "    flags.dot_matches_new_line = true;",
                "    let config = Config { nest_limit: 10, flags };",
                "    let parser = Parser::new(config, \"test pattern\");",
                "    let flags = parser.flags();",
                "    let mut flags = Flags::default();",
                "    flags.dot_matches_new_line = true;",
                "    let config = Config { nest_limit: 10, flags };",
                "    let parser = Parser::new(config, \"test pattern\");",
                "    assert_eq!(parser.flags().dot_matches_new_line, true);",
                "    assert_eq!(parser.flags().multi_line, false);",
                "    assert_eq!(parser.flags().case_insensitive, false);",
                "    assert_eq!(parser.flags().dot_matches_new_line, true);",
                "    assert_eq!(parser.flags().swap_greed, false);",
                "    assert_eq!(parser.flags().crlf, false);",
                "    assert_eq!(parser.flags().ignore_whitespace, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut flags = Flags::default();",
                "    flags.swap_greed = true;",
                "    let config = Config { nest_limit: 10, flags };",
                "    let parser = Parser::new(config, \"test pattern\");",
                "    let flags = parser.flags();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(flags.swap_greed, true);",
                "    assert_eq!(flags.case_insensitive, false);",
                "    assert_eq!(flags.multi_line, false);",
                "    assert_eq!(flags.dot_matches_new_line, false);",
                "    assert_eq!(flags.crlf, false);",
                "    assert_eq!(flags.ignore_whitespace, false);"
              ],
              "code": [
                "{",
                "    let mut flags = Flags::default();",
                "    flags.swap_greed = true;",
                "    let config = Config { nest_limit: 10, flags };",
                "    let parser = Parser::new(config, \"test pattern\");",
                "    let flags = parser.flags();",
                "    assert_eq!(flags.swap_greed, true);",
                "    assert_eq!(flags.case_insensitive, false);",
                "    assert_eq!(flags.multi_line, false);",
                "    assert_eq!(flags.dot_matches_new_line, false);",
                "    assert_eq!(flags.crlf, false);",
                "    assert_eq!(flags.ignore_whitespace, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut flags = Flags::default();",
                "    flags.crlf = true;",
                "    let config = Config { nest_limit: 10, flags };",
                "    let parser = Parser::new(config, \"test pattern\");",
                "    let flags = parser.flags();",
                "}"
              ],
              "oracle": [
                "    let mut flags = Flags::default();",
                "    flags.crlf = true;",
                "    let config = Config { nest_limit: 10, flags };",
                "    let parser = Parser::new(config, \"test pattern\");",
                "    assert_eq!(parser.flags().crlf, true);",
                "    assert_eq!(parser.flags().case_insensitive, false);",
                "    assert_eq!(parser.flags().multi_line, false);",
                "    assert_eq!(parser.flags().dot_matches_new_line, false);",
                "    assert_eq!(parser.flags().swap_greed, false);",
                "    assert_eq!(parser.flags().ignore_whitespace, false);"
              ],
              "code": [
                "{",
                "    let mut flags = Flags::default();",
                "    flags.crlf = true;",
                "    let config = Config { nest_limit: 10, flags };",
                "    let parser = Parser::new(config, \"test pattern\");",
                "    let flags = parser.flags();",
                "    let mut flags = Flags::default();",
                "    flags.crlf = true;",
                "    let config = Config { nest_limit: 10, flags };",
                "    let parser = Parser::new(config, \"test pattern\");",
                "    assert_eq!(parser.flags().crlf, true);",
                "    assert_eq!(parser.flags().case_insensitive, false);",
                "    assert_eq!(parser.flags().multi_line, false);",
                "    assert_eq!(parser.flags().dot_matches_new_line, false);",
                "    assert_eq!(parser.flags().swap_greed, false);",
                "    assert_eq!(parser.flags().ignore_whitespace, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut flags = Flags::default();",
                "    flags.ignore_whitespace = true;",
                "    let config = Config { nest_limit: 10, flags };",
                "    let parser = Parser::new(config, \"test pattern\");",
                "    let flags = parser.flags();",
                "}"
              ],
              "oracle": [
                "    assert!(flags.ignore_whitespace);",
                "    assert!(!flags.case_insensitive);",
                "    assert!(!flags.multi_line);",
                "    assert!(!flags.dot_matches_new_line);",
                "    assert!(!flags.swap_greed);",
                "    assert!(!flags.crlf);"
              ],
              "code": [
                "{",
                "    let mut flags = Flags::default();",
                "    flags.ignore_whitespace = true;",
                "    let config = Config { nest_limit: 10, flags };",
                "    let parser = Parser::new(config, \"test pattern\");",
                "    let flags = parser.flags();",
                "    assert!(flags.ignore_whitespace);",
                "    assert!(!flags.case_insensitive);",
                "    assert!(!flags.multi_line);",
                "    assert!(!flags.dot_matches_new_line);",
                "    assert!(!flags.swap_greed);",
                "    assert!(!flags.crlf);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut flags = Flags {",
                "        case_insensitive: true,",
                "        multi_line: true,",
                "        dot_matches_new_line: true,",
                "        swap_greed: true,",
                "        crlf: true,",
                "        ignore_whitespace: true,",
                "    };",
                "    let config = Config { nest_limit: 10, flags };",
                "    let parser = Parser::new(config, \"test pattern\");",
                "    let flags = parser.flags();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(flags.case_insensitive, true);",
                "    assert_eq!(flags.multi_line, true);",
                "    assert_eq!(flags.dot_matches_new_line, true);",
                "    assert_eq!(flags.swap_greed, true);",
                "    assert_eq!(flags.crlf, true);",
                "    assert_eq!(flags.ignore_whitespace, true);"
              ],
              "code": [
                "{",
                "    let mut flags = Flags {",
                "        case_insensitive: true,",
                "        multi_line: true,",
                "        dot_matches_new_line: true,",
                "        swap_greed: true,",
                "        crlf: true,",
                "        ignore_whitespace: true,",
                "    };",
                "    let config = Config { nest_limit: 10, flags };",
                "    let parser = Parser::new(config, \"test pattern\");",
                "    let flags = parser.flags();",
                "    assert_eq!(flags.case_insensitive, true);",
                "    assert_eq!(flags.multi_line, true);",
                "    assert_eq!(flags.dot_matches_new_line, true);",
                "    assert_eq!(flags.swap_greed, true);",
                "    assert_eq!(flags.crlf, true);",
                "    assert_eq!(flags.ignore_whitespace, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 0, flags: Flags::default() };",
                "    let parser = Parser::new(config, \"test pattern\");",
                "    let flags = parser.flags();",
                "",
                "    let config = Config { nest_limit: 1000, flags: Flags::default() };",
                "    let parser = Parser::new(config, \"test pattern\");",
                "    let flags = parser.flags();",
                "}"
              ],
              "oracle": [
                "    let config1 = Config { nest_limit: 0, flags: Flags::default() };",
                "    let parser1 = Parser::new(config1, \"test pattern\");",
                "    assert_eq!(parser1.flags(), Flags::default());",
                "    ",
                "    let config2 = Config { nest_limit: 1000, flags: Flags::default() };",
                "    let parser2 = Parser::new(config2, \"test pattern\");",
                "    assert_eq!(parser2.flags(), Flags::default());"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 0, flags: Flags::default() };",
                "    let parser = Parser::new(config, \"test pattern\");",
                "    let flags = parser.flags();",
                "",
                "    let config = Config { nest_limit: 1000, flags: Flags::default() };",
                "    let parser = Parser::new(config, \"test pattern\");",
                "    let flags = parser.flags();",
                "    let config1 = Config { nest_limit: 0, flags: Flags::default() };",
                "    let parser1 = Parser::new(config1, \"test pattern\");",
                "    assert_eq!(parser1.flags(), Flags::default());",
                "    ",
                "    let config2 = Config { nest_limit: 1000, flags: Flags::default() };",
                "    let parser2 = Parser::new(config2, \"test pattern\");",
                "    assert_eq!(parser2.flags(), Flags::default());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}