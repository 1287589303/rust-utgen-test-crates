{
  "name": "regex_automata::util::lazy::lazy::{impl#4}::drop",
  "mod_info": {
    "name": "util::lazy::lazy",
    "loc": "regex-automata/src/util/lazy.rs:98:1:223:2"
  },
  "visible": true,
  "loc": "regex-automata/src/util/lazy.rs:214:9:221:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: ptr.is_null() at line 216 is true\n"
      ],
      "input_infer": "state = LAZY_STATE_INIT or LAZY_STATE_BUSY; data = Cell<MaybeUninit<T>> with a null pointer (ptr) for safe drop.\n",
      "answers": [
        {
          "uses": [
            "use core::sync::atomic::Ordering;",
            "use core::cell::Cell;",
            "use core::mem::MaybeUninit;",
            "use core::sync::atomic::AtomicU8;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use core::cell::Cell;",
                "    use core::mem::MaybeUninit;",
                "    use core::sync::atomic::{AtomicU8, Ordering};",
                "",
                "    const LAZY_STATE_INIT: u8 = 0;",
                "    const LAZY_STATE_BUSY: u8 = 1;",
                "",
                "    struct LazyTest {",
                "        state: AtomicU8,",
                "        create: Cell<Option<fn()>>,",
                "        data: Cell<MaybeUninit<*mut u8>>,",
                "    }",
                "",
                "    let lazy = LazyTest {",
                "        state: AtomicU8::new(LAZY_STATE_INIT),",
                "        create: Cell::new(None),",
                "        data: Cell::new(MaybeUninit::new(core::ptr::null_mut())),",
                "    };",
                "",
                "    // Call the drop function",
                "    let _ = unsafe { &mut *(std::mem::transmute::<&LazyTest, *mut LazyTest>(&lazy)) };",
                "}"
              ],
              "oracle": [
                "    assert_eq!(lazy.data.get_mut().assume_init(), core::ptr::null_mut());",
                "    assert_eq!(lazy.state.load(Ordering::SeqCst), LAZY_STATE_INIT);",
                "    lazy.state.store(LAZY_STATE_DONE, Ordering::SeqCst);",
                "    assert!(matches!(lazy.state.load(Ordering::SeqCst), LAZY_STATE_DONE));"
              ],
              "code": [
                "{",
                "    use core::cell::Cell;",
                "    use core::mem::MaybeUninit;",
                "    use core::sync::atomic::{AtomicU8, Ordering};",
                "",
                "    const LAZY_STATE_INIT: u8 = 0;",
                "    const LAZY_STATE_BUSY: u8 = 1;",
                "",
                "    struct LazyTest {",
                "        state: AtomicU8,",
                "        create: Cell<Option<fn()>>,",
                "        data: Cell<MaybeUninit<*mut u8>>,",
                "    }",
                "",
                "    let lazy = LazyTest {",
                "        state: AtomicU8::new(LAZY_STATE_INIT),",
                "        create: Cell::new(None),",
                "        data: Cell::new(MaybeUninit::new(core::ptr::null_mut())),",
                "    };",
                "",
                "    // Call the drop function",
                "    let _ = unsafe { &mut *(std::mem::transmute::<&LazyTest, *mut LazyTest>(&lazy)) };",
                "    assert_eq!(lazy.data.get_mut().assume_init(), core::ptr::null_mut());",
                "    assert_eq!(lazy.state.load(Ordering::SeqCst), LAZY_STATE_INIT);",
                "    lazy.state.store(LAZY_STATE_DONE, Ordering::SeqCst);",
                "    assert!(matches!(lazy.state.load(Ordering::SeqCst), LAZY_STATE_DONE));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use core::cell::Cell;",
                "    use core::mem::MaybeUninit;",
                "    use core::sync::atomic::{AtomicU8, Ordering};",
                "",
                "    const LAZY_STATE_INIT: u8 = 0;",
                "    const LAZY_STATE_BUSY: u8 = 1;",
                "",
                "    struct LazyTest {",
                "        state: AtomicU8,",
                "        create: Cell<Option<fn()>>,",
                "        data: Cell<MaybeUninit<*mut u8>>,",
                "    }",
                "",
                "    let lazy = LazyTest {",
                "        state: AtomicU8::new(LAZY_STATE_BUSY),",
                "        create: Cell::new(None),",
                "        data: Cell::new(MaybeUninit::new(core::ptr::null_mut())),",
                "    };",
                "",
                "    // Call the drop function",
                "    let _ = unsafe { &mut *(std::mem::transmute::<&LazyTest, *mut LazyTest>(&lazy)) };",
                "}"
              ],
              "oracle": [
                "    assert_eq!(lazy.state.load(Ordering::SeqCst), LAZY_STATE_BUSY);",
                "    assert!(lazy.data.get().assume_init_ref().is_null());",
                "    assert!(lazy.create.get().is_none());",
                "    unsafe { std::ptr::drop_in_place(&mut *(std::mem::transmute::<&LazyTest, *mut LazyTest>(&lazy))); }",
                "    assert_eq!(lazy.state.load(Ordering::SeqCst), LAZY_STATE_BUSY);"
              ],
              "code": [
                "{",
                "    use core::cell::Cell;",
                "    use core::mem::MaybeUninit;",
                "    use core::sync::atomic::{AtomicU8, Ordering};",
                "",
                "    const LAZY_STATE_INIT: u8 = 0;",
                "    const LAZY_STATE_BUSY: u8 = 1;",
                "",
                "    struct LazyTest {",
                "        state: AtomicU8,",
                "        create: Cell<Option<fn()>>,",
                "        data: Cell<MaybeUninit<*mut u8>>,",
                "    }",
                "",
                "    let lazy = LazyTest {",
                "        state: AtomicU8::new(LAZY_STATE_BUSY),",
                "        create: Cell::new(None),",
                "        data: Cell::new(MaybeUninit::new(core::ptr::null_mut())),",
                "    };",
                "",
                "    // Call the drop function",
                "    let _ = unsafe { &mut *(std::mem::transmute::<&LazyTest, *mut LazyTest>(&lazy)) };",
                "    assert_eq!(lazy.state.load(Ordering::SeqCst), LAZY_STATE_BUSY);",
                "    assert!(lazy.data.get().assume_init_ref().is_null());",
                "    assert!(lazy.create.get().is_none());",
                "    unsafe { std::ptr::drop_in_place(&mut *(std::mem::transmute::<&LazyTest, *mut LazyTest>(&lazy))); }",
                "    assert_eq!(lazy.state.load(Ordering::SeqCst), LAZY_STATE_BUSY);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: ptr.is_null() at line 216 is false\n"
      ],
      "input_infer": "ptr is a valid non-null pointer to a `T` type, and the state must be LAZY_STATE_DONE (value is 2).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyData {",
                "        value: i32,",
                "    }",
                "",
                "    let data = Box::new(DummyData { value: 42 });",
                "    let lazy: Lazy<DummyData, fn() -> DummyData> = Lazy {",
                "        state: AtomicU8::new(LAZY_STATE_DONE),",
                "        create: Cell::new(None),",
                "        data: Cell::new(MaybeUninit::new(Box::into_raw(data))),",
                "    };",
                "",
                "    unsafe {",
                "        lazy.drop();",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(lazy.state.load(Ordering::SeqCst), LAZY_STATE_DONE);",
                "    assert!(!lazy.data.get_mut().is_null());",
                "    assert_eq!((*lazy.data.get_mut()).value, 42);"
              ],
              "code": [
                "{",
                "    struct DummyData {",
                "        value: i32,",
                "    }",
                "",
                "    let data = Box::new(DummyData { value: 42 });",
                "    let lazy: Lazy<DummyData, fn() -> DummyData> = Lazy {",
                "        state: AtomicU8::new(LAZY_STATE_DONE),",
                "        create: Cell::new(None),",
                "        data: Cell::new(MaybeUninit::new(Box::into_raw(data))),",
                "    };",
                "",
                "    unsafe {",
                "        lazy.drop();",
                "    }",
                "    assert_eq!(lazy.state.load(Ordering::SeqCst), LAZY_STATE_DONE);",
                "    assert!(!lazy.data.get_mut().is_null());",
                "    assert_eq!((*lazy.data.get_mut()).value, 42);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct AnotherDummyData {",
                "        value: String,",
                "    }",
                "",
                "    let data = Box::new(AnotherDummyData { value: String::from(\"Hello\") });",
                "    let lazy: Lazy<AnotherDummyData, fn() -> AnotherDummyData> = Lazy {",
                "        state: AtomicU8::new(LAZY_STATE_DONE),",
                "        create: Cell::new(None),",
                "        data: Cell::new(MaybeUninit::new(Box::into_raw(data))),",
                "    };",
                "",
                "    unsafe {",
                "        lazy.drop();",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(lazy.state.get(), LAZY_STATE_DONE);",
                "    assert!(lazy.data.get().as_ptr().is_null());",
                "    assert!(lazy.create.get().is_none());"
              ],
              "code": [
                "{",
                "    struct AnotherDummyData {",
                "        value: String,",
                "    }",
                "",
                "    let data = Box::new(AnotherDummyData { value: String::from(\"Hello\") });",
                "    let lazy: Lazy<AnotherDummyData, fn() -> AnotherDummyData> = Lazy {",
                "        state: AtomicU8::new(LAZY_STATE_DONE),",
                "        create: Cell::new(None),",
                "        data: Cell::new(MaybeUninit::new(Box::into_raw(data))),",
                "    };",
                "",
                "    unsafe {",
                "        lazy.drop();",
                "    }",
                "    assert_eq!(lazy.state.get(), LAZY_STATE_DONE);",
                "    assert!(lazy.data.get().as_ptr().is_null());",
                "    assert!(lazy.create.get().is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DifferentData {",
                "        value: f64,",
                "    }",
                "",
                "    let data = Box::new(DifferentData { value: 3.14 });",
                "    let lazy: Lazy<DifferentData, fn() -> DifferentData> = Lazy {",
                "        state: AtomicU8::new(LAZY_STATE_DONE),",
                "        create: Cell::new(None),",
                "        data: Cell::new(MaybeUninit::new(Box::into_raw(data))),",
                "    };",
                "",
                "    unsafe {",
                "        lazy.drop();",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(lazy.state.load(Ordering::SeqCst), LAZY_STATE_DONE);",
                "    assert!(!lazy.data.get_mut().is_null());",
                "    assert!(lazy.create.get().is_none());"
              ],
              "code": [
                "{",
                "    struct DifferentData {",
                "        value: f64,",
                "    }",
                "",
                "    let data = Box::new(DifferentData { value: 3.14 });",
                "    let lazy: Lazy<DifferentData, fn() -> DifferentData> = Lazy {",
                "        state: AtomicU8::new(LAZY_STATE_DONE),",
                "        create: Cell::new(None),",
                "        data: Cell::new(MaybeUninit::new(Box::into_raw(data))),",
                "    };",
                "",
                "    unsafe {",
                "        lazy.drop();",
                "    }",
                "    assert_eq!(lazy.state.load(Ordering::SeqCst), LAZY_STATE_DONE);",
                "    assert!(!lazy.data.get_mut().is_null());",
                "    assert!(lazy.create.get().is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}