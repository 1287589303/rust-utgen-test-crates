{
  "name": "regex_syntax::hir::literal::{impl#7}::make_inexact",
  "mod_info": {
    "name": "hir::literal",
    "loc": "regex-syntax/src/hir/mod.rs:42:1:42:17"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/literal.rs:2104:5:2106:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self.exact must be a boolean; the function should be tested when self.exact is true and when it is false.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut literal = Literal::exact(b\"test\");",
                "    literal.make_inexact();",
                "}"
              ],
              "oracle": [
                "    assert!(!literal.is_exact());",
                "    assert_eq!(literal.len(), 4);",
                "    assert_eq!(literal.as_bytes(), b\"test\");",
                "    assert!(!literal.is_empty());",
                "    literal.make_inexact();",
                "    assert!(!literal.is_exact());"
              ],
              "code": [
                "{",
                "    let mut literal = Literal::exact(b\"test\");",
                "    literal.make_inexact();",
                "    assert!(!literal.is_exact());",
                "    assert_eq!(literal.len(), 4);",
                "    assert_eq!(literal.as_bytes(), b\"test\");",
                "    assert!(!literal.is_empty());",
                "    literal.make_inexact();",
                "    assert!(!literal.is_exact());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut literal = Literal::inexact(b\"test\");",
                "    literal.make_inexact();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(literal.is_exact(), false);",
                "    assert_eq!(literal.len(), 4);",
                "    assert!(literal.as_bytes() == b\"test\");",
                "    literal.make_inexact();",
                "    assert_eq!(literal.is_exact(), false);"
              ],
              "code": [
                "{",
                "    let mut literal = Literal::inexact(b\"test\");",
                "    literal.make_inexact();",
                "    assert_eq!(literal.is_exact(), false);",
                "    assert_eq!(literal.len(), 4);",
                "    assert!(literal.as_bytes() == b\"test\");",
                "    literal.make_inexact();",
                "    assert_eq!(literal.is_exact(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}