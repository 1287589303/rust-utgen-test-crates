{
  "name": "regex_automata::dfa::minimize::{impl#2}::clear",
  "mod_info": {
    "name": "dfa::minimize",
    "loc": "regex-automata/src/dfa/mod.rs:352:1:352:14"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/minimize.rs:363:5:365:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "StateSet with a populated `ids` vector (non-empty) and an empty StateSet (no `ids` in the vector).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut stateset = StateSet {",
                "        ids: Rc::new(RefCell::new(vec![StateID(SmallIndex::new(1)), StateID(SmallIndex::new(2))])),",
                "    };",
                "    stateset.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(stateset.len(), 0);",
                "    assert!(stateset.is_empty());",
                "    assert_eq!(stateset.deep_clone().len(), 0);",
                "    assert!(stateset.deep_clone().is_empty());",
                "    assert!(stateset.ids.borrow().is_empty());"
              ],
              "code": [
                "{",
                "    let mut stateset = StateSet {",
                "        ids: Rc::new(RefCell::new(vec![StateID(SmallIndex::new(1)), StateID(SmallIndex::new(2))])),",
                "    };",
                "    stateset.clear();",
                "    assert_eq!(stateset.len(), 0);",
                "    assert!(stateset.is_empty());",
                "    assert_eq!(stateset.deep_clone().len(), 0);",
                "    assert!(stateset.deep_clone().is_empty());",
                "    assert!(stateset.ids.borrow().is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut stateset = StateSet {",
                "        ids: Rc::new(RefCell::new(vec![])),",
                "    };",
                "    stateset.clear();",
                "}"
              ],
              "oracle": [
                "    assert!(stateset.len() == 0);",
                "    assert!(stateset.is_empty());",
                "    assert_eq!(stateset.ids.borrow().len(), 0);",
                "    assert_eq!(stateset.ids.borrow().is_empty(), true);"
              ],
              "code": [
                "{",
                "    let mut stateset = StateSet {",
                "        ids: Rc::new(RefCell::new(vec![])),",
                "    };",
                "    stateset.clear();",
                "    assert!(stateset.len() == 0);",
                "    assert!(stateset.is_empty());",
                "    assert_eq!(stateset.ids.borrow().len(), 0);",
                "    assert_eq!(stateset.ids.borrow().is_empty(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}