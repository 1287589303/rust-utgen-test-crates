{
  "name": "regex_syntax::hir::literal::{impl#7}::exact",
  "mod_info": {
    "name": "hir::literal",
    "loc": "regex-syntax/src/hir/mod.rs:42:1:42:17"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/literal.rs:2057:5:2059:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Literal { bytes: bytes.into(), exact: true }\n"
      ],
      "input_infer": "Test input conditions or ranges: any valid byte array (including empty array, single byte array, and maximum allowable byte array size)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let literal = Literal::exact(vec![]);",
                "}"
              ],
              "oracle": [
                "    let result = Literal::exact(vec![]);",
                "    assert_eq!(result.bytes, vec![]);",
                "    assert!(result.exact);"
              ],
              "code": [
                "{",
                "    let literal = Literal::exact(vec![]);",
                "    let result = Literal::exact(vec![]);",
                "    assert_eq!(result.bytes, vec![]);",
                "    assert!(result.exact);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let literal = Literal::exact(vec![0x61]); // ASCII 'a'",
                "}"
              ],
              "oracle": [
                "    let literal = Literal::exact(vec![0x61]);",
                "    assert_eq!(literal.bytes, vec![0x61]);",
                "    assert!(literal.exact);"
              ],
              "code": [
                "{",
                "    let literal = Literal::exact(vec![0x61]); // ASCII 'a'",
                "    let literal = Literal::exact(vec![0x61]);",
                "    assert_eq!(literal.bytes, vec![0x61]);",
                "    assert!(literal.exact);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let literal = Literal::exact(vec![0x61, 0x62, 0x63]); // ASCII 'abc'",
                "}"
              ],
              "oracle": [
                "    assert_eq!(literal.bytes, vec![0x61, 0x62, 0x63]);",
                "    assert!(literal.exact);"
              ],
              "code": [
                "{",
                "    let literal = Literal::exact(vec![0x61, 0x62, 0x63]); // ASCII 'abc'",
                "    assert_eq!(literal.bytes, vec![0x61, 0x62, 0x63]);",
                "    assert!(literal.exact);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let literal = Literal::exact(vec![0x00; 1024]); // Example maximum size; adjust based on actual limits",
                "}"
              ],
              "oracle": [
                "    assert_eq!(literal.bytes, vec![0x00; 1024]);",
                "    assert!(literal.exact);",
                "    assert_eq!(literal.len(), 1024);",
                "    assert!(!literal.is_empty());",
                "    assert!(literal.is_exact());"
              ],
              "code": [
                "{",
                "    let literal = Literal::exact(vec![0x00; 1024]); // Example maximum size; adjust based on actual limits",
                "    assert_eq!(literal.bytes, vec![0x00; 1024]);",
                "    assert!(literal.exact);",
                "    assert_eq!(literal.len(), 1024);",
                "    assert!(!literal.is_empty());",
                "    assert!(literal.is_exact());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}