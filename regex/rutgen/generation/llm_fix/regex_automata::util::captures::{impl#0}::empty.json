{
  "name": "regex_automata::util::captures::{impl#0}::empty",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/captures.rs:301:5:303:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Captures { group_info, pid: None, slots: vec![] }\n"
      ],
      "input_infer": "group_info must be a valid GroupInfo instance, pid must be None, and slots must be an empty Vec<Option<NonMaxUsize>>.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let group_info = GroupInfo::default();",
                "    let captures = Captures::empty(group_info);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(captures.group_info(), &group_info);",
                "    assert!(captures.is_match() == false);",
                "    assert_eq!(captures.pattern(), None);",
                "    assert_eq!(captures.get_match(), None);",
                "    assert_eq!(captures.group_len(), 0);",
                "    assert_eq!(captures.slots, vec![]);"
              ],
              "code": [
                "{",
                "    let group_info = GroupInfo::default();",
                "    let captures = Captures::empty(group_info);",
                "    assert_eq!(captures.group_info(), &group_info);",
                "    assert!(captures.is_match() == false);",
                "    assert_eq!(captures.pattern(), None);",
                "    assert_eq!(captures.get_match(), None);",
                "    assert_eq!(captures.group_len(), 0);",
                "    assert_eq!(captures.slots, vec![]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let group_info = GroupInfo(Arc::new(GroupInfoInner::default()));",
                "    let captures = Captures::empty(group_info);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(captures.group_info(), &group_info);",
                "    assert!(captures.pattern().is_none());",
                "    assert_eq!(captures.slots.len(), 0);",
                "    assert!(!captures.is_match());",
                "    assert_eq!(captures.get_match(), None);",
                "    assert_eq!(captures.group_len(), 0);"
              ],
              "code": [
                "{",
                "    let group_info = GroupInfo(Arc::new(GroupInfoInner::default()));",
                "    let captures = Captures::empty(group_info);",
                "    assert_eq!(captures.group_info(), &group_info);",
                "    assert!(captures.pattern().is_none());",
                "    assert_eq!(captures.slots.len(), 0);",
                "    assert!(!captures.is_match());",
                "    assert_eq!(captures.get_match(), None);",
                "    assert_eq!(captures.group_len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let group_info = GroupInfo(Arc::new(GroupInfoInner::new_empty()));",
                "    let captures = Captures::empty(group_info);",
                "}"
              ],
              "oracle": [
                "    assert!(captures.group_info() == &GroupInfo(Arc::new(GroupInfoInner::new_empty())));",
                "    assert!(captures.pid.is_none());",
                "    assert_eq!(captures.slots, vec![]);"
              ],
              "code": [
                "{",
                "    let group_info = GroupInfo(Arc::new(GroupInfoInner::new_empty()));",
                "    let captures = Captures::empty(group_info);",
                "    assert!(captures.group_info() == &GroupInfo(Arc::new(GroupInfoInner::new_empty())));",
                "    assert!(captures.pid.is_none());",
                "    assert_eq!(captures.slots, vec![]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}