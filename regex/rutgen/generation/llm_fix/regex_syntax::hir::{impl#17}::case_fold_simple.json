{
  "name": "regex_syntax::hir::{impl#17}::case_fold_simple",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:1399:5:1401:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "ClassBytes input ranges must contain non-overlapping ClassBytesRange objects with start and end values between 0 and 255 for ASCII characters, including cases with ranges like 'a-z' (97-122) and 'A-Z' (65-90), as well as edge cases of empty ranges or entire ASCII set (0-255).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class_bytes = ClassBytes::empty();",
                "    class_bytes.case_fold_simple();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_bytes.ranges(), vec![ClassBytesRange { start: b'A', end: b'Z' }, ClassBytesRange { start: b'a', end: b'z' }]);",
                "    assert!(class_bytes.is_ascii());",
                "    assert_eq!(class_bytes.minimum_len(), Some(1));",
                "    assert_eq!(class_bytes.maximum_len(), Some(2));",
                "    assert!(class_bytes.literal().is_none());",
                "    assert!(class_bytes.to_unicode_class().is_none());"
              ],
              "code": [
                "{",
                "    let mut class_bytes = ClassBytes::empty();",
                "    class_bytes.case_fold_simple();",
                "    assert_eq!(class_bytes.ranges(), vec![ClassBytesRange { start: b'A', end: b'Z' }, ClassBytesRange { start: b'a', end: b'z' }]);",
                "    assert!(class_bytes.is_ascii());",
                "    assert_eq!(class_bytes.minimum_len(), Some(1));",
                "    assert_eq!(class_bytes.maximum_len(), Some(2));",
                "    assert!(class_bytes.literal().is_none());",
                "    assert!(class_bytes.to_unicode_class().is_none());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges = vec![ClassBytesRange { start: 97, end: 122 }]; // a-z",
                "    let mut class_bytes = ClassBytes::new(ranges);",
                "    class_bytes.case_fold_simple();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_bytes.ranges(), &[ClassBytesRange { start: 97, end: 122 }, ClassBytesRange { start: 65, end: 90 }]);"
              ],
              "code": [
                "{",
                "    let ranges = vec![ClassBytesRange { start: 97, end: 122 }]; // a-z",
                "    let mut class_bytes = ClassBytes::new(ranges);",
                "    class_bytes.case_fold_simple();",
                "    assert_eq!(class_bytes.ranges(), &[ClassBytesRange { start: 97, end: 122 }, ClassBytesRange { start: 65, end: 90 }]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges = vec![ClassBytesRange { start: 65, end: 90 }]; // A-Z",
                "    let mut class_bytes = ClassBytes::new(ranges);",
                "    class_bytes.case_fold_simple();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_bytes.ranges().len(), 2);",
                "    assert!(class_bytes.ranges().contains(&ClassBytesRange { start: 65, end: 90 }));",
                "    assert!(class_bytes.ranges().contains(&ClassBytesRange { start: 97, end: 122 }));"
              ],
              "code": [
                "{",
                "    let ranges = vec![ClassBytesRange { start: 65, end: 90 }]; // A-Z",
                "    let mut class_bytes = ClassBytes::new(ranges);",
                "    class_bytes.case_fold_simple();",
                "    assert_eq!(class_bytes.ranges().len(), 2);",
                "    assert!(class_bytes.ranges().contains(&ClassBytesRange { start: 65, end: 90 }));",
                "    assert!(class_bytes.ranges().contains(&ClassBytesRange { start: 97, end: 122 }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges = vec![",
                "        ClassBytesRange { start: 65, end: 90 }, // A-Z",
                "        ClassBytesRange { start: 97, end: 122 }, // a-z",
                "    ];",
                "    let mut class_bytes = ClassBytes::new(ranges);",
                "    class_bytes.case_fold_simple();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_bytes.ranges(), &[ClassBytesRange { start: 65, end: 90 }, ClassBytesRange { start: 97, end: 122 }]);",
                "    assert!(class_bytes.is_ascii());",
                "    assert_eq!(class_bytes.minimum_len(), Some(2));",
                "    assert_eq!(class_bytes.maximum_len(), Some(26));",
                "    assert_eq!(class_bytes.literal(), None);",
                "    assert!(class_bytes.to_unicode_class().is_none());"
              ],
              "code": [
                "{",
                "    let ranges = vec![",
                "        ClassBytesRange { start: 65, end: 90 }, // A-Z",
                "        ClassBytesRange { start: 97, end: 122 }, // a-z",
                "    ];",
                "    let mut class_bytes = ClassBytes::new(ranges);",
                "    class_bytes.case_fold_simple();",
                "    assert_eq!(class_bytes.ranges(), &[ClassBytesRange { start: 65, end: 90 }, ClassBytesRange { start: 97, end: 122 }]);",
                "    assert!(class_bytes.is_ascii());",
                "    assert_eq!(class_bytes.minimum_len(), Some(2));",
                "    assert_eq!(class_bytes.maximum_len(), Some(26));",
                "    assert_eq!(class_bytes.literal(), None);",
                "    assert!(class_bytes.to_unicode_class().is_none());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges = vec![ClassBytesRange { start: 0, end: 255 }]; // 0-255",
                "    let mut class_bytes = ClassBytes::new(ranges);",
                "    class_bytes.case_fold_simple();",
                "}"
              ],
              "oracle": [
                "    let ranges = vec![ClassBytesRange { start: 0, end: 255 }];",
                "    let mut class_bytes = ClassBytes::new(ranges);",
                "    class_bytes.case_fold_simple();",
                "    assert!(class_bytes.is_ascii());",
                "    assert_eq!(class_bytes.ranges().len(), 2);",
                "    assert_eq!(class_bytes.ranges()[0], ClassBytesRange { start: 0, end: 127 });",
                "    assert_eq!(class_bytes.ranges()[1], ClassBytesRange { start: 128, end: 255 });"
              ],
              "code": [
                "{",
                "    let ranges = vec![ClassBytesRange { start: 0, end: 255 }]; // 0-255",
                "    let mut class_bytes = ClassBytes::new(ranges);",
                "    class_bytes.case_fold_simple();",
                "    let ranges = vec![ClassBytesRange { start: 0, end: 255 }];",
                "    let mut class_bytes = ClassBytes::new(ranges);",
                "    class_bytes.case_fold_simple();",
                "    assert!(class_bytes.is_ascii());",
                "    assert_eq!(class_bytes.ranges().len(), 2);",
                "    assert_eq!(class_bytes.ranges()[0], ClassBytesRange { start: 0, end: 127 });",
                "    assert_eq!(class_bytes.ranges()[1], ClassBytesRange { start: 128, end: 255 });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges = vec![",
                "        ClassBytesRange { start: 65, end: 90 }, // A-Z",
                "        ClassBytesRange { start: 97, end: 122 }, // a-z",
                "        ClassBytesRange { start: 0, end: 64 },  // 0-64",
                "    ];",
                "    let mut class_bytes = ClassBytes::new(ranges);",
                "    class_bytes.case_fold_simple();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_bytes.ranges().len(), 6);",
                "    assert!(class_bytes.ranges().contains(&ClassBytesRange { start: 65, end: 90 }));",
                "    assert!(class_bytes.ranges().contains(&ClassBytesRange { start: 97, end: 122 }));",
                "    assert!(class_bytes.ranges().contains(&ClassBytesRange { start: 32, end: 64 }));",
                "    assert!(class_bytes.ranges().contains(&ClassBytesRange { start: 0, end: 31 }));",
                "    assert!(class_bytes.ranges().contains(&ClassBytesRange { start: 65, end: 90 }));",
                "    assert!(class_bytes.ranges().contains(&ClassBytesRange { start: 97, end: 122 }));"
              ],
              "code": [
                "{",
                "    let ranges = vec![",
                "        ClassBytesRange { start: 65, end: 90 }, // A-Z",
                "        ClassBytesRange { start: 97, end: 122 }, // a-z",
                "        ClassBytesRange { start: 0, end: 64 },  // 0-64",
                "    ];",
                "    let mut class_bytes = ClassBytes::new(ranges);",
                "    class_bytes.case_fold_simple();",
                "    assert_eq!(class_bytes.ranges().len(), 6);",
                "    assert!(class_bytes.ranges().contains(&ClassBytesRange { start: 65, end: 90 }));",
                "    assert!(class_bytes.ranges().contains(&ClassBytesRange { start: 97, end: 122 }));",
                "    assert!(class_bytes.ranges().contains(&ClassBytesRange { start: 32, end: 64 }));",
                "    assert!(class_bytes.ranges().contains(&ClassBytesRange { start: 0, end: 31 }));",
                "    assert!(class_bytes.ranges().contains(&ClassBytesRange { start: 65, end: 90 }));",
                "    assert!(class_bytes.ranges().contains(&ClassBytesRange { start: 97, end: 122 }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges = vec![",
                "        ClassBytesRange { start: 32, end: 32 }, // Space",
                "        ClassBytesRange { start: 255, end: 255 }, // Non-ASCII character",
                "    ];",
                "    let mut class_bytes = ClassBytes::new(ranges);",
                "    class_bytes.case_fold_simple();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_bytes.ranges().len(), 2); // Ensure there are two ranges after case folding",
                "    assert!(class_bytes.ranges().contains(&ClassBytesRange { start: 32, end: 32 })); // Check that space is present",
                "    assert!(class_bytes.ranges().contains(&ClassBytesRange { start: 97, end: 122 })); // Check that 'a-z' is included after folding",
                "    assert!(class_bytes.ranges().contains(&ClassBytesRange { start: 65, end: 90 })); // Check that 'A-Z' is included after folding",
                "    assert!(class_bytes.ranges().contains(&ClassBytesRange { start: 255, end: 255 })); // Check that the non-ASCII character is still present",
                "    assert_eq!(class_bytes.set.folded, true); // Ensure the set is marked as folded"
              ],
              "code": [
                "{",
                "    let ranges = vec![",
                "        ClassBytesRange { start: 32, end: 32 }, // Space",
                "        ClassBytesRange { start: 255, end: 255 }, // Non-ASCII character",
                "    ];",
                "    let mut class_bytes = ClassBytes::new(ranges);",
                "    class_bytes.case_fold_simple();",
                "    assert_eq!(class_bytes.ranges().len(), 2); // Ensure there are two ranges after case folding",
                "    assert!(class_bytes.ranges().contains(&ClassBytesRange { start: 32, end: 32 })); // Check that space is present",
                "    assert!(class_bytes.ranges().contains(&ClassBytesRange { start: 97, end: 122 })); // Check that 'a-z' is included after folding",
                "    assert!(class_bytes.ranges().contains(&ClassBytesRange { start: 65, end: 90 })); // Check that 'A-Z' is included after folding",
                "    assert!(class_bytes.ranges().contains(&ClassBytesRange { start: 255, end: 255 })); // Check that the non-ASCII character is still present",
                "    assert_eq!(class_bytes.set.folded, true); // Ensure the set is marked as folded",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}