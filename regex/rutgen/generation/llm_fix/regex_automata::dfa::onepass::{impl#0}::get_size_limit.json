{
  "name": "regex_automata::dfa::onepass::{impl#0}::get_size_limit",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/onepass.rs:262:5:264:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self.size_limit as Some(0), Some(1), Some(usize::MAX), None\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().size_limit(Some(0));",
                "    let _ = config.get_size_limit();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_size_limit(), Some(0));"
              ],
              "code": [
                "{",
                "    let config = Config::new().size_limit(Some(0));",
                "    let _ = config.get_size_limit();",
                "    assert_eq!(config.get_size_limit(), Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().size_limit(Some(1));",
                "    let _ = config.get_size_limit();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_size_limit(), Some(1));",
                "    let config_no_limit = Config::new().size_limit(None);",
                "    assert_eq!(config_no_limit.get_size_limit(), None);",
                "    let config_empty_limit = Config::new();",
                "    assert_eq!(config_empty_limit.get_size_limit(), None);"
              ],
              "code": [
                "{",
                "    let config = Config::new().size_limit(Some(1));",
                "    let _ = config.get_size_limit();",
                "    assert_eq!(config.get_size_limit(), Some(1));",
                "    let config_no_limit = Config::new().size_limit(None);",
                "    assert_eq!(config_no_limit.get_size_limit(), None);",
                "    let config_empty_limit = Config::new();",
                "    assert_eq!(config_empty_limit.get_size_limit(), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().size_limit(Some(usize::MAX));",
                "    let _ = config.get_size_limit();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_size_limit(), Some(usize::MAX));"
              ],
              "code": [
                "{",
                "    let config = Config::new().size_limit(Some(usize::MAX));",
                "    let _ = config.get_size_limit();",
                "    assert_eq!(config.get_size_limit(), Some(usize::MAX));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().size_limit(None);",
                "    let _ = config.get_size_limit();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_size_limit(), None);"
              ],
              "code": [
                "{",
                "    let config = Config::new().size_limit(None);",
                "    let _ = config.get_size_limit();",
                "    assert_eq!(config.get_size_limit(), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}