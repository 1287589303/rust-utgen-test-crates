{
  "name": "regex_lite::nfa::{impl#6}::new",
  "mod_info": {
    "name": "nfa",
    "loc": "regex-lite/src/lib.rs:880:1:880:9"
  },
  "visible": false,
  "loc": "regex-lite/src/nfa.rs:266:5:279:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Compiler { config, nfa }\n"
      ],
      "input_infer": "Config with nest_limit in the range [1, 10000] and size_limit as Some(0) or a positive integer; pattern as a non-empty string (length > 0) containing valid regex characters or an empty string; also, check with various string lengths including edge cases (maximum allowed length by system).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 1, size_limit: Some(10) };",
                "    let pattern = String::from(\"a\");",
                "    let compiler = Compiler::new(config, pattern);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(compiler.config.nest_limit, 1);",
                "    assert_eq!(compiler.config.size_limit, Some(10));",
                "    assert_eq!(compiler.nfa.borrow().pattern, \"a\");",
                "    assert_eq!(compiler.nfa.borrow().states.len(), 0);",
                "    assert_eq!(compiler.nfa.borrow().start, 0);",
                "    assert!(!compiler.nfa.borrow().is_start_anchored);",
                "    assert!(!compiler.nfa.borrow().is_match_empty);",
                "    assert_eq!(compiler.nfa.borrow().static_explicit_captures_len, None);",
                "    assert!(compiler.nfa.borrow().cap_name_to_index.is_empty());",
                "    assert!(compiler.nfa.borrow().cap_index_to_name.is_empty());",
                "    assert_eq!(compiler.nfa.borrow().memory_extra, 0);"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 1, size_limit: Some(10) };",
                "    let pattern = String::from(\"a\");",
                "    let compiler = Compiler::new(config, pattern);",
                "    assert_eq!(compiler.config.nest_limit, 1);",
                "    assert_eq!(compiler.config.size_limit, Some(10));",
                "    assert_eq!(compiler.nfa.borrow().pattern, \"a\");",
                "    assert_eq!(compiler.nfa.borrow().states.len(), 0);",
                "    assert_eq!(compiler.nfa.borrow().start, 0);",
                "    assert!(!compiler.nfa.borrow().is_start_anchored);",
                "    assert!(!compiler.nfa.borrow().is_match_empty);",
                "    assert_eq!(compiler.nfa.borrow().static_explicit_captures_len, None);",
                "    assert!(compiler.nfa.borrow().cap_name_to_index.is_empty());",
                "    assert!(compiler.nfa.borrow().cap_index_to_name.is_empty());",
                "    assert_eq!(compiler.nfa.borrow().memory_extra, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 10000, size_limit: Some(50) };",
                "    let pattern = String::from(\"abc\");",
                "    let compiler = Compiler::new(config, pattern);",
                "}"
              ],
              "oracle": [
                "    let config = Config { nest_limit: 10000, size_limit: Some(50) };",
                "    let pattern = String::from(\"abc\");",
                "    let compiler = Compiler::new(config.clone(), pattern.clone());",
                "    assert_eq!(compiler.config, config);",
                "    assert_eq!(compiler.nfa.borrow().pattern, pattern);",
                "    assert_eq!(compiler.nfa.borrow().states, vec![]);",
                "    assert_eq!(compiler.nfa.borrow().start, 0);",
                "    assert_eq!(compiler.nfa.borrow().is_start_anchored, false);",
                "    assert_eq!(compiler.nfa.borrow().is_match_empty, false);",
                "    assert_eq!(compiler.nfa.borrow().static_explicit_captures_len, None);",
                "    assert_eq!(compiler.nfa.borrow().cap_name_to_index, CaptureNameMap::default());",
                "    assert_eq!(compiler.nfa.borrow().cap_index_to_name, vec![]);",
                "    assert_eq!(compiler.nfa.borrow().memory_extra, 0);"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 10000, size_limit: Some(50) };",
                "    let pattern = String::from(\"abc\");",
                "    let compiler = Compiler::new(config, pattern);",
                "    let config = Config { nest_limit: 10000, size_limit: Some(50) };",
                "    let pattern = String::from(\"abc\");",
                "    let compiler = Compiler::new(config.clone(), pattern.clone());",
                "    assert_eq!(compiler.config, config);",
                "    assert_eq!(compiler.nfa.borrow().pattern, pattern);",
                "    assert_eq!(compiler.nfa.borrow().states, vec![]);",
                "    assert_eq!(compiler.nfa.borrow().start, 0);",
                "    assert_eq!(compiler.nfa.borrow().is_start_anchored, false);",
                "    assert_eq!(compiler.nfa.borrow().is_match_empty, false);",
                "    assert_eq!(compiler.nfa.borrow().static_explicit_captures_len, None);",
                "    assert_eq!(compiler.nfa.borrow().cap_name_to_index, CaptureNameMap::default());",
                "    assert_eq!(compiler.nfa.borrow().cap_index_to_name, vec![]);",
                "    assert_eq!(compiler.nfa.borrow().memory_extra, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 10, size_limit: Some(0) };",
                "    let pattern = String::from(\"xyz\");",
                "    let compiler = Compiler::new(config, pattern);",
                "}"
              ],
              "oracle": [
                "    let config = Config { nest_limit: 10, size_limit: Some(0) };",
                "    let pattern = String::from(\"xyz\");",
                "    let compiler = Compiler::new(config.clone(), pattern.clone());",
                "    assert_eq!(compiler.config, config);",
                "    assert_eq!(compiler.nfa.borrow().pattern, pattern);",
                "    assert_eq!(compiler.nfa.borrow().states.len(), 0);",
                "    assert_eq!(compiler.nfa.borrow().start, 0);",
                "    assert!(!compiler.nfa.borrow().is_start_anchored);",
                "    assert!(!compiler.nfa.borrow().is_match_empty);",
                "    assert_eq!(compiler.nfa.borrow().static_explicit_captures_len, None);",
                "    assert!(compiler.nfa.borrow().cap_name_to_index.is_empty());",
                "    assert!(compiler.nfa.borrow().cap_index_to_name.is_empty());",
                "    assert_eq!(compiler.nfa.borrow().memory_extra, 0);"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 10, size_limit: Some(0) };",
                "    let pattern = String::from(\"xyz\");",
                "    let compiler = Compiler::new(config, pattern);",
                "    let config = Config { nest_limit: 10, size_limit: Some(0) };",
                "    let pattern = String::from(\"xyz\");",
                "    let compiler = Compiler::new(config.clone(), pattern.clone());",
                "    assert_eq!(compiler.config, config);",
                "    assert_eq!(compiler.nfa.borrow().pattern, pattern);",
                "    assert_eq!(compiler.nfa.borrow().states.len(), 0);",
                "    assert_eq!(compiler.nfa.borrow().start, 0);",
                "    assert!(!compiler.nfa.borrow().is_start_anchored);",
                "    assert!(!compiler.nfa.borrow().is_match_empty);",
                "    assert_eq!(compiler.nfa.borrow().static_explicit_captures_len, None);",
                "    assert!(compiler.nfa.borrow().cap_name_to_index.is_empty());",
                "    assert!(compiler.nfa.borrow().cap_index_to_name.is_empty());",
                "    assert_eq!(compiler.nfa.borrow().memory_extra, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 5, size_limit: Some(100) };",
                "    let pattern = String::from(\"\");",
                "    let compiler = Compiler::new(config, pattern);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(compiler.config.nest_limit, 5);",
                "    assert_eq!(compiler.config.size_limit, Some(100));",
                "    assert_eq!(compiler.nfa.borrow().pattern, \"\");",
                "    assert_eq!(compiler.nfa.borrow().states.len(), 0);",
                "    assert_eq!(compiler.nfa.borrow().start, 0);",
                "    assert_eq!(compiler.nfa.borrow().is_start_anchored, false);",
                "    assert_eq!(compiler.nfa.borrow().is_match_empty, false);",
                "    assert_eq!(compiler.nfa.borrow().static_explicit_captures_len, None);",
                "    assert_eq!(compiler.nfa.borrow().cap_name_to_index.len(), 0);",
                "    assert_eq!(compiler.nfa.borrow().cap_index_to_name.len(), 0);",
                "    assert_eq!(compiler.nfa.borrow().memory_extra, 0);"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 5, size_limit: Some(100) };",
                "    let pattern = String::from(\"\");",
                "    let compiler = Compiler::new(config, pattern);",
                "    assert_eq!(compiler.config.nest_limit, 5);",
                "    assert_eq!(compiler.config.size_limit, Some(100));",
                "    assert_eq!(compiler.nfa.borrow().pattern, \"\");",
                "    assert_eq!(compiler.nfa.borrow().states.len(), 0);",
                "    assert_eq!(compiler.nfa.borrow().start, 0);",
                "    assert_eq!(compiler.nfa.borrow().is_start_anchored, false);",
                "    assert_eq!(compiler.nfa.borrow().is_match_empty, false);",
                "    assert_eq!(compiler.nfa.borrow().static_explicit_captures_len, None);",
                "    assert_eq!(compiler.nfa.borrow().cap_name_to_index.len(), 0);",
                "    assert_eq!(compiler.nfa.borrow().cap_index_to_name.len(), 0);",
                "    assert_eq!(compiler.nfa.borrow().memory_extra, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 20, size_limit: Some(1000) };",
                "    let pattern = String::from(\"a\".repeat(1000));",
                "    let compiler = Compiler::new(config, pattern);",
                "}"
              ],
              "oracle": [
                "    let config = Config { nest_limit: 20, size_limit: Some(1000) };",
                "    let pattern = String::from(\"a\".repeat(1000));",
                "    let compiler = Compiler::new(config, pattern);",
                "    assert_eq!(compiler.config.nest_limit, 20);",
                "    assert_eq!(compiler.config.size_limit, Some(1000));",
                "    assert_eq!(compiler.nfa.borrow().pattern, \"a\".repeat(1000));",
                "    assert_eq!(compiler.nfa.borrow().states.len(), 0);",
                "    assert_eq!(compiler.nfa.borrow().start, 0);",
                "    assert_eq!(compiler.nfa.borrow().is_start_anchored, false);",
                "    assert_eq!(compiler.nfa.borrow().is_match_empty, false);",
                "    assert_eq!(compiler.nfa.borrow().static_explicit_captures_len, None);",
                "    assert!(compiler.nfa.borrow().cap_name_to_index.is_empty());",
                "    assert!(compiler.nfa.borrow().cap_index_to_name.is_empty());",
                "    assert_eq!(compiler.nfa.borrow().memory_extra, 0);"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 20, size_limit: Some(1000) };",
                "    let pattern = String::from(\"a\".repeat(1000));",
                "    let compiler = Compiler::new(config, pattern);",
                "    let config = Config { nest_limit: 20, size_limit: Some(1000) };",
                "    let pattern = String::from(\"a\".repeat(1000));",
                "    let compiler = Compiler::new(config, pattern);",
                "    assert_eq!(compiler.config.nest_limit, 20);",
                "    assert_eq!(compiler.config.size_limit, Some(1000));",
                "    assert_eq!(compiler.nfa.borrow().pattern, \"a\".repeat(1000));",
                "    assert_eq!(compiler.nfa.borrow().states.len(), 0);",
                "    assert_eq!(compiler.nfa.borrow().start, 0);",
                "    assert_eq!(compiler.nfa.borrow().is_start_anchored, false);",
                "    assert_eq!(compiler.nfa.borrow().is_match_empty, false);",
                "    assert_eq!(compiler.nfa.borrow().static_explicit_captures_len, None);",
                "    assert!(compiler.nfa.borrow().cap_name_to_index.is_empty());",
                "    assert!(compiler.nfa.borrow().cap_index_to_name.is_empty());",
                "    assert_eq!(compiler.nfa.borrow().memory_extra, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 15, size_limit: Some(200) };",
                "    let pattern = String::from(\".*[0-9]+\");",
                "    let compiler = Compiler::new(config, pattern);",
                "}"
              ],
              "oracle": [
                "    let expected_nfa_pattern = String::from(\".*[0-9]+\");",
                "    let expected_compiler_config = Config { nest_limit: 15, size_limit: Some(200) };",
                "    let expected_compiler_nfa = NFA {",
                "    pattern: expected_nfa_pattern,",
                "    states: vec![],",
                "    start: 0,",
                "    is_start_anchored: false,",
                "    is_match_empty: false,",
                "    static_explicit_captures_len: None,",
                "    cap_name_to_index: CaptureNameMap::default(),",
                "    cap_index_to_name: vec![],",
                "    memory_extra: 0,",
                "    };",
                "    assert_eq!(compiler.config, expected_compiler_config);",
                "    assert_eq!(compiler.nfa.borrow().pattern, expected_nfa_pattern);",
                "    assert_eq!(compiler.nfa.borrow().states.len(), 0);",
                "    assert_eq!(compiler.nfa.borrow().start, 0);",
                "    assert_eq!(compiler.nfa.borrow().is_start_anchored, false);",
                "    assert_eq!(compiler.nfa.borrow().is_match_empty, false);",
                "    assert!(compiler.nfa.borrow().static_explicit_captures_len.is_none());",
                "    assert_eq!(compiler.nfa.borrow().cap_name_to_index.len(), 0);",
                "    assert_eq!(compiler.nfa.borrow().cap_index_to_name.len(), 0);",
                "    assert_eq!(compiler.nfa.borrow().memory_extra, 0);"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 15, size_limit: Some(200) };",
                "    let pattern = String::from(\".*[0-9]+\");",
                "    let compiler = Compiler::new(config, pattern);",
                "    let expected_nfa_pattern = String::from(\".*[0-9]+\");",
                "    let expected_compiler_config = Config { nest_limit: 15, size_limit: Some(200) };",
                "    let expected_compiler_nfa = NFA {",
                "    pattern: expected_nfa_pattern,",
                "    states: vec![],",
                "    start: 0,",
                "    is_start_anchored: false,",
                "    is_match_empty: false,",
                "    static_explicit_captures_len: None,",
                "    cap_name_to_index: CaptureNameMap::default(),",
                "    cap_index_to_name: vec![],",
                "    memory_extra: 0,",
                "    };",
                "    assert_eq!(compiler.config, expected_compiler_config);",
                "    assert_eq!(compiler.nfa.borrow().pattern, expected_nfa_pattern);",
                "    assert_eq!(compiler.nfa.borrow().states.len(), 0);",
                "    assert_eq!(compiler.nfa.borrow().start, 0);",
                "    assert_eq!(compiler.nfa.borrow().is_start_anchored, false);",
                "    assert_eq!(compiler.nfa.borrow().is_match_empty, false);",
                "    assert!(compiler.nfa.borrow().static_explicit_captures_len.is_none());",
                "    assert_eq!(compiler.nfa.borrow().cap_name_to_index.len(), 0);",
                "    assert_eq!(compiler.nfa.borrow().cap_index_to_name.len(), 0);",
                "    assert_eq!(compiler.nfa.borrow().memory_extra, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}