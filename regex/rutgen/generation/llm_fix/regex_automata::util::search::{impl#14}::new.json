{
  "name": "regex_automata::util::search::{impl#14}::new",
  "mod_info": {
    "name": "util::search",
    "loc": "regex-automata/src/util/mod.rs:53:1:53:23"
  },
  "visible": true,
  "loc": "regex-automata/src/util/search.rs:1189:5:1199:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: capacity <= PatternID::LIMIT at line 1191 is true, with bound capacity == PatternID::LIMIT\n",
        "expected return value/type: PatternSet {\n            len: 0,\n            which: alloc::vec![false; capacity].into_boxed_slice(),\n        }\n"
      ],
      "input_infer": "capacity: 0 to PatternID::LIMIT, inclusive\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity = 0;",
                "    let pattern_set = PatternSet::new(capacity);",
                "}"
              ],
              "oracle": [
                "    let capacity = 0;",
                "    let pattern_set = PatternSet::new(capacity);",
                "    assert_eq!(pattern_set.len, 0);",
                "    assert_eq!(pattern_set.capacity(), capacity);",
                "    assert_eq!(pattern_set.which, alloc::vec![false; capacity].into_boxed_slice());"
              ],
              "code": [
                "{",
                "    let capacity = 0;",
                "    let pattern_set = PatternSet::new(capacity);",
                "    let capacity = 0;",
                "    let pattern_set = PatternSet::new(capacity);",
                "    assert_eq!(pattern_set.len, 0);",
                "    assert_eq!(pattern_set.capacity(), capacity);",
                "    assert_eq!(pattern_set.which, alloc::vec![false; capacity].into_boxed_slice());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity = PatternID::LIMIT;",
                "    let pattern_set = PatternSet::new(capacity);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(pattern_set.len, 0);",
                "    assert_eq!(pattern_set.capacity(), PatternID::LIMIT);",
                "    assert_eq!(pattern_set.which, alloc::vec![false; PatternID::LIMIT].into_boxed_slice());"
              ],
              "code": [
                "{",
                "    let capacity = PatternID::LIMIT;",
                "    let pattern_set = PatternSet::new(capacity);",
                "    assert_eq!(pattern_set.len, 0);",
                "    assert_eq!(pattern_set.capacity(), PatternID::LIMIT);",
                "    assert_eq!(pattern_set.which, alloc::vec![false; PatternID::LIMIT].into_boxed_slice());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let capacity = PatternID::LIMIT + 1;",
                "    let pattern_set = PatternSet::new(capacity);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(PatternSet::new(PatternID::LIMIT).len, 0);",
                "    assert_eq!(PatternSet::new(PatternID::LIMIT).which.len(), PatternID::LIMIT);",
                "    assert!(PatternSet::new(PatternID::LIMIT).which.iter().all(|&x| !x);)"
              ],
              "code": [
                "{",
                "    let capacity = PatternID::LIMIT + 1;",
                "    let pattern_set = PatternSet::new(capacity);",
                "    assert_eq!(PatternSet::new(PatternID::LIMIT).len, 0);",
                "    assert_eq!(PatternSet::new(PatternID::LIMIT).which.len(), PatternID::LIMIT);",
                "    assert!(PatternSet::new(PatternID::LIMIT).which.iter().all(|&x| !x);)",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: capacity <= PatternID::LIMIT at line 1191 is false\n"
      ],
      "input_infer": "capacity: PatternID::LIMIT + 1\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let capacity = PatternID::LIMIT + 1;",
                "    let _pattern_set = PatternSet::new(capacity);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| {",
                "    let capacity = PatternID::LIMIT + 1;",
                "    let _pattern_set = PatternSet::new(capacity);",
                "    }).is_err());"
              ],
              "code": [
                "{",
                "    let capacity = PatternID::LIMIT + 1;",
                "    let _pattern_set = PatternSet::new(capacity);",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let capacity = PatternID::LIMIT + 1;",
                "    let _pattern_set = PatternSet::new(capacity);",
                "    }).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}