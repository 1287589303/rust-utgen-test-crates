{
  "name": "regex_automata::nfa::thompson::compiler::{impl#0}::utf8",
  "mod_info": {
    "name": "nfa::thompson::compiler",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:60:1:60:14"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/compiler.rs:147:5:150:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "yes: bool in {true, false}\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().utf8(true);",
                "}"
              ],
              "oracle": [
                "    let config = Config::new().utf8(true); assert_eq!(config.utf8, Some(true));",
                "    let config = Config::new().utf8(false); assert_eq!(config.utf8, Some(false));",
                "    let config = Config::new().utf8(true).utf8(false); assert_eq!(config.utf8, Some(false));",
                "    let config = Config::new().utf8(false).utf8(true); assert_eq!(config.utf8, Some(true));",
                "    let config = Config::new(); assert_eq!(config.utf8, None);"
              ],
              "code": [
                "{",
                "    let config = Config::new().utf8(true);",
                "    let config = Config::new().utf8(true); assert_eq!(config.utf8, Some(true));",
                "    let config = Config::new().utf8(false); assert_eq!(config.utf8, Some(false));",
                "    let config = Config::new().utf8(true).utf8(false); assert_eq!(config.utf8, Some(false));",
                "    let config = Config::new().utf8(false).utf8(true); assert_eq!(config.utf8, Some(true));",
                "    let config = Config::new(); assert_eq!(config.utf8, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().utf8(false);",
                "}"
              ],
              "oracle": [
                "    let config = Config::new().utf8(false);",
                "    assert_eq!(config.get_utf8(), false);",
                "    let config = Config::new().utf8(true);",
                "    assert_eq!(config.get_utf8(), true);",
                "    let config = Config::new().utf8(false).utf8(true);",
                "    assert_eq!(config.get_utf8(), true);",
                "    let config = Config::new().utf8(true).utf8(false);",
                "    assert_eq!(config.get_utf8(), false);"
              ],
              "code": [
                "{",
                "    let config = Config::new().utf8(false);",
                "    let config = Config::new().utf8(false);",
                "    assert_eq!(config.get_utf8(), false);",
                "    let config = Config::new().utf8(true);",
                "    assert_eq!(config.get_utf8(), true);",
                "    let config = Config::new().utf8(false).utf8(true);",
                "    assert_eq!(config.get_utf8(), true);",
                "    let config = Config::new().utf8(true).utf8(false);",
                "    assert_eq!(config.get_utf8(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}