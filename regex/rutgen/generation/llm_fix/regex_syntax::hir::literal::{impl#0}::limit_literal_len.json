{
  "name": "regex_syntax::hir::literal::{impl#0}::limit_literal_len",
  "mod_info": {
    "name": "hir::literal",
    "loc": "regex-syntax/src/hir/mod.rs:42:1:42:17"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/literal.rs:329:5:332:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "limit_literal_len(0, 1, 14, 100, 256, 512, 1024, usize::MAX)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_literal_len(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(extractor.limit_literal_len(0).limit_literal_len, 0);",
                "    assert_eq!(extractor.limit_literal_len(1).limit_literal_len, 1);",
                "    assert_eq!(extractor.limit_literal_len(100).limit_literal_len, 100);",
                "    assert_ne!(extractor.limit_literal_len(1).limit_literal_len, extractor.limit_literal_len(2).limit_literal_len);",
                "    assert_eq!(extractor.limit_literal_len(50).limit_literal_len(50), extractor.limit_literal_len(50));"
              ],
              "code": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_literal_len(0);",
                "    assert_eq!(extractor.limit_literal_len(0).limit_literal_len, 0);",
                "    assert_eq!(extractor.limit_literal_len(1).limit_literal_len, 1);",
                "    assert_eq!(extractor.limit_literal_len(100).limit_literal_len, 100);",
                "    assert_ne!(extractor.limit_literal_len(1).limit_literal_len, extractor.limit_literal_len(2).limit_literal_len);",
                "    assert_eq!(extractor.limit_literal_len(50).limit_literal_len(50), extractor.limit_literal_len(50));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_literal_len(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(extractor.limit_literal_len(1), &mut extractor);"
              ],
              "code": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_literal_len(1);",
                "    assert_eq!(extractor.limit_literal_len(1), &mut extractor);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_literal_len(14);",
                "}"
              ],
              "oracle": [
                "    Extractor::new().limit_literal_len(14);",
                "    assert_eq!(extractor.limit_literal_len, 14);",
                "    extractor.limit_literal_len(0);",
                "    assert_eq!(extractor.limit_literal_len, 0);",
                "    extractor.limit_literal_len(100);",
                "    assert_eq!(extractor.limit_literal_len, 100);",
                "    extractor.limit_literal_len(usize::MAX);",
                "    assert_eq!(extractor.limit_literal_len, usize::MAX);"
              ],
              "code": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_literal_len(14);",
                "    Extractor::new().limit_literal_len(14);",
                "    assert_eq!(extractor.limit_literal_len, 14);",
                "    extractor.limit_literal_len(0);",
                "    assert_eq!(extractor.limit_literal_len, 0);",
                "    extractor.limit_literal_len(100);",
                "    assert_eq!(extractor.limit_literal_len, 100);",
                "    extractor.limit_literal_len(usize::MAX);",
                "    assert_eq!(extractor.limit_literal_len, usize::MAX);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_literal_len(100);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(extractor.limit_literal_len(100), &mut extractor);",
                "    assert_eq!(extractor.limit_literal_len(50), &mut extractor);",
                "    assert_eq!(extractor.limit_literal_len(0), &mut extractor);",
                "    assert_eq!(extractor.limit_literal_len(1), &mut extractor);",
                "    assert_eq!(extractor.limit_literal_len(1000), &mut extractor);"
              ],
              "code": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_literal_len(100);",
                "    assert_eq!(extractor.limit_literal_len(100), &mut extractor);",
                "    assert_eq!(extractor.limit_literal_len(50), &mut extractor);",
                "    assert_eq!(extractor.limit_literal_len(0), &mut extractor);",
                "    assert_eq!(extractor.limit_literal_len(1), &mut extractor);",
                "    assert_eq!(extractor.limit_literal_len(1000), &mut extractor);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_literal_len(256);",
                "}"
              ],
              "oracle": [
                "    extractor.limit_literal_len(256);",
                "    assert_eq!(extractor.limit_literal_len, 256);",
                "    extractor.limit_literal_len(0);",
                "    assert_eq!(extractor.limit_literal_len, 0);",
                "    extractor.limit_literal_len(1);",
                "    assert_eq!(extractor.limit_literal_len, 1);",
                "    extractor.limit_literal_len(100);",
                "    assert_eq!(extractor.limit_literal_len, 100);",
                "    extractor.limit_literal_len(512);",
                "    assert_eq!(extractor.limit_literal_len, 512);"
              ],
              "code": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_literal_len(256);",
                "    extractor.limit_literal_len(256);",
                "    assert_eq!(extractor.limit_literal_len, 256);",
                "    extractor.limit_literal_len(0);",
                "    assert_eq!(extractor.limit_literal_len, 0);",
                "    extractor.limit_literal_len(1);",
                "    assert_eq!(extractor.limit_literal_len, 1);",
                "    extractor.limit_literal_len(100);",
                "    assert_eq!(extractor.limit_literal_len, 100);",
                "    extractor.limit_literal_len(512);",
                "    assert_eq!(extractor.limit_literal_len, 512);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_literal_len(512);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(extractor.limit_literal_len(512).limit_literal_len, 512);",
                "    assert_eq!(extractor.limit_literal_len(14).limit_literal_len, 14);",
                "    assert_eq!(extractor.limit_literal_len(0).limit_literal_len, 0);",
                "    assert_eq!(extractor.limit_literal_len(255).limit_literal_len, 255);",
                "    assert_eq!(extractor.limit_literal_len(1000).limit_literal_len, 1000);"
              ],
              "code": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_literal_len(512);",
                "    assert_eq!(extractor.limit_literal_len(512).limit_literal_len, 512);",
                "    assert_eq!(extractor.limit_literal_len(14).limit_literal_len, 14);",
                "    assert_eq!(extractor.limit_literal_len(0).limit_literal_len, 0);",
                "    assert_eq!(extractor.limit_literal_len(255).limit_literal_len, 255);",
                "    assert_eq!(extractor.limit_literal_len(1000).limit_literal_len, 1000);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_literal_len(1024);",
                "}"
              ],
              "oracle": [
                "    let extractor = Extractor::new();",
                "    let extractor_with_limit = extractor.limit_literal_len(1024);",
                "    assert_eq!(extractor_with_limit.limit_literal_len, 1024);",
                "    let extractor_with_default_limit = extractor.limit_literal_len(0);",
                "    assert_eq!(extractor_with_default_limit.limit_literal_len, 0);"
              ],
              "code": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_literal_len(1024);",
                "    let extractor = Extractor::new();",
                "    let extractor_with_limit = extractor.limit_literal_len(1024);",
                "    assert_eq!(extractor_with_limit.limit_literal_len, 1024);",
                "    let extractor_with_default_limit = extractor.limit_literal_len(0);",
                "    assert_eq!(extractor_with_default_limit.limit_literal_len, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_literal_len(usize::MAX);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(extractor.limit_literal_len(usize::MAX), &mut extractor);",
                "    assert_eq!(extractor.limit_literal_len(0), &mut extractor);",
                "    assert_eq!(extractor.limit_literal_len(10), &mut extractor);",
                "    assert_eq!(extractor.limit_literal_len(100), &mut extractor);",
                "    assert_eq!(extractor.limit_literal_len(1), &mut extractor);",
                "    assert_eq!(extractor.limit_literal_len(999), &mut extractor);"
              ],
              "code": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_literal_len(usize::MAX);",
                "    assert_eq!(extractor.limit_literal_len(usize::MAX), &mut extractor);",
                "    assert_eq!(extractor.limit_literal_len(0), &mut extractor);",
                "    assert_eq!(extractor.limit_literal_len(10), &mut extractor);",
                "    assert_eq!(extractor.limit_literal_len(100), &mut extractor);",
                "    assert_eq!(extractor.limit_literal_len(1), &mut extractor);",
                "    assert_eq!(extractor.limit_literal_len(999), &mut extractor);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}