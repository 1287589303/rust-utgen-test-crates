{
  "name": "regex_syntax::utf8::{impl#9}::split",
  "mod_info": {
    "name": "utf8",
    "loc": "regex-syntax/src/lib.rs:195:1:195:14"
  },
  "visible": false,
  "loc": "regex-syntax/src/utf8.rs:396:5:405:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.start < 0xE000 at line 397 is true\n",
        "precondition: self.end > 0xD7FF at line 397 is true\n",
        "expected return value/type: Some((\n                ScalarRange { start: self.start, end: 0xD7FF },\n                ScalarRange { start: 0xE000, end: self.end },\n            ))\n"
      ],
      "input_infer": "self.start in the range [0, 0xD7FF] and self.end in the range (0xD7FF, 0x10FFFF]\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scalar_range = ScalarRange { start: 0x0000, end: 0xFFFF };",
                "    let result = scalar_range.split();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    let (range1, range2) = result.unwrap();",
                "    assert_eq!(range1.start, 0x0000);",
                "    assert_eq!(range1.end, 0xD7FF);",
                "    assert_eq!(range2.start, 0xE000);",
                "    assert_eq!(range2.end, 0xFFFF);"
              ],
              "code": [
                "{",
                "    let scalar_range = ScalarRange { start: 0x0000, end: 0xFFFF };",
                "    let result = scalar_range.split();",
                "    assert!(result.is_some());",
                "    let (range1, range2) = result.unwrap();",
                "    assert_eq!(range1.start, 0x0000);",
                "    assert_eq!(range1.end, 0xD7FF);",
                "    assert_eq!(range2.start, 0xE000);",
                "    assert_eq!(range2.end, 0xFFFF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scalar_range = ScalarRange { start: 0xD7FE, end: 0x10FFFF };",
                "    let result = scalar_range.split();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap().0.start, 0xD7FE);",
                "    assert_eq!(result.unwrap().0.end, 0xD7FF);",
                "    assert_eq!(result.unwrap().1.start, 0xE000);",
                "    assert_eq!(result.unwrap().1.end, 0x10FFFF);"
              ],
              "code": [
                "{",
                "    let scalar_range = ScalarRange { start: 0xD7FE, end: 0x10FFFF };",
                "    let result = scalar_range.split();",
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap().0.start, 0xD7FE);",
                "    assert_eq!(result.unwrap().0.end, 0xD7FF);",
                "    assert_eq!(result.unwrap().1.start, 0xE000);",
                "    assert_eq!(result.unwrap().1.end, 0x10FFFF);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scalar_range = ScalarRange { start: 0xD700, end: 0xE000 };",
                "    let result = scalar_range.split();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    let (first_range, second_range) = result.unwrap();",
                "    assert_eq!(first_range.start, 0xD700);",
                "    assert_eq!(first_range.end, 0xD7FF);",
                "    assert_eq!(second_range.start, 0xE000);",
                "    assert_eq!(second_range.end, 0xE000);"
              ],
              "code": [
                "{",
                "    let scalar_range = ScalarRange { start: 0xD700, end: 0xE000 };",
                "    let result = scalar_range.split();",
                "    assert!(result.is_some());",
                "    let (first_range, second_range) = result.unwrap();",
                "    assert_eq!(first_range.start, 0xD700);",
                "    assert_eq!(first_range.end, 0xD7FF);",
                "    assert_eq!(second_range.start, 0xE000);",
                "    assert_eq!(second_range.end, 0xE000);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scalar_range = ScalarRange { start: 0xA000, end: 0x10FFFE };",
                "    let result = scalar_range.split();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    let (first_range, second_range) = result.unwrap();",
                "    assert_eq!(first_range.start, 0xA000);",
                "    assert_eq!(first_range.end, 0xD7FF);",
                "    assert_eq!(second_range.start, 0xE000);",
                "    assert_eq!(second_range.end, 0x10FFFE);"
              ],
              "code": [
                "{",
                "    let scalar_range = ScalarRange { start: 0xA000, end: 0x10FFFE };",
                "    let result = scalar_range.split();",
                "    assert!(result.is_some());",
                "    let (first_range, second_range) = result.unwrap();",
                "    assert_eq!(first_range.start, 0xA000);",
                "    assert_eq!(first_range.end, 0xD7FF);",
                "    assert_eq!(second_range.start, 0xE000);",
                "    assert_eq!(second_range.end, 0x10FFFE);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.start < 0xE000 at line 397 is true\n",
        "precondition: self.end > 0xD7FF at line 397 is false, with bound self.end == 0xD7FF\n",
        "expected return value/type: None\n"
      ],
      "input_infer": "self.start in [0x0000, 0xD7FF], self.end == 0xD7FF\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ScalarRange { start: 0x0000, end: 0xD7FF };",
                "    let result = range.split();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let range = ScalarRange { start: 0x0000, end: 0xD7FF };",
                "    let result = range.split();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ScalarRange { start: 0x7FFF, end: 0xD7FF };",
                "    let result = range.split();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let range = ScalarRange { start: 0x7FFF, end: 0xD7FF };",
                "    let result = range.split();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ScalarRange { start: 0xD7FE, end: 0xD7FF };",
                "    let result = range.split();",
                "}"
              ],
              "oracle": [
                "    let range = ScalarRange { start: 0xD7FE, end: 0xD7FF };",
                "    let result = range.split();",
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let range = ScalarRange { start: 0xD7FE, end: 0xD7FF };",
                "    let result = range.split();",
                "    let range = ScalarRange { start: 0xD7FE, end: 0xD7FF };",
                "    let result = range.split();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ScalarRange { start: 0x0000, end: 0xD7FF };",
                "    let result = range.split();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let range = ScalarRange { start: 0x0000, end: 0xD7FF };",
                "    let result = range.split();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ScalarRange { start: 0xD000, end: 0xD7FF };",
                "    let result = range.split();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let range = ScalarRange { start: 0xD000, end: 0xD7FF };",
                "    let result = range.split();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: self.start < 0xE000 at line 397 is false, with bound self.start == 0xE000\n",
        "expected return value/type: None\n"
      ],
      "input_infer": "self.start == 0xE000 and self.end <= 0x10FFFF\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scalar_range = ScalarRange { start: 0xE000, end: 0xD7FF };",
                "    let _result = scalar_range.split();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(scalar_range.split(), None);"
              ],
              "code": [
                "{",
                "    let scalar_range = ScalarRange { start: 0xE000, end: 0xD7FF };",
                "    let _result = scalar_range.split();",
                "    assert_eq!(scalar_range.split(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scalar_range = ScalarRange { start: 0xE000, end: 0x10FFFF };",
                "    let _result = scalar_range.split();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, None);"
              ],
              "code": [
                "{",
                "    let scalar_range = ScalarRange { start: 0xE000, end: 0x10FFFF };",
                "    let _result = scalar_range.split();",
                "    assert_eq!(_result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scalar_range = ScalarRange { start: 0xE000, end: 0xD7FF };",
                "    let _result = scalar_range.split();",
                "}"
              ],
              "oracle": [
                "    let scalar_range = ScalarRange { start: 0xE000, end: 0xD7FF };",
                "    let result = scalar_range.split();",
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let scalar_range = ScalarRange { start: 0xE000, end: 0xD7FF };",
                "    let _result = scalar_range.split();",
                "    let scalar_range = ScalarRange { start: 0xE000, end: 0xD7FF };",
                "    let result = scalar_range.split();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}