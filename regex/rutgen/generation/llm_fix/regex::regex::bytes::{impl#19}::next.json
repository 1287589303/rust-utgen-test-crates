{
  "name": "regex::regex::bytes::{impl#19}::next",
  "mod_info": {
    "name": "regex::bytes",
    "loc": "src/regex/mod.rs:1:1:1:22"
  },
  "visible": true,
  "loc": "src/regex/bytes.rs:2217:5:2224:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "haystack: non-empty byte slice (e.g., b\"abc123\"), it: valid meta::CapturesMatches iterator (state containing matches), static_captures_len: usize value between 0 and length of input haystack.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let haystack: &[u8] = b\"abc123\";",
                "    let pattern = regex_automata::RegularRegex::new(b\"123\").unwrap();",
                "    let input = Input::new(haystack);",
                "    let it = pattern.find_iter(input).unwrap();",
                "    let mut capture_matches = CaptureMatches { haystack, it };",
                "    let result = capture_matches.next();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap().haystack, b\"abc123\");",
                "    assert_eq!(result.unwrap().static_captures_len, Some(1));",
                "    assert!(result.unwrap().caps.is_some());",
                "    assert_eq!(result.unwrap().caps.get(0), Some(&b\"123\"[..]));"
              ],
              "code": [
                "{",
                "   let haystack: &[u8] = b\"abc123\";",
                "   let pattern = regex_automata::RegularRegex::new(b\"123\").unwrap();",
                "   let input = Input::new(haystack);",
                "   let it = pattern.find_iter(input).unwrap();",
                "   let mut capture_matches = CaptureMatches { haystack, it };",
                "   let result = capture_matches.next();",
                "   assert!(result.is_some());",
                "   let unwrapped_result = result.unwrap();",
                "   assert_eq!(unwrapped_result.haystack, b\"abc123\");",
                "   assert_eq!(unwrapped_result.static_captures_len, Some(1));",
                "   assert!(unwrapped_result.caps.is_some());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let haystack: &[u8] = b\"abc\";",
                "    let pattern = regex_automata::RegularRegex::new(b\"123\").unwrap();",
                "    let input = Input::new(haystack);",
                "    let it = pattern.find_iter(input).unwrap();",
                "    let mut capture_matches = CaptureMatches { haystack, it };",
                "    let result = capture_matches.next();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let haystack: &[u8] = b\"abc\";",
                "    let pattern = regex_automata::RegularRegex::new(b\"123\").unwrap();",
                "    let input = Input::new(haystack);",
                "    let it = pattern.find_iter(input).unwrap();",
                "    let mut capture_matches = CaptureMatches { haystack, it };",
                "    let result = capture_matches.next();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let haystack: &[u8] = b\"abc\";",
                "    let pattern = regex_automata::RegularRegex::new(b\"abc\").unwrap();",
                "    let input = Input::new(haystack);",
                "    let it = pattern.find_iter(input).unwrap();",
                "    let mut capture_matches = CaptureMatches { haystack, it };",
                "    let result = capture_matches.next();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    assert_eq!(result.as_ref().unwrap().haystack, b\"abc\");",
                "    assert_eq!(result.as_ref().unwrap().caps.len(), 1);",
                "    assert_eq!(result.as_ref().unwrap().static_captures_len, Some(1));"
              ],
              "code": [
                "{",
                "    let haystack: &[u8] = b\"abc\";",
                "    let pattern = regex_automata::RegularRegex::new(b\"abc\").unwrap();",
                "    let input = Input::new(haystack);",
                "    let it = pattern.find_iter(input).unwrap();",
                "    let mut capture_matches = CaptureMatches { haystack, it };",
                "    let result = capture_matches.next();",
                "    assert!(result.is_some());",
                "    assert_eq!(result.as_ref().unwrap().haystack, b\"abc\");",
                "    assert_eq!(result.as_ref().unwrap().caps.len(), 1);",
                "    assert_eq!(result.as_ref().unwrap().static_captures_len, Some(1));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let haystack: &[u8] = b\"abcabcabc\";",
                "    let pattern = regex_automata::RegularRegex::new(b\"abc\").unwrap();",
                "    let input = Input::new(haystack);",
                "    let it = pattern.find_iter(input).unwrap();",
                "    let mut capture_matches = CaptureMatches { haystack, it };",
                "    let result = capture_matches.next();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    let captures = result.unwrap();",
                "    assert_eq!(captures.haystack, b\"abcabcabc\");",
                "    assert_eq!(captures.static_captures_len, Some(1));",
                "    assert!(captures.caps.len() > 0);",
                "    assert_eq!(captures.caps.get(0), Some(&[0, 3]));",
                "    assert_eq!(captures.caps.get(1), Some(&[3, 6]));",
                "    assert_eq!(captures.caps.get(2), Some(&[6, 9]));",
                "    assert_eq!(captures.caps.len(), 3);",
                "    assert_eq!(capture_matches.count(), 3);"
              ],
              "code": [
                "{",
                "    let haystack: &[u8] = b\"abcabcabc\";",
                "    let pattern = regex_automata::RegularRegex::new(b\"abc\").unwrap();",
                "    let input = Input::new(haystack);",
                "    let it = pattern.find_iter(input).unwrap();",
                "    let mut capture_matches = CaptureMatches { haystack, it };",
                "    let result = capture_matches.next();",
                "    assert!(result.is_some());",
                "    let captures = result.unwrap();",
                "    assert_eq!(captures.haystack, b\"abcabcabc\");",
                "    assert_eq!(captures.static_captures_len, Some(1));",
                "    assert!(captures.caps.len() > 0);",
                "    assert_eq!(captures.caps.get(0), Some(&[0, 3]));",
                "    assert_eq!(captures.caps.get(1), Some(&[3, 6]));",
                "    assert_eq!(captures.caps.get(2), Some(&[6, 9]));",
                "    assert_eq!(captures.caps.len(), 3);",
                "    assert_eq!(capture_matches.count(), 3);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}