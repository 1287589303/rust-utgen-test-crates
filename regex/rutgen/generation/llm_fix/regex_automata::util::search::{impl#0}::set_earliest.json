{
  "name": "regex_automata::util::search::{impl#0}::set_earliest",
  "mod_info": {
    "name": "util::search",
    "loc": "regex-automata/src/util/mod.rs:53:1:53:23"
  },
  "visible": true,
  "loc": "regex-automata/src/util/search.rs:578:5:580:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "haystack as a non-empty byte array of size 1 to 1024; span.start and span.end as valid usize with 0 ≤ start < end ≤ haystack.len(); anchored as any of the Anchored enum variants; earliest as boolean true or false\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut input = Input::new(&b\"foobar\"[..]);",
                "    input.set_earliest(true);",
                "}"
              ],
              "oracle": [
                "    assert!(input.get_earliest());",
                "    input.set_earliest(false);",
                "    assert!(!input.get_earliest());",
                "    input.set_earliest(true);",
                "    assert_eq!(input.earliest, true);",
                "    input.set_earliest(false);",
                "    assert_eq!(input.earliest, false);",
                "    input.set_earliest(true);",
                "    assert!(input.get_earliest());",
                "    input.set_earliest(false);",
                "    assert!(!input.get_earliest());"
              ],
              "code": [
                "{",
                "    let mut input = Input::new(&b\"foobar\"[..]);",
                "    input.set_earliest(true);",
                "    assert!(input.get_earliest());",
                "    input.set_earliest(false);",
                "    assert!(!input.get_earliest());",
                "    input.set_earliest(true);",
                "    assert_eq!(input.earliest, true);",
                "    input.set_earliest(false);",
                "    assert_eq!(input.earliest, false);",
                "    input.set_earliest(true);",
                "    assert!(input.get_earliest());",
                "    input.set_earliest(false);",
                "    assert!(!input.get_earliest());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut input = Input::new(&b\"test\"[..]);",
                "    input.set_earliest(false);",
                "}"
              ],
              "oracle": [
                "    assert!(!input.get_earliest());",
                "    input.set_earliest(true);",
                "    assert!(input.get_earliest());"
              ],
              "code": [
                "{",
                "    let mut input = Input::new(&b\"test\"[..]);",
                "    input.set_earliest(false);",
                "    assert!(!input.get_earliest());",
                "    input.set_earliest(true);",
                "    assert!(input.get_earliest());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut input = Input::new(&b\"a\"[..]);",
                "    input.set_earliest(true);",
                "    input.set_earliest(false);",
                "}"
              ],
              "oracle": [
                "    assert!(input.get_earliest());",
                "    assert!(!input.get_earliest());"
              ],
              "code": [
                "{",
                "    let mut input = Input::new(&b\"a\"[..]);",
                "    input.set_earliest(true);",
                "    input.set_earliest(false);",
                "    assert!(input.get_earliest());",
                "    assert!(!input.get_earliest());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut input = Input::new(&b\"example\"[..]);",
                "    input.set_earliest(true);",
                "    input.set_earliest(true);",
                "    input.set_earliest(false);",
                "}"
              ],
              "oracle": [
                "    assert!(input.get_earliest());",
                "    input.set_earliest(true);",
                "    assert!(input.get_earliest());",
                "    input.set_earliest(false);",
                "    assert!(!input.get_earliest());"
              ],
              "code": [
                "{",
                "    let mut input = Input::new(&b\"example\"[..]);",
                "    input.set_earliest(true);",
                "    input.set_earliest(true);",
                "    input.set_earliest(false);",
                "    assert!(input.get_earliest());",
                "    input.set_earliest(true);",
                "    assert!(input.get_earliest());",
                "    input.set_earliest(false);",
                "    assert!(!input.get_earliest());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut input = Input::new(&b\"longer example\"[..]).span(Span { start: 0, end: 14 });",
                "    input.set_earliest(true);",
                "}"
              ],
              "oracle": [
                "    assert!(input.get_earliest());"
              ],
              "code": [
                "{",
                "    let mut input = Input::new(&b\"longer example\"[..]).span(Span { start: 0, end: 14 });",
                "    input.set_earliest(true);",
                "    assert!(input.get_earliest());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut input = Input::new(&b\"byte array\"[..]).anchored(Anchored::No);",
                "    input.set_earliest(false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(input.get_earliest(), false);",
                "    input.set_earliest(true);",
                "    assert_eq!(input.get_earliest(), true);",
                "    input.set_earliest(false);",
                "    assert_eq!(input.get_earliest(), false);",
                "    input.set_earliest(true);",
                "    input.set_earliest(false);",
                "    assert_eq!(input.get_earliest(), false);",
                "    input.set_earliest(true);",
                "    input.set_earliest(true);",
                "    assert_eq!(input.get_earliest(), true);",
                "    input.set_earliest(false);",
                "    assert_eq!(input.get_earliest(), false);"
              ],
              "code": [
                "{",
                "    let mut input = Input::new(&b\"byte array\"[..]).anchored(Anchored::No);",
                "    input.set_earliest(false);",
                "    assert_eq!(input.get_earliest(), false);",
                "    input.set_earliest(true);",
                "    assert_eq!(input.get_earliest(), true);",
                "    input.set_earliest(false);",
                "    assert_eq!(input.get_earliest(), false);",
                "    input.set_earliest(true);",
                "    input.set_earliest(false);",
                "    assert_eq!(input.get_earliest(), false);",
                "    input.set_earliest(true);",
                "    input.set_earliest(true);",
                "    assert_eq!(input.get_earliest(), true);",
                "    input.set_earliest(false);",
                "    assert_eq!(input.get_earliest(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut input = Input::new(&b\"more tests\"[..]).anchored(Anchored::Yes);",
                "    input.set_earliest(true);",
                "}"
              ],
              "oracle": [
                "    assert!(input.get_earliest());",
                "    input.set_earliest(false);",
                "    assert!(!input.get_earliest());",
                "    input.set_earliest(true);",
                "    assert!(input.get_earliest());"
              ],
              "code": [
                "{",
                "    let mut input = Input::new(&b\"more tests\"[..]).anchored(Anchored::Yes);",
                "    input.set_earliest(true);",
                "    assert!(input.get_earliest());",
                "    input.set_earliest(false);",
                "    assert!(!input.get_earliest());",
                "    input.set_earliest(true);",
                "    assert!(input.get_earliest());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut input = Input::new(&b\"pattern test\"[..]).anchored(Anchored::Pattern(1));",
                "    input.set_earliest(true);",
                "}"
              ],
              "oracle": [
                "    assert!(input.get_earliest());",
                "    input.set_earliest(false);",
                "    assert!(!input.get_earliest());",
                "    input.set_earliest(true);",
                "    assert!(input.get_earliest());",
                "    input.set_earliest(false);",
                "    assert!(!input.get_earliest());",
                "    input.set_earliest(true);",
                "    assert!(input.get_earliest());",
                "    input.anchored(Anchored::No);",
                "    input.set_earliest(false);",
                "    assert!(!input.get_earliest());"
              ],
              "code": [
                "{",
                "    let mut input = Input::new(&b\"pattern test\"[..]).anchored(Anchored::Pattern(1));",
                "    input.set_earliest(true);",
                "    assert!(input.get_earliest());",
                "    input.set_earliest(false);",
                "    assert!(!input.get_earliest());",
                "    input.set_earliest(true);",
                "    assert!(input.get_earliest());",
                "    input.set_earliest(false);",
                "    assert!(!input.get_earliest());",
                "    input.set_earliest(true);",
                "    assert!(input.get_earliest());",
                "    input.anchored(Anchored::No);",
                "    input.set_earliest(false);",
                "    assert!(!input.get_earliest());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}