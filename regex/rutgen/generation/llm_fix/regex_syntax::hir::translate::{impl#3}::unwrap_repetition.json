{
  "name": "regex_syntax::hir::translate::{impl#3}::unwrap_repetition",
  "mod_info": {
    "name": "hir::translate",
    "loc": "regex-syntax/src/hir/mod.rs:44:1:44:19"
  },
  "visible": false,
  "loc": "regex-syntax/src/hir/translate.rs:289:5:299:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches HirFrame::Repetition at line 291 is false\n",
        "precondition: self matches _ at line 292 is true\n"
      ],
      "input_infer": "self must be an instance of HirFrame that is not HirFrame::Repetition, such as HirFrame::Expr, HirFrame::Literal, HirFrame::ClassUnicode, HirFrame::ClassBytes, HirFrame::Group, HirFrame::Concat, HirFrame::Alternation, or HirFrame::AlternationBranch.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let frame = HirFrame::Expr(Hir { kind: HirKind::from(0), props: Properties::default() });",
                "    frame.unwrap_repetition();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(std::panic::catch_unwind(|| { HirFrame::Expr(Hir { kind: HirKind::from(0), props: Properties::default() }).unwrap_repetition(); }).is_err(), true);"
              ],
              "code": [
                "{",
                "    let frame = HirFrame::Expr(Hir { kind: HirKind::from(0), props: Properties::default() });",
                "    frame.unwrap_repetition();",
                "    assert_eq!(std::panic::catch_unwind(|| { HirFrame::Expr(Hir { kind: HirKind::from(0), props: Properties::default() }).unwrap_repetition(); }).is_err(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let frame = HirFrame::Literal(vec![b'a', b'b', b'c']);",
                "    frame.unwrap_repetition();",
                "}"
              ],
              "oracle": [
                "    panic!(\"tried to unwrap repetition from HirFrame, got: {:?}\", frame);"
              ],
              "code": [
                "{",
                "    let frame = HirFrame::Literal(vec![b'a', b'b', b'c']);",
                "    frame.unwrap_repetition();",
                "    panic!(\"tried to unwrap repetition from HirFrame, got: {:?}\", frame);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let frame = HirFrame::ClassUnicode(ClassUnicode { span: Span::default(), negated: false, kind: ClassUnicodeKind::from(0) });",
                "    frame.unwrap_repetition();",
                "}"
              ],
              "oracle": [
                "    panic!(\"tried to unwrap repetition from HirFrame, got: {:?}\", frame)"
              ],
              "code": [
                "{",
                "    let frame = HirFrame::ClassUnicode(ClassUnicode { span: Span::default(), negated: false, kind: ClassUnicodeKind::from(0) });",
                "    frame.unwrap_repetition();",
                "    panic!(\"tried to unwrap repetition from HirFrame, got: {:?}\", frame)",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let frame = HirFrame::ClassBytes(ClassBytes { set: IntervalSet::default() });",
                "    frame.unwrap_repetition();",
                "}"
              ],
              "oracle": [
                "    panic!(\"tried to unwrap repetition from HirFrame, got: {:?}\", frame)"
              ],
              "code": [
                "{",
                "    let frame = HirFrame::ClassBytes(ClassBytes { set: IntervalSet::default() });",
                "    frame.unwrap_repetition();",
                "    panic!(\"tried to unwrap repetition from HirFrame, got: {:?}\", frame)",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let frame = HirFrame::Group { old_flags: Flags::default() };",
                "    frame.unwrap_repetition();",
                "}"
              ],
              "oracle": [
                "    panic!(\"tried to unwrap repetition from HirFrame, got: {:?}\", frame);"
              ],
              "code": [
                "{",
                "    let frame = HirFrame::Group { old_flags: Flags::default() };",
                "    frame.unwrap_repetition();",
                "    panic!(\"tried to unwrap repetition from HirFrame, got: {:?}\", frame);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let frame = HirFrame::Concat;",
                "    frame.unwrap_repetition();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(std::panic::catch_unwind(|| { Let frame = HirFrame::Concat; frame.unwrap_repetition(); }).is_err(), true);"
              ],
              "code": [
                "{",
                "    let frame = HirFrame::Concat;",
                "    frame.unwrap_repetition();",
                "    assert_eq!(std::panic::catch_unwind(|| { Let frame = HirFrame::Concat; frame.unwrap_repetition(); }).is_err(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let frame = HirFrame::Alternation;",
                "    frame.unwrap_repetition();",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| {",
                "    let frame = HirFrame::Alternation;",
                "    frame.unwrap_repetition();",
                "    }).is_err());"
              ],
              "code": [
                "{",
                "    let frame = HirFrame::Alternation;",
                "    frame.unwrap_repetition();",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let frame = HirFrame::Alternation;",
                "    frame.unwrap_repetition();",
                "    }).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let frame = HirFrame::AlternationBranch;",
                "    frame.unwrap_repetition();",
                "}"
              ],
              "oracle": [
                "    panic!(\"tried to unwrap repetition from HirFrame, got: {:?}\", HirFrame::AlternationBranch)"
              ],
              "code": [
                "{",
                "    let frame = HirFrame::AlternationBranch;",
                "    frame.unwrap_repetition();",
                "    panic!(\"tried to unwrap repetition from HirFrame, got: {:?}\", HirFrame::AlternationBranch)",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches HirFrame::Repetition at line 290 is true\n",
        "precondition: self matches HirFrame::Repetition at line 290 is true\n"
      ],
      "input_infer": "self must be an instance of HirFrame::Repetition\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let frame = HirFrame::Repetition;",
                "    frame.unwrap_repetition();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(frame.unwrap_repetition(), ());",
                "    assert!(matches!(frame, HirFrame::Repetition));"
              ],
              "code": [
                "{",
                "    let frame = HirFrame::Repetition;",
                "    frame.unwrap_repetition();",
                "    assert_eq!(frame.unwrap_repetition(), ());",
                "    assert!(matches!(frame, HirFrame::Repetition));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let frame = HirFrame::Expr(Hir { kind: HirKind::Literal, props: Default::default() });",
                "    frame.unwrap_repetition();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(std::panic::catch_unwind(|| { let frame = HirFrame::Repetition; frame.unwrap_repetition(); }).is_err(), true)",
                "    assert_eq!(std::panic::catch_unwind(|| { let frame = HirFrame::Expr(Hir { kind: HirKind::Literal, props: Default::default() }); frame.unwrap_repetition(); }).is_err(), true)",
                "    assert_eq!(std::panic::catch_unwind(|| { let frame = HirFrame::Repetition; frame.unwrap_repetition(); }).is_err(), false)",
                "    assert_eq!(std::panic::catch_unwind(|| { let frame = HirFrame::Repetition; frame.unwrap_repetition(); }).is_err(), false)",
                "    assert_eq!(std::panic::catch_unwind(|| { let frame = HirFrame::Repetition; frame.unwrap_repetition(); }).is_err(), false)"
              ],
              "code": [
                "{",
                "    let frame = HirFrame::Expr(Hir { kind: HirKind::Literal, props: Default::default() });",
                "    frame.unwrap_repetition();",
                "    assert_eq!(std::panic::catch_unwind(|| { let frame = HirFrame::Repetition; frame.unwrap_repetition(); }).is_err(), true)",
                "    assert_eq!(std::panic::catch_unwind(|| { let frame = HirFrame::Expr(Hir { kind: HirKind::Literal, props: Default::default() }); frame.unwrap_repetition(); }).is_err(), true)",
                "    assert_eq!(std::panic::catch_unwind(|| { let frame = HirFrame::Repetition; frame.unwrap_repetition(); }).is_err(), false)",
                "    assert_eq!(std::panic::catch_unwind(|| { let frame = HirFrame::Repetition; frame.unwrap_repetition(); }).is_err(), false)",
                "    assert_eq!(std::panic::catch_unwind(|| { let frame = HirFrame::Repetition; frame.unwrap_repetition(); }).is_err(), false)",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}