{
  "name": "regex_automata::util::look::{impl#4}::new",
  "mod_info": {
    "name": "util::look",
    "loc": "regex-automata/src/util/mod.rs:38:1:38:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/look.rs:583:5:585:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: LookMatcher { lineterm: DebugByte(b'\\n') }\n"
      ],
      "input_infer": "Test input conditions or ranges: Not applicable as the function new() does not require any input parameters and always returns a LookMatcher with the default line terminator set as DebugByte(b'\\n').\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let matcher = LookMatcher::new();",
                "}"
              ],
              "oracle": [
                "    let matcher = LookMatcher::new();",
                "    assert_eq!(matcher.lineterm, DebugByte(b'\\n'));"
              ],
              "code": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let matcher = LookMatcher::new();",
                "    assert_eq!(matcher.lineterm, DebugByte(b'\\n'));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let line_terminator = matcher.lineterm.0;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.lineterm.0, b'\\n');",
                "    assert!(std::mem::size_of_val(&matcher) > 0);",
                "    assert!(matcher.lineterm.0.is_ascii());",
                "    assert!(matcher.lineterm.0 != b'\\r');"
              ],
              "code": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let line_terminator = matcher.lineterm.0;",
                "    assert_eq!(matcher.lineterm.0, b'\\n');",
                "    assert!(std::mem::size_of_val(&matcher) > 0);",
                "    assert!(matcher.lineterm.0.is_ascii());",
                "    assert!(matcher.lineterm.0 != b'\\r');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}