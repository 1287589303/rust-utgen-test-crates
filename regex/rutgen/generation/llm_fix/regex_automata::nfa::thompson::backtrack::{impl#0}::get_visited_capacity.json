{
  "name": "regex_automata::nfa::thompson::backtrack::{impl#0}::get_visited_capacity",
  "mod_info": {
    "name": "nfa::thompson::backtrack",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:57:1:57:19"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/backtrack.rs:185:5:188:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "visited_capacity: None, visited_capacity: Some(0), visited_capacity: Some(1), visited_capacity: Some(256), visited_capacity: Some(256 * (1 << 10)), visited_capacity: Some(500 * (1 << 10))\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new();",
                "    let capacity = config.get_visited_capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_visited_capacity(), 262144);"
              ],
              "code": [
                "{",
                "    let config = Config::new();",
                "    let capacity = config.get_visited_capacity();",
                "    assert_eq!(config.get_visited_capacity(), 262144);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().visited_capacity(0);",
                "    let capacity = config.get_visited_capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(capacity, 262144);",
                "    assert!(capacity >= 0);",
                "    assert!(capacity <= 262144);",
                "    assert_eq!(Config::new().get_visited_capacity(), 262144);",
                "    assert_eq!(Config::new().visited_capacity(Some(512)).get_visited_capacity(), 512);",
                "    assert_eq!(Config::new().visited_capacity(None).get_visited_capacity(), 262144);"
              ],
              "code": [
                "{",
                "    let config = Config::new().visited_capacity(0);",
                "    let capacity = config.get_visited_capacity();",
                "    assert_eq!(capacity, 262144);",
                "    assert!(capacity >= 0);",
                "    assert!(capacity <= 262144);",
                "    assert_eq!(Config::new().get_visited_capacity(), 262144);",
                "    assert_eq!(Config::new().visited_capacity(Some(512)).get_visited_capacity(), 512);",
                "    assert_eq!(Config::new().visited_capacity(None).get_visited_capacity(), 262144);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().visited_capacity(1);",
                "    let capacity = config.get_visited_capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(capacity, 1);",
                "    let config = Config::new().visited_capacity(256 * (1 << 10));",
                "    let capacity = config.get_visited_capacity();",
                "    assert_eq!(capacity, 256 * (1 << 10));",
                "    let config = Config::new().visited_capacity(None);",
                "    let capacity = config.get_visited_capacity();",
                "    assert_eq!(capacity, 256 * (1 << 10));"
              ],
              "code": [
                "{",
                "    let config = Config::new().visited_capacity(1);",
                "    let capacity = config.get_visited_capacity();",
                "    assert_eq!(capacity, 1);",
                "    let config = Config::new().visited_capacity(256 * (1 << 10));",
                "    let capacity = config.get_visited_capacity();",
                "    assert_eq!(capacity, 256 * (1 << 10));",
                "    let config = Config::new().visited_capacity(None);",
                "    let capacity = config.get_visited_capacity();",
                "    assert_eq!(capacity, 256 * (1 << 10));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().visited_capacity(256);",
                "    let capacity = config.get_visited_capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(capacity, 256);",
                "    let config = Config::new().visited_capacity(None);",
                "    let capacity = config.get_visited_capacity();",
                "    assert_eq!(capacity, 262144);",
                "    let config = Config::new().visited_capacity(Some(512));",
                "    let capacity = config.get_visited_capacity();",
                "    assert_eq!(capacity, 512);",
                "    let config = Config::new().visited_capacity(Some(0));",
                "    let capacity = config.get_visited_capacity();",
                "    assert_eq!(capacity, 0);"
              ],
              "code": [
                "{",
                "    let config = Config::new().visited_capacity(256);",
                "    let capacity = config.get_visited_capacity();",
                "    assert_eq!(capacity, 256);",
                "    let config = Config::new().visited_capacity(None);",
                "    let capacity = config.get_visited_capacity();",
                "    assert_eq!(capacity, 262144);",
                "    let config = Config::new().visited_capacity(Some(512));",
                "    let capacity = config.get_visited_capacity();",
                "    assert_eq!(capacity, 512);",
                "    let config = Config::new().visited_capacity(Some(0));",
                "    let capacity = config.get_visited_capacity();",
                "    assert_eq!(capacity, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().visited_capacity(256 * (1 << 10));",
                "    let capacity = config.get_visited_capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(capacity, 256 * (1 << 10));",
                "    assert!(capacity > 0);",
                "    assert!(capacity <= usize::MAX);",
                "    assert_eq!(capacity, config.visited_capacity.unwrap());",
                "    assert_eq!(config.get_visited_capacity(), 256 * (1 << 10));"
              ],
              "code": [
                "{",
                "    let config = Config::new().visited_capacity(256 * (1 << 10));",
                "    let capacity = config.get_visited_capacity();",
                "    assert_eq!(capacity, 256 * (1 << 10));",
                "    assert!(capacity > 0);",
                "    assert!(capacity <= usize::MAX);",
                "    assert_eq!(capacity, config.visited_capacity.unwrap());",
                "    assert_eq!(config.get_visited_capacity(), 256 * (1 << 10));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().visited_capacity(500 * (1 << 10));",
                "    let capacity = config.get_visited_capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(capacity, 500 * (1 << 10));",
                "    assert!(capacity > 0);",
                "    assert!(capacity >= 256 * (1 << 10));",
                "    assert!(capacity < usize::MAX);"
              ],
              "code": [
                "{",
                "    let config = Config::new().visited_capacity(500 * (1 << 10));",
                "    let capacity = config.get_visited_capacity();",
                "    assert_eq!(capacity, 500 * (1 << 10));",
                "    assert!(capacity > 0);",
                "    assert!(capacity >= 256 * (1 << 10));",
                "    assert!(capacity < usize::MAX);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}