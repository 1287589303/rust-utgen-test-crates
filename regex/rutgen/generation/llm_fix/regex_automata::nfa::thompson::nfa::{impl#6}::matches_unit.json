{
  "name": "regex_automata::nfa::thompson::nfa::{impl#6}::matches_unit",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:1818:5:1823:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "The `unit` input should be a non-EOI `alphabet::Unit` with valid u8 values (0-255) and the `haystack` length should be within a range of 0-1024 bytes to check boundary cases, while `at` should be within 0 and length of `haystack`.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transitions = SparseTransitions {",
                "        transitions: Box::new([",
                "            Transition { start: 0, end: 50, next: StateID(SmallIndex(1)) },",
                "            Transition { start: 51, end: 100, next: StateID(SmallIndex(2)) },",
                "        ]),",
                "    };",
                "    ",
                "    let unit = Unit::u8(25);",
                "    let result = transitions.matches_unit(unit);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(StateID(SmallIndex(1))));",
                "    let unit = Unit::u8(75);",
                "    let result = transitions.matches_unit(unit);",
                "    assert_eq!(result, Some(StateID(SmallIndex(2))));",
                "    let unit = Unit::u8(150);",
                "    let result = transitions.matches_unit(unit);",
                "    assert_eq!(result, None);",
                "    let unit = Unit::eoi(0);",
                "    let result = transitions.matches_unit(unit);",
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let transitions = SparseTransitions {",
                "        transitions: Box::new([",
                "            Transition { start: 0, end: 50, next: StateID(SmallIndex(1)) },",
                "            Transition { start: 51, end: 100, next: StateID(SmallIndex(2)) },",
                "        ]),",
                "    };",
                "    ",
                "    let unit = Unit::u8(25);",
                "    let result = transitions.matches_unit(unit);",
                "    assert_eq!(result, Some(StateID(SmallIndex(1))));",
                "    let unit = Unit::u8(75);",
                "    let result = transitions.matches_unit(unit);",
                "    assert_eq!(result, Some(StateID(SmallIndex(2))));",
                "    let unit = Unit::u8(150);",
                "    let result = transitions.matches_unit(unit);",
                "    assert_eq!(result, None);",
                "    let unit = Unit::eoi(0);",
                "    let result = transitions.matches_unit(unit);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transitions = SparseTransitions {",
                "        transitions: Box::new([",
                "            Transition { start: 0, end: 100, next: StateID(SmallIndex(1)) },",
                "            Transition { start: 101, end: 200, next: StateID(SmallIndex(2)) },",
                "        ]),",
                "    };",
                "    ",
                "    let unit = Unit::u8(150);",
                "    let result = transitions.matches_unit(unit);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(StateID(SmallIndex(2)));",
                "    assert_eq!(transitions.matches_unit(Unit::eoi(0)), None);",
                "    assert_eq!(transitions.matches_unit(Unit::u8(50)), Some(StateID(SmallIndex(1))));",
                "    assert_eq!(transitions.matches_unit(Unit::u8(250)), None);",
                "    assert_eq!(transitions.matches_unit(Unit::u8(100)), Some(StateID(SmallIndex(1))));",
                "    assert_eq!(transitions.matches_unit(Unit::u8(101)), Some(StateID(SmallIndex(2))));"
              ],
              "code": [
                "{",
                "    let transitions = SparseTransitions {",
                "        transitions: Box::new([",
                "            Transition { start: 0, end: 100, next: StateID(SmallIndex(1)) },",
                "            Transition { start: 101, end: 200, next: StateID(SmallIndex(2)) },",
                "        ]),",
                "    };",
                "    ",
                "    let unit = Unit::u8(150);",
                "    let result = transitions.matches_unit(unit);",
                "    assert_eq!(result, Some(StateID(SmallIndex(2)));",
                "    assert_eq!(transitions.matches_unit(Unit::eoi(0)), None);",
                "    assert_eq!(transitions.matches_unit(Unit::u8(50)), Some(StateID(SmallIndex(1))));",
                "    assert_eq!(transitions.matches_unit(Unit::u8(250)), None);",
                "    assert_eq!(transitions.matches_unit(Unit::u8(100)), Some(StateID(SmallIndex(1))));",
                "    assert_eq!(transitions.matches_unit(Unit::u8(101)), Some(StateID(SmallIndex(2))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transitions = SparseTransitions {",
                "        transitions: Box::new([",
                "            Transition { start: 0, end: 10, next: StateID(SmallIndex(1)) },",
                "        ]),",
                "    };",
                "    ",
                "    let unit = Unit::u8(0);",
                "    let result = transitions.matches_unit(unit);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(StateID(SmallIndex(1))));"
              ],
              "code": [
                "{",
                "    let transitions = SparseTransitions {",
                "        transitions: Box::new([",
                "            Transition { start: 0, end: 10, next: StateID(SmallIndex(1)) },",
                "        ]),",
                "    };",
                "    ",
                "    let unit = Unit::u8(0);",
                "    let result = transitions.matches_unit(unit);",
                "    assert_eq!(result, Some(StateID(SmallIndex(1))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transitions = SparseTransitions {",
                "        transitions: Box::new([",
                "            Transition { start: 245, end: 255, next: StateID(SmallIndex(1)) },",
                "        ]),",
                "    };",
                "    ",
                "    let unit = Unit::u8(255);",
                "    let result = transitions.matches_unit(unit);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(StateID(SmallIndex(1))));",
                "    ",
                "    let unit_eoi = Unit::eoi(1);",
                "    let result_eoi = transitions.matches_unit(unit_eoi);",
                "    assert_eq!(result_eoi, None);",
                "    ",
                "    let unit_invalid = Unit::u8(244);",
                "    let result_invalid = transitions.matches_unit(unit_invalid);",
                "    assert_eq!(result_invalid, None);",
                "    ",
                "    let unit_boundary_low = Unit::u8(245);",
                "    let result_boundary_low = transitions.matches_unit(unit_boundary_low);",
                "    assert_eq!(result_boundary_low, Some(StateID(SmallIndex(1))));",
                "    ",
                "    let unit_boundary_high = Unit::u8(256);",
                "    let result_boundary_high = transitions.matches_unit(unit_boundary_high);",
                "    assert_eq!(result_boundary_high, None);"
              ],
              "code": [
                "{",
                "    let transitions = SparseTransitions {",
                "        transitions: Box::new([",
                "            Transition { start: 245, end: 255, next: StateID(SmallIndex(1)) },",
                "        ]),",
                "    };",
                "    ",
                "    let unit = Unit::u8(255);",
                "    let result = transitions.matches_unit(unit);",
                "    assert_eq!(result, Some(StateID(SmallIndex(1))));",
                "    ",
                "    let unit_eoi = Unit::eoi(1);",
                "    let result_eoi = transitions.matches_unit(unit_eoi);",
                "    assert_eq!(result_eoi, None);",
                "    ",
                "    let unit_invalid = Unit::u8(244);",
                "    let result_invalid = transitions.matches_unit(unit_invalid);",
                "    assert_eq!(result_invalid, None);",
                "    ",
                "    let unit_boundary_low = Unit::u8(245);",
                "    let result_boundary_low = transitions.matches_unit(unit_boundary_low);",
                "    assert_eq!(result_boundary_low, Some(StateID(SmallIndex(1))));",
                "    ",
                "    let unit_boundary_high = Unit::u8(256);",
                "    let result_boundary_high = transitions.matches_unit(unit_boundary_high);",
                "    assert_eq!(result_boundary_high, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transitions = SparseTransitions {",
                "        transitions: Box::new([",
                "            Transition { start: 10, end: 20, next: StateID(SmallIndex(1)) },",
                "        ]),",
                "    };",
                "    ",
                "    let unit = Unit::u8(30);",
                "    let result = transitions.matches_unit(unit);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);",
                "    let unit_eoi = Unit::eoi(1);",
                "    let result_eoi = transitions.matches_unit(unit_eoi);",
                "    assert_eq!(result_eoi, None);",
                "    let unit_valid = Unit::u8(15);",
                "    let result_valid = transitions.matches_unit(unit_valid);",
                "    assert_eq!(result_valid, Some(StateID(SmallIndex(1))));"
              ],
              "code": [
                "{",
                "    let transitions = SparseTransitions {",
                "        transitions: Box::new([",
                "            Transition { start: 10, end: 20, next: StateID(SmallIndex(1)) },",
                "        ]),",
                "    };",
                "    ",
                "    let unit = Unit::u8(30);",
                "    let result = transitions.matches_unit(unit);",
                "    assert_eq!(result, None);",
                "    let unit_eoi = Unit::eoi(1);",
                "    let result_eoi = transitions.matches_unit(unit_eoi);",
                "    assert_eq!(result_eoi, None);",
                "    let unit_valid = Unit::u8(15);",
                "    let result_valid = transitions.matches_unit(unit_valid);",
                "    assert_eq!(result_valid, Some(StateID(SmallIndex(1))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}