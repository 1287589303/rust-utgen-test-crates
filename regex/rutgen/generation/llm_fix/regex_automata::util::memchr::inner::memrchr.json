{
  "name": "regex_automata::util::memchr::inner::memrchr",
  "mod_info": {
    "name": "util::memchr::inner",
    "loc": "regex-automata/src/util/memchr.rs:10:1:50:2"
  },
  "visible": true,
  "loc": "regex-automata/src/util/memchr.rs:32:5:34:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "n1: any valid u8 value (0 to 255), haystack: non-empty array of u8 values, haystack containing n1 at least once, haystack of maximum length 1,000,000 bytes\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let n1: u8 = 100;",
                "    let haystack: &[u8] = &[1, 2, 100, 3, 4];",
                "    let _ = regex_automata::memrchr(n1, haystack);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(regex_automata::memrchr(100, &[1, 2, 100, 3, 4]), Some(2));",
                "    assert_eq!(regex_automata::memrchr(99, &[1, 2, 100, 3, 4]), None);",
                "    assert_eq!(regex_automata::memrchr(1, &[1, 2, 100, 3, 4]), Some(0));",
                "    assert_eq!(regex_automata::memrchr(4, &[1, 2, 100, 3, 4]), Some(4));",
                "    assert_eq!(regex_automata::memrchr(100, &[]), None);",
                "    assert_eq!(regex_automata::memrchr(255, &[1, 2, 100, 3, 4]), None);",
                "    assert_eq!(regex_automata::memrchr(100, &[100]), Some(0));",
                "    assert_eq!(regex_automata::memrchr(100, &[0, 0, 0]), None);"
              ],
              "code": [
                "{",
                "    let n1: u8 = 100;",
                "    let haystack: &[u8] = &[1, 2, 100, 3, 4];",
                "    let _ = regex_automata::memrchr(n1, haystack);",
                "    assert_eq!(regex_automata::memrchr(100, &[1, 2, 100, 3, 4]), Some(2));",
                "    assert_eq!(regex_automata::memrchr(99, &[1, 2, 100, 3, 4]), None);",
                "    assert_eq!(regex_automata::memrchr(1, &[1, 2, 100, 3, 4]), Some(0));",
                "    assert_eq!(regex_automata::memrchr(4, &[1, 2, 100, 3, 4]), Some(4));",
                "    assert_eq!(regex_automata::memrchr(100, &[]), None);",
                "    assert_eq!(regex_automata::memrchr(255, &[1, 2, 100, 3, 4]), None);",
                "    assert_eq!(regex_automata::memrchr(100, &[100]), Some(0));",
                "    assert_eq!(regex_automata::memrchr(100, &[0, 0, 0]), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let n1: u8 = 50;",
                "    let haystack: &[u8] = &[10, 20, 30, 40, 50];",
                "    let _ = regex_automata::memrchr(n1, haystack);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(regex_automata::memrchr(50, &[10, 20, 30, 40, 50]), Some(4));",
                "    assert_eq!(regex_automata::memrchr(40, &[10, 20, 30, 40, 50]), Some(3));",
                "    assert_eq!(regex_automata::memrchr(30, &[10, 20, 30, 40, 50]), Some(2));",
                "    assert_eq!(regex_automata::memrchr(20, &[10, 20, 30, 40, 50]), Some(1));",
                "    assert_eq!(regex_automata::memrchr(10, &[10, 20, 30, 40, 50]), Some(0));",
                "    assert_eq!(regex_automata::memrchr(60, &[10, 20, 30, 40, 50]), None);",
                "    assert_eq!(regex_automata::memrchr(50, &[]), None);"
              ],
              "code": [
                "{",
                "    let n1: u8 = 50;",
                "    let haystack: &[u8] = &[10, 20, 30, 40, 50];",
                "    let _ = regex_automata::memrchr(n1, haystack);",
                "    assert_eq!(regex_automata::memrchr(50, &[10, 20, 30, 40, 50]), Some(4));",
                "    assert_eq!(regex_automata::memrchr(40, &[10, 20, 30, 40, 50]), Some(3));",
                "    assert_eq!(regex_automata::memrchr(30, &[10, 20, 30, 40, 50]), Some(2));",
                "    assert_eq!(regex_automata::memrchr(20, &[10, 20, 30, 40, 50]), Some(1));",
                "    assert_eq!(regex_automata::memrchr(10, &[10, 20, 30, 40, 50]), Some(0));",
                "    assert_eq!(regex_automata::memrchr(60, &[10, 20, 30, 40, 50]), None);",
                "    assert_eq!(regex_automata::memrchr(50, &[]), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let n1: u8 = 5;",
                "    let haystack: &[u8] = &[5, 10, 5, 20, 30];",
                "    let _ = regex_automata::memrchr(n1, haystack);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(regex_automata::memrchr(5, &[5, 10, 5, 20, 30]), Some(2));",
                "    assert_eq!(regex_automata::memrchr(10, &[5, 10, 5, 20, 30]), Some(1));",
                "    assert_eq!(regex_automata::memrchr(20, &[5, 10, 5, 20, 30]), Some(3));",
                "    assert_eq!(regex_automata::memrchr(30, &[5, 10, 5, 20, 30]), Some(4));",
                "    assert_eq!(regex_automata::memrchr(15, &[5, 10, 5, 20, 30]), None);",
                "    assert_eq!(regex_automata::memrchr(5, &[]), None);",
                "    assert_eq!(regex_automata::memrchr(0, &[0, 1, 2, 3]), Some(0));"
              ],
              "code": [
                "{",
                "    let n1: u8 = 5;",
                "    let haystack: &[u8] = &[5, 10, 5, 20, 30];",
                "    let _ = regex_automata::memrchr(n1, haystack);",
                "    assert_eq!(regex_automata::memrchr(5, &[5, 10, 5, 20, 30]), Some(2));",
                "    assert_eq!(regex_automata::memrchr(10, &[5, 10, 5, 20, 30]), Some(1));",
                "    assert_eq!(regex_automata::memrchr(20, &[5, 10, 5, 20, 30]), Some(3));",
                "    assert_eq!(regex_automata::memrchr(30, &[5, 10, 5, 20, 30]), Some(4));",
                "    assert_eq!(regex_automata::memrchr(15, &[5, 10, 5, 20, 30]), None);",
                "    assert_eq!(regex_automata::memrchr(5, &[]), None);",
                "    assert_eq!(regex_automata::memrchr(0, &[0, 1, 2, 3]), Some(0));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let n1: u8 = 1;",
                "    let haystack: &[u8] = &[1];",
                "    let _ = regex_automata::memrchr(n1, haystack);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(regex_automata::memrchr(1, &[1]), Some(0));",
                "    assert_eq!(regex_automata::memrchr(1, &[2, 1]), Some(1));",
                "    assert_eq!(regex_automata::memrchr(2, &[2, 1]), Some(0));",
                "    assert_eq!(regex_automata::memrchr(3, &[1, 2]), None);",
                "    assert_eq!(regex_automata::memrchr(0, &[]), None);",
                "    assert_eq!(regex_automata::memrchr(255, &[255]), Some(0));",
                "    assert_eq!(regex_automata::memrchr(127, &[1, 2, 3, 127]), Some(3));",
                "    assert_eq!(regex_automata::memrchr(0, &[0, 0, 0]), Some(2));",
                "    assert_eq!(regex_automata::memrchr(99, &[1, 2, 3, 4]), None);",
                "    assert_eq!(regex_automata::memrchr(5, &[5, 5, 5]), Some(2);"
              ],
              "code": [
                "{",
                "    let n1: u8 = 1;",
                "    let haystack: &[u8] = &[1];",
                "    let _ = regex_automata::memrchr(n1, haystack);",
                "    assert_eq!(regex_automata::memrchr(1, &[1]), Some(0));",
                "    assert_eq!(regex_automata::memrchr(1, &[2, 1]), Some(1));",
                "    assert_eq!(regex_automata::memrchr(2, &[2, 1]), Some(0));",
                "    assert_eq!(regex_automata::memrchr(3, &[1, 2]), None);",
                "    assert_eq!(regex_automata::memrchr(0, &[]), None);",
                "    assert_eq!(regex_automata::memrchr(255, &[255]), Some(0));",
                "    assert_eq!(regex_automata::memrchr(127, &[1, 2, 3, 127]), Some(3));",
                "    assert_eq!(regex_automata::memrchr(0, &[0, 0, 0]), Some(2));",
                "    assert_eq!(regex_automata::memrchr(99, &[1, 2, 3, 4]), None);",
                "    assert_eq!(regex_automata::memrchr(5, &[5, 5, 5]), Some(2);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let n1: u8 = 7;",
                "    let haystack: Vec<u8> = vec![0; 1_000_000];",
                "    haystack[999_999] = n1;",
                "    let _ = regex_automata::memrchr(n1, &haystack);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(regex_automata::memrchr(7, &vec![0; 1_000_000]), Some(999_999));"
              ],
              "code": [
                "{",
                "    let n1: u8 = 7;",
                "    let haystack: Vec<u8> = vec![0; 1_000_000];",
                "    haystack[999_999] = n1;",
                "    let _ = regex_automata::memrchr(n1, &haystack);",
                "    assert_eq!(regex_automata::memrchr(7, &vec![0; 1_000_000]), Some(999_999));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let n1: u8 = 200;",
                "    let haystack: &[u8] = &[10, 20, 30];",
                "    let _ = regex_automata::memrchr(n1, haystack);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(regex_automata::memrchr(200, &[10, 20, 30]), None);",
                "    assert_eq!(regex_automata::memrchr(10, &[10, 20, 30]), Some(0));",
                "    assert_eq!(regex_automata::memrchr(20, &[10, 20, 30]), Some(1));",
                "    assert_eq!(regex_automata::memrchr(30, &[10, 20, 30]), Some(2));",
                "    assert_eq!(regex_automata::memrchr(30, &[]), None);",
                "    assert_eq!(regex_automata::memrchr(255, &[255, 0, 100]), Some(0));",
                "    assert_eq!(regex_automata::memrchr(0, &[1, 2, 0]), Some(2));"
              ],
              "code": [
                "{",
                "    let n1: u8 = 200;",
                "    let haystack: &[u8] = &[10, 20, 30];",
                "    let _ = regex_automata::memrchr(n1, haystack);",
                "    assert_eq!(regex_automata::memrchr(200, &[10, 20, 30]), None);",
                "    assert_eq!(regex_automata::memrchr(10, &[10, 20, 30]), Some(0));",
                "    assert_eq!(regex_automata::memrchr(20, &[10, 20, 30]), Some(1));",
                "    assert_eq!(regex_automata::memrchr(30, &[10, 20, 30]), Some(2));",
                "    assert_eq!(regex_automata::memrchr(30, &[]), None);",
                "    assert_eq!(regex_automata::memrchr(255, &[255, 0, 100]), Some(0));",
                "    assert_eq!(regex_automata::memrchr(0, &[1, 2, 0]), Some(2));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let n1: u8 = 0;",
                "    let haystack: &[u8] = &[255, 254, 0];",
                "    let _ = regex_automata::memrchr(n1, haystack);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(regex_automata::memrchr(0, &[255, 254, 0]), Some(2));",
                "    assert_eq!(regex_automata::memrchr(255, &[255, 254, 0]), Some(0));",
                "    assert_eq!(regex_automata::memrchr(254, &[255, 254, 0]), Some(1));",
                "    assert_eq!(regex_automata::memrchr(1, &[255, 254, 0]), None);",
                "    assert_eq!(regex_automata::memrchr(0, &[]), None);",
                "    assert_eq!(regex_automata::memrchr(255, &[255, 255, 255]), Some(0));",
                "    assert_eq!(regex_automata::memrchr(0, &[1, 2, 3]), None);",
                "    assert_eq!(regex_automata::memrchr(254, &[0, 1, 254]), Some(2));",
                "    assert_eq!(regex_automata::memrchr(1, &[1, 1, 1, 1]), Some(3));"
              ],
              "code": [
                "{",
                "    let n1: u8 = 0;",
                "    let haystack: &[u8] = &[255, 254, 0];",
                "    let _ = regex_automata::memrchr(n1, haystack);",
                "    assert_eq!(regex_automata::memrchr(0, &[255, 254, 0]), Some(2));",
                "    assert_eq!(regex_automata::memrchr(255, &[255, 254, 0]), Some(0));",
                "    assert_eq!(regex_automata::memrchr(254, &[255, 254, 0]), Some(1));",
                "    assert_eq!(regex_automata::memrchr(1, &[255, 254, 0]), None);",
                "    assert_eq!(regex_automata::memrchr(0, &[]), None);",
                "    assert_eq!(regex_automata::memrchr(255, &[255, 255, 255]), Some(0));",
                "    assert_eq!(regex_automata::memrchr(0, &[1, 2, 3]), None);",
                "    assert_eq!(regex_automata::memrchr(254, &[0, 1, 254]), Some(2));",
                "    assert_eq!(regex_automata::memrchr(1, &[1, 1, 1, 1]), Some(3));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let n1: u8 = 255;",
                "    let haystack: &[u8] = &[0, 1, 255];",
                "    let _ = regex_automata::memrchr(n1, haystack);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(regex_automata::memrchr(255, &[0, 1, 255]), Some(2));",
                "    assert_eq!(regex_automata::memrchr(0, &[0, 1, 255]), Some(0));",
                "    assert_eq!(regex_automata::memrchr(1, &[0, 1, 255]), Some(1));",
                "    assert_eq!(regex_automata::memrchr(100, &[0, 1, 255]), None);",
                "    assert_eq!(regex_automata::memrchr(255, &[]), None);",
                "    assert_eq!(regex_automata::memrchr(255, &[255, 255, 255]), Some(2));"
              ],
              "code": [
                "{",
                "    let n1: u8 = 255;",
                "    let haystack: &[u8] = &[0, 1, 255];",
                "    let _ = regex_automata::memrchr(n1, haystack);",
                "    assert_eq!(regex_automata::memrchr(255, &[0, 1, 255]), Some(2));",
                "    assert_eq!(regex_automata::memrchr(0, &[0, 1, 255]), Some(0));",
                "    assert_eq!(regex_automata::memrchr(1, &[0, 1, 255]), Some(1));",
                "    assert_eq!(regex_automata::memrchr(100, &[0, 1, 255]), None);",
                "    assert_eq!(regex_automata::memrchr(255, &[]), None);",
                "    assert_eq!(regex_automata::memrchr(255, &[255, 255, 255]), Some(2));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}