{
  "name": "regex_automata::util::alphabet::{impl#11}::add",
  "mod_info": {
    "name": "util::alphabet",
    "loc": "regex-automata/src/util/mod.rs:30:1:30:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/alphabet.rs:760:5:764:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Valid test input conditions or ranges for the 'add' function: byte values from 0 to 255, including boundary cases 0 and 255, and testing for no-op when byte is already present in the set.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut byte_set = ByteSet::empty();",
                "    byte_set.add(0);",
                "}"
              ],
              "oracle": [
                "    assert!(byte_set.contains(0));",
                "    assert!(byte_set.is_empty() == false);",
                "    assert!(byte_set.contains_range(0, 0) == true);"
              ],
              "code": [
                "{",
                "    let mut byte_set = ByteSet::empty();",
                "    byte_set.add(0);",
                "    assert!(byte_set.contains(0));",
                "    assert!(byte_set.is_empty() == false);",
                "    assert!(byte_set.contains_range(0, 0) == true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut byte_set = ByteSet::empty();",
                "    byte_set.add(127);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(byte_set.contains(127), true);",
                "    assert_eq!(byte_set.is_empty(), false);",
                "    assert_eq!(byte_set.contains(126), false);",
                "    assert_eq!(byte_set.contains(128), false);"
              ],
              "code": [
                "{",
                "    let mut byte_set = ByteSet::empty();",
                "    byte_set.add(127);",
                "    assert_eq!(byte_set.contains(127), true);",
                "    assert_eq!(byte_set.is_empty(), false);",
                "    assert_eq!(byte_set.contains(126), false);",
                "    assert_eq!(byte_set.contains(128), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut byte_set = ByteSet::empty();",
                "    byte_set.add(255);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(byte_set.contains(255), true);",
                "    assert_eq!(byte_set.is_empty(), false);",
                "    assert_eq!(byte_set.contains(128), false);",
                "    assert_eq!(byte_set.contains(0), false);",
                "    assert_eq!(byte_set.contains(127), false);"
              ],
              "code": [
                "{",
                "    let mut byte_set = ByteSet::empty();",
                "    byte_set.add(255);",
                "    assert_eq!(byte_set.contains(255), true);",
                "    assert_eq!(byte_set.is_empty(), false);",
                "    assert_eq!(byte_set.contains(128), false);",
                "    assert_eq!(byte_set.contains(0), false);",
                "    assert_eq!(byte_set.contains(127), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut byte_set = ByteSet::empty();",
                "    byte_set.add(0);",
                "    byte_set.add(0);",
                "}"
              ],
              "oracle": [
                "    assert!(byte_set.contains(0));",
                "    assert!(byte_set.is_empty() == false);",
                "    assert!(byte_set.contains_range(0, 0));",
                "    assert!(byte_set.contains_range(1, 1) == false);",
                "    assert!(byte_set.contains(1) == false);"
              ],
              "code": [
                "{",
                "    let mut byte_set = ByteSet::empty();",
                "    byte_set.add(0);",
                "    byte_set.add(0);",
                "    assert!(byte_set.contains(0));",
                "    assert!(byte_set.is_empty() == false);",
                "    assert!(byte_set.contains_range(0, 0));",
                "    assert!(byte_set.contains_range(1, 1) == false);",
                "    assert!(byte_set.contains(1) == false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut byte_set = ByteSet::empty();",
                "    byte_set.add(127);",
                "    byte_set.add(127);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(byte_set.contains(127), true);"
              ],
              "code": [
                "{",
                "    let mut byte_set = ByteSet::empty();",
                "    byte_set.add(127);",
                "    byte_set.add(127);",
                "    assert_eq!(byte_set.contains(127), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut byte_set = ByteSet::empty();",
                "    byte_set.add(255);",
                "    byte_set.add(255);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(byte_set.contains(255), true);",
                "    assert_eq!(byte_set.is_empty(), false);",
                "    assert_eq!(byte_set.contains_range(0, 255), true);",
                "    assert_eq!(byte_set.iter().count(), 1);",
                "    assert_eq!(byte_set.iter_ranges().count(), 1);",
                "    assert_eq!(byte_set.write_to_len(), expected_length);"
              ],
              "code": [
                "{",
                "    let mut byte_set = ByteSet::empty();",
                "    byte_set.add(255);",
                "    byte_set.add(255);",
                "    assert_eq!(byte_set.contains(255), true);",
                "    assert_eq!(byte_set.is_empty(), false);",
                "    assert_eq!(byte_set.contains_range(0, 255), true);",
                "    assert_eq!(byte_set.iter().count(), 1);",
                "    assert_eq!(byte_set.iter_ranges().count(), 1);",
                "    assert_eq!(byte_set.write_to_len(), expected_length);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut byte_set = ByteSet::empty();",
                "    byte_set.add(0);",
                "    byte_set.add(127);",
                "    byte_set.add(255);",
                "}"
              ],
              "oracle": [
                "    assert!(byte_set.contains(0));",
                "    assert!(byte_set.contains(127));",
                "    assert!(byte_set.contains(255));",
                "    assert!(!byte_set.contains(1));",
                "    assert!(!byte_set.contains(126));",
                "    assert!(!byte_set.contains(128));",
                "    assert!(!byte_set.contains(254));",
                "    assert!(!byte_set.is_empty());",
                "    assert!(byte_set.contains_range(0, 127));",
                "    assert!(byte_set.contains_range(0, 255));",
                "    assert!(!byte_set.contains_range(1, 126));",
                "    assert!(!byte_set.contains_range(128, 255));"
              ],
              "code": [
                "{",
                "    let mut byte_set = ByteSet::empty();",
                "    byte_set.add(0);",
                "    byte_set.add(127);",
                "    byte_set.add(255);",
                "    assert!(byte_set.contains(0));",
                "    assert!(byte_set.contains(127));",
                "    assert!(byte_set.contains(255));",
                "    assert!(!byte_set.contains(1));",
                "    assert!(!byte_set.contains(126));",
                "    assert!(!byte_set.contains(128));",
                "    assert!(!byte_set.contains(254));",
                "    assert!(!byte_set.is_empty());",
                "    assert!(byte_set.contains_range(0, 127));",
                "    assert!(byte_set.contains_range(0, 255));",
                "    assert!(!byte_set.contains_range(1, 126));",
                "    assert!(!byte_set.contains_range(128, 255));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}