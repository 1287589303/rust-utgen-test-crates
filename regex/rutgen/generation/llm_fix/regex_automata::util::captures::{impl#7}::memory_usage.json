{
  "name": "regex_automata::util::captures::{impl#7}::memory_usage",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/captures.rs:2144:5:2152:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: s::<GroupInfoInner>()\n            + self.0.slot_ranges.len() * s::<(SmallIndex, SmallIndex)>()\n            + self.0.name_to_index.len() * s::<CaptureNameMap>()\n            + self.0.index_to_name.len() * s::<Vec<Option<Arc<str>>>>()\n            + self.0.memory_extra\n"
      ],
      "input_infer": "valid GroupInfo instances with varying slot_ranges, a range of CaptureNameMap sizes from 0 to N, different index_to_name vector lengths from 0 to M, and memory_extra values including edge cases of 0 and maximum expected sizes\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let group_info = GroupInfo::empty();",
                "    let usage = group_info.memory_usage();",
                "}"
              ],
              "oracle": [
                "    let expected_usage = std::mem::size_of::<GroupInfoInner>() + 0 * std::mem::size_of::<(SmallIndex, SmallIndex)>() + 0 * std::mem::size_of::<CaptureNameMap>() + 0 * std::mem::size_of::<Vec<Option<Arc<str>>>>() + 0;",
                "    assert_eq!(usage, expected_usage);"
              ],
              "code": [
                "{",
                "    let group_info = GroupInfo::empty();",
                "    let usage = group_info.memory_usage();",
                "    let expected_usage = std::mem::size_of::<GroupInfoInner>() + 0 * std::mem::size_of::<(SmallIndex, SmallIndex)>() + 0 * std::mem::size_of::<CaptureNameMap>() + 0 * std::mem::size_of::<Vec<Option<Arc<str>>>>() + 0;",
                "    assert_eq!(usage, expected_usage);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slot_ranges = vec![(SmallIndex(0), SmallIndex(1)), (SmallIndex(2), SmallIndex(3))];",
                "    let group_info_inner = GroupInfoInner {",
                "        slot_ranges,",
                "        ..Default::default()",
                "    };",
                "    let group_info = GroupInfo(Arc::new(group_info_inner));",
                "    let usage = group_info.memory_usage();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(usage, s::<GroupInfoInner>() + 2 * s::<(SmallIndex, SmallIndex)>() + 0 * s::<CaptureNameMap>() + 0 * s::<Vec<Option<Arc<str>>>>() + 0);"
              ],
              "code": [
                "{",
                "    let slot_ranges = vec![(SmallIndex(0), SmallIndex(1)), (SmallIndex(2), SmallIndex(3))];",
                "    let group_info_inner = GroupInfoInner {",
                "        slot_ranges,",
                "        ..Default::default()",
                "    };",
                "    let group_info = GroupInfo(Arc::new(group_info_inner));",
                "    let usage = group_info.memory_usage();",
                "    assert_eq!(usage, s::<GroupInfoInner>() + 2 * s::<(SmallIndex, SmallIndex)>() + 0 * s::<CaptureNameMap>() + 0 * s::<Vec<Option<Arc<str>>>>() + 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut name_to_index = CaptureNameMap::new();",
                "    name_to_index.insert(Arc::from(\"test\".to_string()), SmallIndex(1));",
                "    let group_info_inner = GroupInfoInner {",
                "        name_to_index: vec![name_to_index],",
                "        ..Default::default()",
                "    };",
                "    let group_info = GroupInfo(Arc::new(group_info_inner));",
                "    let usage = group_info.memory_usage();",
                "}"
              ],
              "oracle": [
                "    let expected_memory_usage = size_of::<GroupInfoInner>()",
                "    + group_info.0.slot_ranges.len() * size_of::<(SmallIndex, SmallIndex)>()",
                "    + group_info.0.name_to_index.len() * size_of::<CaptureNameMap>()",
                "    + group_info.0.index_to_name.len() * size_of::<Vec<Option<Arc<str>>>>()",
                "    + group_info.0.memory_extra;",
                "    assert_eq!(usage, expected_memory_usage);"
              ],
              "code": [
                "{",
                "    let mut name_to_index = CaptureNameMap::new();",
                "    name_to_index.insert(Arc::from(\"test\".to_string()), SmallIndex(1));",
                "    let group_info_inner = GroupInfoInner {",
                "        name_to_index: vec![name_to_index],",
                "        ..Default::default()",
                "    };",
                "    let group_info = GroupInfo(Arc::new(group_info_inner));",
                "    let usage = group_info.memory_usage();",
                "    let expected_memory_usage = size_of::<GroupInfoInner>()",
                "    + group_info.0.slot_ranges.len() * size_of::<(SmallIndex, SmallIndex)>()",
                "    + group_info.0.name_to_index.len() * size_of::<CaptureNameMap>()",
                "    + group_info.0.index_to_name.len() * size_of::<Vec<Option<Arc<str>>>>()",
                "    + group_info.0.memory_extra;",
                "    assert_eq!(usage, expected_memory_usage);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let index_to_name = vec![Some(Arc::from(\"group1\".to_string())), None];",
                "    let group_info_inner = GroupInfoInner {",
                "        index_to_name: vec![index_to_name],",
                "        ..Default::default()",
                "    };",
                "    let group_info = GroupInfo(Arc::new(group_info_inner));",
                "    let usage = group_info.memory_usage();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(usage, size_of::<GroupInfoInner>() + 0 * size_of::<(SmallIndex, SmallIndex)>() + 1 * size_of::<CaptureNameMap>() + 1 * size_of::<Vec<Option<Arc<str>>>>() + 0);"
              ],
              "code": [
                "{",
                "    let index_to_name = vec![Some(Arc::from(\"group1\".to_string())), None];",
                "    let group_info_inner = GroupInfoInner {",
                "        index_to_name: vec![index_to_name],",
                "        ..Default::default()",
                "    };",
                "    let group_info = GroupInfo(Arc::new(group_info_inner));",
                "    let usage = group_info.memory_usage();",
                "    assert_eq!(usage, size_of::<GroupInfoInner>() + 0 * size_of::<(SmallIndex, SmallIndex)>() + 1 * size_of::<CaptureNameMap>() + 1 * size_of::<Vec<Option<Arc<str>>>>() + 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let group_info_inner = GroupInfoInner {",
                "        memory_extra: 128,",
                "        ..Default::default()",
                "    };",
                "    let group_info = GroupInfo(Arc::new(group_info_inner));",
                "    let usage = group_info.memory_usage();",
                "}"
              ],
              "oracle": [
                "    let expected_usage = size_of::<GroupInfoInner>() + group_info_inner.slot_ranges.len() * size_of::<(SmallIndex, SmallIndex)>() + group_info_inner.name_to_index.len() * size_of::<CaptureNameMap>() + group_info_inner.index_to_name.len() * size_of::<Vec<Option<Arc<str>>>>() + group_info_inner.memory_extra;",
                "    assert_eq!(usage, expected_usage);"
              ],
              "code": [
                "{",
                "    let group_info_inner = GroupInfoInner {",
                "        memory_extra: 128,",
                "        ..Default::default()",
                "    };",
                "    let group_info = GroupInfo(Arc::new(group_info_inner));",
                "    let usage = group_info.memory_usage();",
                "    let expected_usage = size_of::<GroupInfoInner>() + group_info_inner.slot_ranges.len() * size_of::<(SmallIndex, SmallIndex)>() + group_info_inner.name_to_index.len() * size_of::<CaptureNameMap>() + group_info_inner.index_to_name.len() * size_of::<Vec<Option<Arc<str>>>>() + group_info_inner.memory_extra;",
                "    assert_eq!(usage, expected_usage);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slot_ranges = vec![(SmallIndex(0), SmallIndex(1)), (SmallIndex(2), SmallIndex(3))];",
                "    let mut name_to_index = CaptureNameMap::new();",
                "    name_to_index.insert(Arc::from(\"group1\".to_string()), SmallIndex(1));",
                "    let index_to_name = vec![Some(Arc::from(\"group1\".to_string())), None];",
                "    let group_info_inner = GroupInfoInner {",
                "        slot_ranges,",
                "        name_to_index: vec![name_to_index],",
                "        index_to_name: vec![index_to_name],",
                "        memory_extra: 64,",
                "    };",
                "    let group_info = GroupInfo(Arc::new(group_info_inner));",
                "    let usage = group_info.memory_usage();",
                "}"
              ],
              "oracle": [
                "    let expected_usage = std::mem::size_of::<GroupInfoInner>()",
                "    + 2 * std::mem::size_of::<(SmallIndex, SmallIndex)>()",
                "    + 1 * std::mem::size_of::<CaptureNameMap>()",
                "    + 2 * std::mem::size_of::<Vec<Option<Arc<str>>>>()",
                "    + 64;",
                "    assert_eq!(usage, expected_usage);"
              ],
              "code": [
                "{",
                "    let slot_ranges = vec![(SmallIndex(0), SmallIndex(1)), (SmallIndex(2), SmallIndex(3))];",
                "    let mut name_to_index = CaptureNameMap::new();",
                "    name_to_index.insert(Arc::from(\"group1\".to_string()), SmallIndex(1));",
                "    let index_to_name = vec![Some(Arc::from(\"group1\".to_string())), None];",
                "    let group_info_inner = GroupInfoInner {",
                "        slot_ranges,",
                "        name_to_index: vec![name_to_index],",
                "        index_to_name: vec![index_to_name],",
                "        memory_extra: 64,",
                "    };",
                "    let group_info = GroupInfo(Arc::new(group_info_inner));",
                "    let usage = group_info.memory_usage();",
                "    let expected_usage = std::mem::size_of::<GroupInfoInner>()",
                "    + 2 * std::mem::size_of::<(SmallIndex, SmallIndex)>()",
                "    + 1 * std::mem::size_of::<CaptureNameMap>()",
                "    + 2 * std::mem::size_of::<Vec<Option<Arc<str>>>>()",
                "    + 64;",
                "    assert_eq!(usage, expected_usage);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}