{
  "name": "regex_automata::util::search::{impl#0}::range",
  "mod_info": {
    "name": "util::search",
    "loc": "regex-automata/src/util/mod.rs:53:1:53:23"
  },
  "visible": true,
  "loc": "regex-automata/src/util/search.rs:244:5:247:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "haystack: non-empty byte slice, span: valid range within the length of haystack, anchored: any Anchored variant, earliest: bool (true or false), range: valid RangeBounds<usize> excluding invalid cases like 0..=usize::MAX or out of bounds\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Input::new(b\"foobar\");",
                "    let result = input.range(0..6);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.get_range(), 0..6);",
                "    assert_eq!(result.haystack(), b\"foobar\");",
                "    assert_eq!(result.start(), 0);",
                "    assert_eq!(result.end(), 6);",
                "    assert!(!result.is_done());",
                "    assert!(result.is_char_boundary(0));",
                "    assert!(result.is_char_boundary(5));",
                "    assert!(!result.is_char_boundary(6));"
              ],
              "code": [
                "{",
                "    let input = Input::new(b\"foobar\");",
                "    let result = input.range(0..6);",
                "    assert_eq!(result.get_range(), 0..6);",
                "    assert_eq!(result.haystack(), b\"foobar\");",
                "    assert_eq!(result.start(), 0);",
                "    assert_eq!(result.end(), 6);",
                "    assert!(!result.is_done());",
                "    assert!(result.is_char_boundary(0));",
                "    assert!(result.is_char_boundary(5));",
                "    assert!(!result.is_char_boundary(6));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Input::new(b\"foobar\").range(2..4);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(input.get_range(), 2..4);",
                "    assert_eq!(input.haystack(), b\"foobar\");",
                "    assert!(input.start() == 2);",
                "    assert!(input.end() == 4);",
                "    assert!(!input.is_done());",
                "    assert!(input.is_char_boundary(2));",
                "    assert!(input.is_char_boundary(3));",
                "    assert!(!input.is_char_boundary(4));",
                "    assert_eq!(input.get_span(), Span { start: 2, end: 4 });",
                "    assert_eq!(input.get_anchored(), Anchored::No);",
                "    assert!(!input.get_earliest());"
              ],
              "code": [
                "{",
                "    let input = Input::new(b\"foobar\").range(2..4);",
                "    assert_eq!(input.get_range(), 2..4);",
                "    assert_eq!(input.haystack(), b\"foobar\");",
                "    assert!(input.start() == 2);",
                "    assert!(input.end() == 4);",
                "    assert!(!input.is_done());",
                "    assert!(input.is_char_boundary(2));",
                "    assert!(input.is_char_boundary(3));",
                "    assert!(!input.is_char_boundary(4));",
                "    assert_eq!(input.get_span(), Span { start: 2, end: 4 });",
                "    assert_eq!(input.get_anchored(), Anchored::No);",
                "    assert!(!input.get_earliest());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Input::new(b\"foobar\").range(0..1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(input.get_range(), 0..1);",
                "    assert_eq!(input.start(), 0);",
                "    assert_eq!(input.end(), 1);",
                "    assert_eq!(input.haystack(), b\"foobar\");",
                "    assert!(!input.is_done());"
              ],
              "code": [
                "{",
                "    let input = Input::new(b\"foobar\").range(0..1);",
                "    assert_eq!(input.get_range(), 0..1);",
                "    assert_eq!(input.start(), 0);",
                "    assert_eq!(input.end(), 1);",
                "    assert_eq!(input.haystack(), b\"foobar\");",
                "    assert!(!input.is_done());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Input::new(b\"foobar\").range(5..6);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(input.get_range(), 5..6);",
                "    assert_eq!(input.start(), 5);",
                "    assert_eq!(input.end(), 6);",
                "    assert_eq!(input.haystack(), b\"foobar\");",
                "    assert!(!input.is_done());",
                "    assert!(input.is_char_boundary(5));",
                "    assert!(!input.is_char_boundary(6));",
                "    assert_eq!(input.get_span(), Span { start: 5, end: 6 });",
                "    assert_eq!(input.get_anchored(), Anchored::No);",
                "    assert_eq!(input.get_earliest(), false);",
                "    assert_eq!(input.start(), 5);",
                "    assert_eq!(input.end(), 6);"
              ],
              "code": [
                "{",
                "    let input = Input::new(b\"foobar\").range(5..6);",
                "    assert_eq!(input.get_range(), 5..6);",
                "    assert_eq!(input.start(), 5);",
                "    assert_eq!(input.end(), 6);",
                "    assert_eq!(input.haystack(), b\"foobar\");",
                "    assert!(!input.is_done());",
                "    assert!(input.is_char_boundary(5));",
                "    assert!(!input.is_char_boundary(6));",
                "    assert_eq!(input.get_span(), Span { start: 5, end: 6 });",
                "    assert_eq!(input.get_anchored(), Anchored::No);",
                "    assert_eq!(input.get_earliest(), false);",
                "    assert_eq!(input.start(), 5);",
                "    assert_eq!(input.end(), 6);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Input::new(b\"foobar\").range(2..2);",
                "}"
              ],
              "oracle": [
                "    let input = Input::new(b\"foobar\").range(2..2);",
                "    assert_eq!(input.get_range(), 2..2);",
                "    assert_eq!(input.start(), 2);",
                "    assert_eq!(input.end(), 2);",
                "    assert!(input.is_done());",
                "    assert!(input.is_char_boundary(2));",
                "    assert!(!input.is_char_boundary(3));"
              ],
              "code": [
                "{",
                "    let input = Input::new(b\"foobar\").range(2..2);",
                "    let input = Input::new(b\"foobar\").range(2..2);",
                "    assert_eq!(input.get_range(), 2..2);",
                "    assert_eq!(input.start(), 2);",
                "    assert_eq!(input.end(), 2);",
                "    assert!(input.is_done());",
                "    assert!(input.is_char_boundary(2));",
                "    assert!(!input.is_char_boundary(3));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let input = Input::new(b\"foobar\").range(7..8);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(0..6, Input::new(b\"foobar\").get_range());",
                "    assert_eq!(2..5, Input::new(b\"foobar\").range(2..=4).get_range());",
                "    assert!(std::panic::catch_unwind(|| Input::new(b\"foobar\").range(0..=usize::MAX)).is_err());",
                "    assert!(std::panic::catch_unwind(|| Input::new(b\"foobar\").range(7..8)).is_err());",
                "    assert!(std::panic::catch_unwind(|| Input::new(b\"foobar\").range(1..=1)).is_err());",
                "    assert!(std::panic::catch_unwind(|| Input::new(b\"foobar\").range(0..0)).is_err());"
              ],
              "code": [
                "{",
                "    let input = Input::new(b\"foobar\").range(7..8);",
                "    assert_eq!(0..6, Input::new(b\"foobar\").get_range());",
                "    assert_eq!(2..5, Input::new(b\"foobar\").range(2..=4).get_range());",
                "    assert!(std::panic::catch_unwind(|| Input::new(b\"foobar\").range(0..=usize::MAX)).is_err());",
                "    assert!(std::panic::catch_unwind(|| Input::new(b\"foobar\").range(7..8)).is_err());",
                "    assert!(std::panic::catch_unwind(|| Input::new(b\"foobar\").range(1..=1)).is_err());",
                "    assert!(std::panic::catch_unwind(|| Input::new(b\"foobar\").range(0..0)).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let input = Input::new(b\"foobar\").range(6..7);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Input::new(b\"foobar\").range(0..6).get_range(), 0..6);",
                "    assert_eq!(Input::new(b\"foobar\").range(2..=4).get_range(), 2..5);",
                "    assert!(std::panic::catch_unwind(|| { Input::new(b\"foobar\").range(0..=usize::MAX); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { Input::new(b\"foobar\").range(6..7); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { Input::new(b\"foobar\").range(5..8); }).is_err());"
              ],
              "code": [
                "{",
                "    let input = Input::new(b\"foobar\").range(6..7);",
                "    assert_eq!(Input::new(b\"foobar\").range(0..6).get_range(), 0..6);",
                "    assert_eq!(Input::new(b\"foobar\").range(2..=4).get_range(), 2..5);",
                "    assert!(std::panic::catch_unwind(|| { Input::new(b\"foobar\").range(0..=usize::MAX); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { Input::new(b\"foobar\").range(6..7); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { Input::new(b\"foobar\").range(5..8); }).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let input = Input::new(b\"foobar\").range(0..=usize::MAX);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Input::new(b\"foobar\").range(0..=usize::MAX), panic);"
              ],
              "code": [
                "{",
                "    let input = Input::new(b\"foobar\").range(0..=usize::MAX);",
                "    assert_eq!(Input::new(b\"foobar\").range(0..=usize::MAX), panic);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Input::new(b\"foobar\").anchored(Anchored::Yes).range(1..5);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(input.get_range(), 1..5);",
                "    assert_eq!(input.haystack(), b\"foobar\");",
                "    assert_eq!(input.start(), 1);",
                "    assert_eq!(input.end(), 5);",
                "    assert_eq!(input.get_anchored(), Anchored::Yes);",
                "    assert!(!input.is_done());",
                "    assert!(input.is_char_boundary(1));",
                "    assert!(input.is_char_boundary(5));"
              ],
              "code": [
                "{",
                "    let input = Input::new(b\"foobar\").anchored(Anchored::Yes).range(1..5);",
                "    assert_eq!(input.get_range(), 1..5);",
                "    assert_eq!(input.haystack(), b\"foobar\");",
                "    assert_eq!(input.start(), 1);",
                "    assert_eq!(input.end(), 5);",
                "    assert_eq!(input.get_anchored(), Anchored::Yes);",
                "    assert!(!input.is_done());",
                "    assert!(input.is_char_boundary(1));",
                "    assert!(input.is_char_boundary(5));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}