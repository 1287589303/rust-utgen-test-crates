{
  "name": "regex_syntax::hir::{impl#12}::push",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:1077:5:1079:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "ClassUnicodeRange with valid start and end characters (e.g., start <= end, overlapping ranges), test empty ClassUnicode instance, boundary cases with non-overlapping adjacent ranges, and ensure input includes characters from various Unicode blocks.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class_unicode = ClassUnicode::empty();",
                "    let range = ClassUnicodeRange { start: 'a', end: 'z' };",
                "    class_unicode.push(range);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_unicode.ranges().len(), 1);",
                "    assert_eq!(class_unicode.ranges()[0].start, 'a');",
                "    assert_eq!(class_unicode.ranges()[0].end, 'z');",
                "    assert!(class_unicode.is_ascii());",
                "    assert!(class_unicode.minimum_len().is_none());",
                "    assert!(class_unicode.maximum_len().is_none());"
              ],
              "code": [
                "{",
                "    let mut class_unicode = ClassUnicode::empty();",
                "    let range = ClassUnicodeRange { start: 'a', end: 'z' };",
                "    class_unicode.push(range);",
                "    assert_eq!(class_unicode.ranges().len(), 1);",
                "    assert_eq!(class_unicode.ranges()[0].start, 'a');",
                "    assert_eq!(class_unicode.ranges()[0].end, 'z');",
                "    assert!(class_unicode.is_ascii());",
                "    assert!(class_unicode.minimum_len().is_none());",
                "    assert!(class_unicode.maximum_len().is_none());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class_unicode = ClassUnicode::empty();",
                "    // no action taken as it's empty",
                "    let range = ClassUnicodeRange { start: '0', end: '0' };",
                "    class_unicode.push(range);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_unicode.ranges().len(), 1);",
                "    assert_eq!(class_unicode.ranges()[0].start, '0');",
                "    assert_eq!(class_unicode.ranges()[0].end, '0');",
                "    assert!(class_unicode.is_ascii());",
                "    assert!(class_unicode.minimum_len().is_none());",
                "    assert!(class_unicode.maximum_len().is_none());",
                "    assert!(class_unicode.literal().is_none());",
                "    assert!(class_unicode.to_byte_class().is_none());"
              ],
              "code": [
                "{",
                "    let mut class_unicode = ClassUnicode::empty();",
                "    // no action taken as it's empty",
                "    let range = ClassUnicodeRange { start: '0', end: '0' };",
                "    class_unicode.push(range);",
                "    assert_eq!(class_unicode.ranges().len(), 1);",
                "    assert_eq!(class_unicode.ranges()[0].start, '0');",
                "    assert_eq!(class_unicode.ranges()[0].end, '0');",
                "    assert!(class_unicode.is_ascii());",
                "    assert!(class_unicode.minimum_len().is_none());",
                "    assert!(class_unicode.maximum_len().is_none());",
                "    assert!(class_unicode.literal().is_none());",
                "    assert!(class_unicode.to_byte_class().is_none());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class_unicode = ClassUnicode::new(vec![",
                "        ClassUnicodeRange { start: 'a', end: 'c' },",
                "        ClassUnicodeRange { start: 'b', end: 'd' },",
                "    ]);",
                "    let range = ClassUnicodeRange { start: 'c', end: 'e' };",
                "    class_unicode.push(range);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_unicode.ranges().len(), 3);",
                "    assert_eq!(class_unicode.ranges()[2].start, 'c');",
                "    assert_eq!(class_unicode.ranges()[2].end, 'e');",
                "    assert!(class_unicode.ranges()[1].start <= class_unicode.ranges()[2].start);",
                "    assert!(class_unicode.ranges()[1].end >= class_unicode.ranges()[2].start);"
              ],
              "code": [
                "{",
                "    let mut class_unicode = ClassUnicode::new(vec![",
                "        ClassUnicodeRange { start: 'a', end: 'c' },",
                "        ClassUnicodeRange { start: 'b', end: 'd' },",
                "    ]);",
                "    let range = ClassUnicodeRange { start: 'c', end: 'e' };",
                "    class_unicode.push(range);",
                "    assert_eq!(class_unicode.ranges().len(), 3);",
                "    assert_eq!(class_unicode.ranges()[2].start, 'c');",
                "    assert_eq!(class_unicode.ranges()[2].end, 'e');",
                "    assert!(class_unicode.ranges()[1].start <= class_unicode.ranges()[2].start);",
                "    assert!(class_unicode.ranges()[1].end >= class_unicode.ranges()[2].start);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class_unicode = ClassUnicode::new(vec![",
                "        ClassUnicodeRange { start: 'a', end: 'b' },",
                "    ]);",
                "    let range = ClassUnicodeRange { start: 'c', end: 'c' };",
                "    class_unicode.push(range);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_unicode.ranges(), &[ClassUnicodeRange { start: 'a', end: 'b' }, ClassUnicodeRange { start: 'c', end: 'c' }]);",
                "    assert_eq!(class_unicode.set.ranges.len(), 2);"
              ],
              "code": [
                "{",
                "    let mut class_unicode = ClassUnicode::new(vec![",
                "        ClassUnicodeRange { start: 'a', end: 'b' },",
                "    ]);",
                "    let range = ClassUnicodeRange { start: 'c', end: 'c' };",
                "    class_unicode.push(range);",
                "    assert_eq!(class_unicode.ranges(), &[ClassUnicodeRange { start: 'a', end: 'b' }, ClassUnicodeRange { start: 'c', end: 'c' }]);",
                "    assert_eq!(class_unicode.set.ranges.len(), 2);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class_unicode = ClassUnicode::new(vec![",
                "        ClassUnicodeRange { start: '\\u{0041}', end: '\\u{005A}' }, // A-Z",
                "        ClassUnicodeRange { start: '\\u{0061}', end: '\\u{007A}' }, // a-z",
                "    ]);",
                "    let range = ClassUnicodeRange { start: '\\u{0391}', end: '\\u{0396}' }; // Greek capital letters",
                "    class_unicode.push(range);",
                "}"
              ],
              "oracle": [
                "    class_unicode.ranges().len() == 3",
                "    class_unicode.ranges().contains(&ClassUnicodeRange { start: '\\u{0391}', end: '\\u{0396}' }) == true"
              ],
              "code": [
                "{",
                "    let mut class_unicode = ClassUnicode::new(vec![",
                "        ClassUnicodeRange { start: '\\u{0041}', end: '\\u{005A}' }, // A-Z",
                "        ClassUnicodeRange { start: '\\u{0061}', end: '\\u{007A}' }, // a-z",
                "    ]);",
                "    let range = ClassUnicodeRange { start: '\\u{0391}', end: '\\u{0396}' }; // Greek capital letters",
                "    class_unicode.push(range);",
                "    class_unicode.ranges().len() == 3",
                "    class_unicode.ranges().contains(&ClassUnicodeRange { start: '\\u{0391}', end: '\\u{0396}' }) == true",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}