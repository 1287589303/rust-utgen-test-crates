{
  "name": "regex_automata::meta::regex::{impl#20}::get_hybrid",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:3151:5:3160:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self.hybrid set to Some(true), Some(false), or None; feature \"hybrid\" enabled or disabled\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().hybrid(true);",
                "    let _ = config.get_hybrid();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_hybrid(), true);",
                "    let config = Config::new().hybrid(false);",
                "    assert_eq!(config.get_hybrid(), false);",
                "    let config = Config::new();",
                "    assert_eq!(config.get_hybrid(), true);"
              ],
              "code": [
                "{",
                "    let config = Config::new().hybrid(true);",
                "    let _ = config.get_hybrid();",
                "    assert_eq!(config.get_hybrid(), true);",
                "    let config = Config::new().hybrid(false);",
                "    assert_eq!(config.get_hybrid(), false);",
                "    let config = Config::new();",
                "    assert_eq!(config.get_hybrid(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().hybrid(false);",
                "    let _ = config.get_hybrid();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_hybrid(), false);",
                "    let config = Config::new().hybrid(true);",
                "    assert_eq!(config.get_hybrid(), true);",
                "    let config = Config::new();",
                "    assert_eq!(config.get_hybrid(), true);"
              ],
              "code": [
                "{",
                "    let config = Config::new().hybrid(false);",
                "    let _ = config.get_hybrid();",
                "    assert_eq!(config.get_hybrid(), false);",
                "    let config = Config::new().hybrid(true);",
                "    assert_eq!(config.get_hybrid(), true);",
                "    let config = Config::new();",
                "    assert_eq!(config.get_hybrid(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().hybrid(None);",
                "    let _ = config.get_hybrid();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_hybrid(), true);",
                "    let config_disable_hybrid = Config::new().hybrid(false);",
                "    assert_eq!(config_disable_hybrid.get_hybrid(), false);",
                "    let config_enable_hybrid = Config::new().hybrid(true);",
                "    assert_eq!(config_enable_hybrid.get_hybrid(), true);",
                "    let config_default_hybrid = Config::new();",
                "    assert_eq!(config_default_hybrid.get_hybrid(), true);"
              ],
              "code": [
                "{",
                "    let config = Config::new().hybrid(None);",
                "    let _ = config.get_hybrid();",
                "    assert_eq!(config.get_hybrid(), true);",
                "    let config_disable_hybrid = Config::new().hybrid(false);",
                "    assert_eq!(config_disable_hybrid.get_hybrid(), false);",
                "    let config_enable_hybrid = Config::new().hybrid(true);",
                "    assert_eq!(config_enable_hybrid.get_hybrid(), true);",
                "    let config_default_hybrid = Config::new();",
                "    assert_eq!(config_default_hybrid.get_hybrid(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().hybrid(None);",
                "    let _ = config.get_hybrid();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_hybrid(), true);",
                "    let config = Config::new().hybrid(Some(true));",
                "    assert_eq!(config.get_hybrid(), true);",
                "    let config = Config::new().hybrid(Some(false));",
                "    assert_eq!(config.get_hybrid(), false);",
                "    let config = Config::new();",
                "    assert_eq!(config.get_hybrid(), true);",
                "    #[cfg(not(feature = \"hybrid\"))] { assert_eq!(config.get_hybrid(), false); }"
              ],
              "code": [
                "{",
                "    let config = Config::new().hybrid(None);",
                "    let _ = config.get_hybrid();",
                "    assert_eq!(config.get_hybrid(), true);",
                "    let config = Config::new().hybrid(Some(true));",
                "    assert_eq!(config.get_hybrid(), true);",
                "    let config = Config::new().hybrid(Some(false));",
                "    assert_eq!(config.get_hybrid(), false);",
                "    let config = Config::new();",
                "    assert_eq!(config.get_hybrid(), true);",
                "    #[cfg(not(feature = \"hybrid\"))] { assert_eq!(config.get_hybrid(), false); }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}