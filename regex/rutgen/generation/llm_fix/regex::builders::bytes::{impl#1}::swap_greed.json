{
  "name": "regex::builders::bytes::{impl#1}::swap_greed",
  "mod_info": {
    "name": "builders::bytes",
    "loc": "src/builders.rs:1357:1:2539:2"
  },
  "visible": true,
  "loc": "src/builders.rs:2313:9:2316:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "yes: bool (true, false)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexSetBuilder::new(vec![\"a+\", \"b?\"]);",
                "    builder.swap_greed(true);",
                "}"
              ],
              "oracle": [
                "    let builder = RegexSetBuilder::new(vec![\"a+\", \"b?\"]);",
                "    assert_eq!(builder.swap_greed(true), &mut builder);"
              ],
              "code": [
                "{",
                "    let mut builder = RegexSetBuilder::new(vec![\"a+\", \"b?\"]);",
                "    builder.swap_greed(true);",
                "    let builder = RegexSetBuilder::new(vec![\"a+\", \"b?\"]);",
                "    assert_eq!(builder.swap_greed(true), &mut builder);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexSetBuilder::new(vec![\"a+\", \"b?\"]);",
                "    builder.swap_greed(false);",
                "}"
              ],
              "oracle": [
                "    let mut builder = RegexSetBuilder::new(vec![\"a+\", \"b?\"]);",
                "    assert_eq!(builder.swap_greed(false), &mut builder);",
                "    assert_eq!(builder.swap_greed(true), &mut builder);"
              ],
              "code": [
                "{",
                "    let mut builder = RegexSetBuilder::new(vec![\"a+\", \"b?\"]);",
                "    builder.swap_greed(false);",
                "    let mut builder = RegexSetBuilder::new(vec![\"a+\", \"b?\"]);",
                "    assert_eq!(builder.swap_greed(false), &mut builder);",
                "    assert_eq!(builder.swap_greed(true), &mut builder);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}