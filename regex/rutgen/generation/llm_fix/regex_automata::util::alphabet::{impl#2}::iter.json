{
  "name": "regex_automata::util::alphabet::{impl#2}::iter",
  "mod_info": {
    "name": "util::alphabet",
    "loc": "regex-automata/src/util/mod.rs:30:1:30:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/alphabet.rs:353:5:355:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: ByteClassIter { classes: self, i: 0 }\n"
      ],
      "input_infer": "Test input conditions: ByteClasses instance created via ByteClasses::empty(), ByteClasses::singletons(), or ByteClasses::from_bytes with byte slices of length 0 to 256.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_classes = ByteClasses::empty();",
                "    let iter = byte_classes.iter();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(iter.classes, &byte_classes);",
                "    assert_eq!(iter.i, 0);"
              ],
              "code": [
                "{",
                "    let byte_classes = ByteClasses::empty();",
                "    let iter = byte_classes.iter();",
                "    assert_eq!(iter.classes, &byte_classes);",
                "    assert_eq!(iter.i, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_classes = ByteClasses::singletons();",
                "    let iter = byte_classes.iter();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(iter.classes, &byte_classes);",
                "    assert_eq!(iter.i, 0);",
                "    assert!(iter.classes.is_singleton());",
                "    assert_eq!(iter.classes.alphabet_len(), 256);",
                "    assert_eq!(iter.classes.stride2(), 1);"
              ],
              "code": [
                "{",
                "    let byte_classes = ByteClasses::singletons();",
                "    let iter = byte_classes.iter();",
                "    assert_eq!(iter.classes, &byte_classes);",
                "    assert_eq!(iter.i, 0);",
                "    assert!(iter.classes.is_singleton());",
                "    assert_eq!(iter.classes.alphabet_len(), 256);",
                "    assert_eq!(iter.classes.stride2(), 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_classes = ByteClasses::from_bytes(&[]).unwrap().0;",
                "    let iter = byte_classes.iter();",
                "}"
              ],
              "oracle": [
                "    let byte_classes = ByteClasses::from_bytes(&[]).unwrap().0;",
                "    assert_eq!(iter.classes, &byte_classes);",
                "    assert_eq!(iter.i, 0);"
              ],
              "code": [
                "{",
                "    let byte_classes = ByteClasses::from_bytes(&[]).unwrap().0;",
                "    let iter = byte_classes.iter();",
                "    let byte_classes = ByteClasses::from_bytes(&[]).unwrap().0;",
                "    assert_eq!(iter.classes, &byte_classes);",
                "    assert_eq!(iter.i, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_classes = ByteClasses::from_bytes(&[0; 256]).unwrap().0;",
                "    let iter = byte_classes.iter();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(iter.classes as *const _, byte_classes as *const _);",
                "    assert_eq!(iter.i, 0);"
              ],
              "code": [
                "{",
                "    let byte_classes = ByteClasses::from_bytes(&[0; 256]).unwrap().0;",
                "    let iter = byte_classes.iter();",
                "    assert_eq!(iter.classes as *const _, byte_classes as *const _);",
                "    assert_eq!(iter.i, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}