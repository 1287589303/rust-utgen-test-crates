{
  "name": "regex_automata::nfa::thompson::literal_trie::{impl#5}::next",
  "mod_info": {
    "name": "nfa::thompson::literal_trie",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:63:1:63:18"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/literal_trie.rs:453:5:461:6",
  "fn_tests": [
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: let Some(&(start, end)) = self.chunks.next() at line 454 is true\n",
        "precondition: let Some(chunk) = self.active.take() at line 457 is true\n",
        "expected return value/type: Some(chunk)\n"
      ],
      "input_infer": "self.chunks must contain at least one tuple of (start, end) where start < end and self.active must be initialized with a non-empty slice of Transition; test for divisions of ranges including edge cases where start equals end, or start is one less than end\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transitions = vec![",
                "        Transition { start: 0, end: 5, next: StateID(1) },",
                "        Transition { start: 5, end: 10, next: StateID(2) },",
                "    ];",
                "",
                "    let chunks: Vec<(usize, usize)> = vec![(0, 2)];",
                "    let mut iter = StateChunksIter {",
                "        transitions: &transitions,",
                "        chunks: chunks.iter(),",
                "        active: Some(&transitions[1..2]),",
                "    };",
                "",
                "    let result = iter.next();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    assert_eq!(result, Some(&[Transition { start: 5, end: 10, next: StateID(2) }]));"
              ],
              "code": [
                "{",
                "    let transitions = vec![",
                "        Transition { start: 0, end: 5, next: StateID(1) },",
                "        Transition { start: 5, end: 10, next: StateID(2) },",
                "    ];",
                "",
                "    let chunks: Vec<(usize, usize)> = vec![(0, 2)];",
                "    let mut iter = StateChunksIter {",
                "        transitions: &transitions,",
                "        chunks: chunks.iter(),",
                "        active: Some(&transitions[1..2]),",
                "    };",
                "",
                "    let result = iter.next();",
                "    assert!(result.is_some());",
                "    assert_eq!(result, Some(&[Transition { start: 5, end: 10, next: StateID(2) }]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transitions = vec![",
                "        Transition { start: 1, end: 3, next: StateID(1) },",
                "        Transition { start: 3, end: 5, next: StateID(2) },",
                "    ];",
                "",
                "    let chunks: Vec<(usize, usize)> = vec![(0, 1)];",
                "    let mut iter = StateChunksIter {",
                "        transitions: &transitions,",
                "        chunks: chunks.iter(),",
                "        active: Some(&transitions[0..1]),",
                "    };",
                "",
                "    let result = iter.next();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(&transitions[0..1]));"
              ],
              "code": [
                "{",
                "    let transitions = vec![",
                "        Transition { start: 1, end: 3, next: StateID(1) },",
                "        Transition { start: 3, end: 5, next: StateID(2) },",
                "    ];",
                "",
                "    let chunks: Vec<(usize, usize)> = vec![(0, 1)];",
                "    let mut iter = StateChunksIter {",
                "        transitions: &transitions,",
                "        chunks: chunks.iter(),",
                "        active: Some(&transitions[0..1]),",
                "    };",
                "",
                "    let result = iter.next();",
                "    assert_eq!(result, Some(&transitions[0..1]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transitions = vec![",
                "        Transition { start: 0, end: 1, next: StateID(1) },",
                "    ];",
                "",
                "    let chunks: Vec<(usize, usize)> = vec![(0, 1)];",
                "    let mut iter = StateChunksIter {",
                "        transitions: &transitions,",
                "        chunks: chunks.iter(),",
                "        active: Some(&transitions[0..1]),",
                "    };",
                "",
                "    let result = iter.next();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(&transitions[0..1]));"
              ],
              "code": [
                "{",
                "    let transitions = vec![",
                "        Transition { start: 0, end: 1, next: StateID(1) },",
                "    ];",
                "",
                "    let chunks: Vec<(usize, usize)> = vec![(0, 1)];",
                "    let mut iter = StateChunksIter {",
                "        transitions: &transitions,",
                "        chunks: chunks.iter(),",
                "        active: Some(&transitions[0..1]),",
                "    };",
                "",
                "    let result = iter.next();",
                "    assert_eq!(result, Some(&transitions[0..1]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transitions = vec![",
                "        Transition { start: 8, end: 10, next: StateID(3) },",
                "    ];",
                "",
                "    let chunks: Vec<(usize, usize)> = vec![(0, 0)];",
                "    let mut iter = StateChunksIter {",
                "        transitions: &transitions,",
                "        chunks: chunks.iter(),",
                "        active: Some(&transitions[0..1]),",
                "    };",
                "",
                "    let result = iter.next();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(&transitions[0..1]));"
              ],
              "code": [
                "{",
                "    let transitions = vec![",
                "        Transition { start: 8, end: 10, next: StateID(3) },",
                "    ];",
                "",
                "    let chunks: Vec<(usize, usize)> = vec![(0, 0)];",
                "    let mut iter = StateChunksIter {",
                "        transitions: &transitions,",
                "        chunks: chunks.iter(),",
                "        active: Some(&transitions[0..1]),",
                "    };",
                "",
                "    let result = iter.next();",
                "    assert_eq!(result, Some(&transitions[0..1]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}