{
  "name": "regex_automata::dfa::dense::{impl#0}::get_match_kind",
  "mod_info": {
    "name": "dfa::dense",
    "loc": "regex-automata/src/dfa/mod.rs:337:1:337:15"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/dense.rs:969:5:971:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self.match_kind is Option<MatchKind> which can be None or Some(MatchKind), so test input conditions should be: None, Some(MatchKind::All), Some(MatchKind::LeftmostFirst)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new();",
                "    let match_kind = config.get_match_kind();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(match_kind, MatchKind::LeftmostFirst);"
              ],
              "code": [
                "{",
                "    let config = Config::new();",
                "    let match_kind = config.get_match_kind();",
                "    assert_eq!(match_kind, MatchKind::LeftmostFirst);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().match_kind(MatchKind::All);",
                "    let match_kind = config.get_match_kind();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(match_kind, MatchKind::All);",
                "    ",
                "    let config = Config::new();",
                "    let match_kind = config.get_match_kind();",
                "    assert_eq!(match_kind, MatchKind::LeftmostFirst);"
              ],
              "code": [
                "{",
                "    let config = Config::new().match_kind(MatchKind::All);",
                "    let match_kind = config.get_match_kind();",
                "    assert_eq!(match_kind, MatchKind::All);",
                "    ",
                "    let config = Config::new();",
                "    let match_kind = config.get_match_kind();",
                "    assert_eq!(match_kind, MatchKind::LeftmostFirst);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().match_kind(MatchKind::LeftmostFirst);",
                "    let match_kind = config.get_match_kind();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(match_kind, MatchKind::LeftmostFirst);"
              ],
              "code": [
                "{",
                "    let config = Config::new().match_kind(MatchKind::LeftmostFirst);",
                "    let match_kind = config.get_match_kind();",
                "    assert_eq!(match_kind, MatchKind::LeftmostFirst);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}