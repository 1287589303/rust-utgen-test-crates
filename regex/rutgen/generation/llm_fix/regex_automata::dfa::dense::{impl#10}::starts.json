{
  "name": "regex_automata::dfa::dense::{impl#10}::starts",
  "mod_info": {
    "name": "dfa::dense",
    "loc": "regex-automata/src/dfa/mod.rs:337:1:337:15"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/dense.rs:3034:5:3036:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self.st must be properly initialized with valid StartTable data, and its kind must be one of {both, unanchored, anchored}; pattern_len must be consistent with the length of initialized state IDs in self.st.table.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let start_table = StartTable {",
                "        table: vec![0, 1, 2, 3, 4, 5, 6, 7],",
                "        kind: StartKind::Both,",
                "        start_map: StartByteMap::default(),",
                "        stride: 4,",
                "        pattern_len: Some(2),",
                "        universal_start_unanchored: Some(1),",
                "        universal_start_anchored: Some(3),",
                "    };",
                "    ",
                "    let dfa = DFA {",
                "        tt: TransitionTable { table: vec![], classes: ByteClasses::default(), stride2: 1 },",
                "        st: start_table,",
                "        ms: MatchStates { slices: vec![], pattern_ids: vec![], pattern_len: 0 },",
                "        special: Special { max: 7, quit_id: 0, min_match: 0, max_match: 1, min_accel: 0, max_accel: 1, min_start: 0, max_start: 7 },",
                "        accels: Accels { accels: vec![] },",
                "        pre: None,",
                "        quitset: ByteSet([false; 256]),",
                "        flags: Flags { has_empty: true, is_utf8: false, is_always_start_anchored: false },",
                "    };",
                "",
                "    let _iter = dfa.starts();",
                "}"
              ],
              "oracle": [
                "    let start_table = StartTable { table: vec![0, 1, 2, 3, 4, 5, 6, 7], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 4, pattern_len: Some(2), universal_start_unanchored: Some(1), universal_start_anchored: Some(3) };",
                "    let dfa = DFA { tt: TransitionTable { table: vec![], classes: ByteClasses::default(), stride2: 1 }, st: start_table, ms: MatchStates { slices: vec![], pattern_ids: vec![], pattern_len: 0 }, special: Special { max: 7, quit_id: 0, min_match: 0, max_match: 1, min_accel: 0, max_accel: 1, min_start: 0, max_start: 7 }, accels: Accels { accels: vec![] }, pre: None, quitset: ByteSet([false; 256]), flags: Flags { has_empty: true, is_utf8: false, is_always_start_anchored: false } };",
                "    let iter = dfa.starts(); assert!(iter.i == 0); assert!(iter.st.pattern_len == Some(2)); assert!(iter.st.table.len() == 8); assert_eq!(iter.st.table, vec![0, 1, 2, 3, 4, 5, 6, 7]);"
              ],
              "code": [
                "{",
                "    let start_table = StartTable {",
                "        table: vec![0, 1, 2, 3, 4, 5, 6, 7],",
                "        kind: StartKind::Both,",
                "        start_map: StartByteMap::default(),",
                "        stride: 4,",
                "        pattern_len: Some(2),",
                "        universal_start_unanchored: Some(1),",
                "        universal_start_anchored: Some(3),",
                "    };",
                "    ",
                "    let dfa = DFA {",
                "        tt: TransitionTable { table: vec![], classes: ByteClasses::default(), stride2: 1 },",
                "        st: start_table,",
                "        ms: MatchStates { slices: vec![], pattern_ids: vec![], pattern_len: 0 },",
                "        special: Special { max: 7, quit_id: 0, min_match: 0, max_match: 1, min_accel: 0, max_accel: 1, min_start: 0, max_start: 7 },",
                "        accels: Accels { accels: vec![] },",
                "        pre: None,",
                "        quitset: ByteSet([false; 256]),",
                "        flags: Flags { has_empty: true, is_utf8: false, is_always_start_anchored: false },",
                "    };",
                "",
                "    let _iter = dfa.starts();",
                "    let start_table = StartTable { table: vec![0, 1, 2, 3, 4, 5, 6, 7], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 4, pattern_len: Some(2), universal_start_unanchored: Some(1), universal_start_anchored: Some(3) };",
                "    let dfa = DFA { tt: TransitionTable { table: vec![], classes: ByteClasses::default(), stride2: 1 }, st: start_table, ms: MatchStates { slices: vec![], pattern_ids: vec![], pattern_len: 0 }, special: Special { max: 7, quit_id: 0, min_match: 0, max_match: 1, min_accel: 0, max_accel: 1, min_start: 0, max_start: 7 }, accels: Accels { accels: vec![] }, pre: None, quitset: ByteSet([false; 256]), flags: Flags { has_empty: true, is_utf8: false, is_always_start_anchored: false } };",
                "    let iter = dfa.starts(); assert!(iter.i == 0); assert!(iter.st.pattern_len == Some(2)); assert!(iter.st.table.len() == 8); assert_eq!(iter.st.table, vec![0, 1, 2, 3, 4, 5, 6, 7]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let start_table = StartTable {",
                "        table: vec![0, 1, 2, 3, 4, 5, 6, 7],",
                "        kind: StartKind::Unanchored,",
                "        start_map: StartByteMap::default(),",
                "        stride: 4,",
                "        pattern_len: Some(2),",
                "        universal_start_unanchored: Some(1),",
                "        universal_start_anchored: None,",
                "    };",
                "    ",
                "    let dfa = DFA {",
                "        tt: TransitionTable { table: vec![], classes: ByteClasses::default(), stride2: 1 },",
                "        st: start_table,",
                "        ms: MatchStates { slices: vec![], pattern_ids: vec![], pattern_len: 0 },",
                "        special: Special { max: 7, quit_id: 0, min_match: 0, max_match: 1, min_accel: 0, max_accel: 1, min_start: 0, max_start: 7 },",
                "        accels: Accels { accels: vec![] },",
                "        pre: None,",
                "        quitset: ByteSet([false; 256]),",
                "        flags: Flags { has_empty: true, is_utf8: false, is_always_start_anchored: false },",
                "    };",
                "",
                "    let _iter = dfa.starts();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dfa.st.table.len(), 8);",
                "    assert_eq!(dfa.st.kind, StartKind::Unanchored);",
                "    assert!(dfa.st.pattern_len.is_some());",
                "    assert_eq!(dfa.st.universal_start_unanchored, Some(1));",
                "    assert_eq!(dfa.st.universal_start_anchored, None);",
                "    assert_eq!(dfa.special.max, 7);",
                "    assert_eq!(dfa.special.quit_id, 0);",
                "    assert_eq!(dfa.flags.has_empty, true);",
                "    assert_eq!(dfa.ms.pattern_len, 0);"
              ],
              "code": [
                "{",
                "    let start_table = StartTable {",
                "        table: vec![0, 1, 2, 3, 4, 5, 6, 7],",
                "        kind: StartKind::Unanchored,",
                "        start_map: StartByteMap::default(),",
                "        stride: 4,",
                "        pattern_len: Some(2),",
                "        universal_start_unanchored: Some(1),",
                "        universal_start_anchored: None,",
                "    };",
                "    ",
                "    let dfa = DFA {",
                "        tt: TransitionTable { table: vec![], classes: ByteClasses::default(), stride2: 1 },",
                "        st: start_table,",
                "        ms: MatchStates { slices: vec![], pattern_ids: vec![], pattern_len: 0 },",
                "        special: Special { max: 7, quit_id: 0, min_match: 0, max_match: 1, min_accel: 0, max_accel: 1, min_start: 0, max_start: 7 },",
                "        accels: Accels { accels: vec![] },",
                "        pre: None,",
                "        quitset: ByteSet([false; 256]),",
                "        flags: Flags { has_empty: true, is_utf8: false, is_always_start_anchored: false },",
                "    };",
                "",
                "    let _iter = dfa.starts();",
                "    assert_eq!(dfa.st.table.len(), 8);",
                "    assert_eq!(dfa.st.kind, StartKind::Unanchored);",
                "    assert!(dfa.st.pattern_len.is_some());",
                "    assert_eq!(dfa.st.universal_start_unanchored, Some(1));",
                "    assert_eq!(dfa.st.universal_start_anchored, None);",
                "    assert_eq!(dfa.special.max, 7);",
                "    assert_eq!(dfa.special.quit_id, 0);",
                "    assert_eq!(dfa.flags.has_empty, true);",
                "    assert_eq!(dfa.ms.pattern_len, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let start_table = StartTable {",
                "        table: vec![0, 1, 2, 3, 4, 5, 6, 7],",
                "        kind: StartKind::Anchored,",
                "        start_map: StartByteMap::default(),",
                "        stride: 4,",
                "        pattern_len: Some(2),",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: Some(3),",
                "    };",
                "    ",
                "    let dfa = DFA {",
                "        tt: TransitionTable { table: vec![], classes: ByteClasses::default(), stride2: 1 },",
                "        st: start_table,",
                "        ms: MatchStates { slices: vec![], pattern_ids: vec![], pattern_len: 0 },",
                "        special: Special { max: 7, quit_id: 0, min_match: 0, max_match: 1, min_accel: 0, max_accel: 1, min_start: 0, max_start: 7 },",
                "        accels: Accels { accels: vec![] },",
                "        pre: None,",
                "        quitset: ByteSet([false; 256]),",
                "        flags: Flags { has_empty: true, is_utf8: false, is_always_start_anchored: false },",
                "    };",
                "",
                "    let _iter = dfa.starts();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dfa.starts().st.table, &[0, 1, 2, 3, 4, 5, 6, 7]);",
                "    assert!(dfa.starts().st.kind == StartKind::Anchored);",
                "    assert_eq!(dfa.starts().st.stride, 4);",
                "    assert_eq!(dfa.starts().st.pattern_len, Some(2));",
                "    assert!(dfa.starts().st.universal_start_unanchored.is_none());",
                "    assert_eq!(dfa.starts().st.universal_start_anchored, Some(3));",
                "    assert!(dfa.starts().st.start_map == StartByteMap::default());",
                "    assert_eq!(dfa.starts().st.table.len(), 8);",
                "    assert!(dfa.starts().st.iter().i == 0);"
              ],
              "code": [
                "{",
                "    let start_table = StartTable {",
                "        table: vec![0, 1, 2, 3, 4, 5, 6, 7],",
                "        kind: StartKind::Anchored,",
                "        start_map: StartByteMap::default(),",
                "        stride: 4,",
                "        pattern_len: Some(2),",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: Some(3),",
                "    };",
                "    ",
                "    let dfa = DFA {",
                "        tt: TransitionTable { table: vec![], classes: ByteClasses::default(), stride2: 1 },",
                "        st: start_table,",
                "        ms: MatchStates { slices: vec![], pattern_ids: vec![], pattern_len: 0 },",
                "        special: Special { max: 7, quit_id: 0, min_match: 0, max_match: 1, min_accel: 0, max_accel: 1, min_start: 0, max_start: 7 },",
                "        accels: Accels { accels: vec![] },",
                "        pre: None,",
                "        quitset: ByteSet([false; 256]),",
                "        flags: Flags { has_empty: true, is_utf8: false, is_always_start_anchored: false },",
                "    };",
                "",
                "    let _iter = dfa.starts();",
                "    assert_eq!(dfa.starts().st.table, &[0, 1, 2, 3, 4, 5, 6, 7]);",
                "    assert!(dfa.starts().st.kind == StartKind::Anchored);",
                "    assert_eq!(dfa.starts().st.stride, 4);",
                "    assert_eq!(dfa.starts().st.pattern_len, Some(2));",
                "    assert!(dfa.starts().st.universal_start_unanchored.is_none());",
                "    assert_eq!(dfa.starts().st.universal_start_anchored, Some(3));",
                "    assert!(dfa.starts().st.start_map == StartByteMap::default());",
                "    assert_eq!(dfa.starts().st.table.len(), 8);",
                "    assert!(dfa.starts().st.iter().i == 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let start_table = StartTable {",
                "        table: vec![0, 1, 2, 3],",
                "        kind: StartKind::Both,",
                "        start_map: StartByteMap::default(),",
                "        stride: 4,",
                "        pattern_len: Some(0),",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: None,",
                "    };",
                "    ",
                "    let dfa = DFA {",
                "        tt: TransitionTable { table: vec![], classes: ByteClasses::default(), stride2: 1 },",
                "        st: start_table,",
                "        ms: MatchStates { slices: vec![], pattern_ids: vec![], pattern_len: 0 },",
                "        special: Special { max: 3, quit_id: 0, min_match: 0, max_match: 1, min_accel: 0, max_accel: 1, min_start: 0, max_start: 3 },",
                "        accels: Accels { accels: vec![] },",
                "        pre: None,",
                "        quitset: ByteSet([false; 256]),",
                "        flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false },",
                "    };",
                "",
                "    let _iter = dfa.starts();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dfa.starts().st.table, vec![0, 1, 2, 3]);",
                "    assert_eq!(dfa.starts().st.kind, StartKind::Both);",
                "    assert_eq!(dfa.starts().st.stride, 4);",
                "    assert!(dfa.starts().st.pattern_len.is_some());",
                "    assert!(dfa.starts().st.universal_start_unanchored.is_none());",
                "    assert!(dfa.starts().st.universal_start_anchored.is_none());"
              ],
              "code": [
                "{",
                "    let start_table = StartTable {",
                "        table: vec![0, 1, 2, 3],",
                "        kind: StartKind::Both,",
                "        start_map: StartByteMap::default(),",
                "        stride: 4,",
                "        pattern_len: Some(0),",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: None,",
                "    };",
                "    ",
                "    let dfa = DFA {",
                "        tt: TransitionTable { table: vec![], classes: ByteClasses::default(), stride2: 1 },",
                "        st: start_table,",
                "        ms: MatchStates { slices: vec![], pattern_ids: vec![], pattern_len: 0 },",
                "        special: Special { max: 3, quit_id: 0, min_match: 0, max_match: 1, min_accel: 0, max_accel: 1, min_start: 0, max_start: 3 },",
                "        accels: Accels { accels: vec![] },",
                "        pre: None,",
                "        quitset: ByteSet([false; 256]),",
                "        flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false },",
                "    };",
                "",
                "    let _iter = dfa.starts();",
                "    assert_eq!(dfa.starts().st.table, vec![0, 1, 2, 3]);",
                "    assert_eq!(dfa.starts().st.kind, StartKind::Both);",
                "    assert_eq!(dfa.starts().st.stride, 4);",
                "    assert!(dfa.starts().st.pattern_len.is_some());",
                "    assert!(dfa.starts().st.universal_start_unanchored.is_none());",
                "    assert!(dfa.starts().st.universal_start_anchored.is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}