{
  "name": "regex_automata::util::sparse_set::{impl#1}::resize",
  "mod_info": {
    "name": "util::sparse_set",
    "loc": "regex-automata/src/util/mod.rs:55:1:55:27"
  },
  "visible": true,
  "loc": "regex-automata/src/util/sparse_set.rs:129:5:138:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: new_capacity <= StateID::LIMIT at line 131 is true, with bound new_capacity == StateID::LIMIT\n"
      ],
      "input_infer": "new_capacity in the range [0, StateID::LIMIT]\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(sparse_set.capacity(), 0);",
                "    assert_eq!(sparse_set.len(), 0);",
                "    assert!(sparse_set.is_empty());",
                "    assert_eq!(sparse_set.dense.len(), 0);",
                "    assert_eq!(sparse_set.sparse.len(), 0);"
              ],
              "code": [
                "{",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(0);",
                "    assert_eq!(sparse_set.capacity(), 0);",
                "    assert_eq!(sparse_set.len(), 0);",
                "    assert!(sparse_set.is_empty());",
                "    assert_eq!(sparse_set.dense.len(), 0);",
                "    assert_eq!(sparse_set.sparse.len(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(StateID::LIMIT + 1);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| {",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(StateID::LIMIT + 1);",
                "    }).is_err());"
              ],
              "code": [
                "{",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(StateID::LIMIT + 1);",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(StateID::LIMIT + 1);",
                "    }).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(StateID::LIMIT);",
                "}"
              ],
              "oracle": [
                "    assert!(sparse_set.capacity() == StateID::LIMIT);",
                "    assert!(sparse_set.len() == 0);",
                "    assert!(sparse_set.is_empty() == true);",
                "    assert!(sparse_set.dense.len() == StateID::LIMIT);",
                "    assert!(sparse_set.sparse.len() == StateID::LIMIT);"
              ],
              "code": [
                "{",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(StateID::LIMIT);",
                "    assert!(sparse_set.capacity() == StateID::LIMIT);",
                "    assert!(sparse_set.len() == 0);",
                "    assert!(sparse_set.is_empty() == true);",
                "    assert!(sparse_set.dense.len() == StateID::LIMIT);",
                "    assert!(sparse_set.sparse.len() == StateID::LIMIT);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(StateID::LIMIT / 2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(sparse_set.capacity(), StateID::LIMIT / 2);",
                "    assert_eq!(sparse_set.len(), 0);",
                "    assert!(sparse_set.is_empty());"
              ],
              "code": [
                "{",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(StateID::LIMIT / 2);",
                "    assert_eq!(sparse_set.capacity(), StateID::LIMIT / 2);",
                "    assert_eq!(sparse_set.len(), 0);",
                "    assert!(sparse_set.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(10);",
                "}"
              ],
              "oracle": [
                "    sparse_set.resize(StateID::LIMIT);",
                "    assert_eq!(sparse_set.capacity(), StateID::LIMIT);",
                "    assert!(sparse_set.is_empty());",
                "    sparse_set.resize(StateID::LIMIT);",
                "    assert_eq!(sparse_set.len(), 0);",
                "    assert_eq!(sparse_set.memory_usage(), expected_memory_usage);"
              ],
              "code": [
                "{",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(10);",
                "    sparse_set.resize(StateID::LIMIT);",
                "    assert_eq!(sparse_set.capacity(), StateID::LIMIT);",
                "    assert!(sparse_set.is_empty());",
                "    sparse_set.resize(StateID::LIMIT);",
                "    assert_eq!(sparse_set.len(), 0);",
                "    assert_eq!(sparse_set.memory_usage(), expected_memory_usage);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: new_capacity <= StateID::LIMIT at line 131 is false\n"
      ],
      "input_infer": "new_capacity values: StateID::LIMIT + 1, StateID::LIMIT + 2, ..., up to maximum valid usize value\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(StateID::LIMIT + 1);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| {",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(StateID::LIMIT + 1);",
                "    }).is_err());"
              ],
              "code": [
                "{",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(StateID::LIMIT + 1);",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(StateID::LIMIT + 1);",
                "    }).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(StateID::LIMIT + 2);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| {",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(StateID::LIMIT + 2);",
                "    }).is_err());"
              ],
              "code": [
                "{",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(StateID::LIMIT + 2);",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(StateID::LIMIT + 2);",
                "    }).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(usize::MAX);",
                "}"
              ],
              "oracle": [
                "    sparse_set.resize(usize::MAX); // Expect panic since new_capacity exceeds StateID::LIMIT."
              ],
              "code": [
                "{",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(usize::MAX);",
                "    sparse_set.resize(usize::MAX); // Expect panic since new_capacity exceeds StateID::LIMIT.",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}