{
  "name": "regex_syntax::hir::literal::{impl#4}::empty",
  "mod_info": {
    "name": "hir::literal",
    "loc": "regex-syntax/src/hir/mod.rs:42:1:42:17"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/literal.rs:753:5:755:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Seq { literals: Some(vec![]) }\n"
      ],
      "input_infer": "literals: Some(vec![])\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let seq = Seq::empty();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(seq.literals, Some(vec![]));"
              ],
              "code": [
                "{",
                "    let seq = Seq::empty();",
                "    assert_eq!(seq.literals, Some(vec![]));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let seq = Seq::empty();",
                "    let literals = seq.literals();",
                "}"
              ],
              "oracle": [
                "    let seq = Seq::empty();",
                "    assert_eq!(seq.literals(), Some(&[]));",
                "    assert!(seq.is_empty());",
                "    assert_eq!(seq.len(), Some(0));",
                "    assert!(seq.is_finite());",
                "    assert!(seq.is_exact());"
              ],
              "code": [
                "{",
                "    let seq = Seq::empty();",
                "    let literals = seq.literals();",
                "    let seq = Seq::empty();",
                "    assert_eq!(seq.literals(), Some(&[]));",
                "    assert!(seq.is_empty());",
                "    assert_eq!(seq.len(), Some(0));",
                "    assert!(seq.is_finite());",
                "    assert!(seq.is_exact());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let seq = Seq::empty();",
                "    let length = seq.len();",
                "}"
              ],
              "oracle": [
                "    seq.literals() == Some(&vec![])",
                "    length == Some(0)",
                "    seq.is_empty() == true",
                "    seq.is_finite() == true",
                "    seq.is_exact() == true"
              ],
              "code": [
                "{",
                "    let seq = Seq::empty();",
                "    let length = seq.len();",
                "    seq.literals() == Some(&vec![])",
                "    length == Some(0)",
                "    seq.is_empty() == true",
                "    seq.is_finite() == true",
                "    seq.is_exact() == true",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}