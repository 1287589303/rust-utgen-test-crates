{
  "name": "regex_automata::dfa::accel::{impl#0}::empty",
  "mod_info": {
    "name": "dfa::accel",
    "loc": "regex-automata/src/dfa/mod.rs:346:1:346:22"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/accel.rs:147:5:149:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Accels { accels: vec![0] }\n"
      ],
      "input_infer": "Test input conditions: No parameters required, expect function to return Accels with accels containing a single element [0].\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let accels = Accels::empty();",
                "}"
              ],
              "oracle": [
                "    let accels = Accels::empty();",
                "    assert_eq!(accels.accels, vec![0]);",
                "    assert_eq!(accels.accels.len(), 1);",
                "    assert_eq!(accels.accels[0], 0);"
              ],
              "code": [
                "{",
                "    let accels = Accels::empty();",
                "    let accels = Accels::empty();",
                "    assert_eq!(accels.accels, vec![0]);",
                "    assert_eq!(accels.accels.len(), 1);",
                "    assert_eq!(accels.accels[0], 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}