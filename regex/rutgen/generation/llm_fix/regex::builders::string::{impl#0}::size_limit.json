{
  "name": "regex::builders::string::{impl#0}::size_limit",
  "mod_info": {
    "name": "builders::string",
    "loc": "src/builders.rs:200:1:1355:2"
  },
  "visible": true,
  "loc": "src/builders.rs:690:9:693:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "size_limit(bytes: usize) where bytes includes 0, 1, and upper boundary values that trigger regex compilation limits\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"\\w\");",
                "    builder.size_limit(0);",
                "    let _ = builder.build();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.size_limit(0), &mut builder);",
                "    assert_eq!(builder.size_limit(1024), &mut builder);",
                "    assert_eq!(builder.size_limit(65536), &mut builder);",
                "    assert!(builder.size_limit(45000).build().is_err());",
                "    assert!(builder.size_limit(99999).build().is_ok());",
                "    assert!(builder.size_limit(50000).build().is_ok());"
              ],
              "code": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"\\w\");",
                "    builder.size_limit(0);",
                "    let _ = builder.build();",
                "    assert_eq!(builder.size_limit(0), &mut builder);",
                "    assert_eq!(builder.size_limit(1024), &mut builder);",
                "    assert_eq!(builder.size_limit(65536), &mut builder);",
                "    assert!(builder.size_limit(45000).build().is_err());",
                "    assert!(builder.size_limit(99999).build().is_ok());",
                "    assert!(builder.size_limit(50000).build().is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"\\w\");",
                "    builder.size_limit(1);",
                "    let _ = builder.build();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.size_limit(1), &mut builder);",
                "    assert!(builder.size_limit(1).build().is_err());",
                "    assert_eq!(builder.size_limit(1024), &mut builder);",
                "    assert!(builder.size_limit(1024).build().is_ok());",
                "    assert_eq!(builder.size_limit(46000), &mut builder);",
                "    assert!(builder.size_limit(46000).build().is_err());",
                "    assert!(builder.size_limit(45000).build().is_err());",
                "    assert_eq!(builder.size_limit(50000), &mut builder);",
                "    assert!(builder.size_limit(50000).build().is_ok());"
              ],
              "code": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"\\w\");",
                "    builder.size_limit(1);",
                "    let _ = builder.build();",
                "    assert_eq!(builder.size_limit(1), &mut builder);",
                "    assert!(builder.size_limit(1).build().is_err());",
                "    assert_eq!(builder.size_limit(1024), &mut builder);",
                "    assert!(builder.size_limit(1024).build().is_ok());",
                "    assert_eq!(builder.size_limit(46000), &mut builder);",
                "    assert!(builder.size_limit(46000).build().is_err());",
                "    assert!(builder.size_limit(45000).build().is_err());",
                "    assert_eq!(builder.size_limit(50000), &mut builder);",
                "    assert!(builder.size_limit(50000).build().is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"\\w\");",
                "    builder.size_limit(45000);",
                "    let _ = builder.build();",
                "}"
              ],
              "oracle": [
                "    builder.size_limit(45000).build().is_ok();",
                "    builder.size_limit(45001).build().is_err();",
                "    builder.size_limit(0).build().is_ok();",
                "    builder.size_limit(100000).build().is_ok();",
                "    builder.size_limit(30000).build().is_err();",
                "    builder.size_limit(50000).build().is_ok();",
                "    builder.size_limit(1000).build().is_ok();",
                "    builder.size_limit(45000).size_limit(40000).build().is_err();",
                "    builder.size_limit(45000).size_limit(45000).build().is_ok();",
                "    builder.size_limit(45000).size_limit(46000).build().is_ok();"
              ],
              "code": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"\\w\");",
                "    builder.size_limit(45000);",
                "    let _ = builder.build();",
                "    builder.size_limit(45000).build().is_ok();",
                "    builder.size_limit(45001).build().is_err();",
                "    builder.size_limit(0).build().is_ok();",
                "    builder.size_limit(100000).build().is_ok();",
                "    builder.size_limit(30000).build().is_err();",
                "    builder.size_limit(50000).build().is_ok();",
                "    builder.size_limit(1000).build().is_ok();",
                "    builder.size_limit(45000).size_limit(40000).build().is_err();",
                "    builder.size_limit(45000).size_limit(45000).build().is_ok();",
                "    builder.size_limit(45000).size_limit(46000).build().is_ok();",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"\\w\");",
                "    builder.size_limit(45001);",
                "    let _ = builder.build();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.size_limit(45001), &mut builder);",
                "    assert_eq!(builder.size_limit(0), &mut builder);",
                "    assert_eq!(builder.size_limit(100), &mut builder);",
                "    assert_eq!(builder.size_limit(1_000_000), &mut builder);",
                "    assert!(builder.size_limit(45_000).build().is_err());",
                "    assert!(builder.size_limit(1).build().is_ok());",
                "    assert!(builder.size_limit(100_000).build().is_ok());",
                "    assert!(builder.size_limit(50_000).build().is_err());"
              ],
              "code": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"\\w\");",
                "    builder.size_limit(45001);",
                "    let _ = builder.build();",
                "    assert_eq!(builder.size_limit(45001), &mut builder);",
                "    assert_eq!(builder.size_limit(0), &mut builder);",
                "    assert_eq!(builder.size_limit(100), &mut builder);",
                "    assert_eq!(builder.size_limit(1_000_000), &mut builder);",
                "    assert!(builder.size_limit(45_000).build().is_err());",
                "    assert!(builder.size_limit(1).build().is_ok());",
                "    assert!(builder.size_limit(100_000).build().is_ok());",
                "    assert!(builder.size_limit(50_000).build().is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}