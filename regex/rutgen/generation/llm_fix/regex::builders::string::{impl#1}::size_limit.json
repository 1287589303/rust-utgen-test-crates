{
  "name": "regex::builders::string::{impl#1}::size_limit",
  "mod_info": {
    "name": "builders::string",
    "loc": "src/builders.rs:200:1:1355:2"
  },
  "visible": true,
  "loc": "src/builders.rs:1263:9:1266:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "Valid input range for `bytes` is 0 to 2^32-1, including edge cases of 0, 1, 2^32-1, and values exceeding typical regex size limits.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexSetBuilder::new([\"pattern1\", \"pattern2\"]);",
                "    builder.size_limit(0);",
                "}"
              ],
              "oracle": [
                "    let builder = RegexSetBuilder::new([\"pattern1\", \"pattern2\"]);",
                "    assert_eq!(builder.size_limit(0), builder);"
              ],
              "code": [
                "{",
                "    let mut builder = RegexSetBuilder::new([\"pattern1\", \"pattern2\"]);",
                "    builder.size_limit(0);",
                "    let builder = RegexSetBuilder::new([\"pattern1\", \"pattern2\"]);",
                "    assert_eq!(builder.size_limit(0), builder);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexSetBuilder::new([\"pattern1\", \"pattern2\"]);",
                "    builder.size_limit(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.size_limit(1), &mut builder);",
                "    assert_eq!(builder.size_limit(1000), &mut builder);",
                "    assert_eq!(builder.size_limit(10000), &mut builder);",
                "    assert_eq!(builder.size_limit(50000), &mut builder);",
                "    assert_eq!(builder.size_limit(0), &mut builder);",
                "    assert!(builder.size_limit(45000).build().is_err());",
                "    assert!(builder.size_limit(150000).build().is_ok());"
              ],
              "code": [
                "{",
                "    let mut builder = RegexSetBuilder::new([\"pattern1\", \"pattern2\"]);",
                "    builder.size_limit(1);",
                "    assert_eq!(builder.size_limit(1), &mut builder);",
                "    assert_eq!(builder.size_limit(1000), &mut builder);",
                "    assert_eq!(builder.size_limit(10000), &mut builder);",
                "    assert_eq!(builder.size_limit(50000), &mut builder);",
                "    assert_eq!(builder.size_limit(0), &mut builder);",
                "    assert!(builder.size_limit(45000).build().is_err());",
                "    assert!(builder.size_limit(150000).build().is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexSetBuilder::new([\"pattern1\", \"pattern2\"]);",
                "    builder.size_limit(u32::MAX as usize);",
                "}"
              ],
              "oracle": [
                "    builder.size_limit(0);",
                "    builder.size_limit(1);",
                "    builder.size_limit(100);",
                "    builder.size_limit(10_000);",
                "    builder.size_limit(45_000);",
                "    builder.size_limit(u32::MAX as usize);",
                "    builder.size_limit(50_000);",
                "    builder.size_limit(90_000);"
              ],
              "code": [
                "{",
                "    let mut builder = RegexSetBuilder::new([\"pattern1\", \"pattern2\"]);",
                "    builder.size_limit(u32::MAX as usize);",
                "    builder.size_limit(0);",
                "    builder.size_limit(1);",
                "    builder.size_limit(100);",
                "    builder.size_limit(10_000);",
                "    builder.size_limit(45_000);",
                "    builder.size_limit(u32::MAX as usize);",
                "    builder.size_limit(50_000);",
                "    builder.size_limit(90_000);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexSetBuilder::new([\"pattern1\", \"pattern2\"]);",
                "    builder.size_limit(u32::MAX as usize + 1);",
                "}"
              ],
              "oracle": [
                "    builder.size_limit(u32::MAX as usize + 1);",
                "    assert_eq!(builder.size_limit(u32::MAX as usize + 1), &mut builder);"
              ],
              "code": [
                "{",
                "    let mut builder = RegexSetBuilder::new([\"pattern1\", \"pattern2\"]);",
                "    builder.size_limit(u32::MAX as usize + 1);",
                "    builder.size_limit(u32::MAX as usize + 1);",
                "    assert_eq!(builder.size_limit(u32::MAX as usize + 1), &mut builder);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexSetBuilder::new([\"pattern1\", \"pattern2\"]);",
                "    builder.size_limit(10_000);",
                "}"
              ],
              "oracle": [
                "    builder.size_limit(10_000).is_ok();",
                "    builder.size_limit(0).is_ok();",
                "    builder.size_limit(100_000).is_ok();",
                "    builder.size_limit(50_000).is_ok();",
                "    builder.size_limit(9999).is_ok();",
                "    builder.size_limit(150_000).is_err();",
                "    builder.size_limit(45_000).is_err();"
              ],
              "code": [
                "{",
                "    let mut builder = RegexSetBuilder::new([\"pattern1\", \"pattern2\"]);",
                "    builder.size_limit(10_000);",
                "    builder.size_limit(10_000).is_ok();",
                "    builder.size_limit(0).is_ok();",
                "    builder.size_limit(100_000).is_ok();",
                "    builder.size_limit(50_000).is_ok();",
                "    builder.size_limit(9999).is_ok();",
                "    builder.size_limit(150_000).is_err();",
                "    builder.size_limit(45_000).is_err();",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}