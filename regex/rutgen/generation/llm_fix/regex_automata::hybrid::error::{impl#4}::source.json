{
  "name": "regex_automata::hybrid::error::{impl#4}::source",
  "mod_info": {
    "name": "hybrid::error",
    "loc": "regex-automata/src/hybrid/mod.rs:141:1:141:11"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/error.rs:155:5:160:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: *self matches _ at line 158 is true\n",
        "precondition: *self matches StartError::Cache { ref err } at line 157 is false\n",
        "expected return value/type: None\n"
      ],
      "input_infer": "*self must be an instance of StartError that is either StartError::Quit or StartError::UnsupportedAnchored for expected return value of None.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let start_error = StartError::Quit { byte: 0xFF };",
                "    let result = start_error.source();",
                "}"
              ],
              "oracle": [
                "    let start_error = StartError::Quit { byte: 0xFF };",
                "    let result = start_error.source();",
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let start_error = StartError::Quit { byte: 0xFF };",
                "    let result = start_error.source();",
                "    let start_error = StartError::Quit { byte: 0xFF };",
                "    let result = start_error.source();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let anchored_mode = Anchored::No;",
                "    let start_error = StartError::UnsupportedAnchored { mode: anchored_mode };",
                "    let result = start_error.source();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let anchored_mode = Anchored::No;",
                "    let start_error = StartError::UnsupportedAnchored { mode: anchored_mode };",
                "    let result = start_error.source();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: *self matches StartError::Cache { ref err } at line 156 is true\n",
        "precondition: *self matches StartError::Cache { ref err } at line 156 is true\n",
        "expected return value/type: Some(err)\n"
      ],
      "input_infer": "self must be of type StartError::Cache with err being a CacheError instance, hence test input conditions should include a valid CacheError instance.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let cache_error = CacheError(());",
                "    let start_error = StartError::Cache { err: cache_error };",
                "    let _result = start_error.source();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Some(&cache_error));"
              ],
              "code": [
                "{",
                "    let cache_error = CacheError(());",
                "    let start_error = StartError::Cache { err: cache_error };",
                "    let _result = start_error.source();",
                "    assert_eq!(_result, Some(&cache_error));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let cache_error = CacheError(());",
                "    let start_error = StartError::Cache { err: cache_error.clone() };",
                "    let _result = start_error.source();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Some(&cache_error));"
              ],
              "code": [
                "{",
                "    let cache_error = CacheError(());",
                "    let start_error = StartError::Cache { err: cache_error.clone() };",
                "    let _result = start_error.source();",
                "    assert_eq!(_result, Some(&cache_error));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}