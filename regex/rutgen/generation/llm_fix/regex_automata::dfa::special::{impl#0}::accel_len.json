{
  "name": "regex_automata::dfa::special::{impl#0}::accel_len",
  "mod_info": {
    "name": "dfa::special",
    "loc": "regex-automata/src/dfa/mod.rs:358:1:358:13"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/special.rs:474:5:481:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.accels() at line 475 is true\n",
        "expected return value/type: (self.max_accel.as_usize() - self.min_accel.as_usize() + stride)\n                / stride\n"
      ],
      "input_infer": "max_accel > min_accel, stride > 0, self.min_accel != DEAD\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let min_accel = StateID(1);",
                "    let max_accel = StateID(5);",
                "    let stride = 2;",
                "    let special = Special {",
                "        max: StateID(10),",
                "        quit_id: StateID(0),",
                "        min_match: StateID(0),",
                "        max_match: StateID(0),",
                "        min_accel,",
                "        max_accel,",
                "        min_start: StateID(0),",
                "        max_start: StateID(0),",
                "    };",
                "    let result = special.accel_len(stride);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, (5.as_usize() - 1.as_usize() + stride) / stride);"
              ],
              "code": [
                "{",
                "    let min_accel = StateID(1);",
                "    let max_accel = StateID(5);",
                "    let stride = 2;",
                "    let special = Special {",
                "        max: StateID(10),",
                "        quit_id: StateID(0),",
                "        min_match: StateID(0),",
                "        max_match: StateID(0),",
                "        min_accel,",
                "        max_accel,",
                "        min_start: StateID(0),",
                "        max_start: StateID(0),",
                "    };",
                "    let result = special.accel_len(stride);",
                "    assert_eq!(result, (5.as_usize() - 1.as_usize() + stride) / stride);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let min_accel = StateID(2);",
                "    let max_accel = StateID(2);",
                "    let stride = 1;",
                "    let special = Special {",
                "        max: StateID(10),",
                "        quit_id: StateID(0),",
                "        min_match: StateID(0),",
                "        max_match: StateID(0),",
                "        min_accel,",
                "        max_accel,",
                "        min_start: StateID(0),",
                "        max_start: StateID(0),",
                "    };",
                "    let result = special.accel_len(stride);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, (max_accel.as_usize() - min_accel.as_usize() + stride) / stride);",
                "    assert_eq!(result, (2 - 2 + 1) / 1);",
                "    assert_eq!(result, 1);",
                "    assert!(special.accels());"
              ],
              "code": [
                "{",
                "    let min_accel = StateID(2);",
                "    let max_accel = StateID(2);",
                "    let stride = 1;",
                "    let special = Special {",
                "        max: StateID(10),",
                "        quit_id: StateID(0),",
                "        min_match: StateID(0),",
                "        max_match: StateID(0),",
                "        min_accel,",
                "        max_accel,",
                "        min_start: StateID(0),",
                "        max_start: StateID(0),",
                "    };",
                "    let result = special.accel_len(stride);",
                "    assert_eq!(result, (max_accel.as_usize() - min_accel.as_usize() + stride) / stride);",
                "    assert_eq!(result, (2 - 2 + 1) / 1);",
                "    assert_eq!(result, 1);",
                "    assert!(special.accels());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let min_accel = StateID(1);",
                "    let max_accel = StateID(10);",
                "    let stride = 10;",
                "    let special = Special {",
                "        max: StateID(10),",
                "        quit_id: StateID(0),",
                "        min_match: StateID(0),",
                "        max_match: StateID(0),",
                "        min_accel,",
                "        max_accel,",
                "        min_start: StateID(0),",
                "        max_start: StateID(0),",
                "    };",
                "    let result = special.accel_len(stride);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, (max_accel.as_usize() - min_accel.as_usize() + stride) / stride);"
              ],
              "code": [
                "{",
                "    let min_accel = StateID(1);",
                "    let max_accel = StateID(10);",
                "    let stride = 10;",
                "    let special = Special {",
                "        max: StateID(10),",
                "        quit_id: StateID(0),",
                "        min_match: StateID(0),",
                "        max_match: StateID(0),",
                "        min_accel,",
                "        max_accel,",
                "        min_start: StateID(0),",
                "        max_start: StateID(0),",
                "    };",
                "    let result = special.accel_len(stride);",
                "    assert_eq!(result, (max_accel.as_usize() - min_accel.as_usize() + stride) / stride);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let min_accel = StateID(3);",
                "    let max_accel = StateID(9);",
                "    let stride = 3;",
                "    let special = Special {",
                "        max: StateID(10),",
                "        quit_id: StateID(0),",
                "        min_match: StateID(0),",
                "        max_match: StateID(0),",
                "        min_accel,",
                "        max_accel,",
                "        min_start: StateID(0),",
                "        max_start: StateID(0),",
                "    };",
                "    let result = special.accel_len(stride);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, (max_accel.as_usize() - min_accel.as_usize() + stride) / stride);"
              ],
              "code": [
                "{",
                "    let min_accel = StateID(3);",
                "    let max_accel = StateID(9);",
                "    let stride = 3;",
                "    let special = Special {",
                "        max: StateID(10),",
                "        quit_id: StateID(0),",
                "        min_match: StateID(0),",
                "        max_match: StateID(0),",
                "        min_accel,",
                "        max_accel,",
                "        min_start: StateID(0),",
                "        max_start: StateID(0),",
                "    };",
                "    let result = special.accel_len(stride);",
                "    assert_eq!(result, (max_accel.as_usize() - min_accel.as_usize() + stride) / stride);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.accels() at line 475 is false\n",
        "expected return value/type: 0\n"
      ],
      "input_infer": "min_accel = DEAD, max_accel = DEAD, stride = any positive integer\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let special = Special {",
                "        max: StateID(1),",
                "        quit_id: StateID(2),",
                "        min_match: StateID(3),",
                "        max_match: StateID(4),",
                "        min_accel: DEAD,",
                "        max_accel: DEAD,",
                "        min_start: StateID(5),",
                "        max_start: StateID(6),",
                "    };",
                "    let stride = 1; // any positive integer",
                "    special.accel_len(stride);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(special.accel_len(stride), 0);"
              ],
              "code": [
                "{",
                "    let special = Special {",
                "        max: StateID(1),",
                "        quit_id: StateID(2),",
                "        min_match: StateID(3),",
                "        max_match: StateID(4),",
                "        min_accel: DEAD,",
                "        max_accel: DEAD,",
                "        min_start: StateID(5),",
                "        max_start: StateID(6),",
                "    };",
                "    let stride = 1; // any positive integer",
                "    special.accel_len(stride);",
                "    assert_eq!(special.accel_len(stride), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let special = Special {",
                "        max: StateID(1),",
                "        quit_id: StateID(2),",
                "        min_match: StateID(3),",
                "        max_match: StateID(4),",
                "        min_accel: DEAD,",
                "        max_accel: DEAD,",
                "        min_start: StateID(5),",
                "        max_start: StateID(6),",
                "    };",
                "    let stride = 2; // any positive integer",
                "    special.accel_len(stride);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(special.accel_len(stride), 0);"
              ],
              "code": [
                "{",
                "    let special = Special {",
                "        max: StateID(1),",
                "        quit_id: StateID(2),",
                "        min_match: StateID(3),",
                "        max_match: StateID(4),",
                "        min_accel: DEAD,",
                "        max_accel: DEAD,",
                "        min_start: StateID(5),",
                "        max_start: StateID(6),",
                "    };",
                "    let stride = 2; // any positive integer",
                "    special.accel_len(stride);",
                "    assert_eq!(special.accel_len(stride), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let special = Special {",
                "        max: StateID(1),",
                "        quit_id: StateID(2),",
                "        min_match: StateID(3),",
                "        max_match: StateID(4),",
                "        min_accel: DEAD,",
                "        max_accel: DEAD,",
                "        min_start: StateID(5),",
                "        max_start: StateID(6),",
                "    };",
                "    let stride = 10; // any positive integer",
                "    special.accel_len(stride);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(special.accel_len(stride), 0);"
              ],
              "code": [
                "{",
                "    let special = Special {",
                "        max: StateID(1),",
                "        quit_id: StateID(2),",
                "        min_match: StateID(3),",
                "        max_match: StateID(4),",
                "        min_accel: DEAD,",
                "        max_accel: DEAD,",
                "        min_start: StateID(5),",
                "        max_start: StateID(6),",
                "    };",
                "    let stride = 10; // any positive integer",
                "    special.accel_len(stride);",
                "    assert_eq!(special.accel_len(stride), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}