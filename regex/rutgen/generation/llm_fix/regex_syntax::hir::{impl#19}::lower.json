{
  "name": "regex_syntax::hir::{impl#19}::lower",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:1528:5:1530:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.start\n"
      ],
      "input_infer": "self.start should be within the range of 0 to 255, inclusive\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ClassBytesRange { start: 0, end: 100 };",
                "    let result = range.lower();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0);"
              ],
              "code": [
                "{",
                "    let range = ClassBytesRange { start: 0, end: 100 };",
                "    let result = range.lower();",
                "    assert_eq!(result, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ClassBytesRange { start: 128, end: 200 };",
                "    let result = range.lower();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 128);"
              ],
              "code": [
                "{",
                "    let range = ClassBytesRange { start: 128, end: 200 };",
                "    let result = range.lower();",
                "    assert_eq!(result, 128);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ClassBytesRange { start: 255, end: 255 };",
                "    let result = range.lower();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 255);"
              ],
              "code": [
                "{",
                "    let range = ClassBytesRange { start: 255, end: 255 };",
                "    let result = range.lower();",
                "    assert_eq!(result, 255);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ClassBytesRange { start: 255, end: 0 };",
                "    let result = range.lower();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 255);"
              ],
              "code": [
                "{",
                "    let range = ClassBytesRange { start: 255, end: 0 };",
                "    let result = range.lower();",
                "    assert_eq!(result, 255);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ClassBytesRange { start: 0, end: 0 };",
                "    let result = range.lower();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0);"
              ],
              "code": [
                "{",
                "    let range = ClassBytesRange { start: 0, end: 0 };",
                "    let result = range.lower();",
                "    assert_eq!(result, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}