{
  "name": "regex_automata::dfa::sparse::{impl#12}::len",
  "mod_info": {
    "name": "dfa::sparse",
    "loc": "regex-automata/src/dfa/mod.rs:343:1:343:16"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/sparse.rs:2116:5:2118:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.table().len() / StateID::SIZE\n"
      ],
      "input_infer": "self.table() must be a non-empty byte slice with length divisible by StateID::SIZE (4 or 8 bytes), resulting in a return value between 1 and (self.table().len() / StateID::SIZE) where StateID::SIZE is 4 or 8 bytes, inclusive, covering scenarios where length is exactly 4 or 8 bytes and beyond, while also testing with lengths just below and above these boundaries.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: &[u8] = &[0, 1, 2, 3];",
                "    let start_map = StartByteMap { map: [Start::default(); 256] };",
                "    let start_table = StartTable {",
                "        table,",
                "        kind: StartKind::Both,",
                "        start_map,",
                "        stride: 1,",
                "        pattern_len: Some(1),",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: None,",
                "    };",
                "    let _ = start_table.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(start_table.len(), 4 / StateID::SIZE);",
                "    assert_eq!(start_table.len(), expected_value_when_table_length_is_4);",
                "    let empty_table: &[u8] = &[];",
                "    let empty_start_table = StartTable { table: empty_table, kind: StartKind::Both, start_map, stride: 1, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None };",
                "    assert_eq!(empty_start_table.len(), 0);",
                "    let table_with_zero_state_ids: &[u8] = &[0; 0];",
                "    let zero_state_start_table = StartTable { table: table_with_zero_state_ids, kind: StartKind::Both, start_map, stride: 1, pattern_len: Some(1), universal_start_unanchored: None, universal_start_anchored: None };",
                "    assert_eq!(zero_state_start_table.len(), 0);",
                "    let table_with_eight_bytes: &[u8] = &[0, 1, 2, 3, 4, 5, 6, 7];",
                "    let eight_byte_start_table = StartTable { table: table_with_eight_bytes, kind: StartKind::Both, start_map, stride: 1, pattern_len: Some(1), universal_start_unanchored: None, universal_start_anchored: None };",
                "    assert_eq!(eight_byte_start_table.len(), 8 / StateID::SIZE);"
              ],
              "code": [
                "{",
                "    let table: &[u8] = &[0, 1, 2, 3];",
                "    let start_map = StartByteMap { map: [Start::default(); 256] };",
                "    let start_table = StartTable {",
                "        table,",
                "        kind: StartKind::Both,",
                "        start_map,",
                "        stride: 1,",
                "        pattern_len: Some(1),",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: None,",
                "    };",
                "    let _ = start_table.len();",
                "    assert_eq!(start_table.len(), 4 / StateID::SIZE);",
                "    assert_eq!(start_table.len(), expected_value_when_table_length_is_4);",
                "    let empty_table: &[u8] = &[];",
                "    let empty_start_table = StartTable { table: empty_table, kind: StartKind::Both, start_map, stride: 1, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None };",
                "    assert_eq!(empty_start_table.len(), 0);",
                "    let table_with_zero_state_ids: &[u8] = &[0; 0];",
                "    let zero_state_start_table = StartTable { table: table_with_zero_state_ids, kind: StartKind::Both, start_map, stride: 1, pattern_len: Some(1), universal_start_unanchored: None, universal_start_anchored: None };",
                "    assert_eq!(zero_state_start_table.len(), 0);",
                "    let table_with_eight_bytes: &[u8] = &[0, 1, 2, 3, 4, 5, 6, 7];",
                "    let eight_byte_start_table = StartTable { table: table_with_eight_bytes, kind: StartKind::Both, start_map, stride: 1, pattern_len: Some(1), universal_start_unanchored: None, universal_start_anchored: None };",
                "    assert_eq!(eight_byte_start_table.len(), 8 / StateID::SIZE);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: &[u8] = &[0, 1, 2, 3, 4, 5, 6, 7];",
                "    let start_map = StartByteMap { map: [Start::default(); 256] };",
                "    let start_table = StartTable {",
                "        table,",
                "        kind: StartKind::Both,",
                "        start_map,",
                "        stride: 2,",
                "        pattern_len: Some(2),",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: None,",
                "    };",
                "    let _ = start_table.len();",
                "}"
              ],
              "oracle": [
                "    let table: &[u8] = &[0, 1, 2, 3, 4, 5, 6, 7];",
                "    assert_eq!(start_table.len(), 1);",
                "    let table: &[u8] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9];",
                "    assert_eq!(start_table.len(), 1);",
                "    let table: &[u8] = &[0];",
                "    assert_eq!(start_table.len(), 0);",
                "    let table: &[u8] = &[];",
                "    assert_eq!(start_table.len(), 0);",
                "    let table: &[u8] = &[0, 1, 2, 3, 4, 5];",
                "    assert_eq!(start_table.len(), 0);",
                "    let table: &[u8] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];",
                "    assert_eq!(start_table.len(), 1);",
                "    let table: &[u8] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];",
                "    assert_eq!(start_table.len(), 2);",
                "    let table: &[u8] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];",
                "    assert_eq!(start_table.len(), 2);",
                "    let table: &[u8] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17];",
                "    assert_eq!(start_table.len(), 2);",
                "    let table: &[u8] = &[0; 16];",
                "    assert_eq!(start_table.len(), 2);",
                "    let table: &[u8] = &[0, 1, 2];",
                "    assert_eq!(start_table.len(), 0);"
              ],
              "code": [
                "{",
                "    let table: &[u8] = &[0, 1, 2, 3, 4, 5, 6, 7];",
                "    let start_map = StartByteMap { map: [Start::default(); 256] };",
                "    let start_table = StartTable {",
                "        table,",
                "        kind: StartKind::Both,",
                "        start_map,",
                "        stride: 2,",
                "        pattern_len: Some(2),",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: None,",
                "    };",
                "    let _ = start_table.len();",
                "    let table: &[u8] = &[0, 1, 2, 3, 4, 5, 6, 7];",
                "    assert_eq!(start_table.len(), 1);",
                "    let table: &[u8] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9];",
                "    assert_eq!(start_table.len(), 1);",
                "    let table: &[u8] = &[0];",
                "    assert_eq!(start_table.len(), 0);",
                "    let table: &[u8] = &[];",
                "    assert_eq!(start_table.len(), 0);",
                "    let table: &[u8] = &[0, 1, 2, 3, 4, 5];",
                "    assert_eq!(start_table.len(), 0);",
                "    let table: &[u8] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];",
                "    assert_eq!(start_table.len(), 1);",
                "    let table: &[u8] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];",
                "    assert_eq!(start_table.len(), 2);",
                "    let table: &[u8] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];",
                "    assert_eq!(start_table.len(), 2);",
                "    let table: &[u8] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17];",
                "    assert_eq!(start_table.len(), 2);",
                "    let table: &[u8] = &[0; 16];",
                "    assert_eq!(start_table.len(), 2);",
                "    let table: &[u8] = &[0, 1, 2];",
                "    assert_eq!(start_table.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: &[u8] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];",
                "    let start_map = StartByteMap { map: [Start::default(); 256] };",
                "    let start_table = StartTable {",
                "        table,",
                "        kind: StartKind::Both,",
                "        start_map,",
                "        stride: 3,",
                "        pattern_len: Some(3),",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: None,",
                "    };",
                "    let _ = start_table.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(start_table.len(), 12 / StateID::SIZE);",
                "    assert_eq!(start_table.table().len(), 12);",
                "    assert!(start_table.kind == StartKind::Both);",
                "    assert!(start_table.stride == 3);",
                "    assert!(start_table.pattern_len.is_some() && start_table.pattern_len.unwrap() == 3);",
                "    assert!(start_table.universal_start_unanchored.is_none());",
                "    assert!(start_table.universal_start_anchored.is_none());"
              ],
              "code": [
                "{",
                "    let table: &[u8] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];",
                "    let start_map = StartByteMap { map: [Start::default(); 256] };",
                "    let start_table = StartTable {",
                "        table,",
                "        kind: StartKind::Both,",
                "        start_map,",
                "        stride: 3,",
                "        pattern_len: Some(3),",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: None,",
                "    };",
                "    let _ = start_table.len();",
                "    assert_eq!(start_table.len(), 12 / StateID::SIZE);",
                "    assert_eq!(start_table.table().len(), 12);",
                "    assert!(start_table.kind == StartKind::Both);",
                "    assert!(start_table.stride == 3);",
                "    assert!(start_table.pattern_len.is_some() && start_table.pattern_len.unwrap() == 3);",
                "    assert!(start_table.universal_start_unanchored.is_none());",
                "    assert!(start_table.universal_start_anchored.is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: &[u8] = &[0, 1, 2, 3, 4, 5, 6, 7, 8];",
                "    let start_map = StartByteMap { map: [Start::default(); 256] };",
                "    let start_table = StartTable {",
                "        table,",
                "        kind: StartKind::Both,",
                "        start_map,",
                "        stride: 2,",
                "        pattern_len: None,",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: None,",
                "    };",
                "    let _ = start_table.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(start_table.len(), 8 / StateID::SIZE);",
                "    let table: &[u8] = &[0; 16];",
                "    let start_table = StartTable { table, kind: StartKind::Both, start_map, stride: 2, pattern_len: Some(2), universal_start_unanchored: None, universal_start_anchored: None };",
                "    assert_eq!(start_table.len(), 16 / StateID::SIZE);",
                "    let table: &[u8] = &[0];",
                "    let start_table = StartTable { table, kind: StartKind::Unanchored, start_map, stride: 1, pattern_len: Some(0), universal_start_unanchored: None, universal_start_anchored: None };",
                "    assert_eq!(start_table.len(), 1 / StateID::SIZE);",
                "    let table: &[u8] = &[];",
                "    let start_table = StartTable { table, kind: StartKind::Anchored, start_map, stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None };",
                "    assert_eq!(start_table.len(), 0 / StateID::SIZE);"
              ],
              "code": [
                "{",
                "    let table: &[u8] = &[0, 1, 2, 3, 4, 5, 6, 7, 8];",
                "    let start_map = StartByteMap { map: [Start::default(); 256] };",
                "    let start_table = StartTable {",
                "        table,",
                "        kind: StartKind::Both,",
                "        start_map,",
                "        stride: 2,",
                "        pattern_len: None,",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: None,",
                "    };",
                "    let _ = start_table.len();",
                "    assert_eq!(start_table.len(), 8 / StateID::SIZE);",
                "    let table: &[u8] = &[0; 16];",
                "    let start_table = StartTable { table, kind: StartKind::Both, start_map, stride: 2, pattern_len: Some(2), universal_start_unanchored: None, universal_start_anchored: None };",
                "    assert_eq!(start_table.len(), 16 / StateID::SIZE);",
                "    let table: &[u8] = &[0];",
                "    let start_table = StartTable { table, kind: StartKind::Unanchored, start_map, stride: 1, pattern_len: Some(0), universal_start_unanchored: None, universal_start_anchored: None };",
                "    assert_eq!(start_table.len(), 1 / StateID::SIZE);",
                "    let table: &[u8] = &[];",
                "    let start_table = StartTable { table, kind: StartKind::Anchored, start_map, stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None };",
                "    assert_eq!(start_table.len(), 0 / StateID::SIZE);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: &[u8] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];",
                "    let start_map = StartByteMap { map: [Start::default(); 256] };",
                "    let start_table = StartTable {",
                "        table,",
                "        kind: StartKind::Both,",
                "        start_map,",
                "        stride: 4,",
                "        pattern_len: Some(4),",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: None,",
                "    };",
                "    let _ = start_table.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(start_table.len(), 2);"
              ],
              "code": [
                "{",
                "    let table: &[u8] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];",
                "    let start_map = StartByteMap { map: [Start::default(); 256] };",
                "    let start_table = StartTable {",
                "        table,",
                "        kind: StartKind::Both,",
                "        start_map,",
                "        stride: 4,",
                "        pattern_len: Some(4),",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: None,",
                "    };",
                "    let _ = start_table.len();",
                "    assert_eq!(start_table.len(), 2);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}