{
  "name": "regex_syntax::hir::{impl#25}::is_utf8",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:2140:5:2142:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.0.utf8\n"
      ],
      "input_infer": "self.0.utf8 = true for patterns like \"a\", \"[^a]\", \".\", \"\\W\", \"\\b\", \"\\B\", \"(?-u)\\b\", \"(?-u)\\B\", \"\\xFF\"; self.0.utf8 = false for patterns like \"(?-u)[^a]\", \"(?-u).\", \"(?-u)\\W\", \"(?-u)\\xFF\".\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let test_patterns = [",
                "        \"a\",",
                "        \"[^a]\",",
                "        \".\",",
                "        \"\\\\W\",",
                "        \"\\\\b\",",
                "        \"\\\\B\",",
                "        \"(?-u)\\\\b\",",
                "        \"(?-u)\\\\B\",",
                "        \"\\\\xFF\",",
                "    ];",
                "",
                "    for pattern in &test_patterns {",
                "        let properties = regex_syntax::ParserBuilder::new()",
                "            .utf8(true)",
                "            .build()",
                "            .parse(pattern)",
                "            .unwrap()",
                "            .properties();",
                "        properties.is_utf8();",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\"a\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\"[^a]\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\".\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\"\\\\W\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\"\\\\b\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\"\\\\B\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\"(?-u)\\\\b\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\"(?-u)\\\\B\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\"\\\\xFF\").unwrap().properties().is_utf8());"
              ],
              "code": [
                "{",
                "    let test_patterns = [",
                "        \"a\",",
                "        \"[^a]\",",
                "        \".\",",
                "        \"\\\\W\",",
                "        \"\\\\b\",",
                "        \"\\\\B\",",
                "        \"(?-u)\\\\b\",",
                "        \"(?-u)\\\\B\",",
                "        \"\\\\xFF\",",
                "    ];",
                "",
                "    for pattern in &test_patterns {",
                "        let properties = regex_syntax::ParserBuilder::new()",
                "            .utf8(true)",
                "            .build()",
                "            .parse(pattern)",
                "            .unwrap()",
                "            .properties();",
                "        properties.is_utf8();",
                "    }",
                "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\"a\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\"[^a]\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\".\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\"\\\\W\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\"\\\\b\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\"\\\\B\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\"(?-u)\\\\b\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\"(?-u)\\\\B\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\"\\\\xFF\").unwrap().properties().is_utf8());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let test_patterns = [",
                "        \"(?-u)[^a]\",",
                "        \"(?-u).\",",
                "        \"(?-u)\\\\W\",",
                "        \"(?-u)\\\\xFF\",",
                "    ];",
                "",
                "    for pattern in &test_patterns {",
                "        let properties = regex_syntax::ParserBuilder::new()",
                "            .utf8(false)",
                "            .build()",
                "            .parse(pattern)",
                "            .unwrap()",
                "            .properties();",
                "        properties.is_utf8();",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert!(!regex_syntax::ParserBuilder::new().utf8(false).build().parse(r\"(?-u)[^a]\").unwrap().properties().is_utf8());",
                "    assert!(!regex_syntax::ParserBuilder::new().utf8(false).build().parse(r\"(?-u).\").unwrap().properties().is_utf8());",
                "    assert!(!regex_syntax::ParserBuilder::new().utf8(false).build().parse(r\"(?-u)\\W\").unwrap().properties().is_utf8());",
                "    assert!(!regex_syntax::ParserBuilder::new().utf8(false).build().parse(r\"(?-u)\\xFF\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"\\xFF\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"(?-u)\\xE2\\x98\\x83\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"a\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"[^a]\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\".\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"\\W\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"\\b\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"\\B\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"(?-u)\\b\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"(?-u)\\B\").unwrap().properties().is_utf8());"
              ],
              "code": [
                "{",
                "    let test_patterns = [",
                "        \"(?-u)[^a]\",",
                "        \"(?-u).\",",
                "        \"(?-u)\\\\W\",",
                "        \"(?-u)\\\\xFF\",",
                "    ];",
                "",
                "    for pattern in &test_patterns {",
                "        let properties = regex_syntax::ParserBuilder::new()",
                "            .utf8(false)",
                "            .build()",
                "            .parse(pattern)",
                "            .unwrap()",
                "            .properties();",
                "        properties.is_utf8();",
                "    }",
                "    assert!(!regex_syntax::ParserBuilder::new().utf8(false).build().parse(r\"(?-u)[^a]\").unwrap().properties().is_utf8());",
                "    assert!(!regex_syntax::ParserBuilder::new().utf8(false).build().parse(r\"(?-u).\").unwrap().properties().is_utf8());",
                "    assert!(!regex_syntax::ParserBuilder::new().utf8(false).build().parse(r\"(?-u)\\W\").unwrap().properties().is_utf8());",
                "    assert!(!regex_syntax::ParserBuilder::new().utf8(false).build().parse(r\"(?-u)\\xFF\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"\\xFF\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"(?-u)\\xE2\\x98\\x83\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"a\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"[^a]\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\".\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"\\W\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"\\b\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"\\B\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"(?-u)\\b\").unwrap().properties().is_utf8());",
                "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"(?-u)\\B\").unwrap().properties().is_utf8());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}