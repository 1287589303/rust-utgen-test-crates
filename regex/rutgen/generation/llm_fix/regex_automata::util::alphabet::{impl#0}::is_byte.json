{
  "name": "regex_automata::util::alphabet::{impl#0}::is_byte",
  "mod_info": {
    "name": "util::alphabet",
    "loc": "regex-automata/src/util/mod.rs:30:1:30:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/alphabet.rs:158:5:160:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self must be an instance of the Unit struct, byte must be within the range 0 to 255, and expected return values are true if the Unit contains a U8 value equal to byte, false if it contains an EOI value or a U8 value not equal to byte.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let unit = Unit::u8(100);",
                "    assert!(unit.is_byte(100));",
                "}"
              ],
              "oracle": [
                "    assert!(unit.is_byte(100));",
                "    assert!(!unit.is_byte(101));",
                "    let eoi_unit = Unit::eoi(0);",
                "    assert!(!eoi_unit.is_byte(100));",
                "    assert!(!eoi_unit.is_byte(255));",
                "    let unit_50 = Unit::u8(50);",
                "    assert!(unit_50.is_byte(50));",
                "    assert!(!unit_50.is_byte(0));",
                "    assert!(!unit_50.is_byte(255));",
                "    let unit_255 = Unit::u8(255);",
                "    assert!(unit_255.is_byte(255));",
                "    assert!(!unit_255.is_byte(254));",
                "    assert!(!unit_255.is_byte(128));"
              ],
              "code": [
                "{",
                "    let unit = Unit::u8(100);",
                "    assert!(unit.is_byte(100));",
                "    assert!(unit.is_byte(100));",
                "    assert!(!unit.is_byte(101));",
                "    let eoi_unit = Unit::eoi(0);",
                "    assert!(!eoi_unit.is_byte(100));",
                "    assert!(!eoi_unit.is_byte(255));",
                "    let unit_50 = Unit::u8(50);",
                "    assert!(unit_50.is_byte(50));",
                "    assert!(!unit_50.is_byte(0));",
                "    assert!(!unit_50.is_byte(255));",
                "    let unit_255 = Unit::u8(255);",
                "    assert!(unit_255.is_byte(255));",
                "    assert!(!unit_255.is_byte(254));",
                "    assert!(!unit_255.is_byte(128));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let unit = Unit::u8(150);",
                "    assert!(!unit.is_byte(100));",
                "}"
              ],
              "oracle": [
                "    assert!(!Unit::u8(150).is_byte(100));",
                "    assert!(Unit::u8(150).is_byte(150));",
                "    assert!(!Unit::eoi(2).is_byte(150));",
                "    assert!(Unit::u8(0).is_byte(0));",
                "    assert!(!Unit::u8(255).is_byte(0));",
                "    assert!(Unit::u8(1).is_byte(1));",
                "    assert!(!Unit::u8(10).is_byte(20));"
              ],
              "code": [
                "{",
                "    let unit = Unit::u8(150);",
                "    assert!(!unit.is_byte(100));",
                "    assert!(!Unit::u8(150).is_byte(100));",
                "    assert!(Unit::u8(150).is_byte(150));",
                "    assert!(!Unit::eoi(2).is_byte(150));",
                "    assert!(Unit::u8(0).is_byte(0));",
                "    assert!(!Unit::u8(255).is_byte(0));",
                "    assert!(Unit::u8(1).is_byte(1));",
                "    assert!(!Unit::u8(10).is_byte(20));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let unit = Unit::eoi(256);",
                "    assert!(!unit.is_byte(100));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(unit.is_byte(100), false);",
                "    let unit = Unit::u8(100);",
                "    assert_eq!(unit.is_byte(100), true);",
                "    assert_eq!(unit.is_byte(101), false);",
                "    let unit = Unit::u8(0);",
                "    assert_eq!(unit.is_byte(0), true);",
                "    assert_eq!(unit.is_byte(1), false);",
                "    let unit = Unit::eoi(1);",
                "    assert_eq!(unit.is_byte(0), false);",
                "    assert_eq!(unit.is_byte(255), false);"
              ],
              "code": [
                "{",
                "    let unit = Unit::eoi(256);",
                "    assert!(!unit.is_byte(100));",
                "    assert_eq!(unit.is_byte(100), false);",
                "    let unit = Unit::u8(100);",
                "    assert_eq!(unit.is_byte(100), true);",
                "    assert_eq!(unit.is_byte(101), false);",
                "    let unit = Unit::u8(0);",
                "    assert_eq!(unit.is_byte(0), true);",
                "    assert_eq!(unit.is_byte(1), false);",
                "    let unit = Unit::eoi(1);",
                "    assert_eq!(unit.is_byte(0), false);",
                "    assert_eq!(unit.is_byte(255), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let unit = Unit::u8(0);",
                "    assert!(unit.is_byte(0));",
                "}"
              ],
              "oracle": [
                "    assert!(Unit::u8(0).is_byte(0));",
                "    assert!(!Unit::u8(1).is_byte(0));",
                "    assert!(!Unit::eoi(1).is_byte(0));",
                "    assert!(!Unit::eoi(1).is_byte(255));",
                "    assert!(Unit::u8(255).is_byte(255));",
                "    assert!(!Unit::u8(255).is_byte(0));",
                "    assert!(Unit::u8(127).is_byte(127));"
              ],
              "code": [
                "{",
                "    let unit = Unit::u8(0);",
                "    assert!(unit.is_byte(0));",
                "    assert!(Unit::u8(0).is_byte(0));",
                "    assert!(!Unit::u8(1).is_byte(0));",
                "    assert!(!Unit::eoi(1).is_byte(0));",
                "    assert!(!Unit::eoi(1).is_byte(255));",
                "    assert!(Unit::u8(255).is_byte(255));",
                "    assert!(!Unit::u8(255).is_byte(0));",
                "    assert!(Unit::u8(127).is_byte(127));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let unit = Unit::u8(255);",
                "    assert!(unit.is_byte(255));",
                "}"
              ],
              "oracle": [
                "    assert!(Unit::u8(0).is_byte(0));",
                "    assert!(!Unit::u8(1).is_byte(0));",
                "    assert!(Unit::u8(128).is_byte(128));",
                "    assert!(!Unit::u8(255).is_byte(254));",
                "    assert!(Unit::eoi(0).is_byte(0));",
                "    assert!(Unit::eoi(0).is_byte(255));",
                "    assert!(Unit::eoi(1).is_byte(128));"
              ],
              "code": [
                "{",
                "    let unit = Unit::u8(255);",
                "    assert!(unit.is_byte(255));",
                "    assert!(Unit::u8(0).is_byte(0));",
                "    assert!(!Unit::u8(1).is_byte(0));",
                "    assert!(Unit::u8(128).is_byte(128));",
                "    assert!(!Unit::u8(255).is_byte(254));",
                "    assert!(Unit::eoi(0).is_byte(0));",
                "    assert!(Unit::eoi(0).is_byte(255));",
                "    assert!(Unit::eoi(1).is_byte(128));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let unit = Unit::u8(0);",
                "    assert!(!unit.is_byte(1));",
                "}"
              ],
              "oracle": [
                "    assert!(Unit::u8(0).is_byte(0));",
                "    assert!(!Unit::u8(1).is_byte(0));",
                "    assert!(Unit::u8(255).is_byte(255));",
                "    assert!(!Unit::u8(255).is_byte(254));",
                "    assert!(!Unit::eoi(5).is_byte(0));",
                "    assert!(!Unit::eoi(5).is_byte(255));"
              ],
              "code": [
                "{",
                "    let unit = Unit::u8(0);",
                "    assert!(!unit.is_byte(1));",
                "    assert!(Unit::u8(0).is_byte(0));",
                "    assert!(!Unit::u8(1).is_byte(0));",
                "    assert!(Unit::u8(255).is_byte(255));",
                "    assert!(!Unit::u8(255).is_byte(254));",
                "    assert!(!Unit::eoi(5).is_byte(0));",
                "    assert!(!Unit::eoi(5).is_byte(255));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let unit = Unit::u8(255);",
                "    assert!(!unit.is_byte(254));",
                "}"
              ],
              "oracle": [
                "    assert!(unit.is_byte(255));",
                "    let unit = Unit::eoi(2);",
                "    assert!(!unit.is_byte(0));",
                "    let unit = Unit::u8(0);",
                "    assert!(unit.is_byte(0));",
                "    let unit = Unit::u8(127);",
                "    assert!(unit.is_byte(127));",
                "    let unit = Unit::u8(128);",
                "    assert!(unit.is_byte(128));",
                "    let unit = Unit::u8(1);",
                "    assert!(!unit.is_byte(2));",
                "    let unit = Unit::u8(5);",
                "    assert!(unit.is_byte(5));",
                "    let unit = Unit::u8(255);",
                "    assert!(unit.is_byte(255));",
                "    let unit = Unit::eoi(5);",
                "    assert!(!unit.is_byte(5));"
              ],
              "code": [
                "{",
                "    let unit = Unit::u8(255);",
                "    assert!(!unit.is_byte(254));",
                "    assert!(unit.is_byte(255));",
                "    let unit = Unit::eoi(2);",
                "    assert!(!unit.is_byte(0));",
                "    let unit = Unit::u8(0);",
                "    assert!(unit.is_byte(0));",
                "    let unit = Unit::u8(127);",
                "    assert!(unit.is_byte(127));",
                "    let unit = Unit::u8(128);",
                "    assert!(unit.is_byte(128));",
                "    let unit = Unit::u8(1);",
                "    assert!(!unit.is_byte(2));",
                "    let unit = Unit::u8(5);",
                "    assert!(unit.is_byte(5));",
                "    let unit = Unit::u8(255);",
                "    assert!(unit.is_byte(255));",
                "    let unit = Unit::eoi(5);",
                "    assert!(!unit.is_byte(5));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}