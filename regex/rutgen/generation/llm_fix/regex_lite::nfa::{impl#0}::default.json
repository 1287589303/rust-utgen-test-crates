{
  "name": "regex_lite::nfa::{impl#0}::default",
  "mod_info": {
    "name": "nfa",
    "loc": "regex-lite/src/lib.rs:880:1:880:9"
  },
  "visible": true,
  "loc": "regex-lite/src/nfa.rs:19:5:21:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Config { size_limit: Some(10 * (1 << 20)) }\n"
      ],
      "input_infer": "size_limit: None, size_limit: Some(0), size_limit: Some(1), size_limit: Some(10), size_limit: Some(1048576), size_limit: Some(2097152), size_limit: Some(4294967295)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::default();",
                "}"
              ],
              "oracle": [
                "    let config = Config::default();",
                "    assert_eq!(config.size_limit, Some(10 * (1 << 20)));",
                "    assert!(config.size_limit.is_some());",
                "    assert!(config.size_limit.unwrap() > 0);",
                "    assert_eq!(config.size_limit.unwrap(), 10485760);"
              ],
              "code": [
                "{",
                "    let config = Config::default();",
                "    let config = Config::default();",
                "    assert_eq!(config.size_limit, Some(10 * (1 << 20)));",
                "    assert!(config.size_limit.is_some());",
                "    assert!(config.size_limit.unwrap() > 0);",
                "    assert_eq!(config.size_limit.unwrap(), 10485760);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { size_limit: None };",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Config::default().size_limit, Some(10 * (1 << 20)));"
              ],
              "code": [
                "{",
                "    let config = Config { size_limit: None };",
                "    assert_eq!(Config::default().size_limit, Some(10 * (1 << 20)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { size_limit: Some(0) };",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.size_limit, Some(0));",
                "    let default_config = Config::default();",
                "    assert_eq!(default_config.size_limit, Some(10 * (1 << 20)));",
                "    assert!(default_config.size_limit.is_some());",
                "    assert!(config.size_limit.is_some());"
              ],
              "code": [
                "{",
                "    let config = Config { size_limit: Some(0) };",
                "    assert_eq!(config.size_limit, Some(0));",
                "    let default_config = Config::default();",
                "    assert_eq!(default_config.size_limit, Some(10 * (1 << 20)));",
                "    assert!(default_config.size_limit.is_some());",
                "    assert!(config.size_limit.is_some());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { size_limit: Some(1) };",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.size_limit, Some(1));",
                "    assert!(config.size_limit.is_some());",
                "    assert!(config.size_limit.unwrap() < Config::default().size_limit.unwrap());",
                "    assert!(config.size_limit.unwrap() < 10 * (1 << 20));",
                "    assert_eq!(config.size_limit.unwrap(), 1);"
              ],
              "code": [
                "{",
                "    let config = Config { size_limit: Some(1) };",
                "    assert_eq!(config.size_limit, Some(1));",
                "    assert!(config.size_limit.is_some());",
                "    assert!(config.size_limit.unwrap() < Config::default().size_limit.unwrap());",
                "    assert!(config.size_limit.unwrap() < 10 * (1 << 20));",
                "    assert_eq!(config.size_limit.unwrap(), 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { size_limit: Some(10) };",
                "}"
              ],
              "oracle": [
                "    let config = Config::default();",
                "    assert_eq!(config.size_limit, Some(10 * (1 << 20)));",
                "    assert!(config.size_limit.is_some());",
                "    assert!(config.size_limit.unwrap() > 0);",
                "    assert_eq!(config.size_limit.unwrap(), 10485760);"
              ],
              "code": [
                "{",
                "    let config = Config { size_limit: Some(10) };",
                "    let config = Config::default();",
                "    assert_eq!(config.size_limit, Some(10 * (1 << 20)));",
                "    assert!(config.size_limit.is_some());",
                "    assert!(config.size_limit.unwrap() > 0);",
                "    assert_eq!(config.size_limit.unwrap(), 10485760);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { size_limit: Some(1048576) };",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.size_limit, Some(1048576));",
                "    assert!(config.size_limit.is_some());",
                "    assert_eq!(config.size_limit.unwrap(), 10 * (1 << 20));",
                "    assert!(matches!(config, Config { size_limit: Some(_), .. }));",
                "    assert_ne!(config.size_limit, None);"
              ],
              "code": [
                "{",
                "    let config = Config { size_limit: Some(1048576) };",
                "    assert_eq!(config.size_limit, Some(1048576));",
                "    assert!(config.size_limit.is_some());",
                "    assert_eq!(config.size_limit.unwrap(), 10 * (1 << 20));",
                "    assert!(matches!(config, Config { size_limit: Some(_), .. }));",
                "    assert_ne!(config.size_limit, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { size_limit: Some(2097152) };",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.size_limit, Some(2097152));",
                "    assert!(config.size_limit.is_some());",
                "    assert_eq!(config.size_limit.unwrap(), 10 * (1 << 20));",
                "    assert!(config.size_limit.unwrap() > 0);",
                "    assert!(config.size_limit.unwrap() == 2097152);"
              ],
              "code": [
                "{",
                "    let config = Config { size_limit: Some(2097152) };",
                "    assert_eq!(config.size_limit, Some(2097152));",
                "    assert!(config.size_limit.is_some());",
                "    assert_eq!(config.size_limit.unwrap(), 10 * (1 << 20));",
                "    assert!(config.size_limit.unwrap() > 0);",
                "    assert!(config.size_limit.unwrap() == 2097152);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { size_limit: Some(4294967295) };",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.size_limit, Some(10 * (1 << 20)));",
                "    assert!(config.size_limit.is_some());",
                "    assert!(config.size_limit.unwrap() == 10485760);",
                "    assert!(config.size_limit.unwrap() <= 4294967295);",
                "    assert!(config.size_limit.unwrap() > 0);",
                "    assert_eq!(config.size_limit.unwrap().to_string(), \"10485760\");",
                "    assert!(matches!(config, Config { size_limit: Some(_) }));",
                "    assert!(config.size_limit.is_instance_of::<Option<usize>>());"
              ],
              "code": [
                "{",
                "    let config = Config { size_limit: Some(4294967295) };",
                "    assert_eq!(config.size_limit, Some(10 * (1 << 20)));",
                "    assert!(config.size_limit.is_some());",
                "    assert!(config.size_limit.unwrap() == 10485760);",
                "    assert!(config.size_limit.unwrap() <= 4294967295);",
                "    assert!(config.size_limit.unwrap() > 0);",
                "    assert_eq!(config.size_limit.unwrap().to_string(), \"10485760\");",
                "    assert!(matches!(config, Config { size_limit: Some(_) }));",
                "    assert!(config.size_limit.is_instance_of::<Option<usize>>());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}