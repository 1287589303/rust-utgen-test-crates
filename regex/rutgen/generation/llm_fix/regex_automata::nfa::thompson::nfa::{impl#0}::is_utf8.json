{
  "name": "regex_automata::nfa::thompson::nfa::{impl#0}::is_utf8",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:882:5:884:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.0.utf8\n"
      ],
      "input_infer": "self.0.utf8 input conditions: true (UTF-8 mode enabled), false (UTF-8 mode disabled)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nfa = NFA(Arc::new(Inner {",
                "        utf8: true,",
                "        ..Default::default()",
                "    }));",
                "    let _ = nfa.is_utf8();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(nfa.is_utf8(), true);",
                "    let nfa = NFA(Arc::new(Inner { utf8: false, ..Default::default() }));",
                "    assert_eq!(nfa.is_utf8(), false);"
              ],
              "code": [
                "{",
                "    let nfa = NFA(Arc::new(Inner {",
                "        utf8: true,",
                "        ..Default::default()",
                "    }));",
                "    let _ = nfa.is_utf8();",
                "    assert_eq!(nfa.is_utf8(), true);",
                "    let nfa = NFA(Arc::new(Inner { utf8: false, ..Default::default() }));",
                "    assert_eq!(nfa.is_utf8(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nfa = NFA(Arc::new(Inner {",
                "        utf8: false,",
                "        ..Default::default()",
                "    }));",
                "    let _ = nfa.is_utf8();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(nfa.is_utf8(), false);"
              ],
              "code": [
                "{",
                "    let nfa = NFA(Arc::new(Inner {",
                "        utf8: false,",
                "        ..Default::default()",
                "    }));",
                "    let _ = nfa.is_utf8();",
                "    assert_eq!(nfa.is_utf8(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}