{
  "name": "regex_automata::dfa::onepass::{impl#0}::byte_classes",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/onepass.rs:188:5:191:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "valid boolean inputs for `yes`: true, false\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new();",
                "    let result = config.byte_classes(true);",
                "}"
              ],
              "oracle": [],
              "code": [],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new();",
                "    let result = config.byte_classes(false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.get_byte_classes(), false);",
                "    assert!(result.byte_classes.is_some());",
                "    assert!(result.byte_classes.unwrap() == false);"
              ],
              "code": [
                "{",
                "    let config = Config::new();",
                "    let result = config.byte_classes(false);",
                "    assert_eq!(result.get_byte_classes(), false);",
                "    assert!(result.byte_classes.is_some());",
                "    assert!(result.byte_classes.unwrap() == false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}