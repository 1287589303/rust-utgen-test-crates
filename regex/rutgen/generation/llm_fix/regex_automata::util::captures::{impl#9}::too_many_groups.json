{
  "name": "regex_automata::util::captures::{impl#9}::too_many_groups",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": false,
  "loc": "regex-automata/src/util/captures.rs:2391:5:2395:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: GroupInfoError {\n            kind: GroupInfoErrorKind::TooManyGroups { pattern, minimum },\n        }\n"
      ],
      "input_infer": "PatternID values should range from 0 to the maximum allowable value, and minimum should be a positive integer value greater than or equal to 1.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern = PatternID(SmallIndex::from_u32(0).unwrap());",
                "    let minimum = 1;",
                "    let error = GroupInfoError::too_many_groups(pattern, minimum);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(error.kind, GroupInfoErrorKind::TooManyGroups { pattern, minimum });"
              ],
              "code": [
                "{",
                "    let pattern = PatternID(SmallIndex::from_u32(0).unwrap());",
                "    let minimum = 1;",
                "    let error = GroupInfoError::too_many_groups(pattern, minimum);",
                "    assert_eq!(error.kind, GroupInfoErrorKind::TooManyGroups { pattern, minimum });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern = PatternID(SmallIndex::from_u32(1).unwrap());",
                "    let minimum = 2;",
                "    let error = GroupInfoError::too_many_groups(pattern, minimum);",
                "}"
              ],
              "oracle": [
                "    error.kind == GroupInfoErrorKind::TooManyGroups { pattern: PatternID(SmallIndex::from_u32(1).unwrap()), minimum: 2 }"
              ],
              "code": [
                "{",
                "    let pattern = PatternID(SmallIndex::from_u32(1).unwrap());",
                "    let minimum = 2;",
                "    let error = GroupInfoError::too_many_groups(pattern, minimum);",
                "    error.kind == GroupInfoErrorKind::TooManyGroups { pattern: PatternID(SmallIndex::from_u32(1).unwrap()), minimum: 2 }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern = PatternID(SmallIndex::from_u32(u32::MAX).unwrap());",
                "    let minimum = 3;",
                "    let error = GroupInfoError::too_many_groups(pattern, minimum);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(error.kind, GroupInfoErrorKind::TooManyGroups { pattern, minimum });"
              ],
              "code": [
                "{",
                "    let pattern = PatternID(SmallIndex::from_u32(u32::MAX).unwrap());",
                "    let minimum = 3;",
                "    let error = GroupInfoError::too_many_groups(pattern, minimum);",
                "    assert_eq!(error.kind, GroupInfoErrorKind::TooManyGroups { pattern, minimum });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern = PatternID(SmallIndex::from_u32(2).unwrap());",
                "    let minimum = 10;",
                "    let error = GroupInfoError::too_many_groups(pattern, minimum);",
                "}"
              ],
              "oracle": [
                "    let expected_error = GroupInfoError {",
                "    kind: GroupInfoErrorKind::TooManyGroups {",
                "    pattern: PatternID(SmallIndex::from_u32(2).unwrap()),",
                "    minimum: 10,",
                "    },",
                "    };",
                "    assert_eq!(error, expected_error);"
              ],
              "code": [
                "{",
                "    let pattern = PatternID(SmallIndex::from_u32(2).unwrap());",
                "    let minimum = 10;",
                "    let error = GroupInfoError::too_many_groups(pattern, minimum);",
                "    let expected_error = GroupInfoError {",
                "    kind: GroupInfoErrorKind::TooManyGroups {",
                "    pattern: PatternID(SmallIndex::from_u32(2).unwrap()),",
                "    minimum: 10,",
                "    },",
                "    };",
                "    assert_eq!(error, expected_error);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}