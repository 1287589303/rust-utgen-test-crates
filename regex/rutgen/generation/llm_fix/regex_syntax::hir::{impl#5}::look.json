{
  "name": "regex_syntax::hir::{impl#5}::look",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:371:5:374:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Hir { kind: HirKind::Look(look), props }\n"
      ],
      "input_infer": "Look variants: Look::Start, Look::End, Look::StartLF, Look::EndLF, Look::StartCRLF, Look::EndCRLF, Look::WordAscii, Look::WordAsciiNegate, Look::WordUnicode, Look::WordUnicodeNegate, Look::WordStartAscii, Look::WordEndAscii, Look::WordStartUnicode, Look::WordEndUnicode, Look::WordStartHalfAscii, Look::WordEndHalfAscii, Look::WordStartHalfUnicode, Look::WordEndHalfUnicode.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Hir::look(Look::Start);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Look(Look::Start));",
                "    assert!(result.props.0.look_set.contains(Look::Start));",
                "    assert_eq!(result.props.0.minimum_len, Some(0));",
                "    assert_eq!(result.props.0.maximum_len, Some(0));",
                "    assert!(result.props.0.utf8);",
                "    assert_eq!(result.props.0.explicit_captures_len, 0);",
                "    assert_eq!(result.props.0.static_explicit_captures_len, Some(0));",
                "    assert!(!result.props.0.literal);",
                "    assert!(!result.props.0.alternation_literal);"
              ],
              "code": [
                "{",
                "    let result = Hir::look(Look::Start);",
                "    assert_eq!(result.kind, HirKind::Look(Look::Start));",
                "    assert!(result.props.0.look_set.contains(Look::Start));",
                "    assert_eq!(result.props.0.minimum_len, Some(0));",
                "    assert_eq!(result.props.0.maximum_len, Some(0));",
                "    assert!(result.props.0.utf8);",
                "    assert_eq!(result.props.0.explicit_captures_len, 0);",
                "    assert_eq!(result.props.0.static_explicit_captures_len, Some(0));",
                "    assert!(!result.props.0.literal);",
                "    assert!(!result.props.0.alternation_literal);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Hir::look(Look::End);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Look(Look::End));",
                "    assert_eq!(result.props.0.look_set, LookSet::singleton(Look::End));",
                "    assert_eq!(result.props.0.minimum_len, Some(0));",
                "    assert_eq!(result.props.0.maximum_len, Some(0));",
                "    assert!(result.props.0.utf8);",
                "    assert_eq!(result.props.0.explicit_captures_len, 0);",
                "    assert_eq!(result.props.0.static_explicit_captures_len, Some(0));",
                "    assert!(!result.props.0.literal);",
                "    assert!(!result.props.0.alternation_literal);"
              ],
              "code": [
                "{",
                "    let result = Hir::look(Look::End);",
                "    assert_eq!(result.kind, HirKind::Look(Look::End));",
                "    assert_eq!(result.props.0.look_set, LookSet::singleton(Look::End));",
                "    assert_eq!(result.props.0.minimum_len, Some(0));",
                "    assert_eq!(result.props.0.maximum_len, Some(0));",
                "    assert!(result.props.0.utf8);",
                "    assert_eq!(result.props.0.explicit_captures_len, 0);",
                "    assert_eq!(result.props.0.static_explicit_captures_len, Some(0));",
                "    assert!(!result.props.0.literal);",
                "    assert!(!result.props.0.alternation_literal);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Hir::look(Look::StartLF);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Look(Look::StartLF));",
                "    assert!(result.props.is_some());",
                "    assert_eq!(result.props.utf8, true);",
                "    assert_eq!(result.props.minimum_len, Some(0));",
                "    assert_eq!(result.props.maximum_len, Some(0));",
                "    assert!(result.props.look_set.contains(Look::StartLF));"
              ],
              "code": [
                "{",
                "    let result = Hir::look(Look::StartLF);",
                "    assert_eq!(result.kind, HirKind::Look(Look::StartLF));",
                "    assert!(result.props.is_some());",
                "    assert_eq!(result.props.utf8, true);",
                "    assert_eq!(result.props.minimum_len, Some(0));",
                "    assert_eq!(result.props.maximum_len, Some(0));",
                "    assert!(result.props.look_set.contains(Look::StartLF));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Hir::look(Look::EndLF);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Look(Look::EndLF));",
                "    assert!(result.props.0.minimum_len.is_some());",
                "    assert_eq!(result.props.0.minimum_len.unwrap(), 0);",
                "    assert!(result.props.0.maximum_len.is_some());",
                "    assert_eq!(result.props.0.maximum_len.unwrap(), 0);",
                "    assert!(result.props.0.look_set.contains(Look::EndLF));",
                "    assert!(result.props.0.look_set_prefix.contains(Look::EndLF));",
                "    assert!(result.props.0.look_set_suffix.contains(Look::EndLF));",
                "    assert!(result.props.0.look_set_prefix_any.contains(Look::EndLF));",
                "    assert!(result.props.0.look_set_suffix_any.contains(Look::EndLF));",
                "    assert!(result.props.0.utf8);",
                "    assert_eq!(result.props.0.explicit_captures_len, 0);",
                "    assert!(result.props.0.static_explicit_captures_len.is_some());",
                "    assert_eq!(result.props.0.static_explicit_captures_len.unwrap(), 0);",
                "    assert!(!result.props.0.literal);",
                "    assert!(!result.props.0.alternation_literal);"
              ],
              "code": [
                "{",
                "    let result = Hir::look(Look::EndLF);",
                "    assert_eq!(result.kind, HirKind::Look(Look::EndLF));",
                "    assert!(result.props.0.minimum_len.is_some());",
                "    assert_eq!(result.props.0.minimum_len.unwrap(), 0);",
                "    assert!(result.props.0.maximum_len.is_some());",
                "    assert_eq!(result.props.0.maximum_len.unwrap(), 0);",
                "    assert!(result.props.0.look_set.contains(Look::EndLF));",
                "    assert!(result.props.0.look_set_prefix.contains(Look::EndLF));",
                "    assert!(result.props.0.look_set_suffix.contains(Look::EndLF));",
                "    assert!(result.props.0.look_set_prefix_any.contains(Look::EndLF));",
                "    assert!(result.props.0.look_set_suffix_any.contains(Look::EndLF));",
                "    assert!(result.props.0.utf8);",
                "    assert_eq!(result.props.0.explicit_captures_len, 0);",
                "    assert!(result.props.0.static_explicit_captures_len.is_some());",
                "    assert_eq!(result.props.0.static_explicit_captures_len.unwrap(), 0);",
                "    assert!(!result.props.0.literal);",
                "    assert!(!result.props.0.alternation_literal);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Hir::look(Look::StartCRLF);",
                "}"
              ],
              "oracle": [
                "    let expected = Hir { kind: HirKind::Look(Look::StartCRLF), props: Properties::look(Look::StartCRLF) };",
                "    assert_eq!(result, expected);",
                "    let result_empty = Hir::look(Look::End);",
                "    let expected_empty = Hir { kind: HirKind::Look(Look::End), props: Properties::look(Look::End) };",
                "    assert_eq!(result_empty, expected_empty);",
                "    let result_word_ascii = Hir::look(Look::WordAscii);",
                "    let expected_word_ascii = Hir { kind: HirKind::Look(Look::WordAscii), props: Properties::look(Look::WordAscii) };",
                "    assert_eq!(result_word_ascii, expected_word_ascii);"
              ],
              "code": [
                "{",
                "    let result = Hir::look(Look::StartCRLF);",
                "    let expected = Hir { kind: HirKind::Look(Look::StartCRLF), props: Properties::look(Look::StartCRLF) };",
                "    assert_eq!(result, expected);",
                "    let result_empty = Hir::look(Look::End);",
                "    let expected_empty = Hir { kind: HirKind::Look(Look::End), props: Properties::look(Look::End) };",
                "    assert_eq!(result_empty, expected_empty);",
                "    let result_word_ascii = Hir::look(Look::WordAscii);",
                "    let expected_word_ascii = Hir { kind: HirKind::Look(Look::WordAscii), props: Properties::look(Look::WordAscii) };",
                "    assert_eq!(result_word_ascii, expected_word_ascii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Hir::look(Look::EndCRLF);",
                "}"
              ],
              "oracle": [
                "    let expected_kind = HirKind::Look(Look::EndCRLF);",
                "    let expected_props = Properties::look(Look::EndCRLF);",
                "    assert_eq!(result.kind, expected_kind);",
                "    assert_eq!(result.props, expected_props);"
              ],
              "code": [
                "{",
                "    let result = Hir::look(Look::EndCRLF);",
                "    let expected_kind = HirKind::Look(Look::EndCRLF);",
                "    let expected_props = Properties::look(Look::EndCRLF);",
                "    assert_eq!(result.kind, expected_kind);",
                "    assert_eq!(result.props, expected_props);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Hir::look(Look::WordAscii);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Look(Look::WordAscii));",
                "    assert!(result.props.0.look_set.contains(&Look::WordAscii));",
                "    assert!(result.props.0.minimum_len.is_some());",
                "    assert!(result.props.0.maximum_len.is_some());",
                "    assert!(result.props.0.utf8);",
                "    assert_eq!(result.props.0.static_explicit_captures_len, Some(0));",
                "    assert!(!result.props.0.literal);",
                "    assert!(!result.props.0.alternation_literal);"
              ],
              "code": [
                "{",
                "    let result = Hir::look(Look::WordAscii);",
                "    assert_eq!(result.kind, HirKind::Look(Look::WordAscii));",
                "    assert!(result.props.0.look_set.contains(&Look::WordAscii));",
                "    assert!(result.props.0.minimum_len.is_some());",
                "    assert!(result.props.0.maximum_len.is_some());",
                "    assert!(result.props.0.utf8);",
                "    assert_eq!(result.props.0.static_explicit_captures_len, Some(0));",
                "    assert!(!result.props.0.literal);",
                "    assert!(!result.props.0.alternation_literal);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Hir::look(Look::WordAsciiNegate);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Look(Look::WordAsciiNegate));",
                "    assert!(result.props.0.look_set.contains(&Look::WordAsciiNegate));",
                "    assert_eq!(result.props.0.minimum_len, Some(0));",
                "    assert_eq!(result.props.0.maximum_len, Some(0));",
                "    assert!(result.props.0.utf8);",
                "    assert_eq!(result.props.0.explicit_captures_len, 0);",
                "    assert_eq!(result.props.0.static_explicit_captures_len, Some(0));",
                "    assert!(!result.props.0.literal);",
                "    assert!(!result.props.0.alternation_literal);"
              ],
              "code": [
                "{",
                "    let result = Hir::look(Look::WordAsciiNegate);",
                "    assert_eq!(result.kind, HirKind::Look(Look::WordAsciiNegate));",
                "    assert!(result.props.0.look_set.contains(&Look::WordAsciiNegate));",
                "    assert_eq!(result.props.0.minimum_len, Some(0));",
                "    assert_eq!(result.props.0.maximum_len, Some(0));",
                "    assert!(result.props.0.utf8);",
                "    assert_eq!(result.props.0.explicit_captures_len, 0);",
                "    assert_eq!(result.props.0.static_explicit_captures_len, Some(0));",
                "    assert!(!result.props.0.literal);",
                "    assert!(!result.props.0.alternation_literal);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Hir::look(Look::WordUnicode);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Look(Look::WordUnicode));",
                "    assert!(result.props.0.look_set.contains(Look::WordUnicode));",
                "    assert_eq!(result.props.0.minimum_len, Some(0));",
                "    assert_eq!(result.props.0.maximum_len, Some(0));",
                "    assert!(result.props.0.utf8);",
                "    assert_eq!(result.props.0.explicit_captures_len, 0);",
                "    assert_eq!(result.props.0.static_explicit_captures_len, Some(0));",
                "    assert!(!result.props.0.literal);",
                "    assert!(!result.props.0.alternation_literal);"
              ],
              "code": [
                "{",
                "    let result = Hir::look(Look::WordUnicode);",
                "    assert_eq!(result.kind, HirKind::Look(Look::WordUnicode));",
                "    assert!(result.props.0.look_set.contains(Look::WordUnicode));",
                "    assert_eq!(result.props.0.minimum_len, Some(0));",
                "    assert_eq!(result.props.0.maximum_len, Some(0));",
                "    assert!(result.props.0.utf8);",
                "    assert_eq!(result.props.0.explicit_captures_len, 0);",
                "    assert_eq!(result.props.0.static_explicit_captures_len, Some(0));",
                "    assert!(!result.props.0.literal);",
                "    assert!(!result.props.0.alternation_literal);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Hir::look(Look::WordUnicodeNegate);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Look(Look::WordUnicodeNegate));",
                "    assert!(result.props.0.look_set.contains(Look::WordUnicodeNegate));",
                "    assert!(result.props.0.look_set_prefix.contains(Look::WordUnicodeNegate));",
                "    assert!(result.props.0.look_set_suffix.contains(Look::WordUnicodeNegate));",
                "    assert!(result.props.0.look_set_prefix_any.contains(Look::WordUnicodeNegate));",
                "    assert!(result.props.0.look_set_suffix_any.contains(Look::WordUnicodeNegate));",
                "    assert_eq!(result.props.0.minimum_len, Some(0));",
                "    assert_eq!(result.props.0.maximum_len, Some(0));",
                "    assert!(result.props.0.utf8);",
                "    assert_eq!(result.props.0.explicit_captures_len, 0);",
                "    assert_eq!(result.props.0.static_explicit_captures_len, Some(0));",
                "    assert!(!result.props.0.literal);",
                "    assert!(!result.props.0.alternation_literal);"
              ],
              "code": [
                "{",
                "    let result = Hir::look(Look::WordUnicodeNegate);",
                "    assert_eq!(result.kind, HirKind::Look(Look::WordUnicodeNegate));",
                "    assert!(result.props.0.look_set.contains(Look::WordUnicodeNegate));",
                "    assert!(result.props.0.look_set_prefix.contains(Look::WordUnicodeNegate));",
                "    assert!(result.props.0.look_set_suffix.contains(Look::WordUnicodeNegate));",
                "    assert!(result.props.0.look_set_prefix_any.contains(Look::WordUnicodeNegate));",
                "    assert!(result.props.0.look_set_suffix_any.contains(Look::WordUnicodeNegate));",
                "    assert_eq!(result.props.0.minimum_len, Some(0));",
                "    assert_eq!(result.props.0.maximum_len, Some(0));",
                "    assert!(result.props.0.utf8);",
                "    assert_eq!(result.props.0.explicit_captures_len, 0);",
                "    assert_eq!(result.props.0.static_explicit_captures_len, Some(0));",
                "    assert!(!result.props.0.literal);",
                "    assert!(!result.props.0.alternation_literal);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Hir::look(Look::WordStartAscii);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Look(Look::WordStartAscii));",
                "    assert!(matches!(result.props, Properties(_)));"
              ],
              "code": [
                "{",
                "    let result = Hir::look(Look::WordStartAscii);",
                "    assert_eq!(result.kind, HirKind::Look(Look::WordStartAscii));",
                "    assert!(matches!(result.props, Properties(_)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Hir::look(Look::WordEndAscii);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Look(Look::WordEndAscii));",
                "    assert!(result.props.0.minimum_len.is_some());",
                "    assert!(result.props.0.maximum_len.is_some());",
                "    assert_eq!(result.props.0.look_set, LookSet::singleton(Look::WordEndAscii));",
                "    assert_eq!(result.props.0.look_set_prefix, LookSet::singleton(Look::WordEndAscii));",
                "    assert_eq!(result.props.0.look_set_suffix, LookSet::singleton(Look::WordEndAscii));",
                "    assert_eq!(result.props.0.look_set_prefix_any, LookSet::singleton(Look::WordEndAscii));",
                "    assert_eq!(result.props.0.look_set_suffix_any, LookSet::singleton(Look::WordEndAscii));",
                "    assert!(result.props.0.utf8);",
                "    assert_eq!(result.props.0.explicit_captures_len, 0);",
                "    assert_eq!(result.props.0.static_explicit_captures_len, Some(0));",
                "    assert!(!result.props.0.literal);",
                "    assert!(!result.props.0.alternation_literal);"
              ],
              "code": [
                "{",
                "    let result = Hir::look(Look::WordEndAscii);",
                "    assert_eq!(result.kind, HirKind::Look(Look::WordEndAscii));",
                "    assert!(result.props.0.minimum_len.is_some());",
                "    assert!(result.props.0.maximum_len.is_some());",
                "    assert_eq!(result.props.0.look_set, LookSet::singleton(Look::WordEndAscii));",
                "    assert_eq!(result.props.0.look_set_prefix, LookSet::singleton(Look::WordEndAscii));",
                "    assert_eq!(result.props.0.look_set_suffix, LookSet::singleton(Look::WordEndAscii));",
                "    assert_eq!(result.props.0.look_set_prefix_any, LookSet::singleton(Look::WordEndAscii));",
                "    assert_eq!(result.props.0.look_set_suffix_any, LookSet::singleton(Look::WordEndAscii));",
                "    assert!(result.props.0.utf8);",
                "    assert_eq!(result.props.0.explicit_captures_len, 0);",
                "    assert_eq!(result.props.0.static_explicit_captures_len, Some(0));",
                "    assert!(!result.props.0.literal);",
                "    assert!(!result.props.0.alternation_literal);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Hir::look(Look::WordStartUnicode);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Look(Look::WordStartUnicode));",
                "    assert!(result.props.0.as_ref().look_set.contains(&Look::WordStartUnicode));",
                "    assert_eq!(result.props.0.minimum_len, Some(0));",
                "    assert_eq!(result.props.0.maximum_len, Some(0));"
              ],
              "code": [
                "{",
                "    let result = Hir::look(Look::WordStartUnicode);",
                "    assert_eq!(result.kind, HirKind::Look(Look::WordStartUnicode));",
                "    assert!(result.props.0.as_ref().look_set.contains(&Look::WordStartUnicode));",
                "    assert_eq!(result.props.0.minimum_len, Some(0));",
                "    assert_eq!(result.props.0.maximum_len, Some(0));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Hir::look(Look::WordEndUnicode);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Look(Look::WordEndUnicode));",
                "    assert!(result.props.0.look_set.contains(&Look::WordEndUnicode));",
                "    assert_eq!(result.props.0.minimum_len, Some(0));",
                "    assert_eq!(result.props.0.maximum_len, Some(0));",
                "    assert!(result.props.0.utf8);",
                "    assert_eq!(result.props.0.static_explicit_captures_len, Some(0));",
                "    assert!(!result.props.0.literal);",
                "    assert!(!result.props.0.alternation_literal);"
              ],
              "code": [
                "{",
                "    let result = Hir::look(Look::WordEndUnicode);",
                "    assert_eq!(result.kind, HirKind::Look(Look::WordEndUnicode));",
                "    assert!(result.props.0.look_set.contains(&Look::WordEndUnicode));",
                "    assert_eq!(result.props.0.minimum_len, Some(0));",
                "    assert_eq!(result.props.0.maximum_len, Some(0));",
                "    assert!(result.props.0.utf8);",
                "    assert_eq!(result.props.0.static_explicit_captures_len, Some(0));",
                "    assert!(!result.props.0.literal);",
                "    assert!(!result.props.0.alternation_literal);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Hir::look(Look::WordStartHalfAscii);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Look(Look::WordStartHalfAscii));",
                "    assert!(result.props.0.look_set.contains(&Look::WordStartHalfAscii));",
                "    assert_eq!(result.props.0.minimum_len, Some(0));",
                "    assert_eq!(result.props.0.maximum_len, Some(0));",
                "    assert!(result.props.0.utf8);"
              ],
              "code": [
                "{",
                "    let result = Hir::look(Look::WordStartHalfAscii);",
                "    assert_eq!(result.kind, HirKind::Look(Look::WordStartHalfAscii));",
                "    assert!(result.props.0.look_set.contains(&Look::WordStartHalfAscii));",
                "    assert_eq!(result.props.0.minimum_len, Some(0));",
                "    assert_eq!(result.props.0.maximum_len, Some(0));",
                "    assert!(result.props.0.utf8);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Hir::look(Look::WordEndHalfAscii);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Look(Look::WordEndHalfAscii));",
                "    assert!(result.props.0.look_set.contains(&Look::WordEndHalfAscii));",
                "    assert_eq!(result.props.0.minimum_len, Some(0));",
                "    assert_eq!(result.props.0.maximum_len, Some(0));",
                "    assert!(result.props.0.utf8);",
                "    assert_eq!(result.props.0.explicit_captures_len, 0);",
                "    assert_eq!(result.props.0.static_explicit_captures_len, Some(0));",
                "    assert!(!result.props.0.literal);",
                "    assert!(!result.props.0.alternation_literal);"
              ],
              "code": [
                "{",
                "    let result = Hir::look(Look::WordEndHalfAscii);",
                "    assert_eq!(result.kind, HirKind::Look(Look::WordEndHalfAscii));",
                "    assert!(result.props.0.look_set.contains(&Look::WordEndHalfAscii));",
                "    assert_eq!(result.props.0.minimum_len, Some(0));",
                "    assert_eq!(result.props.0.maximum_len, Some(0));",
                "    assert!(result.props.0.utf8);",
                "    assert_eq!(result.props.0.explicit_captures_len, 0);",
                "    assert_eq!(result.props.0.static_explicit_captures_len, Some(0));",
                "    assert!(!result.props.0.literal);",
                "    assert!(!result.props.0.alternation_literal);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Hir::look(Look::WordStartHalfUnicode);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Look(Look::WordStartHalfUnicode));",
                "    assert!(result.props.0.look_set.contains(&Look::WordStartHalfUnicode));",
                "    assert_eq!(result.props.0.minimum_len, Some(0));",
                "    assert_eq!(result.props.0.maximum_len, Some(0));",
                "    assert!(result.props.0.utf8);"
              ],
              "code": [
                "{",
                "    let result = Hir::look(Look::WordStartHalfUnicode);",
                "    assert_eq!(result.kind, HirKind::Look(Look::WordStartHalfUnicode));",
                "    assert!(result.props.0.look_set.contains(&Look::WordStartHalfUnicode));",
                "    assert_eq!(result.props.0.minimum_len, Some(0));",
                "    assert_eq!(result.props.0.maximum_len, Some(0));",
                "    assert!(result.props.0.utf8);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Hir::look(Look::WordEndHalfUnicode);",
                "}"
              ],
              "oracle": [
                "    let expected_kind = HirKind::Look(Look::WordEndHalfUnicode);",
                "    let expected_props = Properties::look(Look::WordEndHalfUnicode);",
                "    assert_eq!(result.kind, expected_kind);",
                "    assert_eq!(result.props, expected_props);"
              ],
              "code": [
                "{",
                "    let result = Hir::look(Look::WordEndHalfUnicode);",
                "    let expected_kind = HirKind::Look(Look::WordEndHalfUnicode);",
                "    let expected_props = Properties::look(Look::WordEndHalfUnicode);",
                "    assert_eq!(result.kind, expected_kind);",
                "    assert_eq!(result.props, expected_props);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}