{
  "name": "regex_lite::hir::parse::into_class_item_range",
  "mod_info": {
    "name": "hir::parse",
    "loc": "regex-lite/src/hir/mod.rs:5:1:5:11"
  },
  "visible": false,
  "loc": "regex-lite/src/hir/parse.rs:1324:1:1329:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: hir.kind matches _ at line 1327 is true\n",
        "precondition: hir.kind matches HirKind::Char(ch) at line 1326 is false\n",
        "expected return value/type: Err(Error::new(ERR_CLASS_INVALID_RANGE_ITEM))\n"
      ],
      "input_infer": "hir.kind should be any value other than HirKind::Char(ch)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct InvalidHirKind;",
                "    let hir = Hir {",
                "        kind: HirKind::Group(Box::new(InvalidHirKind)),",
                "        is_start_anchored: false,",
                "        is_match_empty: false,",
                "        static_explicit_captures_len: None,",
                "    };",
                "    let _ = into_class_item_range(hir);",
                "}"
              ],
              "oracle": [
                "    let hir = Hir { kind: HirKind::Group(Box::new(InvalidHirKind)), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
                "    let result = into_class_item_range(hir);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err(), Some(Error::new(ERR_CLASS_INVALID_RANGE_ITEM)));"
              ],
              "code": [
                "{",
                "    struct InvalidHirKind;",
                "    let hir = Hir {",
                "        kind: HirKind::Group(Box::new(InvalidHirKind)),",
                "        is_start_anchored: false,",
                "        is_match_empty: false,",
                "        static_explicit_captures_len: None,",
                "    };",
                "    let _ = into_class_item_range(hir);",
                "    let hir = Hir { kind: HirKind::Group(Box::new(InvalidHirKind)), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
                "    let result = into_class_item_range(hir);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err(), Some(Error::new(ERR_CLASS_INVALID_RANGE_ITEM)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct InvalidHirKind;",
                "    let hir = Hir {",
                "        kind: HirKind::Concat(vec![]),",
                "        is_start_anchored: false,",
                "        is_match_empty: false,",
                "        static_explicit_captures_len: None,",
                "    };",
                "    let _ = into_class_item_range(hir);",
                "}"
              ],
              "oracle": [
                "    let hir = Hir { kind: HirKind::Concat(vec![]), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
                "    let result = into_class_item_range(hir);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), Error::new(ERR_CLASS_INVALID_RANGE_ITEM));"
              ],
              "code": [
                "{",
                "    struct InvalidHirKind;",
                "    let hir = Hir {",
                "        kind: HirKind::Concat(vec![]),",
                "        is_start_anchored: false,",
                "        is_match_empty: false,",
                "        static_explicit_captures_len: None,",
                "    };",
                "    let _ = into_class_item_range(hir);",
                "    let hir = Hir { kind: HirKind::Concat(vec![]), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
                "    let result = into_class_item_range(hir);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), Error::new(ERR_CLASS_INVALID_RANGE_ITEM));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct InvalidHirKind;",
                "    let hir = Hir {",
                "        kind: HirKind::Alt(vec![]),",
                "        is_start_anchored: false,",
                "        is_match_empty: false,",
                "        static_explicit_captures_len: None,",
                "    };",
                "    let _ = into_class_item_range(hir);",
                "}"
              ],
              "oracle": [
                "    let hir = Hir { kind: HirKind::Alt(vec![]), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
                "    assert_eq!(into_class_item_range(hir), Err(Error::new(ERR_CLASS_INVALID_RANGE_ITEM)));"
              ],
              "code": [
                "{",
                "    struct InvalidHirKind;",
                "    let hir = Hir {",
                "        kind: HirKind::Alt(vec![]),",
                "        is_start_anchored: false,",
                "        is_match_empty: false,",
                "        static_explicit_captures_len: None,",
                "    };",
                "    let _ = into_class_item_range(hir);",
                "    let hir = Hir { kind: HirKind::Alt(vec![]), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
                "    assert_eq!(into_class_item_range(hir), Err(Error::new(ERR_CLASS_INVALID_RANGE_ITEM)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct InvalidHirKind;",
                "    let hir = Hir {",
                "        kind: HirKind::Repetition(Box::new(InvalidHirKind), None, None),",
                "        is_start_anchored: false,",
                "        is_match_empty: false,",
                "        static_explicit_captures_len: None,",
                "    };",
                "    let _ = into_class_item_range(hir);",
                "}"
              ],
              "oracle": [
                "    let hir = Hir { kind: HirKind::Repetition(Box::new(InvalidHirKind), None, None), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
                "    let result = into_class_item_range(hir);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), Error::new(ERR_CLASS_INVALID_RANGE_ITEM));"
              ],
              "code": [
                "{",
                "    struct InvalidHirKind;",
                "    let hir = Hir {",
                "        kind: HirKind::Repetition(Box::new(InvalidHirKind), None, None),",
                "        is_start_anchored: false,",
                "        is_match_empty: false,",
                "        static_explicit_captures_len: None,",
                "    };",
                "    let _ = into_class_item_range(hir);",
                "    let hir = Hir { kind: HirKind::Repetition(Box::new(InvalidHirKind), None, None), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
                "    let result = into_class_item_range(hir);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), Error::new(ERR_CLASS_INVALID_RANGE_ITEM));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: hir.kind matches HirKind::Char(ch) at line 1325 is true\n",
        "precondition: hir.kind matches HirKind::Char(ch) at line 1325 is true\n",
        "expected return value/type: Ok(ch)\n"
      ],
      "input_infer": "Test input conditions or ranges: Valid single characters 'a' to 'z', 'A' to 'Z', '0' to '9', and special characters such as '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '_', '=', '+', '{', '}', '[', ']', ':', ';', '\"', '<', '>', ',', '.', '?', '/', '\\\\'.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let hir = Hir {",
                "        kind: HirKind::Char('a'),",
                "        is_start_anchored: false,",
                "        is_match_empty: false,",
                "        static_explicit_captures_len: None,",
                "    };",
                "    let _ = into_class_item_range(hir);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(into_class_item_range(Hir { kind: HirKind::Char('a'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }), Ok('a'));"
              ],
              "code": [
                "{",
                "    let hir = Hir {",
                "        kind: HirKind::Char('a'),",
                "        is_start_anchored: false,",
                "        is_match_empty: false,",
                "        static_explicit_captures_len: None,",
                "    };",
                "    let _ = into_class_item_range(hir);",
                "    assert_eq!(into_class_item_range(Hir { kind: HirKind::Char('a'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }), Ok('a'));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let hir = Hir {",
                "        kind: HirKind::Char('Z'),",
                "        is_start_anchored: false,",
                "        is_match_empty: false,",
                "        static_explicit_captures_len: None,",
                "    };",
                "    let _ = into_class_item_range(hir);",
                "}"
              ],
              "oracle": [
                "    let hir = Hir { kind: HirKind::Char('Z'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; assert_eq!(into_class_item_range(hir), Ok('Z'));"
              ],
              "code": [
                "{",
                "    let hir = Hir {",
                "        kind: HirKind::Char('Z'),",
                "        is_start_anchored: false,",
                "        is_match_empty: false,",
                "        static_explicit_captures_len: None,",
                "    };",
                "    let _ = into_class_item_range(hir);",
                "    let hir = Hir { kind: HirKind::Char('Z'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; assert_eq!(into_class_item_range(hir), Ok('Z'));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let hir = Hir {",
                "        kind: HirKind::Char('0'),",
                "        is_start_anchored: false,",
                "        is_match_empty: false,",
                "        static_explicit_captures_len: None,",
                "    };",
                "    let _ = into_class_item_range(hir);",
                "}"
              ],
              "oracle": [
                "    let hir = Hir { kind: HirKind::Char('a'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; assert_eq!(into_class_item_range(hir), Ok('a'));",
                "    let hir = Hir { kind: HirKind::Char('1'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; assert_eq!(into_class_item_range(hir), Ok('1'));",
                "    let hir = Hir { kind: HirKind::Char('!'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; assert_eq!(into_class_item_range(hir), Ok('!'));",
                "    let hir = Hir { kind: HirKind::Char('Z'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; assert_eq!(into_class_item_range(hir), Ok('Z'));",
                "    let hir = Hir { kind: HirKind::Char(' '), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; assert_eq!(into_class_item_range(hir), Ok(' '));"
              ],
              "code": [
                "{",
                "    let hir = Hir {",
                "        kind: HirKind::Char('0'),",
                "        is_start_anchored: false,",
                "        is_match_empty: false,",
                "        static_explicit_captures_len: None,",
                "    };",
                "    let _ = into_class_item_range(hir);",
                "    let hir = Hir { kind: HirKind::Char('a'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; assert_eq!(into_class_item_range(hir), Ok('a'));",
                "    let hir = Hir { kind: HirKind::Char('1'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; assert_eq!(into_class_item_range(hir), Ok('1'));",
                "    let hir = Hir { kind: HirKind::Char('!'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; assert_eq!(into_class_item_range(hir), Ok('!'));",
                "    let hir = Hir { kind: HirKind::Char('Z'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; assert_eq!(into_class_item_range(hir), Ok('Z'));",
                "    let hir = Hir { kind: HirKind::Char(' '), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; assert_eq!(into_class_item_range(hir), Ok(' '));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let hir = Hir {",
                "        kind: HirKind::Char('@'),",
                "        is_start_anchored: false,",
                "        is_match_empty: false,",
                "        static_explicit_captures_len: None,",
                "    };",
                "    let _ = into_class_item_range(hir);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(into_class_item_range(Hir { kind: HirKind::Char('@'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }), Ok('@'));"
              ],
              "code": [
                "{",
                "    let hir = Hir {",
                "        kind: HirKind::Char('@'),",
                "        is_start_anchored: false,",
                "        is_match_empty: false,",
                "        static_explicit_captures_len: None,",
                "    };",
                "    let _ = into_class_item_range(hir);",
                "    assert_eq!(into_class_item_range(Hir { kind: HirKind::Char('@'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }), Ok('@'));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let hir = Hir {",
                "        kind: HirKind::Char('#'),",
                "        is_start_anchored: false,",
                "        is_match_empty: false,",
                "        static_explicit_captures_len: None,",
                "    };",
                "    let _ = into_class_item_range(hir);",
                "}"
              ],
              "oracle": [
                "    let hir = Hir { kind: HirKind::Char('#'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; assert_eq!(into_class_item_range(hir), Ok('#'));"
              ],
              "code": [
                "{",
                "    let hir = Hir {",
                "        kind: HirKind::Char('#'),",
                "        is_start_anchored: false,",
                "        is_match_empty: false,",
                "        static_explicit_captures_len: None,",
                "    };",
                "    let _ = into_class_item_range(hir);",
                "    let hir = Hir { kind: HirKind::Char('#'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; assert_eq!(into_class_item_range(hir), Ok('#'));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}