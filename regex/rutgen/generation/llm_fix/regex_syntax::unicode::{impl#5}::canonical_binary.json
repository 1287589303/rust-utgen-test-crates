{
  "name": "regex_syntax::unicode::{impl#5}::canonical_binary",
  "mod_info": {
    "name": "unicode",
    "loc": "regex-syntax/src/lib.rs:193:1:193:13"
  },
  "visible": false,
  "loc": "regex-syntax/src/unicode.rs:287:5:321:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: norm != \"cf\" at line 309 is true\n",
        "precondition: norm != \"sc\" at line 309 is true\n",
        "precondition: norm != \"lc\" at line 309 is true\n",
        "precondition: canonical_prop(&norm)? at line 310 is Err/None\n"
      ],
      "input_infer": "norm values: [\"x\", \"y\", \"z\"]; name values: [\"unknown_property\", \"unsupported_property\", \"\"]\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::Binary(\"unknown_property\");",
                "    let _ = query.canonical_binary(\"x\");",
                "}"
              ],
              "oracle": [
                "    let query = ClassQuery::Binary(\"unknown_property\");",
                "    let result = query.canonical_binary(\"x\");",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), Error::PropertyNotFound);"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::Binary(\"unknown_property\");",
                "    let _ = query.canonical_binary(\"x\");",
                "    let query = ClassQuery::Binary(\"unknown_property\");",
                "    let result = query.canonical_binary(\"x\");",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), Error::PropertyNotFound);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::Binary(\"unsupported_property\");",
                "    let _ = query.canonical_binary(\"y\");",
                "}"
              ],
              "oracle": [
                "    let query = ClassQuery::Binary(\"unsupported_property\");",
                "    let result = query.canonical_binary(\"y\");",
                "    assert_eq!(result, Err(Error::PropertyNotFound));"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::Binary(\"unsupported_property\");",
                "    let _ = query.canonical_binary(\"y\");",
                "    let query = ClassQuery::Binary(\"unsupported_property\");",
                "    let result = query.canonical_binary(\"y\");",
                "    assert_eq!(result, Err(Error::PropertyNotFound));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::Binary(\"\");",
                "    let _ = query.canonical_binary(\"z\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(query.canonical_binary(\"z\"), Err(Error::PropertyNotFound));"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::Binary(\"\");",
                "    let _ = query.canonical_binary(\"z\");",
                "    assert_eq!(query.canonical_binary(\"z\"), Err(Error::PropertyNotFound));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 5,
      "prompt_conds": [
        "precondition: norm != \"cf\" at line 309 is true\n",
        "precondition: norm != \"sc\" at line 309 is true\n",
        "precondition: norm != \"lc\" at line 309 is true\n",
        "precondition: canonical_prop(&norm)? at line 310 is Ok/Some\n",
        "precondition: let Some(canon) = canonical_prop(&norm)? at line 310 is true\n",
        "precondition: canonical_gencat(&norm)? at line 314 is Ok/Some\n",
        "precondition: let Some(canon) = canonical_gencat(&norm)? at line 314 is true\n",
        "precondition: canonical_script(&norm)? at line 317 is Ok/Some\n",
        "precondition: let Some(canon) = canonical_script(&norm)? at line 317 is true\n",
        "expected return value/type: Ok(CanonicalClassQuery::Script(canon))\n"
      ],
      "input_infer": "Test input conditions: name must be a valid string that normalizes to a value not matching \"cf\", \"sc\", or \"lc\", and corresponds to a known canonical property, general category, or script value that exists in the respective mappings.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class_query = ClassQuery::Binary(\"SomeBinaryProperty\");",
                "    let result = class_query.canonical_binary(\"SomeBinaryProperty\");",
                "}"
              ],
              "oracle": [
                "    let class_query = ClassQuery::Binary(\"SomeBinaryProperty\");",
                "    let result = class_query.canonical_binary(\"ValidBinaryName\");",
                "    assert_eq!(result, Ok(CanonicalClassQuery::Binary(\"ExpectedCanonicalValue\")));",
                "    let result = class_query.canonical_binary(\"General_Category\");",
                "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"ExpectedGeneralCategory\")));",
                "    let result = class_query.canonical_binary(\"Script\");",
                "    assert_eq!(result, Ok(CanonicalClassQuery::Script(\"ExpectedScriptValue\")));"
              ],
              "code": [
                "{",
                "    let class_query = ClassQuery::Binary(\"SomeBinaryProperty\");",
                "    let result = class_query.canonical_binary(\"SomeBinaryProperty\");",
                "    let class_query = ClassQuery::Binary(\"SomeBinaryProperty\");",
                "    let result = class_query.canonical_binary(\"ValidBinaryName\");",
                "    assert_eq!(result, Ok(CanonicalClassQuery::Binary(\"ExpectedCanonicalValue\")));",
                "    let result = class_query.canonical_binary(\"General_Category\");",
                "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"ExpectedGeneralCategory\")));",
                "    let result = class_query.canonical_binary(\"Script\");",
                "    assert_eq!(result, Ok(CanonicalClassQuery::Script(\"ExpectedScriptValue\")));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class_query = ClassQuery::Binary(\"SomeGeneralCategory\");",
                "    let result = class_query.canonical_binary(\"SomeGeneralCategory\");",
                "}"
              ],
              "oracle": [
                "    let class_query = ClassQuery::Binary(\"SomeGeneralCategory\");",
                "    let result = class_query.canonical_binary(\"SomeGeneralCategory\");",
                "    assert!(result.is_ok());",
                "    if let Ok(canonical_class) = result {",
                "    assert_eq!(canonical_class, CanonicalClassQuery::GeneralCategory(\"SomeGeneralCategory\"));",
                "    }"
              ],
              "code": [
                "{",
                "    let class_query = ClassQuery::Binary(\"SomeGeneralCategory\");",
                "    let result = class_query.canonical_binary(\"SomeGeneralCategory\");",
                "    let class_query = ClassQuery::Binary(\"SomeGeneralCategory\");",
                "    let result = class_query.canonical_binary(\"SomeGeneralCategory\");",
                "    assert!(result.is_ok());",
                "    if let Ok(canonical_class) = result {",
                "    assert_eq!(canonical_class, CanonicalClassQuery::GeneralCategory(\"SomeGeneralCategory\"));",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class_query = ClassQuery::Binary(\"SomeScript\");",
                "    let result = class_query.canonical_binary(\"SomeScript\");",
                "}"
              ],
              "oracle": [
                "    let class_query = ClassQuery::Binary(\"SomeScript\");",
                "    let result = class_query.canonical_binary(\"SomeScript\");",
                "    assert_eq!(result, Ok(CanonicalClassQuery::Script(canon)));",
                "    assert!(norm != \"cf\");",
                "    assert!(norm != \"sc\");",
                "    assert!(norm != \"lc\");",
                "    assert!(canonical_prop(&norm).is_ok());",
                "    assert!(canonical_prop(&norm).unwrap().is_some());",
                "    assert!(canonical_gencat(&norm).is_ok());",
                "    assert!(canonical_gencat(&norm).unwrap().is_some());",
                "    assert!(canonical_script(&norm).is_ok());",
                "    assert!(canonical_script(&norm).unwrap().is_some());"
              ],
              "code": [
                "{",
                "    let class_query = ClassQuery::Binary(\"SomeScript\");",
                "    let result = class_query.canonical_binary(\"SomeScript\");",
                "    let class_query = ClassQuery::Binary(\"SomeScript\");",
                "    let result = class_query.canonical_binary(\"SomeScript\");",
                "    assert_eq!(result, Ok(CanonicalClassQuery::Script(canon)));",
                "    assert!(norm != \"cf\");",
                "    assert!(norm != \"sc\");",
                "    assert!(norm != \"lc\");",
                "    assert!(canonical_prop(&norm).is_ok());",
                "    assert!(canonical_prop(&norm).unwrap().is_some());",
                "    assert!(canonical_gencat(&norm).is_ok());",
                "    assert!(canonical_gencat(&norm).unwrap().is_some());",
                "    assert!(canonical_script(&norm).is_ok());",
                "    assert!(canonical_script(&norm).unwrap().is_some());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 12,
      "prompt_conds": [
        "precondition: norm != \"cf\" at line 309 is true\n",
        "precondition: norm != \"sc\" at line 309 is true\n",
        "precondition: norm != \"lc\" at line 309 is false\n",
        "precondition: canonical_gencat(&norm)? at line 314 is Ok/Some\n",
        "precondition: let Some(canon) = canonical_gencat(&norm)? at line 314 is true\n",
        "expected return value/type: Ok(CanonicalClassQuery::GeneralCategory(canon))\n"
      ],
      "input_infer": "norm = \"lc\" or norm that results in some canonical value not equal to \"cf\" or \"sc\" leading to Ok from canonical_gencat\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class_query = ClassQuery::Binary(\"test\");",
                "    let result = class_query.canonical_binary(\"lc\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"Cased_Letter\")));"
              ],
              "code": [
                "{",
                "    let class_query = ClassQuery::Binary(\"test\");",
                "    let result = class_query.canonical_binary(\"lc\");",
                "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"Cased_Letter\")));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class_query = ClassQuery::Binary(\"test\");",
                "    let result = class_query.canonical_binary(\"assigned\");",
                "}"
              ],
              "oracle": [
                "    let class_query = ClassQuery::Binary(\"test\");",
                "    let result = class_query.canonical_binary(\"assigned\");",
                "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"Assigned\")));"
              ],
              "code": [
                "{",
                "    let class_query = ClassQuery::Binary(\"test\");",
                "    let result = class_query.canonical_binary(\"assigned\");",
                "    let class_query = ClassQuery::Binary(\"test\");",
                "    let result = class_query.canonical_binary(\"assigned\");",
                "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"Assigned\")));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class_query = ClassQuery::Binary(\"test\");",
                "    let result = class_query.canonical_binary(\"any\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"Any\")));",
                "    assert_ne!(norm, \"cf\");",
                "    assert_ne!(norm, \"sc\");",
                "    assert_eq!(norm, \"lc\");"
              ],
              "code": [
                "{",
                "    let class_query = ClassQuery::Binary(\"test\");",
                "    let result = class_query.canonical_binary(\"any\");",
                "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"Any\")));",
                "    assert_ne!(norm, \"cf\");",
                "    assert_ne!(norm, \"sc\");",
                "    assert_eq!(norm, \"lc\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 13,
      "prompt_conds": [
        "precondition: norm != \"cf\" at line 309 is true\n",
        "precondition: norm != \"sc\" at line 309 is false\n",
        "precondition: canonical_gencat(&norm)? at line 314 is Err/None\n"
      ],
      "input_infer": "Test input conditions: name = \"sc\" (to satisfy norm != \"cf\" being true and norm != \"sc\" being false, while ensuring canonical_gencat(&norm)? returns Err/None)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::Binary(\"sc\");",
                "    let _result = query.canonical_binary(\"sc\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Err(Error::PropertyValueNotFound));"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::Binary(\"sc\");",
                "    let _result = query.canonical_binary(\"sc\");",
                "    assert_eq!(_result, Err(Error::PropertyValueNotFound));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::Binary(\"cf\");",
                "    let _result = query.canonical_binary(\"cf\");",
                "}"
              ],
              "oracle": [
                "    let query = ClassQuery::Binary(\"cf\");",
                "    let _result = query.canonical_binary(\"cf\");",
                "    assert_eq!(_result, Err(Error::PropertyNotFound));"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::Binary(\"cf\");",
                "    let _result = query.canonical_binary(\"cf\");",
                "    let query = ClassQuery::Binary(\"cf\");",
                "    let _result = query.canonical_binary(\"cf\");",
                "    assert_eq!(_result, Err(Error::PropertyNotFound));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::Binary(\"lc\");",
                "    let _result = query.canonical_binary(\"lc\");",
                "}"
              ],
              "oracle": [
                "    let query = ClassQuery::Binary(\"lc\");",
                "    let result = query.canonical_binary(\"lc\");",
                "    assert_eq!(result, Err(Error::PropertyNotFound));"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::Binary(\"lc\");",
                "    let _result = query.canonical_binary(\"lc\");",
                "    let query = ClassQuery::Binary(\"lc\");",
                "    let result = query.canonical_binary(\"lc\");",
                "    assert_eq!(result, Err(Error::PropertyNotFound));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 19,
      "prompt_conds": [
        "precondition: norm != \"cf\" at line 309 is false\n",
        "precondition: canonical_gencat(&norm)? at line 314 is Ok/Some\n",
        "precondition: let Some(canon) = canonical_gencat(&norm)? at line 314 is true\n",
        "precondition: canonical_script(&norm)? at line 317 is Err/None\n"
      ],
      "input_infer": "norm = \"cf\", \"any\", \"assigned\" for canonical_gencat, which returns Ok/Some; expect canonical_script to return Err/None\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::Binary(\"cf\");",
                "    let result = query.canonical_binary(\"cf\");",
                "}"
              ],
              "oracle": [
                "    result == Err(Error::PropertyNotFound)",
                "    result.is_err()",
                "    result.unwrap_err() == Error::PropertyNotFound",
                "    result.is_ok() == false",
                "    result.unwrap_err() != Error::PropertyValueNotFound",
                "    result.is_err() && result.unwrap_err() == Error::PropertyNotFound"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::Binary(\"cf\");",
                "    let result = query.canonical_binary(\"cf\");",
                "    result == Err(Error::PropertyNotFound)",
                "    result.is_err()",
                "    result.unwrap_err() == Error::PropertyNotFound",
                "    result.is_ok() == false",
                "    result.unwrap_err() != Error::PropertyValueNotFound",
                "    result.is_err() && result.unwrap_err() == Error::PropertyNotFound",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"any\" };",
                "    let result = query.canonical_binary(\"any\");",
                "}"
              ],
              "oracle": [
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"any\" };",
                "    let result = query.canonical_binary(\"any\");",
                "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"Any\")));",
                "    assert!(result.is_ok());",
                "    assert!(result.unwrap().is::<CanonicalClassQuery>());",
                "    assert_ne!(result.unwrap(), CanonicalClassQuery::Binary(\"dummy\"));",
                "    assert_eq!(symbolic_name_normalize(\"any\"), \"any\".to_string());",
                "    assert_eq!(canonical_gencat(\"any\").unwrap(), Some(\"Any\"));",
                "    assert_eq!(canonical_script(\"any\").is_err(), true);",
                "    assert_eq!(canonical_prop(\"any\").unwrap(), None);",
                "    let result = query.canonical_binary(\"non_existing_property\");",
                "    assert_eq!(result, Err(Error::PropertyNotFound));",
                "    let result = query.canonical_binary(\"sc\");",
                "    assert_eq!(result.is_ok(), false);",
                "    let result = query.canonical_binary(\"cf\");",
                "    assert_eq!(result.is_ok(), false);",
                "    let result = query.canonical_binary(\"lc\");",
                "    assert_eq!(result.is_ok(), false);"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"any\" };",
                "    let result = query.canonical_binary(\"any\");",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"any\" };",
                "    let result = query.canonical_binary(\"any\");",
                "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"Any\")));",
                "    assert!(result.is_ok());",
                "    assert!(result.unwrap().is::<CanonicalClassQuery>());",
                "    assert_ne!(result.unwrap(), CanonicalClassQuery::Binary(\"dummy\"));",
                "    assert_eq!(symbolic_name_normalize(\"any\"), \"any\".to_string());",
                "    assert_eq!(canonical_gencat(\"any\").unwrap(), Some(\"Any\"));",
                "    assert_eq!(canonical_script(\"any\").is_err(), true);",
                "    assert_eq!(canonical_prop(\"any\").unwrap(), None);",
                "    let result = query.canonical_binary(\"non_existing_property\");",
                "    assert_eq!(result, Err(Error::PropertyNotFound));",
                "    let result = query.canonical_binary(\"sc\");",
                "    assert_eq!(result.is_ok(), false);",
                "    let result = query.canonical_binary(\"cf\");",
                "    assert_eq!(result.is_ok(), false);",
                "    let result = query.canonical_binary(\"lc\");",
                "    assert_eq!(result.is_ok(), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"assigned\" };",
                "    let result = query.canonical_binary(\"assigned\");",
                "}"
              ],
              "oracle": [
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"assigned\" };",
                "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"Assigned\")));"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"assigned\" };",
                "    let result = query.canonical_binary(\"assigned\");",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"assigned\" };",
                "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"Assigned\")));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}