{
  "name": "regex_automata::nfa::thompson::error::{impl#0}::word",
  "mod_info": {
    "name": "nfa::thompson::error",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:61:1:61:11"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/error.rs:104:5:106:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: BuildError { kind: BuildErrorKind::Word(err) }\n"
      ],
      "input_infer": "err: look::UnicodeWordBoundaryError where look::UnicodeWordBoundaryError can be a valid instance or an empty instance, ensuring it meets any requirements of the struct.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let err = look::UnicodeWordBoundaryError(());",
                "    let result = BuildError::word(err);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind(), &BuildErrorKind::Word(err));",
                "    assert!(matches!(result, BuildError { kind: BuildErrorKind::Word(_) }));",
                "    assert!(result.size_limit().is_none());"
              ],
              "code": [
                "{",
                "    let err = look::UnicodeWordBoundaryError(());",
                "    let result = BuildError::word(err);",
                "    assert_eq!(result.kind(), &BuildErrorKind::Word(err));",
                "    assert!(matches!(result, BuildError { kind: BuildErrorKind::Word(_) }));",
                "    assert!(result.size_limit().is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let err = look::UnicodeWordBoundaryError(());",
                "    let result = BuildError::word(err);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind(), &BuildErrorKind::Word(look::UnicodeWordBoundaryError(())));",
                "    assert!(result.size_limit().is_none());",
                "    assert!(matches!(result.kind(), BuildErrorKind::Word(_)));",
                "    assert!(matches!(result.kind(), BuildErrorKind::Word(look::UnicodeWordBoundaryError(_))));",
                "    assert!(result.kind().is::<BuildErrorKind>());"
              ],
              "code": [
                "{",
                "    let err = look::UnicodeWordBoundaryError(());",
                "    let result = BuildError::word(err);",
                "    assert_eq!(result.kind(), &BuildErrorKind::Word(look::UnicodeWordBoundaryError(())));",
                "    assert!(result.size_limit().is_none());",
                "    assert!(matches!(result.kind(), BuildErrorKind::Word(_)));",
                "    assert!(matches!(result.kind(), BuildErrorKind::Word(look::UnicodeWordBoundaryError(_))));",
                "    assert!(result.kind().is::<BuildErrorKind>());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let err = look::UnicodeWordBoundaryError(());",
                "    let result = BuildError::word(err);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind(), &BuildErrorKind::Word(look::UnicodeWordBoundaryError(())));"
              ],
              "code": [
                "{",
                "    let err = look::UnicodeWordBoundaryError(());",
                "    let result = BuildError::word(err);",
                "    assert_eq!(result.kind(), &BuildErrorKind::Word(look::UnicodeWordBoundaryError(())));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}