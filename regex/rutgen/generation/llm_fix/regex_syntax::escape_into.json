{
  "name": "regex_syntax::escape_into",
  "mod_info": {
    "name": "",
    "loc": "regex-syntax/src/lib.rs:1:1:431:2"
  },
  "visible": true,
  "loc": "regex-syntax/src/lib.rs:211:1:219:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: c in text.chars() at line 213 is true\n",
        "precondition: is_meta_character(c) at line 214 is true\n",
        "precondition: c in text.chars() at line 213 is false\n"
      ],
      "input_infer": "text: \"\", text: \"abc\", text: \".*+?()|[]{}^$#&-~\", text: \"a+b*c?\", text: \"hello\\\\world\"\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = String::new();",
                "    escape_into(\"\", &mut buf);",
                "}"
              ],
              "oracle": [
                "    let mut buf = String::new(); escape_into(\"abc\", &mut buf); assert_eq!(buf, \"abc\");",
                "    let mut buf = String::new(); escape_into(\"\\\\.+?*()\", &mut buf); assert_eq!(buf, \"\\\\\\\\.\\\\+\\\\?\\\\*\\\\(\\\\)\");",
                "    let mut buf = String::new(); escape_into(\"no_meta\", &mut buf); assert_eq!(buf, \"no_meta\");",
                "    let mut buf = String::new(); escape_into(\"special^chars$\", &mut buf); assert_eq!(buf, \"special\\\\^chars\\\\$\");",
                "    let mut buf = String::new(); escape_into(\"just-~test\", &mut buf); assert_eq!(buf, \"just-\\\\~test\");",
                "    let mut buf = String::new(); escape_into(\"mixed\\\\characters()\", &mut buf); assert_eq!(buf, \"mixed\\\\\\\\characters\\\\(\\\\)\");"
              ],
              "code": [
                "{",
                "    let mut buf = String::new();",
                "    escape_into(\"\", &mut buf);",
                "    let mut buf = String::new(); escape_into(\"abc\", &mut buf); assert_eq!(buf, \"abc\");",
                "    let mut buf = String::new(); escape_into(\"\\\\.+?*()\", &mut buf); assert_eq!(buf, \"\\\\\\\\.\\\\+\\\\?\\\\*\\\\(\\\\)\");",
                "    let mut buf = String::new(); escape_into(\"no_meta\", &mut buf); assert_eq!(buf, \"no_meta\");",
                "    let mut buf = String::new(); escape_into(\"special^chars$\", &mut buf); assert_eq!(buf, \"special\\\\^chars\\\\$\");",
                "    let mut buf = String::new(); escape_into(\"just-~test\", &mut buf); assert_eq!(buf, \"just-\\\\~test\");",
                "    let mut buf = String::new(); escape_into(\"mixed\\\\characters()\", &mut buf); assert_eq!(buf, \"mixed\\\\\\\\characters\\\\(\\\\)\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = String::new();",
                "    escape_into(\"abc\", &mut buf);",
                "}"
              ],
              "oracle": [
                "    buf == \"abc\"",
                "    buf.len() == 3"
              ],
              "code": [
                "{",
                "    let mut buf = String::new();",
                "    escape_into(\"abc\", &mut buf);",
                "    buf == \"abc\"",
                "    buf.len() == 3",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = String::new();",
                "    escape_into(\".*+?()|[]{}^$#&-~\", &mut buf);",
                "}"
              ],
              "oracle": [
                "    buf == r\"\\.\\*\\+\\?\\(\\)\\|\\[\\]\\{\\}\\^\\$\\#\\&\\-\\~\""
              ],
              "code": [
                "{",
                "    let mut buf = String::new();",
                "    escape_into(\".*+?()|[]{}^$#&-~\", &mut buf);",
                "    buf == r\"\\.\\*\\+\\?\\(\\)\\|\\[\\]\\{\\}\\^\\$\\#\\&\\-\\~\"",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = String::new();",
                "    escape_into(\"a+b*c?\", &mut buf);",
                "}"
              ],
              "oracle": [
                "    let mut buf = String::new();",
                "    escape_into(\"a+b*c?\", &mut buf);",
                "    assert_eq!(buf, \"\\\\a\\\\+\\\\b\\\\*\\\\c\\\\?\");",
                "    let mut buf = String::new();",
                "    escape_into(\"hello\", &mut buf);",
                "    assert_eq!(buf, \"hello\");",
                "    let mut buf = String::new();",
                "    escape_into(\"\\\\ ( ) [ ] { } * + ? . ^ $ | - & ~\", &mut buf);",
                "    assert_eq!(buf, \"\\\\\\\\ \\\\( \\\\) \\\\[ \\\\] \\\\{ \\\\} \\\\* \\\\+ \\\\? \\\\. \\\\^ \\\\$ \\\\| \\\\- \\\\& \\\\~\");",
                "    let mut buf = String::new();",
                "    escape_into(\"\", &mut buf);",
                "    assert_eq!(buf, \"\");"
              ],
              "code": [
                "{",
                "    let mut buf = String::new();",
                "    escape_into(\"a+b*c?\", &mut buf);",
                "    let mut buf = String::new();",
                "    escape_into(\"a+b*c?\", &mut buf);",
                "    assert_eq!(buf, \"\\\\a\\\\+\\\\b\\\\*\\\\c\\\\?\");",
                "    let mut buf = String::new();",
                "    escape_into(\"hello\", &mut buf);",
                "    assert_eq!(buf, \"hello\");",
                "    let mut buf = String::new();",
                "    escape_into(\"\\\\ ( ) [ ] { } * + ? . ^ $ | - & ~\", &mut buf);",
                "    assert_eq!(buf, \"\\\\\\\\ \\\\( \\\\) \\\\[ \\\\] \\\\{ \\\\} \\\\* \\\\+ \\\\? \\\\. \\\\^ \\\\$ \\\\| \\\\- \\\\& \\\\~\");",
                "    let mut buf = String::new();",
                "    escape_into(\"\", &mut buf);",
                "    assert_eq!(buf, \"\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = String::new();",
                "    escape_into(\"hello\\\\world\", &mut buf);",
                "}"
              ],
              "oracle": [
                "    buf == \"hello\\\\\\\\world\"",
                "    buf.len() == 14",
                "    escape_into(\"hello+world\", &mut buf);",
                "    buf == \"hello\\\\+world\"",
                "    buf.len() == 12",
                "    escape_into(\"hello*world\", &mut buf);",
                "    buf == \"hello\\\\*world\"",
                "    buf.len() == 12",
                "    escape_into(\"hello?world\", &mut buf);",
                "    buf == \"hello\\\\?world\"",
                "    buf.len() == 12",
                "    escape_into(\"hello(world)\", &mut buf);",
                "    buf == \"hello\\\\(world\\\\)\"",
                "    buf.len() == 14",
                "    escape_into(\"hello|world\", &mut buf);",
                "    buf == \"hello\\\\|world\"",
                "    buf.len() == 12",
                "    escape_into(\"hello[world]\", &mut buf);",
                "    buf == \"hello\\\\[world\\\\]\"",
                "    buf.len() == 14",
                "    escape_into(\"hello{world}\", &mut buf);",
                "    buf == \"hello\\\\{world\\\\}\"",
                "    buf.len() == 14",
                "    escape_into(\"hello^world\", &mut buf);",
                "    buf == \"hello\\\\^world\"",
                "    buf.len() == 12",
                "    escape_into(\"hello$world\", &mut buf);",
                "    buf == \"hello\\\\$world\"",
                "    buf.len() == 12",
                "    escape_into(\"hello#world\", &mut buf);",
                "    buf == \"hello\\\\#world\"",
                "    buf.len() == 12",
                "    escape_into(\"hello&world\", &mut buf);",
                "    buf == \"hello\\\\&world\"",
                "    buf.len() == 12",
                "    escape_into(\"hello-world\", &mut buf);",
                "    buf == \"hello\\\\-world\"",
                "    buf.len() == 12",
                "    escape_into(\"hello~world\", &mut buf);",
                "    buf == \"hello\\\\~world\"",
                "    buf.len() == 12",
                "    escape_into(\"hello world\", &mut buf);",
                "    buf == \"hello world\"",
                "    buf.len() == 11"
              ],
              "code": [
                "{",
                "    let mut buf = String::new();",
                "    escape_into(\"hello\\\\world\", &mut buf);",
                "    buf == \"hello\\\\\\\\world\"",
                "    buf.len() == 14",
                "    escape_into(\"hello+world\", &mut buf);",
                "    buf == \"hello\\\\+world\"",
                "    buf.len() == 12",
                "    escape_into(\"hello*world\", &mut buf);",
                "    buf == \"hello\\\\*world\"",
                "    buf.len() == 12",
                "    escape_into(\"hello?world\", &mut buf);",
                "    buf == \"hello\\\\?world\"",
                "    buf.len() == 12",
                "    escape_into(\"hello(world)\", &mut buf);",
                "    buf == \"hello\\\\(world\\\\)\"",
                "    buf.len() == 14",
                "    escape_into(\"hello|world\", &mut buf);",
                "    buf == \"hello\\\\|world\"",
                "    buf.len() == 12",
                "    escape_into(\"hello[world]\", &mut buf);",
                "    buf == \"hello\\\\[world\\\\]\"",
                "    buf.len() == 14",
                "    escape_into(\"hello{world}\", &mut buf);",
                "    buf == \"hello\\\\{world\\\\}\"",
                "    buf.len() == 14",
                "    escape_into(\"hello^world\", &mut buf);",
                "    buf == \"hello\\\\^world\"",
                "    buf.len() == 12",
                "    escape_into(\"hello$world\", &mut buf);",
                "    buf == \"hello\\\\$world\"",
                "    buf.len() == 12",
                "    escape_into(\"hello#world\", &mut buf);",
                "    buf == \"hello\\\\#world\"",
                "    buf.len() == 12",
                "    escape_into(\"hello&world\", &mut buf);",
                "    buf == \"hello\\\\&world\"",
                "    buf.len() == 12",
                "    escape_into(\"hello-world\", &mut buf);",
                "    buf == \"hello\\\\-world\"",
                "    buf.len() == 12",
                "    escape_into(\"hello~world\", &mut buf);",
                "    buf == \"hello\\\\~world\"",
                "    buf.len() == 12",
                "    escape_into(\"hello world\", &mut buf);",
                "    buf == \"hello world\"",
                "    buf.len() == 11",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: c in text.chars() at line 213 is true\n",
        "precondition: is_meta_character(c) at line 214 is false\n",
        "precondition: c in text.chars() at line 213 is false\n"
      ],
      "input_infer": "Input: text containing only ASCII characters that are not meta characters, and a mutable String buffer.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = String::new();",
                "    let text = \"hello world\"; // ASCII characters that are not meta characters",
                "    escape_into(text, &mut buf);",
                "}"
              ],
              "oracle": [
                "    buf.is_empty() // Ensure buffer is empty before the call",
                "    buf.len() == 11 // Validate buffer length matches input text length",
                "    buf == \"hello world\" // Verify the buffer content matches the original text"
              ],
              "code": [
                "{",
                "    let mut buf = String::new();",
                "    let text = \"hello world\"; // ASCII characters that are not meta characters",
                "    escape_into(text, &mut buf);",
                "    buf.is_empty() // Ensure buffer is empty before the call",
                "    buf.len() == 11 // Validate buffer length matches input text length",
                "    buf == \"hello world\" // Verify the buffer content matches the original text",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = String::new();",
                "    let text = \"hello_world\"; // Contains an underscore, which is not a meta character",
                "    escape_into(text, &mut buf);",
                "}"
              ],
              "oracle": [
                "    buf == \"hello_world\"",
                "    buf.len() == 11",
                "    buf.capacity() >= text.len()"
              ],
              "code": [
                "{",
                "    let mut buf = String::new();",
                "    let text = \"hello_world\"; // Contains an underscore, which is not a meta character",
                "    escape_into(text, &mut buf);",
                "    buf == \"hello_world\"",
                "    buf.len() == 11",
                "    buf.capacity() >= text.len()",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = String::new();",
                "    let text = \"\"; // Empty input",
                "    escape_into(text, &mut buf);",
                "}"
              ],
              "oracle": [
                "    buf.is_empty()",
                "    buf.len() == 0",
                "    buf == \"\"",
                "    buf.capacity() == text.len()",
                "    buf.push('a'); escape_into(\"a\", &mut buf); assert_eq!(buf, \"\\\\a\")",
                "    buf.push('b'); escape_into(\"b\", &mut buf); assert_eq!(buf, \"\\\\b\")",
                "    buf.push('c'); escape_into(\"c\", &mut buf); assert_eq!(buf, \"\\\\c\")",
                "    buf.push('1'); escape_into(\"1\", &mut buf); assert_eq!(buf, \"\\\\1\")",
                "    buf.push(' '); escape_into(\" \", &mut buf); assert_eq!(buf, \"\\\\ \")",
                "    buf.push('\\n'); escape_into(\"\\n\", &mut buf); assert_eq!(buf, \"\\\\n\")",
                "    escape_into(\"abc\", &mut buf); assert_eq!(buf, \"abc\")",
                "    escape_into(\"no_meta\", &mut buf); assert_eq!(buf, \"no_meta\")",
                "    escape_into(\"..?\", &mut buf); assert_eq!(buf, \"\\\\.\\\\.\\\\?\")",
                "    escape_into(\"100%\", &mut buf); assert_eq!(buf, \"100%\")",
                "    escape_into(\"a|b\", &mut buf); assert_eq!(buf, \"\\\\a|\\\\b\")",
                "    escape_into(\"(){}\", &mut buf); assert_eq!(buf, \"\\\\(\\\\)\\\\{\\\\}\")"
              ],
              "code": [
                "{",
                "    let mut buf = String::new();",
                "    let text = \"\"; // Empty input",
                "    escape_into(text, &mut buf);",
                "    buf.is_empty()",
                "    buf.len() == 0",
                "    buf == \"\"",
                "    buf.capacity() == text.len()",
                "    buf.push('a'); escape_into(\"a\", &mut buf); assert_eq!(buf, \"\\\\a\")",
                "    buf.push('b'); escape_into(\"b\", &mut buf); assert_eq!(buf, \"\\\\b\")",
                "    buf.push('c'); escape_into(\"c\", &mut buf); assert_eq!(buf, \"\\\\c\")",
                "    buf.push('1'); escape_into(\"1\", &mut buf); assert_eq!(buf, \"\\\\1\")",
                "    buf.push(' '); escape_into(\" \", &mut buf); assert_eq!(buf, \"\\\\ \")",
                "    buf.push('\\n'); escape_into(\"\\n\", &mut buf); assert_eq!(buf, \"\\\\n\")",
                "    escape_into(\"abc\", &mut buf); assert_eq!(buf, \"abc\")",
                "    escape_into(\"no_meta\", &mut buf); assert_eq!(buf, \"no_meta\")",
                "    escape_into(\"..?\", &mut buf); assert_eq!(buf, \"\\\\.\\\\.\\\\?\")",
                "    escape_into(\"100%\", &mut buf); assert_eq!(buf, \"100%\")",
                "    escape_into(\"a|b\", &mut buf); assert_eq!(buf, \"\\\\a|\\\\b\")",
                "    escape_into(\"(){}\", &mut buf); assert_eq!(buf, \"\\\\(\\\\)\\\\{\\\\}\")",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = String::new();",
                "    let text = \"a\"; // Single ASCII character that is not a meta character",
                "    escape_into(text, &mut buf);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf, \"a\");"
              ],
              "code": [
                "{",
                "    let mut buf = String::new();",
                "    let text = \"a\"; // Single ASCII character that is not a meta character",
                "    escape_into(text, &mut buf);",
                "    assert_eq!(buf, \"a\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = String::new();",
                "    let text = \"12345\"; // Only numerical characters, none are meta characters",
                "    escape_into(text, &mut buf);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf, \"12345\");",
                "    buf.clear();",
                "    let text = \"abcde\"; // Only alphabetical characters, none are meta characters",
                "    escape_into(text, &mut buf);",
                "    assert_eq!(buf, \"abcde\");",
                "    buf.clear();",
                "    let text = \"!@#$%\"; // Only special characters, none are meta characters",
                "    escape_into(text, &mut buf);",
                "    assert_eq!(buf, \"!@#$%\");",
                "    buf.clear();",
                "    let text = \" \"; // A single space character, which is not a meta character",
                "    escape_into(text, &mut buf);",
                "    assert_eq!(buf, \" \");",
                "    buf.clear();",
                "    let text = \"\"; // An empty string input",
                "    escape_into(text, &mut buf);",
                "    assert_eq!(buf, \"\");",
                "    buf.clear();"
              ],
              "code": [
                "{",
                "    let mut buf = String::new();",
                "    let text = \"12345\"; // Only numerical characters, none are meta characters",
                "    escape_into(text, &mut buf);",
                "    assert_eq!(buf, \"12345\");",
                "    buf.clear();",
                "    let text = \"abcde\"; // Only alphabetical characters, none are meta characters",
                "    escape_into(text, &mut buf);",
                "    assert_eq!(buf, \"abcde\");",
                "    buf.clear();",
                "    let text = \"!@#$%\"; // Only special characters, none are meta characters",
                "    escape_into(text, &mut buf);",
                "    assert_eq!(buf, \"!@#$%\");",
                "    buf.clear();",
                "    let text = \" \"; // A single space character, which is not a meta character",
                "    escape_into(text, &mut buf);",
                "    assert_eq!(buf, \" \");",
                "    buf.clear();",
                "    let text = \"\"; // An empty string input",
                "    escape_into(text, &mut buf);",
                "    assert_eq!(buf, \"\");",
                "    buf.clear();",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: c in text.chars() at line 213 is false\n"
      ],
      "input_infer": "test input conditions or ranges: text contains no meta characters and has a length of 0 to 100 characters, buf starts empty.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = String::new();",
                "    escape_into(\"\", &mut buf);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf, \"\");",
                "    escape_into(\"abc\", &mut buf);",
                "    assert_eq!(buf, \"abc\");",
                "    escape_into(\"Hello\", &mut buf);",
                "    assert_eq!(buf, \"Hello\");",
                "    escape_into(\"123\", &mut buf);",
                "    assert_eq!(buf, \"123\");",
                "    escape_into(\"text_without_meta\", &mut buf);",
                "    assert_eq!(buf, \"text_without_meta\");"
              ],
              "code": [
                "{",
                "    let mut buf = String::new();",
                "    escape_into(\"\", &mut buf);",
                "    assert_eq!(buf, \"\");",
                "    escape_into(\"abc\", &mut buf);",
                "    assert_eq!(buf, \"abc\");",
                "    escape_into(\"Hello\", &mut buf);",
                "    assert_eq!(buf, \"Hello\");",
                "    escape_into(\"123\", &mut buf);",
                "    assert_eq!(buf, \"123\");",
                "    escape_into(\"text_without_meta\", &mut buf);",
                "    assert_eq!(buf, \"text_without_meta\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = String::new();",
                "    escape_into(\"abc\", &mut buf);",
                "}"
              ],
              "oracle": [
                "    let mut buf = String::new();",
                "    escape_into(\"abc\", &mut buf);",
                "    assert_eq!(buf, \"abc\");"
              ],
              "code": [
                "{",
                "    let mut buf = String::new();",
                "    escape_into(\"abc\", &mut buf);",
                "    let mut buf = String::new();",
                "    escape_into(\"abc\", &mut buf);",
                "    assert_eq!(buf, \"abc\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = String::new();",
                "    escape_into(\"abcdefg\", &mut buf);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf, \"abcdefg\");"
              ],
              "code": [
                "{",
                "    let mut buf = String::new();",
                "    escape_into(\"abcdefg\", &mut buf);",
                "    assert_eq!(buf, \"abcdefg\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = String::new();",
                "    escape_into(\"abcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghij\", &mut buf);",
                "}"
              ],
              "oracle": [
                "    let mut buf = String::new();",
                "    escape_into(\"abcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghij\", &mut buf);",
                "    assert_eq!(buf, \"abcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghij\");"
              ],
              "code": [
                "{",
                "    let mut buf = String::new();",
                "    escape_into(\"abcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghij\", &mut buf);",
                "    let mut buf = String::new();",
                "    escape_into(\"abcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghij\", &mut buf);",
                "    assert_eq!(buf, \"abcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghij\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = String::new();",
                "    escape_into(\"a\", &mut buf);",
                "}"
              ],
              "oracle": [
                "    buf == \"a\""
              ],
              "code": [
                "{",
                "    let mut buf = String::new();",
                "    escape_into(\"a\", &mut buf);",
                "    buf == \"a\"",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = String::new();",
                "    let text = \"x\".repeat(100);",
                "    escape_into(&text, &mut buf);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf, \"x\".repeat(100));"
              ],
              "code": [
                "{",
                "    let mut buf = String::new();",
                "    let text = \"x\".repeat(100);",
                "    escape_into(&text, &mut buf);",
                "    assert_eq!(buf, \"x\".repeat(100));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}