{
  "name": "regex_syntax::hir::literal::{impl#4}::reverse_literals",
  "mod_info": {
    "name": "hir::literal",
    "loc": "regex-syntax/src/hir/mod.rs:42:1:42:17"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/literal.rs:1400:5:1406:6",
  "fn_tests": [
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: let Some(ref mut lits) = self.literals at line 1401 is true\n",
        "precondition: lit in lits.iter_mut() at line 1402 is true\n",
        "precondition: lit in lits.iter_mut() at line 1402 is false\n"
      ],
      "input_infer": "Seq with Some(vec![Literal::exact(vec![b'f', b'o', b'o']), Literal::exact(vec![b'r', b'a', b'b'])]) or Seq with Some(vec![]) or Seq with Some(vec![Literal::exact(vec![])])\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut seq = Seq {",
                "        literals: Some(vec![",
                "            Literal::exact(vec![b'f', b'o', b'o']),",
                "            Literal::exact(vec![b'r', b'a', b'b']),",
                "        ]),",
                "    };",
                "    seq.reverse_literals();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(seq.literals().unwrap()[0].as_bytes(), b\"oof\");",
                "    assert_eq!(seq.literals().unwrap()[1].as_bytes(), b\"bar\");",
                "    assert!(seq.literals().is_some());"
              ],
              "code": [
                "{",
                "    let mut seq = Seq {",
                "        literals: Some(vec![",
                "            Literal::exact(vec![b'f', b'o', b'o']),",
                "            Literal::exact(vec![b'r', b'a', b'b']),",
                "        ]),",
                "    };",
                "    seq.reverse_literals();",
                "    assert_eq!(seq.literals().unwrap()[0].as_bytes(), b\"oof\");",
                "    assert_eq!(seq.literals().unwrap()[1].as_bytes(), b\"bar\");",
                "    assert!(seq.literals().is_some());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut seq = Seq {",
                "        literals: Some(vec![]),",
                "    };",
                "    seq.reverse_literals();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(seq.literals(), Some(&[]));",
                "    seq.literals = Some(vec![Literal::exact(b\"abc\".to_vec()), Literal::exact(b\"def\".to_vec())]);",
                "    seq.reverse_literals();",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"cba\".to_vec()), Literal::exact(b\"fed\".to_vec())]));",
                "    seq.literals = Some(vec![Literal::exact(b\"x\".to_vec())]);",
                "    seq.reverse_literals();",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"x\".to_vec())]));",
                "    seq.literals = Some(vec![Literal::exact(b\"\".to_vec()), Literal::exact(b\"xyz\".to_vec())]);",
                "    seq.reverse_literals();",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"zyx\".to_vec()), Literal::exact(b\"\".to_vec())]));"
              ],
              "code": [
                "{",
                "    let mut seq = Seq {",
                "        literals: Some(vec![]),",
                "    };",
                "    seq.reverse_literals();",
                "    assert_eq!(seq.literals(), Some(&[]));",
                "    seq.literals = Some(vec![Literal::exact(b\"abc\".to_vec()), Literal::exact(b\"def\".to_vec())]);",
                "    seq.reverse_literals();",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"cba\".to_vec()), Literal::exact(b\"fed\".to_vec())]));",
                "    seq.literals = Some(vec![Literal::exact(b\"x\".to_vec())]);",
                "    seq.reverse_literals();",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"x\".to_vec())]));",
                "    seq.literals = Some(vec![Literal::exact(b\"\".to_vec()), Literal::exact(b\"xyz\".to_vec())]);",
                "    seq.reverse_literals();",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"zyx\".to_vec()), Literal::exact(b\"\".to_vec())]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut seq = Seq {",
                "        literals: Some(vec![Literal::exact(vec![])]),",
                "    };",
                "    seq.reverse_literals();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(vec![])]));",
                "    let mut seq = Seq {",
                "    literals: Some(vec![Literal::exact(vec![b'f', b'o', b'o'])]),",
                "    };",
                "    seq.reverse_literals();",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(vec![b'o', b'o', b'f'])]));",
                "    let mut seq = Seq {",
                "    literals: Some(vec![Literal::exact(vec![b'r', b'a', b'b]),",
                "    };",
                "    seq.reverse_literals();",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(vec![b'b', b'a', b'r'])]));",
                "    let mut seq = Seq {",
                "    literals: Some(vec![Literal::exact(vec![b'h', b'e', b'l', b'l', b'o])]),",
                "    };",
                "    seq.reverse_literals();",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(vec![b'o', b'l', b'l', b'e', b'h'])]));",
                "    let mut seq = Seq {",
                "    literals: Some(vec![Literal::exact(vec![b'a', b'b']), Literal::exact(vec![b'c', b'd'])]),",
                "    };",
                "    seq.reverse_literals();",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(vec![b'b', b'a']), Literal::exact(vec![b'd', b'c'])]));"
              ],
              "code": [
                "{",
                "    let mut seq = Seq {",
                "        literals: Some(vec![Literal::exact(vec![])]),",
                "    };",
                "    seq.reverse_literals();",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(vec![])]));",
                "    let mut seq = Seq {",
                "    literals: Some(vec![Literal::exact(vec![b'f', b'o', b'o'])]),",
                "    };",
                "    seq.reverse_literals();",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(vec![b'o', b'o', b'f'])]));",
                "    let mut seq = Seq {",
                "    literals: Some(vec![Literal::exact(vec![b'r', b'a', b'b]),",
                "    };",
                "    seq.reverse_literals();",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(vec![b'b', b'a', b'r'])]));",
                "    let mut seq = Seq {",
                "    literals: Some(vec![Literal::exact(vec![b'h', b'e', b'l', b'l', b'o])]),",
                "    };",
                "    seq.reverse_literals();",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(vec![b'o', b'l', b'l', b'e', b'h'])]));",
                "    let mut seq = Seq {",
                "    literals: Some(vec![Literal::exact(vec![b'a', b'b']), Literal::exact(vec![b'c', b'd'])]),",
                "    };",
                "    seq.reverse_literals();",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(vec![b'b', b'a']), Literal::exact(vec![b'd', b'c'])]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: let Some(ref mut lits) = self.literals at line 1401 is true\n",
        "precondition: lit in lits.iter_mut() at line 1402 is false\n"
      ],
      "input_infer": "Option<Vec<Literal>> containing at least one Literal with non-empty byte vector and exact set to true for `self.literals`; also ensure that for the tested Literals, any empty Literal (exact, inexact, or otherwise) should be excluded.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut seq = Seq {",
                "        literals: Some(vec![",
                "            Literal::exact(b\"abc\".to_vec()),",
                "            Literal::exact(b\"def\".to_vec()),",
                "        ]),",
                "    };",
                "    seq.reverse_literals();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"cba\".to_vec()), Literal::exact(b\"fed\".to_vec())]));"
              ],
              "code": [
                "{",
                "    let mut seq = Seq {",
                "        literals: Some(vec![",
                "            Literal::exact(b\"abc\".to_vec()),",
                "            Literal::exact(b\"def\".to_vec()),",
                "        ]),",
                "    };",
                "    seq.reverse_literals();",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"cba\".to_vec()), Literal::exact(b\"fed\".to_vec())]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut seq = Seq {",
                "        literals: Some(vec![",
                "            Literal::exact(b\"xyz\".to_vec()),",
                "        ]),",
                "    };",
                "    seq.reverse_literals();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(seq.literals().unwrap()[0].as_bytes(), b\"zyx\");",
                "    assert!(seq.literals().unwrap()[0].is_exact());",
                "    assert!(seq.is_finite());",
                "    assert!(!seq.is_empty());",
                "    assert_eq!(seq.len().unwrap(), 1);",
                "    assert_eq!(seq.max_literal_len().unwrap(), 3);"
              ],
              "code": [
                "{",
                "    let mut seq = Seq {",
                "        literals: Some(vec![",
                "            Literal::exact(b\"xyz\".to_vec()),",
                "        ]),",
                "    };",
                "    seq.reverse_literals();",
                "    assert_eq!(seq.literals().unwrap()[0].as_bytes(), b\"zyx\");",
                "    assert!(seq.literals().unwrap()[0].is_exact());",
                "    assert!(seq.is_finite());",
                "    assert!(!seq.is_empty());",
                "    assert_eq!(seq.len().unwrap(), 1);",
                "    assert_eq!(seq.max_literal_len().unwrap(), 3);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut seq = Seq {",
                "        literals: Some(vec![",
                "            Literal::exact(b\"hello\".to_vec()),",
                "            Literal::exact(b\"world\".to_vec()),",
                "            Literal::exact(b\"rust\".to_vec()),",
                "        ]),",
                "    };",
                "    seq.reverse_literals();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(seq.literals().unwrap()[0].as_bytes(), b\"olleh\");",
                "    assert_eq!(seq.literals().unwrap()[1].as_bytes(), b\"dlrow\");",
                "    assert_eq!(seq.literals().unwrap()[2].as_bytes(), b\"tsur\");"
              ],
              "code": [
                "{",
                "    let mut seq = Seq {",
                "        literals: Some(vec![",
                "            Literal::exact(b\"hello\".to_vec()),",
                "            Literal::exact(b\"world\".to_vec()),",
                "            Literal::exact(b\"rust\".to_vec()),",
                "        ]),",
                "    };",
                "    seq.reverse_literals();",
                "    assert_eq!(seq.literals().unwrap()[0].as_bytes(), b\"olleh\");",
                "    assert_eq!(seq.literals().unwrap()[1].as_bytes(), b\"dlrow\");",
                "    assert_eq!(seq.literals().unwrap()[2].as_bytes(), b\"tsur\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut seq = Seq {",
                "        literals: Some(vec![",
                "            Literal::exact(b\"one\".to_vec()),",
                "            Literal::exact(b\"two\".to_vec()),",
                "            Literal::exact(b\"three\".to_vec()),",
                "        ]),",
                "    };",
                "    seq.reverse_literals();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(seq.literals().unwrap()[0].as_bytes(), b\"eno\");",
                "    assert_eq!(seq.literals().unwrap()[1].as_bytes(), b\"owt\");",
                "    assert_eq!(seq.literals().unwrap()[2].as_bytes(), b\"eerht\");",
                "    assert!(seq.literals().unwrap()[0].is_exact());",
                "    assert!(seq.literals().unwrap()[1].is_exact());",
                "    assert!(seq.literals().unwrap()[2].is_exact());"
              ],
              "code": [
                "{",
                "    let mut seq = Seq {",
                "        literals: Some(vec![",
                "            Literal::exact(b\"one\".to_vec()),",
                "            Literal::exact(b\"two\".to_vec()),",
                "            Literal::exact(b\"three\".to_vec()),",
                "        ]),",
                "    };",
                "    seq.reverse_literals();",
                "    assert_eq!(seq.literals().unwrap()[0].as_bytes(), b\"eno\");",
                "    assert_eq!(seq.literals().unwrap()[1].as_bytes(), b\"owt\");",
                "    assert_eq!(seq.literals().unwrap()[2].as_bytes(), b\"eerht\");",
                "    assert!(seq.literals().unwrap()[0].is_exact());",
                "    assert!(seq.literals().unwrap()[1].is_exact());",
                "    assert!(seq.literals().unwrap()[2].is_exact());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut seq = Seq {",
                "        literals: Some(vec![",
                "            Literal::exact(b\"\".to_vec()),",
                "        ]),",
                "    };",
                "    seq.reverse_literals();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"\".to_vec())]));",
                "    assert_eq!(seq.len(), Some(1));",
                "    assert!(seq.is_exact());",
                "    assert!(!seq.is_empty());",
                "    assert!(seq.is_finite());",
                "    assert!(seq.is_inexact());"
              ],
              "code": [
                "{",
                "    let mut seq = Seq {",
                "        literals: Some(vec![",
                "            Literal::exact(b\"\".to_vec()),",
                "        ]),",
                "    };",
                "    seq.reverse_literals();",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"\".to_vec())]));",
                "    assert_eq!(seq.len(), Some(1));",
                "    assert!(seq.is_exact());",
                "    assert!(!seq.is_empty());",
                "    assert!(seq.is_finite());",
                "    assert!(seq.is_inexact());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}