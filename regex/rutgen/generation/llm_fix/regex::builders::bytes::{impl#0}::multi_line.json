{
  "name": "regex::builders::bytes::{impl#0}::multi_line",
  "mod_info": {
    "name": "builders::bytes",
    "loc": "src/builders.rs:1357:1:2539:2"
  },
  "visible": true,
  "loc": "src/builders.rs:1531:9:1534:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "pattern: any valid regex string, multi_line: true/false\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern = r\"^foo$\";",
                "    let mut builder = RegexBuilder::new(pattern);",
                "    builder.multi_line(true);",
                "}"
              ],
              "oracle": [
                "    builder.multi_line(true);",
                "    assert_eq!(builder.builder.syntaxc.multi_line, true);",
                "    builder.multi_line(false);",
                "    assert_eq!(builder.builder.syntaxc.multi_line, false);",
                "    let result = builder.build();",
                "    assert!(result.is_ok());",
                "    let re = result.unwrap();",
                "    assert_eq!(Some(1..4), re.find(b\"\\nfoo\\n\").map(|m| m.range()));",
                "    assert_eq!(None, re.find(b\"foo\").map(|m| m.range()));"
              ],
              "code": [
                "{",
                "    let pattern = r\"^foo$\";",
                "    let mut builder = RegexBuilder::new(pattern);",
                "    builder.multi_line(true);",
                "    builder.multi_line(true);",
                "    assert_eq!(builder.builder.syntaxc.multi_line, true);",
                "    builder.multi_line(false);",
                "    assert_eq!(builder.builder.syntaxc.multi_line, false);",
                "    let result = builder.build();",
                "    assert!(result.is_ok());",
                "    let re = result.unwrap();",
                "    assert_eq!(Some(1..4), re.find(b\"\\nfoo\\n\").map(|m| m.range()));",
                "    assert_eq!(None, re.find(b\"foo\").map(|m| m.range()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern = r\"^bar$\";",
                "    let mut builder = RegexBuilder::new(pattern);",
                "    builder.multi_line(false);",
                "}"
              ],
              "oracle": [
                "    builder.multi_line(false);",
                "    assert_eq!(builder, builder);"
              ],
              "code": [
                "{",
                "    let pattern = r\"^bar$\";",
                "    let mut builder = RegexBuilder::new(pattern);",
                "    builder.multi_line(false);",
                "    builder.multi_line(false);",
                "    assert_eq!(builder, builder);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern = r\"^\\d{3}-\\d{2}-\\d{4}$\";",
                "    let mut builder = RegexBuilder::new(pattern);",
                "    builder.multi_line(true);",
                "}"
              ],
              "oracle": [
                "    builder.multi_line(true).assert_eq(&builder);",
                "    builder.multi_line(false).assert_eq(&builder);",
                "    builder.multi_line(true).multi_line(false).assert_eq(&builder);",
                "    builder.multi_line(false).multi_line(true).assert_eq(&builder);"
              ],
              "code": [
                "{",
                "    let pattern = r\"^\\d{3}-\\d{2}-\\d{4}$\";",
                "    let mut builder = RegexBuilder::new(pattern);",
                "    builder.multi_line(true);",
                "    builder.multi_line(true).assert_eq(&builder);",
                "    builder.multi_line(false).assert_eq(&builder);",
                "    builder.multi_line(true).multi_line(false).assert_eq(&builder);",
                "    builder.multi_line(false).multi_line(true).assert_eq(&builder);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern = r\"\";",
                "    let mut builder = RegexBuilder::new(pattern);",
                "    builder.multi_line(false);",
                "}"
              ],
              "oracle": [
                "    builder.multi_line(false);",
                "    assert_eq!(builder.multi_line(false), &builder);",
                "    builder.multi_line(true);",
                "    assert_eq!(builder.multi_line(true), &builder);",
                "    builder.multi_line(true);",
                "    builder.multi_line(false);",
                "    assert_eq!(builder.multi_line(false), &builder);",
                "    builder.multi_line(true);",
                "    assert_ne!(builder.multi_line(false), &builder);"
              ],
              "code": [
                "{",
                "    let pattern = r\"\";",
                "    let mut builder = RegexBuilder::new(pattern);",
                "    builder.multi_line(false);",
                "    builder.multi_line(false);",
                "    assert_eq!(builder.multi_line(false), &builder);",
                "    builder.multi_line(true);",
                "    assert_eq!(builder.multi_line(true), &builder);",
                "    builder.multi_line(true);",
                "    builder.multi_line(false);",
                "    assert_eq!(builder.multi_line(false), &builder);",
                "    builder.multi_line(true);",
                "    assert_ne!(builder.multi_line(false), &builder);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}