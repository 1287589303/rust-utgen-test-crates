{
  "name": "regex_lite::hir::{impl#3}::negate",
  "mod_info": {
    "name": "hir",
    "loc": "regex-lite/src/lib.rs:877:1:877:9"
  },
  "visible": false,
  "loc": "regex-lite/src/hir/mod.rs:418:5:473:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.ranges.is_empty() at line 422 is true\n"
      ],
      "input_infer": "self.ranges = [] (empty vector) or self.ranges containing a single ClassRange with start and end equal to the minimum valid char '\\x00' and maximum valid char 'char::MAX' respectively\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class = Class::new(vec![]);",
                "    class.negate();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class.ranges.len(), 1);",
                "    assert_eq!(class.ranges[0].start, '\\x00');",
                "    assert_eq!(class.ranges[0].end, char::MAX);"
              ],
              "code": [
                "{",
                "    let mut class = Class::new(vec![]);",
                "    class.negate();",
                "    assert_eq!(class.ranges.len(), 1);",
                "    assert_eq!(class.ranges[0].start, '\\x00');",
                "    assert_eq!(class.ranges[0].end, char::MAX);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class = Class::new(vec![ClassRange { start: '\\x00', end: '\\x00' }]);",
                "    class.negate();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class.ranges.len(), 1);",
                "    assert_eq!(class.ranges[0].start, '\\x00');",
                "    assert_eq!(class.ranges[0].end, char::MAX);"
              ],
              "code": [
                "{",
                "    let mut class = Class::new(vec![ClassRange { start: '\\x00', end: '\\x00' }]);",
                "    class.negate();",
                "    assert_eq!(class.ranges.len(), 1);",
                "    assert_eq!(class.ranges[0].start, '\\x00');",
                "    assert_eq!(class.ranges[0].end, char::MAX);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 4,
      "prompt_conds": [
        "precondition: self.ranges.is_empty() at line 422 is false\n",
        "precondition: self.ranges[0].start > MIN at line 435 is true\n",
        "precondition: i in 1..drain_end at line 442 is false\n",
        "precondition: self.ranges[drain_end - 1].end < MAX at line 459 is true\n"
      ],
      "input_infer": "self.ranges contains one ClassRange with start > '\\x00' and end < char::MAX, such as ClassRange { start: 'a', end: 'z' }\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class = Class::new(vec![ClassRange { start: 'a', end: 'z' }]);",
                "    class.negate();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class.ranges.len(), 1);",
                "    assert_eq!(class.ranges[0], ClassRange { start: '\\x00', end: 'a' });",
                "    assert_eq!(class.ranges[1], ClassRange { start: 'z' + 1 as char, end: char::MAX });",
                "    assert!(class.ranges.is_empty() == false);",
                "    assert!(class.ranges[0].start > '\\x00');",
                "    assert!(class.ranges.len() == 3);",
                "    assert!(class.ranges[class.ranges.len() - 1].end < char::MAX);"
              ],
              "code": [
                "{",
                "    let mut class = Class::new(vec![ClassRange { start: 'a', end: 'z' }]);",
                "    class.negate();",
                "    assert_eq!(class.ranges.len(), 1);",
                "    assert_eq!(class.ranges[0], ClassRange { start: '\\x00', end: 'a' });",
                "    assert_eq!(class.ranges[1], ClassRange { start: 'z' + 1 as char, end: char::MAX });",
                "    assert!(class.ranges.is_empty() == false);",
                "    assert!(class.ranges[0].start > '\\x00');",
                "    assert!(class.ranges.len() == 3);",
                "    assert!(class.ranges[class.ranges.len() - 1].end < char::MAX);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class = Class::new(vec![",
                "        ClassRange { start: 'a', end: 'c' },",
                "        ClassRange { start: 'g', end: 'j' },",
                "    ]);",
                "    class.negate();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class.ranges.len(), 2);",
                "    assert_eq!(class.ranges[0], ClassRange { start: '\\x00', end: 'a' });",
                "    assert_eq!(class.ranges[1], ClassRange { start: 'd', end: 'f' });",
                "    assert_eq!(class.ranges[2], ClassRange { start: 'k', end: char::MAX });"
              ],
              "code": [
                "{",
                "    let mut class = Class::new(vec![",
                "        ClassRange { start: 'a', end: 'c' },",
                "        ClassRange { start: 'g', end: 'j' },",
                "    ]);",
                "    class.negate();",
                "    assert_eq!(class.ranges.len(), 2);",
                "    assert_eq!(class.ranges[0], ClassRange { start: '\\x00', end: 'a' });",
                "    assert_eq!(class.ranges[1], ClassRange { start: 'd', end: 'f' });",
                "    assert_eq!(class.ranges[2], ClassRange { start: 'k', end: char::MAX });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class = Class::new(vec![",
                "        ClassRange { start: 'a', end: 'e' },",
                "        ClassRange { start: 'g', end: 'k' },",
                "    ]);",
                "    class.negate();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class.ranges.len(), 2);",
                "    assert_eq!(class.ranges[0], ClassRange { start: '\\x00', end: 'a' });",
                "    assert_eq!(class.ranges[1], ClassRange { start: 'f', end: 'g' });",
                "    assert_eq!(class.ranges[2], ClassRange { start: 'l', end: char::MAX });"
              ],
              "code": [
                "{",
                "    let mut class = Class::new(vec![",
                "        ClassRange { start: 'a', end: 'e' },",
                "        ClassRange { start: 'g', end: 'k' },",
                "    ]);",
                "    class.negate();",
                "    assert_eq!(class.ranges.len(), 2);",
                "    assert_eq!(class.ranges[0], ClassRange { start: '\\x00', end: 'a' });",
                "    assert_eq!(class.ranges[1], ClassRange { start: 'f', end: 'g' });",
                "    assert_eq!(class.ranges[2], ClassRange { start: 'l', end: char::MAX });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class = Class::new(vec![",
                "        ClassRange { start: 'd', end: 'g' },",
                "        ClassRange { start: 'i', end: 'm' },",
                "    ]);",
                "    class.negate();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class.ranges.len(), 3);",
                "    assert_eq!(class.ranges[0], ClassRange { start: '\\x00', end: 'c' });",
                "    assert_eq!(class.ranges[1], ClassRange { start: 'h', end: 'h' });",
                "    assert_eq!(class.ranges[2], ClassRange { start: 'n', end: char::MAX });"
              ],
              "code": [
                "{",
                "    let mut class = Class::new(vec![",
                "        ClassRange { start: 'd', end: 'g' },",
                "        ClassRange { start: 'i', end: 'm' },",
                "    ]);",
                "    class.negate();",
                "    assert_eq!(class.ranges.len(), 3);",
                "    assert_eq!(class.ranges[0], ClassRange { start: '\\x00', end: 'c' });",
                "    assert_eq!(class.ranges[1], ClassRange { start: 'h', end: 'h' });",
                "    assert_eq!(class.ranges[2], ClassRange { start: 'n', end: char::MAX });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class = Class::new(vec![",
                "        ClassRange { start: 'd', end: 'x' },",
                "    ]);",
                "    class.negate();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class.ranges.len(), 1);",
                "    assert_eq!(class.ranges[0], ClassRange { start: '\\x00', end: 'c' });",
                "    assert_eq!(class.ranges[1], ClassRange { start: 'y', end: char::MAX });"
              ],
              "code": [
                "{",
                "    let mut class = Class::new(vec![",
                "        ClassRange { start: 'd', end: 'x' },",
                "    ]);",
                "    class.negate();",
                "    assert_eq!(class.ranges.len(), 1);",
                "    assert_eq!(class.ranges[0], ClassRange { start: '\\x00', end: 'c' });",
                "    assert_eq!(class.ranges[1], ClassRange { start: 'y', end: char::MAX });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 7,
      "prompt_conds": [
        "precondition: self.ranges.is_empty() at line 422 is false\n",
        "precondition: self.ranges[0].start > MIN at line 435 is false, with bound self.ranges[0].start == MIN\n",
        "precondition: i in 1..drain_end at line 442 is true\n",
        "precondition: i in 1..drain_end at line 442 is false\n",
        "precondition: self.ranges[drain_end - 1].end < MAX at line 459 is false, with bound self.ranges[drain_end - 1].end == MAX\n"
      ],
      "input_infer": "self.ranges with at least one ClassRange where the first range starts at MIN and the last range ends at MAX, with additional ranges included to cover scenarios for i in 1..drain_end being true and false.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class = Class::new(vec![]);",
                "    class.negate();",
                "}"
              ],
              "oracle": [
                "    class.ranges.is_empty() == false",
                "    class.ranges[0].start > MIN == false",
                "    class.ranges[0].start == MIN",
                "    class.ranges.len() == 1",
                "    class.ranges[0].end == MAX",
                "    class.ranges[0].end < MAX == false",
                "    class.ranges.len() == 2",
                "    class.ranges[0].end > class.ranges[1].start",
                "    class.ranges[len - 1].end == MAX"
              ],
              "code": [
                "{",
                "    let mut class = Class::new(vec![]);",
                "    class.negate();",
                "    class.ranges.is_empty() == false",
                "    class.ranges[0].start > MIN == false",
                "    class.ranges[0].start == MIN",
                "    class.ranges.len() == 1",
                "    class.ranges[0].end == MAX",
                "    class.ranges[0].end < MAX == false",
                "    class.ranges.len() == 2",
                "    class.ranges[0].end > class.ranges[1].start",
                "    class.ranges[len - 1].end == MAX",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class = Class::new(vec![ClassRange { start: '\\x00', end: 'a' }]);",
                "    class.negate();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class.ranges.len(), 2);",
                "    assert_eq!(class.ranges[0], ClassRange { start: '\\x00', end: '\\x00' });",
                "    assert_eq!(class.ranges[1], ClassRange { start: 'b', end: char::MAX });"
              ],
              "code": [
                "{",
                "    let mut class = Class::new(vec![ClassRange { start: '\\x00', end: 'a' }]);",
                "    class.negate();",
                "    assert_eq!(class.ranges.len(), 2);",
                "    assert_eq!(class.ranges[0], ClassRange { start: '\\x00', end: '\\x00' });",
                "    assert_eq!(class.ranges[1], ClassRange { start: 'b', end: char::MAX });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class = Class::new(vec![ClassRange { start: 'a', end: 'b' }]);",
                "    class.negate();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class.ranges.len(), 2);",
                "    assert_eq!(class.ranges[0], ClassRange { start: '\\x00', end: 'a' });",
                "    assert_eq!(class.ranges[1], ClassRange { start: 'c', end: char::MAX });"
              ],
              "code": [
                "{",
                "    let mut class = Class::new(vec![ClassRange { start: 'a', end: 'b' }]);",
                "    class.negate();",
                "    assert_eq!(class.ranges.len(), 2);",
                "    assert_eq!(class.ranges[0], ClassRange { start: '\\x00', end: 'a' });",
                "    assert_eq!(class.ranges[1], ClassRange { start: 'c', end: char::MAX });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class = Class::new(vec![",
                "        ClassRange { start: 'a', end: 'c' },",
                "        ClassRange { start: 'e', end: 'g' },",
                "    ]);",
                "    class.negate();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class.ranges.len(), 2);",
                "    assert_eq!(class.ranges[0], ClassRange { start: '\\x00', end: 'a' });",
                "    assert_eq!(class.ranges[1], ClassRange { start: 'd', end: 'ÿ' });"
              ],
              "code": [
                "{",
                "    let mut class = Class::new(vec![",
                "        ClassRange { start: 'a', end: 'c' },",
                "        ClassRange { start: 'e', end: 'g' },",
                "    ]);",
                "    class.negate();",
                "    assert_eq!(class.ranges.len(), 2);",
                "    assert_eq!(class.ranges[0], ClassRange { start: '\\x00', end: 'a' });",
                "    assert_eq!(class.ranges[1], ClassRange { start: 'd', end: 'ÿ' });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class = Class::new(vec![",
                "        ClassRange { start: '\\x00', end: 'a' },",
                "        ClassRange { start: 'b', end: char::MAX },",
                "    ]);",
                "    class.negate();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class.ranges.len(), 1);",
                "    assert_eq!(class.ranges[0].start, '\\x01');",
                "    assert_eq!(class.ranges[0].end, 'a');",
                "    assert_eq!(class.ranges[1].start, 'b');",
                "    assert_eq!(class.ranges[1].end, char::MAX);",
                "    assert_eq!(class.ranges.len(), 3);",
                "    assert_eq!(class.ranges[2].start, 'a' + 1);",
                "    assert_eq!(class.ranges[2].end, char::MAX);"
              ],
              "code": [
                "{",
                "    let mut class = Class::new(vec![",
                "        ClassRange { start: '\\x00', end: 'a' },",
                "        ClassRange { start: 'b', end: char::MAX },",
                "    ]);",
                "    class.negate();",
                "    assert_eq!(class.ranges.len(), 1);",
                "    assert_eq!(class.ranges[0].start, '\\x01');",
                "    assert_eq!(class.ranges[0].end, 'a');",
                "    assert_eq!(class.ranges[1].start, 'b');",
                "    assert_eq!(class.ranges[1].end, char::MAX);",
                "    assert_eq!(class.ranges.len(), 3);",
                "    assert_eq!(class.ranges[2].start, 'a' + 1);",
                "    assert_eq!(class.ranges[2].end, char::MAX);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 9,
      "prompt_conds": [
        "precondition: self.ranges.is_empty() at line 422 is false\n",
        "precondition: self.ranges[0].start > MIN at line 435 is false, with bound self.ranges[0].start == MIN\n",
        "precondition: i in 1..drain_end at line 442 is false\n",
        "precondition: self.ranges[drain_end - 1].end < MAX at line 459 is false, with bound self.ranges[drain_end - 1].end == MAX\n"
      ],
      "input_infer": "self.ranges must be non-empty with at least one ClassRange where start >= MIN and end == MAX, and another ClassRange that causes i in 1..drain_end to be false.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class = Class::new(vec![ClassRange { start: '\\x00', end: char::MAX }]);",
                "    class.negate();",
                "}"
              ],
              "oracle": [
                "    self.ranges.is_empty() is false",
                "    self.ranges[0].start == MIN",
                "    i in 1..drain_end is false",
                "    self.ranges[drain_end - 1].end == MAX"
              ],
              "code": [
                "{",
                "    let mut class = Class::new(vec![ClassRange { start: '\\x00', end: char::MAX }]);",
                "    class.negate();",
                "    self.ranges.is_empty() is false",
                "    self.ranges[0].start == MIN",
                "    i in 1..drain_end is false",
                "    self.ranges[drain_end - 1].end == MAX",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class = Class::new(vec![ClassRange { start: '\\x00', end: 'a' }]);",
                "    class.negate();",
                "}"
              ],
              "oracle": [
                "    self.ranges.len() == 1",
                "    self.ranges[0].start == '\\x00'",
                "    self.ranges[0].end == 'a'",
                "    self.ranges.len() == 1",
                "    self.ranges[0] == ClassRange { start: '\\u{E000}', end: '\\u{D7FF}' }",
                "    self.ranges.len() == 2",
                "    self.ranges[1] == ClassRange { start: 'b', end: char::MAX }"
              ],
              "code": [
                "{",
                "    let mut class = Class::new(vec![ClassRange { start: '\\x00', end: 'a' }]);",
                "    class.negate();",
                "    self.ranges.len() == 1",
                "    self.ranges[0].start == '\\x00'",
                "    self.ranges[0].end == 'a'",
                "    self.ranges.len() == 1",
                "    self.ranges[0] == ClassRange { start: '\\u{E000}', end: '\\u{D7FF}' }",
                "    self.ranges.len() == 2",
                "    self.ranges[1] == ClassRange { start: 'b', end: char::MAX }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class = Class::new(vec![ClassRange { start: 'a', end: 'b' }]);",
                "    class.negate();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class.ranges.len(), 1);",
                "    assert_eq!(class.ranges[0], ClassRange { start: '\\x00', end: 'a' });",
                "    assert_eq!(class.ranges[1], ClassRange { start: 'c', end: char::MAX });"
              ],
              "code": [
                "{",
                "    let mut class = Class::new(vec![ClassRange { start: 'a', end: 'b' }]);",
                "    class.negate();",
                "    assert_eq!(class.ranges.len(), 1);",
                "    assert_eq!(class.ranges[0], ClassRange { start: '\\x00', end: 'a' });",
                "    assert_eq!(class.ranges[1], ClassRange { start: 'c', end: char::MAX });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class = Class::new(vec![ClassRange { start: 'a', end: char::MAX }]);",
                "    class.negate();",
                "}"
              ],
              "oracle": [
                "    self.ranges.len() == 1",
                "    self.ranges[0].start == 'a'",
                "    self.ranges[0].end == char::MAX",
                "    self.ranges[0].start > '\\x00'",
                "    self.ranges.len() == 2",
                "    self.ranges[1].start == '\\x00'",
                "    self.ranges[1].end == 'a' - 1",
                "    self.ranges[0].end == char::MAX"
              ],
              "code": [
                "{",
                "    let mut class = Class::new(vec![ClassRange { start: 'a', end: char::MAX }]);",
                "    class.negate();",
                "    self.ranges.len() == 1",
                "    self.ranges[0].start == 'a'",
                "    self.ranges[0].end == char::MAX",
                "    self.ranges[0].start > '\\x00'",
                "    self.ranges.len() == 2",
                "    self.ranges[1].start == '\\x00'",
                "    self.ranges[1].end == 'a' - 1",
                "    self.ranges[0].end == char::MAX",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class = Class::new(vec![",
                "        ClassRange { start: 'a', end: 'b' },",
                "        ClassRange { start: 'c', end: char::MAX },",
                "    ]);",
                "    class.negate();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class.ranges.len(), 1);",
                "    assert_eq!(class.ranges[0], ClassRange { start: '\\x00', end: 'a' });",
                "    assert_eq!(class.ranges[1], ClassRange { start: 'b', end: 'c' });",
                "    assert_eq!(class.ranges[2], ClassRange { start: 'd', end: char::MAX });"
              ],
              "code": [
                "{",
                "    let mut class = Class::new(vec![",
                "        ClassRange { start: 'a', end: 'b' },",
                "        ClassRange { start: 'c', end: char::MAX },",
                "    ]);",
                "    class.negate();",
                "    assert_eq!(class.ranges.len(), 1);",
                "    assert_eq!(class.ranges[0], ClassRange { start: '\\x00', end: 'a' });",
                "    assert_eq!(class.ranges[1], ClassRange { start: 'b', end: 'c' });",
                "    assert_eq!(class.ranges[2], ClassRange { start: 'd', end: char::MAX });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}