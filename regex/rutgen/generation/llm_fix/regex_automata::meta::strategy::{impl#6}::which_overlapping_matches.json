{
  "name": "regex_automata::meta::strategy::{impl#6}::which_overlapping_matches",
  "mod_info": {
    "name": "meta::strategy",
    "loc": "regex-automata/src/meta/mod.rs:61:1:61:14"
  },
  "visible": false,
  "loc": "regex-automata/src/meta/strategy.rs:1101:5:1112:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "cache: valid mutable reference to Cache, input: Input with non-empty haystack and valid anchoring type, patset: PatternSet with len > 0 and corresponding which array populated with bool values\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let cache = Cache {",
                "        capmatches: Captures::new(),",
                "        pikevm: wrappers::PikeVMCache::default(),",
                "        backtrack: wrappers::BoundedBacktrackerCache::default(),",
                "        onepass: wrappers::OnePassCache::default(),",
                "        hybrid: wrappers::HybridCache::default(),",
                "        revhybrid: wrappers::ReverseHybridCache::default(),",
                "    };",
                "    ",
                "    let input = Input {",
                "        haystack: b\"test string for matching\",",
                "        span: Span::default(),",
                "        anchored: Anchored::Yes,",
                "        earliest: true,",
                "    };",
                "    ",
                "    let patset = PatternSet {",
                "        len: 1,",
                "        which: alloc::boxed::Box::from([true]),",
                "    };",
                "    ",
                "    let strategy = ReverseAnchored {",
                "        core: Core {",
                "            info: RegexInfo::default(),",
                "            pre: None,",
                "            nfa: NFA::new(),",
                "            nfarev: None,",
                "            pikevm: wrappers::PikeVM::default(),",
                "            backtrack: wrappers::BoundedBacktracker::default(),",
                "            onepass: wrappers::OnePass::default(),",
                "            hybrid: wrappers::Hybrid::default(),",
                "            dfa: wrappers::DFA::default(),",
                "        },",
                "    };",
                "",
                "    strategy.which_overlapping_matches(&mut cache, &input, &mut patset);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(cache.capmatches.len(), 0);",
                "    assert!(patset.len == 1);",
                "    assert!(patset.which[0] == true);",
                "    assert!(strategy.is_accelerated() == false);",
                "    assert!(strategy.memory_usage() > 0);",
                "    assert!(strategy.search(&mut cache, &input).is_none());",
                "    assert!(strategy.search_half(&mut cache, &input).is_none());",
                "    assert!(strategy.is_match(&mut cache, &input) == false);",
                "    let mut slots = [None];",
                "    assert!(strategy.search_slots(&mut cache, &input, &mut slots).is_none());",
                "    let mut pattern_set = PatternSet { len: 0, which: alloc::boxed::Box::from([]) };",
                "    strategy.which_overlapping_matches(&mut cache, &input, &mut pattern_set);",
                "    assert!(pattern_set.len == 0);"
              ],
              "code": [
                "{",
                "    let cache = Cache {",
                "        capmatches: Captures::new(),",
                "        pikevm: wrappers::PikeVMCache::default(),",
                "        backtrack: wrappers::BoundedBacktrackerCache::default(),",
                "        onepass: wrappers::OnePassCache::default(),",
                "        hybrid: wrappers::HybridCache::default(),",
                "        revhybrid: wrappers::ReverseHybridCache::default(),",
                "    };",
                "    ",
                "    let input = Input {",
                "        haystack: b\"test string for matching\",",
                "        span: Span::default(),",
                "        anchored: Anchored::Yes,",
                "        earliest: true,",
                "    };",
                "    ",
                "    let patset = PatternSet {",
                "        len: 1,",
                "        which: alloc::boxed::Box::from([true]),",
                "    };",
                "    ",
                "    let strategy = ReverseAnchored {",
                "        core: Core {",
                "            info: RegexInfo::default(),",
                "            pre: None,",
                "            nfa: NFA::new(),",
                "            nfarev: None,",
                "            pikevm: wrappers::PikeVM::default(),",
                "            backtrack: wrappers::BoundedBacktracker::default(),",
                "            onepass: wrappers::OnePass::default(),",
                "            hybrid: wrappers::Hybrid::default(),",
                "            dfa: wrappers::DFA::default(),",
                "        },",
                "    };",
                "",
                "    strategy.which_overlapping_matches(&mut cache, &input, &mut patset);",
                "    assert_eq!(cache.capmatches.len(), 0);",
                "    assert!(patset.len == 1);",
                "    assert!(patset.which[0] == true);",
                "    assert!(strategy.is_accelerated() == false);",
                "    assert!(strategy.memory_usage() > 0);",
                "    assert!(strategy.search(&mut cache, &input).is_none());",
                "    assert!(strategy.search_half(&mut cache, &input).is_none());",
                "    assert!(strategy.is_match(&mut cache, &input) == false);",
                "    let mut slots = [None];",
                "    assert!(strategy.search_slots(&mut cache, &input, &mut slots).is_none());",
                "    let mut pattern_set = PatternSet { len: 0, which: alloc::boxed::Box::from([]) };",
                "    strategy.which_overlapping_matches(&mut cache, &input, &mut pattern_set);",
                "    assert!(pattern_set.len == 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let cache = Cache {",
                "        capmatches: Captures::new(),",
                "        pikevm: wrappers::PikeVMCache::default(),",
                "        backtrack: wrappers::BoundedBacktrackerCache::default(),",
                "        onepass: wrappers::OnePassCache::default(),",
                "        hybrid: wrappers::HybridCache::default(),",
                "        revhybrid: wrappers::ReverseHybridCache::default(),",
                "    };",
                "    ",
                "    let input = Input {",
                "        haystack: b\"\",",
                "        span: Span::default(),",
                "        anchored: Anchored::Yes,",
                "        earliest: true,",
                "    };",
                "    ",
                "    let patset = PatternSet {",
                "        len: 1,",
                "        which: alloc::boxed::Box::from([true]),",
                "    };",
                "    ",
                "    let strategy = ReverseAnchored {",
                "        core: Core {",
                "            info: RegexInfo::default(),",
                "            pre: None,",
                "            nfa: NFA::new(),",
                "            nfarev: None,",
                "            pikevm: wrappers::PikeVM::default(),",
                "            backtrack: wrappers::BoundedBacktracker::default(),",
                "            onepass: wrappers::OnePass::default(),",
                "            hybrid: wrappers::Hybrid::default(),",
                "            dfa: wrappers::DFA::default(),",
                "        },",
                "    };",
                "",
                "    strategy.which_overlapping_matches(&mut cache, &input, &mut patset);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(patset.len, 1);",
                "    assert!(patset.which[0]);",
                "    assert!(strategy.is_accelerated());",
                "    assert_eq!(cache.captures(), Captures::new());",
                "    assert_eq!(cache.memory_usage(), expected_memory_usage);",
                "    assert_eq!(input.haystack, b\"\");",
                "    assert!(input.anchored.is_yes());",
                "    assert!(strategy.memory_usage() > 0);"
              ],
              "code": [
                "{",
                "    let cache = Cache {",
                "        capmatches: Captures::new(),",
                "        pikevm: wrappers::PikeVMCache::default(),",
                "        backtrack: wrappers::BoundedBacktrackerCache::default(),",
                "        onepass: wrappers::OnePassCache::default(),",
                "        hybrid: wrappers::HybridCache::default(),",
                "        revhybrid: wrappers::ReverseHybridCache::default(),",
                "    };",
                "    ",
                "    let input = Input {",
                "        haystack: b\"\",",
                "        span: Span::default(),",
                "        anchored: Anchored::Yes,",
                "        earliest: true,",
                "    };",
                "    ",
                "    let patset = PatternSet {",
                "        len: 1,",
                "        which: alloc::boxed::Box::from([true]),",
                "    };",
                "    ",
                "    let strategy = ReverseAnchored {",
                "        core: Core {",
                "            info: RegexInfo::default(),",
                "            pre: None,",
                "            nfa: NFA::new(),",
                "            nfarev: None,",
                "            pikevm: wrappers::PikeVM::default(),",
                "            backtrack: wrappers::BoundedBacktracker::default(),",
                "            onepass: wrappers::OnePass::default(),",
                "            hybrid: wrappers::Hybrid::default(),",
                "            dfa: wrappers::DFA::default(),",
                "        },",
                "    };",
                "",
                "    strategy.which_overlapping_matches(&mut cache, &input, &mut patset);",
                "    assert_eq!(patset.len, 1);",
                "    assert!(patset.which[0]);",
                "    assert!(strategy.is_accelerated());",
                "    assert_eq!(cache.captures(), Captures::new());",
                "    assert_eq!(cache.memory_usage(), expected_memory_usage);",
                "    assert_eq!(input.haystack, b\"\");",
                "    assert!(input.anchored.is_yes());",
                "    assert!(strategy.memory_usage() > 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let cache = Cache {",
                "        capmatches: Captures::new(),",
                "        pikevm: wrappers::PikeVMCache::default(),",
                "        backtrack: wrappers::BoundedBacktrackerCache::default(),",
                "        onepass: wrappers::OnePassCache::default(),",
                "        hybrid: wrappers::HybridCache::default(),",
                "        revhybrid: wrappers::ReverseHybridCache::default(),",
                "    };",
                "    ",
                "    let input = Input {",
                "        haystack: b\"another test string for overlapping\",",
                "        span: Span::default(),",
                "        anchored: Anchored::Yes,",
                "        earliest: true,",
                "    };",
                "    ",
                "    let patset = PatternSet {",
                "        len: 3,",
                "        which: alloc::boxed::Box::from([true, false, true]),",
                "    };",
                "    ",
                "    let strategy = ReverseAnchored {",
                "        core: Core {",
                "            info: RegexInfo::default(),",
                "            pre: None,",
                "            nfa: NFA::new(),",
                "            nfarev: None,",
                "            pikevm: wrappers::PikeVM::default(),",
                "            backtrack: wrappers::BoundedBacktracker::default(),",
                "            onepass: wrappers::OnePass::default(),",
                "            hybrid: wrappers::Hybrid::default(),",
                "            dfa: wrappers::DFA::default(),",
                "        },",
                "    };",
                "",
                "    strategy.which_overlapping_matches(&mut cache, &input, &mut patset);",
                "}"
              ],
              "oracle": [
                "    assert!(patset.len == 3);",
                "    assert_eq!(patset.which[0], true);",
                "    assert_eq!(patset.which[1], false);",
                "    assert_eq!(patset.which[2], true);"
              ],
              "code": [
                "{",
                "    let cache = Cache {",
                "        capmatches: Captures::new(),",
                "        pikevm: wrappers::PikeVMCache::default(),",
                "        backtrack: wrappers::BoundedBacktrackerCache::default(),",
                "        onepass: wrappers::OnePassCache::default(),",
                "        hybrid: wrappers::HybridCache::default(),",
                "        revhybrid: wrappers::ReverseHybridCache::default(),",
                "    };",
                "    ",
                "    let input = Input {",
                "        haystack: b\"another test string for overlapping\",",
                "        span: Span::default(),",
                "        anchored: Anchored::Yes,",
                "        earliest: true,",
                "    };",
                "    ",
                "    let patset = PatternSet {",
                "        len: 3,",
                "        which: alloc::boxed::Box::from([true, false, true]),",
                "    };",
                "    ",
                "    let strategy = ReverseAnchored {",
                "        core: Core {",
                "            info: RegexInfo::default(),",
                "            pre: None,",
                "            nfa: NFA::new(),",
                "            nfarev: None,",
                "            pikevm: wrappers::PikeVM::default(),",
                "            backtrack: wrappers::BoundedBacktracker::default(),",
                "            onepass: wrappers::OnePass::default(),",
                "            hybrid: wrappers::Hybrid::default(),",
                "            dfa: wrappers::DFA::default(),",
                "        },",
                "    };",
                "",
                "    strategy.which_overlapping_matches(&mut cache, &input, &mut patset);",
                "    assert!(patset.len == 3);",
                "    assert_eq!(patset.which[0], true);",
                "    assert_eq!(patset.which[1], false);",
                "    assert_eq!(patset.which[2], true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}