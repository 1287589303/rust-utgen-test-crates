{
  "name": "regex_automata::util::wire::mul",
  "mod_info": {
    "name": "util::wire",
    "loc": "regex-automata/src/util/mod.rs:46:1:46:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/wire.rs:801:1:810:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: a.checked_mul(b) matches Some(c) at line 806 is true\n",
        "precondition: a.checked_mul(b) matches Some(c) at line 806 is true\n",
        "expected return value/type: Ok(c)\n"
      ],
      "input_infer": "a: 0 to 2^63 - 1, b: 0 to 2^63 - 1, what: valid static string\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a: usize = 5;",
                "    let b: usize = 3;",
                "    let what: &'static str = \"small multiplication\";",
                "    let result = mul(a, b, what);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(15));"
              ],
              "code": [
                "{",
                "    let a: usize = 5;",
                "    let b: usize = 3;",
                "    let what: &'static str = \"small multiplication\";",
                "    let result = mul(a, b, what);",
                "    assert_eq!(result, Ok(15));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a: usize = 0;",
                "    let b: usize = 123456;",
                "    let what: &'static str = \"multiplying by zero\";",
                "    let result = mul(a, b, what);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(0));"
              ],
              "code": [
                "{",
                "    let a: usize = 0;",
                "    let b: usize = 123456;",
                "    let what: &'static str = \"multiplying by zero\";",
                "    let result = mul(a, b, what);",
                "    assert_eq!(result, Ok(0));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a: usize = 1;",
                "    let b: usize = usize::MAX; // 2^63 - 1 for 64-bit systems",
                "    let what: &'static str = \"boundary multiplication\";",
                "    let result = mul(a, b, what);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(usize::MAX));"
              ],
              "code": [
                "{",
                "    let a: usize = 1;",
                "    let b: usize = usize::MAX; // 2^63 - 1 for 64-bit systems",
                "    let what: &'static str = \"boundary multiplication\";",
                "    let result = mul(a, b, what);",
                "    assert_eq!(result, Ok(usize::MAX));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a: usize = 100000;",
                "    let b: usize = 100000;",
                "    let what: &'static str = \"large number multiplication\";",
                "    let result = mul(a, b, what);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), 10000000000);"
              ],
              "code": [
                "{",
                "    let a: usize = 100000;",
                "    let b: usize = 100000;",
                "    let what: &'static str = \"large number multiplication\";",
                "    let result = mul(a, b, what);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), 10000000000);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a: usize = 2;",
                "    let b: usize = usize::MAX / 2; // To avoid overflow",
                "    let what: &'static str = \"max bound multiplication\";",
                "    let result = mul(a, b, what);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(a * b));"
              ],
              "code": [
                "{",
                "    let a: usize = 2;",
                "    let b: usize = usize::MAX / 2; // To avoid overflow",
                "    let what: &'static str = \"max bound multiplication\";",
                "    let result = mul(a, b, what);",
                "    assert_eq!(result, Ok(a * b));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: a.checked_mul(b) matches None at line 806 is true\n",
        "expected return value/type: Err(DeserializeError::arithmetic_overflow(what))\n"
      ],
      "input_infer": "a and b must be such that their product exceeds usize::MAX, what can be any static string.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a: usize = usize::MAX; ",
                "    let b: usize = 2; ",
                "    let what: &'static str = \"Multiplication overflow\"; ",
                "    let result = mul(a, b, what);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result, Err(DeserializeError::arithmetic_overflow(\"Multiplication overflow\")));"
              ],
              "code": [
                "{",
                "    let a: usize = usize::MAX; ",
                "    let b: usize = 2; ",
                "    let what: &'static str = \"Multiplication overflow\"; ",
                "    let result = mul(a, b, what);",
                "    assert!(result.is_err());",
                "    assert_eq!(result, Err(DeserializeError::arithmetic_overflow(\"Multiplication overflow\")));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a: usize = usize::MAX / 2 + 1; ",
                "    let b: usize = 3; ",
                "    let what: &'static str = \"Exceeding max value\"; ",
                "    let result = mul(a, b, what);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), DeserializeError::arithmetic_overflow(\"Exceeding max value\"));"
              ],
              "code": [
                "{",
                "    let a: usize = usize::MAX / 2 + 1; ",
                "    let b: usize = 3; ",
                "    let what: &'static str = \"Exceeding max value\"; ",
                "    let result = mul(a, b, what);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), DeserializeError::arithmetic_overflow(\"Exceeding max value\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a: usize = usize::MAX; ",
                "    let b: usize = 0; ",
                "    let what: &'static str = \"Max value multiplied by zero\"; ",
                "    let result = mul(a, b, what);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(DeserializeError::arithmetic_overflow(what)));"
              ],
              "code": [
                "{",
                "    let a: usize = usize::MAX; ",
                "    let b: usize = 0; ",
                "    let what: &'static str = \"Max value multiplied by zero\"; ",
                "    let result = mul(a, b, what);",
                "    assert_eq!(result, Err(DeserializeError::arithmetic_overflow(what)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a: usize = usize::MAX; ",
                "    let b: usize = 1; ",
                "    let what: &'static str = \"Max value multiplied by one\"; ",
                "    let result = mul(a, b, what);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), DeserializeError::arithmetic_overflow(\"Max value multiplied by one\"));"
              ],
              "code": [
                "{",
                "    let a: usize = usize::MAX; ",
                "    let b: usize = 1; ",
                "    let what: &'static str = \"Max value multiplied by one\"; ",
                "    let result = mul(a, b, what);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), DeserializeError::arithmetic_overflow(\"Max value multiplied by one\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a: usize = usize::MAX; ",
                "    let b: usize = usize::MAX; ",
                "    let what: &'static str = \"Max value multiplied by max value\"; ",
                "    let result = mul(a, b, what);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result, Err(DeserializeError::arithmetic_overflow(\"Max value multiplied by max value\")));"
              ],
              "code": [
                "{",
                "    let a: usize = usize::MAX; ",
                "    let b: usize = usize::MAX; ",
                "    let what: &'static str = \"Max value multiplied by max value\"; ",
                "    let result = mul(a, b, what);",
                "    assert!(result.is_err());",
                "    assert_eq!(result, Err(DeserializeError::arithmetic_overflow(\"Max value multiplied by max value\")));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}