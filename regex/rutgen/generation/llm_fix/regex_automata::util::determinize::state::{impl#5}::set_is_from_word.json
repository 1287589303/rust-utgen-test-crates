{
  "name": "regex_automata::util::determinize::state::{impl#5}::set_is_from_word",
  "mod_info": {
    "name": "util::determinize::state",
    "loc": "regex-automata/src/util/determinize/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/util/determinize/state.rs:233:5:235:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "StateBuilderMatches instance with a Vec<u8> having a length >= 1 and within the range of valid byte values (0-255), where the first element can be modified to test the bit manipulation behavior.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut state_builder = StateBuilderMatches(vec![0]);",
                "    state_builder.set_is_from_word();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(state_builder.0[0], 4);"
              ],
              "code": [
                "{",
                "    let mut state_builder = StateBuilderMatches(vec![0]);",
                "    state_builder.set_is_from_word();",
                "    assert_eq!(state_builder.0[0], 4);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut state_builder = StateBuilderMatches(vec![1]);",
                "    state_builder.set_is_from_word();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(state_builder.0[0] & (1 << 2), (1 << 2));"
              ],
              "code": [
                "{",
                "    let mut state_builder = StateBuilderMatches(vec![1]);",
                "    state_builder.set_is_from_word();",
                "    assert_eq!(state_builder.0[0] & (1 << 2), (1 << 2));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut state_builder = StateBuilderMatches(vec![2]);",
                "    state_builder.set_is_from_word();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(state_builder.0[0] & (1 << 2), (1 << 2));"
              ],
              "code": [
                "{",
                "    let mut state_builder = StateBuilderMatches(vec![2]);",
                "    state_builder.set_is_from_word();",
                "    assert_eq!(state_builder.0[0] & (1 << 2), (1 << 2));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut state_builder = StateBuilderMatches(vec![0, 1, 2, 3]);",
                "    state_builder.set_is_from_word();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(state_builder.0[0] & (1 << 2) != 0, true);"
              ],
              "code": [
                "{",
                "    let mut state_builder = StateBuilderMatches(vec![0, 1, 2, 3]);",
                "    state_builder.set_is_from_word();",
                "    assert_eq!(state_builder.0[0] & (1 << 2) != 0, true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut state_builder = StateBuilderMatches(vec![255]);",
                "    state_builder.set_is_from_word();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(state_builder.0[0] & (1 << 2), 1 << 2);"
              ],
              "code": [
                "{",
                "    let mut state_builder = StateBuilderMatches(vec![255]);",
                "    state_builder.set_is_from_word();",
                "    assert_eq!(state_builder.0[0] & (1 << 2), 1 << 2);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut state_builder = StateBuilderMatches(vec![128, 255]);",
                "    state_builder.set_is_from_word();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(state_builder.0[0] & (1 << 2), (1 << 2));"
              ],
              "code": [
                "{",
                "    let mut state_builder = StateBuilderMatches(vec![128, 255]);",
                "    state_builder.set_is_from_word();",
                "    assert_eq!(state_builder.0[0] & (1 << 2), (1 << 2));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}