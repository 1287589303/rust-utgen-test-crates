{
  "name": "regex_syntax::hir::translate::{impl#6}::swap_greed",
  "mod_info": {
    "name": "hir::translate",
    "loc": "regex-syntax/src/hir/mod.rs:44:1:44:19"
  },
  "visible": false,
  "loc": "regex-syntax/src/hir/translate.rs:1303:5:1305:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self.swap_greed should be tested with values: Some(true), Some(false), and None.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let flags = Flags { swap_greed: Some(true), ..Flags::default() };",
                "    flags.swap_greed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(flags.swap_greed(), true);",
                "    let flags_false = Flags { swap_greed: Some(false), ..Flags::default() };",
                "    assert_eq!(flags_false.swap_greed(), false);",
                "    let flags_none = Flags { swap_greed: None, ..Flags::default() };",
                "    assert_eq!(flags_none.swap_greed(), false);"
              ],
              "code": [
                "{",
                "    let flags = Flags { swap_greed: Some(true), ..Flags::default() };",
                "    flags.swap_greed();",
                "    assert_eq!(flags.swap_greed(), true);",
                "    let flags_false = Flags { swap_greed: Some(false), ..Flags::default() };",
                "    assert_eq!(flags_false.swap_greed(), false);",
                "    let flags_none = Flags { swap_greed: None, ..Flags::default() };",
                "    assert_eq!(flags_none.swap_greed(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let flags = Flags { swap_greed: Some(false), ..Flags::default() };",
                "    flags.swap_greed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(flags.swap_greed(), false);",
                "    ",
                "    let flags = Flags { swap_greed: Some(true), ..Flags::default() };",
                "    assert_eq!(flags.swap_greed(), true);",
                "    ",
                "    let flags = Flags { swap_greed: None, ..Flags::default() };",
                "    assert_eq!(flags.swap_greed(), false);"
              ],
              "code": [
                "{",
                "    let flags = Flags { swap_greed: Some(false), ..Flags::default() };",
                "    flags.swap_greed();",
                "    assert_eq!(flags.swap_greed(), false);",
                "    ",
                "    let flags = Flags { swap_greed: Some(true), ..Flags::default() };",
                "    assert_eq!(flags.swap_greed(), true);",
                "    ",
                "    let flags = Flags { swap_greed: None, ..Flags::default() };",
                "    assert_eq!(flags.swap_greed(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let flags = Flags { swap_greed: None, ..Flags::default() };",
                "    flags.swap_greed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(flags.swap_greed(), false);"
              ],
              "code": [
                "{",
                "    let flags = Flags { swap_greed: None, ..Flags::default() };",
                "    flags.swap_greed();",
                "    assert_eq!(flags.swap_greed(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}