{
  "name": "regex_automata::nfa::thompson::backtrack::{impl#0}::visited_capacity",
  "mod_info": {
    "name": "nfa::thompson::backtrack",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:57:1:57:19"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/backtrack.rs:171:5:174:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "capacity: 0 to maximum usize value, including boundary values (e.g., 1, usize::MAX)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity: usize = 0;",
                "    let config = Config::new().visited_capacity(capacity);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.visited_capacity, Some(0));",
                "    assert!(config.get_prefilter().is_none());",
                "    assert_eq!(config.get_visited_capacity(), 0);",
                "    assert_eq!(config.overwrite(Config::new()).visited_capacity, Some(0));"
              ],
              "code": [
                "{",
                "    let capacity: usize = 0;",
                "    let config = Config::new().visited_capacity(capacity);",
                "    assert_eq!(config.visited_capacity, Some(0));",
                "    assert!(config.get_prefilter().is_none());",
                "    assert_eq!(config.get_visited_capacity(), 0);",
                "    assert_eq!(config.overwrite(Config::new()).visited_capacity, Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity: usize = 1;",
                "    let config = Config::new().visited_capacity(capacity);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.visited_capacity, Some(1));",
                "    assert_eq!(config.get_visited_capacity(), 1);",
                "    assert!(config.visited_capacity.is_some());",
                "    assert!(config.get_prefilter().is_none());",
                "    assert_eq!(config.overwrite(Config::new()).visited_capacity, Some(1));"
              ],
              "code": [
                "{",
                "    let capacity: usize = 1;",
                "    let config = Config::new().visited_capacity(capacity);",
                "    assert_eq!(config.visited_capacity, Some(1));",
                "    assert_eq!(config.get_visited_capacity(), 1);",
                "    assert!(config.visited_capacity.is_some());",
                "    assert!(config.get_prefilter().is_none());",
                "    assert_eq!(config.overwrite(Config::new()).visited_capacity, Some(1));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity: usize = usize::MAX;",
                "    let config = Config::new().visited_capacity(capacity);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.visited_capacity, Some(usize::MAX));",
                "    assert!(config.visited_capacity.is_some());",
                "    assert!(config.visited_capacity.unwrap() == usize::MAX);",
                "    assert_eq!(config.get_visited_capacity(), usize::MAX);",
                "    assert!(config.visited_capacity.unwrap() == config.get_visited_capacity());",
                "    assert!(config.overwrite(Config::new()).visited_capacity == Some(usize::MAX));"
              ],
              "code": [
                "{",
                "    let capacity: usize = usize::MAX;",
                "    let config = Config::new().visited_capacity(capacity);",
                "    assert_eq!(config.visited_capacity, Some(usize::MAX));",
                "    assert!(config.visited_capacity.is_some());",
                "    assert!(config.visited_capacity.unwrap() == usize::MAX);",
                "    assert_eq!(config.get_visited_capacity(), usize::MAX);",
                "    assert!(config.visited_capacity.unwrap() == config.get_visited_capacity());",
                "    assert!(config.overwrite(Config::new()).visited_capacity == Some(usize::MAX));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity: usize = 1 << 30; // Test with a large value",
                "    let config = Config::new().visited_capacity(capacity);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.visited_capacity, Some(capacity));",
                "    assert!(config.visited_capacity.is_some());",
                "    assert!(config.visited_capacity.unwrap() > 0);",
                "    assert!(config.visited_capacity.unwrap() == 1 << 30);",
                "    assert_eq!(config.get_visited_capacity(), 1 << 30);"
              ],
              "code": [
                "{",
                "    let capacity: usize = 1 << 30; // Test with a large value",
                "    let config = Config::new().visited_capacity(capacity);",
                "    assert_eq!(config.visited_capacity, Some(capacity));",
                "    assert!(config.visited_capacity.is_some());",
                "    assert!(config.visited_capacity.unwrap() > 0);",
                "    assert!(config.visited_capacity.unwrap() == 1 << 30);",
                "    assert_eq!(config.get_visited_capacity(), 1 << 30);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity: usize = 1 << 20; // Test with another large power of two",
                "    let config = Config::new().visited_capacity(capacity);",
                "}"
              ],
              "oracle": [
                "    let capacity: usize = 1 << 20;",
                "    let config = Config::new().visited_capacity(capacity);",
                "    assert_eq!(config.visited_capacity, Some(capacity));",
                "    assert!(config.get_visited_capacity() == capacity);",
                "    assert!(config.visited_capacity.is_some());",
                "    assert!(config.visited_capacity.unwrap() > 0);",
                "    let default_capacity = Config::new().get_visited_capacity();",
                "    assert!(default_capacity < capacity);"
              ],
              "code": [
                "{",
                "    let capacity: usize = 1 << 20; // Test with another large power of two",
                "    let config = Config::new().visited_capacity(capacity);",
                "    let capacity: usize = 1 << 20;",
                "    let config = Config::new().visited_capacity(capacity);",
                "    assert_eq!(config.visited_capacity, Some(capacity));",
                "    assert!(config.get_visited_capacity() == capacity);",
                "    assert!(config.visited_capacity.is_some());",
                "    assert!(config.visited_capacity.unwrap() > 0);",
                "    let default_capacity = Config::new().get_visited_capacity();",
                "    assert!(default_capacity < capacity);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}