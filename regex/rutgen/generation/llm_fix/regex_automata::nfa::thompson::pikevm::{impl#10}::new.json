{
  "name": "regex_automata::nfa::thompson::pikevm::{impl#10}::new",
  "mod_info": {
    "name": "nfa::thompson::pikevm",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:68:1:68:16"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/pikevm.rs:2081:5:2083:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: SlotTable { table: vec![], slots_for_captures: 0, slots_per_state: 0 }\n"
      ],
      "input_infer": "Test input conditions/ranges: None required; instantiate SlotTable using new() method.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slot_table = SlotTable::new();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(slot_table.table, vec![]);",
                "    assert_eq!(slot_table.slots_for_captures, 0);",
                "    assert_eq!(slot_table.slots_per_state, 0);"
              ],
              "code": [
                "{",
                "    let slot_table = SlotTable::new();",
                "    assert_eq!(slot_table.table, vec![]);",
                "    assert_eq!(slot_table.slots_for_captures, 0);",
                "    assert_eq!(slot_table.slots_per_state, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slot_table = SlotTable::new();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(slot_table.table, vec![]);",
                "    assert_eq!(slot_table.slots_for_captures, 0);",
                "    assert_eq!(slot_table.slots_per_state, 0);"
              ],
              "code": [
                "{",
                "    let slot_table = SlotTable::new();",
                "    assert_eq!(slot_table.table, vec![]);",
                "    assert_eq!(slot_table.slots_for_captures, 0);",
                "    assert_eq!(slot_table.slots_per_state, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}