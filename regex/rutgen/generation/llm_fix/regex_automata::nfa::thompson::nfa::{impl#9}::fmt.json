{
  "name": "regex_automata::nfa::thompson::nfa::{impl#9}::fmt",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:1999:5:2014:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.start == self.end at line 2003 is true\n"
      ],
      "input_infer": "start: 0 <= self.start == self.end <= 255, next: valid StateID values\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition {",
                "        start: 0,",
                "        end: 0,",
                "        next: StateID(SmallIndex(1)),",
                "    };",
                "    let mut output = String::new();",
                "    let _ = fmt::write(&mut output, transition.fmt(&mut fmt::Formatter::new()));",
                "}"
              ],
              "oracle": [
                "    write!(f, \"{:?} => {:?}\", DebugByte(0), 1);"
              ],
              "code": [
                "{",
                "    let transition = Transition {",
                "        start: 0,",
                "        end: 0,",
                "        next: StateID(SmallIndex(1)),",
                "    };",
                "    let mut output = String::new();",
                "    let _ = fmt::write(&mut output, transition.fmt(&mut fmt::Formatter::new()));",
                "    write!(f, \"{:?} => {:?}\", DebugByte(0), 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition {",
                "        start: 127,",
                "        end: 127,",
                "        next: StateID(SmallIndex(2)),",
                "    };",
                "    let mut output = String::new();",
                "    let _ = fmt::write(&mut output, transition.fmt(&mut fmt::Formatter::new()));",
                "}"
              ],
              "oracle": [
                "    write!(f, \"{:?} => {:?}\", DebugByte(127), 2) assert_eq!(output, \"DebugByte(127) => 2\");"
              ],
              "code": [
                "{",
                "    let transition = Transition {",
                "        start: 127,",
                "        end: 127,",
                "        next: StateID(SmallIndex(2)),",
                "    };",
                "    let mut output = String::new();",
                "    let _ = fmt::write(&mut output, transition.fmt(&mut fmt::Formatter::new()));",
                "    write!(f, \"{:?} => {:?}\", DebugByte(127), 2) assert_eq!(output, \"DebugByte(127) => 2\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition {",
                "        start: 255,",
                "        end: 255,",
                "        next: StateID(SmallIndex(3)),",
                "    };",
                "    let mut output = String::new();",
                "    let _ = fmt::write(&mut output, transition.fmt(&mut fmt::Formatter::new()));",
                "}"
              ],
              "oracle": [
                "    write!(f, \"{:?} => {:?}\", DebugByte(255), 3)"
              ],
              "code": [
                "{",
                "    let transition = Transition {",
                "        start: 255,",
                "        end: 255,",
                "        next: StateID(SmallIndex(3)),",
                "    };",
                "    let mut output = String::new();",
                "    let _ = fmt::write(&mut output, transition.fmt(&mut fmt::Formatter::new()));",
                "    write!(f, \"{:?} => {:?}\", DebugByte(255), 3)",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.start == self.end at line 2003 is false\n"
      ],
      "input_infer": "start: 0 <= start < 255, end: start + 1 <= end <= 255, next: valid StateID\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition {",
                "        start: 100,",
                "        end: 200,",
                "        next: StateID(SmallIndex(5)),",
                "    };",
                "    let mut buf = String::new();",
                "    let f = &mut fmt::Formatter::for_str(&mut buf);",
                "    let _ = transition.fmt(f);",
                "}"
              ],
              "oracle": [
                "    let transition = Transition { start: 100, end: 200, next: StateID(SmallIndex(5)) };",
                "    let expected_output = \"DebugByte(100)-DebugByte(200) => 5\";",
                "    assert_eq!(buf, expected_output);"
              ],
              "code": [
                "{",
                "    let transition = Transition {",
                "        start: 100,",
                "        end: 200,",
                "        next: StateID(SmallIndex(5)),",
                "    };",
                "    let mut buf = String::new();",
                "    let f = &mut fmt::Formatter::for_str(&mut buf);",
                "    let _ = transition.fmt(f);",
                "    let transition = Transition { start: 100, end: 200, next: StateID(SmallIndex(5)) };",
                "    let expected_output = \"DebugByte(100)-DebugByte(200) => 5\";",
                "    assert_eq!(buf, expected_output);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition {",
                "        start: 254,",
                "        end: 255,",
                "        next: StateID(SmallIndex(3)),",
                "    };",
                "    let mut buf = String::new();",
                "    let f = &mut fmt::Formatter::for_str(&mut buf);",
                "    let _ = transition.fmt(f);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf, \"DebugByte(254)-DebugByte(255) => 3\");"
              ],
              "code": [
                "{",
                "    let transition = Transition {",
                "        start: 254,",
                "        end: 255,",
                "        next: StateID(SmallIndex(3)),",
                "    };",
                "    let mut buf = String::new();",
                "    let f = &mut fmt::Formatter::for_str(&mut buf);",
                "    let _ = transition.fmt(f);",
                "    assert_eq!(buf, \"DebugByte(254)-DebugByte(255) => 3\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition {",
                "        start: 0,",
                "        end: 1,",
                "        next: StateID(SmallIndex(0)),",
                "    };",
                "    let mut buf = String::new();",
                "    let f = &mut fmt::Formatter::for_str(&mut buf);",
                "    let _ = transition.fmt(f);",
                "}"
              ],
              "oracle": [
                "    write!(f, \"{:?}-{:?} => {:?}\", DebugByte(0), DebugByte(1), 0)"
              ],
              "code": [
                "{",
                "    let transition = Transition {",
                "        start: 0,",
                "        end: 1,",
                "        next: StateID(SmallIndex(0)),",
                "    };",
                "    let mut buf = String::new();",
                "    let f = &mut fmt::Formatter::for_str(&mut buf);",
                "    let _ = transition.fmt(f);",
                "    write!(f, \"{:?}-{:?} => {:?}\", DebugByte(0), DebugByte(1), 0)",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition {",
                "        start: 1,",
                "        end: 10,",
                "        next: StateID(SmallIndex(2)),",
                "    };",
                "    let mut buf = String::new();",
                "    let f = &mut fmt::Formatter::for_str(&mut buf);",
                "    let _ = transition.fmt(f);",
                "}"
              ],
              "oracle": [
                "    write!(f, \"{:?}-{:?} => {:?}\", DebugByte(1), DebugByte(10), 2)",
                "    assert_eq!(buf, \"DebugByte(1)-DebugByte(10) => 2\")"
              ],
              "code": [
                "{",
                "    let transition = Transition {",
                "        start: 1,",
                "        end: 10,",
                "        next: StateID(SmallIndex(2)),",
                "    };",
                "    let mut buf = String::new();",
                "    let f = &mut fmt::Formatter::for_str(&mut buf);",
                "    let _ = transition.fmt(f);",
                "    write!(f, \"{:?}-{:?} => {:?}\", DebugByte(1), DebugByte(10), 2)",
                "    assert_eq!(buf, \"DebugByte(1)-DebugByte(10) => 2\")",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}