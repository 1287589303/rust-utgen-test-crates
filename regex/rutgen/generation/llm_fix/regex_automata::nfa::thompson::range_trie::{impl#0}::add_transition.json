{
  "name": "regex_automata::nfa::thompson::range_trie::{impl#0}::add_transition",
  "mod_info": {
    "name": "nfa::thompson::range_trie",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:70:1:70:16"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/range_trie.rs:504:5:513:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "StateID: Valid identifiers that are within the range of allocated states; Utf8Range: Non-overlapping byte ranges with valid start and end values (inclusive) to ensure lexicographic order; next_id: A valid StateID that is not equal to from_id.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut trie = RangeTrie::new();",
                "    let from_id = ROOT;",
                "    let next_id = StateID::new_unchecked(2);",
                "    let range = Utf8Range::new(0, 1);",
                "    trie.add_transition(from_id, range, next_id);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(trie.state(from_id).transitions.len(), 1);",
                "    assert_eq!(trie.state(from_id).transitions[0].range, Utf8Range::new(0, 1));",
                "    assert_eq!(trie.state(from_id).transitions[0].next_id, next_id);"
              ],
              "code": [
                "{",
                "    let mut trie = RangeTrie::new();",
                "    let from_id = ROOT;",
                "    let next_id = StateID::new_unchecked(2);",
                "    let range = Utf8Range::new(0, 1);",
                "    trie.add_transition(from_id, range, next_id);",
                "    assert_eq!(trie.state(from_id).transitions.len(), 1);",
                "    assert_eq!(trie.state(from_id).transitions[0].range, Utf8Range::new(0, 1));",
                "    assert_eq!(trie.state(from_id).transitions[0].next_id, next_id);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut trie = RangeTrie::new();",
                "    trie.add_empty();",
                "    let from_id = StateID::new_unchecked(1);",
                "    let next_id = StateID::new_unchecked(2);",
                "    let range1 = Utf8Range::new(0, 5);",
                "    let range2 = Utf8Range::new(6, 10);",
                "    trie.add_transition(from_id, range1, next_id);",
                "    trie.add_transition(from_id, range2, next_id);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(trie.state(from_id).transitions.len(), 2);",
                "    assert_eq!(trie.state(from_id).transitions[0].range, range1);",
                "    assert_eq!(trie.state(from_id).transitions[0].next_id, next_id);",
                "    assert_eq!(trie.state(from_id).transitions[1].range, range2);",
                "    assert_eq!(trie.state(from_id).transitions[1].next_id, next_id);"
              ],
              "code": [
                "{",
                "    let mut trie = RangeTrie::new();",
                "    trie.add_empty();",
                "    let from_id = StateID::new_unchecked(1);",
                "    let next_id = StateID::new_unchecked(2);",
                "    let range1 = Utf8Range::new(0, 5);",
                "    let range2 = Utf8Range::new(6, 10);",
                "    trie.add_transition(from_id, range1, next_id);",
                "    trie.add_transition(from_id, range2, next_id);",
                "    assert_eq!(trie.state(from_id).transitions.len(), 2);",
                "    assert_eq!(trie.state(from_id).transitions[0].range, range1);",
                "    assert_eq!(trie.state(from_id).transitions[0].next_id, next_id);",
                "    assert_eq!(trie.state(from_id).transitions[1].range, range2);",
                "    assert_eq!(trie.state(from_id).transitions[1].next_id, next_id);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut trie = RangeTrie::new();",
                "    trie.add_empty();",
                "    let from_id = StateID::new_unchecked(1);",
                "    let next_id = StateID::new_unchecked(2);",
                "    let range1 = Utf8Range::new(0, 2);",
                "    let range2 = Utf8Range::new(3, 5);",
                "    trie.add_transition(from_id, range1, next_id);",
                "    trie.add_transition(from_id, range2, next_id);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(trie.state(from_id).transitions.len(), 2);",
                "    assert_eq!(trie.state(from_id).transitions[0].range, range1);",
                "    assert_eq!(trie.state(from_id).transitions[0].next_id, next_id);",
                "    assert_eq!(trie.state(from_id).transitions[1].range, range2);",
                "    assert_eq!(trie.state(from_id).transitions[1].next_id, next_id);"
              ],
              "code": [
                "{",
                "    let mut trie = RangeTrie::new();",
                "    trie.add_empty();",
                "    let from_id = StateID::new_unchecked(1);",
                "    let next_id = StateID::new_unchecked(2);",
                "    let range1 = Utf8Range::new(0, 2);",
                "    let range2 = Utf8Range::new(3, 5);",
                "    trie.add_transition(from_id, range1, next_id);",
                "    trie.add_transition(from_id, range2, next_id);",
                "    assert_eq!(trie.state(from_id).transitions.len(), 2);",
                "    assert_eq!(trie.state(from_id).transitions[0].range, range1);",
                "    assert_eq!(trie.state(from_id).transitions[0].next_id, next_id);",
                "    assert_eq!(trie.state(from_id).transitions[1].range, range2);",
                "    assert_eq!(trie.state(from_id).transitions[1].next_id, next_id);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut trie = RangeTrie::new();",
                "    trie.add_empty();",
                "    let from_id = StateID::new_unchecked(1);",
                "    let next_id = from_id;",
                "    let range = Utf8Range::new(0, 1);",
                "    trie.add_transition(from_id, range, next_id);",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(trie.state(from_id).transitions.len(), 0));",
                "    assert!(trie.state(next_id).transitions.is_empty());",
                "    assert!(trie.state(from_id).transitions[0].range.start() == 0);",
                "    assert!(trie.state(from_id).transitions[0].range.end() == 1);",
                "    assert!(trie.state(from_id).transitions[0].next_id == next_id);",
                "    assert!(trie.state_mut(from_id).ntrans == 1);",
                "    assert!(trie.state_mut(from_id).transitions[0].range.is_empty() == false);",
                "    assert!(trie.state_mut(from_id).transitions[0].next_id == next_id);",
                "    assert!(trie.state(from_id).transitions.get(0).is_some());"
              ],
              "code": [
                "{",
                "    let mut trie = RangeTrie::new();",
                "    trie.add_empty();",
                "    let from_id = StateID::new_unchecked(1);",
                "    let next_id = from_id;",
                "    let range = Utf8Range::new(0, 1);",
                "    trie.add_transition(from_id, range, next_id);",
                "    assert!(matches!(trie.state(from_id).transitions.len(), 0));",
                "    assert!(trie.state(next_id).transitions.is_empty());",
                "    assert!(trie.state(from_id).transitions[0].range.start() == 0);",
                "    assert!(trie.state(from_id).transitions[0].range.end() == 1);",
                "    assert!(trie.state(from_id).transitions[0].next_id == next_id);",
                "    assert!(trie.state_mut(from_id).ntrans == 1);",
                "    assert!(trie.state_mut(from_id).transitions[0].range.is_empty() == false);",
                "    assert!(trie.state_mut(from_id).transitions[0].next_id == next_id);",
                "    assert!(trie.state(from_id).transitions.get(0).is_some());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut trie = RangeTrie::new();",
                "    trie.add_empty();",
                "    let from_id = StateID::new_unchecked(1);",
                "    let next_id = StateID::new_unchecked(2);",
                "    let range1 = Utf8Range::new(0, 2);",
                "    let range2 = Utf8Range::new(1, 2); // Overlapping range",
                "    trie.add_transition(from_id, range1, next_id);",
                "    trie.add_transition(from_id, range2, next_id);",
                "}"
              ],
              "oracle": [
                "    assert!(trie.state(from_id).transitions.len() == 1);",
                "    assert!(trie.state(from_id).transitions[0].range.start == 0 && trie.state(from_id).transitions[0].range.end == 2);",
                "    assert!(trie.state(from_id).transitions[0].next_id == next_id);",
                "    assert!(trie.state_mut(from_id).transitions.len() == 2);",
                "    assert!(trie.state(from_id).transitions[1].range.start == 1 && trie.state(from_id).transitions[1].range.end == 2);",
                "    assert!(trie.state(from_id).transitions[1].next_id == next_id);",
                "    assert!(trie.state_mut(from_id).transitions.len() > 1);"
              ],
              "code": [
                "{",
                "    let mut trie = RangeTrie::new();",
                "    trie.add_empty();",
                "    let from_id = StateID::new_unchecked(1);",
                "    let next_id = StateID::new_unchecked(2);",
                "    let range1 = Utf8Range::new(0, 2);",
                "    let range2 = Utf8Range::new(1, 2); // Overlapping range",
                "    trie.add_transition(from_id, range1, next_id);",
                "    trie.add_transition(from_id, range2, next_id);",
                "    assert!(trie.state(from_id).transitions.len() == 1);",
                "    assert!(trie.state(from_id).transitions[0].range.start == 0 && trie.state(from_id).transitions[0].range.end == 2);",
                "    assert!(trie.state(from_id).transitions[0].next_id == next_id);",
                "    assert!(trie.state_mut(from_id).transitions.len() == 2);",
                "    assert!(trie.state(from_id).transitions[1].range.start == 1 && trie.state(from_id).transitions[1].range.end == 2);",
                "    assert!(trie.state(from_id).transitions[1].next_id == next_id);",
                "    assert!(trie.state_mut(from_id).transitions.len() > 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}