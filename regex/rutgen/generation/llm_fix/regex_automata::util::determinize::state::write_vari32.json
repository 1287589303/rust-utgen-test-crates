{
  "name": "regex_automata::util::determinize::state::write_vari32",
  "mod_info": {
    "name": "util::determinize::state",
    "loc": "regex-automata/src/util/determinize/mod.rs:57:1:57:11"
  },
  "visible": false,
  "loc": "regex-automata/src/util/determinize/state.rs:735:1:741:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: n < 0 at line 737 is true\n"
      ],
      "input_infer": "n = -1 to -2147483648\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut data = Vec::new();",
                "    write_vari32(&mut data, -1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(data.len(), 1);",
                "    assert_eq!(data[0], 0b0000_0000);",
                "    assert_eq!(data[0] & 0b1000_0000, 0);",
                "    assert!(data.iter().all(|&byte| byte <= 0b0111_1111));"
              ],
              "code": [
                "{",
                "    let mut data = Vec::new();",
                "    write_vari32(&mut data, -1);",
                "    assert_eq!(data.len(), 1);",
                "    assert_eq!(data[0], 0b0000_0000);",
                "    assert_eq!(data[0] & 0b1000_0000, 0);",
                "    assert!(data.iter().all(|&byte| byte <= 0b0111_1111));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut data = Vec::new();",
                "    write_vari32(&mut data, -2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(data.len(), 1);",
                "    assert_eq!(data[0], 3);"
              ],
              "code": [
                "{",
                "    let mut data = Vec::new();",
                "    write_vari32(&mut data, -2);",
                "    assert_eq!(data.len(), 1);",
                "    assert_eq!(data[0], 3);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut data = Vec::new();",
                "    write_vari32(&mut data, -2147483648);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(data, vec![0x80, 0x00, 0x00, 0x00, 0x01]);"
              ],
              "code": [
                "{",
                "    let mut data = Vec::new();",
                "    write_vari32(&mut data, -2147483648);",
                "    assert_eq!(data, vec![0x80, 0x00, 0x00, 0x00, 0x01]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: n < 0 at line 737 is false, with bound n == 0\n"
      ],
      "input_infer": "Test input conditions or ranges: n must be an integer value in the range of 0 to 2,147,483,647 (inclusive).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut data = Vec::new();",
                "    let n: i32 = 0;",
                "    write_vari32(&mut data, n);",
                "}"
              ],
              "oracle": [
                "    data.len() == 1",
                "    data[0] == 0",
                "    data[0] & 0b1000_0000 == 0"
              ],
              "code": [
                "{",
                "    let mut data = Vec::new();",
                "    let n: i32 = 0;",
                "    write_vari32(&mut data, n);",
                "    data.len() == 1",
                "    data[0] == 0",
                "    data[0] & 0b1000_0000 == 0",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut data = Vec::new();",
                "    let n: i32 = 1;",
                "    write_vari32(&mut data, n);",
                "}"
              ],
              "oracle": [
                "    data.len() == 1",
                "    data[0] == 2",
                "    data[0] | 0b1000_0000 == 0b0000_0000",
                "    data[0] & 0b0111_1111 == 1"
              ],
              "code": [
                "{",
                "    let mut data = Vec::new();",
                "    let n: i32 = 1;",
                "    write_vari32(&mut data, n);",
                "    data.len() == 1",
                "    data[0] == 2",
                "    data[0] | 0b1000_0000 == 0b0000_0000",
                "    data[0] & 0b0111_1111 == 1",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut data = Vec::new();",
                "    let n: i32 = 2_147_483_647;",
                "    write_vari32(&mut data, n);",
                "}"
              ],
              "oracle": [
                "    let mut data = Vec::new();",
                "    let n: i32 = 2_147_483_647;",
                "    write_vari32(&mut data, n);",
                "    assert_eq!(data.len(), 1);",
                "    assert_eq!(data[0], 0b11111111);"
              ],
              "code": [
                "{",
                "    let mut data = Vec::new();",
                "    let n: i32 = 2_147_483_647;",
                "    write_vari32(&mut data, n);",
                "    let mut data = Vec::new();",
                "    let n: i32 = 2_147_483_647;",
                "    write_vari32(&mut data, n);",
                "    assert_eq!(data.len(), 1);",
                "    assert_eq!(data[0], 0b11111111);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}