{
  "name": "regex_automata::meta::regex::{impl#4}::static_captures_len",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:1740:5:1746:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "valid regex patterns including simple (e.g., \"a\", \"(a)\"), alternation (e.g., \"(a)|(b)\"), grouping (e.g., \"(a)(b)|(c)(d)\"), patterns with optional groups (e.g., \"(b)*\"), patterns with quantifiers (e.g., \"(b)+\"); edge cases including empty patterns, invalid regex patterns, single character patterns, patterns with only alternation; patterns resulting in None (e.g., \"(a)|b\", \"a|(b)\"); multiple patterns with consistent static captures (e.g., &[\"(a)\", \"(b)\"], &[\"(a)|(b)\", \"(c)|(d)\"]); and patterns with differing numbers of captures in multiple patterns resulting in None.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = Regex::new(\"a\").unwrap();",
                "    re.static_captures_len();",
                "    ",
                "    let re = Regex::new(\"(a)\").unwrap();",
                "    re.static_captures_len();",
                "    ",
                "    let re = Regex::new(\"(a)|(b)\").unwrap();",
                "    re.static_captures_len();",
                "    ",
                "    let re = Regex::new(\"(a)(b)|(c)(d)\").unwrap();",
                "    re.static_captures_len();",
                "    ",
                "    let re = Regex::new(\"(b)+\").unwrap();",
                "    re.static_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Some(1), Regex::new(\"a\").unwrap().static_captures_len());",
                "    assert_eq!(Some(2), Regex::new(\"(a)\").unwrap().static_captures_len());",
                "    assert_eq!(Some(2), Regex::new(\"(a)|(b)\").unwrap().static_captures_len());",
                "    assert_eq!(Some(3), Regex::new(\"(a)(b)|(c)(d)\").unwrap().static_captures_len());",
                "    assert_eq!(Some(2), Regex::new(\"(b)+\").unwrap().static_captures_len());"
              ],
              "code": [
                "{",
                "    let re = Regex::new(\"a\").unwrap();",
                "    re.static_captures_len();",
                "    ",
                "    let re = Regex::new(\"(a)\").unwrap();",
                "    re.static_captures_len();",
                "    ",
                "    let re = Regex::new(\"(a)|(b)\").unwrap();",
                "    re.static_captures_len();",
                "    ",
                "    let re = Regex::new(\"(a)(b)|(c)(d)\").unwrap();",
                "    re.static_captures_len();",
                "    ",
                "    let re = Regex::new(\"(b)+\").unwrap();",
                "    re.static_captures_len();",
                "    assert_eq!(Some(1), Regex::new(\"a\").unwrap().static_captures_len());",
                "    assert_eq!(Some(2), Regex::new(\"(a)\").unwrap().static_captures_len());",
                "    assert_eq!(Some(2), Regex::new(\"(a)|(b)\").unwrap().static_captures_len());",
                "    assert_eq!(Some(3), Regex::new(\"(a)(b)|(c)(d)\").unwrap().static_captures_len());",
                "    assert_eq!(Some(2), Regex::new(\"(b)+\").unwrap().static_captures_len());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = Regex::new(\"(a)|b\").unwrap();",
                "    re.static_captures_len();",
                "    ",
                "    let re = Regex::new(\"a|(b)\").unwrap();",
                "    re.static_captures_len();",
                "    ",
                "    let re = Regex::new(\"(b)*\").unwrap();",
                "    re.static_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(re.static_captures_len(), None);",
                "    assert_eq!(re.static_captures_len(), None);",
                "    assert_eq!(re.static_captures_len(), None);"
              ],
              "code": [
                "{",
                "    let re = Regex::new(\"(a)|b\").unwrap();",
                "    re.static_captures_len();",
                "    ",
                "    let re = Regex::new(\"a|(b)\").unwrap();",
                "    re.static_captures_len();",
                "    ",
                "    let re = Regex::new(\"(b)*\").unwrap();",
                "    re.static_captures_len();",
                "    assert_eq!(re.static_captures_len(), None);",
                "    assert_eq!(re.static_captures_len(), None);",
                "    assert_eq!(re.static_captures_len(), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = Regex::new_many(&[\"a\", \"b\"]).unwrap();",
                "    re.static_captures_len();",
                "    ",
                "    let re = Regex::new_many(&[\"(a)\", \"(b)\"]).unwrap();",
                "    re.static_captures_len();",
                "    ",
                "    let re = Regex::new_many(&[\"(a)|(b)\", \"(c)|(d)\"]).unwrap();",
                "    re.static_captures_len();",
                "    ",
                "    let re = Regex::new_many(&[\"(a)(b)|(c)(d)\", \"(x)(y)\"]).unwrap();",
                "    re.static_captures_len();",
                "    ",
                "    let re = Regex::new_many(&[\"(a)\", \"b\"]).unwrap();",
                "    re.static_captures_len();",
                "    ",
                "    let re = Regex::new_many(&[\"a\", \"(b)\"]).unwrap();",
                "    re.static_captures_len();",
                "    ",
                "    let re = Regex::new_many(&[\"(a)\", \"(b)*\"]).unwrap();",
                "    re.static_captures_len();",
                "    ",
                "    let re = Regex::new_many(&[\"(a)+\", \"(b)+\"]).unwrap();",
                "    re.static_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Some(1), Regex::new_many(&[\"a\", \"b\"]).unwrap().static_captures_len());",
                "    assert_eq!(Some(2), Regex::new_many(&[\"(a)\", \"(b)\"]).unwrap().static_captures_len());",
                "    assert_eq!(Some(2), Regex::new_many(&[\"(a)|(b)\", \"(c)|(d)\"]).unwrap().static_captures_len());",
                "    assert_eq!(Some(3), Regex::new_many(&[\"(a)(b)|(c)(d)\", \"(x)(y)\"]).unwrap().static_captures_len());",
                "    assert_eq!(None, Regex::new_many(&[\"(a)\", \"b\"]).unwrap().static_captures_len());",
                "    assert_eq!(None, Regex::new_many(&[\"a\", \"(b)\"]).unwrap().static_captures_len());",
                "    assert_eq!(None, Regex::new_many(&[\"(a)\", \"(b)*\"]).unwrap().static_captures_len());",
                "    assert_eq!(Some(2), Regex::new_many(&[\"(a)+\", \"(b)+\"]).unwrap().static_captures_len());"
              ],
              "code": [
                "{",
                "    let re = Regex::new_many(&[\"a\", \"b\"]).unwrap();",
                "    re.static_captures_len();",
                "    ",
                "    let re = Regex::new_many(&[\"(a)\", \"(b)\"]).unwrap();",
                "    re.static_captures_len();",
                "    ",
                "    let re = Regex::new_many(&[\"(a)|(b)\", \"(c)|(d)\"]).unwrap();",
                "    re.static_captures_len();",
                "    ",
                "    let re = Regex::new_many(&[\"(a)(b)|(c)(d)\", \"(x)(y)\"]).unwrap();",
                "    re.static_captures_len();",
                "    ",
                "    let re = Regex::new_many(&[\"(a)\", \"b\"]).unwrap();",
                "    re.static_captures_len();",
                "    ",
                "    let re = Regex::new_many(&[\"a\", \"(b)\"]).unwrap();",
                "    re.static_captures_len();",
                "    ",
                "    let re = Regex::new_many(&[\"(a)\", \"(b)*\"]).unwrap();",
                "    re.static_captures_len();",
                "    ",
                "    let re = Regex::new_many(&[\"(a)+\", \"(b)+\"]).unwrap();",
                "    re.static_captures_len();",
                "    assert_eq!(Some(1), Regex::new_many(&[\"a\", \"b\"]).unwrap().static_captures_len());",
                "    assert_eq!(Some(2), Regex::new_many(&[\"(a)\", \"(b)\"]).unwrap().static_captures_len());",
                "    assert_eq!(Some(2), Regex::new_many(&[\"(a)|(b)\", \"(c)|(d)\"]).unwrap().static_captures_len());",
                "    assert_eq!(Some(3), Regex::new_many(&[\"(a)(b)|(c)(d)\", \"(x)(y)\"]).unwrap().static_captures_len());",
                "    assert_eq!(None, Regex::new_many(&[\"(a)\", \"b\"]).unwrap().static_captures_len());",
                "    assert_eq!(None, Regex::new_many(&[\"a\", \"(b)\"]).unwrap().static_captures_len());",
                "    assert_eq!(None, Regex::new_many(&[\"(a)\", \"(b)*\"]).unwrap().static_captures_len());",
                "    assert_eq!(Some(2), Regex::new_many(&[\"(a)+\", \"(b)+\"]).unwrap().static_captures_len());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}