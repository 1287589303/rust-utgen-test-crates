{
  "name": "regex_automata::dfa::sparse::{impl#2}::memory_usage",
  "mod_info": {
    "name": "dfa::sparse",
    "loc": "regex-automata/src/dfa/mod.rs:343:1:343:16"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/sparse.rs:485:5:487:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.tt.memory_usage() + self.st.memory_usage()\n"
      ],
      "input_infer": "test input conditions: self.tt (Transitions<T>) with varying sizes (0 to max u32 size) and self.st (StartTable<T>) with varying sizes (0 to max u32 size), ensuring both edge cases (minimum and maximum sizes) and typical usage scenarios (common sizes).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transitions = Transitions {",
                "        sparse: vec![],",
                "        classes: ByteClasses::default(),",
                "        state_len: 0,",
                "        pattern_len: 0,",
                "    };",
                "    let start_table = StartTable {",
                "        table: vec![],",
                "        kind: StartKind::Both,",
                "        start_map: StartByteMap::default(),",
                "        stride: 0,",
                "        pattern_len: None,",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: None,",
                "    };",
                "    let dfa = DFA {",
                "        tt: transitions,",
                "        st: start_table,",
                "        special: Special {",
                "            max: 0,",
                "            quit_id: 0,",
                "            min_match: 0,",
                "            max_match: 0,",
                "            min_accel: 0,",
                "            max_accel: 0,",
                "            min_start: 0,",
                "            max_start: 0,",
                "        },",
                "        pre: None,",
                "        quitset: ByteSet::default(),",
                "        flags: Flags {",
                "            has_empty: false,",
                "            is_utf8: false,",
                "            is_always_start_anchored: false,",
                "        },",
                "    };",
                "    let _ = dfa.memory_usage();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dfa.memory_usage(), 0);",
                "    assert_eq!(dfa.tt.memory_usage(), 0);",
                "    assert_eq!(dfa.st.memory_usage(), 0);"
              ],
              "code": [
                "{",
                "    let transitions = Transitions {",
                "        sparse: vec![],",
                "        classes: ByteClasses::default(),",
                "        state_len: 0,",
                "        pattern_len: 0,",
                "    };",
                "    let start_table = StartTable {",
                "        table: vec![],",
                "        kind: StartKind::Both,",
                "        start_map: StartByteMap::default(),",
                "        stride: 0,",
                "        pattern_len: None,",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: None,",
                "    };",
                "    let dfa = DFA {",
                "        tt: transitions,",
                "        st: start_table,",
                "        special: Special {",
                "            max: 0,",
                "            quit_id: 0,",
                "            min_match: 0,",
                "            max_match: 0,",
                "            min_accel: 0,",
                "            max_accel: 0,",
                "            min_start: 0,",
                "            max_start: 0,",
                "        },",
                "        pre: None,",
                "        quitset: ByteSet::default(),",
                "        flags: Flags {",
                "            has_empty: false,",
                "            is_utf8: false,",
                "            is_always_start_anchored: false,",
                "        },",
                "    };",
                "    let _ = dfa.memory_usage();",
                "    assert_eq!(dfa.memory_usage(), 0);",
                "    assert_eq!(dfa.tt.memory_usage(), 0);",
                "    assert_eq!(dfa.st.memory_usage(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transitions = Transitions {",
                "        sparse: vec![1, 2, 3, 4],",
                "        classes: ByteClasses::default(),",
                "        state_len: 4,",
                "        pattern_len: 1,",
                "    };",
                "    let start_table = StartTable {",
                "        table: vec![0, 1, 2, 3],",
                "        kind: StartKind::Both,",
                "        start_map: StartByteMap::default(),",
                "        stride: 1,",
                "        pattern_len: Some(1),",
                "        universal_start_unanchored: Some(1),",
                "        universal_start_anchored: Some(0),",
                "    };",
                "    let dfa = DFA {",
                "        tt: transitions,",
                "        st: start_table,",
                "        special: Special {",
                "            max: 4,",
                "            quit_id: 2,",
                "            min_match: 1,",
                "            max_match: 3,",
                "            min_accel: 1,",
                "            max_accel: 3,",
                "            min_start: 0,",
                "            max_start: 3,",
                "        },",
                "        pre: None,",
                "        quitset: ByteSet::default(),",
                "        flags: Flags {",
                "            has_empty: true,",
                "            is_utf8: true,",
                "            is_always_start_anchored: false,",
                "        },",
                "    };",
                "    let _ = dfa.memory_usage();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dfa.tt.memory_usage() + dfa.st.memory_usage(), expected_memory_usage);",
                "    assert_eq!(dfa.tt.memory_usage(), size_of::<Transitions<Vec<u8>>>());",
                "    assert_eq!(dfa.st.memory_usage(), size_of::<StartTable<Vec<u32>>>());",
                "    assert!(dfa.memory_usage() > 0);",
                "    assert!(dfa.tt.memory_usage() > 0);",
                "    assert!(dfa.st.memory_usage() > 0);"
              ],
              "code": [
                "{",
                "    let transitions = Transitions {",
                "        sparse: vec![1, 2, 3, 4],",
                "        classes: ByteClasses::default(),",
                "        state_len: 4,",
                "        pattern_len: 1,",
                "    };",
                "    let start_table = StartTable {",
                "        table: vec![0, 1, 2, 3],",
                "        kind: StartKind::Both,",
                "        start_map: StartByteMap::default(),",
                "        stride: 1,",
                "        pattern_len: Some(1),",
                "        universal_start_unanchored: Some(1),",
                "        universal_start_anchored: Some(0),",
                "    };",
                "    let dfa = DFA {",
                "        tt: transitions,",
                "        st: start_table,",
                "        special: Special {",
                "            max: 4,",
                "            quit_id: 2,",
                "            min_match: 1,",
                "            max_match: 3,",
                "            min_accel: 1,",
                "            max_accel: 3,",
                "            min_start: 0,",
                "            max_start: 3,",
                "        },",
                "        pre: None,",
                "        quitset: ByteSet::default(),",
                "        flags: Flags {",
                "            has_empty: true,",
                "            is_utf8: true,",
                "            is_always_start_anchored: false,",
                "        },",
                "    };",
                "    let _ = dfa.memory_usage();",
                "    assert_eq!(dfa.tt.memory_usage() + dfa.st.memory_usage(), expected_memory_usage);",
                "    assert_eq!(dfa.tt.memory_usage(), size_of::<Transitions<Vec<u8>>>());",
                "    assert_eq!(dfa.st.memory_usage(), size_of::<StartTable<Vec<u32>>>());",
                "    assert!(dfa.memory_usage() > 0);",
                "    assert!(dfa.tt.memory_usage() > 0);",
                "    assert!(dfa.st.memory_usage() > 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transitions = Transitions {",
                "        sparse: vec![0; (u32::MAX as usize)],",
                "        classes: ByteClasses::default(),",
                "        state_len: u32::MAX as usize,",
                "        pattern_len: u32::MAX as usize,",
                "    };",
                "    let start_table = StartTable {",
                "        table: vec![0; (u32::MAX as usize)],",
                "        kind: StartKind::Both,",
                "        start_map: StartByteMap::default(),",
                "        stride: u32::MAX as usize,",
                "        pattern_len: Some(u32::MAX as usize),",
                "        universal_start_unanchored: Some(u32::MAX),",
                "        universal_start_anchored: Some(u32::MAX),",
                "    };",
                "    let dfa = DFA {",
                "        tt: transitions,",
                "        st: start_table,",
                "        special: Special {",
                "            max: u32::MAX,",
                "            quit_id: u32::MAX,",
                "            min_match: u32::MAX,",
                "            max_match: u32::MAX,",
                "            min_accel: u32::MAX,",
                "            max_accel: u32::MAX,",
                "            min_start: u32::MAX,",
                "            max_start: u32::MAX,",
                "        },",
                "        pre: None,",
                "        quitset: ByteSet::default(),",
                "        flags: Flags {",
                "            has_empty: true,",
                "            is_utf8: true,",
                "            is_always_start_anchored: false,",
                "        },",
                "    };",
                "    let _ = dfa.memory_usage();",
                "}"
              ],
              "oracle": [
                "    let transitions = Transitions { sparse: vec![0; (u32::MAX as usize)], classes: ByteClasses::default(), state_len: u32::MAX as usize, pattern_len: u32::MAX as usize };",
                "    let start_table = StartTable { table: vec![0; (u32::MAX as usize)], kind: StartKind::Both, start_map: StartByteMap::default(), stride: u32::MAX as usize, pattern_len: Some(u32::MAX as usize), universal_start_unanchored: Some(u32::MAX), universal_start_anchored: Some(u32::MAX) };",
                "    let dfa = DFA { tt: transitions, st: start_table, special: Special { max: u32::MAX, quit_id: u32::MAX, min_match: u32::MAX, max_match: u32::MAX, min_accel: u32::MAX, max_accel: u32::MAX, min_start: u32::MAX, max_start: u32::MAX }, pre: None, quitset: ByteSet::default(), flags: Flags { has_empty: true, is_utf8: true, is_always_start_anchored: false } };",
                "    assert_eq!(dfa.memory_usage(), (u32::MAX as usize) + (u32::MAX as usize));",
                "    let transitions_small = Transitions { sparse: vec![0; 1], classes: ByteClasses::default(), state_len: 1, pattern_len: 1 };",
                "    let start_table_small = StartTable { table: vec![0; 1], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 1, pattern_len: Some(1), universal_start_unanchored: Some(1), universal_start_anchored: Some(1) };",
                "    let dfa_small = DFA { tt: transitions_small, st: start_table_small, special: Special { max: 1, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 }, pre: None, quitset: ByteSet::default(), flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: true } };",
                "    assert_eq!(dfa_small.memory_usage(), 1 + 1);",
                "    let transitions_empty = Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 0, pattern_len: 0 };",
                "    let start_table_empty = StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: Some(0), universal_start_unanchored: None, universal_start_anchored: None };",
                "    let dfa_empty = DFA { tt: transitions_empty, st: start_table_empty, special: Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 }, pre: None, quitset: ByteSet::default(), flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false } };",
                "    assert_eq!(dfa_empty.memory_usage(), 0 + 0);"
              ],
              "code": [
                "{",
                "    let transitions = Transitions {",
                "        sparse: vec![0; (u32::MAX as usize)],",
                "        classes: ByteClasses::default(),",
                "        state_len: u32::MAX as usize,",
                "        pattern_len: u32::MAX as usize,",
                "    };",
                "    let start_table = StartTable {",
                "        table: vec![0; (u32::MAX as usize)],",
                "        kind: StartKind::Both,",
                "        start_map: StartByteMap::default(),",
                "        stride: u32::MAX as usize,",
                "        pattern_len: Some(u32::MAX as usize),",
                "        universal_start_unanchored: Some(u32::MAX),",
                "        universal_start_anchored: Some(u32::MAX),",
                "    };",
                "    let dfa = DFA {",
                "        tt: transitions,",
                "        st: start_table,",
                "        special: Special {",
                "            max: u32::MAX,",
                "            quit_id: u32::MAX,",
                "            min_match: u32::MAX,",
                "            max_match: u32::MAX,",
                "            min_accel: u32::MAX,",
                "            max_accel: u32::MAX,",
                "            min_start: u32::MAX,",
                "            max_start: u32::MAX,",
                "        },",
                "        pre: None,",
                "        quitset: ByteSet::default(),",
                "        flags: Flags {",
                "            has_empty: true,",
                "            is_utf8: true,",
                "            is_always_start_anchored: false,",
                "        },",
                "    };",
                "    let _ = dfa.memory_usage();",
                "    let transitions = Transitions { sparse: vec![0; (u32::MAX as usize)], classes: ByteClasses::default(), state_len: u32::MAX as usize, pattern_len: u32::MAX as usize };",
                "    let start_table = StartTable { table: vec![0; (u32::MAX as usize)], kind: StartKind::Both, start_map: StartByteMap::default(), stride: u32::MAX as usize, pattern_len: Some(u32::MAX as usize), universal_start_unanchored: Some(u32::MAX), universal_start_anchored: Some(u32::MAX) };",
                "    let dfa = DFA { tt: transitions, st: start_table, special: Special { max: u32::MAX, quit_id: u32::MAX, min_match: u32::MAX, max_match: u32::MAX, min_accel: u32::MAX, max_accel: u32::MAX, min_start: u32::MAX, max_start: u32::MAX }, pre: None, quitset: ByteSet::default(), flags: Flags { has_empty: true, is_utf8: true, is_always_start_anchored: false } };",
                "    assert_eq!(dfa.memory_usage(), (u32::MAX as usize) + (u32::MAX as usize));",
                "    let transitions_small = Transitions { sparse: vec![0; 1], classes: ByteClasses::default(), state_len: 1, pattern_len: 1 };",
                "    let start_table_small = StartTable { table: vec![0; 1], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 1, pattern_len: Some(1), universal_start_unanchored: Some(1), universal_start_anchored: Some(1) };",
                "    let dfa_small = DFA { tt: transitions_small, st: start_table_small, special: Special { max: 1, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 }, pre: None, quitset: ByteSet::default(), flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: true } };",
                "    assert_eq!(dfa_small.memory_usage(), 1 + 1);",
                "    let transitions_empty = Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 0, pattern_len: 0 };",
                "    let start_table_empty = StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: Some(0), universal_start_unanchored: None, universal_start_anchored: None };",
                "    let dfa_empty = DFA { tt: transitions_empty, st: start_table_empty, special: Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 }, pre: None, quitset: ByteSet::default(), flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false } };",
                "    assert_eq!(dfa_empty.memory_usage(), 0 + 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}