{
  "name": "regex_automata::nfa::thompson::map::{impl#1}::set",
  "mod_info": {
    "name": "nfa::thompson::map",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:65:1:65:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/map.rs:292:5:295:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "capacity: 1 to 1, key from: StateID(0) to StateID(usize::MAX), key start: 0 to 255, key end: 0 to 255, hash: 0 to capacity - 1, state_id: StateID(0) to StateID(usize::MAX), valid version: 0 to 65535\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Utf8SuffixMap::new(1);",
                "    let key = Utf8SuffixKey {",
                "        from: StateID(0),",
                "        start: 0,",
                "        end: 255,",
                "    };",
                "    let state_id = StateID(0);",
                "    let hash = map.hash(&key);",
                "    map.set(key.clone(), hash, state_id);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.map.len(), 1);",
                "    assert_eq!(map.map[hash].val, state_id);",
                "    assert_eq!(map.map[hash].key, key);",
                "    assert_eq!(map.map[hash].version, map.version);",
                "    assert!(map.get(&key, hash).is_some());",
                "    assert_eq!(map.get(&key, hash), Some(state_id));",
                "    assert_eq!(map.get(&Utf8SuffixKey { from: StateID(1), start: 0, end: 255 }, hash), None);"
              ],
              "code": [
                "{",
                "    let mut map = Utf8SuffixMap::new(1);",
                "    let key = Utf8SuffixKey {",
                "        from: StateID(0),",
                "        start: 0,",
                "        end: 255,",
                "    };",
                "    let state_id = StateID(0);",
                "    let hash = map.hash(&key);",
                "    map.set(key.clone(), hash, state_id);",
                "    assert_eq!(map.map.len(), 1);",
                "    assert_eq!(map.map[hash].val, state_id);",
                "    assert_eq!(map.map[hash].key, key);",
                "    assert_eq!(map.map[hash].version, map.version);",
                "    assert!(map.get(&key, hash).is_some());",
                "    assert_eq!(map.get(&key, hash), Some(state_id));",
                "    assert_eq!(map.get(&Utf8SuffixKey { from: StateID(1), start: 0, end: 255 }, hash), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Utf8SuffixMap::new(1);",
                "    let key = Utf8SuffixKey {",
                "        from: StateID(usize::MAX),",
                "        start: 0,",
                "        end: 0,",
                "    };",
                "    let state_id = StateID(usize::MAX);",
                "    let hash = map.hash(&key);",
                "    map.set(key.clone(), hash, state_id);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.map.len(), 1);",
                "    assert_eq!(map.map[hash].val, state_id);",
                "    assert_eq!(map.map[hash].key, key);",
                "    assert_eq!(map.map[hash].version, map.version);",
                "    assert!(map.get(&key, hash).is_some());"
              ],
              "code": [
                "{",
                "    let mut map = Utf8SuffixMap::new(1);",
                "    let key = Utf8SuffixKey {",
                "        from: StateID(usize::MAX),",
                "        start: 0,",
                "        end: 0,",
                "    };",
                "    let state_id = StateID(usize::MAX);",
                "    let hash = map.hash(&key);",
                "    map.set(key.clone(), hash, state_id);",
                "    assert_eq!(map.map.len(), 1);",
                "    assert_eq!(map.map[hash].val, state_id);",
                "    assert_eq!(map.map[hash].key, key);",
                "    assert_eq!(map.map[hash].version, map.version);",
                "    assert!(map.get(&key, hash).is_some());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Utf8SuffixMap::new(1);",
                "    let key = Utf8SuffixKey {",
                "        from: StateID(0),",
                "        start: 0,",
                "        end: 255,",
                "    };",
                "    let state_id = StateID(0);",
                "    let hash = 1; // Invalid hash for capacity 1",
                "    map.set(key.clone(), hash, state_id);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.map.len(), 1);",
                "    assert!(map.map[0].version != 0);",
                "    assert_eq!(map.map[0].key.from, StateID(0));",
                "    assert_eq!(map.map[0].key.start, 0);",
                "    assert_eq!(map.map[0].key.end, 255);",
                "    assert_eq!(map.map[0].val, StateID(0));",
                "    assert_eq!(map.version, 0);",
                "    assert!(map.get(&key, hash).is_none());"
              ],
              "code": [
                "{",
                "    let mut map = Utf8SuffixMap::new(1);",
                "    let key = Utf8SuffixKey {",
                "        from: StateID(0),",
                "        start: 0,",
                "        end: 255,",
                "    };",
                "    let state_id = StateID(0);",
                "    let hash = 1; // Invalid hash for capacity 1",
                "    map.set(key.clone(), hash, state_id);",
                "    assert_eq!(map.map.len(), 1);",
                "    assert!(map.map[0].version != 0);",
                "    assert_eq!(map.map[0].key.from, StateID(0));",
                "    assert_eq!(map.map[0].key.start, 0);",
                "    assert_eq!(map.map[0].key.end, 255);",
                "    assert_eq!(map.map[0].val, StateID(0));",
                "    assert_eq!(map.version, 0);",
                "    assert!(map.get(&key, hash).is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Utf8SuffixMap::new(1);",
                "    let key = Utf8SuffixKey {",
                "        from: StateID(0),",
                "        start: 1,",
                "        end: 2,",
                "    };",
                "    let state_id = StateID(1);",
                "    let hash = map.hash(&key);",
                "    map.set(key.clone(), hash, state_id);",
                "    map.version = 1; // Change the version before setting",
                "    let new_key = Utf8SuffixKey {",
                "        from: StateID(0),",
                "        start: 1,",
                "        end: 3,",
                "    };",
                "    let new_state_id = StateID(2);",
                "    map.set(new_key.clone(), hash, new_state_id);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.version, 1);",
                "    assert_eq!(map.map[hash].key, key);",
                "    assert_eq!(map.map[hash].val, state_id);",
                "    assert_eq!(map.map[hash].version, 1);",
                "    assert_eq!(map.map[hash].key.start, 1);",
                "    assert_eq!(map.map[hash].key.end, 2);",
                "    assert!(map.get(&new_key, hash).is_none());",
                "    map.version = 0;",
                "    assert_eq!(map.get(&key, hash).unwrap(), state_id);",
                "    assert!(map.get(&new_key, hash).is_none());"
              ],
              "code": [
                "{",
                "    let mut map = Utf8SuffixMap::new(1);",
                "    let key = Utf8SuffixKey {",
                "        from: StateID(0),",
                "        start: 1,",
                "        end: 2,",
                "    };",
                "    let state_id = StateID(1);",
                "    let hash = map.hash(&key);",
                "    map.set(key.clone(), hash, state_id);",
                "    map.version = 1; // Change the version before setting",
                "    let new_key = Utf8SuffixKey {",
                "        from: StateID(0),",
                "        start: 1,",
                "        end: 3,",
                "    };",
                "    let new_state_id = StateID(2);",
                "    map.set(new_key.clone(), hash, new_state_id);",
                "    assert_eq!(map.version, 1);",
                "    assert_eq!(map.map[hash].key, key);",
                "    assert_eq!(map.map[hash].val, state_id);",
                "    assert_eq!(map.map[hash].version, 1);",
                "    assert_eq!(map.map[hash].key.start, 1);",
                "    assert_eq!(map.map[hash].key.end, 2);",
                "    assert!(map.get(&new_key, hash).is_none());",
                "    map.version = 0;",
                "    assert_eq!(map.get(&key, hash).unwrap(), state_id);",
                "    assert!(map.get(&new_key, hash).is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}