{
  "name": "regex_automata::dfa::sparse::{impl#8}::memory_usage",
  "mod_info": {
    "name": "dfa::sparse",
    "loc": "regex-automata/src/dfa/mod.rs:343:1:343:16"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/sparse.rs:1710:5:1712:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions or ranges: sparse with sizes ranging from 0 to 256 (inclusive), classes with all byte values set to represent valid ByteClasses, state_len in range [1, 1000], pattern_len in range [0, 100].\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let sparse: Vec<u8> = vec![];",
                "    let classes = ByteClasses([0; 256]);",
                "    let transitions = Transitions {",
                "        sparse,",
                "        classes,",
                "        state_len: 1,",
                "        pattern_len: 0,",
                "    };",
                "    transitions.memory_usage();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(transitions.memory_usage(), 0);",
                "    ",
                "    let sparse: Vec<u8> = vec![1, 2, 3];",
                "    let classes = ByteClasses([0; 256]);",
                "    let transitions = Transitions {",
                "    sparse,",
                "    classes,",
                "    state_len: 1,",
                "    pattern_len: 0,",
                "    };",
                "    assert_eq!(transitions.memory_usage(), 3);",
                "    ",
                "    let sparse: Vec<u8> = vec![0; 100];",
                "    let classes = ByteClasses([0; 256]);",
                "    let transitions = Transitions {",
                "    sparse,",
                "    classes,",
                "    state_len: 1,",
                "    pattern_len: 0,",
                "    };",
                "    assert_eq!(transitions.memory_usage(), 100);",
                "    ",
                "    let sparse: Vec<u8> = vec![4, 5, 6, 7, 8];",
                "    let classes = ByteClasses([0; 256]);",
                "    let transitions = Transitions {",
                "    sparse,",
                "    classes,",
                "    state_len: 2,",
                "    pattern_len: 1,",
                "    };",
                "    assert_eq!(transitions.memory_usage(), 5);"
              ],
              "code": [
                "{",
                "    let sparse: Vec<u8> = vec![];",
                "    let classes = ByteClasses([0; 256]);",
                "    let transitions = Transitions {",
                "        sparse,",
                "        classes,",
                "        state_len: 1,",
                "        pattern_len: 0,",
                "    };",
                "    transitions.memory_usage();",
                "    assert_eq!(transitions.memory_usage(), 0);",
                "    ",
                "    let sparse: Vec<u8> = vec![1, 2, 3];",
                "    let classes = ByteClasses([0; 256]);",
                "    let transitions = Transitions {",
                "    sparse,",
                "    classes,",
                "    state_len: 1,",
                "    pattern_len: 0,",
                "    };",
                "    assert_eq!(transitions.memory_usage(), 3);",
                "    ",
                "    let sparse: Vec<u8> = vec![0; 100];",
                "    let classes = ByteClasses([0; 256]);",
                "    let transitions = Transitions {",
                "    sparse,",
                "    classes,",
                "    state_len: 1,",
                "    pattern_len: 0,",
                "    };",
                "    assert_eq!(transitions.memory_usage(), 100);",
                "    ",
                "    let sparse: Vec<u8> = vec![4, 5, 6, 7, 8];",
                "    let classes = ByteClasses([0; 256]);",
                "    let transitions = Transitions {",
                "    sparse,",
                "    classes,",
                "    state_len: 2,",
                "    pattern_len: 1,",
                "    };",
                "    assert_eq!(transitions.memory_usage(), 5);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let sparse: Vec<u8> = vec![0];",
                "    let classes = ByteClasses([0; 256]);",
                "    let transitions = Transitions {",
                "        sparse,",
                "        classes,",
                "        state_len: 1,",
                "        pattern_len: 0,",
                "    };",
                "    transitions.memory_usage();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(transitions.memory_usage(), 1);"
              ],
              "code": [
                "{",
                "    let sparse: Vec<u8> = vec![0];",
                "    let classes = ByteClasses([0; 256]);",
                "    let transitions = Transitions {",
                "        sparse,",
                "        classes,",
                "        state_len: 1,",
                "        pattern_len: 0,",
                "    };",
                "    transitions.memory_usage();",
                "    assert_eq!(transitions.memory_usage(), 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let sparse: Vec<u8> = vec![0, 1];",
                "    let classes = ByteClasses([0; 256]);",
                "    let transitions = Transitions {",
                "        sparse,",
                "        classes,",
                "        state_len: 1,",
                "        pattern_len: 0,",
                "    };",
                "    transitions.memory_usage();",
                "}"
              ],
              "oracle": [
                "    let sparse: Vec<u8> = vec![0, 1];",
                "    let classes = ByteClasses([0; 256]);",
                "    let transitions = Transitions { sparse, classes, state_len: 1, pattern_len: 0 };",
                "    assert_eq!(transitions.memory_usage(), 2);"
              ],
              "code": [
                "{",
                "    let sparse: Vec<u8> = vec![0, 1];",
                "    let classes = ByteClasses([0; 256]);",
                "    let transitions = Transitions {",
                "        sparse,",
                "        classes,",
                "        state_len: 1,",
                "        pattern_len: 0,",
                "    };",
                "    transitions.memory_usage();",
                "    let sparse: Vec<u8> = vec![0, 1];",
                "    let classes = ByteClasses([0; 256]);",
                "    let transitions = Transitions { sparse, classes, state_len: 1, pattern_len: 0 };",
                "    assert_eq!(transitions.memory_usage(), 2);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let sparse: Vec<u8> = (0..256).map(|x| x as u8).collect();",
                "    let classes = ByteClasses([0; 256]);",
                "    let transitions = Transitions {",
                "        sparse,",
                "        classes,",
                "        state_len: 1,",
                "        pattern_len: 0,",
                "    };",
                "    transitions.memory_usage();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(transitions.memory_usage(), 256);"
              ],
              "code": [
                "{",
                "    let sparse: Vec<u8> = (0..256).map(|x| x as u8).collect();",
                "    let classes = ByteClasses([0; 256]);",
                "    let transitions = Transitions {",
                "        sparse,",
                "        classes,",
                "        state_len: 1,",
                "        pattern_len: 0,",
                "    };",
                "    transitions.memory_usage();",
                "    assert_eq!(transitions.memory_usage(), 256);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let sparse: Vec<u8> = (0..1000).map(|x| (x % 256) as u8).collect();",
                "    let classes = ByteClasses([0; 256]);",
                "    let transitions = Transitions {",
                "        sparse,",
                "        classes,",
                "        state_len: 1000,",
                "        pattern_len: 10,",
                "    };",
                "    transitions.memory_usage();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(transitions.memory_usage(), 1000);"
              ],
              "code": [
                "{",
                "    let sparse: Vec<u8> = (0..1000).map(|x| (x % 256) as u8).collect();",
                "    let classes = ByteClasses([0; 256]);",
                "    let transitions = Transitions {",
                "        sparse,",
                "        classes,",
                "        state_len: 1000,",
                "        pattern_len: 10,",
                "    };",
                "    transitions.memory_usage();",
                "    assert_eq!(transitions.memory_usage(), 1000);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}