{
  "name": "regex_syntax::hir::literal::{impl#7}::is_poisonous",
  "mod_info": {
    "name": "hir::literal",
    "loc": "regex-syntax/src/hir/mod.rs:42:1:42:17"
  },
  "visible": false,
  "loc": "regex-syntax/src/hir/literal.rs:2151:5:2153:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.is_empty() at line 2152 is true\n",
        "expected return value/type: self.is_empty() || (self.len() == 1 && rank(self.as_bytes()[0]) >= 250)\n"
      ],
      "input_infer": "self.bytes = Vec::new() or self.bytes = Vec<u8>::with_capacity(1) and self.bytes[0] is in the range [250, 255]\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let literal = Literal::exact(vec![]);",
                "    let _ = literal.is_poisonous();",
                "}"
              ],
              "oracle": [
                "    assert!(literal.is_empty());",
                "    assert_eq!(literal.is_poisonous(), true);",
                "    assert_eq!(literal.len(), 0);",
                "    assert_eq!(literal.as_bytes().len(), 0);",
                "    assert_eq!(literal.is_exact(), true);"
              ],
              "code": [
                "{",
                "    let literal = Literal::exact(vec![]);",
                "    let _ = literal.is_poisonous();",
                "    assert!(literal.is_empty());",
                "    assert_eq!(literal.is_poisonous(), true);",
                "    assert_eq!(literal.len(), 0);",
                "    assert_eq!(literal.as_bytes().len(), 0);",
                "    assert_eq!(literal.is_exact(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let literal = Literal::exact(vec![250]);",
                "    let _ = literal.is_poisonous();",
                "}"
              ],
              "oracle": [
                "    let literal_empty = Literal::exact(vec![]);",
                "    assert!(literal_empty.is_poisonous());",
                "    ",
                "    let literal_single_high_rank = Literal::exact(vec![250]);",
                "    assert!(literal_single_high_rank.is_poisonous());",
                "    ",
                "    let literal_single_low_rank = Literal::exact(vec![249]);",
                "    assert!(!literal_single_low_rank.is_poisonous());"
              ],
              "code": [
                "{",
                "    let literal = Literal::exact(vec![250]);",
                "    let _ = literal.is_poisonous();",
                "    let literal_empty = Literal::exact(vec![]);",
                "    assert!(literal_empty.is_poisonous());",
                "    ",
                "    let literal_single_high_rank = Literal::exact(vec![250]);",
                "    assert!(literal_single_high_rank.is_poisonous());",
                "    ",
                "    let literal_single_low_rank = Literal::exact(vec![249]);",
                "    assert!(!literal_single_low_rank.is_poisonous());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let literal = Literal::exact(vec![255]);",
                "    let _ = literal.is_poisonous();",
                "}"
              ],
              "oracle": [
                "    let literal = Literal::exact(vec![]); assert!(literal.is_poisonous());",
                "    let literal = Literal::exact(vec![0]); assert!(literal.is_poisonous());",
                "    let literal = Literal::exact(vec![250]); assert!(literal.is_poisonous());",
                "    let literal = Literal::exact(vec![251]); assert!(literal.is_poisonous());",
                "    let literal = Literal::exact(vec![252]); assert!(literal.is_poisonous());",
                "    let literal = Literal::exact(vec![253]); assert!(literal.is_poisonous());",
                "    let literal = Literal::exact(vec![254]); assert!(literal.is_poisonous());",
                "    let literal = Literal::exact(vec![255]); assert!(literal.is_poisonous());",
                "    let literal = Literal::exact(vec![100]); assert!(!literal.is_poisonous());",
                "    let literal = Literal::exact(vec![200, 100]); assert!(!literal.is_poisonous());",
                "    let literal = Literal::exact(vec![0, 250]); assert!(literal.is_poisonous());"
              ],
              "code": [
                "{",
                "    let literal = Literal::exact(vec![255]);",
                "    let _ = literal.is_poisonous();",
                "    let literal = Literal::exact(vec![]); assert!(literal.is_poisonous());",
                "    let literal = Literal::exact(vec![0]); assert!(literal.is_poisonous());",
                "    let literal = Literal::exact(vec![250]); assert!(literal.is_poisonous());",
                "    let literal = Literal::exact(vec![251]); assert!(literal.is_poisonous());",
                "    let literal = Literal::exact(vec![252]); assert!(literal.is_poisonous());",
                "    let literal = Literal::exact(vec![253]); assert!(literal.is_poisonous());",
                "    let literal = Literal::exact(vec![254]); assert!(literal.is_poisonous());",
                "    let literal = Literal::exact(vec![255]); assert!(literal.is_poisonous());",
                "    let literal = Literal::exact(vec![100]); assert!(!literal.is_poisonous());",
                "    let literal = Literal::exact(vec![200, 100]); assert!(!literal.is_poisonous());",
                "    let literal = Literal::exact(vec![0, 250]); assert!(literal.is_poisonous());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.is_empty() at line 2152 is false\n",
        "precondition: self.len() == 1 at line 2152 is false\n",
        "expected return value/type: rank(self.as_bytes()[0]) >= 250\n"
      ],
      "input_infer": "self.bytes must contain at least two bytes with the first byte in the range of 0 to 255, and rank value at least 250 for the first byte.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut literal = Literal::exact(vec![255, 1]);",
                "    let result = literal.is_poisonous();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    assert_eq!(literal.len(), 2);",
                "    assert!(!literal.is_empty());",
                "    assert!(!literal.is_exact());",
                "    assert!(rank(literal.as_bytes()[0]) >= 250);"
              ],
              "code": [
                "{",
                "    let mut literal = Literal::exact(vec![255, 1]);",
                "    let result = literal.is_poisonous();",
                "    assert_eq!(result, true);",
                "    assert_eq!(literal.len(), 2);",
                "    assert!(!literal.is_empty());",
                "    assert!(!literal.is_exact());",
                "    assert!(rank(literal.as_bytes()[0]) >= 250);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut literal = Literal::exact(vec![250, 2]);",
                "    let result = literal.is_poisonous();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);",
                "    assert!(literal.len() > 1);",
                "    assert!(literal.is_empty() == false);",
                "    assert!(rank(literal.as_bytes()[0]) < 250);"
              ],
              "code": [
                "{",
                "    let mut literal = Literal::exact(vec![250, 2]);",
                "    let result = literal.is_poisonous();",
                "    assert_eq!(result, false);",
                "    assert!(literal.len() > 1);",
                "    assert!(literal.is_empty() == false);",
                "    assert!(rank(literal.as_bytes()[0]) < 250);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut literal = Literal::exact(vec![251, 3]);",
                "    let result = literal.is_poisonous();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);",
                "    assert_eq!(literal.len(), 2);",
                "    assert!(!literal.is_empty());",
                "    assert!(literal.as_bytes()[0] == 251 || literal.as_bytes()[1] == 3);",
                "    assert!(rank(literal.as_bytes()[0]) < 250);",
                "    assert!(rank(literal.as_bytes()[1]) < 250);"
              ],
              "code": [
                "{",
                "    let mut literal = Literal::exact(vec![251, 3]);",
                "    let result = literal.is_poisonous();",
                "    assert_eq!(result, false);",
                "    assert_eq!(literal.len(), 2);",
                "    assert!(!literal.is_empty());",
                "    assert!(literal.as_bytes()[0] == 251 || literal.as_bytes()[1] == 3);",
                "    assert!(rank(literal.as_bytes()[0]) < 250);",
                "    assert!(rank(literal.as_bytes()[1]) < 250);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut literal = Literal::exact(vec![200, 200]);",
                "    let result = literal.is_poisonous();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);",
                "    literal.extend(&Literal::exact(vec![250]));",
                "    assert_eq!(result, false);",
                "    literal.keep_first_bytes(1);",
                "    assert_eq!(rank(literal.as_bytes()[0]) >= 250, true);",
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let mut literal = Literal::exact(vec![200, 200]);",
                "    let result = literal.is_poisonous();",
                "    assert_eq!(result, false);",
                "    literal.extend(&Literal::exact(vec![250]));",
                "    assert_eq!(result, false);",
                "    literal.keep_first_bytes(1);",
                "    assert_eq!(rank(literal.as_bytes()[0]) >= 250, true);",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut literal = Literal::exact(vec![255, 255]);",
                "    let result = literal.is_poisonous();",
                "}"
              ],
              "oracle": [
                "    let literal = Literal::exact(vec![255, 255]);",
                "    assert!(!literal.is_empty());",
                "    assert!(literal.len() > 1);",
                "    let first_byte = literal.as_bytes()[0];",
                "    assert!(rank(first_byte) >= 250);",
                "    assert_eq!(literal.is_poisonous(), true);"
              ],
              "code": [
                "{",
                "    let mut literal = Literal::exact(vec![255, 255]);",
                "    let result = literal.is_poisonous();",
                "    let literal = Literal::exact(vec![255, 255]);",
                "    assert!(!literal.is_empty());",
                "    assert!(literal.len() > 1);",
                "    let first_byte = literal.as_bytes()[0];",
                "    assert!(rank(first_byte) >= 250);",
                "    assert_eq!(literal.is_poisonous(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: self.is_empty() at line 2152 is false\n",
        "precondition: self.len() == 1 at line 2152 is true\n",
        "expected return value/type: (self.len() == 1 && rank(self.as_bytes()[0]) >= 250)\n"
      ],
      "input_infer": "self.len() == 1, rank(self.as_bytes()[0]) >= 250, self.is_empty() == false\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let literal = Literal::exact(vec![250]);",
                "    let _ = literal.is_poisonous();",
                "}"
              ],
              "oracle": [
                "    let literal = Literal::exact(vec![250]); assert!(literal.is_poisonous());",
                "    let literal = Literal::exact(vec![249]); assert!(!literal.is_poisonous());",
                "    let literal = Literal::inexact(vec![250]); assert!(literal.is_poisonous());",
                "    let literal = Literal::inexact(vec![200]); assert!(!literal.is_poisonous());",
                "    let literal = Literal::exact(vec![]); assert!(!literal.is_poisonous());",
                "    let literal = Literal::exact(vec![255]); assert!(literal.is_poisonous());",
                "    let literal = Literal::exact(vec![245]); assert!(!literal.is_poisonous());"
              ],
              "code": [
                "{",
                "    let literal = Literal::exact(vec![250]);",
                "    let _ = literal.is_poisonous();",
                "    let literal = Literal::exact(vec![250]); assert!(literal.is_poisonous());",
                "    let literal = Literal::exact(vec![249]); assert!(!literal.is_poisonous());",
                "    let literal = Literal::inexact(vec![250]); assert!(literal.is_poisonous());",
                "    let literal = Literal::inexact(vec![200]); assert!(!literal.is_poisonous());",
                "    let literal = Literal::exact(vec![]); assert!(!literal.is_poisonous());",
                "    let literal = Literal::exact(vec![255]); assert!(literal.is_poisonous());",
                "    let literal = Literal::exact(vec![245]); assert!(!literal.is_poisonous());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let literal = Literal::exact(vec![255]);",
                "    let _ = literal.is_poisonous();",
                "}"
              ],
              "oracle": [
                "    assert!(!literal.is_empty());",
                "    assert_eq!(literal.len(), 1);",
                "    assert_eq!(rank(literal.as_bytes()[0]), 255);",
                "    assert!(literal.is_poisonous());"
              ],
              "code": [
                "{",
                "    let literal = Literal::exact(vec![255]);",
                "    let _ = literal.is_poisonous();",
                "    assert!(!literal.is_empty());",
                "    assert_eq!(literal.len(), 1);",
                "    assert_eq!(rank(literal.as_bytes()[0]), 255);",
                "    assert!(literal.is_poisonous());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let literal = Literal::exact(vec![249]);",
                "    let _ = literal.is_poisonous();",
                "}"
              ],
              "oracle": [
                "    assert!(!literal.is_empty());",
                "    assert_eq!(literal.len(), 1);",
                "    assert_eq!(rank(literal.as_bytes()[0]), 249);",
                "    assert!(!literal.is_poisonous());",
                "    literal.extend(&Literal::exact(vec![250]));",
                "    assert!(literal.is_poisonous());",
                "    literal.keep_first_bytes(1);",
                "    assert!(literal.is_poisonous());"
              ],
              "code": [
                "{",
                "    let literal = Literal::exact(vec![249]);",
                "    let _ = literal.is_poisonous();",
                "    assert!(!literal.is_empty());",
                "    assert_eq!(literal.len(), 1);",
                "    assert_eq!(rank(literal.as_bytes()[0]), 249);",
                "    assert!(!literal.is_poisonous());",
                "    literal.extend(&Literal::exact(vec![250]));",
                "    assert!(literal.is_poisonous());",
                "    literal.keep_first_bytes(1);",
                "    assert!(literal.is_poisonous());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}