{
  "name": "regex_automata::util::wire::write_version",
  "mod_info": {
    "name": "util::wire",
    "loc": "regex-automata/src/util/mod.rs:46:1:46:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/wire.rs:559:1:569:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: dst.len() < nwrite at line 564 is true\n",
        "expected return value/type: Err(SerializeError::buffer_too_small(\"version number\"))\n"
      ],
      "input_infer": "dst: &[u8] with length less than 4\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let version: u32 = 1;",
                "    let mut dst: [u8; 2] = [0; 2]; // Length is less than 4",
                "    let result = write_version::<NE>(version, &mut dst);",
                "}"
              ],
              "oracle": [
                "    let version: u32 = 1;",
                "    let mut dst: [u8; 2] = [0; 2];",
                "    let result = write_version::<NE>(version, &mut dst);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), SerializeError::buffer_too_small(\"version number\"));"
              ],
              "code": [
                "{",
                "    let version: u32 = 1;",
                "    let mut dst: [u8; 2] = [0; 2]; // Length is less than 4",
                "    let result = write_version::<NE>(version, &mut dst);",
                "    let version: u32 = 1;",
                "    let mut dst: [u8; 2] = [0; 2];",
                "    let result = write_version::<NE>(version, &mut dst);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), SerializeError::buffer_too_small(\"version number\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let version: u32 = 2;",
                "    let mut dst: [u8; 0] = []; // Length is less than 4",
                "    let result = write_version::<NE>(version, &mut dst);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().what, \"version number\");"
              ],
              "code": [
                "{",
                "    let version: u32 = 2;",
                "    let mut dst: [u8; 0] = []; // Length is less than 4",
                "    let result = write_version::<NE>(version, &mut dst);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().what, \"version number\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let version: u32 = 3;",
                "    let mut dst: [u8; 3] = [0; 3]; // Length is less than 4",
                "    let result = write_version::<NE>(version, &mut dst);",
                "}"
              ],
              "oracle": [
                "    let version: u32 = 3;",
                "    let mut dst: [u8; 3] = [0; 3];",
                "    let result = write_version::<NE>(version, &mut dst);",
                "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"version number\")));"
              ],
              "code": [
                "{",
                "    let version: u32 = 3;",
                "    let mut dst: [u8; 3] = [0; 3]; // Length is less than 4",
                "    let result = write_version::<NE>(version, &mut dst);",
                "    let version: u32 = 3;",
                "    let mut dst: [u8; 3] = [0; 3];",
                "    let result = write_version::<NE>(version, &mut dst);",
                "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"version number\")));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: dst.len() < nwrite at line 564 is false, with bound dst.len() == nwrite\n",
        "expected return value/type: Ok(nwrite)\n"
      ],
      "input_infer": "dst.len() = 4 (exactly equal to size_of<u32>()), valid version number u32 = [0, 2^32-1]\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct LittleEndian;",
                "    impl Endian for LittleEndian {",
                "        fn write_u32(value: u32, dst: &mut [u8]) {",
                "            dst.copy_from_slice(&value.to_le_bytes());",
                "        }",
                "    }",
                "",
                "    let version: u32 = 0; // test with the minimum valid version number",
                "    let mut buffer = [0u8; 4]; // buffer size equals size_of::<u32>()",
                "    let result = write_version::<LittleEndian>(version, &mut buffer);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(4));",
                "    assert_eq!(buffer, 0u32.to_le_bytes());",
                "    assert!(buffer.len() == 4);"
              ],
              "code": [
                "{",
                "    struct LittleEndian;",
                "    impl Endian for LittleEndian {",
                "        fn write_u32(value: u32, dst: &mut [u8]) {",
                "            dst.copy_from_slice(&value.to_le_bytes());",
                "        }",
                "    }",
                "",
                "    let version: u32 = 0; // test with the minimum valid version number",
                "    let mut buffer = [0u8; 4]; // buffer size equals size_of::<u32>()",
                "    let result = write_version::<LittleEndian>(version, &mut buffer);",
                "    assert_eq!(result, Ok(4));",
                "    assert_eq!(buffer, 0u32.to_le_bytes());",
                "    assert!(buffer.len() == 4);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct LittleEndian;",
                "    impl Endian for LittleEndian {",
                "        fn write_u32(value: u32, dst: &mut [u8]) {",
                "            dst.copy_from_slice(&value.to_le_bytes());",
                "        }",
                "    }",
                "",
                "    let version: u32 = u32::MAX; // test with the maximum valid version number",
                "    let mut buffer = [0u8; 4]; // buffer size equals size_of::<u32>()",
                "    let result = write_version::<LittleEndian>(version, &mut buffer);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(4));",
                "    assert_eq!(buffer, version.to_le_bytes());"
              ],
              "code": [
                "{",
                "    struct LittleEndian;",
                "    impl Endian for LittleEndian {",
                "        fn write_u32(value: u32, dst: &mut [u8]) {",
                "            dst.copy_from_slice(&value.to_le_bytes());",
                "        }",
                "    }",
                "",
                "    let version: u32 = u32::MAX; // test with the maximum valid version number",
                "    let mut buffer = [0u8; 4]; // buffer size equals size_of::<u32>()",
                "    let result = write_version::<LittleEndian>(version, &mut buffer);",
                "    assert_eq!(result, Ok(4));",
                "    assert_eq!(buffer, version.to_le_bytes());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct LittleEndian;",
                "    impl Endian for LittleEndian {",
                "        fn write_u32(value: u32, dst: &mut [u8]) {",
                "            dst.copy_from_slice(&value.to_le_bytes());",
                "        }",
                "    }",
                "",
                "    let version: u32 = 1_000_000; // test with a mid-range version number",
                "    let mut buffer = [0u8; 4]; // buffer size equals size_of::<u32>()",
                "    let result = write_version::<LittleEndian>(version, &mut buffer);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(4));",
                "    assert_eq!(buffer, 1_000_000u32.to_le_bytes());"
              ],
              "code": [
                "{",
                "    struct LittleEndian;",
                "    impl Endian for LittleEndian {",
                "        fn write_u32(value: u32, dst: &mut [u8]) {",
                "            dst.copy_from_slice(&value.to_le_bytes());",
                "        }",
                "    }",
                "",
                "    let version: u32 = 1_000_000; // test with a mid-range version number",
                "    let mut buffer = [0u8; 4]; // buffer size equals size_of::<u32>()",
                "    let result = write_version::<LittleEndian>(version, &mut buffer);",
                "    assert_eq!(result, Ok(4));",
                "    assert_eq!(buffer, 1_000_000u32.to_le_bytes());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}