{
  "name": "regex_automata::util::primitives::{impl#10}::try_from",
  "mod_info": {
    "name": "util::primitives",
    "loc": "regex-automata/src/util/mod.rs:42:1:42:20"
  },
  "visible": true,
  "loc": "regex-automata/src/util/primitives.rs:337:5:342:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: index > SmallIndex::MAX.as_u64() at line 338 is true\n",
        "expected return value/type: Err(SmallIndexError { attempted: index })\n"
      ],
      "input_infer": "index: u64 values in the range (SmallIndex::MAX.as_u64(), u64::MAX]\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let index: u64 = SmallIndex::MAX.as_u64() + 1;",
                "    let result = SmallIndex::try_from(index);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(SmallIndexError { attempted: index }));"
              ],
              "code": [
                "{",
                "    let index: u64 = SmallIndex::MAX.as_u64() + 1;",
                "    let result = SmallIndex::try_from(index);",
                "    assert_eq!(result, Err(SmallIndexError { attempted: index }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let index: u64 = SmallIndex::MAX.as_u64() + 1000;",
                "    let result = SmallIndex::try_from(index);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    if let Err(e) = result {",
                "    assert_eq!(e.attempted, index);",
                "    }"
              ],
              "code": [
                "{",
                "    let index: u64 = SmallIndex::MAX.as_u64() + 1000;",
                "    let result = SmallIndex::try_from(index);",
                "    assert!(result.is_err());",
                "    if let Err(e) = result {",
                "    assert_eq!(e.attempted, index);",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let index: u64 = u64::MAX;",
                "    let result = SmallIndex::try_from(index);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap().attempted, index);"
              ],
              "code": [
                "{",
                "    let index: u64 = u64::MAX;",
                "    let result = SmallIndex::try_from(index);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap().attempted, index);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: index > SmallIndex::MAX.as_u64() at line 338 is false, with bound index == SmallIndex::MAX.as_u64()\n",
        "expected return value/type: Ok(SmallIndex::new_unchecked(index.as_usize()))\n"
      ],
      "input_infer": "index: 0 to SmallIndex::MAX.as_u64() inclusive\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = SmallIndex::try_from(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(SmallIndex::new_unchecked(0)));",
                "    let max_index = SmallIndex::MAX.as_u64();",
                "    let result = SmallIndex::try_from(max_index);",
                "    assert_eq!(result, Ok(SmallIndex::new_unchecked(max_index as usize)));"
              ],
              "code": [
                "{",
                "    let result = SmallIndex::try_from(0);",
                "    assert_eq!(result, Ok(SmallIndex::new_unchecked(0)));",
                "    let max_index = SmallIndex::MAX.as_u64();",
                "    let result = SmallIndex::try_from(max_index);",
                "    assert_eq!(result, Ok(SmallIndex::new_unchecked(max_index as usize)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = SmallIndex::try_from(SmallIndex::MAX.as_u64());",
                "}"
              ],
              "oracle": [
                "    let expected_result = Ok(SmallIndex::new_unchecked(SmallIndex::MAX.as_usize()));",
                "    assert_eq!(result, expected_result);"
              ],
              "code": [
                "{",
                "    let result = SmallIndex::try_from(SmallIndex::MAX.as_u64());",
                "    let expected_result = Ok(SmallIndex::new_unchecked(SmallIndex::MAX.as_usize()));",
                "    assert_eq!(result, expected_result);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}