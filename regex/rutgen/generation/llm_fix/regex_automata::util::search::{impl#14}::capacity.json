{
  "name": "regex_automata::util::search::{impl#14}::capacity",
  "mod_info": {
    "name": "util::search",
    "loc": "regex-automata/src/util/mod.rs:53:1:53:23"
  },
  "visible": true,
  "loc": "regex-automata/src/util/search.rs:1313:5:1315:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions or ranges: capacity values must be non-negative integers (0 to PatternID::LIMIT) to cover edge cases of empty, partially filled, and full PatternSet scenarios, ensuring all possible states are tested.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern_set = PatternSet::new(0);",
                "    let capacity = pattern_set.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(capacity, 0);",
                "    ",
                "    let pattern_set = PatternSet::new(10);",
                "    let capacity = pattern_set.capacity();",
                "    assert_eq!(capacity, 10);",
                "    ",
                "    let pattern_set = PatternSet::new(PatternID::LIMIT);",
                "    let capacity = pattern_set.capacity();",
                "    assert_eq!(capacity, PatternID::LIMIT);",
                "    ",
                "    let pattern_set = PatternSet::new(PatternID::LIMIT + 1);",
                "    let capacity = pattern_set.capacity();",
                "    assert_eq!(capacity, PatternID::LIMIT + 1);",
                "    ",
                "    let pattern_set = PatternSet::new(1);",
                "    let capacity = pattern_set.capacity();",
                "    assert!(capacity <= PatternID::LIMIT);"
              ],
              "code": [
                "{",
                "    let pattern_set = PatternSet::new(0);",
                "    let capacity = pattern_set.capacity();",
                "    assert_eq!(capacity, 0);",
                "    ",
                "    let pattern_set = PatternSet::new(10);",
                "    let capacity = pattern_set.capacity();",
                "    assert_eq!(capacity, 10);",
                "    ",
                "    let pattern_set = PatternSet::new(PatternID::LIMIT);",
                "    let capacity = pattern_set.capacity();",
                "    assert_eq!(capacity, PatternID::LIMIT);",
                "    ",
                "    let pattern_set = PatternSet::new(PatternID::LIMIT + 1);",
                "    let capacity = pattern_set.capacity();",
                "    assert_eq!(capacity, PatternID::LIMIT + 1);",
                "    ",
                "    let pattern_set = PatternSet::new(1);",
                "    let capacity = pattern_set.capacity();",
                "    assert!(capacity <= PatternID::LIMIT);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern_set = PatternSet::new(5);",
                "    let capacity = pattern_set.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(capacity, 5);"
              ],
              "code": [
                "{",
                "    let pattern_set = PatternSet::new(5);",
                "    let capacity = pattern_set.capacity();",
                "    assert_eq!(capacity, 5);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern_set = PatternSet::new(PatternID::LIMIT);",
                "    let capacity = pattern_set.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(capacity, PatternID::LIMIT);",
                "    assert!(capacity > 0);",
                "    assert!(capacity <= PatternID::LIMIT);",
                "    assert_eq!(pattern_set.capacity(), pattern_set.which.len());",
                "    assert!(pattern_set.capacity() <= PatternID::LIMIT);"
              ],
              "code": [
                "{",
                "    let pattern_set = PatternSet::new(PatternID::LIMIT);",
                "    let capacity = pattern_set.capacity();",
                "    assert_eq!(capacity, PatternID::LIMIT);",
                "    assert!(capacity > 0);",
                "    assert!(capacity <= PatternID::LIMIT);",
                "    assert_eq!(pattern_set.capacity(), pattern_set.which.len());",
                "    assert!(pattern_set.capacity() <= PatternID::LIMIT);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern_set = PatternSet::new(PatternID::LIMIT + 1);",
                "    let capacity = pattern_set.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(capacity, PatternID::LIMIT + 1);",
                "    assert!(capacity <= PatternID::LIMIT);",
                "    assert!(capacity >= 0);",
                "    assert_eq!(pattern_set.which.len(), capacity);"
              ],
              "code": [
                "{",
                "    let pattern_set = PatternSet::new(PatternID::LIMIT + 1);",
                "    let capacity = pattern_set.capacity();",
                "    assert_eq!(capacity, PatternID::LIMIT + 1);",
                "    assert!(capacity <= PatternID::LIMIT);",
                "    assert!(capacity >= 0);",
                "    assert_eq!(pattern_set.which.len(), capacity);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}