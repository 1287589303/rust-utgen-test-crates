{
  "name": "regex_automata::util::interpolate::is_valid_cap_letter",
  "mod_info": {
    "name": "util::interpolate",
    "loc": "regex-automata/src/util/mod.rs:35:1:35:21"
  },
  "visible": false,
  "loc": "regex-automata/src/util/interpolate.rs:323:1:328:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: b matches b'0'..=b'9' at line 325 is true\n",
        "precondition: b matches b'0'..=b'9' at line 325 is true\n",
        "precondition: b matches b'0'..=b'9' or b'_' or b'a'..=b'z' or b'A'..=b'Z' at line 324 is true\n",
        "expected return value/type: true\n"
      ],
      "input_infer": "b in the range 48 to 57 (ASCII values for '0' to '9'), b in the range 65 to 90 (ASCII values for 'A' to 'Z'), b in the range 97 to 122 (ASCII values for 'a' to 'z'), or b = 95 (ASCII value for '_')\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let b = 48; // ASCII for '0'",
                "    is_valid_cap_letter(b);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_valid_cap_letter(48), true); // Test with ASCII for '0'",
                "    assert_eq!(is_valid_cap_letter(57), true); // Test with ASCII for '9'",
                "    assert_eq!(is_valid_cap_letter(97), true); // Test with ASCII for 'a'",
                "    assert_eq!(is_valid_cap_letter(122), true); // Test with ASCII for 'z'",
                "    assert_eq!(is_valid_cap_letter(65), true); // Test with ASCII for 'A'",
                "    assert_eq!(is_valid_cap_letter(90), true); // Test with ASCII for 'Z'",
                "    assert_eq!(is_valid_cap_letter(95), true); // Test with ASCII for '_'"
              ],
              "code": [
                "{",
                "    let b = 48; // ASCII for '0'",
                "    is_valid_cap_letter(b);",
                "    assert_eq!(is_valid_cap_letter(48), true); // Test with ASCII for '0'",
                "    assert_eq!(is_valid_cap_letter(57), true); // Test with ASCII for '9'",
                "    assert_eq!(is_valid_cap_letter(97), true); // Test with ASCII for 'a'",
                "    assert_eq!(is_valid_cap_letter(122), true); // Test with ASCII for 'z'",
                "    assert_eq!(is_valid_cap_letter(65), true); // Test with ASCII for 'A'",
                "    assert_eq!(is_valid_cap_letter(90), true); // Test with ASCII for 'Z'",
                "    assert_eq!(is_valid_cap_letter(95), true); // Test with ASCII for '_'",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let b = 57; // ASCII for '9'",
                "    is_valid_cap_letter(b);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_valid_cap_letter(57), true);  // Test with byte value for '9'",
                "    assert_eq!(is_valid_cap_letter(b'0'), true);  // Test with byte value for '0'",
                "    assert_eq!(is_valid_cap_letter(b'5'), true);  // Test with byte value for '5'",
                "    assert_eq!(is_valid_cap_letter(b'a'), true);   // Test with byte value for 'a'",
                "    assert_eq!(is_valid_cap_letter(b'z'), true);   // Test with byte value for 'z'",
                "    assert_eq!(is_valid_cap_letter(b'A'), true);   // Test with byte value for 'A'",
                "    assert_eq!(is_valid_cap_letter(b'Z'), true);   // Test with byte value for 'Z'",
                "    assert_eq!(is_valid_cap_letter(b'_'), true);   // Test with byte value for '_'"
              ],
              "code": [
                "{",
                "    let b = 57; // ASCII for '9'",
                "    is_valid_cap_letter(b);",
                "    assert_eq!(is_valid_cap_letter(57), true);  // Test with byte value for '9'",
                "    assert_eq!(is_valid_cap_letter(b'0'), true);  // Test with byte value for '0'",
                "    assert_eq!(is_valid_cap_letter(b'5'), true);  // Test with byte value for '5'",
                "    assert_eq!(is_valid_cap_letter(b'a'), true);   // Test with byte value for 'a'",
                "    assert_eq!(is_valid_cap_letter(b'z'), true);   // Test with byte value for 'z'",
                "    assert_eq!(is_valid_cap_letter(b'A'), true);   // Test with byte value for 'A'",
                "    assert_eq!(is_valid_cap_letter(b'Z'), true);   // Test with byte value for 'Z'",
                "    assert_eq!(is_valid_cap_letter(b'_'), true);   // Test with byte value for '_'",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let b = 65; // ASCII for 'A'",
                "    is_valid_cap_letter(b);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_valid_cap_letter(48), true); // ASCII for '0'",
                "    assert_eq!(is_valid_cap_letter(57), true); // ASCII for '9'",
                "    assert_eq!(is_valid_cap_letter(65), true); // ASCII for 'A'",
                "    assert_eq!(is_valid_cap_letter(90), true); // ASCII for 'Z'",
                "    assert_eq!(is_valid_cap_letter(97), true); // ASCII for 'a'",
                "    assert_eq!(is_valid_cap_letter(122), true); // ASCII for 'z'",
                "    assert_eq!(is_valid_cap_letter(95), true); // ASCII for '_'",
                "    assert_eq!(is_valid_cap_letter(49), true); // ASCII for '1'"
              ],
              "code": [
                "{",
                "    let b = 65; // ASCII for 'A'",
                "    is_valid_cap_letter(b);",
                "    assert_eq!(is_valid_cap_letter(48), true); // ASCII for '0'",
                "    assert_eq!(is_valid_cap_letter(57), true); // ASCII for '9'",
                "    assert_eq!(is_valid_cap_letter(65), true); // ASCII for 'A'",
                "    assert_eq!(is_valid_cap_letter(90), true); // ASCII for 'Z'",
                "    assert_eq!(is_valid_cap_letter(97), true); // ASCII for 'a'",
                "    assert_eq!(is_valid_cap_letter(122), true); // ASCII for 'z'",
                "    assert_eq!(is_valid_cap_letter(95), true); // ASCII for '_'",
                "    assert_eq!(is_valid_cap_letter(49), true); // ASCII for '1'",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let b = 90; // ASCII for 'Z'",
                "    is_valid_cap_letter(b);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_valid_cap_letter(b'0'), true);",
                "    assert_eq!(is_valid_cap_letter(b'9'), true);",
                "    assert_eq!(is_valid_cap_letter(b'A'), true);",
                "    assert_eq!(is_valid_cap_letter(b'Z'), true);",
                "    assert_eq!(is_valid_cap_letter(b'a'), true);",
                "    assert_eq!(is_valid_cap_letter(b'z'), true);",
                "    assert_eq!(is_valid_cap_letter(b'_'), true);"
              ],
              "code": [
                "{",
                "    let b = 90; // ASCII for 'Z'",
                "    is_valid_cap_letter(b);",
                "    assert_eq!(is_valid_cap_letter(b'0'), true);",
                "    assert_eq!(is_valid_cap_letter(b'9'), true);",
                "    assert_eq!(is_valid_cap_letter(b'A'), true);",
                "    assert_eq!(is_valid_cap_letter(b'Z'), true);",
                "    assert_eq!(is_valid_cap_letter(b'a'), true);",
                "    assert_eq!(is_valid_cap_letter(b'z'), true);",
                "    assert_eq!(is_valid_cap_letter(b'_'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let b = 97; // ASCII for 'a'",
                "    is_valid_cap_letter(b);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_valid_cap_letter(48), true);  // ASCII for '0'",
                "    assert_eq!(is_valid_cap_letter(49), true);  // ASCII for '1'",
                "    assert_eq!(is_valid_cap_letter(57), true);  // ASCII for '9'",
                "    assert_eq!(is_valid_cap_letter(65), true);  // ASCII for 'A'",
                "    assert_eq!(is_valid_cap_letter(90), true);  // ASCII for 'Z'",
                "    assert_eq!(is_valid_cap_letter(97), true);  // ASCII for 'a'",
                "    assert_eq!(is_valid_cap_letter(122), true); // ASCII for 'z'",
                "    assert_eq!(is_valid_cap_letter(95), true);  // ASCII for '_'"
              ],
              "code": [
                "{",
                "    let b = 97; // ASCII for 'a'",
                "    is_valid_cap_letter(b);",
                "    assert_eq!(is_valid_cap_letter(48), true);  // ASCII for '0'",
                "    assert_eq!(is_valid_cap_letter(49), true);  // ASCII for '1'",
                "    assert_eq!(is_valid_cap_letter(57), true);  // ASCII for '9'",
                "    assert_eq!(is_valid_cap_letter(65), true);  // ASCII for 'A'",
                "    assert_eq!(is_valid_cap_letter(90), true);  // ASCII for 'Z'",
                "    assert_eq!(is_valid_cap_letter(97), true);  // ASCII for 'a'",
                "    assert_eq!(is_valid_cap_letter(122), true); // ASCII for 'z'",
                "    assert_eq!(is_valid_cap_letter(95), true);  // ASCII for '_'",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let b = 122; // ASCII for 'z'",
                "    is_valid_cap_letter(b);",
                "}"
              ],
              "oracle": [
                "    is_valid_cap_letter(48); // ASCII for '0', expects true",
                "    is_valid_cap_letter(57); // ASCII for '9', expects true",
                "    is_valid_cap_letter(95); // ASCII for '_', expects true",
                "    is_valid_cap_letter(97); // ASCII for 'a', expects true",
                "    is_valid_cap_letter(122); // ASCII for 'z', expects true",
                "    is_valid_cap_letter(65); // ASCII for 'A', expects true",
                "    is_valid_cap_letter(90); // ASCII for 'Z', expects true"
              ],
              "code": [
                "{",
                "    let b = 122; // ASCII for 'z'",
                "    is_valid_cap_letter(b);",
                "    is_valid_cap_letter(48); // ASCII for '0', expects true",
                "    is_valid_cap_letter(57); // ASCII for '9', expects true",
                "    is_valid_cap_letter(95); // ASCII for '_', expects true",
                "    is_valid_cap_letter(97); // ASCII for 'a', expects true",
                "    is_valid_cap_letter(122); // ASCII for 'z', expects true",
                "    is_valid_cap_letter(65); // ASCII for 'A', expects true",
                "    is_valid_cap_letter(90); // ASCII for 'Z', expects true",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let b = 95; // ASCII for '_'",
                "    is_valid_cap_letter(b);",
                "}"
              ],
              "oracle": [
                "    assert!(is_valid_cap_letter(48)); // ASCII for '0'",
                "    assert!(is_valid_cap_letter(57)); // ASCII for '9'",
                "    assert!(is_valid_cap_letter(65)); // ASCII for 'A'",
                "    assert!(is_valid_cap_letter(90)); // ASCII for 'Z'",
                "    assert!(is_valid_cap_letter(97)); // ASCII for 'a'",
                "    assert!(is_valid_cap_letter(122)); // ASCII for 'z'",
                "    assert!(is_valid_cap_letter(95)); // ASCII for '_'"
              ],
              "code": [
                "{",
                "    let b = 95; // ASCII for '_'",
                "    is_valid_cap_letter(b);",
                "    assert!(is_valid_cap_letter(48)); // ASCII for '0'",
                "    assert!(is_valid_cap_letter(57)); // ASCII for '9'",
                "    assert!(is_valid_cap_letter(65)); // ASCII for 'A'",
                "    assert!(is_valid_cap_letter(90)); // ASCII for 'Z'",
                "    assert!(is_valid_cap_letter(97)); // ASCII for 'a'",
                "    assert!(is_valid_cap_letter(122)); // ASCII for 'z'",
                "    assert!(is_valid_cap_letter(95)); // ASCII for '_'",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 13,
      "prompt_conds": [
        "precondition: b matches b'0'..=b'9' at line 325 is false\n",
        "precondition: b matches b'a'..=b'z' at line 325 is true\n",
        "precondition: b matches b'a'..=b'z' at line 325 is true\n",
        "precondition: b matches b'0'..=b'9' or b'_' or b'a'..=b'z' or b'A'..=b'Z' at line 324 is true\n",
        "expected return value/type: true\n"
      ],
      "input_infer": "b'a' to b'z' and not matching b'0' to b'9' and must be within bounds of valid ASCII characters\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_valid_cap_letter(b'a');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let result = is_valid_cap_letter(b'a');",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_valid_cap_letter(b'm');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let result = is_valid_cap_letter(b'm');",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_valid_cap_letter(b'z');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let result = is_valid_cap_letter(b'z');",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 19,
      "prompt_conds": [
        "precondition: b matches b'0'..=b'9' at line 325 is false\n",
        "precondition: b matches b'a'..=b'z' at line 325 is false\n",
        "precondition: b matches b'A'..=b'Z' at line 325 is true\n",
        "precondition: b matches b'A'..=b'Z' at line 325 is true\n",
        "precondition: b matches b'0'..=b'9' or b'_' or b'a'..=b'z' or b'A'..=b'Z' at line 324 is true\n",
        "expected return value/type: true\n"
      ],
      "input_infer": "Test input conditions or ranges: b must be in the range of b'A'..=b'Z' and also include the special case of b'_'.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: u8 = b'A';",
                "    is_valid_cap_letter(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_valid_cap_letter(b'A'), true);"
              ],
              "code": [
                "{",
                "    let input: u8 = b'A';",
                "    is_valid_cap_letter(input);",
                "    assert_eq!(is_valid_cap_letter(b'A'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: u8 = b'Z';",
                "    is_valid_cap_letter(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_valid_cap_letter(b'Z'), true);"
              ],
              "code": [
                "{",
                "    let input: u8 = b'Z';",
                "    is_valid_cap_letter(input);",
                "    assert_eq!(is_valid_cap_letter(b'Z'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: u8 = b'_';",
                "    is_valid_cap_letter(input);",
                "}"
              ],
              "oracle": [
                "    let input: u8 = b'A'; assert_eq!(is_valid_cap_letter(input), true);",
                "    let input: u8 = b'Z'; assert_eq!(is_valid_cap_letter(input), true);",
                "    let input: u8 = b'_'; assert_eq!(is_valid_cap_letter(input), true);"
              ],
              "code": [
                "{",
                "    let input: u8 = b'_';",
                "    is_valid_cap_letter(input);",
                "    let input: u8 = b'A'; assert_eq!(is_valid_cap_letter(input), true);",
                "    let input: u8 = b'Z'; assert_eq!(is_valid_cap_letter(input), true);",
                "    let input: u8 = b'_'; assert_eq!(is_valid_cap_letter(input), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 22,
      "prompt_conds": [
        "precondition: b matches b'0'..=b'9' at line 325 is false\n",
        "precondition: b matches b'a'..=b'z' at line 325 is false\n",
        "precondition: b matches b'A'..=b'Z' at line 325 is false\n",
        "precondition: b matches b'_' at line 325 is true\n",
        "precondition: b matches _ at line 326 is true\n",
        "expected return value/type: false\n"
      ],
      "input_infer": "Test input conditions or ranges: b must be any byte value outside the ranges b'0' to b'9', b'a' to b'z', and b'A' to b'Z', except for b'_' which must be included.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let b: u8 = b'!'; // Outside the valid ranges",
                "    is_valid_cap_letter(b);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_valid_cap_letter(b'!'), false);",
                "    assert_eq!(is_valid_cap_letter(b'_'), true);",
                "    assert_eq!(is_valid_cap_letter(b'0'), false);",
                "    assert_eq!(is_valid_cap_letter(b'a'), false);",
                "    assert_eq!(is_valid_cap_letter(b'A'), false);"
              ],
              "code": [
                "{",
                "    let b: u8 = b'!'; // Outside the valid ranges",
                "    is_valid_cap_letter(b);",
                "    assert_eq!(is_valid_cap_letter(b'!'), false);",
                "    assert_eq!(is_valid_cap_letter(b'_'), true);",
                "    assert_eq!(is_valid_cap_letter(b'0'), false);",
                "    assert_eq!(is_valid_cap_letter(b'a'), false);",
                "    assert_eq!(is_valid_cap_letter(b'A'), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let b: u8 = b'`'; // Lower than 'a'",
                "    is_valid_cap_letter(b);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_valid_cap_letter(b'`'), false);"
              ],
              "code": [
                "{",
                "    let b: u8 = b'`'; // Lower than 'a'",
                "    is_valid_cap_letter(b);",
                "    assert_eq!(is_valid_cap_letter(b'`'), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let b: u8 = b'['; // Higher than 'Z'",
                "    is_valid_cap_letter(b);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_valid_cap_letter(b'['), false);"
              ],
              "code": [
                "{",
                "    let b: u8 = b'['; // Higher than 'Z'",
                "    is_valid_cap_letter(b);",
                "    assert_eq!(is_valid_cap_letter(b'['), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let b: u8 = b'@'; // Non-alphanumeric character not valid",
                "    is_valid_cap_letter(b);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_valid_cap_letter(b'@'), false);"
              ],
              "code": [
                "{",
                "    let b: u8 = b'@'; // Non-alphanumeric character not valid",
                "    is_valid_cap_letter(b);",
                "    assert_eq!(is_valid_cap_letter(b'@'), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let b: u8 = b'_'; // Valid character",
                "    is_valid_cap_letter(b);",
                "}"
              ],
              "oracle": [
                "    assert!(!is_valid_cap_letter(b'0'));",
                "    assert!(!is_valid_cap_letter(b'9'));",
                "    assert!(!is_valid_cap_letter(b'a'));",
                "    assert!(!is_valid_cap_letter(b'z'));",
                "    assert!(!is_valid_cap_letter(b'A'));",
                "    assert!(!is_valid_cap_letter(b'Z'));",
                "    assert!(is_valid_cap_letter(b'_'));"
              ],
              "code": [
                "{",
                "    let b: u8 = b'_'; // Valid character",
                "    is_valid_cap_letter(b);",
                "    assert!(!is_valid_cap_letter(b'0'));",
                "    assert!(!is_valid_cap_letter(b'9'));",
                "    assert!(!is_valid_cap_letter(b'a'));",
                "    assert!(!is_valid_cap_letter(b'z'));",
                "    assert!(!is_valid_cap_letter(b'A'));",
                "    assert!(!is_valid_cap_letter(b'Z'));",
                "    assert!(is_valid_cap_letter(b'_'));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 23,
      "prompt_conds": [
        "precondition: b matches b'0'..=b'9' at line 325 is false\n",
        "precondition: b matches b'a'..=b'z' at line 325 is false\n",
        "precondition: b matches b'A'..=b'Z' at line 325 is false\n",
        "precondition: b matches b'_' at line 325 is true\n",
        "precondition: b matches b'0'..=b'9' or b'_' or b'a'..=b'z' or b'A'..=b'Z' at line 324 is true\n",
        "expected return value/type: true\n"
      ],
      "input_infer": "b'_'\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_valid_cap_letter(b'_');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let result = is_valid_cap_letter(b'_');",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}