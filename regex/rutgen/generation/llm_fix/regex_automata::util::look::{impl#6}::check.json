{
  "name": "regex_automata::util::look::{impl#6}::check",
  "mod_info": {
    "name": "util::look",
    "loc": "regex-automata/src/util/mod.rs:38:1:38:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/look.rs:1290:5:1292:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "check() should be invoked when the \"unicode-word-boundary\" feature is not enabled to verify it returns an error of type Result<(), UnicodeWordBoundaryError>, while ensuring to also test when the feature is enabled for a successful Result.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[cfg(not(feature = \"unicode-word-boundary\"))]"
              ],
              "prefix": [
                "{",
                "    let result = crate::util::check();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.is_err(), true);",
                "    assert!(matches!(result, Err(crate::util::UnicodeWordBoundaryError(_))));"
              ],
              "code": [
                "{",
                "    let result = crate::util::check();",
                "    assert_eq!(result.is_err(), true);",
                "    assert!(matches!(result, Err(crate::util::UnicodeWordBoundaryError(_))));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[cfg(feature = \"unicode-word-boundary\")]"
              ],
              "prefix": [
                "{",
                "    let result = crate::util::check();",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(result, Ok(())));",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), ());",
                "    assert!(result.is_err());",
                "    assert!(result.is_ok());"
              ],
              "code": [
                "{",
                "    let result = crate::util::check();",
                "    assert!(matches!(result, Ok(())));",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), ());",
                "    assert!(result.is_err());",
                "    assert!(result.is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}