{
  "name": "regex_automata::meta::strategy::{impl#4}::memory_usage",
  "mod_info": {
    "name": "meta::strategy",
    "loc": "regex-automata/src/meta/mod.rs:61:1:61:14"
  },
  "visible": false,
  "loc": "regex-automata/src/meta/strategy.rs:696:5:703:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.info.memory_usage()\n            + self.pre.as_ref().map_or(0, |pre| pre.memory_usage())\n            + self.nfa.memory_usage()\n            + self.nfarev.as_ref().map_or(0, |nfa| nfa.memory_usage())\n            + self.onepass.memory_usage()\n            + self.dfa.memory_usage()\n"
      ],
      "input_infer": "self.info.memory_usage() >= 0, self.pre is either Some(Prefilter) with memory_usage() >= 0 or None, self.nfa.memory_usage() >= 0, self.nfarev is either Some(NFA) with memory_usage() >= 0 or None, self.onepass.memory_usage() >= 0, self.dfa.memory_usage() >= 0\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let core = Core {",
                "        info: RegexInfo(Arc::new(RegexInfo::new(Config::default(), &[]))),",
                "        pre: None,",
                "        nfa: NFA::always_match(),",
                "        nfarev: None,",
                "        onepass: OnePass(None),",
                "        dfa: DFA(None),",
                "    };",
                "    let _ = core.memory_usage();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(core.memory_usage(), core.info.memory_usage());",
                "    assert_eq!(core.memory_usage(), core.info.memory_usage() + 0);",
                "    assert_eq!(core.memory_usage(), core.info.memory_usage() + core.nfa.memory_usage());",
                "    assert_eq!(core.memory_usage(), core.info.memory_usage() + 0 + core.nfa.memory_usage());",
                "    assert_eq!(core.memory_usage(), core.info.memory_usage() + 0 + core.nfa.memory_usage() + 0);",
                "    assert_eq!(core.memory_usage(), core.info.memory_usage() + 0 + core.nfa.memory_usage() + core.onepass.memory_usage());",
                "    assert_eq!(core.memory_usage(), core.info.memory_usage() + 0 + core.nfa.memory_usage() + 0 + core.onepass.memory_usage());",
                "    assert_eq!(core.memory_usage(), core.info.memory_usage() + 0 + core.nfa.memory_usage() + 0 + 0);",
                "    assert_eq!(core.memory_usage(), core.info.memory_usage() + 0 + core.nfa.memory_usage() + 0 + core.dfa.memory_usage());",
                "    assert_eq!(core.memory_usage(), core.info.memory_usage() + 0 + core.nfa.memory_usage() + 0 + core.dfa.memory_usage());"
              ],
              "code": [
                "{",
                "    let core = Core {",
                "        info: RegexInfo(Arc::new(RegexInfo::new(Config::default(), &[]))),",
                "        pre: None,",
                "        nfa: NFA::always_match(),",
                "        nfarev: None,",
                "        onepass: OnePass(None),",
                "        dfa: DFA(None),",
                "    };",
                "    let _ = core.memory_usage();",
                "    assert_eq!(core.memory_usage(), core.info.memory_usage());",
                "    assert_eq!(core.memory_usage(), core.info.memory_usage() + 0);",
                "    assert_eq!(core.memory_usage(), core.info.memory_usage() + core.nfa.memory_usage());",
                "    assert_eq!(core.memory_usage(), core.info.memory_usage() + 0 + core.nfa.memory_usage());",
                "    assert_eq!(core.memory_usage(), core.info.memory_usage() + 0 + core.nfa.memory_usage() + 0);",
                "    assert_eq!(core.memory_usage(), core.info.memory_usage() + 0 + core.nfa.memory_usage() + core.onepass.memory_usage());",
                "    assert_eq!(core.memory_usage(), core.info.memory_usage() + 0 + core.nfa.memory_usage() + 0 + core.onepass.memory_usage());",
                "    assert_eq!(core.memory_usage(), core.info.memory_usage() + 0 + core.nfa.memory_usage() + 0 + 0);",
                "    assert_eq!(core.memory_usage(), core.info.memory_usage() + 0 + core.nfa.memory_usage() + 0 + core.dfa.memory_usage());",
                "    assert_eq!(core.memory_usage(), core.info.memory_usage() + 0 + core.nfa.memory_usage() + 0 + core.dfa.memory_usage());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let prefilter = Prefilter {",
                "        pre: Arc::new(/* Mock PrefilterI implementation */),",
                "        is_fast: true,",
                "        max_needle_len: 10,",
                "    };",
                "    ",
                "    let core = Core {",
                "        info: RegexInfo(Arc::new(RegexInfo::new(Config::default(), &[]))),",
                "        pre: Some(prefilter),",
                "        nfa: NFA::always_match(),",
                "        nfarev: Some(NFA::always_match()),",
                "        onepass: OnePass(None),",
                "        dfa: DFA(None),",
                "    };",
                "    let _ = core.memory_usage();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(core.info.memory_usage(), expected_memory_usage);",
                "    assert_eq!(core.pre.as_ref().map_or(0, |pre| pre.memory_usage()), expected_prefilter_memory);",
                "    assert_eq!(core.nfa.memory_usage(), expected_nfa_memory);",
                "    assert_eq!(core.nfarev.as_ref().map_or(0, |nfa| nfa.memory_usage()), expected_nfarev_memory);",
                "    assert_eq!(core.onepass.memory_usage(), expected_onepass_memory);",
                "    assert_eq!(core.dfa.memory_usage(), expected_dfa_memory);",
                "    assert_eq!(core.memory_usage(), expected_memory_usage + expected_prefilter_memory + expected_nfa_memory + expected_nfarev_memory + expected_onepass_memory + expected_dfa_memory);"
              ],
              "code": [
                "{",
                "    let prefilter = Prefilter {",
                "        pre: Arc::new(/* Mock PrefilterI implementation */),",
                "        is_fast: true,",
                "        max_needle_len: 10,",
                "    };",
                "    ",
                "    let core = Core {",
                "        info: RegexInfo(Arc::new(RegexInfo::new(Config::default(), &[]))),",
                "        pre: Some(prefilter),",
                "        nfa: NFA::always_match(),",
                "        nfarev: Some(NFA::always_match()),",
                "        onepass: OnePass(None),",
                "        dfa: DFA(None),",
                "    };",
                "    let _ = core.memory_usage();",
                "    assert_eq!(core.info.memory_usage(), expected_memory_usage);",
                "    assert_eq!(core.pre.as_ref().map_or(0, |pre| pre.memory_usage()), expected_prefilter_memory);",
                "    assert_eq!(core.nfa.memory_usage(), expected_nfa_memory);",
                "    assert_eq!(core.nfarev.as_ref().map_or(0, |nfa| nfa.memory_usage()), expected_nfarev_memory);",
                "    assert_eq!(core.onepass.memory_usage(), expected_onepass_memory);",
                "    assert_eq!(core.dfa.memory_usage(), expected_dfa_memory);",
                "    assert_eq!(core.memory_usage(), expected_memory_usage + expected_prefilter_memory + expected_nfa_memory + expected_nfarev_memory + expected_onepass_memory + expected_dfa_memory);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let prefilter = Prefilter {",
                "        pre: Arc::new(/* Mock PrefilterI implementation */),",
                "        is_fast: false,",
                "        max_needle_len: 256,",
                "    };",
                "    ",
                "    let core = Core {",
                "        info: RegexInfo(Arc::new(RegexInfo::new(Config::default(), &[]))),",
                "        pre: Some(prefilter),",
                "        nfa: NFA::new(\".*\").unwrap(),",
                "        nfarev: Some(NFA::new(\".*\").unwrap()),",
                "        onepass: OnePass(Some(OnePassEngine)),",
                "        dfa: DFA(Some(DFAEngine)),",
                "    };",
                "    let _ = core.memory_usage();",
                "}"
              ],
              "oracle": [
                "    let prefilter = Prefilter { pre: Arc::new(/* Mock PrefilterI implementation */), is_fast: false, max_needle_len: 256 };",
                "    let core = Core { info: RegexInfo(Arc::new(RegexInfo::new(Config::default(), &[]))), pre: Some(prefilter), nfa: NFA::new(\".*\").unwrap(), nfarev: Some(NFA::new(\".*\").unwrap()), onepass: OnePass(Some(OnePassEngine)), dfa: DFA(Some(DFAEngine)), };",
                "    assert_eq!(core.memory_usage(), core.info.memory_usage() + core.pre.as_ref().map_or(0, |pre| pre.memory_usage()) + core.nfa.memory_usage() + core.nfarev.as_ref().map_or(0, |nfa| nfa.memory_usage()) + core.onepass.memory_usage() + core.dfa.memory_usage());",
                "    let core_empty_prefilter = Core { info: RegexInfo(Arc::new(RegexInfo::new(Config::default(), &[]))), pre: None, nfa: NFA::new(\".*\").unwrap(), nfarev: Some(NFA::new(\".*\").unwrap()), onepass: OnePass(Some(OnePassEngine)), dfa: DFA(Some(DFAEngine)), };",
                "    assert_eq!(core_empty_prefilter.memory_usage(), core_empty_prefilter.info.memory_usage() + 0 + core_empty_prefilter.nfa.memory_usage() + core_empty_prefilter.nfarev.as_ref().map_or(0, |nfa| nfa.memory_usage()) + core_empty_prefilter.onepass.memory_usage() + core_empty_prefilter.dfa.memory_usage());",
                "    let core_no_nfarev = Core { info: RegexInfo(Arc::new(RegexInfo::new(Config::default(), &[]))), pre: Some(prefilter), nfa: NFA::new(\".*\").unwrap(), nfarev: None, onepass: OnePass(Some(OnePassEngine)), dfa: DFA(Some(DFAEngine)), };",
                "    assert_eq!(core_no_nfarev.memory_usage(), core_no_nfarev.info.memory_usage() + core_no_nfarev.pre.as_ref().map_or(0, |pre| pre.memory_usage()) + core_no_nfarev.nfa.memory_usage() + 0 + core_no_nfarev.onepass.memory_usage() + core_no_nfarev.dfa.memory_usage());"
              ],
              "code": [
                "{",
                "    let prefilter = Prefilter {",
                "        pre: Arc::new(/* Mock PrefilterI implementation */),",
                "        is_fast: false,",
                "        max_needle_len: 256,",
                "    };",
                "    ",
                "    let core = Core {",
                "        info: RegexInfo(Arc::new(RegexInfo::new(Config::default(), &[]))),",
                "        pre: Some(prefilter),",
                "        nfa: NFA::new(\".*\").unwrap(),",
                "        nfarev: Some(NFA::new(\".*\").unwrap()),",
                "        onepass: OnePass(Some(OnePassEngine)),",
                "        dfa: DFA(Some(DFAEngine)),",
                "    };",
                "    let _ = core.memory_usage();",
                "    let prefilter = Prefilter { pre: Arc::new(/* Mock PrefilterI implementation */), is_fast: false, max_needle_len: 256 };",
                "    let core = Core { info: RegexInfo(Arc::new(RegexInfo::new(Config::default(), &[]))), pre: Some(prefilter), nfa: NFA::new(\".*\").unwrap(), nfarev: Some(NFA::new(\".*\").unwrap()), onepass: OnePass(Some(OnePassEngine)), dfa: DFA(Some(DFAEngine)), };",
                "    assert_eq!(core.memory_usage(), core.info.memory_usage() + core.pre.as_ref().map_or(0, |pre| pre.memory_usage()) + core.nfa.memory_usage() + core.nfarev.as_ref().map_or(0, |nfa| nfa.memory_usage()) + core.onepass.memory_usage() + core.dfa.memory_usage());",
                "    let core_empty_prefilter = Core { info: RegexInfo(Arc::new(RegexInfo::new(Config::default(), &[]))), pre: None, nfa: NFA::new(\".*\").unwrap(), nfarev: Some(NFA::new(\".*\").unwrap()), onepass: OnePass(Some(OnePassEngine)), dfa: DFA(Some(DFAEngine)), };",
                "    assert_eq!(core_empty_prefilter.memory_usage(), core_empty_prefilter.info.memory_usage() + 0 + core_empty_prefilter.nfa.memory_usage() + core_empty_prefilter.nfarev.as_ref().map_or(0, |nfa| nfa.memory_usage()) + core_empty_prefilter.onepass.memory_usage() + core_empty_prefilter.dfa.memory_usage());",
                "    let core_no_nfarev = Core { info: RegexInfo(Arc::new(RegexInfo::new(Config::default(), &[]))), pre: Some(prefilter), nfa: NFA::new(\".*\").unwrap(), nfarev: None, onepass: OnePass(Some(OnePassEngine)), dfa: DFA(Some(DFAEngine)), };",
                "    assert_eq!(core_no_nfarev.memory_usage(), core_no_nfarev.info.memory_usage() + core_no_nfarev.pre.as_ref().map_or(0, |pre| pre.memory_usage()) + core_no_nfarev.nfa.memory_usage() + 0 + core_no_nfarev.onepass.memory_usage() + core_no_nfarev.dfa.memory_usage());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let core = Core {",
                "        info: RegexInfo(Arc::new(RegexInfo::new(Config::default(), &[]))),",
                "        pre: None,",
                "        nfa: NFA::new(\"a{100}\").unwrap(),",
                "        nfarev: Some(NFA::new(\"b{100}\").unwrap()),",
                "        onepass: OnePass(None),",
                "        dfa: DFA(Some(DFAEngine)),",
                "    };",
                "    let _ = core.memory_usage();",
                "}"
              ],
              "oracle": [
                "    let core = Core {",
                "    info: RegexInfo(Arc::new(RegexInfo::new(Config::default(), &[]))),",
                "    pre: None,",
                "    nfa: NFA::new(\"a{100}\").unwrap(),",
                "    nfarev: Some(NFA::new(\"b{100}\").unwrap()),",
                "    onepass: OnePass(None),",
                "    dfa: DFA(Some(DFAEngine)),",
                "    };",
                "    assert_eq!(core.memory_usage(),",
                "    core.info.memory_usage()",
                "    + 0",
                "    + core.nfa.memory_usage()",
                "    + core.nfarev.as_ref().map_or(0, |nfa| nfa.memory_usage())",
                "    + core.onepass.memory_usage()",
                "    + core.dfa.memory_usage());"
              ],
              "code": [
                "{",
                "    let core = Core {",
                "        info: RegexInfo(Arc::new(RegexInfo::new(Config::default(), &[]))),",
                "        pre: None,",
                "        nfa: NFA::new(\"a{100}\").unwrap(),",
                "        nfarev: Some(NFA::new(\"b{100}\").unwrap()),",
                "        onepass: OnePass(None),",
                "        dfa: DFA(Some(DFAEngine)),",
                "    };",
                "    let _ = core.memory_usage();",
                "    let core = Core {",
                "    info: RegexInfo(Arc::new(RegexInfo::new(Config::default(), &[]))),",
                "    pre: None,",
                "    nfa: NFA::new(\"a{100}\").unwrap(),",
                "    nfarev: Some(NFA::new(\"b{100}\").unwrap()),",
                "    onepass: OnePass(None),",
                "    dfa: DFA(Some(DFAEngine)),",
                "    };",
                "    assert_eq!(core.memory_usage(),",
                "    core.info.memory_usage()",
                "    + 0",
                "    + core.nfa.memory_usage()",
                "    + core.nfarev.as_ref().map_or(0, |nfa| nfa.memory_usage())",
                "    + core.onepass.memory_usage()",
                "    + core.dfa.memory_usage());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}