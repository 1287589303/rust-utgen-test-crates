{
  "name": "regex_automata::util::start::{impl#0}::get_anchored",
  "mod_info": {
    "name": "util::start",
    "loc": "regex-automata/src/util/mod.rs:43:1:43:15"
  },
  "visible": true,
  "loc": "regex-automata/src/util/start.rs:188:5:190:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.anchored\n"
      ],
      "input_infer": "Anchored modes: No, Yes, Pattern(p) where p is a valid PatternID; valid ranges for look_behind: None or u8 (0-255) for Config with valid Anchored set.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config {",
                "        look_behind: None,",
                "        anchored: Anchored::No,",
                "    };",
                "    config.get_anchored();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_anchored(), Anchored::No);"
              ],
              "code": [
                "{",
                "    let config = Config {",
                "        look_behind: None,",
                "        anchored: Anchored::No,",
                "    };",
                "    config.get_anchored();",
                "    assert_eq!(config.get_anchored(), Anchored::No);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config {",
                "        look_behind: Some(0),",
                "        anchored: Anchored::Yes,",
                "    };",
                "    config.get_anchored();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_anchored(), Anchored::Yes);"
              ],
              "code": [
                "{",
                "    let config = Config {",
                "        look_behind: Some(0),",
                "        anchored: Anchored::Yes,",
                "    };",
                "    config.get_anchored();",
                "    assert_eq!(config.get_anchored(), Anchored::Yes);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct PatternID;",
                "    let pattern_id = PatternID;",
                "    ",
                "    let config = Config {",
                "        look_behind: Some(255),",
                "        anchored: Anchored::Pattern(pattern_id),",
                "    };",
                "    config.get_anchored();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_anchored(), Anchored::Pattern(pattern_id));",
                "    assert_eq!(config.get_anchored(), Anchored::Pattern(PatternID));",
                "    assert_eq!(config.get_anchored(), Anchored::No);",
                "    assert_eq!(config.get_anchored(), Anchored::Yes);",
                "    assert_eq!(config.get_anchored(), Anchored::Pattern(PatternID));"
              ],
              "code": [
                "{",
                "    struct PatternID;",
                "    let pattern_id = PatternID;",
                "    ",
                "    let config = Config {",
                "        look_behind: Some(255),",
                "        anchored: Anchored::Pattern(pattern_id),",
                "    };",
                "    config.get_anchored();",
                "    assert_eq!(config.get_anchored(), Anchored::Pattern(pattern_id));",
                "    assert_eq!(config.get_anchored(), Anchored::Pattern(PatternID));",
                "    assert_eq!(config.get_anchored(), Anchored::No);",
                "    assert_eq!(config.get_anchored(), Anchored::Yes);",
                "    assert_eq!(config.get_anchored(), Anchored::Pattern(PatternID));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}