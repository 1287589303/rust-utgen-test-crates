{
  "name": "regex_automata::nfa::thompson::compiler::{impl#3}::build_many_from_hir",
  "mod_info": {
    "name": "nfa::thompson::compiler",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:60:1:60:14"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/compiler.rs:877:5:882:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "test input conditions: exprs must be a non-empty slice of Borrow<Hir>, each Hir must represent a valid high-level intermediate representation of a regular expression, NFA must have a valid non-null configuration, and nfa_size_limit in the configuration must be set to a positive integer value.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let compiler = Compiler::new();",
                "    let exprs: Vec<Hir> = vec![",
                "        Hir::class(Class::Bytes(ClassBytes::new(vec![",
                "            ClassBytesRange::new(b'\\t', b'\\r'),",
                "            ClassBytesRange::new(b' ', b' ')",
                "        ]))),",
                "        Hir::class(Class::Bytes(ClassBytes::new(vec![",
                "            ClassBytesRange::new(b'0', b'9'),",
                "            ClassBytesRange::new(b'A', b'Z'),",
                "            ClassBytesRange::new(b'_', b'_'),",
                "            ClassBytesRange::new(b'a', b'z')",
                "        ]))),",
                "    ];",
                "    let config = Config {",
                "        nfa_size_limit: Some(1_000),",
                "        ..Config::default()",
                "    };",
                "    let nfa = compiler.configure(config).build_many_from_hir(&exprs).unwrap();",
                "}"
              ],
              "oracle": [
                "    plaintext",
                "    let compiler = Compiler::new();",
                "    let exprs: Vec<Hir> = vec![",
                "    Hir::class(Class::Bytes(ClassBytes::new(vec![",
                "    ClassBytesRange::new(b'\\t', b'\\r'),",
                "    ClassBytesRange::new(b' ', b' ')",
                "    ]))),",
                "    Hir::class(Class::Bytes(ClassBytes::new(vec![",
                "    ClassBytesRange::new(b'0', b'9'),",
                "    ClassBytesRange::new(b'A', b'Z'),",
                "    ClassBytesRange::new(b'_', b'_'),",
                "    ClassBytesRange::new(b'a', b'z')",
                "    ]))),",
                "    ];",
                "    let config = Config {",
                "    nfa_size_limit: Some(1_000),",
                "    ..Config::default()",
                "    };",
                "    let build_result = compiler.configure(config).build_many_from_hir(&exprs);",
                "    assert!(build_result.is_ok());",
                "    let nfa = build_result.unwrap();",
                "    assert!(nfa.is_some());"
              ],
              "code": [
                "{",
                "    let compiler = Compiler::new();",
                "    let exprs: Vec<Hir> = vec![",
                "        Hir::class(Class::Bytes(ClassBytes::new(vec![",
                "            ClassBytesRange::new(b'\\t', b'\\r'),",
                "            ClassBytesRange::new(b' ', b' ')",
                "        ]))),",
                "        Hir::class(Class::Bytes(ClassBytes::new(vec![",
                "            ClassBytesRange::new(b'0', b'9'),",
                "            ClassBytesRange::new(b'A', b'Z'),",
                "            ClassBytesRange::new(b'_', b'_'),",
                "            ClassBytesRange::new(b'a', b'z')",
                "        ]))),",
                "    ];",
                "    let config = Config {",
                "        nfa_size_limit: Some(1_000),",
                "        ..Config::default()",
                "    };",
                "    let nfa = compiler.configure(config).build_many_from_hir(&exprs).unwrap();",
                "    plaintext",
                "    let compiler = Compiler::new();",
                "    let exprs: Vec<Hir> = vec![",
                "    Hir::class(Class::Bytes(ClassBytes::new(vec![",
                "    ClassBytesRange::new(b'\\t', b'\\r'),",
                "    ClassBytesRange::new(b' ', b' ')",
                "    ]))),",
                "    Hir::class(Class::Bytes(ClassBytes::new(vec![",
                "    ClassBytesRange::new(b'0', b'9'),",
                "    ClassBytesRange::new(b'A', b'Z'),",
                "    ClassBytesRange::new(b'_', b'_'),",
                "    ClassBytesRange::new(b'a', b'z')",
                "    ]))),",
                "    ];",
                "    let config = Config {",
                "    nfa_size_limit: Some(1_000),",
                "    ..Config::default()",
                "    };",
                "    let build_result = compiler.configure(config).build_many_from_hir(&exprs);",
                "    assert!(build_result.is_ok());",
                "    let nfa = build_result.unwrap();",
                "    assert!(nfa.is_some());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let compiler = Compiler::new();",
                "    let exprs: Vec<Hir> = vec![];",
                "    let config = Config {",
                "        nfa_size_limit: Some(1_000),",
                "        ..Config::default()",
                "    };",
                "    compiler.configure(config).build_many_from_hir(&exprs).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(compiler.configure(config).build_many_from_hir(&vec![]), Err(BuildError { kind: BuildErrorKind::EmptyPattern }));"
              ],
              "code": [
                "{",
                "    let compiler = Compiler::new();",
                "    let exprs: Vec<Hir> = vec![];",
                "    let config = Config {",
                "        nfa_size_limit: Some(1_000),",
                "        ..Config::default()",
                "    };",
                "    compiler.configure(config).build_many_from_hir(&exprs).unwrap();",
                "    assert_eq!(compiler.configure(config).build_many_from_hir(&vec![]), Err(BuildError { kind: BuildErrorKind::EmptyPattern }));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let compiler = Compiler::new();",
                "    let exprs: Vec<Hir> = vec![",
                "        Hir::class(Class::Bytes(ClassBytes::new(vec![",
                "            ClassBytesRange::new(b'\\t', b'\\r'),",
                "            ClassBytesRange::new(b' ', b' ')",
                "        ]))),",
                "    ];",
                "    let config = Config {",
                "        nfa_size_limit: Some(0),",
                "        ..Config::default()",
                "    };",
                "    compiler.configure(config).build_many_from_hir(&exprs).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(compiler.configure(config).build_many_from_hir(&exprs), Err(BuildError { kind: BuildErrorKind::SizeLimitExceeded }));"
              ],
              "code": [
                "{",
                "    let compiler = Compiler::new();",
                "    let exprs: Vec<Hir> = vec![",
                "        Hir::class(Class::Bytes(ClassBytes::new(vec![",
                "            ClassBytesRange::new(b'\\t', b'\\r'),",
                "            ClassBytesRange::new(b' ', b' ')",
                "        ]))),",
                "    ];",
                "    let config = Config {",
                "        nfa_size_limit: Some(0),",
                "        ..Config::default()",
                "    };",
                "    compiler.configure(config).build_many_from_hir(&exprs).unwrap();",
                "    assert_eq!(compiler.configure(config).build_many_from_hir(&exprs), Err(BuildError { kind: BuildErrorKind::SizeLimitExceeded }));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}