{
  "name": "regex_syntax::hir::{impl#27}::subtract",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:2835:5:2837:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: LookSet { bits: self.bits & !other.bits }\n"
      ],
      "input_infer": "self.bits: u32 values (0 to 0xFFFFFFFF) and other.bits: u32 values (0 to 0xFFFFFFFF) including edge cases where self.bits = 0, other.bits = 0, self.bits = other.bits, and self.bits = MAX u32.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a = LookSet { bits: 0 };",
                "    let b = LookSet { bits: 0 };",
                "    let _result = a.subtract(b);",
                "}"
              ],
              "oracle": [
                "    let a = LookSet { bits: 0 };",
                "    let b = LookSet { bits: 0 };",
                "    let expected = LookSet { bits: a.bits & !b.bits };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 5 };",
                "    let b = LookSet { bits: 3 };",
                "    let expected = LookSet { bits: a.bits & !b.bits };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 15 };",
                "    let b = LookSet { bits: 15 };",
                "    let expected = LookSet { bits: a.bits & !b.bits };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 255 };",
                "    let b = LookSet { bits: 255 };",
                "    let expected = LookSet { bits: a.bits & !b.bits };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 10 };",
                "    let b = LookSet { bits: 0 };",
                "    let expected = LookSet { bits: a.bits & !b.bits };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0b1111 };",
                "    let b = LookSet { bits: 0b0011 };",
                "    let expected = LookSet { bits: a.bits & !b.bits };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0xFFFF };",
                "    let b = LookSet { bits: 0x0FFF };",
                "    let expected = LookSet { bits: a.bits & !b.bits };",
                "    assert_eq!(a.subtract(b), expected);"
              ],
              "code": [
                "{",
                "    let a = LookSet { bits: 0 };",
                "    let b = LookSet { bits: 0 };",
                "    let _result = a.subtract(b);",
                "    let a = LookSet { bits: 0 };",
                "    let b = LookSet { bits: 0 };",
                "    let expected = LookSet { bits: a.bits & !b.bits };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 5 };",
                "    let b = LookSet { bits: 3 };",
                "    let expected = LookSet { bits: a.bits & !b.bits };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 15 };",
                "    let b = LookSet { bits: 15 };",
                "    let expected = LookSet { bits: a.bits & !b.bits };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 255 };",
                "    let b = LookSet { bits: 255 };",
                "    let expected = LookSet { bits: a.bits & !b.bits };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 10 };",
                "    let b = LookSet { bits: 0 };",
                "    let expected = LookSet { bits: a.bits & !b.bits };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0b1111 };",
                "    let b = LookSet { bits: 0b0011 };",
                "    let expected = LookSet { bits: a.bits & !b.bits };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0xFFFF };",
                "    let b = LookSet { bits: 0x0FFF };",
                "    let expected = LookSet { bits: a.bits & !b.bits };",
                "    assert_eq!(a.subtract(b), expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a = LookSet { bits: 0b1100 };",
                "    let b = LookSet { bits: 0 };",
                "    let _result = a.subtract(b);",
                "}"
              ],
              "oracle": [
                "    let a = LookSet { bits: 0b1100 };",
                "    let b = LookSet { bits: 0 };",
                "    let expected = LookSet { bits: 0b1100 };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0b1100 };",
                "    let b = LookSet { bits: 0b1000 };",
                "    let expected = LookSet { bits: 0b0100 };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0b1100 };",
                "    let b = LookSet { bits: 0b1100 };",
                "    let expected = LookSet { bits: 0 };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0b1100 };",
                "    let b = LookSet { bits: 0b0011 };",
                "    let expected = LookSet { bits: 0b1100 };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0b0000 };",
                "    let b = LookSet { bits: 0b0000 };",
                "    let expected = LookSet { bits: 0 };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0b1111 };",
                "    let b = LookSet { bits: 0b0001 };",
                "    let expected = LookSet { bits: 0b1110 };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0b1111 };",
                "    let b = LookSet { bits: 0b1111 };",
                "    let expected = LookSet { bits: 0 };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0b0000 };",
                "    let b = LookSet { bits: 0b1111 };",
                "    let expected = LookSet { bits: 0 };",
                "    assert_eq!(a.subtract(b), expected);"
              ],
              "code": [
                "{",
                "    let a = LookSet { bits: 0b1100 };",
                "    let b = LookSet { bits: 0 };",
                "    let _result = a.subtract(b);",
                "    let a = LookSet { bits: 0b1100 };",
                "    let b = LookSet { bits: 0 };",
                "    let expected = LookSet { bits: 0b1100 };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0b1100 };",
                "    let b = LookSet { bits: 0b1000 };",
                "    let expected = LookSet { bits: 0b0100 };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0b1100 };",
                "    let b = LookSet { bits: 0b1100 };",
                "    let expected = LookSet { bits: 0 };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0b1100 };",
                "    let b = LookSet { bits: 0b0011 };",
                "    let expected = LookSet { bits: 0b1100 };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0b0000 };",
                "    let b = LookSet { bits: 0b0000 };",
                "    let expected = LookSet { bits: 0 };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0b1111 };",
                "    let b = LookSet { bits: 0b0001 };",
                "    let expected = LookSet { bits: 0b1110 };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0b1111 };",
                "    let b = LookSet { bits: 0b1111 };",
                "    let expected = LookSet { bits: 0 };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0b0000 };",
                "    let b = LookSet { bits: 0b1111 };",
                "    let expected = LookSet { bits: 0 };",
                "    assert_eq!(a.subtract(b), expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a = LookSet { bits: 0b1100 };",
                "    let b = LookSet { bits: 0b1100 };",
                "    let _result = a.subtract(b);",
                "}"
              ],
              "oracle": [
                "    let a = LookSet { bits: 0b1100 };",
                "    let b = LookSet { bits: 0b1100 };",
                "    let expected = LookSet { bits: 0b0000 };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0b1111 };",
                "    let b = LookSet { bits: 0b0001 };",
                "    let expected = LookSet { bits: 0b1110 };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0b0000 };",
                "    let b = LookSet { bits: 0b1100 };",
                "    let expected = LookSet { bits: 0b0000 };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0b1111 };",
                "    let b = LookSet { bits: 0b1111 };",
                "    let expected = LookSet { bits: 0b0000 };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0b1010 };",
                "    let b = LookSet { bits: 0b0101 };",
                "    let expected = LookSet { bits: 0b1010 };",
                "    assert_eq!(a.subtract(b), expected);"
              ],
              "code": [
                "{",
                "    let a = LookSet { bits: 0b1100 };",
                "    let b = LookSet { bits: 0b1100 };",
                "    let _result = a.subtract(b);",
                "    let a = LookSet { bits: 0b1100 };",
                "    let b = LookSet { bits: 0b1100 };",
                "    let expected = LookSet { bits: 0b0000 };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0b1111 };",
                "    let b = LookSet { bits: 0b0001 };",
                "    let expected = LookSet { bits: 0b1110 };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0b0000 };",
                "    let b = LookSet { bits: 0b1100 };",
                "    let expected = LookSet { bits: 0b0000 };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0b1111 };",
                "    let b = LookSet { bits: 0b1111 };",
                "    let expected = LookSet { bits: 0b0000 };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0b1010 };",
                "    let b = LookSet { bits: 0b0101 };",
                "    let expected = LookSet { bits: 0b1010 };",
                "    assert_eq!(a.subtract(b), expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a = LookSet { bits: 0b1111 };",
                "    let b = LookSet { bits: 0b0111 };",
                "    let _result = a.subtract(b);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result.bits, 0b1000);",
                "    assert_eq!(LookSet::empty().subtract(LookSet::full()).bits, 0);",
                "    assert_eq!(LookSet::full().subtract(LookSet::empty()).bits, LookSet::full().bits);",
                "    assert_eq!(LookSet { bits: 0b0000 }.subtract(LookSet { bits: 0b0000 }).bits, 0b0000);",
                "    assert_eq!(LookSet { bits: 0b1111 }.subtract(LookSet { bits: 0b0000 }).bits, 0b1111);",
                "    assert_eq!(LookSet { bits: 0b1111 }.subtract(LookSet { bits: 0b1111 }).bits, 0b0000);",
                "    assert_eq!(LookSet { bits: 0b0011 }.subtract(LookSet { bits: 0b1100 }).bits, 0b0011);",
                "    assert_eq!(LookSet { bits: 0b1100 }.subtract(LookSet { bits: 0b0011 }).bits, 0b1000);"
              ],
              "code": [
                "{",
                "    let a = LookSet { bits: 0b1111 };",
                "    let b = LookSet { bits: 0b0111 };",
                "    let _result = a.subtract(b);",
                "    assert_eq!(_result.bits, 0b1000);",
                "    assert_eq!(LookSet::empty().subtract(LookSet::full()).bits, 0);",
                "    assert_eq!(LookSet::full().subtract(LookSet::empty()).bits, LookSet::full().bits);",
                "    assert_eq!(LookSet { bits: 0b0000 }.subtract(LookSet { bits: 0b0000 }).bits, 0b0000);",
                "    assert_eq!(LookSet { bits: 0b1111 }.subtract(LookSet { bits: 0b0000 }).bits, 0b1111);",
                "    assert_eq!(LookSet { bits: 0b1111 }.subtract(LookSet { bits: 0b1111 }).bits, 0b0000);",
                "    assert_eq!(LookSet { bits: 0b0011 }.subtract(LookSet { bits: 0b1100 }).bits, 0b0011);",
                "    assert_eq!(LookSet { bits: 0b1100 }.subtract(LookSet { bits: 0b0011 }).bits, 0b1000);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a = LookSet { bits: 0b1111 };",
                "    let b = LookSet { bits: 0xFFFFFFFF };",
                "    let _result = a.subtract(b);",
                "}"
              ],
              "oracle": [
                "    let a = LookSet { bits: 0b1111 };",
                "    let b = LookSet { bits: 0xFFFFFFFF };",
                "    let expected = LookSet { bits: 0b0000 };",
                "    assert_eq!(_result, expected);"
              ],
              "code": [
                "{",
                "    let a = LookSet { bits: 0b1111 };",
                "    let b = LookSet { bits: 0xFFFFFFFF };",
                "    let _result = a.subtract(b);",
                "    let a = LookSet { bits: 0b1111 };",
                "    let b = LookSet { bits: 0xFFFFFFFF };",
                "    let expected = LookSet { bits: 0b0000 };",
                "    assert_eq!(_result, expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a = LookSet { bits: 0xFFFFFFFF };",
                "    let b = LookSet { bits: 0 };",
                "    let _result = a.subtract(b);",
                "}"
              ],
              "oracle": [
                "    let a = LookSet { bits: 0xFFFFFFFF };",
                "    let b = LookSet { bits: 0 };",
                "    let expected = LookSet { bits: 0xFFFFFFFF };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0b1010 };",
                "    let b = LookSet { bits: 0b1100 };",
                "    let expected = LookSet { bits: 0b0010 };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0b1111 };",
                "    let b = LookSet { bits: 0b1111 };",
                "    let expected = LookSet { bits: 0 };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0 };",
                "    let b = LookSet { bits: 0b1111 };",
                "    let expected = LookSet { bits: 0 };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0b0101 };",
                "    let b = LookSet { bits: 0b0011 };",
                "    let expected = LookSet { bits: 0b0000 };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0x0F };",
                "    let b = LookSet { bits: 0xF0 };",
                "    let expected = LookSet { bits: 0x0F };",
                "    assert_eq!(a.subtract(b), expected);"
              ],
              "code": [
                "{",
                "    let a = LookSet { bits: 0xFFFFFFFF };",
                "    let b = LookSet { bits: 0 };",
                "    let _result = a.subtract(b);",
                "    let a = LookSet { bits: 0xFFFFFFFF };",
                "    let b = LookSet { bits: 0 };",
                "    let expected = LookSet { bits: 0xFFFFFFFF };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0b1010 };",
                "    let b = LookSet { bits: 0b1100 };",
                "    let expected = LookSet { bits: 0b0010 };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0b1111 };",
                "    let b = LookSet { bits: 0b1111 };",
                "    let expected = LookSet { bits: 0 };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0 };",
                "    let b = LookSet { bits: 0b1111 };",
                "    let expected = LookSet { bits: 0 };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0b0101 };",
                "    let b = LookSet { bits: 0b0011 };",
                "    let expected = LookSet { bits: 0b0000 };",
                "    assert_eq!(a.subtract(b), expected);",
                "    ",
                "    let a = LookSet { bits: 0x0F };",
                "    let b = LookSet { bits: 0xF0 };",
                "    let expected = LookSet { bits: 0x0F };",
                "    assert_eq!(a.subtract(b), expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a = LookSet { bits: 0xFFFFFFFF };",
                "    let b = LookSet { bits: 0xFFFFFFFF };",
                "    let _result = a.subtract(b);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(a.subtract(b), LookSet { bits: 0x00000000 });",
                "    let c = LookSet { bits: 0x12345678 };",
                "    assert_eq!(a.subtract(c), LookSet { bits: 0xEDCBA987 });",
                "    let d = LookSet { bits: 0x00000000 };",
                "    assert_eq!(a.subtract(d), LookSet { bits: 0xFFFFFFFF });",
                "    let e = LookSet { bits: 0xFFFFFFFF };",
                "    assert_eq!(e.subtract(a), LookSet { bits: 0x00000000 });",
                "    let f = LookSet { bits: 0xFFFFFFFF };",
                "    let g = LookSet { bits: 0x00000001 };",
                "    assert_eq!(f.subtract(g), LookSet { bits: 0xFFFFFFFF - 0x00000001 });"
              ],
              "code": [
                "{",
                "    let a = LookSet { bits: 0xFFFFFFFF };",
                "    let b = LookSet { bits: 0xFFFFFFFF };",
                "    let _result = a.subtract(b);",
                "    assert_eq!(a.subtract(b), LookSet { bits: 0x00000000 });",
                "    let c = LookSet { bits: 0x12345678 };",
                "    assert_eq!(a.subtract(c), LookSet { bits: 0xEDCBA987 });",
                "    let d = LookSet { bits: 0x00000000 };",
                "    assert_eq!(a.subtract(d), LookSet { bits: 0xFFFFFFFF });",
                "    let e = LookSet { bits: 0xFFFFFFFF };",
                "    assert_eq!(e.subtract(a), LookSet { bits: 0x00000000 });",
                "    let f = LookSet { bits: 0xFFFFFFFF };",
                "    let g = LookSet { bits: 0x00000001 };",
                "    assert_eq!(f.subtract(g), LookSet { bits: 0xFFFFFFFF - 0x00000001 });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}