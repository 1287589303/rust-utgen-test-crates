{
  "name": "regex_lite::hir::next_char",
  "mod_info": {
    "name": "hir",
    "loc": "regex-lite/src/lib.rs:877:1:877:9"
  },
  "visible": false,
  "loc": "regex-lite/src/hir/mod.rs:750:1:757:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: ch == '\\u{D7FF}' at line 752 is false\n",
        "expected return value/type: Some('\\u{E000}')\n"
      ],
      "input_infer": "ch: any valid char except '\\u{D7FF}' (e.g., '\\u{0000}' to '\\u{D7FE}' and '\\u{E000}' to '\\u{FFFF}')\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = next_char('\\u{D7FE}');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some('\\u{D7FF}' + 1));",
                "    assert_eq!(result, Some('\\u{E000}'));",
                "    assert!(result.is_some());",
                "    assert!(result.unwrap() < '\\u{D7FF}');",
                "    assert!(result.unwrap() <= char::MAX);"
              ],
              "code": [
                "{",
                "    let result = next_char('\\u{D7FE}');",
                "    assert_eq!(result, Some('\\u{D7FF}' + 1));",
                "    assert_eq!(result, Some('\\u{E000}'));",
                "    assert!(result.is_some());",
                "    assert!(result.unwrap() < '\\u{D7FF}');",
                "    assert!(result.unwrap() <= char::MAX);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = next_char('\\u{E000}');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some('\\u{E001}'));"
              ],
              "code": [
                "{",
                "    let result = next_char('\\u{E000}');",
                "    assert_eq!(result, Some('\\u{E001}'));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = next_char('\\u{0000}');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some('\\u{0001}'));"
              ],
              "code": [
                "{",
                "    let result = next_char('\\u{0000}');",
                "    assert_eq!(result, Some('\\u{0001}'));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = next_char('\\u{FFFF}');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some('\\u{10000}'));"
              ],
              "code": [
                "{",
                "    let result = next_char('\\u{FFFF}');",
                "    assert_eq!(result, Some('\\u{10000}'));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: ch == '\\u{D7FF}' at line 752 is true\n"
      ],
      "input_infer": "ch == '\\u{D7FF}' or ch from '\\u{0000}' to '\\u{D7FE}' and ch == char::MAX\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = next_char('\\u{D7FF}');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some('\\u{E000}'));"
              ],
              "code": [
                "{",
                "    let result = next_char('\\u{D7FF}');",
                "    assert_eq!(result, Some('\\u{E000}'));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = next_char('\\u{D7FE}');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some('\\u{D7FF}'));",
                "    assert_eq!(result.is_some(), true);",
                "    assert!(result.is_none() == false);",
                "    assert!(result.unwrap() == '\\u{D7FF}');"
              ],
              "code": [
                "{",
                "    let result = next_char('\\u{D7FE}');",
                "    assert_eq!(result, Some('\\u{D7FF}'));",
                "    assert_eq!(result.is_some(), true);",
                "    assert!(result.is_none() == false);",
                "    assert!(result.unwrap() == '\\u{D7FF}');",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = next_char('\\u{0000}');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some('\\u{0001}'));",
                "    result = next_char('\\u{D7FF}');",
                "    assert_eq!(result, Some('\\u{E000}'));",
                "    result = next_char('\\u{E000}');",
                "    assert_eq!(result, Some('\\u{E001}'));",
                "    result = next_char(char::from_u32(u32::MAX).unwrap());",
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let result = next_char('\\u{0000}');",
                "    assert_eq!(result, Some('\\u{0001}'));",
                "    result = next_char('\\u{D7FF}');",
                "    assert_eq!(result, Some('\\u{E000}'));",
                "    result = next_char('\\u{E000}');",
                "    assert_eq!(result, Some('\\u{E001}'));",
                "    result = next_char(char::from_u32(u32::MAX).unwrap());",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = next_char(char::MAX);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);",
                "    let result = next_char('\\u{D7FF}');",
                "    assert_eq!(result, Some('\\u{E000}'));",
                "    let result = next_char('\\u{D7FE}');",
                "    assert_eq!(result, Some('\\u{D7FF}'));",
                "    let result = next_char('\\u{E000}');",
                "    assert_eq!(result, Some('\\u{E001}'));"
              ],
              "code": [
                "{",
                "    let result = next_char(char::MAX);",
                "    assert_eq!(result, None);",
                "    let result = next_char('\\u{D7FF}');",
                "    assert_eq!(result, Some('\\u{E000}'));",
                "    let result = next_char('\\u{D7FE}');",
                "    assert_eq!(result, Some('\\u{D7FF}'));",
                "    let result = next_char('\\u{E000}');",
                "    assert_eq!(result, Some('\\u{E001}'));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}