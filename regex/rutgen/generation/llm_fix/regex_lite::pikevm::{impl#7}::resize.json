{
  "name": "regex_lite::pikevm::{impl#7}::resize",
  "mod_info": {
    "name": "pikevm",
    "loc": "regex-lite/src/lib.rs:881:1:881:12"
  },
  "visible": false,
  "loc": "regex-lite/src/pikevm.rs:822:5:831:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: new_capacity <= u32::MAX.as_usize() at line 824 is true, with bound new_capacity == u32::MAX.as_usize()\n"
      ],
      "input_infer": "new_capacity in the range [0, u32::MAX.as_usize()] including boundary cases 0 and u32::MAX.as_usize()\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(sparse_set.capacity(), 0);",
                "    assert_eq!(sparse_set.len(), 0);",
                "    assert!(sparse_set.is_empty());",
                "    sparse_set.resize(u32::MAX.as_usize());",
                "    assert_eq!(sparse_set.capacity(), u32::MAX.as_usize());",
                "    assert_eq!(sparse_set.len(), 0);",
                "    assert!(sparse_set.is_empty());"
              ],
              "code": [
                "{",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(0);",
                "    assert_eq!(sparse_set.capacity(), 0);",
                "    assert_eq!(sparse_set.len(), 0);",
                "    assert!(sparse_set.is_empty());",
                "    sparse_set.resize(u32::MAX.as_usize());",
                "    assert_eq!(sparse_set.capacity(), u32::MAX.as_usize());",
                "    assert_eq!(sparse_set.len(), 0);",
                "    assert!(sparse_set.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let max_capacity = u32::MAX.as_usize();",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(max_capacity);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(sparse_set.capacity(), max_capacity);",
                "    assert_eq!(sparse_set.len(), 0);",
                "    assert!(sparse_set.is_empty());",
                "    assert_eq!(sparse_set.dense.len(), max_capacity);",
                "    assert_eq!(sparse_set.sparse.len(), max_capacity);"
              ],
              "code": [
                "{",
                "    let max_capacity = u32::MAX.as_usize();",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(max_capacity);",
                "    assert_eq!(sparse_set.capacity(), max_capacity);",
                "    assert_eq!(sparse_set.len(), 0);",
                "    assert!(sparse_set.is_empty());",
                "    assert_eq!(sparse_set.dense.len(), max_capacity);",
                "    assert_eq!(sparse_set.sparse.len(), max_capacity);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: new_capacity <= u32::MAX.as_usize() at line 824 is false\n"
      ],
      "input_infer": "new_capacity > u32::MAX.as_usize()\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(u32::MAX.as_usize() + 1);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| {",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(u32::MAX.as_usize() + 1);",
                "    }).is_err());"
              ],
              "code": [
                "{",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(u32::MAX.as_usize() + 1);",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(u32::MAX.as_usize() + 1);",
                "    }).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(u32::MAX.as_usize() + 2);",
                "}"
              ],
              "oracle": [
                "    #[should_panic]",
                "    #[test]",
                "    fn test_resize_exceeding_capacity() {",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(u32::MAX.as_usize() + 1);",
                "    }",
                "    ",
                "    #[should_panic]",
                "    #[test]",
                "    fn test_resize_exceeding_stateid_limit() {",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(u32::MAX.as_usize() + 2);",
                "    }"
              ],
              "code": [
                "{",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(u32::MAX.as_usize() + 2);",
                "    #[should_panic]",
                "    #[test]",
                "    fn test_resize_exceeding_capacity() {",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(u32::MAX.as_usize() + 1);",
                "    }",
                "    ",
                "    #[should_panic]",
                "    #[test]",
                "    fn test_resize_exceeding_stateid_limit() {",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.resize(u32::MAX.as_usize() + 2);",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}