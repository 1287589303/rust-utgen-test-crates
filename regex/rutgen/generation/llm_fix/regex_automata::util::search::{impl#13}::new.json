{
  "name": "regex_automata::util::search::{impl#13}::new",
  "mod_info": {
    "name": "util::search",
    "loc": "regex-automata/src/util/mod.rs:53:1:53:23"
  },
  "visible": true,
  "loc": "regex-automata/src/util/search.rs:1017:5:1021:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: span.start <= span.end at line 1019 is true, with bound span.start == span.end\n",
        "expected return value/type: Match { pattern, span }\n"
      ],
      "input_infer": "pattern: PatternID in valid range; span.start and span.end both in range [0, MAX_USIZE] with span.start <= span.end.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern = PatternID(0);",
                "    let span = Span { start: 5, end: 5 };",
                "    let m = Match::new(pattern, span);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(m.pattern(), pattern);",
                "    assert_eq!(m.start(), span.start);",
                "    assert_eq!(m.end(), span.end);",
                "    assert!(m.is_empty());",
                "    assert_eq!(m.len(), 0);",
                "    assert_eq!(m.range(), 5..5);",
                "    assert_eq!(m.span(), span);"
              ],
              "code": [
                "{",
                "    let pattern = PatternID(0);",
                "    let span = Span { start: 5, end: 5 };",
                "    let m = Match::new(pattern, span);",
                "    assert_eq!(m.pattern(), pattern);",
                "    assert_eq!(m.start(), span.start);",
                "    assert_eq!(m.end(), span.end);",
                "    assert!(m.is_empty());",
                "    assert_eq!(m.len(), 0);",
                "    assert_eq!(m.range(), 5..5);",
                "    assert_eq!(m.span(), span);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern = PatternID(1);",
                "    let span = Span { start: 0, end: 0 };",
                "    let m = Match::new(pattern, span);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(m.pattern, pattern);",
                "    assert_eq!(m.span.start, span.start);",
                "    assert_eq!(m.span.end, span.end);",
                "    assert!(m.is_empty());",
                "    assert_eq!(m.len(), 0);",
                "    assert_eq!(m.range(), 0..0);"
              ],
              "code": [
                "{",
                "    let pattern = PatternID(1);",
                "    let span = Span { start: 0, end: 0 };",
                "    let m = Match::new(pattern, span);",
                "    assert_eq!(m.pattern, pattern);",
                "    assert_eq!(m.span.start, span.start);",
                "    assert_eq!(m.span.end, span.end);",
                "    assert!(m.is_empty());",
                "    assert_eq!(m.len(), 0);",
                "    assert_eq!(m.range(), 0..0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern = PatternID(2);",
                "    let span = Span { start: 1, end: 10 };",
                "    let m = Match::new(pattern, span);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(m.pattern(), pattern);",
                "    assert_eq!(m.start(), span.start);",
                "    assert_eq!(m.end(), span.end);",
                "    assert!(!m.is_empty());",
                "    assert_eq!(m.len(), span.end - span.start);",
                "    assert_eq!(m.span(), span);",
                "    assert_eq!(m.range(), span.start..span.end);"
              ],
              "code": [
                "{",
                "    let pattern = PatternID(2);",
                "    let span = Span { start: 1, end: 10 };",
                "    let m = Match::new(pattern, span);",
                "    assert_eq!(m.pattern(), pattern);",
                "    assert_eq!(m.start(), span.start);",
                "    assert_eq!(m.end(), span.end);",
                "    assert!(!m.is_empty());",
                "    assert_eq!(m.len(), span.end - span.start);",
                "    assert_eq!(m.span(), span);",
                "    assert_eq!(m.range(), span.start..span.end);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern = PatternID(3);",
                "    let span = 3..3;",
                "    let m = Match::new(pattern, span);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(m.pattern, pattern);",
                "    assert_eq!(m.span.start, span.start);",
                "    assert_eq!(m.span.end, span.end);",
                "    assert!(m.is_empty());",
                "    assert_eq!(m.len(), 0);",
                "    assert_eq!(m.range(), 3..3);"
              ],
              "code": [
                "{",
                "    let pattern = PatternID(3);",
                "    let span = 3..3;",
                "    let m = Match::new(pattern, span);",
                "    assert_eq!(m.pattern, pattern);",
                "    assert_eq!(m.span.start, span.start);",
                "    assert_eq!(m.span.end, span.end);",
                "    assert!(m.is_empty());",
                "    assert_eq!(m.len(), 0);",
                "    assert_eq!(m.range(), 3..3);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern = PatternID(4);",
                "    let span = 0..100;",
                "    let m = Match::new(pattern, span);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(m.pattern(), PatternID(4));",
                "    assert_eq!(m.start(), 0);",
                "    assert_eq!(m.end(), 100);",
                "    assert_eq!(m.range(), 0..100);",
                "    assert_eq!(m.span(), Span { start: 0, end: 100 });",
                "    assert!(!m.is_empty());",
                "    assert_eq!(m.len(), 100);"
              ],
              "code": [
                "{",
                "    let pattern = PatternID(4);",
                "    let span = 0..100;",
                "    let m = Match::new(pattern, span);",
                "    assert_eq!(m.pattern(), PatternID(4));",
                "    assert_eq!(m.start(), 0);",
                "    assert_eq!(m.end(), 100);",
                "    assert_eq!(m.range(), 0..100);",
                "    assert_eq!(m.span(), Span { start: 0, end: 100 });",
                "    assert!(!m.is_empty());",
                "    assert_eq!(m.len(), 100);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: span.start <= span.end at line 1019 is false\n"
      ],
      "input_infer": "pattern: PatternID (valid instances), span: Start and end values where start > end (e.g., start: 5, end: 4)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let pattern = PatternID(0);",
                "    let span = Span { start: 5, end: 4 };",
                "    Match::new(pattern, span);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| {",
                "    let pattern = PatternID(0);",
                "    let span = Span { start: 5, end: 4 };",
                "    Match::new(pattern, span);",
                "    }).is_err());"
              ],
              "code": [
                "{",
                "    let pattern = PatternID(0);",
                "    let span = Span { start: 5, end: 4 };",
                "    Match::new(pattern, span);",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let pattern = PatternID(0);",
                "    let span = Span { start: 5, end: 4 };",
                "    Match::new(pattern, span);",
                "    }).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let pattern = PatternID(1);",
                "    let span = Span { start: 3, end: 2 };",
                "    Match::new(pattern, span);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Match::new(PatternID(1), Span { start: 3, end: 2 }), Err(\"invalid match span\"));"
              ],
              "code": [
                "{",
                "    let pattern = PatternID(1);",
                "    let span = Span { start: 3, end: 2 };",
                "    Match::new(pattern, span);",
                "    assert_eq!(Match::new(PatternID(1), Span { start: 3, end: 2 }), Err(\"invalid match span\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let pattern = PatternID(2);",
                "    let span = Span { start: 6, end: 6 };",
                "    Match::new(pattern, span);",
                "}"
              ],
              "oracle": [
                "    assert_panics(|| Match::new(PatternID(2), Span { start: 6, end: 6 }));"
              ],
              "code": [
                "{",
                "    let pattern = PatternID(2);",
                "    let span = Span { start: 6, end: 6 };",
                "    Match::new(pattern, span);",
                "    assert_panics(|| Match::new(PatternID(2), Span { start: 6, end: 6 }));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}