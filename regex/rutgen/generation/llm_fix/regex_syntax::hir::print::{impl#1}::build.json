{
  "name": "regex_syntax::hir::print::{impl#1}::build",
  "mod_info": {
    "name": "hir::print",
    "loc": "regex-syntax/src/hir/mod.rs:43:1:43:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/hir/print.rs:36:5:38:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Printer { _priv: () }\n"
      ],
      "input_infer": "Input conditions: valid instance of PrinterBuilder created by calling new() to ensure the build method can be invoked appropriately.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let builder = PrinterBuilder::new();",
                "    let printer = builder.build();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(printer, Printer { _priv: () });"
              ],
              "code": [
                "{",
                "    let builder = PrinterBuilder::new();",
                "    let printer = builder.build();",
                "    assert_eq!(printer, Printer { _priv: () });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let builder = PrinterBuilder::new();",
                "    let printer1 = builder.build();",
                "    let printer2 = builder.build();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(printer1, Printer { _priv: () });",
                "    assert_eq!(printer2, Printer { _priv: () });"
              ],
              "code": [
                "{",
                "    let builder = PrinterBuilder::new();",
                "    let printer1 = builder.build();",
                "    let printer2 = builder.build();",
                "    assert_eq!(printer1, Printer { _priv: () });",
                "    assert_eq!(printer2, Printer { _priv: () });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let builder = PrinterBuilder::new();",
                "    let printer1 = builder.build();",
                "    let printer2 = builder.build();",
                "    let printer3 = builder.build();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(printer1, Printer { _priv: () });",
                "    assert_eq!(printer2, Printer { _priv: () });",
                "    assert_eq!(printer3, Printer { _priv: () });"
              ],
              "code": [
                "{",
                "    let builder = PrinterBuilder::new();",
                "    let printer1 = builder.build();",
                "    let printer2 = builder.build();",
                "    let printer3 = builder.build();",
                "    assert_eq!(printer1, Printer { _priv: () });",
                "    assert_eq!(printer2, Printer { _priv: () });",
                "    assert_eq!(printer3, Printer { _priv: () });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}