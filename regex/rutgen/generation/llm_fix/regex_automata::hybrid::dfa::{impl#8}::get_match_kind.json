{
  "name": "regex_automata::hybrid::dfa::{impl#8}::get_match_kind",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/dfa.rs:3715:5:3717:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "valid match_kind values: MatchKind::All, MatchKind::LeftmostFirst; invalid match_kind values: None; return type: MatchKind; test with match_kind field set to None and test with match_kind field set to both valid options.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::default();",
                "    let _result = config.get_match_kind();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_match_kind(), MatchKind::LeftmostFirst);"
              ],
              "code": [
                "{",
                "    let config = Config::default();",
                "    let _result = config.get_match_kind();",
                "    assert_eq!(config.get_match_kind(), MatchKind::LeftmostFirst);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().match_kind(MatchKind::All);",
                "    let _result = config.get_match_kind();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, MatchKind::All);",
                "    let config = Config::new();",
                "    let _result = config.get_match_kind();",
                "    assert_eq!(_result, MatchKind::LeftmostFirst);"
              ],
              "code": [
                "{",
                "    let config = Config::new().match_kind(MatchKind::All);",
                "    let _result = config.get_match_kind();",
                "    assert_eq!(_result, MatchKind::All);",
                "    let config = Config::new();",
                "    let _result = config.get_match_kind();",
                "    assert_eq!(_result, MatchKind::LeftmostFirst);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().match_kind(MatchKind::LeftmostFirst);",
                "    let _result = config.get_match_kind();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, MatchKind::LeftmostFirst);"
              ],
              "code": [
                "{",
                "    let config = Config::new().match_kind(MatchKind::LeftmostFirst);",
                "    let _result = config.get_match_kind();",
                "    assert_eq!(_result, MatchKind::LeftmostFirst);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}