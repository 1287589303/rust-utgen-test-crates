{
  "name": "regex_syntax::hir::{impl#26}::look",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": false,
  "loc": "regex-syntax/src/hir/mod.rs:2471:5:2500:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Properties(Box::new(inner))\n"
      ],
      "input_infer": "Look values within the range of defined Look enum variants (0 to 17) inclusive\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Properties::look(Look::Start);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.minimum_len, Some(0));",
                "    assert_eq!(result.maximum_len, Some(0));",
                "    assert!(result.look_set.contains(Look::Start));",
                "    assert!(result.look_set_prefix.contains(Look::Start));",
                "    assert!(result.look_set_suffix.contains(Look::Start));",
                "    assert!(result.look_set_prefix_any.contains(Look::Start));",
                "    assert!(result.look_set_suffix_any.contains(Look::Start));",
                "    assert!(result.utf8);",
                "    assert_eq!(result.explicit_captures_len, 0);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "    assert!(!result.literal);",
                "    assert!(!result.alternation_literal);"
              ],
              "code": [
                "{",
                "    let result = Properties::look(Look::Start);",
                "    assert_eq!(result.minimum_len, Some(0));",
                "    assert_eq!(result.maximum_len, Some(0));",
                "    assert!(result.look_set.contains(Look::Start));",
                "    assert!(result.look_set_prefix.contains(Look::Start));",
                "    assert!(result.look_set_suffix.contains(Look::Start));",
                "    assert!(result.look_set_prefix_any.contains(Look::Start));",
                "    assert!(result.look_set_suffix_any.contains(Look::Start));",
                "    assert!(result.utf8);",
                "    assert_eq!(result.explicit_captures_len, 0);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "    assert!(!result.literal);",
                "    assert!(!result.alternation_literal);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Properties::look(Look::End);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.minimum_len, Some(0));",
                "    assert_eq!(result.maximum_len, Some(0));",
                "    assert!(result.look_set.contains(Look::End));",
                "    assert!(result.look_set_prefix.contains(Look::End));",
                "    assert!(result.look_set_suffix.contains(Look::End));",
                "    assert!(result.look_set_prefix_any.contains(Look::End));",
                "    assert!(result.look_set_suffix_any.contains(Look::End));",
                "    assert!(result.utf8);",
                "    assert_eq!(result.explicit_captures_len, 0);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "    assert!(!result.literal);",
                "    assert!(!result.alternation_literal);"
              ],
              "code": [
                "{",
                "    let result = Properties::look(Look::End);",
                "    assert_eq!(result.minimum_len, Some(0));",
                "    assert_eq!(result.maximum_len, Some(0));",
                "    assert!(result.look_set.contains(Look::End));",
                "    assert!(result.look_set_prefix.contains(Look::End));",
                "    assert!(result.look_set_suffix.contains(Look::End));",
                "    assert!(result.look_set_prefix_any.contains(Look::End));",
                "    assert!(result.look_set_suffix_any.contains(Look::End));",
                "    assert!(result.utf8);",
                "    assert_eq!(result.explicit_captures_len, 0);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "    assert!(!result.literal);",
                "    assert!(!result.alternation_literal);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Properties::look(Look::StartLF);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.minimum_len, Some(0));",
                "    assert_eq!(result.maximum_len, Some(0));",
                "    assert!(result.look_set.contains(Look::StartLF));",
                "    assert!(result.look_set_prefix.contains(Look::StartLF));",
                "    assert!(result.look_set_suffix.contains(Look::StartLF));",
                "    assert!(result.look_set_prefix_any.contains(Look::StartLF));",
                "    assert!(result.look_set_suffix_any.contains(Look::StartLF));",
                "    assert!(result.utf8);",
                "    assert_eq!(result.explicit_captures_len, 0);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "    assert!(!result.literal);",
                "    assert!(!result.alternation_literal);"
              ],
              "code": [
                "{",
                "    let result = Properties::look(Look::StartLF);",
                "    assert_eq!(result.minimum_len, Some(0));",
                "    assert_eq!(result.maximum_len, Some(0));",
                "    assert!(result.look_set.contains(Look::StartLF));",
                "    assert!(result.look_set_prefix.contains(Look::StartLF));",
                "    assert!(result.look_set_suffix.contains(Look::StartLF));",
                "    assert!(result.look_set_prefix_any.contains(Look::StartLF));",
                "    assert!(result.look_set_suffix_any.contains(Look::StartLF));",
                "    assert!(result.utf8);",
                "    assert_eq!(result.explicit_captures_len, 0);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "    assert!(!result.literal);",
                "    assert!(!result.alternation_literal);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Properties::look(Look::EndLF);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.minimum_len, Some(0));",
                "    assert_eq!(result.maximum_len, Some(0));",
                "    assert!(result.look_set.contains(Look::EndLF));",
                "    assert!(result.look_set_prefix.contains(Look::EndLF));",
                "    assert!(result.look_set_suffix.contains(Look::EndLF));",
                "    assert!(result.look_set_prefix_any.contains(Look::EndLF));",
                "    assert!(result.look_set_suffix_any.contains(Look::EndLF));",
                "    assert!(result.utf8);",
                "    assert_eq!(result.explicit_captures_len, 0);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "    assert!(!result.literal);",
                "    assert!(!result.alternation_literal);"
              ],
              "code": [
                "{",
                "    let result = Properties::look(Look::EndLF);",
                "    assert_eq!(result.minimum_len, Some(0));",
                "    assert_eq!(result.maximum_len, Some(0));",
                "    assert!(result.look_set.contains(Look::EndLF));",
                "    assert!(result.look_set_prefix.contains(Look::EndLF));",
                "    assert!(result.look_set_suffix.contains(Look::EndLF));",
                "    assert!(result.look_set_prefix_any.contains(Look::EndLF));",
                "    assert!(result.look_set_suffix_any.contains(Look::EndLF));",
                "    assert!(result.utf8);",
                "    assert_eq!(result.explicit_captures_len, 0);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "    assert!(!result.literal);",
                "    assert!(!result.alternation_literal);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Properties::look(Look::StartCRLF);",
                "}"
              ],
              "oracle": [
                "    let expected = Properties(Box::new(PropertiesI { minimum_len: Some(0), maximum_len: Some(0), look_set: LookSet::singleton(Look::StartCRLF), look_set_prefix: LookSet::singleton(Look::StartCRLF), look_set_suffix: LookSet::singleton(Look::StartCRLF), look_set_prefix_any: LookSet::singleton(Look::StartCRLF), look_set_suffix_any: LookSet::singleton(Look::StartCRLF), utf8: true, explicit_captures_len: 0, static_explicit_captures_len: Some(0), literal: false, alternation_literal: false }));",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let result = Properties::look(Look::StartCRLF);",
                "    let expected = Properties(Box::new(PropertiesI { minimum_len: Some(0), maximum_len: Some(0), look_set: LookSet::singleton(Look::StartCRLF), look_set_prefix: LookSet::singleton(Look::StartCRLF), look_set_suffix: LookSet::singleton(Look::StartCRLF), look_set_prefix_any: LookSet::singleton(Look::StartCRLF), look_set_suffix_any: LookSet::singleton(Look::StartCRLF), utf8: true, explicit_captures_len: 0, static_explicit_captures_len: Some(0), literal: false, alternation_literal: false }));",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Properties::look(Look::EndCRLF);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Properties::look(Look::EndCRLF));",
                "    assert!(result.0.minimum_len.is_some());",
                "    assert_eq!(result.0.minimum_len, Some(0));",
                "    assert!(result.0.maximum_len.is_some());",
                "    assert_eq!(result.0.maximum_len, Some(0));",
                "    assert!(!result.0.literal);",
                "    assert!(!result.0.alternation_literal);",
                "    assert!(result.0.utf8);",
                "    assert_eq!(result.0.explicit_captures_len, 0);",
                "    assert_eq!(result.0.static_explicit_captures_len, Some(0));",
                "    assert_eq!(result.0.look_set.len(), 1);",
                "    assert!(result.0.look_set.contains(Look::EndCRLF));",
                "    assert!(result.0.look_set_prefix.contains(Look::EndCRLF));",
                "    assert!(result.0.look_set_suffix.contains(Look::EndCRLF));",
                "    assert!(result.0.look_set_prefix_any.contains(Look::EndCRLF));",
                "    assert!(result.0.look_set_suffix_any.contains(Look::EndCRLF));"
              ],
              "code": [
                "{",
                "    let result = Properties::look(Look::EndCRLF);",
                "    assert_eq!(result, Properties::look(Look::EndCRLF));",
                "    assert!(result.0.minimum_len.is_some());",
                "    assert_eq!(result.0.minimum_len, Some(0));",
                "    assert!(result.0.maximum_len.is_some());",
                "    assert_eq!(result.0.maximum_len, Some(0));",
                "    assert!(!result.0.literal);",
                "    assert!(!result.0.alternation_literal);",
                "    assert!(result.0.utf8);",
                "    assert_eq!(result.0.explicit_captures_len, 0);",
                "    assert_eq!(result.0.static_explicit_captures_len, Some(0));",
                "    assert_eq!(result.0.look_set.len(), 1);",
                "    assert!(result.0.look_set.contains(Look::EndCRLF));",
                "    assert!(result.0.look_set_prefix.contains(Look::EndCRLF));",
                "    assert!(result.0.look_set_suffix.contains(Look::EndCRLF));",
                "    assert!(result.0.look_set_prefix_any.contains(Look::EndCRLF));",
                "    assert!(result.0.look_set_suffix_any.contains(Look::EndCRLF));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Properties::look(Look::WordAscii);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.minimum_len, Some(0));",
                "    assert_eq!(result.maximum_len, Some(0));",
                "    assert!(result.look_set.contains(Look::WordAscii));",
                "    assert!(result.look_set_prefix.contains(Look::WordAscii));",
                "    assert!(result.look_set_suffix.contains(Look::WordAscii));",
                "    assert!(result.look_set_prefix_any.contains(Look::WordAscii));",
                "    assert!(result.look_set_suffix_any.contains(Look::WordAscii));",
                "    assert!(result.utf8);",
                "    assert_eq!(result.explicit_captures_len, 0);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "    assert!(!result.literal);",
                "    assert!(!result.alternation_literal);"
              ],
              "code": [
                "{",
                "    let result = Properties::look(Look::WordAscii);",
                "    assert_eq!(result.minimum_len, Some(0));",
                "    assert_eq!(result.maximum_len, Some(0));",
                "    assert!(result.look_set.contains(Look::WordAscii));",
                "    assert!(result.look_set_prefix.contains(Look::WordAscii));",
                "    assert!(result.look_set_suffix.contains(Look::WordAscii));",
                "    assert!(result.look_set_prefix_any.contains(Look::WordAscii));",
                "    assert!(result.look_set_suffix_any.contains(Look::WordAscii));",
                "    assert!(result.utf8);",
                "    assert_eq!(result.explicit_captures_len, 0);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "    assert!(!result.literal);",
                "    assert!(!result.alternation_literal);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Properties::look(Look::WordAsciiNegate);",
                "}"
              ],
              "oracle": [
                "    let expected = Properties(Box::new(PropertiesI {",
                "    minimum_len: Some(0),",
                "    maximum_len: Some(0),",
                "    look_set: LookSet::singleton(Look::WordAsciiNegate),",
                "    look_set_prefix: LookSet::singleton(Look::WordAsciiNegate),",
                "    look_set_suffix: LookSet::singleton(Look::WordAsciiNegate),",
                "    look_set_prefix_any: LookSet::singleton(Look::WordAsciiNegate),",
                "    look_set_suffix_any: LookSet::singleton(Look::WordAsciiNegate),",
                "    utf8: true,",
                "    explicit_captures_len: 0,",
                "    static_explicit_captures_len: Some(0),",
                "    literal: false,",
                "    alternation_literal: false,",
                "    }));",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let result = Properties::look(Look::WordAsciiNegate);",
                "    let expected = Properties(Box::new(PropertiesI {",
                "    minimum_len: Some(0),",
                "    maximum_len: Some(0),",
                "    look_set: LookSet::singleton(Look::WordAsciiNegate),",
                "    look_set_prefix: LookSet::singleton(Look::WordAsciiNegate),",
                "    look_set_suffix: LookSet::singleton(Look::WordAsciiNegate),",
                "    look_set_prefix_any: LookSet::singleton(Look::WordAsciiNegate),",
                "    look_set_suffix_any: LookSet::singleton(Look::WordAsciiNegate),",
                "    utf8: true,",
                "    explicit_captures_len: 0,",
                "    static_explicit_captures_len: Some(0),",
                "    literal: false,",
                "    alternation_literal: false,",
                "    }));",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Properties::look(Look::WordUnicode);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.0.minimum_len, Some(0));",
                "    assert_eq!(result.0.maximum_len, Some(0));",
                "    assert!(result.0.look_set.contains(Look::WordUnicode));",
                "    assert!(result.0.look_set_prefix.contains(Look::WordUnicode));",
                "    assert!(result.0.look_set_suffix.contains(Look::WordUnicode));",
                "    assert!(result.0.look_set_prefix_any.contains(Look::WordUnicode));",
                "    assert!(result.0.look_set_suffix_any.contains(Look::WordUnicode));",
                "    assert!(result.0.utf8);",
                "    assert_eq!(result.0.explicit_captures_len, 0);",
                "    assert_eq!(result.0.static_explicit_captures_len, Some(0));",
                "    assert!(!result.0.literal);",
                "    assert!(!result.0.alternation_literal);"
              ],
              "code": [
                "{",
                "    let result = Properties::look(Look::WordUnicode);",
                "    assert_eq!(result.0.minimum_len, Some(0));",
                "    assert_eq!(result.0.maximum_len, Some(0));",
                "    assert!(result.0.look_set.contains(Look::WordUnicode));",
                "    assert!(result.0.look_set_prefix.contains(Look::WordUnicode));",
                "    assert!(result.0.look_set_suffix.contains(Look::WordUnicode));",
                "    assert!(result.0.look_set_prefix_any.contains(Look::WordUnicode));",
                "    assert!(result.0.look_set_suffix_any.contains(Look::WordUnicode));",
                "    assert!(result.0.utf8);",
                "    assert_eq!(result.0.explicit_captures_len, 0);",
                "    assert_eq!(result.0.static_explicit_captures_len, Some(0));",
                "    assert!(!result.0.literal);",
                "    assert!(!result.0.alternation_literal);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Properties::look(Look::WordUnicodeNegate);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.0.minimum_len, Some(0));",
                "    assert_eq!(result.0.maximum_len, Some(0));",
                "    assert!(result.0.look_set.contains(Look::WordUnicodeNegate));",
                "    assert!(result.0.look_set_prefix.contains(Look::WordUnicodeNegate));",
                "    assert!(result.0.look_set_suffix.contains(Look::WordUnicodeNegate));",
                "    assert!(result.0.look_set_prefix_any.contains(Look::WordUnicodeNegate));",
                "    assert!(result.0.look_set_suffix_any.contains(Look::WordUnicodeNegate));",
                "    assert!(result.0.utf8);",
                "    assert_eq!(result.0.explicit_captures_len, 0);",
                "    assert_eq!(result.0.static_explicit_captures_len, Some(0));",
                "    assert!(!result.0.literal);",
                "    assert!(!result.0.alternation_literal);"
              ],
              "code": [
                "{",
                "    let result = Properties::look(Look::WordUnicodeNegate);",
                "    assert_eq!(result.0.minimum_len, Some(0));",
                "    assert_eq!(result.0.maximum_len, Some(0));",
                "    assert!(result.0.look_set.contains(Look::WordUnicodeNegate));",
                "    assert!(result.0.look_set_prefix.contains(Look::WordUnicodeNegate));",
                "    assert!(result.0.look_set_suffix.contains(Look::WordUnicodeNegate));",
                "    assert!(result.0.look_set_prefix_any.contains(Look::WordUnicodeNegate));",
                "    assert!(result.0.look_set_suffix_any.contains(Look::WordUnicodeNegate));",
                "    assert!(result.0.utf8);",
                "    assert_eq!(result.0.explicit_captures_len, 0);",
                "    assert_eq!(result.0.static_explicit_captures_len, Some(0));",
                "    assert!(!result.0.literal);",
                "    assert!(!result.0.alternation_literal);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Properties::look(Look::WordStartAscii);",
                "}"
              ],
              "oracle": [
                "    assert!(result == Properties(Box::new(PropertiesI { minimum_len: Some(0), maximum_len: Some(0), look_set: LookSet::singleton(Look::WordStartAscii), look_set_prefix: LookSet::singleton(Look::WordStartAscii), look_set_suffix: LookSet::singleton(Look::WordStartAscii), look_set_prefix_any: LookSet::singleton(Look::WordStartAscii), look_set_suffix_any: LookSet::singleton(Look::WordStartAscii), utf8: true, explicit_captures_len: 0, static_explicit_captures_len: Some(0), literal: false, alternation_literal: false })));"
              ],
              "code": [
                "{",
                "    let result = Properties::look(Look::WordStartAscii);",
                "    assert!(result == Properties(Box::new(PropertiesI { minimum_len: Some(0), maximum_len: Some(0), look_set: LookSet::singleton(Look::WordStartAscii), look_set_prefix: LookSet::singleton(Look::WordStartAscii), look_set_suffix: LookSet::singleton(Look::WordStartAscii), look_set_prefix_any: LookSet::singleton(Look::WordStartAscii), look_set_suffix_any: LookSet::singleton(Look::WordStartAscii), utf8: true, explicit_captures_len: 0, static_explicit_captures_len: Some(0), literal: false, alternation_literal: false })));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Properties::look(Look::WordEndAscii);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.minimum_len, Some(0));",
                "    assert_eq!(result.maximum_len, Some(0));",
                "    assert!(result.look_set.contains(Look::WordEndAscii));",
                "    assert!(result.look_set_prefix.contains(Look::WordEndAscii));",
                "    assert!(result.look_set_suffix.contains(Look::WordEndAscii));",
                "    assert!(result.look_set_prefix_any.contains(Look::WordEndAscii));",
                "    assert!(result.look_set_suffix_any.contains(Look::WordEndAscii));",
                "    assert!(result.utf8);",
                "    assert_eq!(result.explicit_captures_len, 0);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "    assert!(!result.literal);",
                "    assert!(!result.alternation_literal);"
              ],
              "code": [
                "{",
                "    let result = Properties::look(Look::WordEndAscii);",
                "    assert_eq!(result.minimum_len, Some(0));",
                "    assert_eq!(result.maximum_len, Some(0));",
                "    assert!(result.look_set.contains(Look::WordEndAscii));",
                "    assert!(result.look_set_prefix.contains(Look::WordEndAscii));",
                "    assert!(result.look_set_suffix.contains(Look::WordEndAscii));",
                "    assert!(result.look_set_prefix_any.contains(Look::WordEndAscii));",
                "    assert!(result.look_set_suffix_any.contains(Look::WordEndAscii));",
                "    assert!(result.utf8);",
                "    assert_eq!(result.explicit_captures_len, 0);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "    assert!(!result.literal);",
                "    assert!(!result.alternation_literal);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Properties::look(Look::WordStartUnicode);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Properties(Box::new(PropertiesI { minimum_len: Some(0), maximum_len: Some(0), look_set: LookSet::singleton(Look::WordStartUnicode), look_set_prefix: LookSet::singleton(Look::WordStartUnicode), look_set_suffix: LookSet::singleton(Look::WordStartUnicode), look_set_prefix_any: LookSet::singleton(Look::WordStartUnicode), look_set_suffix_any: LookSet::singleton(Look::WordStartUnicode), utf8: true, explicit_captures_len: 0, static_explicit_captures_len: Some(0), literal: false, alternation_literal: false })));"
              ],
              "code": [
                "{",
                "    let result = Properties::look(Look::WordStartUnicode);",
                "    assert_eq!(result, Properties(Box::new(PropertiesI { minimum_len: Some(0), maximum_len: Some(0), look_set: LookSet::singleton(Look::WordStartUnicode), look_set_prefix: LookSet::singleton(Look::WordStartUnicode), look_set_suffix: LookSet::singleton(Look::WordStartUnicode), look_set_prefix_any: LookSet::singleton(Look::WordStartUnicode), look_set_suffix_any: LookSet::singleton(Look::WordStartUnicode), utf8: true, explicit_captures_len: 0, static_explicit_captures_len: Some(0), literal: false, alternation_literal: false })));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Properties::look(Look::WordEndUnicode);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Properties(Box::new(PropertiesI {",
                "    minimum_len: Some(0),",
                "    maximum_len: Some(0),",
                "    look_set: LookSet::singleton(Look::WordEndUnicode),",
                "    look_set_prefix: LookSet::singleton(Look::WordEndUnicode),",
                "    look_set_suffix: LookSet::singleton(Look::WordEndUnicode),",
                "    look_set_prefix_any: LookSet::singleton(Look::WordEndUnicode),",
                "    look_set_suffix_any: LookSet::singleton(Look::WordEndUnicode),",
                "    utf8: true,",
                "    explicit_captures_len: 0,",
                "    static_explicit_captures_len: Some(0),",
                "    literal: false,",
                "    alternation_literal: false,",
                "    })));"
              ],
              "code": [
                "{",
                "    let result = Properties::look(Look::WordEndUnicode);",
                "    assert_eq!(result, Properties(Box::new(PropertiesI {",
                "    minimum_len: Some(0),",
                "    maximum_len: Some(0),",
                "    look_set: LookSet::singleton(Look::WordEndUnicode),",
                "    look_set_prefix: LookSet::singleton(Look::WordEndUnicode),",
                "    look_set_suffix: LookSet::singleton(Look::WordEndUnicode),",
                "    look_set_prefix_any: LookSet::singleton(Look::WordEndUnicode),",
                "    look_set_suffix_any: LookSet::singleton(Look::WordEndUnicode),",
                "    utf8: true,",
                "    explicit_captures_len: 0,",
                "    static_explicit_captures_len: Some(0),",
                "    literal: false,",
                "    alternation_literal: false,",
                "    })));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Properties::look(Look::WordStartHalfAscii);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.minimum_len, Some(0));",
                "    assert_eq!(result.maximum_len, Some(0));",
                "    assert!(result.look_set.contains(Look::WordStartHalfAscii));",
                "    assert!(result.look_set_prefix.contains(Look::WordStartHalfAscii));",
                "    assert!(result.look_set_suffix.contains(Look::WordStartHalfAscii));",
                "    assert!(result.look_set_prefix_any.contains(Look::WordStartHalfAscii));",
                "    assert!(result.look_set_suffix_any.contains(Look::WordStartHalfAscii));",
                "    assert!(result.utf8);",
                "    assert_eq!(result.explicit_captures_len, 0);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "    assert!(!result.literal);",
                "    assert!(!result.alternation_literal);"
              ],
              "code": [
                "{",
                "    let result = Properties::look(Look::WordStartHalfAscii);",
                "    assert_eq!(result.minimum_len, Some(0));",
                "    assert_eq!(result.maximum_len, Some(0));",
                "    assert!(result.look_set.contains(Look::WordStartHalfAscii));",
                "    assert!(result.look_set_prefix.contains(Look::WordStartHalfAscii));",
                "    assert!(result.look_set_suffix.contains(Look::WordStartHalfAscii));",
                "    assert!(result.look_set_prefix_any.contains(Look::WordStartHalfAscii));",
                "    assert!(result.look_set_suffix_any.contains(Look::WordStartHalfAscii));",
                "    assert!(result.utf8);",
                "    assert_eq!(result.explicit_captures_len, 0);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "    assert!(!result.literal);",
                "    assert!(!result.alternation_literal);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Properties::look(Look::WordEndHalfAscii);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.minimum_len, Some(0));",
                "    assert_eq!(result.maximum_len, Some(0));",
                "    assert!(result.look_set.contains(Look::WordEndHalfAscii));",
                "    assert!(result.look_set_prefix.contains(Look::WordEndHalfAscii));",
                "    assert!(result.look_set_suffix.contains(Look::WordEndHalfAscii));",
                "    assert!(result.look_set_prefix_any.contains(Look::WordEndHalfAscii));",
                "    assert!(result.look_set_suffix_any.contains(Look::WordEndHalfAscii));",
                "    assert!(result.utf8);",
                "    assert_eq!(result.explicit_captures_len, 0);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "    assert!(!result.literal);",
                "    assert!(!result.alternation_literal);"
              ],
              "code": [
                "{",
                "    let result = Properties::look(Look::WordEndHalfAscii);",
                "    assert_eq!(result.minimum_len, Some(0));",
                "    assert_eq!(result.maximum_len, Some(0));",
                "    assert!(result.look_set.contains(Look::WordEndHalfAscii));",
                "    assert!(result.look_set_prefix.contains(Look::WordEndHalfAscii));",
                "    assert!(result.look_set_suffix.contains(Look::WordEndHalfAscii));",
                "    assert!(result.look_set_prefix_any.contains(Look::WordEndHalfAscii));",
                "    assert!(result.look_set_suffix_any.contains(Look::WordEndHalfAscii));",
                "    assert!(result.utf8);",
                "    assert_eq!(result.explicit_captures_len, 0);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "    assert!(!result.literal);",
                "    assert!(!result.alternation_literal);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Properties::look(Look::WordStartHalfUnicode);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.minimum_len, Some(0));",
                "    assert_eq!(result.maximum_len, Some(0));",
                "    assert!(result.look_set.contains(Look::WordStartHalfUnicode));",
                "    assert!(result.look_set_prefix.contains(Look::WordStartHalfUnicode));",
                "    assert!(result.look_set_suffix.contains(Look::WordStartHalfUnicode));",
                "    assert!(result.look_set_prefix_any.contains(Look::WordStartHalfUnicode));",
                "    assert!(result.look_set_suffix_any.contains(Look::WordStartHalfUnicode));",
                "    assert!(result.utf8);",
                "    assert_eq!(result.explicit_captures_len, 0);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "    assert!(!result.literal);",
                "    assert!(!result.alternation_literal);"
              ],
              "code": [
                "{",
                "    let result = Properties::look(Look::WordStartHalfUnicode);",
                "    assert_eq!(result.minimum_len, Some(0));",
                "    assert_eq!(result.maximum_len, Some(0));",
                "    assert!(result.look_set.contains(Look::WordStartHalfUnicode));",
                "    assert!(result.look_set_prefix.contains(Look::WordStartHalfUnicode));",
                "    assert!(result.look_set_suffix.contains(Look::WordStartHalfUnicode));",
                "    assert!(result.look_set_prefix_any.contains(Look::WordStartHalfUnicode));",
                "    assert!(result.look_set_suffix_any.contains(Look::WordStartHalfUnicode));",
                "    assert!(result.utf8);",
                "    assert_eq!(result.explicit_captures_len, 0);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "    assert!(!result.literal);",
                "    assert!(!result.alternation_literal);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Properties::look(Look::WordEndHalfUnicode);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Properties(Box::new(PropertiesI { minimum_len: Some(0), maximum_len: Some(0), look_set: LookSet::singleton(Look::WordEndHalfUnicode), look_set_prefix: LookSet::singleton(Look::WordEndHalfUnicode), look_set_suffix: LookSet::singleton(Look::WordEndHalfUnicode), look_set_prefix_any: LookSet::singleton(Look::WordEndHalfUnicode), look_set_suffix_any: LookSet::singleton(Look::WordEndHalfUnicode), utf8: true, explicit_captures_len: 0, static_explicit_captures_len: Some(0), literal: false, alternation_literal: false })));"
              ],
              "code": [
                "{",
                "    let result = Properties::look(Look::WordEndHalfUnicode);",
                "    assert_eq!(result, Properties(Box::new(PropertiesI { minimum_len: Some(0), maximum_len: Some(0), look_set: LookSet::singleton(Look::WordEndHalfUnicode), look_set_prefix: LookSet::singleton(Look::WordEndHalfUnicode), look_set_suffix: LookSet::singleton(Look::WordEndHalfUnicode), look_set_prefix_any: LookSet::singleton(Look::WordEndHalfUnicode), look_set_suffix_any: LookSet::singleton(Look::WordEndHalfUnicode), utf8: true, explicit_captures_len: 0, static_explicit_captures_len: Some(0), literal: false, alternation_literal: false })));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}