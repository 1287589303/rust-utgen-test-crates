{
  "name": "regex_syntax::hir::translate::{impl#3}::unwrap_alternation_pipe",
  "mod_info": {
    "name": "hir::translate",
    "loc": "regex-syntax/src/hir/mod.rs:44:1:44:19"
  },
  "visible": false,
  "loc": "regex-syntax/src/hir/translate.rs:315:5:325:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches HirFrame::AlternationBranch at line 317 is false\n",
        "precondition: self matches _ at line 318 is true\n"
      ],
      "input_infer": "HirFrame variants other than AlternationBranch, ensuring not to match HirFrame::AlternationBranch.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let frame = HirFrame::Expr(Hir { kind: HirKind::default(), props: Properties::default() });",
                "    frame.unwrap_alternation_pipe();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(std::panic::catch_unwind(|| {",
                "    let frame = HirFrame::Expr(Hir { kind: HirKind::default(), props: Properties::default() });",
                "    frame.unwrap_alternation_pipe();",
                "    }).is_err(), true);"
              ],
              "code": [
                "{",
                "    let frame = HirFrame::Expr(Hir { kind: HirKind::default(), props: Properties::default() });",
                "    frame.unwrap_alternation_pipe();",
                "    assert_eq!(std::panic::catch_unwind(|| {",
                "    let frame = HirFrame::Expr(Hir { kind: HirKind::default(), props: Properties::default() });",
                "    frame.unwrap_alternation_pipe();",
                "    }).is_err(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let frame = HirFrame::Literal(vec![b'a']);",
                "    frame.unwrap_alternation_pipe();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(std::panic::catch_unwind(|| { let frame = HirFrame::Literal(vec![b'a']); frame.unwrap_alternation_pipe(); }).is_err(), true);"
              ],
              "code": [
                "{",
                "    let frame = HirFrame::Literal(vec![b'a']);",
                "    frame.unwrap_alternation_pipe();",
                "    assert_eq!(std::panic::catch_unwind(|| { let frame = HirFrame::Literal(vec![b'a']); frame.unwrap_alternation_pipe(); }).is_err(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let frame = HirFrame::Repetition;",
                "    frame.unwrap_alternation_pipe();",
                "}"
              ],
              "oracle": [
                "    panic!(\"tried to unwrap alt pipe from HirFrame, got: {:?}\", HirFrame::Repetition);"
              ],
              "code": [
                "{",
                "    let frame = HirFrame::Repetition;",
                "    frame.unwrap_alternation_pipe();",
                "    panic!(\"tried to unwrap alt pipe from HirFrame, got: {:?}\", HirFrame::Repetition);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let flags = Flags::default();",
                "    let frame = HirFrame::Group { old_flags: flags };",
                "    frame.unwrap_alternation_pipe();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(std::panic::catch_unwind(|| {",
                "    let flags = Flags::default();",
                "    let frame = HirFrame::Group { old_flags: flags };",
                "    frame.unwrap_alternation_pipe();",
                "    }).is_err(), true);"
              ],
              "code": [
                "{",
                "    let flags = Flags::default();",
                "    let frame = HirFrame::Group { old_flags: flags };",
                "    frame.unwrap_alternation_pipe();",
                "    assert_eq!(std::panic::catch_unwind(|| {",
                "    let flags = Flags::default();",
                "    let frame = HirFrame::Group { old_flags: flags };",
                "    frame.unwrap_alternation_pipe();",
                "    }).is_err(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let frame = HirFrame::Concat;",
                "    frame.unwrap_alternation_pipe();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(std::panic::catch_unwind(|| { HirFrame::Concat.unwrap_alternation_pipe(); }).is_err(), true);",
                "    assert!(std::panic::catch_unwind(|| { HirFrame::Concat.unwrap_alternation_pipe(); }).is_err());",
                "    assert!(std::panic::panic_any(\"tried to unwrap alt pipe from HirFrame, got: {:?}\", HirFrame::Concat).is_err());",
                "    assert!(matches!(std::panic::catch_unwind(|| { HirFrame::Concat.unwrap_alternation_pipe(); }), Err(_)));",
                "    assert!(std::panic::catch_unwind(|| { HirFrame::Concat.unwrap_alternation_pipe(); }).is_err());"
              ],
              "code": [
                "{",
                "    let frame = HirFrame::Concat;",
                "    frame.unwrap_alternation_pipe();",
                "    assert_eq!(std::panic::catch_unwind(|| { HirFrame::Concat.unwrap_alternation_pipe(); }).is_err(), true);",
                "    assert!(std::panic::catch_unwind(|| { HirFrame::Concat.unwrap_alternation_pipe(); }).is_err());",
                "    assert!(std::panic::panic_any(\"tried to unwrap alt pipe from HirFrame, got: {:?}\", HirFrame::Concat).is_err());",
                "    assert!(matches!(std::panic::catch_unwind(|| { HirFrame::Concat.unwrap_alternation_pipe(); }), Err(_)));",
                "    assert!(std::panic::catch_unwind(|| { HirFrame::Concat.unwrap_alternation_pipe(); }).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let frame = HirFrame::Alternation;",
                "    frame.unwrap_alternation_pipe();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(std::panic::catch_unwind(|| {",
                "    let frame = HirFrame::Alternation;",
                "    frame.unwrap_alternation_pipe();",
                "    }).is_err(), true);"
              ],
              "code": [
                "{",
                "    let frame = HirFrame::Alternation;",
                "    frame.unwrap_alternation_pipe();",
                "    assert_eq!(std::panic::catch_unwind(|| {",
                "    let frame = HirFrame::Alternation;",
                "    frame.unwrap_alternation_pipe();",
                "    }).is_err(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let class_unicode = hir::ClassUnicode { span: Span::default(), negated: false, kind: ClassUnicodeKind::default() };",
                "    let frame = HirFrame::ClassUnicode(class_unicode);",
                "    frame.unwrap_alternation_pipe();",
                "}"
              ],
              "oracle": [
                "    #[should_panic]",
                "    #[test]",
                "    fn test_hir_frame_unwrap_alternation_pipe_wrong_type() {",
                "    let flags = Flags::default();",
                "    let frame = HirFrame::Group { old_flags: flags };",
                "    frame.unwrap_alternation_pipe();",
                "    }",
                "    ",
                "    #[should_panic]",
                "    #[test]",
                "    fn test_hir_frame_unwrap_alternation_pipe_literal() {",
                "    let frame = HirFrame::Literal(vec![b'a']);",
                "    frame.unwrap_alternation_pipe();",
                "    }",
                "    ",
                "    #[should_panic]",
                "    #[test]",
                "    fn test_hir_frame_unwrap_alternation_pipe_repetition() {",
                "    let frame = HirFrame::Repetition;",
                "    frame.unwrap_alternation_pipe();",
                "    }",
                "    ",
                "    #[should_panic]",
                "    #[test]",
                "    fn test_hir_frame_unwrap_alternation_pipe_concat() {",
                "    let frame = HirFrame::Concat;",
                "    frame.unwrap_alternation_pipe();",
                "    }",
                "    ",
                "    #[should_panic]",
                "    #[test]",
                "    fn test_hir_frame_unwrap_alternation_pipe_class_bytes() {",
                "    let class_bytes = hir::ClassBytes { set: IntervalSet::default() };",
                "    let frame = HirFrame::ClassBytes(class_bytes);",
                "    frame.unwrap_alternation_pipe();",
                "    }"
              ],
              "code": [
                "{",
                "    let class_unicode = hir::ClassUnicode { span: Span::default(), negated: false, kind: ClassUnicodeKind::default() };",
                "    let frame = HirFrame::ClassUnicode(class_unicode);",
                "    frame.unwrap_alternation_pipe();",
                "    #[should_panic]",
                "    #[test]",
                "    fn test_hir_frame_unwrap_alternation_pipe_wrong_type() {",
                "    let flags = Flags::default();",
                "    let frame = HirFrame::Group { old_flags: flags };",
                "    frame.unwrap_alternation_pipe();",
                "    }",
                "    ",
                "    #[should_panic]",
                "    #[test]",
                "    fn test_hir_frame_unwrap_alternation_pipe_literal() {",
                "    let frame = HirFrame::Literal(vec![b'a']);",
                "    frame.unwrap_alternation_pipe();",
                "    }",
                "    ",
                "    #[should_panic]",
                "    #[test]",
                "    fn test_hir_frame_unwrap_alternation_pipe_repetition() {",
                "    let frame = HirFrame::Repetition;",
                "    frame.unwrap_alternation_pipe();",
                "    }",
                "    ",
                "    #[should_panic]",
                "    #[test]",
                "    fn test_hir_frame_unwrap_alternation_pipe_concat() {",
                "    let frame = HirFrame::Concat;",
                "    frame.unwrap_alternation_pipe();",
                "    }",
                "    ",
                "    #[should_panic]",
                "    #[test]",
                "    fn test_hir_frame_unwrap_alternation_pipe_class_bytes() {",
                "    let class_bytes = hir::ClassBytes { set: IntervalSet::default() };",
                "    let frame = HirFrame::ClassBytes(class_bytes);",
                "    frame.unwrap_alternation_pipe();",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let class_bytes = hir::ClassBytes { set: IntervalSet::default() };",
                "    let frame = HirFrame::ClassBytes(class_bytes);",
                "    frame.unwrap_alternation_pipe();",
                "}"
              ],
              "oracle": [
                "    #[should_panic]",
                "    let frame_non_branch = HirFrame::ClassBytes(hir::ClassBytes { set: IntervalSet::default() });",
                "    frame_non_branch.unwrap_alternation_pipe();"
              ],
              "code": [
                "{",
                "    let class_bytes = hir::ClassBytes { set: IntervalSet::default() };",
                "    let frame = HirFrame::ClassBytes(class_bytes);",
                "    frame.unwrap_alternation_pipe();",
                "    #[should_panic]",
                "    let frame_non_branch = HirFrame::ClassBytes(hir::ClassBytes { set: IntervalSet::default() });",
                "    frame_non_branch.unwrap_alternation_pipe();",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches HirFrame::AlternationBranch at line 316 is true\n",
        "precondition: self matches HirFrame::AlternationBranch at line 316 is true\n"
      ],
      "input_infer": "self must be an instance of HirFrame::AlternationBranch.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let frame = HirFrame::AlternationBranch;",
                "    frame.unwrap_alternation_pipe();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(HirFrame::AlternationBranch.unwrap_alternation_pipe(), ());"
              ],
              "code": [
                "{",
                "    let frame = HirFrame::AlternationBranch;",
                "    frame.unwrap_alternation_pipe();",
                "    assert_eq!(HirFrame::AlternationBranch.unwrap_alternation_pipe(), ());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let frame = HirFrame::Expr(Hir { kind: HirKind::Literal, props: Properties::default() });",
                "    frame.unwrap_alternation_pipe();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(panic::catch_unwind(|| {",
                "    let frame = HirFrame::Expr(Hir { kind: HirKind::Literal, props: Properties::default() });",
                "    frame.unwrap_alternation_pipe();",
                "    }).is_err(), true);"
              ],
              "code": [
                "{",
                "    let frame = HirFrame::Expr(Hir { kind: HirKind::Literal, props: Properties::default() });",
                "    frame.unwrap_alternation_pipe();",
                "    assert_eq!(panic::catch_unwind(|| {",
                "    let frame = HirFrame::Expr(Hir { kind: HirKind::Literal, props: Properties::default() });",
                "    frame.unwrap_alternation_pipe();",
                "    }).is_err(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}