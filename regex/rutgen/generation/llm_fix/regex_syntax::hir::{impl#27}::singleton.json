{
  "name": "regex_syntax::hir::{impl#27}::singleton",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:2698:5:2700:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "look: any valid variant of the Look enum, ensuring full coverage of its values ranging from Look::Start (1 << 0) to Look::WordEndHalfUnicode (1 << 17)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = LookSet::singleton(Look::Start);",
                "}"
              ],
              "oracle": [
                "    result.assert_eq(LookSet::singleton(Look::Start));",
                "    result.assert_eq(LookSet::empty().insert(Look::Start));",
                "    result.assert_eq(result.len(), 1);",
                "    result.assert_eq(result.contains(Look::Start), true);",
                "    result.assert_eq(result.is_empty(), false);",
                "    result.assert_eq(result.contains_anchor(), false);",
                "    result.assert_eq(result.contains_word(), false);",
                "    result.assert_eq(result.contains_word_ascii(), false);",
                "    result.assert_eq(result.contains_word_unicode(), false);"
              ],
              "code": [
                "{",
                "    let result = LookSet::singleton(Look::Start);",
                "    result.assert_eq(LookSet::singleton(Look::Start));",
                "    result.assert_eq(LookSet::empty().insert(Look::Start));",
                "    result.assert_eq(result.len(), 1);",
                "    result.assert_eq(result.contains(Look::Start), true);",
                "    result.assert_eq(result.is_empty(), false);",
                "    result.assert_eq(result.contains_anchor(), false);",
                "    result.assert_eq(result.contains_word(), false);",
                "    result.assert_eq(result.contains_word_ascii(), false);",
                "    result.assert_eq(result.contains_word_unicode(), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = LookSet::singleton(Look::End);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.bits, Look::End as u32);",
                "    assert!(result.contains(Look::End));",
                "    assert!(result.len() == 1);",
                "    assert!(!result.is_empty());",
                "    assert!(!result.contains(Look::Start));",
                "    assert!(!result.contains_word());",
                "    assert!(!result.contains_word_ascii());",
                "    assert!(!result.contains_word_unicode());",
                "    assert!(!result.contains_anchor());",
                "    assert!(!result.contains_anchor_haystack());",
                "    assert!(!result.contains_anchor_line());",
                "    assert!(!result.contains_anchor_lf());",
                "    assert!(!result.contains_anchor_crlf());"
              ],
              "code": [
                "{",
                "    let result = LookSet::singleton(Look::End);",
                "    assert_eq!(result.bits, Look::End as u32);",
                "    assert!(result.contains(Look::End));",
                "    assert!(result.len() == 1);",
                "    assert!(!result.is_empty());",
                "    assert!(!result.contains(Look::Start));",
                "    assert!(!result.contains_word());",
                "    assert!(!result.contains_word_ascii());",
                "    assert!(!result.contains_word_unicode());",
                "    assert!(!result.contains_anchor());",
                "    assert!(!result.contains_anchor_haystack());",
                "    assert!(!result.contains_anchor_line());",
                "    assert!(!result.contains_anchor_lf());",
                "    assert!(!result.contains_anchor_crlf());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = LookSet::singleton(Look::StartLF);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.len(), 1);",
                "    assert!(result.contains(Look::StartLF));",
                "    assert!(!result.is_empty());",
                "    assert!(result.contains_anchor());",
                "    assert!(!result.contains_word());",
                "    assert!(!result.contains_word_unicode());",
                "    assert!(!result.contains_word_ascii());"
              ],
              "code": [
                "{",
                "    let result = LookSet::singleton(Look::StartLF);",
                "    assert_eq!(result.len(), 1);",
                "    assert!(result.contains(Look::StartLF));",
                "    assert!(!result.is_empty());",
                "    assert!(result.contains_anchor());",
                "    assert!(!result.contains_word());",
                "    assert!(!result.contains_word_unicode());",
                "    assert!(!result.contains_word_ascii());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = LookSet::singleton(Look::EndLF);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.bits, Look::EndLF as u32);",
                "    assert!(result.contains(Look::EndLF));",
                "    assert_eq!(result.len(), 1);",
                "    assert!(!result.is_empty());"
              ],
              "code": [
                "{",
                "    let result = LookSet::singleton(Look::EndLF);",
                "    assert_eq!(result.bits, Look::EndLF as u32);",
                "    assert!(result.contains(Look::EndLF));",
                "    assert_eq!(result.len(), 1);",
                "    assert!(!result.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = LookSet::singleton(Look::StartCRLF);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.len(), 1);",
                "    assert!(result.contains(Look::StartCRLF));",
                "    assert!(!result.contains(Look::Start));",
                "    assert!(!result.contains(Look::End));",
                "    assert!(result.contains_anchor_crlf());"
              ],
              "code": [
                "{",
                "    let result = LookSet::singleton(Look::StartCRLF);",
                "    assert_eq!(result.len(), 1);",
                "    assert!(result.contains(Look::StartCRLF));",
                "    assert!(!result.contains(Look::Start));",
                "    assert!(!result.contains(Look::End));",
                "    assert!(result.contains_anchor_crlf());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = LookSet::singleton(Look::EndCRLF);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.bits, Look::EndCRLF as u32);",
                "    assert!(result.contains(Look::EndCRLF));",
                "    assert_eq!(result.len(), 1);",
                "    assert!(!result.is_empty());",
                "    assert!(!result.contains(Look::Start));"
              ],
              "code": [
                "{",
                "    let result = LookSet::singleton(Look::EndCRLF);",
                "    assert_eq!(result.bits, Look::EndCRLF as u32);",
                "    assert!(result.contains(Look::EndCRLF));",
                "    assert_eq!(result.len(), 1);",
                "    assert!(!result.is_empty());",
                "    assert!(!result.contains(Look::Start));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = LookSet::singleton(Look::WordAscii);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.len(), 1);",
                "    assert!(result.contains(Look::WordAscii));",
                "    assert!(!result.is_empty());",
                "    assert!(!result.contains(Look::WordUnicode));",
                "    assert!(!result.contains(Look::Start));"
              ],
              "code": [
                "{",
                "    let result = LookSet::singleton(Look::WordAscii);",
                "    assert_eq!(result.len(), 1);",
                "    assert!(result.contains(Look::WordAscii));",
                "    assert!(!result.is_empty());",
                "    assert!(!result.contains(Look::WordUnicode));",
                "    assert!(!result.contains(Look::Start));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = LookSet::singleton(Look::WordAsciiNegate);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.bits, Look::WordAsciiNegate as u32);",
                "    assert!(result.contains(Look::WordAsciiNegate));",
                "    assert!(result.len() == 1);",
                "    assert!(!result.is_empty());",
                "    assert!(!result.contains_anchor());",
                "    assert!(!result.contains_word());",
                "    assert!(!result.contains_word_unicode());",
                "    assert!(result.contains_word_ascii());"
              ],
              "code": [
                "{",
                "    let result = LookSet::singleton(Look::WordAsciiNegate);",
                "    assert_eq!(result.bits, Look::WordAsciiNegate as u32);",
                "    assert!(result.contains(Look::WordAsciiNegate));",
                "    assert!(result.len() == 1);",
                "    assert!(!result.is_empty());",
                "    assert!(!result.contains_anchor());",
                "    assert!(!result.contains_word());",
                "    assert!(!result.contains_word_unicode());",
                "    assert!(result.contains_word_ascii());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = LookSet::singleton(Look::WordUnicode);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.len(), 1);",
                "    assert!(result.contains(Look::WordUnicode));",
                "    assert!(!result.contains(Look::Start));",
                "    assert!(!result.is_empty());",
                "    assert!(result.contains_word_unicode());",
                "    assert!(!result.contains_word_ascii());"
              ],
              "code": [
                "{",
                "    let result = LookSet::singleton(Look::WordUnicode);",
                "    assert_eq!(result.len(), 1);",
                "    assert!(result.contains(Look::WordUnicode));",
                "    assert!(!result.contains(Look::Start));",
                "    assert!(!result.is_empty());",
                "    assert!(result.contains_word_unicode());",
                "    assert!(!result.contains_word_ascii());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = LookSet::singleton(Look::WordUnicodeNegate);",
                "}"
              ],
              "oracle": [
                "    let expected_result = LookSet::empty().insert(Look::WordUnicodeNegate);",
                "    assert_eq!(result, expected_result);",
                "    assert!(result.contains(Look::WordUnicodeNegate));",
                "    assert!(!result.is_empty());",
                "    assert_eq!(result.len(), 1);",
                "    assert!(!result.contains(Look::WordAscii));"
              ],
              "code": [
                "{",
                "    let result = LookSet::singleton(Look::WordUnicodeNegate);",
                "    let expected_result = LookSet::empty().insert(Look::WordUnicodeNegate);",
                "    assert_eq!(result, expected_result);",
                "    assert!(result.contains(Look::WordUnicodeNegate));",
                "    assert!(!result.is_empty());",
                "    assert_eq!(result.len(), 1);",
                "    assert!(!result.contains(Look::WordAscii));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = LookSet::singleton(Look::WordStartAscii);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.bits, Look::WordStartAscii as u32);"
              ],
              "code": [
                "{",
                "    let result = LookSet::singleton(Look::WordStartAscii);",
                "    assert_eq!(result.bits, Look::WordStartAscii as u32);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = LookSet::singleton(Look::WordEndAscii);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.bits, Look::WordEndAscii as u32);",
                "    assert!(result.contains(Look::WordEndAscii));",
                "    assert!(!result.contains(Look::WordStartAscii));",
                "    assert!(result.len() == 1);",
                "    assert!(!result.is_empty());"
              ],
              "code": [
                "{",
                "    let result = LookSet::singleton(Look::WordEndAscii);",
                "    assert_eq!(result.bits, Look::WordEndAscii as u32);",
                "    assert!(result.contains(Look::WordEndAscii));",
                "    assert!(!result.contains(Look::WordStartAscii));",
                "    assert!(result.len() == 1);",
                "    assert!(!result.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = LookSet::singleton(Look::WordStartUnicode);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.bits, Look::WordStartUnicode as u32);",
                "    assert!(result.contains(Look::WordStartUnicode));",
                "    assert!(result.len() == 1);",
                "    assert!(!result.is_empty());"
              ],
              "code": [
                "{",
                "    let result = LookSet::singleton(Look::WordStartUnicode);",
                "    assert_eq!(result.bits, Look::WordStartUnicode as u32);",
                "    assert!(result.contains(Look::WordStartUnicode));",
                "    assert!(result.len() == 1);",
                "    assert!(!result.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = LookSet::singleton(Look::WordEndUnicode);",
                "}"
              ],
              "oracle": [
                "    let expected = LookSet { bits: Look::WordEndUnicode as u32 };",
                "    assert_eq!(result, expected);",
                "    let result_empty = LookSet::singleton(Look::empty());",
                "    assert!(result_empty.is_empty());",
                "    let result_full = LookSet::singleton(Look::full());",
                "    assert!(!result_full.is_empty());",
                "    assert!(result.contains(Look::WordEndUnicode));",
                "    assert!(!result.contains(Look::WordStartUnicode));"
              ],
              "code": [
                "{",
                "    let result = LookSet::singleton(Look::WordEndUnicode);",
                "    let expected = LookSet { bits: Look::WordEndUnicode as u32 };",
                "    assert_eq!(result, expected);",
                "    let result_empty = LookSet::singleton(Look::empty());",
                "    assert!(result_empty.is_empty());",
                "    let result_full = LookSet::singleton(Look::full());",
                "    assert!(!result_full.is_empty());",
                "    assert!(result.contains(Look::WordEndUnicode));",
                "    assert!(!result.contains(Look::WordStartUnicode));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = LookSet::singleton(Look::WordStartHalfAscii);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.bits, Look::WordStartHalfAscii as u32);"
              ],
              "code": [
                "{",
                "    let result = LookSet::singleton(Look::WordStartHalfAscii);",
                "    assert_eq!(result.bits, Look::WordStartHalfAscii as u32);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = LookSet::singleton(Look::WordEndHalfAscii);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.len(), 1);",
                "    assert!(!result.is_empty());",
                "    assert!(result.contains(Look::WordEndHalfAscii));",
                "    assert!(!result.contains(Look::WordStartHalfAscii));",
                "    assert!(!result.contains(Look::WordEndAscii));",
                "    assert!(!result.contains(Look::WordStartAscii));",
                "    assert!(!result.contains(Look::WordEndUnicode));",
                "    assert!(!result.contains(Look::WordStartUnicode));"
              ],
              "code": [
                "{",
                "    let result = LookSet::singleton(Look::WordEndHalfAscii);",
                "    assert_eq!(result.len(), 1);",
                "    assert!(!result.is_empty());",
                "    assert!(result.contains(Look::WordEndHalfAscii));",
                "    assert!(!result.contains(Look::WordStartHalfAscii));",
                "    assert!(!result.contains(Look::WordEndAscii));",
                "    assert!(!result.contains(Look::WordStartAscii));",
                "    assert!(!result.contains(Look::WordEndUnicode));",
                "    assert!(!result.contains(Look::WordStartUnicode));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = LookSet::singleton(Look::WordStartHalfUnicode);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.len(), 1);",
                "    assert!(!result.is_empty());",
                "    assert!(result.contains(Look::WordStartHalfUnicode));",
                "    assert!(!result.contains(Look::Start));",
                "    assert!(!result.contains(Look::End));"
              ],
              "code": [
                "{",
                "    let result = LookSet::singleton(Look::WordStartHalfUnicode);",
                "    assert_eq!(result.len(), 1);",
                "    assert!(!result.is_empty());",
                "    assert!(result.contains(Look::WordStartHalfUnicode));",
                "    assert!(!result.contains(Look::Start));",
                "    assert!(!result.contains(Look::End));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = LookSet::singleton(Look::WordEndHalfUnicode);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.len(), 1);",
                "    assert!(!result.is_empty());",
                "    assert!(result.contains(Look::WordEndHalfUnicode));",
                "    assert!(!result.contains(Look::WordStartHalfUnicode));",
                "    assert!(!result.contains(Look::WordStartHalfAscii));",
                "    assert!(!result.contains(Look::WordEndHalfAscii));",
                "    assert!(!result.contains(Look::WordStartUnicode));",
                "    assert!(!result.contains(Look::WordEndUnicode));",
                "    assert!(!result.contains(Look::WordAscii));",
                "    assert!(!result.contains(Look::WordUnicode));",
                "    assert!(!result.contains(Look::WordAsciiNegate));",
                "    assert!(!result.contains(Look::WordUnicodeNegate));",
                "    assert!(!result.contains(Look::Start));",
                "    assert!(!result.contains(Look::End));",
                "    assert!(!result.contains(Look::StartLF));",
                "    assert!(!result.contains(Look::EndLF));",
                "    assert!(!result.contains(Look::StartCRLF));",
                "    assert!(!result.contains(Look::EndCRLF));"
              ],
              "code": [
                "{",
                "    let result = LookSet::singleton(Look::WordEndHalfUnicode);",
                "    assert_eq!(result.len(), 1);",
                "    assert!(!result.is_empty());",
                "    assert!(result.contains(Look::WordEndHalfUnicode));",
                "    assert!(!result.contains(Look::WordStartHalfUnicode));",
                "    assert!(!result.contains(Look::WordStartHalfAscii));",
                "    assert!(!result.contains(Look::WordEndHalfAscii));",
                "    assert!(!result.contains(Look::WordStartUnicode));",
                "    assert!(!result.contains(Look::WordEndUnicode));",
                "    assert!(!result.contains(Look::WordAscii));",
                "    assert!(!result.contains(Look::WordUnicode));",
                "    assert!(!result.contains(Look::WordAsciiNegate));",
                "    assert!(!result.contains(Look::WordUnicodeNegate));",
                "    assert!(!result.contains(Look::Start));",
                "    assert!(!result.contains(Look::End));",
                "    assert!(!result.contains(Look::StartLF));",
                "    assert!(!result.contains(Look::EndLF));",
                "    assert!(!result.contains(Look::StartCRLF));",
                "    assert!(!result.contains(Look::EndCRLF));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}