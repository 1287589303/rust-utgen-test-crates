{
  "name": "regex_automata::util::wire::write_state_id",
  "mod_info": {
    "name": "util::wire",
    "loc": "regex-automata/src/util/mod.rs:46:1:46:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/wire.rs:663:1:669:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: StateID::SIZE\n"
      ],
      "input_infer": "StateID inputs ranging from minimum valid values to maximum valid values, and byte slices with lengths of at least StateID::SIZE (e.g., 4 bytes) to ensure no panic occurs in all relevant endian configurations.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct LittleEndian;",
                "    impl Endian for LittleEndian {",
                "        fn write_u32(value: u32, dst: &mut [u8]) {",
                "            dst.copy_from_slice(&value.to_le_bytes());",
                "        }",
                "    }",
                "",
                "    let state_id = StateID(0); // Minimum valid StateID",
                "    let mut buffer = [0u8; 4]; // At least StateID::SIZE",
                "    let written_bytes = write_state_id::<LittleEndian>(state_id, &mut buffer);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(written_bytes, StateID::SIZE);",
                "    assert_eq!(buffer, [0, 0, 0, 0]);"
              ],
              "code": [
                "{",
                "    struct LittleEndian;",
                "    impl Endian for LittleEndian {",
                "        fn write_u32(value: u32, dst: &mut [u8]) {",
                "            dst.copy_from_slice(&value.to_le_bytes());",
                "        }",
                "    }",
                "",
                "    let state_id = StateID(0); // Minimum valid StateID",
                "    let mut buffer = [0u8; 4]; // At least StateID::SIZE",
                "    let written_bytes = write_state_id::<LittleEndian>(state_id, &mut buffer);",
                "    assert_eq!(written_bytes, StateID::SIZE);",
                "    assert_eq!(buffer, [0, 0, 0, 0]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct BigEndian;",
                "    impl Endian for BigEndian {",
                "        fn write_u32(value: u32, dst: &mut [u8]) {",
                "            dst.copy_from_slice(&value.to_be_bytes());",
                "        }",
                "    }",
                "",
                "    let state_id = StateID(u32::MAX); // Maximum valid StateID",
                "    let mut buffer = [0u8; 4]; // At least StateID::SIZE",
                "    let written_bytes = write_state_id::<BigEndian>(state_id, &mut buffer);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(written_bytes, StateID::SIZE);",
                "    assert_eq!(buffer, u32::MAX.to_be_bytes());"
              ],
              "code": [
                "{",
                "    struct BigEndian;",
                "    impl Endian for BigEndian {",
                "        fn write_u32(value: u32, dst: &mut [u8]) {",
                "            dst.copy_from_slice(&value.to_be_bytes());",
                "        }",
                "    }",
                "",
                "    let state_id = StateID(u32::MAX); // Maximum valid StateID",
                "    let mut buffer = [0u8; 4]; // At least StateID::SIZE",
                "    let written_bytes = write_state_id::<BigEndian>(state_id, &mut buffer);",
                "    assert_eq!(written_bytes, StateID::SIZE);",
                "    assert_eq!(buffer, u32::MAX.to_be_bytes());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct LittleEndian;",
                "    impl Endian for LittleEndian {",
                "        fn write_u32(value: u32, dst: &mut [u8]) {",
                "            dst.copy_from_slice(&value.to_le_bytes());",
                "        }",
                "    }",
                "",
                "    let state_id = StateID(1); // A valid StateID just above minimum",
                "    let mut buffer = [0u8; 4]; // At least StateID::SIZE",
                "    let written_bytes = write_state_id::<LittleEndian>(state_id, &mut buffer);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(written_bytes, StateID::SIZE);",
                "    assert_eq!(&buffer, &[1, 0, 0, 0]);",
                "    let mut small_buffer = [0u8; 3];",
                "    let result = std::panic::catch_unwind(|| write_state_id::<LittleEndian>(state_id, &mut small_buffer));",
                "    assert!(result.is_err());",
                "    let state_id_zero = StateID(0);",
                "    let mut buffer_zero = [0u8; 4];",
                "    let written_bytes_zero = write_state_id::<LittleEndian>(state_id_zero, &mut buffer_zero);",
                "    assert_eq!(written_bytes_zero, StateID::SIZE);",
                "    assert_eq!(&buffer_zero, &[0, 0, 0, 0]);",
                "    let state_id_max = StateID(u32::MAX);",
                "    let mut buffer_max = [0u8; 4];",
                "    let written_bytes_max = write_state_id::<LittleEndian>(state_id_max, &mut buffer_max);",
                "    assert_eq!(written_bytes_max, StateID::SIZE);",
                "    assert_eq!(&buffer_max, &u32::MAX.to_le_bytes());",
                "    let empty_buffer: &mut [u8] = &mut [];",
                "    let result_empty = std::panic::catch_unwind(|| write_state_id::<LittleEndian>(state_id, empty_buffer));",
                "    assert!(result_empty.is_err());"
              ],
              "code": [
                "{",
                "    struct LittleEndian;",
                "    impl Endian for LittleEndian {",
                "        fn write_u32(value: u32, dst: &mut [u8]) {",
                "            dst.copy_from_slice(&value.to_le_bytes());",
                "        }",
                "    }",
                "",
                "    let state_id = StateID(1); // A valid StateID just above minimum",
                "    let mut buffer = [0u8; 4]; // At least StateID::SIZE",
                "    let written_bytes = write_state_id::<LittleEndian>(state_id, &mut buffer);",
                "    assert_eq!(written_bytes, StateID::SIZE);",
                "    assert_eq!(&buffer, &[1, 0, 0, 0]);",
                "    let mut small_buffer = [0u8; 3];",
                "    let result = std::panic::catch_unwind(|| write_state_id::<LittleEndian>(state_id, &mut small_buffer));",
                "    assert!(result.is_err());",
                "    let state_id_zero = StateID(0);",
                "    let mut buffer_zero = [0u8; 4];",
                "    let written_bytes_zero = write_state_id::<LittleEndian>(state_id_zero, &mut buffer_zero);",
                "    assert_eq!(written_bytes_zero, StateID::SIZE);",
                "    assert_eq!(&buffer_zero, &[0, 0, 0, 0]);",
                "    let state_id_max = StateID(u32::MAX);",
                "    let mut buffer_max = [0u8; 4];",
                "    let written_bytes_max = write_state_id::<LittleEndian>(state_id_max, &mut buffer_max);",
                "    assert_eq!(written_bytes_max, StateID::SIZE);",
                "    assert_eq!(&buffer_max, &u32::MAX.to_le_bytes());",
                "    let empty_buffer: &mut [u8] = &mut [];",
                "    let result_empty = std::panic::catch_unwind(|| write_state_id::<LittleEndian>(state_id, empty_buffer));",
                "    assert!(result_empty.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct BigEndian;",
                "    impl Endian for BigEndian {",
                "        fn write_u32(value: u32, dst: &mut [u8]) {",
                "            dst.copy_from_slice(&value.to_be_bytes());",
                "        }",
                "    }",
                "",
                "    let state_id = StateID(u32::MAX - 1); // Valid StateID just below maximum",
                "    let mut buffer = [0u8; 4]; // At least StateID::SIZE",
                "    let written_bytes = write_state_id::<BigEndian>(state_id, &mut buffer);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(written_bytes, StateID::SIZE);",
                "    assert_eq!(buffer, (u32::MAX - 1).to_be_bytes());"
              ],
              "code": [
                "{",
                "    struct BigEndian;",
                "    impl Endian for BigEndian {",
                "        fn write_u32(value: u32, dst: &mut [u8]) {",
                "            dst.copy_from_slice(&value.to_be_bytes());",
                "        }",
                "    }",
                "",
                "    let state_id = StateID(u32::MAX - 1); // Valid StateID just below maximum",
                "    let mut buffer = [0u8; 4]; // At least StateID::SIZE",
                "    let written_bytes = write_state_id::<BigEndian>(state_id, &mut buffer);",
                "    assert_eq!(written_bytes, StateID::SIZE);",
                "    assert_eq!(buffer, (u32::MAX - 1).to_be_bytes());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}