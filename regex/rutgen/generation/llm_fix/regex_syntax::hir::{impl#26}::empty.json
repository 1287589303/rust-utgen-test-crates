{
  "name": "regex_syntax::hir::{impl#26}::empty",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": false,
  "loc": "regex-syntax/src/hir/mod.rs:2397:5:2430:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Properties(Box::new(inner))\n"
      ],
      "input_infer": "minimum_len = 0, maximum_len = 0, look_set = LookSet::empty(), look_set_prefix = LookSet::empty(), look_set_suffix = LookSet::empty(), look_set_prefix_any = LookSet::empty(), look_set_suffix_any = LookSet::empty(), utf8 = true, explicit_captures_len = 0, static_explicit_captures_len = Some(0), literal = false, alternation_literal = false\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let properties = Properties::empty();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(properties.minimum_len, Some(0));",
                "    assert_eq!(properties.maximum_len, Some(0));",
                "    assert!(properties.look_set.is_empty());",
                "    assert!(properties.look_set_prefix.is_empty());",
                "    assert!(properties.look_set_suffix.is_empty());",
                "    assert!(properties.look_set_prefix_any.is_empty());",
                "    assert!(properties.look_set_suffix_any.is_empty());",
                "    assert!(properties.utf8);",
                "    assert_eq!(properties.explicit_captures_len, 0);",
                "    assert_eq!(properties.static_explicit_captures_len, Some(0));",
                "    assert!(!properties.literal);",
                "    assert!(!properties.alternation_literal);"
              ],
              "code": [
                "{",
                "    let properties = Properties::empty();",
                "    assert_eq!(properties.minimum_len, Some(0));",
                "    assert_eq!(properties.maximum_len, Some(0));",
                "    assert!(properties.look_set.is_empty());",
                "    assert!(properties.look_set_prefix.is_empty());",
                "    assert!(properties.look_set_suffix.is_empty());",
                "    assert!(properties.look_set_prefix_any.is_empty());",
                "    assert!(properties.look_set_suffix_any.is_empty());",
                "    assert!(properties.utf8);",
                "    assert_eq!(properties.explicit_captures_len, 0);",
                "    assert_eq!(properties.static_explicit_captures_len, Some(0));",
                "    assert!(!properties.literal);",
                "    assert!(!properties.alternation_literal);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let properties = Properties::empty();",
                "    let minimum_len = properties.0.minimum_len;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(minimum_len, Some(0));",
                "    assert_eq!(properties.0.maximum_len, Some(0));",
                "    assert!(properties.0.look_set.is_empty());",
                "    assert!(properties.0.look_set_prefix.is_empty());",
                "    assert!(properties.0.look_set_suffix.is_empty());",
                "    assert!(properties.0.look_set_prefix_any.is_empty());",
                "    assert!(properties.0.look_set_suffix_any.is_empty());",
                "    assert!(properties.0.utf8);",
                "    assert_eq!(properties.0.explicit_captures_len, 0);",
                "    assert_eq!(properties.0.static_explicit_captures_len, Some(0));",
                "    assert!(!properties.0.literal);",
                "    assert!(!properties.0.alternation_literal);"
              ],
              "code": [
                "{",
                "    let properties = Properties::empty();",
                "    let minimum_len = properties.0.minimum_len;",
                "    assert_eq!(minimum_len, Some(0));",
                "    assert_eq!(properties.0.maximum_len, Some(0));",
                "    assert!(properties.0.look_set.is_empty());",
                "    assert!(properties.0.look_set_prefix.is_empty());",
                "    assert!(properties.0.look_set_suffix.is_empty());",
                "    assert!(properties.0.look_set_prefix_any.is_empty());",
                "    assert!(properties.0.look_set_suffix_any.is_empty());",
                "    assert!(properties.0.utf8);",
                "    assert_eq!(properties.0.explicit_captures_len, 0);",
                "    assert_eq!(properties.0.static_explicit_captures_len, Some(0));",
                "    assert!(!properties.0.literal);",
                "    assert!(!properties.0.alternation_literal);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let properties = Properties::empty();",
                "    let maximum_len = properties.0.maximum_len;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(maximum_len, Some(0));",
                "    assert_eq!(properties.0.minimum_len, Some(0));",
                "    assert!(properties.0.look_set.is_empty());",
                "    assert!(properties.0.look_set_prefix.is_empty());",
                "    assert!(properties.0.look_set_suffix.is_empty());",
                "    assert!(properties.0.look_set_prefix_any.is_empty());",
                "    assert!(properties.0.look_set_suffix_any.is_empty());",
                "    assert!(properties.0.utf8);",
                "    assert_eq!(properties.0.explicit_captures_len, 0);",
                "    assert_eq!(properties.0.static_explicit_captures_len, Some(0));",
                "    assert!(!properties.0.literal);",
                "    assert!(!properties.0.alternation_literal);"
              ],
              "code": [
                "{",
                "    let properties = Properties::empty();",
                "    let maximum_len = properties.0.maximum_len;",
                "    assert_eq!(maximum_len, Some(0));",
                "    assert_eq!(properties.0.minimum_len, Some(0));",
                "    assert!(properties.0.look_set.is_empty());",
                "    assert!(properties.0.look_set_prefix.is_empty());",
                "    assert!(properties.0.look_set_suffix.is_empty());",
                "    assert!(properties.0.look_set_prefix_any.is_empty());",
                "    assert!(properties.0.look_set_suffix_any.is_empty());",
                "    assert!(properties.0.utf8);",
                "    assert_eq!(properties.0.explicit_captures_len, 0);",
                "    assert_eq!(properties.0.static_explicit_captures_len, Some(0));",
                "    assert!(!properties.0.literal);",
                "    assert!(!properties.0.alternation_literal);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let properties = Properties::empty();",
                "    let look_set = properties.0.look_set;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(properties.0.minimum_len, Some(0));",
                "    assert_eq!(properties.0.maximum_len, Some(0));",
                "    assert!(properties.0.look_set.is_empty());",
                "    assert!(properties.0.look_set_prefix.is_empty());",
                "    assert!(properties.0.look_set_suffix.is_empty());",
                "    assert!(properties.0.look_set_prefix_any.is_empty());",
                "    assert!(properties.0.look_set_suffix_any.is_empty());",
                "    assert_eq!(properties.0.utf8, true);",
                "    assert_eq!(properties.0.explicit_captures_len, 0);",
                "    assert_eq!(properties.0.static_explicit_captures_len, Some(0));",
                "    assert_eq!(properties.0.literal, false);",
                "    assert_eq!(properties.0.alternation_literal, false);"
              ],
              "code": [
                "{",
                "    let properties = Properties::empty();",
                "    let look_set = properties.0.look_set;",
                "    assert_eq!(properties.0.minimum_len, Some(0));",
                "    assert_eq!(properties.0.maximum_len, Some(0));",
                "    assert!(properties.0.look_set.is_empty());",
                "    assert!(properties.0.look_set_prefix.is_empty());",
                "    assert!(properties.0.look_set_suffix.is_empty());",
                "    assert!(properties.0.look_set_prefix_any.is_empty());",
                "    assert!(properties.0.look_set_suffix_any.is_empty());",
                "    assert_eq!(properties.0.utf8, true);",
                "    assert_eq!(properties.0.explicit_captures_len, 0);",
                "    assert_eq!(properties.0.static_explicit_captures_len, Some(0));",
                "    assert_eq!(properties.0.literal, false);",
                "    assert_eq!(properties.0.alternation_literal, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let properties = Properties::empty();",
                "    let look_set_prefix = properties.0.look_set_prefix;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(properties.0.minimum_len, Some(0));",
                "    assert_eq!(properties.0.maximum_len, Some(0));",
                "    assert!(properties.0.look_set.is_empty());",
                "    assert!(properties.0.look_set_prefix.is_empty());",
                "    assert!(properties.0.look_set_suffix.is_empty());",
                "    assert!(properties.0.look_set_prefix_any.is_empty());",
                "    assert!(properties.0.look_set_suffix_any.is_empty());",
                "    assert!(properties.0.utf8);",
                "    assert_eq!(properties.0.explicit_captures_len, 0);",
                "    assert_eq!(properties.0.static_explicit_captures_len, Some(0));",
                "    assert!(!properties.0.literal);",
                "    assert!(!properties.0.alternation_literal);"
              ],
              "code": [
                "{",
                "    let properties = Properties::empty();",
                "    let look_set_prefix = properties.0.look_set_prefix;",
                "    assert_eq!(properties.0.minimum_len, Some(0));",
                "    assert_eq!(properties.0.maximum_len, Some(0));",
                "    assert!(properties.0.look_set.is_empty());",
                "    assert!(properties.0.look_set_prefix.is_empty());",
                "    assert!(properties.0.look_set_suffix.is_empty());",
                "    assert!(properties.0.look_set_prefix_any.is_empty());",
                "    assert!(properties.0.look_set_suffix_any.is_empty());",
                "    assert!(properties.0.utf8);",
                "    assert_eq!(properties.0.explicit_captures_len, 0);",
                "    assert_eq!(properties.0.static_explicit_captures_len, Some(0));",
                "    assert!(!properties.0.literal);",
                "    assert!(!properties.0.alternation_literal);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let properties = Properties::empty();",
                "    let look_set_suffix = properties.0.look_set_suffix;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(properties.0.minimum_len, Some(0));",
                "    assert_eq!(properties.0.maximum_len, Some(0));",
                "    assert!(properties.0.look_set.is_empty());",
                "    assert!(properties.0.look_set_prefix.is_empty());",
                "    assert!(properties.0.look_set_suffix.is_empty());",
                "    assert!(properties.0.look_set_prefix_any.is_empty());",
                "    assert!(properties.0.look_set_suffix_any.is_empty());",
                "    assert!(properties.0.utf8);",
                "    assert_eq!(properties.0.explicit_captures_len, 0);",
                "    assert_eq!(properties.0.static_explicit_captures_len, Some(0));",
                "    assert!(!properties.0.literal);",
                "    assert!(!properties.0.alternation_literal);",
                "    assert_eq!(look_set_suffix, LookSet::empty());"
              ],
              "code": [
                "{",
                "    let properties = Properties::empty();",
                "    let look_set_suffix = properties.0.look_set_suffix;",
                "    assert_eq!(properties.0.minimum_len, Some(0));",
                "    assert_eq!(properties.0.maximum_len, Some(0));",
                "    assert!(properties.0.look_set.is_empty());",
                "    assert!(properties.0.look_set_prefix.is_empty());",
                "    assert!(properties.0.look_set_suffix.is_empty());",
                "    assert!(properties.0.look_set_prefix_any.is_empty());",
                "    assert!(properties.0.look_set_suffix_any.is_empty());",
                "    assert!(properties.0.utf8);",
                "    assert_eq!(properties.0.explicit_captures_len, 0);",
                "    assert_eq!(properties.0.static_explicit_captures_len, Some(0));",
                "    assert!(!properties.0.literal);",
                "    assert!(!properties.0.alternation_literal);",
                "    assert_eq!(look_set_suffix, LookSet::empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let properties = Properties::empty();",
                "    let look_set_prefix_any = properties.0.look_set_prefix_any;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(properties.0.minimum_len, Some(0));",
                "    assert_eq!(properties.0.maximum_len, Some(0));",
                "    assert!(properties.0.look_set == LookSet::empty());",
                "    assert!(properties.0.look_set_prefix == LookSet::empty());",
                "    assert!(properties.0.look_set_suffix == LookSet::empty());",
                "    assert!(properties.0.look_set_prefix_any == LookSet::empty());",
                "    assert!(properties.0.look_set_suffix_any == LookSet::empty());",
                "    assert!(properties.0.utf8);",
                "    assert_eq!(properties.0.explicit_captures_len, 0);",
                "    assert_eq!(properties.0.static_explicit_captures_len, Some(0));",
                "    assert!(!properties.0.literal);",
                "    assert!(!properties.0.alternation_literal);"
              ],
              "code": [
                "{",
                "    let properties = Properties::empty();",
                "    let look_set_prefix_any = properties.0.look_set_prefix_any;",
                "    assert_eq!(properties.0.minimum_len, Some(0));",
                "    assert_eq!(properties.0.maximum_len, Some(0));",
                "    assert!(properties.0.look_set == LookSet::empty());",
                "    assert!(properties.0.look_set_prefix == LookSet::empty());",
                "    assert!(properties.0.look_set_suffix == LookSet::empty());",
                "    assert!(properties.0.look_set_prefix_any == LookSet::empty());",
                "    assert!(properties.0.look_set_suffix_any == LookSet::empty());",
                "    assert!(properties.0.utf8);",
                "    assert_eq!(properties.0.explicit_captures_len, 0);",
                "    assert_eq!(properties.0.static_explicit_captures_len, Some(0));",
                "    assert!(!properties.0.literal);",
                "    assert!(!properties.0.alternation_literal);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let properties = Properties::empty();",
                "    let look_set_suffix_any = properties.0.look_set_suffix_any;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(properties.0.minimum_len, Some(0));",
                "    assert_eq!(properties.0.maximum_len, Some(0));",
                "    assert!(properties.0.look_set.is_empty());",
                "    assert!(properties.0.look_set_prefix.is_empty());",
                "    assert!(properties.0.look_set_suffix.is_empty());",
                "    assert!(properties.0.look_set_prefix_any.is_empty());",
                "    assert!(properties.0.look_set_suffix_any.is_empty());",
                "    assert!(properties.0.utf8);",
                "    assert_eq!(properties.0.explicit_captures_len, 0);",
                "    assert_eq!(properties.0.static_explicit_captures_len, Some(0));",
                "    assert!(!properties.0.literal);",
                "    assert!(!properties.0.alternation_literal);"
              ],
              "code": [
                "{",
                "    let properties = Properties::empty();",
                "    let look_set_suffix_any = properties.0.look_set_suffix_any;",
                "    assert_eq!(properties.0.minimum_len, Some(0));",
                "    assert_eq!(properties.0.maximum_len, Some(0));",
                "    assert!(properties.0.look_set.is_empty());",
                "    assert!(properties.0.look_set_prefix.is_empty());",
                "    assert!(properties.0.look_set_suffix.is_empty());",
                "    assert!(properties.0.look_set_prefix_any.is_empty());",
                "    assert!(properties.0.look_set_suffix_any.is_empty());",
                "    assert!(properties.0.utf8);",
                "    assert_eq!(properties.0.explicit_captures_len, 0);",
                "    assert_eq!(properties.0.static_explicit_captures_len, Some(0));",
                "    assert!(!properties.0.literal);",
                "    assert!(!properties.0.alternation_literal);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let properties = Properties::empty();",
                "    let utf8 = properties.0.utf8;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(properties.0.minimum_len, Some(0));",
                "    assert_eq!(properties.0.maximum_len, Some(0));",
                "    assert_eq!(properties.0.look_set.len(), 0);",
                "    assert_eq!(properties.0.look_set_prefix.len(), 0);",
                "    assert_eq!(properties.0.look_set_suffix.len(), 0);",
                "    assert_eq!(properties.0.look_set_prefix_any.len(), 0);",
                "    assert_eq!(properties.0.look_set_suffix_any.len(), 0);",
                "    assert!(properties.0.utf8);",
                "    assert_eq!(properties.0.explicit_captures_len, 0);",
                "    assert_eq!(properties.0.static_explicit_captures_len, Some(0));",
                "    assert!(!properties.0.literal);",
                "    assert!(!properties.0.alternation_literal);"
              ],
              "code": [
                "{",
                "    let properties = Properties::empty();",
                "    let utf8 = properties.0.utf8;",
                "    assert_eq!(properties.0.minimum_len, Some(0));",
                "    assert_eq!(properties.0.maximum_len, Some(0));",
                "    assert_eq!(properties.0.look_set.len(), 0);",
                "    assert_eq!(properties.0.look_set_prefix.len(), 0);",
                "    assert_eq!(properties.0.look_set_suffix.len(), 0);",
                "    assert_eq!(properties.0.look_set_prefix_any.len(), 0);",
                "    assert_eq!(properties.0.look_set_suffix_any.len(), 0);",
                "    assert!(properties.0.utf8);",
                "    assert_eq!(properties.0.explicit_captures_len, 0);",
                "    assert_eq!(properties.0.static_explicit_captures_len, Some(0));",
                "    assert!(!properties.0.literal);",
                "    assert!(!properties.0.alternation_literal);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let properties = Properties::empty();",
                "    let explicit_captures_len = properties.0.explicit_captures_len;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(explicit_captures_len, 0);",
                "    assert_eq!(properties.0.minimum_len, Some(0));",
                "    assert_eq!(properties.0.maximum_len, Some(0));",
                "    assert!(properties.0.look_set.is_empty());",
                "    assert!(properties.0.look_set_prefix.is_empty());",
                "    assert!(properties.0.look_set_suffix.is_empty());",
                "    assert!(properties.0.look_set_prefix_any.is_empty());",
                "    assert!(properties.0.look_set_suffix_any.is_empty());",
                "    assert!(properties.0.utf8);",
                "    assert!(!properties.0.literal);",
                "    assert!(!properties.0.alternation_literal);",
                "    assert_eq!(properties.0.static_explicit_captures_len, Some(0));"
              ],
              "code": [
                "{",
                "    let properties = Properties::empty();",
                "    let explicit_captures_len = properties.0.explicit_captures_len;",
                "    assert_eq!(explicit_captures_len, 0);",
                "    assert_eq!(properties.0.minimum_len, Some(0));",
                "    assert_eq!(properties.0.maximum_len, Some(0));",
                "    assert!(properties.0.look_set.is_empty());",
                "    assert!(properties.0.look_set_prefix.is_empty());",
                "    assert!(properties.0.look_set_suffix.is_empty());",
                "    assert!(properties.0.look_set_prefix_any.is_empty());",
                "    assert!(properties.0.look_set_suffix_any.is_empty());",
                "    assert!(properties.0.utf8);",
                "    assert!(!properties.0.literal);",
                "    assert!(!properties.0.alternation_literal);",
                "    assert_eq!(properties.0.static_explicit_captures_len, Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let properties = Properties::empty();",
                "    let static_explicit_captures_len = properties.0.static_explicit_captures_len;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Properties::empty().0.minimum_len, Some(0));",
                "    assert_eq!(Properties::empty().0.maximum_len, Some(0));",
                "    assert!(Properties::empty().0.look_set.is_empty());",
                "    assert!(Properties::empty().0.look_set_prefix.is_empty());",
                "    assert!(Properties::empty().0.look_set_suffix.is_empty());",
                "    assert!(Properties::empty().0.look_set_prefix_any.is_empty());",
                "    assert!(Properties::empty().0.look_set_suffix_any.is_empty());",
                "    assert!(Properties::empty().0.utf8);",
                "    assert_eq!(Properties::empty().0.explicit_captures_len, 0);",
                "    assert_eq!(Properties::empty().0.static_explicit_captures_len, Some(0));",
                "    assert!(!Properties::empty().0.literal);",
                "    assert!(!Properties::empty().0.alternation_literal);"
              ],
              "code": [
                "{",
                "    let properties = Properties::empty();",
                "    let static_explicit_captures_len = properties.0.static_explicit_captures_len;",
                "    assert_eq!(Properties::empty().0.minimum_len, Some(0));",
                "    assert_eq!(Properties::empty().0.maximum_len, Some(0));",
                "    assert!(Properties::empty().0.look_set.is_empty());",
                "    assert!(Properties::empty().0.look_set_prefix.is_empty());",
                "    assert!(Properties::empty().0.look_set_suffix.is_empty());",
                "    assert!(Properties::empty().0.look_set_prefix_any.is_empty());",
                "    assert!(Properties::empty().0.look_set_suffix_any.is_empty());",
                "    assert!(Properties::empty().0.utf8);",
                "    assert_eq!(Properties::empty().0.explicit_captures_len, 0);",
                "    assert_eq!(Properties::empty().0.static_explicit_captures_len, Some(0));",
                "    assert!(!Properties::empty().0.literal);",
                "    assert!(!Properties::empty().0.alternation_literal);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let properties = Properties::empty();",
                "    let literal = properties.0.literal;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(properties, Properties(Box::new(PropertiesI { minimum_len: Some(0), maximum_len: Some(0), look_set: LookSet::empty(), look_set_prefix: LookSet::empty(), look_set_suffix: LookSet::empty(), look_set_prefix_any: LookSet::empty(), look_set_suffix_any: LookSet::empty(), utf8: true, explicit_captures_len: 0, static_explicit_captures_len: Some(0), literal: false, alternation_literal: false })));",
                "    assert_eq!(literal, false);",
                "    assert!(properties.0.minimum_len.is_some() && properties.0.minimum_len.unwrap() == 0);",
                "    assert!(properties.0.maximum_len.is_some() && properties.0.maximum_len.unwrap() == 0);",
                "    assert!(properties.0.utf8);",
                "    assert_eq!(properties.0.explicit_captures_len, 0);",
                "    assert_eq!(properties.0.static_explicit_captures_len, Some(0));"
              ],
              "code": [
                "{",
                "    let properties = Properties::empty();",
                "    let literal = properties.0.literal;",
                "    assert_eq!(properties, Properties(Box::new(PropertiesI { minimum_len: Some(0), maximum_len: Some(0), look_set: LookSet::empty(), look_set_prefix: LookSet::empty(), look_set_suffix: LookSet::empty(), look_set_prefix_any: LookSet::empty(), look_set_suffix_any: LookSet::empty(), utf8: true, explicit_captures_len: 0, static_explicit_captures_len: Some(0), literal: false, alternation_literal: false })));",
                "    assert_eq!(literal, false);",
                "    assert!(properties.0.minimum_len.is_some() && properties.0.minimum_len.unwrap() == 0);",
                "    assert!(properties.0.maximum_len.is_some() && properties.0.maximum_len.unwrap() == 0);",
                "    assert!(properties.0.utf8);",
                "    assert_eq!(properties.0.explicit_captures_len, 0);",
                "    assert_eq!(properties.0.static_explicit_captures_len, Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let properties = Properties::empty();",
                "    let alternation_literal = properties.0.alternation_literal;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(properties.0.minimum_len, Some(0));",
                "    assert_eq!(properties.0.maximum_len, Some(0));",
                "    assert_eq!(properties.0.utf8, true);",
                "    assert_eq!(properties.0.explicit_captures_len, 0);",
                "    assert_eq!(properties.0.static_explicit_captures_len, Some(0));",
                "    assert_eq!(properties.0.literal, false);",
                "    assert_eq!(properties.0.alternation_literal, false);",
                "    assert!(properties.0.look_set.is_empty());",
                "    assert!(properties.0.look_set_prefix.is_empty());",
                "    assert!(properties.0.look_set_suffix.is_empty());",
                "    assert!(properties.0.look_set_prefix_any.is_empty());",
                "    assert!(properties.0.look_set_suffix_any.is_empty());"
              ],
              "code": [
                "{",
                "    let properties = Properties::empty();",
                "    let alternation_literal = properties.0.alternation_literal;",
                "    assert_eq!(properties.0.minimum_len, Some(0));",
                "    assert_eq!(properties.0.maximum_len, Some(0));",
                "    assert_eq!(properties.0.utf8, true);",
                "    assert_eq!(properties.0.explicit_captures_len, 0);",
                "    assert_eq!(properties.0.static_explicit_captures_len, Some(0));",
                "    assert_eq!(properties.0.literal, false);",
                "    assert_eq!(properties.0.alternation_literal, false);",
                "    assert!(properties.0.look_set.is_empty());",
                "    assert!(properties.0.look_set_prefix.is_empty());",
                "    assert!(properties.0.look_set_suffix.is_empty());",
                "    assert!(properties.0.look_set_prefix_any.is_empty());",
                "    assert!(properties.0.look_set_suffix_any.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}