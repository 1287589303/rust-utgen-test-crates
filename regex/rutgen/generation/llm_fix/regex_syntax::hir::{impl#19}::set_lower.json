{
  "name": "regex_syntax::hir::{impl#19}::set_lower",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:1536:5:1538:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "0 <= bound <= 255\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut range = ClassBytesRange::default();",
                "    range.set_lower(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(range.start, 0);"
              ],
              "code": [
                "{",
                "    let mut range = ClassBytesRange::default();",
                "    range.set_lower(0);",
                "    assert_eq!(range.start, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut range = ClassBytesRange::default();",
                "    range.set_lower(128);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(range.lower(), 128);",
                "    assert_eq!(range.start, 128);",
                "    assert!(range.upper() == 0);"
              ],
              "code": [
                "{",
                "    let mut range = ClassBytesRange::default();",
                "    range.set_lower(128);",
                "    assert_eq!(range.lower(), 128);",
                "    assert_eq!(range.start, 128);",
                "    assert!(range.upper() == 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut range = ClassBytesRange::default();",
                "    range.set_lower(255);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(range.lower(), 255);"
              ],
              "code": [
                "{",
                "    let mut range = ClassBytesRange::default();",
                "    range.set_lower(255);",
                "    assert_eq!(range.lower(), 255);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut range = ClassBytesRange::default();",
                "    range.set_lower(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(range.start, 1);"
              ],
              "code": [
                "{",
                "    let mut range = ClassBytesRange::default();",
                "    range.set_lower(1);",
                "    assert_eq!(range.start, 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut range = ClassBytesRange::default();",
                "    range.set_lower(254);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(range.lower(), 254);",
                "    assert_eq!(range.start, 254);"
              ],
              "code": [
                "{",
                "    let mut range = ClassBytesRange::default();",
                "    range.set_lower(254);",
                "    assert_eq!(range.lower(), 254);",
                "    assert_eq!(range.start, 254);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}