{
  "name": "regex_automata::nfa::thompson::compiler::{impl#4}::add_capture_end",
  "mod_info": {
    "name": "nfa::thompson::compiler",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:60:1:60:14"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/compiler.rs:1676:5:1681:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "capture_index must be a non-negative integer less than or equal to the number of capture groups in the current pattern; valid ranges include 0 to maximum capture group count (inclusive) or an invalid value to test error handling.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut compiler = Compiler {",
                "        parser: ParserBuilder::new(),",
                "        config: Config::default(),",
                "        builder: RefCell::new(Builder::new()),",
                "        utf8_state: RefCell::new(Utf8State::default()),",
                "        trie_state: RefCell::new(RangeTrie::default()),",
                "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
                "            version: 0,",
                "            capacity: 0,",
                "            map: Vec::new(),",
                "        }),",
                "    };",
                "    let _ = compiler.add_capture_end(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(compiler.add_capture_end(0).is_ok(), true);",
                "    assert_eq!(compiler.add_capture_end(0).unwrap(), StateID::ZERO);",
                "    assert!(matches!(compiler.add_capture_end(1), Err(BuildError::invalid_capture_index(1))));",
                "    assert!(matches!(compiler.add_capture_end(u32::MAX), Err(BuildError::invalid_capture_index(u32::MAX))));",
                "    assert_eq!(compiler.builder.borrow().pattern_len(), 1);"
              ],
              "code": [
                "{",
                "    let mut compiler = Compiler {",
                "        parser: ParserBuilder::new(),",
                "        config: Config::default(),",
                "        builder: RefCell::new(Builder::new()),",
                "        utf8_state: RefCell::new(Utf8State::default()),",
                "        trie_state: RefCell::new(RangeTrie::default()),",
                "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
                "            version: 0,",
                "            capacity: 0,",
                "            map: Vec::new(),",
                "        }),",
                "    };",
                "    let _ = compiler.add_capture_end(0);",
                "    assert_eq!(compiler.add_capture_end(0).is_ok(), true);",
                "    assert_eq!(compiler.add_capture_end(0).unwrap(), StateID::ZERO);",
                "    assert!(matches!(compiler.add_capture_end(1), Err(BuildError::invalid_capture_index(1))));",
                "    assert!(matches!(compiler.add_capture_end(u32::MAX), Err(BuildError::invalid_capture_index(u32::MAX))));",
                "    assert_eq!(compiler.builder.borrow().pattern_len(), 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut compiler = Compiler {",
                "        parser: ParserBuilder::new(),",
                "        config: Config::default(),",
                "        builder: RefCell::new(Builder::new()),",
                "        utf8_state: RefCell::new(Utf8State::default()),",
                "        trie_state: RefCell::new(RangeTrie::default()),",
                "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
                "            version: 0,",
                "            capacity: 0,",
                "            map: Vec::new(),",
                "        }),",
                "    };",
                "    compiler.builder.borrow_mut().start_pattern().unwrap();",
                "    let _ = compiler.add_capture_end(1);",
                "}"
              ],
              "oracle": [
                "    let compiler = Compiler {",
                "    parser: ParserBuilder::new(),",
                "    config: Config::default(),",
                "    builder: RefCell::new(Builder::new()),",
                "    utf8_state: RefCell::new(Utf8State::default()),",
                "    trie_state: RefCell::new(RangeTrie::default()),",
                "    utf8_suffix: RefCell::new(Utf8SuffixMap {",
                "    version: 0,",
                "    capacity: 0,",
                "    map: Vec::new(),",
                "    }),",
                "    };",
                "    let _ = compiler.builder.borrow_mut().start_pattern().unwrap();",
                "    let result = compiler.add_capture_end(1);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), StateID::ZERO);"
              ],
              "code": [
                "{",
                "    let mut compiler = Compiler {",
                "        parser: ParserBuilder::new(),",
                "        config: Config::default(),",
                "        builder: RefCell::new(Builder::new()),",
                "        utf8_state: RefCell::new(Utf8State::default()),",
                "        trie_state: RefCell::new(RangeTrie::default()),",
                "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
                "            version: 0,",
                "            capacity: 0,",
                "            map: Vec::new(),",
                "        }),",
                "    };",
                "    compiler.builder.borrow_mut().start_pattern().unwrap();",
                "    let _ = compiler.add_capture_end(1);",
                "    let compiler = Compiler {",
                "    parser: ParserBuilder::new(),",
                "    config: Config::default(),",
                "    builder: RefCell::new(Builder::new()),",
                "    utf8_state: RefCell::new(Utf8State::default()),",
                "    trie_state: RefCell::new(RangeTrie::default()),",
                "    utf8_suffix: RefCell::new(Utf8SuffixMap {",
                "    version: 0,",
                "    capacity: 0,",
                "    map: Vec::new(),",
                "    }),",
                "    };",
                "    let _ = compiler.builder.borrow_mut().start_pattern().unwrap();",
                "    let result = compiler.add_capture_end(1);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), StateID::ZERO);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut compiler = Compiler {",
                "        parser: ParserBuilder::new(),",
                "        config: Config::default(),",
                "        builder: RefCell::new(Builder::new()),",
                "        utf8_state: RefCell::new(Utf8State::default()),",
                "        trie_state: RefCell::new(RangeTrie::default()),",
                "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
                "            version: 0,",
                "            capacity: 0,",
                "            map: Vec::new(),",
                "        }),",
                "    };",
                "    let _ = compiler.add_capture_end(10); // Assuming 10 is out of bounds",
                "}"
              ],
              "oracle": [
                "    assert!(compiler.add_capture_end(10).is_err());",
                "    assert!(matches!(compiler.add_capture_end(0), Err(BuildError::invalid_capture_index(0))));",
                "    assert!(matches!(compiler.add_capture_end(u32::MAX), Err(BuildError::invalid_capture_index(u32::MAX))));",
                "    assert!(matches!(compiler.add_capture_end(1), Err(BuildError::invalid_capture_index(1))));",
                "    assert!(matches!(compiler.add_capture_end(5), Err(BuildError::invalid_capture_index(5))));"
              ],
              "code": [
                "{",
                "    let mut compiler = Compiler {",
                "        parser: ParserBuilder::new(),",
                "        config: Config::default(),",
                "        builder: RefCell::new(Builder::new()),",
                "        utf8_state: RefCell::new(Utf8State::default()),",
                "        trie_state: RefCell::new(RangeTrie::default()),",
                "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
                "            version: 0,",
                "            capacity: 0,",
                "            map: Vec::new(),",
                "        }),",
                "    };",
                "    let _ = compiler.add_capture_end(10); // Assuming 10 is out of bounds",
                "    assert!(compiler.add_capture_end(10).is_err());",
                "    assert!(matches!(compiler.add_capture_end(0), Err(BuildError::invalid_capture_index(0))));",
                "    assert!(matches!(compiler.add_capture_end(u32::MAX), Err(BuildError::invalid_capture_index(u32::MAX))));",
                "    assert!(matches!(compiler.add_capture_end(1), Err(BuildError::invalid_capture_index(1))));",
                "    assert!(matches!(compiler.add_capture_end(5), Err(BuildError::invalid_capture_index(5))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}