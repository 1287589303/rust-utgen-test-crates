{
  "name": "regex_automata::util::sparse_set::{impl#1}::len",
  "mod_info": {
    "name": "util::sparse_set",
    "loc": "regex-automata/src/util/mod.rs:55:1:55:27"
  },
  "visible": true,
  "loc": "regex-automata/src/util/sparse_set.rs:151:5:153:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.len\n"
      ],
      "input_infer": "capacity: 0 to MAX_STATE_ID, valid state IDs from 0 to MAX_STATE_ID, where MAX_STATE_ID is the maximum value representable by the StateID type\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let sparse_set = SparseSet::new(0);",
                "    let length = sparse_set.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(length, 0);"
              ],
              "code": [
                "{",
                "    let sparse_set = SparseSet::new(0);",
                "    let length = sparse_set.len();",
                "    assert_eq!(length, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.insert(StateID(1));",
                "    sparse_set.insert(StateID(2));",
                "    let length = sparse_set.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(length, 2);",
                "    assert_eq!(sparse_set.len(), length);",
                "    sparse_set.clear();",
                "    assert_eq!(sparse_set.len(), 0);",
                "    sparse_set.insert(StateID(3));",
                "    assert_eq!(sparse_set.len(), 1);"
              ],
              "code": [
                "{",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.insert(StateID(1));",
                "    sparse_set.insert(StateID(2));",
                "    let length = sparse_set.len();",
                "    assert_eq!(length, 2);",
                "    assert_eq!(sparse_set.len(), length);",
                "    sparse_set.clear();",
                "    assert_eq!(sparse_set.len(), 0);",
                "    sparse_set.insert(StateID(3));",
                "    assert_eq!(sparse_set.len(), 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.insert(StateID(1));",
                "    sparse_set.insert(StateID(2));",
                "    sparse_set.clear();",
                "    let length = sparse_set.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(length, 0);"
              ],
              "code": [
                "{",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.insert(StateID(1));",
                "    sparse_set.insert(StateID(2));",
                "    sparse_set.clear();",
                "    let length = sparse_set.len();",
                "    assert_eq!(length, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut sparse_set = SparseSet::new(5);",
                "    sparse_set.insert(StateID(0));",
                "    sparse_set.insert(StateID(4));",
                "    let length = sparse_set.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(length, 2);"
              ],
              "code": [
                "{",
                "    let mut sparse_set = SparseSet::new(5);",
                "    sparse_set.insert(StateID(0));",
                "    sparse_set.insert(StateID(4));",
                "    let length = sparse_set.len();",
                "    assert_eq!(length, 2);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut sparse_set = SparseSet::new(StateID::MAX.0 + 1);",
                "    for i in 0..=StateID::MAX.0 {",
                "        sparse_set.insert(StateID(i));",
                "    }",
                "    let length = sparse_set.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(length, StateID::MAX.0 + 1);"
              ],
              "code": [
                "{",
                "    let mut sparse_set = SparseSet::new(StateID::MAX.0 + 1);",
                "    for i in 0..=StateID::MAX.0 {",
                "        sparse_set.insert(StateID(i));",
                "    }",
                "    let length = sparse_set.len();",
                "    assert_eq!(length, StateID::MAX.0 + 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}