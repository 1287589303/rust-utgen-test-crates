{
  "name": "regex_automata::meta::regex::{impl#4}::captures_len",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:1671:5:1677:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Valid regex patterns, including but not limited to empty string, single characters, groups, alternatives, quantifiers, and nested groups; multiple patterns as arrays or slices, ensuring diverse combinations yielding results from 1 to N where N reflects the number of capturing groups.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern_len = |pattern| {",
                "        Regex::new(pattern).map(|re| re.captures_len())",
                "    };",
                "",
                "    let _ = pattern_len(\"a\");",
                "    let _ = pattern_len(\"(a)\");",
                "    let _ = pattern_len(\"(a)|(b)\");",
                "    let _ = pattern_len(\"(a)(b)|(c)(d)\");",
                "    let _ = pattern_len(\"(a)|b\");",
                "    let _ = pattern_len(\"a|(b)\");",
                "    let _ = pattern_len(\"(b)*\");",
                "    let _ = pattern_len(\"(b)+\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(1, pattern_len(\"a\").unwrap());",
                "    assert_eq!(2, pattern_len(\"(a)\").unwrap());",
                "    assert_eq!(3, pattern_len(\"(a)|(b)\").unwrap());",
                "    assert_eq!(5, pattern_len(\"(a)(b)|(c)(d)\").unwrap());",
                "    assert_eq!(2, pattern_len(\"(a)|b\").unwrap());",
                "    assert_eq!(2, pattern_len(\"a|(b)\").unwrap());",
                "    assert_eq!(2, pattern_len(\"(b)*\").unwrap());",
                "    assert_eq!(2, pattern_len(\"(b)+\").unwrap());"
              ],
              "code": [
                "{",
                "    let pattern_len = |pattern| {",
                "        Regex::new(pattern).map(|re| re.captures_len())",
                "    };",
                "",
                "    let _ = pattern_len(\"a\");",
                "    let _ = pattern_len(\"(a)\");",
                "    let _ = pattern_len(\"(a)|(b)\");",
                "    let _ = pattern_len(\"(a)(b)|(c)(d)\");",
                "    let _ = pattern_len(\"(a)|b\");",
                "    let _ = pattern_len(\"a|(b)\");",
                "    let _ = pattern_len(\"(b)*\");",
                "    let _ = pattern_len(\"(b)+\");",
                "    assert_eq!(1, pattern_len(\"a\").unwrap());",
                "    assert_eq!(2, pattern_len(\"(a)\").unwrap());",
                "    assert_eq!(3, pattern_len(\"(a)|(b)\").unwrap());",
                "    assert_eq!(5, pattern_len(\"(a)(b)|(c)(d)\").unwrap());",
                "    assert_eq!(2, pattern_len(\"(a)|b\").unwrap());",
                "    assert_eq!(2, pattern_len(\"a|(b)\").unwrap());",
                "    assert_eq!(2, pattern_len(\"(b)*\").unwrap());",
                "    assert_eq!(2, pattern_len(\"(b)+\").unwrap());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let patterns_len = |patterns| {",
                "        Regex::new_many(patterns).map(|re| re.captures_len())",
                "    };",
                "",
                "    let _ = patterns_len(&[\"a\", \"b\"]);",
                "    let _ = patterns_len(&[\"(a)\", \"(b)\"]);",
                "    let _ = patterns_len(&[\"(a)|(b)\", \"(c)|(d)\"]);",
                "    let _ = patterns_len(&[\"(a)(b)|(c)(d)\", \"(x)(y)\"]);",
                "    let _ = patterns_len(&[\"(a)\", \"b\"]);",
                "    let _ = patterns_len(&[\"a\", \"(b)\"]);",
                "    let _ = patterns_len(&[\"(a)\", \"(b)*\"]);",
                "    let _ = patterns_len(&[\"(a)+\", \"(b)+\"]);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(2, patterns_len(&[\"a\", \"b\"]).unwrap());",
                "    assert_eq!(4, patterns_len(&[\"(a)\", \"(b)\"]).unwrap());",
                "    assert_eq!(6, patterns_len(&[\"(a)|(b)\", \"(c)|(d)\"]).unwrap());",
                "    assert_eq!(8, patterns_len(&[\"(a)(b)|(c)(d)\", \"(x)(y)\"]).unwrap());",
                "    assert_eq!(3, patterns_len(&[\"(a)\", \"b\"]).unwrap());",
                "    assert_eq!(3, patterns_len(&[\"a\", \"(b)\"]).unwrap());",
                "    assert_eq!(4, patterns_len(&[\"(a)\", \"(b)*\"]).unwrap());",
                "    assert_eq!(4, patterns_len(&[\"(a)+\", \"(b)+\"]).unwrap());"
              ],
              "code": [
                "{",
                "    let patterns_len = |patterns| {",
                "        Regex::new_many(patterns).map(|re| re.captures_len())",
                "    };",
                "",
                "    let _ = patterns_len(&[\"a\", \"b\"]);",
                "    let _ = patterns_len(&[\"(a)\", \"(b)\"]);",
                "    let _ = patterns_len(&[\"(a)|(b)\", \"(c)|(d)\"]);",
                "    let _ = patterns_len(&[\"(a)(b)|(c)(d)\", \"(x)(y)\"]);",
                "    let _ = patterns_len(&[\"(a)\", \"b\"]);",
                "    let _ = patterns_len(&[\"a\", \"(b)\"]);",
                "    let _ = patterns_len(&[\"(a)\", \"(b)*\"]);",
                "    let _ = patterns_len(&[\"(a)+\", \"(b)+\"]);",
                "    assert_eq!(2, patterns_len(&[\"a\", \"b\"]).unwrap());",
                "    assert_eq!(4, patterns_len(&[\"(a)\", \"(b)\"]).unwrap());",
                "    assert_eq!(6, patterns_len(&[\"(a)|(b)\", \"(c)|(d)\"]).unwrap());",
                "    assert_eq!(8, patterns_len(&[\"(a)(b)|(c)(d)\", \"(x)(y)\"]).unwrap());",
                "    assert_eq!(3, patterns_len(&[\"(a)\", \"b\"]).unwrap());",
                "    assert_eq!(3, patterns_len(&[\"a\", \"(b)\"]).unwrap());",
                "    assert_eq!(4, patterns_len(&[\"(a)\", \"(b)*\"]).unwrap());",
                "    assert_eq!(4, patterns_len(&[\"(a)+\", \"(b)+\"]).unwrap());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern_len = |pattern| {",
                "        Regex::new(pattern).map(|re| re.captures_len())",
                "    };",
                "",
                "    let _ = pattern_len(\"\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(1, pattern_len(\"a\").unwrap());",
                "    assert_eq!(2, pattern_len(\"(a)\").unwrap());",
                "    assert_eq!(3, pattern_len(\"(a)|(b)\").unwrap());",
                "    assert_eq!(5, pattern_len(\"(a)(b)|(c)(d)\").unwrap());",
                "    assert_eq!(2, pattern_len(\"(a)|b\").unwrap());",
                "    assert_eq!(2, pattern_len(\"a|(b)\").unwrap());",
                "    assert_eq!(2, pattern_len(\"(b)*\").unwrap());",
                "    assert_eq!(2, pattern_len(\"(b)+\").unwrap());",
                "    assert_eq!(2, pattern_len(\"ab\").unwrap());",
                "    assert_eq!(1, pattern_len(\"()\").unwrap());",
                "    assert_eq!(1, pattern_len(\"(a)?\").unwrap());",
                "    assert_eq!(1, pattern_len(\"(a)*\").unwrap());",
                "    assert_eq!(2, pattern_len(\"(a)?(b)\").unwrap());",
                "    assert_eq!(3, pattern_len(\"(a)?(b)?\").unwrap());",
                "    assert_eq!(1, pattern_len(\"^(a)$\").unwrap());",
                "    assert_eq!(2, pattern_len(\"^(a)|(b)$\").unwrap());",
                "    assert_eq!(2, pattern_len(\"(abc)|(def)\").unwrap());"
              ],
              "code": [
                "{",
                "    let pattern_len = |pattern| {",
                "        Regex::new(pattern).map(|re| re.captures_len())",
                "    };",
                "",
                "    let _ = pattern_len(\"\");",
                "    assert_eq!(1, pattern_len(\"a\").unwrap());",
                "    assert_eq!(2, pattern_len(\"(a)\").unwrap());",
                "    assert_eq!(3, pattern_len(\"(a)|(b)\").unwrap());",
                "    assert_eq!(5, pattern_len(\"(a)(b)|(c)(d)\").unwrap());",
                "    assert_eq!(2, pattern_len(\"(a)|b\").unwrap());",
                "    assert_eq!(2, pattern_len(\"a|(b)\").unwrap());",
                "    assert_eq!(2, pattern_len(\"(b)*\").unwrap());",
                "    assert_eq!(2, pattern_len(\"(b)+\").unwrap());",
                "    assert_eq!(2, pattern_len(\"ab\").unwrap());",
                "    assert_eq!(1, pattern_len(\"()\").unwrap());",
                "    assert_eq!(1, pattern_len(\"(a)?\").unwrap());",
                "    assert_eq!(1, pattern_len(\"(a)*\").unwrap());",
                "    assert_eq!(2, pattern_len(\"(a)?(b)\").unwrap());",
                "    assert_eq!(3, pattern_len(\"(a)?(b)?\").unwrap());",
                "    assert_eq!(1, pattern_len(\"^(a)$\").unwrap());",
                "    assert_eq!(2, pattern_len(\"^(a)|(b)$\").unwrap());",
                "    assert_eq!(2, pattern_len(\"(abc)|(def)\").unwrap());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}