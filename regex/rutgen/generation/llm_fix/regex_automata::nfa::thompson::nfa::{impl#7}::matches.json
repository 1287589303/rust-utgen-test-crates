{
  "name": "regex_automata::nfa::thompson::nfa::{impl#7}::matches",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:1895:5:1897:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "haystack: non-empty byte slice (length > 0) or empty byte slice (length = 0); at: valid index within the bounds of haystack (0 to haystack.len()) or out of bounds index (haystack.len()).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transitions = DenseTransitions {",
                "        transitions: Box::new([StateID(SmallIndex::from(1)); 256]),",
                "    };",
                "    let haystack = &[1, 2, 3];",
                "    let at = 1;",
                "    transitions.matches(haystack, at);",
                "}"
              ],
              "oracle": [
                "    transitions.matches(haystack, at) == Some(StateID(SmallIndex::from(1)))",
                "    transitions.matches(haystack, 0) == Some(StateID(SmallIndex::from(1)))",
                "    transitions.matches(haystack, 2) == Some(StateID(SmallIndex::from(1)))",
                "    transitions.matches(haystack, 3) == None",
                "    transitions.matches(haystack, 10) == None",
                "    transitions.matches(haystack, usize::MAX) == None",
                "    transitions.matches(&[], 0) == None",
                "    transitions.matches(haystack, 1) == Some(StateID(SmallIndex::from(1)))",
                "    transitions.matches(haystack, 2) == Some(StateID(SmallIndex::from(1)))"
              ],
              "code": [
                "{",
                "    let transitions = DenseTransitions {",
                "        transitions: Box::new([StateID(SmallIndex::from(1)); 256]),",
                "    };",
                "    let haystack = &[1, 2, 3];",
                "    let at = 1;",
                "    transitions.matches(haystack, at);",
                "    transitions.matches(haystack, at) == Some(StateID(SmallIndex::from(1)))",
                "    transitions.matches(haystack, 0) == Some(StateID(SmallIndex::from(1)))",
                "    transitions.matches(haystack, 2) == Some(StateID(SmallIndex::from(1)))",
                "    transitions.matches(haystack, 3) == None",
                "    transitions.matches(haystack, 10) == None",
                "    transitions.matches(haystack, usize::MAX) == None",
                "    transitions.matches(&[], 0) == None",
                "    transitions.matches(haystack, 1) == Some(StateID(SmallIndex::from(1)))",
                "    transitions.matches(haystack, 2) == Some(StateID(SmallIndex::from(1)))",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transitions = DenseTransitions {",
                "        transitions: Box::new([StateID(SmallIndex::from(1)); 256]),",
                "    };",
                "    let haystack: &[u8] = &[];",
                "    let at = 0;",
                "    transitions.matches(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(transitions.matches(haystack, at), None);",
                "    ",
                "    let haystack: &[u8] = &[0];",
                "    let at = 0;",
                "    assert_eq!(transitions.matches(haystack, at), Some(StateID(SmallIndex::from(1))));",
                "    ",
                "    let haystack: &[u8] = &[1];",
                "    let at = 0;",
                "    assert_eq!(transitions.matches(haystack, at), None);",
                "    ",
                "    let haystack: &[u8] = &[0, 1, 2];",
                "    let at = 2;",
                "    assert_eq!(transitions.matches(haystack, at), None);",
                "    ",
                "    let at = 3;",
                "    assert_eq!(transitions.matches(haystack, at), None);"
              ],
              "code": [
                "{",
                "    let transitions = DenseTransitions {",
                "        transitions: Box::new([StateID(SmallIndex::from(1)); 256]),",
                "    };",
                "    let haystack: &[u8] = &[];",
                "    let at = 0;",
                "    transitions.matches(haystack, at);",
                "    assert_eq!(transitions.matches(haystack, at), None);",
                "    ",
                "    let haystack: &[u8] = &[0];",
                "    let at = 0;",
                "    assert_eq!(transitions.matches(haystack, at), Some(StateID(SmallIndex::from(1))));",
                "    ",
                "    let haystack: &[u8] = &[1];",
                "    let at = 0;",
                "    assert_eq!(transitions.matches(haystack, at), None);",
                "    ",
                "    let haystack: &[u8] = &[0, 1, 2];",
                "    let at = 2;",
                "    assert_eq!(transitions.matches(haystack, at), None);",
                "    ",
                "    let at = 3;",
                "    assert_eq!(transitions.matches(haystack, at), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transitions = DenseTransitions {",
                "        transitions: Box::new([StateID(SmallIndex::from(1)); 256]),",
                "    };",
                "    let haystack = &[1, 2, 3];",
                "    let at = haystack.len(); // Out of bounds",
                "    transitions.matches(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(transitions.matches(haystack, at), None);"
              ],
              "code": [
                "{",
                "    let transitions = DenseTransitions {",
                "        transitions: Box::new([StateID(SmallIndex::from(1)); 256]),",
                "    };",
                "    let haystack = &[1, 2, 3];",
                "    let at = haystack.len(); // Out of bounds",
                "    transitions.matches(haystack, at);",
                "    assert_eq!(transitions.matches(haystack, at), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transitions = DenseTransitions {",
                "        transitions: Box::new([StateID(SmallIndex::from(0)); 256]),",
                "    };",
                "    let haystack: &[u8] = &[];",
                "    let at = 0; // Out of bounds for empty slice",
                "    transitions.matches(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(transitions.matches(haystack, at), None);"
              ],
              "code": [
                "{",
                "    let transitions = DenseTransitions {",
                "        transitions: Box::new([StateID(SmallIndex::from(0)); 256]),",
                "    };",
                "    let haystack: &[u8] = &[];",
                "    let at = 0; // Out of bounds for empty slice",
                "    transitions.matches(haystack, at);",
                "    assert_eq!(transitions.matches(haystack, at), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transitions = DenseTransitions {",
                "        transitions: Box::new([StateID(SmallIndex::from(1)); 256]),",
                "    };",
                "    let haystack = &[0];",
                "    let at = 0;",
                "    transitions.matches(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(transitions.matches(haystack, at), Some(StateID(SmallIndex::from(1))));",
                "    assert_eq!(transitions.matches(haystack, 1), None);",
                "    assert_eq!(transitions.matches(&[], 0), None);",
                "    assert_eq!(transitions.matches(haystack, usize::MAX), None);",
                "    assert_eq!(transitions.matches(haystack, 10), None);"
              ],
              "code": [
                "{",
                "    let transitions = DenseTransitions {",
                "        transitions: Box::new([StateID(SmallIndex::from(1)); 256]),",
                "    };",
                "    let haystack = &[0];",
                "    let at = 0;",
                "    transitions.matches(haystack, at);",
                "    assert_eq!(transitions.matches(haystack, at), Some(StateID(SmallIndex::from(1))));",
                "    assert_eq!(transitions.matches(haystack, 1), None);",
                "    assert_eq!(transitions.matches(&[], 0), None);",
                "    assert_eq!(transitions.matches(haystack, usize::MAX), None);",
                "    assert_eq!(transitions.matches(haystack, 10), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transitions = DenseTransitions {",
                "        transitions: Box::new([StateID(SmallIndex::from(1)); 256]),",
                "    };",
                "    let haystack = &[0, 1, 2];",
                "    let at = haystack.len() - 1;",
                "    transitions.matches(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(transitions.matches(haystack, at), Some(StateID(SmallIndex::from(1))));",
                "    assert_eq!(transitions.matches(haystack, 0), Some(StateID(SmallIndex::from(1))));",
                "    assert_eq!(transitions.matches(haystack, 1), Some(StateID(SmallIndex::from(1))));",
                "    assert_eq!(transitions.matches(haystack, 2), None);",
                "    assert_eq!(transitions.matches(haystack, 10), None);",
                "    assert_eq!(transitions.matches(&[], 0), None);",
                "    assert_eq!(transitions.matches(haystack, 1), Some(StateID(SmallIndex::from(1))));",
                "    assert_eq!(transitions.matches(haystack, 3), None);"
              ],
              "code": [
                "{",
                "    let transitions = DenseTransitions {",
                "        transitions: Box::new([StateID(SmallIndex::from(1)); 256]),",
                "    };",
                "    let haystack = &[0, 1, 2];",
                "    let at = haystack.len() - 1;",
                "    transitions.matches(haystack, at);",
                "    assert_eq!(transitions.matches(haystack, at), Some(StateID(SmallIndex::from(1))));",
                "    assert_eq!(transitions.matches(haystack, 0), Some(StateID(SmallIndex::from(1))));",
                "    assert_eq!(transitions.matches(haystack, 1), Some(StateID(SmallIndex::from(1))));",
                "    assert_eq!(transitions.matches(haystack, 2), None);",
                "    assert_eq!(transitions.matches(haystack, 10), None);",
                "    assert_eq!(transitions.matches(&[], 0), None);",
                "    assert_eq!(transitions.matches(haystack, 1), Some(StateID(SmallIndex::from(1))));",
                "    assert_eq!(transitions.matches(haystack, 3), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}