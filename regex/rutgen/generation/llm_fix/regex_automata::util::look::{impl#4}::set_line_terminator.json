{
  "name": "regex_automata::util::look::{impl#4}::set_line_terminator",
  "mod_info": {
    "name": "util::look",
    "loc": "regex-automata/src/util/mod.rs:38:1:38:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/look.rs:599:5:602:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "byte: 0 to 255 (inclusive)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    matcher.set_line_terminator(0);",
                "}"
              ],
              "oracle": [
                "    matcher.set_line_terminator(0).unwrap();",
                "    assert_eq!(matcher.lineterm.0, 0);",
                "    matcher.set_line_terminator(10).unwrap();",
                "    assert_eq!(matcher.lineterm.0, 10);",
                "    matcher.set_line_terminator(255).unwrap();",
                "    assert_eq!(matcher.lineterm.0, 255);",
                "    matcher.set_line_terminator(128).unwrap();",
                "    assert_eq!(matcher.lineterm.0, 128);"
              ],
              "code": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    matcher.set_line_terminator(0);",
                "    matcher.set_line_terminator(0).unwrap();",
                "    assert_eq!(matcher.lineterm.0, 0);",
                "    matcher.set_line_terminator(10).unwrap();",
                "    assert_eq!(matcher.lineterm.0, 10);",
                "    matcher.set_line_terminator(255).unwrap();",
                "    assert_eq!(matcher.lineterm.0, 255);",
                "    matcher.set_line_terminator(128).unwrap();",
                "    assert_eq!(matcher.lineterm.0, 128);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    matcher.set_line_terminator(255);",
                "}"
              ],
              "oracle": [
                "    let mut matcher = LookMatcher::new();",
                "    let returned_value = matcher.set_line_terminator(255);",
                "    assert_eq!(returned_value, &mut matcher);",
                "    matcher.set_line_terminator(0);",
                "    let returned_value_zero = matcher.set_line_terminator(0);",
                "    assert_eq!(returned_value_zero, &mut matcher);",
                "    matcher.set_line_terminator(10);",
                "    let returned_value_ten = matcher.set_line_terminator(10);",
                "    assert_eq!(returned_value_ten, &mut matcher);"
              ],
              "code": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    matcher.set_line_terminator(255);",
                "    let mut matcher = LookMatcher::new();",
                "    let returned_value = matcher.set_line_terminator(255);",
                "    assert_eq!(returned_value, &mut matcher);",
                "    matcher.set_line_terminator(0);",
                "    let returned_value_zero = matcher.set_line_terminator(0);",
                "    assert_eq!(returned_value_zero, &mut matcher);",
                "    matcher.set_line_terminator(10);",
                "    let returned_value_ten = matcher.set_line_terminator(10);",
                "    assert_eq!(returned_value_ten, &mut matcher);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    matcher.set_line_terminator(128);",
                "}"
              ],
              "oracle": [
                "    matcher.set_line_terminator(128).lineterm.0 == 128;",
                "    matcher.set_line_terminator(0).lineterm.0 == 0;",
                "    matcher.set_line_terminator(255).lineterm.0 == 255;",
                "    matcher.set_line_terminator(1).lineterm.0 == 1;",
                "    matcher.set_line_terminator(2).lineterm.0 == 2;"
              ],
              "code": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    matcher.set_line_terminator(128);",
                "    matcher.set_line_terminator(128).lineterm.0 == 128;",
                "    matcher.set_line_terminator(0).lineterm.0 == 0;",
                "    matcher.set_line_terminator(255).lineterm.0 == 255;",
                "    matcher.set_line_terminator(1).lineterm.0 == 1;",
                "    matcher.set_line_terminator(2).lineterm.0 == 2;",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    matcher.set_line_terminator(1);",
                "}"
              ],
              "oracle": [
                "    matcher.set_line_terminator(1).lineterm.0 == 1;",
                "    matcher.set_line_terminator(0).lineterm.0 == 0;",
                "    matcher.set_line_terminator(255).lineterm.0 == 255;",
                "    matcher.set_line_terminator(127).lineterm.0 == 127;",
                "    matcher.set_line_terminator(10).lineterm.0 == 10;",
                "    matcher.set_line_terminator(13).lineterm.0 == 13;",
                "    matcher.set_line_terminator(255).lineterm.0 != 0;",
                "    matcher.set_line_terminator(1).set_line_terminator(2).lineterm.0 == 2;"
              ],
              "code": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    matcher.set_line_terminator(1);",
                "    matcher.set_line_terminator(1).lineterm.0 == 1;",
                "    matcher.set_line_terminator(0).lineterm.0 == 0;",
                "    matcher.set_line_terminator(255).lineterm.0 == 255;",
                "    matcher.set_line_terminator(127).lineterm.0 == 127;",
                "    matcher.set_line_terminator(10).lineterm.0 == 10;",
                "    matcher.set_line_terminator(13).lineterm.0 == 13;",
                "    matcher.set_line_terminator(255).lineterm.0 != 0;",
                "    matcher.set_line_terminator(1).set_line_terminator(2).lineterm.0 == 2;",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    matcher.set_line_terminator(254);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.lineterm.0, 254);",
                "    assert!(std::ptr::eq(matcher.set_line_terminator(252), &mut matcher));",
                "    assert_eq!(matcher.lineterm.0, 252);",
                "    assert!(std::ptr::eq(matcher.set_line_terminator(0), &mut matcher));",
                "    assert_eq!(matcher.lineterm.0, 0);",
                "    assert!(std::ptr::eq(matcher.set_line_terminator(127), &mut matcher));",
                "    assert_eq!(matcher.lineterm.0, 127);"
              ],
              "code": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    matcher.set_line_terminator(254);",
                "    assert_eq!(matcher.lineterm.0, 254);",
                "    assert!(std::ptr::eq(matcher.set_line_terminator(252), &mut matcher));",
                "    assert_eq!(matcher.lineterm.0, 252);",
                "    assert!(std::ptr::eq(matcher.set_line_terminator(0), &mut matcher));",
                "    assert_eq!(matcher.lineterm.0, 0);",
                "    assert!(std::ptr::eq(matcher.set_line_terminator(127), &mut matcher));",
                "    assert_eq!(matcher.lineterm.0, 127);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}