{
  "name": "regex_automata::meta::regex::{impl#20}::get_utf8_empty",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:3046:5:3048:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self.utf8_empty set to Some(true), Some(false), and None (to check default behavior).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().utf8_empty(true);",
                "    config.get_utf8_empty();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_utf8_empty(), true);",
                "    let config = Config::new().utf8_empty(false);",
                "    assert_eq!(config.get_utf8_empty(), false);",
                "    let config = Config::new();",
                "    assert_eq!(config.get_utf8_empty(), true);"
              ],
              "code": [
                "{",
                "    let config = Config::new().utf8_empty(true);",
                "    config.get_utf8_empty();",
                "    assert_eq!(config.get_utf8_empty(), true);",
                "    let config = Config::new().utf8_empty(false);",
                "    assert_eq!(config.get_utf8_empty(), false);",
                "    let config = Config::new();",
                "    assert_eq!(config.get_utf8_empty(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().utf8_empty(false);",
                "    config.get_utf8_empty();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_utf8_empty(), false);"
              ],
              "code": [
                "{",
                "    let config = Config::new().utf8_empty(false);",
                "    config.get_utf8_empty();",
                "    assert_eq!(config.get_utf8_empty(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().utf8_empty(None);",
                "    config.get_utf8_empty();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_utf8_empty(), true);",
                "    ",
                "    let config = Config::new().utf8_empty(Some(false));",
                "    assert_eq!(config.get_utf8_empty(), false);",
                "    ",
                "    let config = Config::new().utf8_empty(Some(true));",
                "    assert_eq!(config.get_utf8_empty(), true);",
                "    ",
                "    let config = Config::new();",
                "    assert_eq!(config.get_utf8_empty(), true);"
              ],
              "code": [
                "{",
                "    let config = Config::new().utf8_empty(None);",
                "    config.get_utf8_empty();",
                "    assert_eq!(config.get_utf8_empty(), true);",
                "    ",
                "    let config = Config::new().utf8_empty(Some(false));",
                "    assert_eq!(config.get_utf8_empty(), false);",
                "    ",
                "    let config = Config::new().utf8_empty(Some(true));",
                "    assert_eq!(config.get_utf8_empty(), true);",
                "    ",
                "    let config = Config::new();",
                "    assert_eq!(config.get_utf8_empty(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}