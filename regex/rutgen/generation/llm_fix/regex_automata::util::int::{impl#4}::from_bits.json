{
  "name": "regex_automata::util::int::{impl#4}::from_bits",
  "mod_info": {
    "name": "util::int",
    "loc": "regex-automata/src/util/mod.rs:51:1:51:20"
  },
  "visible": true,
  "loc": "regex-automata/src/util/int.rs:169:5:171:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: n as i32\n"
      ],
      "input_infer": "test input conditions or ranges: n = 0, 1, 4294967295 (0 to 2^32 - 1, covering edge cases and boundaries)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = i32::from_bits(0);",
                "}"
              ],
              "oracle": [
                "    let result = i32::from_bits(0);",
                "    assert_eq!(result, 0);",
                "    let result = i32::from_bits(1);",
                "    assert_eq!(result, 1);",
                "    let result = i32::from_bits(255);",
                "    assert_eq!(result, 255);",
                "    let result = i32::from_bits(256);",
                "    assert_eq!(result, 256);",
                "    let result = i32::from_bits(u32::MAX);",
                "    assert_eq!(result, -1);",
                "    let result = i32::from_bits(2147483647);",
                "    assert_eq!(result, 2147483647);",
                "    let result = i32::from_bits(2147483648);",
                "    assert_eq!(result, -2147483648);"
              ],
              "code": [
                "{",
                "    let result = i32::from_bits(0);",
                "    let result = i32::from_bits(0);",
                "    assert_eq!(result, 0);",
                "    let result = i32::from_bits(1);",
                "    assert_eq!(result, 1);",
                "    let result = i32::from_bits(255);",
                "    assert_eq!(result, 255);",
                "    let result = i32::from_bits(256);",
                "    assert_eq!(result, 256);",
                "    let result = i32::from_bits(u32::MAX);",
                "    assert_eq!(result, -1);",
                "    let result = i32::from_bits(2147483647);",
                "    assert_eq!(result, 2147483647);",
                "    let result = i32::from_bits(2147483648);",
                "    assert_eq!(result, -2147483648);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = i32::from_bits(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 1);",
                "    assert_eq!(i32::from_bits(0), 0);",
                "    assert_eq!(i32::from_bits(u32::MAX), -1);",
                "    assert_eq!(i32::from_bits(10), 10);",
                "    assert_eq!(i32::from_bits(100), 100);",
                "    assert_eq!(i32::from_bits(255), 255);"
              ],
              "code": [
                "{",
                "    let result = i32::from_bits(1);",
                "    assert_eq!(result, 1);",
                "    assert_eq!(i32::from_bits(0), 0);",
                "    assert_eq!(i32::from_bits(u32::MAX), -1);",
                "    assert_eq!(i32::from_bits(10), 10);",
                "    assert_eq!(i32::from_bits(100), 100);",
                "    assert_eq!(i32::from_bits(255), 255);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = i32::from_bits(4294967295);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, -1);",
                "    assert_eq!(result, i32::from_bits(0xFFFFFFFF));"
              ],
              "code": [
                "{",
                "    let result = i32::from_bits(4294967295);",
                "    assert_eq!(result, -1);",
                "    assert_eq!(result, i32::from_bits(0xFFFFFFFF));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}