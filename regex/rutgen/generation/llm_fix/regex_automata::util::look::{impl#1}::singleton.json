{
  "name": "regex_automata::util::look::{impl#1}::singleton",
  "mod_info": {
    "name": "util::look",
    "loc": "regex-automata/src/util/mod.rs:38:1:38:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/look.rs:277:5:279:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "look: Look variant values ranging from Start (1) to WordEndHalfUnicode (131072)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look_set = LookSet::singleton(Look::Start);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look_set.bits, 1 << 0);",
                "    let look_set = LookSet::singleton(Look::End);",
                "    assert_eq!(look_set.bits, 1 << 1);",
                "    let look_set = LookSet::singleton(Look::StartLF);",
                "    assert_eq!(look_set.bits, 1 << 2);",
                "    let look_set = LookSet::singleton(Look::EndLF);",
                "    assert_eq!(look_set.bits, 1 << 3);",
                "    let look_set = LookSet::singleton(Look::StartCRLF);",
                "    assert_eq!(look_set.bits, 1 << 4);",
                "    let look_set = LookSet::singleton(Look::EndCRLF);",
                "    assert_eq!(look_set.bits, 1 << 5);",
                "    let look_set = LookSet::singleton(Look::WordAscii);",
                "    assert_eq!(look_set.bits, 1 << 6);",
                "    let look_set = LookSet::singleton(Look::WordAsciiNegate);",
                "    assert_eq!(look_set.bits, 1 << 7);",
                "    let look_set = LookSet::singleton(Look::WordUnicode);",
                "    assert_eq!(look_set.bits, 1 << 8);",
                "    let look_set = LookSet::singleton(Look::WordUnicodeNegate);",
                "    assert_eq!(look_set.bits, 1 << 9);",
                "    let look_set = LookSet::singleton(Look::WordStartAscii);",
                "    assert_eq!(look_set.bits, 1 << 10);",
                "    let look_set = LookSet::singleton(Look::WordEndAscii);",
                "    assert_eq!(look_set.bits, 1 << 11);",
                "    let look_set = LookSet::singleton(Look::WordStartUnicode);",
                "    assert_eq!(look_set.bits, 1 << 12);",
                "    let look_set = LookSet::singleton(Look::WordEndUnicode);",
                "    assert_eq!(look_set.bits, 1 << 13);",
                "    let look_set = LookSet::singleton(Look::WordStartHalfAscii);",
                "    assert_eq!(look_set.bits, 1 << 14);",
                "    let look_set = LookSet::singleton(Look::WordEndHalfAscii);",
                "    assert_eq!(look_set.bits, 1 << 15);",
                "    let look_set = LookSet::singleton(Look::WordStartHalfUnicode);",
                "    assert_eq!(look_set.bits, 1 << 16);",
                "    let look_set = LookSet::singleton(Look::WordEndHalfUnicode);",
                "    assert_eq!(look_set.bits, 1 << 17);"
              ],
              "code": [
                "{",
                "    let look_set = LookSet::singleton(Look::Start);",
                "    assert_eq!(look_set.bits, 1 << 0);",
                "    let look_set = LookSet::singleton(Look::End);",
                "    assert_eq!(look_set.bits, 1 << 1);",
                "    let look_set = LookSet::singleton(Look::StartLF);",
                "    assert_eq!(look_set.bits, 1 << 2);",
                "    let look_set = LookSet::singleton(Look::EndLF);",
                "    assert_eq!(look_set.bits, 1 << 3);",
                "    let look_set = LookSet::singleton(Look::StartCRLF);",
                "    assert_eq!(look_set.bits, 1 << 4);",
                "    let look_set = LookSet::singleton(Look::EndCRLF);",
                "    assert_eq!(look_set.bits, 1 << 5);",
                "    let look_set = LookSet::singleton(Look::WordAscii);",
                "    assert_eq!(look_set.bits, 1 << 6);",
                "    let look_set = LookSet::singleton(Look::WordAsciiNegate);",
                "    assert_eq!(look_set.bits, 1 << 7);",
                "    let look_set = LookSet::singleton(Look::WordUnicode);",
                "    assert_eq!(look_set.bits, 1 << 8);",
                "    let look_set = LookSet::singleton(Look::WordUnicodeNegate);",
                "    assert_eq!(look_set.bits, 1 << 9);",
                "    let look_set = LookSet::singleton(Look::WordStartAscii);",
                "    assert_eq!(look_set.bits, 1 << 10);",
                "    let look_set = LookSet::singleton(Look::WordEndAscii);",
                "    assert_eq!(look_set.bits, 1 << 11);",
                "    let look_set = LookSet::singleton(Look::WordStartUnicode);",
                "    assert_eq!(look_set.bits, 1 << 12);",
                "    let look_set = LookSet::singleton(Look::WordEndUnicode);",
                "    assert_eq!(look_set.bits, 1 << 13);",
                "    let look_set = LookSet::singleton(Look::WordStartHalfAscii);",
                "    assert_eq!(look_set.bits, 1 << 14);",
                "    let look_set = LookSet::singleton(Look::WordEndHalfAscii);",
                "    assert_eq!(look_set.bits, 1 << 15);",
                "    let look_set = LookSet::singleton(Look::WordStartHalfUnicode);",
                "    assert_eq!(look_set.bits, 1 << 16);",
                "    let look_set = LookSet::singleton(Look::WordEndHalfUnicode);",
                "    assert_eq!(look_set.bits, 1 << 17);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look_set = LookSet::singleton(Look::End);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look_set.bits, Look::End as u32);",
                "    assert!(look_set.contains(Look::End));",
                "    assert_eq!(look_set.len(), 1);",
                "    assert!(!look_set.is_empty());",
                "    assert!(!look_set.contains(Look::Start));"
              ],
              "code": [
                "{",
                "    let look_set = LookSet::singleton(Look::End);",
                "    assert_eq!(look_set.bits, Look::End as u32);",
                "    assert!(look_set.contains(Look::End));",
                "    assert_eq!(look_set.len(), 1);",
                "    assert!(!look_set.is_empty());",
                "    assert!(!look_set.contains(Look::Start));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look_set = LookSet::singleton(Look::StartLF);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look_set.contains(Look::StartLF), true);",
                "    assert_eq!(look_set.len(), 1);",
                "    assert_eq!(look_set.is_empty(), false);",
                "    assert_eq!(look_set.contains_anchor(), false);",
                "    assert_eq!(look_set.contains_word(), false);",
                "    assert_eq!(look_set.bits, Look::StartLF as u32);"
              ],
              "code": [
                "{",
                "    let look_set = LookSet::singleton(Look::StartLF);",
                "    assert_eq!(look_set.contains(Look::StartLF), true);",
                "    assert_eq!(look_set.len(), 1);",
                "    assert_eq!(look_set.is_empty(), false);",
                "    assert_eq!(look_set.contains_anchor(), false);",
                "    assert_eq!(look_set.contains_word(), false);",
                "    assert_eq!(look_set.bits, Look::StartLF as u32);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look_set = LookSet::singleton(Look::EndLF);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look_set.bits, Look::EndLF as u32);"
              ],
              "code": [
                "{",
                "    let look_set = LookSet::singleton(Look::EndLF);",
                "    assert_eq!(look_set.bits, Look::EndLF as u32);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look_set = LookSet::singleton(Look::StartCRLF);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look_set.bits, Look::StartCRLF as u32);",
                "    assert!(look_set.contains(Look::StartCRLF));",
                "    assert!(!look_set.is_empty());",
                "    assert_eq!(look_set.len(), 1);",
                "    assert!(!look_set.contains(Look::End));",
                "    assert!(look_set.contains_anchor_crlf());",
                "    assert!(!look_set.contains_anchor_line());"
              ],
              "code": [
                "{",
                "    let look_set = LookSet::singleton(Look::StartCRLF);",
                "    assert_eq!(look_set.bits, Look::StartCRLF as u32);",
                "    assert!(look_set.contains(Look::StartCRLF));",
                "    assert!(!look_set.is_empty());",
                "    assert_eq!(look_set.len(), 1);",
                "    assert!(!look_set.contains(Look::End));",
                "    assert!(look_set.contains_anchor_crlf());",
                "    assert!(!look_set.contains_anchor_line());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look_set = LookSet::singleton(Look::EndCRLF);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look_set.bits, Look::EndCRLF as u32);",
                "    assert!(look_set.contains(Look::EndCRLF));",
                "    assert!(!look_set.is_empty());",
                "    assert_eq!(look_set.len(), 1);",
                "    assert!(look_set.contains_anchor() == false);",
                "    assert!(look_set.contains_word() == false);",
                "    assert!(look_set.contains_word_unicode() == false);",
                "    assert!(look_set.contains_word_ascii() == false);",
                "    assert!(look_set.contains_anchor_haystack() == false);",
                "    assert!(look_set.contains_anchor_line() == false);",
                "    assert!(look_set.contains_anchor_lf() == false);",
                "    assert!(look_set.contains_anchor_crlf() == true);"
              ],
              "code": [
                "{",
                "    let look_set = LookSet::singleton(Look::EndCRLF);",
                "    assert_eq!(look_set.bits, Look::EndCRLF as u32);",
                "    assert!(look_set.contains(Look::EndCRLF));",
                "    assert!(!look_set.is_empty());",
                "    assert_eq!(look_set.len(), 1);",
                "    assert!(look_set.contains_anchor() == false);",
                "    assert!(look_set.contains_word() == false);",
                "    assert!(look_set.contains_word_unicode() == false);",
                "    assert!(look_set.contains_word_ascii() == false);",
                "    assert!(look_set.contains_anchor_haystack() == false);",
                "    assert!(look_set.contains_anchor_line() == false);",
                "    assert!(look_set.contains_anchor_lf() == false);",
                "    assert!(look_set.contains_anchor_crlf() == true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look_set = LookSet::singleton(Look::WordAscii);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look_set.bits, Look::WordAscii as u32);",
                "    assert!(look_set.contains(Look::WordAscii));",
                "    assert_eq!(look_set.len(), 1);",
                "    assert!(!look_set.is_empty());",
                "    assert!(!look_set.contains(Look::WordUnicode));"
              ],
              "code": [
                "{",
                "    let look_set = LookSet::singleton(Look::WordAscii);",
                "    assert_eq!(look_set.bits, Look::WordAscii as u32);",
                "    assert!(look_set.contains(Look::WordAscii));",
                "    assert_eq!(look_set.len(), 1);",
                "    assert!(!look_set.is_empty());",
                "    assert!(!look_set.contains(Look::WordUnicode));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look_set = LookSet::singleton(Look::WordAsciiNegate);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look_set.bits, Look::WordAsciiNegate as u32);",
                "    assert!(look_set.contains(Look::WordAsciiNegate));",
                "    assert_eq!(look_set.len(), 1);",
                "    assert!(!look_set.is_empty());",
                "    assert!(!look_set.contains(Look::WordAscii));",
                "    assert!(!look_set.contains_word());",
                "    assert!(!look_set.contains_word_unicode());",
                "    assert!(!look_set.contains_word_ascii());"
              ],
              "code": [
                "{",
                "    let look_set = LookSet::singleton(Look::WordAsciiNegate);",
                "    assert_eq!(look_set.bits, Look::WordAsciiNegate as u32);",
                "    assert!(look_set.contains(Look::WordAsciiNegate));",
                "    assert_eq!(look_set.len(), 1);",
                "    assert!(!look_set.is_empty());",
                "    assert!(!look_set.contains(Look::WordAscii));",
                "    assert!(!look_set.contains_word());",
                "    assert!(!look_set.contains_word_unicode());",
                "    assert!(!look_set.contains_word_ascii());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look_set = LookSet::singleton(Look::WordUnicode);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look_set.bits, Look::WordUnicode as u32);"
              ],
              "code": [
                "{",
                "    let look_set = LookSet::singleton(Look::WordUnicode);",
                "    assert_eq!(look_set.bits, Look::WordUnicode as u32);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look_set = LookSet::singleton(Look::WordUnicodeNegate);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look_set.bits, Look::WordUnicodeNegate as u32);",
                "    assert!(look_set.contains(Look::WordUnicodeNegate));",
                "    assert!(!look_set.contains(Look::WordAscii));",
                "    assert!(look_set.len() == 1);",
                "    assert!(!look_set.is_empty());"
              ],
              "code": [
                "{",
                "    let look_set = LookSet::singleton(Look::WordUnicodeNegate);",
                "    assert_eq!(look_set.bits, Look::WordUnicodeNegate as u32);",
                "    assert!(look_set.contains(Look::WordUnicodeNegate));",
                "    assert!(!look_set.contains(Look::WordAscii));",
                "    assert!(look_set.len() == 1);",
                "    assert!(!look_set.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look_set = LookSet::singleton(Look::WordStartAscii);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look_set.bits, Look::WordStartAscii as u32);",
                "    assert!(look_set.contains(Look::WordStartAscii));",
                "    assert_eq!(look_set.len(), 1);",
                "    assert!(!look_set.is_empty());",
                "    assert!(look_set.contains_word_ascii());",
                "    assert!(!look_set.contains_word_unicode());",
                "    assert!(!look_set.contains_word());",
                "    assert!(!look_set.contains_anchor());",
                "    assert!(!look_set.contains_anchor_haystack());",
                "    assert!(!look_set.contains_anchor_line());",
                "    assert!(!look_set.contains_anchor_lf());",
                "    assert!(!look_set.contains_anchor_crlf());"
              ],
              "code": [
                "{",
                "    let look_set = LookSet::singleton(Look::WordStartAscii);",
                "    assert_eq!(look_set.bits, Look::WordStartAscii as u32);",
                "    assert!(look_set.contains(Look::WordStartAscii));",
                "    assert_eq!(look_set.len(), 1);",
                "    assert!(!look_set.is_empty());",
                "    assert!(look_set.contains_word_ascii());",
                "    assert!(!look_set.contains_word_unicode());",
                "    assert!(!look_set.contains_word());",
                "    assert!(!look_set.contains_anchor());",
                "    assert!(!look_set.contains_anchor_haystack());",
                "    assert!(!look_set.contains_anchor_line());",
                "    assert!(!look_set.contains_anchor_lf());",
                "    assert!(!look_set.contains_anchor_crlf());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look_set = LookSet::singleton(Look::WordEndAscii);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look_set.bits, Look::WordEndAscii as u32);",
                "    assert!(look_set.contains(Look::WordEndAscii));",
                "    assert!(!look_set.is_empty());",
                "    assert_eq!(look_set.len(), 1);",
                "    assert!(look_set.contains_word_ascii());",
                "    assert!(!look_set.contains_word_unicode());",
                "    assert!(!look_set.contains_anchor());",
                "    assert!(!look_set.contains_anchor_haystack());",
                "    assert!(!look_set.contains_anchor_line());",
                "    assert!(!look_set.contains_anchor_lf());",
                "    assert!(!look_set.contains_anchor_crlf());"
              ],
              "code": [
                "{",
                "    let look_set = LookSet::singleton(Look::WordEndAscii);",
                "    assert_eq!(look_set.bits, Look::WordEndAscii as u32);",
                "    assert!(look_set.contains(Look::WordEndAscii));",
                "    assert!(!look_set.is_empty());",
                "    assert_eq!(look_set.len(), 1);",
                "    assert!(look_set.contains_word_ascii());",
                "    assert!(!look_set.contains_word_unicode());",
                "    assert!(!look_set.contains_anchor());",
                "    assert!(!look_set.contains_anchor_haystack());",
                "    assert!(!look_set.contains_anchor_line());",
                "    assert!(!look_set.contains_anchor_lf());",
                "    assert!(!look_set.contains_anchor_crlf());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look_set = LookSet::singleton(Look::WordStartUnicode);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look_set.bits, Look::WordStartUnicode as u32);",
                "    assert!(look_set.contains(Look::WordStartUnicode));",
                "    assert!(!look_set.is_empty());",
                "    assert_eq!(look_set.len(), 1);"
              ],
              "code": [
                "{",
                "    let look_set = LookSet::singleton(Look::WordStartUnicode);",
                "    assert_eq!(look_set.bits, Look::WordStartUnicode as u32);",
                "    assert!(look_set.contains(Look::WordStartUnicode));",
                "    assert!(!look_set.is_empty());",
                "    assert_eq!(look_set.len(), 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look_set = LookSet::singleton(Look::WordEndUnicode);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look_set.bits, Look::WordEndUnicode as u32);",
                "    assert!(look_set.contains(Look::WordEndUnicode));",
                "    assert_eq!(look_set.len(), 1);",
                "    assert!(!look_set.is_empty());",
                "    assert!(!look_set.contains(Look::Start));",
                "    assert!(!look_set.contains_word());",
                "    assert!(!look_set.contains_word_ascii());",
                "    assert!(look_set.contains_word_unicode());"
              ],
              "code": [
                "{",
                "    let look_set = LookSet::singleton(Look::WordEndUnicode);",
                "    assert_eq!(look_set.bits, Look::WordEndUnicode as u32);",
                "    assert!(look_set.contains(Look::WordEndUnicode));",
                "    assert_eq!(look_set.len(), 1);",
                "    assert!(!look_set.is_empty());",
                "    assert!(!look_set.contains(Look::Start));",
                "    assert!(!look_set.contains_word());",
                "    assert!(!look_set.contains_word_ascii());",
                "    assert!(look_set.contains_word_unicode());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look_set = LookSet::singleton(Look::WordStartHalfAscii);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look_set.bits, Look::WordStartHalfAscii as u32);",
                "    assert!(look_set.contains(Look::WordStartHalfAscii));",
                "    assert!(!look_set.contains(Look::WordEndAscii));",
                "    assert_eq!(look_set.len(), 1);",
                "    assert!(!look_set.is_empty());",
                "    assert!(look_set.contains_word());",
                "    assert!(!look_set.contains_word_unicode());",
                "    assert!(!look_set.contains_word_ascii());"
              ],
              "code": [
                "{",
                "    let look_set = LookSet::singleton(Look::WordStartHalfAscii);",
                "    assert_eq!(look_set.bits, Look::WordStartHalfAscii as u32);",
                "    assert!(look_set.contains(Look::WordStartHalfAscii));",
                "    assert!(!look_set.contains(Look::WordEndAscii));",
                "    assert_eq!(look_set.len(), 1);",
                "    assert!(!look_set.is_empty());",
                "    assert!(look_set.contains_word());",
                "    assert!(!look_set.contains_word_unicode());",
                "    assert!(!look_set.contains_word_ascii());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look_set = LookSet::singleton(Look::WordEndHalfAscii);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look_set.bits, Look::WordEndHalfAscii as u32);"
              ],
              "code": [
                "{",
                "    let look_set = LookSet::singleton(Look::WordEndHalfAscii);",
                "    assert_eq!(look_set.bits, Look::WordEndHalfAscii as u32);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look_set = LookSet::singleton(Look::WordStartHalfUnicode);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look_set.bits, 1 << 16);",
                "    assert!(look_set.contains(Look::WordStartHalfUnicode));",
                "    assert_eq!(look_set.len(), 1);",
                "    assert!(!look_set.is_empty());",
                "    assert!(!look_set.contains(Look::WordEndHalfUnicode));",
                "    assert!(look_set.contains_word());",
                "    assert!(look_set.contains_word_unicode());",
                "    assert!(!look_set.contains_word_ascii());"
              ],
              "code": [
                "{",
                "    let look_set = LookSet::singleton(Look::WordStartHalfUnicode);",
                "    assert_eq!(look_set.bits, 1 << 16);",
                "    assert!(look_set.contains(Look::WordStartHalfUnicode));",
                "    assert_eq!(look_set.len(), 1);",
                "    assert!(!look_set.is_empty());",
                "    assert!(!look_set.contains(Look::WordEndHalfUnicode));",
                "    assert!(look_set.contains_word());",
                "    assert!(look_set.contains_word_unicode());",
                "    assert!(!look_set.contains_word_ascii());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look_set = LookSet::singleton(Look::WordEndHalfUnicode);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look_set.bits, Look::WordEndHalfUnicode as u32);",
                "    assert!(look_set.contains(Look::WordEndHalfUnicode));",
                "    assert_eq!(look_set.len(), 1);",
                "    assert!(!look_set.is_empty());"
              ],
              "code": [
                "{",
                "    let look_set = LookSet::singleton(Look::WordEndHalfUnicode);",
                "    assert_eq!(look_set.bits, Look::WordEndHalfUnicode as u32);",
                "    assert!(look_set.contains(Look::WordEndHalfUnicode));",
                "    assert_eq!(look_set.len(), 1);",
                "    assert!(!look_set.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}