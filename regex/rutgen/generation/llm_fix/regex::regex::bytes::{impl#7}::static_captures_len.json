{
  "name": "regex::regex::bytes::{impl#7}::static_captures_len",
  "mod_info": {
    "name": "regex::bytes",
    "loc": "src/regex/mod.rs:1:1:1:22"
  },
  "visible": true,
  "loc": "src/regex/bytes.rs:1397:5:1399:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions or ranges: valid regex patterns including: \"\", \"a\", \"(a)\", \"(a)|(b)\", \"(a)(b)|(c)(d)\", \"(b)+\", invalid patterns resulting in None: \"(a)|b\", \"a|(b)\", \"(b)*\", extreme cases like repetitive or very long patterns.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = regex::bytes::Regex::new(\"\").unwrap();",
                "    let _ = re.static_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(re.static_captures_len(), None);",
                "    let re_a = regex::bytes::Regex::new(\"a\").unwrap();",
                "    assert_eq!(re_a.static_captures_len(), Some(1));",
                "    let re_capture_a = regex::bytes::Regex::new(\"(a)\").unwrap();",
                "    assert_eq!(re_capture_a.static_captures_len(), Some(2));",
                "    let re_alt = regex::bytes::Regex::new(\"(a)|(b)\").unwrap();",
                "    assert_eq!(re_alt.static_captures_len(), Some(2));",
                "    let re_complex = regex::bytes::Regex::new(\"(a)(b)|(c)(d)\").unwrap();",
                "    assert_eq!(re_complex.static_captures_len(), Some(3));",
                "    let re_var_capture = regex::bytes::Regex::new(\"(a)|b\").unwrap();",
                "    assert_eq!(re_var_capture.static_captures_len(), None);",
                "    let re_var_capture_b = regex::bytes::Regex::new(\"a|(b)\").unwrap();",
                "    assert_eq!(re_var_capture_b.static_captures_len(), None);",
                "    let re_zero_or_more = regex::bytes::Regex::new(\"(b)*\").unwrap();",
                "    assert_eq!(re_zero_or_more.static_captures_len(), None);",
                "    let re_one_or_more = regex::bytes::Regex::new(\"(b)+\").unwrap();",
                "    assert_eq!(re_one_or_more.static_captures_len(), Some(2));"
              ],
              "code": [
                "{",
                "    let re = regex::bytes::Regex::new(\"\").unwrap();",
                "    let _ = re.static_captures_len();",
                "    assert_eq!(re.static_captures_len(), None);",
                "    let re_a = regex::bytes::Regex::new(\"a\").unwrap();",
                "    assert_eq!(re_a.static_captures_len(), Some(1));",
                "    let re_capture_a = regex::bytes::Regex::new(\"(a)\").unwrap();",
                "    assert_eq!(re_capture_a.static_captures_len(), Some(2));",
                "    let re_alt = regex::bytes::Regex::new(\"(a)|(b)\").unwrap();",
                "    assert_eq!(re_alt.static_captures_len(), Some(2));",
                "    let re_complex = regex::bytes::Regex::new(\"(a)(b)|(c)(d)\").unwrap();",
                "    assert_eq!(re_complex.static_captures_len(), Some(3));",
                "    let re_var_capture = regex::bytes::Regex::new(\"(a)|b\").unwrap();",
                "    assert_eq!(re_var_capture.static_captures_len(), None);",
                "    let re_var_capture_b = regex::bytes::Regex::new(\"a|(b)\").unwrap();",
                "    assert_eq!(re_var_capture_b.static_captures_len(), None);",
                "    let re_zero_or_more = regex::bytes::Regex::new(\"(b)*\").unwrap();",
                "    assert_eq!(re_zero_or_more.static_captures_len(), None);",
                "    let re_one_or_more = regex::bytes::Regex::new(\"(b)+\").unwrap();",
                "    assert_eq!(re_one_or_more.static_captures_len(), Some(2));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = regex::bytes::Regex::new(\"a\").unwrap();",
                "    let _ = re.static_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Some(1), re.static_captures_len());",
                "    ",
                "    let re = regex::bytes::Regex::new(\"(a)\").unwrap();",
                "    assert_eq!(Some(2), re.static_captures_len());",
                "    ",
                "    let re = regex::bytes::Regex::new(\"(a)|(b)\").unwrap();",
                "    assert_eq!(Some(2), re.static_captures_len());",
                "    ",
                "    let re = regex::bytes::Regex::new(\"(a)(b)|(c)(d)\").unwrap();",
                "    assert_eq!(Some(3), re.static_captures_len());",
                "    ",
                "    let re = regex::bytes::Regex::new(\"(a)|b\").unwrap();",
                "    assert_eq!(None, re.static_captures_len());",
                "    ",
                "    let re = regex::bytes::Regex::new(\"a|(b)\").unwrap();",
                "    assert_eq!(None, re.static_captures_len());",
                "    ",
                "    let re = regex::bytes::Regex::new(\"(b)*\").unwrap();",
                "    assert_eq!(None, re.static_captures_len());",
                "    ",
                "    let re = regex::bytes::Regex::new(\"(b)+\").unwrap();",
                "    assert_eq!(Some(2), re.static_captures_len());"
              ],
              "code": [
                "{",
                "    let re = regex::bytes::Regex::new(\"a\").unwrap();",
                "    let _ = re.static_captures_len();",
                "    assert_eq!(Some(1), re.static_captures_len());",
                "    ",
                "    let re = regex::bytes::Regex::new(\"(a)\").unwrap();",
                "    assert_eq!(Some(2), re.static_captures_len());",
                "    ",
                "    let re = regex::bytes::Regex::new(\"(a)|(b)\").unwrap();",
                "    assert_eq!(Some(2), re.static_captures_len());",
                "    ",
                "    let re = regex::bytes::Regex::new(\"(a)(b)|(c)(d)\").unwrap();",
                "    assert_eq!(Some(3), re.static_captures_len());",
                "    ",
                "    let re = regex::bytes::Regex::new(\"(a)|b\").unwrap();",
                "    assert_eq!(None, re.static_captures_len());",
                "    ",
                "    let re = regex::bytes::Regex::new(\"a|(b)\").unwrap();",
                "    assert_eq!(None, re.static_captures_len());",
                "    ",
                "    let re = regex::bytes::Regex::new(\"(b)*\").unwrap();",
                "    assert_eq!(None, re.static_captures_len());",
                "    ",
                "    let re = regex::bytes::Regex::new(\"(b)+\").unwrap();",
                "    assert_eq!(Some(2), re.static_captures_len());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = regex::bytes::Regex::new(\"(a)\").unwrap();",
                "    let _ = re.static_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Some(2), regex::bytes::Regex::new(\"(a)|(b)\").unwrap().static_captures_len());",
                "    assert_eq!(Some(3), regex::bytes::Regex::new(\"(a)(b)|(c)(d)\").unwrap().static_captures_len());",
                "    assert_eq!(None, regex::bytes::Regex::new(\"(a)|b\").unwrap().static_captures_len());",
                "    assert_eq!(None, regex::bytes::Regex::new(\"a|(b)\").unwrap().static_captures_len());",
                "    assert_eq!(None, regex::bytes::Regex::new(\"(b)*\").unwrap().static_captures_len());",
                "    assert_eq!(Some(2), regex::bytes::Regex::new(\"(b)+\").unwrap().static_captures_len());"
              ],
              "code": [
                "{",
                "    let re = regex::bytes::Regex::new(\"(a)\").unwrap();",
                "    let _ = re.static_captures_len();",
                "    assert_eq!(Some(2), regex::bytes::Regex::new(\"(a)|(b)\").unwrap().static_captures_len());",
                "    assert_eq!(Some(3), regex::bytes::Regex::new(\"(a)(b)|(c)(d)\").unwrap().static_captures_len());",
                "    assert_eq!(None, regex::bytes::Regex::new(\"(a)|b\").unwrap().static_captures_len());",
                "    assert_eq!(None, regex::bytes::Regex::new(\"a|(b)\").unwrap().static_captures_len());",
                "    assert_eq!(None, regex::bytes::Regex::new(\"(b)*\").unwrap().static_captures_len());",
                "    assert_eq!(Some(2), regex::bytes::Regex::new(\"(b)+\").unwrap().static_captures_len());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = regex::bytes::Regex::new(\"(a)|(b)\").unwrap();",
                "    let _ = re.static_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Some(2), re.static_captures_len());",
                "    ",
                "    let re = regex::bytes::Regex::new(\"a\").unwrap();",
                "    assert_eq!(Some(1), re.static_captures_len());",
                "    ",
                "    let re = regex::bytes::Regex::new(\"(a)\").unwrap();",
                "    assert_eq!(Some(2), re.static_captures_len());",
                "    ",
                "    let re = regex::bytes::Regex::new(\"(a)|(b)\").unwrap();",
                "    assert_eq!(Some(2), re.static_captures_len());",
                "    ",
                "    let re = regex::bytes::Regex::new(\"(a)(b)|(c)(d)\").unwrap();",
                "    assert_eq!(Some(3), re.static_captures_len());",
                "    ",
                "    let re = regex::bytes::Regex::new(\"(a)|b\").unwrap();",
                "    assert_eq!(None, re.static_captures_len());",
                "    ",
                "    let re = regex::bytes::Regex::new(\"a|(b)\").unwrap();",
                "    assert_eq!(None, re.static_captures_len());",
                "    ",
                "    let re = regex::bytes::Regex::new(\"(b)*\").unwrap();",
                "    assert_eq!(None, re.static_captures_len());",
                "    ",
                "    let re = regex::bytes::Regex::new(\"(b)+\").unwrap();",
                "    assert_eq!(Some(2), re.static_captures_len());"
              ],
              "code": [
                "{",
                "    let re = regex::bytes::Regex::new(\"(a)|(b)\").unwrap();",
                "    let _ = re.static_captures_len();",
                "    assert_eq!(Some(2), re.static_captures_len());",
                "    ",
                "    let re = regex::bytes::Regex::new(\"a\").unwrap();",
                "    assert_eq!(Some(1), re.static_captures_len());",
                "    ",
                "    let re = regex::bytes::Regex::new(\"(a)\").unwrap();",
                "    assert_eq!(Some(2), re.static_captures_len());",
                "    ",
                "    let re = regex::bytes::Regex::new(\"(a)|(b)\").unwrap();",
                "    assert_eq!(Some(2), re.static_captures_len());",
                "    ",
                "    let re = regex::bytes::Regex::new(\"(a)(b)|(c)(d)\").unwrap();",
                "    assert_eq!(Some(3), re.static_captures_len());",
                "    ",
                "    let re = regex::bytes::Regex::new(\"(a)|b\").unwrap();",
                "    assert_eq!(None, re.static_captures_len());",
                "    ",
                "    let re = regex::bytes::Regex::new(\"a|(b)\").unwrap();",
                "    assert_eq!(None, re.static_captures_len());",
                "    ",
                "    let re = regex::bytes::Regex::new(\"(b)*\").unwrap();",
                "    assert_eq!(None, re.static_captures_len());",
                "    ",
                "    let re = regex::bytes::Regex::new(\"(b)+\").unwrap();",
                "    assert_eq!(Some(2), re.static_captures_len());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = regex::bytes::Regex::new(\"(a)(b)|(c)(d)\").unwrap();",
                "    let _ = re.static_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Some(3), re.static_captures_len());",
                "    let re = regex::bytes::Regex::new(\"(a)\").unwrap();",
                "    assert_eq!(Some(1), re.static_captures_len());",
                "    let re = regex::bytes::Regex::new(\"(a)|(b)\").unwrap();",
                "    assert_eq!(None, re.static_captures_len());",
                "    let re = regex::bytes::Regex::new(\"a|(b)\").unwrap();",
                "    assert_eq!(None, re.static_captures_len());",
                "    let re = regex::bytes::Regex::new(\"(b)*\").unwrap();",
                "    assert_eq!(None, re.static_captures_len());",
                "    let re = regex::bytes::Regex::new(\"(b)+\").unwrap();",
                "    assert_eq!(Some(2), re.static_captures_len());",
                "    let re = regex::bytes::Regex::new(\"(a)|(b)|(c)\").unwrap();",
                "    assert_eq!(None, re.static_captures_len());",
                "    let re = regex::bytes::Regex::new(\"(x)(y)(z)\").unwrap();",
                "    assert_eq!(Some(3), re.static_captures_len());"
              ],
              "code": [
                "{",
                "    let re = regex::bytes::Regex::new(\"(a)(b)|(c)(d)\").unwrap();",
                "    let _ = re.static_captures_len();",
                "    assert_eq!(Some(3), re.static_captures_len());",
                "    let re = regex::bytes::Regex::new(\"(a)\").unwrap();",
                "    assert_eq!(Some(1), re.static_captures_len());",
                "    let re = regex::bytes::Regex::new(\"(a)|(b)\").unwrap();",
                "    assert_eq!(None, re.static_captures_len());",
                "    let re = regex::bytes::Regex::new(\"a|(b)\").unwrap();",
                "    assert_eq!(None, re.static_captures_len());",
                "    let re = regex::bytes::Regex::new(\"(b)*\").unwrap();",
                "    assert_eq!(None, re.static_captures_len());",
                "    let re = regex::bytes::Regex::new(\"(b)+\").unwrap();",
                "    assert_eq!(Some(2), re.static_captures_len());",
                "    let re = regex::bytes::Regex::new(\"(a)|(b)|(c)\").unwrap();",
                "    assert_eq!(None, re.static_captures_len());",
                "    let re = regex::bytes::Regex::new(\"(x)(y)(z)\").unwrap();",
                "    assert_eq!(Some(3), re.static_captures_len());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = regex::bytes::Regex::new(\"(a)|b\").unwrap();",
                "    let _ = re.static_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(re.static_captures_len(), None);",
                "    ",
                "    let re = regex::bytes::Regex::new(\"a|(b)\").unwrap();",
                "    assert_eq!(re.static_captures_len(), None);",
                "    ",
                "    let re = regex::bytes::Regex::new(\"(b)*\").unwrap();",
                "    assert_eq!(re.static_captures_len(), None);",
                "    ",
                "    let re = regex::bytes::Regex::new(\"(b)+\").unwrap();",
                "    assert_eq!(re.static_captures_len(), Some(2));",
                "    ",
                "    let re = regex::bytes::Regex::new(\"a\").unwrap();",
                "    assert_eq!(re.static_captures_len(), Some(1));",
                "    ",
                "    let re = regex::bytes::Regex::new(\"(a)\").unwrap();",
                "    assert_eq!(re.static_captures_len(), Some(2));",
                "    ",
                "    let re = regex::bytes::Regex::new(\"(a)|(b)\").unwrap();",
                "    assert_eq!(re.static_captures_len(), Some(2));",
                "    ",
                "    let re = regex::bytes::Regex::new(\"(a)(b)|(c)(d)\").unwrap();",
                "    assert_eq!(re.static_captures_len(), Some(3));"
              ],
              "code": [
                "{",
                "    let re = regex::bytes::Regex::new(\"(a)|b\").unwrap();",
                "    let _ = re.static_captures_len();",
                "    assert_eq!(re.static_captures_len(), None);",
                "    ",
                "    let re = regex::bytes::Regex::new(\"a|(b)\").unwrap();",
                "    assert_eq!(re.static_captures_len(), None);",
                "    ",
                "    let re = regex::bytes::Regex::new(\"(b)*\").unwrap();",
                "    assert_eq!(re.static_captures_len(), None);",
                "    ",
                "    let re = regex::bytes::Regex::new(\"(b)+\").unwrap();",
                "    assert_eq!(re.static_captures_len(), Some(2));",
                "    ",
                "    let re = regex::bytes::Regex::new(\"a\").unwrap();",
                "    assert_eq!(re.static_captures_len(), Some(1));",
                "    ",
                "    let re = regex::bytes::Regex::new(\"(a)\").unwrap();",
                "    assert_eq!(re.static_captures_len(), Some(2));",
                "    ",
                "    let re = regex::bytes::Regex::new(\"(a)|(b)\").unwrap();",
                "    assert_eq!(re.static_captures_len(), Some(2));",
                "    ",
                "    let re = regex::bytes::Regex::new(\"(a)(b)|(c)(d)\").unwrap();",
                "    assert_eq!(re.static_captures_len(), Some(3));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = regex::bytes::Regex::new(\"a|(b)\").unwrap();",
                "    let _ = re.static_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Some(1), regex::bytes::Regex::new(\"a\").unwrap().static_captures_len());",
                "    assert_eq!(Some(2), regex::bytes::Regex::new(\"(a)\").unwrap().static_captures_len());",
                "    assert_eq!(Some(2), regex::bytes::Regex::new(\"(a)|(b)\").unwrap().static_captures_len());",
                "    assert_eq!(Some(3), regex::bytes::Regex::new(\"(a)(b)|(c)(d)\").unwrap().static_captures_len());",
                "    assert_eq!(None, regex::bytes::Regex::new(\"(a)|b\").unwrap().static_captures_len());",
                "    assert_eq!(None, regex::bytes::Regex::new(\"a|(b)\").unwrap().static_captures_len());",
                "    assert_eq!(None, regex::bytes::Regex::new(\"(b)*\").unwrap().static_captures_len());",
                "    assert_eq!(Some(2), regex::bytes::Regex::new(\"(b)+\").unwrap().static_captures_len());"
              ],
              "code": [
                "{",
                "    let re = regex::bytes::Regex::new(\"a|(b)\").unwrap();",
                "    let _ = re.static_captures_len();",
                "    assert_eq!(Some(1), regex::bytes::Regex::new(\"a\").unwrap().static_captures_len());",
                "    assert_eq!(Some(2), regex::bytes::Regex::new(\"(a)\").unwrap().static_captures_len());",
                "    assert_eq!(Some(2), regex::bytes::Regex::new(\"(a)|(b)\").unwrap().static_captures_len());",
                "    assert_eq!(Some(3), regex::bytes::Regex::new(\"(a)(b)|(c)(d)\").unwrap().static_captures_len());",
                "    assert_eq!(None, regex::bytes::Regex::new(\"(a)|b\").unwrap().static_captures_len());",
                "    assert_eq!(None, regex::bytes::Regex::new(\"a|(b)\").unwrap().static_captures_len());",
                "    assert_eq!(None, regex::bytes::Regex::new(\"(b)*\").unwrap().static_captures_len());",
                "    assert_eq!(Some(2), regex::bytes::Regex::new(\"(b)+\").unwrap().static_captures_len());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = regex::bytes::Regex::new(\"(b)*\").unwrap();",
                "    let _ = re.static_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(re.static_captures_len(), None);",
                "    let re = regex::bytes::Regex::new(\"a|(b)\").unwrap();",
                "    assert_eq!(re.static_captures_len(), None);",
                "    let re = regex::bytes::Regex::new(\"(a)|(b)\").unwrap();",
                "    assert_eq!(re.static_captures_len(), Some(2));",
                "    let re = regex::bytes::Regex::new(\"(a)(b)|(c)(d)\").unwrap();",
                "    assert_eq!(re.static_captures_len(), Some(3));",
                "    let re = regex::bytes::Regex::new(\"(b)+\").unwrap();",
                "    assert_eq!(re.static_captures_len(), Some(2));",
                "    let re = regex::bytes::Regex::new(\"a\").unwrap();",
                "    assert_eq!(re.static_captures_len(), Some(1));",
                "    let re = regex::bytes::Regex::new(\"(a)|b\").unwrap();",
                "    assert_eq!(re.static_captures_len(), None);",
                "    let re = regex::bytes::Regex::new(\"(b)*\").unwrap();",
                "    assert_eq!(re.static_captures_len(), None);",
                "    let re = regex::bytes::Regex::new(\"(a)|(b)\").unwrap();",
                "    assert_eq!(re.static_captures_len(), Some(2));",
                "    let re = regex::bytes::Regex::new(\"(a)(b)|(c)(d)\").unwrap();",
                "    assert_eq!(re.static_captures_len(), Some(3));"
              ],
              "code": [
                "{",
                "    let re = regex::bytes::Regex::new(\"(b)*\").unwrap();",
                "    let _ = re.static_captures_len();",
                "    assert_eq!(re.static_captures_len(), None);",
                "    let re = regex::bytes::Regex::new(\"a|(b)\").unwrap();",
                "    assert_eq!(re.static_captures_len(), None);",
                "    let re = regex::bytes::Regex::new(\"(a)|(b)\").unwrap();",
                "    assert_eq!(re.static_captures_len(), Some(2));",
                "    let re = regex::bytes::Regex::new(\"(a)(b)|(c)(d)\").unwrap();",
                "    assert_eq!(re.static_captures_len(), Some(3));",
                "    let re = regex::bytes::Regex::new(\"(b)+\").unwrap();",
                "    assert_eq!(re.static_captures_len(), Some(2));",
                "    let re = regex::bytes::Regex::new(\"a\").unwrap();",
                "    assert_eq!(re.static_captures_len(), Some(1));",
                "    let re = regex::bytes::Regex::new(\"(a)|b\").unwrap();",
                "    assert_eq!(re.static_captures_len(), None);",
                "    let re = regex::bytes::Regex::new(\"(b)*\").unwrap();",
                "    assert_eq!(re.static_captures_len(), None);",
                "    let re = regex::bytes::Regex::new(\"(a)|(b)\").unwrap();",
                "    assert_eq!(re.static_captures_len(), Some(2));",
                "    let re = regex::bytes::Regex::new(\"(a)(b)|(c)(d)\").unwrap();",
                "    assert_eq!(re.static_captures_len(), Some(3));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = regex::bytes::Regex::new(\"(b)+\").unwrap();",
                "    let _ = re.static_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Some(2), re.static_captures_len());"
              ],
              "code": [
                "{",
                "    let re = regex::bytes::Regex::new(\"(b)+\").unwrap();",
                "    let _ = re.static_captures_len();",
                "    assert_eq!(Some(2), re.static_captures_len());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = regex::bytes::Regex::new(\"(a){1000}\").unwrap();",
                "    let _ = re.static_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Some(1), regex::bytes::Regex::new(\"a\").unwrap().static_captures_len());",
                "    assert_eq!(Some(2), regex::bytes::Regex::new(\"(a)\").unwrap().static_captures_len());",
                "    assert_eq!(Some(2), regex::bytes::Regex::new(\"(a)|(b)\").unwrap().static_captures_len());",
                "    assert_eq!(Some(3), regex::bytes::Regex::new(\"(a)(b)|(c)(d)\").unwrap().static_captures_len());",
                "    assert_eq!(None, regex::bytes::Regex::new(\"(a)|b\").unwrap().static_captures_len());",
                "    assert_eq!(None, regex::bytes::Regex::new(\"a|(b)\").unwrap().static_captures_len());",
                "    assert_eq!(None, regex::bytes::Regex::new(\"(b)*\").unwrap().static_captures_len());",
                "    assert_eq!(Some(2), regex::bytes::Regex::new(\"(b)+\").unwrap().static_captures_len());"
              ],
              "code": [
                "{",
                "    let re = regex::bytes::Regex::new(\"(a){1000}\").unwrap();",
                "    let _ = re.static_captures_len();",
                "    assert_eq!(Some(1), regex::bytes::Regex::new(\"a\").unwrap().static_captures_len());",
                "    assert_eq!(Some(2), regex::bytes::Regex::new(\"(a)\").unwrap().static_captures_len());",
                "    assert_eq!(Some(2), regex::bytes::Regex::new(\"(a)|(b)\").unwrap().static_captures_len());",
                "    assert_eq!(Some(3), regex::bytes::Regex::new(\"(a)(b)|(c)(d)\").unwrap().static_captures_len());",
                "    assert_eq!(None, regex::bytes::Regex::new(\"(a)|b\").unwrap().static_captures_len());",
                "    assert_eq!(None, regex::bytes::Regex::new(\"a|(b)\").unwrap().static_captures_len());",
                "    assert_eq!(None, regex::bytes::Regex::new(\"(b)*\").unwrap().static_captures_len());",
                "    assert_eq!(Some(2), regex::bytes::Regex::new(\"(b)+\").unwrap().static_captures_len());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}