{
  "name": "regex_automata::dfa::onepass::{impl#3}::memory_usage",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/onepass.rs:1534:5:1539:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.table.len() * size_of::<Transition>()\n            + self.starts.len() * size_of::<StateID>()\n"
      ],
      "input_infer": "self.table.len() ranging from 0 to 512 and self.starts.len() ranging from 0 to 256\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dfa = DFA {",
                "        table: vec![],",
                "        starts: vec![],",
                "        min_match_id: 0,",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 0,",
                "        stride2: 0,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "        config: Config {",
                "            look_behind: None,",
                "            anchored: Anchored::No,",
                "        },",
                "        nfa: NFA(Default::default()),",
                "    };",
                "",
                "    let _ = dfa.memory_usage();",
                "}"
              ],
              "oracle": [
                "    let dfa = DFA {",
                "    table: vec![Transition { start: 0, end: 0, next: 0 }; 10],",
                "    starts: vec![0, 1],",
                "    min_match_id: 0,",
                "    classes: ByteClasses([0; 256]),",
                "    alphabet_len: 256,",
                "    stride2: 9,",
                "    pateps_offset: 0,",
                "    explicit_slot_start: 0,",
                "    config: Config {",
                "    look_behind: None,",
                "    anchored: Anchored::No,",
                "    },",
                "    nfa: NFA(Default::default()),",
                "    };",
                "    assert_eq!(dfa.memory_usage(), 10 * std::mem::size_of::<Transition>() + 2 * std::mem::size_of::<StateID>());",
                "    ",
                "    let dfa = DFA {",
                "    table: vec![Transition { start: 0, end: 0, next: 0 }; 5],",
                "    starts: vec![0],",
                "    min_match_id: 0,",
                "    classes: ByteClasses([0; 256]),",
                "    alphabet_len: 0,",
                "    stride2: 0,",
                "    pateps_offset: 0,",
                "    explicit_slot_start: 0,",
                "    config: Config {",
                "    look_behind: None,",
                "    anchored: Anchored::No,",
                "    },",
                "    nfa: NFA(Default::default()),",
                "    };",
                "    assert_eq!(dfa.memory_usage(), 5 * std::mem::size_of::<Transition>() + 1 * std::mem::size_of::<StateID>());",
                "    ",
                "    let dfa = DFA {",
                "    table: vec![Transition { start: 0, end: 0, next: 0 }; 20],",
                "    starts: vec![0; 3],",
                "    min_match_id: 0,",
                "    classes: ByteClasses([0; 256]),",
                "    alphabet_len: 0,",
                "    stride2: 0,",
                "    pateps_offset: 0,",
                "    explicit_slot_start: 0,",
                "    config: Config {",
                "    look_behind: None,",
                "    anchored: Anchored::No,",
                "    },",
                "    nfa: NFA(Default::default()),",
                "    };",
                "    assert_eq!(dfa.memory_usage(), 20 * std::mem::size_of::<Transition>() + 3 * std::mem::size_of::<StateID>());",
                "    ",
                "    let dfa = DFA {",
                "    table: vec![Transition { start: 1, end: 2, next: 3 }; 100],",
                "    starts: vec![0, 1, 2, 3],",
                "    min_match_id: 0,",
                "    classes: ByteClasses([0; 256]),",
                "    alphabet_len: 0,",
                "    stride2: 0,",
                "    pateps_offset: 0,",
                "    explicit_slot_start: 0,",
                "    config: Config {",
                "    look_behind: None,",
                "    anchored: Anchored::No,",
                "    },",
                "    nfa: NFA(Default::default()),",
                "    };",
                "    assert_eq!(dfa.memory_usage(), 100 * std::mem::size_of::<Transition>() + 4 * std::mem::size_of::<StateID>());",
                "    ",
                "    let dfa = DFA {",
                "    table: vec![],",
                "    starts: vec![0],",
                "    min_match_id: 0,",
                "    classes: ByteClasses([0; 256]),",
                "    alphabet_len: 0,",
                "    stride2: 0,",
                "    pateps_offset: 0,",
                "    explicit_slot_start: 0,",
                "    config: Config {",
                "    look_behind: None,",
                "    anchored: Anchored::No,",
                "    },",
                "    nfa: NFA(Default::default()),",
                "    };",
                "    assert_eq!(dfa.memory_usage(), 0 * std::mem::size_of::<Transition>() + 1 * std::mem::size_of::<StateID>());"
              ],
              "code": [
                "{",
                "    let dfa = DFA {",
                "        table: vec![],",
                "        starts: vec![],",
                "        min_match_id: 0,",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 0,",
                "        stride2: 0,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "        config: Config {",
                "            look_behind: None,",
                "            anchored: Anchored::No,",
                "        },",
                "        nfa: NFA(Default::default()),",
                "    };",
                "",
                "    let _ = dfa.memory_usage();",
                "    let dfa = DFA {",
                "    table: vec![Transition { start: 0, end: 0, next: 0 }; 10],",
                "    starts: vec![0, 1],",
                "    min_match_id: 0,",
                "    classes: ByteClasses([0; 256]),",
                "    alphabet_len: 256,",
                "    stride2: 9,",
                "    pateps_offset: 0,",
                "    explicit_slot_start: 0,",
                "    config: Config {",
                "    look_behind: None,",
                "    anchored: Anchored::No,",
                "    },",
                "    nfa: NFA(Default::default()),",
                "    };",
                "    assert_eq!(dfa.memory_usage(), 10 * std::mem::size_of::<Transition>() + 2 * std::mem::size_of::<StateID>());",
                "    ",
                "    let dfa = DFA {",
                "    table: vec![Transition { start: 0, end: 0, next: 0 }; 5],",
                "    starts: vec![0],",
                "    min_match_id: 0,",
                "    classes: ByteClasses([0; 256]),",
                "    alphabet_len: 0,",
                "    stride2: 0,",
                "    pateps_offset: 0,",
                "    explicit_slot_start: 0,",
                "    config: Config {",
                "    look_behind: None,",
                "    anchored: Anchored::No,",
                "    },",
                "    nfa: NFA(Default::default()),",
                "    };",
                "    assert_eq!(dfa.memory_usage(), 5 * std::mem::size_of::<Transition>() + 1 * std::mem::size_of::<StateID>());",
                "    ",
                "    let dfa = DFA {",
                "    table: vec![Transition { start: 0, end: 0, next: 0 }; 20],",
                "    starts: vec![0; 3],",
                "    min_match_id: 0,",
                "    classes: ByteClasses([0; 256]),",
                "    alphabet_len: 0,",
                "    stride2: 0,",
                "    pateps_offset: 0,",
                "    explicit_slot_start: 0,",
                "    config: Config {",
                "    look_behind: None,",
                "    anchored: Anchored::No,",
                "    },",
                "    nfa: NFA(Default::default()),",
                "    };",
                "    assert_eq!(dfa.memory_usage(), 20 * std::mem::size_of::<Transition>() + 3 * std::mem::size_of::<StateID>());",
                "    ",
                "    let dfa = DFA {",
                "    table: vec![Transition { start: 1, end: 2, next: 3 }; 100],",
                "    starts: vec![0, 1, 2, 3],",
                "    min_match_id: 0,",
                "    classes: ByteClasses([0; 256]),",
                "    alphabet_len: 0,",
                "    stride2: 0,",
                "    pateps_offset: 0,",
                "    explicit_slot_start: 0,",
                "    config: Config {",
                "    look_behind: None,",
                "    anchored: Anchored::No,",
                "    },",
                "    nfa: NFA(Default::default()),",
                "    };",
                "    assert_eq!(dfa.memory_usage(), 100 * std::mem::size_of::<Transition>() + 4 * std::mem::size_of::<StateID>());",
                "    ",
                "    let dfa = DFA {",
                "    table: vec![],",
                "    starts: vec![0],",
                "    min_match_id: 0,",
                "    classes: ByteClasses([0; 256]),",
                "    alphabet_len: 0,",
                "    stride2: 0,",
                "    pateps_offset: 0,",
                "    explicit_slot_start: 0,",
                "    config: Config {",
                "    look_behind: None,",
                "    anchored: Anchored::No,",
                "    },",
                "    nfa: NFA(Default::default()),",
                "    };",
                "    assert_eq!(dfa.memory_usage(), 0 * std::mem::size_of::<Transition>() + 1 * std::mem::size_of::<StateID>());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dfa = DFA {",
                "        table: vec![Transition { start: 0, end: 1, next: StateID(0) }; 512],",
                "        starts: vec![StateID(0); 256],",
                "        min_match_id: 0,",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 0,",
                "        stride2: 0,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "        config: Config {",
                "            look_behind: None,",
                "            anchored: Anchored::No,",
                "        },",
                "        nfa: NFA(Default::default()),",
                "    };",
                "",
                "    let _ = dfa.memory_usage();",
                "}"
              ],
              "oracle": [
                "    let expected_memory_usage = dfa.table.len() * size_of::<Transition>() + dfa.starts.len() * size_of::<StateID>();",
                "    assert_eq!(_ , expected_memory_usage);"
              ],
              "code": [
                "{",
                "    let dfa = DFA {",
                "        table: vec![Transition { start: 0, end: 1, next: StateID(0) }; 512],",
                "        starts: vec![StateID(0); 256],",
                "        min_match_id: 0,",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 0,",
                "        stride2: 0,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "        config: Config {",
                "            look_behind: None,",
                "            anchored: Anchored::No,",
                "        },",
                "        nfa: NFA(Default::default()),",
                "    };",
                "",
                "    let _ = dfa.memory_usage();",
                "    let expected_memory_usage = dfa.table.len() * size_of::<Transition>() + dfa.starts.len() * size_of::<StateID>();",
                "    assert_eq!(_ , expected_memory_usage);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dfa = DFA {",
                "        table: vec![Transition { start: 0, end: 1, next: StateID(0) }; 128],",
                "        starts: vec![StateID(0); 64],",
                "        min_match_id: 0,",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 0,",
                "        stride2: 0,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "        config: Config {",
                "            look_behind: None,",
                "            anchored: Anchored::No,",
                "        },",
                "        nfa: NFA(Default::default()),",
                "    };",
                "",
                "    let _ = dfa.memory_usage();",
                "}"
              ],
              "oracle": [
                "    let expected_memory_usage = (128 * std::mem::size_of::<Transition>()) + (64 * std::mem::size_of::<StateID>());",
                "    assert_eq!(dfa.memory_usage(), expected_memory_usage);"
              ],
              "code": [
                "{",
                "    let dfa = DFA {",
                "        table: vec![Transition { start: 0, end: 1, next: StateID(0) }; 128],",
                "        starts: vec![StateID(0); 64],",
                "        min_match_id: 0,",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 0,",
                "        stride2: 0,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "        config: Config {",
                "            look_behind: None,",
                "            anchored: Anchored::No,",
                "        },",
                "        nfa: NFA(Default::default()),",
                "    };",
                "",
                "    let _ = dfa.memory_usage();",
                "    let expected_memory_usage = (128 * std::mem::size_of::<Transition>()) + (64 * std::mem::size_of::<StateID>());",
                "    assert_eq!(dfa.memory_usage(), expected_memory_usage);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dfa = DFA {",
                "        table: vec![Transition { start: 0, end: 1, next: StateID(0) }],",
                "        starts: vec![StateID(0)],",
                "        min_match_id: 0,",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 0,",
                "        stride2: 0,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "        config: Config {",
                "            look_behind: None,",
                "            anchored: Anchored::No,",
                "        },",
                "        nfa: NFA(Default::default()),",
                "    };",
                "",
                "    let _ = dfa.memory_usage();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dfa.memory_usage(), 1 * size_of::<Transition>() + 1 * size_of::<StateID>());"
              ],
              "code": [
                "{",
                "    let dfa = DFA {",
                "        table: vec![Transition { start: 0, end: 1, next: StateID(0) }],",
                "        starts: vec![StateID(0)],",
                "        min_match_id: 0,",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 0,",
                "        stride2: 0,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "        config: Config {",
                "            look_behind: None,",
                "            anchored: Anchored::No,",
                "        },",
                "        nfa: NFA(Default::default()),",
                "    };",
                "",
                "    let _ = dfa.memory_usage();",
                "    assert_eq!(dfa.memory_usage(), 1 * size_of::<Transition>() + 1 * size_of::<StateID>());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dfa = DFA {",
                "        table: vec![Transition { start: 0, end: 1, next: StateID(0) }; 512],",
                "        starts: vec![StateID(0); 256],",
                "        min_match_id: 0,",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 0,",
                "        stride2: 0,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "        config: Config {",
                "            look_behind: None,",
                "            anchored: Anchored::No,",
                "        },",
                "        nfa: NFA(Default::default()),",
                "    };",
                "",
                "    let _ = dfa.memory_usage();",
                "}"
              ],
              "oracle": [
                "    let expected_memory_usage = dfa.table.len() * size_of::<Transition>() + dfa.starts.len() * size_of::<StateID>();",
                "    assert_eq!(_ , expected_memory_usage);",
                "    let expected_table_len = 512;",
                "    assert_eq!(dfa.table.len(), expected_table_len);",
                "    let expected_starts_len = 256;",
                "    assert_eq!(dfa.starts.len(), expected_starts_len);",
                "    let expected_transition_size = size_of::<Transition>();",
                "    assert_eq!(size_of::<Transition>(), expected_transition_size);",
                "    let expected_state_id_size = size_of::<StateID>();",
                "    assert_eq!(size_of::<StateID>(), expected_state_id_size);"
              ],
              "code": [
                "{",
                "    let dfa = DFA {",
                "        table: vec![Transition { start: 0, end: 1, next: StateID(0) }; 512],",
                "        starts: vec![StateID(0); 256],",
                "        min_match_id: 0,",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 0,",
                "        stride2: 0,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "        config: Config {",
                "            look_behind: None,",
                "            anchored: Anchored::No,",
                "        },",
                "        nfa: NFA(Default::default()),",
                "    };",
                "",
                "    let _ = dfa.memory_usage();",
                "    let expected_memory_usage = dfa.table.len() * size_of::<Transition>() + dfa.starts.len() * size_of::<StateID>();",
                "    assert_eq!(_ , expected_memory_usage);",
                "    let expected_table_len = 512;",
                "    assert_eq!(dfa.table.len(), expected_table_len);",
                "    let expected_starts_len = 256;",
                "    assert_eq!(dfa.starts.len(), expected_starts_len);",
                "    let expected_transition_size = size_of::<Transition>();",
                "    assert_eq!(size_of::<Transition>(), expected_transition_size);",
                "    let expected_state_id_size = size_of::<StateID>();",
                "    assert_eq!(size_of::<StateID>(), expected_state_id_size);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}