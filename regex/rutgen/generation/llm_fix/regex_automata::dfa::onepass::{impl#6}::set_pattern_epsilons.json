{
  "name": "regex_automata::dfa::onepass::{impl#6}::set_pattern_epsilons",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/onepass.rs:2299:5:2302:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "sid: StateID in the range of valid state IDs; pateps: PatternEpsilons with valid u64 representation; stride2: a power of 2 less than or equal to 9 (for stride of up to 512); table size must accommodate the given offset and pateps_offset (ensuring no out-of-bounds access).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![Transition(0); 10], // Ensure enough space in the table",
                "        starts: vec![StateID(0)],",
                "        min_match_id: StateID(1),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 1,",
                "        stride2: 9, // 2^9 = 512",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    let sid = StateID(0);",
                "    let pateps = PatternEpsilons(123456);",
                "    dfa.set_pattern_epsilons(sid, pateps);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dfa.table[0 + dfa.pateps_offset], Transition(123456));"
              ],
              "code": [
                "{",
                "    let mut dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![Transition(0); 10], // Ensure enough space in the table",
                "        starts: vec![StateID(0)],",
                "        min_match_id: StateID(1),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 1,",
                "        stride2: 9, // 2^9 = 512",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    let sid = StateID(0);",
                "    let pateps = PatternEpsilons(123456);",
                "    dfa.set_pattern_epsilons(sid, pateps);",
                "    assert_eq!(dfa.table[0 + dfa.pateps_offset], Transition(123456));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![Transition(0); 10],",
                "        starts: vec![StateID(1)],",
                "        min_match_id: StateID(2),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 1,",
                "        stride2: 8, // 2^8 = 256",
                "        pateps_offset: 7,",
                "        explicit_slot_start: 0,",
                "    };",
                "    let sid = StateID(1);",
                "    let pateps = PatternEpsilons(654321);",
                "    dfa.set_pattern_epsilons(sid, pateps);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dfa.table[1 << dfa.stride2() + dfa.pateps_offset], Transition(654321));",
                "    assert_eq!(dfa.table[1 << dfa.stride2() + dfa.pateps_offset].0, 654321);",
                "    assert!(dfa.table.len() > 7);",
                "    assert!(dfa.table[sid.as_usize() << dfa.stride2() + dfa.pateps_offset].0 == 654321);",
                "    assert!(dfa.table[0].0 == 0);",
                "    assert!(dfa.starts[0] == StateID(1));",
                "    assert!(dfa.min_match_id == StateID(2));",
                "    assert!(dfa.classes.0.iter().all(|&b| b == 0));"
              ],
              "code": [
                "{",
                "    let mut dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![Transition(0); 10],",
                "        starts: vec![StateID(1)],",
                "        min_match_id: StateID(2),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 1,",
                "        stride2: 8, // 2^8 = 256",
                "        pateps_offset: 7,",
                "        explicit_slot_start: 0,",
                "    };",
                "    let sid = StateID(1);",
                "    let pateps = PatternEpsilons(654321);",
                "    dfa.set_pattern_epsilons(sid, pateps);",
                "    assert_eq!(dfa.table[1 << dfa.stride2() + dfa.pateps_offset], Transition(654321));",
                "    assert_eq!(dfa.table[1 << dfa.stride2() + dfa.pateps_offset].0, 654321);",
                "    assert!(dfa.table.len() > 7);",
                "    assert!(dfa.table[sid.as_usize() << dfa.stride2() + dfa.pateps_offset].0 == 654321);",
                "    assert!(dfa.table[0].0 == 0);",
                "    assert!(dfa.starts[0] == StateID(1));",
                "    assert!(dfa.min_match_id == StateID(2));",
                "    assert!(dfa.classes.0.iter().all(|&b| b == 0));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![Transition(0); 10],",
                "        starts: vec![StateID(3)],",
                "        min_match_id: StateID(4),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 1,",
                "        stride2: 7, // 2^7 = 128",
                "        pateps_offset: 5,",
                "        explicit_slot_start: 0,",
                "    };",
                "    let sid = StateID(2);",
                "    let pateps = PatternEpsilons(u64::MAX);",
                "    dfa.set_pattern_epsilons(sid, pateps);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dfa.table[(sid.as_usize() << dfa.stride2()) + dfa.pateps_offset], Transition(pateps.0));"
              ],
              "code": [
                "{",
                "    let mut dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![Transition(0); 10],",
                "        starts: vec![StateID(3)],",
                "        min_match_id: StateID(4),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 1,",
                "        stride2: 7, // 2^7 = 128",
                "        pateps_offset: 5,",
                "        explicit_slot_start: 0,",
                "    };",
                "    let sid = StateID(2);",
                "    let pateps = PatternEpsilons(u64::MAX);",
                "    dfa.set_pattern_epsilons(sid, pateps);",
                "    assert_eq!(dfa.table[(sid.as_usize() << dfa.stride2()) + dfa.pateps_offset], Transition(pateps.0));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![Transition(0); 20], // Ensure the table is sufficiently large",
                "        starts: vec![StateID(5)],",
                "        min_match_id: StateID(6),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 1,",
                "        stride2: 6, // 2^6 = 64",
                "        pateps_offset: 11,",
                "        explicit_slot_start: 0,",
                "    };",
                "    let sid = StateID(16); // Valid state ID",
                "    let pateps = PatternEpsilons(7890);",
                "    dfa.set_pattern_epsilons(sid, pateps);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dfa.table[16 << 6 + 11], Transition(7890));"
              ],
              "code": [
                "{",
                "    let mut dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![Transition(0); 20], // Ensure the table is sufficiently large",
                "        starts: vec![StateID(5)],",
                "        min_match_id: StateID(6),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 1,",
                "        stride2: 6, // 2^6 = 64",
                "        pateps_offset: 11,",
                "        explicit_slot_start: 0,",
                "    };",
                "    let sid = StateID(16); // Valid state ID",
                "    let pateps = PatternEpsilons(7890);",
                "    dfa.set_pattern_epsilons(sid, pateps);",
                "    assert_eq!(dfa.table[16 << 6 + 11], Transition(7890));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}