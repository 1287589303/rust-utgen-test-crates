{
  "name": "regex_syntax::utf8::max_scalar_value",
  "mod_info": {
    "name": "utf8",
    "loc": "regex-syntax/src/lib.rs:195:1:195:14"
  },
  "visible": false,
  "loc": "regex-syntax/src/utf8.rs:445:1:453:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: nbytes matches 1 at line 447 is true\n",
        "precondition: nbytes matches 2 at line 448 is true\n",
        "precondition: nbytes matches 3 at line 449 is true\n",
        "precondition: nbytes matches 4 at line 450 is true\n"
      ],
      "input_infer": "nbytes = 1, 2, 3, 4, and any integer greater than 4 to test the unreachable case\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = max_scalar_value(1);",
                "}"
              ],
              "oracle": [
                "    let result = max_scalar_value(1); assert_eq!(result, 0x007F);",
                "    let result = max_scalar_value(2); assert_eq!(result, 0x07FF);",
                "    let result = max_scalar_value(3); assert_eq!(result, 0xFFFF);",
                "    let result = max_scalar_value(4); assert_eq!(result, 0x0010_FFFF);"
              ],
              "code": [
                "{",
                "    let result = max_scalar_value(1);",
                "    let result = max_scalar_value(1); assert_eq!(result, 0x007F);",
                "    let result = max_scalar_value(2); assert_eq!(result, 0x07FF);",
                "    let result = max_scalar_value(3); assert_eq!(result, 0xFFFF);",
                "    let result = max_scalar_value(4); assert_eq!(result, 0x0010_FFFF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = max_scalar_value(2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(max_scalar_value(1), 0x007F);",
                "    assert_eq!(max_scalar_value(2), 0x07FF);",
                "    assert_eq!(max_scalar_value(3), 0xFFFF);",
                "    assert_eq!(max_scalar_value(4), 0x0010_FFFF);"
              ],
              "code": [
                "{",
                "    let result = max_scalar_value(2);",
                "    assert_eq!(max_scalar_value(1), 0x007F);",
                "    assert_eq!(max_scalar_value(2), 0x07FF);",
                "    assert_eq!(max_scalar_value(3), 0xFFFF);",
                "    assert_eq!(max_scalar_value(4), 0x0010_FFFF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = max_scalar_value(3);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(max_scalar_value(1), 0x007F);",
                "    assert_eq!(max_scalar_value(2), 0x07FF);",
                "    assert_eq!(max_scalar_value(3), 0xFFFF);",
                "    assert_eq!(max_scalar_value(4), 0x0010_FFFF);"
              ],
              "code": [
                "{",
                "    let result = max_scalar_value(3);",
                "    assert_eq!(max_scalar_value(1), 0x007F);",
                "    assert_eq!(max_scalar_value(2), 0x07FF);",
                "    assert_eq!(max_scalar_value(3), 0xFFFF);",
                "    assert_eq!(max_scalar_value(4), 0x0010_FFFF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = max_scalar_value(4);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(max_scalar_value(1), 0x007F);",
                "    assert_eq!(max_scalar_value(2), 0x07FF);",
                "    assert_eq!(max_scalar_value(3), 0xFFFF);",
                "    assert_eq!(max_scalar_value(4), 0x0010_FFFF);"
              ],
              "code": [
                "{",
                "    let result = max_scalar_value(4);",
                "    assert_eq!(max_scalar_value(1), 0x007F);",
                "    assert_eq!(max_scalar_value(2), 0x07FF);",
                "    assert_eq!(max_scalar_value(3), 0xFFFF);",
                "    assert_eq!(max_scalar_value(4), 0x0010_FFFF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let result = max_scalar_value(5);",
                "}"
              ],
              "oracle": [
                "    let result = max_scalar_value(1);",
                "    assert_eq!(result, 0x007F);",
                "    ",
                "    let result = max_scalar_value(2);",
                "    assert_eq!(result, 0x07FF);",
                "    ",
                "    let result = max_scalar_value(3);",
                "    assert_eq!(result, 0xFFFF);",
                "    ",
                "    let result = max_scalar_value(4);",
                "    assert_eq!(result, 0x0010_FFFF);"
              ],
              "code": [
                "{",
                "    let result = max_scalar_value(5);",
                "    let result = max_scalar_value(1);",
                "    assert_eq!(result, 0x007F);",
                "    ",
                "    let result = max_scalar_value(2);",
                "    assert_eq!(result, 0x07FF);",
                "    ",
                "    let result = max_scalar_value(3);",
                "    assert_eq!(result, 0xFFFF);",
                "    ",
                "    let result = max_scalar_value(4);",
                "    assert_eq!(result, 0x0010_FFFF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: nbytes matches 4 at line 450 is true\n",
        "precondition: nbytes matches 4 at line 446 is true\n",
        "expected return value/type: 0x0010_FFFF\n"
      ],
      "input_infer": "Test input conditions: nbytes = 1, nbytes = 2, nbytes = 3, nbytes = 4, nbytes < 1, nbytes > 4\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = max_scalar_value(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(max_scalar_value(4), 0x0010_FFFF);"
              ],
              "code": [
                "{",
                "    let result = max_scalar_value(1);",
                "    assert_eq!(max_scalar_value(4), 0x0010_FFFF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = max_scalar_value(2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(max_scalar_value(1), 0x007F);",
                "    assert_eq!(max_scalar_value(2), 0x07FF);",
                "    assert_eq!(max_scalar_value(3), 0xFFFF);",
                "    assert_eq!(max_scalar_value(4), 0x0010_FFFF);",
                "    assert_panics!(max_scalar_value(0));",
                "    assert_panics!(max_scalar_value(5));"
              ],
              "code": [
                "{",
                "    let result = max_scalar_value(2);",
                "    assert_eq!(max_scalar_value(1), 0x007F);",
                "    assert_eq!(max_scalar_value(2), 0x07FF);",
                "    assert_eq!(max_scalar_value(3), 0xFFFF);",
                "    assert_eq!(max_scalar_value(4), 0x0010_FFFF);",
                "    assert_panics!(max_scalar_value(0));",
                "    assert_panics!(max_scalar_value(5));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = max_scalar_value(3);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(max_scalar_value(4), 0x0010_FFFF);"
              ],
              "code": [
                "{",
                "    let result = max_scalar_value(3);",
                "    assert_eq!(max_scalar_value(4), 0x0010_FFFF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = max_scalar_value(4);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0x0010_FFFF);"
              ],
              "code": [
                "{",
                "    let result = max_scalar_value(4);",
                "    assert_eq!(result, 0x0010_FFFF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let result = max_scalar_value(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(max_scalar_value(1), 0x007F);",
                "    assert_eq!(max_scalar_value(2), 0x07FF);",
                "    assert_eq!(max_scalar_value(3), 0xFFFF);",
                "    assert_eq!(max_scalar_value(4), 0x0010_FFFF);",
                "    let result = std::panic::catch_unwind(|| max_scalar_value(5));",
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "    let result = max_scalar_value(0);",
                "    assert_eq!(max_scalar_value(1), 0x007F);",
                "    assert_eq!(max_scalar_value(2), 0x07FF);",
                "    assert_eq!(max_scalar_value(3), 0xFFFF);",
                "    assert_eq!(max_scalar_value(4), 0x0010_FFFF);",
                "    let result = std::panic::catch_unwind(|| max_scalar_value(5));",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let result = max_scalar_value(5);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(max_scalar_value(1), 0x007F);",
                "    assert_eq!(max_scalar_value(2), 0x07FF);",
                "    assert_eq!(max_scalar_value(3), 0xFFFF);",
                "    assert_eq!(max_scalar_value(4), 0x0010_FFFF);",
                "    panic::catch_unwind(|| { max_scalar_value(5) }).unwrap_err();"
              ],
              "code": [
                "{",
                "    let result = max_scalar_value(5);",
                "    assert_eq!(max_scalar_value(1), 0x007F);",
                "    assert_eq!(max_scalar_value(2), 0x07FF);",
                "    assert_eq!(max_scalar_value(3), 0xFFFF);",
                "    assert_eq!(max_scalar_value(4), 0x0010_FFFF);",
                "    panic::catch_unwind(|| { max_scalar_value(5) }).unwrap_err();",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: nbytes matches 3 at line 449 is true\n",
        "precondition: nbytes matches 3 at line 446 is true\n",
        "expected return value/type: 0xFFFF\n"
      ],
      "input_infer": "nbytes = 3\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nbytes: usize = 3;",
                "    let result = max_scalar_value(nbytes);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0xFFFF);"
              ],
              "code": [
                "{",
                "    let nbytes: usize = 3;",
                "    let result = max_scalar_value(nbytes);",
                "    assert_eq!(result, 0xFFFF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nbytes: usize = 3;",
                "    let result = max_scalar_value(nbytes);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0xFFFF);"
              ],
              "code": [
                "{",
                "    let nbytes: usize = 3;",
                "    let result = max_scalar_value(nbytes);",
                "    assert_eq!(result, 0xFFFF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 4,
      "prompt_conds": [
        "precondition: nbytes matches 2 at line 448 is true\n",
        "precondition: nbytes matches 2 at line 446 is true\n",
        "expected return value/type: 0x07FF\n"
      ],
      "input_infer": "nbytes = 2\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nbytes: usize = 2;",
                "    let result = max_scalar_value(nbytes);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0x07FF);"
              ],
              "code": [
                "{",
                "    let nbytes: usize = 2;",
                "    let result = max_scalar_value(nbytes);",
                "    assert_eq!(result, 0x07FF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 5,
      "prompt_conds": [
        "precondition: nbytes matches 1 at line 447 is true\n",
        "precondition: nbytes matches 1 at line 446 is true\n",
        "expected return value/type: 0x007F\n"
      ],
      "input_infer": "Test input conditions: nbytes = 1\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nbytes = 1;",
                "    let result = max_scalar_value(nbytes);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0x007F);"
              ],
              "code": [
                "{",
                "    let nbytes = 1;",
                "    let result = max_scalar_value(nbytes);",
                "    assert_eq!(result, 0x007F);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}