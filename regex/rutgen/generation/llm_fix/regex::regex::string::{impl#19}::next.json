{
  "name": "regex::regex::string::{impl#19}::next",
  "mod_info": {
    "name": "regex::string",
    "loc": "src/regex/mod.rs:2:1:2:23"
  },
  "visible": true,
  "loc": "src/regex/string.rs:2225:5:2232:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "haystack: non-empty string or byte array, it: valid meta::CapturesMatches iterator with at least one match, captures: valid captures from the regex, static_captures_len: integer value between 0 and the maximum number of static captures found in the regex pattern\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let haystack = \"abc123def\";",
                "    let pattern = regex::Regex::new(r\"(\\d+)\").unwrap();",
                "    let it = pattern.captures_iter(haystack);",
                "    let mut capture_matches = regex::CaptureMatches {",
                "        haystack,",
                "        it: it.collect::<Vec<_>>().into_iter(),",
                "    };",
                "",
                "    let result = capture_matches.next();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap().haystack, \"abc123def\");",
                "    assert_eq!(result.unwrap().caps.get(0), Some(\"123\"));",
                "    assert_eq!(result.unwrap().static_captures_len, Some(1));"
              ],
              "code": [
                "{",
                "    let haystack = \"abc123def\";",
                "    let pattern = regex::Regex::new(r\"(\\d+)\").unwrap();",
                "    let it = pattern.captures_iter(haystack);",
                "    let mut capture_matches = regex::CaptureMatches {",
                "        haystack,",
                "        it: it.collect::<Vec<_>>().into_iter(),",
                "    };",
                "",
                "    let result = capture_matches.next();",
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap().haystack, \"abc123def\");",
                "    assert_eq!(result.unwrap().caps.get(0), Some(\"123\"));",
                "    assert_eq!(result.unwrap().static_captures_len, Some(1));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let haystack = \"123\";",
                "    let pattern = regex::Regex::new(r\"(\\d+)\").unwrap();",
                "    let it = pattern.captures_iter(haystack);",
                "    let mut capture_matches = regex::CaptureMatches {",
                "        haystack,",
                "        it: it.collect::<Vec<_>>().into_iter(),",
                "    };",
                "",
                "    let result = capture_matches.next();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.is_some(), true);",
                "    assert_eq!(result.unwrap().haystack, \"123\");",
                "    assert_eq!(result.unwrap().caps.get(0).map(|m| m.as_str()), Some(\"123\"));",
                "    assert_eq!(result.unwrap().static_captures_len, Some(1));",
                "    assert_eq!(capture_matches.next().is_some(), false);"
              ],
              "code": [
                "{",
                "    let haystack = \"123\";",
                "    let pattern = regex::Regex::new(r\"(\\d+)\").unwrap();",
                "    let it = pattern.captures_iter(haystack);",
                "    let mut capture_matches = regex::CaptureMatches {",
                "        haystack,",
                "        it: it.collect::<Vec<_>>().into_iter(),",
                "    };",
                "",
                "    let result = capture_matches.next();",
                "    assert_eq!(result.is_some(), true);",
                "    assert_eq!(result.unwrap().haystack, \"123\");",
                "    assert_eq!(result.unwrap().caps.get(0).map(|m| m.as_str()), Some(\"123\"));",
                "    assert_eq!(result.unwrap().static_captures_len, Some(1));",
                "    assert_eq!(capture_matches.next().is_some(), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let haystack = \"abc 123 def 456\";",
                "    let pattern = regex::Regex::new(r\"(\\d+)\").unwrap();",
                "    let it = pattern.captures_iter(haystack);",
                "    let mut capture_matches = regex::CaptureMatches {",
                "        haystack,",
                "        it: it.collect::<Vec<_>>().into_iter(),",
                "    };",
                "",
                "    let result1 = capture_matches.next();",
                "    let result2 = capture_matches.next();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result1.is_some(), true);",
                "    assert_eq!(result2.is_some(), true);",
                "    assert_eq!(result1.unwrap().haystack, \"abc 123 def 456\");",
                "    assert_eq!(result1.unwrap().caps.get(0), Some(\"123\"));",
                "    assert_eq!(result2.unwrap().haystack, \"abc 123 def 456\");",
                "    assert_eq!(result2.unwrap().caps.get(0), Some(\"456\"));",
                "    assert_eq!(capture_matches.next(), None);"
              ],
              "code": [
                "{",
                "    let haystack = \"abc 123 def 456\";",
                "    let pattern = regex::Regex::new(r\"(\\d+)\").unwrap();",
                "    let it = pattern.captures_iter(haystack);",
                "    let mut capture_matches = regex::CaptureMatches {",
                "        haystack,",
                "        it: it.collect::<Vec<_>>().into_iter(),",
                "    };",
                "",
                "    let result1 = capture_matches.next();",
                "    let result2 = capture_matches.next();",
                "    assert_eq!(result1.is_some(), true);",
                "    assert_eq!(result2.is_some(), true);",
                "    assert_eq!(result1.unwrap().haystack, \"abc 123 def 456\");",
                "    assert_eq!(result1.unwrap().caps.get(0), Some(\"123\"));",
                "    assert_eq!(result2.unwrap().haystack, \"abc 123 def 456\");",
                "    assert_eq!(result2.unwrap().caps.get(0), Some(\"456\"));",
                "    assert_eq!(capture_matches.next(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let haystack = \"abcdef\";",
                "    let pattern = regex::Regex::new(r\"(\\d+)\").unwrap();",
                "    let it = pattern.captures_iter(haystack);",
                "    let mut capture_matches = regex::CaptureMatches {",
                "        haystack,",
                "        it: it.collect::<Vec<_>>().into_iter(),",
                "    };",
                "",
                "    let result = capture_matches.next();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_none());",
                "    haystack = \"abcdef\";",
                "    pattern = regex::Regex::new(r\"(\\d+)\").unwrap();",
                "    it = pattern.captures_iter(haystack);",
                "    capture_matches = regex::CaptureMatches { haystack, it: it.collect::<Vec<_>>().into_iter(), };",
                "    result = capture_matches.next();",
                "    assert_eq!(result.unwrap().haystack, haystack);",
                "    assert_eq!(result.unwrap().static_captures_len, None);",
                "    assert_eq!(result.unwrap().caps.len(), 0);"
              ],
              "code": [
                "{",
                "    let haystack = \"abcdef\";",
                "    let pattern = regex::Regex::new(r\"(\\d+)\").unwrap();",
                "    let it = pattern.captures_iter(haystack);",
                "    let mut capture_matches = regex::CaptureMatches {",
                "        haystack,",
                "        it: it.collect::<Vec<_>>().into_iter(),",
                "    };",
                "",
                "    let result = capture_matches.next();",
                "    assert!(result.is_none());",
                "    haystack = \"abcdef\";",
                "    pattern = regex::Regex::new(r\"(\\d+)\").unwrap();",
                "    it = pattern.captures_iter(haystack);",
                "    capture_matches = regex::CaptureMatches { haystack, it: it.collect::<Vec<_>>().into_iter(), };",
                "    result = capture_matches.next();",
                "    assert_eq!(result.unwrap().haystack, haystack);",
                "    assert_eq!(result.unwrap().static_captures_len, None);",
                "    assert_eq!(result.unwrap().caps.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let haystack = \"\";",
                "    let pattern = regex::Regex::new(r\"(\\d+)\").unwrap();",
                "    let it = pattern.captures_iter(haystack);",
                "    let mut capture_matches = regex::CaptureMatches {",
                "        haystack,",
                "        it: it.collect::<Vec<_>>().into_iter(),",
                "    };",
                "",
                "    let result = capture_matches.next();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let haystack = \"\";",
                "    let pattern = regex::Regex::new(r\"(\\d+)\").unwrap();",
                "    let it = pattern.captures_iter(haystack);",
                "    let mut capture_matches = regex::CaptureMatches {",
                "        haystack,",
                "        it: it.collect::<Vec<_>>().into_iter(),",
                "    };",
                "",
                "    let result = capture_matches.next();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}