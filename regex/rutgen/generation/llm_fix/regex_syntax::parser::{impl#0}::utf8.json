{
  "name": "regex_syntax::parser::{impl#0}::utf8",
  "mod_info": {
    "name": "parser",
    "loc": "regex-syntax/src/lib.rs:191:1:191:12"
  },
  "visible": true,
  "loc": "regex-syntax/src/parser.rs:106:5:109:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "boolean values for 'yes' in the range [true, false] for the utf8 method in ParserBuilder\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut parser_builder = ParserBuilder::new();",
                "    parser_builder.utf8(true);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(parser_builder.utf8(true), &mut parser_builder);",
                "    assert_eq!(parser_builder.hir.utf8, true);",
                "    assert_eq!(parser_builder.utf8(false), &mut parser_builder);",
                "    assert_eq!(parser_builder.hir.utf8, false);"
              ],
              "code": [
                "{",
                "    let mut parser_builder = ParserBuilder::new();",
                "    parser_builder.utf8(true);",
                "    assert_eq!(parser_builder.utf8(true), &mut parser_builder);",
                "    assert_eq!(parser_builder.hir.utf8, true);",
                "    assert_eq!(parser_builder.utf8(false), &mut parser_builder);",
                "    assert_eq!(parser_builder.hir.utf8, false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut parser_builder = ParserBuilder::new();",
                "    parser_builder.utf8(false);",
                "}"
              ],
              "oracle": [
                "    parser_builder.utf8(false);",
                "    assert_eq!(parser_builder.hir.utf8, false);",
                "    parser_builder.utf8(true);",
                "    assert_eq!(parser_builder.hir.utf8, true);",
                "    parser_builder.utf8(false);",
                "    assert_eq!(parser_builder.hir.utf8, false);"
              ],
              "code": [
                "{",
                "    let mut parser_builder = ParserBuilder::new();",
                "    parser_builder.utf8(false);",
                "    parser_builder.utf8(false);",
                "    assert_eq!(parser_builder.hir.utf8, false);",
                "    parser_builder.utf8(true);",
                "    assert_eq!(parser_builder.hir.utf8, true);",
                "    parser_builder.utf8(false);",
                "    assert_eq!(parser_builder.hir.utf8, false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}