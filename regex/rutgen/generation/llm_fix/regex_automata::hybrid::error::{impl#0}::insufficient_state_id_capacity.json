{
  "name": "regex_automata::hybrid::error::{impl#0}::insufficient_state_id_capacity",
  "mod_info": {
    "name": "hybrid::error",
    "loc": "regex-automata/src/hybrid/mod.rs:141:1:141:11"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/error.rs:49:5:55:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: BuildError {\n            kind: BuildErrorKind::InsufficientStateIDCapacity { err },\n        }\n"
      ],
      "input_infer": "LazyStateIDError where attempted is any valid u64 value (including edge cases such as 0 and u64::MAX)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let err = LazyStateIDError { attempted: 0 };",
                "    let result = BuildError::insufficient_state_id_capacity(err);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, BuildErrorKind::InsufficientStateIDCapacity { err: LazyStateIDError { attempted: 0 } });"
              ],
              "code": [
                "{",
                "    let err = LazyStateIDError { attempted: 0 };",
                "    let result = BuildError::insufficient_state_id_capacity(err);",
                "    assert_eq!(result.kind, BuildErrorKind::InsufficientStateIDCapacity { err: LazyStateIDError { attempted: 0 } });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let err = LazyStateIDError { attempted: 12345 };",
                "    let result = BuildError::insufficient_state_id_capacity(err);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, BuildErrorKind::InsufficientStateIDCapacity { err: LazyStateIDError { attempted: 12345 } });"
              ],
              "code": [
                "{",
                "    let err = LazyStateIDError { attempted: 12345 };",
                "    let result = BuildError::insufficient_state_id_capacity(err);",
                "    assert_eq!(result.kind, BuildErrorKind::InsufficientStateIDCapacity { err: LazyStateIDError { attempted: 12345 } });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let err = LazyStateIDError { attempted: u64::MAX };",
                "    let result = BuildError::insufficient_state_id_capacity(err);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, BuildErrorKind::InsufficientStateIDCapacity { err: LazyStateIDError { attempted: u64::MAX } });"
              ],
              "code": [
                "{",
                "    let err = LazyStateIDError { attempted: u64::MAX };",
                "    let result = BuildError::insufficient_state_id_capacity(err);",
                "    assert_eq!(result.kind, BuildErrorKind::InsufficientStateIDCapacity { err: LazyStateIDError { attempted: u64::MAX } });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}