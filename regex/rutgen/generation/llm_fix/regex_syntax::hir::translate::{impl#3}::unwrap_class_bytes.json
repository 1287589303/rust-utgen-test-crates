{
  "name": "regex_syntax::hir::translate::{impl#3}::unwrap_class_bytes",
  "mod_info": {
    "name": "hir::translate",
    "loc": "regex-syntax/src/hir/mod.rs:44:1:44:19"
  },
  "visible": false,
  "loc": "regex-syntax/src/hir/translate.rs:276:5:285:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches HirFrame::ClassBytes(cls) at line 278 is false\n",
        "precondition: self matches _ at line 279 is true\n"
      ],
      "input_infer": "self as any variant of HirFrame except ClassBytes\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let frame = HirFrame::Expr(Hir { kind: HirKind::default(), props: Properties::default() });",
                "    frame.unwrap_class_bytes();",
                "}"
              ],
              "oracle": [
                "    panic!(\"tried to unwrap byte class from HirFrame, got: {:?}\", frame);"
              ],
              "code": [
                "{",
                "    let frame = HirFrame::Expr(Hir { kind: HirKind::default(), props: Properties::default() });",
                "    frame.unwrap_class_bytes();",
                "    panic!(\"tried to unwrap byte class from HirFrame, got: {:?}\", frame);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let frame = HirFrame::Literal(vec![1, 2, 3]);",
                "    frame.unwrap_class_bytes();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(panic::catch_unwind(|| {",
                "    let frame = HirFrame::Literal(vec![1, 2, 3]);",
                "    frame.unwrap_class_bytes();",
                "    }).is_err(), true);"
              ],
              "code": [
                "{",
                "    let frame = HirFrame::Literal(vec![1, 2, 3]);",
                "    frame.unwrap_class_bytes();",
                "    assert_eq!(panic::catch_unwind(|| {",
                "    let frame = HirFrame::Literal(vec![1, 2, 3]);",
                "    frame.unwrap_class_bytes();",
                "    }).is_err(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let unicode_class = ClassUnicode { span: Span::default(), negated: false, kind: ClassUnicodeKind::default() };",
                "    let frame = HirFrame::ClassUnicode(unicode_class);",
                "    frame.unwrap_class_bytes();",
                "}"
              ],
              "oracle": [
                "    frame.unwrap_class_bytes(); // Expect panic with message \"tried to unwrap byte class from HirFrame, got: ClassUnicode(...)\"",
                "    ",
                "    frame.unwrap_class_bytes(); // Test with HirFrame::Expr(Hir::default())",
                "    ",
                "    frame.unwrap_class_bytes(); // Test with HirFrame::Literal(vec![b'a'])",
                "    ",
                "    frame.unwrap_class_bytes(); // Test with HirFrame::Repetition",
                "    ",
                "    frame.unwrap_class_bytes(); // Test with HirFrame::Group { old_flags: Flags::default() }",
                "    ",
                "    frame.unwrap_class_bytes(); // Test with HirFrame::Concat",
                "    ",
                "    frame.unwrap_class_bytes(); // Test with HirFrame::Alternation",
                "    ",
                "    frame.unwrap_class_bytes(); // Test with HirFrame::AlternationBranch"
              ],
              "code": [
                "{",
                "    let unicode_class = ClassUnicode { span: Span::default(), negated: false, kind: ClassUnicodeKind::default() };",
                "    let frame = HirFrame::ClassUnicode(unicode_class);",
                "    frame.unwrap_class_bytes();",
                "    frame.unwrap_class_bytes(); // Expect panic with message \"tried to unwrap byte class from HirFrame, got: ClassUnicode(...)\"",
                "    ",
                "    frame.unwrap_class_bytes(); // Test with HirFrame::Expr(Hir::default())",
                "    ",
                "    frame.unwrap_class_bytes(); // Test with HirFrame::Literal(vec![b'a'])",
                "    ",
                "    frame.unwrap_class_bytes(); // Test with HirFrame::Repetition",
                "    ",
                "    frame.unwrap_class_bytes(); // Test with HirFrame::Group { old_flags: Flags::default() }",
                "    ",
                "    frame.unwrap_class_bytes(); // Test with HirFrame::Concat",
                "    ",
                "    frame.unwrap_class_bytes(); // Test with HirFrame::Alternation",
                "    ",
                "    frame.unwrap_class_bytes(); // Test with HirFrame::AlternationBranch",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let frame = HirFrame::Repetition;",
                "    frame.unwrap_class_bytes();",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| {",
                "    let frame = HirFrame::Repetition;",
                "    frame.unwrap_class_bytes();",
                "    }).is_err());"
              ],
              "code": [
                "{",
                "    let frame = HirFrame::Repetition;",
                "    frame.unwrap_class_bytes();",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let frame = HirFrame::Repetition;",
                "    frame.unwrap_class_bytes();",
                "    }).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let flags = Flags::default();",
                "    let frame = HirFrame::Group { old_flags: flags };",
                "    frame.unwrap_class_bytes();",
                "}"
              ],
              "oracle": [
                "    let frame = HirFrame::Group { old_flags: Flags::default() };",
                "    assert!(std::panic::catch_unwind(|| frame.unwrap_class_bytes()).is_err());",
                "    let frame_non_class_bytes = HirFrame::Expr(Hir { kind: HirKind::Literal, props: Properties::default() });",
                "    assert!(std::panic::catch_unwind(|| frame_non_class_bytes.unwrap_class_bytes()).is_err());"
              ],
              "code": [
                "{",
                "    let flags = Flags::default();",
                "    let frame = HirFrame::Group { old_flags: flags };",
                "    frame.unwrap_class_bytes();",
                "    let frame = HirFrame::Group { old_flags: Flags::default() };",
                "    assert!(std::panic::catch_unwind(|| frame.unwrap_class_bytes()).is_err());",
                "    let frame_non_class_bytes = HirFrame::Expr(Hir { kind: HirKind::Literal, props: Properties::default() });",
                "    assert!(std::panic::catch_unwind(|| frame_non_class_bytes.unwrap_class_bytes()).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let frame = HirFrame::Concat;",
                "    frame.unwrap_class_bytes();",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| {",
                "    let frame = HirFrame::Concat;",
                "    frame.unwrap_class_bytes();",
                "    }).is_err());"
              ],
              "code": [
                "{",
                "    let frame = HirFrame::Concat;",
                "    frame.unwrap_class_bytes();",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let frame = HirFrame::Concat;",
                "    frame.unwrap_class_bytes();",
                "    }).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let frame = HirFrame::Alternation;",
                "    frame.unwrap_class_bytes();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(std::panic::catch_unwind(|| {",
                "    let frame = HirFrame::Alternation;",
                "    frame.unwrap_class_bytes();",
                "    }).is_err(), true);"
              ],
              "code": [
                "{",
                "    let frame = HirFrame::Alternation;",
                "    frame.unwrap_class_bytes();",
                "    assert_eq!(std::panic::catch_unwind(|| {",
                "    let frame = HirFrame::Alternation;",
                "    frame.unwrap_class_bytes();",
                "    }).is_err(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let frame = HirFrame::AlternationBranch;",
                "    frame.unwrap_class_bytes();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(panic!(\"tried to unwrap byte class from HirFrame, got: {:?}\", frame), \"tried to unwrap byte class from HirFrame, got: AlternationBranch\");",
                "    assert!(matches!(frame, HirFrame::AlternationBranch));",
                "    assert!(!matches!(frame, HirFrame::ClassBytes(_)));"
              ],
              "code": [
                "{",
                "    let frame = HirFrame::AlternationBranch;",
                "    frame.unwrap_class_bytes();",
                "    assert_eq!(panic!(\"tried to unwrap byte class from HirFrame, got: {:?}\", frame), \"tried to unwrap byte class from HirFrame, got: AlternationBranch\");",
                "    assert!(matches!(frame, HirFrame::AlternationBranch));",
                "    assert!(!matches!(frame, HirFrame::ClassBytes(_)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches HirFrame::ClassBytes(cls) at line 277 is true\n",
        "precondition: self matches HirFrame::ClassBytes(cls) at line 277 is true\n",
        "expected return value/type: cls\n"
      ],
      "input_infer": "self is an instance of HirFrame::ClassBytes with a valid ClassBytes object\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class_bytes = hir::ClassBytes {",
                "        set: IntervalSet::new(),",
                "    };",
                "    let frame = HirFrame::ClassBytes(class_bytes.clone());",
                "    let result = frame.unwrap_class_bytes();",
                "}"
              ],
              "oracle": [
                "    let class_bytes = hir::ClassBytes { set: IntervalSet::new() };",
                "    let frame = HirFrame::ClassBytes(class_bytes.clone());",
                "    assert_eq!(frame.unwrap_class_bytes(), class_bytes);",
                "    assert!(matches!(frame, HirFrame::ClassBytes(_)));",
                "    assert!(frame.unwrap_class_bytes().eq(&class_bytes));",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let frame = HirFrame::Expr(hir::Hir::new());",
                "    frame.unwrap_class_bytes();",
                "    }).is_err());",
                "    assert_eq!(frame.unwrap_class_bytes(), class_bytes);"
              ],
              "code": [
                "{",
                "    let class_bytes = hir::ClassBytes {",
                "        set: IntervalSet::new(),",
                "    };",
                "    let frame = HirFrame::ClassBytes(class_bytes.clone());",
                "    let result = frame.unwrap_class_bytes();",
                "    let class_bytes = hir::ClassBytes { set: IntervalSet::new() };",
                "    let frame = HirFrame::ClassBytes(class_bytes.clone());",
                "    assert_eq!(frame.unwrap_class_bytes(), class_bytes);",
                "    assert!(matches!(frame, HirFrame::ClassBytes(_)));",
                "    assert!(frame.unwrap_class_bytes().eq(&class_bytes));",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let frame = HirFrame::Expr(hir::Hir::new());",
                "    frame.unwrap_class_bytes();",
                "    }).is_err());",
                "    assert_eq!(frame.unwrap_class_bytes(), class_bytes);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let frame = HirFrame::Expr(Hir::default());",
                "    let _result = frame.unwrap_class_bytes();",
                "}"
              ],
              "oracle": [
                "    let frame = HirFrame::ClassBytes(ClassBytes::default());",
                "    let result = frame.unwrap_class_bytes();",
                "    assert_eq!(result, ClassBytes::default());",
                "    let frame = HirFrame::ClassBytes(ClassBytes { /* specific fields */ });",
                "    let result = frame.unwrap_class_bytes();",
                "    assert_eq!(result, ClassBytes { /* specific fields */ });",
                "    let frame = HirFrame::Expr(Hir::default());",
                "    let result = std::panic::catch_unwind(|| frame.unwrap_class_bytes());",
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "    let frame = HirFrame::Expr(Hir::default());",
                "    let _result = frame.unwrap_class_bytes();",
                "    let frame = HirFrame::ClassBytes(ClassBytes::default());",
                "    let result = frame.unwrap_class_bytes();",
                "    assert_eq!(result, ClassBytes::default());",
                "    let frame = HirFrame::ClassBytes(ClassBytes { /* specific fields */ });",
                "    let result = frame.unwrap_class_bytes();",
                "    assert_eq!(result, ClassBytes { /* specific fields */ });",
                "    let frame = HirFrame::Expr(Hir::default());",
                "    let result = std::panic::catch_unwind(|| frame.unwrap_class_bytes());",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}