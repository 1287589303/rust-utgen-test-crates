{
  "name": "regex_automata::util::sparse_set::{impl#1}::capacity",
  "mod_info": {
    "name": "util::sparse_set",
    "loc": "regex-automata/src/util/mod.rs:55:1:55:27"
  },
  "visible": true,
  "loc": "regex-automata/src/util/sparse_set.rs:145:5:147:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "capacity() should be tested with SparseSet objects initialized with various capacities: 0, 1, 10, and the maximum valid StateID value (boundary values for capacity).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let sparse_set = SparseSet::new(0);",
                "    let capacity = sparse_set.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(capacity, 0);"
              ],
              "code": [
                "{",
                "    let sparse_set = SparseSet::new(0);",
                "    let capacity = sparse_set.capacity();",
                "    assert_eq!(capacity, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let sparse_set = SparseSet::new(1);",
                "    let capacity = sparse_set.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(capacity, 0);"
              ],
              "code": [
                "{",
                "    let sparse_set = SparseSet::new(1);",
                "    let capacity = sparse_set.capacity();",
                "    assert_eq!(capacity, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let sparse_set = SparseSet::new(10);",
                "    let capacity = sparse_set.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(capacity, 0);"
              ],
              "code": [
                "{",
                "    let sparse_set = SparseSet::new(10);",
                "    let capacity = sparse_set.capacity();",
                "    assert_eq!(capacity, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let max_state_id = StateID(u32::MAX);",
                "    let sparse_set = SparseSet::new(max_state_id.0 as usize);",
                "    let capacity = sparse_set.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(capacity, max_state_id.0 as usize);",
                "    assert!(capacity > 0);"
              ],
              "code": [
                "{",
                "    let max_state_id = StateID(u32::MAX);",
                "    let sparse_set = SparseSet::new(max_state_id.0 as usize);",
                "    let capacity = sparse_set.capacity();",
                "    assert_eq!(capacity, max_state_id.0 as usize);",
                "    assert!(capacity > 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}