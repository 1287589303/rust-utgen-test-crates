{
  "name": "regex_automata::dfa::onepass::{impl#6}::sparse_transitions",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/onepass.rs:2280:5:2287:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: SparseTransitionIter {\n            it: self.table[start..end].iter().enumerate(),\n            cur: None,\n        }\n"
      ],
      "input_infer": "StateID must be a valid identifier within the range of [0, maximum state ID] and stride2 must be a power of 2 with the alphabet length in the range of [1, 256].\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let stride2 = 8; // 2^3",
                "    let alphabet_len = 256; // maximum alphabet length",
                "    let table = vec![Transition { start: 0, end: 0, next: StateID(0) }; (1 << stride2) * alphabet_len];",
                "",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table,",
                "        starts: vec![StateID(0)],",
                "        min_match_id: StateID(0),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len,",
                "        stride2,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "",
                "    let sid = StateID(0);",
                "    let _sparse_iter = dfa.sparse_transitions(sid);",
                "}"
              ],
              "oracle": [
                "    _sparse_iter.it.len() == (1 << stride2) * alphabet_len",
                "    _sparse_iter.cur.is_none()",
                "    _sparse_iter.it.next().is_some()",
                "    _sparse_iter.it.next().unwrap().0 == 0",
                "    _sparse_iter.it.next().unwrap().1.start == 0",
                "    _sparse_iter.it.next().unwrap().1.end == 0",
                "    _sparse_iter.it.next().unwrap().1.next == StateID(0)"
              ],
              "code": [
                "{",
                "    let stride2 = 8; // 2^3",
                "    let alphabet_len = 256; // maximum alphabet length",
                "    let table = vec![Transition { start: 0, end: 0, next: StateID(0) }; (1 << stride2) * alphabet_len];",
                "",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table,",
                "        starts: vec![StateID(0)],",
                "        min_match_id: StateID(0),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len,",
                "        stride2,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "",
                "    let sid = StateID(0);",
                "    let _sparse_iter = dfa.sparse_transitions(sid);",
                "    _sparse_iter.it.len() == (1 << stride2) * alphabet_len",
                "    _sparse_iter.cur.is_none()",
                "    _sparse_iter.it.next().is_some()",
                "    _sparse_iter.it.next().unwrap().0 == 0",
                "    _sparse_iter.it.next().unwrap().1.start == 0",
                "    _sparse_iter.it.next().unwrap().1.end == 0",
                "    _sparse_iter.it.next().unwrap().1.next == StateID(0)",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let stride2 = 4; // 2^2",
                "    let alphabet_len = 128; // less than maximum",
                "    let table = vec![Transition { start: 0, end: 0, next: StateID(1) }; (1 << stride2) * alphabet_len];",
                "",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table,",
                "        starts: vec![StateID(1)],",
                "        min_match_id: StateID(1),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len,",
                "        stride2,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "",
                "    let sid = StateID(1);",
                "    let _sparse_iter = dfa.sparse_transitions(sid);",
                "}"
              ],
              "oracle": [
                "    let stride2 = 4;",
                "    let alphabet_len = 128;",
                "    let table_length = (1 << stride2) * alphabet_len;",
                "    assert_eq!(table_length, dfa.table.len());",
                "    assert!(dfa.sparse_transitions(StateID(1)).cur.is_none());",
                "    let sparse_iter = dfa.sparse_transitions(StateID(1));",
                "    assert_eq!(sparse_iter.it.count(), alphabet_len);",
                "    assert_eq!(sparse_iter.it.clone().next().unwrap().1.next, StateID(1));",
                "    assert_eq!(sparse_iter.it.clone().last().unwrap().1.next, StateID(1));"
              ],
              "code": [
                "{",
                "    let stride2 = 4; // 2^2",
                "    let alphabet_len = 128; // less than maximum",
                "    let table = vec![Transition { start: 0, end: 0, next: StateID(1) }; (1 << stride2) * alphabet_len];",
                "",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table,",
                "        starts: vec![StateID(1)],",
                "        min_match_id: StateID(1),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len,",
                "        stride2,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "",
                "    let sid = StateID(1);",
                "    let _sparse_iter = dfa.sparse_transitions(sid);",
                "    let stride2 = 4;",
                "    let alphabet_len = 128;",
                "    let table_length = (1 << stride2) * alphabet_len;",
                "    assert_eq!(table_length, dfa.table.len());",
                "    assert!(dfa.sparse_transitions(StateID(1)).cur.is_none());",
                "    let sparse_iter = dfa.sparse_transitions(StateID(1));",
                "    assert_eq!(sparse_iter.it.count(), alphabet_len);",
                "    assert_eq!(sparse_iter.it.clone().next().unwrap().1.next, StateID(1));",
                "    assert_eq!(sparse_iter.it.clone().last().unwrap().1.next, StateID(1));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let stride2 = 6; // 2^2",
                "    let alphabet_len = 256; // maximum alphabet length",
                "    let table = vec![Transition { start: 0, end: 0, next: StateID(2) }; (1 << stride2) * alphabet_len];",
                "",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table,",
                "        starts: vec![StateID(2)],",
                "        min_match_id: StateID(2),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len,",
                "        stride2,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "",
                "    let sid = StateID(2);",
                "    let _sparse_iter = dfa.sparse_transitions(sid);",
                "}"
              ],
              "oracle": [
                "    _sparse_iter.it.len() == dfa.alphabet_len;",
                "    _sparse_iter.cur.is_none();",
                "    _sparse_iter.it.next().is_some();",
                "    _sparse_iter.it.next().unwrap().1.eq(&(0, 0, Transition { start: 0, end: 0, next: StateID(2) }));",
                "    _sparse_iter.it.next().is_none();"
              ],
              "code": [
                "{",
                "    let stride2 = 6; // 2^2",
                "    let alphabet_len = 256; // maximum alphabet length",
                "    let table = vec![Transition { start: 0, end: 0, next: StateID(2) }; (1 << stride2) * alphabet_len];",
                "",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table,",
                "        starts: vec![StateID(2)],",
                "        min_match_id: StateID(2),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len,",
                "        stride2,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "",
                "    let sid = StateID(2);",
                "    let _sparse_iter = dfa.sparse_transitions(sid);",
                "    _sparse_iter.it.len() == dfa.alphabet_len;",
                "    _sparse_iter.cur.is_none();",
                "    _sparse_iter.it.next().is_some();",
                "    _sparse_iter.it.next().unwrap().1.eq(&(0, 0, Transition { start: 0, end: 0, next: StateID(2) }));",
                "    _sparse_iter.it.next().is_none();",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let stride2 = 1; // 2^0",
                "    let alphabet_len = 1; // minimum alphabet length",
                "    let table = vec![Transition { start: 0, end: 0, next: StateID(3) }; (1 << stride2) * alphabet_len];",
                "",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table,",
                "        starts: vec![StateID(3)],",
                "        min_match_id: StateID(3),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len,",
                "        stride2,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "",
                "    let sid = StateID(3);",
                "    let _sparse_iter = dfa.sparse_transitions(sid);",
                "}"
              ],
              "oracle": [
                "    let stride2 = 1;",
                "    let alphabet_len = 1;",
                "    let table = vec![Transition { start: 0, end: 0, next: StateID(3) }; (1 << stride2) * alphabet_len];",
                "    let dfa = DFA {",
                "    config: Config::default(),",
                "    nfa: NFA::default(),",
                "    table,",
                "    starts: vec![StateID(3)],",
                "    min_match_id: StateID(3),",
                "    classes: ByteClasses([0; 256]),",
                "    alphabet_len,",
                "    stride2,",
                "    pateps_offset: 0,",
                "    explicit_slot_start: 0,",
                "    };",
                "    let sid = StateID(3);",
                "    let sparse_iter = dfa.sparse_transitions(sid);",
                "    assert_eq!(sparse_iter.cur, None);",
                "    assert_eq!(sparse_iter.it.len(), 1);",
                "    assert_eq!(sparse_iter.it.next().unwrap().1.start, 0);",
                "    assert_eq!(sparse_iter.it.next().unwrap().1.end, 0);",
                "    assert_eq!(sparse_iter.it.next().unwrap().1.next, StateID(3));"
              ],
              "code": [
                "{",
                "    let stride2 = 1; // 2^0",
                "    let alphabet_len = 1; // minimum alphabet length",
                "    let table = vec![Transition { start: 0, end: 0, next: StateID(3) }; (1 << stride2) * alphabet_len];",
                "",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table,",
                "        starts: vec![StateID(3)],",
                "        min_match_id: StateID(3),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len,",
                "        stride2,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "",
                "    let sid = StateID(3);",
                "    let _sparse_iter = dfa.sparse_transitions(sid);",
                "    let stride2 = 1;",
                "    let alphabet_len = 1;",
                "    let table = vec![Transition { start: 0, end: 0, next: StateID(3) }; (1 << stride2) * alphabet_len];",
                "    let dfa = DFA {",
                "    config: Config::default(),",
                "    nfa: NFA::default(),",
                "    table,",
                "    starts: vec![StateID(3)],",
                "    min_match_id: StateID(3),",
                "    classes: ByteClasses([0; 256]),",
                "    alphabet_len,",
                "    stride2,",
                "    pateps_offset: 0,",
                "    explicit_slot_start: 0,",
                "    };",
                "    let sid = StateID(3);",
                "    let sparse_iter = dfa.sparse_transitions(sid);",
                "    assert_eq!(sparse_iter.cur, None);",
                "    assert_eq!(sparse_iter.it.len(), 1);",
                "    assert_eq!(sparse_iter.it.next().unwrap().1.start, 0);",
                "    assert_eq!(sparse_iter.it.next().unwrap().1.end, 0);",
                "    assert_eq!(sparse_iter.it.next().unwrap().1.next, StateID(3));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}