{
  "name": "regex_lite::hir::{impl#4}::ascii_case_fold",
  "mod_info": {
    "name": "hir",
    "loc": "regex-lite/src/lib.rs:877:1:877:9"
  },
  "visible": false,
  "loc": "regex-lite/src/hir/mod.rs:528:5:546:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: (ClassRange { start: 'a', end: 'z' }).is_intersection_empty(self) at line 529 is true\n",
        "precondition: (ClassRange { start: 'A', end: 'Z' }).is_intersection_empty(self) at line 537 is true\n",
        "expected return value/type: None\n"
      ],
      "input_infer": "ClassRange { start: '!', end: '`' } or ClassRange { start: '{', end: '~' }\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ClassRange { start: '!', end: '`' };",
                "    let result = range.ascii_case_fold();",
                "}"
              ],
              "oracle": [
                "    let range = ClassRange { start: '!', end: '`' };",
                "    let result = range.ascii_case_fold();",
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let range = ClassRange { start: '!', end: '`' };",
                "    let result = range.ascii_case_fold();",
                "    let range = ClassRange { start: '!', end: '`' };",
                "    let result = range.ascii_case_fold();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ClassRange { start: '{', end: '~' };",
                "    let result = range.ascii_case_fold();",
                "}"
              ],
              "oracle": [
                "    result.unwrap();",
                "    assert!(result.is_none());",
                "    assert_eq!(result, None);",
                "    let range = ClassRange { start: '{', end: '~' };",
                "    let empty_range = ClassRange { start: 'A', end: 'A' };",
                "    assert!(empty_range.is_intersection_empty(&range));",
                "    let empty_range_lower = ClassRange { start: 'a', end: 'a' };",
                "    assert!(empty_range_lower.is_intersection_empty(&range));"
              ],
              "code": [
                "{",
                "    let range = ClassRange { start: '{', end: '~' };",
                "    let result = range.ascii_case_fold();",
                "    result.unwrap();",
                "    assert!(result.is_none());",
                "    assert_eq!(result, None);",
                "    let range = ClassRange { start: '{', end: '~' };",
                "    let empty_range = ClassRange { start: 'A', end: 'A' };",
                "    assert!(empty_range.is_intersection_empty(&range));",
                "    let empty_range_lower = ClassRange { start: 'a', end: 'a' };",
                "    assert!(empty_range_lower.is_intersection_empty(&range));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: (ClassRange { start: 'a', end: 'z' }).is_intersection_empty(self) at line 529 is true\n",
        "precondition: (ClassRange { start: 'A', end: 'Z' }).is_intersection_empty(self) at line 537 is false\n",
        "expected return value/type: Some(ClassRange {\n                start: char::try_from(u32::from(start) + 32).unwrap(),\n                end: char::try_from(u32::from(end) + 32).unwrap(),\n            })\n"
      ],
      "input_infer": "Test input conditions: start = 'A', end = 'Z' (ensuring intersection with ClassRange { start: 'A', end: 'Z' } is not empty) and start < 'a', end > 'z' (ensuring intersection with ClassRange { start: 'a', end: 'z' } is empty).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ClassRange { start: 'A', end: 'Z' };",
                "    let result = range.ascii_case_fold();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(ClassRange { start: 'a', end: 'z' }));"
              ],
              "code": [
                "{",
                "    let range = ClassRange { start: 'A', end: 'Z' };",
                "    let result = range.ascii_case_fold();",
                "    assert_eq!(result, Some(ClassRange { start: 'a', end: 'z' }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ClassRange { start: 'A', end: 'Z' };",
                "    let result = range.ascii_case_fold();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(ClassRange { start: 'a', end: 'z' }));"
              ],
              "code": [
                "{",
                "    let range = ClassRange { start: 'A', end: 'Z' };",
                "    let result = range.ascii_case_fold();",
                "    assert_eq!(result, Some(ClassRange { start: 'a', end: 'z' }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ClassRange { start: 'A', end: 'Z' };",
                "    let result = range.ascii_case_fold();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    let folded_range = result.unwrap();",
                "    assert_eq!(folded_range.start, 'a');",
                "    assert_eq!(folded_range.end, 'z');"
              ],
              "code": [
                "{",
                "    let range = ClassRange { start: 'A', end: 'Z' };",
                "    let result = range.ascii_case_fold();",
                "    assert!(result.is_some());",
                "    let folded_range = result.unwrap();",
                "    assert_eq!(folded_range.start, 'a');",
                "    assert_eq!(folded_range.end, 'z');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: (ClassRange { start: 'a', end: 'z' }).is_intersection_empty(self) at line 529 is false\n",
        "expected return value/type: Some(ClassRange {\n                start: char::try_from(u32::from(start) - 32).unwrap(),\n                end: char::try_from(u32::from(end) - 32).unwrap(),\n            })\n"
      ],
      "input_infer": "start: 'a' to 'z', end: 'a' to 'z' or start: 'A' to 'Z', end: 'A' to 'Z', ensuring at least one character in the range overlaps with either 'a' to 'z' or 'A' to 'Z'\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = ClassRange { start: 'a', end: 'c' };",
                "    let result = input.ascii_case_fold();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(ClassRange { start: 'A', end: 'C' }));"
              ],
              "code": [
                "{",
                "    let input = ClassRange { start: 'a', end: 'c' };",
                "    let result = input.ascii_case_fold();",
                "    assert_eq!(result, Some(ClassRange { start: 'A', end: 'C' }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = ClassRange { start: 'A', end: 'C' };",
                "    let result = input.ascii_case_fold();",
                "}"
              ],
              "oracle": [
                "    let expected = Some(ClassRange { start: 'A', end: 'C' });",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let input = ClassRange { start: 'A', end: 'C' };",
                "    let result = input.ascii_case_fold();",
                "    let expected = Some(ClassRange { start: 'A', end: 'C' });",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = ClassRange { start: 'b', end: 'y' };",
                "    let result = input.ascii_case_fold();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(ClassRange { start: 'B', end: 'Y' }));"
              ],
              "code": [
                "{",
                "    let input = ClassRange { start: 'b', end: 'y' };",
                "    let result = input.ascii_case_fold();",
                "    assert_eq!(result, Some(ClassRange { start: 'B', end: 'Y' }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = ClassRange { start: 'B', end: 'Y' };",
                "    let result = input.ascii_case_fold();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(ClassRange { start: 'b', end: 'y' }));"
              ],
              "code": [
                "{",
                "    let input = ClassRange { start: 'B', end: 'Y' };",
                "    let result = input.ascii_case_fold();",
                "    assert_eq!(result, Some(ClassRange { start: 'b', end: 'y' }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = ClassRange { start: 'a', end: 'z' };",
                "    let result = input.ascii_case_fold();",
                "}"
              ],
              "oracle": [
                "    let expected = Some(ClassRange { start: 'A', end: 'Z' });",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let input = ClassRange { start: 'a', end: 'z' };",
                "    let result = input.ascii_case_fold();",
                "    let expected = Some(ClassRange { start: 'A', end: 'Z' });",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = ClassRange { start: 'A', end: 'Z' };",
                "    let result = input.ascii_case_fold();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(ClassRange { start: 'a', end: 'z' }));"
              ],
              "code": [
                "{",
                "    let input = ClassRange { start: 'A', end: 'Z' };",
                "    let result = input.ascii_case_fold();",
                "    assert_eq!(result, Some(ClassRange { start: 'a', end: 'z' }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = ClassRange { start: 'A', end: 'z' };",
                "    let result = input.ascii_case_fold();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(ClassRange { start: 'Z', end: 'z' }));"
              ],
              "code": [
                "{",
                "    let input = ClassRange { start: 'A', end: 'z' };",
                "    let result = input.ascii_case_fold();",
                "    assert_eq!(result, Some(ClassRange { start: 'Z', end: 'z' }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = ClassRange { start: '!', end: '%' };",
                "    let result = input.ascii_case_fold();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(ClassRange { start: 'A', end: 'Z' }));"
              ],
              "code": [
                "{",
                "    let input = ClassRange { start: '!', end: '%' };",
                "    let result = input.ascii_case_fold();",
                "    assert_eq!(result, Some(ClassRange { start: 'A', end: 'Z' }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}