{
  "name": "regex_automata::dfa::sparse::{impl#6}::pattern_len",
  "mod_info": {
    "name": "dfa::sparse",
    "loc": "regex-automata/src/dfa/mod.rs:343:1:343:16"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/sparse.rs:1159:5:1161:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.tt.pattern_len\n"
      ],
      "input_infer": "self.tt.pattern_len in the range of 0 to a maximum allowable size determined by the DFA construction, testing both with and without start states for patterns\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transitions = Transitions {",
                "        sparse: vec![],",
                "        classes: ByteClasses::default(),",
                "        state_len: 1,",
                "        pattern_len: 0,",
                "    };",
                "    let start_table = StartTable {",
                "        table: vec![],",
                "        kind: StartKind::Both,",
                "        start_map: StartByteMap::default(),",
                "        stride: 0,",
                "        pattern_len: Some(0),",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: None,",
                "    };",
                "    let dfa = DFA {",
                "        tt: transitions,",
                "        st: start_table,",
                "        special: Special {",
                "            max: 0,",
                "            quit_id: 0,",
                "            min_match: 0,",
                "            max_match: 0,",
                "            min_accel: 0,",
                "            max_accel: 0,",
                "            min_start: 0,",
                "            max_start: 0,",
                "        },",
                "        pre: None,",
                "        quitset: ByteSet([false; 256]),",
                "        flags: Flags {",
                "            has_empty: false,",
                "            is_utf8: false,",
                "            is_always_start_anchored: false,",
                "        },",
                "    };",
                "    let _ = dfa.pattern_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dfa.pattern_len(), 0);",
                "    let transitions = Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 1, pattern_len: 5 };",
                "    let start_table = StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: Some(5), universal_start_unanchored: None, universal_start_anchored: None };",
                "    let dfa = DFA { tt: transitions, st: start_table, special: Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 }, pre: None, quitset: ByteSet([false; 256]), flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false } };",
                "    assert_eq!(dfa.pattern_len(), 5);",
                "    let transitions = Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 1, pattern_len: 10 };",
                "    let start_table = StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: Some(10), universal_start_unanchored: None, universal_start_anchored: None };",
                "    let dfa = DFA { tt: transitions, st: start_table, special: Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 }, pre: None, quitset: ByteSet([false; 256]), flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false } };",
                "    assert_eq!(dfa.pattern_len(), 10);"
              ],
              "code": [
                "{",
                "    let transitions = Transitions {",
                "        sparse: vec![],",
                "        classes: ByteClasses::default(),",
                "        state_len: 1,",
                "        pattern_len: 0,",
                "    };",
                "    let start_table = StartTable {",
                "        table: vec![],",
                "        kind: StartKind::Both,",
                "        start_map: StartByteMap::default(),",
                "        stride: 0,",
                "        pattern_len: Some(0),",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: None,",
                "    };",
                "    let dfa = DFA {",
                "        tt: transitions,",
                "        st: start_table,",
                "        special: Special {",
                "            max: 0,",
                "            quit_id: 0,",
                "            min_match: 0,",
                "            max_match: 0,",
                "            min_accel: 0,",
                "            max_accel: 0,",
                "            min_start: 0,",
                "            max_start: 0,",
                "        },",
                "        pre: None,",
                "        quitset: ByteSet([false; 256]),",
                "        flags: Flags {",
                "            has_empty: false,",
                "            is_utf8: false,",
                "            is_always_start_anchored: false,",
                "        },",
                "    };",
                "    let _ = dfa.pattern_len();",
                "    assert_eq!(dfa.pattern_len(), 0);",
                "    let transitions = Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 1, pattern_len: 5 };",
                "    let start_table = StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: Some(5), universal_start_unanchored: None, universal_start_anchored: None };",
                "    let dfa = DFA { tt: transitions, st: start_table, special: Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 }, pre: None, quitset: ByteSet([false; 256]), flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false } };",
                "    assert_eq!(dfa.pattern_len(), 5);",
                "    let transitions = Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 1, pattern_len: 10 };",
                "    let start_table = StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: Some(10), universal_start_unanchored: None, universal_start_anchored: None };",
                "    let dfa = DFA { tt: transitions, st: start_table, special: Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 }, pre: None, quitset: ByteSet([false; 256]), flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false } };",
                "    assert_eq!(dfa.pattern_len(), 10);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transitions = Transitions {",
                "        sparse: vec![0; 16],",
                "        classes: ByteClasses::default(),",
                "        state_len: 5,",
                "        pattern_len: 3,",
                "    };",
                "    let start_table = StartTable {",
                "        table: vec![0; 24],",
                "        kind: StartKind::Both,",
                "        start_map: StartByteMap::default(),",
                "        stride: 3,",
                "        pattern_len: Some(3),",
                "        universal_start_unanchored: Some(1),",
                "        universal_start_anchored: Some(2),",
                "    };",
                "    let dfa = DFA {",
                "        tt: transitions,",
                "        st: start_table,",
                "        special: Special {",
                "            max: 4,",
                "            quit_id: 1,",
                "            min_match: 2,",
                "            max_match: 4,",
                "            min_accel: 3,",
                "            max_accel: 4,",
                "            min_start: 0,",
                "            max_start: 4,",
                "        },",
                "        pre: None,",
                "        quitset: ByteSet([false; 256]),",
                "        flags: Flags {",
                "            has_empty: true,",
                "            is_utf8: true,",
                "            is_always_start_anchored: true,",
                "        },",
                "    };",
                "    let _ = dfa.pattern_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dfa.pattern_len(), 3);"
              ],
              "code": [
                "{",
                "    let transitions = Transitions {",
                "        sparse: vec![0; 16],",
                "        classes: ByteClasses::default(),",
                "        state_len: 5,",
                "        pattern_len: 3,",
                "    };",
                "    let start_table = StartTable {",
                "        table: vec![0; 24],",
                "        kind: StartKind::Both,",
                "        start_map: StartByteMap::default(),",
                "        stride: 3,",
                "        pattern_len: Some(3),",
                "        universal_start_unanchored: Some(1),",
                "        universal_start_anchored: Some(2),",
                "    };",
                "    let dfa = DFA {",
                "        tt: transitions,",
                "        st: start_table,",
                "        special: Special {",
                "            max: 4,",
                "            quit_id: 1,",
                "            min_match: 2,",
                "            max_match: 4,",
                "            min_accel: 3,",
                "            max_accel: 4,",
                "            min_start: 0,",
                "            max_start: 4,",
                "        },",
                "        pre: None,",
                "        quitset: ByteSet([false; 256]),",
                "        flags: Flags {",
                "            has_empty: true,",
                "            is_utf8: true,",
                "            is_always_start_anchored: true,",
                "        },",
                "    };",
                "    let _ = dfa.pattern_len();",
                "    assert_eq!(dfa.pattern_len(), 3);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transitions = Transitions {",
                "        sparse: vec![0; 8],",
                "        classes: ByteClasses::default(),",
                "        state_len: 4,",
                "        pattern_len: 0,",
                "    };",
                "    let start_table = StartTable {",
                "        table: vec![],",
                "        kind: StartKind::Unanchored,",
                "        start_map: StartByteMap::default(),",
                "        stride: 0,",
                "        pattern_len: None,",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: None,",
                "    };",
                "    let dfa = DFA {",
                "        tt: transitions,",
                "        st: start_table,",
                "        special: Special {",
                "            max: 3,",
                "            quit_id: 1,",
                "            min_match: 0,",
                "            max_match: 0,",
                "            min_accel: 0,",
                "            max_accel: 0,",
                "            min_start: 0,",
                "            max_start: 0,",
                "        },",
                "        pre: None,",
                "        quitset: ByteSet([false; 256]),",
                "        flags: Flags {",
                "            has_empty: false,",
                "            is_utf8: false,",
                "            is_always_start_anchored: true,",
                "        },",
                "    };",
                "    let _ = dfa.pattern_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dfa.pattern_len(), 0);"
              ],
              "code": [
                "{",
                "    let transitions = Transitions {",
                "        sparse: vec![0; 8],",
                "        classes: ByteClasses::default(),",
                "        state_len: 4,",
                "        pattern_len: 0,",
                "    };",
                "    let start_table = StartTable {",
                "        table: vec![],",
                "        kind: StartKind::Unanchored,",
                "        start_map: StartByteMap::default(),",
                "        stride: 0,",
                "        pattern_len: None,",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: None,",
                "    };",
                "    let dfa = DFA {",
                "        tt: transitions,",
                "        st: start_table,",
                "        special: Special {",
                "            max: 3,",
                "            quit_id: 1,",
                "            min_match: 0,",
                "            max_match: 0,",
                "            min_accel: 0,",
                "            max_accel: 0,",
                "            min_start: 0,",
                "            max_start: 0,",
                "        },",
                "        pre: None,",
                "        quitset: ByteSet([false; 256]),",
                "        flags: Flags {",
                "            has_empty: false,",
                "            is_utf8: false,",
                "            is_always_start_anchored: true,",
                "        },",
                "    };",
                "    let _ = dfa.pattern_len();",
                "    assert_eq!(dfa.pattern_len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}