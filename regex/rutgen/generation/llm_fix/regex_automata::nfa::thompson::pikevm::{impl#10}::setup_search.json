{
  "name": "regex_automata::nfa::thompson::pikevm::{impl#10}::setup_search",
  "mod_info": {
    "name": "nfa::thompson::pikevm",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:68:1:68:16"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/pikevm.rs:2138:5:2140:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "captures_slot_len >= 0 and captures_slot_len <= slots_per_state\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slot_table = SlotTable {",
                "        table: vec![None; 10],",
                "        slots_per_state: 10,",
                "        slots_for_captures: 0,",
                "    };",
                "    slot_table.setup_search(0);",
                "}"
              ],
              "oracle": [
                "    slot_table.slots_for_captures == 0",
                "    slot_table.setup_search(5);",
                "    slot_table.slots_for_captures == 5",
                "    slot_table.setup_search(10);",
                "    slot_table.slots_for_captures == 10",
                "    slot_table.setup_search(7);",
                "    slot_table.slots_for_captures == 7"
              ],
              "code": [
                "{",
                "    let mut slot_table = SlotTable {",
                "        table: vec![None; 10],",
                "        slots_per_state: 10,",
                "        slots_for_captures: 0,",
                "    };",
                "    slot_table.setup_search(0);",
                "    slot_table.slots_for_captures == 0",
                "    slot_table.setup_search(5);",
                "    slot_table.slots_for_captures == 5",
                "    slot_table.setup_search(10);",
                "    slot_table.slots_for_captures == 10",
                "    slot_table.setup_search(7);",
                "    slot_table.slots_for_captures == 7",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slot_table = SlotTable {",
                "        table: vec![None; 10],",
                "        slots_per_state: 10,",
                "        slots_for_captures: 0,",
                "    };",
                "    slot_table.setup_search(10);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(slot_table.slots_for_captures, 10);"
              ],
              "code": [
                "{",
                "    let mut slot_table = SlotTable {",
                "        table: vec![None; 10],",
                "        slots_per_state: 10,",
                "        slots_for_captures: 0,",
                "    };",
                "    slot_table.setup_search(10);",
                "    assert_eq!(slot_table.slots_for_captures, 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slot_table = SlotTable {",
                "        table: vec![None; 10],",
                "        slots_per_state: 10,",
                "        slots_for_captures: 0,",
                "    };",
                "    slot_table.setup_search(9);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(slot_table.slots_for_captures, 9);",
                "    assert_eq!(slot_table.table.len(), 10);",
                "    assert!(slot_table.table.iter().all(|&x| x.is_none()));"
              ],
              "code": [
                "{",
                "    let mut slot_table = SlotTable {",
                "        table: vec![None; 10],",
                "        slots_per_state: 10,",
                "        slots_for_captures: 0,",
                "    };",
                "    slot_table.setup_search(9);",
                "    assert_eq!(slot_table.slots_for_captures, 9);",
                "    assert_eq!(slot_table.table.len(), 10);",
                "    assert!(slot_table.table.iter().all(|&x| x.is_none()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut slot_table = SlotTable {",
                "        table: vec![None; 10],",
                "        slots_per_state: 10,",
                "        slots_for_captures: 0,",
                "    };",
                "    slot_table.setup_search(11); // should panic",
                "}"
              ],
              "oracle": [
                "    assert_panics!(slot_table.setup_search(11));"
              ],
              "code": [
                "{",
                "    let mut slot_table = SlotTable {",
                "        table: vec![None; 10],",
                "        slots_per_state: 10,",
                "        slots_for_captures: 0,",
                "    };",
                "    slot_table.setup_search(11); // should panic",
                "    assert_panics!(slot_table.setup_search(11));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}