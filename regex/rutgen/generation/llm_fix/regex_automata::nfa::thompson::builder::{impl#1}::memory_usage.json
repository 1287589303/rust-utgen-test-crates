{
  "name": "regex_automata::nfa::thompson::builder::{impl#1}::memory_usage",
  "mod_info": {
    "name": "nfa::thompson::builder",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:58:1:58:13"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/builder.rs:1299:5:1301:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.states.len() * mem::size_of::<State>() + self.memory_states\n"
      ],
      "input_infer": "self.states.len() within [0, 1000] and self.memory_states within [0, 1048576] and ensure both are non-negative integers\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let builder = Builder::default();",
                "    let usage = builder.memory_usage();",
                "}"
              ],
              "oracle": [
                "    let builder = Builder::default();",
                "    assert_eq!(builder.memory_usage(), 0);",
                "    ",
                "    let mut builder = Builder::default();",
                "    builder.add_empty().unwrap();",
                "    assert_eq!(builder.memory_usage(), mem::size_of::<State>());",
                "    ",
                "    let mut builder = Builder::default();",
                "    builder.add_match().unwrap();",
                "    assert_eq!(builder.memory_usage(), mem::size_of::<State>());",
                "    ",
                "    let mut builder = Builder::default();",
                "    let start = builder.add_empty().unwrap();",
                "    builder.start_pattern().unwrap();",
                "    builder.add_capture_start(start, 0, None).unwrap();",
                "    assert_eq!(builder.memory_usage(), 2 * mem::size_of::<State>());",
                "    ",
                "    let mut builder = Builder::default();",
                "    builder.add_fail().unwrap();",
                "    builder.add_match().unwrap();",
                "    assert_eq!(builder.memory_usage(), 2 * mem::size_of::<State>());",
                "    ",
                "    let mut builder = Builder::default();",
                "    let transitions = vec![Transition::new(0u8, 1u8)];",
                "    builder.add_range(transitions[0]).unwrap();",
                "    assert_eq!(builder.memory_usage(), mem::size_of::<State>());"
              ],
              "code": [
                "{",
                "    let builder = Builder::default();",
                "    let usage = builder.memory_usage();",
                "    let builder = Builder::default();",
                "    assert_eq!(builder.memory_usage(), 0);",
                "    ",
                "    let mut builder = Builder::default();",
                "    builder.add_empty().unwrap();",
                "    assert_eq!(builder.memory_usage(), mem::size_of::<State>());",
                "    ",
                "    let mut builder = Builder::default();",
                "    builder.add_match().unwrap();",
                "    assert_eq!(builder.memory_usage(), mem::size_of::<State>());",
                "    ",
                "    let mut builder = Builder::default();",
                "    let start = builder.add_empty().unwrap();",
                "    builder.start_pattern().unwrap();",
                "    builder.add_capture_start(start, 0, None).unwrap();",
                "    assert_eq!(builder.memory_usage(), 2 * mem::size_of::<State>());",
                "    ",
                "    let mut builder = Builder::default();",
                "    builder.add_fail().unwrap();",
                "    builder.add_match().unwrap();",
                "    assert_eq!(builder.memory_usage(), 2 * mem::size_of::<State>());",
                "    ",
                "    let mut builder = Builder::default();",
                "    let transitions = vec![Transition::new(0u8, 1u8)];",
                "    builder.add_range(transitions[0]).unwrap();",
                "    assert_eq!(builder.memory_usage(), mem::size_of::<State>());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = Builder::default();",
                "    builder.states.push(State { transitions: vec![] });",
                "    let usage = builder.memory_usage();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(usage, 0);",
                "    builder.memory_states = 0;",
                "    assert_eq!(builder.memory_usage(), 0);",
                "    builder.states.push(State { transitions: vec![] });",
                "    assert_eq!(builder.memory_usage(), mem::size_of::<State>());",
                "    builder.memory_states = 10;",
                "    assert_eq!(builder.memory_usage(), mem::size_of::<State>() + 10);",
                "    builder.states.push(State { transitions: vec![] });",
                "    assert_eq!(builder.memory_usage(), 2 * mem::size_of::<State>() + 10);",
                "    builder.states.clear();",
                "    assert_eq!(builder.memory_usage(), 10);",
                "    builder.memory_states = 0;",
                "    assert_eq!(builder.memory_usage(), 0);"
              ],
              "code": [
                "{",
                "    let mut builder = Builder::default();",
                "    builder.states.push(State { transitions: vec![] });",
                "    let usage = builder.memory_usage();",
                "    assert_eq!(usage, 0);",
                "    builder.memory_states = 0;",
                "    assert_eq!(builder.memory_usage(), 0);",
                "    builder.states.push(State { transitions: vec![] });",
                "    assert_eq!(builder.memory_usage(), mem::size_of::<State>());",
                "    builder.memory_states = 10;",
                "    assert_eq!(builder.memory_usage(), mem::size_of::<State>() + 10);",
                "    builder.states.push(State { transitions: vec![] });",
                "    assert_eq!(builder.memory_usage(), 2 * mem::size_of::<State>() + 10);",
                "    builder.states.clear();",
                "    assert_eq!(builder.memory_usage(), 10);",
                "    builder.memory_states = 0;",
                "    assert_eq!(builder.memory_usage(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = Builder::default();",
                "    for _ in 0..1000 {",
                "        builder.states.push(State { transitions: vec![] });",
                "    }",
                "    let usage = builder.memory_usage();",
                "}"
              ],
              "oracle": [
                "    let expected_usage = 1000 * mem::size_of::<State>() + 0;",
                "    assert_eq!(usage, expected_usage);",
                "    assert!(usage >= 0);",
                "    assert_eq!(builder.states.len(), 1000);",
                "    assert_eq!(builder.memory_states, 0);"
              ],
              "code": [
                "{",
                "    let mut builder = Builder::default();",
                "    for _ in 0..1000 {",
                "        builder.states.push(State { transitions: vec![] });",
                "    }",
                "    let usage = builder.memory_usage();",
                "    let expected_usage = 1000 * mem::size_of::<State>() + 0;",
                "    assert_eq!(usage, expected_usage);",
                "    assert!(usage >= 0);",
                "    assert_eq!(builder.states.len(), 1000);",
                "    assert_eq!(builder.memory_states, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = Builder::default();",
                "    builder.memory_states = 512;",
                "    builder.states.push(State { transitions: vec![] });",
                "    let usage = builder.memory_usage();",
                "}"
              ],
              "oracle": [
                "    let mut builder = Builder::default();",
                "    builder.memory_states = 512;",
                "    builder.states.push(State { transitions: vec![] });",
                "    let expected_usage = builder.states.len() * mem::size_of::<State>() + builder.memory_states;",
                "    assert_eq!(usage, expected_usage);"
              ],
              "code": [
                "{",
                "    let mut builder = Builder::default();",
                "    builder.memory_states = 512;",
                "    builder.states.push(State { transitions: vec![] });",
                "    let usage = builder.memory_usage();",
                "    let mut builder = Builder::default();",
                "    builder.memory_states = 512;",
                "    builder.states.push(State { transitions: vec![] });",
                "    let expected_usage = builder.states.len() * mem::size_of::<State>() + builder.memory_states;",
                "    assert_eq!(usage, expected_usage);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = Builder::default();",
                "    builder.memory_states = 1048576;",
                "    for _ in 0..1000 {",
                "        builder.states.push(State { transitions: vec![] });",
                "    }",
                "    let usage = builder.memory_usage();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.memory_states, 1048576);",
                "    assert_eq!(builder.states.len(), 1000);",
                "    assert_eq!(usage, 1048576 + (1000 * mem::size_of::<State>()));"
              ],
              "code": [
                "{",
                "    let mut builder = Builder::default();",
                "    builder.memory_states = 1048576;",
                "    for _ in 0..1000 {",
                "        builder.states.push(State { transitions: vec![] });",
                "    }",
                "    let usage = builder.memory_usage();",
                "    assert_eq!(builder.memory_states, 1048576);",
                "    assert_eq!(builder.states.len(), 1000);",
                "    assert_eq!(usage, 1048576 + (1000 * mem::size_of::<State>()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = Builder::default();",
                "    builder.memory_states = 0;",
                "    for _ in 0..1000 {",
                "        builder.states.push(State { transitions: vec![] });",
                "    }",
                "    let usage = builder.memory_usage();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.memory_usage(), 1000 * mem::size_of::<State>() + 0);"
              ],
              "code": [
                "{",
                "    let mut builder = Builder::default();",
                "    builder.memory_states = 0;",
                "    for _ in 0..1000 {",
                "        builder.states.push(State { transitions: vec![] });",
                "    }",
                "    let usage = builder.memory_usage();",
                "    assert_eq!(builder.memory_usage(), 1000 * mem::size_of::<State>() + 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = Builder::default();",
                "    builder.memory_states = 256;",
                "    for _ in 0..1000 {",
                "        builder.states.push(State { transitions: vec![] });",
                "    }",
                "    let usage = builder.memory_usage();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(usage, 1000 * mem::size_of::<State>() + 256);"
              ],
              "code": [
                "{",
                "    let mut builder = Builder::default();",
                "    builder.memory_states = 256;",
                "    for _ in 0..1000 {",
                "        builder.states.push(State { transitions: vec![] });",
                "    }",
                "    let usage = builder.memory_usage();",
                "    assert_eq!(usage, 1000 * mem::size_of::<State>() + 256);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}