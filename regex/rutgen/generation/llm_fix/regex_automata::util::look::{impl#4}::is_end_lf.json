{
  "name": "regex_automata::util::look::{impl#4}::is_end_lf",
  "mod_info": {
    "name": "util::look",
    "loc": "regex-automata/src/util/mod.rs:38:1:38:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/look.rs:943:5:945:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.is_end(haystack, at) at line 944 is true\n",
        "expected return value/type: self.is_end(haystack, at) || haystack[at] == self.lineterm.0\n"
      ],
      "input_infer": "haystack: non-empty slice of u8; at: 0 <= at <= haystack.len(); self.lineterm: valid u8 value\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    matcher.set_line_terminator(10); // LF",
                "    let haystack: &[u8] = b\"Hello\\nWorld\";",
                "    let at = 0; // start of haystack",
                "    matcher.is_end_lf(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_end(haystack, at), true);",
                "    assert_eq!(matcher.is_end_lf(haystack, at), true);",
                "    assert_eq!(haystack[at], matcher.lineterm.0);",
                "    assert!(at <= haystack.len());"
              ],
              "code": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    matcher.set_line_terminator(10); // LF",
                "    let haystack: &[u8] = b\"Hello\\nWorld\";",
                "    let at = 0; // start of haystack",
                "    matcher.is_end_lf(haystack, at);",
                "    assert_eq!(matcher.is_end(haystack, at), true);",
                "    assert_eq!(matcher.is_end_lf(haystack, at), true);",
                "    assert_eq!(haystack[at], matcher.lineterm.0);",
                "    assert!(at <= haystack.len());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    matcher.set_line_terminator(10); // LF",
                "    let haystack: &[u8] = b\"Hello\\nWorld\";",
                "    let at = haystack.len(); // end of haystack",
                "    matcher.is_end_lf(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_end_lf(haystack, at), true);",
                "    assert_eq!(matcher.get_line_terminator(), 10);",
                "    assert!(matcher.is_end(haystack, at));",
                "    assert!(haystack[at - 1] == matcher.lineterm.0);"
              ],
              "code": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    matcher.set_line_terminator(10); // LF",
                "    let haystack: &[u8] = b\"Hello\\nWorld\";",
                "    let at = haystack.len(); // end of haystack",
                "    matcher.is_end_lf(haystack, at);",
                "    assert_eq!(matcher.is_end_lf(haystack, at), true);",
                "    assert_eq!(matcher.get_line_terminator(), 10);",
                "    assert!(matcher.is_end(haystack, at));",
                "    assert!(haystack[at - 1] == matcher.lineterm.0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    matcher.set_line_terminator(10); // LF",
                "    let haystack: &[u8] = b\"Hello\\nWorld\";",
                "    let at = 5; // position of 'o'",
                "    matcher.is_end_lf(haystack, at);",
                "}"
              ],
              "oracle": [
                "    matcher.is_end_lf(haystack, at); // Expecting true since at is a valid index and haystack[at] == matcher.lineterm.0",
                "    matcher.lineterm.0; // Expecting to be 10 (LF)",
                "    at; // Expecting at to be 5, a legal index in the haystack",
                "    haystack.len(); // Expecting haystack length to be 11",
                "    matcher.is_end(haystack, at); // Expecting true, as this should satisfy the precondition",
                "    haystack[at]; // Expecting haystack[5] to be 'o' (ASCII value 111)"
              ],
              "code": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    matcher.set_line_terminator(10); // LF",
                "    let haystack: &[u8] = b\"Hello\\nWorld\";",
                "    let at = 5; // position of 'o'",
                "    matcher.is_end_lf(haystack, at);",
                "    matcher.is_end_lf(haystack, at); // Expecting true since at is a valid index and haystack[at] == matcher.lineterm.0",
                "    matcher.lineterm.0; // Expecting to be 10 (LF)",
                "    at; // Expecting at to be 5, a legal index in the haystack",
                "    haystack.len(); // Expecting haystack length to be 11",
                "    matcher.is_end(haystack, at); // Expecting true, as this should satisfy the precondition",
                "    haystack[at]; // Expecting haystack[5] to be 'o' (ASCII value 111)",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    matcher.set_line_terminator(10); // LF",
                "    let haystack: &[u8] = b\"Hello\\nWorld\";",
                "    let at = 6; // position of '\\n'",
                "    matcher.is_end_lf(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_end(haystack, at), true);",
                "    assert_eq!(matcher.is_end_lf(haystack, at), true);",
                "    assert_eq!(haystack[at], matcher.lineterm.0);",
                "    assert!(matcher.is_end_lf(haystack, at));"
              ],
              "code": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    matcher.set_line_terminator(10); // LF",
                "    let haystack: &[u8] = b\"Hello\\nWorld\";",
                "    let at = 6; // position of '\\n'",
                "    matcher.is_end_lf(haystack, at);",
                "    assert_eq!(matcher.is_end(haystack, at), true);",
                "    assert_eq!(matcher.is_end_lf(haystack, at), true);",
                "    assert_eq!(haystack[at], matcher.lineterm.0);",
                "    assert!(matcher.is_end_lf(haystack, at));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    matcher.set_line_terminator(10); // LF",
                "    let haystack: &[u8] = b\"Hello\\nWorld\";",
                "    let at = 7; // position of 'W'",
                "    matcher.is_end_lf(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert!(matcher.is_end(haystack, at));",
                "    assert_eq!(matcher.is_end_lf(haystack, at), true);",
                "    assert_eq!(matcher.is_end_lf(haystack, haystack.len()), true);",
                "    assert_eq!(matcher.is_end_lf(haystack, at + 1), false);",
                "    assert_eq!(matcher.is_end_lf(haystack, at), haystack[at] == matcher.lineterm.0);",
                "    assert_eq!(matcher.lineterm.0, 10);"
              ],
              "code": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    matcher.set_line_terminator(10); // LF",
                "    let haystack: &[u8] = b\"Hello\\nWorld\";",
                "    let at = 7; // position of 'W'",
                "    matcher.is_end_lf(haystack, at);",
                "    assert!(matcher.is_end(haystack, at));",
                "    assert_eq!(matcher.is_end_lf(haystack, at), true);",
                "    assert_eq!(matcher.is_end_lf(haystack, haystack.len()), true);",
                "    assert_eq!(matcher.is_end_lf(haystack, at + 1), false);",
                "    assert_eq!(matcher.is_end_lf(haystack, at), haystack[at] == matcher.lineterm.0);",
                "    assert_eq!(matcher.lineterm.0, 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    matcher.set_line_terminator(10); // LF",
                "    let haystack: &[u8] = b\"Hello World\"; // no LF in haystack",
                "    let at = 11; // at the end of haystack",
                "    matcher.is_end_lf(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert!(matcher.is_end(haystack, at));",
                "    assert_eq!(matcher.is_end_lf(haystack, at), true);",
                "    assert_eq!(matcher.is_end_lf(haystack, at), at == haystack.len() || haystack[at] == matcher.lineterm.0);",
                "    assert_eq!(matcher.lineterm.0, 10);"
              ],
              "code": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    matcher.set_line_terminator(10); // LF",
                "    let haystack: &[u8] = b\"Hello World\"; // no LF in haystack",
                "    let at = 11; // at the end of haystack",
                "    matcher.is_end_lf(haystack, at);",
                "    assert!(matcher.is_end(haystack, at));",
                "    assert_eq!(matcher.is_end_lf(haystack, at), true);",
                "    assert_eq!(matcher.is_end_lf(haystack, at), at == haystack.len() || haystack[at] == matcher.lineterm.0);",
                "    assert_eq!(matcher.lineterm.0, 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.is_end(haystack, at) at line 944 is false\n",
        "expected return value/type: haystack[at] == self.lineterm.0\n"
      ],
      "input_infer": "haystack must be a non-empty byte slice where haystack[at] == lineterm.0 and at is less than haystack.len()\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    matcher.set_line_terminator(b'\\n');",
                "    let haystack: &[u8] = b\"Hello World\\n\";",
                "    let at = 5; // at index 5, haystack[5] is ' ' (space), which is not line terminator",
                "    let result = matcher.is_end_lf(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);  // since haystack[5] is not the line terminator",
                "    assert_eq!(matcher.is_end(haystack, at), false);  // precondition: is_end must be false"
              ],
              "code": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    matcher.set_line_terminator(b'\\n');",
                "    let haystack: &[u8] = b\"Hello World\\n\";",
                "    let at = 5; // at index 5, haystack[5] is ' ' (space), which is not line terminator",
                "    let result = matcher.is_end_lf(haystack, at);",
                "    assert_eq!(result, false);  // since haystack[5] is not the line terminator",
                "    assert_eq!(matcher.is_end(haystack, at), false);  // precondition: is_end must be false",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    matcher.set_line_terminator(b'\\n');",
                "    let haystack: &[u8] = b\"Hello World\\n\";",
                "    let at = 11; // at index 11, haystack[11] is '\\n' (line terminator)",
                "    let result = matcher.is_end_lf(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    matcher.set_line_terminator(b'\\n');",
                "    let haystack: &[u8] = b\"Hello World\\n\";",
                "    let at = 11; // at index 11, haystack[11] is '\\n' (line terminator)",
                "    let result = matcher.is_end_lf(haystack, at);",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    matcher.set_line_terminator(b'\\r');",
                "    let haystack: &[u8] = b\"Hello World\\r\";",
                "    let at = 10; // at index 10, haystack[10] is 'd', which is not line terminator",
                "    let result = matcher.is_end_lf(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);",
                "    assert_ne!(haystack[at], matcher.lineterm.0);",
                "    assert!(!matcher.is_end(haystack, at));"
              ],
              "code": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    matcher.set_line_terminator(b'\\r');",
                "    let haystack: &[u8] = b\"Hello World\\r\";",
                "    let at = 10; // at index 10, haystack[10] is 'd', which is not line terminator",
                "    let result = matcher.is_end_lf(haystack, at);",
                "    assert_eq!(result, false);",
                "    assert_ne!(haystack[at], matcher.lineterm.0);",
                "    assert!(!matcher.is_end(haystack, at));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}