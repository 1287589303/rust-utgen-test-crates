{
  "name": "regex_syntax::ast::parse::{impl#2}::octal",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": true,
  "loc": "regex-syntax/src/ast/parse.rs:210:5:213:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "boolean values for the octal parameter (true, false) to test both enabling and disabling of octal syntax in the ParserBuilder instance.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = ParserBuilder::new();",
                "    builder.octal(true);",
                "}"
              ],
              "oracle": [
                "    builder.octal(true);",
                "    assert_eq!(builder.octal, true);",
                "    builder.octal(false);",
                "    assert_eq!(builder.octal, false);",
                "    builder.octal(true);",
                "    assert!(builder.octal(true).is::<&mut ParserBuilder>());",
                "    builder.octal(false);",
                "    assert!(builder.octal(false).is::<&mut ParserBuilder>());"
              ],
              "code": [
                "{",
                "    let mut builder = ParserBuilder::new();",
                "    builder.octal(true);",
                "    builder.octal(true);",
                "    assert_eq!(builder.octal, true);",
                "    builder.octal(false);",
                "    assert_eq!(builder.octal, false);",
                "    builder.octal(true);",
                "    assert!(builder.octal(true).is::<&mut ParserBuilder>());",
                "    builder.octal(false);",
                "    assert!(builder.octal(false).is::<&mut ParserBuilder>());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = ParserBuilder::new();",
                "    builder.octal(false);",
                "}"
              ],
              "oracle": [
                "    builder.octal(true);",
                "    let result = builder.octal(false);",
                "    assert_eq!(result.octal, false);",
                "    builder.octal(true);",
                "    let result = builder.octal(true);",
                "    assert_eq!(result.octal, true);"
              ],
              "code": [
                "{",
                "    let mut builder = ParserBuilder::new();",
                "    builder.octal(false);",
                "    builder.octal(true);",
                "    let result = builder.octal(false);",
                "    assert_eq!(result.octal, false);",
                "    builder.octal(true);",
                "    let result = builder.octal(true);",
                "    assert_eq!(result.octal, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}