{
  "name": "regex_automata::nfa::thompson::compiler::{impl#0}::overwrite",
  "mod_info": {
    "name": "nfa::thompson::compiler",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:60:1:60:14"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/compiler.rs:525:5:536:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Config {\n            utf8: o.utf8.or(self.utf8),\n            reverse: o.reverse.or(self.reverse),\n            nfa_size_limit: o.nfa_size_limit.or(self.nfa_size_limit),\n            shrink: o.shrink.or(self.shrink),\n            which_captures: o.which_captures.or(self.which_captures),\n            look_matcher: o.look_matcher.or_else(|| self.look_matcher.clone()),\n            #[cfg(test)]\n            unanchored_prefix: o.unanchored_prefix.or(self.unanchored_prefix),\n        }\n"
      ],
      "input_infer": "utf8: [true, false, None]; reverse: [true, false, None]; nfa_size_limit: [Some(0), Some(1), Some(usize::MAX), None]; shrink: [true, false, None]; which_captures: [All, Implicit, None]; look_matcher: [Some(LookMatcher), None]; unanchored_prefix: [true, false, None]\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config1 = Config::new().utf8(true).reverse(false).nfa_size_limit(Some(10)).shrink(true).which_captures(WhichCaptures::All).look_matcher(LookMatcher { lineterm: DebugByte }).unanchored_prefix(true);",
                "    let config2 = Config::new().utf8(false).reverse(true).nfa_size_limit(Some(20)).shrink(false).which_captures(WhichCaptures::Implicit).look_matcher(LookMatcher { lineterm: DebugByte }).unanchored_prefix(false);",
                "    let result = config1.overwrite(config2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.utf8, Some(false));",
                "    assert_eq!(result.reverse, Some(false));",
                "    assert_eq!(result.nfa_size_limit, Some(20));",
                "    assert_eq!(result.shrink, Some(true));",
                "    assert_eq!(result.which_captures, WhichCaptures::Implicit);",
                "    assert_eq!(result.look_matcher, config1.get_look_matcher());",
                "    assert_eq!(result.unanchored_prefix, Some(true));"
              ],
              "code": [
                "{",
                "    let config1 = Config::new().utf8(true).reverse(false).nfa_size_limit(Some(10)).shrink(true).which_captures(WhichCaptures::All).look_matcher(LookMatcher { lineterm: DebugByte }).unanchored_prefix(true);",
                "    let config2 = Config::new().utf8(false).reverse(true).nfa_size_limit(Some(20)).shrink(false).which_captures(WhichCaptures::Implicit).look_matcher(LookMatcher { lineterm: DebugByte }).unanchored_prefix(false);",
                "    let result = config1.overwrite(config2);",
                "    assert_eq!(result.utf8, Some(false));",
                "    assert_eq!(result.reverse, Some(false));",
                "    assert_eq!(result.nfa_size_limit, Some(20));",
                "    assert_eq!(result.shrink, Some(true));",
                "    assert_eq!(result.which_captures, WhichCaptures::Implicit);",
                "    assert_eq!(result.look_matcher, config1.get_look_matcher());",
                "    assert_eq!(result.unanchored_prefix, Some(true));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config1 = Config::new();",
                "    let config2 = Config::new();",
                "    let result = config1.overwrite(config2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.utf8, None);",
                "    assert_eq!(result.reverse, None);",
                "    assert_eq!(result.nfa_size_limit, None);",
                "    assert_eq!(result.shrink, None);",
                "    assert_eq!(result.which_captures, WhichCaptures::None);",
                "    assert_eq!(result.look_matcher, LookMatcher { lineterm: DebugByte::default() });",
                "    assert_eq!(result.unanchored_prefix, None);"
              ],
              "code": [
                "{",
                "    let config1 = Config::new();",
                "    let config2 = Config::new();",
                "    let result = config1.overwrite(config2);",
                "    assert_eq!(result.utf8, None);",
                "    assert_eq!(result.reverse, None);",
                "    assert_eq!(result.nfa_size_limit, None);",
                "    assert_eq!(result.shrink, None);",
                "    assert_eq!(result.which_captures, WhichCaptures::None);",
                "    assert_eq!(result.look_matcher, LookMatcher { lineterm: DebugByte::default() });",
                "    assert_eq!(result.unanchored_prefix, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config1 = Config::new().utf8(Some(true)).reverse(None).nfa_size_limit(Some(5)).shrink(None).which_captures(WhichCaptures::None);",
                "    let config2 = Config::new().utf8(None).reverse(Some(false)).nfa_size_limit(None).shrink(Some(true)).which_captures(WhichCaptures::All);",
                "    let result = config1.overwrite(config2);",
                "}"
              ],
              "oracle": [
                "    let expected_utf8 = config2.utf8.or(config1.utf8);",
                "    let expected_reverse = config2.reverse.or(config1.reverse);",
                "    let expected_nfa_size_limit = config2.nfa_size_limit.or(config1.nfa_size_limit);",
                "    let expected_shrink = config2.shrink.or(config1.shrink);",
                "    let expected_which_captures = config2.which_captures.or(config1.which_captures);",
                "    let expected_look_matcher = config2.look_matcher.or_else(|| config1.look_matcher.clone());",
                "    let expected_unanchored_prefix = config2.unanchored_prefix.or(config1.unanchored_prefix);",
                "    assert_eq!(result.utf8, expected_utf8);",
                "    assert_eq!(result.reverse, expected_reverse);",
                "    assert_eq!(result.nfa_size_limit, expected_nfa_size_limit);",
                "    assert_eq!(result.shrink, expected_shrink);",
                "    assert_eq!(result.which_captures, expected_which_captures);",
                "    assert_eq!(result.look_matcher, expected_look_matcher);",
                "    assert_eq!(result.unanchored_prefix, expected_unanchored_prefix);"
              ],
              "code": [
                "{",
                "    let config1 = Config::new().utf8(Some(true)).reverse(None).nfa_size_limit(Some(5)).shrink(None).which_captures(WhichCaptures::None);",
                "    let config2 = Config::new().utf8(None).reverse(Some(false)).nfa_size_limit(None).shrink(Some(true)).which_captures(WhichCaptures::All);",
                "    let result = config1.overwrite(config2);",
                "    let expected_utf8 = config2.utf8.or(config1.utf8);",
                "    let expected_reverse = config2.reverse.or(config1.reverse);",
                "    let expected_nfa_size_limit = config2.nfa_size_limit.or(config1.nfa_size_limit);",
                "    let expected_shrink = config2.shrink.or(config1.shrink);",
                "    let expected_which_captures = config2.which_captures.or(config1.which_captures);",
                "    let expected_look_matcher = config2.look_matcher.or_else(|| config1.look_matcher.clone());",
                "    let expected_unanchored_prefix = config2.unanchored_prefix.or(config1.unanchored_prefix);",
                "    assert_eq!(result.utf8, expected_utf8);",
                "    assert_eq!(result.reverse, expected_reverse);",
                "    assert_eq!(result.nfa_size_limit, expected_nfa_size_limit);",
                "    assert_eq!(result.shrink, expected_shrink);",
                "    assert_eq!(result.which_captures, expected_which_captures);",
                "    assert_eq!(result.look_matcher, expected_look_matcher);",
                "    assert_eq!(result.unanchored_prefix, expected_unanchored_prefix);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config1 = Config::new().utf8(Some(true)).reverse(Some(false)).nfa_size_limit(None).shrink(Some(true)).which_captures(WhichCaptures::None).unanchored_prefix(Some(true));",
                "    let config2 = Config::new().utf8(Some(false)).reverse(None).nfa_size_limit(Some(0)).shrink(None).which_captures(WhichCaptures::Implicit).unanchored_prefix(None);",
                "    let result = config1.overwrite(config2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.utf8, Some(false));",
                "    assert_eq!(result.reverse, Some(false));",
                "    assert_eq!(result.nfa_size_limit, Some(0));",
                "    assert_eq!(result.shrink, Some(true));",
                "    assert_eq!(result.which_captures, WhichCaptures::None);",
                "    assert_eq!(result.look_matcher, config1.get_look_matcher());",
                "    assert_eq!(result.unanchored_prefix, Some(true));"
              ],
              "code": [
                "{",
                "    let config1 = Config::new().utf8(Some(true)).reverse(Some(false)).nfa_size_limit(None).shrink(Some(true)).which_captures(WhichCaptures::None).unanchored_prefix(Some(true));",
                "    let config2 = Config::new().utf8(Some(false)).reverse(None).nfa_size_limit(Some(0)).shrink(None).which_captures(WhichCaptures::Implicit).unanchored_prefix(None);",
                "    let result = config1.overwrite(config2);",
                "    assert_eq!(result.utf8, Some(false));",
                "    assert_eq!(result.reverse, Some(false));",
                "    assert_eq!(result.nfa_size_limit, Some(0));",
                "    assert_eq!(result.shrink, Some(true));",
                "    assert_eq!(result.which_captures, WhichCaptures::None);",
                "    assert_eq!(result.look_matcher, config1.get_look_matcher());",
                "    assert_eq!(result.unanchored_prefix, Some(true));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config1 = Config::new().nfa_size_limit(Some(0));",
                "    let config2 = Config::new().nfa_size_limit(Some(usize::MAX));",
                "    let result = config1.overwrite(config2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.utf8, None);",
                "    assert_eq!(result.reverse, None);",
                "    assert_eq!(result.nfa_size_limit, Some(usize::MAX));",
                "    assert_eq!(result.shrink, None);",
                "    assert_eq!(result.which_captures, WhichCaptures::All);",
                "    assert_eq!(result.look_matcher, LookMatcher { lineterm: DebugByte });",
                "    #[cfg(test)] assert_eq!(result.unanchored_prefix, None);"
              ],
              "code": [
                "{",
                "    let config1 = Config::new().nfa_size_limit(Some(0));",
                "    let config2 = Config::new().nfa_size_limit(Some(usize::MAX));",
                "    let result = config1.overwrite(config2);",
                "    assert_eq!(result.utf8, None);",
                "    assert_eq!(result.reverse, None);",
                "    assert_eq!(result.nfa_size_limit, Some(usize::MAX));",
                "    assert_eq!(result.shrink, None);",
                "    assert_eq!(result.which_captures, WhichCaptures::All);",
                "    assert_eq!(result.look_matcher, LookMatcher { lineterm: DebugByte });",
                "    #[cfg(test)] assert_eq!(result.unanchored_prefix, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}