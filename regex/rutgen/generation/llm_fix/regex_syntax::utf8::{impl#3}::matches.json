{
  "name": "regex_syntax::utf8::{impl#3}::matches",
  "mod_info": {
    "name": "utf8",
    "loc": "regex-syntax/src/lib.rs:195:1:195:14"
  },
  "visible": true,
  "loc": "regex-syntax/src/utf8.rs:231:5:233:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.start <= b at line 232 is true, with bound self.start == b\n",
        "expected return value/type: b <= self.end\n"
      ],
      "input_infer": "0 <= self.start <= self.end <= 255, test b values including self.start, self.end, self.start - 1, self.end + 1, and values between self.start and self.end\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = Utf8Range::new(10, 20);",
                "    let result = range.matches(10);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    assert!(result);",
                "    assert!(range.matches(20));",
                "    assert!(!range.matches(9));",
                "    assert!(!range.matches(21));",
                "    assert!(range.matches(15));"
              ],
              "code": [
                "{",
                "    let range = Utf8Range::new(10, 20);",
                "    let result = range.matches(10);",
                "    assert_eq!(result, true);",
                "    assert!(result);",
                "    assert!(range.matches(20));",
                "    assert!(!range.matches(9));",
                "    assert!(!range.matches(21));",
                "    assert!(range.matches(15));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = Utf8Range::new(10, 20);",
                "    let result = range.matches(20);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    assert!(range.matches(10));",
                "    assert!(range.matches(15));",
                "    assert!(!range.matches(21));",
                "    assert!(!range.matches(9));"
              ],
              "code": [
                "{",
                "    let range = Utf8Range::new(10, 20);",
                "    let result = range.matches(20);",
                "    assert_eq!(result, true);",
                "    assert!(range.matches(10));",
                "    assert!(range.matches(15));",
                "    assert!(!range.matches(21));",
                "    assert!(!range.matches(9));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = Utf8Range::new(10, 20);",
                "    let result = range.matches(15);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    assert!(range.matches(10));",
                "    assert!(range.matches(20));",
                "    assert!(!range.matches(9));",
                "    assert!(!range.matches(21));"
              ],
              "code": [
                "{",
                "    let range = Utf8Range::new(10, 20);",
                "    let result = range.matches(15);",
                "    assert_eq!(result, true);",
                "    assert!(range.matches(10));",
                "    assert!(range.matches(20));",
                "    assert!(!range.matches(9));",
                "    assert!(!range.matches(21));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = Utf8Range::new(10, 20);",
                "    let result = range.matches(9);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false); // Test case where b < start",
                "    let result = range.matches(10);",
                "    assert_eq!(result, true); // Test case where b == start",
                "    let result = range.matches(15);",
                "    assert_eq!(result, true); // Test case where start < b < end",
                "    let result = range.matches(20);",
                "    assert_eq!(result, true); // Test case where b == end",
                "    let result = range.matches(21);",
                "    assert_eq!(result, false); // Test case where b > end"
              ],
              "code": [
                "{",
                "    let range = Utf8Range::new(10, 20);",
                "    let result = range.matches(9);",
                "    assert_eq!(result, false); // Test case where b < start",
                "    let result = range.matches(10);",
                "    assert_eq!(result, true); // Test case where b == start",
                "    let result = range.matches(15);",
                "    assert_eq!(result, true); // Test case where start < b < end",
                "    let result = range.matches(20);",
                "    assert_eq!(result, true); // Test case where b == end",
                "    let result = range.matches(21);",
                "    assert_eq!(result, false); // Test case where b > end",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = Utf8Range::new(10, 20);",
                "    let result = range.matches(21);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let range = Utf8Range::new(10, 20);",
                "    let result = range.matches(21);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = Utf8Range::new(10, 10);",
                "    let result = range.matches(10);",
                "}"
              ],
              "oracle": [
                "    assert!(result);"
              ],
              "code": [
                "{",
                "    let range = Utf8Range::new(10, 10);",
                "    let result = range.matches(10);",
                "    assert!(result);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = Utf8Range::new(10, 20);",
                "    let result = range.matches(9);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);",
                "    let result = range.matches(10);",
                "    assert_eq!(result, true);",
                "    let result = range.matches(15);",
                "    assert_eq!(result, true);",
                "    let result = range.matches(20);",
                "    assert_eq!(result, true);",
                "    let result = range.matches(21);",
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let range = Utf8Range::new(10, 20);",
                "    let result = range.matches(9);",
                "    assert_eq!(result, false);",
                "    let result = range.matches(10);",
                "    assert_eq!(result, true);",
                "    let result = range.matches(15);",
                "    assert_eq!(result, true);",
                "    let result = range.matches(20);",
                "    assert_eq!(result, true);",
                "    let result = range.matches(21);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = Utf8Range::new(10, 20);",
                "    let result = range.matches(21);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let range = Utf8Range::new(10, 20);",
                "    let result = range.matches(21);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.start <= b at line 232 is false\n",
        "expected return value/type: self.start <= b && b <= self.end\n"
      ],
      "input_infer": "self.start = 0 to 255, self.end = 0 to 255, b < self.start\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = Utf8Range::new(100, 200);",
                "    let result = range.matches(50);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let range = Utf8Range::new(100, 200);",
                "    let result = range.matches(50);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = Utf8Range::new(1, 255);",
                "    let result = range.matches(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let range = Utf8Range::new(1, 255);",
                "    let result = range.matches(0);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = Utf8Range::new(10, 20);",
                "    let result = range.matches(9);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let range = Utf8Range::new(10, 20);",
                "    let result = range.matches(9);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = Utf8Range::new(255, 255);",
                "    let result = range.matches(254);",
                "}"
              ],
              "oracle": [
                "    assert!(!result);"
              ],
              "code": [
                "{",
                "    let range = Utf8Range::new(255, 255);",
                "    let result = range.matches(254);",
                "    assert!(!result);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}