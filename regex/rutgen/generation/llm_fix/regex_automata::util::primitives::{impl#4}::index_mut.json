{
  "name": "regex_automata::util::primitives::{impl#4}::index_mut",
  "mod_info": {
    "name": "util::primitives",
    "loc": "regex-automata/src/util/mod.rs:42:1:42:20"
  },
  "visible": true,
  "loc": "regex-automata/src/util/primitives.rs:283:5:285:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: &mut self[index.as_usize()]\n"
      ],
      "input_infer": "index must be between 0 and SmallIndex::LIMIT - 1 (inclusive)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut data = [0u8; 10];",
                "    let index = SmallIndex::new_unchecked(0);",
                "    let result = data.index_mut(index);",
                "}"
              ],
              "oracle": [
                "    let mut data = [0u8; 10];",
                "    let index = SmallIndex::new_unchecked(0);",
                "    let result = data.index_mut(index);",
                "    assert_eq!(result as *mut [u8], &mut data[0] as *mut u8);",
                "    assert_eq!(result.len(), 10);",
                "    assert!(result.as_ptr() == data.as_ptr());",
                "    let index = SmallIndex::new_unchecked(5);",
                "    let result = data.index_mut(index);",
                "    assert_eq!(result as *mut [u8], &mut data[5] as *mut u8);",
                "    assert_eq!(result.len(), 5);",
                "    let index = SmallIndex::new_unchecked(9);",
                "    let result = data.index_mut(index);",
                "    assert_eq!(result as *mut [u8], &mut data[9] as *mut u8);",
                "    assert_eq!(result.len(), 1);"
              ],
              "code": [
                "{",
                "    let mut data = [0u8; 10];",
                "    let index = SmallIndex::new_unchecked(0);",
                "    let result = data.index_mut(index);",
                "    let mut data = [0u8; 10];",
                "    let index = SmallIndex::new_unchecked(0);",
                "    let result = data.index_mut(index);",
                "    assert_eq!(result as *mut [u8], &mut data[0] as *mut u8);",
                "    assert_eq!(result.len(), 10);",
                "    assert!(result.as_ptr() == data.as_ptr());",
                "    let index = SmallIndex::new_unchecked(5);",
                "    let result = data.index_mut(index);",
                "    assert_eq!(result as *mut [u8], &mut data[5] as *mut u8);",
                "    assert_eq!(result.len(), 5);",
                "    let index = SmallIndex::new_unchecked(9);",
                "    let result = data.index_mut(index);",
                "    assert_eq!(result as *mut [u8], &mut data[9] as *mut u8);",
                "    assert_eq!(result.len(), 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut data = [0u8; 10];",
                "    let index = SmallIndex::new_unchecked(SmallIndex::LIMIT - 1);",
                "    let result = data.index_mut(index);",
                "}"
              ],
              "oracle": [
                "    let mut data = [0u8; 10];",
                "    let index = SmallIndex::new_unchecked(SmallIndex::LIMIT - 1);",
                "    let result = data.index_mut(index);",
                "    assert_eq!(result, &mut data[SmallIndex::LIMIT - 1..]);",
                "    assert!(result.as_mut_ptr() == data.as_mut_ptr().add(SmallIndex::LIMIT - 1));",
                "    assert!(data[SmallIndex::LIMIT - 1] == 0);"
              ],
              "code": [
                "{",
                "    let mut data = [0u8; 10];",
                "    let index = SmallIndex::new_unchecked(SmallIndex::LIMIT - 1);",
                "    let result = data.index_mut(index);",
                "    let mut data = [0u8; 10];",
                "    let index = SmallIndex::new_unchecked(SmallIndex::LIMIT - 1);",
                "    let result = data.index_mut(index);",
                "    assert_eq!(result, &mut data[SmallIndex::LIMIT - 1..]);",
                "    assert!(result.as_mut_ptr() == data.as_mut_ptr().add(SmallIndex::LIMIT - 1));",
                "    assert!(data[SmallIndex::LIMIT - 1] == 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut data = [0u8; 10];",
                "    let index = SmallIndex::new_unchecked(5);",
                "    let result = data.index_mut(index);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result as *mut _, &mut data[5] as *mut _);"
              ],
              "code": [
                "{",
                "    let mut data = [0u8; 10];",
                "    let index = SmallIndex::new_unchecked(5);",
                "    let result = data.index_mut(index);",
                "    assert_eq!(result as *mut _, &mut data[5] as *mut _);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut data = [0u8; 10];",
                "    let index = SmallIndex::new_unchecked(usize::MAX);",
                "    let _result = data.index_mut(index);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(data[index.as_usize()], 0);",
                "    assert!(std::panic::catch_unwind(|| data.index_mut(index)).is_err());",
                "    assert!(data.is_empty() == false);",
                "    assert_eq!(data.len(), 10);",
                "    assert!(SmallIndex::MAX.as_usize() > data.len());",
                "    assert!(data.get(index.as_usize()).is_none());",
                "    assert!(std::panic::catch_unwind(|| SmallIndex::new(usize::MAX)).is_err());"
              ],
              "code": [
                "{",
                "    let mut data = [0u8; 10];",
                "    let index = SmallIndex::new_unchecked(usize::MAX);",
                "    let _result = data.index_mut(index);",
                "    assert_eq!(data[index.as_usize()], 0);",
                "    assert!(std::panic::catch_unwind(|| data.index_mut(index)).is_err());",
                "    assert!(data.is_empty() == false);",
                "    assert_eq!(data.len(), 10);",
                "    assert!(SmallIndex::MAX.as_usize() > data.len());",
                "    assert!(data.get(index.as_usize()).is_none());",
                "    assert!(std::panic::catch_unwind(|| SmallIndex::new(usize::MAX)).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut data = [0u8; 10];",
                "    let index = SmallIndex::new_unchecked(SmallIndex::LIMIT);",
                "    let _result = data.index_mut(index);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| {",
                "    let mut data = [0u8; 10];",
                "    let index = SmallIndex::new_unchecked(SmallIndex::LIMIT);",
                "    let _result = data.index_mut(index);",
                "    }).is_err());"
              ],
              "code": [
                "{",
                "    let mut data = [0u8; 10];",
                "    let index = SmallIndex::new_unchecked(SmallIndex::LIMIT);",
                "    let _result = data.index_mut(index);",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let mut data = [0u8; 10];",
                "    let index = SmallIndex::new_unchecked(SmallIndex::LIMIT);",
                "    let _result = data.index_mut(index);",
                "    }).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}