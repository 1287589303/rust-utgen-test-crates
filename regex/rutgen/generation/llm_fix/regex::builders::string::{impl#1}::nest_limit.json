{
  "name": "regex::builders::string::{impl#1}::nest_limit",
  "mod_info": {
    "name": "builders::string",
    "loc": "src/builders.rs:200:1:1355:2"
  },
  "visible": true,
  "loc": "src/builders.rs:1350:9:1353:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "limit: 0, 1, 10, 100, 1000, maximum valid u32 value\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let patterns = vec![r\"a\"];",
                "    let builder = RegexSetBuilder::new(patterns);",
                "    builder.nest_limit(0).build();",
                "}"
              ],
              "oracle": [
                "    builder.nest_limit(0).build().is_ok();",
                "    let patterns = vec![r\"ab\"];",
                "    builder.nest_limit(0).build().is_err();",
                "    let patterns = vec![r\"a\"];",
                "    builder.nest_limit(1).build().is_ok();",
                "    let patterns = vec![r\"(a)\"];",
                "    builder.nest_limit(1).build().is_ok();",
                "    let patterns = vec![r\"((a)(b))\"];",
                "    builder.nest_limit(2).build().is_ok();",
                "    let patterns = vec![r\"((a)(b)(c))\"];",
                "    builder.nest_limit(2).build().is_err();",
                "    let patterns = vec![r\"ab\"];",
                "    builder.nest_limit(1).build().is_ok();",
                "    let patterns = vec![r\"abc\"];",
                "    builder.nest_limit(1).build().is_err();"
              ],
              "code": [
                "{",
                "    let patterns = vec![r\"a\"];",
                "    let builder = RegexSetBuilder::new(patterns);",
                "    builder.nest_limit(0).build();",
                "    builder.nest_limit(0).build().is_ok();",
                "    let patterns = vec![r\"ab\"];",
                "    builder.nest_limit(0).build().is_err();",
                "    let patterns = vec![r\"a\"];",
                "    builder.nest_limit(1).build().is_ok();",
                "    let patterns = vec![r\"(a)\"];",
                "    builder.nest_limit(1).build().is_ok();",
                "    let patterns = vec![r\"((a)(b))\"];",
                "    builder.nest_limit(2).build().is_ok();",
                "    let patterns = vec![r\"((a)(b)(c))\"];",
                "    builder.nest_limit(2).build().is_err();",
                "    let patterns = vec![r\"ab\"];",
                "    builder.nest_limit(1).build().is_ok();",
                "    let patterns = vec![r\"abc\"];",
                "    builder.nest_limit(1).build().is_err();",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let patterns = vec![r\"ab\"];",
                "    let builder = RegexSetBuilder::new(patterns);",
                "    builder.nest_limit(1).build();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.nest_limit(0).build().is_ok(), true);",
                "    assert_eq!(builder.nest_limit(1).build().is_ok(), true);",
                "    assert_eq!(builder.nest_limit(2).build().is_ok(), true);",
                "    assert_eq!(builder.nest_limit(3).build().is_ok(), true);",
                "    assert_eq!(builder.nest_limit(0).build().is_err(), true);",
                "    assert_eq!(builder.nest_limit(1).build().is_err(), false);",
                "    assert_eq!(builder.nest_limit(2).build().is_err(), false);",
                "    assert_eq!(builder.nest_limit(3).build().is_err(), false);",
                "    builder.nest_limit(0);",
                "    builder.nest_limit(1);",
                "    builder.nest_limit(2);",
                "    builder.nest_limit(3);",
                "    builder.nest_limit(4);",
                "    assert!(builder.nest_limit(5).build().is_ok());"
              ],
              "code": [
                "{",
                "    let patterns = vec![r\"ab\"];",
                "    let builder = RegexSetBuilder::new(patterns);",
                "    builder.nest_limit(1).build();",
                "    assert_eq!(builder.nest_limit(0).build().is_ok(), true);",
                "    assert_eq!(builder.nest_limit(1).build().is_ok(), true);",
                "    assert_eq!(builder.nest_limit(2).build().is_ok(), true);",
                "    assert_eq!(builder.nest_limit(3).build().is_ok(), true);",
                "    assert_eq!(builder.nest_limit(0).build().is_err(), true);",
                "    assert_eq!(builder.nest_limit(1).build().is_err(), false);",
                "    assert_eq!(builder.nest_limit(2).build().is_err(), false);",
                "    assert_eq!(builder.nest_limit(3).build().is_err(), false);",
                "    builder.nest_limit(0);",
                "    builder.nest_limit(1);",
                "    builder.nest_limit(2);",
                "    builder.nest_limit(3);",
                "    builder.nest_limit(4);",
                "    assert!(builder.nest_limit(5).build().is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let patterns = vec![r\"abcde\"];",
                "    let builder = RegexSetBuilder::new(patterns);",
                "    builder.nest_limit(10).build();",
                "}"
              ],
              "oracle": [
                "    builder.nest_limit(0).build().is_ok();",
                "    builder.nest_limit(1).build().is_ok();",
                "    builder.nest_limit(2).build().is_ok();",
                "    builder.nest_limit(5).build().is_ok();",
                "    builder.nest_limit(10).build().is_ok();",
                "    builder.nest_limit(0).build().is_err();",
                "    builder.nest_limit(1).nest_limit(0).build().is_err();",
                "    builder.nest_limit(2).nest_limit(3).build().is_ok();"
              ],
              "code": [
                "{",
                "    let patterns = vec![r\"abcde\"];",
                "    let builder = RegexSetBuilder::new(patterns);",
                "    builder.nest_limit(10).build();",
                "    builder.nest_limit(0).build().is_ok();",
                "    builder.nest_limit(1).build().is_ok();",
                "    builder.nest_limit(2).build().is_ok();",
                "    builder.nest_limit(5).build().is_ok();",
                "    builder.nest_limit(10).build().is_ok();",
                "    builder.nest_limit(0).build().is_err();",
                "    builder.nest_limit(1).nest_limit(0).build().is_err();",
                "    builder.nest_limit(2).nest_limit(3).build().is_ok();",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let patterns = vec![r\"abcdefghij\"];",
                "    let builder = RegexSetBuilder::new(patterns);",
                "    builder.nest_limit(100).build();",
                "}"
              ],
              "oracle": [
                "    builder.nest_limit(0);  // Test with the lowest limit, expecting an error",
                "    builder.nest_limit(1);  // Test with a limit that allows simple patterns",
                "    builder.nest_limit(10); // Test with a moderate limit, expecting success",
                "    builder.nest_limit(100); // Test with a high limit, expecting success",
                "    builder.nest_limit(200); // Test with an excessively high limit, expecting success",
                "    let empty_builder = RegexSetBuilder::new(vec![]).nest_limit(0); // Test with empty patterns and limit of 0",
                "    let single_pattern_builder = RegexSetBuilder::new(vec![r\"a\"]).nest_limit(0); // Test with a single character pattern and limit of 0, expecting ok",
                "    let two_char_pattern_builder = RegexSetBuilder::new(vec![r\"ab\"]).nest_limit(0); // Test with two-character pattern and limit of 0, expecting err",
                "    let nested_pattern_builder = RegexSetBuilder::new(vec![r\"(ab(c))\"]).nest_limit(2); // Test with a nested pattern and limit of 2, expecting ok",
                "    let deep_nesting_builder = RegexSetBuilder::new(vec![r\"((a(b(c))))\"]); // Test deep nesting with no limit set"
              ],
              "code": [
                "{",
                "    let patterns = vec![r\"abcdefghij\"];",
                "    let builder = RegexSetBuilder::new(patterns);",
                "    builder.nest_limit(100).build();",
                "    builder.nest_limit(0);  // Test with the lowest limit, expecting an error",
                "    builder.nest_limit(1);  // Test with a limit that allows simple patterns",
                "    builder.nest_limit(10); // Test with a moderate limit, expecting success",
                "    builder.nest_limit(100); // Test with a high limit, expecting success",
                "    builder.nest_limit(200); // Test with an excessively high limit, expecting success",
                "    let empty_builder = RegexSetBuilder::new(vec![]).nest_limit(0); // Test with empty patterns and limit of 0",
                "    let single_pattern_builder = RegexSetBuilder::new(vec![r\"a\"]).nest_limit(0); // Test with a single character pattern and limit of 0, expecting ok",
                "    let two_char_pattern_builder = RegexSetBuilder::new(vec![r\"ab\"]).nest_limit(0); // Test with two-character pattern and limit of 0, expecting err",
                "    let nested_pattern_builder = RegexSetBuilder::new(vec![r\"(ab(c))\"]).nest_limit(2); // Test with a nested pattern and limit of 2, expecting ok",
                "    let deep_nesting_builder = RegexSetBuilder::new(vec![r\"((a(b(c))))\"]); // Test deep nesting with no limit set",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let patterns = vec![r\"a\".repeat(1000)];",
                "    let builder = RegexSetBuilder::new(patterns);",
                "    builder.nest_limit(1000).build();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.nest_limit(1000), &mut builder);",
                "    assert_eq!(builder.nest_limit(0), &mut builder);",
                "    assert!(builder.nest_limit(0).build().is_err());",
                "    assert!(builder.nest_limit(1).build().is_ok());",
                "    assert!(builder.nest_limit(10).build().is_ok());",
                "    assert!(builder.nest_limit(100).build().is_ok());",
                "    assert!(builder.nest_limit(1000).build().is_ok());"
              ],
              "code": [
                "{",
                "    let patterns = vec![r\"a\".repeat(1000)];",
                "    let builder = RegexSetBuilder::new(patterns);",
                "    builder.nest_limit(1000).build();",
                "    assert_eq!(builder.nest_limit(1000), &mut builder);",
                "    assert_eq!(builder.nest_limit(0), &mut builder);",
                "    assert!(builder.nest_limit(0).build().is_err());",
                "    assert!(builder.nest_limit(1).build().is_ok());",
                "    assert!(builder.nest_limit(10).build().is_ok());",
                "    assert!(builder.nest_limit(100).build().is_ok());",
                "    assert!(builder.nest_limit(1000).build().is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let patterns = vec![r\"a\"];",
                "    let builder = RegexSetBuilder::new(patterns);",
                "    builder.nest_limit(u32::MAX).build();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.nest_limit(u32::MAX), &mut builder);",
                "    assert!(builder.build().is_ok());"
              ],
              "code": [
                "{",
                "    let patterns = vec![r\"a\"];",
                "    let builder = RegexSetBuilder::new(patterns);",
                "    builder.nest_limit(u32::MAX).build();",
                "    assert_eq!(builder.nest_limit(u32::MAX), &mut builder);",
                "    assert!(builder.build().is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}