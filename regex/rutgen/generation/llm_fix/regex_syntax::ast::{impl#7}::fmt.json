{
  "name": "regex_syntax::ast::{impl#7}::fmt",
  "mod_info": {
    "name": "ast",
    "loc": "regex-syntax/src/lib.rs:186:1:186:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/ast/mod.rs:361:5:367:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "offset: 0 to usize::MAX, line: 1 to usize::MAX, column: 1 to usize::MAX\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let position = Position { offset: 0, line: 1, column: 1 };",
                "    let _ = core::fmt::write(&mut core::fmt::Formatter::new(\"output\"), |f| position.fmt(f));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(position.offset, 0);",
                "    assert_eq!(position.line, 1);",
                "    assert_eq!(position.column, 1);",
                "    assert_eq!(format!(\"{:?}\", position), \"Position(o: 0, l: 1, c: 1)\");",
                "    assert!(core::fmt::write(&mut core::fmt::Formatter::new(\"output\"), |f| position.fmt(f)).is_ok());",
                "    assert!(core::fmt::write(&mut core::fmt::Formatter::new(\"output\"), |f| position.fmt(f)).to_string() == \"Position(o: 0, l: 1, c: 1)\");"
              ],
              "code": [
                "{",
                "    let position = Position { offset: 0, line: 1, column: 1 };",
                "    let _ = core::fmt::write(&mut core::fmt::Formatter::new(\"output\"), |f| position.fmt(f));",
                "    assert_eq!(position.offset, 0);",
                "    assert_eq!(position.line, 1);",
                "    assert_eq!(position.column, 1);",
                "    assert_eq!(format!(\"{:?}\", position), \"Position(o: 0, l: 1, c: 1)\");",
                "    assert!(core::fmt::write(&mut core::fmt::Formatter::new(\"output\"), |f| position.fmt(f)).is_ok());",
                "    assert!(core::fmt::write(&mut core::fmt::Formatter::new(\"output\"), |f| position.fmt(f)).to_string() == \"Position(o: 0, l: 1, c: 1)\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let position = Position { offset: usize::MAX, line: usize::MAX, column: usize::MAX };",
                "    let _ = core::fmt::write(&mut core::fmt::Formatter::new(\"output\"), |f| position.fmt(f));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(format!(\"{:?}\", position), \"Position(o: 18446744073709551615, l: 18446744073709551615, c: 18446744073709551615)\");",
                "    assert!(matches!(core::fmt::write(&mut core::fmt::Formatter::new(\"output\"), |f| position.fmt(f)), Ok(_)));",
                "    assert!(position.offset == usize::MAX);",
                "    assert!(position.line == usize::MAX);",
                "    assert!(position.column == usize::MAX);"
              ],
              "code": [
                "{",
                "    let position = Position { offset: usize::MAX, line: usize::MAX, column: usize::MAX };",
                "    let _ = core::fmt::write(&mut core::fmt::Formatter::new(\"output\"), |f| position.fmt(f));",
                "    assert_eq!(format!(\"{:?}\", position), \"Position(o: 18446744073709551615, l: 18446744073709551615, c: 18446744073709551615)\");",
                "    assert!(matches!(core::fmt::write(&mut core::fmt::Formatter::new(\"output\"), |f| position.fmt(f)), Ok(_)));",
                "    assert!(position.offset == usize::MAX);",
                "    assert!(position.line == usize::MAX);",
                "    assert!(position.column == usize::MAX);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let position = Position { offset: 12345, line: 67890, column: 54321 };",
                "    let _ = core::fmt::write(&mut core::fmt::Formatter::new(\"output\"), |f| position.fmt(f));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(position.offset, 12345);",
                "    assert_eq!(position.line, 67890);",
                "    assert_eq!(position.column, 54321);",
                "    assert!(core::fmt::Formatter::new(\"output\").to_string() == \"Position(o: 12345, l: 67890, c: 54321)\");",
                "    assert!(core::fmt::write(&mut core::fmt::Formatter::new(\"output\"), |f| position.fmt(f)).is_ok());"
              ],
              "code": [
                "{",
                "    let position = Position { offset: 12345, line: 67890, column: 54321 };",
                "    let _ = core::fmt::write(&mut core::fmt::Formatter::new(\"output\"), |f| position.fmt(f));",
                "    assert_eq!(position.offset, 12345);",
                "    assert_eq!(position.line, 67890);",
                "    assert_eq!(position.column, 54321);",
                "    assert!(core::fmt::Formatter::new(\"output\").to_string() == \"Position(o: 12345, l: 67890, c: 54321)\");",
                "    assert!(core::fmt::write(&mut core::fmt::Formatter::new(\"output\"), |f| position.fmt(f)).is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let position = Position { offset: 100, line: usize::MAX, column: 1 };",
                "    let _ = core::fmt::write(&mut core::fmt::Formatter::new(\"output\"), |f| position.fmt(f));",
                "}"
              ],
              "oracle": [
                "    let position = Position { offset: 100, line: usize::MAX, column: 1 };",
                "    assert_eq!(format!(\"{:?}\", position), \"Position(o: 100, l: 18446744073709551615, c: 1)\");",
                "    let position = Position { offset: 0, line: 1, column: 1 };",
                "    assert_eq!(format!(\"{:?}\", position), \"Position(o: 0, l: 1, c: 1)\");",
                "    let position = Position { offset: 50, line: 10, column: 5 };",
                "    assert_eq!(format!(\"{:?}\", position), \"Position(o: 50, l: 10, c: 5)\");",
                "    let position = Position { offset: usize::MAX, line: 2, column: usize::MAX };",
                "    assert_eq!(format!(\"{:?}\", position), \"Position(o: 18446744073709551615, l: 2, c: 18446744073709551615)\");",
                "    let position = Position { offset: 1, line: 3, column: 0 };",
                "    assert_eq!(format!(\"{:?}\", position), \"Position(o: 1, l: 3, c: 0)\");"
              ],
              "code": [
                "{",
                "    let position = Position { offset: 100, line: usize::MAX, column: 1 };",
                "    let _ = core::fmt::write(&mut core::fmt::Formatter::new(\"output\"), |f| position.fmt(f));",
                "    let position = Position { offset: 100, line: usize::MAX, column: 1 };",
                "    assert_eq!(format!(\"{:?}\", position), \"Position(o: 100, l: 18446744073709551615, c: 1)\");",
                "    let position = Position { offset: 0, line: 1, column: 1 };",
                "    assert_eq!(format!(\"{:?}\", position), \"Position(o: 0, l: 1, c: 1)\");",
                "    let position = Position { offset: 50, line: 10, column: 5 };",
                "    assert_eq!(format!(\"{:?}\", position), \"Position(o: 50, l: 10, c: 5)\");",
                "    let position = Position { offset: usize::MAX, line: 2, column: usize::MAX };",
                "    assert_eq!(format!(\"{:?}\", position), \"Position(o: 18446744073709551615, l: 2, c: 18446744073709551615)\");",
                "    let position = Position { offset: 1, line: 3, column: 0 };",
                "    assert_eq!(format!(\"{:?}\", position), \"Position(o: 1, l: 3, c: 0)\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let position = Position { offset: usize::MAX, line: 1, column: usize::MAX };",
                "    let _ = core::fmt::write(&mut core::fmt::Formatter::new(\"output\"), |f| position.fmt(f));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(position.offset, usize::MAX);",
                "    assert_eq!(position.line, 1);",
                "    assert_eq!(position.column, usize::MAX);",
                "    assert!(core::fmt::write(&mut core::fmt::Formatter::new(\"output\"), |f| position.fmt(f)).is_ok());",
                "    assert_eq!(format!(\"Position(o: {:?}, l: {:?}, c: {:?})\", position.offset, position.line, position.column), \"Position(o: 18446744073709551615, l: 1, c: 18446744073709551615)\");"
              ],
              "code": [
                "{",
                "    let position = Position { offset: usize::MAX, line: 1, column: usize::MAX };",
                "    let _ = core::fmt::write(&mut core::fmt::Formatter::new(\"output\"), |f| position.fmt(f));",
                "    assert_eq!(position.offset, usize::MAX);",
                "    assert_eq!(position.line, 1);",
                "    assert_eq!(position.column, usize::MAX);",
                "    assert!(core::fmt::write(&mut core::fmt::Formatter::new(\"output\"), |f| position.fmt(f)).is_ok());",
                "    assert_eq!(format!(\"Position(o: {:?}, l: {:?}, c: {:?})\", position.offset, position.line, position.column), \"Position(o: 18446744073709551615, l: 1, c: 18446744073709551615)\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}