{
  "name": "regex_automata::dfa::onepass::{impl#1}::new",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/onepass.rs:343:5:349:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Builder {\n            config: Config::default(),\n            #[cfg(feature = \"syntax\")]\n            thompson: thompson::Compiler::new(),\n        }\n"
      ],
      "input_infer": "Builder configuration with default values and ensure feature \"syntax\" is enabled if testing thompson.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let builder = Builder::new();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.config, Config::default());",
                "    #[cfg(feature = \"syntax\")]",
                "    assert!(builder.thompson.is_some());"
              ],
              "code": [
                "{",
                "    let builder = Builder::new();",
                "    assert_eq!(builder.config, Config::default());",
                "    #[cfg(feature = \"syntax\")]",
                "    assert!(builder.thompson.is_some());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[cfg(feature = \"syntax\")]"
              ],
              "prefix": [
                "{",
                "    let builder = Builder::new();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.config, Config::default());",
                "    #[cfg(feature = \"syntax\")]",
                "    assert!(builder.thompson.is_some());"
              ],
              "code": [
                "{",
                "    let builder = Builder::new();",
                "    assert_eq!(builder.config, Config::default());",
                "    #[cfg(feature = \"syntax\")]",
                "    assert!(builder.thompson.is_some());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}