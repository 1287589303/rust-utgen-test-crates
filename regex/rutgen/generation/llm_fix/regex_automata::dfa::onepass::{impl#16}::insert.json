{
  "name": "regex_automata::dfa::onepass::{impl#16}::insert",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/onepass.rs:2890:5:2893:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: slot < Slots::LIMIT at line 2891 is true\n",
        "expected return value/type: Slots(self.0 | (1 << slot.as_u32()))\n"
      ],
      "input_infer": "slot in the range 0 to 31 (inclusive)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slots = Slots(0);",
                "    let result = slots.insert(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Slots(1));",
                "    assert_ne!(result, Slots(0));",
                "    assert_eq!(result.0, 1);",
                "    assert!(result.is_empty() == false);",
                "    assert!(slots.insert(1).0 == 3);",
                "    assert!(slots.insert(2).0 == 7);"
              ],
              "code": [
                "{",
                "    let slots = Slots(0);",
                "    let result = slots.insert(0);",
                "    assert_eq!(result, Slots(1));",
                "    assert_ne!(result, Slots(0));",
                "    assert_eq!(result.0, 1);",
                "    assert!(result.is_empty() == false);",
                "    assert!(slots.insert(1).0 == 3);",
                "    assert!(slots.insert(2).0 == 7);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slots = Slots(0);",
                "    let result = slots.insert(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Slots(2));"
              ],
              "code": [
                "{",
                "    let slots = Slots(0);",
                "    let result = slots.insert(1);",
                "    assert_eq!(result, Slots(2));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slots = Slots(0);",
                "    let result = slots.insert(2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Slots(4));",
                "    assert!(result.is_empty() == false);",
                "    assert!(result.iter().count() == 1);",
                "    assert!(result.iter().next() == Some(2));",
                "    assert!(result.0 & (1 << 2) != 0);"
              ],
              "code": [
                "{",
                "    let slots = Slots(0);",
                "    let result = slots.insert(2);",
                "    assert_eq!(result, Slots(4));",
                "    assert!(result.is_empty() == false);",
                "    assert!(result.iter().count() == 1);",
                "    assert!(result.iter().next() == Some(2));",
                "    assert!(result.0 & (1 << 2) != 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slots = Slots(0);",
                "    let result = slots.insert(31);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Slots(2147483648));"
              ],
              "code": [
                "{",
                "    let slots = Slots(0);",
                "    let result = slots.insert(31);",
                "    assert_eq!(result, Slots(2147483648));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slots = Slots(0);",
                "    let result = slots.insert(15);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Slots(32768));"
              ],
              "code": [
                "{",
                "    let slots = Slots(0);",
                "    let result = slots.insert(15);",
                "    assert_eq!(result, Slots(32768));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: slot < Slots::LIMIT at line 2891 is false, with bound slot == Slots::LIMIT\n"
      ],
      "input_infer": "slot values: 0 to 32, including 32 as an edge case; specifically test for slot == 32 to validate the assertion failure\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let slots = Slots(0);",
                "    let _ = slots.insert(Slots::LIMIT);",
                "}"
              ],
              "oracle": [
                "    #[should_panic]",
                "    let slots = Slots(0);",
                "    let _ = slots.insert(Slots::LIMIT);"
              ],
              "code": [
                "{",
                "    let slots = Slots(0);",
                "    let _ = slots.insert(Slots::LIMIT);",
                "    #[should_panic]",
                "    let slots = Slots(0);",
                "    let _ = slots.insert(Slots::LIMIT);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slots = Slots(0);",
                "    let _ = slots.insert(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(slots.insert(Slots::LIMIT), Slots(0));",
                "    assert_panics!(() => { slots.insert(Slots::LIMIT); });"
              ],
              "code": [
                "{",
                "    let slots = Slots(0);",
                "    let _ = slots.insert(0);",
                "    assert_eq!(slots.insert(Slots::LIMIT), Slots(0));",
                "    assert_panics!(() => { slots.insert(Slots::LIMIT); });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slots = Slots(0);",
                "    let _ = slots.insert(1);",
                "}"
              ],
              "oracle": [
                "    assert_panics!(slots.insert(Slots::LIMIT));",
                "    assert_eq!(slots.insert(Slots::LIMIT - 1).0, 2);",
                "    assert_eq!(slots.insert(0).0, 1);",
                "    assert_eq!(slots.insert(31).0, 2147483648);",
                "    assert_eq!(slots.insert(32).0, slots.0);"
              ],
              "code": [
                "{",
                "    let slots = Slots(0);",
                "    let _ = slots.insert(1);",
                "    assert_panics!(slots.insert(Slots::LIMIT));",
                "    assert_eq!(slots.insert(Slots::LIMIT - 1).0, 2);",
                "    assert_eq!(slots.insert(0).0, 1);",
                "    assert_eq!(slots.insert(31).0, 2147483648);",
                "    assert_eq!(slots.insert(32).0, slots.0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slots = Slots(0);",
                "    let _ = slots.insert(2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(slots.0, 0);",
                "    assert_eq!(slots.insert(Slots::LIMIT), slots);",
                "    panic!();"
              ],
              "code": [
                "{",
                "    let slots = Slots(0);",
                "    let _ = slots.insert(2);",
                "    assert_eq!(slots.0, 0);",
                "    assert_eq!(slots.insert(Slots::LIMIT), slots);",
                "    panic!();",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slots = Slots(0);",
                "    let _ = slots.insert(31);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| { let slots = Slots(0); slots.insert(32); }).is_err());",
                "    assert_eq!(slots.insert(31), Slots(2147483648));",
                "    assert_eq!(slots.insert(30).0 & (1 << 30), 1073741824);",
                "    assert_eq!(slots.insert(0).0 & (1 << 0), 1);"
              ],
              "code": [
                "{",
                "    let slots = Slots(0);",
                "    let _ = slots.insert(31);",
                "    assert!(std::panic::catch_unwind(|| { let slots = Slots(0); slots.insert(32); }).is_err());",
                "    assert_eq!(slots.insert(31), Slots(2147483648));",
                "    assert_eq!(slots.insert(30).0 & (1 << 30), 1073741824);",
                "    assert_eq!(slots.insert(0).0 & (1 << 0), 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}