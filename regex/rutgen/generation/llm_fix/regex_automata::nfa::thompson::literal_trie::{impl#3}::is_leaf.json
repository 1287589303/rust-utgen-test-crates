{
  "name": "regex_automata::nfa::thompson::literal_trie::{impl#3}::is_leaf",
  "mod_info": {
    "name": "nfa::thompson::literal_trie",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:63:1:63:18"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/literal_trie.rs:389:5:391:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "State with empty transitions: State { transitions: Vec::new() }; State with non-empty transitions: State { transitions: Vec::from([Transition { start: 0, end: 255, next: StateID::from(1) }]) }\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let state = State::default();",
                "    let result = state.is_leaf();",
                "}"
              ],
              "oracle": [
                "    assert!(result);"
              ],
              "code": [
                "{",
                "    let state = State::default();",
                "    let result = state.is_leaf();",
                "    assert!(result);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition { start: 0, end: 255, next: StateID::from(1) };",
                "    let state = State {",
                "        transitions: vec![transition],",
                "        chunks: Vec::new(),",
                "    };",
                "    let result = state.is_leaf();",
                "}"
              ],
              "oracle": [
                "    assert!(!result);"
              ],
              "code": [
                "{",
                "    let transition = Transition { start: 0, end: 255, next: StateID::from(1) };",
                "    let state = State {",
                "        transitions: vec![transition],",
                "        chunks: Vec::new(),",
                "    };",
                "    let result = state.is_leaf();",
                "    assert!(!result);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}