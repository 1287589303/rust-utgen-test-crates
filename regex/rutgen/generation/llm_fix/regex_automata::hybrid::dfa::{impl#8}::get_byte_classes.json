{
  "name": "regex_automata::hybrid::dfa::{impl#8}::get_byte_classes",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/dfa.rs:3733:5:3735:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self.byte_classes is None, self.byte_classes is Some(true), self.byte_classes is Some(false)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::default();",
                "    let result = config.get_byte_classes();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let config = Config::default().byte_classes(false);",
                "    let result = config.get_byte_classes();",
                "    assert_eq!(result, false);",
                "    let config = Config::default().byte_classes(true);",
                "    let result = config.get_byte_classes();",
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let config = Config::default();",
                "    let result = config.get_byte_classes();",
                "    assert_eq!(result, true);",
                "    let config = Config::default().byte_classes(false);",
                "    let result = config.get_byte_classes();",
                "    assert_eq!(result, false);",
                "    let config = Config::default().byte_classes(true);",
                "    let result = config.get_byte_classes();",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::default().byte_classes(true);",
                "    let result = config.get_byte_classes();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let config = Config::default().byte_classes(false);",
                "    let result = config.get_byte_classes();",
                "    assert_eq!(result, false);",
                "    let config = Config::default();",
                "    let result = config.get_byte_classes();",
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let config = Config::default().byte_classes(true);",
                "    let result = config.get_byte_classes();",
                "    assert_eq!(result, true);",
                "    let config = Config::default().byte_classes(false);",
                "    let result = config.get_byte_classes();",
                "    assert_eq!(result, false);",
                "    let config = Config::default();",
                "    let result = config.get_byte_classes();",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::default().byte_classes(false);",
                "    let result = config.get_byte_classes();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);",
                "    let config = Config::default().byte_classes(true);",
                "    let result = config.get_byte_classes();",
                "    assert_eq!(result, true);",
                "    let config = Config::default();",
                "    let result = config.get_byte_classes();",
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let config = Config::default().byte_classes(false);",
                "    let result = config.get_byte_classes();",
                "    assert_eq!(result, false);",
                "    let config = Config::default().byte_classes(true);",
                "    let result = config.get_byte_classes();",
                "    assert_eq!(result, true);",
                "    let config = Config::default();",
                "    let result = config.get_byte_classes();",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}