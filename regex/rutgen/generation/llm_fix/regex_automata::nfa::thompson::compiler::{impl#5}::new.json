{
  "name": "regex_automata::nfa::thompson::compiler::{impl#5}::new",
  "mod_info": {
    "name": "nfa::thompson::compiler",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:60:1:60:14"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/compiler.rs:1751:5:1753:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Utf8State { compiled: Utf8BoundedMap::new(10_000), uncompiled: vec![] }\n"
      ],
      "input_infer": "capacity: 10_000 (exact value), uncompiled: empty vector\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let utf8_state = Utf8State::new();",
                "    let expected_compiled = Utf8BoundedMap::new(10_000);",
                "    let expected_uncompiled = vec![];",
                "",
                "    // Call the function under test",
                "    let _ = utf8_state;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(utf8_state.compiled.version, expected_compiled.version);",
                "    assert_eq!(utf8_state.compiled.capacity, expected_compiled.capacity);",
                "    assert_eq!(utf8_state.compiled.map.len(), expected_compiled.map.len());",
                "    assert_eq!(utf8_state.uncompiled, expected_uncompiled);"
              ],
              "code": [
                "{",
                "    let utf8_state = Utf8State::new();",
                "    let expected_compiled = Utf8BoundedMap::new(10_000);",
                "    let expected_uncompiled = vec![];",
                "",
                "    // Call the function under test",
                "    let _ = utf8_state;",
                "    assert_eq!(utf8_state.compiled.version, expected_compiled.version);",
                "    assert_eq!(utf8_state.compiled.capacity, expected_compiled.capacity);",
                "    assert_eq!(utf8_state.compiled.map.len(), expected_compiled.map.len());",
                "    assert_eq!(utf8_state.uncompiled, expected_uncompiled);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let utf8_bounded_map = Utf8BoundedMap::new(10_000);",
                "    let expected_version = 0;",
                "    let expected_capacity = 10_000;",
                "    let expected_map = vec![];",
                "",
                "    // Call the function under test",
                "    let _ = utf8_bounded_map;",
                "}"
              ],
              "oracle": [
                "    let utf8_state = Utf8State::new();",
                "    assert_eq!(utf8_state.compiled.version, expected_version);",
                "    assert_eq!(utf8_state.compiled.capacity, expected_capacity);",
                "    assert_eq!(utf8_state.compiled.map, expected_map);",
                "    assert!(utf8_state.uncompiled.is_empty());"
              ],
              "code": [
                "{",
                "    let utf8_bounded_map = Utf8BoundedMap::new(10_000);",
                "    let expected_version = 0;",
                "    let expected_capacity = 10_000;",
                "    let expected_map = vec![];",
                "",
                "    // Call the function under test",
                "    let _ = utf8_bounded_map;",
                "    let utf8_state = Utf8State::new();",
                "    assert_eq!(utf8_state.compiled.version, expected_version);",
                "    assert_eq!(utf8_state.compiled.capacity, expected_capacity);",
                "    assert_eq!(utf8_state.compiled.map, expected_map);",
                "    assert!(utf8_state.uncompiled.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}