{
  "name": "regex_automata::dfa::sparse::{impl#6}::is_accel_state",
  "mod_info": {
    "name": "dfa::sparse",
    "loc": "regex-automata/src/dfa/mod.rs:343:1:343:16"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/sparse.rs:1132:5:1134:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "StateID values including edge cases: 0 (dead state), 1 to special.max, special.min_accel to special.max_accel with checks for valid ranges and invalid inputs (e.g., negative or out of bounds).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let special = Special {",
                "        max: 10,",
                "        quit_id: 9,",
                "        min_match: 1,",
                "        max_match: 5,",
                "        min_accel: 3,",
                "        max_accel: 7,",
                "        min_start: 1,",
                "        max_start: 10,",
                "    };",
                "    let dfa = DFA {",
                "        tt: Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 11, pattern_len: 0 },",
                "        st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
                "        special,",
                "        pre: None,",
                "        quitset: ByteSet::default(),",
                "        flags: Flags { has_empty: false, is_utf8: true, is_always_start_anchored: false },",
                "    };",
                "    let _ = dfa.is_accel_state(StateID(0));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dfa.is_accel_state(StateID(0)), false);",
                "    assert_eq!(dfa.is_accel_state(StateID(3)), true);",
                "    assert_eq!(dfa.is_accel_state(StateID(7)), true);",
                "    assert_eq!(dfa.is_accel_state(StateID(8)), false);",
                "    assert_eq!(dfa.is_accel_state(StateID(10)), false);",
                "    assert_eq!(dfa.is_accel_state(StateID(5)), true);"
              ],
              "code": [
                "{",
                "    let special = Special {",
                "        max: 10,",
                "        quit_id: 9,",
                "        min_match: 1,",
                "        max_match: 5,",
                "        min_accel: 3,",
                "        max_accel: 7,",
                "        min_start: 1,",
                "        max_start: 10,",
                "    };",
                "    let dfa = DFA {",
                "        tt: Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 11, pattern_len: 0 },",
                "        st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
                "        special,",
                "        pre: None,",
                "        quitset: ByteSet::default(),",
                "        flags: Flags { has_empty: false, is_utf8: true, is_always_start_anchored: false },",
                "    };",
                "    let _ = dfa.is_accel_state(StateID(0));",
                "    assert_eq!(dfa.is_accel_state(StateID(0)), false);",
                "    assert_eq!(dfa.is_accel_state(StateID(3)), true);",
                "    assert_eq!(dfa.is_accel_state(StateID(7)), true);",
                "    assert_eq!(dfa.is_accel_state(StateID(8)), false);",
                "    assert_eq!(dfa.is_accel_state(StateID(10)), false);",
                "    assert_eq!(dfa.is_accel_state(StateID(5)), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let special = Special {",
                "        max: 10,",
                "        quit_id: 9,",
                "        min_match: 1,",
                "        max_match: 5,",
                "        min_accel: 3,",
                "        max_accel: 7,",
                "        min_start: 1,",
                "        max_start: 10,",
                "    };",
                "    let dfa = DFA {",
                "        tt: Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 11, pattern_len: 0 },",
                "        st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
                "        special,",
                "        pre: None,",
                "        quitset: ByteSet::default(),",
                "        flags: Flags { has_empty: false, is_utf8: true, is_always_start_anchored: false },",
                "    };",
                "    let _ = dfa.is_accel_state(StateID(2));",
                "}"
              ],
              "oracle": [
                "    let special = Special { max: 10, quit_id: 9, min_match: 1, max_match: 5, min_accel: 3, max_accel: 7, min_start: 1, max_start: 10 };",
                "    let dfa = DFA { tt: Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 11, pattern_len: 0 }, st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None }, special, pre: None, quitset: ByteSet::default(), flags: Flags { has_empty: false, is_utf8: true, is_always_start_anchored: false } };",
                "    assert_eq!(dfa.is_accel_state(StateID(3)), true);",
                "    assert_eq!(dfa.is_accel_state(StateID(4)), true);",
                "    assert_eq!(dfa.is_accel_state(StateID(5)), true);",
                "    assert_eq!(dfa.is_accel_state(StateID(6)), true);",
                "    assert_eq!(dfa.is_accel_state(StateID(7)), true);",
                "    assert_eq!(dfa.is_accel_state(StateID(2)), false);",
                "    assert_eq!(dfa.is_accel_state(StateID(1)), false);",
                "    assert_eq!(dfa.is_accel_state(StateID(0)), false);",
                "    assert_eq!(dfa.is_accel_state(StateID(8)), false);",
                "    assert_eq!(dfa.is_accel_state(StateID(9)), false);",
                "    assert_eq!(dfa.is_accel_state(StateID(10)), false);"
              ],
              "code": [
                "{",
                "    let special = Special {",
                "        max: 10,",
                "        quit_id: 9,",
                "        min_match: 1,",
                "        max_match: 5,",
                "        min_accel: 3,",
                "        max_accel: 7,",
                "        min_start: 1,",
                "        max_start: 10,",
                "    };",
                "    let dfa = DFA {",
                "        tt: Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 11, pattern_len: 0 },",
                "        st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
                "        special,",
                "        pre: None,",
                "        quitset: ByteSet::default(),",
                "        flags: Flags { has_empty: false, is_utf8: true, is_always_start_anchored: false },",
                "    };",
                "    let _ = dfa.is_accel_state(StateID(2));",
                "    let special = Special { max: 10, quit_id: 9, min_match: 1, max_match: 5, min_accel: 3, max_accel: 7, min_start: 1, max_start: 10 };",
                "    let dfa = DFA { tt: Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 11, pattern_len: 0 }, st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None }, special, pre: None, quitset: ByteSet::default(), flags: Flags { has_empty: false, is_utf8: true, is_always_start_anchored: false } };",
                "    assert_eq!(dfa.is_accel_state(StateID(3)), true);",
                "    assert_eq!(dfa.is_accel_state(StateID(4)), true);",
                "    assert_eq!(dfa.is_accel_state(StateID(5)), true);",
                "    assert_eq!(dfa.is_accel_state(StateID(6)), true);",
                "    assert_eq!(dfa.is_accel_state(StateID(7)), true);",
                "    assert_eq!(dfa.is_accel_state(StateID(2)), false);",
                "    assert_eq!(dfa.is_accel_state(StateID(1)), false);",
                "    assert_eq!(dfa.is_accel_state(StateID(0)), false);",
                "    assert_eq!(dfa.is_accel_state(StateID(8)), false);",
                "    assert_eq!(dfa.is_accel_state(StateID(9)), false);",
                "    assert_eq!(dfa.is_accel_state(StateID(10)), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let special = Special {",
                "        max: 10,",
                "        quit_id: 9,",
                "        min_match: 1,",
                "        max_match: 5,",
                "        min_accel: 3,",
                "        max_accel: 7,",
                "        min_start: 1,",
                "        max_start: 10,",
                "    };",
                "    let dfa = DFA {",
                "        tt: Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 11, pattern_len: 0 },",
                "        st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
                "        special,",
                "        pre: None,",
                "        quitset: ByteSet::default(),",
                "        flags: Flags { has_empty: false, is_utf8: true, is_always_start_anchored: false },",
                "    };",
                "    let _ = dfa.is_accel_state(StateID(3));",
                "}"
              ],
              "oracle": [
                "    assert!(dfa.is_accel_state(StateID(3)) == true);",
                "    assert!(dfa.is_accel_state(StateID(4)) == true);",
                "    assert!(dfa.is_accel_state(StateID(5)) == true);",
                "    assert!(dfa.is_accel_state(StateID(6)) == true);",
                "    assert!(dfa.is_accel_state(StateID(7)) == true);",
                "    assert!(dfa.is_accel_state(StateID(2)) == false);",
                "    assert!(dfa.is_accel_state(StateID(8)) == false);",
                "    assert!(dfa.is_accel_state(StateID(1)) == false);",
                "    assert!(dfa.is_accel_state(StateID(9)) == false);",
                "    assert!(dfa.is_accel_state(StateID(10)) == false);",
                "    assert!(dfa.is_accel_state(StateID(0)) == false);"
              ],
              "code": [
                "{",
                "    let special = Special {",
                "        max: 10,",
                "        quit_id: 9,",
                "        min_match: 1,",
                "        max_match: 5,",
                "        min_accel: 3,",
                "        max_accel: 7,",
                "        min_start: 1,",
                "        max_start: 10,",
                "    };",
                "    let dfa = DFA {",
                "        tt: Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 11, pattern_len: 0 },",
                "        st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
                "        special,",
                "        pre: None,",
                "        quitset: ByteSet::default(),",
                "        flags: Flags { has_empty: false, is_utf8: true, is_always_start_anchored: false },",
                "    };",
                "    let _ = dfa.is_accel_state(StateID(3));",
                "    assert!(dfa.is_accel_state(StateID(3)) == true);",
                "    assert!(dfa.is_accel_state(StateID(4)) == true);",
                "    assert!(dfa.is_accel_state(StateID(5)) == true);",
                "    assert!(dfa.is_accel_state(StateID(6)) == true);",
                "    assert!(dfa.is_accel_state(StateID(7)) == true);",
                "    assert!(dfa.is_accel_state(StateID(2)) == false);",
                "    assert!(dfa.is_accel_state(StateID(8)) == false);",
                "    assert!(dfa.is_accel_state(StateID(1)) == false);",
                "    assert!(dfa.is_accel_state(StateID(9)) == false);",
                "    assert!(dfa.is_accel_state(StateID(10)) == false);",
                "    assert!(dfa.is_accel_state(StateID(0)) == false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let special = Special {",
                "        max: 10,",
                "        quit_id: 9,",
                "        min_match: 1,",
                "        max_match: 5,",
                "        min_accel: 3,",
                "        max_accel: 7,",
                "        min_start: 1,",
                "        max_start: 10,",
                "    };",
                "    let dfa = DFA {",
                "        tt: Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 11, pattern_len: 0 },",
                "        st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
                "        special,",
                "        pre: None,",
                "        quitset: ByteSet::default(),",
                "        flags: Flags { has_empty: false, is_utf8: true, is_always_start_anchored: false },",
                "    };",
                "    let _ = dfa.is_accel_state(StateID(7));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dfa.is_accel_state(StateID(2)), false);",
                "    assert_eq!(dfa.is_accel_state(StateID(3)), true);",
                "    assert_eq!(dfa.is_accel_state(StateID(4)), true);",
                "    assert_eq!(dfa.is_accel_state(StateID(5)), true);",
                "    assert_eq!(dfa.is_accel_state(StateID(6)), true);",
                "    assert_eq!(dfa.is_accel_state(StateID(7)), true);",
                "    assert_eq!(dfa.is_accel_state(StateID(8)), false);",
                "    assert_eq!(dfa.is_accel_state(StateID(9)), false);",
                "    assert_eq!(dfa.is_accel_state(StateID(10)), false);",
                "    assert_eq!(dfa.is_accel_state(StateID(0)), false);"
              ],
              "code": [
                "{",
                "    let special = Special {",
                "        max: 10,",
                "        quit_id: 9,",
                "        min_match: 1,",
                "        max_match: 5,",
                "        min_accel: 3,",
                "        max_accel: 7,",
                "        min_start: 1,",
                "        max_start: 10,",
                "    };",
                "    let dfa = DFA {",
                "        tt: Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 11, pattern_len: 0 },",
                "        st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
                "        special,",
                "        pre: None,",
                "        quitset: ByteSet::default(),",
                "        flags: Flags { has_empty: false, is_utf8: true, is_always_start_anchored: false },",
                "    };",
                "    let _ = dfa.is_accel_state(StateID(7));",
                "    assert_eq!(dfa.is_accel_state(StateID(2)), false);",
                "    assert_eq!(dfa.is_accel_state(StateID(3)), true);",
                "    assert_eq!(dfa.is_accel_state(StateID(4)), true);",
                "    assert_eq!(dfa.is_accel_state(StateID(5)), true);",
                "    assert_eq!(dfa.is_accel_state(StateID(6)), true);",
                "    assert_eq!(dfa.is_accel_state(StateID(7)), true);",
                "    assert_eq!(dfa.is_accel_state(StateID(8)), false);",
                "    assert_eq!(dfa.is_accel_state(StateID(9)), false);",
                "    assert_eq!(dfa.is_accel_state(StateID(10)), false);",
                "    assert_eq!(dfa.is_accel_state(StateID(0)), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let special = Special {",
                "        max: 10,",
                "        quit_id: 9,",
                "        min_match: 1,",
                "        max_match: 5,",
                "        min_accel: 3,",
                "        max_accel: 7,",
                "        min_start: 1,",
                "        max_start: 10,",
                "    };",
                "    let dfa = DFA {",
                "        tt: Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 11, pattern_len: 0 },",
                "        st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
                "        special,",
                "        pre: None,",
                "        quitset: ByteSet::default(),",
                "        flags: Flags { has_empty: false, is_utf8: true, is_always_start_anchored: false },",
                "    };",
                "    let _ = dfa.is_accel_state(StateID(11));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dfa.is_accel_state(StateID(2)), false);",
                "    assert_eq!(dfa.is_accel_state(StateID(3)), true);",
                "    assert_eq!(dfa.is_accel_state(StateID(6)), true);",
                "    assert_eq!(dfa.is_accel_state(StateID(7)), true);",
                "    assert_eq!(dfa.is_accel_state(StateID(8)), false);",
                "    assert_eq!(dfa.is_accel_state(StateID(9)), false);",
                "    assert_eq!(dfa.is_accel_state(StateID(10)), false);",
                "    assert_eq!(dfa.is_accel_state(StateID(0)), false);"
              ],
              "code": [
                "{",
                "    let special = Special {",
                "        max: 10,",
                "        quit_id: 9,",
                "        min_match: 1,",
                "        max_match: 5,",
                "        min_accel: 3,",
                "        max_accel: 7,",
                "        min_start: 1,",
                "        max_start: 10,",
                "    };",
                "    let dfa = DFA {",
                "        tt: Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 11, pattern_len: 0 },",
                "        st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
                "        special,",
                "        pre: None,",
                "        quitset: ByteSet::default(),",
                "        flags: Flags { has_empty: false, is_utf8: true, is_always_start_anchored: false },",
                "    };",
                "    let _ = dfa.is_accel_state(StateID(11));",
                "    assert_eq!(dfa.is_accel_state(StateID(2)), false);",
                "    assert_eq!(dfa.is_accel_state(StateID(3)), true);",
                "    assert_eq!(dfa.is_accel_state(StateID(6)), true);",
                "    assert_eq!(dfa.is_accel_state(StateID(7)), true);",
                "    assert_eq!(dfa.is_accel_state(StateID(8)), false);",
                "    assert_eq!(dfa.is_accel_state(StateID(9)), false);",
                "    assert_eq!(dfa.is_accel_state(StateID(10)), false);",
                "    assert_eq!(dfa.is_accel_state(StateID(0)), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}