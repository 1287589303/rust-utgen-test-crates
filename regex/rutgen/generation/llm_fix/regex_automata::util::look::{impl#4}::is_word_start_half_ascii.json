{
  "name": "regex_automata::util::look::{impl#4}::is_word_start_half_ascii",
  "mod_info": {
    "name": "util::look",
    "loc": "regex-automata/src/util/mod.rs:38:1:38:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/look.rs:1177:5:1184:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: at > 0 at line 1182 is true\n",
        "expected return value/type: !word_before\n"
      ],
      "input_infer": "at = 1 to haystack.len() where haystack[at - 1] may be any byte, resulting in true or false return value based on whether it's a word byte\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack = b\"word_example\";",
                "    let at = 1; // at > 0",
                "    let result = matcher.is_word_start_half_ascii(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false); // 'word_example' has a word character before index 1",
                "    assert_eq!(matcher.is_word_start_half_ascii(b\"_test\", 1), false); // underscore is a word character",
                "    assert_eq!(matcher.is_word_start_half_ascii(b\" test\", 1), true); // space is not a word character",
                "    assert_eq!(matcher.is_word_start_half_ascii(b\"123test\", 1), false); // digit is a word character",
                "    assert_eq!(matcher.is_word_start_half_ascii(b\"abc\", 1), false); // 'a' is a word character",
                "    assert_eq!(matcher.is_word_start_half_ascii(b\"  \", 1), true); // space is not a word character",
                "    assert_eq!(matcher.is_word_start_half_ascii(b\"\", 1), false); // out of bounds (should not panic, but check for handling)"
              ],
              "code": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack = b\"word_example\";",
                "    let at = 1; // at > 0",
                "    let result = matcher.is_word_start_half_ascii(haystack, at);",
                "    assert_eq!(result, false); // 'word_example' has a word character before index 1",
                "    assert_eq!(matcher.is_word_start_half_ascii(b\"_test\", 1), false); // underscore is a word character",
                "    assert_eq!(matcher.is_word_start_half_ascii(b\" test\", 1), true); // space is not a word character",
                "    assert_eq!(matcher.is_word_start_half_ascii(b\"123test\", 1), false); // digit is a word character",
                "    assert_eq!(matcher.is_word_start_half_ascii(b\"abc\", 1), false); // 'a' is a word character",
                "    assert_eq!(matcher.is_word_start_half_ascii(b\"  \", 1), true); // space is not a word character",
                "    assert_eq!(matcher.is_word_start_half_ascii(b\"\", 1), false); // out of bounds (should not panic, but check for handling)",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack = b\"!nonword\";",
                "    let at = 1; // at > 0",
                "    let result = matcher.is_word_start_half_ascii(haystack, at);",
                "}"
              ],
              "oracle": [
                "    let matcher = LookMatcher::new();",
                "    let haystack = b\"!nonword\";",
                "    let at = 1; // at > 0",
                "    let result = matcher.is_word_start_half_ascii(haystack, at);",
                "    assert_eq!(result, true); // word_before is false since haystack[0] is not a word byte",
                "    let at = 0; // at = 0",
                "    let result_at_zero = matcher.is_word_start_half_ascii(haystack, at);",
                "    assert_eq!(result_at_zero, true); // should return true as at is zero",
                "    let haystack_with_word = b\"nword\";",
                "    let at_word = 1; // haystack[0] is a word byte ('n')",
                "    let result_word = matcher.is_word_start_half_ascii(haystack_with_word, at_word);",
                "    assert_eq!(result_word, false); // word_before is true since haystack[0] is a word byte",
                "    let at_end = haystack.len(); // at = haystack.len()",
                "    let result_at_end = matcher.is_word_start_half_ascii(haystack, at_end);",
                "    assert_eq!(result_at_end, true); // should return true as defined in documentation"
              ],
              "code": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack = b\"!nonword\";",
                "    let at = 1; // at > 0",
                "    let result = matcher.is_word_start_half_ascii(haystack, at);",
                "    let matcher = LookMatcher::new();",
                "    let haystack = b\"!nonword\";",
                "    let at = 1; // at > 0",
                "    let result = matcher.is_word_start_half_ascii(haystack, at);",
                "    assert_eq!(result, true); // word_before is false since haystack[0] is not a word byte",
                "    let at = 0; // at = 0",
                "    let result_at_zero = matcher.is_word_start_half_ascii(haystack, at);",
                "    assert_eq!(result_at_zero, true); // should return true as at is zero",
                "    let haystack_with_word = b\"nword\";",
                "    let at_word = 1; // haystack[0] is a word byte ('n')",
                "    let result_word = matcher.is_word_start_half_ascii(haystack_with_word, at_word);",
                "    assert_eq!(result_word, false); // word_before is true since haystack[0] is a word byte",
                "    let at_end = haystack.len(); // at = haystack.len()",
                "    let result_at_end = matcher.is_word_start_half_ascii(haystack, at_end);",
                "    assert_eq!(result_at_end, true); // should return true as defined in documentation",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack = b\"1_first\";",
                "    let at = 1; // at > 0",
                "    let result = matcher.is_word_start_half_ascii(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack = b\"1_first\";",
                "    let at = 1; // at > 0",
                "    let result = matcher.is_word_start_half_ascii(haystack, at);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack = b\"@starts\";",
                "    let at = 1; // at > 0",
                "    let result = matcher.is_word_start_half_ascii(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack = b\"@starts\";",
                "    let at = 1; // at > 0",
                "    let result = matcher.is_word_start_half_ascii(haystack, at);",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: at > 0 at line 1182 is false, with bound at == 0\n",
        "expected return value/type: !word_before\n"
      ],
      "input_infer": "at = 0; haystack = any byte slice including empty slice; haystack.length() >= at\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = &[];",
                "    let at = 0;",
                "    matcher.is_word_start_half_ascii(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_word_start_half_ascii(haystack, at), true);"
              ],
              "code": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = &[];",
                "    let at = 0;",
                "    matcher.is_word_start_half_ascii(haystack, at);",
                "    assert_eq!(matcher.is_word_start_half_ascii(haystack, at), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = &[b'a'];",
                "    let at = 0;",
                "    matcher.is_word_start_half_ascii(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_word_start_half_ascii(haystack, at), true);"
              ],
              "code": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = &[b'a'];",
                "    let at = 0;",
                "    matcher.is_word_start_half_ascii(haystack, at);",
                "    assert_eq!(matcher.is_word_start_half_ascii(haystack, at), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = &[b' ']; ",
                "    let at = 0;",
                "    matcher.is_word_start_half_ascii(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_word_start_half_ascii(haystack, at), true);"
              ],
              "code": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = &[b' ']; ",
                "    let at = 0;",
                "    matcher.is_word_start_half_ascii(haystack, at);",
                "    assert_eq!(matcher.is_word_start_half_ascii(haystack, at), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = &[b'a']; ",
                "    let at = 0;",
                "    matcher.is_word_start_half_ascii(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_word_start_half_ascii(haystack, at), true);"
              ],
              "code": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = &[b'a']; ",
                "    let at = 0;",
                "    matcher.is_word_start_half_ascii(haystack, at);",
                "    assert_eq!(matcher.is_word_start_half_ascii(haystack, at), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}