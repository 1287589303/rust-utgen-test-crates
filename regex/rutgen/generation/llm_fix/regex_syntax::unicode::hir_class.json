{
  "name": "regex_syntax::unicode::hir_class",
  "mod_info": {
    "name": "unicode",
    "loc": "regex-syntax/src/lib.rs:193:1:193:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/unicode.rs:452:1:458:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions: valid ranges with non-overlapping pairs of Unicode scalar values including: (0x0000, 0x10FFFF), (0x0041, 0x005A), (0x0061, 0x007A), overlapping ranges like (0x0061, 0x007A) and (0x0065, 0x007A), empty range array, single range array, ranges with the same start and end value, ranges where start > end, and high boundary cases like (0xFFFF, 0x10FFFF).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges: &[(char, char)] = &[(0x0000 as char, 0x10FFFF as char)];",
                "    let _ = hir_class(ranges);",
                "}"
              ],
              "oracle": [
                "    let ranges: &[(char, char)] = &[(0x0000 as char, 0x10FFFF as char)];",
                "    let result = hir_class(ranges);",
                "    assert_eq!(result.set.len(), 1);",
                "    assert_eq!(result.set.range(0).start, 0x0000 as char);",
                "    assert_eq!(result.set.range(0).end, 0x10FFFF as char);",
                "    let ranges_empty: &[(char, char)] = &[];",
                "    let result_empty = hir_class(ranges_empty);",
                "    assert_eq!(result_empty.set.len(), 0);"
              ],
              "code": [
                "{",
                "    let ranges: &[(char, char)] = &[(0x0000 as char, 0x10FFFF as char)];",
                "    let _ = hir_class(ranges);",
                "    let ranges: &[(char, char)] = &[(0x0000 as char, 0x10FFFF as char)];",
                "    let result = hir_class(ranges);",
                "    assert_eq!(result.set.len(), 1);",
                "    assert_eq!(result.set.range(0).start, 0x0000 as char);",
                "    assert_eq!(result.set.range(0).end, 0x10FFFF as char);",
                "    let ranges_empty: &[(char, char)] = &[];",
                "    let result_empty = hir_class(ranges_empty);",
                "    assert_eq!(result_empty.set.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges: &[(char, char)] = &[(0x0041 as char, 0x005A as char)];",
                "    let _ = hir_class(ranges);",
                "}"
              ],
              "oracle": [
                "    let ranges: &[(char, char)] = &[(0x0041 as char, 0x005A as char)]; // test with uppercase letters A-Z",
                "    let result = hir_class(ranges); // call the function",
                "    assert_eq!(result.set.len(), 1); // check if one range is created",
                "    assert_eq!(result.set.ranges[0].start, 0x0041 as char); // check the start of the range is 'A'",
                "    assert_eq!(result.set.ranges[0].end, 0x005A as char); // check the end of the range is 'Z'",
                "    let empty_ranges: &[(char, char)] = &[]; // test with an empty range",
                "    let empty_result = hir_class(empty_ranges); // call the function with empty ranges",
                "    assert_eq!(empty_result.set.len(), 0); // check if no ranges are created",
                "    let overlapping_ranges: &[(char, char)] = &[(0x0041 as char, 0x005A as char), (0x0045 as char, 0x004F as char)]; // test overlapping ranges",
                "    let overlapping_result = hir_class(overlapping_ranges); // call the function with overlapping ranges",
                "    assert_eq!(overlapping_result.set.len(), 2); // check if two ranges are created",
                "    assert_eq!(overlapping_result.set.ranges[1].start, 0x0045 as char); // check the start of the second range is 'E'",
                "    assert_eq!(overlapping_result.set.ranges[1].end, 0x004F as char); // check the end of the second range is 'O'"
              ],
              "code": [
                "{",
                "    let ranges: &[(char, char)] = &[(0x0041 as char, 0x005A as char)];",
                "    let _ = hir_class(ranges);",
                "    let ranges: &[(char, char)] = &[(0x0041 as char, 0x005A as char)]; // test with uppercase letters A-Z",
                "    let result = hir_class(ranges); // call the function",
                "    assert_eq!(result.set.len(), 1); // check if one range is created",
                "    assert_eq!(result.set.ranges[0].start, 0x0041 as char); // check the start of the range is 'A'",
                "    assert_eq!(result.set.ranges[0].end, 0x005A as char); // check the end of the range is 'Z'",
                "    let empty_ranges: &[(char, char)] = &[]; // test with an empty range",
                "    let empty_result = hir_class(empty_ranges); // call the function with empty ranges",
                "    assert_eq!(empty_result.set.len(), 0); // check if no ranges are created",
                "    let overlapping_ranges: &[(char, char)] = &[(0x0041 as char, 0x005A as char), (0x0045 as char, 0x004F as char)]; // test overlapping ranges",
                "    let overlapping_result = hir_class(overlapping_ranges); // call the function with overlapping ranges",
                "    assert_eq!(overlapping_result.set.len(), 2); // check if two ranges are created",
                "    assert_eq!(overlapping_result.set.ranges[1].start, 0x0045 as char); // check the start of the second range is 'E'",
                "    assert_eq!(overlapping_result.set.ranges[1].end, 0x004F as char); // check the end of the second range is 'O'",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges: &[(char, char)] = &[(0x0061 as char, 0x007A as char)];",
                "    let _ = hir_class(ranges);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir_class(&[(0x0061 as char, 0x007A as char)]), hir::ClassUnicode::new(vec![hir::ClassUnicodeRange::new(0x0061 as char, 0x007A as char)]));",
                "    assert_eq!(hir_class(&[(0x0030 as char, 0x0039 as char)]), hir::ClassUnicode::new(vec![hir::ClassUnicodeRange::new(0x0030 as char, 0x0039 as char)]));",
                "    assert_eq!(hir_class(&[(0x00C0 as char, 0x00C3 as char), (0x00E0 as char, 0x00E3 as char)]), hir::ClassUnicode::new(vec![hir::ClassUnicodeRange::new(0x00C0 as char, 0x00C3 as char), hir::ClassUnicodeRange::new(0x00E0 as char, 0x00E3 as char)]));",
                "    assert_eq!(hir_class(&[]), hir::ClassUnicode::new(vec![]));",
                "    assert_eq!(hir_class(&[(0x0E01 as char, 0x0E3A as char), (0x0E3F as char, 0x0E3F as char)]), hir::ClassUnicode::new(vec![hir::ClassUnicodeRange::new(0x0E01 as char, 0x0E3A as char), hir::ClassUnicodeRange::new(0x0E3F as char, 0x0E3F as char)]));"
              ],
              "code": [
                "{",
                "    let ranges: &[(char, char)] = &[(0x0061 as char, 0x007A as char)];",
                "    let _ = hir_class(ranges);",
                "    assert_eq!(hir_class(&[(0x0061 as char, 0x007A as char)]), hir::ClassUnicode::new(vec![hir::ClassUnicodeRange::new(0x0061 as char, 0x007A as char)]));",
                "    assert_eq!(hir_class(&[(0x0030 as char, 0x0039 as char)]), hir::ClassUnicode::new(vec![hir::ClassUnicodeRange::new(0x0030 as char, 0x0039 as char)]));",
                "    assert_eq!(hir_class(&[(0x00C0 as char, 0x00C3 as char), (0x00E0 as char, 0x00E3 as char)]), hir::ClassUnicode::new(vec![hir::ClassUnicodeRange::new(0x00C0 as char, 0x00C3 as char), hir::ClassUnicodeRange::new(0x00E0 as char, 0x00E3 as char)]));",
                "    assert_eq!(hir_class(&[]), hir::ClassUnicode::new(vec![]));",
                "    assert_eq!(hir_class(&[(0x0E01 as char, 0x0E3A as char), (0x0E3F as char, 0x0E3F as char)]), hir::ClassUnicode::new(vec![hir::ClassUnicodeRange::new(0x0E01 as char, 0x0E3A as char), hir::ClassUnicodeRange::new(0x0E3F as char, 0x0E3F as char)]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges: &[(char, char)] = &[(0x0061 as char, 0x007A as char), (0x0065 as char, 0x007A as char)];",
                "    let _ = hir_class(ranges);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir_class(&[(0x0061 as char, 0x007A as char)]).set.len(), 1);",
                "    assert_eq!(hir_class(&[(0x0061 as char, 0x007A as char)]).set.contains(&(0x0061 as char)), true);",
                "    assert_eq!(hir_class(&[(0x0061 as char, 0x007A as char)]).set.contains(&(0x007A as char)), true);",
                "    assert_eq!(hir_class(&[(0x0061 as char, 0x007A as char)]).set.contains(&(0x007B as char)), false);",
                "    assert_eq!(hir_class(&[(0x0065 as char, 0x007A as char)]).set.len(), 1);",
                "    assert_eq!(hir_class(&[(0x0065 as char, 0x007A as char)]).set.contains(&(0x0065 as char)), true);",
                "    assert_eq!(hir_class(&[(0x0065 as char, 0x007A as char)]).set.contains(&(0x007A as char)), true);",
                "    assert_eq!(hir_class(&[(0x0065 as char, 0x007A as char)]).set.contains(&(0x0064 as char)), false);",
                "    assert_eq!(hir_class(&[(0x0061 as char, 0x007A as char), (0x0065 as char, 0x007A as char)]).set.len(), 2);",
                "    assert_eq!(hir_class(&[(0x0061 as char, 0x007A as char), (0x0065 as char, 0x007A as char)]).set.contains(&(0x0061 as char)), true);",
                "    assert_eq!(hir_class(&[(0x0061 as char, 0x007A as char), (0x0065 as char, 0x007A as char)]).set.contains(&(0x007B as char)), false);"
              ],
              "code": [
                "{",
                "    let ranges: &[(char, char)] = &[(0x0061 as char, 0x007A as char), (0x0065 as char, 0x007A as char)];",
                "    let _ = hir_class(ranges);",
                "    assert_eq!(hir_class(&[(0x0061 as char, 0x007A as char)]).set.len(), 1);",
                "    assert_eq!(hir_class(&[(0x0061 as char, 0x007A as char)]).set.contains(&(0x0061 as char)), true);",
                "    assert_eq!(hir_class(&[(0x0061 as char, 0x007A as char)]).set.contains(&(0x007A as char)), true);",
                "    assert_eq!(hir_class(&[(0x0061 as char, 0x007A as char)]).set.contains(&(0x007B as char)), false);",
                "    assert_eq!(hir_class(&[(0x0065 as char, 0x007A as char)]).set.len(), 1);",
                "    assert_eq!(hir_class(&[(0x0065 as char, 0x007A as char)]).set.contains(&(0x0065 as char)), true);",
                "    assert_eq!(hir_class(&[(0x0065 as char, 0x007A as char)]).set.contains(&(0x007A as char)), true);",
                "    assert_eq!(hir_class(&[(0x0065 as char, 0x007A as char)]).set.contains(&(0x0064 as char)), false);",
                "    assert_eq!(hir_class(&[(0x0061 as char, 0x007A as char), (0x0065 as char, 0x007A as char)]).set.len(), 2);",
                "    assert_eq!(hir_class(&[(0x0061 as char, 0x007A as char), (0x0065 as char, 0x007A as char)]).set.contains(&(0x0061 as char)), true);",
                "    assert_eq!(hir_class(&[(0x0061 as char, 0x007A as char), (0x0065 as char, 0x007A as char)]).set.contains(&(0x007B as char)), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges: &[(char, char)] = &[];",
                "    let _ = hir_class(ranges);",
                "}"
              ],
              "oracle": [
                "    let ranges: &[(char, char)] = &[];",
                "    let result = hir_class(ranges);",
                "    assert_eq!(result, hir::ClassUnicode::new(Vec::new()));",
                "    ",
                "    let ranges: &[(char, char)] = &[('a', 'z')];",
                "    let result = hir_class(ranges);",
                "    assert_eq!(result, hir::ClassUnicode::new(vec![hir::ClassUnicodeRange::new('a', 'z')]));",
                "    ",
                "    let ranges: &[(char, char)] = &[('A', 'Z'), ('a', 'z')];",
                "    let result = hir_class(ranges);",
                "    assert_eq!(result, hir::ClassUnicode::new(vec![hir::ClassUnicodeRange::new('A', 'Z'), hir::ClassUnicodeRange::new('a', 'z')]));",
                "    ",
                "    let ranges: &[(char, char)] = &[('0', '9')];",
                "    let result = hir_class(ranges);",
                "    assert_eq!(result, hir::ClassUnicode::new(vec![hir::ClassUnicodeRange::new('0', '9')]));",
                "    ",
                "    let ranges: &[(char, char)] = &[(' ', '~')];",
                "    let result = hir_class(ranges);",
                "    assert_eq!(result, hir::ClassUnicode::new(vec![hir::ClassUnicodeRange::new(' ', '~')]));",
                "    ",
                "    let ranges: &[(char, char)] = &[('a', 'c'), ('g', 'j')];",
                "    let result = hir_class(ranges);",
                "    assert_eq!(result, hir::ClassUnicode::new(vec![hir::ClassUnicodeRange::new('a', 'c'), hir::ClassUnicodeRange::new('g', 'j')]));",
                "    ",
                "    let ranges: &[(char, char)] = &[('z', 'a')];",
                "    let result = hir_class(ranges);",
                "    assert_eq!(result, hir::ClassUnicode::new(vec![hir::ClassUnicodeRange::new('z', 'a')]));"
              ],
              "code": [
                "{",
                "    let ranges: &[(char, char)] = &[];",
                "    let _ = hir_class(ranges);",
                "    let ranges: &[(char, char)] = &[];",
                "    let result = hir_class(ranges);",
                "    assert_eq!(result, hir::ClassUnicode::new(Vec::new()));",
                "    ",
                "    let ranges: &[(char, char)] = &[('a', 'z')];",
                "    let result = hir_class(ranges);",
                "    assert_eq!(result, hir::ClassUnicode::new(vec![hir::ClassUnicodeRange::new('a', 'z')]));",
                "    ",
                "    let ranges: &[(char, char)] = &[('A', 'Z'), ('a', 'z')];",
                "    let result = hir_class(ranges);",
                "    assert_eq!(result, hir::ClassUnicode::new(vec![hir::ClassUnicodeRange::new('A', 'Z'), hir::ClassUnicodeRange::new('a', 'z')]));",
                "    ",
                "    let ranges: &[(char, char)] = &[('0', '9')];",
                "    let result = hir_class(ranges);",
                "    assert_eq!(result, hir::ClassUnicode::new(vec![hir::ClassUnicodeRange::new('0', '9')]));",
                "    ",
                "    let ranges: &[(char, char)] = &[(' ', '~')];",
                "    let result = hir_class(ranges);",
                "    assert_eq!(result, hir::ClassUnicode::new(vec![hir::ClassUnicodeRange::new(' ', '~')]));",
                "    ",
                "    let ranges: &[(char, char)] = &[('a', 'c'), ('g', 'j')];",
                "    let result = hir_class(ranges);",
                "    assert_eq!(result, hir::ClassUnicode::new(vec![hir::ClassUnicodeRange::new('a', 'c'), hir::ClassUnicodeRange::new('g', 'j')]));",
                "    ",
                "    let ranges: &[(char, char)] = &[('z', 'a')];",
                "    let result = hir_class(ranges);",
                "    assert_eq!(result, hir::ClassUnicode::new(vec![hir::ClassUnicodeRange::new('z', 'a')]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges: &[(char, char)] = &[(0x0041 as char, 0x0041 as char)];",
                "    let _ = hir_class(ranges);",
                "}"
              ],
              "oracle": [
                "    let ranges: &[(char, char)] = &[(0x0041 as char, 0x0041 as char)];",
                "    let result = hir_class(ranges);",
                "    assert_eq!(result.set.len(), 1);",
                "    assert_eq!(result.set.contains(&ClassUnicodeRange { start: 0x0041 as char, end: 0x0041 as char }), true);"
              ],
              "code": [
                "{",
                "    let ranges: &[(char, char)] = &[(0x0041 as char, 0x0041 as char)];",
                "    let _ = hir_class(ranges);",
                "    let ranges: &[(char, char)] = &[(0x0041 as char, 0x0041 as char)];",
                "    let result = hir_class(ranges);",
                "    assert_eq!(result.set.len(), 1);",
                "    assert_eq!(result.set.contains(&ClassUnicodeRange { start: 0x0041 as char, end: 0x0041 as char }), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges: &[(char, char)] = &[(0x0061 as char, 0x0061 as char)];",
                "    let _ = hir_class(ranges);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir_class(&[(0x0061 as char, 0x0061 as char)]), hir::ClassUnicode::new(vec![hir::ClassUnicodeRange::new('a', 'a')]));",
                "    assert_eq!(hir_class(&[(0x0041 as char, 0x005A as char)]), hir::ClassUnicode::new(vec![hir::ClassUnicodeRange::new('A', 'Z')]));",
                "    assert_eq!(hir_class(&[(0x0030 as char, 0x0039 as char)]), hir::ClassUnicode::new(vec![hir::ClassUnicodeRange::new('0', '9')]));",
                "    assert_eq!(hir_class(&[(0x0061 as char, 0x007A as char), (0x00C0 as char, 0x00FF as char)]), hir::ClassUnicode::new(vec![hir::ClassUnicodeRange::new('a', 'z'), hir::ClassUnicodeRange::new('À', 'ÿ')]));",
                "    assert_eq!(hir_class(&[]), hir::ClassUnicode::new(vec![]));"
              ],
              "code": [
                "{",
                "    let ranges: &[(char, char)] = &[(0x0061 as char, 0x0061 as char)];",
                "    let _ = hir_class(ranges);",
                "    assert_eq!(hir_class(&[(0x0061 as char, 0x0061 as char)]), hir::ClassUnicode::new(vec![hir::ClassUnicodeRange::new('a', 'a')]));",
                "    assert_eq!(hir_class(&[(0x0041 as char, 0x005A as char)]), hir::ClassUnicode::new(vec![hir::ClassUnicodeRange::new('A', 'Z')]));",
                "    assert_eq!(hir_class(&[(0x0030 as char, 0x0039 as char)]), hir::ClassUnicode::new(vec![hir::ClassUnicodeRange::new('0', '9')]));",
                "    assert_eq!(hir_class(&[(0x0061 as char, 0x007A as char), (0x00C0 as char, 0x00FF as char)]), hir::ClassUnicode::new(vec![hir::ClassUnicodeRange::new('a', 'z'), hir::ClassUnicodeRange::new('À', 'ÿ')]));",
                "    assert_eq!(hir_class(&[]), hir::ClassUnicode::new(vec![]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges: &[(char, char)] = &[(0x007A as char, 0x0061 as char)];",
                "    let _ = hir_class(ranges);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir_class(&[(0x007A as char, 0x0061 as char)]).set.len(), 1);",
                "    assert!(hir_class(&[(0x007A as char, 0x0061 as char)]).set.contains(&(ClassUnicodeRange { start: 0x0061 as char, end: 0x007A as char })));",
                "    assert_eq!(hir_class(&[(0x0030 as char, 0x0039 as char)]).set.len(), 1);",
                "    assert!(hir_class(&[(0x0030 as char, 0x0039 as char)]).set.contains(&(ClassUnicodeRange { start: 0x0030 as char, end: 0x0039 as char })));",
                "    assert_eq!(hir_class(&[]).set.len(), 0);",
                "    assert!(hir_class(&[(0x0410 as char, 0x042F as char)]).set.contains(&(ClassUnicodeRange { start: 0x0410 as char, end: 0x042F as char })));"
              ],
              "code": [
                "{",
                "    let ranges: &[(char, char)] = &[(0x007A as char, 0x0061 as char)];",
                "    let _ = hir_class(ranges);",
                "    assert_eq!(hir_class(&[(0x007A as char, 0x0061 as char)]).set.len(), 1);",
                "    assert!(hir_class(&[(0x007A as char, 0x0061 as char)]).set.contains(&(ClassUnicodeRange { start: 0x0061 as char, end: 0x007A as char })));",
                "    assert_eq!(hir_class(&[(0x0030 as char, 0x0039 as char)]).set.len(), 1);",
                "    assert!(hir_class(&[(0x0030 as char, 0x0039 as char)]).set.contains(&(ClassUnicodeRange { start: 0x0030 as char, end: 0x0039 as char })));",
                "    assert_eq!(hir_class(&[]).set.len(), 0);",
                "    assert!(hir_class(&[(0x0410 as char, 0x042F as char)]).set.contains(&(ClassUnicodeRange { start: 0x0410 as char, end: 0x042F as char })));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges: &[(char, char)] = &[(0xFFFF as char, 0x10FFFF as char)];",
                "    let _ = hir_class(ranges);",
                "}"
              ],
              "oracle": [
                "    let ranges: &[(char, char)] = &[(0xFFFF as char, 0x10FFFF as char)];",
                "    let result = hir_class(ranges);",
                "    assert_eq!(result, expected_hir_class_with_ranges);"
              ],
              "code": [
                "{",
                "    let ranges: &[(char, char)] = &[(0xFFFF as char, 0x10FFFF as char)];",
                "    let _ = hir_class(ranges);",
                "    let ranges: &[(char, char)] = &[(0xFFFF as char, 0x10FFFF as char)];",
                "    let result = hir_class(ranges);",
                "    assert_eq!(result, expected_hir_class_with_ranges);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}