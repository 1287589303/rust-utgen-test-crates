{
  "name": "regex_automata::nfa::thompson::compiler::{impl#2}::is_any",
  "mod_info": {
    "name": "nfa::thompson::compiler",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:60:1:60:14"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/compiler.rs:585:5:587:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: !self.is_none()\n"
      ],
      "input_infer": "self = WhichCaptures::All, self = WhichCaptures::Implicit, self = WhichCaptures::None\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let captures = WhichCaptures::All;",
                "    captures.is_any();",
                "}"
              ],
              "oracle": [
                "    assert!(captures.is_any());",
                "    let captures = WhichCaptures::Implicit;",
                "    assert!(captures.is_any());",
                "    let captures = WhichCaptures::None;",
                "    assert!(!captures.is_any());"
              ],
              "code": [
                "{",
                "    let captures = WhichCaptures::All;",
                "    captures.is_any();",
                "    assert!(captures.is_any());",
                "    let captures = WhichCaptures::Implicit;",
                "    assert!(captures.is_any());",
                "    let captures = WhichCaptures::None;",
                "    assert!(!captures.is_any());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let captures = WhichCaptures::Implicit;",
                "    captures.is_any();",
                "}"
              ],
              "oracle": [
                "    assert!(captures.is_any());",
                "    let captures = WhichCaptures::All;",
                "    assert!(captures.is_any());",
                "    let captures = WhichCaptures::None;",
                "    assert!(!captures.is_any());"
              ],
              "code": [
                "{",
                "    let captures = WhichCaptures::Implicit;",
                "    captures.is_any();",
                "    assert!(captures.is_any());",
                "    let captures = WhichCaptures::All;",
                "    assert!(captures.is_any());",
                "    let captures = WhichCaptures::None;",
                "    assert!(!captures.is_any());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let captures = WhichCaptures::None;",
                "    captures.is_any();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(captures.is_any(), false);",
                "    let captures = WhichCaptures::Implicit;",
                "    assert_eq!(captures.is_any(), true);",
                "    let captures = WhichCaptures::All;",
                "    assert_eq!(captures.is_any(), true);"
              ],
              "code": [
                "{",
                "    let captures = WhichCaptures::None;",
                "    captures.is_any();",
                "    assert_eq!(captures.is_any(), false);",
                "    let captures = WhichCaptures::Implicit;",
                "    assert_eq!(captures.is_any(), true);",
                "    let captures = WhichCaptures::All;",
                "    assert_eq!(captures.is_any(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}