{
  "name": "regex_syntax::hir::{impl#27}::contains",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:2719:5:2721:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.bits & look.as_repr() != 0\n"
      ],
      "input_infer": "self.bits as u32 in the range [0, 65535], look as Look variant from the provided enumeration\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let lookset = LookSet { bits: 1 };",
                "    let result = lookset.contains(Look::Start);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let lookset = LookSet { bits: 0 };",
                "    let result = lookset.contains(Look::Start);",
                "    assert_eq!(result, false);",
                "    let lookset = LookSet { bits: 2 };",
                "    let result = lookset.contains(Look::End);",
                "    assert_eq!(result, true);",
                "    let lookset = LookSet { bits: 4 };",
                "    let result = lookset.contains(Look::StartLF);",
                "    assert_eq!(result, true);",
                "    let lookset = LookSet { bits: 8 };",
                "    let result = lookset.contains(Look::WordAscii);",
                "    assert_eq!(result, false);",
                "    let lookset = LookSet { bits: 16 };",
                "    let result = lookset.contains(Look::WordStartHalfAscii);",
                "    assert_eq!(result, false);",
                "    let lookset = LookSet { bits: 32 };",
                "    let result = lookset.contains(Look::WordEndHalfUnicode);",
                "    assert_eq!(result, false);",
                "    let lookset = LookSet { bits: 255 };",
                "    let result = lookset.contains(Look::WordAsciiNegate);",
                "    assert_eq!(result, false);",
                "    let lookset = LookSet { bits: 1024 };",
                "    let result = lookset.contains(Look::WordStartUnicode);",
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let lookset = LookSet { bits: 1 };",
                "    let result = lookset.contains(Look::Start);",
                "    assert_eq!(result, true);",
                "    let lookset = LookSet { bits: 0 };",
                "    let result = lookset.contains(Look::Start);",
                "    assert_eq!(result, false);",
                "    let lookset = LookSet { bits: 2 };",
                "    let result = lookset.contains(Look::End);",
                "    assert_eq!(result, true);",
                "    let lookset = LookSet { bits: 4 };",
                "    let result = lookset.contains(Look::StartLF);",
                "    assert_eq!(result, true);",
                "    let lookset = LookSet { bits: 8 };",
                "    let result = lookset.contains(Look::WordAscii);",
                "    assert_eq!(result, false);",
                "    let lookset = LookSet { bits: 16 };",
                "    let result = lookset.contains(Look::WordStartHalfAscii);",
                "    assert_eq!(result, false);",
                "    let lookset = LookSet { bits: 32 };",
                "    let result = lookset.contains(Look::WordEndHalfUnicode);",
                "    assert_eq!(result, false);",
                "    let lookset = LookSet { bits: 255 };",
                "    let result = lookset.contains(Look::WordAsciiNegate);",
                "    assert_eq!(result, false);",
                "    let lookset = LookSet { bits: 1024 };",
                "    let result = lookset.contains(Look::WordStartUnicode);",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let lookset = LookSet { bits: 2 };",
                "    let result = lookset.contains(Look::End);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    assert_eq!(lookset.contains(Look::Start), false);",
                "    assert_eq!(lookset.contains(Look::EndLF), false);",
                "    assert_eq!(lookset.contains(Look::WordAscii), false);",
                "    assert_eq!(lookset.contains(Look::WordStartAscii), false);",
                "    lookset.bits = 0;",
                "    assert_eq!(lookset.contains(Look::End), false);",
                "    lookset.bits = 3;",
                "    assert_eq!(lookset.contains(Look::End), true);",
                "    assert_eq!(lookset.contains(Look::Start), true);"
              ],
              "code": [
                "{",
                "    let lookset = LookSet { bits: 2 };",
                "    let result = lookset.contains(Look::End);",
                "    assert_eq!(result, true);",
                "    assert_eq!(lookset.contains(Look::Start), false);",
                "    assert_eq!(lookset.contains(Look::EndLF), false);",
                "    assert_eq!(lookset.contains(Look::WordAscii), false);",
                "    assert_eq!(lookset.contains(Look::WordStartAscii), false);",
                "    lookset.bits = 0;",
                "    assert_eq!(lookset.contains(Look::End), false);",
                "    lookset.bits = 3;",
                "    assert_eq!(lookset.contains(Look::End), true);",
                "    assert_eq!(lookset.contains(Look::Start), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let lookset = LookSet { bits: 4 };",
                "    let result = lookset.contains(Look::StartLF);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    ",
                "    let lookset = LookSet { bits: 0 };",
                "    let result = lookset.contains(Look::StartLF);",
                "    assert_eq!(result, false);",
                "    ",
                "    let lookset = LookSet { bits: 8 };",
                "    let result = lookset.contains(Look::WordUnicode);",
                "    assert_eq!(result, true);",
                "    ",
                "    let lookset = LookSet { bits: 0b1111111111111111 };",
                "    let result = lookset.contains(Look::WordEndHalfAscii);",
                "    assert_eq!(result, true);",
                "    ",
                "    let lookset = LookSet { bits: 0b0000000000000000 };",
                "    let result = lookset.contains(Look::End);",
                "    assert_eq!(result, false);",
                "    ",
                "    let lookset = LookSet { bits: 1 };",
                "    let result = lookset.contains(Look::End);",
                "    assert_eq!(result, false);",
                "    ",
                "    let lookset = LookSet { bits: 1 << 1 };",
                "    let result = lookset.contains(Look::End);",
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let lookset = LookSet { bits: 4 };",
                "    let result = lookset.contains(Look::StartLF);",
                "    assert_eq!(result, true);",
                "    ",
                "    let lookset = LookSet { bits: 0 };",
                "    let result = lookset.contains(Look::StartLF);",
                "    assert_eq!(result, false);",
                "    ",
                "    let lookset = LookSet { bits: 8 };",
                "    let result = lookset.contains(Look::WordUnicode);",
                "    assert_eq!(result, true);",
                "    ",
                "    let lookset = LookSet { bits: 0b1111111111111111 };",
                "    let result = lookset.contains(Look::WordEndHalfAscii);",
                "    assert_eq!(result, true);",
                "    ",
                "    let lookset = LookSet { bits: 0b0000000000000000 };",
                "    let result = lookset.contains(Look::End);",
                "    assert_eq!(result, false);",
                "    ",
                "    let lookset = LookSet { bits: 1 };",
                "    let result = lookset.contains(Look::End);",
                "    assert_eq!(result, false);",
                "    ",
                "    let lookset = LookSet { bits: 1 << 1 };",
                "    let result = lookset.contains(Look::End);",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let lookset = LookSet { bits: 8 };",
                "    let result = lookset.contains(Look::EndLF);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let lookset_empty = LookSet { bits: 0 };",
                "    let result_empty = lookset_empty.contains(Look::EndLF);",
                "    assert_eq!(result_empty, false);",
                "    let lookset_full = LookSet { bits: 0xFFFF };",
                "    let result_full = lookset_full.contains(Look::EndLF);",
                "    assert_eq!(result_full, true);",
                "    let lookset_partial = LookSet { bits: 10 };",
                "    let result_partial = lookset_partial.contains(Look::StartLF);",
                "    assert_eq!(result_partial, true);",
                "    let result_not_in_set = lookset.contains(Look::Start);",
                "    assert_eq!(result_not_in_set, false);"
              ],
              "code": [
                "{",
                "    let lookset = LookSet { bits: 8 };",
                "    let result = lookset.contains(Look::EndLF);",
                "    assert_eq!(result, true);",
                "    let lookset_empty = LookSet { bits: 0 };",
                "    let result_empty = lookset_empty.contains(Look::EndLF);",
                "    assert_eq!(result_empty, false);",
                "    let lookset_full = LookSet { bits: 0xFFFF };",
                "    let result_full = lookset_full.contains(Look::EndLF);",
                "    assert_eq!(result_full, true);",
                "    let lookset_partial = LookSet { bits: 10 };",
                "    let result_partial = lookset_partial.contains(Look::StartLF);",
                "    assert_eq!(result_partial, true);",
                "    let result_not_in_set = lookset.contains(Look::Start);",
                "    assert_eq!(result_not_in_set, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let lookset = LookSet { bits: 64 };",
                "    let result = lookset.contains(Look::WordAscii);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let lookset = LookSet { bits: 0 };",
                "    let result = lookset.contains(Look::WordAscii);",
                "    assert_eq!(result, false);",
                "    let lookset = LookSet { bits: 3 };",
                "    let result = lookset.contains(Look::Start);",
                "    assert_eq!(result, true);",
                "    let result = lookset.contains(Look::End);",
                "    assert_eq!(result, true);",
                "    let lookset = LookSet { bits: 4 };",
                "    let result = lookset.contains(Look::End);",
                "    assert_eq!(result, false);",
                "    let lookset = LookSet { bits: 1024 };",
                "    let result = lookset.contains(Look::WordStartAscii);",
                "    assert_eq!(result, true);",
                "    let result = lookset.contains(Look::WordEndAscii);",
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let lookset = LookSet { bits: 64 };",
                "    let result = lookset.contains(Look::WordAscii);",
                "    assert_eq!(result, true);",
                "    let lookset = LookSet { bits: 0 };",
                "    let result = lookset.contains(Look::WordAscii);",
                "    assert_eq!(result, false);",
                "    let lookset = LookSet { bits: 3 };",
                "    let result = lookset.contains(Look::Start);",
                "    assert_eq!(result, true);",
                "    let result = lookset.contains(Look::End);",
                "    assert_eq!(result, true);",
                "    let lookset = LookSet { bits: 4 };",
                "    let result = lookset.contains(Look::End);",
                "    assert_eq!(result, false);",
                "    let lookset = LookSet { bits: 1024 };",
                "    let result = lookset.contains(Look::WordStartAscii);",
                "    assert_eq!(result, true);",
                "    let result = lookset.contains(Look::WordEndAscii);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let lookset = LookSet { bits: 512 };",
                "    let result = lookset.contains(Look::WordUnicodeNegate);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    assert_eq!(lookset.contains(Look::Start), false);",
                "    assert_eq!(lookset.contains(Look::WordAscii), false);",
                "    assert_eq!(lookset.contains(Look::WordEndAscii), false);",
                "    assert_eq!(lookset.contains(Look::WordStartUnicode), false);",
                "    assert_eq!(lookset.contains(Look::End), false);",
                "    assert_eq!(lookset.contains(Look::WordEndUnicode), false);",
                "    assert_eq!(lookset.contains(Look::WordStartHalfAscii), false);",
                "    assert_eq!(lookset.contains(Look::WordEndHalfAscii), false);",
                "    assert_eq!(lookset.contains(Look::WordStartHalfUnicode), false);",
                "    assert_eq!(lookset.contains(Look::WordEndHalfUnicode), false);",
                "    assert_eq!(lookset.contains(Look::EndLF), false);",
                "    assert_eq!(lookset.contains(Look::StartLF), false);",
                "    assert_eq!(lookset.contains(Look::StartCRLF), false);",
                "    assert_eq!(lookset.contains(Look::EndCRLF), false);"
              ],
              "code": [
                "{",
                "    let lookset = LookSet { bits: 512 };",
                "    let result = lookset.contains(Look::WordUnicodeNegate);",
                "    assert_eq!(result, true);",
                "    assert_eq!(lookset.contains(Look::Start), false);",
                "    assert_eq!(lookset.contains(Look::WordAscii), false);",
                "    assert_eq!(lookset.contains(Look::WordEndAscii), false);",
                "    assert_eq!(lookset.contains(Look::WordStartUnicode), false);",
                "    assert_eq!(lookset.contains(Look::End), false);",
                "    assert_eq!(lookset.contains(Look::WordEndUnicode), false);",
                "    assert_eq!(lookset.contains(Look::WordStartHalfAscii), false);",
                "    assert_eq!(lookset.contains(Look::WordEndHalfAscii), false);",
                "    assert_eq!(lookset.contains(Look::WordStartHalfUnicode), false);",
                "    assert_eq!(lookset.contains(Look::WordEndHalfUnicode), false);",
                "    assert_eq!(lookset.contains(Look::EndLF), false);",
                "    assert_eq!(lookset.contains(Look::StartLF), false);",
                "    assert_eq!(lookset.contains(Look::StartCRLF), false);",
                "    assert_eq!(lookset.contains(Look::EndCRLF), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let lookset = LookSet { bits: 3 }; // 1 | 2",
                "    let result_start = lookset.contains(Look::Start);",
                "    let result_end = lookset.contains(Look::End);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result_start, true);",
                "    assert_eq!(result_end, true);",
                "    assert_eq!(lookset.contains(Look::StartLF), false);",
                "    assert_eq!(lookset.contains(Look::EndLF), false);",
                "    assert_eq!(lookset.contains(Look::WordAscii), false);",
                "    assert_eq!(lookset.contains(Look::WordUnicode), false);"
              ],
              "code": [
                "{",
                "    let lookset = LookSet { bits: 3 }; // 1 | 2",
                "    let result_start = lookset.contains(Look::Start);",
                "    let result_end = lookset.contains(Look::End);",
                "    assert_eq!(result_start, true);",
                "    assert_eq!(result_end, true);",
                "    assert_eq!(lookset.contains(Look::StartLF), false);",
                "    assert_eq!(lookset.contains(Look::EndLF), false);",
                "    assert_eq!(lookset.contains(Look::WordAscii), false);",
                "    assert_eq!(lookset.contains(Look::WordUnicode), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let lookset = LookSet { bits: 0 }; ",
                "    let result = lookset.contains(Look::Start);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);",
                "    ",
                "    let lookset = LookSet { bits: Look::Start.as_repr() };",
                "    let result = lookset.contains(Look::Start);",
                "    assert_eq!(result, true);",
                "    ",
                "    let lookset = LookSet { bits: Look::End.as_repr() };",
                "    let result = lookset.contains(Look::Start);",
                "    assert_eq!(result, false);",
                "    ",
                "    let lookset = LookSet { bits: Look::Start.as_repr() | Look::End.as_repr() };",
                "    let result = lookset.contains(Look::End);",
                "    assert_eq!(result, true);",
                "    ",
                "    let lookset = LookSet { bits: Look::WordAscii.as_repr() };",
                "    let result = lookset.contains(Look::WordAscii);",
                "    assert_eq!(result, true);",
                "    ",
                "    let lookset = LookSet { bits: Look::WordAscii.as_repr() | Look::WordAsciiNegate.as_repr() };",
                "    let result = lookset.contains(Look::WordAsciiNegate);",
                "    assert_eq!(result, true);",
                "    ",
                "    let lookset = LookSet { bits: 0 };",
                "    let result = lookset.contains(Look::WordUnicode);",
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let lookset = LookSet { bits: 0 }; ",
                "    let result = lookset.contains(Look::Start);",
                "    assert_eq!(result, false);",
                "    ",
                "    let lookset = LookSet { bits: Look::Start.as_repr() };",
                "    let result = lookset.contains(Look::Start);",
                "    assert_eq!(result, true);",
                "    ",
                "    let lookset = LookSet { bits: Look::End.as_repr() };",
                "    let result = lookset.contains(Look::Start);",
                "    assert_eq!(result, false);",
                "    ",
                "    let lookset = LookSet { bits: Look::Start.as_repr() | Look::End.as_repr() };",
                "    let result = lookset.contains(Look::End);",
                "    assert_eq!(result, true);",
                "    ",
                "    let lookset = LookSet { bits: Look::WordAscii.as_repr() };",
                "    let result = lookset.contains(Look::WordAscii);",
                "    assert_eq!(result, true);",
                "    ",
                "    let lookset = LookSet { bits: Look::WordAscii.as_repr() | Look::WordAsciiNegate.as_repr() };",
                "    let result = lookset.contains(Look::WordAsciiNegate);",
                "    assert_eq!(result, true);",
                "    ",
                "    let lookset = LookSet { bits: 0 };",
                "    let result = lookset.contains(Look::WordUnicode);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}