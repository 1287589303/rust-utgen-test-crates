{
  "name": "regex_automata::nfa::thompson::compiler::{impl#0}::get_utf8",
  "mod_info": {
    "name": "nfa::thompson::compiler",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:60:1:60:14"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/compiler.rs:470:5:472:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "utf8 = true or false (enabled or disabled), with the default assumed as true when not set; validate behavior with absence of utf8 field (None case)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().utf8(true);",
                "    let result = config.get_utf8();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let config = Config::new().utf8(true);",
                "    let result = config.get_utf8();",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().utf8(false);",
                "    let result = config.get_utf8();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let config = Config::new().utf8(false);",
                "    let result = config.get_utf8();",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new();",
                "    let result = config.get_utf8();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let config = Config::new().utf8(false);",
                "    let result = config.get_utf8();",
                "    assert_eq!(result, false);",
                "    let config = Config::new().utf8(true);",
                "    let result = config.get_utf8();",
                "    assert_eq!(result, true);",
                "    let config = Config::new().utf8(Some(true));",
                "    let result = config.get_utf8();",
                "    assert_eq!(result, true);",
                "    let config = Config::new().utf8(Some(false));",
                "    let result = config.get_utf8();",
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let config = Config::new();",
                "    let result = config.get_utf8();",
                "    assert_eq!(result, true);",
                "    let config = Config::new().utf8(false);",
                "    let result = config.get_utf8();",
                "    assert_eq!(result, false);",
                "    let config = Config::new().utf8(true);",
                "    let result = config.get_utf8();",
                "    assert_eq!(result, true);",
                "    let config = Config::new().utf8(Some(true));",
                "    let result = config.get_utf8();",
                "    assert_eq!(result, true);",
                "    let config = Config::new().utf8(Some(false));",
                "    let result = config.get_utf8();",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}