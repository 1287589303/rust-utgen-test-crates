{
  "name": "regex_automata::dfa::special::{impl#0}::new",
  "mod_info": {
    "name": "dfa::special",
    "loc": "regex-automata/src/dfa/mod.rs:358:1:358:13"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/special.rs:187:5:198:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Special {\n            max: DEAD,\n            quit_id: DEAD,\n            min_match: DEAD,\n            max_match: DEAD,\n            min_accel: DEAD,\n            max_accel: DEAD,\n            min_start: DEAD,\n            max_start: DEAD,\n        }\n"
      ],
      "input_infer": "max = DEAD, quit_id = DEAD, min_match = DEAD, max_match = DEAD, min_accel = DEAD, max_accel = DEAD, min_start = DEAD, max_start = DEAD\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let special = Special::new();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(special.max, DEAD);",
                "    assert_eq!(special.quit_id, DEAD);",
                "    assert_eq!(special.min_match, DEAD);",
                "    assert_eq!(special.max_match, DEAD);",
                "    assert_eq!(special.min_accel, DEAD);",
                "    assert_eq!(special.max_accel, DEAD);",
                "    assert_eq!(special.min_start, DEAD);",
                "    assert_eq!(special.max_start, DEAD);"
              ],
              "code": [
                "{",
                "    let special = Special::new();",
                "    assert_eq!(special.max, DEAD);",
                "    assert_eq!(special.quit_id, DEAD);",
                "    assert_eq!(special.min_match, DEAD);",
                "    assert_eq!(special.max_match, DEAD);",
                "    assert_eq!(special.min_accel, DEAD);",
                "    assert_eq!(special.max_accel, DEAD);",
                "    assert_eq!(special.min_start, DEAD);",
                "    assert_eq!(special.max_start, DEAD);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let special = Special::new();",
                "    let expected = Special {",
                "        max: DEAD,",
                "        quit_id: DEAD,",
                "        min_match: DEAD,",
                "        max_match: DEAD,",
                "        min_accel: DEAD,",
                "        max_accel: DEAD,",
                "        min_start: DEAD,",
                "        max_start: DEAD,",
                "    };",
                "    assert_eq!(special, expected);",
                "}"
              ],
              "oracle": [
                "    let special = Special::new();",
                "    let expected = Special { max: DEAD, quit_id: DEAD, min_match: DEAD, max_match: DEAD, min_accel: DEAD, max_accel: DEAD, min_start: DEAD, max_start: DEAD };",
                "    assert_eq!(special, expected);"
              ],
              "code": [
                "{",
                "    let special = Special::new();",
                "    let expected = Special {",
                "        max: DEAD,",
                "        quit_id: DEAD,",
                "        min_match: DEAD,",
                "        max_match: DEAD,",
                "        min_accel: DEAD,",
                "        max_accel: DEAD,",
                "        min_start: DEAD,",
                "        max_start: DEAD,",
                "    };",
                "    assert_eq!(special, expected);",
                "    let special = Special::new();",
                "    let expected = Special { max: DEAD, quit_id: DEAD, min_match: DEAD, max_match: DEAD, min_accel: DEAD, max_accel: DEAD, min_start: DEAD, max_start: DEAD };",
                "    assert_eq!(special, expected);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}