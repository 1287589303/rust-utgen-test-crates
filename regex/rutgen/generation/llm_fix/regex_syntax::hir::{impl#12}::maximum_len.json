{
  "name": "regex_syntax::hir::{impl#12}::maximum_len",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:1185:5:1189:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.ranges().last()? at line 1186 is Err/None\n"
      ],
      "input_infer": "self.ranges() returns an empty slice for maximum_len() to yield None\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class_unicode = ClassUnicode::empty();",
                "    let result = class_unicode.maximum_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let class_unicode = ClassUnicode::empty();",
                "    let result = class_unicode.maximum_len();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class_unicode = ClassUnicode::empty();",
                "    let result = class_unicode.maximum_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let mut class_unicode = ClassUnicode::empty();",
                "    let result = class_unicode.maximum_len();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let empty_range = ClassUnicodeRange { start: '\\0', end: '\\0' };",
                "    let class_unicode = ClassUnicode::new(vec![empty_range]);",
                "    let result = class_unicode.maximum_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let empty_range = ClassUnicodeRange { start: '\\0', end: '\\0' };",
                "    let class_unicode = ClassUnicode::new(vec![empty_range]);",
                "    let result = class_unicode.maximum_len();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class_unicode = ClassUnicode::new(vec![]);",
                "    let result = class_unicode.maximum_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let class_unicode = ClassUnicode::new(vec![]);",
                "    let result = class_unicode.maximum_len();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.ranges().last()? at line 1186 is Ok/Some\n",
        "expected return value/type: Some(last.end.len_utf8())\n"
      ],
      "input_infer": "self.ranges() must contain at least one ClassUnicodeRange with valid `start` and `end` characters, where `start` < `end` and both characters must be valid Unicode characters within the range of 0 to 0x10FFFF.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges = vec![",
                "        ClassUnicodeRange { start: 'a', end: 'z' },",
                "    ];",
                "    let class_unicode = ClassUnicode::new(ranges);",
                "    class_unicode.maximum_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_unicode.maximum_len(), Some(1));"
              ],
              "code": [
                "{",
                "    let ranges = vec![",
                "        ClassUnicodeRange { start: 'a', end: 'z' },",
                "    ];",
                "    let class_unicode = ClassUnicode::new(ranges);",
                "    class_unicode.maximum_len();",
                "    assert_eq!(class_unicode.maximum_len(), Some(1));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges = vec![",
                "        ClassUnicodeRange { start: '中', end: '文' }, // Valid range containing CJK characters",
                "    ];",
                "    let class_unicode = ClassUnicode::new(ranges);",
                "    class_unicode.maximum_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_unicode.maximum_len(), Some(3));"
              ],
              "code": [
                "{",
                "    let ranges = vec![",
                "        ClassUnicodeRange { start: '中', end: '文' }, // Valid range containing CJK characters",
                "    ];",
                "    let class_unicode = ClassUnicode::new(ranges);",
                "    class_unicode.maximum_len();",
                "    assert_eq!(class_unicode.maximum_len(), Some(3));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges = vec![",
                "        ClassUnicodeRange { start: '\\u{10000}', end: '\\u{10FFFF}' }, // Valid range for Supplementary characters",
                "    ];",
                "    let class_unicode = ClassUnicode::new(ranges);",
                "    class_unicode.maximum_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_unicode.maximum_len(), Some(4));",
                "    assert_eq!(class_unicode.ranges().len(), 1);",
                "    assert_eq!(class_unicode.ranges()[0].start, '\\u{10000}');",
                "    assert_eq!(class_unicode.ranges()[0].end, '\\u{10FFFF}');",
                "    assert!(class_unicode.ranges().last().is_some());",
                "    assert!(class_unicode.is_ascii() == false);"
              ],
              "code": [
                "{",
                "    let ranges = vec![",
                "        ClassUnicodeRange { start: '\\u{10000}', end: '\\u{10FFFF}' }, // Valid range for Supplementary characters",
                "    ];",
                "    let class_unicode = ClassUnicode::new(ranges);",
                "    class_unicode.maximum_len();",
                "    assert_eq!(class_unicode.maximum_len(), Some(4));",
                "    assert_eq!(class_unicode.ranges().len(), 1);",
                "    assert_eq!(class_unicode.ranges()[0].start, '\\u{10000}');",
                "    assert_eq!(class_unicode.ranges()[0].end, '\\u{10FFFF}');",
                "    assert!(class_unicode.ranges().last().is_some());",
                "    assert!(class_unicode.is_ascii() == false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges = vec![",
                "        ClassUnicodeRange { start: 'A', end: 'Z' },",
                "        ClassUnicodeRange { start: '0', end: '9' }, // Various valid ranges",
                "    ];",
                "    let class_unicode = ClassUnicode::new(ranges);",
                "    class_unicode.maximum_len();",
                "}"
              ],
              "oracle": [
                "    let ranges = vec![ClassUnicodeRange { start: 'A', end: 'Z' }, ClassUnicodeRange { start: '0', end: '9' }];",
                "    let class_unicode = ClassUnicode::new(ranges);",
                "    let result = class_unicode.maximum_len();",
                "    assert_eq!(result, Some(1));",
                "    ",
                "    let ranges = vec![ClassUnicodeRange { start: 'a', end: 'z' }, ClassUnicodeRange { start: 'A', end: 'Z' }];",
                "    let class_unicode = ClassUnicode::new(ranges);",
                "    let result = class_unicode.maximum_len();",
                "    assert_eq!(result, Some(1));",
                "    ",
                "    let ranges = vec![ClassUnicodeRange { start: 'A', end: 'A' }];",
                "    let class_unicode = ClassUnicode::new(ranges);",
                "    let result = class_unicode.maximum_len();",
                "    assert_eq!(result, Some(1));",
                "    ",
                "    let ranges = vec![ClassUnicodeRange { start: ' ', end: ' ' }, ClassUnicodeRange { start: '\\n', end: '\\n' }];",
                "    let class_unicode = ClassUnicode::new(ranges);",
                "    let result = class_unicode.maximum_len();",
                "    assert_eq!(result, Some(1));",
                "    ",
                "    let ranges: Vec<ClassUnicodeRange> = vec![];",
                "    let class_unicode = ClassUnicode::new(ranges);",
                "    let result = class_unicode.maximum_len();",
                "    assert_eq!(result, None);",
                "    ",
                "    let ranges = vec![ClassUnicodeRange { start: '\\u{1F600}', end: '\\u{1F600}' }];",
                "    let class_unicode = ClassUnicode::new(ranges);",
                "    let result = class_unicode.maximum_len();",
                "    assert_eq!(result, Some(4));",
                "    ",
                "    let ranges = vec![ClassUnicodeRange { start: '\\u{10000}', end: '\\u{10000}' }];",
                "    let class_unicode = ClassUnicode::new(ranges);",
                "    let result = class_unicode.maximum_len();",
                "    assert_eq!(result, Some(4));",
                "    ",
                "    let ranges = vec![ClassUnicodeRange { start: 'A', end: 'Z' }, ClassUnicodeRange { start: '0', end: '9' }, ClassUnicodeRange { start: '©', end: '©' }];",
                "    let class_unicode = ClassUnicode::new(ranges);",
                "    let result = class_unicode.maximum_len();",
                "    assert_eq!(result, Some(2));"
              ],
              "code": [
                "{",
                "    let ranges = vec![",
                "        ClassUnicodeRange { start: 'A', end: 'Z' },",
                "        ClassUnicodeRange { start: '0', end: '9' }, // Various valid ranges",
                "    ];",
                "    let class_unicode = ClassUnicode::new(ranges);",
                "    class_unicode.maximum_len();",
                "    let ranges = vec![ClassUnicodeRange { start: 'A', end: 'Z' }, ClassUnicodeRange { start: '0', end: '9' }];",
                "    let class_unicode = ClassUnicode::new(ranges);",
                "    let result = class_unicode.maximum_len();",
                "    assert_eq!(result, Some(1));",
                "    ",
                "    let ranges = vec![ClassUnicodeRange { start: 'a', end: 'z' }, ClassUnicodeRange { start: 'A', end: 'Z' }];",
                "    let class_unicode = ClassUnicode::new(ranges);",
                "    let result = class_unicode.maximum_len();",
                "    assert_eq!(result, Some(1));",
                "    ",
                "    let ranges = vec![ClassUnicodeRange { start: 'A', end: 'A' }];",
                "    let class_unicode = ClassUnicode::new(ranges);",
                "    let result = class_unicode.maximum_len();",
                "    assert_eq!(result, Some(1));",
                "    ",
                "    let ranges = vec![ClassUnicodeRange { start: ' ', end: ' ' }, ClassUnicodeRange { start: '\\n', end: '\\n' }];",
                "    let class_unicode = ClassUnicode::new(ranges);",
                "    let result = class_unicode.maximum_len();",
                "    assert_eq!(result, Some(1));",
                "    ",
                "    let ranges: Vec<ClassUnicodeRange> = vec![];",
                "    let class_unicode = ClassUnicode::new(ranges);",
                "    let result = class_unicode.maximum_len();",
                "    assert_eq!(result, None);",
                "    ",
                "    let ranges = vec![ClassUnicodeRange { start: '\\u{1F600}', end: '\\u{1F600}' }];",
                "    let class_unicode = ClassUnicode::new(ranges);",
                "    let result = class_unicode.maximum_len();",
                "    assert_eq!(result, Some(4));",
                "    ",
                "    let ranges = vec![ClassUnicodeRange { start: '\\u{10000}', end: '\\u{10000}' }];",
                "    let class_unicode = ClassUnicode::new(ranges);",
                "    let result = class_unicode.maximum_len();",
                "    assert_eq!(result, Some(4));",
                "    ",
                "    let ranges = vec![ClassUnicodeRange { start: 'A', end: 'Z' }, ClassUnicodeRange { start: '0', end: '9' }, ClassUnicodeRange { start: '©', end: '©' }];",
                "    let class_unicode = ClassUnicode::new(ranges);",
                "    let result = class_unicode.maximum_len();",
                "    assert_eq!(result, Some(2));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges = vec![",
                "        ClassUnicodeRange { start: '\\u{0000}', end: '\\u{007F}' }, // Includes ASCII characters",
                "    ];",
                "    let class_unicode = ClassUnicode::new(ranges);",
                "    class_unicode.maximum_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_unicode.maximum_len(), Some(1));"
              ],
              "code": [
                "{",
                "    let ranges = vec![",
                "        ClassUnicodeRange { start: '\\u{0000}', end: '\\u{007F}' }, // Includes ASCII characters",
                "    ];",
                "    let class_unicode = ClassUnicode::new(ranges);",
                "    class_unicode.maximum_len();",
                "    assert_eq!(class_unicode.maximum_len(), Some(1));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}