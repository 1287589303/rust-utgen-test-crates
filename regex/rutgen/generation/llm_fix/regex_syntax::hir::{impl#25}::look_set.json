{
  "name": "regex_syntax::hir::{impl#25}::look_set",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:2022:5:2024:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.0.look_set\n"
      ],
      "input_infer": "self.0 must be initialized with a valid PropertiesI instance, requiring minimum_len between 0 and 100 (inclusive), maximum_len between minimum_len and 100 (inclusive), look_set bits as any u32 value, utf8 as true/false, explicit_captures_len as a positive integer, and literal as true/false.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let properties_i = PropertiesI {",
                "        minimum_len: Some(0),",
                "        maximum_len: Some(100),",
                "        look_set: LookSet { bits: 1 },",
                "        look_set_prefix: LookSet { bits: 2 },",
                "        look_set_suffix: LookSet { bits: 3 },",
                "        look_set_prefix_any: LookSet { bits: 4 },",
                "        look_set_suffix_any: LookSet { bits: 5 },",
                "        utf8: true,",
                "        explicit_captures_len: 1,",
                "        static_explicit_captures_len: Some(0),",
                "        literal: false,",
                "        alternation_literal: false,",
                "    };",
                "    let properties = Properties(Box::new(properties_i));",
                "    properties.look_set();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(properties.look_set(), LookSet { bits: 1 });"
              ],
              "code": [
                "{",
                "    let properties_i = PropertiesI {",
                "        minimum_len: Some(0),",
                "        maximum_len: Some(100),",
                "        look_set: LookSet { bits: 1 },",
                "        look_set_prefix: LookSet { bits: 2 },",
                "        look_set_suffix: LookSet { bits: 3 },",
                "        look_set_prefix_any: LookSet { bits: 4 },",
                "        look_set_suffix_any: LookSet { bits: 5 },",
                "        utf8: true,",
                "        explicit_captures_len: 1,",
                "        static_explicit_captures_len: Some(0),",
                "        literal: false,",
                "        alternation_literal: false,",
                "    };",
                "    let properties = Properties(Box::new(properties_i));",
                "    properties.look_set();",
                "    assert_eq!(properties.look_set(), LookSet { bits: 1 });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let properties_i = PropertiesI {",
                "        minimum_len: Some(50),",
                "        maximum_len: Some(100),",
                "        look_set: LookSet { bits: 255 },",
                "        look_set_prefix: LookSet { bits: 0 },",
                "        look_set_suffix: LookSet { bits: 128 },",
                "        look_set_prefix_any: LookSet { bits: 64 },",
                "        look_set_suffix_any: LookSet { bits: 32 },",
                "        utf8: false,",
                "        explicit_captures_len: 5,",
                "        static_explicit_captures_len: Some(2),",
                "        literal: true,",
                "        alternation_literal: true,",
                "    };",
                "    let properties = Properties(Box::new(properties_i));",
                "    properties.look_set();",
                "}"
              ],
              "oracle": [
                "    let properties_i = PropertiesI { minimum_len: Some(50), maximum_len: Some(100), look_set: LookSet { bits: 255 }, look_set_prefix: LookSet { bits: 0 }, look_set_suffix: LookSet { bits: 128 }, look_set_prefix_any: LookSet { bits: 64 }, look_set_suffix_any: LookSet { bits: 32 }, utf8: false, explicit_captures_len: 5, static_explicit_captures_len: Some(2), literal: true, alternation_literal: true };",
                "    let properties = Properties(Box::new(properties_i));",
                "    assert_eq!(properties.look_set(), LookSet { bits: 255 });"
              ],
              "code": [
                "{",
                "    let properties_i = PropertiesI {",
                "        minimum_len: Some(50),",
                "        maximum_len: Some(100),",
                "        look_set: LookSet { bits: 255 },",
                "        look_set_prefix: LookSet { bits: 0 },",
                "        look_set_suffix: LookSet { bits: 128 },",
                "        look_set_prefix_any: LookSet { bits: 64 },",
                "        look_set_suffix_any: LookSet { bits: 32 },",
                "        utf8: false,",
                "        explicit_captures_len: 5,",
                "        static_explicit_captures_len: Some(2),",
                "        literal: true,",
                "        alternation_literal: true,",
                "    };",
                "    let properties = Properties(Box::new(properties_i));",
                "    properties.look_set();",
                "    let properties_i = PropertiesI { minimum_len: Some(50), maximum_len: Some(100), look_set: LookSet { bits: 255 }, look_set_prefix: LookSet { bits: 0 }, look_set_suffix: LookSet { bits: 128 }, look_set_prefix_any: LookSet { bits: 64 }, look_set_suffix_any: LookSet { bits: 32 }, utf8: false, explicit_captures_len: 5, static_explicit_captures_len: Some(2), literal: true, alternation_literal: true };",
                "    let properties = Properties(Box::new(properties_i));",
                "    assert_eq!(properties.look_set(), LookSet { bits: 255 });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let properties_i = PropertiesI {",
                "        minimum_len: Some(100),",
                "        maximum_len: Some(100),",
                "        look_set: LookSet { bits: 15 },",
                "        look_set_prefix: LookSet { bits: 10 },",
                "        look_set_suffix: LookSet { bits: 5 },",
                "        look_set_prefix_any: LookSet { bits: 3 },",
                "        look_set_suffix_any: LookSet { bits: 1 },",
                "        utf8: true,",
                "        explicit_captures_len: 3,",
                "        static_explicit_captures_len: None,",
                "        literal: true,",
                "        alternation_literal: false,",
                "    };",
                "    let properties = Properties(Box::new(properties_i));",
                "    properties.look_set();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(properties.look_set().bits, 15);"
              ],
              "code": [
                "{",
                "    let properties_i = PropertiesI {",
                "        minimum_len: Some(100),",
                "        maximum_len: Some(100),",
                "        look_set: LookSet { bits: 15 },",
                "        look_set_prefix: LookSet { bits: 10 },",
                "        look_set_suffix: LookSet { bits: 5 },",
                "        look_set_prefix_any: LookSet { bits: 3 },",
                "        look_set_suffix_any: LookSet { bits: 1 },",
                "        utf8: true,",
                "        explicit_captures_len: 3,",
                "        static_explicit_captures_len: None,",
                "        literal: true,",
                "        alternation_literal: false,",
                "    };",
                "    let properties = Properties(Box::new(properties_i));",
                "    properties.look_set();",
                "    assert_eq!(properties.look_set().bits, 15);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let properties_i = PropertiesI {",
                "        minimum_len: Some(10),",
                "        maximum_len: Some(80),",
                "        look_set: LookSet { bits: 30 },",
                "        look_set_prefix: LookSet { bits: 30 },",
                "        look_set_suffix: LookSet { bits: 30 },",
                "        look_set_prefix_any: LookSet { bits: 30 },",
                "        look_set_suffix_any: LookSet { bits: 30 },",
                "        utf8: false,",
                "        explicit_captures_len: 2,",
                "        static_explicit_captures_len: Some(1),",
                "        literal: false,",
                "        alternation_literal: true,",
                "    };",
                "    let properties = Properties(Box::new(properties_i));",
                "    properties.look_set();",
                "}"
              ],
              "oracle": [
                "    let properties_i = PropertiesI { minimum_len: Some(10), maximum_len: Some(80), look_set: LookSet { bits: 30 }, look_set_prefix: LookSet { bits: 30 }, look_set_suffix: LookSet { bits: 30 }, look_set_prefix_any: LookSet { bits: 30 }, look_set_suffix_any: LookSet { bits: 30 }, utf8: false, explicit_captures_len: 2, static_explicit_captures_len: Some(1), literal: false, alternation_literal: true };",
                "    let properties = Properties(Box::new(properties_i)); assert_eq!(properties.look_set(), LookSet { bits: 30 });"
              ],
              "code": [
                "{",
                "    let properties_i = PropertiesI {",
                "        minimum_len: Some(10),",
                "        maximum_len: Some(80),",
                "        look_set: LookSet { bits: 30 },",
                "        look_set_prefix: LookSet { bits: 30 },",
                "        look_set_suffix: LookSet { bits: 30 },",
                "        look_set_prefix_any: LookSet { bits: 30 },",
                "        look_set_suffix_any: LookSet { bits: 30 },",
                "        utf8: false,",
                "        explicit_captures_len: 2,",
                "        static_explicit_captures_len: Some(1),",
                "        literal: false,",
                "        alternation_literal: true,",
                "    };",
                "    let properties = Properties(Box::new(properties_i));",
                "    properties.look_set();",
                "    let properties_i = PropertiesI { minimum_len: Some(10), maximum_len: Some(80), look_set: LookSet { bits: 30 }, look_set_prefix: LookSet { bits: 30 }, look_set_suffix: LookSet { bits: 30 }, look_set_prefix_any: LookSet { bits: 30 }, look_set_suffix_any: LookSet { bits: 30 }, utf8: false, explicit_captures_len: 2, static_explicit_captures_len: Some(1), literal: false, alternation_literal: true };",
                "    let properties = Properties(Box::new(properties_i)); assert_eq!(properties.look_set(), LookSet { bits: 30 });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let properties_i = PropertiesI {",
                "        minimum_len: Some(100),",
                "        maximum_len: Some(100),",
                "        look_set: LookSet { bits: 0 },",
                "        look_set_prefix: LookSet { bits: 0 },",
                "        look_set_suffix: LookSet { bits: 0 },",
                "        look_set_prefix_any: LookSet { bits: 0 },",
                "        look_set_suffix_any: LookSet { bits: 0 },",
                "        utf8: false,",
                "        explicit_captures_len: 4,",
                "        static_explicit_captures_len: None,",
                "        literal: false,",
                "        alternation_literal: false,",
                "    };",
                "    let properties = Properties(Box::new(properties_i));",
                "    properties.look_set();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(properties.look_set().bits, 0);",
                "    assert!(properties.look_set().bits <= 0xFFFF);",
                "    assert_eq!(properties.look_set().bits, properties.0.look_set.bits);",
                "    assert!(properties.look_set().is_some());",
                "    assert!(properties.look_set() == LookSet { bits: 0 });",
                "    assert!(properties.look_set().bits == properties.0.look_set.bits);"
              ],
              "code": [
                "{",
                "    let properties_i = PropertiesI {",
                "        minimum_len: Some(100),",
                "        maximum_len: Some(100),",
                "        look_set: LookSet { bits: 0 },",
                "        look_set_prefix: LookSet { bits: 0 },",
                "        look_set_suffix: LookSet { bits: 0 },",
                "        look_set_prefix_any: LookSet { bits: 0 },",
                "        look_set_suffix_any: LookSet { bits: 0 },",
                "        utf8: false,",
                "        explicit_captures_len: 4,",
                "        static_explicit_captures_len: None,",
                "        literal: false,",
                "        alternation_literal: false,",
                "    };",
                "    let properties = Properties(Box::new(properties_i));",
                "    properties.look_set();",
                "    assert_eq!(properties.look_set().bits, 0);",
                "    assert!(properties.look_set().bits <= 0xFFFF);",
                "    assert_eq!(properties.look_set().bits, properties.0.look_set.bits);",
                "    assert!(properties.look_set().is_some());",
                "    assert!(properties.look_set() == LookSet { bits: 0 });",
                "    assert!(properties.look_set().bits == properties.0.look_set.bits);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}