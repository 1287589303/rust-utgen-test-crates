{
  "name": "regex_syntax::unicode::property_set",
  "mod_info": {
    "name": "unicode",
    "loc": "regex-syntax/src/lib.rs:193:1:193:13"
  },
  "visible": false,
  "loc": "regex-syntax/src/unicode.rs:625:1:633:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "name_map must be a non-empty static slice of tuples where each tuple contains a static string and a static range, canonical must be a non-empty static string that exactly matches one of the static strings in name_map, and the expected return value is an Option<Range> that holds a valid range corresponding to the canonical input in the name_map.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    static NAME_MAP: &[(&str, Range)] = &[(\"ascii\", &[(0u8 as char, 127u8 as char)])];",
                "    let result = property_set(NAME_MAP, \"ascii\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(&[(0u8 as char, 127u8 as char)]));"
              ],
              "code": [
                "{",
                "    static NAME_MAP: &[(&str, Range)] = &[(\"ascii\", &[(0u8 as char, 127u8 as char)])];",
                "    let result = property_set(NAME_MAP, \"ascii\");",
                "    assert_eq!(result, Some(&[(0u8 as char, 127u8 as char)]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    static NAME_MAP: &[(&str, Range)] = &[",
                "        (\"ascii\", &[(0u8 as char, 127u8 as char)]),",
                "        (\"letters\", &[( 'A', 'Z'), ('a', 'z')]),",
                "    ];",
                "    let result = property_set(NAME_MAP, \"letters\");",
                "}"
              ],
              "oracle": [
                "    let expected_result = Some(&[( 'A', 'Z'), ('a', 'z')]);",
                "    assert_eq!(result, expected_result);"
              ],
              "code": [
                "{",
                "    static NAME_MAP: &[(&str, Range)] = &[",
                "        (\"ascii\", &[(0u8 as char, 127u8 as char)]),",
                "        (\"letters\", &[( 'A', 'Z'), ('a', 'z')]),",
                "    ];",
                "    let result = property_set(NAME_MAP, \"letters\");",
                "    let expected_result = Some(&[( 'A', 'Z'), ('a', 'z')]);",
                "    assert_eq!(result, expected_result);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    static NAME_MAP: &[(&str, Range)] = &[(\"empty\", &[])];",
                "    let result = property_set(NAME_MAP, \"empty\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(&[]));"
              ],
              "code": [
                "{",
                "    static NAME_MAP: &[(&str, Range)] = &[(\"empty\", &[])];",
                "    let result = property_set(NAME_MAP, \"empty\");",
                "    assert_eq!(result, Some(&[]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    static NAME_MAP: &[(&str, Range)] = &[(\"ascii\", &[(0u8 as char, 127u8 as char)])];",
                "    let result = property_set(NAME_MAP, \"nonexistent\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    static NAME_MAP: &[(&str, Range)] = &[(\"ascii\", &[(0u8 as char, 127u8 as char)])];",
                "    let result = property_set(NAME_MAP, \"nonexistent\");",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    static NAME_MAP: &[(&str, Range)] = &[(\"Ascii\", &[(0u8 as char, 127u8 as char)])];",
                "    let result = property_set(NAME_MAP, \"ascii\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);",
                "    assert!(result.is_none());",
                "    assert!(property_set(NAME_MAP, \"ascii\").is_none());",
                "    assert!(property_set(NAME_MAP, \"Ascii\").is_some());",
                "    assert_eq!(property_set(NAME_MAP, \"Ascii\"), Some(&[(0u8 as char, 127u8 as char)]));",
                "    assert_eq!(property_set(NAME_MAP, \"NonExistent\"), None);"
              ],
              "code": [
                "{",
                "    static NAME_MAP: &[(&str, Range)] = &[(\"Ascii\", &[(0u8 as char, 127u8 as char)])];",
                "    let result = property_set(NAME_MAP, \"ascii\");",
                "    assert_eq!(result, None);",
                "    assert!(result.is_none());",
                "    assert!(property_set(NAME_MAP, \"ascii\").is_none());",
                "    assert!(property_set(NAME_MAP, \"Ascii\").is_some());",
                "    assert_eq!(property_set(NAME_MAP, \"Ascii\"), Some(&[(0u8 as char, 127u8 as char)]));",
                "    assert_eq!(property_set(NAME_MAP, \"NonExistent\"), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}