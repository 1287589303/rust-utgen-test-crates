{
  "name": "regex_syntax::unicode::gencat",
  "mod_info": {
    "name": "unicode",
    "loc": "regex-syntax/src/lib.rs:193:1:193:13"
  },
  "visible": false,
  "loc": "regex-syntax/src/unicode.rs:699:1:726:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: canonical_name matches \"Decimal_Number\" at line 723 is true\n",
        "precondition: canonical_name matches \"Decimal_Number\" at line 722 is true\n"
      ],
      "input_infer": "canonical_name = \"Decimal_Number\"\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let canonical_name = \"Decimal_Number\";",
                "    let result = gencat(canonical_name);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), hir_class(DECIMAL_NUMBER));"
              ],
              "code": [
                "{",
                "    let canonical_name = \"Decimal_Number\";",
                "    let result = gencat(canonical_name);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), hir_class(DECIMAL_NUMBER));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let canonical_name = \"Invalid_Property\";",
                "    let result = gencat(canonical_name);",
                "}"
              ],
              "oracle": [
                "    let canonical_name = \"Decimal_Number\";",
                "    let result = gencat(canonical_name);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), hir_class(DECIMAL_NUMBER));",
                "    let canonical_name = \"ASCII\";",
                "    let result = gencat(canonical_name);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), hir_class(&[('\\0', '\\x7F')]));",
                "    let canonical_name = \"Any\";",
                "    let result = gencat(canonical_name);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), hir_class(&[('\\0', '\\u{10FFFF}]));",
                "    let canonical_name = \"Assigned\";",
                "    let result = gencat(canonical_name);",
                "    assert!(result.is_ok());",
                "    // Assuming Unassigned is a valid property, negation should not cause an error",
                "    let unassigned = gencat(\"Unassigned\").unwrap();",
                "    let cls = gencat(\"Assigned\").unwrap();",
                "    assert!(cls.is_negated());",
                "    let canonical_name = \"Invalid_Property\";",
                "    let result = gencat(canonical_name);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), Error::PropertyValueNotFound);"
              ],
              "code": [
                "{",
                "    let canonical_name = \"Invalid_Property\";",
                "    let result = gencat(canonical_name);",
                "    let canonical_name = \"Decimal_Number\";",
                "    let result = gencat(canonical_name);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), hir_class(DECIMAL_NUMBER));",
                "    let canonical_name = \"ASCII\";",
                "    let result = gencat(canonical_name);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), hir_class(&[('\\0', '\\x7F')]));",
                "    let canonical_name = \"Any\";",
                "    let result = gencat(canonical_name);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), hir_class(&[('\\0', '\\u{10FFFF}]));",
                "    let canonical_name = \"Assigned\";",
                "    let result = gencat(canonical_name);",
                "    assert!(result.is_ok());",
                "    // Assuming Unassigned is a valid property, negation should not cause an error",
                "    let unassigned = gencat(\"Unassigned\").unwrap();",
                "    let cls = gencat(\"Assigned\").unwrap();",
                "    assert!(cls.is_negated());",
                "    let canonical_name = \"Invalid_Property\";",
                "    let result = gencat(canonical_name);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), Error::PropertyValueNotFound);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: canonical_name matches \"Decimal_Number\" at line 723 is false\n"
      ],
      "input_infer": "canonical_name: any string other than \"Decimal_Number\" including valid Unicode category names like \"ASCII\", \"Any\", \"Assigned\", and invalid names to test for Error::PropertyNotFound or Error::PropertyValueNotFound.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = gencat(\"ASCII\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(hir_class(&[('\\0', '\\x7F')])));",
                "    assert!(result.is_ok());",
                "    assert!(matches!(result, Ok(_)));"
              ],
              "code": [
                "{",
                "    let result = gencat(\"ASCII\");",
                "    assert_eq!(result, Ok(hir_class(&[('\\0', '\\x7F')])));",
                "    assert!(result.is_ok());",
                "    assert!(matches!(result, Ok(_)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = gencat(\"Any\");",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    let class_unicode = result.unwrap();",
                "    assert_eq!(class_unicode, hir_class(&[('\\0', '\\u{10FFFF}]));"
              ],
              "code": [
                "{",
                "    let result = gencat(\"Any\");",
                "    assert!(result.is_ok());",
                "    let class_unicode = result.unwrap();",
                "    assert_eq!(class_unicode, hir_class(&[('\\0', '\\u{10FFFF}]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = gencat(\"Assigned\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.is_ok(), true);",
                "    assert!(matches!(result, Ok(_)));",
                "    assert!(matches!(result, Ok(hir::ClassUnicode {..})));",
                "    assert_ne!(result.err(), Some(Error::PropertyNotFound));",
                "    assert_ne!(result.err(), Some(Error::PropertyValueNotFound));"
              ],
              "code": [
                "{",
                "    let result = gencat(\"Assigned\");",
                "    assert_eq!(result.is_ok(), true);",
                "    assert!(matches!(result, Ok(_)));",
                "    assert!(matches!(result, Ok(hir::ClassUnicode {..})));",
                "    assert_ne!(result.err(), Some(Error::PropertyNotFound));",
                "    assert_ne!(result.err(), Some(Error::PropertyValueNotFound));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = gencat(\"Unassigned\");",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), Error::PropertyNotFound);"
              ],
              "code": [
                "{",
                "    let result = gencat(\"Unassigned\");",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), Error::PropertyNotFound);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = gencat(\"Invalid_Name\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(Error::PropertyNotFound));",
                "    let result = gencat(\"ASCII\");",
                "    assert!(result.is_ok());",
                "    let result = gencat(\"Any\");",
                "    assert!(result.is_ok());",
                "    let result = gencat(\"Assigned\");",
                "    assert!(result.is_ok());",
                "    let result = gencat(\"Some_Unknown_Property\");",
                "    assert_eq!(result, Err(Error::PropertyValueNotFound));",
                "    let result = gencat(\"Decimal_Number\");",
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "    let result = gencat(\"Invalid_Name\");",
                "    assert_eq!(result, Err(Error::PropertyNotFound));",
                "    let result = gencat(\"ASCII\");",
                "    assert!(result.is_ok());",
                "    let result = gencat(\"Any\");",
                "    assert!(result.is_ok());",
                "    let result = gencat(\"Assigned\");",
                "    assert!(result.is_ok());",
                "    let result = gencat(\"Some_Unknown_Property\");",
                "    assert_eq!(result, Err(Error::PropertyValueNotFound));",
                "    let result = gencat(\"Decimal_Number\");",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}