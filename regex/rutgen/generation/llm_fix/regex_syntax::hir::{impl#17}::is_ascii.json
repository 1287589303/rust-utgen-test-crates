{
  "name": "regex_syntax::hir::{impl#17}::is_ascii",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:1440:5:1442:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self.set must be a valid IntervalSet containing ClassBytesRange elements, ranges must be non-overlapping, start and end values should be between 0 and 255, include cases where the last range ends below 128 for true and one range ends above 128 for false.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class_bytes = ClassBytes::empty();",
                "    class_bytes.is_ascii();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_bytes.is_ascii(), true);",
                "    ",
                "    let class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 0x00, end: 0x20 }]);",
                "    assert_eq!(class_bytes.is_ascii(), true);",
                "    ",
                "    let class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 0x80, end: 0xFF }]);",
                "    assert_eq!(class_bytes.is_ascii(), false);",
                "    ",
                "    let class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 0x00, end: 0xFF }]);",
                "    assert_eq!(class_bytes.is_ascii(), false);",
                "    ",
                "    let class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 0x00, end: 0x7F }, ClassBytesRange { start: 0x80, end: 0xFF }]);",
                "    assert_eq!(class_bytes.is_ascii(), false);"
              ],
              "code": [
                "{",
                "    let class_bytes = ClassBytes::empty();",
                "    class_bytes.is_ascii();",
                "    assert_eq!(class_bytes.is_ascii(), true);",
                "    ",
                "    let class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 0x00, end: 0x20 }]);",
                "    assert_eq!(class_bytes.is_ascii(), true);",
                "    ",
                "    let class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 0x80, end: 0xFF }]);",
                "    assert_eq!(class_bytes.is_ascii(), false);",
                "    ",
                "    let class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 0x00, end: 0xFF }]);",
                "    assert_eq!(class_bytes.is_ascii(), false);",
                "    ",
                "    let class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 0x00, end: 0x7F }, ClassBytesRange { start: 0x80, end: 0xFF }]);",
                "    assert_eq!(class_bytes.is_ascii(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 0, end: 127 }]);",
                "    class_bytes.is_ascii();",
                "}"
              ],
              "oracle": [
                "    class_bytes.is_ascii() == true",
                "    class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 128, end: 255 }]); class_bytes.is_ascii() == false",
                "    class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 0, end: 126 }, ClassBytesRange { start: 127, end: 127 }]); class_bytes.is_ascii() == true",
                "    class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 0, end: 126 }, ClassBytesRange { start: 128, end: 128 }]); class_bytes.is_ascii() == false",
                "    class_bytes = ClassBytes::new(vec![]); class_bytes.is_ascii() == true",
                "    class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 0, end: 64 }, ClassBytesRange { start: 192, end: 255 }]); class_bytes.is_ascii() == false"
              ],
              "code": [
                "{",
                "    let class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 0, end: 127 }]);",
                "    class_bytes.is_ascii();",
                "    class_bytes.is_ascii() == true",
                "    class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 128, end: 255 }]); class_bytes.is_ascii() == false",
                "    class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 0, end: 126 }, ClassBytesRange { start: 127, end: 127 }]); class_bytes.is_ascii() == true",
                "    class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 0, end: 126 }, ClassBytesRange { start: 128, end: 128 }]); class_bytes.is_ascii() == false",
                "    class_bytes = ClassBytes::new(vec![]); class_bytes.is_ascii() == true",
                "    class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 0, end: 64 }, ClassBytesRange { start: 192, end: 255 }]); class_bytes.is_ascii() == false",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 128, end: 255 }]);",
                "    class_bytes.is_ascii();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_bytes.is_ascii(), false);",
                "    ",
                "    let class_bytes_empty = ClassBytes::empty();",
                "    assert_eq!(class_bytes_empty.is_ascii(), true);",
                "    ",
                "    let class_bytes_ascii = ClassBytes::new(vec![ClassBytesRange { start: 0, end: 127 }]);",
                "    assert_eq!(class_bytes_ascii.is_ascii(), true);",
                "    ",
                "    let class_bytes_combined = ClassBytes::new(vec![ClassBytesRange { start: 0, end: 127 }, ClassBytesRange { start: 128, end: 255 }]);",
                "    assert_eq!(class_bytes_combined.is_ascii(), false);",
                "    ",
                "    let class_bytes_single_ascii = ClassBytes::new(vec![ClassBytesRange { start: 0, end: 0 }]);",
                "    assert_eq!(class_bytes_single_ascii.is_ascii(), true);"
              ],
              "code": [
                "{",
                "    let class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 128, end: 255 }]);",
                "    class_bytes.is_ascii();",
                "    assert_eq!(class_bytes.is_ascii(), false);",
                "    ",
                "    let class_bytes_empty = ClassBytes::empty();",
                "    assert_eq!(class_bytes_empty.is_ascii(), true);",
                "    ",
                "    let class_bytes_ascii = ClassBytes::new(vec![ClassBytesRange { start: 0, end: 127 }]);",
                "    assert_eq!(class_bytes_ascii.is_ascii(), true);",
                "    ",
                "    let class_bytes_combined = ClassBytes::new(vec![ClassBytesRange { start: 0, end: 127 }, ClassBytesRange { start: 128, end: 255 }]);",
                "    assert_eq!(class_bytes_combined.is_ascii(), false);",
                "    ",
                "    let class_bytes_single_ascii = ClassBytes::new(vec![ClassBytesRange { start: 0, end: 0 }]);",
                "    assert_eq!(class_bytes_single_ascii.is_ascii(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class_bytes = ClassBytes::new(vec![",
                "        ClassBytesRange { start: 0, end: 127 },",
                "        ClassBytesRange { start: 128, end: 255 },",
                "    ]);",
                "    class_bytes.is_ascii();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_bytes.is_ascii(), false);",
                "    class_bytes.push(ClassBytesRange { start: 0, end: 127 });",
                "    assert_eq!(class_bytes.is_ascii(), false);",
                "    class_bytes.push(ClassBytesRange { start: 128, end: 128 });",
                "    assert_eq!(class_bytes.is_ascii(), false);",
                "    class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 0, end: 127 }]);",
                "    assert_eq!(class_bytes.is_ascii(), true);",
                "    class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 128, end: 255 }]);",
                "    assert_eq!(class_bytes.is_ascii(), false);",
                "    class_bytes = ClassBytes::empty();",
                "    assert_eq!(class_bytes.is_ascii(), true);"
              ],
              "code": [
                "{",
                "    let class_bytes = ClassBytes::new(vec![",
                "        ClassBytesRange { start: 0, end: 127 },",
                "        ClassBytesRange { start: 128, end: 255 },",
                "    ]);",
                "    class_bytes.is_ascii();",
                "    assert_eq!(class_bytes.is_ascii(), false);",
                "    class_bytes.push(ClassBytesRange { start: 0, end: 127 });",
                "    assert_eq!(class_bytes.is_ascii(), false);",
                "    class_bytes.push(ClassBytesRange { start: 128, end: 128 });",
                "    assert_eq!(class_bytes.is_ascii(), false);",
                "    class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 0, end: 127 }]);",
                "    assert_eq!(class_bytes.is_ascii(), true);",
                "    class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 128, end: 255 }]);",
                "    assert_eq!(class_bytes.is_ascii(), false);",
                "    class_bytes = ClassBytes::empty();",
                "    assert_eq!(class_bytes.is_ascii(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 127, end: 128 }]);",
                "    class_bytes.is_ascii();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_bytes.is_ascii(), false);",
                "    let class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 0, end: 127 }]);",
                "    assert_eq!(class_bytes.is_ascii(), true);",
                "    let class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 65, end: 90 }]);",
                "    assert_eq!(class_bytes.is_ascii(), true);",
                "    let class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 128, end: 255 }]);",
                "    assert_eq!(class_bytes.is_ascii(), false);",
                "    let class_bytes = ClassBytes::empty();",
                "    assert_eq!(class_bytes.is_ascii(), true);",
                "    let class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 0, end: 255 }]);",
                "    assert_eq!(class_bytes.is_ascii(), false);"
              ],
              "code": [
                "{",
                "    let class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 127, end: 128 }]);",
                "    class_bytes.is_ascii();",
                "    assert_eq!(class_bytes.is_ascii(), false);",
                "    let class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 0, end: 127 }]);",
                "    assert_eq!(class_bytes.is_ascii(), true);",
                "    let class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 65, end: 90 }]);",
                "    assert_eq!(class_bytes.is_ascii(), true);",
                "    let class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 128, end: 255 }]);",
                "    assert_eq!(class_bytes.is_ascii(), false);",
                "    let class_bytes = ClassBytes::empty();",
                "    assert_eq!(class_bytes.is_ascii(), true);",
                "    let class_bytes = ClassBytes::new(vec![ClassBytesRange { start: 0, end: 255 }]);",
                "    assert_eq!(class_bytes.is_ascii(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class_bytes = ClassBytes::new(vec![",
                "        ClassBytesRange { start: 0, end: 64 },",
                "        ClassBytesRange { start: 65, end: 127 },",
                "    ]);",
                "    class_bytes.is_ascii();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_bytes.is_ascii(), true);",
                "    let class_bytes_non_ascii = ClassBytes::new(vec![ClassBytesRange { start: 128, end: 200 }]);",
                "    assert_eq!(class_bytes_non_ascii.is_ascii(), false);",
                "    let class_bytes_mixed = ClassBytes::new(vec![",
                "    ClassBytesRange { start: 0, end: 64 },",
                "    ClassBytesRange { start: 128, end: 255 },",
                "    ]);",
                "    assert_eq!(class_bytes_mixed.is_ascii(), false);",
                "    let class_bytes_empty = ClassBytes::empty();",
                "    assert_eq!(class_bytes_empty.is_ascii(), true);",
                "    let class_bytes_single_non_ascii = ClassBytes::new(vec![ClassBytesRange { start: 200, end: 255 }]);",
                "    assert_eq!(class_bytes_single_non_ascii.is_ascii(), false);",
                "    let class_bytes_single_ascii = ClassBytes::new(vec![ClassBytesRange { start: 0, end: 127 }]);",
                "    assert_eq!(class_bytes_single_ascii.is_ascii(), true);"
              ],
              "code": [
                "{",
                "    let class_bytes = ClassBytes::new(vec![",
                "        ClassBytesRange { start: 0, end: 64 },",
                "        ClassBytesRange { start: 65, end: 127 },",
                "    ]);",
                "    class_bytes.is_ascii();",
                "    assert_eq!(class_bytes.is_ascii(), true);",
                "    let class_bytes_non_ascii = ClassBytes::new(vec![ClassBytesRange { start: 128, end: 200 }]);",
                "    assert_eq!(class_bytes_non_ascii.is_ascii(), false);",
                "    let class_bytes_mixed = ClassBytes::new(vec![",
                "    ClassBytesRange { start: 0, end: 64 },",
                "    ClassBytesRange { start: 128, end: 255 },",
                "    ]);",
                "    assert_eq!(class_bytes_mixed.is_ascii(), false);",
                "    let class_bytes_empty = ClassBytes::empty();",
                "    assert_eq!(class_bytes_empty.is_ascii(), true);",
                "    let class_bytes_single_non_ascii = ClassBytes::new(vec![ClassBytesRange { start: 200, end: 255 }]);",
                "    assert_eq!(class_bytes_single_non_ascii.is_ascii(), false);",
                "    let class_bytes_single_ascii = ClassBytes::new(vec![ClassBytesRange { start: 0, end: 127 }]);",
                "    assert_eq!(class_bytes_single_ascii.is_ascii(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}