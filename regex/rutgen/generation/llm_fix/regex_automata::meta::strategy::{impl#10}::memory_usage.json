{
  "name": "regex_automata::meta::strategy::{impl#10}::memory_usage",
  "mod_info": {
    "name": "meta::strategy",
    "loc": "regex-automata/src/meta/mod.rs:61:1:61:14"
  },
  "visible": false,
  "loc": "regex-automata/src/meta/strategy.rs:1775:5:1780:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.core.memory_usage()\n            + self.preinner.memory_usage()\n            + self.nfarev.memory_usage()\n            + self.dfa.memory_usage()\n"
      ],
      "input_infer": "self.core.memory_usage() >= 0, self.preinner.memory_usage() >= 0, self.nfarev.memory_usage() >= 0, self.dfa.memory_usage() >= 0, self.preinner.max_needle_len >= 0\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let core = Core { info: RegexInfo::default(), pre: None, nfa: NFA::always_match(), nfarev: None, pikevm: wrappers::PikeVM::default(), backtrack: wrappers::BoundedBacktracker::default(), onepass: wrappers::OnePass::default(), hybrid: wrappers::Hybrid::default(), dfa: wrappers::DFA::default() };",
                "    let preinner = Prefilter { pre: Arc::new(PrefilterI::default()), is_fast: false, max_needle_len: 0 };",
                "    let nfarev = NFA::never_match();",
                "    let dfa = wrappers::ReverseDFA::none();",
                "    let strategy = ReverseInner { core, preinner, nfarev, hybrid: wrappers::ReverseHybrid::default(), dfa };",
                "    let result = strategy.memory_usage();",
                "}"
              ],
              "oracle": [
                "    let core_memory_usage = strategy.core.memory_usage();",
                "    let preinner_memory_usage = strategy.preinner.memory_usage();",
                "    let nfarev_memory_usage = strategy.nfarev.memory_usage();",
                "    let dfa_memory_usage = strategy.dfa.memory_usage();",
                "    let expected_memory_usage = core_memory_usage + preinner_memory_usage + nfarev_memory_usage + dfa_memory_usage;",
                "    assert_eq!(result, expected_memory_usage);"
              ],
              "code": [
                "{",
                "    let core = Core { info: RegexInfo::default(), pre: None, nfa: NFA::always_match(), nfarev: None, pikevm: wrappers::PikeVM::default(), backtrack: wrappers::BoundedBacktracker::default(), onepass: wrappers::OnePass::default(), hybrid: wrappers::Hybrid::default(), dfa: wrappers::DFA::default() };",
                "    let preinner = Prefilter { pre: Arc::new(PrefilterI::default()), is_fast: false, max_needle_len: 0 };",
                "    let nfarev = NFA::never_match();",
                "    let dfa = wrappers::ReverseDFA::none();",
                "    let strategy = ReverseInner { core, preinner, nfarev, hybrid: wrappers::ReverseHybrid::default(), dfa };",
                "    let result = strategy.memory_usage();",
                "    let core_memory_usage = strategy.core.memory_usage();",
                "    let preinner_memory_usage = strategy.preinner.memory_usage();",
                "    let nfarev_memory_usage = strategy.nfarev.memory_usage();",
                "    let dfa_memory_usage = strategy.dfa.memory_usage();",
                "    let expected_memory_usage = core_memory_usage + preinner_memory_usage + nfarev_memory_usage + dfa_memory_usage;",
                "    assert_eq!(result, expected_memory_usage);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let core = Core { info: RegexInfo::default(), pre: None, nfa: NFA::new(\"test\").unwrap(), nfarev: Some(NFA::new(\"pattern\").unwrap()), pikevm: wrappers::PikeVM::default(), backtrack: wrappers::BoundedBacktracker::default(), onepass: wrappers::OnePass::default(), hybrid: wrappers::Hybrid::default(), dfa: wrappers::DFA::default() };",
                "    let preinner = Prefilter { pre: Arc::new(PrefilterI::default()), is_fast: true, max_needle_len: 10 };",
                "    let nfarev = NFA::new(\"reverse\").unwrap();",
                "    let dfa = wrappers::ReverseDFA::new(&core.info, &nfarev);",
                "    let strategy = ReverseInner { core, preinner, nfarev, hybrid: wrappers::ReverseHybrid::default(), dfa };",
                "    let result = strategy.memory_usage();",
                "}"
              ],
              "oracle": [
                "    let core_usage = strategy.core.memory_usage();",
                "    let preinner_usage = strategy.preinner.memory_usage();",
                "    let nfarev_usage = strategy.nfarev.memory_usage();",
                "    let dfa_usage = strategy.dfa.memory_usage();",
                "    let expected_result = core_usage + preinner_usage + nfarev_usage + dfa_usage;",
                "    assert_eq!(result, expected_result);"
              ],
              "code": [
                "{",
                "    let core = Core { info: RegexInfo::default(), pre: None, nfa: NFA::new(\"test\").unwrap(), nfarev: Some(NFA::new(\"pattern\").unwrap()), pikevm: wrappers::PikeVM::default(), backtrack: wrappers::BoundedBacktracker::default(), onepass: wrappers::OnePass::default(), hybrid: wrappers::Hybrid::default(), dfa: wrappers::DFA::default() };",
                "    let preinner = Prefilter { pre: Arc::new(PrefilterI::default()), is_fast: true, max_needle_len: 10 };",
                "    let nfarev = NFA::new(\"reverse\").unwrap();",
                "    let dfa = wrappers::ReverseDFA::new(&core.info, &nfarev);",
                "    let strategy = ReverseInner { core, preinner, nfarev, hybrid: wrappers::ReverseHybrid::default(), dfa };",
                "    let result = strategy.memory_usage();",
                "    let core_usage = strategy.core.memory_usage();",
                "    let preinner_usage = strategy.preinner.memory_usage();",
                "    let nfarev_usage = strategy.nfarev.memory_usage();",
                "    let dfa_usage = strategy.dfa.memory_usage();",
                "    let expected_result = core_usage + preinner_usage + nfarev_usage + dfa_usage;",
                "    assert_eq!(result, expected_result);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let core = Core { info: RegexInfo::default(), pre: None, nfa: NFA::new(\"complex_regex\").unwrap(), nfarev: Some(NFA::new(\"reverse_complex\").unwrap()), pikevm: wrappers::PikeVM::default(), backtrack: wrappers::BoundedBacktracker::default(), onepass: wrappers::OnePass::default(), hybrid: wrappers::Hybrid::default(), dfa: wrappers::DFA::default() };",
                "    let preinner = Prefilter { pre: Arc::new(PrefilterI::default()), is_fast: true, max_needle_len: 100 };",
                "    let nfarev = NFA::new(\"some_pattern\").unwrap();",
                "    let dfa = wrappers::ReverseDFA::new(&core.info, &nfarev);",
                "    let strategy = ReverseInner { core, preinner, nfarev, hybrid: wrappers::ReverseHybrid::default(), dfa };",
                "    let result = strategy.memory_usage();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(strategy.core.memory_usage(), expected_core_memory_usage);",
                "    assert_eq!(strategy.preinner.memory_usage(), expected_preinner_memory_usage);",
                "    assert_eq!(strategy.nfarev.memory_usage(), expected_nfarev_memory_usage);",
                "    assert_eq!(strategy.dfa.memory_usage(), expected_dfa_memory_usage);",
                "    assert_eq!(result, expected_core_memory_usage + expected_preinner_memory_usage + expected_nfarev_memory_usage + expected_dfa_memory_usage);"
              ],
              "code": [
                "{",
                "    let core = Core { info: RegexInfo::default(), pre: None, nfa: NFA::new(\"complex_regex\").unwrap(), nfarev: Some(NFA::new(\"reverse_complex\").unwrap()), pikevm: wrappers::PikeVM::default(), backtrack: wrappers::BoundedBacktracker::default(), onepass: wrappers::OnePass::default(), hybrid: wrappers::Hybrid::default(), dfa: wrappers::DFA::default() };",
                "    let preinner = Prefilter { pre: Arc::new(PrefilterI::default()), is_fast: true, max_needle_len: 100 };",
                "    let nfarev = NFA::new(\"some_pattern\").unwrap();",
                "    let dfa = wrappers::ReverseDFA::new(&core.info, &nfarev);",
                "    let strategy = ReverseInner { core, preinner, nfarev, hybrid: wrappers::ReverseHybrid::default(), dfa };",
                "    let result = strategy.memory_usage();",
                "    assert_eq!(strategy.core.memory_usage(), expected_core_memory_usage);",
                "    assert_eq!(strategy.preinner.memory_usage(), expected_preinner_memory_usage);",
                "    assert_eq!(strategy.nfarev.memory_usage(), expected_nfarev_memory_usage);",
                "    assert_eq!(strategy.dfa.memory_usage(), expected_dfa_memory_usage);",
                "    assert_eq!(result, expected_core_memory_usage + expected_preinner_memory_usage + expected_nfarev_memory_usage + expected_dfa_memory_usage);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}