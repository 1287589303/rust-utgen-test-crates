{
  "name": "regex_automata::util::captures::{impl#0}::interpolate_bytes_into",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/captures.rs:874:5:892:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "GroupInfo with valid Arc<GroupInfoInner>, haystack of non-empty &[u8], replacement with valid references like b\"year=$year\", and dst initialized as mutable Vec<u8> with a size that can accommodate interpolated results.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockGroupInfo;",
                "    let group_info = GroupInfo(Arc::new(MockGroupInfo));",
                "",
                "    let haystack: &[u8] = b\"On 14-03-2010, I became a Tenneessee lamb.\";",
                "    let replacement: &[u8] = b\"year=$year, month=$month, day=$day\";",
                "    let mut dst: Vec<u8> = Vec::new();",
                "",
                "    let captures = Captures { group_info, pid: Some(PatternID(SmallIndex(0))), slots: vec![Some(NonMaxUsize(NonZeroUsize::new(0).unwrap()))] };",
                "    captures.interpolate_bytes_into(haystack, replacement, &mut dst);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(&dst[..], b\"year=2010, month=03, day=14\");",
                "    let captures_empty = Captures { group_info, pid: None, slots: vec![None] };",
                "    captures_empty.interpolate_bytes_into(haystack, replacement, &mut dst);",
                "    assert!(dst.is_empty());",
                "    let captures_no_match = Captures { group_info, pid: Some(PatternID(SmallIndex(1))), slots: vec![None] };",
                "    captures_no_match.interpolate_bytes_into(haystack, replacement, &mut dst);",
                "    assert_eq!(&dst[..], b\"year=$year, month=$month, day=$day\");",
                "    let captures_multiple_patterns = Captures { group_info, pid: Some(PatternID(SmallIndex(0))), slots: vec![Some(NonMaxUsize(NonZeroUsize::new(0).unwrap())), Some(NonMaxUsize(NonZeroUsize::new(1).unwrap()))] };",
                "    let replacement_multiple = b\"day=$day, year=$year\";",
                "    let mut dst_multiple: Vec<u8> = Vec::new();",
                "    captures_multiple_patterns.interpolate_bytes_into(haystack, replacement_multiple, &mut dst_multiple);",
                "    assert_eq!(&dst_multiple[..], b\"day=14, year=2010\");"
              ],
              "code": [
                "{",
                "    struct MockGroupInfo;",
                "    let group_info = GroupInfo(Arc::new(MockGroupInfo));",
                "",
                "    let haystack: &[u8] = b\"On 14-03-2010, I became a Tenneessee lamb.\";",
                "    let replacement: &[u8] = b\"year=$year, month=$month, day=$day\";",
                "    let mut dst: Vec<u8> = Vec::new();",
                "",
                "    let captures = Captures { group_info, pid: Some(PatternID(SmallIndex(0))), slots: vec![Some(NonMaxUsize(NonZeroUsize::new(0).unwrap()))] };",
                "    captures.interpolate_bytes_into(haystack, replacement, &mut dst);",
                "    assert_eq!(&dst[..], b\"year=2010, month=03, day=14\");",
                "    let captures_empty = Captures { group_info, pid: None, slots: vec![None] };",
                "    captures_empty.interpolate_bytes_into(haystack, replacement, &mut dst);",
                "    assert!(dst.is_empty());",
                "    let captures_no_match = Captures { group_info, pid: Some(PatternID(SmallIndex(1))), slots: vec![None] };",
                "    captures_no_match.interpolate_bytes_into(haystack, replacement, &mut dst);",
                "    assert_eq!(&dst[..], b\"year=$year, month=$month, day=$day\");",
                "    let captures_multiple_patterns = Captures { group_info, pid: Some(PatternID(SmallIndex(0))), slots: vec![Some(NonMaxUsize(NonZeroUsize::new(0).unwrap())), Some(NonMaxUsize(NonZeroUsize::new(1).unwrap()))] };",
                "    let replacement_multiple = b\"day=$day, year=$year\";",
                "    let mut dst_multiple: Vec<u8> = Vec::new();",
                "    captures_multiple_patterns.interpolate_bytes_into(haystack, replacement_multiple, &mut dst_multiple);",
                "    assert_eq!(&dst_multiple[..], b\"day=14, year=2010\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockGroupInfo;",
                "    let group_info = GroupInfo(Arc::new(MockGroupInfo));",
                "",
                "    let haystack: &[u8] = b\"\";",
                "    let replacement: &[u8] = b\"year=$year, month=$month, day=$day\";",
                "    let mut dst: Vec<u8> = Vec::new();",
                "",
                "    let captures = Captures { group_info, pid: Some(PatternID(SmallIndex(0))), slots: vec![Some(NonMaxUsize(NonZeroUsize::new(0).unwrap()))] };",
                "    captures.interpolate_bytes_into(haystack, replacement, &mut dst);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dst, b\"year=, month=, day=\");",
                "    assert!(captures.get_group(0).is_none());",
                "    assert_eq!(captures.pattern(), Some(PatternID(SmallIndex(0))));",
                "    assert_eq!(captures.group_len(), 1);",
                "    assert!(captures.get_group_by_name(\"year\").is_none());",
                "    assert!(captures.get_group_by_name(\"month\").is_none());",
                "    assert!(captures.get_group_by_name(\"day\").is_none());",
                "    assert!(captures.is_match() == false);",
                "    assert_eq!(captures.slots.len(), 1);",
                "    assert_eq!(captures.group_info().0, group_info.0);",
                "    assert!(captures.get_match().is_none());",
                "    assert!(captures.iter().count() == 0);",
                "    assert!(captures.interpolate_string(\"\", \"\") == \"\");",
                "    assert!(captures.interpolate_string_into(\"\", \"\", &mut String::new()) == ());",
                "    assert!(captures.empty(group_info.clone()).group_len() == 0);",
                "    assert!(captures.all(group_info.clone()).group_len() == 1);",
                "    assert!(captures.matches(group_info.clone()).group_len() == 1);"
              ],
              "code": [
                "{",
                "    struct MockGroupInfo;",
                "    let group_info = GroupInfo(Arc::new(MockGroupInfo));",
                "",
                "    let haystack: &[u8] = b\"\";",
                "    let replacement: &[u8] = b\"year=$year, month=$month, day=$day\";",
                "    let mut dst: Vec<u8> = Vec::new();",
                "",
                "    let captures = Captures { group_info, pid: Some(PatternID(SmallIndex(0))), slots: vec![Some(NonMaxUsize(NonZeroUsize::new(0).unwrap()))] };",
                "    captures.interpolate_bytes_into(haystack, replacement, &mut dst);",
                "    assert_eq!(dst, b\"year=, month=, day=\");",
                "    assert!(captures.get_group(0).is_none());",
                "    assert_eq!(captures.pattern(), Some(PatternID(SmallIndex(0))));",
                "    assert_eq!(captures.group_len(), 1);",
                "    assert!(captures.get_group_by_name(\"year\").is_none());",
                "    assert!(captures.get_group_by_name(\"month\").is_none());",
                "    assert!(captures.get_group_by_name(\"day\").is_none());",
                "    assert!(captures.is_match() == false);",
                "    assert_eq!(captures.slots.len(), 1);",
                "    assert_eq!(captures.group_info().0, group_info.0);",
                "    assert!(captures.get_match().is_none());",
                "    assert!(captures.iter().count() == 0);",
                "    assert!(captures.interpolate_string(\"\", \"\") == \"\");",
                "    assert!(captures.interpolate_string_into(\"\", \"\", &mut String::new()) == ());",
                "    assert!(captures.empty(group_info.clone()).group_len() == 0);",
                "    assert!(captures.all(group_info.clone()).group_len() == 1);",
                "    assert!(captures.matches(group_info.clone()).group_len() == 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockGroupInfo;",
                "    let group_info = GroupInfo(Arc::new(MockGroupInfo));",
                "",
                "    let haystack: &[u8] = b\"Any text example.\";",
                "    let replacement: &[u8] = b\"No groups here.\";",
                "    let mut dst: Vec<u8> = Vec::new();",
                "",
                "    let captures = Captures { group_info, pid: Some(PatternID(SmallIndex(0))), slots: vec![Some(NonMaxUsize(NonZeroUsize::new(0).unwrap()))] };",
                "    captures.interpolate_bytes_into(haystack, replacement, &mut dst);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(&dst[..], b\"No groups here.\");",
                "    assert!(captures.get_match().is_none());",
                "    assert_eq!(captures.group_len(), 1);",
                "    assert_eq!(captures.pattern(), Some(PatternID(SmallIndex(0))));",
                "    assert_eq!(captures.get_group(0), None);"
              ],
              "code": [
                "{",
                "    struct MockGroupInfo;",
                "    let group_info = GroupInfo(Arc::new(MockGroupInfo));",
                "",
                "    let haystack: &[u8] = b\"Any text example.\";",
                "    let replacement: &[u8] = b\"No groups here.\";",
                "    let mut dst: Vec<u8> = Vec::new();",
                "",
                "    let captures = Captures { group_info, pid: Some(PatternID(SmallIndex(0))), slots: vec![Some(NonMaxUsize(NonZeroUsize::new(0).unwrap()))] };",
                "    captures.interpolate_bytes_into(haystack, replacement, &mut dst);",
                "    assert_eq!(&dst[..], b\"No groups here.\");",
                "    assert!(captures.get_match().is_none());",
                "    assert_eq!(captures.group_len(), 1);",
                "    assert_eq!(captures.pattern(), Some(PatternID(SmallIndex(0))));",
                "    assert_eq!(captures.get_group(0), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockGroupInfo;",
                "    let group_info = GroupInfo(Arc::new(MockGroupInfo));",
                "",
                "    let haystack: &[u8] = b\"Boundary test example.\";",
                "    let replacement: &[u8] = b\"$$$\";",
                "    let mut dst: Vec<u8> = Vec::new();",
                "",
                "    let captures = Captures { group_info, pid: Some(PatternID(SmallIndex(0))), slots: vec![Some(NonMaxUsize(NonZeroUsize::new(0).unwrap()))] };",
                "    captures.interpolate_bytes_into(haystack, replacement, &mut dst);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dst, b\"$$$\");",
                "    assert_eq!(captures.get_group(0), None);",
                "    assert_eq!(captures.pattern(), Some(PatternID(SmallIndex(0))));",
                "    assert!(captures.is_match());",
                "    assert_eq!(captures.group_len(), 1);"
              ],
              "code": [
                "{",
                "    struct MockGroupInfo;",
                "    let group_info = GroupInfo(Arc::new(MockGroupInfo));",
                "",
                "    let haystack: &[u8] = b\"Boundary test example.\";",
                "    let replacement: &[u8] = b\"$$$\";",
                "    let mut dst: Vec<u8> = Vec::new();",
                "",
                "    let captures = Captures { group_info, pid: Some(PatternID(SmallIndex(0))), slots: vec![Some(NonMaxUsize(NonZeroUsize::new(0).unwrap()))] };",
                "    captures.interpolate_bytes_into(haystack, replacement, &mut dst);",
                "    assert_eq!(dst, b\"$$$\");",
                "    assert_eq!(captures.get_group(0), None);",
                "    assert_eq!(captures.pattern(), Some(PatternID(SmallIndex(0))));",
                "    assert!(captures.is_match());",
                "    assert_eq!(captures.group_len(), 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}