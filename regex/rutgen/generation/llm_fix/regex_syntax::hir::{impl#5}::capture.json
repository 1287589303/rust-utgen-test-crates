{
  "name": "regex_syntax::hir::{impl#5}::capture",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:407:5:410:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Hir { kind: HirKind::Capture(capture), props }\n"
      ],
      "input_infer": "Capture index: u32 >= 0; Capture name: Option<Box<str>> (null or non-empty string); Capture sub: Box<Hir> (non-null Hir instance)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let sub_expression = Hir::empty();",
                "    let capture = Capture {",
                "        index: 0,",
                "        name: None,",
                "        sub: Box::new(sub_expression),",
                "    };",
                "    Hir::capture(capture);",
                "}"
              ],
              "oracle": [
                "    Hir::capture(Capture { index: 0, name: None, sub: Box::new(Hir::empty()) }); // expected Hir { kind: HirKind::Capture(capture), props }",
                "    assert_eq!(Hir::capture(Capture { index: 0, name: None, sub: Box::new(Hir::empty()) }).kind, HirKind::Capture(Capture { index: 0, name: None, sub: Box::new(Hir::empty()) })); // validate capture kind",
                "    assert_eq!(Hir::capture(Capture { index: 0, name: None, sub: Box::new(Hir::empty()) }).props, Properties::capture(&Capture { index: 0, name: None, sub: Box::new(Hir::empty()) })); // validate properties"
              ],
              "code": [
                "{",
                "    let sub_expression = Hir::empty();",
                "    let capture = Capture {",
                "        index: 0,",
                "        name: None,",
                "        sub: Box::new(sub_expression),",
                "    };",
                "    Hir::capture(capture);",
                "    Hir::capture(Capture { index: 0, name: None, sub: Box::new(Hir::empty()) }); // expected Hir { kind: HirKind::Capture(capture), props }",
                "    assert_eq!(Hir::capture(Capture { index: 0, name: None, sub: Box::new(Hir::empty()) }).kind, HirKind::Capture(Capture { index: 0, name: None, sub: Box::new(Hir::empty()) })); // validate capture kind",
                "    assert_eq!(Hir::capture(Capture { index: 0, name: None, sub: Box::new(Hir::empty()) }).props, Properties::capture(&Capture { index: 0, name: None, sub: Box::new(Hir::empty()) })); // validate properties",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let sub_expression = Hir::empty();",
                "    let capture = Capture {",
                "        index: 1,",
                "        name: Some(Box::new(\"test\".to_string())),",
                "        sub: Box::new(sub_expression),",
                "    };",
                "    Hir::capture(capture);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Hir::capture(capture), Hir { kind: HirKind::Capture(capture), props: Properties::capture(&capture) });"
              ],
              "code": [
                "{",
                "    let sub_expression = Hir::empty();",
                "    let capture = Capture {",
                "        index: 1,",
                "        name: Some(Box::new(\"test\".to_string())),",
                "        sub: Box::new(sub_expression),",
                "    };",
                "    Hir::capture(capture);",
                "    assert_eq!(Hir::capture(capture), Hir { kind: HirKind::Capture(capture), props: Properties::capture(&capture) });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let sub_expression = Hir::literal(\"test\");",
                "    let capture = Capture {",
                "        index: u32::MAX,",
                "        name: None,",
                "        sub: Box::new(sub_expression),",
                "    };",
                "    Hir::capture(capture);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Hir::capture(Capture { index: u32::MAX, name: None, sub: Box::new(Hir::literal(\"test\")) }), Hir { kind: HirKind::Capture(Capture { index: u32::MAX, name: None, sub: Box::new(Hir::literal(\"test\")) }), props: Properties::capture(&Capture { index: u32::MAX, name: None, sub: Box::new(Hir::literal(\"test\")) }) });"
              ],
              "code": [
                "{",
                "    let sub_expression = Hir::literal(\"test\");",
                "    let capture = Capture {",
                "        index: u32::MAX,",
                "        name: None,",
                "        sub: Box::new(sub_expression),",
                "    };",
                "    Hir::capture(capture);",
                "    assert_eq!(Hir::capture(Capture { index: u32::MAX, name: None, sub: Box::new(Hir::literal(\"test\")) }), Hir { kind: HirKind::Capture(Capture { index: u32::MAX, name: None, sub: Box::new(Hir::literal(\"test\")) }), props: Properties::capture(&Capture { index: u32::MAX, name: None, sub: Box::new(Hir::literal(\"test\")) }) });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let sub_expression = Hir::fail();",
                "    let capture = Capture {",
                "        index: 2,",
                "        name: Some(Box::new(\"\".to_string())),",
                "        sub: Box::new(sub_expression),",
                "    };",
                "    Hir::capture(capture);",
                "}"
              ],
              "oracle": [
                "    let sub_expression = Hir::fail();",
                "    let capture = Capture { index: 2, name: Some(Box::new(\"\".to_string())), sub: Box::new(sub_expression) };",
                "    let result = Hir::capture(capture);",
                "    assert_eq!(result.kind, HirKind::Capture(capture));",
                "    assert_eq!(result.props, Properties::capture(&capture));"
              ],
              "code": [
                "{",
                "    let sub_expression = Hir::fail();",
                "    let capture = Capture {",
                "        index: 2,",
                "        name: Some(Box::new(\"\".to_string())),",
                "        sub: Box::new(sub_expression),",
                "    };",
                "    Hir::capture(capture);",
                "    let sub_expression = Hir::fail();",
                "    let capture = Capture { index: 2, name: Some(Box::new(\"\".to_string())), sub: Box::new(sub_expression) };",
                "    let result = Hir::capture(capture);",
                "    assert_eq!(result.kind, HirKind::Capture(capture));",
                "    assert_eq!(result.props, Properties::capture(&capture));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let sub_expression = Hir::empty();",
                "    let capture = Capture {",
                "        index: 3,",
                "        name: Some(Box::new(\"valid\".to_string())),",
                "        sub: Box::new(sub_expression),",
                "    };",
                "    Hir::capture(capture);",
                "}"
              ],
              "oracle": [
                "    Hir::capture(Capture { index: 3, name: Some(Box::new(\"valid\".to_string())), sub: Box::new(Hir::empty()) }); // should return Hir { kind: HirKind::Capture(capture), props }",
                "    Hir::capture(Capture { index: 0, name: None, sub: Box::new(Hir::empty()) }); // should return Hir { kind: HirKind::Capture(capture), props }",
                "    Hir::capture(Capture { index: 1, name: Some(Box::new(\"test\".to_string())), sub: Box::new(Hir::literal(Box::new(b\"test\"[..]))) }); // should return Hir { kind: HirKind::Capture(capture), props }",
                "    Hir::capture(Capture { index: 2, name: None, sub: Box::new(Hir::dot()) }); // should return Hir { kind: HirKind::Capture(capture), props }",
                "    Hir::capture(Capture { index: 5, name: Some(Box::new(\"example\".to_string())), sub: Box::new(Hir::class(Class::CharacterClass(vec!['a', 'b', 'c'].into()))) }); // should return Hir { kind: HirKind::Capture(capture), props }"
              ],
              "code": [
                "{",
                "    let sub_expression = Hir::empty();",
                "    let capture = Capture {",
                "        index: 3,",
                "        name: Some(Box::new(\"valid\".to_string())),",
                "        sub: Box::new(sub_expression),",
                "    };",
                "    Hir::capture(capture);",
                "    Hir::capture(Capture { index: 3, name: Some(Box::new(\"valid\".to_string())), sub: Box::new(Hir::empty()) }); // should return Hir { kind: HirKind::Capture(capture), props }",
                "    Hir::capture(Capture { index: 0, name: None, sub: Box::new(Hir::empty()) }); // should return Hir { kind: HirKind::Capture(capture), props }",
                "    Hir::capture(Capture { index: 1, name: Some(Box::new(\"test\".to_string())), sub: Box::new(Hir::literal(Box::new(b\"test\"[..]))) }); // should return Hir { kind: HirKind::Capture(capture), props }",
                "    Hir::capture(Capture { index: 2, name: None, sub: Box::new(Hir::dot()) }); // should return Hir { kind: HirKind::Capture(capture), props }",
                "    Hir::capture(Capture { index: 5, name: Some(Box::new(\"example\".to_string())), sub: Box::new(Hir::class(Class::CharacterClass(vec!['a', 'b', 'c'].into()))) }); // should return Hir { kind: HirKind::Capture(capture), props }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}