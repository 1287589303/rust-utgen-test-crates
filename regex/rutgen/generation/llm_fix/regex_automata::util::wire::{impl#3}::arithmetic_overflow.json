{
  "name": "regex_automata::util::wire::{impl#3}::arithmetic_overflow",
  "mod_info": {
    "name": "util::wire",
    "loc": "regex-automata/src/util/mod.rs:46:1:46:14"
  },
  "visible": false,
  "loc": "regex-automata/src/util/wire.rs:195:5:197:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: DeserializeError(DeserializeErrorKind::ArithmeticOverflow { what })\n"
      ],
      "input_infer": "what: non-empty string with a maximum length to avoid potential string literal issues (e.g., 1 to 255 characters)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let test_input = \"short\";",
                "    let result = DeserializeError::arithmetic_overflow(test_input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, DeserializeError(DeserializeErrorKind::ArithmeticOverflow { what: \"short\" }));"
              ],
              "code": [
                "{",
                "    let test_input = \"short\";",
                "    let result = DeserializeError::arithmetic_overflow(test_input);",
                "    assert_eq!(result, DeserializeError(DeserializeErrorKind::ArithmeticOverflow { what: \"short\" }));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let test_input = \"this is a medium length test string for arithmetic overflow.\";",
                "    let result = DeserializeError::arithmetic_overflow(test_input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.0, DeserializeErrorKind::ArithmeticOverflow { what: test_input });"
              ],
              "code": [
                "{",
                "    let test_input = \"this is a medium length test string for arithmetic overflow.\";",
                "    let result = DeserializeError::arithmetic_overflow(test_input);",
                "    assert_eq!(result.0, DeserializeErrorKind::ArithmeticOverflow { what: test_input });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let test_input = \"a\".repeat(255);",
                "    let result = DeserializeError::arithmetic_overflow(&test_input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, DeserializeError(DeserializeErrorKind::ArithmeticOverflow { what: \"a\".repeat(255) }));"
              ],
              "code": [
                "{",
                "    let test_input = \"a\".repeat(255);",
                "    let result = DeserializeError::arithmetic_overflow(&test_input);",
                "    assert_eq!(result, DeserializeError(DeserializeErrorKind::ArithmeticOverflow { what: \"a\".repeat(255) }));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let test_input = \"\";",
                "    let result = DeserializeError::arithmetic_overflow(test_input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, DeserializeError(DeserializeErrorKind::ArithmeticOverflow { what: test_input }));"
              ],
              "code": [
                "{",
                "    let test_input = \"\";",
                "    let result = DeserializeError::arithmetic_overflow(test_input);",
                "    assert_eq!(result, DeserializeError(DeserializeErrorKind::ArithmeticOverflow { what: test_input }));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}