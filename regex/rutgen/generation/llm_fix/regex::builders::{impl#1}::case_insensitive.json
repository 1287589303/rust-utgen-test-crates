{
  "name": "regex::builders::{impl#1}::case_insensitive",
  "mod_info": {
    "name": "builders",
    "loc": "src/lib.rs:1331:1:1331:14"
  },
  "visible": false,
  "loc": "src/builders.rs:138:5:141:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "yes: true or false\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = Builder::new(vec![\"pattern1\", \"pattern2\"]);",
                "    builder.case_insensitive(true);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.syntaxc.is_case_insensitive(), true);",
                "    assert!(std::ptr::eq(builder.case_insensitive(true), &mut builder));",
                "    builder.case_insensitive(false);",
                "    assert_eq!(builder.syntaxc.is_case_insensitive(), false);",
                "    assert!(std::ptr::eq(builder.case_insensitive(false), &mut builder));"
              ],
              "code": [
                "{",
                "    let mut builder = Builder::new(vec![\"pattern1\", \"pattern2\"]);",
                "    builder.case_insensitive(true);",
                "    assert_eq!(builder.syntaxc.is_case_insensitive(), true);",
                "    assert!(std::ptr::eq(builder.case_insensitive(true), &mut builder));",
                "    builder.case_insensitive(false);",
                "    assert_eq!(builder.syntaxc.is_case_insensitive(), false);",
                "    assert!(std::ptr::eq(builder.case_insensitive(false), &mut builder));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = Builder::new(vec![\"pattern1\", \"pattern2\"]);",
                "    builder.case_insensitive(false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.syntaxc.is_case_insensitive(), false);",
                "    assert!(std::ptr::eq(builder.case_insensitive(false), &mut builder));"
              ],
              "code": [
                "{",
                "    let mut builder = Builder::new(vec![\"pattern1\", \"pattern2\"]);",
                "    builder.case_insensitive(false);",
                "    assert_eq!(builder.syntaxc.is_case_insensitive(), false);",
                "    assert!(std::ptr::eq(builder.case_insensitive(false), &mut builder));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}