{
  "name": "regex_automata::util::primitives::{impl#2}::new",
  "mod_info": {
    "name": "util::primitives",
    "loc": "regex-automata/src/util/mod.rs:42:1:42:20"
  },
  "visible": true,
  "loc": "regex-automata/src/util/primitives.rs:172:5:174:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "index: 0 to SmallIndex::MAX.as_usize() (inclusive) for success; index: SmallIndex::MAX.as_usize() + 1 to usize::MAX for failure\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let index = 0;",
                "    let result = SmallIndex::new(index);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(SmallIndex::ZERO));",
                "    assert!(result.is_ok());",
                "    assert!(SmallIndex::new(SmallIndex::LIMIT).is_err());",
                "    assert!(SmallIndex::new(SmallIndex::MAX.as_usize() + 1).is_err());",
                "    assert!(SmallIndex::new(1).is_ok());",
                "    assert_eq!(SmallIndex::new(1).unwrap().as_usize(), 1);"
              ],
              "code": [
                "{",
                "    let index = 0;",
                "    let result = SmallIndex::new(index);",
                "    assert_eq!(result, Ok(SmallIndex::ZERO));",
                "    assert!(result.is_ok());",
                "    assert!(SmallIndex::new(SmallIndex::LIMIT).is_err());",
                "    assert!(SmallIndex::new(SmallIndex::MAX.as_usize() + 1).is_err());",
                "    assert!(SmallIndex::new(1).is_ok());",
                "    assert_eq!(SmallIndex::new(1).unwrap().as_usize(), 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let index = SmallIndex::MAX.as_usize();",
                "    let result = SmallIndex::new(index);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(SmallIndexError { attempted: (SmallIndex::MAX.as_usize() + 1) as u64 }));"
              ],
              "code": [
                "{",
                "    let index = SmallIndex::MAX.as_usize();",
                "    let result = SmallIndex::new(index);",
                "    assert_eq!(result, Err(SmallIndexError { attempted: (SmallIndex::MAX.as_usize() + 1) as u64 }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let index = SmallIndex::MAX.as_usize() + 1;",
                "    let result = SmallIndex::new(index);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().attempted, SmallIndex::MAX.as_u64() + 1);"
              ],
              "code": [
                "{",
                "    let index = SmallIndex::MAX.as_usize() + 1;",
                "    let result = SmallIndex::new(index);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().attempted, SmallIndex::MAX.as_u64() + 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let index = usize::MAX;",
                "    let result = SmallIndex::new(index);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.is_err(), true);",
                "    assert_eq!(result.unwrap_err().attempted, usize::MAX as u64);",
                "    index = SmallIndex::LIMIT;",
                "    result = SmallIndex::new(index);",
                "    assert_eq!(result.is_err(), true);",
                "    assert_eq!(result.unwrap_err().attempted, SmallIndex::LIMIT as u64);",
                "    index = SmallIndex::MAX.as_usize();",
                "    result = SmallIndex::new(index);",
                "    assert_eq!(result.is_err(), true);",
                "    assert_eq!(result.unwrap_err().attempted, SmallIndex::MAX.as_usize() as u64);",
                "    index = SmallIndex::ZERO.as_usize();",
                "    result = SmallIndex::new(index);",
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(result.unwrap(), SmallIndex::ZERO);"
              ],
              "code": [
                "{",
                "    let index = usize::MAX;",
                "    let result = SmallIndex::new(index);",
                "    assert_eq!(result.is_err(), true);",
                "    assert_eq!(result.unwrap_err().attempted, usize::MAX as u64);",
                "    index = SmallIndex::LIMIT;",
                "    result = SmallIndex::new(index);",
                "    assert_eq!(result.is_err(), true);",
                "    assert_eq!(result.unwrap_err().attempted, SmallIndex::LIMIT as u64);",
                "    index = SmallIndex::MAX.as_usize();",
                "    result = SmallIndex::new(index);",
                "    assert_eq!(result.is_err(), true);",
                "    assert_eq!(result.unwrap_err().attempted, SmallIndex::MAX.as_usize() as u64);",
                "    index = SmallIndex::ZERO.as_usize();",
                "    result = SmallIndex::new(index);",
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(result.unwrap(), SmallIndex::ZERO);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}