{
  "name": "regex_lite::hir::parse::{impl#0}::next_capture_index",
  "mod_info": {
    "name": "hir::parse",
    "loc": "regex-lite/src/hir/mod.rs:5:1:5:11"
  },
  "visible": false,
  "loc": "regex-lite/src/hir/parse.rs:339:5:346:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: current\n            .checked_add(1)\n            .ok_or_else(|| Error::new(ERR_TOO_MANY_CAPTURES))? at line 341 is Err/None\n"
      ],
      "input_infer": "current values in the range [0, UINT32_MAX-1] for valid increments and current = UINT32_MAX for an error scenario\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"any pattern\";",
                "    let parser = Parser::new(config, pattern);",
                "    parser.capture_index.set(0);",
                "    let _ = parser.next_capture_index();",
                "}"
              ],
              "oracle": [
                "    parser.capture_index.set(u32::MAX);",
                "    let result = parser.next_capture_index();",
                "    assert_eq!(result, Err(Error::new(ERR_TOO_MANY_CAPTURES)));"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"any pattern\";",
                "    let parser = Parser::new(config, pattern);",
                "    parser.capture_index.set(0);",
                "    let _ = parser.next_capture_index();",
                "    parser.capture_index.set(u32::MAX);",
                "    let result = parser.next_capture_index();",
                "    assert_eq!(result, Err(Error::new(ERR_TOO_MANY_CAPTURES)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"any pattern\";",
                "    let parser = Parser::new(config, pattern);",
                "    parser.capture_index.set(1);",
                "    let _ = parser.next_capture_index();",
                "}"
              ],
              "oracle": [
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"any pattern\";",
                "    let parser = Parser::new(config, pattern);",
                "    parser.capture_index.set(u32::MAX);",
                "    let result = parser.next_capture_index();",
                "    assert_eq!(result, Err(Error::new(ERR_TOO_MANY_CAPTURES)));"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"any pattern\";",
                "    let parser = Parser::new(config, pattern);",
                "    parser.capture_index.set(1);",
                "    let _ = parser.next_capture_index();",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"any pattern\";",
                "    let parser = Parser::new(config, pattern);",
                "    parser.capture_index.set(u32::MAX);",
                "    let result = parser.next_capture_index();",
                "    assert_eq!(result, Err(Error::new(ERR_TOO_MANY_CAPTURES)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"any pattern\";",
                "    let parser = Parser::new(config, pattern);",
                "    parser.capture_index.set(u32::MAX);",
                "    let _ = parser.next_capture_index();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(parser.next_capture_index(), Err(Error::new(ERR_TOO_MANY_CAPTURES)));"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"any pattern\";",
                "    let parser = Parser::new(config, pattern);",
                "    parser.capture_index.set(u32::MAX);",
                "    let _ = parser.next_capture_index();",
                "    assert_eq!(parser.next_capture_index(), Err(Error::new(ERR_TOO_MANY_CAPTURES)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: current\n            .checked_add(1)\n            .ok_or_else(|| Error::new(ERR_TOO_MANY_CAPTURES))? at line 341 is Ok/Some\n",
        "expected return value/type: Ok(next)\n"
      ],
      "input_infer": "current must be within the range of 0 to u32::MAX - 1 to ensure checked_add(1) does not overflow.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"a\";",
                "    let mut parser = Parser::new(config, pattern);",
                "    parser.capture_index.set(0);",
                "    let result = parser.next_capture_index();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(1));",
                "    parser.capture_index.set(u32::MAX);",
                "    let result = parser.next_capture_index();",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap().msg, ERR_TOO_MANY_CAPTURES);"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"a\";",
                "    let mut parser = Parser::new(config, pattern);",
                "    parser.capture_index.set(0);",
                "    let result = parser.next_capture_index();",
                "    assert_eq!(result, Ok(1));",
                "    parser.capture_index.set(u32::MAX);",
                "    let result = parser.next_capture_index();",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap().msg, ERR_TOO_MANY_CAPTURES);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"a\";",
                "    let mut parser = Parser::new(config, pattern);",
                "    parser.capture_index.set(u32::MAX - 1);",
                "    let result = parser.next_capture_index();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), u32::MAX);"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"a\";",
                "    let mut parser = Parser::new(config, pattern);",
                "    parser.capture_index.set(u32::MAX - 1);",
                "    let result = parser.next_capture_index();",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), u32::MAX);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"a\";",
                "    let mut parser = Parser::new(config, pattern);",
                "    parser.capture_index.set(1234);",
                "    let result = parser.next_capture_index();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(1235));"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"a\";",
                "    let mut parser = Parser::new(config, pattern);",
                "    parser.capture_index.set(1234);",
                "    let result = parser.next_capture_index();",
                "    assert_eq!(result, Ok(1235));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}