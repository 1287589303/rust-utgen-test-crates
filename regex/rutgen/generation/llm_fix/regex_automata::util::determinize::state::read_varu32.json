{
  "name": "regex_automata::util::determinize::state::read_varu32",
  "mod_info": {
    "name": "util::determinize::state",
    "loc": "regex-automata/src/util/determinize/mod.rs:57:1:57:11"
  },
  "visible": false,
  "loc": "regex-automata/src/util/determinize/state.rs:774:1:788:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: (i, &b) in data.iter().enumerate() at line 780 is true\n",
        "precondition: b < 0b1000_0000 at line 781 is true\n",
        "expected return value/type: (n | (u32::from(b) << shift), i + 1)\n"
      ],
      "input_infer": "data: [0b0000_0001], [0b0000_0011], [0b0111_1111], [0b1000_0000], [0b1111_1111, 0b0000_0001], byte lengths of 1 to 5, and values representing 1 to 2^32-1\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data = [0b0000_0001];",
                "    let result = read_varu32(&data);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, (1, 1));"
              ],
              "code": [
                "{",
                "    let data = [0b0000_0001];",
                "    let result = read_varu32(&data);",
                "    assert_eq!(result, (1, 1));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data = [0b0000_0011];",
                "    let result = read_varu32(&data);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, (3, 1));"
              ],
              "code": [
                "{",
                "    let data = [0b0000_0011];",
                "    let result = read_varu32(&data);",
                "    assert_eq!(result, (3, 1));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data = [0b0111_1111];",
                "    let result = read_varu32(&data);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, (127, 1));"
              ],
              "code": [
                "{",
                "    let data = [0b0111_1111];",
                "    let result = read_varu32(&data);",
                "    assert_eq!(result, (127, 1));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data = [0b1000_0000, 0b0000_0001];",
                "    let result = read_varu32(&data);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, (1, 2));"
              ],
              "code": [
                "{",
                "    let data = [0b1000_0000, 0b0000_0001];",
                "    let result = read_varu32(&data);",
                "    assert_eq!(result, (1, 2));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data = [0b1111_1111, 0b0000_0001];",
                "    let result = read_varu32(&data);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, (1, 2));"
              ],
              "code": [
                "{",
                "    let data = [0b1111_1111, 0b0000_0001];",
                "    let result = read_varu32(&data);",
                "    assert_eq!(result, (1, 2));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data = [0b1000_0000, 0b0111_1111];",
                "    let result = read_varu32(&data);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, (127, 2));"
              ],
              "code": [
                "{",
                "    let data = [0b1000_0000, 0b0111_1111];",
                "    let result = read_varu32(&data);",
                "    assert_eq!(result, (127, 2));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: (i, &b) in data.iter().enumerate() at line 780 is true\n",
        "precondition: b < 0b1000_0000 at line 781 is false, with bound b == 0b1000_0000\n",
        "precondition: (i, &b) in data.iter().enumerate() at line 780 is false\n",
        "expected return value/type: (0, 0)\n"
      ],
      "input_infer": "data: &[0b1000_0000; 10]\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data: &[u8] = &[0b1000_0000; 10];",
                "    let result = read_varu32(data);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, (0, 0));"
              ],
              "code": [
                "{",
                "    let data: &[u8] = &[0b1000_0000; 10];",
                "    let result = read_varu32(data);",
                "    assert_eq!(result, (0, 0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: (i, &b) in data.iter().enumerate() at line 780 is false\n",
        "expected return value/type: (0, 0)\n"
      ],
      "input_infer": "Provide input where `data` is an empty slice `[]`, or a slice containing only bytes `b` where all bytes are `>= 0b1000_0000`, ensuring that the loop condition at line 780 is never true.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data: &[u8] = &[];",
                "    let result = read_varu32(data);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, (0, 0));"
              ],
              "code": [
                "{",
                "    let data: &[u8] = &[];",
                "    let result = read_varu32(data);",
                "    assert_eq!(result, (0, 0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data: &[u8] = &[0b1000_0000, 0b1000_0001, 0b1111_1111];",
                "    let result = read_varu32(data);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, (0, 0));"
              ],
              "code": [
                "{",
                "    let data: &[u8] = &[0b1000_0000, 0b1000_0001, 0b1111_1111];",
                "    let result = read_varu32(data);",
                "    assert_eq!(result, (0, 0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}