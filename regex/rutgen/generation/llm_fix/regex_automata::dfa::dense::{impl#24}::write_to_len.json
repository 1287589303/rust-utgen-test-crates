{
  "name": "regex_automata::dfa::dense::{impl#24}::write_to_len",
  "mod_info": {
    "name": "dfa::dense",
    "loc": "regex-automata/src/dfa/mod.rs:337:1:337:15"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/dense.rs:4510:5:4516:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: size_of::<u32>()   // match state length\n        + (self.slices().len() * PatternID::SIZE)\n        + size_of::<u32>() // unique pattern ID length\n        + size_of::<u32>() // pattern ID length\n        + (self.pattern_ids().len() * PatternID::SIZE)\n"
      ],
      "input_infer": "slices length: 0 to 10, pattern_ids length: 0 to 10, PatternID size: 4 bytes\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let match_states = MatchStates {",
                "        slices: Vec::<u32>::new(),",
                "        pattern_ids: Vec::<u32>::new(),",
                "        pattern_len: 0,",
                "    };",
                "    match_states.write_to_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(match_states.write_to_len(), size_of::<u32>() + (0 * PatternID::SIZE) + size_of::<u32>() + size_of::<u32>() + (0 * PatternID::SIZE));",
                "    let match_states = MatchStates { slices: vec![1, 2, 3], pattern_ids: vec![4, 5], pattern_len: 2 };",
                "    assert_eq!(match_states.write_to_len(), size_of::<u32>() + (3 * PatternID::SIZE) + size_of::<u32>() + size_of::<u32>() + (2 * PatternID::SIZE));",
                "    let match_states = MatchStates { slices: vec![1], pattern_ids: vec![], pattern_len: 0 };",
                "    assert_eq!(match_states.write_to_len(), size_of::<u32>() + (1 * PatternID::SIZE) + size_of::<u32>() + size_of::<u32>() + (0 * PatternID::SIZE));",
                "    let match_states = MatchStates { slices: vec![], pattern_ids: vec![1, 2, 3, 4], pattern_len: 4 };",
                "    assert_eq!(match_states.write_to_len(), size_of::<u32>() + (0 * PatternID::SIZE) + size_of::<u32>() + size_of::<u32>() + (4 * PatternID::SIZE));",
                "    let match_states = MatchStates { slices: vec![1, 2], pattern_ids: vec![3], pattern_len: 1 };",
                "    assert_eq!(match_states.write_to_len(), size_of::<u32>() + (2 * PatternID::SIZE) + size_of::<u32>() + size_of::<u32>() + (1 * PatternID::SIZE));"
              ],
              "code": [
                "{",
                "    let match_states = MatchStates {",
                "        slices: Vec::<u32>::new(),",
                "        pattern_ids: Vec::<u32>::new(),",
                "        pattern_len: 0,",
                "    };",
                "    match_states.write_to_len();",
                "    assert_eq!(match_states.write_to_len(), size_of::<u32>() + (0 * PatternID::SIZE) + size_of::<u32>() + size_of::<u32>() + (0 * PatternID::SIZE));",
                "    let match_states = MatchStates { slices: vec![1, 2, 3], pattern_ids: vec![4, 5], pattern_len: 2 };",
                "    assert_eq!(match_states.write_to_len(), size_of::<u32>() + (3 * PatternID::SIZE) + size_of::<u32>() + size_of::<u32>() + (2 * PatternID::SIZE));",
                "    let match_states = MatchStates { slices: vec![1], pattern_ids: vec![], pattern_len: 0 };",
                "    assert_eq!(match_states.write_to_len(), size_of::<u32>() + (1 * PatternID::SIZE) + size_of::<u32>() + size_of::<u32>() + (0 * PatternID::SIZE));",
                "    let match_states = MatchStates { slices: vec![], pattern_ids: vec![1, 2, 3, 4], pattern_len: 4 };",
                "    assert_eq!(match_states.write_to_len(), size_of::<u32>() + (0 * PatternID::SIZE) + size_of::<u32>() + size_of::<u32>() + (4 * PatternID::SIZE));",
                "    let match_states = MatchStates { slices: vec![1, 2], pattern_ids: vec![3], pattern_len: 1 };",
                "    assert_eq!(match_states.write_to_len(), size_of::<u32>() + (2 * PatternID::SIZE) + size_of::<u32>() + size_of::<u32>() + (1 * PatternID::SIZE));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let match_states = MatchStates {",
                "        slices: vec![0],",
                "        pattern_ids: Vec::<u32>::new(),",
                "        pattern_len: 0,",
                "    };",
                "    match_states.write_to_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(match_states.write_to_len(), size_of::<u32>() + (1 * PatternID::SIZE) + size_of::<u32>() + size_of::<u32>() + (0 * PatternID::SIZE));",
                "    let match_states = MatchStates { slices: vec![0, 1, 2], pattern_ids: vec![0, 1], pattern_len: 2 };",
                "    assert_eq!(match_states.write_to_len(), size_of::<u32>() + (3 * PatternID::SIZE) + size_of::<u32>() + size_of::<u32>() + (2 * PatternID::SIZE));",
                "    let match_states = MatchStates { slices: vec![], pattern_ids: vec![1, 2, 3, 4], pattern_len: 4 };",
                "    assert_eq!(match_states.write_to_len(), size_of::<u32>() + (0 * PatternID::SIZE) + size_of::<u32>() + size_of::<u32>() + (4 * PatternID::SIZE));",
                "    let match_states = MatchStates { slices: vec![0, 1], pattern_ids: vec![], pattern_len: 0 };",
                "    assert_eq!(match_states.write_to_len(), size_of::<u32>() + (2 * PatternID::SIZE) + size_of::<u32>() + size_of::<u32>() + (0 * PatternID::SIZE));"
              ],
              "code": [
                "{",
                "    let match_states = MatchStates {",
                "        slices: vec![0],",
                "        pattern_ids: Vec::<u32>::new(),",
                "        pattern_len: 0,",
                "    };",
                "    match_states.write_to_len();",
                "    assert_eq!(match_states.write_to_len(), size_of::<u32>() + (1 * PatternID::SIZE) + size_of::<u32>() + size_of::<u32>() + (0 * PatternID::SIZE));",
                "    let match_states = MatchStates { slices: vec![0, 1, 2], pattern_ids: vec![0, 1], pattern_len: 2 };",
                "    assert_eq!(match_states.write_to_len(), size_of::<u32>() + (3 * PatternID::SIZE) + size_of::<u32>() + size_of::<u32>() + (2 * PatternID::SIZE));",
                "    let match_states = MatchStates { slices: vec![], pattern_ids: vec![1, 2, 3, 4], pattern_len: 4 };",
                "    assert_eq!(match_states.write_to_len(), size_of::<u32>() + (0 * PatternID::SIZE) + size_of::<u32>() + size_of::<u32>() + (4 * PatternID::SIZE));",
                "    let match_states = MatchStates { slices: vec![0, 1], pattern_ids: vec![], pattern_len: 0 };",
                "    assert_eq!(match_states.write_to_len(), size_of::<u32>() + (2 * PatternID::SIZE) + size_of::<u32>() + size_of::<u32>() + (0 * PatternID::SIZE));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let match_states = MatchStates {",
                "        slices: vec![0, 1, 2],",
                "        pattern_ids: Vec::<u32>::new(),",
                "        pattern_len: 0,",
                "    };",
                "    match_states.write_to_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(match_states.write_to_len(), size_of::<u32>() + (3 * PatternID::SIZE) + size_of::<u32>() + size_of::<u32>() + (0 * PatternID::SIZE));",
                "    ",
                "    let match_states = MatchStates {",
                "    slices: vec![],",
                "    pattern_ids: vec![1, 2, 3, 4],",
                "    pattern_len: 4,",
                "    };",
                "    assert_eq!(match_states.write_to_len(), size_of::<u32>() + (0 * PatternID::SIZE) + size_of::<u32>() + size_of::<u32>() + (4 * PatternID::SIZE));",
                "    ",
                "    let match_states = MatchStates {",
                "    slices: vec![0],",
                "    pattern_ids: vec![5],",
                "    pattern_len: 1,",
                "    };",
                "    assert_eq!(match_states.write_to_len(), size_of::<u32>() + (1 * PatternID::SIZE) + size_of::<u32>() + size_of::<u32>() + (1 * PatternID::SIZE));",
                "    ",
                "    let match_states = MatchStates {",
                "    slices: vec![0, 1],",
                "    pattern_ids: vec![6, 7, 8],",
                "    pattern_len: 3,",
                "    };",
                "    assert_eq!(match_states.write_to_len(), size_of::<u32>() + (2 * PatternID::SIZE) + size_of::<u32>() + size_of::<u32>() + (3 * PatternID::SIZE));",
                "    ",
                "    let match_states = MatchStates {",
                "    slices: vec![0, 1, 2, 3],",
                "    pattern_ids: vec![9, 10],",
                "    pattern_len: 2,",
                "    };",
                "    assert_eq!(match_states.write_to_len(), size_of::<u32>() + (4 * PatternID::SIZE) + size_of::<u32>() + size_of::<u32>() + (2 * PatternID::SIZE));"
              ],
              "code": [
                "{",
                "    let match_states = MatchStates {",
                "        slices: vec![0, 1, 2],",
                "        pattern_ids: Vec::<u32>::new(),",
                "        pattern_len: 0,",
                "    };",
                "    match_states.write_to_len();",
                "    assert_eq!(match_states.write_to_len(), size_of::<u32>() + (3 * PatternID::SIZE) + size_of::<u32>() + size_of::<u32>() + (0 * PatternID::SIZE));",
                "    ",
                "    let match_states = MatchStates {",
                "    slices: vec![],",
                "    pattern_ids: vec![1, 2, 3, 4],",
                "    pattern_len: 4,",
                "    };",
                "    assert_eq!(match_states.write_to_len(), size_of::<u32>() + (0 * PatternID::SIZE) + size_of::<u32>() + size_of::<u32>() + (4 * PatternID::SIZE));",
                "    ",
                "    let match_states = MatchStates {",
                "    slices: vec![0],",
                "    pattern_ids: vec![5],",
                "    pattern_len: 1,",
                "    };",
                "    assert_eq!(match_states.write_to_len(), size_of::<u32>() + (1 * PatternID::SIZE) + size_of::<u32>() + size_of::<u32>() + (1 * PatternID::SIZE));",
                "    ",
                "    let match_states = MatchStates {",
                "    slices: vec![0, 1],",
                "    pattern_ids: vec![6, 7, 8],",
                "    pattern_len: 3,",
                "    };",
                "    assert_eq!(match_states.write_to_len(), size_of::<u32>() + (2 * PatternID::SIZE) + size_of::<u32>() + size_of::<u32>() + (3 * PatternID::SIZE));",
                "    ",
                "    let match_states = MatchStates {",
                "    slices: vec![0, 1, 2, 3],",
                "    pattern_ids: vec![9, 10],",
                "    pattern_len: 2,",
                "    };",
                "    assert_eq!(match_states.write_to_len(), size_of::<u32>() + (4 * PatternID::SIZE) + size_of::<u32>() + size_of::<u32>() + (2 * PatternID::SIZE));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let match_states = MatchStates {",
                "        slices: vec![0],",
                "        pattern_ids: vec![0],",
                "        pattern_len: 1,",
                "    };",
                "    match_states.write_to_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(match_states.slices.len(), 1);",
                "    assert_eq!(match_states.pattern_ids.len(), 1);",
                "    assert_eq!(match_states.pattern_len, 1);",
                "    assert_eq!(match_states.write_to_len(), size_of::<u32>() + (1 * PatternID::SIZE) + size_of::<u32>() + size_of::<u32>() + (1 * PatternID::SIZE));"
              ],
              "code": [
                "{",
                "    let match_states = MatchStates {",
                "        slices: vec![0],",
                "        pattern_ids: vec![0],",
                "        pattern_len: 1,",
                "    };",
                "    match_states.write_to_len();",
                "    assert_eq!(match_states.slices.len(), 1);",
                "    assert_eq!(match_states.pattern_ids.len(), 1);",
                "    assert_eq!(match_states.pattern_len, 1);",
                "    assert_eq!(match_states.write_to_len(), size_of::<u32>() + (1 * PatternID::SIZE) + size_of::<u32>() + size_of::<u32>() + (1 * PatternID::SIZE));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let match_states = MatchStates {",
                "        slices: vec![0, 1],",
                "        pattern_ids: vec![0, 1, 2],",
                "        pattern_len: 3,",
                "    };",
                "    match_states.write_to_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(match_states.write_to_len(), size_of::<u32>() + (2 * PatternID::SIZE) + size_of::<u32>() + size_of::<u32>() + (3 * PatternID::SIZE));"
              ],
              "code": [
                "{",
                "    let match_states = MatchStates {",
                "        slices: vec![0, 1],",
                "        pattern_ids: vec![0, 1, 2],",
                "        pattern_len: 3,",
                "    };",
                "    match_states.write_to_len();",
                "    assert_eq!(match_states.write_to_len(), size_of::<u32>() + (2 * PatternID::SIZE) + size_of::<u32>() + size_of::<u32>() + (3 * PatternID::SIZE));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let match_states = MatchStates {",
                "        slices: (0..10).map(|x| x).collect::<Vec<u32>>(),",
                "        pattern_ids: (0..10).map(|x| x).collect::<Vec<u32>>(),",
                "        pattern_len: 10,",
                "    };",
                "    match_states.write_to_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(match_states.write_to_len(), size_of::<u32>() + (10 * PatternID::SIZE) + size_of::<u32>() + size_of::<u32>() + (10 * PatternID::SIZE));"
              ],
              "code": [
                "{",
                "    let match_states = MatchStates {",
                "        slices: (0..10).map(|x| x).collect::<Vec<u32>>(),",
                "        pattern_ids: (0..10).map(|x| x).collect::<Vec<u32>>(),",
                "        pattern_len: 10,",
                "    };",
                "    match_states.write_to_len();",
                "    assert_eq!(match_states.write_to_len(), size_of::<u32>() + (10 * PatternID::SIZE) + size_of::<u32>() + size_of::<u32>() + (10 * PatternID::SIZE));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}