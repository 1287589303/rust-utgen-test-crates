{
  "name": "regex_automata::util::wire::{impl#7}::write_u16",
  "mod_info": {
    "name": "util::wire",
    "loc": "regex-automata/src/util/mod.rs:46:1:46:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/wire.rs:897:5:899:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "0 <= n <= 65535 and dst should be a mutable slice of at least length 2.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut dst = [0u8; 2];",
                "    let n: u16 = 0;",
                "    BE::write_u16(n, &mut dst);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dst, [0, 0]);"
              ],
              "code": [
                "{",
                "    let mut dst = [0u8; 2];",
                "    let n: u16 = 0;",
                "    BE::write_u16(n, &mut dst);",
                "    assert_eq!(dst, [0, 0]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut dst = [0u8; 2];",
                "    let n: u16 = 32768;",
                "    BE::write_u16(n, &mut dst);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dst, [128, 0]);"
              ],
              "code": [
                "{",
                "    let mut dst = [0u8; 2];",
                "    let n: u16 = 32768;",
                "    BE::write_u16(n, &mut dst);",
                "    assert_eq!(dst, [128, 0]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut dst = [0u8; 2];",
                "    let n: u16 = 65535;",
                "    BE::write_u16(n, &mut dst);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dst, [255, 255]);"
              ],
              "code": [
                "{",
                "    let mut dst = [0u8; 2];",
                "    let n: u16 = 65535;",
                "    BE::write_u16(n, &mut dst);",
                "    assert_eq!(dst, [255, 255]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut dst = [0u8; 2];",
                "    let n: u16 = 1;",
                "    BE::write_u16(n, &mut dst);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dst, [0x00, 0x01]);"
              ],
              "code": [
                "{",
                "    let mut dst = [0u8; 2];",
                "    let n: u16 = 1;",
                "    BE::write_u16(n, &mut dst);",
                "    assert_eq!(dst, [0x00, 0x01]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut dst = [0u8; 2];",
                "    let n: u16 = 65534;",
                "    BE::write_u16(n, &mut dst);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dst, [0xFF, 0xFE]);",
                "    assert!(dst.len() == 2);",
                "    assert!(dst[0] == 0xFF);",
                "    assert!(dst[1] == 0xFE);",
                "    assert!(dst[0].to_be() == 0xFF);",
                "    assert!(dst[1].to_be() == 0xFE);"
              ],
              "code": [
                "{",
                "    let mut dst = [0u8; 2];",
                "    let n: u16 = 65534;",
                "    BE::write_u16(n, &mut dst);",
                "    assert_eq!(dst, [0xFF, 0xFE]);",
                "    assert!(dst.len() == 2);",
                "    assert!(dst[0] == 0xFF);",
                "    assert!(dst[1] == 0xFE);",
                "    assert!(dst[0].to_be() == 0xFF);",
                "    assert!(dst[1].to_be() == 0xFE);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}