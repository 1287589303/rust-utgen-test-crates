{
  "name": "regex_syntax::unicode::symbolic_name_normalize_bytes",
  "mod_info": {
    "name": "unicode",
    "loc": "regex-syntax/src/lib.rs:193:1:193:13"
  },
  "visible": false,
  "loc": "regex-syntax/src/unicode.rs:902:1:945:2",
  "fn_tests": [
    {
      "chain_id": 72,
      "prompt_conds": [
        "precondition: slice.len() >= 2 at line 908 is true, with bound slice.len() == 2\n",
        "precondition: slice[0..2] == b\"is\"[..] at line 910 is true\n",
        "precondition: starts_with_is at line 914 is false\n",
        "precondition: i in start..slice.len() at line 919 is false\n",
        "precondition: starts_with_is at line 938 is false\n",
        "expected return value/type: &mut slice[..next_write]\n"
      ],
      "input_infer": "slice: a mutable byte slice of length 2 that starts with b'is' followed by any ASCII character or space, underscore or hyphen, ensuring it does not contain other bytes or exceed length 2.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'i', b's'];",
                "    symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'i', b's'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's']);",
                "    assert_eq!(slice.len(), 2);",
                "    assert!(slice[0] == b'i' && slice[1] == b's');"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'i', b's'];",
                "    symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'i', b's'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's']);",
                "    assert_eq!(slice.len(), 2);",
                "    assert!(slice[0] == b'i' && slice[1] == b's');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b' '];",
                "    symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's']);",
                "    slice = &mut [b'I', b'S', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's']);",
                "    slice = &mut [b'i', b's', b'_'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's']);",
                "    slice = &mut [b'I', b'S', b'-'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's']);",
                "    slice = &mut [b'X', b'Y', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'x', b'y']);",
                "    slice = &mut [b'X', b'Y', b'_'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'x', b'y']);",
                "    slice = &mut [b'X', b'Y', b'-'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'x', b'y']);",
                "    slice = &mut [b'i', b's', b'c'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's', b'c']);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b' '];",
                "    symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's']);",
                "    slice = &mut [b'I', b'S', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's']);",
                "    slice = &mut [b'i', b's', b'_'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's']);",
                "    slice = &mut [b'I', b'S', b'-'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's']);",
                "    slice = &mut [b'X', b'Y', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'x', b'y']);",
                "    slice = &mut [b'X', b'Y', b'_'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'x', b'y']);",
                "    slice = &mut [b'X', b'Y', b'-'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'x', b'y']);",
                "    slice = &mut [b'i', b's', b'c'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's', b'c']);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'_'];",
                "    symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'_'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's']);",
                "    assert_eq!(slice.len(), 2);",
                "    assert_eq!(slice[0], b'i');",
                "    assert_eq!(slice[1], b's');"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'_'];",
                "    symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'_'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's']);",
                "    assert_eq!(slice.len(), 2);",
                "    assert_eq!(slice[0], b'i');",
                "    assert_eq!(slice[1], b's');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'-'];",
                "    symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'-'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's']);",
                "    assert_eq!(slice.len(), 2);",
                "    assert_eq!(slice[0], b'i');",
                "    assert_eq!(slice[1], b's');"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'-'];",
                "    symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'-'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's']);",
                "    assert_eq!(slice.len(), 2);",
                "    assert_eq!(slice[0], b'i');",
                "    assert_eq!(slice[1], b's');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'A'];",
                "    symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'A'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
                "    let mut slice: &mut [u8] = &mut [b'I', b'S', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'-', b'A'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'_', b'A'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
                "    let mut slice: &mut [u8] = &mut [b'I', b'S', b'_', b'B'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'b']);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'A'];",
                "    symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'A'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
                "    let mut slice: &mut [u8] = &mut [b'I', b'S', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'-', b'A'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'_', b'A'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
                "    let mut slice: &mut [u8] = &mut [b'I', b'S', b'_', b'B'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'b']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'Z'];",
                "    symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'Z'];",
                "    let expected_result: &mut [u8] = &mut [b'z'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), expected_result);",
                "    assert!(slice.len() == 1);",
                "    assert!(slice[0] == b'z');"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'Z'];",
                "    symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'Z'];",
                "    let expected_result: &mut [u8] = &mut [b'z'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), expected_result);",
                "    assert!(slice.len() == 1);",
                "    assert!(slice[0] == b'z');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'a'];",
                "    symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'a'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a']);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'a'];",
                "    symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'a'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 141,
      "prompt_conds": [
        "precondition: slice.len() >= 2 at line 908 is true, with bound slice.len() == 2\n",
        "precondition: slice[0..2] == b\"is\"[..] at line 910 is false\n",
        "precondition: slice[0..2] == b\"IS\"[..] at line 911 is true\n",
        "precondition: starts_with_is at line 914 is false\n",
        "precondition: i in start..slice.len() at line 919 is false\n",
        "precondition: starts_with_is at line 938 is true\n",
        "precondition: next_write == 1 at line 938 is false\n",
        "precondition: slice[0] == b'c' at line 938 is false\n",
        "expected return value/type: &mut slice[..next_write]\n"
      ],
      "input_infer": "slice: &mut [b'A', b'B'] with length 2, slice contents: b'AB'\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'A', b'B'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'A', b'B'];",
                "    assert_eq!(result, &mut [b'a', b'b']);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'A', b'B'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'B'];",
                "    assert_eq!(result, &mut [b'a', b'b']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'I', b'S'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'I', b'S'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's']);",
                "    assert_eq!(slice.len(), 2);",
                "    assert_eq!(slice[0], b'i');",
                "    assert_eq!(slice[1], b's');",
                "    assert!(slice[0..2] != b\"is\"[..]);",
                "    assert!(slice[0..2] == b\"IS\"[..]);",
                "    assert!(slice.len() == 2);",
                "    assert!(result as *mut _ == slice as *mut _);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'I', b'S'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'I', b'S'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's']);",
                "    assert_eq!(slice.len(), 2);",
                "    assert_eq!(slice[0], b'i');",
                "    assert_eq!(slice[1], b's');",
                "    assert!(slice[0..2] != b\"is\"[..]);",
                "    assert!(slice[0..2] == b\"IS\"[..]);",
                "    assert!(slice.len() == 2);",
                "    assert!(result as *mut _ == slice as *mut _);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 180,
      "prompt_conds": [
        "precondition: slice.len() >= 2 at line 908 is true, with bound slice.len() == 2\n",
        "precondition: slice[0..2] == b\"is\"[..] at line 910 is false\n",
        "precondition: slice[0..2] == b\"IS\"[..] at line 911 is false\n",
        "precondition: slice[0..2] == b\"iS\"[..] at line 912 is true\n",
        "precondition: starts_with_is at line 914 is true\n",
        "precondition: i in start..slice.len() at line 919 is false\n",
        "precondition: starts_with_is at line 938 is false\n",
        "expected return value/type: &mut slice[..next_write]\n"
      ],
      "input_infer": "slice: [&u8; 2] = [b'c', b'1']\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'c', b'1'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'c', b'1'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'c', b'1']);",
                "    assert_eq!(slice.len(), 2);",
                "    assert!(slice[0] == b'c');",
                "    assert!(slice[1] == b'1');",
                "    assert!(slice[2..].is_empty());"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'c', b'1'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'c', b'1'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'c', b'1']);",
                "    assert_eq!(slice.len(), 2);",
                "    assert!(slice[0] == b'c');",
                "    assert!(slice[1] == b'1');",
                "    assert!(slice[2..].is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'c', b'2'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'c', b'2'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'2']);",
                "    assert_eq!(slice.len(), 2);",
                "    assert_eq!(slice[0], b'2');",
                "    assert_eq!(slice[1], b'2');"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'c', b'2'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'c', b'2'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'2']);",
                "    assert_eq!(slice.len(), 2);",
                "    assert_eq!(slice[0], b'2');",
                "    assert_eq!(slice[1], b'2');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'c', b'3'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'c', b'3'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'c', b'3']);",
                "    assert_eq!(slice.len(), 2);",
                "    assert!(slice[0] == b'c' && slice[1] == b'3');"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'c', b'3'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'c', b'3'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'c', b'3']);",
                "    assert_eq!(slice.len(), 2);",
                "    assert!(slice[0] == b'c' && slice[1] == b'3');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'c', b'4'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'c', b'4'];",
                "    let expected: &mut [u8] = &mut [b'4'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, expected);",
                "    assert!(slice.len() == 1);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'c', b'4'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'c', b'4'];",
                "    let expected: &mut [u8] = &mut [b'4'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, expected);",
                "    assert!(slice.len() == 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 286,
      "prompt_conds": [
        "precondition: slice.len() >= 2 at line 908 is true, with bound slice.len() == 2\n",
        "precondition: slice[0..2] == b\"is\"[..] at line 910 is false\n",
        "precondition: slice[0..2] == b\"IS\"[..] at line 911 is false\n",
        "precondition: slice[0..2] == b\"iS\"[..] at line 912 is false\n",
        "precondition: starts_with_is at line 914 is false\n",
        "precondition: i in start..slice.len() at line 919 is false\n",
        "precondition: starts_with_is at line 938 is true\n",
        "precondition: next_write == 1 at line 938 is false\n",
        "precondition: slice[0] == b'c' at line 938 is true\n",
        "expected return value/type: &mut slice[..next_write]\n"
      ],
      "input_infer": "slice.len() == 2, slice = [b'c', b'c']\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'c', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'c', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c']);",
                "    assert_eq!(result.len(), 3);",
                "    assert!(result.is_ascii());",
                "    assert_eq!(slice.as_ref(), &[b'i', b's', b'c']);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'c', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'c', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c']);",
                "    assert_eq!(result.len(), 3);",
                "    assert!(result.is_ascii());",
                "    assert_eq!(slice.as_ref(), &[b'i', b's', b'c']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'c', b'a'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'c', b'a'];",
                "    assert_eq!(result, &mut [b'a']);",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c']);",
                "    let mut slice: &mut [u8] = &mut [b'X', b'Y'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'x', b'y']);",
                "    let mut slice: &mut [u8] = &mut [b'c', b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'c']);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'B', b'C', b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a', b'b', b'c']);",
                "    let mut slice: &mut [u8] = &mut [b'I', b' ', b's', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c']);",
                "    let mut slice: &mut [u8] = &mut [b'_', b'A', b'B'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a', b'b']);",
                "    let mut slice: &mut [u8] = &mut [b'I', b'S', b'_', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c']);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'c', b'a'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'c', b'a'];",
                "    assert_eq!(result, &mut [b'a']);",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c']);",
                "    let mut slice: &mut [u8] = &mut [b'X', b'Y'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'x', b'y']);",
                "    let mut slice: &mut [u8] = &mut [b'c', b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'c']);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'B', b'C', b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a', b'b', b'c']);",
                "    let mut slice: &mut [u8] = &mut [b'I', b' ', b's', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c']);",
                "    let mut slice: &mut [u8] = &mut [b'_', b'A', b'B'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a', b'b']);",
                "    let mut slice: &mut [u8] = &mut [b'I', b'S', b'_', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'c', b'A'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'c', b'A'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b'a']);",
                "    assert!(result.len() == 2);",
                "    assert!(slice[0] == b'i');",
                "    assert!(slice[1] == b'a');",
                "    assert!(slice.len() == 2);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'c', b'A'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'c', b'A'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b'a']);",
                "    assert!(result.len() == 2);",
                "    assert!(slice[0] == b'i');",
                "    assert!(slice[1] == b'a');",
                "    assert!(slice.len() == 2);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'c', b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let slice: &mut [u8] = &mut [b'c', b' '];",
                "    assert_eq!(result, &mut [b'c']);",
                "    assert_eq!(result.len(), 1);",
                "    assert!(result.is_ascii());",
                "    assert!(result[0] == b'c');",
                "    assert!(result[1..].is_empty());"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'c', b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    let slice: &mut [u8] = &mut [b'c', b' '];",
                "    assert_eq!(result, &mut [b'c']);",
                "    assert_eq!(result.len(), 1);",
                "    assert!(result.is_ascii());",
                "    assert!(result[0] == b'c');",
                "    assert!(result[1..].is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 292,
      "prompt_conds": [
        "precondition: slice.len() >= 2 at line 908 is false\n",
        "precondition: i in start..slice.len() at line 919 is true\n",
        "precondition: b == b' ' at line 924 is false\n",
        "precondition: i in start..slice.len() at line 919 is false\n",
        "precondition: starts_with_is at line 938 is false\n",
        "expected return value/type: &mut slice[..next_write]\n"
      ],
      "input_infer": "slice.len() >= 2, and slice contains non-ASCII bytes.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [];",
                "    symbolic_name_normalize_bytes(&mut slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'A', b'B'];",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'a', b'b']);",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_'];",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut []);",
                "    let mut slice: &mut [u8] = &mut [b'I', b's', b'c', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'i', b's', b'c']);",
                "    let mut slice: &mut [u8] = &mut [b'c', b'a', b'b'];",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'a', b'b']);",
                "    let mut slice: &mut [u8] = &mut [b'a', b'b', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'a', b'b']);",
                "    let mut slice: &mut [u8] = &mut [b' ', b' ', b'b', b'c'];",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'b', b'c']);",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c'];",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'i', b's', b'c']);",
                "    let mut slice: &mut [u8] = &mut [b'c'];",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'c']);",
                "    let mut slice: &mut [u8] = &mut [b'f', b'o', b'o', b'_'];",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'f', b'o', b'o']);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [];",
                "    symbolic_name_normalize_bytes(&mut slice);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'B'];",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'a', b'b']);",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_'];",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut []);",
                "    let mut slice: &mut [u8] = &mut [b'I', b's', b'c', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'i', b's', b'c']);",
                "    let mut slice: &mut [u8] = &mut [b'c', b'a', b'b'];",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'a', b'b']);",
                "    let mut slice: &mut [u8] = &mut [b'a', b'b', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'a', b'b']);",
                "    let mut slice: &mut [u8] = &mut [b' ', b' ', b'b', b'c'];",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'b', b'c']);",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c'];",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'i', b's', b'c']);",
                "    let mut slice: &mut [u8] = &mut [b'c'];",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'c']);",
                "    let mut slice: &mut [u8] = &mut [b'f', b'o', b'o', b'_'];",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'f', b'o', b'o']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [0x80];",
                "    symbolic_name_normalize_bytes(&mut slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [0x80];",
                "    let result = symbolic_name_normalize_bytes(&mut slice);",
                "    assert_eq!(result, &mut []);",
                "    assert!(slice.is_empty());",
                "    assert!(slice.len() <= 1);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [0x80];",
                "    symbolic_name_normalize_bytes(&mut slice);",
                "    let mut slice: &mut [u8] = &mut [0x80];",
                "    let result = symbolic_name_normalize_bytes(&mut slice);",
                "    assert_eq!(result, &mut []);",
                "    assert!(slice.is_empty());",
                "    assert!(slice.len() <= 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [0x80, 0x81];",
                "    symbolic_name_normalize_bytes(&mut slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [0x80, 0x81];",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [0x80, 0x81]);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [0x80, 0x81];",
                "    symbolic_name_normalize_bytes(&mut slice);",
                "    let mut slice: &mut [u8] = &mut [0x80, 0x81];",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [0x80, 0x81]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [0x80, b'a'];",
                "    symbolic_name_normalize_bytes(&mut slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [0x80, b'a'];",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'a']);",
                "    assert_eq!(slice.len(), 1);",
                "    assert_eq!(slice[0], b'a');",
                "    assert!(slice.iter().all(|&b| b.is_ascii()));",
                "    assert!(slice.len() >= 1);",
                "    assert!(slice == &mut [b'a']);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [0x80, b'a'];",
                "    symbolic_name_normalize_bytes(&mut slice);",
                "    let mut slice: &mut [u8] = &mut [0x80, b'a'];",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'a']);",
                "    assert_eq!(slice.len(), 1);",
                "    assert_eq!(slice[0], b'a');",
                "    assert!(slice.iter().all(|&b| b.is_ascii()));",
                "    assert!(slice.len() >= 1);",
                "    assert!(slice == &mut [b'a']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 296,
      "prompt_conds": [
        "precondition: slice.len() >= 2 at line 908 is false\n",
        "precondition: i in start..slice.len() at line 919 is true\n",
        "precondition: b == b' ' at line 924 is true\n",
        "precondition: b == b'_' at line 924 is false\n",
        "precondition: i in start..slice.len() at line 919 is false\n",
        "precondition: starts_with_is at line 938 is false\n",
        "expected return value/type: &mut slice[..next_write]\n"
      ],
      "input_infer": "slice should be a mutable byte slice of length less than 2, containing ASCII bytes (e.g., b'c', b'#', b'1') or bytes that include spaces and ignores an \"is\" prefix (e.g., b\" a b c\").\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice = b\" \" as &[u8]; // Length < 2, contains space",
                "    symbolic_name_normalize_bytes(&mut slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice = b\" \" as &[u8]; // Length < 2, contains space",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut b\"\"[..]);",
                "    ",
                "    let mut slice = b\"_\" as &[u8]; // Length < 2, contains underscore",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut b\"\"[..]);",
                "    ",
                "    let mut slice = b\"  \" as &[u8]; // Length < 2, contains spaces only",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut b\"\"[..]);",
                "    ",
                "    let mut slice = b\" _\" as &[u8]; // Length < 2, contains space and underscore",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut b\"\"[..]);",
                "    ",
                "    let mut slice = b\"-\" as &[u8]; // Length < 2, contains dash",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut b\"\"[..]);",
                "    ",
                "    let mut slice = b\"  c\" as &[u8]; // Length > 2, contains space and valid character",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut b\"c\"[..]);",
                "    ",
                "    let mut slice = b\" i\" as &[u8]; // Length > 2, 'i' with leading space",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut b\"i\"[..]);",
                "    ",
                "    let mut slice = b\"g\" as &[u8]; // Length < 2, single valid character",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut b\"g\"[..]);",
                "    ",
                "    let mut slice = b\"  \" as &[u8]; // Length > 2, only spaces",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut b\"\"[..]);",
                "    ",
                "    let mut slice = b\"_-\" as &[u8]; // Length < 2, valid structure, but invalid characters",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut b\"\"[..]);"
              ],
              "code": [
                "{",
                "    let mut slice = b\" \" as &[u8]; // Length < 2, contains space",
                "    symbolic_name_normalize_bytes(&mut slice);",
                "    let mut slice = b\" \" as &[u8]; // Length < 2, contains space",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut b\"\"[..]);",
                "    ",
                "    let mut slice = b\"_\" as &[u8]; // Length < 2, contains underscore",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut b\"\"[..]);",
                "    ",
                "    let mut slice = b\"  \" as &[u8]; // Length < 2, contains spaces only",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut b\"\"[..]);",
                "    ",
                "    let mut slice = b\" _\" as &[u8]; // Length < 2, contains space and underscore",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut b\"\"[..]);",
                "    ",
                "    let mut slice = b\"-\" as &[u8]; // Length < 2, contains dash",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut b\"\"[..]);",
                "    ",
                "    let mut slice = b\"  c\" as &[u8]; // Length > 2, contains space and valid character",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut b\"c\"[..]);",
                "    ",
                "    let mut slice = b\" i\" as &[u8]; // Length > 2, 'i' with leading space",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut b\"i\"[..]);",
                "    ",
                "    let mut slice = b\"g\" as &[u8]; // Length < 2, single valid character",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut b\"g\"[..]);",
                "    ",
                "    let mut slice = b\"  \" as &[u8]; // Length > 2, only spaces",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut b\"\"[..]);",
                "    ",
                "    let mut slice = b\"_-\" as &[u8]; // Length < 2, valid structure, but invalid characters",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut b\"\"[..]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice = b\" A\" as &[u8]; // Length < 2, contains space and ASCII character",
                "    symbolic_name_normalize_bytes(&mut slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice = b\" A\" as &[u8]; // Length < 2, contains space and ASCII character",
                "    let result = symbolic_name_normalize_bytes(&mut slice);",
                "    assert_eq!(result, b\"\" as &[u8]); // Expected to return an empty slice since input length < 2",
                "    assert!(result.is_empty()); // Validate the returned slice is empty",
                "    assert!(slice.len() < 2); // Validate the original slice remains unaffected"
              ],
              "code": [
                "{",
                "    let mut slice = b\" A\" as &[u8]; // Length < 2, contains space and ASCII character",
                "    symbolic_name_normalize_bytes(&mut slice);",
                "    let mut slice = b\" A\" as &[u8]; // Length < 2, contains space and ASCII character",
                "    let result = symbolic_name_normalize_bytes(&mut slice);",
                "    assert_eq!(result, b\"\" as &[u8]); // Expected to return an empty slice since input length < 2",
                "    assert!(result.is_empty()); // Validate the returned slice is empty",
                "    assert!(slice.len() < 2); // Validate the original slice remains unaffected",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice = b\" c\" as &[u8]; // Length < 2, contains space and another ASCII character",
                "    symbolic_name_normalize_bytes(&mut slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice = b\" c\" as &mut [u8]; // Length < 2, contains space and another ASCII character",
                "    let result = symbolic_name_normalize_bytes(&mut slice);",
                "    assert_eq!(result, &mut [b' ']); // Expected output after normalization",
                "    assert_eq!(slice.len(), 1); // Length should be 1 after normalization",
                "    assert_eq!(slice[0], b' '); // First byte should be a space after normalization"
              ],
              "code": [
                "{",
                "    let mut slice = b\" c\" as &[u8]; // Length < 2, contains space and another ASCII character",
                "    symbolic_name_normalize_bytes(&mut slice);",
                "    let mut slice = b\" c\" as &mut [u8]; // Length < 2, contains space and another ASCII character",
                "    let result = symbolic_name_normalize_bytes(&mut slice);",
                "    assert_eq!(result, &mut [b' ']); // Expected output after normalization",
                "    assert_eq!(slice.len(), 1); // Length should be 1 after normalization",
                "    assert_eq!(slice[0], b' '); // First byte should be a space after normalization",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice = b\"# \" as &[u8]; // Length < 2, contains non-space ASCII byte",
                "    symbolic_name_normalize_bytes(&mut slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice = b\"# \" as &mut [u8]; // Length < 2, contains non-space ASCII byte",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'#']);",
                "    assert_eq!(slice.len(), 1);",
                "    assert_eq!(slice[0], b'#');",
                "    assert_eq!(slice[1], b' ');",
                "    assert!(slice[1].is_ascii_whitespace());"
              ],
              "code": [
                "{",
                "    let mut slice = b\"# \" as &[u8]; // Length < 2, contains non-space ASCII byte",
                "    symbolic_name_normalize_bytes(&mut slice);",
                "    let mut slice = b\"# \" as &mut [u8]; // Length < 2, contains non-space ASCII byte",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'#']);",
                "    assert_eq!(slice.len(), 1);",
                "    assert_eq!(slice[0], b'#');",
                "    assert_eq!(slice[1], b' ');",
                "    assert!(slice[1].is_ascii_whitespace());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice = b\"1 \" as &[u8]; // Length < 2, contains digit and space",
                "    symbolic_name_normalize_bytes(&mut slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice = b\"1 \" as &mut [u8]; // Length < 2, contains digit and space",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), b\"1 \"); // Expected to return the original slice as it meets the criteria."
              ],
              "code": [
                "{",
                "    let mut slice = b\"1 \" as &[u8]; // Length < 2, contains digit and space",
                "    symbolic_name_normalize_bytes(&mut slice);",
                "    let mut slice = b\"1 \" as &mut [u8]; // Length < 2, contains digit and space",
                "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), b\"1 \"); // Expected to return the original slice as it meets the criteria.",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 300,
      "prompt_conds": [
        "precondition: slice.len() >= 2 at line 908 is false\n",
        "precondition: i in start..slice.len() at line 919 is true\n",
        "precondition: b == b' ' at line 924 is true\n",
        "precondition: b == b'_' at line 924 is true\n",
        "precondition: b == b'-' at line 924 is false\n",
        "precondition: i in start..slice.len() at line 919 is false\n",
        "precondition: starts_with_is at line 938 is false\n",
        "expected return value/type: &mut slice[..next_write]\n"
      ],
      "input_infer": "slice: &mut [u8] with len() < 2, or slice containing only b' ', b'_', with next_write still 0 and no valid ASCII bytes to process, ensuring the result is an empty slice.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'a', b' ', b'b', b'_', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a', b'b', b'c']);",
                "    let mut slice: &mut [u8] = &mut [b'a', b'_', b' ', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a', b'c']);",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c']);",
                "    let mut slice: &mut [u8] = &mut [b'-', b'c', b'_', b'a'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'c', b'a']);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'a', b' ', b'b', b'_', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a', b'b', b'c']);",
                "    let mut slice: &mut [u8] = &mut [b'a', b'_', b' ', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a', b'c']);",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c']);",
                "    let mut slice: &mut [u8] = &mut [b'-', b'c', b'_', b'a'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'c', b'a']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b' ']);",
                "    assert_eq!(result.len(), 1);",
                "    assert!(result.is_empty() == false);",
                "    assert!(result[0] == b' ');",
                "    assert!(result[0] != b'_');",
                "    assert!(result[0] != b'-');",
                "    assert!(result.len() <= slice.len());",
                "    let mut slice: &mut [u8] = &mut [b'_', b'-', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'_', b'-', b'c']);",
                "    assert!(result.len() == 3);",
                "    assert!(result.contains(&b' '));",
                "    assert!(result.contains(&b'_'));",
                "    assert!(result.contains(&b'-'));",
                "    assert!(result[2] == b'c');",
                "    let mut slice: &mut [u8] = &mut [b'I', b's', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c']);",
                "    assert!(result.len() == 3);",
                "    assert!(result.contains(&b'i'));",
                "    assert!(result.contains(&b's'));",
                "    assert!(result.contains(&b'c'));",
                "    assert!(result[0] != b' ');",
                "    assert!(result[1] != b'_');",
                "    assert!(result[2] != b'-');"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b' ']);",
                "    assert_eq!(result.len(), 1);",
                "    assert!(result.is_empty() == false);",
                "    assert!(result[0] == b' ');",
                "    assert!(result[0] != b'_');",
                "    assert!(result[0] != b'-');",
                "    assert!(result.len() <= slice.len());",
                "    let mut slice: &mut [u8] = &mut [b'_', b'-', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'_', b'-', b'c']);",
                "    assert!(result.len() == 3);",
                "    assert!(result.contains(&b' '));",
                "    assert!(result.contains(&b'_'));",
                "    assert!(result.contains(&b'-'));",
                "    assert!(result[2] == b'c');",
                "    let mut slice: &mut [u8] = &mut [b'I', b's', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c']);",
                "    assert!(result.len() == 3);",
                "    assert!(result.contains(&b'i'));",
                "    assert!(result.contains(&b's'));",
                "    assert!(result.contains(&b'c'));",
                "    assert!(result[0] != b' ');",
                "    assert!(result[1] != b'_');",
                "    assert!(result[2] != b'-');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'_'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'_'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'_']);",
                "    assert_eq!(result.len(), 1);",
                "    assert!(result.is_ascii());"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'_'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'_'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'_']);",
                "    assert_eq!(result.len(), 1);",
                "    assert!(result.is_ascii());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b' ', b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b' ', b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b' ', b' ']);",
                "    assert!(result.len() == 2);",
                "    assert!(result.as_ptr() == slice.as_ptr());"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b' ', b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b' ', b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b' ', b' ']);",
                "    assert!(result.len() == 2);",
                "    assert!(result.as_ptr() == slice.as_ptr());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b' ', b'_'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut []);",
                "    assert!(result.as_ptr() == slice.as_ptr());",
                "    assert_eq!(slice.len(), 2);",
                "    assert_eq!(slice[0], b' ');",
                "    assert_eq!(slice[1], b'_');"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut []);",
                "    assert!(result.as_ptr() == slice.as_ptr());",
                "    assert_eq!(slice.len(), 2);",
                "    assert_eq!(slice[0], b' ');",
                "    assert_eq!(slice[1], b'_');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'_', b'_'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'_'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'_']);",
                "    let mut slice: &mut [u8] = &mut [b' ', b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b' ']);",
                "    let mut slice: &mut [u8] = &mut [b'-', b'-'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'-']);",
                "    let mut slice: &mut [u8] = &mut [b'_', b'a'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a']);",
                "    let mut slice: &mut [u8] = &mut [b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b' ']);",
                "    let mut slice: &mut [u8] = &mut [b 'a', b '_'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a']);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'_', b'_'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'_'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'_']);",
                "    let mut slice: &mut [u8] = &mut [b' ', b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b' ']);",
                "    let mut slice: &mut [u8] = &mut [b'-', b'-'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'-']);",
                "    let mut slice: &mut [u8] = &mut [b'_', b'a'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a']);",
                "    let mut slice: &mut [u8] = &mut [b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b' ']);",
                "    let mut slice: &mut [u8] = &mut [b 'a', b '_'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a']);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b' ', b'_'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b' ', b'_'][..]);",
                "    assert_eq!(slice.len(), 2);",
                "    assert_eq!(result.len(), 2);",
                "    assert_eq!(result.as_ptr(), slice.as_ptr());"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b' ', b'_'][..]);",
                "    assert_eq!(slice.len(), 2);",
                "    assert_eq!(result.len(), 2);",
                "    assert_eq!(result.as_ptr(), slice.as_ptr());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_', b' ', b'_'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    result.len() == 0",
                "    result.as_ptr() == slice.as_ptr()",
                "    slice[0] == b' '",
                "    slice[1] == b'_'",
                "    slice[2] == b' '",
                "    slice[3] == b'_'",
                "    slice[0..result.len()] == b\"\"",
                "    result.is_empty() == true",
                "    result as *const _ == slice as *const _"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_', b' ', b'_'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    result.len() == 0",
                "    result.as_ptr() == slice.as_ptr()",
                "    slice[0] == b' '",
                "    slice[1] == b'_'",
                "    slice[2] == b' '",
                "    slice[3] == b'_'",
                "    slice[0..result.len()] == b\"\"",
                "    result.is_empty() == true",
                "    result as *const _ == slice as *const _",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'_', b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'_', b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'_', b' '][..]);",
                "    assert_eq!(result.len(), 2);",
                "    assert!(result.iter().all(|&b| b == b'_' || b == b' '));",
                "    assert!(result.as_mut_ptr() == slice.as_mut_ptr());",
                "    assert!(slice.len() == 2);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'_', b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'_', b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'_', b' '][..]);",
                "    assert_eq!(result.len(), 2);",
                "    assert!(result.iter().all(|&b| b == b'_' || b == b' '));",
                "    assert!(result.as_mut_ptr() == slice.as_mut_ptr());",
                "    assert!(slice.len() == 2);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 304,
      "prompt_conds": [
        "precondition: slice.len() >= 2 at line 908 is false\n",
        "precondition: i in start..slice.len() at line 919 is true\n",
        "precondition: b == b' ' at line 924 is true\n",
        "precondition: b == b'_' at line 924 is true\n",
        "precondition: b == b'-' at line 924 is true\n",
        "precondition: b'A' <= b at line 926 is true, with bound b'A' == b\n",
        "precondition: b <= b'Z' at line 926 is true, with bound b == b'Z'\n",
        "precondition: i in start..slice.len() at line 919 is false\n",
        "precondition: starts_with_is at line 938 is false\n",
        "expected return value/type: &mut slice[..next_write]\n"
      ],
      "input_infer": "slice must be a mutable byte slice with a length of 0 to 1 byte, containing only ASCII characters, optionally starting with 'is'/'Is'/'iS'/'IS', and no spaces, underscores, or hyphens.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [];",
                "    symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'A', b'_', b'Z', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'A', b'Z']);",
                "    let mut slice: &mut [u8] = &mut [b'_', b'-', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut []);",
                "    let mut slice: &mut [u8] = &mut [b'A', b' ', b'B', b'_', b'C'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'b', b'c']);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'Z', b'-', b' ', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'z']);",
                "    let mut slice: &mut [u8] = &mut [b'_', b'A', b'_', b'B'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'b']);",
                "    let mut slice: &mut [u8] = &mut [b'c', b' ', b'_', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'c']);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [];",
                "    symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'_', b'Z', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'A', b'Z']);",
                "    let mut slice: &mut [u8] = &mut [b'_', b'-', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut []);",
                "    let mut slice: &mut [u8] = &mut [b'A', b' ', b'B', b'_', b'C'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'b', b'c']);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'Z', b'-', b' ', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'z']);",
                "    let mut slice: &mut [u8] = &mut [b'_', b'A', b'_', b'B'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'b']);",
                "    let mut slice: &mut [u8] = &mut [b'c', b' ', b'_', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'c']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'A'];",
                "    symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'A', b' ']; assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'_']; assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'-']; assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'Z']; assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'z']);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'z']; assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'z']);",
                "    let mut slice: &mut [u8] = &mut [b'_', b'A']; assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
                "    let mut slice: &mut [u8] = &mut [b' ', b'A']; assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_']; assert_eq!(symbolic_name_normalize_bytes(slice), &mut []);",
                "    let mut slice: &mut [u8] = &mut [b' ', b'-']; assert_eq!(symbolic_name_normalize_bytes(slice), &mut []);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'A', b' ', b'Z']; assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'a', b'z']);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'A'];",
                "    symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'A', b' ']; assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'_']; assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'-']; assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'Z']; assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'z']);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'z']; assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'z']);",
                "    let mut slice: &mut [u8] = &mut [b'_', b'A']; assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
                "    let mut slice: &mut [u8] = &mut [b' ', b'A']; assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_']; assert_eq!(symbolic_name_normalize_bytes(slice), &mut []);",
                "    let mut slice: &mut [u8] = &mut [b' ', b'-']; assert_eq!(symbolic_name_normalize_bytes(slice), &mut []);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'A', b' ', b'Z']; assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'a', b'z']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'z'];",
                "    symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'z'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'z']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b' ','_','-'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut []);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'A', b'Z'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'z']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b' ', b'A', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'A', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'-', b'Z'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'z']);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'z'];",
                "    symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'z'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'z']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b' ','_','-'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut []);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'A', b'Z'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'z']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b' ', b'A', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'A', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'-', b'Z'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'z']);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'A', b'B'];",
                "    symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'A', b'B'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a', b'b']);",
                "    assert_eq!(slice, &mut [b'a', b'b']);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'A', b'B'];",
                "    symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'B'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a', b'b']);",
                "    assert_eq!(slice, &mut [b'a', b'b']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'i', b'S'];",
                "    symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-', b'A', b'B', b'Z'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'A', b'B', b'Z']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-', b'c', b'c', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'c', b'c', b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b' ', b'A', b'Z'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'A', b'Z']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-', b'I', b'S', b'a', b'Z'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a', b'z']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'A', b'I', b'Z'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a', b'i', b'z']);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'i', b'S'];",
                "    symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-', b'A', b'B', b'Z'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'A', b'B', b'Z']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-', b'c', b'c', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'c', b'c', b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b' ', b'A', b'Z'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'A', b'Z']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-', b'I', b'S', b'a', b'Z'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a', b'z']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'A', b'I', b'Z'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a', b'i', b'z']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'_', b'-'];",
                "    symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'_', b'-'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'_', b'-']);",
                "    assert!(slice.len() == 2);",
                "    assert!(slice[0] == b'_');",
                "    assert!(slice[1] == b'-');"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'_', b'-'];",
                "    symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'_', b'-'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'_', b'-']);",
                "    assert!(slice.len() == 2);",
                "    assert!(slice[0] == b'_');",
                "    assert!(slice[1] == b'-');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b' ', b' '];",
                "    symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let slice: &mut [u8] = &mut [b' ', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ' as u8, b' ' as u8]);",
                "    ",
                "    let slice: &mut [u8] = &mut [b'_', b'_'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'_' as u8, b'_' as u8]);",
                "    ",
                "    let slice: &mut [u8] = &mut [b'-', b'-'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'-' as u8, b'-' as u8]);",
                "    ",
                "    let slice: &mut [u8] = &mut [b'A', b'Z'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a' as u8, b'z' as u8]);",
                "    ",
                "    let slice: &mut [u8] = &mut [b'A', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a' as u8, b' ' as u8]);",
                "    ",
                "    let slice: &mut [u8] = &mut [b' ', b'Z'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ' as u8, b'z' as u8]);",
                "    ",
                "    let slice: &mut [u8] = &mut [b'_', b'A'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'_' as u8, b'a' as u8]);",
                "    ",
                "    let slice: &mut [u8] = &mut [b'-', b'-', b'Z'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'-' as u8, b'-' as u8]);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b' ', b' '];",
                "    symbolic_name_normalize_bytes(slice);",
                "    let slice: &mut [u8] = &mut [b' ', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ' as u8, b' ' as u8]);",
                "    ",
                "    let slice: &mut [u8] = &mut [b'_', b'_'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'_' as u8, b'_' as u8]);",
                "    ",
                "    let slice: &mut [u8] = &mut [b'-', b'-'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'-' as u8, b'-' as u8]);",
                "    ",
                "    let slice: &mut [u8] = &mut [b'A', b'Z'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a' as u8, b'z' as u8]);",
                "    ",
                "    let slice: &mut [u8] = &mut [b'A', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a' as u8, b' ' as u8]);",
                "    ",
                "    let slice: &mut [u8] = &mut [b' ', b'Z'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ' as u8, b'z' as u8]);",
                "    ",
                "    let slice: &mut [u8] = &mut [b'_', b'A'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'_' as u8, b'a' as u8]);",
                "    ",
                "    let slice: &mut [u8] = &mut [b'-', b'-', b'Z'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'-' as u8, b'-' as u8]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'A', b' '];",
                "    symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'A', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'_'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'-'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'A'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'a']);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'Z'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'z']);",
                "    let mut slice: &mut [u8] = &mut [b'A', b' ', b'_', b'-', b'A', b'Z'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'a', b'z']);",
                "    let mut slice: &mut [u8] = &mut [b'A', b' ', b'_', b'-', b'G', b'O', b'O', b'Y'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'g', b'o', b'o', b'y']);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'A', b' '];",
                "    symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'A', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'_'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'-'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'A'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'a']);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'Z'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'z']);",
                "    let mut slice: &mut [u8] = &mut [b'A', b' ', b'_', b'-', b'A', b'Z'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'a', b'z']);",
                "    let mut slice: &mut [u8] = &mut [b'A', b' ', b'_', b'-', b'G', b'O', b'O', b'Y'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'g', b'o', b'o', b'y']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'i'];",
                "    symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b' ', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice).len(), 0);",
                "    let mut slice: &mut [u8] = &mut [b'_', b'_'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice).len(), 0);",
                "    let mut slice: &mut [u8] = &mut [b'-', b'-'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice).len(), 0);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'A'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'a']);",
                "    let mut slice: &mut [u8] = &mut [b'Z', b'Z'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'z', b'z']);",
                "    let mut slice: &mut [u8] = &mut [b'A', b' ', b'B', b'_'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'B']);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'_', b'B', b'-', b'C'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'B', b'C']);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'i'];",
                "    symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b' ', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice).len(), 0);",
                "    let mut slice: &mut [u8] = &mut [b'_', b'_'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice).len(), 0);",
                "    let mut slice: &mut [u8] = &mut [b'-', b'-'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice).len(), 0);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'A'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'a']);",
                "    let mut slice: &mut [u8] = &mut [b'Z', b'Z'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'z', b'z']);",
                "    let mut slice: &mut [u8] = &mut [b'A', b' ', b'B', b'_'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'B']);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'_', b'B', b'-', b'C'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'B', b'C']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'I'];",
                "    symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'I'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i']);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'B', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'b']);",
                "    let mut slice: &mut [u8] = &mut [b'-', b'-', b'X', b'Y'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'x', b'y']);",
                "    let mut slice: &mut [u8] = &mut [b'Z', b' ', b'_'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'z']);",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut []);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'I'];",
                "    symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'I'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i']);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'B', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'b']);",
                "    let mut slice: &mut [u8] = &mut [b'-', b'-', b'X', b'Y'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'x', b'y']);",
                "    let mut slice: &mut [u8] = &mut [b'Z', b' ', b'_'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'z']);",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut []);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'i', b'S'];",
                "    symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b' ', b'-'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'A', b'Z'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'z']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut []);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'B'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'b']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'c', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'b']);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'i', b'S'];",
                "    symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b' ', b'-'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'A', b'Z'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'z']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut []);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'B'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'b']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'c', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'b']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'I', b'S'];",
                "    symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'A', b' ', b'_', b'Z'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a', b'z']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b' ', b'-', b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut []);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'B', b'C', b'D'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'b', b'c', b'd']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'c', b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'I', b'S', b'_', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c']);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'I', b'S'];",
                "    symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'A', b' ', b'_', b'Z'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a', b'z']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b' ', b'-', b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut []);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'B', b'C', b'D'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'b', b'c', b'd']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'c', b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'I', b'S', b'_', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'I', b'S'];",
                "    symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'I', b'S'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's']);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'I', b'S'];",
                "    symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'I', b'S'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'\\x80', b'A'];",
                "    symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'\\x80', b'A'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a']);",
                "    assert_eq!(slice.len(), 1);",
                "    assert!(result.is_ascii());",
                "    assert!(result.len() <= slice.len());",
                "    assert!(result[0] == b'a');"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'\\x80', b'A'];",
                "    symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'\\x80', b'A'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a']);",
                "    assert_eq!(slice.len(), 1);",
                "    assert!(result.is_ascii());",
                "    assert!(result.len() <= slice.len());",
                "    assert!(result[0] == b'a');",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'A', b'\\x80'];",
                "    symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    slice.len() >= 2  // Ensure precondition for length of the slice is met",
                "    b'A' <= b  // Ensure the byte is within the valid uppercase ASCII range",
                "    b <= b'Z'  // Ensure the byte is within the valid uppercase ASCII range",
                "    b == b' '  // Ensure the byte is a space character",
                "    b == b'_'  // Ensure the byte is an underscore character",
                "    b == b'-'  // Ensure the byte is a hyphen character",
                "    starts_with_is == false  // Ensure the \"is\" prefix condition is false",
                "    &mut slice[..next_write]  // Ensure return value is a mutable slice with next_write length"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'A', b'\\x80'];",
                "    symbolic_name_normalize_bytes(slice);",
                "    slice.len() >= 2  // Ensure precondition for length of the slice is met",
                "    b'A' <= b  // Ensure the byte is within the valid uppercase ASCII range",
                "    b <= b'Z'  // Ensure the byte is within the valid uppercase ASCII range",
                "    b == b' '  // Ensure the byte is a space character",
                "    b == b'_'  // Ensure the byte is an underscore character",
                "    b == b'-'  // Ensure the byte is a hyphen character",
                "    starts_with_is == false  // Ensure the \"is\" prefix condition is false",
                "    &mut slice[..next_write]  // Ensure return value is a mutable slice with next_write length",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 312,
      "prompt_conds": [
        "precondition: slice.len() >= 2 at line 908 is false\n",
        "precondition: i in start..slice.len() at line 919 is true\n",
        "precondition: b == b' ' at line 924 is true\n",
        "precondition: b == b'_' at line 924 is true\n",
        "precondition: b == b'-' at line 924 is true\n",
        "precondition: b'A' <= b at line 926 is true, with bound b'A' == b\n",
        "precondition: b <= b'Z' at line 926 is false\n",
        "precondition: b <= 0x7F at line 929 is false\n",
        "precondition: i in start..slice.len() at line 919 is false\n",
        "precondition: starts_with_is at line 938 is false\n",
        "expected return value/type: &mut slice[..next_write]\n"
      ],
      "input_infer": "slice: &[u8] with length < 2, containing non-ASCII bytes, including space, underscore, or dash, and a single uppercase letter A (e.g., ['A', b'_', b' ', b'$', b'\\x80'])\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'A', b' ', b'_', b'$'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'A', b' ', b'_', b'$'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a']);",
                "    assert_eq!(slice.len(), 1);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'A', b' ', b'_', b'$'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'A', b' ', b'_', b'$'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a']);",
                "    assert_eq!(slice.len(), 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'A', b'_', b'\\x80', b'-'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'A', b'_', b'\\x80', b'-'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'A', b'_', b'-'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'A', b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'C', b'_', b'A', b'A'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'c', b'a', b'a']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'A', b'_', b'B', b'_', b'\\x80'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a', b'b']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c', b'_', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c', b'c']);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'A', b'_', b'\\x80', b'-'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'_', b'\\x80', b'-'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'A', b'_', b'-'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'A', b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'C', b'_', b'A', b'A'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'c', b'a', b'a']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'A', b'_', b'B', b'_', b'\\x80'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a', b'b']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c', b'_', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c', b'c']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'$', b' ', b'_', b'\\xFF'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, &mut [b'$']);",
                "    assert_eq!(slice.len(), 4);",
                "    assert_eq!(slice[0], b'$');",
                "    assert_eq!(slice[1], b' ');",
                "    assert_eq!(slice[2], b'_');",
                "    assert_eq!(slice[3], b'\\xFF');",
                "    assert!(result as *const _ != slice as *const _);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'$', b' ', b'_', b'\\xFF'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'$']);",
                "    assert_eq!(slice.len(), 4);",
                "    assert_eq!(slice[0], b'$');",
                "    assert_eq!(slice[1], b' ');",
                "    assert_eq!(slice[2], b'_');",
                "    assert_eq!(slice[3], b'\\xFF');",
                "    assert!(result as *const _ != slice as *const _);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'A'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'A'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a']);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'A'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'A'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 316,
      "prompt_conds": [
        "precondition: slice.len() >= 2 at line 908 is false\n",
        "precondition: i in start..slice.len() at line 919 is true\n",
        "precondition: b == b' ' at line 924 is true\n",
        "precondition: b == b'_' at line 924 is true\n",
        "precondition: b == b'-' at line 924 is true\n",
        "precondition: b'A' <= b at line 926 is false\n",
        "precondition: b <= 0x7F at line 929 is true, with bound b == 0x7F\n",
        "precondition: i in start..slice.len() at line 919 is false\n",
        "precondition: starts_with_is at line 938 is false\n",
        "expected return value/type: &mut slice[..next_write]\n"
      ],
      "input_infer": "slice: &mut [u8] with length < 2, containing only ASCII characters such as spaces, underscores, or hyphens\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [];",
                "    symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-', b'A', b'Z'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'A', b'Z']);",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-', b'b', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'b', b'c']);",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-', b'c', b'A'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'c', b'a']);",
                "    let mut slice: &mut [u8] = &mut [b'a', b'_', b' ', b'-', b'_'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a']);",
                "    let mut slice: &mut [u8] = &mut [b'I', b'S', b'_', b'1', b'2', b'3'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'_', b'1', b'2', b'3']);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [];",
                "    symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-', b'A', b'Z'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'A', b'Z']);",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-', b'b', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'b', b'c']);",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-', b'c', b'A'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'c', b'a']);",
                "    let mut slice: &mut [u8] = &mut [b'a', b'_', b' ', b'-', b'_'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a']);",
                "    let mut slice: &mut [u8] = &mut [b'I', b'S', b'_', b'1', b'2', b'3'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'_', b'1', b'2', b'3']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b' '];",
                "    symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'_'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'_']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'-'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'-']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'c', b'c', b'c'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'c', b'c', b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'a', b'b', b'c'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'b', b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'x', b'y', b'z'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'x', b'y', b'z']);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b' '];",
                "    symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'_'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'_']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'-'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'-']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'c', b'c', b'c'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'c', b'c', b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'a', b'b', b'c'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'b', b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'x', b'y', b'z'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'x', b'y', b'z']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'_'];",
                "    symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'_'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'_']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b' ', b'-'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b' ', b'-']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'a', b'b', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a', b'b', b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'A', b'B', b'C'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a', b'b', b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c']);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'_'];",
                "    symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'_'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'_']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b' ', b'-'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b' ', b'-']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'a', b'b', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a', b'b', b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'A', b'B', b'C'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a', b'b', b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'-'];",
                "    symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'-'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'-']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'_'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'_']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'A', b'_', b'B'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'b']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'_', b'c', b'A', b'-'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'c', b'a']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'c', b' ', b'_', b'-'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'c', b'-', b'b', b' ', b'_'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'b']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'c', b'_', b'A', b' ', b'B'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'b']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'c', b'A', b'_', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'b']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'-', b'-', b'-'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'-']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b' ', b' ', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ', b' ', b' ']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'is', b' ', b'a'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'c'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'c', b'a'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'c', b'a']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's', b'c']);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'-'];",
                "    symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'-'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'-']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'_'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'_']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'A', b'_', b'B'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'b']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'_', b'c', b'A', b'-'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'c', b'a']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'c', b' ', b'_', b'-'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'c', b'-', b'b', b' ', b'_'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'b']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'c', b'_', b'A', b' ', b'B'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'b']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'c', b'A', b'_', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'b']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'-', b'-', b'-'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'-']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b' ', b' ', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ', b' ', b' ']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'is', b' ', b'a'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'c'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'c', b'a'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'c', b'a']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's', b'c']);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b' ', b' '];",
                "    symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b' ', b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b' ']);",
                "    assert!(result.len() < slice.len());",
                "    assert_eq!(slice[0], b' ');",
                "    assert_eq!(slice[1], b' ');",
                "    assert_eq!(slice[2..].len(), 0);",
                "    assert_eq!(slice.len(), 2);",
                "    assert!(result.is_ascii());",
                "    assert!(result.iter().all(|&b| b == b' '));"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b' ', b' '];",
                "    symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b' ', b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b' ']);",
                "    assert!(result.len() < slice.len());",
                "    assert_eq!(slice[0], b' ');",
                "    assert_eq!(slice[1], b' ');",
                "    assert_eq!(slice[2..].len(), 0);",
                "    assert_eq!(slice.len(), 2);",
                "    assert!(result.is_ascii());",
                "    assert!(result.iter().all(|&b| b == b' '));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_'];",
                "    symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b' ', b'_'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ', b'_']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'A', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'_', b'b'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'b']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'-', b'c'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-', b'!'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'!']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'A', b'B', b'C'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'b', b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b' ', b'i', b's', b'c'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's', b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'c'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's', b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'A', b' ', b'_', b'-', b'Z'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'z']);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_'];",
                "    symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ', b'_']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'A', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'_', b'b'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'b']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'-', b'c'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-', b'!'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'!']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'A', b'B', b'C'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'b', b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b' ', b'i', b's', b'c'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's', b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'c'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's', b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'A', b' ', b'_', b'-', b'Z'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'z']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'-', b' '];",
                "    symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'-', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
                "    let mut slice: &mut [u8] = &mut [b'_', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
                "    let mut slice: &mut [u8] = &mut [b' ', b'-'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
                "    let mut slice: &mut [u8] = &mut [b'-', b'_'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
                "    let mut slice: &mut [u8] = &mut [b' ', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
                "    let mut slice: &mut [u8] = &mut [b' ', b'A'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
                "    let mut slice: &mut [u8] = &mut [b' ', b'\\x80'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'\\x7F'];",
                "    let expected: &mut [u8] = &mut [b'a', b'\\x7F'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), expected);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'-', b' '];",
                "    symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'-', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
                "    let mut slice: &mut [u8] = &mut [b'_', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
                "    let mut slice: &mut [u8] = &mut [b' ', b'-'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
                "    let mut slice: &mut [u8] = &mut [b'-', b'_'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
                "    let mut slice: &mut [u8] = &mut [b' ', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
                "    let mut slice: &mut [u8] = &mut [b' ', b'A'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
                "    let mut slice: &mut [u8] = &mut [b' ', b'\\x80'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'\\x7F'];",
                "    let expected: &mut [u8] = &mut [b'a', b'\\x7F'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'-', b'_'];",
                "    symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'-', b'_'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut []);",
                "    let mut slice: &mut [u8] = &mut [b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut []);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'-'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'-']);",
                "    let mut slice: &mut [u8] = &mut [b'_', b'B'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'B']);",
                "    let mut slice: &mut [u8] = &mut [b'\\\\', b'c'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'c']);",
                "    let mut slice: &mut [u8] = &mut [b'-', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut []);",
                "    let mut slice: &mut [u8] = &mut [b'A', b' ', b'B', b'-'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'B']);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'-', b'_'];",
                "    symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'-', b'_'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut []);",
                "    let mut slice: &mut [u8] = &mut [b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut []);",
                "    let mut slice: &mut [u8] = &mut [b'A', b'-'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'-']);",
                "    let mut slice: &mut [u8] = &mut [b'_', b'B'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'B']);",
                "    let mut slice: &mut [u8] = &mut [b'\\\\', b'c'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'c']);",
                "    let mut slice: &mut [u8] = &mut [b'-', b' '];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut []);",
                "    let mut slice: &mut [u8] = &mut [b'A', b' ', b'B', b'-'];",
                "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'B']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-'];",
                "    symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b' ']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-', b'a', b'b', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b' ', b'_', b'-', b'a', b'b', b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'_', b'-', b'_', b'A', b'B', b'C'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'_', b'-', b'_', b'a', b'b', b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'c', b' ', b'_', b'-', b'B', b'A'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c', b' ', b'_', b'-', b'a', b'b']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'I', b's', b't', b' ', b'_', b'_', b'B', b'A'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b't', b' ', b'_', b'_', b'a', b'b']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'I', b'S', b'c', b' ', b'b', b'a', b's', b'e'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c', b' ', b'b', b'a', b's', b'e']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'c', b' ', b'I', b'S', b'_' , b'S', b'1'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c', b' ', b'_', b's', b'1']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'c', b'_'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'a', b'b', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a', b'b', b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b' ']);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-'];",
                "    symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b' ']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-', b'a', b'b', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b' ', b'_', b'-', b'a', b'b', b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'_', b'-', b'_', b'A', b'B', b'C'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'_', b'-', b'_', b'a', b'b', b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'c', b' ', b'_', b'-', b'B', b'A'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c', b' ', b'_', b'-', b'a', b'b']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'I', b's', b't', b' ', b'_', b'_', b'B', b'A'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b't', b' ', b'_', b'_', b'a', b'b']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'I', b'S', b'c', b' ', b'b', b'a', b's', b'e'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c', b' ', b'b', b'a', b's', b'e']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'c', b' ', b'I', b'S', b'_' , b'S', b'1'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c', b' ', b'_', b's', b'1']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'c', b'_'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'a', b'b', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a', b'b', b'c']);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b' ']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 323,
      "prompt_conds": [
        "precondition: slice.len() >= 2 at line 908 is false\n",
        "precondition: i in start..slice.len() at line 919 is false\n",
        "precondition: starts_with_is at line 938 is true\n",
        "precondition: next_write == 1 at line 938 is true\n",
        "expected return value/type: &mut slice[..next_write]\n"
      ],
      "input_infer": "slice must be a mutable byte slice of length 2, starting with b'is' followed by b'c', or b'IS' followed by b'c', or b'iS' followed by b'c', or b'Is' followed by b'c'\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'a', b'b'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a', b'b']);",
                "    let mut slice: &mut [u8] = &mut [b'I', b'S', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c']);",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c', b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c']);",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c', b'_', b'a'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c', b'a']);",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c', b'-', b'b'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c', b'b']);",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c', b' ', b'_', b'b', b'B'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c', b'b']);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'a', b'b'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'a', b'b']);",
                "    let mut slice: &mut [u8] = &mut [b'I', b'S', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c']);",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c', b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c']);",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c', b'_', b'a'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c', b'a']);",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c', b'-', b'b'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c', b'b']);",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c', b' ', b'_', b'b', b'B'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c', b'b']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'I', b'S', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'I', b'S', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c']);",
                "    assert_eq!(slice.len(), 3);",
                "    assert!(result == slice);",
                "    assert!(slice[0] == b'i');",
                "    assert!(slice[1] == b's');",
                "    assert!(slice[2] == b'c');"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'I', b'S', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'I', b'S', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c']);",
                "    assert_eq!(slice.len(), 3);",
                "    assert!(result == slice);",
                "    assert!(slice[0] == b'i');",
                "    assert!(slice[1] == b's');",
                "    assert!(slice[2] == b'c');",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'i', b'S', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'i', b'S', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c']);",
                "    assert_eq!(slice.len(), 3);",
                "    assert!(slice.is_ascii());",
                "    assert!(result.is_ascii());",
                "    assert!(slice[0..result.len()] == *result);",
                "    assert!(result.len() == 3);",
                "    assert!(result[0] == b'i');",
                "    assert!(result[1] == b's');",
                "    assert!(result[2] == b'c');"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'i', b'S', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'i', b'S', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c']);",
                "    assert_eq!(slice.len(), 3);",
                "    assert!(slice.is_ascii());",
                "    assert!(result.is_ascii());",
                "    assert!(slice[0..result.len()] == *result);",
                "    assert!(result.len() == 3);",
                "    assert!(result[0] == b'i');",
                "    assert!(result[1] == b's');",
                "    assert!(result[2] == b'c');",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'I', b's', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "}"
              ],
              "oracle": [
                "    let mut slice: &mut [u8] = &mut [b'c', b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c']);",
                "    assert_eq!(slice.len(), 3);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'I', b's', b'c', b'_', b'x'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c', b'x']);",
                "    assert_eq!(slice.len(), 4);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c']);",
                "    assert_eq!(slice.len(), 3);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'I', b's', b'-', b'a', b'b'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b'a', b'b']);",
                "    assert_eq!(slice.len(), 3);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'I', b's', b'c', b'_'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c']);",
                "    assert_eq!(slice.len(), 3);"
              ],
              "code": [
                "{",
                "    let mut slice: &mut [u8] = &mut [b'I', b's', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    let mut slice: &mut [u8] = &mut [b'c', b' '];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c']);",
                "    assert_eq!(slice.len(), 3);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'I', b's', b'c', b'_', b'x'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c', b'x']);",
                "    assert_eq!(slice.len(), 4);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c']);",
                "    assert_eq!(slice.len(), 3);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'I', b's', b'-', b'a', b'b'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b'a', b'b']);",
                "    assert_eq!(slice.len(), 3);",
                "    ",
                "    let mut slice: &mut [u8] = &mut [b'I', b's', b'c', b'_'];",
                "    let result = symbolic_name_normalize_bytes(slice);",
                "    assert_eq!(result, &mut [b'i', b's', b'c']);",
                "    assert_eq!(slice.len(), 3);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}