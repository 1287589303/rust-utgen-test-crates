{
  "name": "regex_automata::nfa::thompson::builder::{impl#1}::add_range",
  "mod_info": {
    "name": "nfa::thompson::builder",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:58:1:58:13"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/builder.rs:756:5:761:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "transition.start is a valid byte range start (0 to 255), transition.end is a valid byte range end (0 to 255), transition.end is greater than or equal to transition.start, self.states does not exceed StateID limits, self.memory_states is within size_limit specified, BuildError is returned if any of these preconditions fail.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = Builder::new();",
                "    let trans = Transition { start: 0, end: 10, next: StateID::default() };",
                "    let _ = builder.add_range(trans);",
                "}"
              ],
              "oracle": [
                "    let mut builder = Builder::new();",
                "    let trans_valid = Transition { start: 0, end: 10, next: StateID::default() };",
                "    let result_valid = builder.add_range(trans_valid);",
                "    assert!(result_valid.is_ok());",
                "    let state_id_valid = result_valid.unwrap();",
                "    assert_ne!(state_id_valid, StateID::default());",
                "    ",
                "    let trans_invalid_start = Transition { start: 10, end: 5, next: StateID::default() };",
                "    let result_invalid_start = builder.add_range(trans_invalid_start);",
                "    assert!(result_invalid_start.is_err());",
                "    ",
                "    let trans_exceed_limit = Transition { start: 0, end: 255, next: StateID::default() };",
                "    builder.set_size_limit(Some(0));",
                "    let result_exceed_limit = builder.add_range(trans_exceed_limit);",
                "    assert!(result_exceed_limit.is_err());"
              ],
              "code": [
                "{",
                "    let mut builder = Builder::new();",
                "    let trans = Transition { start: 0, end: 10, next: StateID::default() };",
                "    let _ = builder.add_range(trans);",
                "    let mut builder = Builder::new();",
                "    let trans_valid = Transition { start: 0, end: 10, next: StateID::default() };",
                "    let result_valid = builder.add_range(trans_valid);",
                "    assert!(result_valid.is_ok());",
                "    let state_id_valid = result_valid.unwrap();",
                "    assert_ne!(state_id_valid, StateID::default());",
                "    ",
                "    let trans_invalid_start = Transition { start: 10, end: 5, next: StateID::default() };",
                "    let result_invalid_start = builder.add_range(trans_invalid_start);",
                "    assert!(result_invalid_start.is_err());",
                "    ",
                "    let trans_exceed_limit = Transition { start: 0, end: 255, next: StateID::default() };",
                "    builder.set_size_limit(Some(0));",
                "    let result_exceed_limit = builder.add_range(trans_exceed_limit);",
                "    assert!(result_exceed_limit.is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = Builder::new();",
                "    let trans = Transition { start: 0, end: 255, next: StateID::default() };",
                "    let _ = builder.add_range(trans);",
                "}"
              ],
              "oracle": [
                "    builder.add_range(Transition { start: 0, end: 255, next: StateID::default() }).is_ok();",
                "    builder.states.len().eq(&1);",
                "    matches!(builder.states[0], State::ByteRange { trans } if trans.start == 0 && trans.end == 255);",
                "    builder.memory_states.should().be_less_than_or_equal_to(usize::MAX);",
                "    builder.check_size_limit().is_ok();"
              ],
              "code": [
                "{",
                "    let mut builder = Builder::new();",
                "    let trans = Transition { start: 0, end: 255, next: StateID::default() };",
                "    let _ = builder.add_range(trans);",
                "    builder.add_range(Transition { start: 0, end: 255, next: StateID::default() }).is_ok();",
                "    builder.states.len().eq(&1);",
                "    matches!(builder.states[0], State::ByteRange { trans } if trans.start == 0 && trans.end == 255);",
                "    builder.memory_states.should().be_less_than_or_equal_to(usize::MAX);",
                "    builder.check_size_limit().is_ok();",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = Builder::new();",
                "    let trans = Transition { start: 255, end: 255, next: StateID::default() };",
                "    let _ = builder.add_range(trans);",
                "}"
              ],
              "oracle": [
                "    assert!(builder.states.len() > 0);",
                "    assert!(builder.states.last().unwrap().is_match == false);",
                "    assert!(builder.states.last().unwrap() == &State::ByteRange { trans });",
                "    assert!(builder.memory_states == builder.states.last().unwrap().memory_usage());",
                "    assert!(builder.get_utf8() == false);",
                "    assert!(builder.get_reverse() == false);"
              ],
              "code": [
                "{",
                "    let mut builder = Builder::new();",
                "    let trans = Transition { start: 255, end: 255, next: StateID::default() };",
                "    let _ = builder.add_range(trans);",
                "    assert!(builder.states.len() > 0);",
                "    assert!(builder.states.last().unwrap().is_match == false);",
                "    assert!(builder.states.last().unwrap() == &State::ByteRange { trans });",
                "    assert!(builder.memory_states == builder.states.last().unwrap().memory_usage());",
                "    assert!(builder.get_utf8() == false);",
                "    assert!(builder.get_reverse() == false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = Builder::new();",
                "    let trans = Transition { start: 10, end: 5, next: StateID::default() };",
                "    let result = builder.add_range(trans);",
                "    assert!(result.is_err());",
                "}"
              ],
              "oracle": [
                "    let mut builder = Builder::new();",
                "    let trans = Transition { start: 10, end: 5, next: StateID::default() };",
                "    assert!(builder.add_range(trans).is_err());"
              ],
              "code": [
                "{",
                "    let mut builder = Builder::new();",
                "    let trans = Transition { start: 10, end: 5, next: StateID::default() };",
                "    let result = builder.add_range(trans);",
                "    assert!(result.is_err());",
                "    let mut builder = Builder::new();",
                "    let trans = Transition { start: 10, end: 5, next: StateID::default() };",
                "    assert!(builder.add_range(trans).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = Builder::new();",
                "    builder.states = vec![State::ByteRange { trans: Transition { start: 0, end: 0, next: StateID::default() } }; 255];",
                "    let trans = Transition { start: 0, end: 10, next: StateID::default() };",
                "    let result = builder.add_range(trans);",
                "    assert!(result.is_err());",
                "}"
              ],
              "oracle": [
                "    builder.states = vec![State::ByteRange { trans: Transition { start: 0, end: 0, next: StateID::default() } }; 255];",
                "    let trans = Transition { start: 0, end: 10, next: StateID::default() };",
                "    let result = builder.add_range(trans);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap().kind, BuildErrorKind::StateIdExhausted);"
              ],
              "code": [
                "{",
                "    let mut builder = Builder::new();",
                "    builder.states = vec![State::ByteRange { trans: Transition { start: 0, end: 0, next: StateID::default() } }; 255];",
                "    let trans = Transition { start: 0, end: 10, next: StateID::default() };",
                "    let result = builder.add_range(trans);",
                "    assert!(result.is_err());",
                "    builder.states = vec![State::ByteRange { trans: Transition { start: 0, end: 0, next: StateID::default() } }; 255];",
                "    let trans = Transition { start: 0, end: 10, next: StateID::default() };",
                "    let result = builder.add_range(trans);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap().kind, BuildErrorKind::StateIdExhausted);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = Builder::new();",
                "    builder.memory_states = 1024; // Assume this exceeds some set limit",
                "    let trans = Transition { start: 0, end: 10, next: StateID::default() };",
                "    let result = builder.add_range(trans);",
                "    assert!(result.is_err());",
                "}"
              ],
              "oracle": [
                "    let mut builder = Builder::new();",
                "    builder.memory_states = 1024;",
                "    let trans = Transition { start: 0, end: 10, next: StateID::default() };",
                "    let result = builder.add_range(trans);",
                "    assert!(result.is_err());",
                "    ",
                "    builder.memory_states = 0;",
                "    let trans_1 = Transition { start: 255, end: 255, next: StateID::default() };",
                "    let result_1 = builder.add_range(trans_1);",
                "    assert!(result_1.is_ok());",
                "    ",
                "    let trans_2 = Transition { start: 10, end: 20, next: StateID::default() };",
                "    let result_2 = builder.add_range(trans_2);",
                "    assert!(result_2.is_ok());",
                "    ",
                "    builder.memory_states = usize::MAX;",
                "    let trans_out_of_bounds = Transition { start: 0, end: 255, next: StateID::default() };",
                "    let result_out_of_bounds = builder.add_range(trans_out_of_bounds);",
                "    assert!(result_out_of_bounds.is_err());",
                "    ",
                "    builder.set_size_limit(Some(1024));",
                "    let trans_exceeding_memory = Transition { start: 0, end: 10, next: StateID::default() };",
                "    let result_exceeding_memory = builder.add_range(trans_exceeding_memory);",
                "    assert!(result_exceeding_memory.is_err());",
                "    ",
                "    builder.clear();",
                "    let trans_basic = Transition { start: 5, end: 15, next: StateID::default() };",
                "    let result_basic = builder.add_range(trans_basic);",
                "    assert!(result_basic.is_ok());"
              ],
              "code": [
                "{",
                "    let mut builder = Builder::new();",
                "    builder.memory_states = 1024; // Assume this exceeds some set limit",
                "    let trans = Transition { start: 0, end: 10, next: StateID::default() };",
                "    let result = builder.add_range(trans);",
                "    assert!(result.is_err());",
                "    let mut builder = Builder::new();",
                "    builder.memory_states = 1024;",
                "    let trans = Transition { start: 0, end: 10, next: StateID::default() };",
                "    let result = builder.add_range(trans);",
                "    assert!(result.is_err());",
                "    ",
                "    builder.memory_states = 0;",
                "    let trans_1 = Transition { start: 255, end: 255, next: StateID::default() };",
                "    let result_1 = builder.add_range(trans_1);",
                "    assert!(result_1.is_ok());",
                "    ",
                "    let trans_2 = Transition { start: 10, end: 20, next: StateID::default() };",
                "    let result_2 = builder.add_range(trans_2);",
                "    assert!(result_2.is_ok());",
                "    ",
                "    builder.memory_states = usize::MAX;",
                "    let trans_out_of_bounds = Transition { start: 0, end: 255, next: StateID::default() };",
                "    let result_out_of_bounds = builder.add_range(trans_out_of_bounds);",
                "    assert!(result_out_of_bounds.is_err());",
                "    ",
                "    builder.set_size_limit(Some(1024));",
                "    let trans_exceeding_memory = Transition { start: 0, end: 10, next: StateID::default() };",
                "    let result_exceeding_memory = builder.add_range(trans_exceeding_memory);",
                "    assert!(result_exceeding_memory.is_err());",
                "    ",
                "    builder.clear();",
                "    let trans_basic = Transition { start: 5, end: 15, next: StateID::default() };",
                "    let result_basic = builder.add_range(trans_basic);",
                "    assert!(result_basic.is_ok());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}