{
  "name": "regex::builders::string::{impl#1}::case_insensitive",
  "mod_info": {
    "name": "builders::string",
    "loc": "src/builders.rs:200:1:1355:2"
  },
  "visible": true,
  "loc": "src/builders.rs:901:9:904:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "valid boolean inputs for case_insensitive: true or false\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re_set = RegexSetBuilder::new([\"foo(?-i:bar)quux\"])",
                "        .case_insensitive(true)",
                "        .build()",
                "        .unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(re_set.is_match(\"FoObarQuUx\"), true);",
                "    assert_eq!(re_set.is_match(\"fooBARquux\"), false);"
              ],
              "code": [
                "{",
                "    let re_set = RegexSetBuilder::new([\"foo(?-i:bar)quux\"])",
                "        .case_insensitive(true)",
                "        .build()",
                "        .unwrap();",
                "    assert_eq!(re_set.is_match(\"FoObarQuUx\"), true);",
                "    assert_eq!(re_set.is_match(\"fooBARquux\"), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re_set = RegexSetBuilder::new([\"foo(?-i:bar)quux\"])",
                "        .case_insensitive(false)",
                "        .build()",
                "        .unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(re_set.is_match(\"FoObarQuUx\"), false);",
                "    assert_eq!(re_set.is_match(\"fooBARquux\"), true);"
              ],
              "code": [
                "{",
                "    let re_set = RegexSetBuilder::new([\"foo(?-i:bar)quux\"])",
                "        .case_insensitive(false)",
                "        .build()",
                "        .unwrap();",
                "    assert_eq!(re_set.is_match(\"FoObarQuUx\"), false);",
                "    assert_eq!(re_set.is_match(\"fooBARquux\"), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re_set = RegexSetBuilder::new([\"\"])",
                "        .case_insensitive(true)",
                "        .build()",
                "        .unwrap();",
                "}"
              ],
              "oracle": [
                "    let re_set = RegexSetBuilder::new([\"\"]).case_insensitive(true).build().unwrap();",
                "    assert!(re_set.is_match(\"\"));",
                "    assert!(re_set.is_match(\"test\"));",
                "    let re_set_case_sensitive = RegexSetBuilder::new([\"(?-i:foo)\", \"bar\"]).case_insensitive(true).build().unwrap();",
                "    assert!(re_set_case_sensitive.is_match(\"Foo\"));",
                "    assert!(!re_set_case_sensitive.is_match(\"BAR\"));",
                "    let re_set_empty = RegexSetBuilder::new([]).case_insensitive(false).build().unwrap();",
                "    assert!(!re_set_empty.is_match(\"anything\"));"
              ],
              "code": [
                "{",
                "    let re_set = RegexSetBuilder::new([\"\"])",
                "        .case_insensitive(true)",
                "        .build()",
                "        .unwrap();",
                "    let re_set = RegexSetBuilder::new([\"\"]).case_insensitive(true).build().unwrap();",
                "    assert!(re_set.is_match(\"\"));",
                "    assert!(re_set.is_match(\"test\"));",
                "    let re_set_case_sensitive = RegexSetBuilder::new([\"(?-i:foo)\", \"bar\"]).case_insensitive(true).build().unwrap();",
                "    assert!(re_set_case_sensitive.is_match(\"Foo\"));",
                "    assert!(!re_set_case_sensitive.is_match(\"BAR\"));",
                "    let re_set_empty = RegexSetBuilder::new([]).case_insensitive(false).build().unwrap();",
                "    assert!(!re_set_empty.is_match(\"anything\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re_set = RegexSetBuilder::new([\"foo(?-i:bar)quux\", \"FOO(?-i:BAR)QUUX\"])",
                "        .case_insensitive(true)",
                "        .build()",
                "        .unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(re_set.is_match(\"FoObarQuUx\"), true);",
                "    assert_eq!(re_set.is_match(\"fooBARquux\"), false);",
                "    assert_eq!(re_set.is_match(\"FOObarQUUX\"), true);",
                "    assert_eq!(re_set.is_match(\"fooquux\"), true);",
                "    assert_eq!(re_set.is_match(\"FOOquux\"), true);",
                "    assert_eq!(re_set.is_match(\"FOObarQUUX\"), false);",
                "    assert_eq!(re_set.is_match(\"foobarquux\"), true);",
                "    assert_eq!(re_set.is_match(\"FOObarquux\"), true);"
              ],
              "code": [
                "{",
                "    let re_set = RegexSetBuilder::new([\"foo(?-i:bar)quux\", \"FOO(?-i:BAR)QUUX\"])",
                "        .case_insensitive(true)",
                "        .build()",
                "        .unwrap();",
                "    assert_eq!(re_set.is_match(\"FoObarQuUx\"), true);",
                "    assert_eq!(re_set.is_match(\"fooBARquux\"), false);",
                "    assert_eq!(re_set.is_match(\"FOObarQUUX\"), true);",
                "    assert_eq!(re_set.is_match(\"fooquux\"), true);",
                "    assert_eq!(re_set.is_match(\"FOOquux\"), true);",
                "    assert_eq!(re_set.is_match(\"FOObarQUUX\"), false);",
                "    assert_eq!(re_set.is_match(\"foobarquux\"), true);",
                "    assert_eq!(re_set.is_match(\"FOObarquux\"), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re_set = RegexSetBuilder::new([\"fOo(?-i:bAr)qUux\"])",
                "        .case_insensitive(true)",
                "        .build()",
                "        .unwrap();",
                "}"
              ],
              "oracle": [
                "    re_set.is_match(\"fOoQuUx\") == true",
                "    re_set.is_match(\"FOOQUUX\") == true",
                "    re_set.is_match(\"fOoBARqUux\") == false",
                "    re_set.is_match(\"fooBArQUUX\") == false",
                "    re_set.is_match(\"FOObarQux\") == false",
                "    re_set.is_match(\"foo(bar)quux\") == true"
              ],
              "code": [
                "{",
                "   let re_set = RegexSetBuilder::new([\"fOo(?-i:bAr)qUux\"])",
                "       .case_insensitive(true)",
                "       .build()",
                "       .unwrap();",
                "   assert!(re_set.is_match(\"fOoQuUx\") == true);",
                "   assert!(re_set.is_match(\"FOOQUUX\") == true);",
                "   assert!(re_set.is_match(\"fOoBARqUux\") == false);",
                "   assert!(re_set.is_match(\"fooBArQUUX\") == false);",
                "   assert!(re_set.is_match(\"FOObarQux\") == false);",
                "   assert!(re_set.is_match(\"foo(bar)quux\") == true);",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}