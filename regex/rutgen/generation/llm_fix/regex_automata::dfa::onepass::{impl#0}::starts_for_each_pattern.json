{
  "name": "regex_automata::dfa::onepass::{impl#0}::starts_for_each_pattern",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/onepass.rs:154:5:157:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "boolean values for starts_for_each_pattern (true, false)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().starts_for_each_pattern(true);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.starts_for_each_pattern, Some(true));",
                "    assert_eq!(config.get_match_kind(), MatchKind::All);",
                "    assert_eq!(config.get_byte_classes(), false);",
                "    assert_eq!(config.get_size_limit(), None);"
              ],
              "code": [
                "{",
                "    let config = Config::new().starts_for_each_pattern(true);",
                "    assert_eq!(config.starts_for_each_pattern, Some(true));",
                "    assert_eq!(config.get_match_kind(), MatchKind::All);",
                "    assert_eq!(config.get_byte_classes(), false);",
                "    assert_eq!(config.get_size_limit(), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().starts_for_each_pattern(false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_starts_for_each_pattern(), false);",
                "    assert!(config.starts_for_each_pattern.is_some());",
                "    assert_eq!(config.starts_for_each_pattern.unwrap(), false);",
                "    ",
                "    let config_true = Config::new().starts_for_each_pattern(true);",
                "    assert_eq!(config_true.get_starts_for_each_pattern(), true);",
                "    assert!(config_true.starts_for_each_pattern.is_some());",
                "    assert_eq!(config_true.starts_for_each_pattern.unwrap(), true);"
              ],
              "code": [
                "{",
                "    let config = Config::new().starts_for_each_pattern(false);",
                "    assert_eq!(config.get_starts_for_each_pattern(), false);",
                "    assert!(config.starts_for_each_pattern.is_some());",
                "    assert_eq!(config.starts_for_each_pattern.unwrap(), false);",
                "    ",
                "    let config_true = Config::new().starts_for_each_pattern(true);",
                "    assert_eq!(config_true.get_starts_for_each_pattern(), true);",
                "    assert!(config_true.starts_for_each_pattern.is_some());",
                "    assert_eq!(config_true.starts_for_each_pattern.unwrap(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}