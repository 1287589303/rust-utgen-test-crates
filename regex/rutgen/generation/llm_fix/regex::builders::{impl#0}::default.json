{
  "name": "regex::builders::{impl#0}::default",
  "mod_info": {
    "name": "builders",
    "loc": "src/lib.rs:1331:1:1331:14"
  },
  "visible": true,
  "loc": "src/builders.rs:51:5:56:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Builder { pats: vec![], metac, syntaxc: syntax::Config::default() }\n"
      ],
      "input_infer": "Test input conditions or ranges: invocation of the `default()` function on the `Builder` struct, ensuring no modifications to `metac` or `syntaxc` prior to call, and validation of default values for `pats`, `metac.nfa_size_limit`, and `metac.hybrid_cache_capacity`.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let builder = Builder::default();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.pats, vec![]);",
                "    assert!(builder.metac.nfa_size_limit().is_some());",
                "    assert_eq!(builder.metac.nfa_size_limit(), Some(10 * (1 << 20)));",
                "    assert_eq!(builder.metac.hybrid_cache_capacity(), 2 * (1 << 20));",
                "    assert_eq!(builder.syntaxc, syntax::Config::default());"
              ],
              "code": [
                "{",
                "   let builder = Builder::default();",
                "   assert_eq!(builder.pats, vec![]);",
                "   assert!(builder.metac.nfa_size_limit(Some(0)).is_some());",
                "   assert_eq!(builder.metac.nfa_size_limit(Some(10 * (1 << 20))), Some(10 * (1 << 20)));",
                "  assert_eq!(builder.metac.hybrid_cache_capacity(2 * (1 << 20)), 2 * (1 << 20));",
                "  assert_eq!(builder.syntaxc, syntax::Config::default());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let builder = Builder::default();",
                "    let _ = builder.pats.clone();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.pats, vec![]);",
                "    assert_eq!(builder.metac.nfa_size_limit(), Some(10 * (1 << 20)));",
                "    assert_eq!(builder.metac.hybrid_cache_capacity(), 2 * (1 << 20));",
                "    assert_eq!(builder.syntaxc, syntax::Config::default());"
              ],
              "code": [
                "{",
                "  let builder = Builder::default();  ",
                "  let _ = builder.pats.clone();  ",
                "  assert_eq!(builder.pats, vec![]);  ",
                "  assert_eq!(builder.metac.nfa_size_limit(Some(10 * (1 << 20))), Some(10 * (1 << 20)));  ",
                "   assert_eq!(builder.metac.hybrid_cache_capacity(2 * (1 << 20)), 2 * (1 << 20));",
                "   assert_eq!(builder.syntaxc, syntax::Config::default());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let builder = Builder::default();",
                "    let _ = builder.metac.nfa_size_limit;",
                "}"
              ],
              "oracle": [
                "    let builder = Builder::default();",
                "    assert_eq!(builder.pats, vec![]);",
                "    assert_eq!(builder.metac.nfa_size_limit, Some(10 * (1 << 20)));",
                "    assert_eq!(builder.metac.hybrid_cache_capacity, 2 * (1 << 20));",
                "    assert_eq!(builder.syntaxc, syntax::Config::default());"
              ],
              "code": [
                "{",
                "    let builder = Builder::default();",
                "    let _ = builder.metac.nfa_size_limit;",
                "    let builder = Builder::default();",
                "    assert_eq!(builder.pats, vec![]);",
                "    assert_eq!(builder.metac.nfa_size_limit, Some(10 * (1 << 20)));",
                "    assert_eq!(builder.metac.hybrid_cache_capacity, 2 * (1 << 20));",
                "    assert_eq!(builder.syntaxc, syntax::Config::default());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let builder = Builder::default();",
                "    let _ = builder.metac.hybrid_cache_capacity;",
                "}"
              ],
              "oracle": [
                "    let builder = Builder::default();",
                "    assert!(builder.pats.is_empty());",
                "    assert_eq!(builder.metac.nfa_size_limit, Some(10 * (1 << 20)));",
                "    assert_eq!(builder.metac.hybrid_cache_capacity, 2 * (1 << 20));",
                "    assert_eq!(builder.syntaxc, syntax::Config::default());"
              ],
              "code": [
                "{",
                "    let builder = Builder::default();",
                "    let _ = builder.metac.hybrid_cache_capacity;",
                "    let builder = Builder::default();",
                "    assert!(builder.pats.is_empty());",
                "    assert_eq!(builder.metac.nfa_size_limit, Some(10 * (1 << 20)));",
                "    assert_eq!(builder.metac.hybrid_cache_capacity, 2 * (1 << 20));",
                "    assert_eq!(builder.syntaxc, syntax::Config::default());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let builder = Builder::default();",
                "    let _ = builder.syntaxc.clone();",
                "}"
              ],
              "oracle": [
                "    let builder = Builder::default();",
                "    assert_eq!(builder.pats, vec![]);",
                "    assert_eq!(builder.metac.nfa_size_limit(), Some(10 * (1 << 20)));",
                "    assert_eq!(builder.metac.hybrid_cache_capacity(), 2 * (1 << 20));",
                "    assert_eq!(builder.syntaxc, syntax::Config::default());"
              ],
              "code": [
                "{",
                "    let builder = Builder::default();",
                "    let _ = builder.syntaxc.clone();",
                "    let builder = Builder::default();",
                "    assert_eq!(builder.pats, vec![]);",
                "   assert_eq!(builder.metac.nfa_size_limit(Some(10 * (1 << 20))), Some(10 * (1 << 20)));",
                "   assert_eq!(builder.metac.hybrid_cache_capacity(), 2 * (1 << 20));",
                "   assert_eq!(builder.syntaxc, syntax::Config::default());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}