{
  "name": "regex_automata::util::prefilter::memchr::{impl#3}::prefix",
  "mod_info": {
    "name": "util::prefilter::memchr",
    "loc": "regex-automata/src/util/prefilter/mod.rs:38:1:38:12"
  },
  "visible": true,
  "loc": "regex-automata/src/util/prefilter/memchr.rs:108:5:115:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: haystack.get(span.start)? at line 109 is Err/None\n"
      ],
      "input_infer": "haystack: empty array or span with start equal to or greater than haystack length\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let prefilter = Memchr2(1, 2);",
                "    let haystack: &[u8] = &[];",
                "    let span = Span { start: 0, end: 1 };",
                "    let _ = prefilter.prefix(haystack, span);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(prefilter.prefix(haystack, span), None);"
              ],
              "code": [
                "{",
                "    let prefilter = Memchr2(1, 2);",
                "    let haystack: &[u8] = &[];",
                "    let span = Span { start: 0, end: 1 };",
                "    let _ = prefilter.prefix(haystack, span);",
                "    assert_eq!(prefilter.prefix(haystack, span), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let prefilter = Memchr2(1, 2);",
                "    let haystack: &[u8] = &[1, 2, 3];",
                "    let span = Span { start: 3, end: 4 };",
                "    let _ = prefilter.prefix(haystack, span);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(prefilter.prefix(haystack, span), None);"
              ],
              "code": [
                "{",
                "    let prefilter = Memchr2(1, 2);",
                "    let haystack: &[u8] = &[1, 2, 3];",
                "    let span = Span { start: 3, end: 4 };",
                "    let _ = prefilter.prefix(haystack, span);",
                "    assert_eq!(prefilter.prefix(haystack, span), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let prefilter = Memchr2(1, 2);",
                "    let haystack: &[u8] = &[1, 2, 3];",
                "    let span = Span { start: 4, end: 5 };",
                "    let _ = prefilter.prefix(haystack, span);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(prefilter.prefix(haystack, span), None);"
              ],
              "code": [
                "{",
                "    let prefilter = Memchr2(1, 2);",
                "    let haystack: &[u8] = &[1, 2, 3];",
                "    let span = Span { start: 4, end: 5 };",
                "    let _ = prefilter.prefix(haystack, span);",
                "    assert_eq!(prefilter.prefix(haystack, span), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: haystack.get(span.start)? at line 109 is Ok/Some\n",
        "precondition: self.0 == b at line 110 is true\n",
        "expected return value/type: Some(Span { start: span.start, end: span.start + 1 })\n"
      ],
      "input_infer": "haystack: non-empty array of u8 with at least span.start + 1 elements, span.start: valid index within haystack, self.0: u8 value equal to haystack[span.start], self.1: any u8 value\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let haystack: &[u8] = &[b'a', b'b', b'c'];",
                "    let span = Span { start: 0, end: 1 };",
                "    let filter = Memchr2(b'a', b'b');",
                "    let result = filter.prefix(haystack, span);",
                "}"
              ],
              "oracle": [
                "    result.is_some();",
                "    assert_eq!(result, Some(Span { start: 0, end: 1 }));",
                "    assert_eq!(result.unwrap().start, span.start);",
                "    assert_eq!(result.unwrap().end, span.start + 1);"
              ],
              "code": [
                "{",
                "    let haystack: &[u8] = &[b'a', b'b', b'c'];",
                "    let span = Span { start: 0, end: 1 };",
                "    let filter = Memchr2(b'a', b'b');",
                "    let result = filter.prefix(haystack, span);",
                "    result.is_some();",
                "    assert_eq!(result, Some(Span { start: 0, end: 1 }));",
                "    assert_eq!(result.unwrap().start, span.start);",
                "    assert_eq!(result.unwrap().end, span.start + 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let haystack: &[u8] = &[b'a', b'b', b'c'];",
                "    let span = Span { start: 1, end: 2 };",
                "    let filter = Memchr2(b'b', b'a');",
                "    let result = filter.prefix(haystack, span);",
                "}"
              ],
              "oracle": [
                "    let haystack: &[u8] = &[b'a', b'b', b'c'];",
                "    let span = Span { start: 1, end: 2 };",
                "    let filter = Memchr2(b'b', b'a');",
                "    let expected = Some(Span { start: span.start, end: span.start + 1 });",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let haystack: &[u8] = &[b'a', b'b', b'c'];",
                "    let span = Span { start: 1, end: 2 };",
                "    let filter = Memchr2(b'b', b'a');",
                "    let result = filter.prefix(haystack, span);",
                "    let haystack: &[u8] = &[b'a', b'b', b'c'];",
                "    let span = Span { start: 1, end: 2 };",
                "    let filter = Memchr2(b'b', b'a');",
                "    let expected = Some(Span { start: span.start, end: span.start + 1 });",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let haystack: &[u8] = &[b'a', b'b', b'c'];",
                "    let span = Span { start: 1, end: 2 };",
                "    let filter = Memchr2(b'c', b'a');",
                "    let result = filter.prefix(haystack, span);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    let expected = Some(Span { start: 1, end: 2 });",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let haystack: &[u8] = &[b'a', b'b', b'c'];",
                "    let span = Span { start: 1, end: 2 };",
                "    let filter = Memchr2(b'c', b'a');",
                "    let result = filter.prefix(haystack, span);",
                "    assert!(result.is_some());",
                "    let expected = Some(Span { start: 1, end: 2 });",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: haystack.get(span.start)? at line 109 is Ok/Some\n",
        "precondition: self.0 == b at line 110 is false\n",
        "precondition: self.1 == b at line 110 is true\n",
        "expected return value/type: Some(Span { start: span.start, end: span.start + 1 })\n"
      ],
      "input_infer": "haystack: non-empty byte array containing self.1 at index span.start; span: Span with valid start index within haystack bounds, end index greater than start index\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let memchr = Memchr2(1, 2);",
                "    let haystack: &[u8] = &[0, 1, 2, 3];",
                "    let span = Span { start: 1, end: 2 };",
                "    let result = memchr.prefix(haystack, span);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(Span { start: span.start, end: span.start + 1 }));",
                "    let span = Span { start: 2, end: 3 };",
                "    let result = memchr.prefix(haystack, span);",
                "    assert_eq!(result, None);",
                "    let memchr = Memchr2(2, 1);",
                "    let span = Span { start: 1, end: 2 };",
                "    let result = memchr.prefix(haystack, span);",
                "    assert_eq!(result, Some(Span { start: span.start, end: span.start + 1 }));",
                "    let span = Span { start: 0, end: 1 };",
                "    let result = memchr.prefix(haystack, span);",
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let memchr = Memchr2(1, 2);",
                "    let haystack: &[u8] = &[0, 1, 2, 3];",
                "    let span = Span { start: 1, end: 2 };",
                "    let result = memchr.prefix(haystack, span);",
                "    assert_eq!(result, Some(Span { start: span.start, end: span.start + 1 }));",
                "    let span = Span { start: 2, end: 3 };",
                "    let result = memchr.prefix(haystack, span);",
                "    assert_eq!(result, None);",
                "    let memchr = Memchr2(2, 1);",
                "    let span = Span { start: 1, end: 2 };",
                "    let result = memchr.prefix(haystack, span);",
                "    assert_eq!(result, Some(Span { start: span.start, end: span.start + 1 }));",
                "    let span = Span { start: 0, end: 1 };",
                "    let result = memchr.prefix(haystack, span);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let memchr = Memchr2(3, 4);",
                "    let haystack: &[u8] = &[4, 5, 4, 6];",
                "    let span = Span { start: 0, end: 1 };",
                "    let result = memchr.prefix(haystack, span);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(Span { start: 0, end: 1 }));",
                "    assert!(result.is_some());",
                "    assert!(result.unwrap().start == span.start);",
                "    assert!(result.unwrap().end == span.start + 1);"
              ],
              "code": [
                "{",
                "    let memchr = Memchr2(3, 4);",
                "    let haystack: &[u8] = &[4, 5, 4, 6];",
                "    let span = Span { start: 0, end: 1 };",
                "    let result = memchr.prefix(haystack, span);",
                "    assert_eq!(result, Some(Span { start: 0, end: 1 }));",
                "    assert!(result.is_some());",
                "    assert!(result.unwrap().start == span.start);",
                "    assert!(result.unwrap().end == span.start + 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 4,
      "prompt_conds": [
        "precondition: haystack.get(span.start)? at line 109 is Ok/Some\n",
        "precondition: self.0 == b at line 110 is false\n",
        "precondition: self.1 == b at line 110 is false\n",
        "expected return value/type: None\n"
      ],
      "input_infer": "haystack: non-empty byte array, span: Span with start within bounds of haystack, self.0 and self.1 values not equal to haystack[span.start]\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let haystack: &[u8] = &[1, 2, 3, 4, 5];",
                "    let span = Span { start: 2, end: 3 }; // span.start is 2, which is within bounds of haystack",
                "    let prefilter = Memchr2(6, 7); // self.0 and self.1 not equal to haystack[span.start] (which is 3)",
                "",
                "    prefilter.prefix(haystack, span);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(prefilter.prefix(haystack, span), None);"
              ],
              "code": [
                "{",
                "    let haystack: &[u8] = &[1, 2, 3, 4, 5];",
                "    let span = Span { start: 2, end: 3 }; // span.start is 2, which is within bounds of haystack",
                "    let prefilter = Memchr2(6, 7); // self.0 and self.1 not equal to haystack[span.start] (which is 3)",
                "",
                "    prefilter.prefix(haystack, span);",
                "    assert_eq!(prefilter.prefix(haystack, span), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let haystack: &[u8] = &[8, 9, 10, 11, 12];",
                "    let span = Span { start: 1, end: 2 }; // span.start is 1, which is within bounds of haystack",
                "    let prefilter = Memchr2(0, 7); // self.0 and self.1 not equal to haystack[span.start] (which is 9)",
                "",
                "    prefilter.prefix(haystack, span);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(prefilter.prefix(haystack, span), None);"
              ],
              "code": [
                "{",
                "    let haystack: &[u8] = &[8, 9, 10, 11, 12];",
                "    let span = Span { start: 1, end: 2 }; // span.start is 1, which is within bounds of haystack",
                "    let prefilter = Memchr2(0, 7); // self.0 and self.1 not equal to haystack[span.start] (which is 9)",
                "",
                "    prefilter.prefix(haystack, span);",
                "    assert_eq!(prefilter.prefix(haystack, span), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let haystack: &[u8] = &[15];",
                "    let span = Span { start: 0, end: 1 }; // span.start is 0, which is within bounds of haystack",
                "    let prefilter = Memchr2(1, 2); // self.0 and self.1 not equal to haystack[span.start] (which is 15)",
                "",
                "    prefilter.prefix(haystack, span);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(prefilter.prefix(haystack, span), None);"
              ],
              "code": [
                "{",
                "    let haystack: &[u8] = &[15];",
                "    let span = Span { start: 0, end: 1 }; // span.start is 0, which is within bounds of haystack",
                "    let prefilter = Memchr2(1, 2); // self.0 and self.1 not equal to haystack[span.start] (which is 15)",
                "",
                "    prefilter.prefix(haystack, span);",
                "    assert_eq!(prefilter.prefix(haystack, span), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}