{
  "name": "regex_automata::util::determinize::state::write_varu32",
  "mod_info": {
    "name": "util::determinize::state",
    "loc": "regex-automata/src/util/determinize/mod.rs:57:1:57:11"
  },
  "visible": false,
  "loc": "regex-automata/src/util/determinize/state.rs:763:1:769:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: n >= 0b1000_0000 at line 764 is true, with bound n == 0b1000_0000\n",
        "precondition: n >= 0b1000_0000 at line 764 is false\n"
      ],
      "input_infer": "0, 127, 128, 16383, 16384, 2147483647\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut data = Vec::new();",
                "    write_varu32(&mut data, 0);",
                "}"
              ],
              "oracle": [
                "    data.push(0);",
                "    data.push(0b1000_0000);",
                "    data.push(0b0000_0001);",
                "    data.push(0b0000_0010);",
                "    data.push(0b0000_0000);"
              ],
              "code": [
                "{",
                "    let mut data = Vec::new();",
                "    write_varu32(&mut data, 0);",
                "    data.push(0);",
                "    data.push(0b1000_0000);",
                "    data.push(0b0000_0001);",
                "    data.push(0b0000_0010);",
                "    data.push(0b0000_0000);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut data = Vec::new();",
                "    write_varu32(&mut data, 127);",
                "}"
              ],
              "oracle": [
                "    data.push(0b01111111);",
                "    data.clear();",
                "    write_varu32(&mut data, 128);",
                "    assert_eq!(data, vec![0b10000000, 0b00000001]);",
                "    data.clear();",
                "    write_varu32(&mut data, 16384);",
                "    assert_eq!(data, vec![0b10000010, 0b00000000, 0b00000001]);",
                "    data.clear();",
                "    write_varu32(&mut data, 0b1000_0000);",
                "    assert_eq!(data, vec![0b10000000, 0b00000000, 0b00000001]);",
                "    data.clear();",
                "    write_varu32(&mut data, 0);",
                "    assert_eq!(data, vec![0]);"
              ],
              "code": [
                "{",
                "    let mut data = Vec::new();",
                "    write_varu32(&mut data, 127);",
                "    data.push(0b01111111);",
                "    data.clear();",
                "    write_varu32(&mut data, 128);",
                "    assert_eq!(data, vec![0b10000000, 0b00000001]);",
                "    data.clear();",
                "    write_varu32(&mut data, 16384);",
                "    assert_eq!(data, vec![0b10000010, 0b00000000, 0b00000001]);",
                "    data.clear();",
                "    write_varu32(&mut data, 0b1000_0000);",
                "    assert_eq!(data, vec![0b10000000, 0b00000000, 0b00000001]);",
                "    data.clear();",
                "    write_varu32(&mut data, 0);",
                "    assert_eq!(data, vec![0]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut data = Vec::new();",
                "    write_varu32(&mut data, 128);",
                "}"
              ],
              "oracle": [
                "    data.push(0b1000_0000 | 0b00000000); // Check for n = 128, the first byte should be 0b10000000",
                "    data.push(0b00000000);               // Check for n = 0 after shifting, the second byte should be 0b00000000",
                "    ",
                "    let mut data = Vec::new();",
                "    write_varu32(&mut data, 0b1000_0000); // Check for n = 128, the first byte should be 0b10000000",
                "    assert_eq!(data.len(), 1);             // Verify only one byte is written in this case",
                "    assert_eq!(data[0], 0b10000000);       // Verify the actual byte value is correct",
                "    ",
                "    let mut data = Vec::new();",
                "    write_varu32(&mut data, 0);            // Check for n = 0, expect one byte output",
                "    assert_eq!(data.len(), 1);             // Verify exactly one byte is written",
                "    assert_eq!(data[0], 0);                 // Verify byte is zero",
                "    ",
                "    let mut data = Vec::new();",
                "    write_varu32(&mut data, 255);          // Check for n = 255",
                "    assert_eq!(data.len(), 1);             // Only one byte should be written",
                "    assert_eq!(data[0], 0b11111111);       // Verify the byte output is correct",
                "    ",
                "    let mut data = Vec::new();",
                "    write_varu32(&mut data, 256);          // Check for n = 256",
                "    assert_eq!(data.len(), 2);             // Two bytes should be written",
                "    assert_eq!(data[0], 0b10000000 | 0b00000001); // Verify first byte",
                "    assert_eq!(data[1], 0b00000000);       // Verify second byte",
                "    ",
                "    let mut data = Vec::new();",
                "    write_varu32(&mut data, 0b01111111);   // Check for maximum value in the first byte",
                "    assert_eq!(data.len(), 1);             // Only one byte should be written",
                "    assert_eq!(data[0], 0b01111111);       // Verify the byte output is correct"
              ],
              "code": [
                "{",
                "    let mut data = Vec::new();",
                "    write_varu32(&mut data, 128);",
                "    data.push(0b1000_0000 | 0b00000000); // Check for n = 128, the first byte should be 0b10000000",
                "    data.push(0b00000000);               // Check for n = 0 after shifting, the second byte should be 0b00000000",
                "    ",
                "    let mut data = Vec::new();",
                "    write_varu32(&mut data, 0b1000_0000); // Check for n = 128, the first byte should be 0b10000000",
                "    assert_eq!(data.len(), 1);             // Verify only one byte is written in this case",
                "    assert_eq!(data[0], 0b10000000);       // Verify the actual byte value is correct",
                "    ",
                "    let mut data = Vec::new();",
                "    write_varu32(&mut data, 0);            // Check for n = 0, expect one byte output",
                "    assert_eq!(data.len(), 1);             // Verify exactly one byte is written",
                "    assert_eq!(data[0], 0);                 // Verify byte is zero",
                "    ",
                "    let mut data = Vec::new();",
                "    write_varu32(&mut data, 255);          // Check for n = 255",
                "    assert_eq!(data.len(), 1);             // Only one byte should be written",
                "    assert_eq!(data[0], 0b11111111);       // Verify the byte output is correct",
                "    ",
                "    let mut data = Vec::new();",
                "    write_varu32(&mut data, 256);          // Check for n = 256",
                "    assert_eq!(data.len(), 2);             // Two bytes should be written",
                "    assert_eq!(data[0], 0b10000000 | 0b00000001); // Verify first byte",
                "    assert_eq!(data[1], 0b00000000);       // Verify second byte",
                "    ",
                "    let mut data = Vec::new();",
                "    write_varu32(&mut data, 0b01111111);   // Check for maximum value in the first byte",
                "    assert_eq!(data.len(), 1);             // Only one byte should be written",
                "    assert_eq!(data[0], 0b01111111);       // Verify the byte output is correct",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut data = Vec::new();",
                "    write_varu32(&mut data, 16383);",
                "}"
              ],
              "oracle": [
                "    data.push(0b1000_0000 | (16383 & 0b01111111) as u8);",
                "    data.push((16383 >> 7) as u8);",
                "    data.push(0b0000_1111);",
                "    data.push(0b0000_0011);",
                "    assert_eq!(data, vec![0b1000_0000 | 0b1111111, 0b0000_1111, 0b0000_0011]);",
                "    ",
                "    let mut data = Vec::new();",
                "    write_varu32(&mut data, 0b1000_0000);",
                "    assert_eq!(data, vec![0b1000_0000, 0]);",
                "    ",
                "    let mut data = Vec::new();",
                "    write_varu32(&mut data, 0);",
                "    assert_eq!(data, vec![0]);",
                "    ",
                "    let mut data = Vec::new();",
                "    write_varu32(&mut data, 1);",
                "    assert_eq!(data, vec![1]);",
                "    ",
                "    let mut data = Vec::new();",
                "    write_varu32(&mut data, 127);",
                "    assert_eq!(data, vec![127]);",
                "    ",
                "    let mut data = Vec::new();",
                "    write_varu32(&mut data, 128);",
                "    assert_eq!(data, vec![0b1000_0000 | 0b0000_0000, 1]);",
                "    ",
                "    let mut data = Vec::new();",
                "    write_varu32(&mut data, 16384);",
                "    assert_eq!(data, vec![0b1000_0000 | (16384 & 0b01111111) as u8, (16384 >> 7) as u8]);"
              ],
              "code": [
                "{",
                "    let mut data = Vec::new();",
                "    write_varu32(&mut data, 16383);",
                "    data.push(0b1000_0000 | (16383 & 0b01111111) as u8);",
                "    data.push((16383 >> 7) as u8);",
                "    data.push(0b0000_1111);",
                "    data.push(0b0000_0011);",
                "    assert_eq!(data, vec![0b1000_0000 | 0b1111111, 0b0000_1111, 0b0000_0011]);",
                "    ",
                "    let mut data = Vec::new();",
                "    write_varu32(&mut data, 0b1000_0000);",
                "    assert_eq!(data, vec![0b1000_0000, 0]);",
                "    ",
                "    let mut data = Vec::new();",
                "    write_varu32(&mut data, 0);",
                "    assert_eq!(data, vec![0]);",
                "    ",
                "    let mut data = Vec::new();",
                "    write_varu32(&mut data, 1);",
                "    assert_eq!(data, vec![1]);",
                "    ",
                "    let mut data = Vec::new();",
                "    write_varu32(&mut data, 127);",
                "    assert_eq!(data, vec![127]);",
                "    ",
                "    let mut data = Vec::new();",
                "    write_varu32(&mut data, 128);",
                "    assert_eq!(data, vec![0b1000_0000 | 0b0000_0000, 1]);",
                "    ",
                "    let mut data = Vec::new();",
                "    write_varu32(&mut data, 16384);",
                "    assert_eq!(data, vec![0b1000_0000 | (16384 & 0b01111111) as u8, (16384 >> 7) as u8]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut data = Vec::new();",
                "    write_varu32(&mut data, 16384);",
                "}"
              ],
              "oracle": [
                "    data.push(0b1000_0000 | 0b1000_0000);  // Expected byte for n = 16384, first write",
                "    data.push(0b0000_0001);                  // Expected byte for n = 16384, second write",
                "    assert_eq!(data, vec![0b1000_0000 | 0b1000_0000, 0b0000_0001]); // Validate final output"
              ],
              "code": [
                "{",
                "    let mut data = Vec::new();",
                "    write_varu32(&mut data, 16384);",
                "    data.push(0b1000_0000 | 0b1000_0000);  // Expected byte for n = 16384, first write",
                "    data.push(0b0000_0001);                  // Expected byte for n = 16384, second write",
                "    assert_eq!(data, vec![0b1000_0000 | 0b1000_0000, 0b0000_0001]); // Validate final output",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut data = Vec::new();",
                "    write_varu32(&mut data, 2147483647);",
                "}"
              ],
              "oracle": [
                "    let mut data = Vec::new(); write_varu32(&mut data, 0b1000_0000); assert_eq!(data, vec![0b1000_0000]);",
                "    let mut data = Vec::new(); write_varu32(&mut data, 0b1000_0001); assert_eq!(data, vec![0b1000_0001, 0]);",
                "    let mut data = Vec::new(); write_varu32(&mut data, 0u32); assert_eq!(data, vec![0]);",
                "    let mut data = Vec::new(); write_varu32(&mut data, 127); assert_eq!(data, vec![127]);",
                "    let mut data = Vec::new(); write_varu32(&mut data, 128); assert_eq!(data, vec![0b1000_0000, 0]);",
                "    let mut data = Vec::new(); write_varu32(&mut data, 255); assert_eq!(data, vec![0b1000_0000 | 0b01111111, 0b11111111]);",
                "    let mut data = Vec::new(); write_varu32(&mut data, 2147483647); assert_eq!(data.len(), 5);",
                "    let mut data = Vec::new(); write_varu32(&mut data, 1); assert_eq!(data, vec![1]);",
                "    let mut data = Vec::new(); write_varu32(&mut data, 100000); assert_eq!(data,[178, 147]);",
                "    let mut data = Vec::new(); write_varu32(&mut data, 0b01111111); assert_eq!(data, vec![0b01111111]);"
              ],
              "code": [
                "{",
                "    let mut data = Vec::new();",
                "    write_varu32(&mut data, 2147483647);",
                "    let mut data = Vec::new(); write_varu32(&mut data, 0b1000_0000); assert_eq!(data, vec![0b1000_0000]);",
                "    let mut data = Vec::new(); write_varu32(&mut data, 0b1000_0001); assert_eq!(data, vec![0b1000_0001, 0]);",
                "    let mut data = Vec::new(); write_varu32(&mut data, 0u32); assert_eq!(data, vec![0]);",
                "    let mut data = Vec::new(); write_varu32(&mut data, 127); assert_eq!(data, vec![127]);",
                "    let mut data = Vec::new(); write_varu32(&mut data, 128); assert_eq!(data, vec![0b1000_0000, 0]);",
                "    let mut data = Vec::new(); write_varu32(&mut data, 255); assert_eq!(data, vec![0b1000_0000 | 0b01111111, 0b11111111]);",
                "    let mut data = Vec::new(); write_varu32(&mut data, 2147483647); assert_eq!(data.len(), 5);",
                "    let mut data = Vec::new(); write_varu32(&mut data, 1); assert_eq!(data, vec![1]);",
                "    let mut data = Vec::new(); write_varu32(&mut data, 100000); assert_eq!(data,[178, 147]);",
                "    let mut data = Vec::new(); write_varu32(&mut data, 0b01111111); assert_eq!(data, vec![0b01111111]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: n >= 0b1000_0000 at line 764 is false\n"
      ],
      "input_infer": "0 <= n <= 0xFFFFFFFF\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut data = Vec::new();",
                "    let n: u32 = 0;",
                "    write_varu32(&mut data, n);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(data, vec![0]);"
              ],
              "code": [
                "{",
                "    let mut data = Vec::new();",
                "    let n: u32 = 0;",
                "    write_varu32(&mut data, n);",
                "    assert_eq!(data, vec![0]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut data = Vec::new();",
                "    let n: u32 = 1;",
                "    write_varu32(&mut data, n);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(data, vec![1]);"
              ],
              "code": [
                "{",
                "    let mut data = Vec::new();",
                "    let n: u32 = 1;",
                "    write_varu32(&mut data, n);",
                "    assert_eq!(data, vec![1]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut data = Vec::new();",
                "    let n: u32 = 127;",
                "    write_varu32(&mut data, n);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(data.len(), 1);",
                "    assert_eq!(data[0], 127);"
              ],
              "code": [
                "{",
                "    let mut data = Vec::new();",
                "    let n: u32 = 127;",
                "    write_varu32(&mut data, n);",
                "    assert_eq!(data.len(), 1);",
                "    assert_eq!(data[0], 127);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut data = Vec::new();",
                "    let n: u32 = 128;",
                "    write_varu32(&mut data, n);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(data.len(), 1);",
                "    assert_eq!(data[0], 128);",
                "    assert_eq!(data, vec![128]);"
              ],
              "code": [
                "{",
                "    let mut data = Vec::new();",
                "    let n: u32 = 128;",
                "    write_varu32(&mut data, n);",
                "    assert_eq!(data.len(), 1);",
                "    assert_eq!(data[0], 128);",
                "    assert_eq!(data, vec![128]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut data = Vec::new();",
                "    let n: u32 = 255;",
                "    write_varu32(&mut data, n);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(data.len(), 1);",
                "    assert_eq!(data[0], 255);"
              ],
              "code": [
                "{",
                "    let mut data = Vec::new();",
                "    let n: u32 = 255;",
                "    write_varu32(&mut data, n);",
                "    assert_eq!(data.len(), 1);",
                "    assert_eq!(data[0], 255);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut data = Vec::new();",
                "    let n: u32 = 256;",
                "    write_varu32(&mut data, n);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(data, vec![0b1000_0000 | 0b0000_0001, 0b0000_0000]);"
              ],
              "code": [
                "{",
                "    let mut data = Vec::new();",
                "    let n: u32 = 256;",
                "    write_varu32(&mut data, n);",
                "    assert_eq!(data, vec![0b1000_0000 | 0b0000_0001, 0b0000_0000]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut data = Vec::new();",
                "    let n: u32 = 16383;",
                "    write_varu32(&mut data, n);",
                "}"
              ],
              "oracle": [
                "    let mut data = Vec::new();",
                "    let n: u32 = 16383;",
                "    write_varu32(&mut data, n);",
                "    assert_eq!(data, vec![0b00111111, 0b01111111]);"
              ],
              "code": [
                "{",
                "    let mut data = Vec::new();",
                "    let n: u32 = 16383;",
                "    write_varu32(&mut data, n);",
                "    let mut data = Vec::new();",
                "    let n: u32 = 16383;",
                "    write_varu32(&mut data, n);",
                "    assert_eq!(data, vec![0b00111111, 0b01111111]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut data = Vec::new();",
                "    let n: u32 = 16384;",
                "    write_varu32(&mut data, n);",
                "}"
              ],
              "oracle": [
                "    data.len() == 0  // Verify that the data vector is initially empty",
                "    data[0] == 0b1000_0000 | (16384 & 0b0111_1111)  // Check the first byte",
                "    data[1] == 0b1000_0000 | ((16384 >> 7) & 0b0111_1111)  // Check the second byte",
                "    data[2] == (16384 >> 14) & 0b0111_1111  // Check the third byte",
                "    data.len() <= 3  // Ensure the length of data is within expected range for normal cases"
              ],
              "code": [
                "{",
                "    let mut data = Vec::new();",
                "    let n: u32 = 16384;",
                "    write_varu32(&mut data, n);",
                "    data.len() == 0  // Verify that the data vector is initially empty",
                "    data[0] == 0b1000_0000 | (16384 & 0b0111_1111)  // Check the first byte",
                "    data[1] == 0b1000_0000 | ((16384 >> 7) & 0b0111_1111)  // Check the second byte",
                "    data[2] == (16384 >> 14) & 0b0111_1111  // Check the third byte",
                "    data.len() <= 3  // Ensure the length of data is within expected range for normal cases",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut data = Vec::new();",
                "    let n: u32 = 2097151;",
                "    write_varu32(&mut data, n);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(data.len(), 3);",
                "    assert_eq!(data[0], 127);",
                "    assert_eq!(data[1], 255);",
                "    assert_eq!(data[2], 7);"
              ],
              "code": [
                "{",
                "    let mut data = Vec::new();",
                "    let n: u32 = 2097151;",
                "    write_varu32(&mut data, n);",
                "    assert_eq!(data.len(), 3);",
                "    assert_eq!(data[0], 127);",
                "    assert_eq!(data[1], 255);",
                "    assert_eq!(data[2], 7);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut data = Vec::new();",
                "    let n: u32 = 2097152;",
                "    write_varu32(&mut data, n);",
                "}"
              ],
              "oracle": [
                "    data.len() == 1",
                "    data[0] == 128",
                "    data[1] == 64",
                "    data[2] == 32",
                "    data[3] == 16",
                "    data[4] == 8",
                "    data[5] == 4",
                "    data[6] == 2",
                "    data[7] == 0",
                "    data == vec![128, 64, 32, 16, 8, 4, 2]",
                "    data == vec![0b1000_0000, 0b0100_0000, 0b0010_0000, 0b0001_0000, 0b0000_1000, 0b0000_0100, 0b0000_0010, 0b0000_0000]"
              ],
              "code": [
                "{",
                "    let mut data = Vec::new();",
                "    let n: u32 = 2097152;",
                "    write_varu32(&mut data, n);",
                "    data.len() == 1",
                "    data[0] == 128",
                "    data[1] == 64",
                "    data[2] == 32",
                "    data[3] == 16",
                "    data[4] == 8",
                "    data[5] == 4",
                "    data[6] == 2",
                "    data[7] == 0",
                "    data == vec![128, 64, 32, 16, 8, 4, 2]",
                "    data == vec![0b1000_0000, 0b0100_0000, 0b0010_0000, 0b0001_0000, 0b0000_1000, 0b0000_0100, 0b0000_0010, 0b0000_0000]",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}