{
  "name": "regex_syntax::error::repeat_char",
  "mod_info": {
    "name": "error",
    "loc": "regex-syntax/src/lib.rs:189:1:189:11"
  },
  "visible": false,
  "loc": "regex-syntax/src/error.rs:268:1:270:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions or ranges: c: any valid char (e.g., 'a', 'Z', '1', '!', etc.); count: 0 to a reasonable upper limit (e.g., 0 to 1000) to test boundary, normal, and edge cases, including 0, 1, and large counts.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = 'a';",
                "    let count = 0;",
                "    repeat_char(c, count);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(repeat_char('a', 0), \"\");",
                "    assert_eq!(repeat_char('b', 0), \"\");",
                "    assert_eq!(repeat_char('z', 0), \"\");",
                "    assert_eq!(repeat_char('a', 1), \"a\");",
                "    assert_eq!(repeat_char('b', 1), \"b\");",
                "    assert_eq!(repeat_char('z', 1), \"z\");",
                "    assert_eq!(repeat_char('a', 5), \"aaaaa\");",
                "    assert_eq!(repeat_char('b', 5), \"bbbbb\");",
                "    assert_eq!(repeat_char('z', 5), \"zzzzz\");",
                "    assert_eq!(repeat_char('x', 10), \"xxxxxxxxxx\");",
                "    assert_eq!(repeat_char(' ', 3), \"   \");",
                "    assert_eq!(repeat_char('!', 2), \"!!\");"
              ],
              "code": [
                "{",
                "    let c = 'a';",
                "    let count = 0;",
                "    repeat_char(c, count);",
                "    assert_eq!(repeat_char('a', 0), \"\");",
                "    assert_eq!(repeat_char('b', 0), \"\");",
                "    assert_eq!(repeat_char('z', 0), \"\");",
                "    assert_eq!(repeat_char('a', 1), \"a\");",
                "    assert_eq!(repeat_char('b', 1), \"b\");",
                "    assert_eq!(repeat_char('z', 1), \"z\");",
                "    assert_eq!(repeat_char('a', 5), \"aaaaa\");",
                "    assert_eq!(repeat_char('b', 5), \"bbbbb\");",
                "    assert_eq!(repeat_char('z', 5), \"zzzzz\");",
                "    assert_eq!(repeat_char('x', 10), \"xxxxxxxxxx\");",
                "    assert_eq!(repeat_char(' ', 3), \"   \");",
                "    assert_eq!(repeat_char('!', 2), \"!!\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = 'Z';",
                "    let count = 1;",
                "    repeat_char(c, count);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(repeat_char('Z', 1), \"Z\");",
                "    assert_eq!(repeat_char('A', 3), \"AAA\");",
                "    assert_eq!(repeat_char(' ', 5), \"     \");",
                "    assert_eq!(repeat_char('!', 0), \"\");",
                "    assert_eq!(repeat_char('X', usize::MAX), repeat_char('X', usize::MAX).len());",
                "    assert_eq!(repeat_char('a', 10), \"aaaaaaaaaa\");",
                "    assert_eq!(repeat_char('1', 2), \"11\");",
                "    assert_eq!(repeat_char('Z', 0), \"\");",
                "    assert_eq!(repeat_char('X', 1), \"X\");"
              ],
              "code": [
                "{",
                "    let c = 'Z';",
                "    let count = 1;",
                "    repeat_char(c, count);",
                "    assert_eq!(repeat_char('Z', 1), \"Z\");",
                "    assert_eq!(repeat_char('A', 3), \"AAA\");",
                "    assert_eq!(repeat_char(' ', 5), \"     \");",
                "    assert_eq!(repeat_char('!', 0), \"\");",
                "    assert_eq!(repeat_char('X', usize::MAX), repeat_char('X', usize::MAX).len());",
                "    assert_eq!(repeat_char('a', 10), \"aaaaaaaaaa\");",
                "    assert_eq!(repeat_char('1', 2), \"11\");",
                "    assert_eq!(repeat_char('Z', 0), \"\");",
                "    assert_eq!(repeat_char('X', 1), \"X\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = '1';",
                "    let count = 1000;",
                "    repeat_char(c, count);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(repeat_char('1', 0), \"\");",
                "    assert_eq!(repeat_char('1', 1), \"1\");",
                "    assert_eq!(repeat_char('1', 10), \"1111111111\");",
                "    assert_eq!(repeat_char('a', 5), \"aaaaa\");",
                "    assert_eq!(repeat_char(' ', 3), \"   \");",
                "    assert_eq!(repeat_char('!', 2), \"!!\");",
                "    assert_eq!(repeat_char('Z', 100), \"Z\".repeat(100));",
                "    assert_eq!(repeat_char('x', 200), \"x\".repeat(200));",
                "    assert_eq!(repeat_char('0', 50), \"0\".repeat(50));"
              ],
              "code": [
                "{",
                "    let c = '1';",
                "    let count = 1000;",
                "    repeat_char(c, count);",
                "    assert_eq!(repeat_char('1', 0), \"\");",
                "    assert_eq!(repeat_char('1', 1), \"1\");",
                "    assert_eq!(repeat_char('1', 10), \"1111111111\");",
                "    assert_eq!(repeat_char('a', 5), \"aaaaa\");",
                "    assert_eq!(repeat_char(' ', 3), \"   \");",
                "    assert_eq!(repeat_char('!', 2), \"!!\");",
                "    assert_eq!(repeat_char('Z', 100), \"Z\".repeat(100));",
                "    assert_eq!(repeat_char('x', 200), \"x\".repeat(200));",
                "    assert_eq!(repeat_char('0', 50), \"0\".repeat(50));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = '!';",
                "    let count = 5;",
                "    repeat_char(c, count);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(repeat_char('!', 5), \"!!!!!\");"
              ],
              "code": [
                "{",
                "    let c = '!';",
                "    let count = 5;",
                "    repeat_char(c, count);",
                "    assert_eq!(repeat_char('!', 5), \"!!!!!\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = ' ';",
                "    let count = 2;",
                "    repeat_char(c, count);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(repeat_char(' ', 2), \"  \");",
                "    assert_eq!(repeat_char('a', 3), \"aaa\");",
                "    assert_eq!(repeat_char('z', 0), \"\");",
                "    assert_eq!(repeat_char('!', 1), \"!\");",
                "    assert_eq!(repeat_char('\\n', 4), \"\\n\\n\\n\\n\");",
                "    assert_eq!(repeat_char('x', 5), \"xxxxx\");",
                "    assert_eq!(repeat_char(' ', usize::MAX), \"\");"
              ],
              "code": [
                "{",
                "    let c = ' ';",
                "    let count = 2;",
                "    repeat_char(c, count);",
                "    assert_eq!(repeat_char(' ', 2), \"  \");",
                "    assert_eq!(repeat_char('a', 3), \"aaa\");",
                "    assert_eq!(repeat_char('z', 0), \"\");",
                "    assert_eq!(repeat_char('!', 1), \"!\");",
                "    assert_eq!(repeat_char('\\n', 4), \"\\n\\n\\n\\n\");",
                "    assert_eq!(repeat_char('x', 5), \"xxxxx\");",
                "    assert_eq!(repeat_char(' ', usize::MAX), \"\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = 'é';",
                "    let count = 3;",
                "    repeat_char(c, count);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(repeat_char('é', 3), \"ééé\");",
                "    assert_eq!(repeat_char('a', 0), \"\");",
                "    assert_eq!(repeat_char('b', 1), \"b\");",
                "    assert_eq!(repeat_char('c', 5), \"ccccc\");",
                "    assert_eq!(repeat_char(' ', 4), \"    \");",
                "    assert_eq!(repeat_char('Z', 2), \"ZZ\");",
                "    assert_eq!(repeat_char('x', 10), \"xxxxxxxxxx\");",
                "    assert_eq!(repeat_char('!', 1), \"!\");",
                "    assert_eq!(repeat_char('1', 2), \"11\");",
                "    assert_eq!(repeat_char('\\n', 3), \"\\n\\n\\n\");"
              ],
              "code": [
                "{",
                "    let c = 'é';",
                "    let count = 3;",
                "    repeat_char(c, count);",
                "    assert_eq!(repeat_char('é', 3), \"ééé\");",
                "    assert_eq!(repeat_char('a', 0), \"\");",
                "    assert_eq!(repeat_char('b', 1), \"b\");",
                "    assert_eq!(repeat_char('c', 5), \"ccccc\");",
                "    assert_eq!(repeat_char(' ', 4), \"    \");",
                "    assert_eq!(repeat_char('Z', 2), \"ZZ\");",
                "    assert_eq!(repeat_char('x', 10), \"xxxxxxxxxx\");",
                "    assert_eq!(repeat_char('!', 1), \"!\");",
                "    assert_eq!(repeat_char('1', 2), \"11\");",
                "    assert_eq!(repeat_char('\\n', 3), \"\\n\\n\\n\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}