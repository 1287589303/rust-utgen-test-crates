{
  "name": "regex_automata::nfa::thompson::nfa::{impl#8}::matches_unit",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:1987:5:1989:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "start: 0 to 255 (inclusive), end: 0 to 255 (inclusive, must be greater than or equal to start), unit: valid alphabet::Unit with u8 representation or EOI variant\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition { start: 100, end: 200, next: StateID(0) };",
                "    let unit = Unit::u8(150);",
                "    let result = transition.matches_unit(unit);",
                "}"
              ],
              "oracle": [
                "    assert!(result == true);",
                "    let unit_out_of_range = Unit::u8(50);",
                "    let result_out_of_range = transition.matches_unit(unit_out_of_range);",
                "    assert!(result_out_of_range == false);",
                "    let unit_eoi = Unit::eoi(1);",
                "    let result_eoi = transition.matches_unit(unit_eoi);",
                "    assert!(result_eoi == false);",
                "    let unit_boundary_start = Unit::u8(100);",
                "    let result_boundary_start = transition.matches_unit(unit_boundary_start);",
                "    assert!(result_boundary_start == true);",
                "    let unit_boundary_end = Unit::u8(200);",
                "    let result_boundary_end = transition.matches_unit(unit_boundary_end);",
                "    assert!(result_boundary_end == true);"
              ],
              "code": [
                "{",
                "    let transition = Transition { start: 100, end: 200, next: StateID(0) };",
                "    let unit = Unit::u8(150);",
                "    let result = transition.matches_unit(unit);",
                "    assert!(result == true);",
                "    let unit_out_of_range = Unit::u8(50);",
                "    let result_out_of_range = transition.matches_unit(unit_out_of_range);",
                "    assert!(result_out_of_range == false);",
                "    let unit_eoi = Unit::eoi(1);",
                "    let result_eoi = transition.matches_unit(unit_eoi);",
                "    assert!(result_eoi == false);",
                "    let unit_boundary_start = Unit::u8(100);",
                "    let result_boundary_start = transition.matches_unit(unit_boundary_start);",
                "    assert!(result_boundary_start == true);",
                "    let unit_boundary_end = Unit::u8(200);",
                "    let result_boundary_end = transition.matches_unit(unit_boundary_end);",
                "    assert!(result_boundary_end == true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition { start: 100, end: 200, next: StateID(0) };",
                "    let unit = Unit::u8(50);",
                "    let result = transition.matches_unit(unit);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false); // unit is outside the transition range",
                "    ",
                "    let unit_in_range = Unit::u8(150);",
                "    let result_in_range = transition.matches_unit(unit_in_range);",
                "    assert_eq!(result_in_range, true); // unit is within the transition range",
                "    ",
                "    let unit_start = Unit::u8(100);",
                "    assert_eq!(transition.matches_unit(unit_start), true); // unit is at start of range",
                "    ",
                "    let unit_end = Unit::u8(200);",
                "    assert_eq!(transition.matches_unit(unit_end), true); // unit is at end of range",
                "    ",
                "    let unit_below_start = Unit::u8(99);",
                "    assert_eq!(transition.matches_unit(unit_below_start), false); // unit is below start of range",
                "    ",
                "    let unit_above_end = Unit::u8(201);",
                "    assert_eq!(transition.matches_unit(unit_above_end), false); // unit is above end of range",
                "    ",
                "    let eoi_unit = Unit::eoi(0);",
                "    assert_eq!(transition.matches_unit(eoi_unit), false); // unit is EOI"
              ],
              "code": [
                "{",
                "    let transition = Transition { start: 100, end: 200, next: StateID(0) };",
                "    let unit = Unit::u8(50);",
                "    let result = transition.matches_unit(unit);",
                "    assert_eq!(result, false); // unit is outside the transition range",
                "    ",
                "    let unit_in_range = Unit::u8(150);",
                "    let result_in_range = transition.matches_unit(unit_in_range);",
                "    assert_eq!(result_in_range, true); // unit is within the transition range",
                "    ",
                "    let unit_start = Unit::u8(100);",
                "    assert_eq!(transition.matches_unit(unit_start), true); // unit is at start of range",
                "    ",
                "    let unit_end = Unit::u8(200);",
                "    assert_eq!(transition.matches_unit(unit_end), true); // unit is at end of range",
                "    ",
                "    let unit_below_start = Unit::u8(99);",
                "    assert_eq!(transition.matches_unit(unit_below_start), false); // unit is below start of range",
                "    ",
                "    let unit_above_end = Unit::u8(201);",
                "    assert_eq!(transition.matches_unit(unit_above_end), false); // unit is above end of range",
                "    ",
                "    let eoi_unit = Unit::eoi(0);",
                "    assert_eq!(transition.matches_unit(eoi_unit), false); // unit is EOI",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition { start: 0, end: 255, next: StateID(0) };",
                "    let unit = Unit::u8(0);",
                "    let result = transition.matches_unit(unit);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let unit_eoi = Unit::eoi(1);",
                "    let result_eoi = transition.matches_unit(unit_eoi);",
                "    assert_eq!(result_eoi, false);",
                "    let unit_out_of_range = Unit::u8(256);",
                "    let result_out_of_range = transition.matches_unit(unit_out_of_range);",
                "    assert_eq!(result_out_of_range, false);",
                "    let unit_start_boundary = Unit::u8(0);",
                "    let result_start_boundary = transition.matches_unit(unit_start_boundary);",
                "    assert_eq!(result_start_boundary, true);",
                "    let unit_end_boundary = Unit::u8(255);",
                "    let result_end_boundary = transition.matches_unit(unit_end_boundary);",
                "    assert_eq!(result_end_boundary, true);"
              ],
              "code": [
                "{",
                "    let transition = Transition { start: 0, end: 255, next: StateID(0) };",
                "    let unit = Unit::u8(0);",
                "    let result = transition.matches_unit(unit);",
                "    assert_eq!(result, true);",
                "    let unit_eoi = Unit::eoi(1);",
                "    let result_eoi = transition.matches_unit(unit_eoi);",
                "    assert_eq!(result_eoi, false);",
                "    let unit_out_of_range = Unit::u8(256);",
                "    let result_out_of_range = transition.matches_unit(unit_out_of_range);",
                "    assert_eq!(result_out_of_range, false);",
                "    let unit_start_boundary = Unit::u8(0);",
                "    let result_start_boundary = transition.matches_unit(unit_start_boundary);",
                "    assert_eq!(result_start_boundary, true);",
                "    let unit_end_boundary = Unit::u8(255);",
                "    let result_end_boundary = transition.matches_unit(unit_end_boundary);",
                "    assert_eq!(result_end_boundary, true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition { start: 0, end: 255, next: StateID(0) };",
                "    let unit = Unit::u8(255);",
                "    let result = transition.matches_unit(unit);",
                "}"
              ],
              "oracle": [
                "    assert!(result);",
                "    unit = Unit::u8(240);",
                "    assert!(transition.matches_unit(unit));",
                "    unit = Unit::u8(0);",
                "    assert!(transition.matches_unit(unit));",
                "    unit = Unit::u8(256);",
                "    assert!(!transition.matches_unit(unit));",
                "    unit = Unit::eoi(0);",
                "    assert!(!transition.matches_unit(unit));",
                "    unit = Unit::u8(127);",
                "    assert!(transition.matches_unit(unit));",
                "    unit = Unit::u8(128);",
                "    assert!(transition.matches_unit(unit));",
                "    unit = Unit::u8(100);",
                "    assert!(transition.matches_unit(unit));",
                "    unit = Unit::u8(255);",
                "    assert!(transition.matches_unit(unit));",
                "    unit = Unit::u8(1);",
                "    assert!(transition.matches_unit(unit));"
              ],
              "code": [
                "{",
                "    let transition = Transition { start: 0, end: 255, next: StateID(0) };",
                "    let unit = Unit::u8(255);",
                "    let result = transition.matches_unit(unit);",
                "    assert!(result);",
                "    unit = Unit::u8(240);",
                "    assert!(transition.matches_unit(unit));",
                "    unit = Unit::u8(0);",
                "    assert!(transition.matches_unit(unit));",
                "    unit = Unit::u8(256);",
                "    assert!(!transition.matches_unit(unit));",
                "    unit = Unit::eoi(0);",
                "    assert!(!transition.matches_unit(unit));",
                "    unit = Unit::u8(127);",
                "    assert!(transition.matches_unit(unit));",
                "    unit = Unit::u8(128);",
                "    assert!(transition.matches_unit(unit));",
                "    unit = Unit::u8(100);",
                "    assert!(transition.matches_unit(unit));",
                "    unit = Unit::u8(255);",
                "    assert!(transition.matches_unit(unit));",
                "    unit = Unit::u8(1);",
                "    assert!(transition.matches_unit(unit));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition { start: 100, end: 200, next: StateID(0) };",
                "    let unit = Unit::eoi(1);",
                "    let result = transition.matches_unit(unit);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let transition = Transition { start: 100, end: 200, next: StateID(0) };",
                "    let unit = Unit::eoi(1);",
                "    let result = transition.matches_unit(unit);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition { start: 0, end: 0, next: StateID(0) };",
                "    let unit = Unit::u8(0);",
                "    let result = transition.matches_unit(unit);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let unit = Unit::u8(1);",
                "    let result = transition.matches_unit(unit);",
                "    assert_eq!(result, false);",
                "    let unit = Unit::u8(255);",
                "    let result = transition.matches_unit(unit);",
                "    assert_eq!(result, false);",
                "    let unit = Unit::eoi(0);",
                "    let result = transition.matches_unit(unit);",
                "    assert_eq!(result, false);",
                "    let transition = Transition { start: 1, end: 1, next: StateID(1) };",
                "    let unit = Unit::u8(1);",
                "    let result = transition.matches_unit(unit);",
                "    assert_eq!(result, true);",
                "    let unit = Unit::u8(2);",
                "    let result = transition.matches_unit(unit);",
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let transition = Transition { start: 0, end: 0, next: StateID(0) };",
                "    let unit = Unit::u8(0);",
                "    let result = transition.matches_unit(unit);",
                "    assert_eq!(result, true);",
                "    let unit = Unit::u8(1);",
                "    let result = transition.matches_unit(unit);",
                "    assert_eq!(result, false);",
                "    let unit = Unit::u8(255);",
                "    let result = transition.matches_unit(unit);",
                "    assert_eq!(result, false);",
                "    let unit = Unit::eoi(0);",
                "    let result = transition.matches_unit(unit);",
                "    assert_eq!(result, false);",
                "    let transition = Transition { start: 1, end: 1, next: StateID(1) };",
                "    let unit = Unit::u8(1);",
                "    let result = transition.matches_unit(unit);",
                "    assert_eq!(result, true);",
                "    let unit = Unit::u8(2);",
                "    let result = transition.matches_unit(unit);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition { start: 100, end: 200, next: StateID(0) };",
                "    let unit = Unit::u8(300); // Invalid byte, higher than 255",
                "    let result = transition.matches_unit(unit);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let transition = Transition { start: 100, end: 200, next: StateID(0) };",
                "    let unit = Unit::u8(300); // Invalid byte, higher than 255",
                "    let result = transition.matches_unit(unit);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}