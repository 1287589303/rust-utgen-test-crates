{
  "name": "regex_syntax::hir::literal::{impl#0}::limit_class",
  "mod_info": {
    "name": "hir::literal",
    "loc": "regex-syntax/src/hir/mod.rs:42:1:42:17"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/literal.rs:255:5:258:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "limit_class input conditions: limit >= 0 (inclusive) and limit <= max usize (inclusive) with specific edge cases like limit = 0, limit = 1, limit = 4, limit = 10, and limit = usize::MAX\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_class(0);",
                "}"
              ],
              "oracle": [
                "    let extractor = Extractor::new().limit_class(0);",
                "    assert_eq!(extractor.limit_class, 0);",
                "    let extractor = Extractor::new().limit_class(4);",
                "    assert_eq!(extractor.limit_class, 4);",
                "    let extractor = Extractor::new().limit_class(100);",
                "    assert_eq!(extractor.limit_class, 100);",
                "    let extractor = Extractor::new().limit_class(usize::MAX);",
                "    assert_eq!(extractor.limit_class, usize::MAX);"
              ],
              "code": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_class(0);",
                "    let extractor = Extractor::new().limit_class(0);",
                "    assert_eq!(extractor.limit_class, 0);",
                "    let extractor = Extractor::new().limit_class(4);",
                "    assert_eq!(extractor.limit_class, 4);",
                "    let extractor = Extractor::new().limit_class(100);",
                "    assert_eq!(extractor.limit_class, 100);",
                "    let extractor = Extractor::new().limit_class(usize::MAX);",
                "    assert_eq!(extractor.limit_class, usize::MAX);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_class(1);",
                "}"
              ],
              "oracle": [
                "    extractor.limit_class(1);",
                "    assert_eq!(extractor.limit_class, 1);",
                "    extractor.limit_class(5);",
                "    assert_eq!(extractor.limit_class, 5);",
                "    extractor.limit_class(0);",
                "    assert_eq!(extractor.limit_class, 0);"
              ],
              "code": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_class(1);",
                "    extractor.limit_class(1);",
                "    assert_eq!(extractor.limit_class, 1);",
                "    extractor.limit_class(5);",
                "    assert_eq!(extractor.limit_class, 5);",
                "    extractor.limit_class(0);",
                "    assert_eq!(extractor.limit_class, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_class(4);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(extractor.limit_class(4).limit_class, 4);",
                "    assert_eq!(extractor.limit_class(10).limit_class, 10);",
                "    assert_ne!(extractor.limit_class(4), extractor.limit_class(5));",
                "    assert_eq!(extractor.limit_class(0).limit_class, 0);",
                "    assert_eq!(extractor.limit_class(1).limit_class, 1);",
                "    assert!(extractor.limit_class(2).limit_class <= 2);"
              ],
              "code": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_class(4);",
                "    assert_eq!(extractor.limit_class(4).limit_class, 4);",
                "    assert_eq!(extractor.limit_class(10).limit_class, 10);",
                "    assert_ne!(extractor.limit_class(4), extractor.limit_class(5));",
                "    assert_eq!(extractor.limit_class(0).limit_class, 0);",
                "    assert_eq!(extractor.limit_class(1).limit_class, 1);",
                "    assert!(extractor.limit_class(2).limit_class <= 2);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_class(10);",
                "}"
              ],
              "oracle": [
                "    extractor.limit_class(10);",
                "    assert_eq!(extractor.limit_class, 10);",
                "    extractor.limit_class(0);",
                "    assert_eq!(extractor.limit_class, 0);",
                "    extractor.limit_class(usize::MAX);",
                "    assert_eq!(extractor.limit_class, usize::MAX);"
              ],
              "code": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_class(10);",
                "    extractor.limit_class(10);",
                "    assert_eq!(extractor.limit_class, 10);",
                "    extractor.limit_class(0);",
                "    assert_eq!(extractor.limit_class, 0);",
                "    extractor.limit_class(usize::MAX);",
                "    assert_eq!(extractor.limit_class, usize::MAX);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_class(usize::MAX);",
                "}"
              ],
              "oracle": [
                "    extractor.limit_class(4);",
                "    assert_eq!(extractor.limit_class, 4);",
                "    ",
                "    extractor.limit_class(0);",
                "    assert_eq!(extractor.limit_class, 0);",
                "    ",
                "    extractor.limit_class(1);",
                "    assert_eq!(extractor.limit_class, 1);",
                "    ",
                "    extractor.limit_class(10);",
                "    assert_eq!(extractor.limit_class, 10);",
                "    ",
                "    let extractor = Extractor::new();",
                "    assert_eq!(extractor.limit_class, 0);"
              ],
              "code": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_class(usize::MAX);",
                "    extractor.limit_class(4);",
                "    assert_eq!(extractor.limit_class, 4);",
                "    ",
                "    extractor.limit_class(0);",
                "    assert_eq!(extractor.limit_class, 0);",
                "    ",
                "    extractor.limit_class(1);",
                "    assert_eq!(extractor.limit_class, 1);",
                "    ",
                "    extractor.limit_class(10);",
                "    assert_eq!(extractor.limit_class, 10);",
                "    ",
                "    let extractor = Extractor::new();",
                "    assert_eq!(extractor.limit_class, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}