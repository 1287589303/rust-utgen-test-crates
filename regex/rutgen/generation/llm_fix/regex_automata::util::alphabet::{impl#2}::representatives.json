{
  "name": "regex_automata::util::alphabet::{impl#2}::representatives",
  "mod_info": {
    "name": "util::alphabet",
    "loc": "regex-automata/src/util/mod.rs:30:1:30:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/alphabet.rs:412:5:441:6",
  "fn_tests": [
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: range.start_bound() matches Bound::Unbounded at line 418 is true\n",
        "precondition: range.end_bound() matches Bound::Unbounded at line 423 is true\n",
        "precondition: *left_val == *right_val at line 103 is false\n",
        "expected return value/type: ByteClassRepresentatives {\n            classes: self,\n            cur_byte,\n            end_byte,\n            last_class: None,\n        }\n"
      ],
      "input_infer": "range: (u8::MIN..u8::MAX)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_classes = ByteClasses::empty();",
                "    let representatives = byte_classes.representatives(..);",
                "}"
              ],
              "oracle": [
                "    let byte_classes = ByteClasses::empty();",
                "    let representatives = byte_classes.representatives(..);",
                "    assert_eq!(representatives.cur_byte, 0);",
                "    assert_eq!(representatives.end_byte, None);",
                "    assert!(representatives.last_class.is_none());",
                "    assert_eq!(representatives.classes, &byte_classes);"
              ],
              "code": [
                "{",
                "    let byte_classes = ByteClasses::empty();",
                "    let representatives = byte_classes.representatives(..);",
                "    let byte_classes = ByteClasses::empty();",
                "    let representatives = byte_classes.representatives(..);",
                "    assert_eq!(representatives.cur_byte, 0);",
                "    assert_eq!(representatives.end_byte, None);",
                "    assert!(representatives.last_class.is_none());",
                "    assert_eq!(representatives.classes, &byte_classes);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_classes = ByteClasses::singletons();",
                "    let representatives = byte_classes.representatives(..);",
                "}"
              ],
              "oracle": [
                "    assert!(representatives.classes == &byte_classes);",
                "    assert_eq!(representatives.cur_byte, 0);",
                "    assert!(representatives.end_byte.is_none());",
                "    assert!(representatives.last_class.is_none());"
              ],
              "code": [
                "{",
                "    let byte_classes = ByteClasses::singletons();",
                "    let representatives = byte_classes.representatives(..);",
                "    assert!(representatives.classes == &byte_classes);",
                "    assert_eq!(representatives.cur_byte, 0);",
                "    assert!(representatives.end_byte.is_none());",
                "    assert!(representatives.last_class.is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_classes = ByteClasses::empty();",
                "    let representatives = byte_classes.representatives(..);",
                "}"
              ],
              "oracle": [
                "    let byte_classes = ByteClasses::empty();",
                "    let representatives = byte_classes.representatives(..);",
                "    assert_eq!(representatives.classes, &byte_classes);",
                "    assert_eq!(representatives.cur_byte, 0);",
                "    assert_eq!(representatives.end_byte, None);",
                "    assert_eq!(representatives.last_class, None);",
                "    assert!(representatives.cur_byte < usize::MAX);"
              ],
              "code": [
                "{",
                "    let byte_classes = ByteClasses::empty();",
                "    let representatives = byte_classes.representatives(..);",
                "    let byte_classes = ByteClasses::empty();",
                "    let representatives = byte_classes.representatives(..);",
                "    assert_eq!(representatives.classes, &byte_classes);",
                "    assert_eq!(representatives.cur_byte, 0);",
                "    assert_eq!(representatives.end_byte, None);",
                "    assert_eq!(representatives.last_class, None);",
                "    assert!(representatives.cur_byte < usize::MAX);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 9,
      "prompt_conds": [
        "precondition: range.start_bound() matches Bound::Excluded(&i) at line 418 is true\n",
        "precondition: range.start_bound() matches Bound::Excluded(&i) at line 418 is true\n",
        "precondition: range.end_bound() matches Bound::Excluded(&i) at line 423 is true\n",
        "precondition: range.end_bound() matches Bound::Excluded(&i) at line 423 is true\n",
        "precondition: *left_val == *right_val at line 103 is true\n"
      ],
      "input_infer": "0 < start_byte < 255, 0 < end_byte <= 255 where start_byte and end_byte are u8 values and start_byte < end_byte\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut byte_classes = ByteClasses::empty();",
                "    let reps: ByteClassRepresentatives = byte_classes.representatives(b'\\x01'..b'\\x03');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(reps.cur_byte, 2);",
                "    assert_eq!(reps.end_byte, Some(3));",
                "    assert!(reps.last_class.is_none());",
                "    assert!(reps.classes == byte_classes);",
                "    assert_ne!(reps.classes.get(b'\\x01'), reps.classes.get(b'\\x02'));"
              ],
              "code": [
                "{",
                "    let mut byte_classes = ByteClasses::empty();",
                "    let reps: ByteClassRepresentatives = byte_classes.representatives(b'\\x01'..b'\\x03');",
                "    assert_eq!(reps.cur_byte, 2);",
                "    assert_eq!(reps.end_byte, Some(3));",
                "    assert!(reps.last_class.is_none());",
                "    assert!(reps.classes == byte_classes);",
                "    assert_ne!(reps.classes.get(b'\\x01'), reps.classes.get(b'\\x02'));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut byte_classes = ByteClasses::singletons();",
                "    let reps: ByteClassRepresentatives = byte_classes.representatives(b'\\x02'..b'\\x05');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(byte_classes.get(b'\\x02'), expected_class);",
                "    assert_eq!(byte_classes.get(b'\\x03'), expected_class);",
                "    assert_eq!(byte_classes.get(b'\\x04'), expected_class);",
                "    assert!(reps.cur_byte > usize::from(b'\\x02'));",
                "    assert!(reps.end_byte.is_some());",
                "    assert!(reps.end_byte.unwrap() > reps.cur_byte);",
                "    assert!(reps.last_class.is_none());",
                "    assert!(reps.classes.alphabet_len() > 0);"
              ],
              "code": [
                "{",
                "    let mut byte_classes = ByteClasses::singletons();",
                "    let reps: ByteClassRepresentatives = byte_classes.representatives(b'\\x02'..b'\\x05');",
                "    assert_eq!(byte_classes.get(b'\\x02'), expected_class);",
                "    assert_eq!(byte_classes.get(b'\\x03'), expected_class);",
                "    assert_eq!(byte_classes.get(b'\\x04'), expected_class);",
                "    assert!(reps.cur_byte > usize::from(b'\\x02'));",
                "    assert!(reps.end_byte.is_some());",
                "    assert!(reps.end_byte.unwrap() > reps.cur_byte);",
                "    assert!(reps.last_class.is_none());",
                "    assert!(reps.classes.alphabet_len() > 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut byte_classes = ByteClasses::empty();",
                "    let reps: ByteClassRepresentatives = byte_classes.representatives(b'\\x10'..b'\\x12');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(reps.cur_byte, 17);",
                "    assert_eq!(reps.end_byte, Some(18));",
                "    assert!(reps.last_class.is_none());",
                "    assert!(reps.classes.get(b'\\x10') != reps.classes.get(b'\\x11'));",
                "    assert!(reps.classes.get(b'\\x10') != reps.classes.get(b'\\x12'));",
                "    assert!(reps.classes.get(b'\\x12') != reps.classes.get(b'\\x10'));"
              ],
              "code": [
                "{",
                "    let mut byte_classes = ByteClasses::empty();",
                "    let reps: ByteClassRepresentatives = byte_classes.representatives(b'\\x10'..b'\\x12');",
                "    assert_eq!(reps.cur_byte, 17);",
                "    assert_eq!(reps.end_byte, Some(18));",
                "    assert!(reps.last_class.is_none());",
                "    assert!(reps.classes.get(b'\\x10') != reps.classes.get(b'\\x11'));",
                "    assert!(reps.classes.get(b'\\x10') != reps.classes.get(b'\\x12'));",
                "    assert!(reps.classes.get(b'\\x12') != reps.classes.get(b'\\x10'));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut byte_classes = ByteClasses::singletons();",
                "    let reps: ByteClassRepresentatives = byte_classes.representatives(b'\\x0F'..b'\\x10');",
                "}"
              ],
              "oracle": [
                "    let mut byte_classes = ByteClasses::singletons();",
                "    let reps: ByteClassRepresentatives = byte_classes.representatives(b'\\x0F'..b'\\x10');",
                "    assert_eq!(reps.cur_byte, 16);",
                "    assert!(reps.end_byte.is_some());",
                "    assert_ne!(reps.cur_byte, usize::MAX);",
                "    assert!(reps.last_class.is_none());",
                "    assert!(byte_classes.is_singleton());",
                "    assert_eq!(byte_classes.alphabet_len(), 256);",
                "    assert_eq!(byte_classes.stride2(), 128);"
              ],
              "code": [
                "{",
                "    let mut byte_classes = ByteClasses::singletons();",
                "    let reps: ByteClassRepresentatives = byte_classes.representatives(b'\\x0F'..b'\\x10');",
                "    let mut byte_classes = ByteClasses::singletons();",
                "    let reps: ByteClassRepresentatives = byte_classes.representatives(b'\\x0F'..b'\\x10');",
                "    assert_eq!(reps.cur_byte, 16);",
                "    assert!(reps.end_byte.is_some());",
                "    assert_ne!(reps.cur_byte, usize::MAX);",
                "    assert!(reps.last_class.is_none());",
                "    assert!(byte_classes.is_singleton());",
                "    assert_eq!(byte_classes.alphabet_len(), 256);",
                "    assert_eq!(byte_classes.stride2(), 128);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 18,
      "prompt_conds": [
        "precondition: range.start_bound() matches Bound::Included(&i) at line 418 is true\n",
        "precondition: range.start_bound() matches Bound::Included(&i) at line 418 is true\n",
        "precondition: range.end_bound() matches Bound::Included(&i) at line 423 is true\n",
        "precondition: range.end_bound() matches Bound::Included(&i) at line 423 is true\n",
        "precondition: *left_val == *right_val at line 103 is false\n",
        "expected return value/type: ByteClassRepresentatives {\n            classes: self,\n            cur_byte,\n            end_byte,\n            last_class: None,\n        }\n"
      ],
      "input_infer": "range: [0..=255], start_bound: Included(u8), end_bound: Included(u8), start_bound not equal to end_bound, cur_byte < usize::MAX\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut byte_classes = ByteClasses::empty();",
                "    byte_classes.set(b'a', 1);",
                "    byte_classes.set(b'b', 2);",
                "    let reps = byte_classes.representatives(0..=1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(reps.cur_byte, 0);",
                "    assert_eq!(reps.end_byte, Some(2));",
                "    assert_eq!(reps.last_class, None);",
                "    assert_eq!(byte_classes.get(b'a'), 1);",
                "    assert_eq!(byte_classes.get(b'b'), 2);"
              ],
              "code": [
                "{",
                "    let mut byte_classes = ByteClasses::empty();",
                "    byte_classes.set(b'a', 1);",
                "    byte_classes.set(b'b', 2);",
                "    let reps = byte_classes.representatives(0..=1);",
                "    assert_eq!(reps.cur_byte, 0);",
                "    assert_eq!(reps.end_byte, Some(2));",
                "    assert_eq!(reps.last_class, None);",
                "    assert_eq!(byte_classes.get(b'a'), 1);",
                "    assert_eq!(byte_classes.get(b'b'), 2);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut byte_classes = ByteClasses::empty();",
                "    byte_classes.set(b'0', 1);",
                "    byte_classes.set(b'1', 2);",
                "    byte_classes.set(b'2', 3);",
                "    let reps = byte_classes.representatives(0..=2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(reps.cur_byte, 0);",
                "    assert_eq!(reps.end_byte, Some(3));",
                "    assert!(reps.last_class.is_none());",
                "    assert_eq!(byte_classes.get(b'0'), 1);",
                "    assert_eq!(byte_classes.get(b'1'), 2);",
                "    assert_eq!(byte_classes.get(b'2'), 3);"
              ],
              "code": [
                "{",
                "    let mut byte_classes = ByteClasses::empty();",
                "    byte_classes.set(b'0', 1);",
                "    byte_classes.set(b'1', 2);",
                "    byte_classes.set(b'2', 3);",
                "    let reps = byte_classes.representatives(0..=2);",
                "    assert_eq!(reps.cur_byte, 0);",
                "    assert_eq!(reps.end_byte, Some(3));",
                "    assert!(reps.last_class.is_none());",
                "    assert_eq!(byte_classes.get(b'0'), 1);",
                "    assert_eq!(byte_classes.get(b'1'), 2);",
                "    assert_eq!(byte_classes.get(b'2'), 3);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut byte_classes = ByteClasses::empty();",
                "    byte_classes.set(b'\\x01', 1);",
                "    byte_classes.set(b'\\xFF', 2);",
                "    let reps = byte_classes.representatives(1..=255);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(reps.cur_byte, 1);",
                "    assert_eq!(reps.end_byte, Some(256));",
                "    assert_eq!(reps.last_class, None);",
                "    assert_eq!(byte_classes.get(b'\\x01'), 1);",
                "    assert_eq!(byte_classes.get(b'\\xFF'), 2);"
              ],
              "code": [
                "{",
                "    let mut byte_classes = ByteClasses::empty();",
                "    byte_classes.set(b'\\x01', 1);",
                "    byte_classes.set(b'\\xFF', 2);",
                "    let reps = byte_classes.representatives(1..=255);",
                "    assert_eq!(reps.cur_byte, 1);",
                "    assert_eq!(reps.end_byte, Some(256));",
                "    assert_eq!(reps.last_class, None);",
                "    assert_eq!(byte_classes.get(b'\\x01'), 1);",
                "    assert_eq!(byte_classes.get(b'\\xFF'), 2);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}