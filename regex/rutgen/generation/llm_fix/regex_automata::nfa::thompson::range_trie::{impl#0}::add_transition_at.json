{
  "name": "regex_automata::nfa::thompson::range_trie::{impl#0}::add_transition_at",
  "mod_info": {
    "name": "nfa::thompson::range_trie",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:70:1:70:16"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/range_trie.rs:517:5:527:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "from_id: valid StateID, i: valid transition index (0 to current transition count), range: Utf8Range with start <= end, next_id: valid StateID\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut trie = RangeTrie::new();",
                "    let from_id = ROOT;",
                "    let next_id = FINAL;",
                "    let range = Utf8Range::new(0, 10); // valid range",
                "    ",
                "    trie.add_transition(0, range.clone(), next_id);",
                "    trie.add_transition_at(0, from_id, range.clone(), next_id); // insert at index 0",
                "}"
              ],
              "oracle": [
                "    assert_eq!(trie.state(from_id).transitions.len(), 1);",
                "    assert_eq!(trie.state(from_id).transitions[0].range, Utf8Range::new(0, 10));",
                "    assert_eq!(trie.state(from_id).transitions[0].next_id, FINAL);",
                "    assert_eq!(trie.state(from_id).transitions.len(), 1);",
                "    assert_eq!(trie.state(from_id).transitions[0].range, Utf8Range::new(0, 10));",
                "    assert_eq!(trie.state(from_id).transitions[0].next_id, FINAL);"
              ],
              "code": [
                "{",
                "    let mut trie = RangeTrie::new();",
                "    let from_id = ROOT;",
                "    let next_id = FINAL;",
                "    let range = Utf8Range::new(0, 10); // valid range",
                "    ",
                "    trie.add_transition(0, range.clone(), next_id);",
                "    trie.add_transition_at(0, from_id, range.clone(), next_id); // insert at index 0",
                "    assert_eq!(trie.state(from_id).transitions.len(), 1);",
                "    assert_eq!(trie.state(from_id).transitions[0].range, Utf8Range::new(0, 10));",
                "    assert_eq!(trie.state(from_id).transitions[0].next_id, FINAL);",
                "    assert_eq!(trie.state(from_id).transitions.len(), 1);",
                "    assert_eq!(trie.state(from_id).transitions[0].range, Utf8Range::new(0, 10));",
                "    assert_eq!(trie.state(from_id).transitions[0].next_id, FINAL);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut trie = RangeTrie::new();",
                "    let from_id = ROOT;",
                "    let next_id = FINAL;",
                "    let range1 = Utf8Range::new(0, 10);",
                "    let range2 = Utf8Range::new(10, 20);",
                "",
                "    trie.add_transition(0, range1.clone(), next_id);",
                "    trie.add_transition_at(0, from_id, range2.clone(), next_id); // insert at index 0 when the count is 1",
                "}"
              ],
              "oracle": [
                "    assert_eq!(trie.state(from_id).transitions.len(), 2);",
                "    assert_eq!(trie.state(from_id).transitions[0].range, range2);",
                "    assert_eq!(trie.state(from_id).transitions[1].range, range1);",
                "    assert_eq!(trie.state(from_id).transitions[0].next_id, next_id);",
                "    assert_eq!(trie.state(from_id).transitions[1].next_id, next_id);"
              ],
              "code": [
                "{",
                "    let mut trie = RangeTrie::new();",
                "    let from_id = ROOT;",
                "    let next_id = FINAL;",
                "    let range1 = Utf8Range::new(0, 10);",
                "    let range2 = Utf8Range::new(10, 20);",
                "",
                "    trie.add_transition(0, range1.clone(), next_id);",
                "    trie.add_transition_at(0, from_id, range2.clone(), next_id); // insert at index 0 when the count is 1",
                "    assert_eq!(trie.state(from_id).transitions.len(), 2);",
                "    assert_eq!(trie.state(from_id).transitions[0].range, range2);",
                "    assert_eq!(trie.state(from_id).transitions[1].range, range1);",
                "    assert_eq!(trie.state(from_id).transitions[0].next_id, next_id);",
                "    assert_eq!(trie.state(from_id).transitions[1].next_id, next_id);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut trie = RangeTrie::new();",
                "    let from_id = ROOT;",
                "    let next_id = FINAL;",
                "    let range1 = Utf8Range::new(0, 10);",
                "    let range2 = Utf8Range::new(10, 20);",
                "",
                "    trie.add_transition(0, range1.clone(), next_id);",
                "    trie.add_transition_at(1, from_id, range2.clone(), next_id); // attempt to insert at index 1 (valid insertion)",
                "}"
              ],
              "oracle": [
                "    assert!(trie.state(from_id).transitions.len() == 2); // Ensure two transitions exist",
                "    assert_eq!(trie.state(from_id).transitions[1].range, range2); // Verify the second transition is range2",
                "    assert_eq!(trie.state(from_id).transitions[0].range, range1); // Ensure the first transition is range1",
                "    assert_eq!(trie.state(from_id).transitions[1].next_id, next_id); // Ensure next_id matches for second transition",
                "    assert_eq!(trie.state(from_id).transitions[0].next_id, next_id); // Ensure next_id matches for first transition"
              ],
              "code": [
                "{",
                "    let mut trie = RangeTrie::new();",
                "    let from_id = ROOT;",
                "    let next_id = FINAL;",
                "    let range1 = Utf8Range::new(0, 10);",
                "    let range2 = Utf8Range::new(10, 20);",
                "",
                "    trie.add_transition(0, range1.clone(), next_id);",
                "    trie.add_transition_at(1, from_id, range2.clone(), next_id); // attempt to insert at index 1 (valid insertion)",
                "    assert!(trie.state(from_id).transitions.len() == 2); // Ensure two transitions exist",
                "    assert_eq!(trie.state(from_id).transitions[1].range, range2); // Verify the second transition is range2",
                "    assert_eq!(trie.state(from_id).transitions[0].range, range1); // Ensure the first transition is range1",
                "    assert_eq!(trie.state(from_id).transitions[1].next_id, next_id); // Ensure next_id matches for second transition",
                "    assert_eq!(trie.state(from_id).transitions[0].next_id, next_id); // Ensure next_id matches for first transition",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut trie = RangeTrie::new();",
                "    let from_id = ROOT;",
                "    let next_id = FINAL;",
                "    let range = Utf8Range::new(0, 10); // valid range",
                "",
                "    trie.add_transition_at(0, from_id, range.clone(), next_id); // inserting into an empty list",
                "}"
              ],
              "oracle": [
                "    trie.state(from_id).transitions.len() == 1",
                "    trie.state(from_id).transitions[0].range == range",
                "    trie.state(from_id).transitions[0].next_id == next_id"
              ],
              "code": [
                "{",
                "    let mut trie = RangeTrie::new();",
                "    let from_id = ROOT;",
                "    let next_id = FINAL;",
                "    let range = Utf8Range::new(0, 10); // valid range",
                "",
                "    trie.add_transition_at(0, from_id, range.clone(), next_id); // inserting into an empty list",
                "    trie.state(from_id).transitions.len() == 1",
                "    trie.state(from_id).transitions[0].range == range",
                "    trie.state(from_id).transitions[0].next_id == next_id",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut trie = RangeTrie::new();",
                "    let from_id = ROOT;",
                "    let next_id = FINAL;",
                "    let range = Utf8Range::new(0, 10); // valid range",
                "    ",
                "    trie.add_transition(0, range.clone(), next_id);",
                "    trie.add_transition_at(10, from_id, range.clone(), next_id); // inserting at index greater than current transitions count (should not panic)",
                "}"
              ],
              "oracle": [
                "    trie.insert(&[Utf8Range::new(0, 10)]); // Ensures insertion works prior to testing add_transition_at()",
                "    let mut transitions = trie.state(from_id).transitions.len(); // Capture current transition count",
                "    ",
                "    trie.add_transition_at(transitions, from_id, range.clone(), next_id); // Insert at end of transition list",
                "    assert_eq!(trie.state(from_id).transitions.len(), transitions + 1); // Validate transition count increment",
                "    ",
                "    trie.add_transition_at(0, from_id, range.clone(), next_id); // Insert at beginning of transition list",
                "    assert_eq!(trie.state(from_id).transitions.len(), transitions + 2); // Validate transition count increment",
                "    ",
                "    // Validate the newly added transition at index 0",
                "    assert_eq!(trie.state(from_id).transitions[0].range, range); // Validate inserted range",
                "    assert_eq!(trie.state(from_id).transitions[0].next_id, next_id); // Validate next_id",
                "    ",
                "    trie.add_transition_at(transitions + 1, from_id, range.clone(), next_id); // Insert beyond current size",
                "    assert_eq!(trie.state(from_id).transitions.len(), transitions + 3); // Validate transition count increment",
                "    ",
                "    // Validate the last added transition",
                "    assert_eq!(trie.state(from_id).transitions[transitions + 2].range, range); // Validate inserted range",
                "    assert_eq!(trie.state(from_id).transitions[transitions + 2].next_id, next_id); // Validate next_id",
                "    ",
                "    trie.add_transition_at(1, from_id, range.clone(), next_id); // Insert at index 1",
                "    assert_eq!(trie.state(from_id).transitions[1].range, range); // Validate inserted range at new index",
                "    assert_eq!(trie.state(from_id).transitions[1].next_id, next_id); // Validate next_id at new index",
                "    ",
                "    // Attempt to insert at an invalid index should result in no change",
                "    let initial_transitions_count = trie.state(from_id).transitions.len();",
                "    trie.add_transition_at(initial_transitions_count + 1, from_id, range.clone(), next_id); // Invalid index",
                "    assert_eq!(trie.state(from_id).transitions.len(), initial_transitions_count); // No change in transition count"
              ],
              "code": [
                "{",
                "    let mut trie = RangeTrie::new();",
                "    let from_id = ROOT;",
                "    let next_id = FINAL;",
                "    let range = Utf8Range::new(0, 10); // valid range",
                "    ",
                "    trie.add_transition(0, range.clone(), next_id);",
                "    trie.add_transition_at(10, from_id, range.clone(), next_id); // inserting at index greater than current transitions count (should not panic)",
                "    trie.insert(&[Utf8Range::new(0, 10)]); // Ensures insertion works prior to testing add_transition_at()",
                "    let mut transitions = trie.state(from_id).transitions.len(); // Capture current transition count",
                "    ",
                "    trie.add_transition_at(transitions, from_id, range.clone(), next_id); // Insert at end of transition list",
                "    assert_eq!(trie.state(from_id).transitions.len(), transitions + 1); // Validate transition count increment",
                "    ",
                "    trie.add_transition_at(0, from_id, range.clone(), next_id); // Insert at beginning of transition list",
                "    assert_eq!(trie.state(from_id).transitions.len(), transitions + 2); // Validate transition count increment",
                "    ",
                "    // Validate the newly added transition at index 0",
                "    assert_eq!(trie.state(from_id).transitions[0].range, range); // Validate inserted range",
                "    assert_eq!(trie.state(from_id).transitions[0].next_id, next_id); // Validate next_id",
                "    ",
                "    trie.add_transition_at(transitions + 1, from_id, range.clone(), next_id); // Insert beyond current size",
                "    assert_eq!(trie.state(from_id).transitions.len(), transitions + 3); // Validate transition count increment",
                "    ",
                "    // Validate the last added transition",
                "    assert_eq!(trie.state(from_id).transitions[transitions + 2].range, range); // Validate inserted range",
                "    assert_eq!(trie.state(from_id).transitions[transitions + 2].next_id, next_id); // Validate next_id",
                "    ",
                "    trie.add_transition_at(1, from_id, range.clone(), next_id); // Insert at index 1",
                "    assert_eq!(trie.state(from_id).transitions[1].range, range); // Validate inserted range at new index",
                "    assert_eq!(trie.state(from_id).transitions[1].next_id, next_id); // Validate next_id at new index",
                "    ",
                "    // Attempt to insert at an invalid index should result in no change",
                "    let initial_transitions_count = trie.state(from_id).transitions.len();",
                "    trie.add_transition_at(initial_transitions_count + 1, from_id, range.clone(), next_id); // Invalid index",
                "    assert_eq!(trie.state(from_id).transitions.len(), initial_transitions_count); // No change in transition count",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}