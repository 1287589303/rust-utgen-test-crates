{
  "name": "regex_lite::nfa::{impl#1}::static_explicit_captures_len",
  "mod_info": {
    "name": "nfa",
    "loc": "regex-lite/src/lib.rs:880:1:880:9"
  },
  "visible": true,
  "loc": "regex-lite/src/nfa.rs:122:5:124:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.static_explicit_captures_len\n"
      ],
      "input_infer": "Test input conditions or ranges: pattern string with varying complexity (empty string, string without captures, string with explicit capture groups, and strings with nested captures), ensure consistency in capture group counts across matches, test with both start-anchored and non start-anchored patterns, include scenarios with zero capture groups and large number of capture groups (maximum size of usize)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern = String::new();",
                "    let hir = hir::Hir::from_str(&pattern).unwrap();",
                "    let nfa = NFA::new(Config::default(), pattern, &hir).unwrap();",
                "    let _ = nfa.static_explicit_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(nfa.static_explicit_captures_len(), None);",
                "    let pattern_with_captures = String::from(\"(abc)\");",
                "    let hir_with_captures = hir::Hir::from_str(&pattern_with_captures).unwrap();",
                "    let nfa_with_captures = NFA::new(Config::default(), pattern_with_captures, &hir_with_captures).unwrap();",
                "    assert_eq!(nfa_with_captures.static_explicit_captures_len(), Some(1));",
                "    let pattern_multiple_captures = String::from(\"(a)(b)(c)\");",
                "    let hir_multiple_captures = hir::Hir::from_str(&pattern_multiple_captures).unwrap();",
                "    let nfa_multiple_captures = NFA::new(Config::default(), pattern_multiple_captures, &hir_multiple_captures).unwrap();",
                "    assert_eq!(nfa_multiple_captures.static_explicit_captures_len(), Some(3));",
                "    let pattern_no_captures = String::from(\"abc\");",
                "    let hir_no_captures = hir::Hir::from_str(&pattern_no_captures).unwrap();",
                "    let nfa_no_captures = NFA::new(Config::default(), pattern_no_captures, &hir_no_captures).unwrap();",
                "    assert_eq!(nfa_no_captures.static_explicit_captures_len(), Some(0));"
              ],
              "code": [
                "{",
                "    let pattern = String::new();",
                "    let hir = hir::Hir::from_str(&pattern).unwrap();",
                "    let nfa = NFA::new(Config::default(), pattern, &hir).unwrap();",
                "    let _ = nfa.static_explicit_captures_len();",
                "    assert_eq!(nfa.static_explicit_captures_len(), None);",
                "    let pattern_with_captures = String::from(\"(abc)\");",
                "    let hir_with_captures = hir::Hir::from_str(&pattern_with_captures).unwrap();",
                "    let nfa_with_captures = NFA::new(Config::default(), pattern_with_captures, &hir_with_captures).unwrap();",
                "    assert_eq!(nfa_with_captures.static_explicit_captures_len(), Some(1));",
                "    let pattern_multiple_captures = String::from(\"(a)(b)(c)\");",
                "    let hir_multiple_captures = hir::Hir::from_str(&pattern_multiple_captures).unwrap();",
                "    let nfa_multiple_captures = NFA::new(Config::default(), pattern_multiple_captures, &hir_multiple_captures).unwrap();",
                "    assert_eq!(nfa_multiple_captures.static_explicit_captures_len(), Some(3));",
                "    let pattern_no_captures = String::from(\"abc\");",
                "    let hir_no_captures = hir::Hir::from_str(&pattern_no_captures).unwrap();",
                "    let nfa_no_captures = NFA::new(Config::default(), pattern_no_captures, &hir_no_captures).unwrap();",
                "    assert_eq!(nfa_no_captures.static_explicit_captures_len(), Some(0));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern = String::from(\"abc\");",
                "    let hir = hir::Hir::from_str(&pattern).unwrap();",
                "    let nfa = NFA::new(Config::default(), pattern, &hir).unwrap();",
                "    let _ = nfa.static_explicit_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(nfa.static_explicit_captures_len(), None);"
              ],
              "code": [
                "{",
                "    let pattern = String::from(\"abc\");",
                "    let hir = hir::Hir::from_str(&pattern).unwrap();",
                "    let nfa = NFA::new(Config::default(), pattern, &hir).unwrap();",
                "    let _ = nfa.static_explicit_captures_len();",
                "    assert_eq!(nfa.static_explicit_captures_len(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern = String::from(\"(abc)\");",
                "    let hir = hir::Hir::from_str(&pattern).unwrap();",
                "    let nfa = NFA::new(Config::default(), pattern, &hir).unwrap();",
                "    let _ = nfa.static_explicit_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(nfa.static_explicit_captures_len(), Some(1));",
                "    let pattern_empty = String::from(\"\");",
                "    let hir_empty = hir::Hir::from_str(&pattern_empty).unwrap();",
                "    let nfa_empty = NFA::new(Config::default(), pattern_empty, &hir_empty).unwrap();",
                "    assert_eq!(nfa_empty.static_explicit_captures_len(), None);",
                "    let pattern_multiple_captures = String::from(\"(abc)(def)\");",
                "    let hir_multiple = hir::Hir::from_str(&pattern_multiple_captures).unwrap();",
                "    let nfa_multiple = NFA::new(Config::default(), pattern_multiple_captures, &hir_multiple).unwrap();",
                "    assert_eq!(nfa_multiple.static_explicit_captures_len(), Some(2));",
                "    let pattern_no_captures = String::from(\"abc\");",
                "    let hir_no_captures = hir::Hir::from_str(&pattern_no_captures).unwrap();",
                "    let nfa_no_captures = NFA::new(Config::default(), pattern_no_captures, &hir_no_captures).unwrap();",
                "    assert_eq!(nfa_no_captures.static_explicit_captures_len(), Some(0));"
              ],
              "code": [
                "{",
                "    let pattern = String::from(\"(abc)\");",
                "    let hir = hir::Hir::from_str(&pattern).unwrap();",
                "    let nfa = NFA::new(Config::default(), pattern, &hir).unwrap();",
                "    let _ = nfa.static_explicit_captures_len();",
                "    assert_eq!(nfa.static_explicit_captures_len(), Some(1));",
                "    let pattern_empty = String::from(\"\");",
                "    let hir_empty = hir::Hir::from_str(&pattern_empty).unwrap();",
                "    let nfa_empty = NFA::new(Config::default(), pattern_empty, &hir_empty).unwrap();",
                "    assert_eq!(nfa_empty.static_explicit_captures_len(), None);",
                "    let pattern_multiple_captures = String::from(\"(abc)(def)\");",
                "    let hir_multiple = hir::Hir::from_str(&pattern_multiple_captures).unwrap();",
                "    let nfa_multiple = NFA::new(Config::default(), pattern_multiple_captures, &hir_multiple).unwrap();",
                "    assert_eq!(nfa_multiple.static_explicit_captures_len(), Some(2));",
                "    let pattern_no_captures = String::from(\"abc\");",
                "    let hir_no_captures = hir::Hir::from_str(&pattern_no_captures).unwrap();",
                "    let nfa_no_captures = NFA::new(Config::default(), pattern_no_captures, &hir_no_captures).unwrap();",
                "    assert_eq!(nfa_no_captures.static_explicit_captures_len(), Some(0));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern = String::from(\"((abc)(def))\");",
                "    let hir = hir::Hir::from_str(&pattern).unwrap();",
                "    let nfa = NFA::new(Config::default(), pattern, &hir).unwrap();",
                "    let _ = nfa.static_explicit_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(nfa.static_explicit_captures_len(), Some(2));",
                "    assert_eq!(nfa.static_explicit_captures_len(), None);",
                "    assert_eq!(nfa.static_explicit_captures_len(), Some(0));",
                "    assert_eq!(nfa.static_explicit_captures_len(), Some(3));",
                "    assert_eq!(nfa.static_explicit_captures_len(), Some(1));"
              ],
              "code": [
                "{",
                "    let pattern = String::from(\"((abc)(def))\");",
                "    let hir = hir::Hir::from_str(&pattern).unwrap();",
                "    let nfa = NFA::new(Config::default(), pattern, &hir).unwrap();",
                "    let _ = nfa.static_explicit_captures_len();",
                "    assert_eq!(nfa.static_explicit_captures_len(), Some(2));",
                "    assert_eq!(nfa.static_explicit_captures_len(), None);",
                "    assert_eq!(nfa.static_explicit_captures_len(), Some(0));",
                "    assert_eq!(nfa.static_explicit_captures_len(), Some(3));",
                "    assert_eq!(nfa.static_explicit_captures_len(), Some(1));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern = String::from(\"^abc(\\\\d+)$\");",
                "    let hir = hir::Hir::from_str(&pattern).unwrap();",
                "    let nfa = NFA::new(Config::default(), pattern, &hir).unwrap();",
                "    let _ = nfa.static_explicit_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(nfa.static_explicit_captures_len(), Some(1));",
                "    assert_eq!(nfa.static_explicit_captures_len(), None);",
                "    let pattern_with_no_groups = String::from(\"^[a-z]+$\");",
                "    let hir_no_groups = hir::Hir::from_str(&pattern_with_no_groups).unwrap();",
                "    let nfa_no_groups = NFA::new(Config::default(), pattern_with_no_groups, &hir_no_groups).unwrap();",
                "    assert_eq!(nfa_no_groups.static_explicit_captures_len(), Some(0));",
                "    let pattern_with_multiple_groups = String::from(\"^(\\\\d{3})([a-z]+)$\");",
                "    let hir_multiple_groups = hir::Hir::from_str(&pattern_with_multiple_groups).unwrap();",
                "    let nfa_multiple_groups = NFA::new(Config::default(), pattern_with_multiple_groups, &hir_multiple_groups).unwrap();",
                "    assert_eq!(nfa_multiple_groups.static_explicit_captures_len(), Some(2));"
              ],
              "code": [
                "{",
                "    let pattern = String::from(\"^abc(\\\\d+)$\");",
                "    let hir = hir::Hir::from_str(&pattern).unwrap();",
                "    let nfa = NFA::new(Config::default(), pattern, &hir).unwrap();",
                "    let _ = nfa.static_explicit_captures_len();",
                "    assert_eq!(nfa.static_explicit_captures_len(), Some(1));",
                "    assert_eq!(nfa.static_explicit_captures_len(), None);",
                "    let pattern_with_no_groups = String::from(\"^[a-z]+$\");",
                "    let hir_no_groups = hir::Hir::from_str(&pattern_with_no_groups).unwrap();",
                "    let nfa_no_groups = NFA::new(Config::default(), pattern_with_no_groups, &hir_no_groups).unwrap();",
                "    assert_eq!(nfa_no_groups.static_explicit_captures_len(), Some(0));",
                "    let pattern_with_multiple_groups = String::from(\"^(\\\\d{3})([a-z]+)$\");",
                "    let hir_multiple_groups = hir::Hir::from_str(&pattern_with_multiple_groups).unwrap();",
                "    let nfa_multiple_groups = NFA::new(Config::default(), pattern_with_multiple_groups, &hir_multiple_groups).unwrap();",
                "    assert_eq!(nfa_multiple_groups.static_explicit_captures_len(), Some(2));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern = String::from(\"^abc$\");",
                "    let hir = hir::Hir::from_str(&pattern).unwrap();",
                "    let nfa = NFA::new(Config::default(), pattern, &hir).unwrap();",
                "    let _ = nfa.static_explicit_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(nfa.static_explicit_captures_len(), None);",
                "    let pattern = String::from(\"^(abc)(def)$\");",
                "    let hir = hir::Hir::from_str(&pattern).unwrap();",
                "    let nfa = NFA::new(Config::default(), pattern, &hir).unwrap();",
                "    assert_eq!(nfa.static_explicit_captures_len(), Some(2));",
                "    let pattern = String::from(\"^(abc)(def)(ghi)$\");",
                "    let hir = hir::Hir::from_str(&pattern).unwrap();",
                "    let nfa = NFA::new(Config::default(), pattern, &hir).unwrap();",
                "    assert_eq!(nfa.static_explicit_captures_len(), Some(3));",
                "    let pattern = String::from(\"abc\");",
                "    let hir = hir::Hir::from_str(&pattern).unwrap();",
                "    let nfa = NFA::new(Config::default(), pattern, &hir).unwrap();",
                "    assert_eq!(nfa.static_explicit_captures_len(), Some(0));",
                "    let pattern = String::from(\"(?<name>abc)\");",
                "    let hir = hir::Hir::from_str(&pattern).unwrap();",
                "    let nfa = NFA::new(Config::default(), pattern, &hir).unwrap();",
                "    assert_eq!(nfa.static_explicit_captures_len(), Some(1));"
              ],
              "code": [
                "{",
                "    let pattern = String::from(\"^abc$\");",
                "    let hir = hir::Hir::from_str(&pattern).unwrap();",
                "    let nfa = NFA::new(Config::default(), pattern, &hir).unwrap();",
                "    let _ = nfa.static_explicit_captures_len();",
                "    assert_eq!(nfa.static_explicit_captures_len(), None);",
                "    let pattern = String::from(\"^(abc)(def)$\");",
                "    let hir = hir::Hir::from_str(&pattern).unwrap();",
                "    let nfa = NFA::new(Config::default(), pattern, &hir).unwrap();",
                "    assert_eq!(nfa.static_explicit_captures_len(), Some(2));",
                "    let pattern = String::from(\"^(abc)(def)(ghi)$\");",
                "    let hir = hir::Hir::from_str(&pattern).unwrap();",
                "    let nfa = NFA::new(Config::default(), pattern, &hir).unwrap();",
                "    assert_eq!(nfa.static_explicit_captures_len(), Some(3));",
                "    let pattern = String::from(\"abc\");",
                "    let hir = hir::Hir::from_str(&pattern).unwrap();",
                "    let nfa = NFA::new(Config::default(), pattern, &hir).unwrap();",
                "    assert_eq!(nfa.static_explicit_captures_len(), Some(0));",
                "    let pattern = String::from(\"(?<name>abc)\");",
                "    let hir = hir::Hir::from_str(&pattern).unwrap();",
                "    let nfa = NFA::new(Config::default(), pattern, &hir).unwrap();",
                "    assert_eq!(nfa.static_explicit_captures_len(), Some(1));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern = String::from(\"(((a)(b))(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)(n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)))\");",
                "    let hir = hir::Hir::from_str(&pattern).unwrap();",
                "    let nfa = NFA::new(Config::default(), pattern, &hir).unwrap();",
                "    let _ = nfa.static_explicit_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(nfa.static_explicit_captures_len(), Some(26));",
                "    assert_eq!(nfa.static_explicit_captures_len().is_some(), true);",
                "    assert_eq!(nfa.static_explicit_captures_len().unwrap(), 26);",
                "    assert!(nfa.static_explicit_captures_len() == Some(26));"
              ],
              "code": [
                "{",
                "    let pattern = String::from(\"(((a)(b))(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)(n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)))\");",
                "    let hir = hir::Hir::from_str(&pattern).unwrap();",
                "    let nfa = NFA::new(Config::default(), pattern, &hir).unwrap();",
                "    let _ = nfa.static_explicit_captures_len();",
                "    assert_eq!(nfa.static_explicit_captures_len(), Some(26));",
                "    assert_eq!(nfa.static_explicit_captures_len().is_some(), true);",
                "    assert_eq!(nfa.static_explicit_captures_len().unwrap(), 26);",
                "    assert!(nfa.static_explicit_captures_len() == Some(26));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}