{
  "name": "regex_syntax::hir::{impl#16}::len",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:1334:5:1343:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "start: char in range ['\\u{0000}', '\\u{FFFF}'], end: char in range ['\\u{0000}', '\\u{FFFF}'] such that start <= end, and test for boundary cases including identical start and end values, minimum range (start = end), maximum range (start = '\\u{0000}', end = '\\u{FFFF}') and invalid ranges (start = '\\u{FFFF}', end = '\\u{0000}') to ensure appropriate error handling.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ClassUnicodeRange::new('\\u{0000}', '\\u{0000}');",
                "    range.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(ClassUnicodeRange::new('\\u{0000}', '\\u{0000}').len(), 1);",
                "    assert_eq!(ClassUnicodeRange::new('\\u{0001}', '\\u{0001}').len(), 1);",
                "    assert_eq!(ClassUnicodeRange::new('\\u{0000}', '\\u{0001}').len(), 2);",
                "    assert_eq!(ClassUnicodeRange::new('\\u{10FF}', '\\u{11000}').len(), 0x11000 - 0x10FF + 1);",
                "    #[should_panic]",
                "    assert!(std::panic::catch_unwind(|| ClassUnicodeRange::new('\\u{FFFF}', '\\u{0000}').len()).is_err());"
              ],
              "code": [
                "{",
                "#[should_panic]",
                "fn test_len_invalid_range() {",
                "    let range = ClassUnicodeRange::new('\\u{FFFF}', '\\u{0000}'); // Invalid range",
                "    range.len();",
                "}",
                "    let range = ClassUnicodeRange::new('\\u{0000}', '\\u{0000}');",
                "    range.len();",
                "    assert_eq!(ClassUnicodeRange::new('\\u{0000}', '\\u{0000}').len(), 1);",
                "    assert_eq!(ClassUnicodeRange::new('\\u{0001}', '\\u{0001}').len(), 1);",
                "    assert_eq!(ClassUnicodeRange::new('\\u{0000}', '\\u{0001}').len(), 2);",
                "    assert_eq!(ClassUnicodeRange::new('\\u{10FF}', '\\u{11000}').len(), 0x11000 - 0x10FF + 1);",
                "    #[should_panic]",
                "    assert!(std::panic::catch_unwind(|| ClassUnicodeRange::new('\\u{FFFF}', '\\u{0000}').len()).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ClassUnicodeRange::new('\\u{0041}', '\\u{0041}'); // 'A'",
                "    range.len();",
                "}"
              ],
              "oracle": [
                "    let range = ClassUnicodeRange::new('\\u{0000}', '\\u{0000}'); // Empty range",
                "    assert_eq!(range.len(), 1);",
                "    ",
                "    let range = ClassUnicodeRange::new('\\u{0030}', '\\u{0039}'); // '0' to '9'",
                "    assert_eq!(range.len(), 10);",
                "    ",
                "    let range = ClassUnicodeRange::new('\\u{0041}', '\\u{005A}'); // 'A' to 'Z'",
                "    assert_eq!(range.len(), 26);",
                "    ",
                "    let range = ClassUnicodeRange::new('\\u{0061}', '\\u{007A}'); // 'a' to 'z'",
                "    assert_eq!(range.len(), 26);",
                "    ",
                "    let range = ClassUnicodeRange::new('\\u{007F}', '\\u{00FF}'); // Control character to Latin-1",
                "    assert_eq!(range.len(), 129);",
                "    ",
                "    let range = ClassUnicodeRange::new('\\u{0001}', '\\u{FFFF}'); // Valid range",
                "    assert_eq!(range.len(), 65535);"
              ],
              "code": [
                "{",
                "#[should_panic]",
                "fn test_len_invalid_range() {",
                "    let range = ClassUnicodeRange::new('\\u{FFFF}', '\\u{0000}'); // Invalid range",
                "    range.len();",
                "}",
                "    let range = ClassUnicodeRange::new('\\u{0041}', '\\u{0041}'); // 'A'",
                "    range.len();",
                "    let range = ClassUnicodeRange::new('\\u{0000}', '\\u{0000}'); // Empty range",
                "    assert_eq!(range.len(), 1);",
                "    ",
                "    let range = ClassUnicodeRange::new('\\u{0030}', '\\u{0039}'); // '0' to '9'",
                "    assert_eq!(range.len(), 10);",
                "    ",
                "    let range = ClassUnicodeRange::new('\\u{0041}', '\\u{005A}'); // 'A' to 'Z'",
                "    assert_eq!(range.len(), 26);",
                "    ",
                "    let range = ClassUnicodeRange::new('\\u{0061}', '\\u{007A}'); // 'a' to 'z'",
                "    assert_eq!(range.len(), 26);",
                "    ",
                "    let range = ClassUnicodeRange::new('\\u{007F}', '\\u{00FF}'); // Control character to Latin-1",
                "    assert_eq!(range.len(), 129);",
                "    ",
                "    let range = ClassUnicodeRange::new('\\u{0001}', '\\u{FFFF}'); // Valid range",
                "    assert_eq!(range.len(), 65535);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ClassUnicodeRange::new('\\u{0041}', '\\u{0043}'); // 'A' to 'C'",
                "    range.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(ClassUnicodeRange::new('\\u{0041}', '\\u{0043}').len(), 3);",
                "    assert_eq!(ClassUnicodeRange::new('\\u{0030}', '\\u{0032}').len(), 3);",
                "    assert_eq!(ClassUnicodeRange::new('\\u{0001}', '\\u{0001}').len(), 1);",
                "    #[should_panic]",
                "    assert!(std::panic::catch_unwind(|| {",
                "    ClassUnicodeRange::new('\\u{FFFF}', '\\u{0000}').len();",
                "    }).is_err());",
                "    assert_eq!(ClassUnicodeRange::new('\\u{007A}', '\\u{007A}').len(), 1);",
                "    assert_eq!(ClassUnicodeRange::new('\\u{0034}', '\\u{0036}').len(), 3);"
              ],
              "code": [
                "{",
                "#[should_panic]",
                "fn test_len_invalid_range() {",
                "    let range = ClassUnicodeRange::new('\\u{FFFF}', '\\u{0000}'); // Invalid range",
                "    range.len();",
                "}",
                "    let range = ClassUnicodeRange::new('\\u{0041}', '\\u{0043}'); // 'A' to 'C'",
                "    range.len();",
                "    assert_eq!(ClassUnicodeRange::new('\\u{0041}', '\\u{0043}').len(), 3);",
                "    assert_eq!(ClassUnicodeRange::new('\\u{0030}', '\\u{0032}').len(), 3);",
                "    assert_eq!(ClassUnicodeRange::new('\\u{0001}', '\\u{0001}').len(), 1);",
                "    #[should_panic]",
                "    assert!(std::panic::catch_unwind(|| {",
                "    ClassUnicodeRange::new('\\u{FFFF}', '\\u{0000}').len();",
                "    }).is_err());",
                "    assert_eq!(ClassUnicodeRange::new('\\u{007A}', '\\u{007A}').len(), 1);",
                "    assert_eq!(ClassUnicodeRange::new('\\u{0034}', '\\u{0036}').len(), 3);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ClassUnicodeRange::new('\\u{0000}', '\\u{FFFF}'); // Full range",
                "    range.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(ClassUnicodeRange::new('\\u{0000}', '\\u{0000}').len(), 1); // Single codepoint range",
                "    assert_eq!(ClassUnicodeRange::new('\\u{0001}', '\\u{0002}').len(), 2); // Contiguous range",
                "    assert_eq!(ClassUnicodeRange::new('\\u{1234}', '\\u{1234}').len(), 1); // Single codepoint range",
                "    assert_eq!(ClassUnicodeRange::new('\\u{1234}', '\\u{1236}').len(), 3); // Multiple codepoints",
                "    assert_eq!(ClassUnicodeRange::new('\\u{007E}', '\\u{0080}').len(), 3); // Range crossing control characters",
                "    let overflow_range = ClassUnicodeRange::new('\\u{0000}', '\\u{10FFFF}'); // Maximum valid range",
                "    assert_eq!(overflow_range.len(), usize::try_from(0x10FFFF + 1).unwrap()); // Validate length computation for max range"
              ],
              "code": [
                "{",
                "#[should_panic]",
                "fn test_len_invalid_range() {",
                "    let range = ClassUnicodeRange::new('\\u{FFFF}', '\\u{0000}'); // Invalid range",
                "    range.len();",
                "}",
                "    let range = ClassUnicodeRange::new('\\u{0000}', '\\u{FFFF}'); // Full range",
                "    range.len();",
                "    assert_eq!(ClassUnicodeRange::new('\\u{0000}', '\\u{0000}').len(), 1); // Single codepoint range",
                "    assert_eq!(ClassUnicodeRange::new('\\u{0001}', '\\u{0002}').len(), 2); // Contiguous range",
                "    assert_eq!(ClassUnicodeRange::new('\\u{1234}', '\\u{1234}').len(), 1); // Single codepoint range",
                "    assert_eq!(ClassUnicodeRange::new('\\u{1234}', '\\u{1236}').len(), 3); // Multiple codepoints",
                "    assert_eq!(ClassUnicodeRange::new('\\u{007E}', '\\u{0080}').len(), 3); // Range crossing control characters",
                "    let overflow_range = ClassUnicodeRange::new('\\u{0000}', '\\u{10FFFF}'); // Maximum valid range",
                "    assert_eq!(overflow_range.len(), usize::try_from(0x10FFFF + 1).unwrap()); // Validate length computation for max range",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}