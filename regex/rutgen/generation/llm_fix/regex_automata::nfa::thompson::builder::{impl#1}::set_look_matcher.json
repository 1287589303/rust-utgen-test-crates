{
  "name": "regex_automata::nfa::thompson::builder::{impl#1}::set_look_matcher",
  "mod_info": {
    "name": "nfa::thompson::builder",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:58:1:58:13"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/builder.rs:1257:5:1259:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self should be a valid Builder instance, m should be a valid LookMatcher instance with a non-empty lineterm value.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = Builder::new();",
                "    let look_matcher = LookMatcher {",
                "        lineterm: DebugByte::new(b'\\n'),",
                "    };",
                "    builder.set_look_matcher(look_matcher);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.get_look_matcher().lineterm, DebugByte::new(b'\\n'));"
              ],
              "code": [
                "{",
                "    let mut builder = Builder::new();",
                "    let look_matcher = LookMatcher {",
                "        lineterm: DebugByte::new(b'\\n'),",
                "    };",
                "    builder.set_look_matcher(look_matcher);",
                "    assert_eq!(builder.get_look_matcher().lineterm, DebugByte::new(b'\\n'));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = Builder::new();",
                "    let look_matcher = LookMatcher {",
                "        lineterm: DebugByte::new(b'\\r'),",
                "    };",
                "    builder.set_look_matcher(look_matcher);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.get_look_matcher().lineterm, DebugByte::new(b'\\r'));"
              ],
              "code": [
                "{",
                "    let mut builder = Builder::new();",
                "    let look_matcher = LookMatcher {",
                "        lineterm: DebugByte::new(b'\\r'),",
                "    };",
                "    builder.set_look_matcher(look_matcher);",
                "    assert_eq!(builder.get_look_matcher().lineterm, DebugByte::new(b'\\r'));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = Builder::new();",
                "    let look_matcher1 = LookMatcher {",
                "        lineterm: DebugByte::new(b'\\n'),",
                "    };",
                "    builder.set_look_matcher(look_matcher1);",
                "    ",
                "    let look_matcher2 = LookMatcher {",
                "        lineterm: DebugByte::new(b'\\r'),",
                "    };",
                "    builder.set_look_matcher(look_matcher2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.get_look_matcher().lineterm, DebugByte::new(b'\\r'));",
                "    assert_ne!(builder.get_look_matcher().lineterm, DebugByte::new(b'\\n'));",
                "    builder.set_look_matcher(look_matcher1);",
                "    assert_eq!(builder.get_look_matcher().lineterm, DebugByte::new(b'\\n'));"
              ],
              "code": [
                "{",
                "    let mut builder = Builder::new();",
                "    let look_matcher1 = LookMatcher {",
                "        lineterm: DebugByte::new(b'\\n'),",
                "    };",
                "    builder.set_look_matcher(look_matcher1);",
                "    ",
                "    let look_matcher2 = LookMatcher {",
                "        lineterm: DebugByte::new(b'\\r'),",
                "    };",
                "    builder.set_look_matcher(look_matcher2);",
                "    assert_eq!(builder.get_look_matcher().lineterm, DebugByte::new(b'\\r'));",
                "    assert_ne!(builder.get_look_matcher().lineterm, DebugByte::new(b'\\n'));",
                "    builder.set_look_matcher(look_matcher1);",
                "    assert_eq!(builder.get_look_matcher().lineterm, DebugByte::new(b'\\n'));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = Builder::new();",
                "    let initial_look_matcher = LookMatcher {",
                "        lineterm: DebugByte::new(b'\\n'),",
                "    };",
                "    builder.set_look_matcher(initial_look_matcher);",
                "    ",
                "    let new_look_matcher = LookMatcher {",
                "        lineterm: DebugByte::new(b'\\t'),",
                "    };",
                "    builder.set_look_matcher(new_look_matcher);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.get_look_matcher().lineterm, DebugByte::new(b'\\t'));"
              ],
              "code": [
                "{",
                "    let mut builder = Builder::new();",
                "    let initial_look_matcher = LookMatcher {",
                "        lineterm: DebugByte::new(b'\\n'),",
                "    };",
                "    builder.set_look_matcher(initial_look_matcher);",
                "    ",
                "    let new_look_matcher = LookMatcher {",
                "        lineterm: DebugByte::new(b'\\t'),",
                "    };",
                "    builder.set_look_matcher(new_look_matcher);",
                "    assert_eq!(builder.get_look_matcher().lineterm, DebugByte::new(b'\\t'));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}