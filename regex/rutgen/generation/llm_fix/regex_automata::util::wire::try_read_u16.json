{
  "name": "regex_automata::util::wire::try_read_u16",
  "mod_info": {
    "name": "util::wire",
    "loc": "regex-automata/src/util/mod.rs:46:1:46:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/wire.rs:716:1:722:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: check_slice_len(slice, size_of::<u16>(), what)? at line 720 is Err/None\n"
      ],
      "input_infer": "slice length: 0 to 1 bytes, what: valid non-empty static string\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: &[u8] = &[];",
                "    let what: &'static str = \"test_empty\";",
                "    let _result = try_read_u16(slice, what);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result.is_err(), true);",
                "    assert!(matches!(_result, Err(DeserializeError::buffer_too_small(\"test_empty\"))));"
              ],
              "code": [
                "{",
                "    let slice: &[u8] = &[];",
                "    let what: &'static str = \"test_empty\";",
                "    let _result = try_read_u16(slice, what);",
                "    assert_eq!(_result.is_err(), true);",
                "    assert!(matches!(_result, Err(DeserializeError::buffer_too_small(\"test_empty\"))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: &[u8] = &[0x01];",
                "    let what: &'static str = \"test_one_byte\";",
                "    let _result = try_read_u16(slice, what);",
                "}"
              ],
              "oracle": [
                "    assert!(_result.is_err());",
                "    assert_eq!(_result.err().unwrap().0, DeserializeErrorKind::buffer_too_small(\"test_one_byte\"));"
              ],
              "code": [
                "{",
                "    let slice: &[u8] = &[0x01];",
                "    let what: &'static str = \"test_one_byte\";",
                "    let _result = try_read_u16(slice, what);",
                "    assert!(_result.is_err());",
                "    assert_eq!(_result.err().unwrap().0, DeserializeErrorKind::buffer_too_small(\"test_one_byte\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: check_slice_len(slice, size_of::<u16>(), what)? at line 720 is Ok/Some\n",
        "expected return value/type: Ok((read_u16(slice), size_of::<u16>()))\n"
      ],
      "input_infer": "slice: length >= 2 bytes (e.g., 2, 3, 10 bytes) with valid u16 values stored in the first 2 bytes; what: non-empty static string\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: &[u8] = &[0x12, 0x34];",
                "    let what: &'static str = \"test_value\";",
                "    let result = try_read_u16(slice, what);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    let (value, bytes_read) = result.unwrap();",
                "    assert_eq!(value, 0x3412);",
                "    assert_eq!(bytes_read, 2);"
              ],
              "code": [
                "{",
                "    let slice: &[u8] = &[0x12, 0x34];",
                "    let what: &'static str = \"test_value\";",
                "    let result = try_read_u16(slice, what);",
                "    assert!(result.is_ok());",
                "    let (value, bytes_read) = result.unwrap();",
                "    assert_eq!(value, 0x3412);",
                "    assert_eq!(bytes_read, 2);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: &[u8] = &[0x56, 0x78, 0x9A];",
                "    let what: &'static str = \"test_value\";",
                "    let result = try_read_u16(slice, what);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok((0x7856, 2)));",
                "    assert!(result.is_ok());",
                "    assert!(result.unwrap().1 == 2);",
                "    assert!(result.unwrap().0 == 0x7856);",
                "    assert_eq!(result.is_err(), false);",
                "    assert_eq!(result.unwrap_err(), None);"
              ],
              "code": [
                "{",
                "    let slice: &[u8] = &[0x56, 0x78, 0x9A];",
                "    let what: &'static str = \"test_value\";",
                "    let result = try_read_u16(slice, what);",
                "    assert_eq!(result, Ok((0x7856, 2)));",
                "    assert!(result.is_ok());",
                "    assert!(result.unwrap().1 == 2);",
                "    assert!(result.unwrap().0 == 0x7856);",
                "    assert_eq!(result.is_err(), false);",
                "    assert_eq!(result.unwrap_err(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: &[u8] = &[0xAB, 0xCD, 0xEF, 0x01, 0x02];",
                "    let what: &'static str = \"test_value\";",
                "    let result = try_read_u16(slice, what);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok((0xCDBA, 2)));"
              ],
              "code": [
                "{",
                "    let slice: &[u8] = &[0xAB, 0xCD, 0xEF, 0x01, 0x02];",
                "    let what: &'static str = \"test_value\";",
                "    let result = try_read_u16(slice, what);",
                "    assert_eq!(result, Ok((0xCDBA, 2)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}