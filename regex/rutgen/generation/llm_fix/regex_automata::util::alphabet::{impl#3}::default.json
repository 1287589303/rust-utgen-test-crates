{
  "name": "regex_automata::util::alphabet::{impl#3}::default",
  "mod_info": {
    "name": "util::alphabet",
    "loc": "regex-automata/src/util/mod.rs:30:1:30:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/alphabet.rs:486:5:488:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions or ranges: no input required; expected output is a ByteClasses instance initialized to singletons (256 elements from 0 to 255).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_classes = ByteClasses::default();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(byte_classes.alphabet_len(), 256);",
                "    assert!(byte_classes.is_singleton());",
                "    for b in 0..=255 {",
                "    assert_eq!(byte_classes.get(b), b);",
                "    }"
              ],
              "code": [
                "{",
                "    let byte_classes = ByteClasses::default();",
                "    assert_eq!(byte_classes.alphabet_len(), 256);",
                "    assert!(byte_classes.is_singleton());",
                "    for b in 0..=255 {",
                "    assert_eq!(byte_classes.get(b), b);",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_classes = ByteClasses::singletons();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(byte_classes.get(0), 0);",
                "    assert_eq!(byte_classes.get(1), 1);",
                "    assert_eq!(byte_classes.get(255), 255);",
                "    assert_eq!(byte_classes.alphabet_len(), 256);",
                "    assert!(byte_classes.is_singleton());",
                "    assert_eq!(byte_classes.iter().count(), 256);",
                "    assert_eq!(byte_classes.stride2(), 1);",
                "    assert_eq!(byte_classes.write_to_len(), 0);"
              ],
              "code": [
                "{",
                "    let byte_classes = ByteClasses::singletons();",
                "    assert_eq!(byte_classes.get(0), 0);",
                "    assert_eq!(byte_classes.get(1), 1);",
                "    assert_eq!(byte_classes.get(255), 255);",
                "    assert_eq!(byte_classes.alphabet_len(), 256);",
                "    assert!(byte_classes.is_singleton());",
                "    assert_eq!(byte_classes.iter().count(), 256);",
                "    assert_eq!(byte_classes.stride2(), 1);",
                "    assert_eq!(byte_classes.write_to_len(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}