{
  "name": "regex_automata::dfa::start::{impl#0}::has_anchored",
  "mod_info": {
    "name": "dfa::start",
    "loc": "regex-automata/src/dfa/mod.rs:360:1:360:11"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/start.rs:71:5:73:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: *self matches StartKind::Both at line 72 is false\n",
        "precondition: *self matches _ at line 459 is true\n",
        "precondition: *self matches StartKind::Anchored at line 72 is false\n",
        "expected return value/type: false\n"
      ],
      "input_infer": "StartKind::Unanchored\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let kind = StartKind::Unanchored;",
                "    let result = kind.has_anchored();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let kind = StartKind::Unanchored;",
                "    let result = kind.has_anchored();",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let kind = StartKind::Both;",
                "    let result = kind.has_anchored();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);",
                "    let kind = StartKind::Unanchored;",
                "    assert_eq!(kind.has_anchored(), false);",
                "    let kind = StartKind::Both;",
                "    assert!(!matches!(*kind, StartKind::Both));",
                "    let kind = StartKind::Anchored;",
                "    assert_eq!(kind.has_anchored(), false);"
              ],
              "code": [
                "{",
                "    let kind = StartKind::Both;",
                "    let result = kind.has_anchored();",
                "    assert_eq!(result, false);",
                "    let kind = StartKind::Unanchored;",
                "    assert_eq!(kind.has_anchored(), false);",
                "    let kind = StartKind::Both;",
                "    assert!(!matches!(*kind, StartKind::Both));",
                "    let kind = StartKind::Anchored;",
                "    assert_eq!(kind.has_anchored(), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let kind = StartKind::Anchored;",
                "    let result = kind.has_anchored();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let kind = StartKind::Anchored;",
                "    let result = kind.has_anchored();",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: *self matches StartKind::Anchored at line 72 is true\n",
        "precondition: *self matches StartKind::Both or StartKind::Anchored at line 72 is true\n",
        "expected return value/type: true\n"
      ],
      "input_infer": "self: StartKind::Both, self: StartKind::Anchored\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let kind = StartKind::Both;",
                "    let result = kind.has_anchored();",
                "}"
              ],
              "oracle": [
                "    assert!(result == true);",
                "    let kind = StartKind::Anchored;",
                "    let result = kind.has_anchored();",
                "    assert!(result == true);",
                "    let kind = StartKind::Both;",
                "    let result = kind.has_anchored();",
                "    assert_eq!(result, true);",
                "    let kind = StartKind::Anchored;",
                "    assert!(kind.has_anchored());"
              ],
              "code": [
                "{",
                "    let kind = StartKind::Both;",
                "    let result = kind.has_anchored();",
                "    assert!(result == true);",
                "    let kind = StartKind::Anchored;",
                "    let result = kind.has_anchored();",
                "    assert!(result == true);",
                "    let kind = StartKind::Both;",
                "    let result = kind.has_anchored();",
                "    assert_eq!(result, true);",
                "    let kind = StartKind::Anchored;",
                "    assert!(kind.has_anchored());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let kind = StartKind::Anchored;",
                "    let result = kind.has_anchored();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let kind = StartKind::Both;",
                "    let result = kind.has_anchored();",
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let kind = StartKind::Anchored;",
                "    let result = kind.has_anchored();",
                "    assert_eq!(result, true);",
                "    let kind = StartKind::Both;",
                "    let result = kind.has_anchored();",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: *self matches StartKind::Both at line 72 is true\n",
        "precondition: *self matches StartKind::Both or StartKind::Anchored at line 72 is true\n",
        "expected return value/type: true\n"
      ],
      "input_infer": "self is one of {StartKind::Both, StartKind::Anchored}\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let kind = StartKind::Both;",
                "    let result = kind.has_anchored();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let kind = StartKind::Anchored;",
                "    let result = kind.has_anchored();",
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let kind = StartKind::Both;",
                "    let result = kind.has_anchored();",
                "    assert_eq!(result, true);",
                "    let kind = StartKind::Anchored;",
                "    let result = kind.has_anchored();",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let kind = StartKind::Anchored;",
                "    let result = kind.has_anchored();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let kind = StartKind::Both;",
                "    let result = kind.has_anchored();",
                "    assert_eq!(result, true);",
                "    let kind = StartKind::Unanchored;",
                "    let result = kind.has_anchored();",
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let kind = StartKind::Anchored;",
                "    let result = kind.has_anchored();",
                "    assert_eq!(result, true);",
                "    let kind = StartKind::Both;",
                "    let result = kind.has_anchored();",
                "    assert_eq!(result, true);",
                "    let kind = StartKind::Unanchored;",
                "    let result = kind.has_anchored();",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}