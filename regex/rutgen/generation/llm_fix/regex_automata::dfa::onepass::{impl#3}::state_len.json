{
  "name": "regex_automata::dfa::onepass::{impl#3}::state_len",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/onepass.rs:1445:5:1447:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.table.len() >> self.stride2()\n"
      ],
      "input_infer": "self.table.len() should be in the range of 0 to 512, and self.stride2 should be in the range of 0 to 9 (since 2^9 = 512) with stride2 being a power of 2.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![],",
                "        starts: vec![],",
                "        min_match_id: StateID::default(),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 0,",
                "        stride2: 0,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    dfa.state_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dfa.state_len(), 0);",
                "    dfa.table.push(Transition { range: Utf8Range::default(), next_id: StateID::default() });",
                "    assert_eq!(dfa.state_len(), 1);",
                "    dfa.stride2 = 1;",
                "    assert_eq!(dfa.state_len(), 1);",
                "    dfa.table.push(Transition { range: Utf8Range::default(), next_id: StateID::default() });",
                "    assert_eq!(dfa.state_len(), 2);",
                "    dfa.stride2 = 2;",
                "    assert_eq!(dfa.state_len(), 1);",
                "    dfa.table = vec![Transition { range: Utf8Range::default(), next_id: StateID::default() }; 8];",
                "    dfa.stride2 = 3;",
                "    assert_eq!(dfa.state_len(), 1);",
                "    dfa.stride2 = 0;",
                "    assert_eq!(dfa.state_len(), 8);"
              ],
              "code": [
                "{",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![],",
                "        starts: vec![],",
                "        min_match_id: StateID::default(),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 0,",
                "        stride2: 0,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    dfa.state_len();",
                "    assert_eq!(dfa.state_len(), 0);",
                "    dfa.table.push(Transition { range: Utf8Range::default(), next_id: StateID::default() });",
                "    assert_eq!(dfa.state_len(), 1);",
                "    dfa.stride2 = 1;",
                "    assert_eq!(dfa.state_len(), 1);",
                "    dfa.table.push(Transition { range: Utf8Range::default(), next_id: StateID::default() });",
                "    assert_eq!(dfa.state_len(), 2);",
                "    dfa.stride2 = 2;",
                "    assert_eq!(dfa.state_len(), 1);",
                "    dfa.table = vec![Transition { range: Utf8Range::default(), next_id: StateID::default() }; 8];",
                "    dfa.stride2 = 3;",
                "    assert_eq!(dfa.state_len(), 1);",
                "    dfa.stride2 = 0;",
                "    assert_eq!(dfa.state_len(), 8);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![Transition { range: Utf8Range::default(), next_id: StateID::default() }],",
                "        starts: vec![],",
                "        min_match_id: StateID::default(),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 1,",
                "        stride2: 1,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    dfa.state_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dfa.state_len(), 1);",
                "    dfa.table.push(Transition { range: Utf8Range::default(), next_id: StateID::default() });",
                "    assert_eq!(dfa.state_len(), 2);",
                "    dfa.table.push(Transition { range: Utf8Range::default(), next_id: StateID::default() });",
                "    assert_eq!(dfa.state_len(), 2);",
                "    dfa.stride2 = 2;",
                "    assert_eq!(dfa.state_len(), 1);",
                "    dfa.stride2 = 1;",
                "    dfa.table.resize(64, Transition { range: Utf8Range::default(), next_id: StateID::default() });",
                "    assert_eq!(dfa.state_len(), 32);"
              ],
              "code": [
                "{",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![Transition { range: Utf8Range::default(), next_id: StateID::default() }],",
                "        starts: vec![],",
                "        min_match_id: StateID::default(),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 1,",
                "        stride2: 1,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    dfa.state_len();",
                "    assert_eq!(dfa.state_len(), 1);",
                "    dfa.table.push(Transition { range: Utf8Range::default(), next_id: StateID::default() });",
                "    assert_eq!(dfa.state_len(), 2);",
                "    dfa.table.push(Transition { range: Utf8Range::default(), next_id: StateID::default() });",
                "    assert_eq!(dfa.state_len(), 2);",
                "    dfa.stride2 = 2;",
                "    assert_eq!(dfa.state_len(), 1);",
                "    dfa.stride2 = 1;",
                "    dfa.table.resize(64, Transition { range: Utf8Range::default(), next_id: StateID::default() });",
                "    assert_eq!(dfa.state_len(), 32);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![",
                "            Transition { range: Utf8Range::default(), next_id: StateID::default() },",
                "            Transition { range: Utf8Range::default(), next_id: StateID::default() }",
                "        ],",
                "        starts: vec![],",
                "        min_match_id: StateID::default(),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 2,",
                "        stride2: 1,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    dfa.state_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dfa.state_len(), 2 >> 1);"
              ],
              "code": [
                "{",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![",
                "            Transition { range: Utf8Range::default(), next_id: StateID::default() },",
                "            Transition { range: Utf8Range::default(), next_id: StateID::default() }",
                "        ],",
                "        starts: vec![],",
                "        min_match_id: StateID::default(),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 2,",
                "        stride2: 1,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    dfa.state_len();",
                "    assert_eq!(dfa.state_len(), 2 >> 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![Transition { range: Utf8Range::default(), next_id: StateID::default() }; 512],",
                "        starts: vec![],",
                "        min_match_id: StateID::default(),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 256,",
                "        stride2: 9,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    dfa.state_len();",
                "}"
              ],
              "oracle": [
                "    let dfa = DFA { config: Config::default(), nfa: NFA::default(), table: vec![Transition { range: Utf8Range::default(), next_id: StateID::default() }; 512], starts: vec![], min_match_id: StateID::default(), classes: ByteClasses([0; 256]), alphabet_len: 256, stride2: 9, pateps_offset: 0, explicit_slot_start: 0 }; assert_eq!(dfa.state_len(), 512 >> 9);"
              ],
              "code": [
                "{",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![Transition { range: Utf8Range::default(), next_id: StateID::default() }; 512],",
                "        starts: vec![],",
                "        min_match_id: StateID::default(),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 256,",
                "        stride2: 9,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    dfa.state_len();",
                "    let dfa = DFA { config: Config::default(), nfa: NFA::default(), table: vec![Transition { range: Utf8Range::default(), next_id: StateID::default() }; 512], starts: vec![], min_match_id: StateID::default(), classes: ByteClasses([0; 256]), alphabet_len: 256, stride2: 9, pateps_offset: 0, explicit_slot_start: 0 }; assert_eq!(dfa.state_len(), 512 >> 9);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![Transition { range: Utf8Range::default(), next_id: StateID::default() }; 256],",
                "        starts: vec![],",
                "        min_match_id: StateID::default(),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 256,",
                "        stride2: 8,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    dfa.state_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dfa.state_len(), 32);",
                "    assert_eq!(dfa.stride2(), 8);",
                "    assert_eq!(dfa.table.len(), 256);",
                "    assert!(dfa.state_len() > 0);",
                "    assert!(dfa.state_len() <= 32);"
              ],
              "code": [
                "{",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![Transition { range: Utf8Range::default(), next_id: StateID::default() }; 256],",
                "        starts: vec![],",
                "        min_match_id: StateID::default(),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 256,",
                "        stride2: 8,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    dfa.state_len();",
                "    assert_eq!(dfa.state_len(), 32);",
                "    assert_eq!(dfa.stride2(), 8);",
                "    assert_eq!(dfa.table.len(), 256);",
                "    assert!(dfa.state_len() > 0);",
                "    assert!(dfa.state_len() <= 32);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}