{
  "name": "regex_automata::dfa::dense::{impl#15}::stride",
  "mod_info": {
    "name": "dfa::dense",
    "loc": "regex-automata/src/dfa/mod.rs:337:1:337:15"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/dense.rs:3740:5:3742:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: 1 << self.stride2\n"
      ],
      "input_infer": "stride2 values should be in the range 1 to 9 (inclusive) to cover all valid stride cases.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let stride2 = 1;",
                "    let transition_table = TransitionTable {",
                "        table: vec![0; 1 << stride2],",
                "        classes: ByteClasses([0; 256]),",
                "        stride2,",
                "    };",
                "    let _ = transition_table.stride();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(transition_table.stride(), 2);"
              ],
              "code": [
                "{",
                "    let stride2 = 1;",
                "    let transition_table = TransitionTable {",
                "        table: vec![0; 1 << stride2],",
                "        classes: ByteClasses([0; 256]),",
                "        stride2,",
                "    };",
                "    let _ = transition_table.stride();",
                "    assert_eq!(transition_table.stride(), 2);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let stride2 = 5;",
                "    let transition_table = TransitionTable {",
                "        table: vec![0; 1 << stride2],",
                "        classes: ByteClasses([0; 256]),",
                "        stride2,",
                "    };",
                "    let _ = transition_table.stride();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(transition_table.stride(), 32);"
              ],
              "code": [
                "{",
                "    let stride2 = 5;",
                "    let transition_table = TransitionTable {",
                "        table: vec![0; 1 << stride2],",
                "        classes: ByteClasses([0; 256]),",
                "        stride2,",
                "    };",
                "    let _ = transition_table.stride();",
                "    assert_eq!(transition_table.stride(), 32);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let stride2 = 9;",
                "    let transition_table = TransitionTable {",
                "        table: vec![0; 1 << stride2],",
                "        classes: ByteClasses([0; 256]),",
                "        stride2,",
                "    };",
                "    let _ = transition_table.stride();",
                "}"
              ],
              "oracle": [
                "    let stride2 = 9;",
                "    let expected_stride = 1 << stride2;",
                "    assert_eq!(transition_table.stride(), expected_stride);"
              ],
              "code": [
                "{",
                "    let stride2 = 9;",
                "    let transition_table = TransitionTable {",
                "        table: vec![0; 1 << stride2],",
                "        classes: ByteClasses([0; 256]),",
                "        stride2,",
                "    };",
                "    let _ = transition_table.stride();",
                "    let stride2 = 9;",
                "    let expected_stride = 1 << stride2;",
                "    assert_eq!(transition_table.stride(), expected_stride);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}