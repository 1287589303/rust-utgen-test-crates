{
  "name": "regex_automata::util::look::{impl#4}::is_word_end_half_ascii",
  "mod_info": {
    "name": "util::look",
    "loc": "regex-automata/src/util/mod.rs:38:1:38:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/look.rs:1194:5:1198:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: at < haystack.len() at line 1196 is true\n",
        "expected return value/type: !word_after\n"
      ],
      "input_infer": "at must be in the range [0, haystack.len()-1] and haystack must contain valid byte values, including bytes that are and are not in the ASCII word set.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"abc_def123\";",
                "    let at: usize = 8; // Position pointing to '1', which is a word byte",
                "    matcher.is_word_end_half_ascii(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), false);"
              ],
              "code": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"abc_def123\";",
                "    let at: usize = 8; // Position pointing to '1', which is a word byte",
                "    matcher.is_word_end_half_ascii(haystack, at);",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"abc_def123\";",
                "    let at: usize = 9; // Position pointing to the end (which is out of bounds), but valid",
                "    matcher.is_word_end_half_ascii(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, 0), true);",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, 1), true);",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, 2), true);",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, 3), false);",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, 4), false);",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, 5), false);",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, 6), false);",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, 7), false);",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, 8), false);",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, 9), true);",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, 10), true);"
              ],
              "code": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"abc_def123\";",
                "    let at: usize = 9; // Position pointing to the end (which is out of bounds), but valid",
                "    matcher.is_word_end_half_ascii(haystack, at);",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, 0), true);",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, 1), true);",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, 2), true);",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, 3), false);",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, 4), false);",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, 5), false);",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, 6), false);",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, 7), false);",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, 8), false);",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, 9), true);",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, 10), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"123abc\";",
                "    let at: usize = 0; // Position pointing to '1', which is a word byte",
                "    matcher.is_word_end_half_ascii(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), false); // '1' is a word byte, so the result is false",
                "    at = 1; // Position pointing to '2', which is still a word byte",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), false); // '2' is a word byte, so the result is false",
                "    at = 2; // Position pointing to '3', which is a word byte",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), false); // '3' is a word byte, so the result is false",
                "    at = 3; // Position pointing to 'a', which is a word byte",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), false); // 'a' is a word byte, so the result is false",
                "    at = 4; // Position pointing to 'b', which is a word byte",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), false); // 'b' is a word byte, so the result is false",
                "    at = 5; // Position pointing to 'c', which is a word byte",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), false); // 'c' is a word byte, so the result is false",
                "    at = 6; // Position at haystack.len(), should not panic",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), true); // At haystack.len(), so should return true",
                "    at = 7; // Position beyond haystack.len(), should not panic (assume call will not happen)",
                "    assert!(at > haystack.len()); // ensure no call is made that could panic"
              ],
              "code": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"123abc\";",
                "    let at: usize = 0; // Position pointing to '1', which is a word byte",
                "    matcher.is_word_end_half_ascii(haystack, at);",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), false); // '1' is a word byte, so the result is false",
                "    at = 1; // Position pointing to '2', which is still a word byte",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), false); // '2' is a word byte, so the result is false",
                "    at = 2; // Position pointing to '3', which is a word byte",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), false); // '3' is a word byte, so the result is false",
                "    at = 3; // Position pointing to 'a', which is a word byte",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), false); // 'a' is a word byte, so the result is false",
                "    at = 4; // Position pointing to 'b', which is a word byte",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), false); // 'b' is a word byte, so the result is false",
                "    at = 5; // Position pointing to 'c', which is a word byte",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), false); // 'c' is a word byte, so the result is false",
                "    at = 6; // Position at haystack.len(), should not panic",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), true); // At haystack.len(), so should return true",
                "    at = 7; // Position beyond haystack.len(), should not panic (assume call will not happen)",
                "    assert!(at > haystack.len()); // ensure no call is made that could panic",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"abc_def\";",
                "    let at: usize = 3; // Position pointing to '_', which is not a word byte",
                "    matcher.is_word_end_half_ascii(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), true);",
                "    let at: usize = 2; // Position pointing to 'c', which is a word byte",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), false);",
                "    let at: usize = 0; // Position pointing to 'a', which is a word byte",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), false);",
                "    let at: usize = 6; // Position just after haystack, should not panic and return true",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), true);",
                "    let haystack_empty: &[u8] = b\"\";",
                "    let at_empty: usize = 0; // Should not panic, and haystack is empty",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack_empty, at_empty), true);"
              ],
              "code": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"abc_def\";",
                "    let at: usize = 3; // Position pointing to '_', which is not a word byte",
                "    matcher.is_word_end_half_ascii(haystack, at);",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), true);",
                "    let at: usize = 2; // Position pointing to 'c', which is a word byte",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), false);",
                "    let at: usize = 0; // Position pointing to 'a', which is a word byte",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), false);",
                "    let at: usize = 6; // Position just after haystack, should not panic and return true",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), true);",
                "    let haystack_empty: &[u8] = b\"\";",
                "    let at_empty: usize = 0; // Should not panic, and haystack is empty",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack_empty, at_empty), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"\";",
                "    let at: usize = 0; // Uh-oh! Edge case, should not panic, but haystack is empty",
                "    matcher.is_word_end_half_ascii(haystack, at);",
                "}"
              ],
              "oracle": [
                "    matcher.is_word_end_half_ascii(haystack, at); // Check empty haystack case at position 0",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), true); // Expected return value is true since haystack is empty",
                "    let haystack: &[u8] = b\"_valid\";",
                "    let at: usize = 0;",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), false); // Checking valid position with underscore",
                "    let at: usize = 6;",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), true); // End of valid string should return true",
                "    let haystack: &[u8] = b\"abc123\";",
                "    let at: usize = 5;",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), false); // Valid character at position 5 should return false"
              ],
              "code": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"\";",
                "    let at: usize = 0; // Uh-oh! Edge case, should not panic, but haystack is empty",
                "    matcher.is_word_end_half_ascii(haystack, at);",
                "    matcher.is_word_end_half_ascii(haystack, at); // Check empty haystack case at position 0",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), true); // Expected return value is true since haystack is empty",
                "    let haystack: &[u8] = b\"_valid\";",
                "    let at: usize = 0;",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), false); // Checking valid position with underscore",
                "    let at: usize = 6;",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), true); // End of valid string should return true",
                "    let haystack: &[u8] = b\"abc123\";",
                "    let at: usize = 5;",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), false); // Valid character at position 5 should return false",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: at < haystack.len() at line 1196 is false, with bound at == haystack.len()\n",
        "expected return value/type: !word_after\n"
      ],
      "input_infer": "at = haystack.len(), haystack = any byte slice, ensure haystack is non-empty for edge case validation\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"test\";",
                "    let at = haystack.len();",
                "    matcher.is_word_end_half_ascii(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), true);"
              ],
              "code": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"test\";",
                "    let at = haystack.len();",
                "    matcher.is_word_end_half_ascii(haystack, at);",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"abc123\";",
                "    let at = haystack.len();",
                "    matcher.is_word_end_half_ascii(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), true);"
              ],
              "code": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"abc123\";",
                "    let at = haystack.len();",
                "    matcher.is_word_end_half_ascii(haystack, at);",
                "    assert_eq!(matcher.is_word_end_half_ascii(haystack, at), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}