{
  "name": "regex_syntax::ast::print::{impl#4}::fmt_class_set_binary_op_kind",
  "mod_info": {
    "name": "ast::print",
    "loc": "regex-syntax/src/ast/mod.rs:12:1:12:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/print.rs:318:5:328:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: *ast matches SymmetricDifference at line 323 is true\n"
      ],
      "input_infer": "ast: ClassSetBinaryOpKind (Intersection, Difference, SymmetricDifference)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockWriter {",
                "        output: String,",
                "    }",
                "",
                "    impl fmt::Write for MockWriter {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.output.push_str(s);",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = Writer { wtr: MockWriter { output: String::new() } };",
                "    let ast = ast::ClassSetBinaryOpKind::Intersection;",
                "",
                "    let _result = writer.fmt_class_set_binary_op_kind(&ast);",
                "}"
              ],
              "oracle": [
                "    let mut writer = Writer { wtr: MockWriter { output: String::new() } };",
                "    let ast = ast::ClassSetBinaryOpKind::SymmetricDifference;",
                "    let _result = writer.fmt_class_set_binary_op_kind(&ast);",
                "    assert_eq!(writer.wtr.output, \"~~\");",
                "    assert!(_result.is_ok());"
              ],
              "code": [
                "{",
                "    struct MockWriter {",
                "        output: String,",
                "    }",
                "",
                "    impl fmt::Write for MockWriter {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.output.push_str(s);",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = Writer { wtr: MockWriter { output: String::new() } };",
                "    let ast = ast::ClassSetBinaryOpKind::Intersection;",
                "",
                "    let _result = writer.fmt_class_set_binary_op_kind(&ast);",
                "    let mut writer = Writer { wtr: MockWriter { output: String::new() } };",
                "    let ast = ast::ClassSetBinaryOpKind::SymmetricDifference;",
                "    let _result = writer.fmt_class_set_binary_op_kind(&ast);",
                "    assert_eq!(writer.wtr.output, \"~~\");",
                "    assert!(_result.is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockWriter {",
                "        output: String,",
                "    }",
                "",
                "    impl fmt::Write for MockWriter {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.output.push_str(s);",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = Writer { wtr: MockWriter { output: String::new() } };",
                "    let ast = ast::ClassSetBinaryOpKind::Difference;",
                "",
                "    let _result = writer.fmt_class_set_binary_op_kind(&ast);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(writer.wtr.output, \"~~\");",
                "    assert!(result.is_ok());",
                "    let ast_diff = ast::ClassSetBinaryOpKind::Difference;",
                "    let _result_diff = writer.fmt_class_set_binary_op_kind(&ast_diff);",
                "    assert_eq!(writer.wtr.output, \"--\");",
                "    let ast_intersection = ast::ClassSetBinaryOpKind::Intersection;",
                "    let _result_intersection = writer.fmt_class_set_binary_op_kind(&ast_intersection);",
                "    assert_eq!(writer.wtr.output, \"&&\");"
              ],
              "code": [
                "{",
                "    struct MockWriter {",
                "        output: String,",
                "    }",
                "",
                "    impl fmt::Write for MockWriter {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.output.push_str(s);",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = Writer { wtr: MockWriter { output: String::new() } };",
                "    let ast = ast::ClassSetBinaryOpKind::Difference;",
                "",
                "    let _result = writer.fmt_class_set_binary_op_kind(&ast);",
                "    assert_eq!(writer.wtr.output, \"~~\");",
                "    assert!(result.is_ok());",
                "    let ast_diff = ast::ClassSetBinaryOpKind::Difference;",
                "    let _result_diff = writer.fmt_class_set_binary_op_kind(&ast_diff);",
                "    assert_eq!(writer.wtr.output, \"--\");",
                "    let ast_intersection = ast::ClassSetBinaryOpKind::Intersection;",
                "    let _result_intersection = writer.fmt_class_set_binary_op_kind(&ast_intersection);",
                "    assert_eq!(writer.wtr.output, \"&&\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockWriter {",
                "        output: String,",
                "    }",
                "",
                "    impl fmt::Write for MockWriter {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.output.push_str(s);",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = Writer { wtr: MockWriter { output: String::new() } };",
                "    let ast = ast::ClassSetBinaryOpKind::SymmetricDifference;",
                "",
                "    let _result = writer.fmt_class_set_binary_op_kind(&ast);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(writer.wtr.output, \"~~\");",
                "    assert!(_result.is_ok());"
              ],
              "code": [
                "{",
                "    struct MockWriter {",
                "        output: String,",
                "    }",
                "",
                "    impl fmt::Write for MockWriter {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.output.push_str(s);",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = Writer { wtr: MockWriter { output: String::new() } };",
                "    let ast = ast::ClassSetBinaryOpKind::SymmetricDifference;",
                "",
                "    let _result = writer.fmt_class_set_binary_op_kind(&ast);",
                "    assert_eq!(writer.wtr.output, \"~~\");",
                "    assert!(_result.is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: *ast matches Difference at line 323 is true\n",
        "precondition: *ast matches Difference at line 323 is true\n"
      ],
      "input_infer": "ast matches ClassSetBinaryOpKind::Intersection, ClassSetBinaryOpKind::Difference, ClassSetBinaryOpKind::SymmetricDifference\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestWriter {",
                "        output: String,",
                "    }",
                "",
                "    impl fmt::Write for TestWriter {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.output.push_str(s);",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
                "    let ast = ast::ClassSetBinaryOpKind::Intersection;",
                "",
                "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
                "}"
              ],
              "oracle": [
                "    writer.fmt_class_set_binary_op_kind(&ast::ClassSetBinaryOpKind::Intersection).unwrap();",
                "    assert_eq!(writer.wtr.output, \"&&\");",
                "    writer.wtr.output.clear();",
                "    writer.fmt_class_set_binary_op_kind(&ast::ClassSetBinaryOpKind::Difference).unwrap();",
                "    assert_eq!(writer.wtr.output, \"--\");",
                "    writer.wtr.output.clear();",
                "    writer.fmt_class_set_binary_op_kind(&ast::ClassSetBinaryOpKind::SymmetricDifference).unwrap();",
                "    assert_eq!(writer.wtr.output, \"~~\");"
              ],
              "code": [
                "{",
                "    struct TestWriter {",
                "        output: String,",
                "    }",
                "",
                "    impl fmt::Write for TestWriter {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.output.push_str(s);",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
                "    let ast = ast::ClassSetBinaryOpKind::Intersection;",
                "",
                "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
                "    writer.fmt_class_set_binary_op_kind(&ast::ClassSetBinaryOpKind::Intersection).unwrap();",
                "    assert_eq!(writer.wtr.output, \"&&\");",
                "    writer.wtr.output.clear();",
                "    writer.fmt_class_set_binary_op_kind(&ast::ClassSetBinaryOpKind::Difference).unwrap();",
                "    assert_eq!(writer.wtr.output, \"--\");",
                "    writer.wtr.output.clear();",
                "    writer.fmt_class_set_binary_op_kind(&ast::ClassSetBinaryOpKind::SymmetricDifference).unwrap();",
                "    assert_eq!(writer.wtr.output, \"~~\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestWriter {",
                "        output: String,",
                "    }",
                "",
                "    impl fmt::Write for TestWriter {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.output.push_str(s);",
                "            Ok(())",
                "        }",
                "    }",
                "    ",
                "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
                "    let ast = ast::ClassSetBinaryOpKind::Difference;",
                "",
                "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(writer.wtr.output, \"--\");"
              ],
              "code": [
                "{",
                "    struct TestWriter {",
                "        output: String,",
                "    }",
                "",
                "    impl fmt::Write for TestWriter {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.output.push_str(s);",
                "            Ok(())",
                "        }",
                "    }",
                "    ",
                "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
                "    let ast = ast::ClassSetBinaryOpKind::Difference;",
                "",
                "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
                "    assert_eq!(writer.wtr.output, \"--\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestWriter {",
                "        output: String,",
                "    }",
                "",
                "    impl fmt::Write for TestWriter {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.output.push_str(s);",
                "            Ok(())",
                "        }",
                "    }",
                "    ",
                "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
                "    let ast = ast::ClassSetBinaryOpKind::SymmetricDifference;",
                "",
                "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
                "}"
              ],
              "oracle": [
                "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
                "    assert_eq!(writer.wtr.output, \"~~\");",
                "    let ast = ast::ClassSetBinaryOpKind::Intersection;",
                "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
                "    assert_eq!(writer.wtr.output, \"&&\");",
                "    let ast = ast::ClassSetBinaryOpKind::Difference;",
                "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
                "    assert_eq!(writer.wtr.output, \"--\");"
              ],
              "code": [
                "{",
                "    struct TestWriter {",
                "        output: String,",
                "    }",
                "",
                "    impl fmt::Write for TestWriter {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.output.push_str(s);",
                "            Ok(())",
                "        }",
                "    }",
                "    ",
                "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
                "    let ast = ast::ClassSetBinaryOpKind::SymmetricDifference;",
                "",
                "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
                "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
                "    assert_eq!(writer.wtr.output, \"~~\");",
                "    let ast = ast::ClassSetBinaryOpKind::Intersection;",
                "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
                "    assert_eq!(writer.wtr.output, \"&&\");",
                "    let ast = ast::ClassSetBinaryOpKind::Difference;",
                "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
                "    assert_eq!(writer.wtr.output, \"--\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: *ast matches Intersection at line 323 is true\n",
        "precondition: *ast matches Intersection at line 323 is true\n"
      ],
      "input_infer": "Input value for *ast must be one of the variants of ClassSetBinaryOpKind: Intersection, Difference, SymmetricDifference.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut output = Vec::new();",
                "    let mut writer = Writer { wtr: &mut output };",
                "    let ast = ast::ClassSetBinaryOpKind::Intersection;",
                "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(output, b\"&&\");"
              ],
              "code": [
                "{",
                "    let mut output = Vec::new();",
                "    let mut writer = Writer { wtr: &mut output };",
                "    let ast = ast::ClassSetBinaryOpKind::Intersection;",
                "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
                "    assert_eq!(output, b\"&&\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut output = Vec::new();",
                "    let mut writer = Writer { wtr: &mut output };",
                "    let ast = ast::ClassSetBinaryOpKind::Difference;",
                "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
                "}"
              ],
              "oracle": [
                "    writer.fmt_class_set_binary_op_kind(&ast).unwrap(); // Expected output to be \"--\"",
                "    assert_eq!(output, b\"--\");"
              ],
              "code": [
                "{",
                "    let mut output = Vec::new();",
                "    let mut writer = Writer { wtr: &mut output };",
                "    let ast = ast::ClassSetBinaryOpKind::Difference;",
                "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
                "    writer.fmt_class_set_binary_op_kind(&ast).unwrap(); // Expected output to be \"--\"",
                "    assert_eq!(output, b\"--\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut output = Vec::new();",
                "    let mut writer = Writer { wtr: &mut output };",
                "    let ast = ast::ClassSetBinaryOpKind::SymmetricDifference;",
                "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
                "}"
              ],
              "oracle": [
                "    writer.fmt_class_set_binary_op_kind(&ast).unwrap() == Ok(\"~~\".to_string())"
              ],
              "code": [
                "{",
                "    let mut output = Vec::new();",
                "    let mut writer = Writer { wtr: &mut output };",
                "    let ast = ast::ClassSetBinaryOpKind::SymmetricDifference;",
                "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
                "    writer.fmt_class_set_binary_op_kind(&ast).unwrap() == Ok(\"~~\".to_string())",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}