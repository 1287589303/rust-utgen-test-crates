{
  "name": "regex_automata::util::alphabet::{impl#11}::is_empty",
  "mod_info": {
    "name": "util::alphabet",
    "loc": "regex-automata/src/util/mod.rs:30:1:30:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/alphabet.rs:800:5:802:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "ByteSet instances where bits field is [0, 0] (expecting true) and ByteSet instances where bits field is any value other than [0, 0] (expecting false).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_set = ByteSet { bits: BitSet([0, 0]) };",
                "    byte_set.is_empty();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(byte_set.is_empty(), true);"
              ],
              "code": [
                "{",
                "    let byte_set = ByteSet { bits: BitSet([0, 0]) };",
                "    byte_set.is_empty();",
                "    assert_eq!(byte_set.is_empty(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_set = ByteSet { bits: BitSet([1, 0]) };",
                "    byte_set.is_empty();",
                "}"
              ],
              "oracle": [
                "    assert!(!byte_set.is_empty());"
              ],
              "code": [
                "{",
                "    let byte_set = ByteSet { bits: BitSet([1, 0]) };",
                "    byte_set.is_empty();",
                "    assert!(!byte_set.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_set = ByteSet { bits: BitSet([0, 1]) };",
                "    byte_set.is_empty();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(byte_set.is_empty(), false);"
              ],
              "code": [
                "{",
                "    let byte_set = ByteSet { bits: BitSet([0, 1]) };",
                "    byte_set.is_empty();",
                "    assert_eq!(byte_set.is_empty(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_set = ByteSet { bits: BitSet([1, 1]) };",
                "    byte_set.is_empty();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(byte_set.is_empty(), false);"
              ],
              "code": [
                "{",
                "    let byte_set = ByteSet { bits: BitSet([1, 1]) };",
                "    byte_set.is_empty();",
                "    assert_eq!(byte_set.is_empty(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}