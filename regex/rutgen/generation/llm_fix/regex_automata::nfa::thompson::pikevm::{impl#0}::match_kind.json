{
  "name": "regex_automata::nfa::thompson::pikevm::{impl#0}::match_kind",
  "mod_info": {
    "name": "nfa::thompson::pikevm",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:68:1:68:16"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/pikevm.rs:96:5:99:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "MatchKind::All, MatchKind::LeftmostFirst\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new();",
                "    let updated_config = config.match_kind(MatchKind::All);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_match_kind(), MatchKind::LeftmostFirst);",
                "    assert_eq!(updated_config.get_match_kind(), MatchKind::All);",
                "    assert!(updated_config.match_kind.is_some());",
                "    assert_eq!(updated_config.match_kind.unwrap(), MatchKind::All);",
                "    assert!(config.get_prefilter().is_none());",
                "    assert!(updated_config.get_prefilter().is_none());"
              ],
              "code": [
                "{",
                "    let config = Config::new();",
                "    let updated_config = config.match_kind(MatchKind::All);",
                "    assert_eq!(config.get_match_kind(), MatchKind::LeftmostFirst);",
                "    assert_eq!(updated_config.get_match_kind(), MatchKind::All);",
                "    assert!(updated_config.match_kind.is_some());",
                "    assert_eq!(updated_config.match_kind.unwrap(), MatchKind::All);",
                "    assert!(config.get_prefilter().is_none());",
                "    assert!(updated_config.get_prefilter().is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new();",
                "    let updated_config = config.match_kind(MatchKind::LeftmostFirst);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(updated_config.get_match_kind(), MatchKind::LeftmostFirst);",
                "    assert!(updated_config.match_kind.is_some());",
                "    assert!(updated_config.prefilter.is_none());"
              ],
              "code": [
                "{",
                "    let config = Config::new();",
                "    let updated_config = config.match_kind(MatchKind::LeftmostFirst);",
                "    assert_eq!(updated_config.get_match_kind(), MatchKind::LeftmostFirst);",
                "    assert!(updated_config.match_kind.is_some());",
                "    assert!(updated_config.prefilter.is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new()",
                "        .match_kind(MatchKind::All)",
                "        .match_kind(MatchKind::LeftmostFirst);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_match_kind(), Some(MatchKind::LeftmostFirst));",
                "    assert_eq!(config.get_prefilter(), None);",
                "    assert!(config.match_kind.is_some());",
                "    assert!(matches!(config.match_kind.unwrap(), MatchKind::LeftmostFirst));",
                "    assert!(matches!(config.overwrite(Config::new().match_kind(MatchKind::All)), Config));",
                "    assert!(config.match_kind.is_some());",
                "    assert!(matches!(config.overwrite(config.clone()), Config));",
                "    assert_eq!(config.match_kind.unwrap(), MatchKind::LeftmostFirst);"
              ],
              "code": [
                "{",
                "    let config = Config::new()",
                "        .match_kind(MatchKind::All)",
                "        .match_kind(MatchKind::LeftmostFirst);",
                "    assert_eq!(config.get_match_kind(), Some(MatchKind::LeftmostFirst));",
                "    assert_eq!(config.get_prefilter(), None);",
                "    assert!(config.match_kind.is_some());",
                "    assert!(matches!(config.match_kind.unwrap(), MatchKind::LeftmostFirst));",
                "    assert!(matches!(config.overwrite(Config::new().match_kind(MatchKind::All)), Config));",
                "    assert!(config.match_kind.is_some());",
                "    assert!(matches!(config.overwrite(config.clone()), Config));",
                "    assert_eq!(config.match_kind.unwrap(), MatchKind::LeftmostFirst);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}