{
  "name": "regex_syntax::hir::{impl#10}::case_fold_simple",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:854:5:859:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: *self matches Class::Bytes(ref mut x) at line 855 is true\n"
      ],
      "input_infer": "self must be initialized as a Class::Bytes instance, containing at least one ASCII range from `ClassBytesRange`, and panicking occurs only when the enterprise of Unicode character types is attempted without the `unicode-case` feature enabled.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class_bytes = Class::Bytes(ClassBytes::new(vec![",
                "        ClassBytesRange::new(b'A', b'Z'),",
                "    ]));",
                "    class_bytes.case_fold_simple();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_bytes, Class::Bytes(ClassBytes::new(vec![ClassBytesRange::new(b'a', b'z')])));",
                "    assert!(class_bytes.is_ascii());",
                "    assert!(!class_bytes.is_empty());"
              ],
              "code": [
                "{",
                "    let mut class_bytes = Class::Bytes(ClassBytes::new(vec![",
                "        ClassBytesRange::new(b'A', b'Z'),",
                "    ]));",
                "    class_bytes.case_fold_simple();",
                "    assert_eq!(class_bytes, Class::Bytes(ClassBytes::new(vec![ClassBytesRange::new(b'a', b'z')])));",
                "    assert!(class_bytes.is_ascii());",
                "    assert!(!class_bytes.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut class_unicode = Class::Unicode(ClassUnicode::new(vec![",
                "        ClassUnicodeRange::new('A', 'Z'),",
                "    ]));",
                "    class_unicode.case_fold_simple();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_unicode.is_empty(), false);",
                "    assert!(class_unicode.minimum_len().is_none());",
                "    assert!(class_unicode.maximum_len().is_none());",
                "    assert!(class_unicode.literal().is_none());",
                "    assert!(class_unicode.try_case_fold_simple().is_err());"
              ],
              "code": [
                "{",
                "    let mut class_unicode = Class::Unicode(ClassUnicode::new(vec![",
                "        ClassUnicodeRange::new('A', 'Z'),",
                "    ]));",
                "    class_unicode.case_fold_simple();",
                "    assert_eq!(class_unicode.is_empty(), false);",
                "    assert!(class_unicode.minimum_len().is_none());",
                "    assert!(class_unicode.maximum_len().is_none());",
                "    assert!(class_unicode.literal().is_none());",
                "    assert!(class_unicode.try_case_fold_simple().is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: *self matches Class::Unicode(ref mut x) at line 855 is true\n",
        "precondition: *self matches Class::Unicode(ref mut x) at line 855 is true\n"
      ],
      "input_infer": "self is Class::Unicode with a non-empty set of valid Unicode ranges.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges = vec![",
                "        ClassUnicodeRange::new('A', 'Z'), // Valid range from 'A' to 'Z'",
                "        ClassUnicodeRange::new('a', 'z'), // Valid range from 'a' to 'z'",
                "    ];",
                "    let mut class_unicode = Class::Unicode(ClassUnicode::new(ranges));",
                "    class_unicode.case_fold_simple();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_unicode.is_empty(), false);",
                "    assert_eq!(class_unicode.minimum_len(), Some(0));",
                "    assert_eq!(class_unicode.maximum_len(), Some(2));",
                "    assert!(class_unicode.literal().is_none());",
                "    assert!(class_unicode.try_case_fold_simple().is_ok());",
                "    assert!(class_unicode.is_utf8());",
                "    assert!(class_unicode.is_ascii());"
              ],
              "code": [
                "{",
                "    let ranges = vec![",
                "        ClassUnicodeRange::new('A', 'Z'), // Valid range from 'A' to 'Z'",
                "        ClassUnicodeRange::new('a', 'z'), // Valid range from 'a' to 'z'",
                "    ];",
                "    let mut class_unicode = Class::Unicode(ClassUnicode::new(ranges));",
                "    class_unicode.case_fold_simple();",
                "    assert_eq!(class_unicode.is_empty(), false);",
                "    assert_eq!(class_unicode.minimum_len(), Some(0));",
                "    assert_eq!(class_unicode.maximum_len(), Some(2));",
                "    assert!(class_unicode.literal().is_none());",
                "    assert!(class_unicode.try_case_fold_simple().is_ok());",
                "    assert!(class_unicode.is_utf8());",
                "    assert!(class_unicode.is_ascii());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges = vec![",
                "        ClassUnicodeRange::new('À', 'Ǎ'), // Valid range with special characters",
                "        ClassUnicodeRange::new('Ǐ', 'Ǿ'), // Another range with special characters",
                "    ];",
                "    let mut class_unicode = Class::Unicode(ClassUnicode::new(ranges));",
                "    class_unicode.case_fold_simple();",
                "}"
              ],
              "oracle": [
                "    class_unicode.case_fold_simple();",
                "    assert!(class_unicode.is_utf8());",
                "    assert_eq!(class_unicode.minimum_len(), Some(1));",
                "    assert_eq!(class_unicode.maximum_len(), Some(3));",
                "    assert!(!class_unicode.is_empty());",
                "    assert!(class_unicode.literal().is_none());",
                "    assert!(class_unicode.to_byte_class().is_none());"
              ],
              "code": [
                "{",
                "    let ranges = vec![",
                "        ClassUnicodeRange::new('À', 'Ǎ'), // Valid range with special characters",
                "        ClassUnicodeRange::new('Ǐ', 'Ǿ'), // Another range with special characters",
                "    ];",
                "    let mut class_unicode = Class::Unicode(ClassUnicode::new(ranges));",
                "    class_unicode.case_fold_simple();",
                "    class_unicode.case_fold_simple();",
                "    assert!(class_unicode.is_utf8());",
                "    assert_eq!(class_unicode.minimum_len(), Some(1));",
                "    assert_eq!(class_unicode.maximum_len(), Some(3));",
                "    assert!(!class_unicode.is_empty());",
                "    assert!(class_unicode.literal().is_none());",
                "    assert!(class_unicode.to_byte_class().is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let ranges: Vec<ClassUnicodeRange> = vec![];",
                "    let mut class_unicode = Class::Unicode(ClassUnicode::new(ranges));",
                "    class_unicode.case_fold_simple();",
                "}"
              ],
              "oracle": [
                "    #[should_panic]",
                "    fn test_case_fold_simple_panic_on_empty_unicode_class() {",
                "    let ranges: Vec<ClassUnicodeRange> = vec![];",
                "    let mut class_unicode = Class::Unicode(ClassUnicode::new(ranges));",
                "    class_unicode.case_fold_simple();",
                "    }"
              ],
              "code": [
                "{",
                "    let ranges: Vec<ClassUnicodeRange> = vec![];",
                "    let mut class_unicode = Class::Unicode(ClassUnicode::new(ranges));",
                "    class_unicode.case_fold_simple();",
                "    #[should_panic]",
                "    fn test_case_fold_simple_panic_on_empty_unicode_class() {",
                "    let ranges: Vec<ClassUnicodeRange> = vec![];",
                "    let mut class_unicode = Class::Unicode(ClassUnicode::new(ranges));",
                "    class_unicode.case_fold_simple();",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}