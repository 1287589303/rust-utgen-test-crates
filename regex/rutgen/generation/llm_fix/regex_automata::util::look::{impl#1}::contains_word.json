{
  "name": "regex_automata::util::look::{impl#1}::contains_word",
  "mod_info": {
    "name": "util::look",
    "loc": "regex-automata/src/util/mod.rs:38:1:38:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/look.rs:347:5:349:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.contains_word_unicode() at line 348 is true\n",
        "expected return value/type: self.contains_word_unicode() || self.contains_word_ascii()\n"
      ],
      "input_infer": "self.bits set to contain at least one of Look::WordUnicode, Look::WordUnicodeNegate, Look::WordStartUnicode, Look::WordEndUnicode, Look::WordStartHalfUnicode, Look::WordEndHalfUnicode, or at least one of Look::WordAscii, Look::WordAsciiNegate, Look::WordStartAscii, Look::WordEndAscii, Look::WordStartHalfAscii, Look::WordEndHalfAscii, valid u32 range for bits (0 to 4294967295)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut look_set = LookSet::empty();",
                "    look_set.set_insert(Look::WordUnicode);",
                "    assert!(look_set.contains_word());",
                "}"
              ],
              "oracle": [
                "    assert!(look_set.contains_word_unicode());",
                "    assert!(!look_set.contains_word_ascii());",
                "    assert!(look_set.contains_word());",
                "    assert_eq!(look_set.len(), 1);",
                "    assert!(!look_set.is_empty());",
                "    assert!(look_set.contains(Look::WordUnicode));",
                "    assert!(look_set.contains_word());"
              ],
              "code": [
                "{",
                "    let mut look_set = LookSet::empty();",
                "    look_set.set_insert(Look::WordUnicode);",
                "    assert!(look_set.contains_word());",
                "    assert!(look_set.contains_word_unicode());",
                "    assert!(!look_set.contains_word_ascii());",
                "    assert!(look_set.contains_word());",
                "    assert_eq!(look_set.len(), 1);",
                "    assert!(!look_set.is_empty());",
                "    assert!(look_set.contains(Look::WordUnicode));",
                "    assert!(look_set.contains_word());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut look_set = LookSet::empty();",
                "    look_set.set_insert(Look::WordUnicodeNegate);",
                "    assert!(look_set.contains_word());",
                "}"
              ],
              "oracle": [
                "    assert!(look_set.contains_word_unicode() == true);",
                "    assert!(look_set.contains_word_ascii() == false);",
                "    assert!(look_set.contains_word() == true);"
              ],
              "code": [
                "{",
                "    let mut look_set = LookSet::empty();",
                "    look_set.set_insert(Look::WordUnicodeNegate);",
                "    assert!(look_set.contains_word());",
                "    assert!(look_set.contains_word_unicode() == true);",
                "    assert!(look_set.contains_word_ascii() == false);",
                "    assert!(look_set.contains_word() == true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut look_set = LookSet::empty();",
                "    look_set.set_insert(Look::WordStartUnicode);",
                "    assert!(look_set.contains_word());",
                "}"
              ],
              "oracle": [
                "    assert!(look_set.contains_word_unicode());",
                "    assert!(look_set.contains_word_ascii() == false);",
                "    assert!(look_set.len() > 0);",
                "    assert!(look_set.is_empty() == false);",
                "    assert!(look_set.contains(Look::WordStartUnicode));",
                "    assert!(look_set.contains_word());",
                "    assert!(look_set.disjoint_with(LookSet::full()));"
              ],
              "code": [
                "{",
                "    let mut look_set = LookSet::empty();",
                "    look_set.set_insert(Look::WordStartUnicode);",
                "    assert!(look_set.contains_word());",
                "    assert!(look_set.contains_word_unicode());",
                "    assert!(look_set.contains_word_ascii() == false);",
                "    assert!(look_set.len() > 0);",
                "    assert!(look_set.is_empty() == false);",
                "    assert!(look_set.contains(Look::WordStartUnicode));",
                "    assert!(look_set.contains_word());",
                "    assert!(look_set.disjoint_with(LookSet::full()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut look_set = LookSet::empty();",
                "    look_set.set_insert(Look::WordEndUnicode);",
                "    assert!(look_set.contains_word());",
                "}"
              ],
              "oracle": [
                "    assert!(look_set.contains_word_unicode());",
                "    assert!(!look_set.contains_word_ascii());",
                "    assert!(look_set.contains_word());"
              ],
              "code": [
                "{",
                "    let mut look_set = LookSet::empty();",
                "    look_set.set_insert(Look::WordEndUnicode);",
                "    assert!(look_set.contains_word());",
                "    assert!(look_set.contains_word_unicode());",
                "    assert!(!look_set.contains_word_ascii());",
                "    assert!(look_set.contains_word());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut look_set = LookSet::empty();",
                "    look_set.set_insert(Look::WordStartHalfUnicode);",
                "    assert!(look_set.contains_word());",
                "}"
              ],
              "oracle": [
                "    assert!(look_set.contains_word_unicode());",
                "    assert!(look_set.contains_word_ascii() == false);",
                "    assert!(look_set.contains_word() == true);",
                "    assert_eq!(look_set.len(), 1);",
                "    assert!(!look_set.is_empty());",
                "    assert!(look_set.contains(Look::WordStartHalfUnicode));",
                "    assert!(!look_set.contains(Look::WordEndHalfUnicode));"
              ],
              "code": [
                "{",
                "    let mut look_set = LookSet::empty();",
                "    look_set.set_insert(Look::WordStartHalfUnicode);",
                "    assert!(look_set.contains_word());",
                "    assert!(look_set.contains_word_unicode());",
                "    assert!(look_set.contains_word_ascii() == false);",
                "    assert!(look_set.contains_word() == true);",
                "    assert_eq!(look_set.len(), 1);",
                "    assert!(!look_set.is_empty());",
                "    assert!(look_set.contains(Look::WordStartHalfUnicode));",
                "    assert!(!look_set.contains(Look::WordEndHalfUnicode));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut look_set = LookSet::empty();",
                "    look_set.set_insert(Look::WordEndHalfUnicode);",
                "    assert!(look_set.contains_word());",
                "}"
              ],
              "oracle": [
                "    assert!(look_set.contains_word_unicode());",
                "    assert!(look_set.contains_word());",
                "    assert!(look_set.contains(Look::WordEndHalfUnicode));"
              ],
              "code": [
                "{",
                "    let mut look_set = LookSet::empty();",
                "    look_set.set_insert(Look::WordEndHalfUnicode);",
                "    assert!(look_set.contains_word());",
                "    assert!(look_set.contains_word_unicode());",
                "    assert!(look_set.contains_word());",
                "    assert!(look_set.contains(Look::WordEndHalfUnicode));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut look_set = LookSet::empty();",
                "    look_set.set_insert(Look::WordAscii);",
                "    assert!(look_set.contains_word());",
                "}"
              ],
              "oracle": [
                "    assert!(look_set.contains_word_unicode());",
                "    assert!(look_set.contains_word_ascii());",
                "    assert_eq!(look_set.contains_word(), true);",
                "    look_set.set_insert(Look::WordAsciiNegate);",
                "    assert!(look_set.contains_word());",
                "    look_set.set_remove(Look::WordAscii);",
                "    assert!(look_set.contains_word());"
              ],
              "code": [
                "{",
                "    let mut look_set = LookSet::empty();",
                "    look_set.set_insert(Look::WordAscii);",
                "    assert!(look_set.contains_word());",
                "    assert!(look_set.contains_word_unicode());",
                "    assert!(look_set.contains_word_ascii());",
                "    assert_eq!(look_set.contains_word(), true);",
                "    look_set.set_insert(Look::WordAsciiNegate);",
                "    assert!(look_set.contains_word());",
                "    look_set.set_remove(Look::WordAscii);",
                "    assert!(look_set.contains_word());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut look_set = LookSet::empty();",
                "    look_set.set_insert(Look::WordAsciiNegate);",
                "    assert!(look_set.contains_word());",
                "}"
              ],
              "oracle": [
                "    assert!(look_set.contains_word_unicode());",
                "    assert!(!look_set.contains_word_ascii());",
                "    assert!(look_set.len() > 0);",
                "    assert!(look_set.contains(Look::WordAsciiNegate));",
                "    assert_eq!(look_set.full().len(), 1);",
                "    assert!(look_set.is_empty() == false);"
              ],
              "code": [
                "{",
                "    let mut look_set = LookSet::empty();",
                "    look_set.set_insert(Look::WordAsciiNegate);",
                "    assert!(look_set.contains_word());",
                "    assert!(look_set.contains_word_unicode());",
                "    assert!(!look_set.contains_word_ascii());",
                "    assert!(look_set.len() > 0);",
                "    assert!(look_set.contains(Look::WordAsciiNegate));",
                "    assert_eq!(look_set.full().len(), 1);",
                "    assert!(look_set.is_empty() == false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut look_set = LookSet::empty();",
                "    look_set.set_insert(Look::WordStartAscii);",
                "    assert!(look_set.contains_word());",
                "}"
              ],
              "oracle": [
                "    assert!(look_set.contains_word_unicode());",
                "    assert!(!look_set.contains_word_ascii());",
                "    assert!(look_set.len() > 0);",
                "    assert!(look_set.contains(Look::WordStartAscii));",
                "    assert!(look_set.contains_word());"
              ],
              "code": [
                "{",
                "    let mut look_set = LookSet::empty();",
                "    look_set.set_insert(Look::WordStartAscii);",
                "    assert!(look_set.contains_word());",
                "    assert!(look_set.contains_word_unicode());",
                "    assert!(!look_set.contains_word_ascii());",
                "    assert!(look_set.len() > 0);",
                "    assert!(look_set.contains(Look::WordStartAscii));",
                "    assert!(look_set.contains_word());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut look_set = LookSet::empty();",
                "    look_set.set_insert(Look::WordEndAscii);",
                "    assert!(look_set.contains_word());",
                "}"
              ],
              "oracle": [
                "    assert!(look_set.contains_word_unicode());",
                "    assert!(look_set.contains_word_ascii());",
                "    assert!(look_set.contains(Look::WordEndAscii));",
                "    assert!(look_set.len() > 0);"
              ],
              "code": [
                "{",
                "    let mut look_set = LookSet::empty();",
                "    look_set.set_insert(Look::WordEndAscii);",
                "    assert!(look_set.contains_word());",
                "    assert!(look_set.contains_word_unicode());",
                "    assert!(look_set.contains_word_ascii());",
                "    assert!(look_set.contains(Look::WordEndAscii));",
                "    assert!(look_set.len() > 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut look_set = LookSet::empty();",
                "    look_set.set_insert(Look::WordStartHalfAscii);",
                "    assert!(look_set.contains_word());",
                "}"
              ],
              "oracle": [
                "    assert!(look_set.contains_word_unicode());",
                "    assert!(look_set.contains(Look::WordStartHalfAscii));",
                "    assert!(look_set.contains_word_ascii());",
                "    assert!(look_set.len() > 0);"
              ],
              "code": [
                "{",
                "    let mut look_set = LookSet::empty();",
                "    look_set.set_insert(Look::WordStartHalfAscii);",
                "    assert!(look_set.contains_word());",
                "    assert!(look_set.contains_word_unicode());",
                "    assert!(look_set.contains(Look::WordStartHalfAscii));",
                "    assert!(look_set.contains_word_ascii());",
                "    assert!(look_set.len() > 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut look_set = LookSet::empty();",
                "    look_set.set_insert(Look::WordEndHalfAscii);",
                "    assert!(look_set.contains_word());",
                "}"
              ],
              "oracle": [
                "    assert!(look_set.contains_word_unicode() || look_set.contains_word_ascii());",
                "    look_set.set_insert(Look::WordStartAscii);",
                "    assert!(look_set.contains_word());",
                "    look_set.set_insert(Look::WordStartUnicode);",
                "    assert!(look_set.contains_word());",
                "    look_set.set_insert(Look::WordEndUnicode);",
                "    assert!(look_set.contains_word());",
                "    look_set.set_insert(Look::WordAsciiNegate);",
                "    assert!(look_set.contains_word());",
                "    look_set.set_union(LookSet::singleton(Look::WordEndAscii));",
                "    assert!(look_set.contains_word());"
              ],
              "code": [
                "{",
                "    let mut look_set = LookSet::empty();",
                "    look_set.set_insert(Look::WordEndHalfAscii);",
                "    assert!(look_set.contains_word());",
                "    assert!(look_set.contains_word_unicode() || look_set.contains_word_ascii());",
                "    look_set.set_insert(Look::WordStartAscii);",
                "    assert!(look_set.contains_word());",
                "    look_set.set_insert(Look::WordStartUnicode);",
                "    assert!(look_set.contains_word());",
                "    look_set.set_insert(Look::WordEndUnicode);",
                "    assert!(look_set.contains_word());",
                "    look_set.set_insert(Look::WordAsciiNegate);",
                "    assert!(look_set.contains_word());",
                "    look_set.set_union(LookSet::singleton(Look::WordEndAscii));",
                "    assert!(look_set.contains_word());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.contains_word_unicode() at line 348 is false\n"
      ],
      "input_infer": "self should contain valid Look enum values such that self.contains_word_ascii() returns true, and the LookSet's bits field should be a u32 value set to specific bits representing ASCII word boundaries, avoiding any bits that represent Unicode word boundaries.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut look_set = LookSet::empty();",
                "    look_set.set_insert(Look::WordAscii);",
                "    look_set.set_insert(Look::WordAsciiNegate);",
                "",
                "    let result = look_set.contains_word();",
                "    // Call the function but do not assert or print the result",
                "    let _ = result;",
                "}"
              ],
              "oracle": [
                "    let mut look_set = LookSet::empty();",
                "    look_set.set_insert(Look::WordAscii);",
                "    look_set.set_insert(Look::WordAsciiNegate);",
                "    assert_eq!(look_set.contains_word(), true);",
                "    look_set = LookSet::empty();",
                "    look_set.set_insert(Look::WordUnicode);",
                "    assert_eq!(look_set.contains_word(), false);",
                "    look_set.set_insert(Look::WordStartAscii);",
                "    look_set.set_insert(Look::WordEndAscii);",
                "    assert_eq!(look_set.contains_word(), true);",
                "    look_set.set_remove(Look::WordAscii);",
                "    assert_eq!(look_set.contains_word(), false);",
                "    look_set.set_insert(Look::WordAsciiNegate);",
                "    assert_eq!(look_set.contains_word(), true);",
                "    look_set = LookSet::empty();",
                "    assert_eq!(look_set.contains_word(), false);",
                "    look_set.set_insert(Look::WordStartUnicode);",
                "    assert_eq!(look_set.contains_word(), true);"
              ],
              "code": [
                "{",
                "    let mut look_set = LookSet::empty();",
                "    look_set.set_insert(Look::WordAscii);",
                "    look_set.set_insert(Look::WordAsciiNegate);",
                "",
                "    let result = look_set.contains_word();",
                "    // Call the function but do not assert or print the result",
                "    let _ = result;",
                "    let mut look_set = LookSet::empty();",
                "    look_set.set_insert(Look::WordAscii);",
                "    look_set.set_insert(Look::WordAsciiNegate);",
                "    assert_eq!(look_set.contains_word(), true);",
                "    look_set = LookSet::empty();",
                "    look_set.set_insert(Look::WordUnicode);",
                "    assert_eq!(look_set.contains_word(), false);",
                "    look_set.set_insert(Look::WordStartAscii);",
                "    look_set.set_insert(Look::WordEndAscii);",
                "    assert_eq!(look_set.contains_word(), true);",
                "    look_set.set_remove(Look::WordAscii);",
                "    assert_eq!(look_set.contains_word(), false);",
                "    look_set.set_insert(Look::WordAsciiNegate);",
                "    assert_eq!(look_set.contains_word(), true);",
                "    look_set = LookSet::empty();",
                "    assert_eq!(look_set.contains_word(), false);",
                "    look_set.set_insert(Look::WordStartUnicode);",
                "    assert_eq!(look_set.contains_word(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut look_set = LookSet::empty();",
                "    look_set.set_insert(Look::WordAscii);",
                "    look_set.set_insert(Look::WordStartAscii);",
                "    look_set.set_insert(Look::WordEndAscii);",
                "",
                "    let result = look_set.contains_word();",
                "    // Call the function but do not assert or print the result",
                "    let _ = result;",
                "}"
              ],
              "oracle": [
                "    look_set.set_insert(Look::WordAscii);",
                "    look_set.set_insert(Look::WordStartAscii);",
                "    look_set.set_insert(Look::WordEndAscii);",
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let mut look_set = LookSet::empty();",
                "    look_set.set_insert(Look::WordAscii);",
                "    look_set.set_insert(Look::WordStartAscii);",
                "    look_set.set_insert(Look::WordEndAscii);",
                "",
                "    let result = look_set.contains_word();",
                "    // Call the function but do not assert or print the result",
                "    let _ = result;",
                "    look_set.set_insert(Look::WordAscii);",
                "    look_set.set_insert(Look::WordStartAscii);",
                "    look_set.set_insert(Look::WordEndAscii);",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look_set = LookSet::singleton(Look::WordAsciiNegate);",
                "",
                "    let result = look_set.contains_word();",
                "    // Call the function but do not assert or print the result",
                "    let _ = result;",
                "}"
              ],
              "oracle": [
                "    let look_set = LookSet::singleton(Look::WordAsciiNegate);",
                "    let result = look_set.contains_word();",
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let look_set = LookSet::singleton(Look::WordAsciiNegate);",
                "",
                "    let result = look_set.contains_word();",
                "    // Call the function but do not assert or print the result",
                "    let _ = result;",
                "    let look_set = LookSet::singleton(Look::WordAsciiNegate);",
                "    let result = look_set.contains_word();",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look_set = LookSet::empty();",
                "",
                "    let result = look_set.contains_word();",
                "    // Call the function but do not assert or print the result",
                "    let _ = result;",
                "}"
              ],
              "oracle": [
                "    let look_set = LookSet::empty();",
                "    let result = look_set.contains_word();",
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let look_set = LookSet::empty();",
                "",
                "    let result = look_set.contains_word();",
                "    // Call the function but do not assert or print the result",
                "    let _ = result;",
                "    let look_set = LookSet::empty();",
                "    let result = look_set.contains_word();",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}