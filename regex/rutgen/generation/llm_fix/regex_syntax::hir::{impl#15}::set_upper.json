{
  "name": "regex_syntax::hir::{impl#15}::set_upper",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:1282:5:1284:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "char bound value within the range of valid Unicode characters (0x0000 to 0x10FFFF), ensuring the value does not precede the current lower bound of the ClassUnicodeRange instance if set_lower has been invoked.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut range = ClassUnicodeRange::default();",
                "    range.set_lower('a');",
                "    range.set_upper('z');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(range.lower(), 'a');",
                "    assert_eq!(range.upper(), 'z');"
              ],
              "code": [
                "{",
                "    let mut range = ClassUnicodeRange::default();",
                "    range.set_lower('a');",
                "    range.set_upper('z');",
                "    assert_eq!(range.lower(), 'a');",
                "    assert_eq!(range.upper(), 'z');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut range = ClassUnicodeRange::default();",
                "    range.set_lower('a');",
                "    range.set_upper('\\u{FFFF}');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(range.lower(), 'a');",
                "    assert_eq!(range.upper(), '\\u{FFFF}');"
              ],
              "code": [
                "{",
                "    let mut range = ClassUnicodeRange::default();",
                "    range.set_lower('a');",
                "    range.set_upper('\\u{FFFF}');",
                "    assert_eq!(range.lower(), 'a');",
                "    assert_eq!(range.upper(), '\\u{FFFF}');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut range = ClassUnicodeRange::default();",
                "    range.set_lower('0');",
                "    range.set_upper('9');",
                "    range.set_upper('A');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(range.lower(), '0');",
                "    assert_eq!(range.upper(), 'A');"
              ],
              "code": [
                "{",
                "    let mut range = ClassUnicodeRange::default();",
                "    range.set_lower('0');",
                "    range.set_upper('9');",
                "    range.set_upper('A');",
                "    assert_eq!(range.lower(), '0');",
                "    assert_eq!(range.upper(), 'A');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut range = ClassUnicodeRange::default();",
                "    range.set_lower('b');",
                "    range.set_upper('A'); // This should panic as 'A' is less than 'b'",
                "}"
              ],
              "oracle": [
                "    let mut range = ClassUnicodeRange::default();",
                "    range.set_lower('b');",
                "    range.set_upper('A');"
              ],
              "code": [
                "{",
                "    let mut range = ClassUnicodeRange::default();",
                "    range.set_lower('b');",
                "    range.set_upper('A'); // This should panic as 'A' is less than 'b'",
                "    let mut range = ClassUnicodeRange::default();",
                "    range.set_lower('b');",
                "    range.set_upper('A');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut range = ClassUnicodeRange::default();",
                "    range.set_lower('A');",
                "    range.set_upper('Z');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(range.lower(), 'A');",
                "    assert_eq!(range.upper(), 'Z');"
              ],
              "code": [
                "{",
                "    let mut range = ClassUnicodeRange::default();",
                "    range.set_lower('A');",
                "    range.set_upper('Z');",
                "    assert_eq!(range.lower(), 'A');",
                "    assert_eq!(range.upper(), 'Z');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}