{
  "name": "regex_automata::util::alphabet::{impl#2}::write_to",
  "mod_info": {
    "name": "util::alphabet",
    "loc": "regex-automata/src/util/mod.rs:30:1:30:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/alphabet.rs:266:5:279:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: dst.len() < nwrite at line 271 is true\n",
        "expected return value/type: Err(SerializeError::buffer_too_small(\"byte class map\"))\n"
      ],
      "input_infer": "dst length: 0 to 255 (inclusive)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 0];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "}"
              ],
              "oracle": [
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 0];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));"
              ],
              "code": [
                "{",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 0];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 0];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 1];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "}"
              ],
              "oracle": [
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 1];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));"
              ],
              "code": [
                "{",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 1];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 1];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 2];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "}"
              ],
              "oracle": [
                "    let byte_classes = ByteClasses::empty();",
                "    let buffer = [0u8; 2];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "    assert!(result.is_err());",
                "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));"
              ],
              "code": [
                "{",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 2];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "    let byte_classes = ByteClasses::empty();",
                "    let buffer = [0u8; 2];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "    assert!(result.is_err());",
                "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 3];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().what, \"byte class map\");"
              ],
              "code": [
                "{",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 3];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().what, \"byte class map\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 4];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "}"
              ],
              "oracle": [
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 4];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));"
              ],
              "code": [
                "{",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 4];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 4];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 5];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "}"
              ],
              "oracle": [
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 5];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().what, \"byte class map\");"
              ],
              "code": [
                "{",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 5];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 5];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().what, \"byte class map\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 6];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "}"
              ],
              "oracle": [
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 6];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));"
              ],
              "code": [
                "{",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 6];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 6];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 7];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "}"
              ],
              "oracle": [
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 7];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));"
              ],
              "code": [
                "{",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 7];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 7];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 8];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "}"
              ],
              "oracle": [
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 8];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));"
              ],
              "code": [
                "{",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 8];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 8];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 9];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "}"
              ],
              "oracle": [
                "    result.unwrap_err();",
                "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));"
              ],
              "code": [
                "{",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 9];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "    result.unwrap_err();",
                "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 255];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "}"
              ],
              "oracle": [
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 255];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "    assert!(result.is_err());",
                "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));"
              ],
              "code": [
                "{",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 255];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut buffer = [0u8; 255];",
                "    let result = byte_classes.write_to(&mut buffer);",
                "    assert!(result.is_err());",
                "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte class map\")));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: dst.len() < nwrite at line 271 is false, with bound dst.len() == nwrite\n",
        "precondition: b in 0..=255 at line 274 is true\n",
        "precondition: b in 0..=255 at line 274 is false\n",
        "expected return value/type: Ok(nwrite)\n"
      ],
      "input_infer": "dst.len() == 256 (exact size), b == 0 to 255 (valid range for all iterations), and dst.len() < 256 (causes SerializeError)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut dst = [0u8; 256];",
                "    let result = byte_classes.write_to(&mut dst);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(256));",
                "    assert_eq!(dst, byte_classes.0);",
                "    let mut small_dst = [0u8; 255];",
                "    let result_small = byte_classes.write_to(&mut small_dst);",
                "    assert!(result_small.is_err());",
                "    assert_eq!(result_small.err().unwrap().what, \"byte class map\");",
                "    let mut oversized_dst = [0u8; 512];",
                "    let result_oversized = byte_classes.write_to(&mut oversized_dst);",
                "    assert_eq!(result_oversized, Ok(256));",
                "    assert_eq!(&oversized_dst[..256], byte_classes.0);"
              ],
              "code": [
                "{",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut dst = [0u8; 256];",
                "    let result = byte_classes.write_to(&mut dst);",
                "    assert_eq!(result, Ok(256));",
                "    assert_eq!(dst, byte_classes.0);",
                "    let mut small_dst = [0u8; 255];",
                "    let result_small = byte_classes.write_to(&mut small_dst);",
                "    assert!(result_small.is_err());",
                "    assert_eq!(result_small.err().unwrap().what, \"byte class map\");",
                "    let mut oversized_dst = [0u8; 512];",
                "    let result_oversized = byte_classes.write_to(&mut oversized_dst);",
                "    assert_eq!(result_oversized, Ok(256));",
                "    assert_eq!(&oversized_dst[..256], byte_classes.0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_classes = ByteClasses::singletons();",
                "    let mut dst = [0u8; 256];",
                "    let _ = byte_classes.write_to(&mut dst);",
                "    for b in 0..=255 {",
                "        assert_eq!(dst[b as usize], byte_classes.get(b));",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert!(byte_classes.write_to(&mut dst).is_ok());",
                "    assert_eq!(dst.len(), byte_classes.write_to_len());",
                "    assert!(dst.iter().all(|&byte| byte == byte_classes.get(byte)));",
                "    let small_buffer = [0u8; 255];",
                "    assert_eq!(byte_classes.write_to(&mut small_buffer), Err(SerializeError::buffer_too_small(\"byte class map\")));",
                "    assert_eq!(byte_classes.write_to(&mut dst).unwrap(), byte_classes.write_to_len());"
              ],
              "code": [
                "{",
                "    let byte_classes = ByteClasses::singletons();",
                "    let mut dst = [0u8; 256];",
                "    let _ = byte_classes.write_to(&mut dst);",
                "    for b in 0..=255 {",
                "        assert_eq!(dst[b as usize], byte_classes.get(b));",
                "    }",
                "    assert!(byte_classes.write_to(&mut dst).is_ok());",
                "    assert_eq!(dst.len(), byte_classes.write_to_len());",
                "    assert!(dst.iter().all(|&byte| byte == byte_classes.get(byte)));",
                "    let small_buffer = [0u8; 255];",
                "    assert_eq!(byte_classes.write_to(&mut small_buffer), Err(SerializeError::buffer_too_small(\"byte class map\")));",
                "    assert_eq!(byte_classes.write_to(&mut dst).unwrap(), byte_classes.write_to_len());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut dst = [0u8; 255];",
                "    let _ = byte_classes.write_to(&mut dst);",
                "}"
              ],
              "oracle": [
                "    let byte_classes = ByteClasses::empty();",
                "    let mut dst = [0u8; 256];",
                "    assert_eq!(byte_classes.write_to(&mut dst), Ok(256));",
                "    let mut dst = [0u8; 255];",
                "    assert!(byte_classes.write_to(&mut dst).is_err());",
                "    let byte_classes = ByteClasses::singletons();",
                "    let mut dst = [0u8; 256];",
                "    assert_eq!(byte_classes.write_to(&mut dst), Ok(256));",
                "    let mut dst = [0u8; 1];",
                "    assert!(byte_classes.write_to(&mut dst).is_err());",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut dst = [0u8; 256];",
                "    let result = byte_classes.write_to(&mut dst);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), 256);",
                "    let mut dst = [0u8; 256];",
                "    let byte_classes = ByteClasses::empty();",
                "    let result = byte_classes.write_to(&mut dst);",
                "    assert!(result.unwrap() == 256);"
              ],
              "code": [
                "{",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut dst = [0u8; 255];",
                "    let _ = byte_classes.write_to(&mut dst);",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut dst = [0u8; 256];",
                "    assert_eq!(byte_classes.write_to(&mut dst), Ok(256));",
                "    let mut dst = [0u8; 255];",
                "    assert!(byte_classes.write_to(&mut dst).is_err());",
                "    let byte_classes = ByteClasses::singletons();",
                "    let mut dst = [0u8; 256];",
                "    assert_eq!(byte_classes.write_to(&mut dst), Ok(256));",
                "    let mut dst = [0u8; 1];",
                "    assert!(byte_classes.write_to(&mut dst).is_err());",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut dst = [0u8; 256];",
                "    let result = byte_classes.write_to(&mut dst);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), 256);",
                "    let mut dst = [0u8; 256];",
                "    let byte_classes = ByteClasses::empty();",
                "    let result = byte_classes.write_to(&mut dst);",
                "    assert!(result.unwrap() == 256);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: dst.len() < nwrite at line 271 is false, with bound dst.len() == nwrite\n",
        "precondition: b in 0..=255 at line 274 is false\n",
        "expected return value/type: Ok(nwrite)\n"
      ],
      "input_infer": "dst.len() == 256\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut dst = vec![0u8; 256];",
                "    let result = byte_classes.write_to(&mut dst);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(256));",
                "    assert!(dst.iter().all(|&b| b == 0));",
                "    assert_eq!(byte_classes.write_to_len(), 256);"
              ],
              "code": [
                "{",
                "    let byte_classes = ByteClasses::empty();",
                "    let mut dst = vec![0u8; 256];",
                "    let result = byte_classes.write_to(&mut dst);",
                "    assert_eq!(result, Ok(256));",
                "    assert!(dst.iter().all(|&b| b == 0));",
                "    assert_eq!(byte_classes.write_to_len(), 256);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_classes = ByteClasses::singletons();",
                "    let mut dst = vec![0u8; 256];",
                "    let result = byte_classes.write_to(&mut dst);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(256));",
                "    assert!(dst.iter().all(|&x| x == byte_classes.get(x)));",
                "    assert!(dst.len() == 256);",
                "    assert!(result.is_ok());",
                "    assert!(dst.len() >= 256);"
              ],
              "code": [
                "{",
                "    let byte_classes = ByteClasses::singletons();",
                "    let mut dst = vec![0u8; 256];",
                "    let result = byte_classes.write_to(&mut dst);",
                "    assert_eq!(result, Ok(256));",
                "    assert!(dst.iter().all(|&x| x == byte_classes.get(x)));",
                "    assert!(dst.len() == 256);",
                "    assert!(result.is_ok());",
                "    assert!(dst.len() >= 256);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}