{
  "name": "regex_automata::meta::regex::{impl#20}::get_which_captures",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:3070:5:3072:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "which_captures: [All, Implicit, None], default: All\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::default().which_captures(WhichCaptures::All);",
                "    config.get_which_captures();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
                "    ",
                "    let config = Config::default().which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::Implicit);",
                "    ",
                "    let config = Config::default().which_captures(WhichCaptures::None);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
                "    ",
                "    let config = Config::default();",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::All);"
              ],
              "code": [
                "{",
                "    let config = Config::default().which_captures(WhichCaptures::All);",
                "    config.get_which_captures();",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
                "    ",
                "    let config = Config::default().which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::Implicit);",
                "    ",
                "    let config = Config::default().which_captures(WhichCaptures::None);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
                "    ",
                "    let config = Config::default();",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::default().which_captures(WhichCaptures::Implicit);",
                "    config.get_which_captures();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_which_captures(), WhichCaptures::Implicit);",
                "    ",
                "    let config = Config::default();",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::All);"
              ],
              "code": [
                "{",
                "    let config = Config::default().which_captures(WhichCaptures::Implicit);",
                "    config.get_which_captures();",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::Implicit);",
                "    ",
                "    let config = Config::default();",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::default().which_captures(WhichCaptures::None);",
                "    config.get_which_captures();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
                "    let config_default = Config::default();",
                "    assert_eq!(config_default.get_which_captures(), WhichCaptures::All);",
                "    let config_implicit = Config::default().which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config_implicit.get_which_captures(), WhichCaptures::Implicit);",
                "    let config_all = Config::default().which_captures(WhichCaptures::All);",
                "    assert_eq!(config_all.get_which_captures(), WhichCaptures::All);"
              ],
              "code": [
                "{",
                "    let config = Config::default().which_captures(WhichCaptures::None);",
                "    config.get_which_captures();",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
                "    let config_default = Config::default();",
                "    assert_eq!(config_default.get_which_captures(), WhichCaptures::All);",
                "    let config_implicit = Config::default().which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config_implicit.get_which_captures(), WhichCaptures::Implicit);",
                "    let config_all = Config::default().which_captures(WhichCaptures::All);",
                "    assert_eq!(config_all.get_which_captures(), WhichCaptures::All);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::default();",
                "    config.get_which_captures();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
                "    let config = Config::default().which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::Implicit);",
                "    let config = Config::default().which_captures(WhichCaptures::None);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
                "    let config = Config::default().which_captures(WhichCaptures::All);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::All);"
              ],
              "code": [
                "{",
                "    let config = Config::default();",
                "    config.get_which_captures();",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
                "    let config = Config::default().which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::Implicit);",
                "    let config = Config::default().which_captures(WhichCaptures::None);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
                "    let config = Config::default().which_captures(WhichCaptures::All);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}