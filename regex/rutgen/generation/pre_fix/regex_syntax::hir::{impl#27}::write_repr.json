{
  "name": "regex_syntax::hir::{impl#27}::write_repr",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:2891:5:2897:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "slice must be a mutable slice with a length of at least 4 bytes; LookSet instance must have bits set to any u32 value (0 to 4294967295)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let lookset = LookSet { bits: 0 };",
                "    let mut slice = [0u8; 4];",
                "    lookset.write_repr(&mut slice);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(slice, [0, 0, 0, 0]);",
                "    let lookset_full = LookSet { bits: u32::MAX };",
                "    let mut full_slice = [0u8; 4];",
                "    lookset_full.write_repr(&mut full_slice);",
                "    assert_eq!(full_slice, [255, 255, 255, 255]);",
                "    let lookset_half = LookSet { bits: 0x00FF00FF };",
                "    let mut half_slice = [0u8; 4];",
                "    lookset_half.write_repr(&mut half_slice);",
                "    assert_eq!(half_slice, [255, 0, 255, 0]);",
                "    let lookset_single = LookSet { bits: 0x00000001 };",
                "    let mut single_slice = [0u8; 4];",
                "    lookset_single.write_repr(&mut single_slice);",
                "    assert_eq!(single_slice, [1, 0, 0, 0]);",
                "    let lookset_zero = LookSet { bits: 0 };",
                "    let mut underflow_slice = [0u8; 4];",
                "    lookset_zero.write_repr(&mut underflow_slice);",
                "    assert_eq!(underflow_slice, [0, 0, 0, 0]);",
                "    let mut small_slice = [0u8; 3];",
                "    panic::set_hook(Box::new(|_| {}));",
                "    let panic_result = std::panic::catch_unwind(|| { lookset.write_repr(&mut small_slice); });",
                "    assert!(panic_result.is_err());"
              ],
              "code": [
                "{",
                "    let lookset = LookSet { bits: 0 };",
                "    let mut slice = [0u8; 4];",
                "    lookset.write_repr(&mut slice);",
                "    assert_eq!(slice, [0, 0, 0, 0]);",
                "    let lookset_full = LookSet { bits: u32::MAX };",
                "    let mut full_slice = [0u8; 4];",
                "    lookset_full.write_repr(&mut full_slice);",
                "    assert_eq!(full_slice, [255, 255, 255, 255]);",
                "    let lookset_half = LookSet { bits: 0x00FF00FF };",
                "    let mut half_slice = [0u8; 4];",
                "    lookset_half.write_repr(&mut half_slice);",
                "    assert_eq!(half_slice, [255, 0, 255, 0]);",
                "    let lookset_single = LookSet { bits: 0x00000001 };",
                "    let mut single_slice = [0u8; 4];",
                "    lookset_single.write_repr(&mut single_slice);",
                "    assert_eq!(single_slice, [1, 0, 0, 0]);",
                "    let lookset_zero = LookSet { bits: 0 };",
                "    let mut underflow_slice = [0u8; 4];",
                "    lookset_zero.write_repr(&mut underflow_slice);",
                "    assert_eq!(underflow_slice, [0, 0, 0, 0]);",
                "    let mut small_slice = [0u8; 3];",
                "    panic::set_hook(Box::new(|_| {}));",
                "    let panic_result = std::panic::catch_unwind(|| { lookset.write_repr(&mut small_slice); });",
                "    assert!(panic_result.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let lookset = LookSet { bits: u32::MAX };",
                "    let mut slice = [0u8; 4];",
                "    lookset.write_repr(&mut slice);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(slice[0], 255);",
                "    assert_eq!(slice[1], 255);",
                "    assert_eq!(slice[2], 255);",
                "    assert_eq!(slice[3], 255);"
              ],
              "code": [
                "{",
                "    let lookset = LookSet { bits: u32::MAX };",
                "    let mut slice = [0u8; 4];",
                "    lookset.write_repr(&mut slice);",
                "    assert_eq!(slice[0], 255);",
                "    assert_eq!(slice[1], 255);",
                "    assert_eq!(slice[2], 255);",
                "    assert_eq!(slice[3], 255);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let lookset = LookSet { bits: 1234567890 };",
                "    let mut slice = [0u8; 4];",
                "    lookset.write_repr(&mut slice);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(slice[0], 0xD2);",
                "    assert_eq!(slice[1], 0x47);",
                "    assert_eq!(slice[2], 0x32);",
                "    assert_eq!(slice[3], 0x49);",
                "    ",
                "    let lookset_empty = LookSet::empty();",
                "    let mut slice_empty = [0u8; 4];",
                "    lookset_empty.write_repr(&mut slice_empty);",
                "    assert_eq!(slice_empty, [0, 0, 0, 0]);",
                "    ",
                "    let lookset_full = LookSet::full();",
                "    let mut slice_full = [0u8; 4];",
                "    lookset_full.write_repr(&mut slice_full);",
                "    assert_eq!(slice_full, [0xFF, 0xFF, 0xFF, 0xFF]);",
                "    ",
                "    let lookset_singleton = LookSet::singleton(Look::SomeVariant);",
                "    let mut slice_singleton = [0u8; 4];",
                "    lookset_singleton.write_repr(&mut slice_singleton);",
                "    assert_ne!(slice_singleton, [0, 0, 0, 0]);",
                "    ",
                "    let mut panic_slice = [0u8; 3];",
                "    let mut result = std::panic::catch_unwind(|| {",
                "    lookset.write_repr(&mut panic_slice);",
                "    });",
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "    let lookset = LookSet { bits: 1234567890 };",
                "    let mut slice = [0u8; 4];",
                "    lookset.write_repr(&mut slice);",
                "    assert_eq!(slice[0], 0xD2);",
                "    assert_eq!(slice[1], 0x47);",
                "    assert_eq!(slice[2], 0x32);",
                "    assert_eq!(slice[3], 0x49);",
                "    ",
                "    let lookset_empty = LookSet::empty();",
                "    let mut slice_empty = [0u8; 4];",
                "    lookset_empty.write_repr(&mut slice_empty);",
                "    assert_eq!(slice_empty, [0, 0, 0, 0]);",
                "    ",
                "    let lookset_full = LookSet::full();",
                "    let mut slice_full = [0u8; 4];",
                "    lookset_full.write_repr(&mut slice_full);",
                "    assert_eq!(slice_full, [0xFF, 0xFF, 0xFF, 0xFF]);",
                "    ",
                "    let lookset_singleton = LookSet::singleton(Look::SomeVariant);",
                "    let mut slice_singleton = [0u8; 4];",
                "    lookset_singleton.write_repr(&mut slice_singleton);",
                "    assert_ne!(slice_singleton, [0, 0, 0, 0]);",
                "    ",
                "    let mut panic_slice = [0u8; 3];",
                "    let mut result = std::panic::catch_unwind(|| {",
                "    lookset.write_repr(&mut panic_slice);",
                "    });",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let lookset = LookSet { bits: 1234567890 };",
                "    let mut slice = [0u8; 3];",
                "    lookset.write_repr(&mut slice);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| {",
                "    let lookset = LookSet { bits: 1234567890 };",
                "    let mut slice = [0u8; 3];",
                "    lookset.write_repr(&mut slice);",
                "    }).is_err());"
              ],
              "code": [
                "{",
                "    let lookset = LookSet { bits: 1234567890 };",
                "    let mut slice = [0u8; 3];",
                "    lookset.write_repr(&mut slice);",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let lookset = LookSet { bits: 1234567890 };",
                "    let mut slice = [0u8; 3];",
                "    lookset.write_repr(&mut slice);",
                "    }).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}