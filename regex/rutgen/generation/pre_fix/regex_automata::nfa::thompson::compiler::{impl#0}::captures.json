{
  "name": "regex_automata::nfa::thompson::compiler::{impl#0}::captures",
  "mod_info": {
    "name": "nfa::thompson::compiler",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:60:1:60:14"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/compiler.rs:343:5:349:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: yes at line 344 is true\n"
      ],
      "input_infer": "yes: true, reverse: false, which_captures: WhichCaptures::All, nfa_size_limit: None, shrink: false, utf8: true\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new()",
                "        .utf8(true)",
                "        .reverse(false)",
                "        .nfa_size_limit(None)",
                "        .shrink(false)",
                "        .which_captures(WhichCaptures::All);",
                "    let config_result = config.captures(true);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config_result.get_which_captures(), WhichCaptures::All);",
                "    assert!(config_result.get_utf8());",
                "    assert!(!config_result.get_reverse());",
                "    assert_eq!(config_result.get_nfa_size_limit(), None);",
                "    assert!(!config_result.get_shrink());",
                "    assert!(config_result.get_captures());"
              ],
              "code": [
                "{",
                "    let config = Config::new()",
                "        .utf8(true)",
                "        .reverse(false)",
                "        .nfa_size_limit(None)",
                "        .shrink(false)",
                "        .which_captures(WhichCaptures::All);",
                "    let config_result = config.captures(true);",
                "    assert_eq!(config_result.get_which_captures(), WhichCaptures::All);",
                "    assert!(config_result.get_utf8());",
                "    assert!(!config_result.get_reverse());",
                "    assert_eq!(config_result.get_nfa_size_limit(), None);",
                "    assert!(!config_result.get_shrink());",
                "    assert!(config_result.get_captures());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new()",
                "        .utf8(true)",
                "        .reverse(false)",
                "        .nfa_size_limit(None)",
                "        .shrink(true)",
                "        .which_captures(WhichCaptures::All);",
                "    let config_result = config.captures(true);",
                "}"
              ],
              "oracle": [
                "    assert!(config_result.get_which_captures() == WhichCaptures::All);",
                "    assert!(config_result.get_utf8() == true);",
                "    assert!(config_result.get_reverse() == false);",
                "    assert!(config_result.get_nfa_size_limit() == None);",
                "    assert!(config_result.get_shrink() == true);"
              ],
              "code": [
                "{",
                "    let config = Config::new()",
                "        .utf8(true)",
                "        .reverse(false)",
                "        .nfa_size_limit(None)",
                "        .shrink(true)",
                "        .which_captures(WhichCaptures::All);",
                "    let config_result = config.captures(true);",
                "    assert!(config_result.get_which_captures() == WhichCaptures::All);",
                "    assert!(config_result.get_utf8() == true);",
                "    assert!(config_result.get_reverse() == false);",
                "    assert!(config_result.get_nfa_size_limit() == None);",
                "    assert!(config_result.get_shrink() == true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new()",
                "        .utf8(true)",
                "        .reverse(false)",
                "        .nfa_size_limit(Some(1024))",
                "        .shrink(false)",
                "        .which_captures(WhichCaptures::All);",
                "    let config_result = config.captures(true);",
                "}"
              ],
              "oracle": [
                "    assert!(config_result.get_which_captures() == WhichCaptures::All);",
                "    assert!(config_result.get_utf8() == true);",
                "    assert!(config_result.get_reverse() == false);",
                "    assert!(config_result.get_nfa_size_limit() == Some(1024));",
                "    assert!(config_result.get_shrink() == false);"
              ],
              "code": [
                "{",
                "    let config = Config::new()",
                "        .utf8(true)",
                "        .reverse(false)",
                "        .nfa_size_limit(Some(1024))",
                "        .shrink(false)",
                "        .which_captures(WhichCaptures::All);",
                "    let config_result = config.captures(true);",
                "    assert!(config_result.get_which_captures() == WhichCaptures::All);",
                "    assert!(config_result.get_utf8() == true);",
                "    assert!(config_result.get_reverse() == false);",
                "    assert!(config_result.get_nfa_size_limit() == Some(1024));",
                "    assert!(config_result.get_shrink() == false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: yes at line 344 is false\n"
      ],
      "input_infer": "utf8 is true, reverse is false, nfa_size_limit is None, shrink is true, which_captures is None, look_matcher is valid\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new()",
                "        .utf8(true)",
                "        .reverse(false)",
                "        .nfa_size_limit(None)",
                "        .shrink(true)",
                "        .which_captures(WhichCaptures::None)",
                "        .look_matcher(LookMatcher {",
                "            lineterm: DebugByte::default(),",
                "        });",
                "",
                "    let _ = config.captures(false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_which_captures(), WhichCaptures::None)",
                "    assert!(config.get_utf8())",
                "    assert!(!config.get_reverse())",
                "    assert_eq!(config.get_nfa_size_limit(), None)",
                "    assert!(config.get_shrink())",
                "    assert_eq!(config.get_look_matcher().lineterm, DebugByte::default())"
              ],
              "code": [
                "{",
                "    let config = Config::new()",
                "        .utf8(true)",
                "        .reverse(false)",
                "        .nfa_size_limit(None)",
                "        .shrink(true)",
                "        .which_captures(WhichCaptures::None)",
                "        .look_matcher(LookMatcher {",
                "            lineterm: DebugByte::default(),",
                "        });",
                "",
                "    let _ = config.captures(false);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::None)",
                "    assert!(config.get_utf8())",
                "    assert!(!config.get_reverse())",
                "    assert_eq!(config.get_nfa_size_limit(), None)",
                "    assert!(config.get_shrink())",
                "    assert_eq!(config.get_look_matcher().lineterm, DebugByte::default())",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config_zero = Config::new()",
                "        .utf8(true)",
                "        .reverse(false)",
                "        .nfa_size_limit(None)",
                "        .shrink(true)",
                "        .which_captures(WhichCaptures::None)",
                "        .look_matcher(LookMatcher {",
                "            lineterm: DebugByte::default(),",
                "        });",
                "",
                "    let _ = config_zero.captures(false);",
                "",
                "    let config_max = Config::new()",
                "        .utf8(true)",
                "        .reverse(false)",
                "        .nfa_size_limit(Some(usize::MAX))",
                "        .shrink(true)",
                "        .which_captures(WhichCaptures::None)",
                "        .look_matcher(LookMatcher {",
                "            lineterm: DebugByte::default(),",
                "        });",
                "",
                "    let _ = config_max.captures(false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config_zero.get_which_captures(), WhichCaptures::None);",
                "    assert_eq!(config_max.get_which_captures(), WhichCaptures::None);",
                "    assert!(config_zero.get_reverse() == false);",
                "    assert!(config_max.get_reverse() == false);"
              ],
              "code": [
                "{",
                "    let config_zero = Config::new()",
                "        .utf8(true)",
                "        .reverse(false)",
                "        .nfa_size_limit(None)",
                "        .shrink(true)",
                "        .which_captures(WhichCaptures::None)",
                "        .look_matcher(LookMatcher {",
                "            lineterm: DebugByte::default(),",
                "        });",
                "",
                "    let _ = config_zero.captures(false);",
                "",
                "    let config_max = Config::new()",
                "        .utf8(true)",
                "        .reverse(false)",
                "        .nfa_size_limit(Some(usize::MAX))",
                "        .shrink(true)",
                "        .which_captures(WhichCaptures::None)",
                "        .look_matcher(LookMatcher {",
                "            lineterm: DebugByte::default(),",
                "        });",
                "",
                "    let _ = config_max.captures(false);",
                "    assert_eq!(config_zero.get_which_captures(), WhichCaptures::None);",
                "    assert_eq!(config_max.get_which_captures(), WhichCaptures::None);",
                "    assert!(config_zero.get_reverse() == false);",
                "    assert!(config_max.get_reverse() == false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}