{
  "name": "regex_automata::dfa::automaton::{impl#2}::quit",
  "mod_info": {
    "name": "dfa::automaton",
    "loc": "regex-automata/src/dfa/mod.rs:348:1:348:15"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/automaton.rs:2108:5:2110:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: StartError::Quit { byte }\n"
      ],
      "input_infer": "byte: 0-255\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = StartError::quit(0);",
                "}"
              ],
              "oracle": [
                "    let result = StartError::quit(0); assert_eq!(result, StartError::Quit { byte: 0 });",
                "    let result = StartError::quit(255); assert_eq!(result, StartError::Quit { byte: 255 });",
                "    let result = StartError::quit(100); assert_eq!(result, StartError::Quit { byte: 100 });",
                "    let result = StartError::quit(1); assert_eq!(result, StartError::Quit { byte: 1 });"
              ],
              "code": [
                "{",
                "    let result = StartError::quit(0);",
                "    let result = StartError::quit(0); assert_eq!(result, StartError::Quit { byte: 0 });",
                "    let result = StartError::quit(255); assert_eq!(result, StartError::Quit { byte: 255 });",
                "    let result = StartError::quit(100); assert_eq!(result, StartError::Quit { byte: 100 });",
                "    let result = StartError::quit(1); assert_eq!(result, StartError::Quit { byte: 1 });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = StartError::quit(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, StartError::Quit { byte: 1 });"
              ],
              "code": [
                "{",
                "    let result = StartError::quit(1);",
                "    assert_eq!(result, StartError::Quit { byte: 1 });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = StartError::quit(128);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, StartError::Quit { byte: 128 });"
              ],
              "code": [
                "{",
                "    let result = StartError::quit(128);",
                "    assert_eq!(result, StartError::Quit { byte: 128 });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = StartError::quit(255);",
                "}"
              ],
              "oracle": [
                "    let expected = StartError::Quit { byte: 255 };",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let result = StartError::quit(255);",
                "    let expected = StartError::Quit { byte: 255 };",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}