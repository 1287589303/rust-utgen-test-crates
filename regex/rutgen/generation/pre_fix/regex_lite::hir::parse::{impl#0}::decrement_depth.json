{
  "name": "regex_lite::hir::parse::{impl#0}::decrement_depth",
  "mod_info": {
    "name": "hir::parse",
    "loc": "regex-lite/src/hir/mod.rs:5:1:5:11"
  },
  "visible": false,
  "loc": "regex-lite/src/hir/parse.rs:204:5:210:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "depth must be greater than 0 before calling decrement_depth, with a range of 1 to maximum nesting limit (inclusive).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 5, flags: Flags::default() };",
                "    let mut parser = Parser::new(config, \"test pattern\");",
                "    parser.depth.set(1);",
                "    parser.decrement_depth();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(parser.depth.get(), 0);"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 5, flags: Flags::default() };",
                "    let mut parser = Parser::new(config, \"test pattern\");",
                "    parser.depth.set(1);",
                "    parser.decrement_depth();",
                "    assert_eq!(parser.depth.get(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 5, flags: Flags::default() };",
                "    let mut parser = Parser::new(config, \"test pattern\");",
                "    parser.depth.set(0);",
                "    parser.decrement_depth();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(parser.depth.get(), 0);",
                "    assert!(matches!(std::panic::catch_unwind(|| parser.decrement_depth()), Err(_)));"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 5, flags: Flags::default() };",
                "    let mut parser = Parser::new(config, \"test pattern\");",
                "    parser.depth.set(0);",
                "    parser.decrement_depth();",
                "    assert_eq!(parser.depth.get(), 0);",
                "    assert!(matches!(std::panic::catch_unwind(|| parser.decrement_depth()), Err(_)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 5, flags: Flags::default() };",
                "    let mut parser = Parser::new(config, \"test pattern\");",
                "    parser.depth.set(5);",
                "    parser.decrement_depth();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(parser.depth.get(), 4);",
                "    assert_eq!(parser.is_done(), false);",
                "    assert_eq!(parser.char(), 't');",
                "    assert!(parser.bump());",
                "    assert_eq!(parser.depth.get(), 4);",
                "    assert_eq!(parser.next_capture_index().unwrap(), 0);",
                "    parser.depth.set(1);",
                "    parser.decrement_depth();",
                "    assert_eq!(parser.depth.get(), 0);",
                "    parser.depth.set(0);",
                "    assert_panics!(parser.decrement_depth());"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 5, flags: Flags::default() };",
                "    let mut parser = Parser::new(config, \"test pattern\");",
                "    parser.depth.set(5);",
                "    parser.decrement_depth();",
                "    assert_eq!(parser.depth.get(), 4);",
                "    assert_eq!(parser.is_done(), false);",
                "    assert_eq!(parser.char(), 't');",
                "    assert!(parser.bump());",
                "    assert_eq!(parser.depth.get(), 4);",
                "    assert_eq!(parser.next_capture_index().unwrap(), 0);",
                "    parser.depth.set(1);",
                "    parser.decrement_depth();",
                "    assert_eq!(parser.depth.get(), 0);",
                "    parser.depth.set(0);",
                "    assert_panics!(parser.decrement_depth());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 5, flags: Flags::default() };",
                "    let mut parser = Parser::new(config, \"test pattern\");",
                "    parser.depth.set(2);",
                "    parser.decrement_depth();",
                "    parser.decrement_depth();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(parser.depth.get(), 0);",
                "    assert_panics!(parser.decrement_depth());",
                "    parser.depth.set(1);",
                "    parser.decrement_depth();",
                "    assert_eq!(parser.depth.get(), 0);",
                "    parser.depth.set(0);",
                "    assert_panics!(parser.decrement_depth());"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 5, flags: Flags::default() };",
                "    let mut parser = Parser::new(config, \"test pattern\");",
                "    parser.depth.set(2);",
                "    parser.decrement_depth();",
                "    parser.decrement_depth();",
                "    assert_eq!(parser.depth.get(), 0);",
                "    assert_panics!(parser.decrement_depth());",
                "    parser.depth.set(1);",
                "    parser.decrement_depth();",
                "    assert_eq!(parser.depth.get(), 0);",
                "    parser.depth.set(0);",
                "    assert_panics!(parser.decrement_depth());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}