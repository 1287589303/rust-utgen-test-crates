{
  "name": "regex_syntax::unicode::canonical_prop",
  "mod_info": {
    "name": "unicode",
    "loc": "regex-syntax/src/lib.rs:193:1:193:13"
  },
  "visible": false,
  "loc": "regex-syntax/src/unicode.rs:530:1:563:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "normalized_name should be a valid normalized Unicode property name string, including valid names, non-existing names (to test None return), and empty string for boundary case, with feature flags enabled for PROPERTY_NAMES availability.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let normalized_name = \"General_Category\";",
                "    let result = canonical_prop(normalized_name);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Some(\"Lu\"))); // Test with valid property name \"General_Category\"",
                "    assert_eq!(canonical_prop(\"Non_Existent_Property\"), Ok(None)); // Test with a non-existent property name",
                "    assert_eq!(canonical_prop(\"\"), Ok(None)); // Test with an empty string",
                "    assert!(matches!(canonical_prop(\"Valid_Property_Name\"), Err(Error::PropertyNotFound))); // Test with\tvalid property name when data is unavailable",
                "    assert!(matches!(canonical_prop(\"Another_Valid_Name\"), Err(Error::PropertyValueNotFound))); // Test with an invalid value for a valid property name",
                "    assert!(matches!(canonical_prop(\"\"), Err(Error::PropertyNotFound))); // Test with an empty string when data is unavailable"
              ],
              "code": [
                "{",
                "    let normalized_name = \"General_Category\";",
                "    let result = canonical_prop(normalized_name);",
                "    assert_eq!(result, Ok(Some(\"Lu\"))); // Test with valid property name \"General_Category\"",
                "    assert_eq!(canonical_prop(\"Non_Existent_Property\"), Ok(None)); // Test with a non-existent property name",
                "    assert_eq!(canonical_prop(\"\"), Ok(None)); // Test with an empty string",
                "    assert!(matches!(canonical_prop(\"Valid_Property_Name\"), Err(Error::PropertyNotFound))); // Test with\tvalid property name when data is unavailable",
                "    assert!(matches!(canonical_prop(\"Another_Valid_Name\"), Err(Error::PropertyValueNotFound))); // Test with an invalid value for a valid property name",
                "    assert!(matches!(canonical_prop(\"\"), Err(Error::PropertyNotFound))); // Test with an empty string when data is unavailable",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let normalized_name = \"Non_Existing_Property\";",
                "    let result = canonical_prop(normalized_name);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(Error::PropertyNotFound));",
                "    let normalized_name = \"Existing_Property\";",
                "    let result = canonical_prop(normalized_name);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Some(\"Canonical_Value_For_Existing_Property\"));",
                "    let normalized_name = \"Another_Existing_Property\";",
                "    let result = canonical_prop(normalized_name);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Some(\"Canonical_Value_For_Another_Existing_Property\"));",
                "    let normalized_name = \"\";",
                "    let result = canonical_prop(normalized_name);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), None);"
              ],
              "code": [
                "{",
                "    let normalized_name = \"Non_Existing_Property\";",
                "    let result = canonical_prop(normalized_name);",
                "    assert_eq!(result, Err(Error::PropertyNotFound));",
                "    let normalized_name = \"Existing_Property\";",
                "    let result = canonical_prop(normalized_name);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Some(\"Canonical_Value_For_Existing_Property\"));",
                "    let normalized_name = \"Another_Existing_Property\";",
                "    let result = canonical_prop(normalized_name);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Some(\"Canonical_Value_For_Another_Existing_Property\"));",
                "    let normalized_name = \"\";",
                "    let result = canonical_prop(normalized_name);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let normalized_name = \"\";",
                "    let result = canonical_prop(normalized_name);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(Error::PropertyNotFound));",
                "    assert_eq!(result, Ok(None));",
                "    assert_eq!(result, Err(Error::PropertyValueNotFound));",
                "    assert_eq!(result, Ok(Some(\"some_property\")));",
                "    assert_eq!(result, Err(Error::PerlClassNotFound));"
              ],
              "code": [
                "{",
                "    let normalized_name = \"\";",
                "    let result = canonical_prop(normalized_name);",
                "    assert_eq!(result, Err(Error::PropertyNotFound));",
                "    assert_eq!(result, Ok(None));",
                "    assert_eq!(result, Err(Error::PropertyValueNotFound));",
                "    assert_eq!(result, Ok(Some(\"some_property\")));",
                "    assert_eq!(result, Err(Error::PerlClassNotFound));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}