{
  "name": "regex_automata::dfa::onepass::{impl#16}::is_empty",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/onepass.rs:2902:5:2904:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.0 == 0\n"
      ],
      "input_infer": "self.0 values: 0 (true), 1-32 (false)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slots = Slots(0);",
                "    let result = slots.is_empty();",
                "}"
              ],
              "oracle": [
                "    assert!(result == true);",
                "    let slots = Slots(1);",
                "    let result = slots.is_empty();",
                "    assert!(result == false);",
                "    let slots = Slots(2);",
                "    let result = slots.is_empty();",
                "    assert!(result == false);",
                "    let slots = Slots(32);",
                "    let result = slots.is_empty();",
                "    assert!(result == false);"
              ],
              "code": [
                "{",
                "    let slots = Slots(0);",
                "    let result = slots.is_empty();",
                "    assert!(result == true);",
                "    let slots = Slots(1);",
                "    let result = slots.is_empty();",
                "    assert!(result == false);",
                "    let slots = Slots(2);",
                "    let result = slots.is_empty();",
                "    assert!(result == false);",
                "    let slots = Slots(32);",
                "    let result = slots.is_empty();",
                "    assert!(result == false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slots = Slots(1);",
                "    let result = slots.is_empty();",
                "}"
              ],
              "oracle": [
                "    assert!(!result);"
              ],
              "code": [
                "{",
                "    let slots = Slots(1);",
                "    let result = slots.is_empty();",
                "    assert!(!result);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slots = Slots(2);",
                "    let result = slots.is_empty();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let slots = Slots(2);",
                "    let result = slots.is_empty();",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slots = Slots(32);",
                "    let result = slots.is_empty();",
                "}"
              ],
              "oracle": [
                "    assert!(!result);"
              ],
              "code": [
                "{",
                "    let slots = Slots(32);",
                "    let result = slots.is_empty();",
                "    assert!(!result);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}