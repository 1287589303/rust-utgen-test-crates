{
  "name": "regex_syntax::hir::{impl#22}::reversed",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:1695:5:1716:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches Look::WordEndHalfUnicode at line 1696 is true\n",
        "expected return value/type: Look::WordStartHalfUnicode\n"
      ],
      "input_infer": "self matches Look::WordEndHalfUnicode at line 1696 is true, expecting return Look::WordStartHalfUnicode\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndHalfUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndHalfUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndHalfUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches Look::WordStartHalfUnicode at line 1696 is true\n",
        "precondition: self matches Look::WordStartHalfUnicode at line 1696 is true\n",
        "expected return value/type: Look::WordEndHalfUnicode\n"
      ],
      "input_infer": "self is Look::Start, Look::End, Look::StartLF, Look::EndLF, Look::StartCRLF, Look::EndCRLF, Look::WordAscii, Look::WordAsciiNegate, Look::WordUnicode, Look::WordUnicodeNegate, Look::WordStartAscii, Look::WordEndAscii, Look::WordStartUnicode, Look::WordEndUnicode, Look::WordStartHalfAscii, Look::WordEndHalfAscii, Look::WordStartHalfUnicode to trigger all match cases and validate expected return values\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::Start;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::WordStartHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::Start;",
                "    let _ = look.reversed();",
                "    let look = Look::WordStartHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::End;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::End;",
                "    let _ = look.reversed();",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::StartLF;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::StartLF;",
                "    let _ = look.reversed();",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::EndLF;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::EndLF;",
                "    let _ = look.reversed();",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::StartCRLF;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::StartCRLF;",
                "    let _ = look.reversed();",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::EndCRLF;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::EndCRLF;",
                "    let _ = look.reversed();",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordAscii;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordAscii;",
                "    let _ = look.reversed();",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordAsciiNegate;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordAsciiNegate;",
                "    let _ = look.reversed();",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordUnicode;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordUnicode;",
                "    let _ = look.reversed();",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordUnicodeNegate;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);"
              ],
              "code": [
                "{",
                "    let look = Look::WordUnicodeNegate;",
                "    let _ = look.reversed();",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartAscii;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartAscii;",
                "    let _ = look.reversed();",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndAscii;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndAscii;",
                "    let _ = look.reversed();",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartUnicode;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::WordStartHalfUnicode;",
                "    assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode;",
                "    assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartUnicode;",
                "    let _ = look.reversed();",
                "    let look = Look::WordStartHalfUnicode;",
                "    assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode;",
                "    assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndUnicode;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordStartHalfUnicode.reversed().as_repr() == Look::WordEndHalfUnicode.as_repr()",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndUnicode;",
                "    let _ = look.reversed();",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordStartHalfUnicode.reversed().as_repr() == Look::WordEndHalfUnicode.as_repr()",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartHalfAscii;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartHalfAscii;",
                "    let _ = look.reversed();",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndHalfAscii;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start;",
                "    assert_eq!(look.reversed(), Look::End);",
                "    ",
                "    let look = Look::End;",
                "    assert_eq!(look.reversed(), Look::Start);",
                "    ",
                "    let look = Look::StartLF;",
                "    assert_eq!(look.reversed(), Look::EndLF);",
                "    ",
                "    let look = Look::EndLF;",
                "    assert_eq!(look.reversed(), Look::StartLF);",
                "    ",
                "    let look = Look::StartCRLF;",
                "    assert_eq!(look.reversed(), Look::EndCRLF);",
                "    ",
                "    let look = Look::EndCRLF;",
                "    assert_eq!(look.reversed(), Look::StartCRLF);",
                "    ",
                "    let look = Look::WordAscii;",
                "    assert_eq!(look.reversed(), Look::WordAscii);",
                "    ",
                "    let look = Look::WordAsciiNegate;",
                "    assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    ",
                "    let look = Look::WordUnicode;",
                "    assert_eq!(look.reversed(), Look::WordUnicode);",
                "    ",
                "    let look = Look::WordUnicodeNegate;",
                "    assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    ",
                "    let look = Look::WordStartAscii;",
                "    assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    ",
                "    let look = Look::WordEndAscii;",
                "    assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    ",
                "    let look = Look::WordStartUnicode;",
                "    assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    ",
                "    let look = Look::WordEndUnicode;",
                "    assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    ",
                "    let look = Look::WordStartHalfAscii;",
                "    assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    ",
                "    let look = Look::WordEndHalfAscii;",
                "    assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    ",
                "    let look = Look::WordStartHalfUnicode;",
                "    assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    ",
                "    let look = Look::WordEndHalfUnicode;",
                "    assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndHalfAscii;",
                "    let _ = look.reversed();",
                "    let look = Look::Start;",
                "    assert_eq!(look.reversed(), Look::End);",
                "    ",
                "    let look = Look::End;",
                "    assert_eq!(look.reversed(), Look::Start);",
                "    ",
                "    let look = Look::StartLF;",
                "    assert_eq!(look.reversed(), Look::EndLF);",
                "    ",
                "    let look = Look::EndLF;",
                "    assert_eq!(look.reversed(), Look::StartLF);",
                "    ",
                "    let look = Look::StartCRLF;",
                "    assert_eq!(look.reversed(), Look::EndCRLF);",
                "    ",
                "    let look = Look::EndCRLF;",
                "    assert_eq!(look.reversed(), Look::StartCRLF);",
                "    ",
                "    let look = Look::WordAscii;",
                "    assert_eq!(look.reversed(), Look::WordAscii);",
                "    ",
                "    let look = Look::WordAsciiNegate;",
                "    assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    ",
                "    let look = Look::WordUnicode;",
                "    assert_eq!(look.reversed(), Look::WordUnicode);",
                "    ",
                "    let look = Look::WordUnicodeNegate;",
                "    assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    ",
                "    let look = Look::WordStartAscii;",
                "    assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    ",
                "    let look = Look::WordEndAscii;",
                "    assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    ",
                "    let look = Look::WordStartUnicode;",
                "    assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    ",
                "    let look = Look::WordEndUnicode;",
                "    assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    ",
                "    let look = Look::WordStartHalfAscii;",
                "    assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    ",
                "    let look = Look::WordEndHalfAscii;",
                "    assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    ",
                "    let look = Look::WordStartHalfUnicode;",
                "    assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    ",
                "    let look = Look::WordEndHalfUnicode;",
                "    assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartHalfUnicode;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look.reversed(), Look::WordEndHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartHalfUnicode;",
                "    let _ = look.reversed();",
                "    assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndHalfUnicode;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look.reversed(), Look::WordEndHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndHalfUnicode;",
                "    let _ = look.reversed();",
                "    assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: self matches Look::WordEndHalfAscii at line 1696 is true\n",
        "precondition: self matches Look::WordEndHalfAscii at line 1696 is true\n",
        "expected return value/type: Look::WordStartHalfAscii\n"
      ],
      "input_infer": "self must be Look::WordEndHalfAscii, valid values for self are Look variants ranging from Look::Start to Look::WordEndHalfUnicode\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::Start;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);"
              ],
              "code": [
                "{",
                "    let input = Look::Start;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::End;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);"
              ],
              "code": [
                "{",
                "    let input = Look::End;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::StartLF;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);"
              ],
              "code": [
                "{",
                "    let input = Look::StartLF;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::EndLF;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::EndLF;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::StartCRLF;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);"
              ],
              "code": [
                "{",
                "    let input = Look::StartCRLF;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::EndCRLF;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    output = Look::EndCRLF.reversed();",
                "    assert_eq!(output, Look::StartCRLF);",
                "    ",
                "    input = Look::Start;",
                "    output = input.reversed();",
                "    assert_eq!(output, Look::End);",
                "    ",
                "    input = Look::EndLF;",
                "    output = input.reversed();",
                "    assert_eq!(output, Look::StartLF);",
                "    ",
                "    input = Look::WordEndHalfAscii;",
                "    output = input.reversed();",
                "    assert_eq!(output, Look::WordStartHalfAscii);",
                "    ",
                "    input = Look::WordAscii;",
                "    output = input.reversed();",
                "    assert_eq!(output, Look::WordAscii);",
                "    ",
                "    input = Look::WordUnicodeNegate;",
                "    output = input.reversed();",
                "    assert_eq!(output, Look::WordUnicodeNegate);",
                "    ",
                "    input = Look::WordStartAscii;",
                "    output = input.reversed();",
                "    assert_eq!(output, Look::WordEndAscii);"
              ],
              "code": [
                "{",
                "    let input = Look::EndCRLF;",
                "    let output = input.reversed();",
                "    output = Look::EndCRLF.reversed();",
                "    assert_eq!(output, Look::StartCRLF);",
                "    ",
                "    input = Look::Start;",
                "    output = input.reversed();",
                "    assert_eq!(output, Look::End);",
                "    ",
                "    input = Look::EndLF;",
                "    output = input.reversed();",
                "    assert_eq!(output, Look::StartLF);",
                "    ",
                "    input = Look::WordEndHalfAscii;",
                "    output = input.reversed();",
                "    assert_eq!(output, Look::WordStartHalfAscii);",
                "    ",
                "    input = Look::WordAscii;",
                "    output = input.reversed();",
                "    assert_eq!(output, Look::WordAscii);",
                "    ",
                "    input = Look::WordUnicodeNegate;",
                "    output = input.reversed();",
                "    assert_eq!(output, Look::WordUnicodeNegate);",
                "    ",
                "    input = Look::WordStartAscii;",
                "    output = input.reversed();",
                "    assert_eq!(output, Look::WordEndAscii);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordAscii;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);"
              ],
              "code": [
                "{",
                "    let input = Look::WordAscii;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordAsciiNegate;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);"
              ],
              "code": [
                "{",
                "    let input = Look::WordAsciiNegate;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordUnicode;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);"
              ],
              "code": [
                "{",
                "    let input = Look::WordUnicode;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordUnicodeNegate;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);"
              ],
              "code": [
                "{",
                "    let input = Look::WordUnicodeNegate;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartAscii;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartAscii;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndAscii;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(output, Look::WordStartHalfAscii);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndAscii;",
                "    let output = input.reversed();",
                "    assert_eq!(output, Look::WordStartHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartUnicode;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartUnicode;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndUnicode;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndUnicode;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartHalfAscii;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(output, Look::WordStartHalfAscii);"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartHalfAscii;",
                "    let output = input.reversed();",
                "    assert_eq!(output, Look::WordStartHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndHalfAscii;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(output, Look::WordStartHalfAscii);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndHalfAscii;",
                "    let output = input.reversed();",
                "    assert_eq!(output, Look::WordStartHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartHalfUnicode;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartHalfUnicode;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndHalfUnicode;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(output, Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndHalfUnicode;",
                "    let output = input.reversed();",
                "    assert_eq!(output, Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndHalfAscii;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(output, Look::WordStartHalfAscii);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndHalfAscii;",
                "    let output = input.reversed();",
                "    assert_eq!(output, Look::WordStartHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 4,
      "prompt_conds": [
        "precondition: self matches Look::WordStartHalfAscii at line 1696 is true\n",
        "precondition: self matches Look::WordStartHalfAscii at line 1696 is true\n",
        "expected return value/type: Look::WordEndHalfAscii\n"
      ],
      "input_infer": "self matches Look variants from Look::Start to Look::WordEndHalfUnicode inclusive\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::Start;",
                "    let _result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::StartHalfAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndHalfAscii);"
              ],
              "code": [
                "{",
                "    let look = Look::Start;",
                "    let _result = look.reversed();",
                "    let look = Look::StartHalfAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndHalfAscii);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::End;",
                "    let _result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);"
              ],
              "code": [
                "{",
                "    let look = Look::End;",
                "    let _result = look.reversed();",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::StartLF;",
                "    let _result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);"
              ],
              "code": [
                "{",
                "    let look = Look::StartLF;",
                "    let _result = look.reversed();",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::EndLF;",
                "    let _result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::EndLF;",
                "    let _result = look.reversed();",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::StartCRLF;",
                "    let _result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::StartCRLF;",
                "    let _result = look.reversed();",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::EndCRLF;",
                "    let _result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    let look_half_ascii = Look::WordStartHalfAscii;",
                "    let result_half_ascii = look_half_ascii.reversed();",
                "    assert_eq!(result_half_ascii, Look::WordEndHalfAscii);"
              ],
              "code": [
                "{",
                "    let look = Look::EndCRLF;",
                "    let _result = look.reversed();",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    let look_half_ascii = Look::WordStartHalfAscii;",
                "    let result_half_ascii = look_half_ascii.reversed();",
                "    assert_eq!(result_half_ascii, Look::WordEndHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordAscii;",
                "    let _result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordAscii;",
                "    let _result = look.reversed();",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordAsciiNegate;",
                "    let _result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);"
              ],
              "code": [
                "{",
                "    let look = Look::WordAsciiNegate;",
                "    let _result = look.reversed();",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordUnicode;",
                "    let _result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordUnicode;",
                "    let _result = look.reversed();",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordUnicodeNegate;",
                "    let _result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    look.reversed() == Look::WordEndHalfAscii;"
              ],
              "code": [
                "{",
                "    let look = Look::WordUnicodeNegate;",
                "    let _result = look.reversed();",
                "    look.reversed() == Look::WordEndHalfAscii;",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartAscii;",
                "    let _result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look.reversed(), Look::WordEndHalfAscii);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartAscii;",
                "    let _result = look.reversed();",
                "    assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndAscii;",
                "    let _result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndAscii;",
                "    let _result = look.reversed();",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartUnicode;",
                "    let _result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::WordStartHalfAscii;",
                "    let expected = Look::WordEndHalfAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartUnicode;",
                "    let _result = look.reversed();",
                "    let look = Look::WordStartHalfAscii;",
                "    let expected = Look::WordEndHalfAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndUnicode;",
                "    let _result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndUnicode;",
                "    let _result = look.reversed();",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartHalfAscii;",
                "    let _result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look.reversed(), Look::WordEndHalfAscii);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartHalfAscii;",
                "    let _result = look.reversed();",
                "    assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndHalfAscii;",
                "    let _result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndHalfAscii;",
                "    let _result = look.reversed();",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartHalfUnicode;",
                "    let _result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look.reversed(), Look::WordEndHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartHalfUnicode;",
                "    let _result = look.reversed();",
                "    assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndHalfUnicode;",
                "    let _result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start;",
                "    let expected = Look::End;",
                "    assert_eq!(look.reversed(), expected);",
                "    ",
                "    let look = Look::End;",
                "    let expected = Look::Start;",
                "    assert_eq!(look.reversed(), expected);",
                "    ",
                "    let look = Look::StartLF;",
                "    let expected = Look::EndLF;",
                "    assert_eq!(look.reversed(), expected);",
                "    ",
                "    let look = Look::EndLF;",
                "    let expected = Look::StartLF;",
                "    assert_eq!(look.reversed(), expected);",
                "    ",
                "    let look = Look::StartCRLF;",
                "    let expected = Look::EndCRLF;",
                "    assert_eq!(look.reversed(), expected);",
                "    ",
                "    let look = Look::EndCRLF;",
                "    let expected = Look::StartCRLF;",
                "    assert_eq!(look.reversed(), expected);",
                "    ",
                "    let look = Look::WordAscii;",
                "    let expected = Look::WordAscii;",
                "    assert_eq!(look.reversed(), expected);",
                "    ",
                "    let look = Look::WordAsciiNegate;",
                "    let expected = Look::WordAsciiNegate;",
                "    assert_eq!(look.reversed(), expected);",
                "    ",
                "    let look = Look::WordUnicode;",
                "    let expected = Look::WordUnicode;",
                "    assert_eq!(look.reversed(), expected);",
                "    ",
                "    let look = Look::WordUnicodeNegate;",
                "    let expected = Look::WordUnicodeNegate;",
                "    assert_eq!(look.reversed(), expected);",
                "    ",
                "    let look = Look::WordStartAscii;",
                "    let expected = Look::WordEndAscii;",
                "    assert_eq!(look.reversed(), expected);",
                "    ",
                "    let look = Look::WordEndAscii;",
                "    let expected = Look::WordStartAscii;",
                "    assert_eq!(look.reversed(), expected);",
                "    ",
                "    let look = Look::WordStartUnicode;",
                "    let expected = Look::WordEndUnicode;",
                "    assert_eq!(look.reversed(), expected);",
                "    ",
                "    let look = Look::WordEndUnicode;",
                "    let expected = Look::WordStartUnicode;",
                "    assert_eq!(look.reversed(), expected);",
                "    ",
                "    let look = Look::WordStartHalfAscii;",
                "    let expected = Look::WordEndHalfAscii;",
                "    assert_eq!(look.reversed(), expected);",
                "    ",
                "    let look = Look::WordEndHalfAscii;",
                "    let expected = Look::WordStartHalfAscii;",
                "    assert_eq!(look.reversed(), expected);",
                "    ",
                "    let look = Look::WordStartHalfUnicode;",
                "    let expected = Look::WordEndHalfUnicode;",
                "    assert_eq!(look.reversed(), expected);",
                "    ",
                "    let look = Look::WordEndHalfUnicode;",
                "    let expected = Look::WordStartHalfUnicode;",
                "    assert_eq!(look.reversed(), expected);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndHalfUnicode;",
                "    let _result = look.reversed();",
                "    let look = Look::Start;",
                "    let expected = Look::End;",
                "    assert_eq!(look.reversed(), expected);",
                "    ",
                "    let look = Look::End;",
                "    let expected = Look::Start;",
                "    assert_eq!(look.reversed(), expected);",
                "    ",
                "    let look = Look::StartLF;",
                "    let expected = Look::EndLF;",
                "    assert_eq!(look.reversed(), expected);",
                "    ",
                "    let look = Look::EndLF;",
                "    let expected = Look::StartLF;",
                "    assert_eq!(look.reversed(), expected);",
                "    ",
                "    let look = Look::StartCRLF;",
                "    let expected = Look::EndCRLF;",
                "    assert_eq!(look.reversed(), expected);",
                "    ",
                "    let look = Look::EndCRLF;",
                "    let expected = Look::StartCRLF;",
                "    assert_eq!(look.reversed(), expected);",
                "    ",
                "    let look = Look::WordAscii;",
                "    let expected = Look::WordAscii;",
                "    assert_eq!(look.reversed(), expected);",
                "    ",
                "    let look = Look::WordAsciiNegate;",
                "    let expected = Look::WordAsciiNegate;",
                "    assert_eq!(look.reversed(), expected);",
                "    ",
                "    let look = Look::WordUnicode;",
                "    let expected = Look::WordUnicode;",
                "    assert_eq!(look.reversed(), expected);",
                "    ",
                "    let look = Look::WordUnicodeNegate;",
                "    let expected = Look::WordUnicodeNegate;",
                "    assert_eq!(look.reversed(), expected);",
                "    ",
                "    let look = Look::WordStartAscii;",
                "    let expected = Look::WordEndAscii;",
                "    assert_eq!(look.reversed(), expected);",
                "    ",
                "    let look = Look::WordEndAscii;",
                "    let expected = Look::WordStartAscii;",
                "    assert_eq!(look.reversed(), expected);",
                "    ",
                "    let look = Look::WordStartUnicode;",
                "    let expected = Look::WordEndUnicode;",
                "    assert_eq!(look.reversed(), expected);",
                "    ",
                "    let look = Look::WordEndUnicode;",
                "    let expected = Look::WordStartUnicode;",
                "    assert_eq!(look.reversed(), expected);",
                "    ",
                "    let look = Look::WordStartHalfAscii;",
                "    let expected = Look::WordEndHalfAscii;",
                "    assert_eq!(look.reversed(), expected);",
                "    ",
                "    let look = Look::WordEndHalfAscii;",
                "    let expected = Look::WordStartHalfAscii;",
                "    assert_eq!(look.reversed(), expected);",
                "    ",
                "    let look = Look::WordStartHalfUnicode;",
                "    let expected = Look::WordEndHalfUnicode;",
                "    assert_eq!(look.reversed(), expected);",
                "    ",
                "    let look = Look::WordEndHalfUnicode;",
                "    let expected = Look::WordStartHalfUnicode;",
                "    assert_eq!(look.reversed(), expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 5,
      "prompt_conds": [
        "precondition: self matches Look::WordEndUnicode at line 1696 is true\n",
        "precondition: self matches Look::WordEndUnicode at line 1696 is true\n",
        "expected return value/type: Look::WordStartUnicode\n"
      ],
      "input_infer": "self matches Look::WordEndUnicode at line 1696\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndUnicode;",
                "    let _output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(input.reversed(), Look::WordStartUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndUnicode;",
                "    let _output = input.reversed();",
                "    assert_eq!(input.reversed(), Look::WordStartUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartUnicode;",
                "    let _output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(input.reversed(), Look::WordEndUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartUnicode;",
                "    let _output = input.reversed();",
                "    assert_eq!(input.reversed(), Look::WordEndUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordAscii;",
                "    let _output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordAscii;",
                "    let _output = input.reversed();",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordAsciiNegate;",
                "    let _output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_ne!(Look::WordEndUnicode.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);"
              ],
              "code": [
                "{",
                "    let input = Look::WordAsciiNegate;",
                "    let _output = input.reversed();",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_ne!(Look::WordEndUnicode.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 6,
      "prompt_conds": [
        "precondition: self matches Look::WordStartUnicode at line 1696 is true\n",
        "precondition: self matches Look::WordStartUnicode at line 1696 is true\n",
        "expected return value/type: Look::WordEndUnicode\n"
      ],
      "input_infer": "self must be equal to Look::WordStartUnicode to expect a return value of Look::WordEndUnicode.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartUnicode;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordEndUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartUnicode;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordEndUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndUnicode;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordEndUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndUnicode;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordEndUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 7,
      "prompt_conds": [
        "precondition: self matches Look::WordEndAscii at line 1696 is true\n",
        "precondition: self matches Look::WordEndAscii at line 1696 is true\n",
        "expected return value/type: Look::WordStartAscii\n"
      ],
      "input_infer": "self matches Look::WordEndAscii at line 1696 is true\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndAscii;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordStartAscii);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndAscii;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordStartAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartAscii;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordEndAscii);"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartAscii;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordEndAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndUnicode;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordStartAscii);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndUnicode;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordStartAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartUnicode;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordEndUnicode);",
                "    let input = Look::WordEndAscii;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordStartAscii);",
                "    let input = Look::WordStartAscii;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordEndAscii);",
                "    let input = Look::WordStartHalfAscii;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordEndHalfAscii);",
                "    let input = Look::WordEndHalfAscii;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordStartHalfAscii);",
                "    let input = Look::Start;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::End);",
                "    let input = Look::End;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::Start);"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartUnicode;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordEndUnicode);",
                "    let input = Look::WordEndAscii;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordStartAscii);",
                "    let input = Look::WordStartAscii;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordEndAscii);",
                "    let input = Look::WordStartHalfAscii;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordEndHalfAscii);",
                "    let input = Look::WordEndHalfAscii;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordStartHalfAscii);",
                "    let input = Look::Start;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::End);",
                "    let input = Look::End;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::Start);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 8,
      "prompt_conds": [
        "precondition: self matches Look::WordStartAscii at line 1696 is true\n",
        "precondition: self matches Look::WordStartAscii at line 1696 is true\n",
        "expected return value/type: Look::WordEndAscii\n"
      ],
      "input_infer": "self should be Look::Start, Look::End, Look::StartLF, Look::EndLF, Look::StartCRLF, Look::EndCRLF, Look::WordAscii, Look::WordAsciiNegate, Look::WordUnicode, Look::WordUnicodeNegate, Look::WordStartAscii, Look::WordEndAscii, Look::WordStartUnicode, Look::WordEndUnicode, Look::WordStartHalfAscii, Look::WordEndHalfAscii, Look::WordStartHalfUnicode, Look::WordEndHalfUnicode\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::Start.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);"
              ],
              "code": [
                "{",
                "    let result = Look::Start.reversed();",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::End.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let result = Look::End.reversed();",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::StartLF.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::End.reversed() == Look::Start",
                "    Look::Start.reversed() == Look::End",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let result = Look::StartLF.reversed();",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::End.reversed() == Look::Start",
                "    Look::Start.reversed() == Look::End",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::EndLF.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let result = Look::EndLF.reversed();",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::StartCRLF.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let result = Look::StartCRLF.reversed();",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::EndCRLF.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let result = Look::EndCRLF.reversed();",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordAscii.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordEndAscii);"
              ],
              "code": [
                "{",
                "    let result = Look::WordAscii.reversed();",
                "    assert_eq!(result, Look::WordEndAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordAsciiNegate.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let result = Look::WordAsciiNegate.reversed();",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordUnicode.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii"
              ],
              "code": [
                "{",
                "    let result = Look::WordUnicode.reversed();",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordUnicodeNegate.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let result = Look::WordUnicodeNegate.reversed();",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordStartAscii.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordEndAscii);"
              ],
              "code": [
                "{",
                "    let result = Look::WordStartAscii.reversed();",
                "    assert_eq!(result, Look::WordEndAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordEndAscii.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordEndAscii);"
              ],
              "code": [
                "{",
                "    let result = Look::WordEndAscii.reversed();",
                "    assert_eq!(result, Look::WordEndAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordStartUnicode.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordEndUnicode);"
              ],
              "code": [
                "{",
                "    let result = Look::WordStartUnicode.reversed();",
                "    assert_eq!(result, Look::WordEndUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordEndUnicode.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);"
              ],
              "code": [
                "{",
                "    let result = Look::WordEndUnicode.reversed();",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordStartHalfAscii.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordEndAscii);"
              ],
              "code": [
                "{",
                "    let result = Look::WordStartHalfAscii.reversed();",
                "    assert_eq!(result, Look::WordEndAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordEndHalfAscii.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii"
              ],
              "code": [
                "{",
                "    let result = Look::WordEndHalfAscii.reversed();",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordStartHalfUnicode.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordEndHalfUnicode);"
              ],
              "code": [
                "{",
                "    let result = Look::WordStartHalfUnicode.reversed();",
                "    assert_eq!(result, Look::WordEndHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordEndHalfUnicode.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);"
              ],
              "code": [
                "{",
                "    let result = Look::WordEndHalfUnicode.reversed();",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 9,
      "prompt_conds": [
        "precondition: self matches Look::WordUnicodeNegate at line 1696 is true\n",
        "precondition: self matches Look::WordUnicodeNegate at line 1696 is true\n",
        "expected return value/type: Look::WordUnicodeNegate\n"
      ],
      "input_infer": "self must be one of the following: Look::Start, Look::End, Look::StartLF, Look::EndLF, Look::StartCRLF, Look::EndCRLF, Look::WordAscii, Look::WordAsciiNegate, Look::WordUnicode, Look::WordUnicodeNegate, Look::WordStartAscii, Look::WordEndAscii, Look::WordStartUnicode, Look::WordEndUnicode, Look::WordStartHalfAscii, Look::WordEndHalfAscii, Look::WordStartHalfUnicode, Look::WordEndHalfUnicode.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::Start.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);"
              ],
              "code": [
                "{",
                "    let result = Look::Start.reversed();",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::End.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);"
              ],
              "code": [
                "{",
                "    let result = Look::End.reversed();",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::StartLF.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate"
              ],
              "code": [
                "{",
                "    let result = Look::StartLF.reversed();",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::EndLF.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);"
              ],
              "code": [
                "{",
                "    let result = Look::EndLF.reversed();",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::StartCRLF.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);"
              ],
              "code": [
                "{",
                "    let result = Look::StartCRLF.reversed();",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::EndCRLF.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::StartCRLF);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let result = Look::EndCRLF.reversed();",
                "    assert_eq!(result, Look::StartCRLF);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordAscii.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let result = Look::WordAscii.reversed();",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordAsciiNegate.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordAsciiNegate);"
              ],
              "code": [
                "{",
                "    let result = Look::WordAsciiNegate.reversed();",
                "    assert_eq!(result, Look::WordAsciiNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordUnicode.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordUnicodeNegate);"
              ],
              "code": [
                "{",
                "    let result = Look::WordUnicode.reversed();",
                "    assert_eq!(result, Look::WordUnicodeNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordUnicodeNegate.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordUnicodeNegate);"
              ],
              "code": [
                "{",
                "    let result = Look::WordUnicodeNegate.reversed();",
                "    assert_eq!(result, Look::WordUnicodeNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordStartAscii.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let result = Look::WordStartAscii.reversed();",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordEndAscii.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordEndAscii);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);"
              ],
              "code": [
                "{",
                "    let result = Look::WordEndAscii.reversed();",
                "    assert_eq!(result, Look::WordEndAscii);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordStartUnicode.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let result = Look::WordStartUnicode.reversed();",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordEndUnicode.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordEndUnicode);"
              ],
              "code": [
                "{",
                "    let result = Look::WordEndUnicode.reversed();",
                "    assert_eq!(result, Look::WordEndUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordStartHalfAscii.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordStartHalfAscii);",
                "    assert_eq!(result, Look::WordEndHalfAscii);",
                "    assert_eq!(result, Look::WordUnicodeNegate);",
                "    assert_eq!(result, Look::WordAsciiNegate);",
                "    assert_eq!(result, Look::WordAscii);",
                "    assert_eq!(result, Look::StartLF);",
                "    assert_eq!(result, Look::EndLF);",
                "    assert_eq!(result, Look::Start);",
                "    assert_eq!(result, Look::End);",
                "    assert_eq!(result, Look::StartCRLF);",
                "    assert_eq!(result, Look::EndCRLF);",
                "    assert_eq!(result, Look::WordStartAscii);",
                "    assert_eq!(result, Look::WordEndAscii);",
                "    assert_eq!(result, Look::WordStartUnicode);",
                "    assert_eq!(result, Look::WordEndUnicode);",
                "    assert_eq!(result, Look::WordStartHalfUnicode);",
                "    assert_eq!(result, Look::WordEndHalfUnicode);"
              ],
              "code": [
                "{",
                "    let result = Look::WordStartHalfAscii.reversed();",
                "    assert_eq!(result, Look::WordStartHalfAscii);",
                "    assert_eq!(result, Look::WordEndHalfAscii);",
                "    assert_eq!(result, Look::WordUnicodeNegate);",
                "    assert_eq!(result, Look::WordAsciiNegate);",
                "    assert_eq!(result, Look::WordAscii);",
                "    assert_eq!(result, Look::StartLF);",
                "    assert_eq!(result, Look::EndLF);",
                "    assert_eq!(result, Look::Start);",
                "    assert_eq!(result, Look::End);",
                "    assert_eq!(result, Look::StartCRLF);",
                "    assert_eq!(result, Look::EndCRLF);",
                "    assert_eq!(result, Look::WordStartAscii);",
                "    assert_eq!(result, Look::WordEndAscii);",
                "    assert_eq!(result, Look::WordStartUnicode);",
                "    assert_eq!(result, Look::WordEndUnicode);",
                "    assert_eq!(result, Look::WordStartHalfUnicode);",
                "    assert_eq!(result, Look::WordEndHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordEndHalfAscii.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordEndHalfAscii);"
              ],
              "code": [
                "{",
                "    let result = Look::WordEndHalfAscii.reversed();",
                "    assert_eq!(result, Look::WordEndHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordStartHalfUnicode.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);"
              ],
              "code": [
                "{",
                "    let result = Look::WordStartHalfUnicode.reversed();",
                "    assert_eq!(result, Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordEndHalfUnicode.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordEndHalfUnicode);",
                "    assert_eq!(result, Look::WordEndHalfUnicode.reversed());",
                "    assert_eq!(result, Look::WordUnicodeNegate.reversed());",
                "    assert_eq!(result, Look::WordUnicodeNegate);",
                "    assert_eq!(result, Look::WordUnicode);",
                "    assert!(matches!(result, Look::WordEndHalfUnicode));",
                "    assert!(matches!(result, Look::WordUnicodeNegate));",
                "    assert!(result == Look::WordEndHalfUnicode);",
                "    assert!(result as u32 == 1 << 9);"
              ],
              "code": [
                "{",
                "    let result = Look::WordEndHalfUnicode.reversed();",
                "    assert_eq!(result, Look::WordEndHalfUnicode);",
                "    assert_eq!(result, Look::WordEndHalfUnicode.reversed());",
                "    assert_eq!(result, Look::WordUnicodeNegate.reversed());",
                "    assert_eq!(result, Look::WordUnicodeNegate);",
                "    assert_eq!(result, Look::WordUnicode);",
                "    assert!(matches!(result, Look::WordEndHalfUnicode));",
                "    assert!(matches!(result, Look::WordUnicodeNegate));",
                "    assert!(result == Look::WordEndHalfUnicode);",
                "    assert!(result as u32 == 1 << 9);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 10,
      "prompt_conds": [
        "precondition: self matches Look::WordUnicode at line 1696 is true\n",
        "precondition: self matches Look::WordUnicode at line 1696 is true\n",
        "expected return value/type: Look::WordUnicode\n"
      ],
      "input_infer": "self must be Look::WordUnicode, self must not be Look::Start, self must not be Look::End, self must not be Look::StartLF, self must not be Look::EndLF, self must not be Look::StartCRLF, self must not be Look::EndCRLF, self must not be Look::WordAscii, self must not be Look::WordAsciiNegate, self must not be Look::WordUnicodeNegate, self must not be Look::WordStartAscii, self must not be Look::WordEndAscii, self must not be Look::WordStartUnicode, self must not be Look::WordEndUnicode, self must not be Look::WordStartHalfAscii, self must not be Look::WordEndHalfAscii, self must not be Look::WordStartHalfUnicode, self must not be Look::WordEndHalfUnicode\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordUnicodeNegate;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordUnicodeNegate);"
              ],
              "code": [
                "{",
                "    let look = Look::WordUnicodeNegate;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordUnicodeNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 11,
      "prompt_conds": [
        "precondition: self matches Look::WordAsciiNegate at line 1696 is true\n",
        "precondition: self matches Look::WordAsciiNegate at line 1696 is true\n",
        "expected return value/type: Look::WordAsciiNegate\n"
      ],
      "input_infer": "self must be Look::WordAsciiNegate.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordAsciiNegate;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordAsciiNegate);"
              ],
              "code": [
                "{",
                "    let look = Look::WordAsciiNegate;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordAsciiNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordAsciiNegate);",
                "    assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look_negate = Look::WordAsciiNegate;",
                "    let result_negate = look_negate.reversed();",
                "    assert_eq!(result_negate, Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAsciiNegate);"
              ],
              "code": [
                "{",
                "    let look = Look::WordAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordAsciiNegate);",
                "    assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look_negate = Look::WordAsciiNegate;",
                "    let result_negate = look_negate.reversed();",
                "    assert_eq!(result_negate, Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAsciiNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);"
              ],
              "code": [
                "{",
                "    let look = Look::WordUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordUnicodeNegate;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordUnicodeNegate);"
              ],
              "code": [
                "{",
                "    let look = Look::WordUnicodeNegate;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordUnicodeNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordEndAscii);",
                "    assert_eq!(result, Look::WordAsciiNegate);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndAscii);",
                "    assert_eq!(result, Look::WordAsciiNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordStartAscii);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndUnicode;",
                "    let result = look.reversed();",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartHalfAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::WordAsciiNegate;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordAsciiNegate);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartHalfAscii;",
                "    let result = look.reversed();",
                "    let look = Look::WordAsciiNegate;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordAsciiNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndHalfAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordEndHalfAscii);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndHalfAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartHalfUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordEndHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndHalfUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordStartHalfUnicode);",
                "    let look = Look::WordAsciiNegate;",
                "    result = look.reversed();",
                "    assert_eq!(result, Look::WordAsciiNegate);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartHalfUnicode);",
                "    let look = Look::WordAsciiNegate;",
                "    result = look.reversed();",
                "    assert_eq!(result, Look::WordAsciiNegate);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 12,
      "prompt_conds": [
        "precondition: self matches Look::WordAscii at line 1696 is true\n",
        "precondition: self matches Look::WordAscii at line 1696 is true\n",
        "expected return value/type: Look::WordAscii\n"
      ],
      "input_infer": "self matches Look::WordAscii, Look::WordAsciiNegate, Look::WordUnicode, Look::WordUnicodeNegate, Look::Start, Look::End, Look::StartLF, Look::EndLF, Look::StartCRLF, Look::EndCRLF, Look::WordStartAscii, Look::WordEndAscii, Look::WordStartUnicode, Look::WordEndUnicode, Look::WordStartHalfAscii, Look::WordEndHalfAscii, Look::WordStartHalfUnicode, Look::WordEndHalfUnicode, ensuring all cases are covered including edge scenarios of each look-ahead type.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordAscii);"
              ],
              "code": [
                "{",
                "    let look = Look::WordAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordAsciiNegate;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordAsciiNegate);"
              ],
              "code": [
                "{",
                "    let look = Look::WordAsciiNegate;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordAsciiNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordUnicodeNegate;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordUnicodeNegate);"
              ],
              "code": [
                "{",
                "    let look = Look::WordUnicodeNegate;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordUnicodeNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::Start;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::Start;",
                "    let result = look.reversed();",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::End;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::End;",
                "    let result = look.reversed();",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::StartLF;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::EndLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::StartLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::EndLF;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::StartLF);",
                "    let look = Look::Start;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::End);",
                "    let look = Look::End;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::Start);",
                "    let look = Look::WordAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordAscii);",
                "    let look = Look::WordAsciiNegate;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndAscii);",
                "    let look = Look::WordEndAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::EndLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::StartLF);",
                "    let look = Look::Start;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::End);",
                "    let look = Look::End;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::Start);",
                "    let look = Look::WordAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordAscii);",
                "    let look = Look::WordAsciiNegate;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndAscii);",
                "    let look = Look::WordEndAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::StartCRLF;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::StartCRLF;",
                "    let result = look.reversed();",
                "    assert_eq!(look.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::EndCRLF;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::StartCRLF);",
                "    let look = Look::End;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::Start);",
                "    let look = Look::WordAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordAscii);",
                "    let look = Look::StartLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndLF);",
                "    let look = Look::WordEndAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndUnicode);",
                "    let look = Look::Start;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::End);",
                "    let look = Look::WordUnicodeNegate;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordUnicodeNegate);",
                "    let look = Look::StartCRLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndCRLF);",
                "    let look = Look::WordStartHalfAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::EndCRLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::StartCRLF);",
                "    let look = Look::End;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::Start);",
                "    let look = Look::WordAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordAscii);",
                "    let look = Look::StartLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndLF);",
                "    let look = Look::WordEndAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndUnicode);",
                "    let look = Look::Start;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::End);",
                "    let look = Look::WordUnicodeNegate;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordUnicodeNegate);",
                "    let look = Look::StartCRLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndCRLF);",
                "    let look = Look::WordStartHalfAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordEndAscii);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordStartAscii);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    look.reversed() == Look::WordStartHalfUnicode",
                "    look.reversed() == Look::WordEndHalfUnicode",
                "    look.reversed() == Look::WordStartAscii",
                "    look.reversed() == Look::WordEndAscii",
                "    look.reversed() == Look::WordUnicode",
                "    look.reversed() == Look::WordUnicodeNegate",
                "    look.reversed() == Look::WordAscii",
                "    look.reversed() == Look::WordAsciiNegate",
                "    look.reversed() == Look::StartCRLF",
                "    look.reversed() == Look::EndCRLF",
                "    look.reversed() == Look::StartLF",
                "    look.reversed() == Look::EndLF",
                "    look.reversed() == Look::End",
                "    look.reversed() == Look::Start"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartUnicode;",
                "    let result = look.reversed();",
                "    look.reversed() == Look::WordStartHalfUnicode",
                "    look.reversed() == Look::WordEndHalfUnicode",
                "    look.reversed() == Look::WordStartAscii",
                "    look.reversed() == Look::WordEndAscii",
                "    look.reversed() == Look::WordUnicode",
                "    look.reversed() == Look::WordUnicodeNegate",
                "    look.reversed() == Look::WordAscii",
                "    look.reversed() == Look::WordAsciiNegate",
                "    look.reversed() == Look::StartCRLF",
                "    look.reversed() == Look::EndCRLF",
                "    look.reversed() == Look::StartLF",
                "    look.reversed() == Look::EndLF",
                "    look.reversed() == Look::End",
                "    look.reversed() == Look::Start",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordStartUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartHalfAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordEndHalfAscii);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartHalfAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndHalfAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordEndHalfAscii);",
                "    let look = Look::WordStartHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartHalfUnicode);",
                "    let look = Look::WordStartAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndAscii);",
                "    let look = Look::WordEndAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartAscii);",
                "    let look = Look::StartLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndLF);",
                "    let look = Look::EndLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::StartLF);",
                "    let look = Look::Start;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::End);",
                "    let look = Look::End;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::Start);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndHalfAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndHalfAscii);",
                "    let look = Look::WordStartHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartHalfUnicode);",
                "    let look = Look::WordStartAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndAscii);",
                "    let look = Look::WordEndAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartAscii);",
                "    let look = Look::StartLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndLF);",
                "    let look = Look::EndLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::StartLF);",
                "    let look = Look::Start;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::End);",
                "    let look = Look::End;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::Start);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartHalfUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordEndHalfUnicode);",
                "    ",
                "    let look = Look::WordEndHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartHalfUnicode);",
                "    ",
                "    let look = Look::Start;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::End);",
                "    ",
                "    let look = Look::End;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::Start);",
                "    ",
                "    let look = Look::StartLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndLF);",
                "    ",
                "    let look = Look::EndLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::StartLF);",
                "    ",
                "    let look = Look::StartCRLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndCRLF);",
                "    ",
                "    let look = Look::EndCRLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::StartCRLF);",
                "    ",
                "    let look = Look::WordStartAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndAscii);",
                "    ",
                "    let look = Look::WordEndAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartAscii);",
                "    ",
                "    let look = Look::WordStartUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndUnicode);",
                "    ",
                "    let look = Look::WordEndUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartUnicode);",
                "    ",
                "    let look = Look::WordAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordAscii);",
                "    ",
                "    let look = Look::WordAsciiNegate;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordAsciiNegate);",
                "    ",
                "    let look = Look::WordUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordUnicode);",
                "    ",
                "    let look = Look::WordUnicodeNegate;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordUnicodeNegate);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndHalfUnicode);",
                "    ",
                "    let look = Look::WordEndHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartHalfUnicode);",
                "    ",
                "    let look = Look::Start;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::End);",
                "    ",
                "    let look = Look::End;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::Start);",
                "    ",
                "    let look = Look::StartLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndLF);",
                "    ",
                "    let look = Look::EndLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::StartLF);",
                "    ",
                "    let look = Look::StartCRLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndCRLF);",
                "    ",
                "    let look = Look::EndCRLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::StartCRLF);",
                "    ",
                "    let look = Look::WordStartAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndAscii);",
                "    ",
                "    let look = Look::WordEndAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartAscii);",
                "    ",
                "    let look = Look::WordStartUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndUnicode);",
                "    ",
                "    let look = Look::WordEndUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartUnicode);",
                "    ",
                "    let look = Look::WordAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordAscii);",
                "    ",
                "    let look = Look::WordAsciiNegate;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordAsciiNegate);",
                "    ",
                "    let look = Look::WordUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordUnicode);",
                "    ",
                "    let look = Look::WordUnicodeNegate;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordUnicodeNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndHalfUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndHalfUnicode;",
                "    let result = look.reversed();",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 13,
      "prompt_conds": [
        "precondition: self matches Look::EndCRLF at line 1696 is true\n",
        "precondition: self matches Look::EndCRLF at line 1696 is true\n",
        "expected return value/type: Look::StartCRLF\n"
      ],
      "input_infer": "self matches Look::EndCRLF during test input and expects the output to be Look::StartCRLF.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::Start;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);"
              ],
              "code": [
                "{",
                "    let input = Look::Start;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::End;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);"
              ],
              "code": [
                "{",
                "    let input = Look::End;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::StartLF;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::EndCRLF.reversed() == Look::StartCRLF"
              ],
              "code": [
                "{",
                "    let input = Look::StartLF;",
                "    let output = input.reversed();",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::EndLF;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(output, Look::StartCRLF);"
              ],
              "code": [
                "{",
                "    let input = Look::EndLF;",
                "    let output = input.reversed();",
                "    assert_eq!(output, Look::StartCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::StartCRLF;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(output, Look::EndCRLF);"
              ],
              "code": [
                "{",
                "    let input = Look::StartCRLF;",
                "    let output = input.reversed();",
                "    assert_eq!(output, Look::EndCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::EndCRLF;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(output, Look::StartCRLF);"
              ],
              "code": [
                "{",
                "    let input = Look::EndCRLF;",
                "    let output = input.reversed();",
                "    assert_eq!(output, Look::StartCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordAscii;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::EndCRLF.reversed() == Look::StartCRLF;"
              ],
              "code": [
                "{",
                "    let input = Look::WordAscii;",
                "    let output = input.reversed();",
                "    Look::EndCRLF.reversed() == Look::StartCRLF;",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordAsciiNegate;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(output, Look::StartCRLF);"
              ],
              "code": [
                "{",
                "    let input = Look::WordAsciiNegate;",
                "    let output = input.reversed();",
                "    assert_eq!(output, Look::StartCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordUnicode;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordUnicode;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordUnicodeNegate;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordUnicodeNegate;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartAscii;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartAscii;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndAscii;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndAscii;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartUnicode;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartUnicode;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndUnicode;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndUnicode;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartHalfAscii;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(output, Look::StartCRLF);"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartHalfAscii;",
                "    let output = input.reversed();",
                "    assert_eq!(output, Look::StartCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndHalfAscii;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(output, Look::StartCRLF);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndHalfAscii;",
                "    let output = input.reversed();",
                "    assert_eq!(output, Look::StartCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartHalfUnicode;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartHalfUnicode;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndHalfUnicode;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(output, Look::StartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndHalfUnicode;",
                "    let output = input.reversed();",
                "    assert_eq!(output, Look::StartHalfUnicode);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 14,
      "prompt_conds": [
        "precondition: self matches Look::StartCRLF at line 1696 is true\n",
        "precondition: self matches Look::StartCRLF at line 1696 is true\n",
        "expected return value/type: Look::EndCRLF\n"
      ],
      "input_infer": "self must be one of the variants in the Look enum, specifically valid values are Look::Start, Look::End, Look::StartLF, Look::EndLF, Look::StartCRLF, Look::EndCRLF, Look::WordAscii, Look::WordAsciiNegate, Look::WordUnicode, Look::WordUnicodeNegate, Look::WordStartAscii, Look::WordEndAscii, Look::WordStartUnicode, Look::WordEndUnicode, Look::WordStartHalfAscii, Look::WordEndHalfAscii, Look::WordStartHalfUnicode, Look::WordEndHalfUnicode\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::Start;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::Start.reversed() == Look::End",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let look = Look::Start;",
                "    let result = look.reversed();",
                "    Look::Start.reversed() == Look::End",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::End;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);"
              ],
              "code": [
                "{",
                "    let look = Look::End;",
                "    let result = look.reversed();",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::StartLF;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::EndLF);",
                "    let look = Look::StartCRLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndCRLF);"
              ],
              "code": [
                "{",
                "    let look = Look::StartLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndLF);",
                "    let look = Look::StartCRLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::EndLF;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::StartCRLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndCRLF);"
              ],
              "code": [
                "{",
                "    let look = Look::EndLF;",
                "    let result = look.reversed();",
                "    let look = Look::StartCRLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::StartCRLF;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::EndCRLF);"
              ],
              "code": [
                "{",
                "    let look = Look::StartCRLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::EndCRLF;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::StartCRLF;",
                "    let expected = Look::EndCRLF;",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let look = Look::EndCRLF;",
                "    let result = look.reversed();",
                "    let look = Look::StartCRLF;",
                "    let expected = Look::EndCRLF;",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);"
              ],
              "code": [
                "{",
                "    let look = Look::WordAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordAsciiNegate;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    look.reversed() == Look::EndCRLF;",
                "    let look = Look::StartCRLF;",
                "    look.reversed() == Look::EndCRLF;",
                "    look.reversed() == Look::End;",
                "    look.reversed() == Look::Start;",
                "    look.reversed() == Look::StartLF;",
                "    look.reversed() == Look::EndLF;",
                "    look.reversed() == Look::WordAscii;",
                "    look.reversed() == Look::WordAsciiNegate;",
                "    look.reversed() == Look::WordUnicode;",
                "    look.reversed() == Look::WordUnicodeNegate;",
                "    look.reversed() == Look::WordEndAscii;",
                "    look.reversed() == Look::WordStartAscii;",
                "    look.reversed() == Look::WordEndUnicode;",
                "    look.reversed() == Look::WordStartUnicode;",
                "    look.reversed() == Look::WordEndHalfAscii;",
                "    look.reversed() == Look::WordStartHalfAscii;",
                "    look.reversed() == Look::WordEndHalfUnicode;",
                "    look.reversed() == Look::WordStartHalfUnicode;"
              ],
              "code": [
                "{",
                "    let look = Look::WordAsciiNegate;",
                "    let result = look.reversed();",
                "    look.reversed() == Look::EndCRLF;",
                "    let look = Look::StartCRLF;",
                "    look.reversed() == Look::EndCRLF;",
                "    look.reversed() == Look::End;",
                "    look.reversed() == Look::Start;",
                "    look.reversed() == Look::StartLF;",
                "    look.reversed() == Look::EndLF;",
                "    look.reversed() == Look::WordAscii;",
                "    look.reversed() == Look::WordAsciiNegate;",
                "    look.reversed() == Look::WordUnicode;",
                "    look.reversed() == Look::WordUnicodeNegate;",
                "    look.reversed() == Look::WordEndAscii;",
                "    look.reversed() == Look::WordStartAscii;",
                "    look.reversed() == Look::WordEndUnicode;",
                "    look.reversed() == Look::WordStartUnicode;",
                "    look.reversed() == Look::WordEndHalfAscii;",
                "    look.reversed() == Look::WordStartHalfAscii;",
                "    look.reversed() == Look::WordEndHalfUnicode;",
                "    look.reversed() == Look::WordStartHalfUnicode;",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::StartCRLF;",
                "    assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndLF;",
                "    assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::Start;",
                "    assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End;",
                "    assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::WordStartAscii;",
                "    assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii;",
                "    assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode;",
                "    assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode;",
                "    assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii;",
                "    assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii;",
                "    assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode;",
                "    assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode;",
                "    assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::StartCRLF;",
                "    assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndLF;",
                "    assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::Start;",
                "    assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End;",
                "    assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::WordStartAscii;",
                "    assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii;",
                "    assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode;",
                "    assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode;",
                "    assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii;",
                "    assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii;",
                "    assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode;",
                "    assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode;",
                "    assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordUnicodeNegate;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordUnicodeNegate;",
                "    let result = look.reversed();",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::Start.reversed(), Look::End);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look.reversed(), Look::WordEndUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::StartCRLF;",
                "    assert_eq!(look.reversed(), Look::EndCRLF);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::StartCRLF;",
                "    assert_eq!(look.reversed(), Look::EndCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartHalfAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartHalfAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndHalfAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordEndHalfAscii);",
                "    assert_eq!(look.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndHalfAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndHalfAscii);",
                "    assert_eq!(look.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartHalfUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordEndHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndHalfUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 15,
      "prompt_conds": [
        "precondition: self matches Look::EndLF at line 1696 is true\n",
        "precondition: self matches Look::EndLF at line 1696 is true\n",
        "expected return value/type: Look::StartLF\n"
      ],
      "input_infer": "self = Look::EndLF, Look::Start, Look::End, Look::StartLF, Look::EndLF, Look::StartCRLF, Look::EndCRLF, Look::WordAscii, Look::WordAsciiNegate, Look::WordUnicode, Look::WordUnicodeNegate, Look::WordStartAscii, Look::WordEndAscii, Look::WordStartUnicode, Look::WordEndUnicode, Look::WordStartHalfAscii, Look::WordEndHalfAscii, Look::WordStartHalfUnicode, Look::WordEndHalfUnicode\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::Start.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let result = Look::Start.reversed();",
                "    assert_eq!(result, Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::End.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::Start);"
              ],
              "code": [
                "{",
                "    let result = Look::End.reversed();",
                "    assert_eq!(result, Look::Start);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::StartLF.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::EndLF);"
              ],
              "code": [
                "{",
                "    let result = Look::StartLF.reversed();",
                "    assert_eq!(result, Look::EndLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::EndLF.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::StartLF);"
              ],
              "code": [
                "{",
                "    let result = Look::EndLF.reversed();",
                "    assert_eq!(result, Look::StartLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::StartCRLF.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::EndCRLF);"
              ],
              "code": [
                "{",
                "    let result = Look::StartCRLF.reversed();",
                "    assert_eq!(result, Look::EndCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::EndCRLF.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::StartCRLF);"
              ],
              "code": [
                "{",
                "    let result = Look::EndCRLF.reversed();",
                "    assert_eq!(result, Look::StartCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordAscii.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::EndLF.reversed() == Look::StartLF"
              ],
              "code": [
                "{",
                "    let result = Look::WordAscii.reversed();",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordAsciiNegate.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);"
              ],
              "code": [
                "{",
                "    let result = Look::WordAsciiNegate.reversed();",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordUnicode.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);"
              ],
              "code": [
                "{",
                "    let result = Look::WordUnicode.reversed();",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordUnicodeNegate.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);"
              ],
              "code": [
                "{",
                "    let result = Look::WordUnicodeNegate.reversed();",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordStartAscii.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);"
              ],
              "code": [
                "{",
                "    let result = Look::WordStartAscii.reversed();",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordEndAscii.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);"
              ],
              "code": [
                "{",
                "    let result = Look::WordEndAscii.reversed();",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordStartUnicode.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);"
              ],
              "code": [
                "{",
                "    let result = Look::WordStartUnicode.reversed();",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordEndUnicode.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);"
              ],
              "code": [
                "{",
                "    let result = Look::WordEndUnicode.reversed();",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordStartHalfAscii.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let result = Look::WordStartHalfAscii.reversed();",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordEndHalfAscii.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordStartHalfAscii);"
              ],
              "code": [
                "{",
                "    let result = Look::WordEndHalfAscii.reversed();",
                "    assert_eq!(result, Look::WordStartHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordStartHalfUnicode.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordEndHalfUnicode);"
              ],
              "code": [
                "{",
                "    let result = Look::WordStartHalfUnicode.reversed();",
                "    assert_eq!(result, Look::WordEndHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordEndHalfUnicode.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);"
              ],
              "code": [
                "{",
                "    let result = Look::WordEndHalfUnicode.reversed();",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 16,
      "prompt_conds": [
        "precondition: self matches Look::StartLF at line 1696 is true\n",
        "precondition: self matches Look::StartLF at line 1696 is true\n",
        "expected return value/type: Look::EndLF\n"
      ],
      "input_infer": "self matches Look::Start, Look::End, Look::StartLF, Look::EndLF, Look::StartCRLF, Look::EndCRLF, Look::WordAscii, Look::WordAsciiNegate, Look::WordUnicode, Look::WordUnicodeNegate, Look::WordStartAscii, Look::WordEndAscii, Look::WordStartUnicode, Look::WordEndUnicode, Look::WordStartHalfAscii, Look::WordEndHalfAscii, Look::WordStartHalfUnicode, Look::WordEndHalfUnicode\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::Start;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::StartLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndLF);"
              ],
              "code": [
                "{",
                "    let look = Look::Start;",
                "    let result = look.reversed();",
                "    let look = Look::StartLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::End;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::StartLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndLF);"
              ],
              "code": [
                "{",
                "    let look = Look::End;",
                "    let result = look.reversed();",
                "    let look = Look::StartLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::StartLF;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::EndLF);"
              ],
              "code": [
                "{",
                "    let look = Look::StartLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::EndLF;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::EndLF);"
              ],
              "code": [
                "{",
                "    let look = Look::EndLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::StartCRLF;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::EndCRLF);",
                "    let look = Look::StartLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::StartCRLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndCRLF);",
                "    let look = Look::StartLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::EndCRLF;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::EndCRLF;",
                "    let result = look.reversed();",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordAsciiNegate;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    look.reversed() should equal Look::EndLF when look is Look::StartLF;",
                "    look.reversed() should equal Look::StartLF when look is Look::EndLF;",
                "    look.reversed() should equal Look::WordAsciiNegate when look is Look::WordAsciiNegate;",
                "    look.reversed() should equal Look::WordUnicode when look is Look::WordUnicode;",
                "    look.reversed() should equal Look::WordStartAscii when look is Look::WordEndAscii;",
                "    look.reversed() should equal Look::WordStartUnicode when look is Look::WordEndUnicode;",
                "    look.reversed() should equal Look::WordStartHalfAscii when look is Look::WordEndHalfAscii;",
                "    look.reversed() should equal Look::WordStartHalfUnicode when look is Look::WordEndHalfUnicode;",
                "    look.reversed() should equal Look::StartCRLF when look is Look::EndCRLF;",
                "    look.reversed() should equal Look::EndCRLF when look is Look::StartCRLF;"
              ],
              "code": [
                "{",
                "    let look = Look::WordAsciiNegate;",
                "    let result = look.reversed();",
                "    look.reversed() should equal Look::EndLF when look is Look::StartLF;",
                "    look.reversed() should equal Look::StartLF when look is Look::EndLF;",
                "    look.reversed() should equal Look::WordAsciiNegate when look is Look::WordAsciiNegate;",
                "    look.reversed() should equal Look::WordUnicode when look is Look::WordUnicode;",
                "    look.reversed() should equal Look::WordStartAscii when look is Look::WordEndAscii;",
                "    look.reversed() should equal Look::WordStartUnicode when look is Look::WordEndUnicode;",
                "    look.reversed() should equal Look::WordStartHalfAscii when look is Look::WordEndHalfAscii;",
                "    look.reversed() should equal Look::WordStartHalfUnicode when look is Look::WordEndHalfUnicode;",
                "    look.reversed() should equal Look::StartCRLF when look is Look::EndCRLF;",
                "    look.reversed() should equal Look::EndCRLF when look is Look::StartCRLF;",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::StartLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndLF);"
              ],
              "code": [
                "{",
                "    let look = Look::WordUnicode;",
                "    let result = look.reversed();",
                "    let look = Look::StartLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordUnicodeNegate;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);"
              ],
              "code": [
                "{",
                "    let look = Look::WordUnicodeNegate;",
                "    let result = look.reversed();",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartUnicode;",
                "    let result = look.reversed();",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::StartLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndLF);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndUnicode;",
                "    let result = look.reversed();",
                "    let look = Look::StartLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartHalfAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartHalfAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndHalfAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndHalfAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartHalfUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look.reversed(), Look::EndLF);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(look.reversed(), Look::EndLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndHalfUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 17,
      "prompt_conds": [
        "precondition: self matches Look::End at line 1696 is true\n",
        "precondition: self matches Look::End at line 1696 is true\n",
        "expected return value/type: Look::Start\n"
      ],
      "input_infer": "self matches Look::End\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::Start;",
                "    let _result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let look = Look::Start;",
                "    let _result = look.reversed();",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::End;",
                "    let _result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look.reversed(), Look::Start);"
              ],
              "code": [
                "{",
                "    let look = Look::End;",
                "    let _result = look.reversed();",
                "    assert_eq!(look.reversed(), Look::Start);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::StartLF;",
                "    let _result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look.reversed(), Look::EndLF);"
              ],
              "code": [
                "{",
                "    let look = Look::StartLF;",
                "    let _result = look.reversed();",
                "    assert_eq!(look.reversed(), Look::EndLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::EndLF;",
                "    let _result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look.reversed(), Look::StartLF);",
                "    assert!(matches!(look.reversed(), Look::StartLF));",
                "    assert!(matches!(look.reversed(), Look::EndLF.reversed()));",
                "    assert!(look.reversed() == Look::StartLF);",
                "    assert_eq!(Look::End.reversed(), Look::Start);"
              ],
              "code": [
                "{",
                "    let look = Look::EndLF;",
                "    let _result = look.reversed();",
                "    assert_eq!(look.reversed(), Look::StartLF);",
                "    assert!(matches!(look.reversed(), Look::StartLF));",
                "    assert!(matches!(look.reversed(), Look::EndLF.reversed()));",
                "    assert!(look.reversed() == Look::StartLF);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::StartCRLF;",
                "    let _result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::StartCRLF;",
                "    let _result = look.reversed();",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::EndCRLF;",
                "    let _result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look.reversed(), Look::StartCRLF);"
              ],
              "code": [
                "{",
                "    let look = Look::EndCRLF;",
                "    let _result = look.reversed();",
                "    assert_eq!(look.reversed(), Look::StartCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 18,
      "prompt_conds": [
        "precondition: self matches Look::Start at line 1696 is true\n",
        "precondition: self matches Look::Start at line 1696 is true\n",
        "expected return value/type: Look::End\n"
      ],
      "input_infer": "self input range: Look::Start, Look::End, Look::StartLF, Look::EndLF, Look::StartCRLF, Look::EndCRLF, Look::WordAscii, Look::WordAsciiNegate, Look::WordUnicode, Look::WordUnicodeNegate, Look::WordStartAscii, Look::WordEndAscii, Look::WordStartUnicode, Look::WordEndUnicode, Look::WordStartHalfAscii, Look::WordEndHalfAscii, Look::WordStartHalfUnicode, Look::WordEndHalfUnicode\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::Start.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::End);"
              ],
              "code": [
                "{",
                "    let result = Look::Start.reversed();",
                "    assert_eq!(result, Look::End);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::End.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let result = Look::End.reversed();",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::StartLF.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let result = Look::StartLF.reversed();",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::EndLF.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let result = Look::EndLF.reversed();",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::StartCRLF.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let result = Look::StartCRLF.reversed();",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::EndCRLF.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::StartCRLF);",
                "    assert_eq!(result, Look::EndCRLF.reversed());",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let result = Look::EndCRLF.reversed();",
                "    assert_eq!(result, Look::StartCRLF);",
                "    assert_eq!(result, Look::EndCRLF.reversed());",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordAscii.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let result = Look::WordAscii.reversed();",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordAsciiNegate.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let result = Look::WordAsciiNegate.reversed();",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordUnicode.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let result = Look::WordUnicode.reversed();",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordUnicodeNegate.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let result = Look::WordUnicodeNegate.reversed();",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordStartAscii.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let result = Look::WordStartAscii.reversed();",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordEndAscii.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let result = Look::WordEndAscii.reversed();",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordStartUnicode.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let result = Look::WordStartUnicode.reversed();",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordEndUnicode.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let result = Look::WordEndUnicode.reversed();",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordStartHalfAscii.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let result = Look::WordStartHalfAscii.reversed();",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordEndHalfAscii.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let result = Look::WordEndHalfAscii.reversed();",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordStartHalfUnicode.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let result = Look::WordStartHalfUnicode.reversed();",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Look::WordEndHalfUnicode.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let result = Look::WordEndHalfUnicode.reversed();",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}