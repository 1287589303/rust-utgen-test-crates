{
  "name": "regex_automata::hybrid::id::{impl#0}::new_unchecked",
  "mod_info": {
    "name": "hybrid::id",
    "loc": "regex-automata/src/hybrid/mod.rs:142:1:142:8"
  },
  "visible": false,
  "loc": "regex-automata/src/hybrid/id.rs:204:5:207:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: LazyStateID(id as u32)\n"
      ],
      "input_infer": "id must be a usize in the range [0, LazyStateID::MAX] inclusive, where LazyStateID::MAX is determined by the maximum bit size.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let id = 0;",
                "    let result = LazyStateID::new_unchecked(id);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, LazyStateID(0));",
                "    assert_eq!(result.as_usize_unchecked(), 0);",
                "    assert!(result.is_tagged());",
                "    assert!(!result.is_unknown());",
                "    assert!(!result.is_dead());",
                "    assert!(!result.is_quit());",
                "    assert!(!result.is_start());",
                "    assert!(!result.is_match());"
              ],
              "code": [
                "{",
                "    let id = 0;",
                "    let result = LazyStateID::new_unchecked(id);",
                "    assert_eq!(result, LazyStateID(0));",
                "    assert_eq!(result.as_usize_unchecked(), 0);",
                "    assert!(result.is_tagged());",
                "    assert!(!result.is_unknown());",
                "    assert!(!result.is_dead());",
                "    assert!(!result.is_quit());",
                "    assert!(!result.is_start());",
                "    assert!(!result.is_match());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let id = LazyStateID::MAX;",
                "    let result = LazyStateID::new_unchecked(id);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.as_usize_untagged(), LazyStateID::MAX);",
                "    assert_eq!(result.as_usize_unchecked(), LazyStateID::MAX);",
                "    assert_eq!(result, LazyStateID::new_unchecked(LazyStateID::MAX as usize));"
              ],
              "code": [
                "{",
                "    let id = LazyStateID::MAX;",
                "    let result = LazyStateID::new_unchecked(id);",
                "    assert_eq!(result.as_usize_untagged(), LazyStateID::MAX);",
                "    assert_eq!(result.as_usize_unchecked(), LazyStateID::MAX);",
                "    assert_eq!(result, LazyStateID::new_unchecked(LazyStateID::MAX as usize));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let id = LazyStateID::MAX - 1;",
                "    let result = LazyStateID::new_unchecked(id);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, LazyStateID(LazyStateID::MAX as u32 - 1));",
                "    assert_eq!(result.as_usize_unchecked(), LazyStateID::MAX - 1);",
                "    assert!(result.is_tagged());",
                "    assert!(!result.is_unknown());",
                "    assert!(!result.is_dead());",
                "    assert!(!result.is_quit());",
                "    assert!(!result.is_start());",
                "    assert!(!result.is_match());"
              ],
              "code": [
                "{",
                "    let id = LazyStateID::MAX - 1;",
                "    let result = LazyStateID::new_unchecked(id);",
                "    assert_eq!(result, LazyStateID(LazyStateID::MAX as u32 - 1));",
                "    assert_eq!(result.as_usize_unchecked(), LazyStateID::MAX - 1);",
                "    assert!(result.is_tagged());",
                "    assert!(!result.is_unknown());",
                "    assert!(!result.is_dead());",
                "    assert!(!result.is_quit());",
                "    assert!(!result.is_start());",
                "    assert!(!result.is_match());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let id = LazyStateID::MAX / 2;",
                "    let result = LazyStateID::new_unchecked(id);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, LazyStateID(id as u32));"
              ],
              "code": [
                "{",
                "    let id = LazyStateID::MAX / 2;",
                "    let result = LazyStateID::new_unchecked(id);",
                "    assert_eq!(result, LazyStateID(id as u32));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}