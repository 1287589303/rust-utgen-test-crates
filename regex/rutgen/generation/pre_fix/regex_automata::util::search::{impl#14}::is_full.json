{
  "name": "regex_automata::util::search::{impl#14}::is_full",
  "mod_info": {
    "name": "util::search",
    "loc": "regex-automata/src/util/mod.rs:53:1:53:23"
  },
  "visible": true,
  "loc": "regex-automata/src/util/search.rs:1297:5:1299:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.len() == self.capacity()\n"
      ],
      "input_infer": "capacity: 0 to N (where N is a positive integer), len: 0 to N, len should equal capacity for true return, len should be less than capacity for false return.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [
            "#[cfg(test)]",
            "fn test_pattern_set_is_full_zero_capacity() {",
            "    let capacity = 0;",
            "    let mut pattern_set = PatternSet::new(capacity);",
            "    assert_eq!(pattern_set.is_full(), true);",
            "}",
            "",
            "#[cfg(test)]",
            "fn test_pattern_set_is_full_one_capacity() {",
            "    let capacity = 1;",
            "    let mut pattern_set = PatternSet::new(capacity);",
            "    assert_eq!(pattern_set.is_full(), false);",
            "    pattern_set.insert(PatternID::new(0));",
            "    assert_eq!(pattern_set.is_full(), true);",
            "}",
            "",
            "#[cfg(test)]",
            "fn test_pattern_set_is_full_multiple_capacity() {",
            "    let capacity = 5;",
            "    let mut pattern_set = PatternSet::new(capacity);",
            "    assert_eq!(pattern_set.is_full(), false);",
            "    for pid in 0..capacity {",
            "        pattern_set.insert(PatternID::new(pid));",
            "    }",
            "    assert_eq!(pattern_set.is_full(), true);",
            "}",
            "",
            "#[cfg(test)]",
            "fn test_pattern_set_is_full_partial_capacity() {",
            "    let capacity = 5;",
            "    let mut pattern_set = PatternSet::new(capacity);",
            "    assert_eq!(pattern_set.is_full(), false);",
            "    for pid in 0..capacity - 1 {",
            "        pattern_set.insert(PatternID::new(pid));",
            "    }",
            "    assert_eq!(pattern_set.is_full(), false);",
            "}"
          ],
          "chain_tests": []
        }
      ]
    }
  ]
}