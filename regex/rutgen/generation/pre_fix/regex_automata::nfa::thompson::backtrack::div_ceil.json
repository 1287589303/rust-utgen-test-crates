{
  "name": "regex_automata::nfa::thompson::backtrack::div_ceil",
  "mod_info": {
    "name": "nfa::thompson::backtrack",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:57:1:57:19"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/backtrack.rs:1881:1:1887:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: lhs % rhs == 0 at line 1882 is false\n",
        "expected return value/type: lhs / rhs\n"
      ],
      "input_infer": "lhs: 1 to 100, rhs: 1 to 100 (rhs != 0)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let lhs = 10;",
                "    let rhs = 3; // lhs % rhs != 0",
                "    let result = div_ceil(lhs, rhs);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 4);"
              ],
              "code": [
                "{",
                "    let lhs = 10;",
                "    let rhs = 3; // lhs % rhs != 0",
                "    let result = div_ceil(lhs, rhs);",
                "    assert_eq!(result, 4);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let lhs = 20;",
                "    let rhs = 6; // lhs % rhs != 0",
                "    let result = div_ceil(lhs, rhs);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 4);"
              ],
              "code": [
                "{",
                "    let lhs = 20;",
                "    let rhs = 6; // lhs % rhs != 0",
                "    let result = div_ceil(lhs, rhs);",
                "    assert_eq!(result, 4);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let lhs = 99;",
                "    let rhs = 8; // lhs % rhs != 0",
                "    let result = div_ceil(lhs, rhs);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 13);"
              ],
              "code": [
                "{",
                "    let lhs = 99;",
                "    let rhs = 8; // lhs % rhs != 0",
                "    let result = div_ceil(lhs, rhs);",
                "    assert_eq!(result, 13);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let lhs = 33;",
                "    let rhs = 10; // lhs % rhs != 0",
                "    let result = div_ceil(lhs, rhs);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 4);"
              ],
              "code": [
                "{",
                "    let lhs = 33;",
                "    let rhs = 10; // lhs % rhs != 0",
                "    let result = div_ceil(lhs, rhs);",
                "    assert_eq!(result, 4);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let lhs = 50;",
                "    let rhs = 7; // lhs % rhs != 0",
                "    let result = div_ceil(lhs, rhs);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 8);"
              ],
              "code": [
                "{",
                "    let lhs = 50;",
                "    let rhs = 7; // lhs % rhs != 0",
                "    let result = div_ceil(lhs, rhs);",
                "    assert_eq!(result, 8);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: lhs % rhs == 0 at line 1882 is true\n",
        "expected return value/type: (lhs / rhs) + 1\n"
      ],
      "input_infer": "lhs: non-negative integers where lhs > 0 and rhs: positive integers (1 to lhs inclusive) such that lhs % rhs == 0\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let lhs = 10;",
                "    let rhs = 1;",
                "    div_ceil(lhs, rhs);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(div_ceil(10, 1), 10);"
              ],
              "code": [
                "{",
                "    let lhs = 10;",
                "    let rhs = 1;",
                "    div_ceil(lhs, rhs);",
                "    assert_eq!(div_ceil(10, 1), 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let lhs = 20;",
                "    let rhs = 2;",
                "    div_ceil(lhs, rhs);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(div_ceil(20, 2), 10);"
              ],
              "code": [
                "{",
                "    let lhs = 20;",
                "    let rhs = 2;",
                "    div_ceil(lhs, rhs);",
                "    assert_eq!(div_ceil(20, 2), 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let lhs = 30;",
                "    let rhs = 3;",
                "    div_ceil(lhs, rhs);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(div_ceil(30, 3), 10);"
              ],
              "code": [
                "{",
                "    let lhs = 30;",
                "    let rhs = 3;",
                "    div_ceil(lhs, rhs);",
                "    assert_eq!(div_ceil(30, 3), 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let lhs = 40;",
                "    let rhs = 4;",
                "    div_ceil(lhs, rhs);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(div_ceil(40, 4), 10);"
              ],
              "code": [
                "{",
                "    let lhs = 40;",
                "    let rhs = 4;",
                "    div_ceil(lhs, rhs);",
                "    assert_eq!(div_ceil(40, 4), 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let lhs = 50;",
                "    let rhs = 5;",
                "    div_ceil(lhs, rhs);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(div_ceil(50, 5), 10);",
                "    assert_eq!(div_ceil(100, 20), 5);",
                "    assert_eq!(div_ceil(0, 1), 0);",
                "    assert_eq!(div_ceil(30, 10), 3);",
                "    assert_eq!(div_ceil(45, 15), 3);"
              ],
              "code": [
                "{",
                "    let lhs = 50;",
                "    let rhs = 5;",
                "    div_ceil(lhs, rhs);",
                "    assert_eq!(div_ceil(50, 5), 10);",
                "    assert_eq!(div_ceil(100, 20), 5);",
                "    assert_eq!(div_ceil(0, 1), 0);",
                "    assert_eq!(div_ceil(30, 10), 3);",
                "    assert_eq!(div_ceil(45, 15), 3);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let lhs = 60;",
                "    let rhs = 6;",
                "    div_ceil(lhs, rhs);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(div_ceil(60, 6), 10);"
              ],
              "code": [
                "{",
                "    let lhs = 60;",
                "    let rhs = 6;",
                "    div_ceil(lhs, rhs);",
                "    assert_eq!(div_ceil(60, 6), 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let lhs = 70;",
                "    let rhs = 7;",
                "    div_ceil(lhs, rhs);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(div_ceil(70, 7), 10);"
              ],
              "code": [
                "{",
                "    let lhs = 70;",
                "    let rhs = 7;",
                "    div_ceil(lhs, rhs);",
                "    assert_eq!(div_ceil(70, 7), 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let lhs = 80;",
                "    let rhs = 8;",
                "    div_ceil(lhs, rhs);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(div_ceil(80, 8), 10);"
              ],
              "code": [
                "{",
                "    let lhs = 80;",
                "    let rhs = 8;",
                "    div_ceil(lhs, rhs);",
                "    assert_eq!(div_ceil(80, 8), 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let lhs = 90;",
                "    let rhs = 9;",
                "    div_ceil(lhs, rhs);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(div_ceil(90, 9), 10);"
              ],
              "code": [
                "{",
                "    let lhs = 90;",
                "    let rhs = 9;",
                "    div_ceil(lhs, rhs);",
                "    assert_eq!(div_ceil(90, 9), 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let lhs = 100;",
                "    let rhs = 10;",
                "    div_ceil(lhs, rhs);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(div_ceil(100, 10), 10);"
              ],
              "code": [
                "{",
                "    let lhs = 100;",
                "    let rhs = 10;",
                "    div_ceil(lhs, rhs);",
                "    assert_eq!(div_ceil(100, 10), 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}