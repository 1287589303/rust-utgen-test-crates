{
  "name": "regex_automata::util::sparse_set::{impl#1}::clear",
  "mod_info": {
    "name": "util::sparse_set",
    "loc": "regex-automata/src/util/mod.rs:55:1:55:27"
  },
  "visible": true,
  "loc": "regex-automata/src/util/sparse_set.rs:203:5:205:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "1. SparseSet instance with zero elements and valid memory allocation (len = 0, capacity > 0).\n2. SparseSet instance with non-zero elements and valid memory allocation (len > 0, capacity >= len).\n3. SparseSet instance with maximum elements before capacity limit or at the edge case of capacity (len = capacity).\n4. SparseSet instance with an already cleared state (len = 0, capacity = any valid size).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(sparse_set.len(), 0);",
                "    assert!(sparse_set.is_empty());",
                "    assert_eq!(sparse_set.capacity(), 10);",
                "    assert_eq!(sparse_set.dense.len(), 0);",
                "    assert_eq!(sparse_set.sparse.len(), 10);"
              ],
              "code": [
                "{",
                "    let mut sparse_set = SparseSet::new(10);",
                "    sparse_set.clear();",
                "    assert_eq!(sparse_set.len(), 0);",
                "    assert!(sparse_set.is_empty());",
                "    assert_eq!(sparse_set.capacity(), 10);",
                "    assert_eq!(sparse_set.dense.len(), 0);",
                "    assert_eq!(sparse_set.sparse.len(), 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut sparse_set = SparseSet::new(5);",
                "    sparse_set.insert(StateID(1));",
                "    sparse_set.insert(StateID(2));",
                "    sparse_set.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(sparse_set.len(), 0);",
                "    assert!(sparse_set.is_empty());",
                "    assert!(!sparse_set.contains(StateID(1)));",
                "    assert!(!sparse_set.contains(StateID(2)));"
              ],
              "code": [
                "{",
                "    let mut sparse_set = SparseSet::new(5);",
                "    sparse_set.insert(StateID(1));",
                "    sparse_set.insert(StateID(2));",
                "    sparse_set.clear();",
                "    assert_eq!(sparse_set.len(), 0);",
                "    assert!(sparse_set.is_empty());",
                "    assert!(!sparse_set.contains(StateID(1)));",
                "    assert!(!sparse_set.contains(StateID(2)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut sparse_set = SparseSet::new(5);",
                "    sparse_set.insert(StateID(0));",
                "    sparse_set.insert(StateID(1));",
                "    sparse_set.insert(StateID(2));",
                "    sparse_set.insert(StateID(3));",
                "    sparse_set.insert(StateID(4));",
                "    sparse_set.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(sparse_set.len(), 0);",
                "    assert!(sparse_set.is_empty());",
                "    for id in 0..5 { assert!(!sparse_set.contains(StateID(id))); }"
              ],
              "code": [
                "{",
                "    let mut sparse_set = SparseSet::new(5);",
                "    sparse_set.insert(StateID(0));",
                "    sparse_set.insert(StateID(1));",
                "    sparse_set.insert(StateID(2));",
                "    sparse_set.insert(StateID(3));",
                "    sparse_set.insert(StateID(4));",
                "    sparse_set.clear();",
                "    assert_eq!(sparse_set.len(), 0);",
                "    assert!(sparse_set.is_empty());",
                "    for id in 0..5 { assert!(!sparse_set.contains(StateID(id))); }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut sparse_set = SparseSet::new(5);",
                "    sparse_set.clear();",
                "    sparse_set.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(sparse_set.len(), 0);",
                "    assert!(sparse_set.is_empty());",
                "    assert_eq!(sparse_set.capacity(), 5);",
                "    assert!(!sparse_set.contains(StateID(1)));",
                "    assert!(!sparse_set.contains(StateID(2)));",
                "    assert!(!sparse_set.contains(StateID(3)));",
                "    assert!(!sparse_set.contains(StateID(4)));"
              ],
              "code": [
                "{",
                "    let mut sparse_set = SparseSet::new(5);",
                "    sparse_set.clear();",
                "    sparse_set.clear();",
                "    assert_eq!(sparse_set.len(), 0);",
                "    assert!(sparse_set.is_empty());",
                "    assert_eq!(sparse_set.capacity(), 5);",
                "    assert!(!sparse_set.contains(StateID(1)));",
                "    assert!(!sparse_set.contains(StateID(2)));",
                "    assert!(!sparse_set.contains(StateID(3)));",
                "    assert!(!sparse_set.contains(StateID(4)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}