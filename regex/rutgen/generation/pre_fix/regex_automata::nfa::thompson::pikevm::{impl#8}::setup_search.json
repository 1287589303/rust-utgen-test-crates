{
  "name": "regex_automata::nfa::thompson::pikevm::{impl#8}::setup_search",
  "mod_info": {
    "name": "nfa::thompson::pikevm",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:68:1:68:16"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/pikevm.rs:1971:5:1975:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "captures_slot_len: 0 to 2^32-1 (inclusive)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut cache = Cache::new(&PikeVM {});",
                "    cache.setup_search(0);",
                "}"
              ],
              "oracle": [
                "    cache.stack.len() == 0",
                "    cache.curr.memory_usage() == 0",
                "    cache.next.memory_usage() == 0",
                "    cache.curr.slot_table.memory_usage() == 0",
                "    cache.next.slot_table.memory_usage() == 0",
                "    cache.stack.is_empty() == true",
                "    cache.curr.set.is_empty() == true",
                "    cache.next.set.is_empty() == true"
              ],
              "code": [
                "{",
                "    let mut cache = Cache::new(&PikeVM {});",
                "    cache.setup_search(0);",
                "    cache.stack.len() == 0",
                "    cache.curr.memory_usage() == 0",
                "    cache.next.memory_usage() == 0",
                "    cache.curr.slot_table.memory_usage() == 0",
                "    cache.next.slot_table.memory_usage() == 0",
                "    cache.stack.is_empty() == true",
                "    cache.curr.set.is_empty() == true",
                "    cache.next.set.is_empty() == true",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut cache = Cache::new(&PikeVM {});",
                "    cache.setup_search(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(cache.stack.len(), 0);",
                "    assert!(cache.curr.set.is_empty());",
                "    assert!(cache.next.set.is_empty());",
                "    cache.setup_search(3);",
                "    assert_eq!(cache.stack.len(), 0);",
                "    assert!(cache.curr.slot_table.state_slots.is_empty());",
                "    assert!(cache.next.slot_table.state_slots.is_empty());",
                "    assert_ne!(cache.curr.slot_table.slots_len(), 0);",
                "    assert_ne!(cache.next.slot_table.slots_len(), 0);"
              ],
              "code": [
                "{",
                "    let mut cache = Cache::new(&PikeVM {});",
                "    cache.setup_search(1);",
                "    assert_eq!(cache.stack.len(), 0);",
                "    assert!(cache.curr.set.is_empty());",
                "    assert!(cache.next.set.is_empty());",
                "    cache.setup_search(3);",
                "    assert_eq!(cache.stack.len(), 0);",
                "    assert!(cache.curr.slot_table.state_slots.is_empty());",
                "    assert!(cache.next.slot_table.state_slots.is_empty());",
                "    assert_ne!(cache.curr.slot_table.slots_len(), 0);",
                "    assert_ne!(cache.next.slot_table.slots_len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut cache = Cache::new(&PikeVM {});",
                "    cache.setup_search(2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(cache.stack.len(), 0);",
                "    assert!(cache.curr.set.is_empty());",
                "    assert!(cache.next.set.is_empty());",
                "    assert_eq!(cache.curr.slot_table.memory_usage(), 0);",
                "    assert_eq!(cache.next.slot_table.memory_usage(), 0);",
                "    cache.setup_search(0);",
                "    assert_eq!(cache.stack.len(), 0);",
                "    assert!(cache.curr.set.is_empty());",
                "    assert!(cache.next.set.is_empty());",
                "    assert_eq!(cache.curr.slot_table.memory_usage(), 0);",
                "    assert_eq!(cache.next.slot_table.memory_usage(), 0);",
                "    cache.setup_search(5);",
                "    assert_eq!(cache.stack.len(), 0);",
                "    assert!(cache.curr.set.is_empty());",
                "    assert!(cache.next.set.is_empty());",
                "    assert_eq!(cache.curr.slot_table.memory_usage(), 0);",
                "    assert_eq!(cache.next.slot_table.memory_usage(), 0);"
              ],
              "code": [
                "{",
                "    let mut cache = Cache::new(&PikeVM {});",
                "    cache.setup_search(2);",
                "    assert_eq!(cache.stack.len(), 0);",
                "    assert!(cache.curr.set.is_empty());",
                "    assert!(cache.next.set.is_empty());",
                "    assert_eq!(cache.curr.slot_table.memory_usage(), 0);",
                "    assert_eq!(cache.next.slot_table.memory_usage(), 0);",
                "    cache.setup_search(0);",
                "    assert_eq!(cache.stack.len(), 0);",
                "    assert!(cache.curr.set.is_empty());",
                "    assert!(cache.next.set.is_empty());",
                "    assert_eq!(cache.curr.slot_table.memory_usage(), 0);",
                "    assert_eq!(cache.next.slot_table.memory_usage(), 0);",
                "    cache.setup_search(5);",
                "    assert_eq!(cache.stack.len(), 0);",
                "    assert!(cache.curr.set.is_empty());",
                "    assert!(cache.next.set.is_empty());",
                "    assert_eq!(cache.curr.slot_table.memory_usage(), 0);",
                "    assert_eq!(cache.next.slot_table.memory_usage(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut cache = Cache::new(&PikeVM {});",
                "    cache.setup_search(u32::MAX as usize);",
                "}"
              ],
              "oracle": [
                "    cache.stack.len() == 0",
                "    cache.curr.memory_usage() == 0",
                "    cache.next.memory_usage() == 0",
                "    cache.curr.slot_table.memory_usage() == 0",
                "    cache.next.slot_table.memory_usage() == 0",
                "    cache.curr.set.is_empty() == true",
                "    cache.next.set.is_empty() == true",
                "    cache.curr.setup_search(u32::MAX as usize)",
                "    cache.next.setup_search(u32::MAX as usize)"
              ],
              "code": [
                "{",
                "    let mut cache = Cache::new(&PikeVM {});",
                "    cache.setup_search(u32::MAX as usize);",
                "    cache.stack.len() == 0",
                "    cache.curr.memory_usage() == 0",
                "    cache.next.memory_usage() == 0",
                "    cache.curr.slot_table.memory_usage() == 0",
                "    cache.next.slot_table.memory_usage() == 0",
                "    cache.curr.set.is_empty() == true",
                "    cache.next.set.is_empty() == true",
                "    cache.curr.setup_search(u32::MAX as usize)",
                "    cache.next.setup_search(u32::MAX as usize)",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}