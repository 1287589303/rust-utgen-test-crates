{
  "name": "regex::regexset::bytes::{impl#2}::matched",
  "mod_info": {
    "name": "regexset::bytes",
    "loc": "src/regexset/mod.rs:1:1:1:22"
  },
  "visible": true,
  "loc": "src/regexset/bytes.rs:528:5:530:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "index: [0, len) where len is the number of regexes in the original set, including boundary case just below len and negative or invalid indices (-1, len) to test for panics\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let set = RegexSet::new([",
                "        r\"[a-z]+@[a-z]+\\.(com|org|net)\",",
                "        r\"[a-z]+\\.(com|org|net)\",",
                "    ]).unwrap();",
                "    let matches = set.matches(b\"example.com\");",
                "    let _ = matches.matched(0);",
                "}"
              ],
              "oracle": [
                "    let set = RegexSet::new([r\"[a-z]+@[a-z]+\\.(com|org|net)\", r\"[a-z]+\\.(com|org|net)\"]).unwrap();",
                "    let matches = set.matches(b\"example.com\");",
                "    assert!(!matches.matched(0));",
                "    assert!(matches.matched(1));",
                "    assert!(matches.len() == 2);",
                "    let result = std::panic::catch_unwind(|| { matches.matched(2); });",
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "    let set = RegexSet::new([",
                "        r\"[a-z]+@[a-z]+\\.(com|org|net)\",",
                "        r\"[a-z]+\\.(com|org|net)\",",
                "    ]).unwrap();",
                "    let matches = set.matches(b\"example.com\");",
                "    let _ = matches.matched(0);",
                "    let set = RegexSet::new([r\"[a-z]+@[a-z]+\\.(com|org|net)\", r\"[a-z]+\\.(com|org|net)\"]).unwrap();",
                "    let matches = set.matches(b\"example.com\");",
                "    assert!(!matches.matched(0));",
                "    assert!(matches.matched(1));",
                "    assert!(matches.len() == 2);",
                "    let result = std::panic::catch_unwind(|| { matches.matched(2); });",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let set = RegexSet::new([",
                "        r\"[a-z]+@[a-z]+\\.(com|org|net)\",",
                "        r\"[a-z]+\\.(com|org|net)\",",
                "    ]).unwrap();",
                "    let matches = set.matches(b\"example.com\");",
                "    let _ = matches.matched(1);",
                "}"
              ],
              "oracle": [
                "    assert!(matches.matched(1));",
                "    assert!(!matches.matched(0));",
                "    assert!(std::panic::catch_unwind(|| matches.matched(2)).is_err());"
              ],
              "code": [
                "{",
                "    let set = RegexSet::new([",
                "        r\"[a-z]+@[a-z]+\\.(com|org|net)\",",
                "        r\"[a-z]+\\.(com|org|net)\",",
                "    ]).unwrap();",
                "    let matches = set.matches(b\"example.com\");",
                "    let _ = matches.matched(1);",
                "    assert!(matches.matched(1));",
                "    assert!(!matches.matched(0));",
                "    assert!(std::panic::catch_unwind(|| matches.matched(2)).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let set = RegexSet::new([",
                "        r\"[a-z]+@[a-z]+\\.(com|org|net)\",",
                "        r\"[a-z]+\\.(com|org|net)\",",
                "    ]).unwrap();",
                "    let matches = set.matches(b\"example.com\");",
                "    let _ = matches.matched(usize::MAX);",
                "}"
              ],
              "oracle": [
                "    assert!(matches.matched(0) == false);",
                "    assert!(matches.matched(1) == true);",
                "    assert!(std::panic::catch_unwind(|| matches.matched(usize::MAX)).is_err());"
              ],
              "code": [
                "{",
                "    let set = RegexSet::new([",
                "        r\"[a-z]+@[a-z]+\\.(com|org|net)\",",
                "        r\"[a-z]+\\.(com|org|net)\",",
                "    ]).unwrap();",
                "    let matches = set.matches(b\"example.com\");",
                "    let _ = matches.matched(usize::MAX);",
                "    assert!(matches.matched(0) == false);",
                "    assert!(matches.matched(1) == true);",
                "    assert!(std::panic::catch_unwind(|| matches.matched(usize::MAX)).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let set = RegexSet::new([",
                "        r\"[a-z]+@[a-z]+\\.(com|org|net)\",",
                "        r\"[a-z]+\\.(com|org|net)\",",
                "    ]).unwrap();",
                "    let matches = set.matches(b\"example.com\");",
                "    let _ = matches.matched(2);",
                "}"
              ],
              "oracle": [
                "    assert!(matches.matched(0) == false);",
                "    assert!(matches.matched(1) == true);",
                "    assert!(matches.len() == 2);",
                "    assert!(std::panic::catch_unwind(|| { matches.matched(2); }).is_err());"
              ],
              "code": [
                "{",
                "    let set = RegexSet::new([",
                "        r\"[a-z]+@[a-z]+\\.(com|org|net)\",",
                "        r\"[a-z]+\\.(com|org|net)\",",
                "    ]).unwrap();",
                "    let matches = set.matches(b\"example.com\");",
                "    let _ = matches.matched(2);",
                "    assert!(matches.matched(0) == false);",
                "    assert!(matches.matched(1) == true);",
                "    assert!(matches.len() == 2);",
                "    assert!(std::panic::catch_unwind(|| { matches.matched(2); }).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}