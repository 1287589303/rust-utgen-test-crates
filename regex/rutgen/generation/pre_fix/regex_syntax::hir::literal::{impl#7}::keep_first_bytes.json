{
  "name": "regex_syntax::hir::literal::{impl#7}::keep_first_bytes",
  "mod_info": {
    "name": "hir::literal",
    "loc": "regex-syntax/src/hir/mod.rs:42:1:42:17"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/literal.rs:2129:5:2135:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: len >= self.len() at line 2130 is true, with bound len == self.len()\n"
      ],
      "input_infer": "len = 0, len = self.len(), len = self.len() + 1\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut literal = Literal::exact(vec![1, 2, 3]);",
                "    let len = literal.len();",
                "    literal.keep_first_bytes(len);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(literal.is_exact(), true);",
                "    assert_eq!(literal.len(), 3);",
                "    assert_eq!(literal.as_bytes(), vec![1, 2, 3].as_slice());",
                "    assert_eq!(literal.is_empty(), false);"
              ],
              "code": [
                "{",
                "    let mut literal = Literal::exact(vec![1, 2, 3]);",
                "    let len = literal.len();",
                "    literal.keep_first_bytes(len);",
                "    assert_eq!(literal.is_exact(), true);",
                "    assert_eq!(literal.len(), 3);",
                "    assert_eq!(literal.as_bytes(), vec![1, 2, 3].as_slice());",
                "    assert_eq!(literal.is_empty(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut literal = Literal::exact(vec![1, 2, 3]);",
                "    let len = 0;",
                "    literal.keep_first_bytes(len);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(literal.as_bytes(), &[1, 2, 3]);",
                "    assert!(literal.is_exact());",
                "    assert_eq!(literal.len(), 3);",
                "    assert!(!literal.is_empty());"
              ],
              "code": [
                "{",
                "    let mut literal = Literal::exact(vec![1, 2, 3]);",
                "    let len = 0;",
                "    literal.keep_first_bytes(len);",
                "    assert_eq!(literal.as_bytes(), &[1, 2, 3]);",
                "    assert!(literal.is_exact());",
                "    assert_eq!(literal.len(), 3);",
                "    assert!(!literal.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut literal = Literal::exact(vec![1, 2, 3]);",
                "    let len = literal.len() + 1;",
                "    literal.keep_first_bytes(len);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(literal.len(), 3);",
                "    assert!(literal.is_exact());",
                "    assert_eq!(literal.as_bytes(), &[1, 2, 3]);"
              ],
              "code": [
                "{",
                "    let mut literal = Literal::exact(vec![1, 2, 3]);",
                "    let len = literal.len() + 1;",
                "    literal.keep_first_bytes(len);",
                "    assert_eq!(literal.len(), 3);",
                "    assert!(literal.is_exact());",
                "    assert_eq!(literal.as_bytes(), &[1, 2, 3]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: len >= self.len() at line 2130 is false\n"
      ],
      "input_infer": "len = 0, len = 1, len = 2, len = 3, ..., len = n-1 (where n is the length of bytes in Literal) for Literals with lengths from 1 to n, and n = 0 for empty Literals\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut lit = Literal::exact(vec![1, 2, 3]);",
                "    lit.keep_first_bytes(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(lit.len(), 3);",
                "    assert!(lit.is_exact());",
                "    assert_eq!(lit.as_bytes(), &[1, 2, 3]);"
              ],
              "code": [
                "{",
                "    let mut lit = Literal::exact(vec![1, 2, 3]);",
                "    lit.keep_first_bytes(0);",
                "    assert_eq!(lit.len(), 3);",
                "    assert!(lit.is_exact());",
                "    assert_eq!(lit.as_bytes(), &[1, 2, 3]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut lit = Literal::exact(vec![1, 2, 3]);",
                "    lit.keep_first_bytes(1);",
                "}"
              ],
              "oracle": [
                "    let lit = Literal::exact(vec![1, 2, 3]);",
                "    assert_eq!(lit.len(), 3);",
                "    lit.keep_first_bytes(1);",
                "    assert_eq!(lit.len(), 1);",
                "    assert_eq!(lit.as_bytes(), vec![1]);",
                "    assert!(lit.is_exact());"
              ],
              "code": [
                "{",
                "    let mut lit = Literal::exact(vec![1, 2, 3]);",
                "    lit.keep_first_bytes(1);",
                "    let lit = Literal::exact(vec![1, 2, 3]);",
                "    assert_eq!(lit.len(), 3);",
                "    lit.keep_first_bytes(1);",
                "    assert_eq!(lit.len(), 1);",
                "    assert_eq!(lit.as_bytes(), vec![1]);",
                "    assert!(lit.is_exact());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut lit = Literal::exact(vec![1, 2, 3]);",
                "    lit.keep_first_bytes(2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(lit.len(), 2);",
                "    assert_eq!(lit.as_bytes(), &[1, 2]);",
                "    assert!(lit.is_inexact());"
              ],
              "code": [
                "{",
                "    let mut lit = Literal::exact(vec![1, 2, 3]);",
                "    lit.keep_first_bytes(2);",
                "    assert_eq!(lit.len(), 2);",
                "    assert_eq!(lit.as_bytes(), &[1, 2]);",
                "    assert!(lit.is_inexact());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut lit = Literal::exact(vec![1, 2, 3]);",
                "    lit.keep_first_bytes(3);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(lit.as_bytes(), vec![1, 2, 3].as_slice());",
                "    assert!(lit.is_exact());",
                "    assert_eq!(lit.len(), 3);",
                "    assert!(!lit.is_empty());"
              ],
              "code": [
                "{",
                "    let mut lit = Literal::exact(vec![1, 2, 3]);",
                "    lit.keep_first_bytes(3);",
                "    assert_eq!(lit.as_bytes(), vec![1, 2, 3].as_slice());",
                "    assert!(lit.is_exact());",
                "    assert_eq!(lit.len(), 3);",
                "    assert!(!lit.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut lit = Literal::exact(vec![1, 2, 3, 4]);",
                "    lit.keep_first_bytes(3);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(lit.as_bytes(), &[1, 2, 3]);",
                "    assert!(lit.is_exact() == false);",
                "    assert_eq!(lit.len(), 3);",
                "    assert!(lit.is_empty() == false);"
              ],
              "code": [
                "{",
                "    let mut lit = Literal::exact(vec![1, 2, 3, 4]);",
                "    lit.keep_first_bytes(3);",
                "    assert_eq!(lit.as_bytes(), &[1, 2, 3]);",
                "    assert!(lit.is_exact() == false);",
                "    assert_eq!(lit.len(), 3);",
                "    assert!(lit.is_empty() == false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut lit = Literal::exact(vec![1, 2, 3]);",
                "    lit.keep_first_bytes(3);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(lit.len(), 3);",
                "    assert!(lit.is_exact());",
                "    assert_eq!(lit.as_bytes(), &[1, 2, 3]);",
                "    ",
                "    let mut lit_inexact = Literal::exact(vec![1, 2, 3, 4, 5]);",
                "    lit_inexact.keep_first_bytes(2);",
                "    assert_eq!(lit_inexact.len(), 2);",
                "    assert!(!lit_inexact.is_exact());",
                "    assert_eq!(lit_inexact.as_bytes(), &[1, 2]);",
                "    ",
                "    let mut lit_empty = Literal::exact(vec![]);",
                "    lit_empty.keep_first_bytes(1);",
                "    assert_eq!(lit_empty.len(), 0);",
                "    assert!(lit_empty.is_exact());"
              ],
              "code": [
                "{",
                "    let mut lit = Literal::exact(vec![1, 2, 3]);",
                "    lit.keep_first_bytes(3);",
                "    assert_eq!(lit.len(), 3);",
                "    assert!(lit.is_exact());",
                "    assert_eq!(lit.as_bytes(), &[1, 2, 3]);",
                "    ",
                "    let mut lit_inexact = Literal::exact(vec![1, 2, 3, 4, 5]);",
                "    lit_inexact.keep_first_bytes(2);",
                "    assert_eq!(lit_inexact.len(), 2);",
                "    assert!(!lit_inexact.is_exact());",
                "    assert_eq!(lit_inexact.as_bytes(), &[1, 2]);",
                "    ",
                "    let mut lit_empty = Literal::exact(vec![]);",
                "    lit_empty.keep_first_bytes(1);",
                "    assert_eq!(lit_empty.len(), 0);",
                "    assert!(lit_empty.is_exact());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut lit = Literal::exact(vec![1, 2]);",
                "    lit.keep_first_bytes(3);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(lit.as_bytes(), &[1, 2]);",
                "    assert!(lit.is_exact());",
                "    assert_eq!(lit.len(), 2);"
              ],
              "code": [
                "{",
                "    let mut lit = Literal::exact(vec![1, 2]);",
                "    lit.keep_first_bytes(3);",
                "    assert_eq!(lit.as_bytes(), &[1, 2]);",
                "    assert!(lit.is_exact());",
                "    assert_eq!(lit.len(), 2);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut lit = Literal::exact(vec![]);",
                "    lit.keep_first_bytes(1);",
                "}"
              ],
              "oracle": [
                "    lit.is_empty() == true",
                "    lit.is_exact() == true",
                "    lit.len() == 0",
                "    lit.as_bytes() == b\"\""
              ],
              "code": [
                "{",
                "    let mut lit = Literal::exact(vec![]);",
                "    lit.keep_first_bytes(1);",
                "    lit.is_empty() == true",
                "    lit.is_exact() == true",
                "    lit.len() == 0",
                "    lit.as_bytes() == b\"\"",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}