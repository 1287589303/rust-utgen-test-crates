{
  "name": "regex_automata::util::memchr::inner::memrchr2",
  "mod_info": {
    "name": "util::memchr::inner",
    "loc": "regex-automata/src/util/memchr.rs:10:1:50:2"
  },
  "visible": true,
  "loc": "regex-automata/src/util/memchr.rs:37:5:39:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "0 <= n1, n2 <= 255; haystack length: 0 to 1000; haystack contents: any byte values including n1 and n2, cases of no matches, single matches, or multiple matches.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let n1 = 42;",
                "    let n2 = 43;",
                "    let haystack: &[u8] = &[];",
                "    let _result = regex_automata::memrchr2(n1, n2, haystack);",
                "}"
              ],
              "oracle": [
                "    let n1 = 42;",
                "    let n2 = 43;",
                "    let haystack: &[u8] = &[];",
                "    assert_eq!(regex_automata::memrchr2(n1, n2, haystack), None);",
                "    ",
                "    let n1 = 42;",
                "    let n2 = 43;",
                "    let haystack: &[u8] = &[1, 2, 3];",
                "    assert_eq!(regex_automata::memrchr2(n1, n2, haystack), None);",
                "    ",
                "    let n1 = 42;",
                "    let n2 = 43;",
                "    let haystack: &[u8] = &[43];",
                "    assert_eq!(regex_automata::memrchr2(n1, n2, haystack), Some(0));",
                "    ",
                "    let n1 = 42;",
                "    let n2 = 43;",
                "    let haystack: &[u8] = &[42];",
                "    assert_eq!(regex_automata::memrchr2(n1, n2, haystack), Some(0));",
                "    ",
                "    let n1 = 42;",
                "    let n2 = 43;",
                "    let haystack: &[u8] = &[1, 42, 3];",
                "    assert_eq!(regex_automata::memrchr2(n1, n2, haystack), Some(1));",
                "    ",
                "    let n1 = 42;",
                "    let n2 = 43;",
                "    let haystack: &[u8] = &[1, 3, 43];",
                "    assert_eq!(regex_automata::memrchr2(n1, n2, haystack), Some(2));",
                "    ",
                "    let n1 = 42;",
                "    let n2 = 43;",
                "    let haystack: &[u8] = &[42, 43];",
                "    assert_eq!(regex_automata::memrchr2(n1, n2, haystack), Some(1));",
                "    ",
                "    let n1 = 42;",
                "    let n2 = 43;",
                "    let haystack: &[u8] = &[43, 42];",
                "    assert_eq!(regex_automata::memrchr2(n1, n2, haystack), Some(0));",
                "    ",
                "    let n1 = 42;",
                "    let n2 = 43;",
                "    let haystack: &[u8] = &[1, 2, 42, 3, 43];",
                "    assert_eq!(regex_automata::memrchr2(n1, n2, haystack), Some(4));",
                "    ",
                "    let n1 = 42;",
                "    let n2 = 43;",
                "    let haystack: &[u8] = &[43, 1, 2, 3, 42];",
                "    assert_eq!(regex_automata::memrchr2(n1, n2, haystack), Some(4));",
                "    ",
                "    let n1 = 255;",
                "    let n2 = 254;",
                "    let haystack: &[u8] = &[254, 255];",
                "    assert_eq!(regex_automata::memrchr2(n1, n2, haystack), Some(1));",
                "    ",
                "    let n1 = 0;",
                "    let n2 = 1;",
                "    let haystack: &[u8] = &[0, 1];",
                "    assert_eq!(regex_automata::memrchr2(n1, n2, haystack), Some(1));"
              ],
              "code": [
                "{",
                "    let n1 = 42;",
                "    let n2 = 43;",
                "    let haystack: &[u8] = &[];",
                "    let _result = regex_automata::memrchr2(n1, n2, haystack);",
                "    let n1 = 42;",
                "    let n2 = 43;",
                "    let haystack: &[u8] = &[];",
                "    assert_eq!(regex_automata::memrchr2(n1, n2, haystack), None);",
                "    ",
                "    let n1 = 42;",
                "    let n2 = 43;",
                "    let haystack: &[u8] = &[1, 2, 3];",
                "    assert_eq!(regex_automata::memrchr2(n1, n2, haystack), None);",
                "    ",
                "    let n1 = 42;",
                "    let n2 = 43;",
                "    let haystack: &[u8] = &[43];",
                "    assert_eq!(regex_automata::memrchr2(n1, n2, haystack), Some(0));",
                "    ",
                "    let n1 = 42;",
                "    let n2 = 43;",
                "    let haystack: &[u8] = &[42];",
                "    assert_eq!(regex_automata::memrchr2(n1, n2, haystack), Some(0));",
                "    ",
                "    let n1 = 42;",
                "    let n2 = 43;",
                "    let haystack: &[u8] = &[1, 42, 3];",
                "    assert_eq!(regex_automata::memrchr2(n1, n2, haystack), Some(1));",
                "    ",
                "    let n1 = 42;",
                "    let n2 = 43;",
                "    let haystack: &[u8] = &[1, 3, 43];",
                "    assert_eq!(regex_automata::memrchr2(n1, n2, haystack), Some(2));",
                "    ",
                "    let n1 = 42;",
                "    let n2 = 43;",
                "    let haystack: &[u8] = &[42, 43];",
                "    assert_eq!(regex_automata::memrchr2(n1, n2, haystack), Some(1));",
                "    ",
                "    let n1 = 42;",
                "    let n2 = 43;",
                "    let haystack: &[u8] = &[43, 42];",
                "    assert_eq!(regex_automata::memrchr2(n1, n2, haystack), Some(0));",
                "    ",
                "    let n1 = 42;",
                "    let n2 = 43;",
                "    let haystack: &[u8] = &[1, 2, 42, 3, 43];",
                "    assert_eq!(regex_automata::memrchr2(n1, n2, haystack), Some(4));",
                "    ",
                "    let n1 = 42;",
                "    let n2 = 43;",
                "    let haystack: &[u8] = &[43, 1, 2, 3, 42];",
                "    assert_eq!(regex_automata::memrchr2(n1, n2, haystack), Some(4));",
                "    ",
                "    let n1 = 255;",
                "    let n2 = 254;",
                "    let haystack: &[u8] = &[254, 255];",
                "    assert_eq!(regex_automata::memrchr2(n1, n2, haystack), Some(1));",
                "    ",
                "    let n1 = 0;",
                "    let n2 = 1;",
                "    let haystack: &[u8] = &[0, 1];",
                "    assert_eq!(regex_automata::memrchr2(n1, n2, haystack), Some(1));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let n1 = 42;",
                "    let n2 = 43;",
                "    let haystack = &[1, 2, 3, 4, 5];",
                "    let _result = regex_automata::memrchr2(n1, n2, haystack);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(regex_automata::memrchr2(42, 43, &[1, 2, 3, 4, 5]), None);",
                "    assert_eq!(regex_automata::memrchr2(1, 2, &[1, 2, 3, 4, 5]), Some(1));",
                "    assert_eq!(regex_automata::memrchr2(4, 5, &[1, 2, 3, 4, 5]), Some(3));",
                "    assert_eq!(regex_automata::memrchr2(4, 43, &[1, 2, 3, 4, 5]), Some(3));",
                "    assert_eq!(regex_automata::memrchr2(42, 2, &[42, 1, 2, 3, 4, 5]), Some(0));",
                "    assert_eq!(regex_automata::memrchr2(42, 43, &[]), None);",
                "    assert_eq!(regex_automata::memrchr2(42, 42, &[42, 42, 42]), Some(2));"
              ],
              "code": [
                "{",
                "    let n1 = 42;",
                "    let n2 = 43;",
                "    let haystack = &[1, 2, 3, 4, 5];",
                "    let _result = regex_automata::memrchr2(n1, n2, haystack);",
                "    assert_eq!(regex_automata::memrchr2(42, 43, &[1, 2, 3, 4, 5]), None);",
                "    assert_eq!(regex_automata::memrchr2(1, 2, &[1, 2, 3, 4, 5]), Some(1));",
                "    assert_eq!(regex_automata::memrchr2(4, 5, &[1, 2, 3, 4, 5]), Some(3));",
                "    assert_eq!(regex_automata::memrchr2(4, 43, &[1, 2, 3, 4, 5]), Some(3));",
                "    assert_eq!(regex_automata::memrchr2(42, 2, &[42, 1, 2, 3, 4, 5]), Some(0));",
                "    assert_eq!(regex_automata::memrchr2(42, 43, &[]), None);",
                "    assert_eq!(regex_automata::memrchr2(42, 42, &[42, 42, 42]), Some(2));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let n1 = 42;",
                "    let n2 = 43;",
                "    let haystack = &[1, 2, 42, 4, 5];",
                "    let _result = regex_automata::memrchr2(n1, n2, haystack);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Some(2));",
                "    assert_eq!(regex_automata::memrchr2(42, 43, &[1, 2, 42, 4, 5]), Some(2));",
                "    assert_eq!(regex_automata::memrchr2(43, 42, &[1, 2, 43, 4, 5]), Some(2));",
                "    assert_eq!(regex_automata::memrchr2(42, 43, &[1, 2, 3, 4, 5]), None);",
                "    assert_eq!(regex_automata::memrchr2(0, 1, &[1, 2, 3, 4, 5]), None);",
                "    assert_eq!(regex_automata::memrchr2(1, 2, &[1, 2, 3, 4, 5]), Some(1));",
                "    assert_eq!(regex_automata::memrchr2(42, 42, &[1, 2, 42, 4, 5]), Some(2));",
                "    assert_eq!(regex_automata::memrchr2(0, 0, &[0, 0, 0]), Some(2));",
                "    assert_eq!(regex_automata::memrchr2(255, 1, &[1, 2, 3]), None);",
                "    assert_eq!(regex_automata::memrchr2(42, 0, &[0, 0, 0]), None);"
              ],
              "code": [
                "{",
                "    let n1 = 42;",
                "    let n2 = 43;",
                "    let haystack = &[1, 2, 42, 4, 5];",
                "    let _result = regex_automata::memrchr2(n1, n2, haystack);",
                "    assert_eq!(_result, Some(2));",
                "    assert_eq!(regex_automata::memrchr2(42, 43, &[1, 2, 42, 4, 5]), Some(2));",
                "    assert_eq!(regex_automata::memrchr2(43, 42, &[1, 2, 43, 4, 5]), Some(2));",
                "    assert_eq!(regex_automata::memrchr2(42, 43, &[1, 2, 3, 4, 5]), None);",
                "    assert_eq!(regex_automata::memrchr2(0, 1, &[1, 2, 3, 4, 5]), None);",
                "    assert_eq!(regex_automata::memrchr2(1, 2, &[1, 2, 3, 4, 5]), Some(1));",
                "    assert_eq!(regex_automata::memrchr2(42, 42, &[1, 2, 42, 4, 5]), Some(2));",
                "    assert_eq!(regex_automata::memrchr2(0, 0, &[0, 0, 0]), Some(2));",
                "    assert_eq!(regex_automata::memrchr2(255, 1, &[1, 2, 3]), None);",
                "    assert_eq!(regex_automata::memrchr2(42, 0, &[0, 0, 0]), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let n1 = 42;",
                "    let n2 = 43;",
                "    let haystack = &[1, 2, 43, 4, 5];",
                "    let _result = regex_automata::memrchr2(n1, n2, haystack);",
                "}"
              ],
              "oracle": [
                "    _result.expect(\"Expected Some(_) for valid input\");",
                "    _result.unwrap().eq(&2).expect(\"Expected index 2 for value n2 in haystack\");",
                "    _result.is_none().expect(\"Expected None when n1 is not in haystack\");",
                "    regex_automata::memrchr2(42, 43, &[]).is_none().expect(\"Expected None for empty haystack\");",
                "    regex_automata::memrchr2(42, 43, &[1, 2, 3, 4, 5]).is_none().expect(\"Expected None when neither n1 nor n2 are in haystack\");",
                "    regex_automata::memrchr2(1, 1, &[1, 2, 3, 1]).unwrap().eq(&3).expect(\"Expected last index of 1 in haystack\");",
                "    regex_automata::memrchr2(10, 20, &[20, 10, 30]).unwrap().eq(&1).expect(\"Expected index 1 for value n1 in haystack\");"
              ],
              "code": [
                "{",
                "    let n1 = 42;",
                "    let n2 = 43;",
                "    let haystack = &[1, 2, 43, 4, 5];",
                "    let _result = regex_automata::memrchr2(n1, n2, haystack);",
                "    _result.expect(\"Expected Some(_) for valid input\");",
                "    _result.unwrap().eq(&2).expect(\"Expected index 2 for value n2 in haystack\");",
                "    _result.is_none().expect(\"Expected None when n1 is not in haystack\");",
                "    regex_automata::memrchr2(42, 43, &[]).is_none().expect(\"Expected None for empty haystack\");",
                "    regex_automata::memrchr2(42, 43, &[1, 2, 3, 4, 5]).is_none().expect(\"Expected None when neither n1 nor n2 are in haystack\");",
                "    regex_automata::memrchr2(1, 1, &[1, 2, 3, 1]).unwrap().eq(&3).expect(\"Expected last index of 1 in haystack\");",
                "    regex_automata::memrchr2(10, 20, &[20, 10, 30]).unwrap().eq(&1).expect(\"Expected index 1 for value n1 in haystack\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let n1 = 42;",
                "    let n2 = 43;",
                "    let haystack = &[1, 42, 2, 43, 4, 42];",
                "    let _result = regex_automata::memrchr2(n1, n2, haystack);",
                "}"
              ],
              "oracle": [
                "    let n1 = 42;",
                "    let n2 = 43;",
                "    let haystack = &[1, 42, 2, 43, 4, 42];",
                "    assert_eq!(regex_automata::memrchr2(n1, n2, haystack), Some(5));"
              ],
              "code": [
                "{",
                "    let n1 = 42;",
                "    let n2 = 43;",
                "    let haystack = &[1, 42, 2, 43, 4, 42];",
                "    let _result = regex_automata::memrchr2(n1, n2, haystack);",
                "    let n1 = 42;",
                "    let n2 = 43;",
                "    let haystack = &[1, 42, 2, 43, 4, 42];",
                "    assert_eq!(regex_automata::memrchr2(n1, n2, haystack), Some(5));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let n1 = 1;",
                "    let n2 = 2;",
                "    let haystack: Vec<u8> = (0..1000).map(|x| (x % 256) as u8).collect();",
                "    let _result = regex_automata::memrchr2(n1, n2, &haystack);",
                "}"
              ],
              "oracle": [
                "    _result.unwrap() == Some(512)",
                "    _result.is_some()",
                "    _result.is_none()",
                "    _result.unwrap() == Some(1)",
                "    _result.unwrap() == Some(2)",
                "    _result.unwrap() == Some(0)",
                "    _result.unwrap() == Some(999)",
                "    _result.unwrap() == Some(998)",
                "    _result.unwrap() == Some(255)",
                "    _result.unwrap() == Some(254)",
                "    _result.unwrap() == Some(253)",
                "    _result.unwrap() == Some(249)",
                "    _result.unwrap() == Some(255)",
                "    _result.unwrap() == Some(123)",
                "    _result.unwrap() == Some(120)",
                "    _result.unwrap() == Some(600)",
                "    _result.unwrap() == Some(999)"
              ],
              "code": [
                "{",
                "    let n1 = 1;",
                "    let n2 = 2;",
                "    let haystack: Vec<u8> = (0..1000).map(|x| (x % 256) as u8).collect();",
                "    let _result = regex_automata::memrchr2(n1, n2, &haystack);",
                "    _result.unwrap() == Some(512)",
                "    _result.is_some()",
                "    _result.is_none()",
                "    _result.unwrap() == Some(1)",
                "    _result.unwrap() == Some(2)",
                "    _result.unwrap() == Some(0)",
                "    _result.unwrap() == Some(999)",
                "    _result.unwrap() == Some(998)",
                "    _result.unwrap() == Some(255)",
                "    _result.unwrap() == Some(254)",
                "    _result.unwrap() == Some(253)",
                "    _result.unwrap() == Some(249)",
                "    _result.unwrap() == Some(255)",
                "    _result.unwrap() == Some(123)",
                "    _result.unwrap() == Some(120)",
                "    _result.unwrap() == Some(600)",
                "    _result.unwrap() == Some(999)",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let n1 = 100;",
                "    let n2 = 200;",
                "    let haystack = &[1, 100, 200, 3, 100, 4, 200];",
                "    let _result = regex_automata::memrchr2(n1, n2, haystack);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Some(6));",
                "    ",
                "    ",
                "    let n1 = 255;",
                "    let n2 = 0;",
                "    let haystack = &[0, 1, 2, 3, 4, 5];",
                "    let _result = regex_automata::memrchr2(n1, n2, haystack);",
                "    assert_eq!(_result, None);",
                "    ",
                "    ",
                "    let n1 = 100;",
                "    let n2 = 200;",
                "    let haystack = &[1, 2, 3];",
                "    let _result = regex_automata::memrchr2(n1, n2, haystack);",
                "    assert_eq!(_result, None);",
                "    ",
                "    ",
                "    let n1 = 65;",
                "    let n2 = 66;",
                "    let haystack = &[66, 65, 67];",
                "    let _result = regex_automata::memrchr2(n1, n2, haystack);",
                "    assert_eq!(_result, Some(1));",
                "    ",
                "    ",
                "    let n1 = 10;",
                "    let n2 = 20;",
                "    let haystack = &[11, 12, 13, 14, 15, 20];",
                "    let _result = regex_automata::memrchr2(n1, n2, haystack);",
                "    assert_eq!(_result, Some(5));"
              ],
              "code": [
                "{",
                "    let n1 = 100;",
                "    let n2 = 200;",
                "    let haystack = &[1, 100, 200, 3, 100, 4, 200];",
                "    let _result = regex_automata::memrchr2(n1, n2, haystack);",
                "    assert_eq!(_result, Some(6));",
                "    ",
                "    ",
                "    let n1 = 255;",
                "    let n2 = 0;",
                "    let haystack = &[0, 1, 2, 3, 4, 5];",
                "    let _result = regex_automata::memrchr2(n1, n2, haystack);",
                "    assert_eq!(_result, None);",
                "    ",
                "    ",
                "    let n1 = 100;",
                "    let n2 = 200;",
                "    let haystack = &[1, 2, 3];",
                "    let _result = regex_automata::memrchr2(n1, n2, haystack);",
                "    assert_eq!(_result, None);",
                "    ",
                "    ",
                "    let n1 = 65;",
                "    let n2 = 66;",
                "    let haystack = &[66, 65, 67];",
                "    let _result = regex_automata::memrchr2(n1, n2, haystack);",
                "    assert_eq!(_result, Some(1));",
                "    ",
                "    ",
                "    let n1 = 10;",
                "    let n2 = 20;",
                "    let haystack = &[11, 12, 13, 14, 15, 20];",
                "    let _result = regex_automata::memrchr2(n1, n2, haystack);",
                "    assert_eq!(_result, Some(5));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let n1 = 42;",
                "    let n2 = 42;",
                "    let haystack = &[1, 42, 3, 42, 5];",
                "    let _result = regex_automata::memrchr2(n1, n2, haystack);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(regex_automata::memrchr2(42, 42, &[1, 42, 3, 42, 5]), Some(3));",
                "    assert_eq!(regex_automata::memrchr2(42, 1, &[1, 42, 3, 42, 5]), Some(0));",
                "    assert_eq!(regex_automata::memrchr2(1, 5, &[1, 42, 3, 42, 5]), Some(4));",
                "    assert_eq!(regex_automata::memrchr2(100, 200, &[1, 42, 3, 42, 5]), None);",
                "    assert_eq!(regex_automata::memrchr2(42, 42, &[]), None);"
              ],
              "code": [
                "{",
                "    let n1 = 42;",
                "    let n2 = 42;",
                "    let haystack = &[1, 42, 3, 42, 5];",
                "    let _result = regex_automata::memrchr2(n1, n2, haystack);",
                "    assert_eq!(regex_automata::memrchr2(42, 42, &[1, 42, 3, 42, 5]), Some(3));",
                "    assert_eq!(regex_automata::memrchr2(42, 1, &[1, 42, 3, 42, 5]), Some(0));",
                "    assert_eq!(regex_automata::memrchr2(1, 5, &[1, 42, 3, 42, 5]), Some(4));",
                "    assert_eq!(regex_automata::memrchr2(100, 200, &[1, 42, 3, 42, 5]), None);",
                "    assert_eq!(regex_automata::memrchr2(42, 42, &[]), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}