{
  "name": "regex_automata::nfa::thompson::compiler::{impl#4}::is_reverse",
  "mod_info": {
    "name": "nfa::thompson::compiler",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:60:1:60:14"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/compiler.rs:1691:5:1693:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self.config.reverse can be true, false, or None\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config {",
                "        reverse: Some(true),",
                "        ..Default::default()",
                "    };",
                "    let compiler = Compiler {",
                "        parser: ParserBuilder::new(),",
                "        config,",
                "        builder: RefCell::new(Builder::default()),",
                "        utf8_state: RefCell::new(Utf8State {",
                "            compiled: Utf8BoundedMap::default(),",
                "            uncompiled: vec![],",
                "        }),",
                "        trie_state: RefCell::new(RangeTrie::default()),",
                "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
                "            version: 0,",
                "            capacity: 0,",
                "            map: vec![],",
                "        }),",
                "    };",
                "    let _ = compiler.is_reverse();",
                "}"
              ],
              "oracle": [
                "    assert!(compiler.is_reverse() == true);",
                "    let config = Config { reverse: Some(false), ..Default::default() };",
                "    let compiler = Compiler { parser: ParserBuilder::new(), config, builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap::default()) };",
                "    assert!(compiler.is_reverse() == false);",
                "    let config = Config { reverse: None, ..Default::default() };",
                "    let compiler = Compiler { parser: ParserBuilder::new(), config, builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap::default()) };",
                "    assert!(compiler.is_reverse() == false);"
              ],
              "code": [
                "{",
                "    let config = Config {",
                "        reverse: Some(true),",
                "        ..Default::default()",
                "    };",
                "    let compiler = Compiler {",
                "        parser: ParserBuilder::new(),",
                "        config,",
                "        builder: RefCell::new(Builder::default()),",
                "        utf8_state: RefCell::new(Utf8State {",
                "            compiled: Utf8BoundedMap::default(),",
                "            uncompiled: vec![],",
                "        }),",
                "        trie_state: RefCell::new(RangeTrie::default()),",
                "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
                "            version: 0,",
                "            capacity: 0,",
                "            map: vec![],",
                "        }),",
                "    };",
                "    let _ = compiler.is_reverse();",
                "    assert!(compiler.is_reverse() == true);",
                "    let config = Config { reverse: Some(false), ..Default::default() };",
                "    let compiler = Compiler { parser: ParserBuilder::new(), config, builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap::default()) };",
                "    assert!(compiler.is_reverse() == false);",
                "    let config = Config { reverse: None, ..Default::default() };",
                "    let compiler = Compiler { parser: ParserBuilder::new(), config, builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap::default()) };",
                "    assert!(compiler.is_reverse() == false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config {",
                "        reverse: Some(false),",
                "        ..Default::default()",
                "    };",
                "    let compiler = Compiler {",
                "        parser: ParserBuilder::new(),",
                "        config,",
                "        builder: RefCell::new(Builder::default()),",
                "        utf8_state: RefCell::new(Utf8State {",
                "            compiled: Utf8BoundedMap::default(),",
                "            uncompiled: vec![],",
                "        }),",
                "        trie_state: RefCell::new(RangeTrie::default()),",
                "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
                "            version: 0,",
                "            capacity: 0,",
                "            map: vec![],",
                "        }),",
                "    };",
                "    let _ = compiler.is_reverse();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(compiler.is_reverse(), false);"
              ],
              "code": [
                "{",
                "    let config = Config {",
                "        reverse: Some(false),",
                "        ..Default::default()",
                "    };",
                "    let compiler = Compiler {",
                "        parser: ParserBuilder::new(),",
                "        config,",
                "        builder: RefCell::new(Builder::default()),",
                "        utf8_state: RefCell::new(Utf8State {",
                "            compiled: Utf8BoundedMap::default(),",
                "            uncompiled: vec![],",
                "        }),",
                "        trie_state: RefCell::new(RangeTrie::default()),",
                "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
                "            version: 0,",
                "            capacity: 0,",
                "            map: vec![],",
                "        }),",
                "    };",
                "    let _ = compiler.is_reverse();",
                "    assert_eq!(compiler.is_reverse(), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config {",
                "        reverse: None,",
                "        ..Default::default()",
                "    };",
                "    let compiler = Compiler {",
                "        parser: ParserBuilder::new(),",
                "        config,",
                "        builder: RefCell::new(Builder::default()),",
                "        utf8_state: RefCell::new(Utf8State {",
                "            compiled: Utf8BoundedMap::default(),",
                "            uncompiled: vec![],",
                "        }),",
                "        trie_state: RefCell::new(RangeTrie::default()),",
                "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
                "            version: 0,",
                "            capacity: 0,",
                "            map: vec![],",
                "        }),",
                "    };",
                "    let _ = compiler.is_reverse();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(compiler.is_reverse(), false);"
              ],
              "code": [
                "{",
                "    let config = Config {",
                "        reverse: None,",
                "        ..Default::default()",
                "    };",
                "    let compiler = Compiler {",
                "        parser: ParserBuilder::new(),",
                "        config,",
                "        builder: RefCell::new(Builder::default()),",
                "        utf8_state: RefCell::new(Utf8State {",
                "            compiled: Utf8BoundedMap::default(),",
                "            uncompiled: vec![],",
                "        }),",
                "        trie_state: RefCell::new(RangeTrie::default()),",
                "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
                "            version: 0,",
                "            capacity: 0,",
                "            map: vec![],",
                "        }),",
                "    };",
                "    let _ = compiler.is_reverse();",
                "    assert_eq!(compiler.is_reverse(), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}