{
  "name": "regex_automata::nfa::thompson::backtrack::{impl#0}::overwrite",
  "mod_info": {
    "name": "nfa::thompson::backtrack",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:57:1:57:19"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/backtrack.rs:194:5:199:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Config {\n            pre: o.pre.or_else(|| self.pre.clone()),\n            visited_capacity: o.visited_capacity.or(self.visited_capacity),\n        }\n"
      ],
      "input_infer": "self.pre: Option<Option<Prefilter>> containing Some(Some(Prefilter)), Some(None), None, o.pre: Option<Prefilter> as Some(Prefilter), None; self.visited_capacity: Option<usize> as Some(0), Some(usize), None, o.visited_capacity: usize as 1, 10, max_value(usize)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let self_config = Config {",
                "        pre: Some(Some(Prefilter {",
                "            pre: Arc::new(/* Some PrefilterI implementation */),",
                "            is_fast: true,",
                "            max_needle_len: 5,",
                "        })),",
                "        visited_capacity: Some(5),",
                "    };",
                "",
                "    let other_config = Config {",
                "        pre: Some(None),",
                "        visited_capacity: Some(10),",
                "    };",
                "",
                "    let result = self_config.overwrite(other_config);",
                "}"
              ],
              "oracle": [
                "    assert!(result.pre.is_some());",
                "    assert!(result.visited_capacity.is_some());",
                "    assert_eq!(result.visited_capacity, Some(10));",
                "    assert_eq!(result.pre, Some(Some(Prefilter {",
                "    pre: Arc::new(/* Some PrefilterI implementation */),",
                "    is_fast: true,",
                "    max_needle_len: 5,",
                "    })));",
                "    ",
                "    let other_config_empty_pre = Config {",
                "    pre: Some(None),",
                "    visited_capacity: None,",
                "    };",
                "    let result_empty_pre = self_config.overwrite(other_config_empty_pre);",
                "    assert_eq!(result_empty_pre.pre, Some(Some(Prefilter {",
                "    pre: Arc::new(/* Some PrefilterI implementation */),",
                "    is_fast: true,",
                "    max_needle_len: 5,",
                "    })));",
                "    assert_eq!(result_empty_pre.visited_capacity, Some(5));",
                "    ",
                "    let other_config_empty_capacity = Config {",
                "    pre: Some(Some(Prefilter {",
                "    pre: Arc::new(/* Some PrefilterI implementation */),",
                "    is_fast: false,",
                "    max_needle_len: 3,",
                "    })),",
                "    visited_capacity: None,",
                "    };",
                "    let result_empty_capacity = self_config.overwrite(other_config_empty_capacity);",
                "    assert_eq!(result_empty_capacity.pre, Some(Some(Prefilter {",
                "    pre: Arc::new(/* Some PrefilterI implementation */),",
                "    is_fast: false,",
                "    max_needle_len: 3,",
                "    })));",
                "    assert_eq!(result_empty_capacity.visited_capacity, Some(5));",
                "    ",
                "    let other_config_none = Config {",
                "    pre: None,",
                "    visited_capacity: None,",
                "    };",
                "    let result_none = self_config.overwrite(other_config_none);",
                "    assert_eq!(result_none.pre, Some(Some(Prefilter {",
                "    pre: Arc::new(/* Some PrefilterI implementation */),",
                "    is_fast: true,",
                "    max_needle_len: 5,",
                "    })));",
                "    assert_eq!(result_none.visited_capacity, Some(5));",
                "    ",
                "    let self_config_none = Config {",
                "    pre: None,",
                "    visited_capacity: None,",
                "    };",
                "    let other_config_non_empty = Config {",
                "    pre: Some(Some(Prefilter {",
                "    pre: Arc::new(/* Some PrefilterI implementation */),",
                "    is_fast: true,",
                "    max_needle_len: 5,",
                "    })),",
                "    visited_capacity: Some(10),",
                "    };",
                "    let result_self_none = self_config_none.overwrite(other_config_non_empty);",
                "    assert_eq!(result_self_none.pre, Some(Some(Prefilter {",
                "    pre: Arc::new(/* Some PrefilterI implementation */),",
                "    is_fast: true,",
                "    max_needle_len: 5,",
                "    })));",
                "    assert_eq!(result_self_none.visited_capacity, Some(10));"
              ],
              "code": [
                "{",
                "    let self_config = Config {",
                "        pre: Some(Some(Prefilter {",
                "            pre: Arc::new(/* Some PrefilterI implementation */),",
                "            is_fast: true,",
                "            max_needle_len: 5,",
                "        })),",
                "        visited_capacity: Some(5),",
                "    };",
                "",
                "    let other_config = Config {",
                "        pre: Some(None),",
                "        visited_capacity: Some(10),",
                "    };",
                "",
                "    let result = self_config.overwrite(other_config);",
                "    assert!(result.pre.is_some());",
                "    assert!(result.visited_capacity.is_some());",
                "    assert_eq!(result.visited_capacity, Some(10));",
                "    assert_eq!(result.pre, Some(Some(Prefilter {",
                "    pre: Arc::new(/* Some PrefilterI implementation */),",
                "    is_fast: true,",
                "    max_needle_len: 5,",
                "    })));",
                "    ",
                "    let other_config_empty_pre = Config {",
                "    pre: Some(None),",
                "    visited_capacity: None,",
                "    };",
                "    let result_empty_pre = self_config.overwrite(other_config_empty_pre);",
                "    assert_eq!(result_empty_pre.pre, Some(Some(Prefilter {",
                "    pre: Arc::new(/* Some PrefilterI implementation */),",
                "    is_fast: true,",
                "    max_needle_len: 5,",
                "    })));",
                "    assert_eq!(result_empty_pre.visited_capacity, Some(5));",
                "    ",
                "    let other_config_empty_capacity = Config {",
                "    pre: Some(Some(Prefilter {",
                "    pre: Arc::new(/* Some PrefilterI implementation */),",
                "    is_fast: false,",
                "    max_needle_len: 3,",
                "    })),",
                "    visited_capacity: None,",
                "    };",
                "    let result_empty_capacity = self_config.overwrite(other_config_empty_capacity);",
                "    assert_eq!(result_empty_capacity.pre, Some(Some(Prefilter {",
                "    pre: Arc::new(/* Some PrefilterI implementation */),",
                "    is_fast: false,",
                "    max_needle_len: 3,",
                "    })));",
                "    assert_eq!(result_empty_capacity.visited_capacity, Some(5));",
                "    ",
                "    let other_config_none = Config {",
                "    pre: None,",
                "    visited_capacity: None,",
                "    };",
                "    let result_none = self_config.overwrite(other_config_none);",
                "    assert_eq!(result_none.pre, Some(Some(Prefilter {",
                "    pre: Arc::new(/* Some PrefilterI implementation */),",
                "    is_fast: true,",
                "    max_needle_len: 5,",
                "    })));",
                "    assert_eq!(result_none.visited_capacity, Some(5));",
                "    ",
                "    let self_config_none = Config {",
                "    pre: None,",
                "    visited_capacity: None,",
                "    };",
                "    let other_config_non_empty = Config {",
                "    pre: Some(Some(Prefilter {",
                "    pre: Arc::new(/* Some PrefilterI implementation */),",
                "    is_fast: true,",
                "    max_needle_len: 5,",
                "    })),",
                "    visited_capacity: Some(10),",
                "    };",
                "    let result_self_none = self_config_none.overwrite(other_config_non_empty);",
                "    assert_eq!(result_self_none.pre, Some(Some(Prefilter {",
                "    pre: Arc::new(/* Some PrefilterI implementation */),",
                "    is_fast: true,",
                "    max_needle_len: 5,",
                "    })));",
                "    assert_eq!(result_self_none.visited_capacity, Some(10));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let self_config = Config {",
                "        pre: None,",
                "        visited_capacity: Some(5),",
                "    };",
                "",
                "    let other_config = Config {",
                "        pre: Some(Some(Prefilter {",
                "            pre: Arc::new(/* Some PrefilterI implementation */),",
                "            is_fast: true,",
                "            max_needle_len: 5,",
                "        })),",
                "        visited_capacity: None,",
                "    };",
                "",
                "    let result = self_config.overwrite(other_config);",
                "}"
              ],
              "oracle": [
                "    result.pre.is_some() == true",
                "    result.visited_capacity == 5",
                "    result.pre == self_config.pre",
                "    result.pre.as_ref().unwrap().is_fast == true",
                "    result.pre.as_ref().unwrap().max_needle_len == 5"
              ],
              "code": [
                "{",
                "    let self_config = Config {",
                "        pre: None,",
                "        visited_capacity: Some(5),",
                "    };",
                "",
                "    let other_config = Config {",
                "        pre: Some(Some(Prefilter {",
                "            pre: Arc::new(/* Some PrefilterI implementation */),",
                "            is_fast: true,",
                "            max_needle_len: 5,",
                "        })),",
                "        visited_capacity: None,",
                "    };",
                "",
                "    let result = self_config.overwrite(other_config);",
                "    result.pre.is_some() == true",
                "    result.visited_capacity == 5",
                "    result.pre == self_config.pre",
                "    result.pre.as_ref().unwrap().is_fast == true",
                "    result.pre.as_ref().unwrap().max_needle_len == 5",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let self_config = Config {",
                "        pre: None,",
                "        visited_capacity: None,",
                "    };",
                "",
                "    let other_config = Config {",
                "        pre: None,",
                "        visited_capacity: Some(1),",
                "    };",
                "",
                "    let result = self_config.overwrite(other_config);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.pre, None);",
                "    assert_eq!(result.visited_capacity, Some(1));",
                "    ",
                "    let self_config = Config {",
                "    pre: Some(Some(Prefilter { /* fields initialized */ })),",
                "    visited_capacity: Some(2),",
                "    };",
                "    ",
                "    let other_config = Config {",
                "    pre: None,",
                "    visited_capacity: None,",
                "    };",
                "    ",
                "    let result = self_config.overwrite(other_config);",
                "    assert_eq!(result.pre, Some(Some(Prefilter { /* fields initialized */ })));",
                "    assert_eq!(result.visited_capacity, Some(2));",
                "    ",
                "    let self_config = Config {",
                "    pre: None,",
                "    visited_capacity: Some(3),",
                "    };",
                "    ",
                "    let other_config = Config {",
                "    pre: Some(Some(Prefilter { /* fields initialized */ })),",
                "    visited_capacity: None,",
                "    };",
                "    ",
                "    let result = self_config.overwrite(other_config);",
                "    assert_eq!(result.pre, Some(Some(Prefilter { /* fields initialized */ })));",
                "    assert_eq!(result.visited_capacity, Some(3));",
                "    ",
                "    let self_config = Config {",
                "    pre: None,",
                "    visited_capacity: None,",
                "    };",
                "    ",
                "    let other_config = Config {",
                "    pre: None,",
                "    visited_capacity: None,",
                "    };",
                "    ",
                "    let result = self_config.overwrite(other_config);",
                "    assert_eq!(result.pre, None);",
                "    assert_eq!(result.visited_capacity, None);"
              ],
              "code": [
                "{",
                "    let self_config = Config {",
                "        pre: None,",
                "        visited_capacity: None,",
                "    };",
                "",
                "    let other_config = Config {",
                "        pre: None,",
                "        visited_capacity: Some(1),",
                "    };",
                "",
                "    let result = self_config.overwrite(other_config);",
                "    assert_eq!(result.pre, None);",
                "    assert_eq!(result.visited_capacity, Some(1));",
                "    ",
                "    let self_config = Config {",
                "    pre: Some(Some(Prefilter { /* fields initialized */ })),",
                "    visited_capacity: Some(2),",
                "    };",
                "    ",
                "    let other_config = Config {",
                "    pre: None,",
                "    visited_capacity: None,",
                "    };",
                "    ",
                "    let result = self_config.overwrite(other_config);",
                "    assert_eq!(result.pre, Some(Some(Prefilter { /* fields initialized */ })));",
                "    assert_eq!(result.visited_capacity, Some(2));",
                "    ",
                "    let self_config = Config {",
                "    pre: None,",
                "    visited_capacity: Some(3),",
                "    };",
                "    ",
                "    let other_config = Config {",
                "    pre: Some(Some(Prefilter { /* fields initialized */ })),",
                "    visited_capacity: None,",
                "    };",
                "    ",
                "    let result = self_config.overwrite(other_config);",
                "    assert_eq!(result.pre, Some(Some(Prefilter { /* fields initialized */ })));",
                "    assert_eq!(result.visited_capacity, Some(3));",
                "    ",
                "    let self_config = Config {",
                "    pre: None,",
                "    visited_capacity: None,",
                "    };",
                "    ",
                "    let other_config = Config {",
                "    pre: None,",
                "    visited_capacity: None,",
                "    };",
                "    ",
                "    let result = self_config.overwrite(other_config);",
                "    assert_eq!(result.pre, None);",
                "    assert_eq!(result.visited_capacity, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let self_config = Config {",
                "        pre: Some(Some(Prefilter {",
                "            pre: Arc::new(/* Some PrefilterI implementation */),",
                "            is_fast: true,",
                "            max_needle_len: 3,",
                "        })),",
                "        visited_capacity: Some(0),",
                "    };",
                "",
                "    let other_config = Config {",
                "        pre: None,",
                "        visited_capacity: Some(10),",
                "    };",
                "",
                "    let result = self_config.overwrite(other_config);",
                "}"
              ],
              "oracle": [
                "    assert!(result.pre.is_some());",
                "    assert_eq!(result.pre, self_config.pre);",
                "    assert_eq!(result.visited_capacity, other_config.visited_capacity);",
                "    assert_eq!(result.visited_capacity, Some(10));",
                "    assert_eq!(result.pre, Some(Some(Prefilter {",
                "    pre: Arc::new(/* Some PrefilterI implementation */),",
                "    is_fast: true,",
                "    max_needle_len: 3,",
                "    })));",
                "    assert!(result.visited_capacity.is_some());",
                "    assert!(result.pre.is_some());",
                "    assert!(result.visited_capacity.unwrap() == 10);",
                "    assert!(result.pre.as_ref().unwrap().is_some());",
                "    assert!(result.visited_capacity.unwrap_or(0) == 10);"
              ],
              "code": [
                "{",
                "    let self_config = Config {",
                "        pre: Some(Some(Prefilter {",
                "            pre: Arc::new(/* Some PrefilterI implementation */),",
                "            is_fast: true,",
                "            max_needle_len: 3,",
                "        })),",
                "        visited_capacity: Some(0),",
                "    };",
                "",
                "    let other_config = Config {",
                "        pre: None,",
                "        visited_capacity: Some(10),",
                "    };",
                "",
                "    let result = self_config.overwrite(other_config);",
                "    assert!(result.pre.is_some());",
                "    assert_eq!(result.pre, self_config.pre);",
                "    assert_eq!(result.visited_capacity, other_config.visited_capacity);",
                "    assert_eq!(result.visited_capacity, Some(10));",
                "    assert_eq!(result.pre, Some(Some(Prefilter {",
                "    pre: Arc::new(/* Some PrefilterI implementation */),",
                "    is_fast: true,",
                "    max_needle_len: 3,",
                "    })));",
                "    assert!(result.visited_capacity.is_some());",
                "    assert!(result.pre.is_some());",
                "    assert!(result.visited_capacity.unwrap() == 10);",
                "    assert!(result.pre.as_ref().unwrap().is_some());",
                "    assert!(result.visited_capacity.unwrap_or(0) == 10);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let self_config = Config {",
                "        pre: None,",
                "        visited_capacity: Some(usize::MAX),",
                "    };",
                "",
                "    let other_config = Config {",
                "        pre: Some(Some(Prefilter {",
                "            pre: Arc::new(/* Some PrefilterI implementation */),",
                "            is_fast: false,",
                "            max_needle_len: 2,",
                "        })),",
                "        visited_capacity: Some(1),",
                "    };",
                "",
                "    let result = self_config.overwrite(other_config);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.pre, other_config.pre);",
                "    assert_eq!(result.visited_capacity, other_config.visited_capacity);",
                "    assert_eq!(result.pre, self_config.pre);",
                "    assert_eq!(result.visited_capacity, self_config.visited_capacity);",
                "    assert!(result.visited_capacity.is_some());",
                "    assert!(result.pre.is_some());"
              ],
              "code": [
                "{",
                "    let self_config = Config {",
                "        pre: None,",
                "        visited_capacity: Some(usize::MAX),",
                "    };",
                "",
                "    let other_config = Config {",
                "        pre: Some(Some(Prefilter {",
                "            pre: Arc::new(/* Some PrefilterI implementation */),",
                "            is_fast: false,",
                "            max_needle_len: 2,",
                "        })),",
                "        visited_capacity: Some(1),",
                "    };",
                "",
                "    let result = self_config.overwrite(other_config);",
                "    assert_eq!(result.pre, other_config.pre);",
                "    assert_eq!(result.visited_capacity, other_config.visited_capacity);",
                "    assert_eq!(result.pre, self_config.pre);",
                "    assert_eq!(result.visited_capacity, self_config.visited_capacity);",
                "    assert!(result.visited_capacity.is_some());",
                "    assert!(result.pre.is_some());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}