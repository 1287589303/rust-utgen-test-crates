{
  "name": "regex_automata::dfa::remapper::onepass::{impl#0}::state_len",
  "mod_info": {
    "name": "dfa::remapper::onepass",
    "loc": "regex-automata/src/dfa/remapper.rs:217:1:242:2"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/remapper.rs:223:9:225:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "state_len must be called on a DFA instance with a non-empty transition table containing at least one Transition, with valid StateID values and an alphabet length between 1 and 256, thus testing edge cases such as an empty transition table and boundary values for state IDs.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![Transition(0)],",
                "        starts: vec![StateID(0)],",
                "        min_match_id: StateID(1),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 1,",
                "        stride2: 1,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    let _ = dfa.state_len();",
                "}"
              ],
              "oracle": [
                "    let dfa = DFA {",
                "    config: Config::default(),",
                "    nfa: NFA::default(),",
                "    table: vec![Transition(0)],",
                "    starts: vec![StateID(0)],",
                "    min_match_id: StateID(1),",
                "    classes: ByteClasses([0; 256]),",
                "    alphabet_len: 1,",
                "    stride2: 1,",
                "    pateps_offset: 0,",
                "    explicit_slot_start: 0,",
                "    };",
                "    assert_eq!(dfa.state_len(), 1);"
              ],
              "code": [
                "{",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![Transition(0)],",
                "        starts: vec![StateID(0)],",
                "        min_match_id: StateID(1),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 1,",
                "        stride2: 1,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    let _ = dfa.state_len();",
                "    let dfa = DFA {",
                "    config: Config::default(),",
                "    nfa: NFA::default(),",
                "    table: vec![Transition(0)],",
                "    starts: vec![StateID(0)],",
                "    min_match_id: StateID(1),",
                "    classes: ByteClasses([0; 256]),",
                "    alphabet_len: 1,",
                "    stride2: 1,",
                "    pateps_offset: 0,",
                "    explicit_slot_start: 0,",
                "    };",
                "    assert_eq!(dfa.state_len(), 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![],",
                "        starts: vec![StateID(0)],",
                "        min_match_id: StateID(1),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 1,",
                "        stride2: 1,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    let _ = dfa.state_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dfa.state_len(), 0);"
              ],
              "code": [
                "{",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![],",
                "        starts: vec![StateID(0)],",
                "        min_match_id: StateID(1),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 1,",
                "        stride2: 1,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    let _ = dfa.state_len();",
                "    assert_eq!(dfa.state_len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![Transition(0), Transition(1), Transition(2)],",
                "        starts: vec![StateID(0)],",
                "        min_match_id: StateID(1),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 3,",
                "        stride2: 2,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    let _ = dfa.state_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dfa.state_len(), 3);",
                "    assert!(dfa.state_len() > 0);",
                "    assert!(dfa.state_len() <= dfa.table.len() >> dfa.stride2());",
                "    assert_eq!(dfa.state_len(), dfa.table.len() >> 2);",
                "    assert!(dfa.state_len() < 4);",
                "    assert!(dfa.state_len() == dfa.starts.len());"
              ],
              "code": [
                "{",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![Transition(0), Transition(1), Transition(2)],",
                "        starts: vec![StateID(0)],",
                "        min_match_id: StateID(1),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 3,",
                "        stride2: 2,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    let _ = dfa.state_len();",
                "    assert_eq!(dfa.state_len(), 3);",
                "    assert!(dfa.state_len() > 0);",
                "    assert!(dfa.state_len() <= dfa.table.len() >> dfa.stride2());",
                "    assert_eq!(dfa.state_len(), dfa.table.len() >> 2);",
                "    assert!(dfa.state_len() < 4);",
                "    assert!(dfa.state_len() == dfa.starts.len());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![Transition(0)],",
                "        starts: vec![StateID(u32::MAX)],",
                "        min_match_id: StateID(u32::MAX - 1),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 256,",
                "        stride2: 8,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    let _ = dfa.state_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dfa.state_len(), 1);"
              ],
              "code": [
                "{",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![Transition(0)],",
                "        starts: vec![StateID(u32::MAX)],",
                "        min_match_id: StateID(u32::MAX - 1),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 256,",
                "        stride2: 8,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    let _ = dfa.state_len();",
                "    assert_eq!(dfa.state_len(), 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}