{
  "name": "regex_lite::string::{impl#8}::static_captures_len",
  "mod_info": {
    "name": "string",
    "loc": "regex-lite/src/lib.rs:884:1:884:12"
  },
  "visible": true,
  "loc": "regex-lite/src/string.rs:1407:5:1412:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Pattern strings containing various capturing group configurations, including empty strings, single character patterns, multiple disjoint captured groups (e.g., \"(a)|(b)\"), nested group patterns (e.g., \"(a(b))\"), and patterns that can match empty strings (e.g., \"(b)*\"), tested against expected return values of Some(n) for static capture lengths and None for dynamic capture lengths.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nfa = NFA::new(Config::default(), \"a\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    regex.static_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(regex.static_captures_len(), Some(1));",
                "    ",
                "    let nfa2 = NFA::new(Config::default(), \"(a)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm2 = PikeVM::new(nfa2.clone());",
                "    let regex2 = Regex { pikevm: Arc::new(pikevm2), pool: CachePool::default() };",
                "    assert_eq!(regex2.static_captures_len(), Some(2));",
                "    ",
                "    let nfa3 = NFA::new(Config::default(), \"(a)|(b)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm3 = PikeVM::new(nfa3.clone());",
                "    let regex3 = Regex { pikevm: Arc::new(pikevm3), pool: CachePool::default() };",
                "    assert_eq!(regex3.static_captures_len(), Some(2));",
                "    ",
                "    let nfa4 = NFA::new(Config::default(), \"(a)(b)|(c)(d)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm4 = PikeVM::new(nfa4.clone());",
                "    let regex4 = Regex { pikevm: Arc::new(pikevm4), pool: CachePool::default() };",
                "    assert_eq!(regex4.static_captures_len(), Some(3));",
                "    ",
                "    let nfa5 = NFA::new(Config::default(), \"(a)|b\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm5 = PikeVM::new(nfa5.clone());",
                "    let regex5 = Regex { pikevm: Arc::new(pikevm5), pool: CachePool::default() };",
                "    assert_eq!(regex5.static_captures_len(), None);",
                "    ",
                "    let nfa6 = NFA::new(Config::default(), \"a|(b)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm6 = PikeVM::new(nfa6.clone());",
                "    let regex6 = Regex { pikevm: Arc::new(pikevm6), pool: CachePool::default() };",
                "    assert_eq!(regex6.static_captures_len(), None);",
                "    ",
                "    let nfa7 = NFA::new(Config::default(), \"(b)*\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm7 = PikeVM::new(nfa7.clone());",
                "    let regex7 = Regex { pikevm: Arc::new(pikevm7), pool: CachePool::default() };",
                "    assert_eq!(regex7.static_captures_len(), None);",
                "    ",
                "    let nfa8 = NFA::new(Config::default(), \"(b)+\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm8 = PikeVM::new(nfa8.clone());",
                "    let regex8 = Regex { pikevm: Arc::new(pikevm8), pool: CachePool::default() };",
                "    assert_eq!(regex8.static_captures_len(), Some(2));"
              ],
              "code": [
                "{",
                "    let nfa = NFA::new(Config::default(), \"a\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    regex.static_captures_len();",
                "    assert_eq!(regex.static_captures_len(), Some(1));",
                "    ",
                "    let nfa2 = NFA::new(Config::default(), \"(a)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm2 = PikeVM::new(nfa2.clone());",
                "    let regex2 = Regex { pikevm: Arc::new(pikevm2), pool: CachePool::default() };",
                "    assert_eq!(regex2.static_captures_len(), Some(2));",
                "    ",
                "    let nfa3 = NFA::new(Config::default(), \"(a)|(b)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm3 = PikeVM::new(nfa3.clone());",
                "    let regex3 = Regex { pikevm: Arc::new(pikevm3), pool: CachePool::default() };",
                "    assert_eq!(regex3.static_captures_len(), Some(2));",
                "    ",
                "    let nfa4 = NFA::new(Config::default(), \"(a)(b)|(c)(d)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm4 = PikeVM::new(nfa4.clone());",
                "    let regex4 = Regex { pikevm: Arc::new(pikevm4), pool: CachePool::default() };",
                "    assert_eq!(regex4.static_captures_len(), Some(3));",
                "    ",
                "    let nfa5 = NFA::new(Config::default(), \"(a)|b\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm5 = PikeVM::new(nfa5.clone());",
                "    let regex5 = Regex { pikevm: Arc::new(pikevm5), pool: CachePool::default() };",
                "    assert_eq!(regex5.static_captures_len(), None);",
                "    ",
                "    let nfa6 = NFA::new(Config::default(), \"a|(b)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm6 = PikeVM::new(nfa6.clone());",
                "    let regex6 = Regex { pikevm: Arc::new(pikevm6), pool: CachePool::default() };",
                "    assert_eq!(regex6.static_captures_len(), None);",
                "    ",
                "    let nfa7 = NFA::new(Config::default(), \"(b)*\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm7 = PikeVM::new(nfa7.clone());",
                "    let regex7 = Regex { pikevm: Arc::new(pikevm7), pool: CachePool::default() };",
                "    assert_eq!(regex7.static_captures_len(), None);",
                "    ",
                "    let nfa8 = NFA::new(Config::default(), \"(b)+\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm8 = PikeVM::new(nfa8.clone());",
                "    let regex8 = Regex { pikevm: Arc::new(pikevm8), pool: CachePool::default() };",
                "    assert_eq!(regex8.static_captures_len(), Some(2));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nfa = NFA::new(Config::default(), \"(a)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    regex.static_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(regex.static_captures_len(), Some(2));",
                "    let nfa2 = NFA::new(Config::default(), \"(a)|(b)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm2 = PikeVM::new(nfa2.clone());",
                "    let regex2 = Regex { pikevm: Arc::new(pikevm2), pool: CachePool::default() };",
                "    assert_eq!(regex2.static_captures_len(), Some(2));",
                "    let nfa3 = NFA::new(Config::default(), \"(a)(b)|(c)(d)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm3 = PikeVM::new(nfa3.clone());",
                "    let regex3 = Regex { pikevm: Arc::new(pikevm3), pool: CachePool::default() };",
                "    assert_eq!(regex3.static_captures_len(), Some(3));",
                "    let nfa4 = NFA::new(Config::default(), \"(a)|b\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm4 = PikeVM::new(nfa4.clone());",
                "    let regex4 = Regex { pikevm: Arc::new(pikevm4), pool: CachePool::default() };",
                "    assert_eq!(regex4.static_captures_len(), None);",
                "    let nfa5 = NFA::new(Config::default(), \"a|(b)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm5 = PikeVM::new(nfa5.clone());",
                "    let regex5 = Regex { pikevm: Arc::new(pikevm5), pool: CachePool::default() };",
                "    assert_eq!(regex5.static_captures_len(), None);",
                "    let nfa6 = NFA::new(Config::default(), \"(b)*\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm6 = PikeVM::new(nfa6.clone());",
                "    let regex6 = Regex { pikevm: Arc::new(pikevm6), pool: CachePool::default() };",
                "    assert_eq!(regex6.static_captures_len(), None);",
                "    let nfa7 = NFA::new(Config::default(), \"(b)+\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm7 = PikeVM::new(nfa7.clone());",
                "    let regex7 = Regex { pikevm: Arc::new(pikevm7), pool: CachePool::default() };",
                "    assert_eq!(regex7.static_captures_len(), Some(2));"
              ],
              "code": [
                "{",
                "    let nfa = NFA::new(Config::default(), \"(a)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    regex.static_captures_len();",
                "    assert_eq!(regex.static_captures_len(), Some(2));",
                "    let nfa2 = NFA::new(Config::default(), \"(a)|(b)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm2 = PikeVM::new(nfa2.clone());",
                "    let regex2 = Regex { pikevm: Arc::new(pikevm2), pool: CachePool::default() };",
                "    assert_eq!(regex2.static_captures_len(), Some(2));",
                "    let nfa3 = NFA::new(Config::default(), \"(a)(b)|(c)(d)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm3 = PikeVM::new(nfa3.clone());",
                "    let regex3 = Regex { pikevm: Arc::new(pikevm3), pool: CachePool::default() };",
                "    assert_eq!(regex3.static_captures_len(), Some(3));",
                "    let nfa4 = NFA::new(Config::default(), \"(a)|b\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm4 = PikeVM::new(nfa4.clone());",
                "    let regex4 = Regex { pikevm: Arc::new(pikevm4), pool: CachePool::default() };",
                "    assert_eq!(regex4.static_captures_len(), None);",
                "    let nfa5 = NFA::new(Config::default(), \"a|(b)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm5 = PikeVM::new(nfa5.clone());",
                "    let regex5 = Regex { pikevm: Arc::new(pikevm5), pool: CachePool::default() };",
                "    assert_eq!(regex5.static_captures_len(), None);",
                "    let nfa6 = NFA::new(Config::default(), \"(b)*\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm6 = PikeVM::new(nfa6.clone());",
                "    let regex6 = Regex { pikevm: Arc::new(pikevm6), pool: CachePool::default() };",
                "    assert_eq!(regex6.static_captures_len(), None);",
                "    let nfa7 = NFA::new(Config::default(), \"(b)+\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm7 = PikeVM::new(nfa7.clone());",
                "    let regex7 = Regex { pikevm: Arc::new(pikevm7), pool: CachePool::default() };",
                "    assert_eq!(regex7.static_captures_len(), Some(2));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nfa = NFA::new(Config::default(), \"(a)|(b)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    regex.static_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(regex.static_captures_len(), Some(2));",
                "    assert_eq!(NFA::new(Config::default(), \"a\".to_string(), &Hir::default()).unwrap().static_explicit_captures_len(), Some(1));",
                "    assert_eq!(NFA::new(Config::default(), \"(a)\".to_string(), &Hir::default()).unwrap().static_explicit_captures_len(), Some(2));",
                "    assert_eq!(NFA::new(Config::default(), \"(a)|(b)\".to_string(), &Hir::default()).unwrap().static_explicit_captures_len(), Some(2));",
                "    assert_eq!(NFA::new(Config::default(), \"(a)(b)|(c)(d)\".to_string(), &Hir::default()).unwrap().static_explicit_captures_len(), Some(3));",
                "    assert_eq!(NFA::new(Config::default(), \"(a)|b\".to_string(), &Hir::default()).unwrap().static_explicit_captures_len(), None);",
                "    assert_eq!(NFA::new(Config::default(), \"a|(b)\".to_string(), &Hir::default()).unwrap().static_explicit_captures_len(), None);",
                "    assert_eq!(NFA::new(Config::default(), \"(b)*\".to_string(), &Hir::default()).unwrap().static_explicit_captures_len(), None);",
                "    assert_eq!(NFA::new(Config::default(), \"(b)+\".to_string(), &Hir::default()).unwrap().static_explicit_captures_len(), Some(2));"
              ],
              "code": [
                "{",
                "    let nfa = NFA::new(Config::default(), \"(a)|(b)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    regex.static_captures_len();",
                "    assert_eq!(regex.static_captures_len(), Some(2));",
                "    assert_eq!(NFA::new(Config::default(), \"a\".to_string(), &Hir::default()).unwrap().static_explicit_captures_len(), Some(1));",
                "    assert_eq!(NFA::new(Config::default(), \"(a)\".to_string(), &Hir::default()).unwrap().static_explicit_captures_len(), Some(2));",
                "    assert_eq!(NFA::new(Config::default(), \"(a)|(b)\".to_string(), &Hir::default()).unwrap().static_explicit_captures_len(), Some(2));",
                "    assert_eq!(NFA::new(Config::default(), \"(a)(b)|(c)(d)\".to_string(), &Hir::default()).unwrap().static_explicit_captures_len(), Some(3));",
                "    assert_eq!(NFA::new(Config::default(), \"(a)|b\".to_string(), &Hir::default()).unwrap().static_explicit_captures_len(), None);",
                "    assert_eq!(NFA::new(Config::default(), \"a|(b)\".to_string(), &Hir::default()).unwrap().static_explicit_captures_len(), None);",
                "    assert_eq!(NFA::new(Config::default(), \"(b)*\".to_string(), &Hir::default()).unwrap().static_explicit_captures_len(), None);",
                "    assert_eq!(NFA::new(Config::default(), \"(b)+\".to_string(), &Hir::default()).unwrap().static_explicit_captures_len(), Some(2));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nfa = NFA::new(Config::default(), \"(a(b))\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    regex.static_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(regex.static_captures_len(), Some(2));",
                "    let nfa2 = NFA::new(Config::default(), \"(a)|(b)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm2 = PikeVM::new(nfa2.clone());",
                "    let regex2 = Regex { pikevm: Arc::new(pikevm2), pool: CachePool::default() };",
                "    assert_eq!(regex2.static_captures_len(), None);",
                "    let nfa3 = NFA::new(Config::default(), \"(ab)|(cd)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm3 = PikeVM::new(nfa3.clone());",
                "    let regex3 = Regex { pikevm: Arc::new(pikevm3), pool: CachePool::default() };",
                "    assert_eq!(regex3.static_captures_len(), Some(3));",
                "    let nfa4 = NFA::new(Config::default(), \"(b)*\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm4 = PikeVM::new(nfa4.clone());",
                "    let regex4 = Regex { pikevm: Arc::new(pikevm4), pool: CachePool::default() };",
                "    assert_eq!(regex4.static_captures_len(), None);",
                "    let nfa5 = NFA::new(Config::default(), \"(b)+\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm5 = PikeVM::new(nfa5.clone());",
                "    let regex5 = Regex { pikevm: Arc::new(pikevm5), pool: CachePool::default() };",
                "    assert_eq!(regex5.static_captures_len(), Some(2));"
              ],
              "code": [
                "{",
                "    let nfa = NFA::new(Config::default(), \"(a(b))\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    regex.static_captures_len();",
                "    assert_eq!(regex.static_captures_len(), Some(2));",
                "    let nfa2 = NFA::new(Config::default(), \"(a)|(b)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm2 = PikeVM::new(nfa2.clone());",
                "    let regex2 = Regex { pikevm: Arc::new(pikevm2), pool: CachePool::default() };",
                "    assert_eq!(regex2.static_captures_len(), None);",
                "    let nfa3 = NFA::new(Config::default(), \"(ab)|(cd)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm3 = PikeVM::new(nfa3.clone());",
                "    let regex3 = Regex { pikevm: Arc::new(pikevm3), pool: CachePool::default() };",
                "    assert_eq!(regex3.static_captures_len(), Some(3));",
                "    let nfa4 = NFA::new(Config::default(), \"(b)*\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm4 = PikeVM::new(nfa4.clone());",
                "    let regex4 = Regex { pikevm: Arc::new(pikevm4), pool: CachePool::default() };",
                "    assert_eq!(regex4.static_captures_len(), None);",
                "    let nfa5 = NFA::new(Config::default(), \"(b)+\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm5 = PikeVM::new(nfa5.clone());",
                "    let regex5 = Regex { pikevm: Arc::new(pikevm5), pool: CachePool::default() };",
                "    assert_eq!(regex5.static_captures_len(), Some(2));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nfa = NFA::new(Config::default(), \"a\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    regex.static_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(regex.static_captures_len(), Some(1));",
                "    let nfa = NFA::new(Config::default(), \"(a)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    assert_eq!(regex.static_captures_len(), Some(2));",
                "    let nfa = NFA::new(Config::default(), \"(a)|(b)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    assert_eq!(regex.static_captures_len(), Some(2));",
                "    let nfa = NFA::new(Config::default(), \"(a)(b)|(c)(d)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    assert_eq!(regex.static_captures_len(), Some(3));",
                "    let nfa = NFA::new(Config::default(), \"(a)|b\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    assert_eq!(regex.static_captures_len(), None);",
                "    let nfa = NFA::new(Config::default(), \"a|(b)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    assert_eq!(regex.static_captures_len(), None);",
                "    let nfa = NFA::new(Config::default(), \"(b)*\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    assert_eq!(regex.static_captures_len(), None);",
                "    let nfa = NFA::new(Config::default(), \"(b)+\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    assert_eq!(regex.static_captures_len(), Some(2));"
              ],
              "code": [
                "{",
                "    let nfa = NFA::new(Config::default(), \"a\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    regex.static_captures_len();",
                "    assert_eq!(regex.static_captures_len(), Some(1));",
                "    let nfa = NFA::new(Config::default(), \"(a)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    assert_eq!(regex.static_captures_len(), Some(2));",
                "    let nfa = NFA::new(Config::default(), \"(a)|(b)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    assert_eq!(regex.static_captures_len(), Some(2));",
                "    let nfa = NFA::new(Config::default(), \"(a)(b)|(c)(d)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    assert_eq!(regex.static_captures_len(), Some(3));",
                "    let nfa = NFA::new(Config::default(), \"(a)|b\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    assert_eq!(regex.static_captures_len(), None);",
                "    let nfa = NFA::new(Config::default(), \"a|(b)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    assert_eq!(regex.static_captures_len(), None);",
                "    let nfa = NFA::new(Config::default(), \"(b)*\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    assert_eq!(regex.static_captures_len(), None);",
                "    let nfa = NFA::new(Config::default(), \"(b)+\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    assert_eq!(regex.static_captures_len(), Some(2));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nfa = NFA::new(Config::default(), \"(a)|b\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    regex.static_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(regex.static_captures_len(), None);",
                "    let nfa_static = NFA::new(Config::default(), \"(a)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm_static = PikeVM::new(nfa_static.clone());",
                "    let regex_static = Regex { pikevm: Arc::new(pikevm_static), pool: CachePool::default() };",
                "    assert_eq!(regex_static.static_captures_len(), Some(1));",
                "    let nfa_two_groups = NFA::new(Config::default(), \"(a)(b)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm_two_groups = PikeVM::new(nfa_two_groups.clone());",
                "    let regex_two_groups = Regex { pikevm: Arc::new(pikevm_two_groups), pool: CachePool::default() };",
                "    assert_eq!(regex_two_groups.static_captures_len(), Some(2));",
                "    let nfa_alternation = NFA::new(Config::default(), \"(a)|(b)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm_alternation = PikeVM::new(nfa_alternation.clone());",
                "    let regex_alternation = Regex { pikevm: Arc::new(pikevm_alternation), pool: CachePool::default() };",
                "    assert_eq!(regex_alternation.static_captures_len(), None);"
              ],
              "code": [
                "{",
                "    let nfa = NFA::new(Config::default(), \"(a)|b\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    regex.static_captures_len();",
                "    assert_eq!(regex.static_captures_len(), None);",
                "    let nfa_static = NFA::new(Config::default(), \"(a)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm_static = PikeVM::new(nfa_static.clone());",
                "    let regex_static = Regex { pikevm: Arc::new(pikevm_static), pool: CachePool::default() };",
                "    assert_eq!(regex_static.static_captures_len(), Some(1));",
                "    let nfa_two_groups = NFA::new(Config::default(), \"(a)(b)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm_two_groups = PikeVM::new(nfa_two_groups.clone());",
                "    let regex_two_groups = Regex { pikevm: Arc::new(pikevm_two_groups), pool: CachePool::default() };",
                "    assert_eq!(regex_two_groups.static_captures_len(), Some(2));",
                "    let nfa_alternation = NFA::new(Config::default(), \"(a)|(b)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm_alternation = PikeVM::new(nfa_alternation.clone());",
                "    let regex_alternation = Regex { pikevm: Arc::new(pikevm_alternation), pool: CachePool::default() };",
                "    assert_eq!(regex_alternation.static_captures_len(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nfa = NFA::new(Config::default(), \"a?(b)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    regex.static_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(regex.static_captures_len(), Some(2));",
                "    let nfa_another = NFA::new(Config::default(), \"(a)|(b)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm_another = PikeVM::new(nfa_another.clone());",
                "    let regex_another = Regex { pikevm: Arc::new(pikevm_another), pool: CachePool::default() };",
                "    assert_eq!(regex_another.static_captures_len(), Some(2));",
                "    let nfa_none = NFA::new(Config::default(), \"(a)|b\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm_none = PikeVM::new(nfa_none.clone());",
                "    let regex_none = Regex { pikevm: Arc::new(pikevm_none), pool: CachePool::default() };",
                "    assert_eq!(regex_none.static_captures_len(), None);",
                "    let nfa_empty = NFA::new(Config::default(), \"(b)*\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm_empty = PikeVM::new(nfa_empty.clone());",
                "    let regex_empty = Regex { pikevm: Arc::new(pikevm_empty), pool: CachePool::default() };",
                "    assert_eq!(regex_empty.static_captures_len(), None);"
              ],
              "code": [
                "{",
                "    let nfa = NFA::new(Config::default(), \"a?(b)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    regex.static_captures_len();",
                "    assert_eq!(regex.static_captures_len(), Some(2));",
                "    let nfa_another = NFA::new(Config::default(), \"(a)|(b)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm_another = PikeVM::new(nfa_another.clone());",
                "    let regex_another = Regex { pikevm: Arc::new(pikevm_another), pool: CachePool::default() };",
                "    assert_eq!(regex_another.static_captures_len(), Some(2));",
                "    let nfa_none = NFA::new(Config::default(), \"(a)|b\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm_none = PikeVM::new(nfa_none.clone());",
                "    let regex_none = Regex { pikevm: Arc::new(pikevm_none), pool: CachePool::default() };",
                "    assert_eq!(regex_none.static_captures_len(), None);",
                "    let nfa_empty = NFA::new(Config::default(), \"(b)*\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm_empty = PikeVM::new(nfa_empty.clone());",
                "    let regex_empty = Regex { pikevm: Arc::new(pikevm_empty), pool: CachePool::default() };",
                "    assert_eq!(regex_empty.static_captures_len(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nfa = NFA::new(Config::default(), \"(b)*\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    regex.static_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(regex.static_captures_len(), None);",
                "    let nfa = NFA::new(Config::default(), \"(b)+\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    assert_eq!(regex.static_captures_len(), Some(2));",
                "    let nfa = NFA::new(Config::default(), \"a|(b)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    assert_eq!(regex.static_captures_len(), None);",
                "    let nfa = NFA::new(Config::default(), \"(a)|(b)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    assert_eq!(regex.static_captures_len(), Some(2));",
                "    let nfa = NFA::new(Config::default(), \"(a)(b)|(c)(d)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    assert_eq!(regex.static_captures_len(), Some(3));",
                "    let nfa = NFA::new(Config::default(), \"a\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    assert_eq!(regex.static_captures_len(), Some(1));"
              ],
              "code": [
                "{",
                "    let nfa = NFA::new(Config::default(), \"(b)*\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    regex.static_captures_len();",
                "    assert_eq!(regex.static_captures_len(), None);",
                "    let nfa = NFA::new(Config::default(), \"(b)+\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    assert_eq!(regex.static_captures_len(), Some(2));",
                "    let nfa = NFA::new(Config::default(), \"a|(b)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    assert_eq!(regex.static_captures_len(), None);",
                "    let nfa = NFA::new(Config::default(), \"(a)|(b)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    assert_eq!(regex.static_captures_len(), Some(2));",
                "    let nfa = NFA::new(Config::default(), \"(a)(b)|(c)(d)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    assert_eq!(regex.static_captures_len(), Some(3));",
                "    let nfa = NFA::new(Config::default(), \"a\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    assert_eq!(regex.static_captures_len(), Some(1));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nfa = NFA::new(Config::default(), \"(b)+\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    regex.static_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(regex.static_captures_len(), Some(2));",
                "    let nfa2 = NFA::new(Config::default(), \"a|(b)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm2 = PikeVM::new(nfa2.clone());",
                "    let regex2 = Regex { pikevm: Arc::new(pikevm2), pool: CachePool::default() };",
                "    assert_eq!(regex2.static_captures_len(), None);",
                "    let nfa3 = NFA::new(Config::default(), \"(a)|(b)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm3 = PikeVM::new(nfa3.clone());",
                "    let regex3 = Regex { pikevm: Arc::new(pikevm3), pool: CachePool::default() };",
                "    assert_eq!(regex3.static_captures_len(), Some(2));",
                "    let nfa4 = NFA::new(Config::default(), \"(a)(b)|(c)(d)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm4 = PikeVM::new(nfa4.clone());",
                "    let regex4 = Regex { pikevm: Arc::new(pikevm4), pool: CachePool::default() };",
                "    assert_eq!(regex4.static_captures_len(), Some(3));",
                "    let nfa5 = NFA::new(Config::default(), \"(b)*\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm5 = PikeVM::new(nfa5.clone());",
                "    let regex5 = Regex { pikevm: Arc::new(pikevm5), pool: CachePool::default() };",
                "    assert_eq!(regex5.static_captures_len(), None);",
                "    let nfa6 = NFA::new(Config::default(), \"a\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm6 = PikeVM::new(nfa6.clone());",
                "    let regex6 = Regex { pikevm: Arc::new(pikevm6), pool: CachePool::default() };",
                "    assert_eq!(regex6.static_captures_len(), Some(1));"
              ],
              "code": [
                "{",
                "    let nfa = NFA::new(Config::default(), \"(b)+\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm = PikeVM::new(nfa.clone());",
                "    let regex = Regex { pikevm: Arc::new(pikevm), pool: CachePool::default() };",
                "    regex.static_captures_len();",
                "    assert_eq!(regex.static_captures_len(), Some(2));",
                "    let nfa2 = NFA::new(Config::default(), \"a|(b)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm2 = PikeVM::new(nfa2.clone());",
                "    let regex2 = Regex { pikevm: Arc::new(pikevm2), pool: CachePool::default() };",
                "    assert_eq!(regex2.static_captures_len(), None);",
                "    let nfa3 = NFA::new(Config::default(), \"(a)|(b)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm3 = PikeVM::new(nfa3.clone());",
                "    let regex3 = Regex { pikevm: Arc::new(pikevm3), pool: CachePool::default() };",
                "    assert_eq!(regex3.static_captures_len(), Some(2));",
                "    let nfa4 = NFA::new(Config::default(), \"(a)(b)|(c)(d)\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm4 = PikeVM::new(nfa4.clone());",
                "    let regex4 = Regex { pikevm: Arc::new(pikevm4), pool: CachePool::default() };",
                "    assert_eq!(regex4.static_captures_len(), Some(3));",
                "    let nfa5 = NFA::new(Config::default(), \"(b)*\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm5 = PikeVM::new(nfa5.clone());",
                "    let regex5 = Regex { pikevm: Arc::new(pikevm5), pool: CachePool::default() };",
                "    assert_eq!(regex5.static_captures_len(), None);",
                "    let nfa6 = NFA::new(Config::default(), \"a\".to_string(), &Hir::default()).unwrap();",
                "    let pikevm6 = PikeVM::new(nfa6.clone());",
                "    let regex6 = Regex { pikevm: Arc::new(pikevm6), pool: CachePool::default() };",
                "    assert_eq!(regex6.static_captures_len(), Some(1));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}