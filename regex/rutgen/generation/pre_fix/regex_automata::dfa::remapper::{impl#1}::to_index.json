{
  "name": "regex_automata::dfa::remapper::{impl#1}::to_index",
  "mod_info": {
    "name": "dfa::remapper",
    "loc": "regex-automata/src/dfa/mod.rs:354:1:354:14"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/remapper.rs:178:5:180:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: id.as_usize() >> self.stride2\n"
      ],
      "input_infer": "StateID values ranging from 0 to 2^(self.stride2 + 1) - 1 with stride2 values from 0 to 32\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mapper = IndexMapper { stride2: 0 };",
                "    let id = StateID(0);",
                "    let result = mapper.to_index(id);",
                "}"
              ],
              "oracle": [
                "    let mapper = IndexMapper { stride2: 0 };",
                "    let id = StateID(0);",
                "    let expected = id.as_usize() >> mapper.stride2;",
                "    assert_eq!(result, expected);",
                "    ",
                "    let mapper = IndexMapper { stride2: 1 };",
                "    let id = StateID(2);",
                "    let expected = id.as_usize() >> mapper.stride2;",
                "    assert_eq!(result, expected);",
                "    ",
                "    let mapper = IndexMapper { stride2: 2 };",
                "    let id = StateID(8);",
                "    let expected = id.as_usize() >> mapper.stride2;",
                "    assert_eq!(result, expected);",
                "    ",
                "    let mapper = IndexMapper { stride2: 3 };",
                "    let id = StateID(16);",
                "    let expected = id.as_usize() >> mapper.stride2;",
                "    assert_eq!(result, expected);",
                "    ",
                "    let mapper = IndexMapper { stride2: 4 };",
                "    let id = StateID(32);",
                "    let expected = id.as_usize() >> mapper.stride2;",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let mapper = IndexMapper { stride2: 0 };",
                "    let id = StateID(0);",
                "    let result = mapper.to_index(id);",
                "    let mapper = IndexMapper { stride2: 0 };",
                "    let id = StateID(0);",
                "    let expected = id.as_usize() >> mapper.stride2;",
                "    assert_eq!(result, expected);",
                "    ",
                "    let mapper = IndexMapper { stride2: 1 };",
                "    let id = StateID(2);",
                "    let expected = id.as_usize() >> mapper.stride2;",
                "    assert_eq!(result, expected);",
                "    ",
                "    let mapper = IndexMapper { stride2: 2 };",
                "    let id = StateID(8);",
                "    let expected = id.as_usize() >> mapper.stride2;",
                "    assert_eq!(result, expected);",
                "    ",
                "    let mapper = IndexMapper { stride2: 3 };",
                "    let id = StateID(16);",
                "    let expected = id.as_usize() >> mapper.stride2;",
                "    assert_eq!(result, expected);",
                "    ",
                "    let mapper = IndexMapper { stride2: 4 };",
                "    let id = StateID(32);",
                "    let expected = id.as_usize() >> mapper.stride2;",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mapper = IndexMapper { stride2: 1 };",
                "    let id = StateID(1);",
                "    let result = mapper.to_index(id);",
                "}"
              ],
              "oracle": [
                "    let expected = id.as_usize() >> mapper.stride2;",
                "    assert_eq!(result, expected);",
                "    let mapper = IndexMapper { stride2: 2 };",
                "    let id = StateID(4);",
                "    let expected = id.as_usize() >> mapper.stride2;",
                "    assert_eq!(result, expected);",
                "    let mapper = IndexMapper { stride2: 0 };",
                "    let id = StateID(8);",
                "    let expected = id.as_usize() >> mapper.stride2;",
                "    assert_eq!(result, expected);",
                "    let mapper = IndexMapper { stride2: 3 };",
                "    let id = StateID(16);",
                "    let expected = id.as_usize() >> mapper.stride2;",
                "    assert_eq!(result, expected);",
                "    let mapper = IndexMapper { stride2: 5 };",
                "    let id = StateID(32);",
                "    let expected = id.as_usize() >> mapper.stride2;",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let mapper = IndexMapper { stride2: 1 };",
                "    let id = StateID(1);",
                "    let result = mapper.to_index(id);",
                "    let expected = id.as_usize() >> mapper.stride2;",
                "    assert_eq!(result, expected);",
                "    let mapper = IndexMapper { stride2: 2 };",
                "    let id = StateID(4);",
                "    let expected = id.as_usize() >> mapper.stride2;",
                "    assert_eq!(result, expected);",
                "    let mapper = IndexMapper { stride2: 0 };",
                "    let id = StateID(8);",
                "    let expected = id.as_usize() >> mapper.stride2;",
                "    assert_eq!(result, expected);",
                "    let mapper = IndexMapper { stride2: 3 };",
                "    let id = StateID(16);",
                "    let expected = id.as_usize() >> mapper.stride2;",
                "    assert_eq!(result, expected);",
                "    let mapper = IndexMapper { stride2: 5 };",
                "    let id = StateID(32);",
                "    let expected = id.as_usize() >> mapper.stride2;",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mapper = IndexMapper { stride2: 2 };",
                "    let id = StateID(3);",
                "    let result = mapper.to_index(id);",
                "}"
              ],
              "oracle": [
                "    let expected_result = id.as_usize() >> mapper.stride2;",
                "    assert_eq!(result, expected_result);"
              ],
              "code": [
                "{",
                "    let mapper = IndexMapper { stride2: 2 };",
                "    let id = StateID(3);",
                "    let result = mapper.to_index(id);",
                "    let expected_result = id.as_usize() >> mapper.stride2;",
                "    assert_eq!(result, expected_result);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mapper = IndexMapper { stride2: 3 };",
                "    let id = StateID(7);",
                "    let result = mapper.to_index(id);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0);  // 7 >> 3 equals 0",
                "    assert_eq!(result, (id.as_usize() >> mapper.stride2));  // Check general correctness",
                "    assert!(result <= id.as_usize());  // Ensure the result is not greater than the original id value",
                "    assert!(result >= 0);  // Ensure result is non-negative"
              ],
              "code": [
                "{",
                "    let mapper = IndexMapper { stride2: 3 };",
                "    let id = StateID(7);",
                "    let result = mapper.to_index(id);",
                "    assert_eq!(result, 0);  // 7 >> 3 equals 0",
                "    assert_eq!(result, (id.as_usize() >> mapper.stride2));  // Check general correctness",
                "    assert!(result <= id.as_usize());  // Ensure the result is not greater than the original id value",
                "    assert!(result >= 0);  // Ensure result is non-negative",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mapper = IndexMapper { stride2: 4 };",
                "    let id = StateID(15);",
                "    let result = mapper.to_index(id);",
                "}"
              ],
              "oracle": [
                "    let expected_result = id.as_usize() >> mapper.stride2;",
                "    assert_eq!(result, expected_result);",
                "    assert_eq!(mapper.to_index(StateID(0)), 0);",
                "    assert_eq!(mapper.to_index(StateID(16)), 1);",
                "    assert_eq!(mapper.to_index(StateID(31)), 1);",
                "    assert_eq!(mapper.to_index(StateID(32)), 2);",
                "    assert_eq!(mapper.to_index(StateID(63)), 3);"
              ],
              "code": [
                "{",
                "    let mapper = IndexMapper { stride2: 4 };",
                "    let id = StateID(15);",
                "    let result = mapper.to_index(id);",
                "    let expected_result = id.as_usize() >> mapper.stride2;",
                "    assert_eq!(result, expected_result);",
                "    assert_eq!(mapper.to_index(StateID(0)), 0);",
                "    assert_eq!(mapper.to_index(StateID(16)), 1);",
                "    assert_eq!(mapper.to_index(StateID(31)), 1);",
                "    assert_eq!(mapper.to_index(StateID(32)), 2);",
                "    assert_eq!(mapper.to_index(StateID(63)), 3);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mapper = IndexMapper { stride2: 5 };",
                "    let id = StateID(31);",
                "    let result = mapper.to_index(id);",
                "}"
              ],
              "oracle": [
                "    result == id.as_usize() >> mapper.stride2",
                "    result == 31 >> 5",
                "    result == 0",
                "    mapper.to_index(StateID(63)) == 63 >> 5",
                "    mapper.to_index(StateID(63)) == 1",
                "    mapper.to_index(StateID(1)) == 1 >> 5",
                "    mapper.to_index(StateID(1)) == 0",
                "    mapper.to_index(StateID(0)) == 0 >> 5",
                "    mapper.to_index(StateID(0)) == 0"
              ],
              "code": [
                "{",
                "    let mapper = IndexMapper { stride2: 5 };",
                "    let id = StateID(31);",
                "    let result = mapper.to_index(id);",
                "    result == id.as_usize() >> mapper.stride2",
                "    result == 31 >> 5",
                "    result == 0",
                "    mapper.to_index(StateID(63)) == 63 >> 5",
                "    mapper.to_index(StateID(63)) == 1",
                "    mapper.to_index(StateID(1)) == 1 >> 5",
                "    mapper.to_index(StateID(1)) == 0",
                "    mapper.to_index(StateID(0)) == 0 >> 5",
                "    mapper.to_index(StateID(0)) == 0",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mapper = IndexMapper { stride2: 10 };",
                "    let id = StateID(1023);",
                "    let result = mapper.to_index(id);",
                "}"
              ],
              "oracle": [
                "    result == (id.as_usize() >> mapper.stride2)",
                "    result == (1023 >> 10)",
                "    result == 0",
                "    result == mapper.to_index(StateID(1023));",
                "    mapper.stride2 == 10"
              ],
              "code": [
                "{",
                "    let mapper = IndexMapper { stride2: 10 };",
                "    let id = StateID(1023);",
                "    let result = mapper.to_index(id);",
                "    result == (id.as_usize() >> mapper.stride2)",
                "    result == (1023 >> 10)",
                "    result == 0",
                "    result == mapper.to_index(StateID(1023));",
                "    mapper.stride2 == 10",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mapper = IndexMapper { stride2: 15 };",
                "    let id = StateID(32767);",
                "    let result = mapper.to_index(id);",
                "}"
              ],
              "oracle": [
                "    let mapper = IndexMapper { stride2: 15 };",
                "    let id = StateID(32767);",
                "    let expected = id.as_usize() >> 15;",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let mapper = IndexMapper { stride2: 15 };",
                "    let id = StateID(32767);",
                "    let result = mapper.to_index(id);",
                "    let mapper = IndexMapper { stride2: 15 };",
                "    let id = StateID(32767);",
                "    let expected = id.as_usize() >> 15;",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mapper = IndexMapper { stride2: 20 };",
                "    let id = StateID(1048575);",
                "    let result = mapper.to_index(id);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 1023);"
              ],
              "code": [
                "{",
                "    let mapper = IndexMapper { stride2: 20 };",
                "    let id = StateID(1048575);",
                "    let result = mapper.to_index(id);",
                "    assert_eq!(result, 1023);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mapper = IndexMapper { stride2: 30 };",
                "    let id = StateID(1073741823);",
                "    let result = mapper.to_index(id);",
                "}"
              ],
              "oracle": [
                "    let expected_result = id.as_usize() >> mapper.stride2;",
                "    assert_eq!(result, expected_result);",
                "    assert_eq!(result, 0);",
                "    let mapper = IndexMapper { stride2: 0 };",
                "    let id = StateID(0);",
                "    let result = mapper.to_index(id);",
                "    assert_eq!(result, 0);",
                "    let id = StateID(1073741824);",
                "    let result = mapper.to_index(id);",
                "    assert_eq!(result, 1073741824);",
                "    let mapper = IndexMapper { stride2: 1 };",
                "    let id = StateID(15);",
                "    let result = mapper.to_index(id);",
                "    assert_eq!(result, 7);"
              ],
              "code": [
                "{",
                "    let mapper = IndexMapper { stride2: 30 };",
                "    let id = StateID(1073741823);",
                "    let result = mapper.to_index(id);",
                "    let expected_result = id.as_usize() >> mapper.stride2;",
                "    assert_eq!(result, expected_result);",
                "    assert_eq!(result, 0);",
                "    let mapper = IndexMapper { stride2: 0 };",
                "    let id = StateID(0);",
                "    let result = mapper.to_index(id);",
                "    assert_eq!(result, 0);",
                "    let id = StateID(1073741824);",
                "    let result = mapper.to_index(id);",
                "    assert_eq!(result, 1073741824);",
                "    let mapper = IndexMapper { stride2: 1 };",
                "    let id = StateID(15);",
                "    let result = mapper.to_index(id);",
                "    assert_eq!(result, 7);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mapper = IndexMapper { stride2: 32 };",
                "    let id = StateID(4294967295);",
                "    let result = mapper.to_index(id);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 4294967295 >> 32);",
                "    assert_eq!(result, 0);",
                "    assert_eq!(mapper.to_index(StateID(0)), 0);",
                "    assert_eq!(mapper.to_index(StateID(1)), 0);",
                "    assert_eq!(mapper.to_index(StateID(1073741823)), 0);",
                "    assert_eq!(mapper.to_index(StateID(2147483647)), 0);",
                "    assert_eq!(mapper.to_index(StateID(8589934591)), 0);"
              ],
              "code": [
                "{",
                "    let mapper = IndexMapper { stride2: 32 };",
                "    let id = StateID(4294967295);",
                "    let result = mapper.to_index(id);",
                "    assert_eq!(result, 4294967295 >> 32);",
                "    assert_eq!(result, 0);",
                "    assert_eq!(mapper.to_index(StateID(0)), 0);",
                "    assert_eq!(mapper.to_index(StateID(1)), 0);",
                "    assert_eq!(mapper.to_index(StateID(1073741823)), 0);",
                "    assert_eq!(mapper.to_index(StateID(2147483647)), 0);",
                "    assert_eq!(mapper.to_index(StateID(8589934591)), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}