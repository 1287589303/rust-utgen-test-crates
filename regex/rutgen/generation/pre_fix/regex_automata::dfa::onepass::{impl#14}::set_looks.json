{
  "name": "regex_automata::dfa::onepass::{impl#14}::set_looks",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/onepass.rs:2822:5:2827:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Epsilons(\n            (self.0 & Epsilons::SLOT_MASK)\n                | (u64::from(look_set.bits) & Epsilons::LOOK_MASK),\n        )\n"
      ],
      "input_infer": "self input of type Epsilons with value in the range [0, 0x000003FF_FFFFFC00] and look_set input of type LookSet with bits in the range [0, 1023] (0x000003FF)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let self_epsilons = Epsilons(0);",
                "    let look_set = LookSet { bits: 0 };",
                "    self_epsilons.set_looks(look_set);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(self_epsilons.set_looks(look_set), Epsilons(0));",
                "    assert_eq!(self_epsilons.set_looks(LookSet { bits: 1 }), Epsilons(1));",
                "    assert_eq!(self_epsilons.set_looks(LookSet { bits: 0b1111111111 }), Epsilons(0b000000000000000000000000000000000000000000));",
                "    assert_eq!(self_epsilons.set_looks(LookSet { bits: 0b0000000010 }), Epsilons(0b000000000000000000000000000000000000000010));",
                "    assert_eq!(self_epsilons.set_looks(LookSet { bits: 0b0000000011 }), Epsilons(0b000000000000000000000000000000000000000011));",
                "    assert_eq!(self_epsilons.set_looks(LookSet { bits: 0b1111111100 }), Epsilons(0b000000000000000000000000000000000000000000));",
                "    assert_eq!(Epsilons(0xFFFFFFFF_FFFFFFFF).set_looks(LookSet { bits: 0 }), Epsilons(0xFFFFFFFF_FFFFFFFF));",
                "    assert_eq!(Epsilons(0).set_looks(LookSet { bits: 0b1111111111 }), Epsilons(0b000000000000000000000000000000000000000000));",
                "    assert_eq!(Epsilons(0).set_looks(LookSet { bits: 0b0000000001 }), Epsilons(0b000000000000000000000000000000000000000001));",
                "    assert_eq!(Epsilons(0xFFFFFFFF_FFFFFFFF).set_looks(LookSet { bits: 0b1111111111 }), Epsilons(0xFFFFFFFF_FFFFFFFF));",
                "    assert_eq!(Epsilons(0b10101010101010101010).set_looks(LookSet { bits: 0b11110000 }), Epsilons(0b10101010101010100000));"
              ],
              "code": [
                "{",
                "    let self_epsilons = Epsilons(0);",
                "    let look_set = LookSet { bits: 0 };",
                "    self_epsilons.set_looks(look_set);",
                "    assert_eq!(self_epsilons.set_looks(look_set), Epsilons(0));",
                "    assert_eq!(self_epsilons.set_looks(LookSet { bits: 1 }), Epsilons(1));",
                "    assert_eq!(self_epsilons.set_looks(LookSet { bits: 0b1111111111 }), Epsilons(0b000000000000000000000000000000000000000000));",
                "    assert_eq!(self_epsilons.set_looks(LookSet { bits: 0b0000000010 }), Epsilons(0b000000000000000000000000000000000000000010));",
                "    assert_eq!(self_epsilons.set_looks(LookSet { bits: 0b0000000011 }), Epsilons(0b000000000000000000000000000000000000000011));",
                "    assert_eq!(self_epsilons.set_looks(LookSet { bits: 0b1111111100 }), Epsilons(0b000000000000000000000000000000000000000000));",
                "    assert_eq!(Epsilons(0xFFFFFFFF_FFFFFFFF).set_looks(LookSet { bits: 0 }), Epsilons(0xFFFFFFFF_FFFFFFFF));",
                "    assert_eq!(Epsilons(0).set_looks(LookSet { bits: 0b1111111111 }), Epsilons(0b000000000000000000000000000000000000000000));",
                "    assert_eq!(Epsilons(0).set_looks(LookSet { bits: 0b0000000001 }), Epsilons(0b000000000000000000000000000000000000000001));",
                "    assert_eq!(Epsilons(0xFFFFFFFF_FFFFFFFF).set_looks(LookSet { bits: 0b1111111111 }), Epsilons(0xFFFFFFFF_FFFFFFFF));",
                "    assert_eq!(Epsilons(0b10101010101010101010).set_looks(LookSet { bits: 0b11110000 }), Epsilons(0b10101010101010100000));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let self_epsilons = Epsilons(0);",
                "    let look_set = LookSet { bits: 1023 };",
                "    self_epsilons.set_looks(look_set);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(self_epsilons.set_looks(look_set), Epsilons(1023));",
                "    assert_eq!(self_epsilons.set_looks(LookSet { bits: 0 }), Epsilons(0));",
                "    assert_eq!(self_epsilons.set_looks(LookSet { bits: 2047 }), Epsilons(1023));",
                "    assert_eq!(self_epsilons.set_looks(LookSet { bits: 511 }), Epsilons(511));",
                "    assert_eq!(self_epsilons.set_looks(LookSet { bits: 1024 }), Epsilons(1023));",
                "    assert_eq!(self_epsilons.set_looks(LookSet { bits: 0xFFFFFFFF }), Epsilons(1023));",
                "    assert_eq!(self_epsilons.set_looks(LookSet { bits: 1 }), Epsilons(1));",
                "    assert_eq!(self_epsilons.set_looks(LookSet { bits: 1025 }), Epsilons(1023));",
                "    assert_eq!(self_epsilons.set_looks(LookSet { bits: 255 }), Epsilons(255));",
                "    assert_eq!(self_epsilons.set_looks(LookSet { bits: 768 }), Epsilons(767));"
              ],
              "code": [
                "{",
                "    let self_epsilons = Epsilons(0);",
                "    let look_set = LookSet { bits: 1023 };",
                "    self_epsilons.set_looks(look_set);",
                "    assert_eq!(self_epsilons.set_looks(look_set), Epsilons(1023));",
                "    assert_eq!(self_epsilons.set_looks(LookSet { bits: 0 }), Epsilons(0));",
                "    assert_eq!(self_epsilons.set_looks(LookSet { bits: 2047 }), Epsilons(1023));",
                "    assert_eq!(self_epsilons.set_looks(LookSet { bits: 511 }), Epsilons(511));",
                "    assert_eq!(self_epsilons.set_looks(LookSet { bits: 1024 }), Epsilons(1023));",
                "    assert_eq!(self_epsilons.set_looks(LookSet { bits: 0xFFFFFFFF }), Epsilons(1023));",
                "    assert_eq!(self_epsilons.set_looks(LookSet { bits: 1 }), Epsilons(1));",
                "    assert_eq!(self_epsilons.set_looks(LookSet { bits: 1025 }), Epsilons(1023));",
                "    assert_eq!(self_epsilons.set_looks(LookSet { bits: 255 }), Epsilons(255));",
                "    assert_eq!(self_epsilons.set_looks(LookSet { bits: 768 }), Epsilons(767));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let self_epsilons = Epsilons(0);",
                "    let look_set = LookSet { bits: 512 };",
                "    self_epsilons.set_looks(look_set);",
                "}"
              ],
              "oracle": [
                "    let self_epsilons = Epsilons(0);",
                "    let look_set = LookSet { bits: 512 };",
                "    let result = self_epsilons.set_looks(look_set);",
                "    assert_eq!(result, Epsilons(512));",
                "    ",
                "    let self_epsilons = Epsilons(1024);",
                "    let look_set = LookSet { bits: 256 };",
                "    let result = self_epsilons.set_looks(look_set);",
                "    assert_eq!(result, Epsilons(1280));",
                "    ",
                "    let self_epsilons = Epsilons(2048);",
                "    let look_set = LookSet { bits: 0 };",
                "    let result = self_epsilons.set_looks(look_set);",
                "    assert_eq!(result, Epsilons(2048));",
                "    ",
                "    let self_epsilons = Epsilons(0xFFFFFFFFFFFFFFFF);",
                "    let look_set = LookSet { bits: 1024 };",
                "    let result = self_epsilons.set_looks(look_set);",
                "    assert_eq!(result, Epsilons(0xFFFFFFFFFFFFFFFF & Epsilons::SLOT_MASK | 1024));",
                "    ",
                "    let self_epsilons = Epsilons(0);",
                "    let look_set = LookSet { bits: 1023 };",
                "    let result = self_epsilons.set_looks(look_set);",
                "    assert_eq!(result, Epsilons(1023));"
              ],
              "code": [
                "{",
                "    let self_epsilons = Epsilons(0);",
                "    let look_set = LookSet { bits: 512 };",
                "    self_epsilons.set_looks(look_set);",
                "    let self_epsilons = Epsilons(0);",
                "    let look_set = LookSet { bits: 512 };",
                "    let result = self_epsilons.set_looks(look_set);",
                "    assert_eq!(result, Epsilons(512));",
                "    ",
                "    let self_epsilons = Epsilons(1024);",
                "    let look_set = LookSet { bits: 256 };",
                "    let result = self_epsilons.set_looks(look_set);",
                "    assert_eq!(result, Epsilons(1280));",
                "    ",
                "    let self_epsilons = Epsilons(2048);",
                "    let look_set = LookSet { bits: 0 };",
                "    let result = self_epsilons.set_looks(look_set);",
                "    assert_eq!(result, Epsilons(2048));",
                "    ",
                "    let self_epsilons = Epsilons(0xFFFFFFFFFFFFFFFF);",
                "    let look_set = LookSet { bits: 1024 };",
                "    let result = self_epsilons.set_looks(look_set);",
                "    assert_eq!(result, Epsilons(0xFFFFFFFFFFFFFFFF & Epsilons::SLOT_MASK | 1024));",
                "    ",
                "    let self_epsilons = Epsilons(0);",
                "    let look_set = LookSet { bits: 1023 };",
                "    let result = self_epsilons.set_looks(look_set);",
                "    assert_eq!(result, Epsilons(1023));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let self_epsilons = Epsilons(0x000003FF_FFFFFC00);",
                "    let look_set = LookSet { bits: 0 };",
                "    self_epsilons.set_looks(look_set);",
                "}"
              ],
              "oracle": [
                "    let self_epsilons = Epsilons(0x000003FF_FFFFFC00);",
                "    let look_set = LookSet { bits: 0 };",
                "    let result = self_epsilons.set_looks(look_set);",
                "    assert_eq!(result, Epsilons(0x000003FF_FFFFFC00));",
                "    ",
                "    let self_epsilons = Epsilons(0);",
                "    let look_set = LookSet { bits: 0xFFFFFFFF };",
                "    let result = self_epsilons.set_looks(look_set);",
                "    assert_eq!(result, Epsilons(0x00000000));",
                "    ",
                "    let self_epsilons = Epsilons(0x1);",
                "    let look_set = LookSet { bits: 0x00000001 };",
                "    let result = self_epsilons.set_looks(look_set);",
                "    assert_eq!(result, Epsilons(0x00000001));",
                "    ",
                "    let self_epsilons = Epsilons(0xFFFFFFFFFFFFFFFF);",
                "    let look_set = LookSet { bits: 0x3FF };",
                "    let result = self_epsilons.set_looks(look_set);",
                "    assert_eq!(result, Epsilons(0x000003FFFFFFFFFF));",
                "    ",
                "    let self_epsilons = Epsilons(0x00000000_00000000);",
                "    let look_set = LookSet { bits: 0x00000000 };",
                "    let result = self_epsilons.set_looks(look_set);",
                "    assert_eq!(result, Epsilons(0x00000000_00000000));"
              ],
              "code": [
                "{",
                "    let self_epsilons = Epsilons(0x000003FF_FFFFFC00);",
                "    let look_set = LookSet { bits: 0 };",
                "    self_epsilons.set_looks(look_set);",
                "    let self_epsilons = Epsilons(0x000003FF_FFFFFC00);",
                "    let look_set = LookSet { bits: 0 };",
                "    let result = self_epsilons.set_looks(look_set);",
                "    assert_eq!(result, Epsilons(0x000003FF_FFFFFC00));",
                "    ",
                "    let self_epsilons = Epsilons(0);",
                "    let look_set = LookSet { bits: 0xFFFFFFFF };",
                "    let result = self_epsilons.set_looks(look_set);",
                "    assert_eq!(result, Epsilons(0x00000000));",
                "    ",
                "    let self_epsilons = Epsilons(0x1);",
                "    let look_set = LookSet { bits: 0x00000001 };",
                "    let result = self_epsilons.set_looks(look_set);",
                "    assert_eq!(result, Epsilons(0x00000001));",
                "    ",
                "    let self_epsilons = Epsilons(0xFFFFFFFFFFFFFFFF);",
                "    let look_set = LookSet { bits: 0x3FF };",
                "    let result = self_epsilons.set_looks(look_set);",
                "    assert_eq!(result, Epsilons(0x000003FFFFFFFFFF));",
                "    ",
                "    let self_epsilons = Epsilons(0x00000000_00000000);",
                "    let look_set = LookSet { bits: 0x00000000 };",
                "    let result = self_epsilons.set_looks(look_set);",
                "    assert_eq!(result, Epsilons(0x00000000_00000000));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let self_epsilons = Epsilons(0x000003FF_FFFFFC00);",
                "    let look_set = LookSet { bits: 512 };",
                "    self_epsilons.set_looks(look_set);",
                "}"
              ],
              "oracle": [
                "    let self_epsilons = Epsilons(0x000003FF_FFFFFC00);",
                "    let look_set = LookSet { bits: 512 };",
                "    let expected_result = Epsilons(0x000003FF_FFFFFC00 | (u64::from(look_set.bits) & Epsilons::LOOK_MASK));",
                "    assert_eq!(self_epsilons.set_looks(look_set), expected_result);"
              ],
              "code": [
                "{",
                "    let self_epsilons = Epsilons(0x000003FF_FFFFFC00);",
                "    let look_set = LookSet { bits: 512 };",
                "    self_epsilons.set_looks(look_set);",
                "    let self_epsilons = Epsilons(0x000003FF_FFFFFC00);",
                "    let look_set = LookSet { bits: 512 };",
                "    let expected_result = Epsilons(0x000003FF_FFFFFC00 | (u64::from(look_set.bits) & Epsilons::LOOK_MASK));",
                "    assert_eq!(self_epsilons.set_looks(look_set), expected_result);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}