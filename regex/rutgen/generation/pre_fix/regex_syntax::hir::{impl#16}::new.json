{
  "name": "regex_syntax::hir::{impl#16}::new",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:1313:5:1315:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "start: any valid char, end: any valid char, start <= end; edge cases: start = end, start = MIN_CHAR, end = MAX_CHAR\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ClassUnicodeRange::new('a', 'z');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(range.start(), 'a');",
                "    assert_eq!(range.end(), 'z');",
                "    assert_eq!(range.len(), 26);",
                "    assert!(range.start() <= range.end());",
                "    let invalid_range = ClassUnicodeRange::new('z', 'a');",
                "    assert_eq!(invalid_range.start(), 'a');",
                "    assert_eq!(invalid_range.end(), 'z');"
              ],
              "code": [
                "{",
                "    let range = ClassUnicodeRange::new('a', 'z');",
                "    assert_eq!(range.start(), 'a');",
                "    assert_eq!(range.end(), 'z');",
                "    assert_eq!(range.len(), 26);",
                "    assert!(range.start() <= range.end());",
                "    let invalid_range = ClassUnicodeRange::new('z', 'a');",
                "    assert_eq!(invalid_range.start(), 'a');",
                "    assert_eq!(invalid_range.end(), 'z');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ClassUnicodeRange::new('a', 'a');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(range.start(), 'a');",
                "    assert_eq!(range.end(), 'a');",
                "    assert_eq!(range.len(), 1);",
                "    ",
                "    let range2 = ClassUnicodeRange::new('a', 'z');",
                "    assert_eq!(range2.start(), 'a');",
                "    assert_eq!(range2.end(), 'z');",
                "    assert_eq!(range2.len(), 26);",
                "    ",
                "    let range3 = ClassUnicodeRange::new('z', 'a');",
                "    assert_eq!(range3.start(), 'a');",
                "    assert_eq!(range3.end(), 'z');",
                "    assert_eq!(range3.len(), 26);",
                "    ",
                "    let range4 = ClassUnicodeRange::new('\\u{0041}', '\\u{005A}');",
                "    assert_eq!(range4.start(), '\\u{0041}');",
                "    assert_eq!(range4.end(), '\\u{005A}');",
                "    assert_eq!(range4.len(), 26);"
              ],
              "code": [
                "{",
                "    let range = ClassUnicodeRange::new('a', 'a');",
                "    assert_eq!(range.start(), 'a');",
                "    assert_eq!(range.end(), 'a');",
                "    assert_eq!(range.len(), 1);",
                "    ",
                "    let range2 = ClassUnicodeRange::new('a', 'z');",
                "    assert_eq!(range2.start(), 'a');",
                "    assert_eq!(range2.end(), 'z');",
                "    assert_eq!(range2.len(), 26);",
                "    ",
                "    let range3 = ClassUnicodeRange::new('z', 'a');",
                "    assert_eq!(range3.start(), 'a');",
                "    assert_eq!(range3.end(), 'z');",
                "    assert_eq!(range3.len(), 26);",
                "    ",
                "    let range4 = ClassUnicodeRange::new('\\u{0041}', '\\u{005A}');",
                "    assert_eq!(range4.start(), '\\u{0041}');",
                "    assert_eq!(range4.end(), '\\u{005A}');",
                "    assert_eq!(range4.len(), 26);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ClassUnicodeRange::new(char::MIN, char::MIN);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(range.start(), char::MIN);",
                "    assert_eq!(range.end(), char::MIN);",
                "    assert_eq!(range.len(), 1);"
              ],
              "code": [
                "{",
                "    let range = ClassUnicodeRange::new(char::MIN, char::MIN);",
                "    assert_eq!(range.start(), char::MIN);",
                "    assert_eq!(range.end(), char::MIN);",
                "    assert_eq!(range.len(), 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ClassUnicodeRange::new(char::MAX, char::MAX);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(range.start(), char::MAX);",
                "    assert_eq!(range.end(), char::MAX);",
                "    assert!(range.len() > 0);"
              ],
              "code": [
                "{",
                "    let range = ClassUnicodeRange::new(char::MAX, char::MAX);",
                "    assert_eq!(range.start(), char::MAX);",
                "    assert_eq!(range.end(), char::MAX);",
                "    assert!(range.len() > 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ClassUnicodeRange::new(char::MIN, char::MAX);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(range.start(), char::MIN);",
                "    assert_eq!(range.end(), char::MAX);",
                "    assert!(range.len() > 0);"
              ],
              "code": [
                "{",
                "    let range = ClassUnicodeRange::new(char::MIN, char::MAX);",
                "    assert_eq!(range.start(), char::MIN);",
                "    assert_eq!(range.end(), char::MAX);",
                "    assert!(range.len() > 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ClassUnicodeRange::new('z', 'a');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(range.start(), 'a');",
                "    assert_eq!(range.end(), 'z');",
                "    assert_eq!(range.len(), 26);"
              ],
              "code": [
                "{",
                "    let range = ClassUnicodeRange::new('z', 'a');",
                "    assert_eq!(range.start(), 'a');",
                "    assert_eq!(range.end(), 'z');",
                "    assert_eq!(range.len(), 26);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}