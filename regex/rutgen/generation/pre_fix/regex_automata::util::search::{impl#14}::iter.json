{
  "name": "regex_automata::util::search::{impl#14}::iter",
  "mod_info": {
    "name": "util::search",
    "loc": "regex-automata/src/util/mod.rs:53:1:53:23"
  },
  "visible": true,
  "loc": "regex-automata/src/util/search.rs:1321:5:1323:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: PatternSetIter { it: self.which.iter().enumerate() }\n"
      ],
      "input_infer": "valid capacity values: 0 to max usize; valid PatternID values: valid indices within capacity; ensure 'which' is initialized to match capacity values; ensure 'len' reflects the number of true values present in 'which'\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [
            "#[cfg(test)]",
            "fn test_iter_empty() {",
            "    let capacity = 0;",
            "    let pattern_set = PatternSet::new(capacity);",
            "    let _iter = pattern_set.iter();",
            "}",
            "",
            "#[cfg(test)]",
            "fn test_iter_single_true() {",
            "    let capacity = 1;",
            "    let mut pattern_set = PatternSet::new(capacity);",
            "    pattern_set.insert(0.into());",
            "    let _iter = pattern_set.iter();",
            "}",
            "",
            "#[cfg(test)]",
            "fn test_iter_multiple_true() {",
            "    let capacity = 5;",
            "    let mut pattern_set = PatternSet::new(capacity);",
            "    pattern_set.insert(0.into());",
            "    pattern_set.insert(2.into());",
            "    let _iter = pattern_set.iter();",
            "}",
            "",
            "#[cfg(test)]",
            "fn test_iter_full_capacity() {",
            "    let capacity = 10;",
            "    let mut pattern_set = PatternSet::new(capacity);",
            "    for i in 0..capacity {",
            "        pattern_set.insert(i.into());",
            "    }",
            "    let _iter = pattern_set.iter();",
            "}",
            "",
            "#[cfg(test)]",
            "fn test_iter_no_patterns() {",
            "    let capacity = 3;",
            "    let pattern_set = PatternSet::new(capacity);",
            "    let _iter = pattern_set.iter();",
            "}"
          ],
          "chain_tests": []
        }
      ]
    }
  ]
}