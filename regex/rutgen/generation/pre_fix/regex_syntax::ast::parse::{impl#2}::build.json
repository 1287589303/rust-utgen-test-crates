{
  "name": "regex_syntax::ast::parse::{impl#2}::build",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": true,
  "loc": "regex-syntax/src/ast/parse.rs:148:5:163:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Parser {\n            pos: Cell::new(Position { offset: 0, line: 1, column: 1 }),\n            capture_index: Cell::new(0),\n            nest_limit: self.nest_limit,\n            octal: self.octal,\n            empty_min_range: self.empty_min_range,\n            initial_ignore_whitespace: self.ignore_whitespace,\n            ignore_whitespace: Cell::new(self.ignore_whitespace),\n            comments: RefCell::new(vec![]),\n            stack_group: RefCell::new(vec![]),\n            stack_class: RefCell::new(vec![]),\n            capture_names: RefCell::new(vec![]),\n            scratch: RefCell::new(String::new()),\n        }\n"
      ],
      "input_infer": "ignore_whitespace: {true, false}, nest_limit: {0, 1, 100}, octal: {true, false}, empty_min_range: {true, false}\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let builder = ParserBuilder {",
                "        ignore_whitespace: false,",
                "        nest_limit: 0,",
                "        octal: false,",
                "        empty_min_range: false,",
                "    };",
                "    let _parser = builder.build();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_parser.pos.get(), Position { offset: 0, line: 1, column: 1 });",
                "    assert_eq!(_parser.capture_index.get(), 0);",
                "    assert_eq!(_parser.nest_limit, 0);",
                "    assert_eq!(_parser.octal, false);",
                "    assert_eq!(_parser.empty_min_range, false);",
                "    assert_eq!(_parser.initial_ignore_whitespace, false);",
                "    assert_eq!(_parser.ignore_whitespace.get(), false);",
                "    assert_eq!(_parser.comments.borrow().len(), 0);",
                "    assert_eq!(_parser.stack_group.borrow().len(), 0);",
                "    assert_eq!(_parser.stack_class.borrow().len(), 0);",
                "    assert_eq!(_parser.capture_names.borrow().len(), 0);",
                "    assert_eq!(_parser.scratch.borrow().as_str(), \"\");"
              ],
              "code": [
                "{",
                "    let builder = ParserBuilder {",
                "        ignore_whitespace: false,",
                "        nest_limit: 0,",
                "        octal: false,",
                "        empty_min_range: false,",
                "    };",
                "    let _parser = builder.build();",
                "    assert_eq!(_parser.pos.get(), Position { offset: 0, line: 1, column: 1 });",
                "    assert_eq!(_parser.capture_index.get(), 0);",
                "    assert_eq!(_parser.nest_limit, 0);",
                "    assert_eq!(_parser.octal, false);",
                "    assert_eq!(_parser.empty_min_range, false);",
                "    assert_eq!(_parser.initial_ignore_whitespace, false);",
                "    assert_eq!(_parser.ignore_whitespace.get(), false);",
                "    assert_eq!(_parser.comments.borrow().len(), 0);",
                "    assert_eq!(_parser.stack_group.borrow().len(), 0);",
                "    assert_eq!(_parser.stack_class.borrow().len(), 0);",
                "    assert_eq!(_parser.capture_names.borrow().len(), 0);",
                "    assert_eq!(_parser.scratch.borrow().as_str(), \"\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let builder = ParserBuilder {",
                "        ignore_whitespace: true,",
                "        nest_limit: 1,",
                "        octal: false,",
                "        empty_min_range: false,",
                "    };",
                "    let _parser = builder.build();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_parser.pos.get(), Position { offset: 0, line: 1, column: 1 });",
                "    assert_eq!(_parser.capture_index.get(), 0);",
                "    assert_eq!(_parser.nest_limit, 1);",
                "    assert_eq!(_parser.octal, false);",
                "    assert_eq!(_parser.empty_min_range, false);",
                "    assert_eq!(_parser.initial_ignore_whitespace, true);",
                "    assert_eq!(_parser.ignore_whitespace.get(), true);",
                "    assert_eq!(_parser.comments.borrow().as_slice(), &[]);",
                "    assert_eq!(_parser.stack_group.borrow().as_slice(), &[]);",
                "    assert_eq!(_parser.stack_class.borrow().as_slice(), &[]);",
                "    assert_eq!(_parser.capture_names.borrow().as_slice(), &[]);",
                "    assert_eq!(_parser.scratch.borrow().as_str(), \"\");"
              ],
              "code": [
                "{",
                "    let builder = ParserBuilder {",
                "        ignore_whitespace: true,",
                "        nest_limit: 1,",
                "        octal: false,",
                "        empty_min_range: false,",
                "    };",
                "    let _parser = builder.build();",
                "    assert_eq!(_parser.pos.get(), Position { offset: 0, line: 1, column: 1 });",
                "    assert_eq!(_parser.capture_index.get(), 0);",
                "    assert_eq!(_parser.nest_limit, 1);",
                "    assert_eq!(_parser.octal, false);",
                "    assert_eq!(_parser.empty_min_range, false);",
                "    assert_eq!(_parser.initial_ignore_whitespace, true);",
                "    assert_eq!(_parser.ignore_whitespace.get(), true);",
                "    assert_eq!(_parser.comments.borrow().as_slice(), &[]);",
                "    assert_eq!(_parser.stack_group.borrow().as_slice(), &[]);",
                "    assert_eq!(_parser.stack_class.borrow().as_slice(), &[]);",
                "    assert_eq!(_parser.capture_names.borrow().as_slice(), &[]);",
                "    assert_eq!(_parser.scratch.borrow().as_str(), \"\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let builder = ParserBuilder {",
                "        ignore_whitespace: false,",
                "        nest_limit: 100,",
                "        octal: false,",
                "        empty_min_range: false,",
                "    };",
                "    let _parser = builder.build();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_parser.pos.get(), Position { offset: 0, line: 1, column: 1 });",
                "    assert_eq!(_parser.capture_index.get(), 0);",
                "    assert_eq!(_parser.nest_limit, 100);",
                "    assert_eq!(_parser.octal, false);",
                "    assert_eq!(_parser.empty_min_range, false);",
                "    assert_eq!(_parser.initial_ignore_whitespace, false);",
                "    assert_eq!(_parser.ignore_whitespace.get(), false);",
                "    assert_eq!(_parser.comments.borrow().len(), 0);",
                "    assert_eq!(_parser.stack_group.borrow().len(), 0);",
                "    assert_eq!(_parser.stack_class.borrow().len(), 0);",
                "    assert_eq!(_parser.capture_names.borrow().len(), 0);",
                "    assert_eq!(_parser.scratch.borrow().len(), 0);"
              ],
              "code": [
                "{",
                "    let builder = ParserBuilder {",
                "        ignore_whitespace: false,",
                "        nest_limit: 100,",
                "        octal: false,",
                "        empty_min_range: false,",
                "    };",
                "    let _parser = builder.build();",
                "    assert_eq!(_parser.pos.get(), Position { offset: 0, line: 1, column: 1 });",
                "    assert_eq!(_parser.capture_index.get(), 0);",
                "    assert_eq!(_parser.nest_limit, 100);",
                "    assert_eq!(_parser.octal, false);",
                "    assert_eq!(_parser.empty_min_range, false);",
                "    assert_eq!(_parser.initial_ignore_whitespace, false);",
                "    assert_eq!(_parser.ignore_whitespace.get(), false);",
                "    assert_eq!(_parser.comments.borrow().len(), 0);",
                "    assert_eq!(_parser.stack_group.borrow().len(), 0);",
                "    assert_eq!(_parser.stack_class.borrow().len(), 0);",
                "    assert_eq!(_parser.capture_names.borrow().len(), 0);",
                "    assert_eq!(_parser.scratch.borrow().len(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let builder = ParserBuilder {",
                "        ignore_whitespace: false,",
                "        nest_limit: 0,",
                "        octal: true,",
                "        empty_min_range: false,",
                "    };",
                "    let _parser = builder.build();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_parser.pos.get(), Position { offset: 0, line: 1, column: 1 });",
                "    assert_eq!(_parser.capture_index.get(), 0);",
                "    assert_eq!(_parser.nest_limit, 0);",
                "    assert_eq!(_parser.octal, true);",
                "    assert_eq!(_parser.empty_min_range, false);",
                "    assert_eq!(_parser.initial_ignore_whitespace, false);",
                "    assert_eq!(_parser.ignore_whitespace.get(), false);",
                "    assert!(matches!(_parser.comments.borrow().as_slice(), &[]));",
                "    assert!(matches!(_parser.stack_group.borrow().as_slice(), &[]));",
                "    assert!(matches!(_parser.stack_class.borrow().as_slice(), &[]));",
                "    assert!(matches!(_parser.capture_names.borrow().as_slice(), &[]));",
                "    assert_eq!(_parser.scratch.borrow().as_str(), \"\");"
              ],
              "code": [
                "{",
                "    let builder = ParserBuilder {",
                "        ignore_whitespace: false,",
                "        nest_limit: 0,",
                "        octal: true,",
                "        empty_min_range: false,",
                "    };",
                "    let _parser = builder.build();",
                "    assert_eq!(_parser.pos.get(), Position { offset: 0, line: 1, column: 1 });",
                "    assert_eq!(_parser.capture_index.get(), 0);",
                "    assert_eq!(_parser.nest_limit, 0);",
                "    assert_eq!(_parser.octal, true);",
                "    assert_eq!(_parser.empty_min_range, false);",
                "    assert_eq!(_parser.initial_ignore_whitespace, false);",
                "    assert_eq!(_parser.ignore_whitespace.get(), false);",
                "    assert!(matches!(_parser.comments.borrow().as_slice(), &[]));",
                "    assert!(matches!(_parser.stack_group.borrow().as_slice(), &[]));",
                "    assert!(matches!(_parser.stack_class.borrow().as_slice(), &[]));",
                "    assert!(matches!(_parser.capture_names.borrow().as_slice(), &[]));",
                "    assert_eq!(_parser.scratch.borrow().as_str(), \"\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let builder = ParserBuilder {",
                "        ignore_whitespace: false,",
                "        nest_limit: 0,",
                "        octal: false,",
                "        empty_min_range: true,",
                "    };",
                "    let _parser = builder.build();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_parser.pos.get(), Position { offset: 0, line: 1, column: 1 });",
                "    assert_eq!(_parser.capture_index.get(), 0);",
                "    assert_eq!(_parser.nest_limit, 0);",
                "    assert_eq!(_parser.octal, false);",
                "    assert_eq!(_parser.empty_min_range, true);",
                "    assert_eq!(_parser.initial_ignore_whitespace, false);",
                "    assert_eq!(_parser.ignore_whitespace.get(), false);",
                "    assert_eq!(_parser.comments.borrow().len(), 0);",
                "    assert_eq!(_parser.stack_group.borrow().len(), 0);",
                "    assert_eq!(_parser.stack_class.borrow().len(), 0);",
                "    assert_eq!(_parser.capture_names.borrow().len(), 0);",
                "    assert_eq!(_parser.scratch.borrow().as_str(), \"\");"
              ],
              "code": [
                "{",
                "    let builder = ParserBuilder {",
                "        ignore_whitespace: false,",
                "        nest_limit: 0,",
                "        octal: false,",
                "        empty_min_range: true,",
                "    };",
                "    let _parser = builder.build();",
                "    assert_eq!(_parser.pos.get(), Position { offset: 0, line: 1, column: 1 });",
                "    assert_eq!(_parser.capture_index.get(), 0);",
                "    assert_eq!(_parser.nest_limit, 0);",
                "    assert_eq!(_parser.octal, false);",
                "    assert_eq!(_parser.empty_min_range, true);",
                "    assert_eq!(_parser.initial_ignore_whitespace, false);",
                "    assert_eq!(_parser.ignore_whitespace.get(), false);",
                "    assert_eq!(_parser.comments.borrow().len(), 0);",
                "    assert_eq!(_parser.stack_group.borrow().len(), 0);",
                "    assert_eq!(_parser.stack_class.borrow().len(), 0);",
                "    assert_eq!(_parser.capture_names.borrow().len(), 0);",
                "    assert_eq!(_parser.scratch.borrow().as_str(), \"\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let builder = ParserBuilder {",
                "        ignore_whitespace: true,",
                "        nest_limit: 100,",
                "        octal: true,",
                "        empty_min_range: true,",
                "    };",
                "    let _parser = builder.build();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_parser.pos.get(), Position { offset: 0, line: 1, column: 1 });",
                "    assert_eq!(_parser.capture_index.get(), 0);",
                "    assert_eq!(_parser.nest_limit, 100);",
                "    assert_eq!(_parser.octal, true);",
                "    assert_eq!(_parser.empty_min_range, true);",
                "    assert_eq!(_parser.initial_ignore_whitespace, true);",
                "    assert!(matches!(&_parser.ignore_whitespace.get(), true));",
                "    assert_eq!(_parser.comments.borrow().len(), 0);",
                "    assert_eq!(_parser.stack_group.borrow().len(), 0);",
                "    assert_eq!(_parser.stack_class.borrow().len(), 0);",
                "    assert_eq!(_parser.capture_names.borrow().len(), 0);",
                "    assert_eq!(_parser.scratch.borrow().as_str(), \"\");"
              ],
              "code": [
                "{",
                "    let builder = ParserBuilder {",
                "        ignore_whitespace: true,",
                "        nest_limit: 100,",
                "        octal: true,",
                "        empty_min_range: true,",
                "    };",
                "    let _parser = builder.build();",
                "    assert_eq!(_parser.pos.get(), Position { offset: 0, line: 1, column: 1 });",
                "    assert_eq!(_parser.capture_index.get(), 0);",
                "    assert_eq!(_parser.nest_limit, 100);",
                "    assert_eq!(_parser.octal, true);",
                "    assert_eq!(_parser.empty_min_range, true);",
                "    assert_eq!(_parser.initial_ignore_whitespace, true);",
                "    assert!(matches!(&_parser.ignore_whitespace.get(), true));",
                "    assert_eq!(_parser.comments.borrow().len(), 0);",
                "    assert_eq!(_parser.stack_group.borrow().len(), 0);",
                "    assert_eq!(_parser.stack_class.borrow().len(), 0);",
                "    assert_eq!(_parser.capture_names.borrow().len(), 0);",
                "    assert_eq!(_parser.scratch.borrow().as_str(), \"\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let builder = ParserBuilder {",
                "        ignore_whitespace: false,",
                "        nest_limit: 0,",
                "        octal: false,",
                "        empty_min_range: false,",
                "    };",
                "    let _parser = builder.build();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_parser.pos.get(), Position { offset: 0, line: 1, column: 1 });",
                "    assert_eq!(_parser.capture_index.get(), 0);",
                "    assert_eq!(_parser.nest_limit, 0);",
                "    assert_eq!(_parser.octal, false);",
                "    assert_eq!(_parser.empty_min_range, false);",
                "    assert_eq!(_parser.initial_ignore_whitespace, false);",
                "    assert_eq!(_parser.ignore_whitespace.get(), false);",
                "    assert_eq!(_parser.comments.borrow().len(), 0);",
                "    assert_eq!(_parser.stack_group.borrow().len(), 0);",
                "    assert_eq!(_parser.stack_class.borrow().len(), 0);",
                "    assert_eq!(_parser.capture_names.borrow().len(), 0);",
                "    assert_eq!(_parser.scratch.borrow().as_str(), \"\");"
              ],
              "code": [
                "{",
                "    let builder = ParserBuilder {",
                "        ignore_whitespace: false,",
                "        nest_limit: 0,",
                "        octal: false,",
                "        empty_min_range: false,",
                "    };",
                "    let _parser = builder.build();",
                "    assert_eq!(_parser.pos.get(), Position { offset: 0, line: 1, column: 1 });",
                "    assert_eq!(_parser.capture_index.get(), 0);",
                "    assert_eq!(_parser.nest_limit, 0);",
                "    assert_eq!(_parser.octal, false);",
                "    assert_eq!(_parser.empty_min_range, false);",
                "    assert_eq!(_parser.initial_ignore_whitespace, false);",
                "    assert_eq!(_parser.ignore_whitespace.get(), false);",
                "    assert_eq!(_parser.comments.borrow().len(), 0);",
                "    assert_eq!(_parser.stack_group.borrow().len(), 0);",
                "    assert_eq!(_parser.stack_class.borrow().len(), 0);",
                "    assert_eq!(_parser.capture_names.borrow().len(), 0);",
                "    assert_eq!(_parser.scratch.borrow().as_str(), \"\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}