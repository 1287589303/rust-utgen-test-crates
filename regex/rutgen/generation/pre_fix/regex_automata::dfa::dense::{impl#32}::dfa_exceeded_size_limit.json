{
  "name": "regex_automata::dfa::dense::{impl#32}::dfa_exceeded_size_limit",
  "mod_info": {
    "name": "dfa::dense",
    "loc": "regex-automata/src/dfa/mod.rs:337:1:337:15"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/dense.rs:5098:5:5100:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: BuildError { kind: BuildErrorKind::DFAExceededSizeLimit { limit } }\n"
      ],
      "input_infer": "limit: 0, 1, 2147483647, (usize::MAX)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let limit = 0;",
                "    let result = BuildError::dfa_exceeded_size_limit(limit);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind(), &BuildErrorKind::DFAExceededSizeLimit { limit: 0 });"
              ],
              "code": [
                "{",
                "    let limit = 0;",
                "    let result = BuildError::dfa_exceeded_size_limit(limit);",
                "    assert_eq!(result.kind(), &BuildErrorKind::DFAExceededSizeLimit { limit: 0 });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let limit = 1;",
                "    let result = BuildError::dfa_exceeded_size_limit(limit);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind(), &BuildErrorKind::DFAExceededSizeLimit { limit: 1 });"
              ],
              "code": [
                "{",
                "    let limit = 1;",
                "    let result = BuildError::dfa_exceeded_size_limit(limit);",
                "    assert_eq!(result.kind(), &BuildErrorKind::DFAExceededSizeLimit { limit: 1 });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let limit = 2147483647;",
                "    let result = BuildError::dfa_exceeded_size_limit(limit);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind(), &BuildErrorKind::DFAExceededSizeLimit { limit });",
                "    assert!(matches!(result.kind(), BuildErrorKind::DFAExceededSizeLimit { limit: 2147483647 }));",
                "    assert!(matches!(result, BuildError { kind: BuildErrorKind::DFAExceededSizeLimit { limit } }));"
              ],
              "code": [
                "{",
                "    let limit = 2147483647;",
                "    let result = BuildError::dfa_exceeded_size_limit(limit);",
                "    assert_eq!(result.kind(), &BuildErrorKind::DFAExceededSizeLimit { limit });",
                "    assert!(matches!(result.kind(), BuildErrorKind::DFAExceededSizeLimit { limit: 2147483647 }));",
                "    assert!(matches!(result, BuildError { kind: BuildErrorKind::DFAExceededSizeLimit { limit } }));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let limit = std::usize::MAX;",
                "    let result = BuildError::dfa_exceeded_size_limit(limit);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind(), &BuildErrorKind::DFAExceededSizeLimit { limit });"
              ],
              "code": [
                "{",
                "    let limit = std::usize::MAX;",
                "    let result = BuildError::dfa_exceeded_size_limit(limit);",
                "    assert_eq!(result.kind(), &BuildErrorKind::DFAExceededSizeLimit { limit });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}