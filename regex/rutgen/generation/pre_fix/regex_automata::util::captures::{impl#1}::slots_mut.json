{
  "name": "regex_automata::util::captures::{impl#1}::slots_mut",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/captures.rs:1199:5:1201:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: &mut self.slots\n"
      ],
      "input_infer": "valid inputs include a Captures instance with a non-empty slots vector containing various combinations of Some(NonMaxUsize) and None, as well as an empty slots vector\n",
      "answers": [
        {
          "uses": [
            "use crate::util::primitives::NonMaxUsize;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use crate::util::primitives::NonMaxUsize;",
                "",
                "    let mut captures = Captures {",
                "        group_info: GroupInfo::default(),",
                "        pid: Some(PatternID(SmallIndex(0))),",
                "        slots: vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())),",
                "                    Some(NonMaxUsize(NonZeroUsize::new(2).unwrap()))],",
                "    };",
                "",
                "    let slots_mut = captures.slots_mut();",
                "}"
              ],
              "oracle": [
                "    slots_mut.assert_eq(&mut captures.slots);",
                "    assert!(slots_mut.len() == captures.slots.len());",
                "    assert!(slots_mut.as_ptr() == captures.slots.as_mut_ptr());",
                "    assert!(slots_mut[0] == Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())));",
                "    assert!(slots_mut[1] == Some(NonMaxUsize(NonZeroUsize::new(2).unwrap())));",
                "    captures.slots_mut()[0] = None;",
                "    assert!(captures.slots[0].is_none());",
                "    captures.slots_mut()[1] = Some(NonMaxUsize(NonZeroUsize::new(3).unwrap()));",
                "    assert!(captures.slots[1] == Some(NonMaxUsize(NonZeroUsize::new(3).unwrap())));"
              ],
              "code": [
                "{",
                "    use crate::util::primitives::NonMaxUsize;",
                "",
                "    let mut captures = Captures {",
                "        group_info: GroupInfo::default(),",
                "        pid: Some(PatternID(SmallIndex(0))),",
                "        slots: vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())),",
                "                    Some(NonMaxUsize(NonZeroUsize::new(2).unwrap()))],",
                "    };",
                "",
                "    let slots_mut = captures.slots_mut();",
                "    slots_mut.assert_eq(&mut captures.slots);",
                "    assert!(slots_mut.len() == captures.slots.len());",
                "    assert!(slots_mut.as_ptr() == captures.slots.as_mut_ptr());",
                "    assert!(slots_mut[0] == Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())));",
                "    assert!(slots_mut[1] == Some(NonMaxUsize(NonZeroUsize::new(2).unwrap())));",
                "    captures.slots_mut()[0] = None;",
                "    assert!(captures.slots[0].is_none());",
                "    captures.slots_mut()[1] = Some(NonMaxUsize(NonZeroUsize::new(3).unwrap()));",
                "    assert!(captures.slots[1] == Some(NonMaxUsize(NonZeroUsize::new(3).unwrap())));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut captures = Captures {",
                "        group_info: GroupInfo::default(),",
                "        pid: Some(PatternID(SmallIndex(1))),",
                "        slots: vec![None, Some(NonMaxUsize(NonZeroUsize::new(3).unwrap()))],",
                "    };",
                "",
                "    let slots_mut = captures.slots_mut();",
                "}"
              ],
              "oracle": [
                "    let mut captures = Captures { group_info: GroupInfo::default(), pid: Some(PatternID(SmallIndex(1))), slots: vec![None, Some(NonMaxUsize(NonZeroUsize::new(3).unwrap()))] };",
                "    let slots_mut = captures.slots_mut();",
                "    assert_eq!(slots_mut.len(), 2);",
                "    assert!(slots_mut[0].is_none());",
                "    assert!(slots_mut[1].is_some());",
                "    assert_eq!(slots_mut[1], Some(NonMaxUsize(NonZeroUsize::new(3).unwrap())));",
                "    captures.slots_mut()[0] = Some(NonMaxUsize(NonZeroUsize::new(1).unwrap()));",
                "    assert_eq!(captures.slots()[0], Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())));",
                "    captures.slots_mut()[1] = None;",
                "    assert!(captures.slots()[1].is_none());"
              ],
              "code": [
                "{",
                "    let mut captures = Captures {",
                "        group_info: GroupInfo::default(),",
                "        pid: Some(PatternID(SmallIndex(1))),",
                "        slots: vec![None, Some(NonMaxUsize(NonZeroUsize::new(3).unwrap()))],",
                "    };",
                "",
                "    let slots_mut = captures.slots_mut();",
                "    let mut captures = Captures { group_info: GroupInfo::default(), pid: Some(PatternID(SmallIndex(1))), slots: vec![None, Some(NonMaxUsize(NonZeroUsize::new(3).unwrap()))] };",
                "    let slots_mut = captures.slots_mut();",
                "    assert_eq!(slots_mut.len(), 2);",
                "    assert!(slots_mut[0].is_none());",
                "    assert!(slots_mut[1].is_some());",
                "    assert_eq!(slots_mut[1], Some(NonMaxUsize(NonZeroUsize::new(3).unwrap())));",
                "    captures.slots_mut()[0] = Some(NonMaxUsize(NonZeroUsize::new(1).unwrap()));",
                "    assert_eq!(captures.slots()[0], Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())));",
                "    captures.slots_mut()[1] = None;",
                "    assert!(captures.slots()[1].is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut captures = Captures {",
                "        group_info: GroupInfo::default(),",
                "        pid: None,",
                "        slots: vec![],",
                "    };",
                "",
                "    let slots_mut = captures.slots_mut();",
                "}"
              ],
              "oracle": [
                "    let mut captures = Captures { group_info: GroupInfo::default(), pid: None, slots: vec![None; 10] };",
                "    assert_eq!(captures.slots_mut().len(), 10);",
                "    let slots_mut = captures.slots_mut();",
                "    slots_mut[0] = Some(NonMaxUsize(NonZeroUsize::new(1).unwrap()));",
                "    assert_eq!(captures.slots()[0], Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())));",
                "    let slots_mut_2 = captures.slots_mut();",
                "    slots_mut_2[1] = Some(NonMaxUsize(NonZeroUsize::new(2).unwrap()));",
                "    assert_eq!(captures.slots()[1], Some(NonMaxUsize(NonZeroUsize::new(2).unwrap())));",
                "    let slots_mut_3 = captures.slots_mut();",
                "    assert!(slots_mut_3[3].is_none());",
                "    slots_mut_3[3] = Some(NonMaxUsize(NonZeroUsize::new(3).unwrap()));",
                "    assert_eq!(captures.slots()[3], Some(NonMaxUsize(NonZeroUsize::new(3).unwrap())));",
                "    captures.clear();",
                "    assert!(captures.slots().iter().all(|slot| slot.is_none()));"
              ],
              "code": [
                "{",
                "    let mut captures = Captures {",
                "        group_info: GroupInfo::default(),",
                "        pid: None,",
                "        slots: vec![],",
                "    };",
                "",
                "    let slots_mut = captures.slots_mut();",
                "    let mut captures = Captures { group_info: GroupInfo::default(), pid: None, slots: vec![None; 10] };",
                "    assert_eq!(captures.slots_mut().len(), 10);",
                "    let slots_mut = captures.slots_mut();",
                "    slots_mut[0] = Some(NonMaxUsize(NonZeroUsize::new(1).unwrap()));",
                "    assert_eq!(captures.slots()[0], Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())));",
                "    let slots_mut_2 = captures.slots_mut();",
                "    slots_mut_2[1] = Some(NonMaxUsize(NonZeroUsize::new(2).unwrap()));",
                "    assert_eq!(captures.slots()[1], Some(NonMaxUsize(NonZeroUsize::new(2).unwrap())));",
                "    let slots_mut_3 = captures.slots_mut();",
                "    assert!(slots_mut_3[3].is_none());",
                "    slots_mut_3[3] = Some(NonMaxUsize(NonZeroUsize::new(3).unwrap()));",
                "    assert_eq!(captures.slots()[3], Some(NonMaxUsize(NonZeroUsize::new(3).unwrap())));",
                "    captures.clear();",
                "    assert!(captures.slots().iter().all(|slot| slot.is_none()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}