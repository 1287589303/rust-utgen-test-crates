{
  "name": "regex_syntax::hir::literal::{impl#1}::default",
  "mod_info": {
    "name": "hir::literal",
    "loc": "regex-syntax/src/hir/mod.rs:42:1:42:17"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/literal.rs:630:5:632:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "limit_class in range [0, 100], limit_repeat in range [0, 100], limit_literal_len in range [0, 1000], limit_total in range [0, 1000], kind as ExtractKind::Prefix or ExtractKind::Suffix\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let extractor = Extractor::default();",
                "    // Function call: extractor.extract(hir) would follow",
                "}"
              ],
              "oracle": [
                "    assert_eq!(extractor.kind, ExtractKind::Prefix);",
                "    assert_eq!(extractor.limit_class, 10);",
                "    assert_eq!(extractor.limit_repeat, 10);",
                "    assert_eq!(extractor.limit_literal_len, 100);",
                "    assert_eq!(extractor.limit_total, 250);"
              ],
              "code": [
                "{",
                "    let extractor = Extractor::default();",
                "    // Function call: extractor.extract(hir) would follow",
                "    assert_eq!(extractor.kind, ExtractKind::Prefix);",
                "    assert_eq!(extractor.limit_class, 10);",
                "    assert_eq!(extractor.limit_repeat, 10);",
                "    assert_eq!(extractor.limit_literal_len, 100);",
                "    assert_eq!(extractor.limit_total, 250);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.kind(ExtractKind::Prefix);",
                "    extractor.limit_class(50);",
                "    extractor.limit_repeat(20);",
                "    extractor.limit_literal_len(300);",
                "    extractor.limit_total(500);",
                "    // Function call: extractor.extract(hir) would follow",
                "}"
              ],
              "oracle": [
                "    assert_eq!(extractor.kind, ExtractKind::Prefix);",
                "    assert_eq!(extractor.limit_class, 50);",
                "    assert_eq!(extractor.limit_repeat, 20);",
                "    assert_eq!(extractor.limit_literal_len, 300);",
                "    assert_eq!(extractor.limit_total, 500);"
              ],
              "code": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.kind(ExtractKind::Prefix);",
                "    extractor.limit_class(50);",
                "    extractor.limit_repeat(20);",
                "    extractor.limit_literal_len(300);",
                "    extractor.limit_total(500);",
                "    // Function call: extractor.extract(hir) would follow",
                "    assert_eq!(extractor.kind, ExtractKind::Prefix);",
                "    assert_eq!(extractor.limit_class, 50);",
                "    assert_eq!(extractor.limit_repeat, 20);",
                "    assert_eq!(extractor.limit_literal_len, 300);",
                "    assert_eq!(extractor.limit_total, 500);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.kind(ExtractKind::Suffix);",
                "    extractor.limit_class(10);",
                "    extractor.limit_repeat(5);",
                "    extractor.limit_literal_len(100);",
                "    extractor.limit_total(250);",
                "    // Function call: extractor.extract(hir) would follow",
                "}"
              ],
              "oracle": [
                "    assert_eq!(extractor.kind, ExtractKind::Suffix);",
                "    assert_eq!(extractor.limit_class, 10);",
                "    assert_eq!(extractor.limit_repeat, 5);",
                "    assert_eq!(extractor.limit_literal_len, 100);",
                "    assert_eq!(extractor.limit_total, 250);"
              ],
              "code": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.kind(ExtractKind::Suffix);",
                "    extractor.limit_class(10);",
                "    extractor.limit_repeat(5);",
                "    extractor.limit_literal_len(100);",
                "    extractor.limit_total(250);",
                "    // Function call: extractor.extract(hir) would follow",
                "    assert_eq!(extractor.kind, ExtractKind::Suffix);",
                "    assert_eq!(extractor.limit_class, 10);",
                "    assert_eq!(extractor.limit_repeat, 5);",
                "    assert_eq!(extractor.limit_literal_len, 100);",
                "    assert_eq!(extractor.limit_total, 250);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_class(0);",
                "    extractor.limit_repeat(0);",
                "    extractor.limit_literal_len(0);",
                "    extractor.limit_total(0);",
                "    // Function call: extractor.extract(hir) would follow",
                "}"
              ],
              "oracle": [
                "    assert_eq!(extractor.limit_class, 0);",
                "    assert_eq!(extractor.limit_repeat, 0);",
                "    assert_eq!(extractor.limit_literal_len, 0);",
                "    assert_eq!(extractor.limit_total, 0);",
                "    assert_eq!(extractor.kind, ExtractKind::Prefix);"
              ],
              "code": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_class(0);",
                "    extractor.limit_repeat(0);",
                "    extractor.limit_literal_len(0);",
                "    extractor.limit_total(0);",
                "    // Function call: extractor.extract(hir) would follow",
                "    assert_eq!(extractor.limit_class, 0);",
                "    assert_eq!(extractor.limit_repeat, 0);",
                "    assert_eq!(extractor.limit_literal_len, 0);",
                "    assert_eq!(extractor.limit_total, 0);",
                "    assert_eq!(extractor.kind, ExtractKind::Prefix);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_class(100);",
                "    extractor.limit_repeat(100);",
                "    extractor.limit_literal_len(1000);",
                "    extractor.limit_total(1000);",
                "    // Function call: extractor.extract(hir) would follow",
                "}"
              ],
              "oracle": [
                "    assert_eq!(extractor.limit_class, 100);",
                "    assert_eq!(extractor.limit_repeat, 100);",
                "    assert_eq!(extractor.limit_literal_len, 1000);",
                "    assert_eq!(extractor.limit_total, 1000);",
                "    assert_eq!(extractor.kind, ExtractKind::Prefix);"
              ],
              "code": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_class(100);",
                "    extractor.limit_repeat(100);",
                "    extractor.limit_literal_len(1000);",
                "    extractor.limit_total(1000);",
                "    // Function call: extractor.extract(hir) would follow",
                "    assert_eq!(extractor.limit_class, 100);",
                "    assert_eq!(extractor.limit_repeat, 100);",
                "    assert_eq!(extractor.limit_literal_len, 1000);",
                "    assert_eq!(extractor.limit_total, 1000);",
                "    assert_eq!(extractor.kind, ExtractKind::Prefix);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}