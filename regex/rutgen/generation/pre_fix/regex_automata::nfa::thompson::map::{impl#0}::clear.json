{
  "name": "regex_automata::nfa::thompson::map::{impl#0}::clear",
  "mod_info": {
    "name": "nfa::thompson::map",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:65:1:65:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/map.rs:128:5:140:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.map.is_empty() at line 129 is true\n"
      ],
      "input_infer": "self.map must be empty (length 0) and self.capacity must be a positive integer (greater than 0).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity = 10;",
                "    let mut map = Utf8BoundedMap::new(capacity);",
                "    map.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.version, 1);",
                "    assert_eq!(map.map.len(), capacity);",
                "    assert!(map.map.iter().all(|entry| entry == &Utf8BoundedEntry::default()));",
                "    assert!(map.map.is_empty() == false);",
                "    assert!(map.map[0].version == 0);",
                "    assert!(map.map[0].key.is_empty());",
                "    assert!(map.map[0].val == StateID::default());",
                "    assert_eq!(map.capacity, capacity);"
              ],
              "code": [
                "{",
                "    let capacity = 10;",
                "    let mut map = Utf8BoundedMap::new(capacity);",
                "    map.clear();",
                "    assert_eq!(map.version, 1);",
                "    assert_eq!(map.map.len(), capacity);",
                "    assert!(map.map.iter().all(|entry| entry == &Utf8BoundedEntry::default()));",
                "    assert!(map.map.is_empty() == false);",
                "    assert!(map.map[0].version == 0);",
                "    assert!(map.map[0].key.is_empty());",
                "    assert!(map.map[0].val == StateID::default());",
                "    assert_eq!(map.capacity, capacity);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity = 1;",
                "    let mut map = Utf8BoundedMap::new(capacity);",
                "    map.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.version, 1);",
                "    assert_eq!(map.map.len(), capacity);",
                "    assert!(map.map.iter().all(|entry| entry.version == 0));"
              ],
              "code": [
                "{",
                "    let capacity = 1;",
                "    let mut map = Utf8BoundedMap::new(capacity);",
                "    map.clear();",
                "    assert_eq!(map.version, 1);",
                "    assert_eq!(map.map.len(), capacity);",
                "    assert!(map.map.iter().all(|entry| entry.version == 0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity = 1000;",
                "    let mut map = Utf8BoundedMap::new(capacity);",
                "    map.clear();",
                "}"
              ],
              "oracle": [
                "    map.version == 0",
                "    map.map.len() == capacity",
                "    map.map.iter().all(|entry| entry == &Utf8BoundedEntry::default())"
              ],
              "code": [
                "{",
                "    let capacity = 1000;",
                "    let mut map = Utf8BoundedMap::new(capacity);",
                "    map.clear();",
                "    map.version == 0",
                "    map.map.len() == capacity",
                "    map.map.iter().all(|entry| entry == &Utf8BoundedEntry::default())",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.map.is_empty() at line 129 is false\n",
        "precondition: self.version == 0 at line 136 is false\n"
      ],
      "input_infer": "self.version in range 1 to 65535; self.map must contain at least one Utf8BoundedEntry; self.capacity must be at least 1\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Utf8BoundedMap {",
                "        version: 1,",
                "        capacity: 1,",
                "        map: vec![Utf8BoundedEntry {",
                "            version: 1,",
                "            key: vec![],",
                "            val: StateID(0),",
                "        }],",
                "    };",
                "    map.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.version, 2);",
                "    assert_eq!(map.map.len(), 1);",
                "    assert_eq!(map.map[0].version, 1);",
                "    assert_eq!(map.map[0].key.len(), 0);",
                "    assert_eq!(map.map[0].val, StateID(0));"
              ],
              "code": [
                "{",
                "    let mut map = Utf8BoundedMap {",
                "        version: 1,",
                "        capacity: 1,",
                "        map: vec![Utf8BoundedEntry {",
                "            version: 1,",
                "            key: vec![],",
                "            val: StateID(0),",
                "        }],",
                "    };",
                "    map.clear();",
                "    assert_eq!(map.version, 2);",
                "    assert_eq!(map.map.len(), 1);",
                "    assert_eq!(map.map[0].version, 1);",
                "    assert_eq!(map.map[0].key.len(), 0);",
                "    assert_eq!(map.map[0].val, StateID(0));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Utf8BoundedMap {",
                "        version: 65535,",
                "        capacity: 2,",
                "        map: vec![",
                "            Utf8BoundedEntry {",
                "                version: 65535,",
                "                key: vec![],",
                "                val: StateID(1),",
                "            },",
                "            Utf8BoundedEntry {",
                "                version: 65535,",
                "                key: vec![],",
                "                val: StateID(2),",
                "            },",
                "        ],",
                "    };",
                "    map.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.version, 0);",
                "    assert_eq!(map.map.len(), 2);",
                "    assert_eq!(map.map[0].version, 0);",
                "    assert_eq!(map.map[1].version, 0);",
                "    assert!(map.map[0].key.is_empty());",
                "    assert!(map.map[1].key.is_empty());",
                "    assert_eq!(map.map[0].val, StateID(1));",
                "    assert_eq!(map.map[1].val, StateID(2));"
              ],
              "code": [
                "{",
                "    let mut map = Utf8BoundedMap {",
                "        version: 65535,",
                "        capacity: 2,",
                "        map: vec![",
                "            Utf8BoundedEntry {",
                "                version: 65535,",
                "                key: vec![],",
                "                val: StateID(1),",
                "            },",
                "            Utf8BoundedEntry {",
                "                version: 65535,",
                "                key: vec![],",
                "                val: StateID(2),",
                "            },",
                "        ],",
                "    };",
                "    map.clear();",
                "    assert_eq!(map.version, 0);",
                "    assert_eq!(map.map.len(), 2);",
                "    assert_eq!(map.map[0].version, 0);",
                "    assert_eq!(map.map[1].version, 0);",
                "    assert!(map.map[0].key.is_empty());",
                "    assert!(map.map[1].key.is_empty());",
                "    assert_eq!(map.map[0].val, StateID(1));",
                "    assert_eq!(map.map[1].val, StateID(2));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Utf8BoundedMap {",
                "        version: 100,",
                "        capacity: 3,",
                "        map: vec![",
                "            Utf8BoundedEntry {",
                "                version: 100,",
                "                key: vec![],",
                "                val: StateID(3),",
                "            },",
                "            Utf8BoundedEntry {",
                "                version: 100,",
                "                key: vec![],",
                "                val: StateID(4),",
                "            },",
                "            Utf8BoundedEntry {",
                "                version: 100,",
                "                key: vec![],",
                "                val: StateID(5),",
                "            },",
                "        ],",
                "    };",
                "    map.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.version, 101);",
                "    assert_eq!(map.map[0].version, 100);",
                "    assert_eq!(map.map[1].version, 100);",
                "    assert_eq!(map.map[2].version, 100);",
                "    assert!(map.map.iter().all(|entry| entry.key.is_empty()));",
                "    assert_eq!(map.map.len(), map.capacity);",
                "    assert!(map.map.iter().all(|entry| entry.val == StateID(3) || entry.val == StateID(4) || entry.val == StateID(5)));"
              ],
              "code": [
                "{",
                "    let mut map = Utf8BoundedMap {",
                "        version: 100,",
                "        capacity: 3,",
                "        map: vec![",
                "            Utf8BoundedEntry {",
                "                version: 100,",
                "                key: vec![],",
                "                val: StateID(3),",
                "            },",
                "            Utf8BoundedEntry {",
                "                version: 100,",
                "                key: vec![],",
                "                val: StateID(4),",
                "            },",
                "            Utf8BoundedEntry {",
                "                version: 100,",
                "                key: vec![],",
                "                val: StateID(5),",
                "            },",
                "        ],",
                "    };",
                "    map.clear();",
                "    assert_eq!(map.version, 101);",
                "    assert_eq!(map.map[0].version, 100);",
                "    assert_eq!(map.map[1].version, 100);",
                "    assert_eq!(map.map[2].version, 100);",
                "    assert!(map.map.iter().all(|entry| entry.key.is_empty()));",
                "    assert_eq!(map.map.len(), map.capacity);",
                "    assert!(map.map.iter().all(|entry| entry.val == StateID(3) || entry.val == StateID(4) || entry.val == StateID(5)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: self.map.is_empty() at line 129 is false\n",
        "precondition: self.version == 0 at line 136 is true\n"
      ],
      "input_infer": "self.map must contain at least one entry (non-empty) and self.version must be 0 (clear map completely)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Utf8BoundedMap {",
                "        version: 0,",
                "        capacity: 5,",
                "        map: vec![Utf8BoundedEntry {",
                "            version: 0,",
                "            key: vec![],",
                "            val: StateID::default(),",
                "        }],",
                "    };",
                "    map.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.version, 1);",
                "    assert!(map.map.iter().all(|entry| entry.version == 0));",
                "    assert!(map.map.iter().all(|entry| entry.key.is_empty()));",
                "    assert!(map.map.iter().all(|entry| entry.val == StateID::default()));"
              ],
              "code": [
                "{",
                "    let mut map = Utf8BoundedMap {",
                "        version: 0,",
                "        capacity: 5,",
                "        map: vec![Utf8BoundedEntry {",
                "            version: 0,",
                "            key: vec![],",
                "            val: StateID::default(),",
                "        }],",
                "    };",
                "    map.clear();",
                "    assert_eq!(map.version, 1);",
                "    assert!(map.map.iter().all(|entry| entry.version == 0));",
                "    assert!(map.map.iter().all(|entry| entry.key.is_empty()));",
                "    assert!(map.map.iter().all(|entry| entry.val == StateID::default()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Utf8BoundedMap {",
                "        version: 0,",
                "        capacity: 10,",
                "        map: vec![",
                "            Utf8BoundedEntry {",
                "                version: 0,",
                "                key: vec![],",
                "                val: StateID::default(),",
                "            },",
                "            Utf8BoundedEntry {",
                "                version: 0,",
                "                key: vec![],",
                "                val: StateID::default(),",
                "            },",
                "        ],",
                "    };",
                "    map.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.version, 1);",
                "    assert_eq!(map.map.len(), 10);",
                "    assert!(map.map.iter().all(|entry| entry.version == 0));",
                "    assert!(map.map.iter().all(|entry| entry.key.is_empty()));",
                "    assert!(map.map.iter().all(|entry| entry.val == StateID::default()));"
              ],
              "code": [
                "{",
                "    let mut map = Utf8BoundedMap {",
                "        version: 0,",
                "        capacity: 10,",
                "        map: vec![",
                "            Utf8BoundedEntry {",
                "                version: 0,",
                "                key: vec![],",
                "                val: StateID::default(),",
                "            },",
                "            Utf8BoundedEntry {",
                "                version: 0,",
                "                key: vec![],",
                "                val: StateID::default(),",
                "            },",
                "        ],",
                "    };",
                "    map.clear();",
                "    assert_eq!(map.version, 1);",
                "    assert_eq!(map.map.len(), 10);",
                "    assert!(map.map.iter().all(|entry| entry.version == 0));",
                "    assert!(map.map.iter().all(|entry| entry.key.is_empty()));",
                "    assert!(map.map.iter().all(|entry| entry.val == StateID::default()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Utf8BoundedMap {",
                "        version: 0,",
                "        capacity: 100,",
                "        map: vec![Utf8BoundedEntry {",
                "            version: 0,",
                "            key: vec![],",
                "            val: StateID::default(),",
                "        }; 100],",
                "    };",
                "    map.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.version, 1);",
                "    assert!(map.map.iter().all(|entry| entry.version == 0));",
                "    assert!(map.map.iter().all(|entry| entry.key.is_empty()));",
                "    assert!(map.map.iter().all(|entry| entry.val == StateID::default()));"
              ],
              "code": [
                "{",
                "    let mut map = Utf8BoundedMap {",
                "        version: 0,",
                "        capacity: 100,",
                "        map: vec![Utf8BoundedEntry {",
                "            version: 0,",
                "            key: vec![],",
                "            val: StateID::default(),",
                "        }; 100],",
                "    };",
                "    map.clear();",
                "    assert_eq!(map.version, 1);",
                "    assert!(map.map.iter().all(|entry| entry.version == 0));",
                "    assert!(map.map.iter().all(|entry| entry.key.is_empty()));",
                "    assert!(map.map.iter().all(|entry| entry.val == StateID::default()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}