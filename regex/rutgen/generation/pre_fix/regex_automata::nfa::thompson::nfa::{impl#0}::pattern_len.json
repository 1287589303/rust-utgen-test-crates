{
  "name": "regex_automata::nfa::thompson::nfa::{impl#0}::pattern_len",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:440:5:442:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Valid input patterns: [], [\"pattern1\"], [\"pattern1\", \"pattern2\", ..., \"patternN\"] where 0 <= N <= PatternID::LIMIT; test cases for NFA construction scenarios: no patterns, one pattern, multiple patterns within limit, maximum patterns, and boundary checks for patterns.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nfa = NFA::never_match();",
                "    let _ = nfa.pattern_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(0, nfa.pattern_len());",
                "    ",
                "    let nfa = NFA::always_match();",
                "    assert_eq!(1, nfa.pattern_len());",
                "    ",
                "    let nfa = NFA::new_many(&[\"[0-9]+\", \"[a-z]+\", \"[A-Z]+\"]).unwrap();",
                "    assert_eq!(3, nfa.pattern_len());"
              ],
              "code": [
                "{",
                "    let nfa = NFA::never_match();",
                "    let _ = nfa.pattern_len();",
                "    assert_eq!(0, nfa.pattern_len());",
                "    ",
                "    let nfa = NFA::always_match();",
                "    assert_eq!(1, nfa.pattern_len());",
                "    ",
                "    let nfa = NFA::new_many(&[\"[0-9]+\", \"[a-z]+\", \"[A-Z]+\"]).unwrap();",
                "    assert_eq!(3, nfa.pattern_len());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nfa = NFA::new_many(&[\"pattern1\"]).unwrap();",
                "    let _ = nfa.pattern_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(1, nfa.pattern_len());",
                "    ",
                "    let nfa = NFA::new_many(&[\"pattern1\", \"pattern2\"]).unwrap();",
                "    assert_eq!(2, nfa.pattern_len());",
                "    ",
                "    let nfa = NFA::new_many(&[]).unwrap();",
                "    assert_eq!(0, nfa.pattern_len());",
                "    ",
                "    let nfa = NFA::always_match();",
                "    assert_eq!(1, nfa.pattern_len());",
                "    ",
                "    let nfa = NFA::never_match();",
                "    assert_eq!(0, nfa.pattern_len());"
              ],
              "code": [
                "{",
                "    let nfa = NFA::new_many(&[\"pattern1\"]).unwrap();",
                "    let _ = nfa.pattern_len();",
                "    assert_eq!(1, nfa.pattern_len());",
                "    ",
                "    let nfa = NFA::new_many(&[\"pattern1\", \"pattern2\"]).unwrap();",
                "    assert_eq!(2, nfa.pattern_len());",
                "    ",
                "    let nfa = NFA::new_many(&[]).unwrap();",
                "    assert_eq!(0, nfa.pattern_len());",
                "    ",
                "    let nfa = NFA::always_match();",
                "    assert_eq!(1, nfa.pattern_len());",
                "    ",
                "    let nfa = NFA::never_match();",
                "    assert_eq!(0, nfa.pattern_len());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let patterns = vec![\"pattern1\", \"pattern2\"];",
                "    let nfa = NFA::new_many(&patterns).unwrap();",
                "    let _ = nfa.pattern_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(nfa.pattern_len(), 2);",
                "    assert_eq!(NFA::never_match().pattern_len(), 0);",
                "    assert_eq!(NFA::always_match().pattern_len(), 1);",
                "    assert_eq!(NFA::new_many(&[]).unwrap().pattern_len(), 0);",
                "    assert_eq!(NFA::new_many(&[\"pattern\"]).unwrap().pattern_len(), 1);",
                "    assert_eq!(NFA::new_many(&[\"pattern1\", \"pattern2\", \"pattern3\"]).unwrap().pattern_len(), 3);"
              ],
              "code": [
                "{",
                "    let patterns = vec![\"pattern1\", \"pattern2\"];",
                "    let nfa = NFA::new_many(&patterns).unwrap();",
                "    let _ = nfa.pattern_len();",
                "    assert_eq!(nfa.pattern_len(), 2);",
                "    assert_eq!(NFA::never_match().pattern_len(), 0);",
                "    assert_eq!(NFA::always_match().pattern_len(), 1);",
                "    assert_eq!(NFA::new_many(&[]).unwrap().pattern_len(), 0);",
                "    assert_eq!(NFA::new_many(&[\"pattern\"]).unwrap().pattern_len(), 1);",
                "    assert_eq!(NFA::new_many(&[\"pattern1\", \"pattern2\", \"pattern3\"]).unwrap().pattern_len(), 3);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let patterns: Vec<&str> = (0..PatternID::LIMIT).map(|i| format!(\"pattern{}\", i).as_str()).collect();",
                "    let nfa = NFA::new_many(&patterns).unwrap();",
                "    let _ = nfa.pattern_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(nfa.pattern_len(), PatternID::LIMIT);",
                "    assert_eq!(NFA::never_match().pattern_len(), 0);",
                "    assert_eq!(NFA::always_match().pattern_len(), 1);",
                "    assert_eq!(nfa.pattern_len(), nfa.patterns().count());"
              ],
              "code": [
                "{",
                "    let patterns: Vec<&str> = (0..PatternID::LIMIT).map(|i| format!(\"pattern{}\", i).as_str()).collect();",
                "    let nfa = NFA::new_many(&patterns).unwrap();",
                "    let _ = nfa.pattern_len();",
                "    assert_eq!(nfa.pattern_len(), PatternID::LIMIT);",
                "    assert_eq!(NFA::never_match().pattern_len(), 0);",
                "    assert_eq!(NFA::always_match().pattern_len(), 1);",
                "    assert_eq!(nfa.pattern_len(), nfa.patterns().count());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let patterns: Vec<&str> = (0..PatternID::LIMIT - 1).map(|i| format!(\"pattern{}\", i).as_str()).collect();",
                "    let nfa = NFA::new_many(&patterns).unwrap();",
                "    let _ = nfa.pattern_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(nfa.pattern_len(), PatternID::LIMIT - 1);",
                "    let nfa = NFA::never_match();",
                "    assert_eq!(nfa.pattern_len(), 0);",
                "    let nfa = NFA::always_match();",
                "    assert_eq!(nfa.pattern_len(), 1);",
                "    let nfa = NFA::new_many(&[]).unwrap();",
                "    assert_eq!(nfa.pattern_len(), 0);"
              ],
              "code": [
                "{",
                "    let patterns: Vec<&str> = (0..PatternID::LIMIT - 1).map(|i| format!(\"pattern{}\", i).as_str()).collect();",
                "    let nfa = NFA::new_many(&patterns).unwrap();",
                "    let _ = nfa.pattern_len();",
                "    assert_eq!(nfa.pattern_len(), PatternID::LIMIT - 1);",
                "    let nfa = NFA::never_match();",
                "    assert_eq!(nfa.pattern_len(), 0);",
                "    let nfa = NFA::always_match();",
                "    assert_eq!(nfa.pattern_len(), 1);",
                "    let nfa = NFA::new_many(&[]).unwrap();",
                "    assert_eq!(nfa.pattern_len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}