{
  "name": "regex_automata::dfa::sparse::{impl#12}::iter",
  "mod_info": {
    "name": "dfa::sparse",
    "loc": "regex-automata/src/dfa/mod.rs:343:1:343:16"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/sparse.rs:2111:5:2113:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: StartStateIter { st: self, i: 0 }\n"
      ],
      "input_infer": "input conditions: StartTable<T> with valid vec or slice of u8, non-negative i (0 <= i < length of table) and any valid StartKind, pattern_len as Some(n) or None, universal_start_unanchored and universal_start_anchored as Some(StateID) or None, where length of table is 8 + stride * (pattern_len.unwrap_or(0)).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: Vec<u8> = vec![];",
                "    let start_map = StartByteMap { map: [Start::default(); 256] };",
                "    let start_table = StartTable {",
                "        table,",
                "        kind: StartKind::Both,",
                "        start_map,",
                "        stride: 0,",
                "        pattern_len: None,",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: None,",
                "    };",
                "",
                "    let iter = start_table.iter();",
                "}"
              ],
              "oracle": [
                "    let table: Vec<u8> = vec![];",
                "    let start_map = StartByteMap { map: [Start::default(); 256] };",
                "    let start_table = StartTable {",
                "    table,",
                "    kind: StartKind::Both,",
                "    start_map,",
                "    stride: 0,",
                "    pattern_len: None,",
                "    universal_start_unanchored: None,",
                "    universal_start_anchored: None,",
                "    };",
                "    let iter = start_table.iter();",
                "    assert_eq!(iter.st, &start_table);",
                "    assert_eq!(iter.i, 0);"
              ],
              "code": [
                "{",
                "    let table: Vec<u8> = vec![];",
                "    let start_map = StartByteMap { map: [Start::default(); 256] };",
                "    let start_table = StartTable {",
                "        table,",
                "        kind: StartKind::Both,",
                "        start_map,",
                "        stride: 0,",
                "        pattern_len: None,",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: None,",
                "    };",
                "",
                "    let iter = start_table.iter();",
                "    let table: Vec<u8> = vec![];",
                "    let start_map = StartByteMap { map: [Start::default(); 256] };",
                "    let start_table = StartTable {",
                "    table,",
                "    kind: StartKind::Both,",
                "    start_map,",
                "    stride: 0,",
                "    pattern_len: None,",
                "    universal_start_unanchored: None,",
                "    universal_start_anchored: None,",
                "    };",
                "    let iter = start_table.iter();",
                "    assert_eq!(iter.st, &start_table);",
                "    assert_eq!(iter.i, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: Vec<u8> = vec![0; 8]; // 8 entries for unanchored and anchored starts",
                "    let start_map = StartByteMap { map: [Start::default(); 256] };",
                "    let start_table = StartTable {",
                "        table,",
                "        kind: StartKind::Both,",
                "        start_map,",
                "        stride: 0,",
                "        pattern_len: None,",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: None,",
                "    };",
                "",
                "    let iter = start_table.iter();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(iter.st, &start_table);",
                "    assert_eq!(iter.i, 0);"
              ],
              "code": [
                "{",
                "    let table: Vec<u8> = vec![0; 8]; // 8 entries for unanchored and anchored starts",
                "    let start_map = StartByteMap { map: [Start::default(); 256] };",
                "    let start_table = StartTable {",
                "        table,",
                "        kind: StartKind::Both,",
                "        start_map,",
                "        stride: 0,",
                "        pattern_len: None,",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: None,",
                "    };",
                "",
                "    let iter = start_table.iter();",
                "    assert_eq!(iter.st, &start_table);",
                "    assert_eq!(iter.i, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: Vec<u8> = vec![0; 8 + 3]; // 8 entries + stride of 3 for 1 pattern",
                "    let start_map = StartByteMap { map: [Start::default(); 256] };",
                "    let start_table = StartTable {",
                "        table,",
                "        kind: StartKind::Both,",
                "        start_map,",
                "        stride: 1,",
                "        pattern_len: Some(1),",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: None,",
                "    };",
                "",
                "    let iter = start_table.iter();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(iter.st.table.as_ref(), start_table.table.as_ref());",
                "    assert_eq!(iter.i, 0);",
                "    assert!(std::mem::size_of_val(&iter) == size_of::<StartStateIter<'_, Vec<u8>>>());"
              ],
              "code": [
                "{",
                "    let table: Vec<u8> = vec![0; 8 + 3]; // 8 entries + stride of 3 for 1 pattern",
                "    let start_map = StartByteMap { map: [Start::default(); 256] };",
                "    let start_table = StartTable {",
                "        table,",
                "        kind: StartKind::Both,",
                "        start_map,",
                "        stride: 1,",
                "        pattern_len: Some(1),",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: None,",
                "    };",
                "",
                "    let iter = start_table.iter();",
                "    assert_eq!(iter.st.table.as_ref(), start_table.table.as_ref());",
                "    assert_eq!(iter.i, 0);",
                "    assert!(std::mem::size_of_val(&iter) == size_of::<StartStateIter<'_, Vec<u8>>>());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: Vec<u8> = vec![0; 8 + 4]; // 8 entries + stride of 4 for 1 pattern",
                "    let start_map = StartByteMap { map: [Start::default(); 256] };",
                "    let start_table = StartTable {",
                "        table,",
                "        kind: StartKind::Both,",
                "        start_map,",
                "        stride: 1,",
                "        pattern_len: Some(1),",
                "        universal_start_unanchored: Some(StateID(0)),",
                "        universal_start_anchored: Some(StateID(1)),",
                "    };",
                "",
                "    let iter = start_table.iter();",
                "}"
              ],
              "oracle": [
                "    let iter = start_table.iter();",
                "    assert_eq!(iter.i, 0);",
                "    assert_eq!(iter.st.table.len(), 12);",
                "    assert_eq!(iter.st.kind, StartKind::Both);",
                "    assert!(iter.st.pattern_len.is_some());",
                "    assert_eq!(iter.st.universal_start_unanchored, Some(StateID(0)));",
                "    assert_eq!(iter.st.universal_start_anchored, Some(StateID(1)));"
              ],
              "code": [
                "{",
                "    let table: Vec<u8> = vec![0; 8 + 4]; // 8 entries + stride of 4 for 1 pattern",
                "    let start_map = StartByteMap { map: [Start::default(); 256] };",
                "    let start_table = StartTable {",
                "        table,",
                "        kind: StartKind::Both,",
                "        start_map,",
                "        stride: 1,",
                "        pattern_len: Some(1),",
                "        universal_start_unanchored: Some(StateID(0)),",
                "        universal_start_anchored: Some(StateID(1)),",
                "    };",
                "",
                "    let iter = start_table.iter();",
                "    let iter = start_table.iter();",
                "    assert_eq!(iter.i, 0);",
                "    assert_eq!(iter.st.table.len(), 12);",
                "    assert_eq!(iter.st.kind, StartKind::Both);",
                "    assert!(iter.st.pattern_len.is_some());",
                "    assert_eq!(iter.st.universal_start_unanchored, Some(StateID(0)));",
                "    assert_eq!(iter.st.universal_start_anchored, Some(StateID(1)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: Vec<u8> = vec![0; 8]; // adequate for only unanchored starts",
                "    let start_map = StartByteMap { map: [Start::default(); 256] };",
                "    let start_table = StartTable {",
                "        table,",
                "        kind: StartKind::Unanchored,",
                "        start_map,",
                "        stride: 0,",
                "        pattern_len: None,",
                "        universal_start_unanchored: Some(StateID(0)),",
                "        universal_start_anchored: None,",
                "    };",
                "",
                "    let iter = start_table.iter();",
                "}"
              ],
              "oracle": [
                "    let start_table = StartTable { table: vec![0; 8], kind: StartKind::Unanchored, start_map: StartByteMap { map: [Start::default(); 256] }, stride: 0, pattern_len: None, universal_start_unanchored: Some(StateID(0)), universal_start_anchored: None };",
                "    let iter = start_table.iter();",
                "    assert_eq!(iter.st, &start_table);",
                "    assert_eq!(iter.i, 0);"
              ],
              "code": [
                "{",
                "    let table: Vec<u8> = vec![0; 8]; // adequate for only unanchored starts",
                "    let start_map = StartByteMap { map: [Start::default(); 256] };",
                "    let start_table = StartTable {",
                "        table,",
                "        kind: StartKind::Unanchored,",
                "        start_map,",
                "        stride: 0,",
                "        pattern_len: None,",
                "        universal_start_unanchored: Some(StateID(0)),",
                "        universal_start_anchored: None,",
                "    };",
                "",
                "    let iter = start_table.iter();",
                "    let start_table = StartTable { table: vec![0; 8], kind: StartKind::Unanchored, start_map: StartByteMap { map: [Start::default(); 256] }, stride: 0, pattern_len: None, universal_start_unanchored: Some(StateID(0)), universal_start_anchored: None };",
                "    let iter = start_table.iter();",
                "    assert_eq!(iter.st, &start_table);",
                "    assert_eq!(iter.i, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: Vec<u8> = vec![0; 8]; // adequate for only anchored starts",
                "    let start_map = StartByteMap { map: [Start::default(); 256] };",
                "    let start_table = StartTable {",
                "        table,",
                "        kind: StartKind::Anchored,",
                "        start_map,",
                "        stride: 0,",
                "        pattern_len: None,",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: Some(StateID(1)),",
                "    };",
                "",
                "    let iter = start_table.iter();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(iter.st, &start_table);",
                "    assert_eq!(iter.i, 0);"
              ],
              "code": [
                "{",
                "    let table: Vec<u8> = vec![0; 8]; // adequate for only anchored starts",
                "    let start_map = StartByteMap { map: [Start::default(); 256] };",
                "    let start_table = StartTable {",
                "        table,",
                "        kind: StartKind::Anchored,",
                "        start_map,",
                "        stride: 0,",
                "        pattern_len: None,",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: Some(StateID(1)),",
                "    };",
                "",
                "    let iter = start_table.iter();",
                "    assert_eq!(iter.st, &start_table);",
                "    assert_eq!(iter.i, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}